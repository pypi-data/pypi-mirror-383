# This file is part of Xpra.
# Copyright (C) 2015 Antoine Martin <antoine@xpra.org>
# Xpra is released under the terms of the GNU GPL v2, or, at your option, any
# later version. See the file COPYING for details.

# pylint: disable=line-too-long
# noinspection PyPep8

import struct
import binascii
from typing import Any, TypeAlias
from collections.abc import Callable, Sequence, Iterable

from xpra.common import roundup
from xpra.codecs.constants import EncodingNotSupported
from xpra.util.objects import typedict
from xpra.util.str_fn import csv
from xpra.log import Logger
log = Logger("encoding")

# Warning: many systems will fail above 8k because of memory constraints
# encoders can allocate many times more memory to hold the frames..
TEST_LIMIT_W, TEST_LIMIT_H = 8192, 8192


def unhexlify(s: str) -> bytes:
    return binascii.unhexlify(s.replace(" ", "").replace("\n", ""))


def unhex(s: str) -> tuple[bytes, dict[str, Any]]:
    return unhexlify(s), {}


DEFAULT_TEST_SIZE = 128, 128

TEST_COLORS: dict[str, str] = {
    "black": "000000ff",
    "white": "ffffffff",
    "green": "00ff00ff",
    "red": "ff0000ff",
    "blue": "0000ffff",
    "cyan": "00ffffff",
    "magenta": "ff00ffff",
    "yellow": "ffff00ff",
}


TEST_DATA: TypeAlias = Sequence[tuple[bytes, dict[str, Any]]]

# this test data was generated using a 24x16 blank image as input
TEST_COMPRESSED_DATA: dict[str, dict[str, dict[tuple[int, int], TEST_DATA]]] = {
    "h264": {
        "YUV420P": {
            (24, 16): (
                unhex("000000010910000000016742c015da2f97c05a8303035280000003008000001e478b17500000000168ce3c800000010605ffffa7dc45e9bde6d948b7962cd820d923eeef78323634202d20636f7265203136342072333039352062616565343030202d20482e3236342f4d5045472d342041564320636f646563202d20436f70796c65667420323030332d32303232202d20687474703a2f2f7777772e766964656f6c616e2e6f72672f783236342e68746d6c202d206f7074696f6e733a2063616261633d30207265663d31206465626c6f636b3d303a303a3020616e616c7973653d303a30206d653d646961207375626d653d30207073793d31207073795f72643d312e30303a302e3030206d697865645f7265663d30206d655f72616e67653d3136206368726f6d615f6d653d31207472656c6c69733d30203878386463743d302063716d3d3020646561647a6f6e653d32312c313120666173745f70736b69703d31206368726f6d615f71705f6f66667365743d3020746872656164733d31206c6f6f6b61686561645f746872656164733d3120736c696365645f746872656164733d30206e723d3020646563696d6174653d3120696e7465726c616365643d3020626c757261795f636f6d7061743d3020636f6e73747261696e65645f696e7472613d3020626672616d65733d3020776569676874703d30206b6579696e743d333030206b6579696e745f6d696e3d3330207363656e656375743d3020696e7472615f726566726573683d302072635f6c6f6f6b61686561643d302072633d636272206d62747265653d3020626974726174653d323034382072617465746f6c3d312e302071636f6d703d302e36302071706d696e3d302071706d61783d3639207170737465703d34207662765f6d6178726174653d32303438207662765f62756673697a653d31323238206e616c5f6872643d6e6f6e652066696c6c65723d302069705f726174696f3d312e34302061713d30008000000165888406a8930a0003e4d24f80"),
                unhex("000000010930000001419a201aa7"),
                unhex("000000010930000001419a401aa7"),
                unhex("000000010930000001419a601aa7"),
                unhex("000000010930000001419a801aa7"),
            ),
            (128, 128): (
                unhex("000000010910000000016742c015da0811b016a0c0c0d4a0000003002000000791e2c5d40000000168ce3c800000010605ffffb0dc45e9bde6d948b7962cd820d923eeef78323634202d20636f7265203136342072333039352062616565343030202d20482e3236342f4d5045472d342041564320636f646563202d20436f70796c65667420323030332d32303232202d20687474703a2f2f7777772e766964656f6c616e2e6f72672f783236342e68746d6c202d206f7074696f6e733a2063616261633d30207265663d31206465626c6f636b3d303a303a3020616e616c7973653d303a30206d653d646961207375626d653d30207073793d31207073795f72643d312e30303a302e3030206d697865645f7265663d30206d655f72616e67653d3136206368726f6d615f6d653d31207472656c6c69733d30203878386463743d302063716d3d3020646561647a6f6e653d32312c313120666173745f70736b69703d31206368726f6d615f71705f6f66667365743d3020746872656164733d32206c6f6f6b61686561645f746872656164733d3220736c696365645f746872656164733d3120736c696365733d32206e723d3020646563696d6174653d3120696e7465726c616365643d3020626c757261795f636f6d7061743d3020636f6e73747261696e65645f696e7472613d3020626672616d65733d3020776569676874703d30206b6579696e743d333030206b6579696e745f6d696e3d3330207363656e656375743d3020696e7472615f726566726573683d302072635f6c6f6f6b61686561643d302072633d636272206d62747265653d3020626974726174653d323034382072617465746f6c3d312e302071636f6d703d302e36302071706d696e3d302071706d61783d3639207170737465703d34207662765f6d6178726174653d32303438207662765f62756673697a653d31323238206e616c5f6872643d6e6f6e652066696c6c65723d302069705f726174696f3d312e34302061713d30008000000165888406a8930a0003e4d24f2727272727275d75d75d75d75d75d75d75d75d75d75d75d7800000016504222101aa24c28000f93493c9c9c9c9c9c9d75d75d75d75d75d75d75d75d75d75d75d75e0"),
                unhex("000000010930000001419a201aa0430000014104268806a810c0"),
                unhex("000000010930000001419a401aa0430000014104269006a810c0"),
                unhex("000000010930000001419a601aa0430000014104269806a810c0"),
                unhex("000000010930000001419a801aa043000001410426a006a810c0"),
            ),
            # gst-launch-1.0 videotestsrc pattern=white !
            #    ! video/x-raw,width=320,height=240,format="I420"
            #    ! x264enc bframes=0 byte-stream=yes cabac=false mb-tree=false me=0 ref=1 speed-preset=ultrafast tune=zerolatency
            #    ! multifilesink location="frame%d.h264"
            (320, 240): (
                unhex("000000016764000dacb60a0fd0800000030080000019478a15700000000168eac7cb0000010605ffff63dc45e9bde6d948b7962cd820d923eeef78323634202d20636f726520313634202d20482e3236342f4d5045472d342041564320636f646563202d20436f70796c65667420323030332d32303232202d20687474703a2f2f7777772e766964656f6c616e2e6f72672f783236342e68746d6c202d206f7074696f6e733a2063616261633d31207265663d32206465626c6f636b3d313a303a3020616e616c7973653d3078333a3078313133206d653d686578207375626d653d34207073793d31207073795f72643d312e30303a302e3030206d697865645f7265663d30206d655f72616e67653d3136206368726f6d615f6d653d31207472656c6c69733d31203878386463743d312063716d3d3020646561647a6f6e653d32312c313120666173745f70736b69703d31206368726f6d615f71705f6f66667365743d3020746872656164733d33206c6f6f6b61686561645f746872656164733d3320736c696365645f746872656164733d3120736c696365733d33206e723d3020646563696d6174653d3120696e7465726c616365643d3020626c757261795f636f6d7061743d3020636f6e73747261696e65645f696e7472613d3020626672616d65733d3020776569676874703d31206b6579696e743d696e66696e697465206b6579696e745f6d696e3d353336383730393133207363656e656375743d343020696e7472615f726566726573683d302072633d637266206d62747265653d30206372663d32352e352071636f6d703d302e36302071706d696e3d302071706d61783d3639207170737465703d342069705f726174696f3d312e34302061713d313a312e30300080000001658884bfec8379243fc166cd742d58eeed7a7ffe535260f6de404c6b2a0a81cf8d13414a821aecc4815cdd531d64d15e36f259199d0f166d8e5adfbf4d11261d8a801e7bb5eb23f1d83575daec88f4c42a99313316eefaa221c0ed115cc6f628faed7d722062c989d1845ccc2419d69f02ba9f418275b0ce40cc617567cfd88ecca05eb3d8ec9e6e1dd875933073f89b624ff665ed33c56e1e6d8bd54580ade3f4495be80899b7948f824c6280c9db890393b71207530fe59b2276e240e4edc481c9d95754049d276e240e4edc481c9d7cd47247171207276e240e4edc416f66d92c9db890393b71207275e8e5555a1c90393b71207276e20d131cd6a07276e240e4edc481b48603c510393b71207276e240da7e5f1b839207276e240e4edc41e11ef55276e240e4edc481c9d807af959b890393b71207276e2c6236b3d97e789fd57d054442362f46996c0955a3ea38b49a50384338248608dea0c4ca5b19f06a49000001650328884bffec8379243fc166cd742d58eeed7a7ffe535260f6de404c6b2a0a81cf8d13414a821aecc4815cdd531d64d15e36f259199d0f166d8e5adfbf4d11261d8a801e7bb5eb23f1d83575daec88f4c42a99313316eefaa221c0ed115cc6f628faed7d722062c989d1845ccc2419d69f02ba9f418275b0ce40cc617567cfd88ecca05eb3d8ec9e6e1dd875933073f89b624ff665ed33c56e1e6d8bd54580ade3f4495be80899b7948f824c6280c9db890393b71207530fe59b2276e240e4edc481c9d95754049d276e240e4edc481c9d7cd47247171207276e240e4edc416f66d92c9db890393b71207275e8e5555a1c90393b71207276e20d131cd6a07276e240e4edc481b48603c510393b71207276e240da7e5f1b839207276e240e4edc41e11ef55276e240e4edc481c9d807af959b890393b71207276e2c6236b3d97e789fd57d054442362f46996c0955a3ea38b49a50384338248608dea0c4ca5b19f06a490000016501922212ffec8379243fc166cd742d58eeed7a7ffe535260f6de404c6b2a0a81cf8d13414a821aecc4815cdd531d64d15e36f259199d0f166d8e5adfbf4d11261d8a801e7bb5eb23f1d83575daec88f4c42a99313316eefaa221c0ed115cc6f628faed7d722062c989d1845ccc2419d69f02ba9f418275b0ce40cc617567cfd88ecca05eb3d8ec9e6e1dd875933073f89b624ff665ed33c56e1e6d8bd54580ade3f4495be80899b7948f824c6280c9db890393b71207530fe59b2276e240e4edc481c9d95754049d276e240e4edc481c9d7cd47247171207276e240e4edc416f66d92c9db890393b71207275e8e5555a1c90393b71207276e20d131cd6a07276e240e4edc481b48603c510393b71207276e240da7e5f1b839207276e240e4edc41e11ef55276e240e4edc481c9d807af959b890393b71207276e2c6236b3d97e789fd57d054442362f46996c0955a3ea38b49a50384338248608dea0c4ca5b19f06a49"),
                unhex("00000001419a3b108bfffa580103000001410329a3b108bffa58010300000141019268ec422ffa580103"),
                unhex("00000001419a460845fffa580103000001410329a460845ffa58010300000141019269182117fffa580103"),
                unhex("00000001419a66084dfffc84008380000001410329a66084dffc8400838000000141019269982137fffc84008380"),
                unhex("00000001419a86084dfffc84008381000001410329a86084dffc840083810000014101926a182137fffc84008381"),
            ),
        },
        "YUV422P": {
            (24, 16): (
                unhex("00000001677a000abcb317cbc2000003000200000300651e244cd00000000168e970312c8b0000010605ffff56dc45e9bde6d948b7962cd820d923eeef78323634202d20636f726520313432202d20482e3236342f4d5045472d342041564320636f646563202d20436f70796c65667420323030332d32303134202d20687474703a2f2f7777772e766964656f6c616e2e6f72672f783236342e68746d6c202d206f7074696f6e733a2063616261633d31207265663d35206465626c6f636b3d313a303a3020616e616c7973653d3078333a3078313133206d653d756d68207375626d653d38207073793d31207073795f72643d312e30303a302e3030206d697865645f7265663d31206d655f72616e67653d3136206368726f6d615f6d653d31207472656c6c69733d31203878386463743d312063716d3d3020646561647a6f6e653d32312c313120666173745f70736b69703d31206368726f6d615f71705f6f66667365743d2d3220746872656164733d31206c6f6f6b61686561645f746872656164733d3120736c696365645f746872656164733d30206e723d3020646563696d6174653d3120696e7465726c616365643d3020626c757261795f636f6d7061743d3020636f6e73747261696e65645f696e7472613d3020626672616d65733d3020776569676874703d32206b6579696e743d393939393939206b6579696e745f6d696e3d353030303030207363656e656375743d343020696e7472615f726566726573683d302072633d637266206d62747265653d30206372663d33382e322071636f6d703d302e36302071706d696e3d302071706d61783d3639207170737465703d342069705f726174696f3d312e34302061713d313a312e3030008000000165888404bffe841fc0a667f891ec3d121e72aecb5f"),
            ),
            (128, 128): (
                unhex("00000001677a000bbcb6102342000003000200000300651e2855c00000000168eac7cb0000010605ffff63dc45e9bde6d948b7962cd820d923eeef78323634202d20636f726520313634202d20482e3236342f4d5045472d342041564320636f646563202d20436f70796c65667420323030332d32303232202d20687474703a2f2f7777772e766964656f6c616e2e6f72672f783236342e68746d6c202d206f7074696f6e733a2063616261633d31207265663d32206465626c6f636b3d313a303a3020616e616c7973653d3078333a3078313133206d653d686578207375626d653d34207073793d31207073795f72643d312e30303a302e3030206d697865645f7265663d30206d655f72616e67653d3136206368726f6d615f6d653d31207472656c6c69733d31203878386463743d312063716d3d3020646561647a6f6e653d32312c313120666173745f70736b69703d31206368726f6d615f71705f6f66667365743d3020746872656164733d32206c6f6f6b61686561645f746872656164733d3220736c696365645f746872656164733d3120736c696365733d32206e723d3020646563696d6174653d3120696e7465726c616365643d3020626c757261795f636f6d7061743d3020636f6e73747261696e65645f696e7472613d3020626672616d65733d3020776569676874703d31206b6579696e743d696e66696e697465206b6579696e745f6d696e3d353336383730393133207363656e656375743d343020696e7472615f726566726573683d302072633d637266206d62747265653d30206372663d32352e352071636f6d703d302e36302071706d696e3d302071706d61783d3639207170737465703d342069705f726174696f3d312e34302061713d313a312e30300080000001658884046fdcfe0bb9ecd9a9eb03bd86a12e98c759aadef0e758b724399e770a4e6982d7f24eed50c22ea4cb1ecaee80075d00000165042221011bffdcfe0bb9ecd9a9eb03bd86a12e98c759aadef0e758b724399e770a4e6982d7f24eed50c22ea4cb1ecaee80075d"),
                unhex("00000001419a3b1052fffeb52a82160000014104268ec414bffeb52a8216"),
                unhex("00000001419a4608297ffeb52a821700000141042691820a5ffeb52a8217"),
                unhex("00000001419a66082b7ffeb52a821600000141042699820adffeb52a8216"),
                unhex("00000001419a86082b7ffeb52a8217000001410426a1820adffeb52a8217"),
            ),
        },
        "YUV444P": {
            (24, 16): (
                unhex("00000001677a000abcb317cbc2000003000200000300651e244cd00000000168e970312c8b0000010605ffff56dc45e9bde6d948b7962cd820d923eeef78323634202d20636f726520313432202d20482e3236342f4d5045472d342041564320636f646563202d20436f70796c65667420323030332d32303134202d20687474703a2f2f7777772e766964656f6c616e2e6f72672f783236342e68746d6c202d206f7074696f6e733a2063616261633d31207265663d35206465626c6f636b3d313a303a3020616e616c7973653d3078333a3078313133206d653d756d68207375626d653d38207073793d31207073795f72643d312e30303a302e3030206d697865645f7265663d31206d655f72616e67653d3136206368726f6d615f6d653d31207472656c6c69733d31203878386463743d312063716d3d3020646561647a6f6e653d32312c313120666173745f70736b69703d31206368726f6d615f71705f6f66667365743d2d3220746872656164733d31206c6f6f6b61686561645f746872656164733d3120736c696365645f746872656164733d30206e723d3020646563696d6174653d3120696e7465726c616365643d3020626c757261795f636f6d7061743d3020636f6e73747261696e65645f696e7472613d3020626672616d65733d3020776569676874703d32206b6579696e743d393939393939206b6579696e745f6d696e3d353030303030207363656e656375743d343020696e7472615f726566726573683d302072633d637266206d62747265653d30206372663d33382e322071636f6d703d302e36302071706d696e3d302071706d61783d3639207170737465703d342069705f726174696f3d312e34302061713d313a312e3030008000000165888404bffe841fc0a667f891ec3d121e72aecb5f"),
            ),
            (128, 128): (
                unhex("0000000167f4000b9196c2046840000003004000000ca3c50ab80000000168eac71921900000010605ffff63dc45e9bde6d948b7962cd820d923eeef78323634202d20636f726520313634202d20482e3236342f4d5045472d342041564320636f646563202d20436f70796c65667420323030332d32303232202d20687474703a2f2f7777772e766964656f6c616e2e6f72672f783236342e68746d6c202d206f7074696f6e733a2063616261633d31207265663d32206465626c6f636b3d313a303a3020616e616c7973653d3078333a3078313133206d653d686578207375626d653d34207073793d31207073795f72643d312e30303a302e3030206d697865645f7265663d30206d655f72616e67653d3136206368726f6d615f6d653d31207472656c6c69733d31203878386463743d312063716d3d3020646561647a6f6e653d32312c313120666173745f70736b69703d31206368726f6d615f71705f6f66667365743d3620746872656164733d32206c6f6f6b61686561645f746872656164733d3220736c696365645f746872656164733d3120736c696365733d32206e723d3020646563696d6174653d3120696e7465726c616365643d3020626c757261795f636f6d7061743d3020636f6e73747261696e65645f696e7472613d3020626672616d65733d3020776569676874703d31206b6579696e743d696e66696e697465206b6579696e745f6d696e3d353336383730393133207363656e656375743d343020696e7472615f726566726573683d302072633d637266206d62747265653d30206372663d32352e352071636f6d703d302e36302071706d696e3d302071706d61783d3639207170737465703d342069705f726174696f3d312e34302061713d313a312e30300080000001658884046fdcfe0b77671337ee87d69a9ad78f78266669bfefb6dfffa887fa2dfe57fdb2f2ef19f3afec13fd4a3ac85fe755041d54fe89f0ac38dc590f600000f98100000165042221011bffdcfe0b77671337ee87d69a9ad78f78266669bfefb6dfffa887fa2dfe57fdb2f2ef19f3afec13fd4a3ac85fe755041d54fe89f0ac38dc590f600000f981"),
                unhex("00000001419a3b1052fffeb52a82160000014104268ec414bffeb52a8216"),
                unhex("00000001419a4608297ffeb52a821700000141042691820a5ffeb52a8217"),
                unhex("00000001419a66082b7ffeb52a821600000141042699820adffeb52a8216"),
                unhex("00000001419a86082b7ffeb52a8217000001410426a1820adffeb52a8217"),
            ),
            # generated using:
            # gst-launch-1.0 videotestsrc pattern=white
            # ! video/x-raw,width=320,height=240
            # ! x264enc
            # ! multifilesink location="frame%d.h264"
            (320, 240): (
                unhex(""),
                unhex(""),
                unhex("00000001419a460845ff67d71a1a7009dd48522f4d23548358fcfcf7cb94dea7b9a9b2b9bedac66d77716374c5460b556f10a39a375f9ddac016ac8f4b73ef1b5c5694d4e42a108982b9d01d8c662b0b4e7bfa36d53951a27932964fc1000001410329a460845ffa5807572a8354835e18d7ee90315eab4de2066ae6fdf91cdaf8ef637547026ff88f87afe92533495d4c01d5a9c8028600377673d114526efd568d920d4900000141019269182117fffa5807572a8354835e18d7ee90315eab4de2066ae6fdf91cdaf8ef637547026ff88f87afe92533495d4c01d5a9c8028600377673d114526efd56821f07dc28a21c501b801d85df46363e3e71"),
                unhex("00000001419a660845fffa580103000001410329a660845ffa58010300000141019269982117fffa580103"),
                unhex("00000001419a860845fffa580103000001410329a860845ffa5801030000014101926a182117fffa580103"),
            )
        },
    },
    "vp8": {
        "YUV420P": {
            (24, 16): (
                unhex("1003009d012a1800100000070885858899848800281013ad501fc01fd01050122780feffbb029ffffa2546bd18c06f7ffe8951fffe8951af46301bdfffa22a00"),
            ),
            (320, 240): (
                unhex("3012009d012a4001f000004708858588998488020200061604f70681649f6bdb9b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387b27387af400feffa3de00"),
                unhex("d102000b116000180018582ff400088004335fad724f9c730000"),
                unhex("d102000b112800180018582ff400088004335fad724f9c730000"),
                unhex("d102000b10f800180018582ff400088004335fad724f9c730000"),
                unhex("d102000b10cc00180018582ff400088004335fad724f9c730000"),
            )
        },
    },
    "vp9": {
        "YUV420P": {
            (24, 16): (
                unhex("8249834200017000f60038241c18000000200000047ffffffba9da00059fffffff753b413bffffffeea7680000"),
            ),
            (128, 128): (
                unhex("824983420007f007f60c38241c18900000f047d8fd620cdbe9cd6f5721d7b400006b31c5aa6ce921164007ec134d6336dae2f48372f5c44a826c5b54a60ff0451c1b136691c51b2830f807c83155903eeb2d0926d4f000"),
                unhex("860040929c444f8000037000005a0480"),
                unhex("860040929c444f8000037000005a0480"),
                unhex("860040929c344c8000037000005a0480"),
                unhex("860040929c2c49e000037000005a0480"),
            ),
        },
        "YUV444P": {
            (24, 16): (
                unhex("a249834200002e001ec007048383000000040000223fffffeea76800c7ffffffeea7680677ffffff753b40081000"),
            ),
            (128, 128): (
                unhex("a24983420000fe00fec1870483831200001e47d8fd620cdbe9cd6f5721d7b400006b31c5aa6ce921164007ec134d6336dae2f48372f5c44a826c5b54a60ff0451c1b136691c51b2830f807c80efd58636455d6695137c000"),
                unhex("a60040929c444f8000037000005a0480"),
                unhex("a60040929c444f8000037000005a0480"),
                unhex("a60040929c344c8000037000005a0480"),
                unhex("a60040929c2c49e000037000005a0480"),
            )
        },
        "YUV444P10": {
            (128, 128): (
                unhex("b124c1a100003f803fb061c120e0c48000140047d8fdf83ef11f47913f8fd8f0e0be8318fdf7f897fdbf918f84ff549eafe6"
                      "775f9717fc611a40006727ffe6478ffdd9a0bffbb3417feecd0b3fff32fbffbb3e0ffdd9f07fdd9f31fff997dffdd9f07fee"
                      "cf83feeccaeffdd9a0bffbb3417feecd05ffbb3423ff767c1ffbb3e0ffbb3e0ffbb3e0ffdd9f07feecf83feecf83feecd4c1"
                      "ff8e077e7db18d89caf903bae28eb4acb433b81b7c8c71ad1b3eff6bf9fd250bbbf2bba9675ae65948029eca9893a4c867aa"
                      "224210c55b61f8cffc703bf3ed8c6c4e57c81dd71475a565a19dc0dbe4638d68d9f7fb5fcfe9285ddf95dd4b3ad732ca4014"
                      "f654c49d26433d511210862adb0fc67feecf83feecf83ff767c1ff767c1ffbb3e0ffbb3e0ffdd9f07fdd9a36fe9285ddf95d"
                      "d4b3ad732ca4014f654c49d26433d511210862adb0fc67f4942eefcaeea59d6b9965200a7b2a624e93219ea8890843156d87"
                      "e33fa4a1777e57752ceb5ccb290053d9531274990cf544484218ab6c3f19fd250bbbf2bba9675ae65948029eca9893a4c867"
                      "aa224210c55b61f8cffdd9f07fdd9f07fdd9f07fdd9f07fdd9f07fdd9f07fdd9f07fdd9b1cffdd9a0bffbb3417feecd05ffb"
                      "b3423ff767c1ffbb3e0ffbb3e0ffbb3e0ffdd9f07feecf83feecf83feeccaeffdd9a0bffbb3417feecd05ffbb3423ff767c1"
                      "ffbb3e0ffbb3e0ffbb3e0ffdd9f07feecf83feecf83feecd1b7f4942eefcaeea59d6b9965200a7b2a624e93219ea88908431"
                      "56d87e33fa4a1777e57752ceb5ccb290053d9531274990cf544484218ab6c3f19fd250bbbf2bba9675ae65948029eca9893a"
                      "4c867aa224210c55b61f8cfe9285ddf95dd4b3ad732ca4014f654c49d26433d511210862adb0fc67feecf83feecf83feecf8"
                      "3feecf83feecf83feecf83feecf83feecd1b7f4942eefcaeea59d6b9965200a7b2a624e93219ea8890843156d87e33fa4a17"
                      "77e57752ceb5ccb290053d9531274990cf544484218ab6c3f19fd250bbbf2bba9675ae65948029eca9893a4c867aa224210c"
                      "55b61f8cfe9285ddf95dd4b3ad732ca4014f654c49d26433d511210862adb0fc67feecf83feecf83feecf83feecf83feecf8"
                      "3feecf83feecf83feece09bff1c0efcfb631b1395f20775c51d695968677036f918e35a367dfed7f3fa4a1777e57752ceb5c"
                      "cb290053d9531274990cf544484218ab6c3f19ff8e077e7db18d89caf903bae28eb4acb433b81b7c8c71ad1b3eff6bf9fd25"
                      "0bbbf2bba9675ae65948029eca9893a4c867aa224210c55b61f8cffdd9f07fdd9f07feecf83feecf83ff767c1ff767c1ffbb"
                      "3e0ffbb3405fd250bbbf2bba9675ae65948029eca9893a4c867aa224210c55b61f8cfe9285ddf95dd4b3ad732ca4014f654c"
                      "49d26433d511210862adb0fc67f4942eefcaeea59d6b9965200a7b2a624e93219ea8890843156d87e33fa4a1777e57752ceb"
                      "5ccb290053d9531274990cf544484218ab6c3f19ffbb3e0ffbb3e0ffbb3e0ffbb3e0ffbb3e0ffbb3e0ffbb3e0ffbb346fffc"
                      "703bf3ed8c6c4e57c81dd71475a565a19dc0dbe4638d68d9f7fb5fcfe9285ddf95dd4b3ad732ca4014f654c49d26433d5112"
                      "10862adb0fc67fe381df9f6c636272be40eeb8a3ad2b2d0cee06df231c6b46cfbfdafe7f4942eefcaeea59d6b9965200a7b2"
                      "a624e93219ea8890843156d87e33ff767c1ff767c1ffbb3e0ffbb3e0ffdd9f07fdd9f07feecf83feecd017f4942eefcaeea5"
                      "9d6b9965200a7b2a624e93219ea8890843156d87e33fa4a1777e57752ceb5ccb290053d9531274990cf544484218ab6c3f19"
                      "fd250bbbf2bba9675ae65948029eca9893a4c867aa224210c55b61f8cfe9285ddf95dd4b3ad732ca4014f654c49d26433d51"
                      "1210862adb0fc67feecf83feecf83feecf83feecf83feecf83feecf83feecf83feecd367f4942eefcaeea59d6b9965200a7b"
                      "2a624e93219ea8890843156d87e33fa4a1777e57752ceb5ccb290053d9531274990cf544484218ab6c3f19fd250bbbf2bba9"
                      "675ae65948029eca9893a4c867aa224210c55b61f8cfe9285ddf95dd4b3ad732ca4014f654c49d26433d511210862adb0fc6"
                      "7feecf83feecf83feecf83feecf83feecf83feecf83feecf83feecd017f4942eefcaeea59d6b9965200a7b2a624e93219ea8"
                      "890843156d87e33fa4a1777e57752ceb5ccb290053d9531274990cf544484218ab6c3f19fd250bbbf2bba9675ae65948029e"
                      "ca9893a4c867aa224210c55b61f8cfe9285ddf95dd4b3ad732ca4014f654c49d26433d511210862adb0fc67feecf83feecf8"
                      "3feecf83feecf83feecf83feecf83feecf83feecd017f4942eefcaeea59d6b9965200a7b2a624e93219ea8890843156d87e3"
                      "3fa4a1777e57752ceb5ccb290053d9531274990cf544484218ab6c3f19fd250bbbf2bba9675ae65948029eca9893a4c867aa"
                      "224210c55b61f8cfe9285ddf95dd4b3ad732ca4014f654c49d26433d511210862adb0fc67feecf83feecf83feecf83feecf8"
                      "3feecf83feecf83feecf83feecd017f4942eefcaeea59d6b9965200a7b2a624e93219ea8890843156d87e33fa4a1777e5775"
                      "2ceb5ccb290053d9531274990cf544484218ab6c3f19fd250bbbf2bba9675ae65948029eca9893a4c867aa224210c55b61f8"
                      "cfe9285ddf95dd4b3ad732ca4014f654c49d26433d511210862adb0fc67feecf83feecf83feecf83feecf83feecf83feecf8"
                      "3feecf83feecc400"),
                unhex("b30020494e2227c00002807d230000002b7fffffff6fbf4c7fffffff6fbf4c7fffffff6fbf4c7fffffff6fbf4c7fffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98fffffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffffffedf7ea7fffffffdbefd4ffffffffb7dfa9ffffffff6fbf53fffffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffffffdbefd4ffffffffb7dfa9ffffffff6fbf53fffffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7e9f57fffffb7dfa63fffffffb7dfa63fffffffb7dfa63fffffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63ffffffff6fbf53fffffffedf7ea7fffffffdbefd4ffffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffffff6fbf53fffffffedf7ea7fffffffdbefd4ffffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa7d5fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7e9f57fffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa600"),
                unhex("b30020494e2227c00001807000002b7fffffff6fbf4c7fffffff6fbf4c7fffffff6fbf4c7fffffff6fbf4c7fffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98fffffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffffffedf7ea7fffffffdbefd4ffffffffb7dfa9ffffffff6fbf53fffffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffffffdbefd4ffffffffb7dfa9ffffffff6fbf53fffffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7e9f57fffffb7dfa63fffffffb7dfa63fffffffb7dfa63fffffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63ffffffff6fbf53fffffffedf7ea7fffffffdbefd4ffffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffffff6fbf53fffffffedf7ea7fffffffdbefd4ffffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa7d5fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7e9f57fffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa600"),
                unhex("b30020494e2227c00001807000002b7fffffff6fbf4c7fffffff6fbf4c7fffffff6fbf4c7fffffff6fbf4c7fffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98fffffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffffffedf7ea7fffffffdbefd4ffffffffb7dfa9ffffffff6fbf53fffffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffffffdbefd4ffffffffb7dfa9ffffffff6fbf53fffffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7e9f57fffffb7dfa63fffffffb7dfa63fffffffb7dfa63fffffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63ffffffff6fbf53fffffffedf7ea7fffffffdbefd4ffffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffffff6fbf53fffffffedf7ea7fffffffdbefd4ffffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa7d5fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7e9f57fffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa600"),
                unhex("b30020494e2227c00001807000002b7fffffff6fbf4c7fffffff6fbf4c7fffffff6fbf4c7fffffff6fbf4c7fffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98fffffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffffffedf7ea7fffffffdbefd4ffffffffb7dfa9ffffffff6fbf53fffffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffffffdbefd4ffffffffb7dfa9ffffffff6fbf53fffffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7e9f57fffffb7dfa63fffffffb7dfa63fffffffb7dfa63fffffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63ffffffff6fbf53fffffffedf7ea7fffffffdbefd4ffffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffffff6fbf53fffffffedf7ea7fffffffdbefd4ffffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa7d5fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7e9f57fffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63fffffdbefd31fffffedf7e98ffffff6fbf4c7fffffb7dfa63ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa9ffffff6fbf53fffffedf7ea7fffffdbefd4ffffffb7dfa600"),
            )
        },
    },
    "av1": {
        "YUV420P": {
            (64, 64): (
                unhex("12000a0b00000002affff036be40103219110100010000004b17c531ecb5321932af9b2fab54ee58012c"),
            ),
        },
    },
}

TEST_PICTURES: dict[str, dict[tuple[int, int], TEST_DATA]] = {
    "png": {
        (32, 32): (
            unhex("89504e470d0a1a0a0000000d4948445200000020000000200806000000737a7af40000002849444154785eedd08100000000c3a0f9531fe4855061c0800103060c183060c0800103060cbc0f0c102000013337932a0000000049454e44ae426082"),
            unhex("89504e470d0a1a0a0000000d4948445200000020000000200802000000fc18eda30000002549444154785eedd03101000000c2a0f54fed610d884061c0800103060c183060c080810f0c0c20000174754ae90000000049454e44ae426082"),
        ),
    },
    "png/L": {
        (32, 32): (
            unhex("89504e470d0a1a0a0000000d4948445200000020000000200800000000561125280000000274524e5300ff5b9122b50000002049444154785e63fccf801f3011906718550009a1d170180d07e4bc323cd20300a33d013f95f841e70000000049454e44ae426082"),
            unhex("89504e470d0a1a0a0000000d4948445200000020000000200800000000561125280000001549444154785e63601805a321301a02a321803d0400042000017854be5c0000000049454e44ae426082"),
        ),
    },
    "png/P": {
        (32, 32): (
            unhex("89504e470d0a1a0a0000000d494844520000002000000020080300000044a48ac600000300504cb330f4880000010074524e53ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0053f707250000001c49444154785e63f84f00308c2a0087c068384012c268388ca87000003f68fc2e077ed1070000000049454e44ae426082"),
            unhex("89504e470d0a1a0a0000000d494844520000002000000020080300000044a48ac600000300504c5445000000000000000000000000000000000000000000000000000000000000000000330000660000990000cc0000ff0000003300333300663300993300cc3300ff3300006600336600666600996600cc6600ff6600009900339900669900999900cc9900ff990000cc0033cc0066cc0099cc00cccc00ffcc0000ff0033ff0066ff0099ff00ccff00ffff00000033330033660033990033cc0033ff0033003333333333663333993333cc3333ff3333006633336633666633996633cc6633ff6633009933339933669933999933cc9933ff993300cc3333cc3366cc3399cc33cccc33ffcc3300ff3333ff3366ff3399ff33ccff33ffff33000066330066660066990066cc0066ff0066003366333366663366993366cc3366ff3366006666336666666666996666cc6666ff6666009966339966669966999966cc9966ff996600cc6633cc6666cc6699cc66cccc66ffcc6600ff6633ff6666ff6699ff66ccff66ffff66000099330099660099990099cc0099ff0099003399333399663399993399cc3399ff3399006699336699666699996699cc6699ff6699009999339999669999999999cc9999ff999900cc9933cc9966cc9999cc99cccc99ffcc9900ff9933ff9966ff9999ff99ccff99ffff990000cc3300cc6600cc9900cccc00ccff00cc0033cc3333cc6633cc9933cccc33ccff33cc0066cc3366cc6666cc9966cccc66ccff66cc0099cc3399cc6699cc9999cccc99ccff99cc00cccc33cccc66cccc99ccccccccccffcccc00ffcc33ffcc66ffcc99ffccccffccffffcc0000ff3300ff6600ff9900ffcc00ffff00ff0033ff3333ff6633ff9933ffcc33ffff33ff0066ff3366ff6666ff9966ffcc66ffff66ff0099ff3399ff6699ff9999ffcc99ffff99ff00ccff33ccff66ccff99ccffccccffffccff00ffff33ffff66ffff99ffffccffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023faca40000001549444154785e63601805a321301a02a321803d0400042000017854be5c0000000049454e44ae426082"),
        ),
    },
    "jpeg": {
        (32, 32): (
            unhex("ffd8ffe000104a46494600010100000100010000ffdb004300100b0c0e0c0a100e0d0e1211101318281a181616183123251d283a333d3c3933383740485c4e404457453738506d51575f626768673e4d71797064785c656763ffdb0043011112121815182f1a1a2f634238426363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363ffc00011080020002003012200021101031101ffc4001500010100000000000000000000000000000007ffc40014100100000000000000000000000000000000ffc40014010100000000000000000000000000000000ffc40014110100000000000000000000000000000000ffda000c03010002110311003f009f800000000000ffd9"),
            unhex("ffd8ffe000104a46494600010100000100010000ffdb004300100b0c0e0c0a100e0d0e1211101318281a181616183123251d283a333d3c3933383740485c4e404457453738506d51575f626768673e4d71797064785c656763ffdb0043011112121815182f1a1a2f634238426363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363ffc00011080020002003012200021101031101ffc4001500010100000000000000000000000000000007ffc40014100100000000000000000000000000000000ffc40014010100000000000000000000000000000000ffc40014110100000000000000000000000000000000ffda000c03010002110311003f009f800000000000ffd9"),
        ),
        (128, 128): (
            unhex("ffd8ffe000104a46494600010100000100010000ffdb004300100b0c0e0c0a100e0d0e1211101318281a181616183123251d283a333d3c3933383740485c4e404457453738506d51575f626768673e4d71797064785c656763ffdb0043011112121815182f1a1a2f634238426363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363ffc00011080080008003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00f40a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2800a28a2803fffd9"),
        )
    },
    "jpega": {
        (32, 32): (
            (
                unhexlify("ffd8ffe000104a46494600010100000100010000ffdb004300ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdb004301ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00011080020002003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00651451400514514005145140051451401fffd9ffd8ffe000104a46494600010100000100010000ffdb004300ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000b080020002001011100ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffda0008010100003f006514514514514514514514515fffd9"),
                {"quality": 0, "alpha-offset": 642},
            ),
            (
                unhexlify("ffd8ffe000104a46494600010100000100010000ffdb00430001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101ffdb00430101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101ffc00011080020002003011100021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00fe3fe800a002800a002800a002800a002800a002800a002800a002800a00ffd9ffd8ffe000104a46494600010100000100010000ffdb00430001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101ffc0000b080020002001011100ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffda0008010100003f00fe3fe8a28a28a28a28a28a28a28affd9"),
                {"quality": 100, "alpha-offset": 655},
            ),
        )
    },
    "webp": {
        (32, 32): (
            unhex("524946465c00000057454250565038580a000000100000001f00001f0000414c50480f00000001071011110012c2ffef7a44ff530f005650382026000000d002009d012a200020003ed162aa4fa825a3a2280801001a096900003da3a000fef39d800000"),
            unhex("524946465c00000057454250565038580a000000100000001f00001f0000414c50480f00000001071011110012c2ffef7a44ff530f005650382026000000d002009d012a200020003ed162aa4fa825a3a2280801001a096900003da3a000fef39d800000"),
        ),
        (128, 128): (
            unhex("524946468600000057454250565038580a000000100000007f00007f0000414c50480a0000000107509088084444ff035650382056000000d007009d012a800080002e9968b45a22a828280800984b4b76ff817a05e00fd0091f506c40478a31f01eb66666666666666666666666666666666666666666666666666666650000fef7973fff61f9eb5ebd44000000"),
        ),
    },
    "avif": {
        (32, 32): (
            # with alpha, quality = 90%:
            unhex("00000020667479706176696600000000617669666d6966316d6961664d4131410000018d6d657461000000000000002868646c720000000000000000706963740000000000000000000000006c696261766966000000000e7069746d0000000000010000002c696c6f630000000044000002000100000001000001c900000017000200000001000001b5000000140000004269696e660000000000020000001a696e6665020000000001000061763031436f6c6f72000000001a696e6665020000000002000061763031416c706861000000001a69726566000000000000000e6175786c000200010001000000c3697072700000009d6970636f0000001469737065000000000000002000000020000000107069786900000000030808080000000c617631438120000000000013636f6c726e636c78000200020002800000000e706978690000000001080000000c6176314381001c0000000038617578430000000075726e3a6d7065673a6d706567423a636963703a73797374656d733a617578696c696172793a616c706861000000001e69706d6100000000000000020001040102830400020401058607000000336d64617412000a0518113ff6153209100043f41c96deb55c12000a0538113ff609320c1000004b68891db6ff6afff0"),
            # without alpha:
            unhex("00000020667479706176696600000000617669666d6966316d6961664d413141000000f26d657461000000000000002868646c720000000000000000706963740000000000000000000000006c696261766966000000000e7069746d0000000000010000001e696c6f6300000000440000010001000000010000011a000000170000002869696e660000000000010000001a696e6665020000000001000061763031436f6c6f72000000006a697072700000004b6970636f0000001469737065000000000000002000000020000000107069786900000000030808080000000c617631438120000000000013636f6c726e636c78000200020002800000001769706d610000000000000001000104010283040000001f6d64617412000a0538113ff609320c10000043f1949e508e4effe8"),
        ),
        (128, 128): (
            unhex("00000020667479706176696600000000617669666d6966316d6961664d4131410000018d6d657461000000000000002868646c720000000000000000706963740000000000000000000000006c696261766966000000000e7069746d0000000000010000002c696c6f630000000044000002000100000001000001d100000021000200000001000001b50000001c0000004269696e660000000000020000001a696e6665020000000001000061763031436f6c6f72000000001a696e6665020000000002000061763031416c706861000000001a69726566000000000000000e6175786c000200010001000000c3697072700000009d6970636f0000001469737065000000000000008000000080000000107069786900000000030808080000000c617631438120000000000013636f6c726e636c78000200020002800000000e706978690000000001080000000c6176314381001c0000000038617578430000000075726e3a6d7065673a6d706567423a636963703a73797374656d733a617578696c696172793a616c706861000000001e69706d6100000000000000020001040102830400020401058607000000456d64617412000a061819bfff61503210100000c1b55a2a0ddca5d848d670758012000a063819bfff60903215100000c32e26eb1e02e2bff997cca3e3c87a330adc"),
            unhex("00000020667479706176696600000000617669666d6966316d6961664d413141000000f26d657461000000000000002868646c720000000000000000706963740000000000000000000000006c696261766966000000000e7069746d0000000000010000001e696c6f6300000000440000010001000000010000011a000000200000002869696e660000000000010000001a696e6665020000000001000061763031436f6c6f72000000006a697072700000004b6970636f0000001469737065000000000000008000000080000000107069786900000000030808080000000c617631438120000000000013636f6c726e636c78000200020002800000001769706d61000000000000000100010401028304000000286d64617412000a063819bfff60903214100000c1b4ca69c7b685dffb415abcd34052bcc4"),
        ),
    }
}


def makebuf(size, b=0x20) -> bytearray:
    d = (chr(b).encode("latin1"))*size
    return bytearray(d)


def h2b(s) -> bytes:
    return binascii.unhexlify(s)


def convert_pixel(rgbx="00112233", fmt="BGRX") -> str:
    pixel = ""
    for color in fmt:
        index = "RGBX".index(color)         # "RGBX".index("R") -> 0
        pixel += rgbx[index*2:(index+1)*2]  # 0 -> "00"
    return pixel


assert convert_pixel(rgbx="01234567", fmt="RGBX") == "01234567"
assert convert_pixel(rgbx="01234567", fmt="BGRX") == "45230167"


def make_test_image(pixel_format: str, w: int, h: int, plane_values: Iterable[int] | str = (0x20, 0x80, 0x80, 0x0)):
    # pylint: disable=import-outside-toplevel
    from xpra.codecs.image import ImageWrapper
    from xpra.codecs.constants import get_subsampling_divs

    def makeimage(pixels, **kwargs) -> ImageWrapper:
        kwargs["thread_safe"] = True
        kwargs["pixel_format"] = kwargs.get("pixel_format", pixel_format)
        kwargs["depth"] = kwargs.get("bytesperpixel", 4)*8
        return ImageWrapper(0, 0, w, h, pixels, **kwargs)

    if pixel_format.startswith("YUV") or pixel_format.startswith("GBRP") or pixel_format == "NV12":
        divs = get_subsampling_divs(pixel_format)
        try:
            depth = int(pixel_format.split("P")[1])         # ie: YUV444P10 -> 10
        except (IndexError, ValueError):
            depth = 8
        Bpp = roundup(depth, 8)//8
        nplanes = 2 if pixel_format == "NV12" else 3
        strides = tuple(w//divs[i][0]*Bpp for i in range(nplanes))
        sizes = tuple(strides[i]*h//divs[i][1]*Bpp for i in range(nplanes))
        if isinstance(plane_values, Iterable):
            planes = tuple(struct.pack(b"B", plane_value) * sizes[i]
                           for i, plane_value in enumerate(plane_values[:nplanes]))
        else:
            planes = tuple(makebuf(sizes[i]) for i in range(nplanes))
        return makeimage(planes, rowstride=strides, planes=nplanes)
        # l = len(y)+len(u)+len(v)
    if pixel_format in ("RGB", "BGR", "RGBX", "BGRX", "XRGB", "BGRA", "RGBA", "r210", "BGR48", "YUYV"):
        Bpp = len(pixel_format)
        if pixel_format == "BGR48":
            Bpp = 6
        stride = w*Bpp
        if isinstance(plane_values, str):
            rgb_data = h2b(plane_values) * w * h
        else:
            rgb_data = bytes(makebuf(stride*h))
        if pixel_format == "YUYV":
            stride = w * 2
        return makeimage(rgb_data, bytesperpixel=Bpp, rowstride=stride)
    raise ValueError(f"don't know how to create a {pixel_format} image")


def testdecoder(decoder_module, full: bool) -> Sequence[str]:
    dtype = decoder_module.get_type()
    codecs = list(decoder_module.get_encodings())
    for spec in decoder_module.get_specs():
        encoding = spec.encoding
        in_cs = spec.input_colorspace
        try:
            testdecoding(decoder_module, encoding, in_cs, full)
        except Exception as e:
            log(f"{dtype}: {encoding} decoding failed", exc_info=True)
            log.warn(f"{dtype}: {encoding} decoding failed: {e}")
            del e
            codecs.remove(encoding)
    if not codecs:
        log.error(f"{dtype}: all the codecs have failed! {csv(decoder_module.get_encodings())}")
    return tuple(codecs)


def testdecoding(decoder_module, encoding: str, cs: str, full: bool) -> None:
    test_data_set: dict[str, dict[tuple[int, int], TEST_DATA]] | None = TEST_COMPRESSED_DATA.get(encoding)
    min_w, min_h = decoder_module.get_min_size(encoding)
    test_data: dict[tuple[int, int], TEST_DATA] = {}
    if test_data_set:
        test_data = test_data_set.get(cs, {})
    elif encoding in TEST_PICTURES:
        # maybe this is a picture format:
        test_data = TEST_PICTURES[encoding]
    # add a context init test, without any data to decode:
    test_data.setdefault((256, 128), ())
    for size, frames in test_data.items():
        w, h = size
        if w < min_w or h < min_h:
            log(f"skipped {encoding} decoding test at {w}x{h} for {decoder_module} (min size is {min_w}x{min_h})")
            continue
        try:
            decoder = decoder_module.Decoder()
            decoder.init_context(encoding, w, h, cs, typedict())
        except Exception:
            log.error(f"Error creating context {encoding} {w}x{h} {cs}")
            raise
        try:
            if frames:
                log(f"{decoder_module.get_type()}: testing {encoding} / {cs} with {len(frames)} frames of size {w}x{h}")
                for i, (data, options) in enumerate(frames):
                    try:
                        log(f"frame {i+1} is {len(data or ()):5} bytes")
                        image = decoder.decompress_image(data, typedict(options))
                        if image is None:
                            raise RuntimeError(f"failed to decode test data for encoding {encoding!r} with colorspace {cs!r}")
                        if image.get_width()!=w:
                            raise RuntimeError(f"expected image of width {w} but got {image.get_width()}")
                        if image.get_height()!=h:
                            raise RuntimeError(f"expected image of height {h} but got {image.get_height()}")
                        log(f" test passed for {w}x{h} {encoding} - {cs}")
                    except Exception:
                        log.error(f"Error on {encoding} {w}x{h} test {cs} frame {i}")
                        raise
            if full:
                log(f"{decoder_module.get_type()}: testing {encoding} / {cs} with junk data")
                # test failures:
                options = typedict({"junk": True})
                try:
                    image = decoder.decompress_image(b"junk", options)
                except (RuntimeError, ValueError):
                    image = None
                if image is not None:
                    raise RuntimeError(f"decoding junk with {decoder_module.get_type()} should have failed, got {image} instead")
        finally:
            decoder.clean()


def testencoder(encoder_module, full: bool) -> Sequence[str]:
    etype = encoder_module.get_type()
    codecs = list(encoder_module.get_encodings())
    for encoding in tuple(codecs):
        try:
            testencoding(encoder_module, encoding, full)
        except EncodingNotSupported as e:
            log(f"{etype}: {encoding} encoding failed", exc_info=True)
            del e
            codecs.remove(encoding)
        except Exception as e:
            log(f"{etype}: {encoding} encoding failed", exc_info=True)
            log.warn(f"Warning: {etype} encoder testing failed with {encoding}:")
            log.warn(f" {e}")
            del e
            codecs.remove(encoding)
    if not codecs:
        log.error(f"{etype}: all the codecs have failed! ({csv(encoder_module.get_encodings())})")
    return tuple(codecs)


def testencoding(encoder_module, encoding: str, full: bool) -> None:
    # test a bit bigger so we exercise more code:
    W, H = DEFAULT_TEST_SIZE
    do_testencoding(encoder_module, encoding, W, H, full)


def get_encoder_max_sizes(encoder_module) -> tuple[int, int]:
    w, h = TEST_LIMIT_W, TEST_LIMIT_H
    for encoding in encoder_module.get_encodings():
        ew, eh = get_encoder_max_size(encoder_module, encoding)
        w = min(w, ew)
        h = min(h, eh)
    return w, h


def get_encoder_max_size(encoder_module, encoding: str,
                         limit_w: int = TEST_LIMIT_W, limit_h: int = TEST_LIMIT_H) -> tuple[int, int]:
    # probe to find the max dimensions:
    # (it may go higher, but we don't care as windows can't)
    etype = encoder_module.get_type()

    def einfo() -> str:
        return f"{etype} {encoding} {encoder_module.get_version()}"

    def elog(s, *args):
        log(f"{einfo()} "+s, *args)
    log("get_encoder_max_size%s", (encoder_module, encoding, limit_w, limit_h))
    maxw = w = 512
    while w<=limit_w:
        try:
            do_testencoding(encoder_module, encoding, w, 128)
            maxw = w
            w *= 2
        except Exception as e:
            elog(f"is limited to max width={max} for {encoding}")
            log(f" {e}")
            del e
            break
    elog(f"max width={maxw}")
    maxh = h = 512
    while h <= limit_h:
        try:
            do_testencoding(encoder_module, encoding, 128, h)
            maxh = h
            h *= 2
        except Exception as e:
            elog(f"is limited to max height={maxh} for {encoding}")
            log(f" {e}")
            del e
            break
    elog(f"max height={maxh}")
    # now try combining width and height
    # as there might be a lower limit based on the total number of pixels:
    MAX_WIDTH, MAX_HEIGHT = maxw, maxh
    # start at half:
    v = max(512, min(maxw, maxh)//2)
    while v < max(limit_w, limit_h):
        for tw, th in ((v, v), (v*2, v)):
            if tw > limit_w or th > limit_h:
                continue
            try:
                w = min(maxw, tw)
                h = min(maxh, th)
                do_testencoding(encoder_module, encoding, w, h)
                elog(f"can handle {w}x{h} for {encoding}")
                MAX_WIDTH, MAX_HEIGHT = w, h
            except Exception as e:
                elog(f"is limited to {MAX_WIDTH}x{MAX_HEIGHT} for {encoding}")
                log(f" {e}")
                del e
                break
        v *= 2
    elog(f"max dimensions for {encoding}: {MAX_WIDTH}x{MAX_HEIGHT}")
    return MAX_WIDTH, MAX_HEIGHT


def do_testencoding(encoder_module, encoding, W: int, H: int, full: bool = False,
                    limit_w: int = TEST_LIMIT_W, limit_h: int = TEST_LIMIT_H) -> None:
    for spec in encoder_module.get_specs():
        if spec.encoding != encoding:
            continue
        for out_cs in spec.output_colorspaces:
            test_encoder_spec(spec.codec_class, encoding, spec.input_colorspace, out_cs, W, H, full, limit_w, limit_h)


def test_encoder_spec(encoder_class: Callable, encoding: str, cs_in: str, cs_out: str, W:int, H:int, full:bool=False,
                      limit_w: int = TEST_LIMIT_W, limit_h: int = TEST_LIMIT_H) -> None:
    log(f"testing {encoding} using {encoder_class}: {cs_in} to {cs_out}")
    e = encoder_class()
    try:
        options = typedict({
            # "b-frames": True,
            "dst-formats": [cs_out],
            "quality": 50,
            "speed": 50,
        })
        log("calling %s%s", e.init_context, (encoding, W, H, cs_in, options))
        e.init_context(encoding, W, H, cs_in, options)
    except Exception:
        log("encoder context initialization failed", exc_info=True)
        raise
    try:
        N = 5
        data = meta = None
        for i in range(N):
            options = typedict()
            image = make_test_image(cs_in, W, H)
            log(f"test {i}/{N} with {image}")
            v = e.compress_image(image, options)
            if v is None:
                raise RuntimeError(f"{encoding} compression failed on image {i+1} of {N}")
            data, meta = v
            if not data:
                delayed = meta.get("delayed", 0)
                assert delayed>0, "data is empty and there are no delayed frames!"
                if i>0:
                    # now we should get one:
                    data, meta = e.flush(delayed)
        del image
        etype = e.get_type()
        if data is None:
            raise RuntimeError(f"None data for {etype} using {encoding} encoding with {cs_in} / {cs_out}")
        if not data:
            raise RuntimeError(f"no compressed data for {etype} using {encoding} encoding with {cs_in} / {cs_out}")
        if meta is None:
            raise RuntimeError(f"missing metadata for {etype} using {encoding} encoding with {cs_in} / {cs_out}")
        log(f"{etype}: {encoding} / {cs_in} / {cs_out} passed")
        if full:
            wrong_formats = [x for x in ("YUV420P", "YUV444P", "BGRX", "r210") if x!=cs_in]
            # log("wrong formats (not %s): %s", cs_in, wrong_formats)
            if wrong_formats:
                wrong_format = wrong_formats[0]
                try:
                    image = make_test_image(wrong_format, W, H)
                    out = e.compress_image(image, options=options)
                except Exception:
                    out = None
                if out is not None:
                    raise RuntimeError(f"encoder {etype} should have failed using {encoding} encoding with {wrong_format} instead of {cs_in} / {cs_out}")
            for w, h in ((W//2, H//2), (W*2, H//2), (W//2, H**2)):
                if w > limit_w or h > limit_h:
                    continue
                try:
                    image = make_test_image(cs_in, w, h)
                    out = e.compress_image(image, options=options)
                except Exception:
                    out = None
                if out is not None:
                    raise RuntimeError(f"encoder {etype}, info={e.get_info()} should have failed using {encoding} encoding with invalid size {w}x{h} vs {W}x{H}")
    finally:
        if e:
            e.clean()


def testcsc(csc_module, full=False, test_cs_in=None, test_cs_out=None) -> None:
    W = 48
    H = 32
    log("test_csc%s", (csc_module, full, test_cs_in, test_cs_out))
    do_testcsc(csc_module, W, H, W, H, full, test_cs_in, test_cs_out)
    if full:
        do_testcsc(csc_module, W, H, W*2, H*2, full, test_cs_in, test_cs_out)
        do_testcsc(csc_module, W, H, W//2, H//2, full, test_cs_in, test_cs_out)


def get_csc_max_size(converter, test_cs_in=None, test_cs_out=None,
                     limit_w: int = TEST_LIMIT_W, limit_h: int = TEST_LIMIT_H) -> tuple[int, int]:
    # probe to find the max dimensions:
    # (it may go higher but we don't care as windows can't)
    MAX_WIDTH, MAX_HEIGHT = 512, 512
    cs = converter
    # as there might be a lower limit based on the total number of pixels:
    v = 512
    while v <= min(limit_w, limit_h):
        for tw, th in ((v, v), (v*2, v)):
            if tw > limit_w or th > limit_h:
                break
            try:
                do_testcsc(cs, tw, th, tw, th, False, test_cs_in, test_cs_out, limit_w, limit_h)
                log(f"{cs} can handle {tw}x{th}")
                MAX_WIDTH, MAX_HEIGHT = tw, th
            except Exception:
                log(f"{cs} is limited to {MAX_WIDTH}x{MAX_HEIGHT} for {test_cs_in} -> {test_cs_out}")
                break
        v *= 2
    log(f"{cs} max dimensions: {MAX_WIDTH}x{MAX_HEIGHT}")
    return MAX_WIDTH, MAX_HEIGHT


def do_testcsc(csc_module, iw: int, ih: int, ow: int, oh: int,
               full: bool = False, test_cs_in=None, test_cs_out=None,
               limit_w: int = TEST_LIMIT_W, limit_h: int = TEST_LIMIT_H) -> None:
    log("do_testcsc%s", (csc_module, iw, ih, ow, oh, full, test_cs_in, test_cs_out,
                         TEST_LIMIT_W, TEST_LIMIT_H))
    cstype = csc_module.get_type()
    for spec in csc_module.get_specs():
        cs_in = spec.input_colorspace
        for cs_out in spec.output_colorspaces:
            if (iw != ow or ih != oh) and not spec.can_scale:
                continue

            log(f"{cstype}: testing {cs_in} -> {cs_out}")
            e = csc_module.Converter()
            try:
                e.init_context(iw, ih, cs_in, ow, oh, cs_out, typedict())
                image = make_test_image(cs_in, iw, ih)
                out = e.convert_image(image)
                if out.get_width() != ow:
                    raise RuntimeError(f"expected image of width {ow} but got {out.get_width()}")
                if out.get_height() != oh:
                    raise RuntimeError(f"expected image of height {oh} but got {out.get_height()}")
                if out.get_pixel_format() != cs_out:
                    raise RuntimeError(f"expected pixel format {cs_out} but got {out.get_pixel_format()}")
                if full:
                    for w,h in ((iw*2, ih//2), (iw//2, ih**2)):
                        if w > limit_w or h > limit_h:
                            continue
                        try:
                            image = make_test_image(cs_in, w, h)
                            out = e.convert_image(image)
                        except Exception:
                            out = None
                        if out is not None:
                            raise RuntimeError(f"converting an image of a smaller size with {cstype} should have failed, got {out} instead")
            finally:
                e.clean()
