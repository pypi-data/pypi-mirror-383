from chrys.palettes import (
    continuous_palette,
    discrete_palette,
    parse_palette_name,
    VEGA_ACCENT,
    VEGA_VIRIDIS,
)

import pytest
import unittest


class TestParsePaletteName(unittest.TestCase):
    def test_valid_name(self):
        self.assertTupleEqual(parse_palette_name(VEGA_ACCENT), ("vega", "accent"))

    def test_invalid_name(self):
        with pytest.raises(ValueError):
            parse_palette_name("lorem ipsum")


class TestContinuousPalette(unittest.TestCase):
    def test_zero_colors(self):
        self.assertCountEqual(continuous_palette(VEGA_VIRIDIS, 0), [])

    def test_one_color(self):
        self.assertCountEqual(continuous_palette(VEGA_VIRIDIS, 1), ["#440356"])

    def test_all_colors(self):
        self.assertCountEqual(
            continuous_palette(VEGA_VIRIDIS, 256),
            [
                "#440356",
                "#450457",
                "#450659",
                "#45075a",
                "#46095c",
                "#460a5d",
                "#460c5f",
                "#470d60",
                "#470f62",
                "#471063",
                "#471164",
                "#471365",
                "#481467",
                "#481668",
                "#481769",
                "#48186b",
                "#481a6c",
                "#481b6d",
                "#481c6e",
                "#481e6f",
                "#481f70",
                "#482071",
                "#482272",
                "#482373",
                "#482474",
                "#482575",
                "#482776",
                "#482877",
                "#482978",
                "#472a79",
                "#472b7a",
                "#472c7b",
                "#472e7c",
                "#472f7d",
                "#47307e",
                "#46317e",
                "#46337f",
                "#463480",
                "#453580",
                "#453681",
                "#453882",
                "#443982",
                "#443a83",
                "#443b84",
                "#433d84",
                "#433e84",
                "#433f85",
                "#424085",
                "#424186",
                "#414286",
                "#414487",
                "#414587",
                "#404688",
                "#404788",
                "#3f4888",
                "#3f4989",
                "#3e4b89",
                "#3e4c89",
                "#3d4d8a",
                "#3d4e8a",
                "#3d4f8a",
                "#3c508a",
                "#3c518b",
                "#3b528b",
                "#3b538b",
                "#3a548b",
                "#3a558c",
                "#39568c",
                "#39578c",
                "#38588c",
                "#38598c",
                "#375a8c",
                "#375b8d",
                "#365c8d",
                "#365e8d",
                "#365f8d",
                "#35608d",
                "#35618d",
                "#34628d",
                "#34638d",
                "#33648d",
                "#33658e",
                "#32668e",
                "#32668e",
                "#31678e",
                "#31688e",
                "#30698e",
                "#306a8e",
                "#2f6b8e",
                "#2f6c8e",
                "#2f6d8e",
                "#2e6e8e",
                "#2e6f8e",
                "#2d708e",
                "#2d718e",
                "#2c728e",
                "#2c738e",
                "#2c748e",
                "#2b748e",
                "#2b758e",
                "#2b768e",
                "#2a778e",
                "#2a788e",
                "#2a798e",
                "#297a8e",
                "#297b8e",
                "#297c8e",
                "#287d8e",
                "#287f8e",
                "#27808e",
                "#27818e",
                "#27828e",
                "#26828e",
                "#26838e",
                "#25848e",
                "#25858e",
                "#24868e",
                "#24868e",
                "#23878e",
                "#23888e",
                "#23898e",
                "#238a8e",
                "#228b8e",
                "#228c8e",
                "#228d8d",
                "#228e8d",
                "#218f8d",
                "#21908d",
                "#21918d",
                "#21928d",
                "#20938c",
                "#20948c",
                "#20958c",
                "#20958c",
                "#1f968b",
                "#1f978b",
                "#1f988b",
                "#1f998b",
                "#1f9a8a",
                "#1f9b8a",
                "#1f9c8a",
                "#1f9d89",
                "#1f9e89",
                "#1f9e89",
                "#1f9f88",
                "#1fa088",
                "#1fa187",
                "#20a287",
                "#20a386",
                "#21a486",
                "#21a585",
                "#21a685",
                "#22a785",
                "#22a884",
                "#23a984",
                "#24aa83",
                "#25ab82",
                "#26ac82",
                "#26ac81",
                "#27ad81",
                "#28ae80",
                "#29af7f",
                "#2ab07f",
                "#2cb17e",
                "#2db27d",
                "#2eb37d",
                "#2fb37c",
                "#31b47b",
                "#32b57b",
                "#33b67a",
                "#35b779",
                "#36b878",
                "#38b977",
                "#39b977",
                "#3bba76",
                "#3dbb75",
                "#3ebc74",
                "#40bd73",
                "#42be72",
                "#43bf71",
                "#45c070",
                "#47c06f",
                "#49c16e",
                "#4bc26d",
                "#4dc36c",
                "#4fc36b",
                "#51c46a",
                "#53c568",
                "#55c567",
                "#57c666",
                "#59c765",
                "#5bc863",
                "#5ec962",
                "#60ca61",
                "#62ca60",
                "#64cb5e",
                "#66cc5d",
                "#68cd5c",
                "#6bcd5a",
                "#6dce59",
                "#6fce57",
                "#72cf56",
                "#74cf55",
                "#76d053",
                "#79d152",
                "#7bd150",
                "#7dd24f",
                "#80d34d",
                "#82d34c",
                "#85d44a",
                "#87d549",
                "#8ad547",
                "#8cd646",
                "#8fd744",
                "#91d743",
                "#94d841",
                "#96d83f",
                "#99d93e",
                "#9bd93c",
                "#9eda3a",
                "#a1da39",
                "#a3db37",
                "#a6db36",
                "#a8dc34",
                "#abdc32",
                "#aedd30",
                "#b0dd2f",
                "#b3dd2d",
                "#b6de2b",
                "#b9de29",
                "#bbdf28",
                "#bedf26",
                "#c0e025",
                "#c3e023",
                "#c6e022",
                "#c8e120",
                "#cbe11f",
                "#cde11e",
                "#d0e21c",
                "#d2e21b",
                "#d5e21b",
                "#d8e31b",
                "#dae31b",
                "#dde31b",
                "#e0e41a",
                "#e2e41a",
                "#e5e41a",
                "#e8e51a",
                "#eae51b",
                "#ede51c",
                "#efe61d",
                "#f1e61f",
                "#f4e620",
                "#f6e621",
                "#f8e722",
                "#fbe724",
            ],
        )

    def test_invalid_size(self):
        with pytest.raises(ValueError):
            continuous_palette(VEGA_VIRIDIS, 257)


class TestDiscretePalette(unittest.TestCase):
    def test_no_size(self):
        self.assertCountEqual(
            discrete_palette(VEGA_ACCENT),
            ["#7fc97f", "#beaed4", "#fdc086", "#ffff99", "#386cb0", "#f0027f"],
        )

    def test_valid_size(self):
        self.assertCountEqual(
            discrete_palette(VEGA_ACCENT, 8),
            [
                "#7fc97f",
                "#beaed4",
                "#fdc086",
                "#ffff99",
                "#386cb0",
                "#f0027f",
                "#bf5b17",
                "#666666",
            ],
        )

    def test_invalid_size(self):
        self.assertCountEqual(
            discrete_palette(VEGA_ACCENT, 20),
            [
                "#7fc97f",
                "#beaed4",
                "#fdc086",
                "#ffff99",
                "#386cb0",
                "#f0027f",
                "#bf5b17",
                "#666666",
            ],
        )

    def test_invalid_name(self):
        with pytest.raises(ValueError):
            discrete_palette("lorem ipsum")
