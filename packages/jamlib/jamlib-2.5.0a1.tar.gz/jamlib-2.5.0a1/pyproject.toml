[project]
name = "jamlib"
version = "2.5.0a1"
description = "Simple and universal library for authorization."
authors = [
    {name = "Makridenko Adrian",email = "adrianmakridenko@duck.com"},
    {name = "Ksenia Travnikova",email = "kseniatravnikova@duck.com"}
]
license = {text = "MIT License"}
readme = {file = "README.md", content-type = "text/markdown"}
keywords = [
    "Authentication",
    "Backend",
    "JWT",
    "Sessions",
    "OTP",
    "TOTP",
    "Oauth",
    "OAuth2",
    "Litestar",
    "FastAPI"
]
requires-python = ">=3.9"
dependencies = [
    "pycryptodome>=3.21.0,<4.0.0",
    "cryptography (>=44.0.2,<45.0.0)",
]

classifiers = [
    "License :: OSI Approved :: MIT License",
    "Development Status :: 5 - Production/Stable",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Internet :: WWW/HTTP :: Session",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://jam.makridenko.ru"
Repository = "https://github.com/lyaguxafrog/jam"
Issues = "https://github.com/lyaguxafrog/jam/issues"
Changelog = "https://github.com/lyaguxafrog/jam/releases"


[project.optional-dependencies]
redis=["redis>=6.4.0"]
json=["tinydb>=4.8.2"]
yaml=["pyyaml>=6.0.2"]
toml=["toml>=0.10.2"]
litestar=["litestar>=2.18.0"]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "fakeredis>=2.28.1",
    "icecream>=2.1.4",
    "isort>=6.0.1",
    "litestar>=2.18.0",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.9",
    "mkdocstrings>=0.29.0",
    "mkdocstrings-python>=1.16.7",
    "mypy>=1.15.0",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.1.0",
    "redis>=6.4.0",
    "ruff>=0.11.2",
    "termynal>=0.13.0",
    "tinydb>=4.8.2",
    "toml>=0.10.2",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.19",
    "mkdocstrings>=0.30.0",
    "mkdocstrings-python>=1.18.2",
]
tests = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
]


[tool.ruff]
target-version = "py39"
line-length = 80
ignore = ["UP009", "D100"]
exclude = ["*__init__.py", "tests/", "*exceptions/"]

[tool.ruff.lint]
extend-select = ["UP", "D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.isort]
profile = "black"
default_section = "THIRDPARTY"
balanced_wrapping = true
known_first_party = "src"
line_length = 80
lines_after_imports = 2
lines_between_sections = 1
multi_line_output = 3
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip = ["env", ".env", ".env.example", "migrations/", ".venv/"]

[tool.black]
line-length = 80
skip-string-normalization = false

[tool.mypy]
disable_error_code = ["no-redef", "import-not-found", "import-untyped", "attr-defined"]

[tool.pytest]
python_files = ["test*.py"]

[tool.pytest.ini_options]
addopts = "--capture=no"
asyncio_default_fixture_loop_scope = "function"
