name: Release

on:
  push:
    tags:
      - 'v*'
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  release:
    name: Create Release and Publish
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper changelog generation
    
    - name: Extract version from tag
      id: version
      run: |
        # Remove 'v' prefix if present and extract version
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_NAME#v}
        
        # Validate version format (x.y.z)
        if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "valid_version=true" >> $GITHUB_OUTPUT
          echo "✅ Valid version format: $VERSION"
        else
          echo "valid_version=false" >> $GITHUB_OUTPUT
          echo "❌ Invalid version format: $VERSION (must be x.y.z)"
          exit 1
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes in ${{ steps.version.outputs.version }}
          
          This release was automatically created from tag `${{ steps.version.outputs.tag_name }}`.
          
          ### Package Information
          - **Version**: ${{ steps.version.outputs.version }}
          - **Python**: >=3.9
          - **Supported Versions**: 3.9, 3.10, 3.11, 3.12
          
          ### Installation
          ```bash
          pip install twobitreader==${{ steps.version.outputs.version }}
          ```
        draft: false
        prerelease: false
    
    - name: Publish to PyPI
      if: steps.version.outputs.valid_version == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing to PyPI..."
        twine upload dist/*
        echo "✅ Successfully published to PyPI!"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 30
