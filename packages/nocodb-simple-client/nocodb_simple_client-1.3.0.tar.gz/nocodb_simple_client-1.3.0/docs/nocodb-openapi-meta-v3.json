{
  "openapi": "3.1.0",
  "x-stoplight": {
    "id": "qiz1rcfqd2jy6"
  },
  "info": {
    "title": "NocoDB",
    "version": null,
    "description": "NocoDB API Documentation"
  },
  "servers": [
    {
      "url": "https://app.nocodb.com"
    }
  ],
  "paths": {
    "/api/v3/data/{baseId}/{tableId}/records": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "baseId",
          "in": "path",
          "required": true,
          "description": "**Base Identifier**."
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableId",
          "in": "path",
          "required": true,
          "description": "**Table Identifier**."
        }
      ],
      "get": {
        "summary": "List Table Records",
        "operationId": "db-data-table-row-list",
        "description": "This API endpoint allows you to retrieve records from a specified table. You can customize the response by applying various query parameters for filtering, sorting, and formatting.\n\n**Pagination**: The response is paginated by default, with the first page being returned initially. The response includes the following additional information in the `pageInfo` JSON block:\n\n- **next**: Contains the URL to retrieve the next page of records. For example, `\"https://app.nocodb.com/api/v3/tables/medhonywr18cysz/records?page=2\"` points to the next page of records.\n- If there are no more records available (you are on the last page), this attribute will be _null_.\n\nThe `pageInfo` attribute is particularly valuable when working with large datasets divided into multiple pages. It provides the necessary URL to seamlessly fetch subsequent pages, enabling efficient navigation through the dataset.",
        "tags": [
          "Table Records"
        ],
        "parameters": [
          {
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "in": "query",
            "name": "fields",
            "description": "Allows you to specify the fields that you wish to include from the linked records in your API response. By default, only Primary Key and associated display value field is included.\n\nExample: `fields=[\"field1\",\"field2\"]` or `fields=field1,field2` will include only 'field1' and 'field2' in the API response."
          },
          {
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "direction": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ]
                      },
                      "field": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "field",
                      "direction"
                    ]
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "direction": {
                      "type": "string",
                      "enum": [
                        "asc",
                        "desc"
                      ]
                    },
                    "field": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "field",
                    "direction"
                  ]
                }
              ]
            },
            "in": "query",
            "name": "sort",
            "description": "Allows you to specify the fields by which you want to sort the records in your API response. Accepts either an array of sort objects or a single sort object.\n\nEach sort object must have a 'field' property specifying the field name and a 'direction' property with value 'asc' or 'desc'.\n\nExample: `sort=[{\"direction\":\"asc\",\"field\":\"field_name\"},{\"direction\":\"desc\",\"field\":\"another_field\"}]` or `sort={\"direction\":\"asc\",\"field\":\"field_name\"}`\n\nIf `viewId` query parameter is also included, the sort included here will take precedence over any sorting configuration defined in the view."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where",
            "description": "Enables you to define specific conditions for filtering records in your API response. Multiple conditions can be combined using logical operators such as 'and' and 'or'. Each condition consists of three parts: a field name, a comparison operator, and a value.\n\nExample: `where=(field1,eq,value1)~and(field2,eq,value2)` will filter records where 'field1' is equal to 'value1' AND 'field2' is equal to 'value2'. \n\nYou can also use other comparison operators like 'neq' (not equal), 'gt' (greater than), 'lt' (less than), and more, to create complex filtering rules.\n\nIf `viewId` query parameter is also included, then the filters included here will be applied over the filtering configuration defined in the view. \n\nPlease remember to maintain the specified format, for further information on this please see [the documentation](https://nocodb.com/docs/product-docs/developer-resources/rest-apis#v3-where-query-parameter)"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "page",
            "description": "Enables you to control the pagination of your API response by specifying the page number you want to retrieve. By default, the first page is returned. If you want to retrieve the next page, you can increment the page number by one.\n\nExample: `page=2` will return the second page of records in the dataset."
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "nestedPage",
            "description": "Enables you to control the pagination of your nested data (linked records) in API response by specifying the page number you want to retrieve. By default, the first page is returned. If you want to retrieve the next page, you can increment the page number by one.\n\nExample: `page=2` will return the second page of nested data records in the dataset."
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "pageSize",
            "description": "Enables you to set a limit on the number of records you want to retrieve in your API response. By default, your response includes all the available records, but by using this parameter, you can control the quantity you receive.\n\nExample: `pageSize=100` will constrain your response to the first 100 records in the dataset."
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "viewId",
            "in": "query",
            "description": "***View Identifier***. Allows you to fetch records that are currently visible within a specific view. API retrieves records in the order they are displayed if the SORT option is enabled within that view.\n\nAdditionally, if you specify a `sort` query parameter, it will take precedence over any sorting configuration defined in the view. If you specify a `where` query parameter, it will be applied over the filtering configuration defined in the view. \n\nBy default, all fields, including those that are disabled within the view, are included in the response. To explicitly specify which fields to include or exclude, you can use the `fields` query parameter to customize the output according to your requirements."
          },
          {
            "required": true,
            "$ref": "#/components/parameters/xc-token"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataListResponseV3"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "records": [
                        {
                          "id": 1,
                          "fields": {
                            "SingleLineText": "record #1",
                            "MultiLineText": "sample long text",
                            "Email": "user@nocodb.com",
                            "PhoneNumber": "1234567890",
                            "URL": "www.google.com",
                            "Number": 1234,
                            "Decimal": 100.88,
                            "Currency": 100,
                            "Percent": 10,
                            "Duration": 1010,
                            "Rating": 3,
                            "Year": 2020,
                            "Time": "20:20:00",
                            "Checkbox": true,
                            "Date": "2020-01-01",
                            "SingleSelect": "Jan",
                            "MultiSelect": [
                              "Jan",
                              "Feb",
                              "Mar"
                            ],
                            "DateTime": "2022-02-02 00:00:00+00:00",
                            "LTAR": [
                              {
                                "id": 1,
                                "fields": {
                                  "SingleLineText": "record #1"
                                }
                              },
                              {
                                "id": 2,
                                "fields": {
                                  "SingleLineText": "record #2"
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "next": "https://app.nocodb.com/api/v3/data/baseId/tableId/records?page=2"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "summary": "Create Table Records",
        "operationId": "db-data-table-row-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataInsertResponseV3"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "records": [
                        {
                          "id": 10,
                          "fields": {
                            "Number": 1,
                            "SingleLineText": "record #1"
                          }
                        },
                        {
                          "id": 11,
                          "fields": {
                            "Number": 2,
                            "SingleLineText": "record #2"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "Table Records"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DataInsertRequestV3"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DataInsertRequestV3"
                    }
                  }
                ]
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "fields": {
                        "Number": 1,
                        "Decimal": 100.88,
                        "Currency": 100,
                        "Percent": 100,
                        "Duration": 1010,
                        "Rating": 3,
                        "Year": 2020,
                        "Time": "20:20:00",
                        "SingleLineText": "record #1",
                        "MultiLineText": "sample text",
                        "Email": "user@nocodb.com",
                        "PhoneNumber": "1234567890",
                        "URL": "www.google.com",
                        "SingleSelect": "jan",
                        "Checkbox": true,
                        "Date": "2020-01-01",
                        "JSON": {
                          "x": 1,
                          "y": 2
                        },
                        "User": [
                          {
                            "email": "raju@nocodb.com"
                          }
                        ],
                        "MultiSelect": [
                          "jan",
                          "feb",
                          "mar"
                        ],
                        "DateTime": "2022-02-02 05:30:00+00:00",
                        "LTAR": [
                          {
                            "id": 1,
                            "fields": {}
                          },
                          {
                            "id": 2,
                            "fields": {}
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "This API endpoint allows the creation of new records within a specified table. Records to be inserted are input as an array of key-value pair objects, where each key corresponds to a field name. Ensure that all the required fields are included in the payload, with exceptions for fields designated as auto-increment or those having default values. \n\nCertain read-only field types will be disregarded if included in the request. These field types include Look Up, Roll Up, Formula, Created By, Updated By, Created At, Updated At, Button, Barcode and QR Code.\n\nFor **Attachment** field types, this API cannot be used. Instead, utilize the storage APIs for managing attachments. Support for attachment fields in the record update API will be added soon.",
        "parameters": [
          {
            "required": true,
            "$ref": "#/components/parameters/xc-token"
          }
        ]
      },
      "patch": {
        "summary": "Update Table Records",
        "operationId": "db-data-table-row-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataUpdateResponseV3"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "records": [
                        {
                          "id": 6
                        },
                        {
                          "id": 7
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "Table Records"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DataUpdateRequestV3"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DataUpdateRequestV3"
                    }
                  }
                ]
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "id": 6,
                      "fields": {
                        "Number": 101,
                        "SingleLineText": "Updated record #1",
                        "Email": "updated@nocodb.com"
                      }
                    },
                    {
                      "id": 7,
                      "fields": {
                        "Number": 102,
                        "SingleLineText": "Updated record #2"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "This API endpoint allows you to update records within a specified table by their Record ID. The request payload should contain the Record ID and the fields that need to be updated.\n\nCertain read-only field types will be disregarded if included in the request. These field types include Look Up, Roll Up, Formula, Created By, Updated By, Created At, Updated At, Button, Barcode and QR Code.\n\nFor **Attachment** field types, this API cannot be used. Instead, utilize the storage APIs for managing attachments. Support for attachment fields in the record update API will be added soon.",
        "parameters": [
          {
            "required": true,
            "$ref": "#/components/parameters/xc-token"
          }
        ]
      },
      "delete": {
        "summary": "Delete Table Records",
        "operationId": "db-data-table-row-delete",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataDeleteResponseV3"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "records": [
                        {
                          "id": 1,
                          "deleted": true
                        },
                        {
                          "id": 2,
                          "deleted": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "Table Records"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DataDeleteRequestV3"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DataDeleteRequestV3"
                    }
                  }
                ]
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "id": 1
                    },
                    {
                      "id": 2
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "This API endpoint allows the deletion of records within a specified table by Record ID. The request should include the Record ID of the record(s) to be deleted.",
        "parameters": [
          {
            "required": true,
            "$ref": "#/components/parameters/xc-token"
          }
        ]
      }
    },
    "/api/v3/data/{baseId}/{tableId}/records/{recordId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "baseId",
          "in": "path",
          "required": true,
          "description": "**Base Identifier**."
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableId",
          "in": "path",
          "required": true,
          "description": "**Table Identifier**"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "recordId",
          "in": "path",
          "required": true,
          "description": "Record ID"
        }
      ],
      "get": {
        "summary": "Read Table Record",
        "operationId": "db-data-table-row-read",
        "description": "This API endpoint allows you to retrieve a single record identified by Record-ID, serving as unique identifier for the record from a specified table.",
        "tags": [
          "Table Records"
        ],
        "parameters": [
          {
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "in": "query",
            "name": "fields",
            "description": "Allows you to specify the fields that you wish to include from the linked records in your API response. By default, only Primary Key and associated display value field is included.\n\nExample: `fields=[\"field1\",\"field2\"]` or `fields=field1,field2` will include only 'field1' and 'field2' in the API response."
          },
          {
            "required": true,
            "$ref": "#/components/parameters/xc-token"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataReadResponseV3"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": 1,
                      "fields": {
                        "SingleLineText": "record #1",
                        "MultiLineText": "sample long text",
                        "Email": "user@nocodb.com",
                        "PhoneNumber": "1234567890",
                        "URL": "www.google.com",
                        "Number": 1234,
                        "Decimal": 100.88,
                        "Currency": 100,
                        "Percent": 10,
                        "Duration": 1010,
                        "Rating": 3,
                        "Year": 2020,
                        "Time": "20:20:00",
                        "Checkbox": true,
                        "Date": "2020-01-01",
                        "SingleSelect": "Jan",
                        "MultiSelect": [
                          "Jan",
                          "Feb",
                          "Mar"
                        ],
                        "DateTime": "2022-02-02 00:00:00+00:00",
                        "LTAR": [
                          {
                            "id": 1,
                            "fields": {
                              "SingleLineText": "record #1"
                            }
                          },
                          {
                            "id": 2,
                            "fields": {
                              "SingleLineText": "record #2"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/api/v3/data/{baseId}/{modelId}/records/{recordId}/fields/{fieldId}/upload": {
      "post": {
        "summary": "Upload Attachment to Cell",
        "operationId": "db-data-table-row-attachment-upload",
        "description": "This API endpoint allows you to upload an attachment (base64 encoded) to a specific cell in a table. The attachment data includes content type, base64 encoded file, and filename.",
        "tags": [
          "Table Records"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "baseId",
            "in": "path",
            "required": true,
            "description": "**Base Identifier**."
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "modelId",
            "in": "path",
            "required": true,
            "description": "**Model Identifier**."
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "recordId",
            "in": "path",
            "required": true,
            "description": "**Record Identifier**."
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "fieldId",
            "in": "path",
            "required": true,
            "description": "**Field Identifier**."
          },
          {
            "required": true,
            "$ref": "#/components/parameters/xc-token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contentType": {
                    "type": "string",
                    "description": "Content type of the file (e.g., image/png, application/pdf)."
                  },
                  "file": {
                    "type": "string",
                    "description": "Base64 encoded file content."
                  },
                  "filename": {
                    "type": "string",
                    "description": "Original filename of the attachment."
                  }
                },
                "required": [
                  "contentType",
                  "file",
                  "filename"
                ]
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "contentType": "image/png",
                    "file": "iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==",
                    "filename": "image.png"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataReadResponseV3"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": 1,
                      "fields": {
                        "SingleLineText": "record #1",
                        "MultiLineText": "sample long text",
                        "Email": "user@nocodb.com",
                        "PhoneNumber": "1234567890",
                        "URL": "www.google.com",
                        "Number": 1234,
                        "Decimal": 100.88,
                        "Currency": 100,
                        "Percent": 10,
                        "Duration": 1010,
                        "Rating": 3,
                        "Year": 2020,
                        "Time": "20:20:00",
                        "Checkbox": true,
                        "Date": "2020-01-01",
                        "SingleSelect": "Jan",
                        "MultiSelect": [
                          "Jan",
                          "Feb",
                          "Mar"
                        ],
                        "DateTime": "2022-02-02 00:00:00+00:00",
                        "LTAR": [
                          {
                            "id": 1,
                            "fields": {
                              "SingleLineText": "record #1"
                            }
                          },
                          {
                            "id": 2,
                            "fields": {
                              "SingleLineText": "record #2"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/api/v3/data/{baseId}/{tableId}/count": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "baseId",
          "in": "path",
          "required": true,
          "description": "**Base Identifier**."
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tableId",
          "in": "path",
          "required": true,
          "description": "**Table Identifier**"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "viewId",
          "in": "query",
          "description": "**View Identifier**. Allows you to fetch record count that are currently visible within a specific view."
        }
      ],
      "get": {
        "summary": "Count Table Records",
        "operationId": "db-data-table-row-count",
        "description": "This API endpoint allows you to retrieve the total number of records from a specified table or a view. You can narrow down search results by applying `where` query parameter",
        "tags": [
          "Table Records"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where",
            "description": "Enables you to define specific conditions for filtering record count in your API response. Multiple conditions can be combined using logical operators such as 'and' and 'or'. Each condition consists of three parts: a field name, a comparison operator, and a value.\n\nExample: `where=(field1,eq,value1)~and(field2,eq,value2)` will filter records where 'field1' is equal to 'value1' AND 'field2' is equal to 'value2'. \n\nYou can also use other comparison operators like 'neq' (not equal), 'gt' (greater than), 'lt' (less than), and more, to create complex filtering rules.\n\nIf `viewId` query parameter is also included, then the filters included here will be applied over the filtering configuration defined in the view. \n\nPlease remember to maintain the specified format, for further information on this please see [the documentation](https://nocodb.com/docs/product-docs/developer-resources/rest-apis#v3-where-query-parameter)"
          },
          {
            "$ref": "#/components/parameters/xc-token"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number"
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "count": 3
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/api/v3/data/{baseId}/{tableId}/links/{linkFieldId}/{recordId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "tableId",
          "in": "path",
          "required": true,
          "description": "**Table Identifier**"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "linkFieldId",
          "in": "path",
          "required": true,
          "description": "**Links Field Identifier** corresponding to the relation field `Link to another record` established between tables."
        }
      ],
      "get": {
        "summary": "List Linked Records",
        "operationId": "db-data-table-row-nested-list",
        "description": "This API endpoint allows you to retrieve list of linked records for a specific `Link to another record field` and `Record ID`. The response is an array of objects containing Primary Key and its corresponding display value.",
        "tags": [
          "Linked Records"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "recordId",
            "in": "path",
            "required": true,
            "description": "**Record Identifier** corresponding to the record in this table for which linked records are being fetched."
          },
          {
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "in": "query",
            "name": "fields",
            "description": "Allows you to specify the fields that you wish to include from the linked records in your API response. By default, only Primary Key and associated display value field is included.\n\nExample: `fields=[\"field1\",\"field2\"]` or `fields=field1,field2` will include only 'field1' and 'field2' in the API response."
          },
          {
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "direction": {
                        "type": "string",
                        "enum": [
                          "asc",
                          "desc"
                        ]
                      },
                      "field": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "field",
                      "direction"
                    ]
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "direction": {
                      "type": "string",
                      "enum": [
                        "asc",
                        "desc"
                      ]
                    },
                    "field": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "field",
                    "direction"
                  ]
                }
              ]
            },
            "in": "query",
            "name": "sort",
            "description": "Allows you to specify the fields by which you want to sort the records in your API response. Accepts either an array of sort objects or a single sort object.\n\nEach sort object must have a 'field' property specifying the field name and a 'direction' property with value 'asc' or 'desc'.\n\nExample: `sort=[{\"direction\":\"asc\",\"field\":\"field_name\"},{\"direction\":\"desc\",\"field\":\"another_field\"}]` or `sort={\"direction\":\"asc\",\"field\":\"field_name\"}`\n\nIf `viewId` query parameter is also included, the sort included here will take precedence over any sorting configuration defined in the view."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where",
            "description": "Enables you to define specific conditions for filtering linked records in your API response. Multiple conditions can be combined using logical operators such as 'and' and 'or'. Each condition consists of three parts: a field name, a comparison operator, and a value.\n\nExample: `where=(field1,eq,value1)~and(field2,eq,value2)` will filter linked records where 'field1' is equal to 'value1' AND 'field2' is equal to 'value2'. \n\nYou can also use other comparison operators like 'neq' (not equal), 'gt' (greater than), 'lt' (less than), and more, to create complex filtering rules.\n\nPlease remember to maintain the specified format, for further information on this please see [the documentation](https://nocodb.com/docs/product-docs/developer-resources/rest-apis#v3-where-query-parameter)"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "page",
            "description": "Enables you to control the pagination of your API response by specifying the page number you want to retrieve. By default, the first page is returned. If you want to retrieve the next page, you can increment the page number by one.\n\nExample: `page=2` will return the second page of linked records in the dataset."
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "pageSize",
            "description": "Enables you to set a limit on the number of linked records you want to retrieve in your API response. By default, your response includes all the available linked records, but by using this parameter, you can control the quantity you receive.\n\nExample: `pageSize=100` will constrain your response to the first 100 linked records in the dataset."
          },
          {
            "required": true,
            "$ref": "#/components/parameters/xc-token"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataListResponseV3"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "records": [
                        {
                          "id": 1,
                          "fields": {
                            "SingleLineText": "record #1",
                            "MultiLineText": "sample long text",
                            "Email": "user@nocodb.com",
                            "PhoneNumber": "1234567890",
                            "URL": "www.google.com",
                            "Number": 1234,
                            "Decimal": 100.88,
                            "Currency": 100,
                            "Percent": 10,
                            "Duration": 1010,
                            "Rating": 3,
                            "Year": 2020,
                            "Time": "20:20:00",
                            "Checkbox": true,
                            "Date": "2020-01-01",
                            "SingleSelect": "Jan",
                            "MultiSelect": [
                              "Jan",
                              "Feb",
                              "Mar"
                            ],
                            "DateTime": "2022-02-02 00:00:00+00:00",
                            "LTAR": [
                              {
                                "id": 1,
                                "fields": {
                                  "SingleLineText": "record #1"
                                }
                              },
                              {
                                "id": 2,
                                "fields": {
                                  "SingleLineText": "record #2"
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "next": "https://app.nocodb.com/api/v3/data/baseId/tableId/records?page=2"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "summary": "Link Records",
        "operationId": "db-data-table-row-nested-link",
        "responses": {
          "200": {
            "description": "Records successfully linked",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the linking operation was successful",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "Success Response": {
                    "summary": "Successful linking operation",
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "Linked Records"
        ],
        "requestBody": {
          "required": true,
          "description": "Array of record objects to be linked, each containing an id field",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for the record",
                        "example": "33"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier for the record",
                          "example": "22"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "additionalProperties": false
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                ]
              },
              "examples": {
                "Single Record": {
                  "summary": "Link a single record",
                  "value": {
                    "id": "22"
                  }
                },
                "Multiple Records": {
                  "summary": "Link multiple records",
                  "value": [
                    {
                      "id": "43"
                    },
                    {
                      "id": "01"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "This API endpoint allows you to link records to a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for linking purposes. Note that any existing links, if present, will be unaffected during this operation.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "recordId",
            "in": "path",
            "required": true,
            "description": "**Record Identifier** corresponding to the record in this table for which links are being created."
          },
          {
            "required": true,
            "$ref": "#/components/parameters/xc-token"
          }
        ]
      },
      "delete": {
        "summary": "Unlink Records",
        "operationId": "db-data-table-row-nested-unlink",
        "responses": {
          "200": {
            "description": "Records successfully unlinked",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the unlink operation was successful",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "Success Response": {
                    "summary": "Successful unlinking operation",
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "Linked Records"
        ],
        "requestBody": {
          "required": true,
          "description": "Array of record objects to be unlinked, each containing an id field",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for the record",
                        "example": "33"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier for the record",
                          "example": "33"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "additionalProperties": false
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                ]
              },
              "examples": {
                "Single Record": {
                  "summary": "UnLink a single record",
                  "value": {
                    "id": "32"
                  }
                },
                "Multiple Records": {
                  "summary": "UnLink multiple records",
                  "value": [
                    {
                      "id": "1"
                    },
                    {
                      "id": "22"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "This API endpoint allows you to unlink records from a specific `Link field` and `Record ID`. The request payload is an array of record-ids from the adjacent table for unlinking purposes. Note that, \n- duplicated record-ids will be ignored.\n- non-existent record-ids will be ignored.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "recordId",
            "in": "path",
            "required": true,
            "description": "**Record Identifier** corresponding to the record in this table for which links are being removed."
          },
          {
            "required": true,
            "$ref": "#/components/parameters/xc-token"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "0": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "formula"
            ],
            "description": "Button type: formula"
          },
          "formula": {
            "type": "string",
            "description": "Formula to execute"
          }
        },
        "required": [
          "type",
          "formula"
        ]
      },
      "1": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "webhook"
            ],
            "description": "Button type: webhook"
          },
          "button_hook_id": {
            "type": "string",
            "description": "ID of the webhook to trigger"
          }
        },
        "required": [
          "type",
          "button_hook_id"
        ]
      },
      "2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ai"
            ],
            "description": "Button type: AI"
          },
          "prompt": {
            "type": "string",
            "description": "AI prompt to execute"
          },
          "integration_id": {
            "type": "string",
            "description": "Integration ID for AI service"
          },
          "theme": {
            "type": "string",
            "description": "Theme of the button"
          },
          "output_column_ids": {
            "type": "string",
            "description": "IDs of columns where AI output should be stored"
          },
          "label": {
            "type": "string",
            "description": "Label of the button"
          },
          "icon": {
            "type": "string",
            "description": "Icon of the button"
          },
          "color": {
            "type": "string",
            "description": "Color of the button"
          }
        },
        "required": [
          "type",
          "prompt",
          "integration_id"
        ]
      },
      "Base": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the base."
          },
          "title": {
            "type": "string",
            "description": "Title of the base."
          },
          "meta": {
            "$ref": "#/components/schemas/BaseMetaRes"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the base was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the base was last updated."
          },
          "workspace_id": {
            "type": "string",
            "description": "Unique identifier for the workspace to which this base belongs to."
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the data source."
                },
                "title": {
                  "type": "string",
                  "description": "Title of the data source."
                },
                "type": {
                  "type": "string",
                  "description": "Type of the data source (e.g., pg, mysql)."
                },
                "is_schema_readonly": {
                  "type": "boolean",
                  "description": "Indicates if the schema in this data source is read-only."
                },
                "is_data_readonly": {
                  "type": "boolean",
                  "description": "Indicates if the data (records) in this data source is read-only."
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID for the data source."
                }
              },
              "required": [
                "id",
                "title",
                "type",
                "is_schema_readonly",
                "is_data_readonly",
                "integration_id"
              ]
            },
            "description": "List of data sources associated with this base. This information will be included only if one or more external data sources are associated with the base."
          }
        },
        "required": [
          "id",
          "title",
          "meta",
          "created_at",
          "updated_at",
          "workspace_id"
        ]
      },
      "BaseWithMembers": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the base."
          },
          "title": {
            "type": "string",
            "description": "Title of the base."
          },
          "meta": {
            "$ref": "#/components/schemas/BaseMetaRes"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the base was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the base was last updated."
          },
          "workspace_id": {
            "type": "string",
            "description": "Unique identifier for the workspace to which this base belongs to."
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the data source."
                },
                "title": {
                  "type": "string",
                  "description": "Title of the data source."
                },
                "type": {
                  "type": "string",
                  "description": "Type of the data source (e.g., pg, mysql)."
                },
                "is_schema_readonly": {
                  "type": "boolean",
                  "description": "Indicates if the schema in this data source is read-only."
                },
                "is_data_readonly": {
                  "type": "boolean",
                  "description": "Indicates if the data (records) in this data source is read-only."
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID for the data source."
                }
              },
              "required": [
                "id",
                "title",
                "type",
                "is_schema_readonly",
                "is_data_readonly",
                "integration_id"
              ]
            },
            "description": "List of data sources associated with this base. This information will be included only if one or more external data sources are associated with the base."
          },
          "individual_members": {
            "type": "object",
            "properties": {
              "base_members": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BaseMemberWithWorkspaceRole"
                }
              },
              "workspace_members": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WorkspaceMember"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "title",
          "meta",
          "created_at",
          "updated_at",
          "workspace_id"
        ]
      },
      "BaseMetaRes": {
        "type": "object",
        "properties": {
          "icon_color": {
            "type": "string",
            "description": "Specifies the color of the base icon using a hexadecimal color code (e.g., `#36BFFF`)",
            "pattern": "^#[0-9A-Fa-f]{6}$"
          }
        }
      },
      "BaseMetaReq": {
        "type": "object",
        "properties": {
          "icon_color": {
            "type": "string",
            "description": "Specifies the color of the base icon using a hexadecimal color code (e.g., `#36BFFF`).\n\n**Constraints**:\n- Must be a valid 6-character hexadecimal color code preceded by a `#`.\n- Optional field; defaults to a standard color if not provided.",
            "pattern": "^#[0-9A-Fa-f]{6}$"
          }
        }
      },
      "BaseCreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the base."
          },
          "meta": {
            "$ref": "#/components/schemas/BaseMetaReq"
          }
        },
        "required": [
          "title"
        ]
      },
      "BaseUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the base."
          },
          "meta": {
            "$ref": "#/components/schemas/BaseMetaReq"
          }
        }
      },
      "TableList": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the table."
                },
                "title": {
                  "type": "string",
                  "description": "Title of the table."
                },
                "description": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "description": "Description of the table."
                },
                "meta": {
                  "$ref": "#/components/schemas/TableMeta"
                },
                "base_id": {
                  "type": "string",
                  "description": "Unique identifier for the base to which this table belongs to."
                },
                "source_id": {
                  "type": "string",
                  "description": "Unique identifier for the data source. This information will be included only if the table is associated with an external data source."
                },
                "workspace_id": {
                  "type": "string",
                  "description": "Unique identifier for the workspace to which this base belongs to."
                }
              },
              "required": [
                "id",
                "title",
                "base_id",
                "workspace_id"
              ]
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "TableMeta": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string",
            "description": "Icon prefix to the table name that needs to be displayed in-lieu of the default table icon."
          }
        }
      },
      "TableCreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the table."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Description of the table."
          },
          "meta": {
            "$ref": "#/components/schemas/TableMeta"
          },
          "source_id": {
            "type": "string",
            "description": "Unique identifier for the data source. Include this information only if the table being created is part of a data source."
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateField"
            }
          }
        },
        "required": [
          "title"
        ]
      },
      "FieldOptions": {
        "SingleLineText": {
          "title": "SingleLineText",
          "properties": {
            "type": {
              "enum": [
                "SingleLineText"
              ]
            }
          }
        },
        "LongText": {
          "title": "LongText",
          "properties": {
            "type": {
              "enum": [
                "LongText"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_LongText"
            }
          }
        },
        "PhoneNumber": {
          "title": "PhoneNumber",
          "properties": {
            "type": {
              "enum": [
                "PhoneNumber"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_PhoneNumber"
            }
          }
        },
        "URL": {
          "title": "URL",
          "properties": {
            "type": {
              "enum": [
                "URL"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_URL"
            }
          }
        },
        "Email": {
          "title": "Email",
          "properties": {
            "type": {
              "enum": [
                "Email"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Email"
            }
          }
        },
        "Number": {
          "title": "Number",
          "properties": {
            "type": {
              "enum": [
                "Number"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Number"
            }
          }
        },
        "Decimal": {
          "title": "Decimal",
          "properties": {
            "type": {
              "enum": [
                "Decimal"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Decimal"
            }
          }
        },
        "Currency": {
          "title": "Currency",
          "properties": {
            "type": {
              "enum": [
                "Currency"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Currency"
            }
          }
        },
        "Percent": {
          "title": "Percent",
          "properties": {
            "type": {
              "enum": [
                "Percent"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Percent"
            }
          }
        },
        "Duration": {
          "title": "Duration",
          "properties": {
            "type": {
              "enum": [
                "Duration"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Duration"
            }
          }
        },
        "Date": {
          "title": "Date",
          "properties": {
            "type": {
              "enum": [
                "Date"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Date"
            }
          }
        },
        "DateTime": {
          "title": "DateTime",
          "properties": {
            "type": {
              "enum": [
                "DateTime"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_DateTime"
            }
          }
        },
        "Time": {
          "title": "Time",
          "properties": {
            "type": {
              "enum": [
                "Time"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Time"
            }
          }
        },
        "SingleSelect": {
          "title": "SingleSelect",
          "properties": {
            "type": {
              "enum": [
                "SingleSelect"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Select"
            }
          }
        },
        "MultiSelect": {
          "title": "MultiSelect",
          "properties": {
            "type": {
              "enum": [
                "MultiSelect"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Select"
            }
          }
        },
        "Rating": {
          "title": "Rating",
          "properties": {
            "type": {
              "enum": [
                "Rating"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Rating"
            }
          }
        },
        "Checkbox": {
          "title": "Checkbox",
          "properties": {
            "type": {
              "enum": [
                "Checkbox"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Checkbox"
            }
          }
        },
        "Attachment": {
          "title": "Attachment",
          "properties": {
            "type": {
              "enum": [
                "Attachment"
              ]
            }
          }
        },
        "Geometry": {
          "title": "Geometry",
          "properties": {
            "type": {
              "enum": [
                "Geometry"
              ]
            }
          }
        },
        "Links": {
          "title": "Links",
          "properties": {
            "type": {
              "enum": [
                "Links"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Links"
            }
          }
        },
        "Lookup": {
          "title": "Lookup",
          "properties": {
            "type": {
              "enum": [
                "Lookup"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Lookup"
            }
          }
        },
        "Rollup": {
          "title": "Rollup",
          "properties": {
            "type": {
              "enum": [
                "Rollup"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Rollup"
            }
          }
        },
        "Button": {
          "title": "Button",
          "properties": {
            "type": {
              "enum": [
                "Button"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Button"
            }
          }
        },
        "Formula": {
          "title": "Formula",
          "properties": {
            "type": {
              "enum": [
                "Formula"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Formula"
            }
          }
        },
        "Barcode": {
          "title": "Barcode",
          "properties": {
            "type": {
              "enum": [
                "Barcode"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_Barcode"
            }
          }
        },
        "Year": {
          "title": "Year",
          "properties": {
            "type": {
              "enum": [
                "Year"
              ]
            }
          }
        },
        "QrCode": {
          "title": "QrCode",
          "properties": {
            "type": {
              "enum": [
                "QrCode"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_QrCode"
            }
          }
        },
        "CreatedTime": {
          "title": "CreatedTime",
          "properties": {
            "type": {
              "enum": [
                "CreatedTime"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_DateTime"
            }
          }
        },
        "LastModifiedTime": {
          "title": "LastModifiedTime",
          "properties": {
            "type": {
              "enum": [
                "LastModifiedTime"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_DateTime"
            }
          }
        },
        "CreatedBy": {
          "title": "CreatedBy",
          "properties": {
            "type": {
              "enum": [
                "CreatedBy"
              ]
            }
          }
        },
        "LastModifiedBy": {
          "title": "LastModifiedBy",
          "properties": {
            "type": {
              "enum": [
                "LastModifiedBy"
              ]
            }
          }
        },
        "LinkToAnotherRecord": {
          "title": "LinkToAnotherRecord",
          "properties": {
            "type": {
              "enum": [
                "LinkToAnotherRecord"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_LinkToAnotherRecord"
            }
          }
        },
        "User": {
          "title": "User",
          "properties": {
            "type": {
              "enum": [
                "User"
              ]
            },
            "options": {
              "$ref": "#/components/schemas/FieldOptions_User"
            }
          }
        },
        "JSON": {
          "title": "JSON",
          "properties": {
            "type": {
              "enum": [
                "JSON"
              ]
            }
          }
        }
      },
      "CreateField": {
        "allOf": [
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FieldOptions/SingleLineText"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/LongText"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/PhoneNumber"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/URL"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Email"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Number"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Decimal"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Currency"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Percent"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Duration"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Date"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/DateTime"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Time"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Year"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/SingleSelect"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/MultiSelect"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Rating"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Checkbox"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Attachment"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/JSON"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Geometry"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Links"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Lookup"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Rollup"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Button"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Formula"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/Barcode"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/QrCode"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/CreatedTime"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/LastModifiedTime"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/CreatedBy"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/LastModifiedBy"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/LinkToAnotherRecord"
              },
              {
                "$ref": "#/components/schemas/FieldOptions/User"
              }
            ]
          },
          {
            "$ref": "#/components/schemas/FieldBaseCreate"
          }
        ]
      },
      "Table": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the table."
          },
          "source_id": {
            "type": "string",
            "description": "Unique identifier for the data source. This information will be included only if the table is associated with an external data source."
          },
          "base_id": {
            "type": "string",
            "description": "Unique identifier for the base to which this table belongs to."
          },
          "title": {
            "type": "string",
            "description": "Title of the table."
          },
          "description": {
            "type": "string",
            "description": "Description of the table."
          },
          "display_field_id": {
            "type": "string",
            "description": "Unique identifier for the display field of the table. First non system field is set as display field by default."
          },
          "workspace_id": {
            "type": "string",
            "description": "Unique identifier for the workspace to which this base belongs to."
          },
          "fields": {
            "type": "array",
            "description": "List of fields associated with this table.",
            "items": {
              "$ref": "#/components/schemas/CreateField"
            }
          },
          "views": {
            "type": "array",
            "description": "List of views associated with this table.",
            "items": {
              "$ref": "#/components/schemas/ViewSummary"
            }
          }
        },
        "required": [
          "id",
          "title",
          "base_id",
          "workspace_id",
          "display_field_id",
          "fields",
          "views"
        ]
      },
      "BaseMember": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Unique identifier for the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user."
          },
          "user_name": {
            "type": "string",
            "description": "Display name of the user."
          },
          "base_role": {
            "$ref": "#/components/schemas/BaseRoles"
          }
        },
        "required": [
          "user_id",
          "email",
          "created_at",
          "updated_at",
          "base_role"
        ]
      },
      "BaseMemberWithWorkspaceRole": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Unique identifier for the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user."
          },
          "user_name": {
            "type": "string",
            "description": "Display name of the user."
          },
          "base_role": {
            "$ref": "#/components/schemas/BaseRoles"
          },
          "workspace_role": {
            "$ref": "#/components/schemas/WorkspaceRoles",
            "description": "Role assigned to the user in the workspace"
          }
        },
        "required": [
          "user_id",
          "email",
          "created_at",
          "updated_at",
          "base_role"
        ]
      },
      "BaseUserDeleteRequest": {},
      "BaseMemberList": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseMember"
            }
          }
        },
        "required": [
          "users"
        ]
      },
      "BaseMemberCreate": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "base_role": {
              "$ref": "#/components/schemas/BaseRoles"
            }
          },
          "required": [
            "base_role"
          ],
          "oneOf": [
            {
              "title": "Invite User with ID",
              "required": [
                "base_role",
                "user_id"
              ],
              "properties": {
                "user_id": {
                  "type": "string",
                  "description": "Unique identifier for the user (skip if email is provided)"
                },
                "user_name": {
                  "type": "string",
                  "description": "Full name of the user."
                }
              }
            },
            {
              "title": "Invite User with Email",
              "required": [
                "base_role",
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Email address of the user (skip if user_id is provided)"
                },
                "user_name": {
                  "type": "string",
                  "description": "Full name of the user."
                }
              }
            }
          ],
          "description": "An object representing a new member to be created."
        },
        "description": "Array of members to be created."
      },
      "BaseMemberUpdate": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "Unique user identifier for the member."
            },
            "base_role": {
              "$ref": "#/components/schemas/BaseRoles"
            }
          },
          "required": [
            "user_id",
            "base_role"
          ],
          "description": "An object representing updates for an existing member."
        },
        "description": "Array of member updates."
      },
      "BaseMemberDelete": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User unique identifier for the member."
            }
          },
          "required": [
            "user_id"
          ]
        }
      },
      "TableMetaReq": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string",
            "description": "Icon prefix to the table name that needs to be displayed in-lieu of the default table icon."
          }
        }
      },
      "TableUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "New title of the table."
          },
          "description": {
            "type": "string",
            "description": "Description of the table."
          },
          "display_field_id": {
            "type": "string",
            "description": "Unique identifier for the display field of the table. The type of the field should be one of the allowed types for display field."
          },
          "meta": {
            "$ref": "#/components/schemas/TableMetaReq",
            "description": "Icon prefix to the table name that needs to be displayed in-lieu of the default table icon."
          }
        },
        "oneOf": [
          {
            "title": "Rename Table",
            "required": [
              "title"
            ]
          },
          {
            "title": "Update Table Description",
            "required": [
              "description"
            ]
          },
          {
            "title": "Update Display Field",
            "required": [
              "display_field_id"
            ]
          },
          {
            "title": "Update Table Icon",
            "required": [
              "meta"
            ]
          }
        ]
      },
      "Sort": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the sort.",
            "readOnly": true
          },
          "field_id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifier for the field being sorted."
          },
          "direction": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Sorting direction, either 'asc' (ascending) or 'desc' (descending)."
          }
        },
        "required": [
          "id",
          "field_id",
          "direction"
        ]
      },
      "SortCreate": {
        "type": "object",
        "properties": {
          "field_id": {
            "type": "string",
            "description": "Identifier for the field being sorted."
          },
          "direction": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Sorting direction, either 'asc' (ascending) or 'desc' (descending)."
          }
        },
        "required": [
          "field_id"
        ]
      },
      "SortUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the sort."
          },
          "field_id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifier for the field being sorted."
          },
          "direction": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Sorting direction, either 'asc' (ascending) or 'desc' (descending)."
          }
        },
        "required": [
          "id"
        ]
      },
      "ViewSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the view."
          },
          "title": {
            "type": "string",
            "description": "Name of the view."
          },
          "view_type": {
            "type": "string",
            "enum": [
              "grid",
              "gallery",
              "kanban",
              "calendar",
              "form"
            ],
            "description": "Type of the view."
          }
        }
      },
      "ViewAggregationEnum": {
        "type": "string",
        "enum": [
          "sum",
          "min",
          "max",
          "avg",
          "median",
          "std_dev",
          "range",
          "count",
          "count_empty",
          "count_filled",
          "count_unique",
          "percent_empty",
          "percent_filled",
          "percent_unique",
          "none",
          "attachment_size",
          "checked",
          "unchecked",
          "percent_checked",
          "percent_unchecked",
          "earliest_date",
          "latest_date",
          "date_range",
          "month_range"
        ]
      },
      "ViewList": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the view."
                },
                "table_id": {
                  "type": "string",
                  "description": "Id of table associated with the view."
                },
                "title": {
                  "type": "string",
                  "description": "Title of the view."
                },
                "description": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "description": "Description of the view."
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "grid",
                    "gallery",
                    "kanban",
                    "calendar",
                    "form"
                  ],
                  "description": "Type of the view."
                },
                "lock_type": {
                  "type": "string",
                  "enum": [
                    "collaborative",
                    "locked",
                    "personal"
                  ],
                  "description": "View configuration edit state."
                },
                "is_default": {
                  "type": "boolean",
                  "description": "Indicates if this is the default view."
                },
                "created_by": {
                  "type": "string",
                  "description": "User ID of the creator."
                },
                "owned_by": {
                  "type": "string",
                  "description": "User ID of the owner. Applicable only for personal views."
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp of creation."
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp of last update."
                }
              },
              "required": [
                "id",
                "title",
                "type",
                "lock_type",
                "created_at",
                "updated_at",
                "created_by"
              ]
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "ViewBase": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the view."
          },
          "type": {
            "type": "string",
            "enum": [
              "grid",
              "gallery",
              "kanban",
              "calendar"
            ],
            "description": "Type of the view. \n\nNote: Form view via API is not supported currently"
          },
          "lock_type": {
            "type": "string",
            "enum": [
              "collaborative",
              "locked",
              "personal"
            ],
            "description": "Lock type of the view.\n\n Note: Assigning view as personal using API is not supported currently",
            "default": "collaborative"
          },
          "description": {
            "type": "string",
            "description": "Description of the view."
          }
        },
        "required": [
          "title",
          "type"
        ]
      },
      "ViewBaseInUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the view."
          },
          "lock_type": {
            "type": "string",
            "enum": [
              "collaborative",
              "locked",
              "personal"
            ],
            "description": "Lock type of the view.\n\n Note: Assigning view as personal using API is not supported currently",
            "default": "collaborative"
          },
          "description": {
            "type": "string",
            "description": "Description of the view."
          }
        }
      },
      "ViewFields": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "field_id": {
              "type": "string",
              "description": "Unique identifier for the field."
            },
            "show": {
              "type": "boolean",
              "description": "Indicates whether the field should be displayed in the view."
            },
            "width": {
              "type": "integer",
              "description": "Width of the field in pixels.\n\n **Applicable only for grid view.**"
            },
            "aggregation": {
              "$ref": "#/components/schemas/ViewAggregationEnum",
              "description": "Aggregation function to be applied to the field.\n\n **Applicable only for grid view.**"
            }
          },
          "required": [
            "field_id",
            "show"
          ]
        },
        "description": "List of fields to be displayed in the view. \n\n- If not specified, all fields are displayed by default.\n- If an empty array is provided, only the display value field will be shown.\n- In case of partial list, fields not included in the list will be excluded from the view."
      },
      "ViewRowColour": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "title": "conditions",
            "properties": {
              "mode": {
                "type": "string",
                "enum": [
                  "filter"
                ],
                "description": "Mode of row coloring. In this mode, the color is selected based on conditions applied to the fields."
              },
              "conditions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "apply_as_row_background": {
                      "type": "boolean"
                    },
                    "color": {
                      "type": "string"
                    },
                    "filters": {
                      "$ref": "#/components/schemas/FilterCreateUpdate"
                    }
                  }
                }
              }
            },
            "required": [
              "mode",
              "conditions"
            ]
          },
          {
            "type": "object",
            "title": "select",
            "properties": {
              "mode": {
                "type": "string",
                "enum": [
                  "select"
                ],
                "description": "Mode of row coloring. In this mode, the color is selected based on a single select field."
              },
              "field_id": {
                "type": "string",
                "description": "Single select field ID to be used for colouring rows in the view."
              },
              "apply_as_row_background": {
                "type": "boolean",
                "description": "Whether to additionally apply the color as row background."
              }
            },
            "required": [
              "mode",
              "field_id"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "mode"
        }
      },
      "ViewOptionsGrid": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field_id": {
                  "type": "string",
                  "description": "Identifier for the field being sorted."
                },
                "direction": {
                  "type": "string",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "description": "Direction of the group, either 'asc' (ascending) or 'desc' (descending).",
                  "default": "asc"
                }
              },
              "required": [
                "field_id"
              ]
            },
            "description": "List of groups to be applied on the grid view."
          },
          "row_height": {
            "type": "string",
            "enum": [
              "short",
              "medium",
              "tall",
              "extra"
            ],
            "description": "Height of the rows in the grid view.",
            "default": "short"
          }
        }
      },
      "ViewOptionsKanban": {
        "type": "object",
        "properties": {
          "stack_by": {
            "type": "object",
            "properties": {
              "field_id": {
                "type": "string",
                "description": "Single select field ID to be used for stacking cards in kanban view."
              },
              "stack_order": {
                "type": "array",
                "description": "Order of the stacks in kanban view. If not provided, the order will be determined by options listed in associated field.\n\nExample: ```stack_order: ['option1', 'option2', 'option3']```",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "field_id"
            ]
          },
          "cover_field_id": {
            "type": "string",
            "description": "Attachment field ID to be used as cover image in kanban view. If not provided, cover field configuration is skipped."
          }
        },
        "required": [
          "stack_by"
        ]
      },
      "ViewOptionsCalendar": {
        "type": "object",
        "properties": {
          "date_ranges": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "start_date_field_id": {
                  "type": "string",
                  "description": "Date field ID to be used as start date in calendar view."
                },
                "end_date_field_id": {
                  "type": "string",
                  "description": "Date field ID to be used as end date in calendar view."
                }
              },
              "required": [
                "start_date_field_id"
              ]
            }
          }
        },
        "required": [
          "date_ranges"
        ]
      },
      "ViewOptionsGallery": {
        "type": "object",
        "properties": {
          "cover_field_id": {
            "type": "string",
            "description": "Attachment field ID to be used as cover image in gallery view. Is optional, if not provided, the first attachment field will be used."
          }
        }
      },
      "ViewOptionsForm": {
        "type": "object",
        "properties": {
          "form_title": {
            "type": "string",
            "description": "Heading for the form."
          },
          "form_description": {
            "type": "string",
            "description": "Subheading for the form."
          },
          "thank_you_message": {
            "type": "string",
            "description": "Success message shown after form submission."
          },
          "form_redirect_after_secs": {
            "type": "integer",
            "description": "Seconds to wait before redirecting."
          },
          "show_submit_another_button": {
            "type": "boolean",
            "description": "Whether to show another form after submission."
          },
          "reset_form_after_submit": {
            "type": "boolean",
            "description": "Whether to show a blank form after submission."
          },
          "form_hide_banner": {
            "type": "boolean",
            "description": "Whether to hide the banner on the form."
          },
          "form_hide_branding": {
            "type": "boolean",
            "description": "Whether to hide branding on the form."
          },
          "banner": {
            "type": "string",
            "format": "uri",
            "description": "URL of the banner image for the form."
          },
          "logo": {
            "type": "string",
            "format": "uri",
            "description": "URL of the logo for the form."
          },
          "form_background_color": {
            "type": "string",
            "description": "Background color for the form.",
            "pattern": "^#[0-9A-Fa-f]{6}$"
          },
          "redirect_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to redirect to after form submission."
          }
        }
      },
      "ViewCreate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ViewBase"
          },
          {
            "oneOf": [
              {
                "type": "object",
                "title": "grid",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "grid"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/ViewOptionsGrid"
                  },
                  "sorts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SortCreate"
                    },
                    "description": "List of sorts to be applied to the view."
                  },
                  "filters": {
                    "$ref": "#/components/schemas/FilterCreateUpdate"
                  },
                  "fields": {
                    "$ref": "#/components/schemas/ViewFields"
                  },
                  "row_coloring": {
                    "$ref": "#/components/schemas/ViewRowColour",
                    "description": "Row colour configuration for the the view."
                  }
                }
              },
              {
                "type": "object",
                "title": "gallery",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "gallery"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/ViewOptionsGallery"
                  },
                  "sorts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SortCreate"
                    },
                    "description": "List of sorts to be applied to the view."
                  },
                  "filters": {
                    "$ref": "#/components/schemas/FilterCreateUpdate"
                  },
                  "fields": {
                    "$ref": "#/components/schemas/ViewFields"
                  },
                  "row_coloring": {
                    "$ref": "#/components/schemas/ViewRowColour",
                    "description": "Row colour configuration for the the view."
                  }
                }
              },
              {
                "type": "object",
                "title": "kanban",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "kanban"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/ViewOptionsKanban"
                  },
                  "sorts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SortCreate"
                    },
                    "description": "List of sorts to be applied to the view."
                  },
                  "filters": {
                    "$ref": "#/components/schemas/FilterCreateUpdate"
                  },
                  "fields": {
                    "$ref": "#/components/schemas/ViewFields"
                  },
                  "row_coloring": {
                    "$ref": "#/components/schemas/ViewRowColour",
                    "description": "Row colour configuration for the the view."
                  }
                },
                "required": [
                  "options"
                ]
              },
              {
                "type": "object",
                "title": "calendar",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "calendar"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/ViewOptionsCalendar"
                  },
                  "sorts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SortCreate"
                    },
                    "description": "List of sorts to be applied to the view."
                  },
                  "filters": {
                    "$ref": "#/components/schemas/FilterCreateUpdate"
                  },
                  "fields": {
                    "$ref": "#/components/schemas/ViewFields"
                  },
                  "row_coloring": {
                    "$ref": "#/components/schemas/ViewRowColour",
                    "description": "Row colour configuration for the the view."
                  }
                },
                "required": [
                  "options"
                ]
              }
            ],
            "discriminator": {
              "propertyName": "type"
            }
          }
        ]
      },
      "ViewUpdate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ViewBaseInUpdate"
          },
          {
            "oneOf": [
              {
                "type": "object",
                "title": "grid",
                "properties": {
                  "options": {
                    "$ref": "#/components/schemas/ViewOptionsGrid"
                  },
                  "sorts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SortCreate"
                    },
                    "description": "List of sorts to be applied to the view."
                  },
                  "filters": {
                    "$ref": "#/components/schemas/FilterCreateUpdate"
                  },
                  "fields": {
                    "$ref": "#/components/schemas/ViewFields"
                  },
                  "row_coloring": {
                    "$ref": "#/components/schemas/ViewRowColour",
                    "description": "Row colour configuration for the the view."
                  }
                }
              },
              {
                "type": "object",
                "title": "gallery",
                "properties": {
                  "options": {
                    "$ref": "#/components/schemas/ViewOptionsGallery"
                  },
                  "sorts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SortCreate"
                    },
                    "description": "List of sorts to be applied to the view."
                  },
                  "filters": {
                    "$ref": "#/components/schemas/FilterCreateUpdate"
                  },
                  "fields": {
                    "$ref": "#/components/schemas/ViewFields"
                  },
                  "row_coloring": {
                    "$ref": "#/components/schemas/ViewRowColour",
                    "description": "Row colour configuration for the the view."
                  }
                }
              },
              {
                "type": "object",
                "title": "kanban",
                "properties": {
                  "options": {
                    "$ref": "#/components/schemas/ViewOptionsKanban"
                  },
                  "sorts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SortCreate"
                    },
                    "description": "List of sorts to be applied to the view."
                  },
                  "filters": {
                    "$ref": "#/components/schemas/FilterCreateUpdate"
                  },
                  "fields": {
                    "$ref": "#/components/schemas/ViewFields"
                  },
                  "row_coloring": {
                    "$ref": "#/components/schemas/ViewRowColour",
                    "description": "Row colour configuration for the the view."
                  }
                }
              },
              {
                "type": "object",
                "title": "calendar",
                "properties": {
                  "options": {
                    "$ref": "#/components/schemas/ViewOptionsCalendar"
                  },
                  "sorts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SortCreate"
                    },
                    "description": "List of sorts to be applied to the view."
                  },
                  "filters": {
                    "$ref": "#/components/schemas/FilterCreateUpdate"
                  },
                  "fields": {
                    "$ref": "#/components/schemas/ViewFields"
                  },
                  "row_coloring": {
                    "$ref": "#/components/schemas/ViewRowColour",
                    "description": "Row colour configuration for the the view."
                  }
                }
              }
            ],
            "discriminator": {
              "propertyName": "type"
            }
          }
        ]
      },
      "View": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the view."
              },
              "table_id": {
                "type": "string",
                "description": "Id of table associated with the view."
              },
              "is_default": {
                "type": "boolean",
                "description": "Indicates if this is the default view. Omitted if not the default view."
              }
            },
            "required": [
              "id"
            ]
          },
          {
            "$ref": "#/components/schemas/ViewBase"
          },
          {
            "properties": {
              "created_by": {
                "type": "string",
                "description": "User ID of the creator."
              },
              "owned_by": {
                "type": "string",
                "description": "User ID of the owner."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of creation."
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of last update."
              }
            }
          },
          {
            "oneOf": [
              {
                "type": "object",
                "title": "grid",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "grid"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/ViewOptionsGrid"
                  },
                  "sorts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SortCreate"
                    },
                    "description": "List of sorts to be applied to the view."
                  },
                  "filters": {
                    "$ref": "#/components/schemas/FilterCreateUpdate"
                  },
                  "fields": {
                    "$ref": "#/components/schemas/ViewFields"
                  },
                  "row_coloring": {
                    "$ref": "#/components/schemas/ViewRowColour",
                    "description": "Row colour configuration for the the view."
                  }
                }
              },
              {
                "type": "object",
                "title": "gallery",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "gallery"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/ViewOptionsGallery"
                  },
                  "sorts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SortCreate"
                    },
                    "description": "List of sorts to be applied to the view."
                  },
                  "filters": {
                    "$ref": "#/components/schemas/FilterCreateUpdate"
                  },
                  "fields": {
                    "$ref": "#/components/schemas/ViewFields"
                  },
                  "row_coloring": {
                    "$ref": "#/components/schemas/ViewRowColour",
                    "description": "Row colour configuration for the the view."
                  }
                }
              },
              {
                "type": "object",
                "title": "kanban",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "kanban"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/ViewOptionsKanban"
                  },
                  "sorts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SortCreate"
                    },
                    "description": "List of sorts to be applied to the view."
                  },
                  "filters": {
                    "$ref": "#/components/schemas/FilterCreateUpdate"
                  },
                  "fields": {
                    "$ref": "#/components/schemas/ViewFields"
                  },
                  "row_coloring": {
                    "$ref": "#/components/schemas/ViewRowColour",
                    "description": "Row colour configuration for the the view."
                  }
                },
                "required": [
                  "options"
                ]
              },
              {
                "type": "object",
                "title": "calendar",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "calendar"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/ViewOptionsCalendar"
                  },
                  "sorts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SortCreate"
                    },
                    "description": "List of sorts to be applied to the view."
                  },
                  "filters": {
                    "$ref": "#/components/schemas/FilterCreateUpdate"
                  },
                  "fields": {
                    "$ref": "#/components/schemas/ViewFields"
                  },
                  "row_coloring": {
                    "$ref": "#/components/schemas/ViewRowColour",
                    "description": "Row colour configuration for the the view."
                  }
                },
                "required": [
                  "options"
                ]
              }
            ],
            "discriminator": {
              "propertyName": "type"
            }
          }
        ]
      },
      "FieldBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the field.",
            "readOnly": true,
            "writeOnly": false
          },
          "title": {
            "type": "string",
            "description": "Title of the field."
          },
          "type": {
            "type": "string",
            "enum": [
              "SingleLineText",
              "LongText",
              "PhoneNumber",
              "URL",
              "Email",
              "Number",
              "Decimal",
              "Currency",
              "Percent",
              "Duration",
              "Date",
              "DateTime",
              "Time",
              "SingleSelect",
              "MultiSelect",
              "Rating",
              "Checkbox",
              "Attachment",
              "Geometry",
              "Links",
              "Lookup",
              "Rollup",
              "Button",
              "Formula",
              "Barcode",
              "Year",
              "QrCode",
              "CreatedTime",
              "LastModifiedTime",
              "CreatedBy",
              "LastModifiedBy",
              "LinkToAnotherRecord",
              "User",
              "JSON"
            ],
            "description": "Field data type."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Description of the field."
          },
          "default_value": {
            "type": [
              "string",
              "boolean",
              "number"
            ],
            "description": "Default value for the field. Applicable for SingleLineText, LongText, PhoneNumber, URL, Email, Number, Decimal, Currency, Percent, Duration, Date, DateTime, Time, SingleSelect, MultiSelect, Rating, Checkbox, User and JSON fields."
          }
        },
        "required": [
          "title"
        ]
      },
      "FieldBaseCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "required": [
              "title",
              "type"
            ]
          }
        ]
      },
      "FieldOptions_LongText": {
        "type": "object",
        "title": "LongText",
        "properties": {
          "rich_text": {
            "type": "boolean",
            "description": "Enable rich text formatting."
          },
          "generate_text_using_ai": {
            "type": "boolean",
            "description": "Enable text generation for this field using NocoAI."
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_PhoneNumber": {
        "type": "object",
        "title": "PhoneNumber",
        "properties": {
          "validation": {
            "type": "boolean",
            "description": "Enable validation for phone numbers."
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_URL": {
        "type": "object",
        "title": "URL",
        "properties": {
          "validation": {
            "type": "boolean",
            "description": "Enable validation for URL."
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Email": {
        "type": "object",
        "title": "Email",
        "properties": {
          "validation": {
            "type": "boolean",
            "description": "Enable validation for Email."
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Number": {
        "type": "object",
        "title": "Number",
        "properties": {
          "locale_string": {
            "type": "boolean",
            "description": "Show thousand separator on the UI."
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Decimal": {
        "type": "object",
        "title": "Decimal",
        "properties": {
          "precision": {
            "type": "number",
            "description": "Decimal field precision. Defaults to 0",
            "minimum": 0,
            "maximum": 5
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Currency": {
        "type": "object",
        "title": "Currency",
        "description": "Currency settings for this column. Locale defaults to `en-US` and currency code defaults to `USD`",
        "properties": {
          "locale": {
            "type": "string",
            "description": "Locale for currency formatting. Refer https://simplelocalize.io/data/locales/"
          },
          "code": {
            "type": "string",
            "description": "Currency code. Refer https://simplelocalize.io/data/locales/",
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYR",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUP",
              "CVE",
              "CYP",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EEK",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHC",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LTL",
              "LVL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRO",
              "MTL",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "ROL",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDD",
              "SEK",
              "SGD",
              "SHP",
              "SIT",
              "SKK",
              "SLL",
              "SOS",
              "SRD",
              "STD",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMM",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "USS",
              "UYU",
              "UZS",
              "VEB",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XAG",
              "XAU",
              "XBA",
              "XBB",
              "XBC",
              "XBD",
              "XCD",
              "XDR",
              "XFO",
              "XFU",
              "XOF",
              "XPD",
              "XPF",
              "XPT",
              "XTS",
              "XXX",
              "YER",
              "ZAR",
              "ZMK",
              "ZWD"
            ]
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Percent": {
        "type": "object",
        "title": "Percent",
        "properties": {
          "show_as_progress": {
            "type": "boolean",
            "description": "Display as a progress bar."
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Duration": {
        "type": "object",
        "title": "Duration",
        "properties": {
          "duration_format": {
            "type": "string",
            "description": "Duration format. Supported options are listed below\n- `h:mm`\n- `h:mm:ss`\n- `h:mm:ss.S`\n- `h:mm:ss.SS`\n- `h:mm:ss.SSS`"
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_DateTime": {
        "type": "object",
        "title": "DateTime",
        "properties": {
          "date_format": {
            "type": "string",
            "description": "Date format. Supported options are listed below\n- `YYYY/MM/DD`\n- `YYYY-MM-DD`\n- `YYYY MM DD`\n- `DD/MM/YYYY`\n- `DD-MM-YYYY`\n- `DD MM YYYY`\n- `MM/DD/YYYY`\n- `MM-DD-YYYY`\n- `MM DD YYYY`\n- `YYYY-MM`\n- `YYYY MM`"
          },
          "time_format": {
            "type": "string",
            "description": "Time format. Supported options are listed below\n- `HH:mm`\n- `HH:mm:ss`\n- `HH:mm:ss.SSS`"
          },
          "12hr_format": {
            "type": "boolean",
            "description": "Use 12-hour time format."
          },
          "display_timezone": {
            "type": "boolean",
            "description": "Display timezone."
          },
          "timezone": {
            "type": "string",
            "description": "Timezone. Refer to https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"
          },
          "use_same_timezone_for_all": {
            "type": "boolean",
            "description": "Use same timezone for all records."
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Date": {
        "type": "object",
        "title": "Date",
        "properties": {
          "date_format": {
            "type": "string",
            "description": "Date format. Supported options are listed below\n- `YYYY/MM/DD`\n- `YYYY-MM-DD`\n- `YYYY MM DD`\n- `DD/MM/YYYY`\n- `DD-MM-YYYY`\n- `DD MM YYYY`\n- `MM/DD/YYYY`\n- `MM-DD-YYYY`\n- `MM DD YYYY`\n- `YYYY-MM`\n- `YYYY MM`"
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Time": {
        "type": "object",
        "title": "Time",
        "properties": {
          "12hr_format": {
            "type": "boolean",
            "description": "Use 12-hour time format."
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Select": {
        "type": "object",
        "title": "Single & MultiSelect",
        "properties": {
          "choices": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Choice title."
                },
                "color": {
                  "type": "string",
                  "description": "Specifies the tile color for the choice using a hexadecimal color code (e.g., `#36BFFF`).",
                  "pattern": "^#[0-9A-Fa-f]{6}$"
                }
              },
              "required": [
                "title"
              ]
            },
            "uniqueItems": true
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Rating": {
        "type": "object",
        "title": "Rating",
        "properties": {
          "icon": {
            "type": "string",
            "enum": [
              "star",
              "heart",
              "circle-filled",
              "thumbs-up",
              "flag"
            ],
            "description": "Icon to display rating on the UI. Supported options are listed below\n- `star`\n- `heart`\n- `circle-filled`\n- `thumbs-up`\n- `flag`"
          },
          "max_value": {
            "type": "integer",
            "description": "Maximum value for the rating. Allowed range: 1-10.",
            "minimum": 1,
            "maximum": 10
          },
          "color": {
            "type": "string",
            "description": "Specifies icon color using a hexadecimal color code (e.g., `#36BFFF`).",
            "pattern": "^#[0-9A-Fa-f]{6}$"
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Checkbox": {
        "type": "object",
        "title": "Checkbox",
        "properties": {
          "icon": {
            "type": "string",
            "enum": [
              "square",
              "circle-check",
              "circle-filled",
              "star",
              "heart",
              "thumbs-up",
              "flag"
            ],
            "description": "Icon to display checkbox on the UI. Supported options are listed below\n- `square`\n- `circle-check`\n- `circle-filled`\n- `star`\n- `heart`\n- `thumbs-up`\n- `flag`"
          },
          "color": {
            "type": "string",
            "description": "Specifies icon color using a hexadecimal color code (e.g., `#36BFFF`).",
            "pattern": "^#[0-9A-Fa-f]{6}$"
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Barcode": {
        "type": "object",
        "title": "Barcode",
        "properties": {
          "format": {
            "type": "string",
            "description": "Barcode format (e.g., CODE128)."
          },
          "barcode_value_field_id": {
            "type": "string",
            "description": "Field ID that contains the value."
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_QrCode": {
        "type": "object",
        "title": "QrCode",
        "properties": {
          "qrcode_value_field_id": {
            "type": "string",
            "description": "Field ID that contains the value."
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Formula": {
        "type": "object",
        "title": "Formula",
        "properties": {
          "formula": {
            "type": "string",
            "description": "Formula expression."
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_User": {
        "type": "object",
        "title": "User",
        "properties": {
          "allow_multiple_users": {
            "type": "boolean",
            "description": "Allow selecting multiple users."
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Lookup": {
        "type": "object",
        "title": "Lookup",
        "properties": {
          "related_field_id": {
            "type": "string",
            "description": "Linked field ID. Can be of type Links or LinkToAnotherRecord"
          },
          "related_table_lookup_field_id": {
            "type": "string",
            "description": "Lookup field ID in the linked table."
          }
        },
        "required": [
          "related_field_id",
          "related_table_lookup_field_id"
        ],
        "additionalProperties": false
      },
      "FieldOptions_Rollup": {
        "type": "object",
        "title": "Rollup",
        "properties": {
          "related_field_id": {
            "type": "string",
            "description": "Linked field ID."
          },
          "related_table_rollup_field_id": {
            "type": "string",
            "description": "Rollup field ID in the linked table."
          },
          "rollup_function": {
            "type": "string",
            "description": "Rollup function.",
            "enum": [
              "count",
              "min",
              "max",
              "avg",
              "sum",
              "countDistinct",
              "sumDistinct",
              "avgDistinct"
            ]
          }
        },
        "required": [
          "related_field_id",
          "related_table_rollup_field_id",
          "rollup_function"
        ],
        "additionalProperties": false
      },
      "FieldOptions_Button": {
        "type": "object",
        "title": "Button",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "formula"
                ],
                "description": "Button type: formula"
              },
              "formula": {
                "type": "string",
                "description": "Formula to execute"
              }
            },
            "required": [
              "type",
              "formula"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "webhook"
                ],
                "description": "Button type: webhook"
              },
              "button_hook_id": {
                "type": "string",
                "description": "ID of the webhook to trigger"
              }
            },
            "required": [
              "type",
              "button_hook_id"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ai"
                ],
                "description": "Button type: AI"
              },
              "prompt": {
                "type": "string",
                "description": "AI prompt to execute"
              },
              "integration_id": {
                "type": "string",
                "description": "Integration ID for AI service"
              },
              "theme": {
                "type": "string",
                "description": "Theme of the button"
              },
              "output_column_ids": {
                "type": "string",
                "description": "IDs of columns where AI output should be stored"
              },
              "label": {
                "type": "string",
                "description": "Label of the button"
              },
              "icon": {
                "type": "string",
                "description": "Icon of the button"
              },
              "color": {
                "type": "string",
                "description": "Color of the button"
              }
            },
            "required": [
              "type",
              "prompt",
              "integration_id"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "formula": "#/components/schemas/0",
            "webhook": "#/components/schemas/1",
            "ai": "#/components/schemas/2"
          }
        },
        "additionalProperties": false
      },
      "FieldOptions_Links": {
        "type": "object",
        "title": "Links",
        "properties": {
          "relation_type": {
            "type": "string",
            "description": "Type of relationship.\n\nSupported options are listed below\n- `mm` many-to-many\n- `hm` has-many\n- `oo` one-to-one"
          },
          "related_table_id": {
            "type": "string",
            "description": "Identifier of the linked table."
          }
        },
        "required": [
          "relation_type",
          "related_table_id"
        ],
        "additionalProperties": false
      },
      "FieldOptions_LinkToAnotherRecord": {
        "type": "object",
        "title": "LinkToAnotherRecord",
        "properties": {
          "relation_type": {
            "type": "string",
            "description": "Type of relationship.\n\nSupported options are listed below\n- `mm` many-to-many\n- `hm` has-many\n- `oo` one-to-one"
          },
          "related_table_id": {
            "type": "string",
            "description": "Identifier of the linked table."
          }
        },
        "required": [
          "relation_type",
          "related_table_id"
        ],
        "additionalProperties": false
      },
      "Field": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "oneOf": [
              {
                "properties": {
                  "type": {
                    "enum": [
                      "SingleLineText"
                    ]
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "LongText"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_LongText"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "PhoneNumber",
                      "URL",
                      "Email"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_PhoneNumber"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "Number",
                      "Decimal"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Number"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "JSON"
                    ]
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "Currency"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Currency"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "Percent"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Percent"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "Duration"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Duration"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "Date",
                      "DateTime",
                      "Time"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_DateTime"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "SingleSelect",
                      "MultiSelect"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Select"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "Rating",
                      "Checkbox"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Rating"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "Barcode"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Barcode"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "Formula"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Formula"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "User"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_User"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "Lookup"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Lookup"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "Links"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Links"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": [
                      "LinkToAnotherRecord"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_LinkToAnotherRecord"
                  }
                }
              }
            ]
          }
        ]
      },
      "FilterCreateUpdate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Filter"
          },
          {
            "$ref": "#/components/schemas/FilterGroup"
          }
        ]
      },
      "FieldUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldBase"
          },
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FieldOptions/SingleLineText"
              },
              {
                "title": "LongText",
                "properties": {
                  "type": {
                    "enum": [
                      "LongText"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_LongText"
                  }
                }
              },
              {
                "title": "PhoneNumber",
                "properties": {
                  "type": {
                    "enum": [
                      "PhoneNumber",
                      "URL",
                      "Email"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_PhoneNumber"
                  }
                }
              },
              {
                "title": "Number / Decimal",
                "properties": {
                  "type": {
                    "enum": [
                      "Number",
                      "Decimal"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Number"
                  }
                }
              },
              {
                "title": "JSON",
                "properties": {
                  "type": {
                    "enum": [
                      "JSON"
                    ]
                  }
                }
              },
              {
                "title": "Currency",
                "properties": {
                  "type": {
                    "enum": [
                      "Currency"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Currency"
                  }
                }
              },
              {
                "title": "Percent",
                "properties": {
                  "type": {
                    "enum": [
                      "Percent"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Percent"
                  }
                }
              },
              {
                "title": "Duration",
                "properties": {
                  "type": {
                    "enum": [
                      "Duration"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Duration"
                  }
                }
              },
              {
                "title": "Date / DateTime",
                "properties": {
                  "type": {
                    "enum": [
                      "Date",
                      "DateTime",
                      "Time"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_DateTime"
                  }
                }
              },
              {
                "title": "Single / MultiSelect",
                "properties": {
                  "type": {
                    "enum": [
                      "SingleSelect",
                      "MultiSelect"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Select"
                  }
                }
              },
              {
                "title": "Checkbox",
                "properties": {
                  "type": {
                    "enum": [
                      "Checkbox"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Checkbox"
                  }
                }
              },
              {
                "title": "Rating",
                "properties": {
                  "type": {
                    "enum": [
                      "Rating"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Rating"
                  }
                }
              },
              {
                "title": "Barcode",
                "properties": {
                  "type": {
                    "enum": [
                      "Barcode"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Barcode"
                  }
                }
              },
              {
                "title": "Formula",
                "properties": {
                  "type": {
                    "enum": [
                      "Formula"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Formula"
                  }
                }
              },
              {
                "title": "User",
                "properties": {
                  "type": {
                    "enum": [
                      "User"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_User"
                  }
                }
              },
              {
                "title": "Lookup",
                "properties": {
                  "type": {
                    "enum": [
                      "Lookup"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Lookup"
                  }
                }
              },
              {
                "title": "Links",
                "properties": {
                  "type": {
                    "enum": [
                      "Links"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_Links"
                  }
                }
              },
              {
                "title": "LinkToAnotherRecord",
                "properties": {
                  "type": {
                    "enum": [
                      "LinkToAnotherRecord"
                    ]
                  },
                  "options": {
                    "$ref": "#/components/schemas/FieldOptions_LinkToAnotherRecord"
                  }
                }
              }
            ]
          }
        ]
      },
      "Filter": {
        "type": "object",
        "title": "Filter",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the filter.",
            "readOnly": true
          },
          "parent_id": {
            "type": "string",
            "description": "Parent ID of the filter, specifying this filters group association. Defaults to **root**."
          },
          "field_id": {
            "type": "string",
            "description": "Field ID to which this filter applies."
          },
          "operator": {
            "type": "string",
            "description": "Primary comparison operator (e.g., eq, gt, lt)."
          },
          "sub_operator": {
            "type": [
              "string",
              "null"
            ],
            "description": "Secondary comparison operator (if applicable)."
          },
          "value": {
            "type": [
              "string",
              "number",
              "boolean",
              "null"
            ],
            "description": "Value for comparison."
          }
        },
        "required": [
          "field_id",
          "operator",
          "value"
        ]
      },
      "FilterListResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterGroup"
            },
            "description": "List of filter groups. Initial set of filters are mapped to a default group with group-id set to **root**."
          }
        },
        "required": [
          "list"
        ]
      },
      "FilterGroupLevel3": {
        "type": "object",
        "properties": {
          "group_operator": {
            "type": "string",
            "enum": [
              "AND",
              "OR"
            ],
            "description": "Logical operator for the group."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "description": "List of filters in this group."
          }
        },
        "required": [
          "group_operator",
          "filters"
        ]
      },
      "FilterGroupLevel2": {
        "type": "object",
        "properties": {
          "group_operator": {
            "type": "string",
            "enum": [
              "AND",
              "OR"
            ],
            "description": "Logical operator for the group."
          },
          "filters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Filter"
                },
                {
                  "$ref": "#/components/schemas/FilterGroupLevel3"
                }
              ]
            },
            "description": "List of filters or nested filter groups at level 3."
          }
        },
        "required": [
          "group_operator",
          "filters"
        ]
      },
      "FilterGroupLevel1": {
        "type": "object",
        "properties": {
          "group_operator": {
            "type": "string",
            "enum": [
              "AND",
              "OR"
            ],
            "description": "Logical operator for the group."
          },
          "filters": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Filter"
                },
                {
                  "$ref": "#/components/schemas/FilterGroupLevel2"
                }
              ]
            },
            "description": "List of filters or nested filter groups at level 2."
          }
        },
        "required": [
          "group_operator",
          "filters"
        ]
      },
      "FilterGroup": {
        "type": "object",
        "title": "FilterGroup",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the group.",
            "readOnly": true
          },
          "parent_id": {
            "type": "string",
            "description": "Parent ID of this filter-group."
          },
          "group_operator": {
            "type": "string",
            "enum": [
              "AND",
              "OR"
            ],
            "description": "Logical operator for combining filters in the group."
          },
          "filters": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Filter"
                },
                {
                  "$ref": "#/components/schemas/FilterGroup"
                }
              ]
            },
            "description": "Nested filters or filter groups."
          }
        },
        "required": [
          "id",
          "group_operator",
          "filters"
        ]
      },
      "FilterCreate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Filter"
          },
          {
            "$ref": "#/components/schemas/FilterGroupLevel1"
          }
        ]
      },
      "FilterUpdate": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the filter."
              }
            },
            "required": [
              "id"
            ]
          },
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Filter"
              },
              {
                "$ref": "#/components/schemas/FilterGroup"
              }
            ]
          }
        ]
      },
      "SortListResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sort"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "DataRecordV3": {
        "type": "object",
        "description": "V3 Data Record format with id and fields separation",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "description": "Record identifier (primary key value)"
          },
          "fields": {
            "type": "object",
            "description": "Record fields data (excluding primary key). Undefined when empty.",
            "additionalProperties": true
          }
        },
        "required": [
          "id"
        ]
      },
      "DataRecordWithDeletedV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataRecordV3"
          },
          {
            "type": "object",
            "properties": {
              "deleted": {
                "type": "boolean",
                "description": "Indicates if the record was deleted"
              }
            },
            "required": [
              "deleted"
            ]
          }
        ]
      },
      "DataListResponseV3": {
        "type": "object",
        "description": "V3 Data List Response format",
        "properties": {
          "records": {
            "type": "array",
            "description": "Array of records for has-many and many-to-many relationships",
            "items": {
              "$ref": "#/components/schemas/DataRecordV3"
            }
          },
          "next": {
            "type": [
              "string",
              "null"
            ],
            "description": "Pagination token for next page"
          },
          "prev": {
            "type": [
              "string",
              "null"
            ],
            "description": "Pagination token for previous page"
          },
          "nestedNext": {
            "type": [
              "string",
              "null"
            ],
            "description": "Nested pagination token for next page"
          },
          "nestedPrev": {
            "type": [
              "string",
              "null"
            ],
            "description": "Nested pagination token for previous page"
          }
        }
      },
      "DataInsertRequestV3": {
        "type": "object",
        "description": "V3 Data Insert Request format",
        "properties": {
          "fields": {
            "type": "object",
            "description": "Record fields data",
            "additionalProperties": true
          }
        },
        "required": [
          "fields"
        ]
      },
      "DataUpdateRequestV3": {
        "type": "object",
        "description": "V3 Data Update Request format",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "description": "Record identifier"
          },
          "fields": {
            "type": "object",
            "description": "Record fields data to update",
            "additionalProperties": true
          }
        },
        "required": [
          "id",
          "fields"
        ]
      },
      "DataDeleteRequestV3": {
        "type": "object",
        "description": "Single record delete request",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "description": "Record identifier"
          }
        },
        "required": [
          "id"
        ]
      },
      "DataInsertResponseV3": {
        "type": "object",
        "description": "V3 Data Insert Response format",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRecordV3"
            },
            "description": "Array of created records"
          }
        },
        "required": [
          "records"
        ]
      },
      "DataUpdateResponseV3": {
        "type": "object",
        "description": "V3 Data Update Response format",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "description": "Updated record identifier"
                },
                "fields": {
                  "type": "object",
                  "description": "Record fields data (excluding primary key). Undefined when empty.",
                  "additionalProperties": true
                }
              },
              "required": [
                "id"
              ]
            },
            "description": "Array of updated record identifiers"
          }
        },
        "required": [
          "records"
        ]
      },
      "DataDeleteResponseV3": {
        "type": "object",
        "description": "V3 Data Delete Response format",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRecordWithDeletedV3"
            },
            "description": "Array of deleted records"
          }
        },
        "required": [
          "records"
        ]
      },
      "DataReadResponseV3": {
        "$ref": "#/components/schemas/DataRecordV3",
        "description": "V3 Data Read Response format"
      },
      "DataNestedListResponseV3": {
        "type": "object",
        "description": "V3 Nested Data List Response format - supports both single record and array responses",
        "properties": {
          "records": {
            "type": "array",
            "description": "Array of records for has-many and many-to-many relationships",
            "items": {
              "$ref": "#/components/schemas/DataRecordV3"
            }
          },
          "record": {
            "description": "Single record for belongs-to and one-to-one relationships",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataRecordV3"
              },
              {
                "type": "null"
              }
            ]
          },
          "next": {
            "type": [
              "string",
              "null"
            ],
            "description": "Pagination token for next page"
          },
          "prev": {
            "type": [
              "string",
              "null"
            ],
            "description": "Pagination token for previous page"
          }
        }
      },
      "Paginated": {
        "description": "Model for Paginated",
        "examples": [
          {
            "next": "http://api.nocodd.com/api/v3/tables/id?page=3",
            "prev": "http://api.nocodd.com/api/v3/tables/id?page=1"
          }
        ],
        "properties": {
          "next": {
            "description": "URL to access next page",
            "type": "string"
          },
          "prev": {
            "description": "URL to access previous page",
            "type": "string"
          },
          "nestedNext": {
            "description": "URL to access current page data with next set of nested fields data",
            "type": "string"
          },
          "nestedPrev": {
            "description": "URL to access current page data with previous set of nested fields data",
            "type": "string"
          }
        },
        "title": "Paginated Model",
        "type": "object"
      },
      "BaseRoles": {
        "type": "string",
        "description": "Base roles for the user.",
        "enum": [
          "owner",
          "creator",
          "editor",
          "viewer",
          "commenter",
          "no-access"
        ]
      },
      "Workspace": {
        "type": "object",
        "description": "Basic workspace information",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the workspace"
          },
          "title": {
            "type": "string",
            "description": "Title of the workspace"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the workspace was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the workspace was last updated"
          }
        },
        "required": [
          "id",
          "title",
          "created_at",
          "updated_at"
        ]
      },
      "WorkspaceWithMembers": {
        "type": "object",
        "description": "Workspace information including member details",
        "allOf": [
          {
            "$ref": "#/components/schemas/Workspace"
          },
          {
            "type": "object",
            "properties": {
              "individual_members": {
                "type": "object",
                "properties": {
                  "workspace_members": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WorkspaceMember"
                    },
                    "description": "List of workspace members"
                  }
                },
                "required": [
                  "workspace_members"
                ]
              }
            },
            "required": [
              "individual_members"
            ]
          }
        ]
      },
      "WorkspaceMember": {
        "type": "object",
        "description": "Individual workspace member information",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the member"
          },
          "user_id": {
            "type": "string",
            "description": "Unique identifier for the user"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was added to the workspace"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was last updated in the workspace"
          },
          "workspace_role": {
            "$ref": "#/components/schemas/WorkspaceRoles",
            "description": "Role assigned to the user in the workspace"
          }
        },
        "required": [
          "email",
          "user_id",
          "created_at",
          "updated_at",
          "workspace_role"
        ]
      },
      "WorkspaceUser": {
        "type": "object",
        "description": "Workspace user information",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user"
          },
          "user_id": {
            "type": "string",
            "description": "Unique identifier for the user"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was added to the workspace"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was last updated in the workspace"
          },
          "workspace_role": {
            "$ref": "#/components/schemas/WorkspaceRoles",
            "description": "Role assigned to the user in the workspace"
          }
        },
        "required": [
          "email",
          "user_id",
          "created_at",
          "updated_at",
          "workspace_role"
        ]
      },
      "WorkspaceUserCreate": {
        "type": "array",
        "items": {
          "type": "object",
          "oneOf": [
            {
              "title": "Invite User with ID",
              "required": [
                "user_id",
                "workspace_role"
              ],
              "properties": {
                "user_id": {
                  "type": "string",
                  "description": "Unique identifier for the user (skip if email is provided)"
                },
                "workspace_role": {
                  "$ref": "#/components/schemas/WorkspaceRoles",
                  "description": "Workspace role to assign to the user"
                }
              }
            },
            {
              "title": "Invite User with Email",
              "required": [
                "email",
                "workspace_role"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "Email address of the user (skip if user_id is provided)"
                },
                "workspace_role": {
                  "$ref": "#/components/schemas/WorkspaceRoles",
                  "description": "Workspace role to assign to the user"
                }
              }
            }
          ],
          "description": "An object representing a new workspace user to be created."
        },
        "description": "Array of workspace users to be created."
      },
      "WorkspaceUserUpdate": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "Unique identifier for the user"
            },
            "workspace_role": {
              "$ref": "#/components/schemas/WorkspaceRoles",
              "description": "New workspace role to assign to the user"
            }
          },
          "required": [
            "user_id",
            "workspace_role"
          ],
          "description": "An object representing updates for an existing workspace user."
        },
        "description": "Array of workspace user updates."
      },
      "WorkspaceUserDelete": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "Unique identifier for the user"
            }
          },
          "required": [
            "user_id"
          ],
          "description": "An object representing a workspace user to be deleted."
        },
        "description": "Array of workspace users to be deleted."
      },
      "WorkspaceRoles": {
        "type": "string",
        "description": "Workspace roles for the user.",
        "enum": [
          "workspace-level-owner",
          "workspace-level-creator",
          "workspace-level-editor",
          "workspace-level-viewer",
          "workspace-level-commenter",
          "workspace-level-no-access"
        ]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "BadRequest",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string",
                  "x-stoplight": {
                    "id": "p9mk4oi0hbihm"
                  },
                  "example": "BadRequest [Error]: <ERROR MESSAGE>"
                }
              },
              "required": [
                "msg"
              ]
            },
            "examples": {
              "Example 1": {
                "value": {
                  "msg": "BadRequest [Error]: <ERROR MESSAGE>"
                }
              }
            }
          }
        },
        "headers": {}
      }
    },
    "securitySchemes": {
      "xc-token": {
        "name": "Auth Token ",
        "type": "apiKey",
        "in": "header",
        "description": "Auth Token is a JWT Token generated based on the logged-in user. By default, the token is only valid for 10 hours. However, you can change the value by defining it using environment variable `NC_JWT_EXPIRES_IN`."
      },
      "bearerAuth": {
        "name": "Authorization",
        "type": "http",
        "scheme": "bearer",
        "description": "Bearer token authentication. Use 'Authorization: Bearer <token>' header format. This is an alternative to the xc-token header."
      },
      "xc-shared-base-id": {
        "name": "Shared Base ID",
        "type": "apiKey",
        "in": "header",
        "description": "Shared base uuid"
      },
      "xc-shared-erd-id": {
        "name": "Shared ERD ID",
        "type": "apiKey",
        "in": "header",
        "description": "Shared ERD uuid"
      }
    },
    "parameters": {
      "xc-token": {
        "name": "xc-token",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "API Token. Refer [here](https://docs.nocodb.com/account-settings/api-tokens/) to know more"
      }
    }
  }
}
