# This workflow builds the python package.

# When from from a release tags or a workflow dispatch, it also publishes to PyPI and DockerHub along
# with bumping the Connector Builder pinned version.
# Note: We may want to rename this file at some point. However, if we rename the workflow file name,
# we have to also update the Trusted Publisher settings on PyPI.

name: MCP Server Publish

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: >
          Note that this workflow is intended for prereleases. For public-facing stable releases,
          please use the GitHub Releases workflow instead:
          https://github.com/airbytehq/connector-builder-mcp/blob/main/docs/RELEASES.md.
          For prereleases, please leave the version blank to use the detected version. Alternatively,
          you can override the dynamic versioning for special use cases.
        required: false
      publish_to_pypi:
        description: "Publish to PyPI. If true, the workflow will publish to PyPI."
        type: boolean
        required: true
        default: true

jobs:
  build:
    name: Build Python Package
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect Prerelease Version using Dunamai
        uses: mtkennerly/dunamai-action@v1
        with:
          args: --format "{base}.post{distance}.dev${{ github.run_id }}"
          env-var: DETECTED_VERSION

      - name: Detect Release Tag Version from git ref ('${{ github.ref_name }}')
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "Overriding Dunamai detected version: '${{ env.DETECTED_VERSION || 'none' }}'"
          # Extract the version from the git ref
          DETECTED_VERSION=${{ github.ref_name }}
          # Remove the 'v' prefix if it exists
          DETECTED_VERSION="${DETECTED_VERSION#v}"
          echo "Setting detected version to '$DETECTED_VERSION'"
          echo "DETECTED_VERSION=${DETECTED_VERSION}" >> $GITHUB_ENV

      - name: Validate and set VERSION (detected='${{ env.DETECTED_VERSION }}', input='${{ github.event.inputs.version || 'none' }}')
        id: set_version
        run: |
          INPUT_VERSION=${{ github.event.inputs.version }}
          echo "Version input set to '${INPUT_VERSION}'"
          # Exit with success if both detected and input versions are empty
          if [ -z "${DETECTED_VERSION:-}" ] && [ -z "${INPUT_VERSION:-}" ]; then
            echo "No version detected or input. Will publish to SHA tag instead."
            echo 'VERSION=' >> $GITHUB_ENV
            exit 0
          fi
          # Remove the 'v' prefix if it exists
          INPUT_VERSION="${INPUT_VERSION#v}"
          # Fail if detected version is non-empty and different from the input version
          if [ -n "${DETECTED_VERSION:-}" ] && [ -n "${INPUT_VERSION:-}" ] && [ "${DETECTED_VERSION}" != "${INPUT_VERSION}" ]; then
            echo "Warning: Version input '${INPUT_VERSION}' does not match detected version '${DETECTED_VERSION}'."
            echo "Using input version '${INPUT_VERSION}' instead."
          fi
          # Set the version to the input version if non-empty, otherwise the detected version
          VERSION="${INPUT_VERSION:-$DETECTED_VERSION}"
          # Fail if the version is still empty
          if [ -z "$VERSION" ]; then
            echo "Error: VERSION is not set. Ensure the tag follows the format 'refs/tags/vX.Y.Z'."
            exit 1
          fi
          echo "Setting version to '$VERSION'"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          # Check if version is a prerelease version (will not tag 'latest')
          if [[ "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          fi

      - uses: hynek/build-and-inspect-python-package@v2
        env:
          # Pass in the evaluated version from the previous step
          # More info: https://github.com/mtkennerly/uv-dynamic-versioning#user-content-environment-variables
          UV_DYNAMIC_VERSIONING_BYPASS: ${{ env.VERSION || '0.0.0dev0'}}

      - uses: actions/upload-artifact@v4
        with:
          name: Packages-${{ github.run_id }}
          path: |
            /tmp/baipp/dist/*.whl
            /tmp/baipp/dist/*.tar.gz

    outputs:
      VERSION: ${{ steps.set_version.outputs.VERSION }}
      IS_PRERELEASE: ${{ steps.set_version.outputs.IS_PRERELEASE }}

  publish_to_pypi:
    name: Publish MCP Server version to PyPI
    runs-on: ubuntu-24.04
    needs: [build]
    permissions:
      id-token: write
      contents: write
    environment:
      name: PyPi
      url: https://pypi.org/p/airbyte-connector-builder-mcp/
    if: >
      (github.event_name == 'push' &&
       startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' &&
       (github.event.inputs.publish_to_pypi == 'true' ||
        github.event.inputs.update_connector_builder == 'true'
      ))
    env:
      VERSION: ${{ needs.build.outputs.VERSION }}
      IS_PRERELEASE: ${{ needs.build.outputs.IS_PRERELEASE }}
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: Packages-${{ github.run_id }}
          path: dist

      - name: Upload wheel to release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*.whl
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Publish to PyPI
        if: >
          (github.event_name == 'push' &&
           startsWith(github.ref, 'refs/tags/v')
          ) || github.event.inputs.publish_to_pypi == 'true'
        uses: pypa/gh-action-pypi-publish@v1.13.0
