[tool.poe.tasks]

# Development Tasks
build = { cmd = "bin/build_connector_feature_index.py", help = "Build connector feature index from Airbyte manifests" }
install = { shell = "uv sync --all-extras && uv sync --project=connector_builder_agents --all-extras", help = "Install and sync project dependencies." }
sync = { cmd = "uv sync --all-extras", help = "Sync project dependencies. (Alias for install.)" }
format = { cmd = "uv run ruff format .", help = "Format code with ruff" }
format-check = { cmd = "uv run ruff format --check .", help = "Format check with ruff" }
lint = { cmd = "uv run ruff check .", help = "Lint code with ruff" }
lint-fix = { cmd = "uv run ruff check --fix .", help = "Lint and fix code with ruff" }
check-gh-actions.shell = """
which actionlint >/dev/null 2>&1 && actionlint || \
(echo "ERROR: actionlint not found. Install with: 'brew install actionlint'" && exit 1)
"""
check-gh-actions.help = "Lint GitHub Actions workflows"
lock = { shell = "uv lock && uv lock --project=connector_builder_agents", help = "Lock dependencies." }
mypy = { cmd = "uv run mypy connector_builder_mcp", help = "Type check code with mypy" }
test = { cmd = "uv run pytest tests/ -v", help = "Run tests with verbose output" }
test-fast = { cmd = "uv run pytest --exitfirst tests", help = "Run tests, stop on first failure" }

# Aliases
check-types = ["mypy"]
format-fix = ["format"]

# Composite Tasks
fix-ruff = ["format", "lint-fix"]
fix = ["fix-ruff"]
check = { sequence = ["lint", "check-types"], help = "Run all checks" }
check-fast = ["check"]  # If we later add slow checks, this can exclude them.
autofix = ["fix", "check-fast"]
pre-commit = ["autofix"]

# MCP Server Tasks
server = { cmd = "uv run connector-builder-mcp", help = "Start the MCP server" }
mcp-serve-local = { cmd = "uv run connector-builder-mcp", help = "Start the MCP server with STDIO transport" }
mcp-serve-http = { cmd = "uv run python -c \"from connector_builder_mcp.server import app; app.run(transport='http', host='127.0.0.1', port=8000)\"", help = "Start the MCP server with HTTP transport" }
mcp-serve-sse = { cmd = "uv run python -c \"from connector_builder_mcp.server import app; app.run(transport='sse', host='127.0.0.1', port=8000)\"", help = "Start the MCP server with SSE transport" }
inspect = { cmd = "uv run fastmcp inspect connector_builder_mcp/server.py:app", help = "Inspect MCP tools and resources (supports --tools, --health, etc.)" }
test-tool = { cmd = "uv run python bin/test_mcp_tool.py", help = "Test MCP tools directly with JSON arguments: poe test-tool <tool_name> '<json_args>'" }

# Documentation Tasks
docs-generate.cmd = "uv run pdoc connector_builder_mcp --output-dir docs/generated"
docs-generate.help = "Generate API documentation"

# Agentic Connector Build Testing
build-connector = { cmd = "uv run --project=connector_builder_agents python -m connector_builder_agents.src.cli", help = "Run the MCP agent" }
build-connector-interactive = { cmd = "uv run --project=connector_builder_agents python -m connector_builder_agents.src.cli --interactive", help = "Run the MCP agent interactively (user is manager)" }
evals = { cmd = "uv run --project=connector_builder_agents python -m connector_builder_agents.src.evals.cli", help = "Manage connector builder evaluations (use 'poe evals run' or 'poe evals report <experiment_id>')" }


# Codex Tests
codex.cmd = "npx @openai/codex --sandbox=workspace-write"
codex.cwd = "./ai-generated-files"
codex.help = "Run Codex AI agent with a prompt string."
codex-run.shell = """
(cat prompts/root-prompt-headless.md; echo "$prompt") | codex exec \
    --sandbox=workspace-write \
    --cd=ai-generated-files \
    --headless \
    -
"""
codex-run.args = ["prompt"]
