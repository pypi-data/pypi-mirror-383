[project]
name = "web-explorer-mcp"
version = "0.3.0"
description = "MCP server for web search and content extraction using SearxNG"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    { name = "Sergei Konovalov", email = "l0kifs91@gmail.com" }
]
keywords = ["mcp", "model-context-protocol", "search", "searxng", "web-scraping", "ai", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
]
dependencies = [
    "pydantic>=2.11.7",
    "pydantic-settings>=2.11.0",
    "loguru>=0.7.0",
    "typer>=0.19.0",
    "rich>=14.1.0",
    "httpx>=0.28.1",
    "fastmcp>=2.12.1",
    "beautifulsoup4>=4.13.5",
    "lxml>=6.0.1",
    "playwright>=1.40.0",
]

[project.urls]
Repository = "https://github.com/l0kifs/web-explorer-mcp"

[project.scripts]
web-explorer-mcp = "web_explorer_mcp.entrypoints.mcp.server:main"

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-timeout>=2.3.1",
    "ruff>=0.13.0",
    "ty>=0.0.1a21",
]

[build-system]
requires = ["uv_build>=0.8.11,<0.9.0"]
build-backend = "uv_build"

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "I", "N", "UP", "S", "B", "C4", "SIM"]
ignore = ["E501", "S101", "S603", "S607"]  # Allow subprocess usage in scripts

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.coverage.run]
branch = true
source = ["src/web_explorer_mcp"]
omit = [
    "tests/*",
    "**/__init__.py",
    "**/main.py",  # Entry point scripts
    "**/server.py",  # MCP server entry points
    "**/searxng_search_service.py",  # Integration code requiring external SearxNG service
]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 85

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--tb=short",
    "-s"
]
asyncio_mode = "auto"
timeout = 10
timeout_method = "thread"
timeout_func_only = false
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
markers = [
    "asyncio: mark test to be run with asyncio",
    "integration: mark test as integration test",
    "unit: mark test as unit test",
    "e2e: mark test as end-to-end test",
    "slow: mark test as slow running (timeout 60s)",
]
