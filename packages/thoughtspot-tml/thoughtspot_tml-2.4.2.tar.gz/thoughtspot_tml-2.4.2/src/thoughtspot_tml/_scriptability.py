# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: edoc.proto
# plugin: python-betterproto
import warnings
from dataclasses import dataclass
from typing import Dict, List
import betterproto


class Comparator(betterproto.Enum):
    COMPARATOR_UNSPECIFIED = 0
    COMPARATOR_LT = 1
    COMPARATOR_GT = 2
    COMPARATOR_LEQ = 3
    COMPARATOR_GEQ = 4
    COMPARATOR_EQ = 5
    COMPARATOR_NEQ = 6


class PercentageChangeComparator(betterproto.Enum):
    PERCENTAGE_CHANGE_COMPARATOR_UNSPECIFIED = 0
    PERCENTAGE_CHANGE_COMPARATOR_INCREASES_BY = 1
    PERCENTAGE_CHANGE_COMPARATOR_DECREASES_BY = 2
    PERCENTAGE_CHANGE_COMPARATOR_CHANGES_BY = 3


class AlertType(betterproto.Enum):
    Scheduled = 0
    Threshold = 1
    Anomaly = 2


class QueryTriggerE(betterproto.Enum):
    UNKNOWN = 1
    ANSWER_EDIT = 2
    ANSWER_VIEW = 3
    LIVEBOARD_EDIT = 4
    LIVEBOARD_VIEW = 5
    UNDERLYING_DATA = 6
    DOWNLOAD = 7
    EXPLORE = 8
    DRILL_DOWN = 9
    DATA_WORKSPACE_QUERY = 10
    SEARCH_DATA = 11
    SPOTIQ_AUTO_ANALYZE = 12
    KPI_MONITOR = 13
    GET_FILTER_VALUES = 14
    TS_SYNC = 15
    MOBILE = 16
    APIS = 17
    CDW_CONNECTION = 18
    DATA_WORKSPACE_SAMPLE = 19
    SQL_EDITOR = 20
    DBT = 21
    SAGE_INDEXING = 22
    SPOT_APPS = 23
    ROW_COUNT_STATS = 24
    SAGE_SAMPLING = 25
    SCHEDULED_PINBOARDS = 26
    REPORTBOOK = 27
    CAFFEINE = 28
    CORTEX = 29
    SEED_QUESTIONS = 30
    CUSTOM_CALENDAR = 31


class ChartVizProtoChartSpecificColumnType(betterproto.Enum):
    UNDEFINED = 0
    MEASURE_NAMES = 1
    MEASURE_VALUES = 2


class ChipChipType(betterproto.Enum):
    FILTER = 0
    PARAMETER = 1


class CohortTypeE(betterproto.Enum):
    SIMPLE = 1
    ADVANCED = 2
    GROUP_BASED = 3
    BIN_BASED = 4
    COLUMN_BASED = 5


class CohortGroupingTypeE(betterproto.Enum):
    GROUP_BASED = 1
    BIN_BASED = 2
    COLUMN_BASED = 3


class ConditionCombineTypeE(betterproto.Enum):
    ALL = 1
    ANY = 2


class ComparisonOperatorE(betterproto.Enum):
    EQ = 1
    NE = 2
    LT = 3
    LE = 4
    GT = 5
    GE = 6
    BW = 7
    CONTAINS = 8
    NOT_CONTAINS = 9
    BEGINS_WITH = 10
    ENDS_WITH = 11


class FilterConditionFilterValueType(betterproto.Enum):
    STRING = 1
    DATE_FILTER = 2


class CohortConfigVersion(betterproto.Enum):
    V1 = 1
    V1DOT1 = 2


class TimeBucketE(betterproto.Enum):
    NO_BUCKET = 0
    DAILY = 1
    WEEKLY = 2
    MONTHLY = 3
    QUARTERLY = 4
    YEARLY = 5
    HOURLY = 6
    AUTO = 8
    HOUR_OF_DAY = 9
    DAY_OF_WEEK = 7
    DAY_OF_MONTH = 10
    DAY_OF_QUARTER = 11
    DAY_OF_YEAR = 12
    WEEK_OF_MONTH = 13
    WEEK_OF_QUARTER = 14
    WEEK_OF_YEAR = 15
    MONTH_OF_QUARTER = 16
    MONTH_OF_YEAR = 17
    QUARTER_OF_YEAR = 18


class SageDateFilterProtoDatePeriod(betterproto.Enum):
    DAY = 0
    WEEK = 1
    MONTH = 2
    QUARTER = 3
    YEAR = 4
    HOUR = 5
    MINUTE = 6
    SECOND = 7
    NUM_DATE_PERIODS = 8


class SageDateFilterProtoQuarter(betterproto.Enum):
    Q1 = 0
    Q2 = 1
    Q3 = 2
    Q4 = 3
    NUM_QUARTERS = 4


class SageDateFilterProtoMonth(betterproto.Enum):
    JANUARY = 0
    FEBRUARY = 1
    MARCH = 2
    APRIL = 3
    MAY = 4
    JUNE = 5
    JULY = 6
    AUGUST = 7
    SEPTEMBER = 8
    OCTOBER = 9
    NOVEMBER = 10
    DECEMBER = 11
    NUM_MONTHS = 12


class SageDateFilterProtoWeekDay(betterproto.Enum):
    MONDAY = 0
    TUESDAY = 1
    WEDNESDAY = 2
    THURSDAY = 3
    FRIDAY = 4
    SATURDAY = 5
    SUNDAY = 6
    NUM_WEEK_DAYS = 7


class SageDateFilterProtoDateFilterType(betterproto.Enum):
    YESTERDAY = 0
    TODAY = 1
    TOMORROW = 18
    LAST_PERIOD = 2
    LAST_N_PERIOD = 3
    PERIOD_TO_DATE = 4
    YEAR_ONLY = 5
    QUARTER_YEAR = 6
    QUARTER_ONLY = 20
    MONTH_ONLY = 7
    WEEKDAY_ONLY = 8
    MONTH_YEAR = 9
    N_PERIOD_AGO = 10
    THIS_PERIOD = 13
    NEXT_PERIOD = 14
    NEXT_N_PERIOD = 17
    EXACT_DATE = 11
    EXACT_TIME = 19
    EXACT_DATE_TIME = 12
    NOW = 15
    EXACT_DATE_RANGE = 16
    PERIOD_ONLY = 21
    NUM_DATE_FILTERS = 22
    'e.g. "week of year = 50" Keep it as highest value.'


class FormatConfigCategoryType(betterproto.Enum):
    NUMBER = 1
    PERCENTAGE = 2
    CURRENCY = 3
    CUSTOM = 4


class FormatConfigUnit(betterproto.Enum):
    NONE = 1
    THOUSANDS = 2
    MILLION = 3
    BILLION = 4
    TRILLION = 5
    AUTO = 6


class FormatConfigNegativeValueFormat(betterproto.Enum):
    PREFIX_DASH = 1
    SUFFIX_DASH = 2
    BRACES_NODASH = 3


class GeometryTypeEnumProtoE(betterproto.Enum):
    POINT = 0
    LINE_STRING = 1
    LINEAR_RING = 2
    POLYGON = 3
    MULTI_POINT = 4
    MULTI_LINE_STRING = 5
    MULTI_POLYGON = 6
    GEOMETRY_COLLECTION = 7
    CIRCLE = 8


class QueryConstraintsConstraintDateRangeConditionBucket(betterproto.Enum):
    DAY = 0
    WEEK = 1
    MONTH = 2
    QUARTER = 3
    YEAR = 4


class ActionObjectApplicationTypeE(betterproto.Enum):
    NONE = 0
    SLACK = 1
    SALESFORCE = 2
    GOOGLE_SHEET = 3


class ActionContextE(betterproto.Enum):
    NONE = 0
    PRIMARY = 1
    MENU = 2
    CONTEXT_MENU = 3


class FrequencySpecFrequencyGranularity(betterproto.Enum):
    EVERY_MINUTE = 0
    HOURLY = 1
    DAILY = 2
    WEEKLY = 3
    MONTHLY = 4


class AnswerEDocProtoColumnSortInfoColumnSortCategory(betterproto.Enum):
    DEFAULT = 1
    NONE = 2
    ALPHA = 3
    CUSTOM = 4


class ActionTypeE(betterproto.Enum):
    CALLBACK = 1
    URL = 2


class AvailabilityContentTypeE(betterproto.Enum):
    GLOBAL = 0
    LOCAL = 1


class UrlActionDetailsAuthenticationTypeE(betterproto.Enum):
    NONE = 0
    BASIC = 1
    BEARER = 2
    API_KEY = 3


@dataclass(eq=False, repr=False)
class ChartVizProtoChartSpecificColumn(betterproto.Message):
    type: "ChartVizProtoChartSpecificColumnType" = betterproto.enum_field(3, optional=True)


@dataclass(eq=False, repr=False)
class Chip(betterproto.Message):
    object_id: str = betterproto.string_field(1, optional=True)
    type: "ChipChipType" = betterproto.enum_field(2, optional=True)


@dataclass(eq=False, repr=False)
class FilterCondition(betterproto.Message):
    column_id: str = betterproto.string_field(1, optional=True)
    operator: "ComparisonOperatorE" = betterproto.enum_field(2, optional=True)
    value: list[str] = betterproto.string_field(3, optional=True)
    column_name: str = betterproto.string_field(4, optional=True)
    filter_value_type: "FilterConditionFilterValueType" = betterproto.enum_field(5, optional=True)
    date_filter_values: list["SageDateFilterProto"] = betterproto.message_field(6, optional=True)


@dataclass(eq=False, repr=False)
class CohortGroup(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    conditions: list["FilterCondition"] = betterproto.message_field(2, optional=True)
    combine_type: "ConditionCombineTypeE" = betterproto.enum_field(3, optional=True)


@dataclass(eq=False, repr=False)
class CohortBin(betterproto.Message):
    minimum_value: float = betterproto.double_field(1, optional=True)
    maximum_value: float = betterproto.double_field(2, optional=True)
    bin_size: float = betterproto.double_field(3, optional=True)


@dataclass(eq=False, repr=False)
class PassThruFilter(betterproto.Message):
    accept_all: bool = betterproto.bool_field(1, optional=True)
    include_column_ids: list[str] = betterproto.string_field(2, optional=True)
    exclude_column_ids: list[str] = betterproto.string_field(3, optional=True)


@dataclass(eq=False, repr=False)
class CohortConfig(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    null_output_value: str = betterproto.string_field(3, optional=True)
    combine_non_group_values: bool = betterproto.bool_field(4, optional=True)
    cohort_type: "CohortTypeE" = betterproto.enum_field(5, optional=True)
    anchor_column_id: str = betterproto.string_field(6, optional=True)
    return_column_id: str = betterproto.string_field(7, optional=True)
    groups: list["CohortGroup"] = betterproto.message_field(8, optional=True)
    bins: "CohortBin" = betterproto.message_field(9, optional=True)
    cohort_grouping_type: "CohortGroupingTypeE" = betterproto.enum_field(10, optional=True)
    cohort_answer_guid: str = betterproto.string_field(11, optional=True)
    is_editable: bool = betterproto.bool_field(12, optional=True)
    cohort_guid: str = betterproto.string_field(13, optional=True)
    hide_excluded_query_values: bool = betterproto.bool_field(14, optional=True)
    group_excluded_query_values: str = betterproto.string_field(15, optional=True)
    version: "CohortConfigVersion" = betterproto.enum_field(16, optional=True)
    pass_thru_filter: "PassThruFilter" = betterproto.message_field(17, optional=True)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("cohort_guid"):
            warnings.warn("CohortConfig.cohort_guid is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class FormatConfig(betterproto.Message):
    category: "FormatConfigCategoryType" = betterproto.enum_field(1, optional=True)
    numberFormatConfig: "FormatConfigNumberFormatConfig" = betterproto.message_field(
        2, group="formatConfigDetails", optional=True
    )
    percentageFormatConfig: "FormatConfigPercentageFormatConfig" = betterproto.message_field(
        3, group="formatConfigDetails", optional=True
    )
    currencyFormatConfig: "FormatConfigCurrencyFormatConfig" = betterproto.message_field(
        4, group="formatConfigDetails", optional=True
    )
    customFormatConfig: "FormatConfigCustomFormatConfig" = betterproto.message_field(
        5, group="formatConfigDetails", optional=True
    )
    isCategoryEditable: bool = betterproto.bool_field(6, optional=True)


@dataclass(eq=False, repr=False)
class FormatConfigNumberFormatConfig(betterproto.Message):
    unit: "FormatConfigUnit" = betterproto.enum_field(1, optional=True)
    decimals: float = betterproto.double_field(2, optional=True)
    negativeValueFormat: "FormatConfigNegativeValueFormat" = betterproto.enum_field(3, optional=True)
    toSeparateThousands: bool = betterproto.bool_field(4, optional=True)
    removeTrailingZeroes: bool = betterproto.bool_field(5, optional=True)


@dataclass(eq=False, repr=False)
class FormatConfigPercentageFormatConfig(betterproto.Message):
    decimals: float = betterproto.double_field(1, optional=True)
    removeTrailingZeroes: bool = betterproto.bool_field(2, optional=True)


@dataclass(eq=False, repr=False)
class FormatConfigCurrencyFormatConfig(betterproto.Message):
    locale: str = betterproto.string_field(1, optional=True)
    unit: "FormatConfigUnit" = betterproto.enum_field(2, optional=True)
    decimals: float = betterproto.double_field(3, optional=True)
    toSeparateThousands: bool = betterproto.bool_field(5, optional=True)
    removeTrailingZeroes: bool = betterproto.bool_field(6, optional=True)


@dataclass(eq=False, repr=False)
class FormatConfigCustomFormatConfig(betterproto.Message):
    format: str = betterproto.string_field(1, optional=True)


@dataclass(eq=False, repr=False)
class KeyValueStr(betterproto.Message):
    key: str = betterproto.string_field(1, optional=True)
    value: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class QueryConstraints(betterproto.Message):
    constraint: list["QueryConstraintsConstraint"] = betterproto.message_field(1, optional=True)


@dataclass(eq=False, repr=False)
class QueryConstraintsConstraint(betterproto.Message):
    table: str = betterproto.string_field(1, optional=True)
    condition: list["QueryConstraintsConstraintCondition"] = betterproto.message_field(2, optional=True)
    active: bool = betterproto.bool_field(3, optional=True)


@dataclass(eq=False, repr=False)
class QueryConstraintsConstraintDateRangeCondition(betterproto.Message):
    column: str = betterproto.string_field(1, optional=True)
    duration: int = betterproto.int32_field(2, optional=True)
    bucket: "QueryConstraintsConstraintDateRangeConditionBucket" = betterproto.enum_field(3, optional=True)


@dataclass(eq=False, repr=False)
class QueryConstraintsConstraintCondition(betterproto.Message):
    date_range_condition: "QueryConstraintsConstraintDateRangeCondition" = betterproto.message_field(1, optional=True)


@dataclass(eq=False, repr=False)
class ChartVizConfigCustomChartDimension(betterproto.Message):
    key: str = betterproto.string_field(1, optional=True)
    columns: list[str] = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class ChartVizConfigCustomChartConfig(betterproto.Message):
    key: str = betterproto.string_field(1, optional=True)
    dimensions: list["ChartVizConfigCustomChartDimension"] = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class FrequencySpec(betterproto.Message):
    cron: "FrequencySpecCronFrequencySpec" = betterproto.message_field(1, optional=True)
    time_zone: str = betterproto.string_field(2, optional=True)
    start_time: int = betterproto.int64_field(3, optional=True)
    end_time: int = betterproto.int64_field(4, optional=True)
    frequency_granularity: "FrequencySpecFrequencyGranularity" = betterproto.enum_field(5, optional=True)


@dataclass(eq=False, repr=False)
class FrequencySpecCronFrequencySpec(betterproto.Message):
    second: str = betterproto.string_field(1, optional=True)
    minute: str = betterproto.string_field(2, optional=True)
    hour: str = betterproto.string_field(3, optional=True)
    day_of_month: str = betterproto.string_field(4, optional=True)
    month: str = betterproto.string_field(5, optional=True)
    day_of_week: str = betterproto.string_field(6, optional=True)


@dataclass(eq=False, repr=False)
class ConstantValue(betterproto.Message):
    value: float = betterproto.double_field(1, optional=True)


@dataclass(eq=False, repr=False)
class SimpleConditionInfo(betterproto.Message):
    comparator: "Comparator" = betterproto.enum_field(1, optional=True)
    threshold: "ConstantValue" = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class PercentageChangeConditionInfo(betterproto.Message):
    comparator: "PercentageChangeComparator" = betterproto.enum_field(1, optional=True)
    threshold: "ConstantValue" = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class ConditionInfo(betterproto.Message):
    simple_condition: "SimpleConditionInfo" = betterproto.message_field(1, group="condition_info", optional=True)
    percentage_change_condition: "PercentageChangeConditionInfo" = betterproto.message_field(
        2, group="condition_info", optional=True
    )


@dataclass(eq=False, repr=False)
class MetricId(betterproto.Message):
    pinboard_viz_id: "MetricIdPinboardVizId" = betterproto.message_field(1, group="id", optional=True)
    answer_id: str = betterproto.string_field(2, group="id", optional=True)
    personalised_view_id: str = betterproto.string_field(3, optional=True)


@dataclass(eq=False, repr=False)
class MetricIdPinboardVizId(betterproto.Message):
    pinboard_id: str = betterproto.string_field(1, optional=True)
    viz_id: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class AttributeInfo(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    values: list[str] = betterproto.string_field(2, optional=True)
    answer_id: str = betterproto.string_field(3, optional=True)


@dataclass(eq=False, repr=False)
class ColumnProperties(betterproto.Message):
    column_type: str = betterproto.string_field(1, optional=True)
    aggregation: str = betterproto.string_field(2, optional=True)
    index_type: str = betterproto.string_field(3, optional=True)
    index_priority: float = betterproto.double_field(4, optional=True)
    synonyms: list[str] = betterproto.string_field(5, optional=True)
    is_attribution_dimension: bool = betterproto.bool_field(6, optional=True)
    is_additive: bool = betterproto.bool_field(7, optional=True)
    calendar: str = betterproto.string_field(8, optional=True)
    format_pattern: str = betterproto.string_field(9, optional=True)
    currency_type: "ColumnPropertiesCurrencyFormat" = betterproto.message_field(10, optional=True)
    is_hidden: bool = betterproto.bool_field(11, optional=True)
    geo_config: "ColumnPropertiesGeoConfigProto" = betterproto.message_field(12, optional=True)
    spotiq_preference: str = betterproto.string_field(13, optional=True)
    search_iq_preferred: bool = betterproto.bool_field(14, optional=True)
    hierarchical_column_name: str = betterproto.string_field(15, optional=True)
    synonym_type: str = betterproto.string_field(16, optional=True)
    value_casing: str = betterproto.string_field(17, optional=True)
    custom_order: list[str] = betterproto.string_field(18, optional=True)
    use_cases: list[str] = betterproto.string_field(19, optional=True)
    is_mandatory: bool = betterproto.bool_field(20, optional=True)
    is_strict_date_column: bool = betterproto.bool_field(21, optional=True)
    default_date_bucket: "TimeBucketE" = betterproto.enum_field(22, optional=True)
    is_time_bucket_restricted: bool = betterproto.bool_field(23, optional=True)
    is_mandatory_token_filter: bool = betterproto.bool_field(24, optional=True)
    data_type: str = betterproto.string_field(25, optional=True)
    sql_data_type: str = betterproto.string_field(26, optional=True)
    ai_context: str = betterproto.string_field(27, optional=True)


@dataclass(eq=False, repr=False)
class ColumnPropertiesCurrencyFormat(betterproto.Message):
    is_browser: bool = betterproto.bool_field(1, optional=True)
    column: str = betterproto.string_field(2, optional=True)
    iso_code: str = betterproto.string_field(3, optional=True)


@dataclass(eq=False, repr=False)
class ColumnPropertiesGeoConfigProto(betterproto.Message):
    latitude: bool = betterproto.bool_field(1, optional=True)
    longitude: bool = betterproto.bool_field(2, optional=True)
    country: bool = betterproto.bool_field(3, optional=True)
    region_name: "ColumnPropertiesGeoConfigProtoSubRegion" = betterproto.message_field(4, optional=True)
    custom_file_guid: str = betterproto.string_field(5, optional=True)
    geometryType: "GeometryTypeEnumProtoE" = betterproto.enum_field(6, optional=True)


@dataclass(eq=False, repr=False)
class ColumnPropertiesGeoConfigProtoSubRegion(betterproto.Message):
    country: str = betterproto.string_field(1, optional=True)
    region_name: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class FormulaProperties(betterproto.Message):
    column_type: str = betterproto.string_field(1, optional=True)
    aggregation: str = betterproto.string_field(3, optional=True)


@dataclass(eq=False, repr=False)
class Formula(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    name: str = betterproto.string_field(2, optional=True)
    expr: str = betterproto.string_field(3, optional=True)
    properties: "FormulaProperties" = betterproto.message_field(4, optional=True)
    was_auto_generated: bool = betterproto.bool_field(5, optional=True)


@dataclass(eq=False, repr=False)
class Parameter(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    name: str = betterproto.string_field(2, optional=True)
    data_type: str = betterproto.string_field(3, optional=True)
    default_value: str = betterproto.string_field(4, optional=True)
    list_config: "ParameterListConfig" = betterproto.message_field(5, group="value_restrictions", optional=True)
    list_column_id: str = betterproto.string_field(6, group="value_restrictions", optional=True)
    range_config: "ParameterRangeConfig" = betterproto.message_field(7, group="value_restrictions", optional=True)
    sap_parameter_name: str = betterproto.string_field(8, optional=True)
    linked_parameters: list[str] = betterproto.string_field(9, optional=True)
    description: str = betterproto.string_field(10, optional=True)
    is_hidden: bool = betterproto.bool_field(11, optional=True)


@dataclass(eq=False, repr=False)
class ParameterListConfig(betterproto.Message):
    list_choice: list["ParameterListConfigListChoice"] = betterproto.message_field(1, optional=True)


@dataclass(eq=False, repr=False)
class ParameterListConfigListChoice(betterproto.Message):
    value: str = betterproto.string_field(1, optional=True)
    display_name: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class ParameterRangeConfig(betterproto.Message):
    range_min: str = betterproto.string_field(1, optional=True)
    range_max: str = betterproto.string_field(2, optional=True)
    include_min: bool = betterproto.bool_field(3, optional=True)
    include_max: bool = betterproto.bool_field(4, optional=True)


@dataclass(eq=False, repr=False)
class DateFilterProto(betterproto.Message):
    type: str = betterproto.string_field(1, optional=True)
    number: int = betterproto.int32_field(2, optional=True)
    date: str = betterproto.string_field(3, optional=True)
    oper: str = betterproto.string_field(4, optional=True)
    date_range: "DateFilterProtoDateRange" = betterproto.message_field(5, optional=True)
    date_period: str = betterproto.string_field(6, optional=True)
    for_each_period: str = betterproto.string_field(7, optional=True)
    year: int = betterproto.int32_field(8, optional=True)
    quarter: str = betterproto.string_field(9, optional=True)
    month: str = betterproto.string_field(10, optional=True)
    week_day: str = betterproto.string_field(11, optional=True)
    year_name: str = betterproto.string_field(12, optional=True)
    quarter_name: str = betterproto.string_field(13, optional=True)
    month_name: str = betterproto.string_field(14, optional=True)
    week_day_name: str = betterproto.string_field(15, optional=True)


@dataclass(eq=False, repr=False)
class DateFilterProtoDateRange(betterproto.Message):
    start_date: str = betterproto.string_field(1, optional=True)
    end_date: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class Filter(betterproto.Message):
    column: list[str] = betterproto.string_field(1, optional=True)
    oper: str = betterproto.string_field(2, optional=True)
    values: list[str] = betterproto.string_field(3, optional=True)
    excluded_visualizations: list[str] = betterproto.string_field(4, optional=True)
    is_mandatory: bool = betterproto.bool_field(5, optional=True)
    date_filter: "DateFilterProto" = betterproto.message_field(6, optional=True)
    is_single_value: bool = betterproto.bool_field(7, optional=True)
    display_name: str = betterproto.string_field(8, optional=True)
    apply_on_tables: list[str] = betterproto.string_field(9, optional=True)


@dataclass(eq=False, repr=False)
class Join(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    name: str = betterproto.string_field(2, optional=True)
    source: str = betterproto.string_field(3, optional=True)
    destination: str = betterproto.string_field(4, optional=True)
    on: list[str] = betterproto.string_field(5, optional=True)
    type: str = betterproto.string_field(6, optional=True)
    is_one_to_one: bool = betterproto.bool_field(7, optional=True)


@dataclass(eq=False, repr=False)
class RelationEDocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    source: "Identity" = betterproto.message_field(3, optional=True)
    destination: "Identity" = betterproto.message_field(4, optional=True)
    on: str = betterproto.string_field(5, optional=True)
    type: str = betterproto.string_field(6, optional=True)
    is_one_to_one: bool = betterproto.bool_field(7, optional=True)
    relation_id: str = betterproto.string_field(8, optional=True)
    with_: "Identity" = betterproto.message_field(9, optional=True)
    cardinality: str = betterproto.string_field(10, optional=True)


@dataclass(eq=False, repr=False)
class TablePath(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    table: str = betterproto.string_field(2, optional=True)
    join_path: list["TablePathJoinPath"] = betterproto.message_field(3, optional=True)
    column: list[str] = betterproto.string_field(4, optional=True)


@dataclass(eq=False, repr=False)
class TablePathJoinPath(betterproto.Message):
    join: list[str] = betterproto.string_field(1, optional=True)


@dataclass(eq=False, repr=False)
class Identity(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    name: str = betterproto.string_field(2, optional=True)
    fqn: str = betterproto.string_field(3, optional=True)
    obj_id: str = betterproto.string_field(4, optional=True)


@dataclass(eq=False, repr=False)
class ObjectEDocProto(betterproto.Message):
    guid: str = betterproto.string_field(1, optional=True)
    obj_id: str = betterproto.string_field(2, optional=True)
    view: "ViewEDocProto" = betterproto.message_field(3, optional=True)
    answer: "AnswerEDocProto" = betterproto.message_field(4, optional=True)
    pinboard: "PinboardEDocProto" = betterproto.message_field(5, optional=True)
    table: "LogicalTableEDocProto" = betterproto.message_field(6, optional=True)
    joins: list["RelationEDocProto"] = betterproto.message_field(7, optional=True)
    permissions: list["ObjectPermissions"] = betterproto.message_field(8, optional=True)
    sql_view: "SqlViewEDocProto" = betterproto.message_field(9, optional=True)
    liveboard: "PinboardEDocProto" = betterproto.message_field(10, optional=True)
    monitor_alert: list["MonitorAlertEDocProto"] = betterproto.message_field(11, optional=True)
    connection: "ConnectionDoc" = betterproto.message_field(12, optional=True)
    hidden: bool = betterproto.bool_field(13, optional=True)
    cohort: "CohortEDocProto" = betterproto.message_field(14, optional=True)
    action_object: "ActionObjectEDocProto" = betterproto.message_field(15, optional=True)
    role_object: "RoleEDocProto" = betterproto.message_field(16, optional=True)
    group_object: "GroupEdocProto" = betterproto.message_field(17, optional=True)
    user_object: "UserEdocProto" = betterproto.message_field(18, optional=True)
    is_demo_data: bool = betterproto.bool_field(19, optional=True)
    model: "WorksheetEDocProto" = betterproto.message_field(20, optional=True)
    worksheet: "WorksheetEDocProto" = betterproto.message_field(21, optional=True)
    nls_feedback: "FeedbackEDocProto" = betterproto.message_field(22, optional=True)
    belongs_to_all_orgs: bool = betterproto.bool_field(23, optional=True)
    column_security_rules: "ColumnSecurityRuleEDocProto" = betterproto.message_field(24, optional=True)
    nl_instruction: "NlInstructionEdocProto" = betterproto.message_field(25, optional=True)
    column_alias: "ColumnAliasUdfEDocProto" = betterproto.message_field(26, optional=True)


@dataclass(eq=False, repr=False)
class Schema(betterproto.Message):
    tables: list["SchemaSchemaTable"] = betterproto.message_field(1, optional=True)


@dataclass(eq=False, repr=False)
class SchemaInPlaceJoin(betterproto.Message):
    with_: str = betterproto.string_field(1, optional=True)
    referencing_join: str = betterproto.string_field(2, optional=True)
    on: str = betterproto.string_field(3, optional=True)
    type: str = betterproto.string_field(4, optional=True)
    cardinality: str = betterproto.string_field(5, optional=True)


@dataclass(eq=False, repr=False)
class SchemaSchemaTable(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    alias: str = betterproto.string_field(2, optional=True)
    fqn: str = betterproto.string_field(3, optional=True)
    joins: list["SchemaInPlaceJoin"] = betterproto.message_field(4, optional=True)
    obj_id: str = betterproto.string_field(5, optional=True)


@dataclass(eq=False, repr=False)
class WorksheetEDocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    tables: list["Identity"] = betterproto.message_field(3, optional=True)
    joins: list["Join"] = betterproto.message_field(4, optional=True)
    schema: "Schema" = betterproto.message_field(5, optional=True)
    model_tables: list["SchemaSchemaTable"] = betterproto.message_field(6, optional=True)
    table_paths: list["TablePath"] = betterproto.message_field(7, optional=True)
    formulas: list["Formula"] = betterproto.message_field(8, optional=True)
    filters: list["Filter"] = betterproto.message_field(9, optional=True)
    worksheet_columns: list["WorksheetEDocProtoWorksheetColumn"] = betterproto.message_field(10, optional=True)
    columns: list["WorksheetEDocProtoWorksheetColumn"] = betterproto.message_field(11, optional=True)
    properties: "WorksheetEDocProtoQueryProperties" = betterproto.message_field(12, optional=True)
    joins_with: list["RelationEDocProto"] = betterproto.message_field(13, optional=True)
    generation_type: str = betterproto.string_field(14, optional=True)
    lesson_plans: list["LessonPlanEDocProto"] = betterproto.message_field(15, optional=True)
    parameters: list["Parameter"] = betterproto.message_field(16, optional=True)
    action_object_associations: list["ActionObjectAssociationEdocProto"] = betterproto.message_field(17, optional=True)
    use_cases: list["WorksheetEDocProtoUseCase"] = betterproto.message_field(18, optional=True)
    column_groups: list["WorksheetEDocProtoColumnGroup"] = betterproto.message_field(19, optional=True)
    constraints: "QueryConstraints" = betterproto.message_field(20, optional=True)


@dataclass(eq=False, repr=False)
class WorksheetEDocProtoQueryProperties(betterproto.Message):
    is_bypass_rls: bool = betterproto.bool_field(1, optional=True)
    join_progressive: bool = betterproto.bool_field(2, optional=True)
    sage_config: "SageConfigProto" = betterproto.message_field(3, optional=True)
    spotter_config: "SpotterConfigProto" = betterproto.message_field(4, optional=True)


@dataclass(eq=False, repr=False)
class WorksheetEDocProtoWorksheetColumn(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    column_id: str = betterproto.string_field(3, optional=True)
    formula_id: str = betterproto.string_field(4, optional=True)
    properties: "ColumnProperties" = betterproto.message_field(5, optional=True)
    data_panel_column_groups: dict[str, str] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class WorksheetEDocProtoUseCase(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    display_name: str = betterproto.string_field(2, optional=True)
    description: str = betterproto.string_field(3, optional=True)


@dataclass(eq=False, repr=False)
class WorksheetEDocProtoProperty(betterproto.Message):
    status: str = betterproto.string_field(1, optional=True)
    default_sort: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class WorksheetEDocProtoColumnGroupInfo(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    include_ungrouped_columns: bool = betterproto.bool_field(2, optional=True)


@dataclass(eq=False, repr=False)
class WorksheetEDocProtoColumnGroup(betterproto.Message):
    type: str = betterproto.string_field(1, optional=True)
    properties: "WorksheetEDocProtoProperty" = betterproto.message_field(2, optional=True)
    column_group_info: list["WorksheetEDocProtoColumnGroupInfo"] = betterproto.message_field(3, optional=True)


@dataclass(eq=False, repr=False)
class LessonPlanEDocProto(betterproto.Message):
    lesson_id: int = betterproto.int32_field(1, optional=True)
    lesson_plan_string: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class FeedbackEDocProto(betterproto.Message):
    feedback: list["FeedbackEDocProtoFeedback"] = betterproto.message_field(1, optional=True)


@dataclass(eq=False, repr=False)
class FeedbackEDocProtoFormulaInfo(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    expression: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class FeedbackEDocProtoFeedback(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    type: str = betterproto.string_field(2, optional=True)
    access: str = betterproto.string_field(3, optional=True)
    feedback_phrase: str = betterproto.string_field(4, optional=True)
    parent_question: str = betterproto.string_field(5, optional=True)
    search_tokens: str = betterproto.string_field(6, optional=True)
    formula_info: list["FeedbackEDocProtoFormulaInfo"] = betterproto.message_field(7, optional=True)
    rating: str = betterproto.string_field(8, optional=True)
    display_mode: str = betterproto.string_field(9, optional=True)
    chart_type: str = betterproto.string_field(10, optional=True)
    axis_config: list["ChartVisualizationAxisConfig"] = betterproto.message_field(11, optional=True)
    nl_context: str = betterproto.string_field(12, optional=True)


@dataclass(eq=False, repr=False)
class NlInstructionEdocProto(betterproto.Message):
    instructions: list["NlInstructionEdocProtoNlInstruction"] = betterproto.message_field(1, optional=True)


@dataclass(eq=False, repr=False)
class NlInstructionEdocProtoNlInstruction(betterproto.Message):
    instruction: str = betterproto.string_field(1, optional=True)
    scope: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class ViewEDocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    tables: list["Identity"] = betterproto.message_field(3, optional=True)
    joins: list["Join"] = betterproto.message_field(4, optional=True)
    table_paths: list["TablePath"] = betterproto.message_field(5, optional=True)
    formulas: list["Formula"] = betterproto.message_field(6, optional=True)
    search_query: str = betterproto.string_field(7, optional=True)
    view_columns: list["ViewEDocProtoViewColumn"] = betterproto.message_field(8, optional=True)
    joins_with: list["RelationEDocProto"] = betterproto.message_field(9, optional=True)
    parameters: list["Parameter"] = betterproto.message_field(10, optional=True)


@dataclass(eq=False, repr=False)
class ViewEDocProtoViewColumn(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    search_output_column: str = betterproto.string_field(3, optional=True)
    properties: "ColumnProperties" = betterproto.message_field(4, optional=True)


@dataclass(eq=False, repr=False)
class ConnectionDoc(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    type: str = betterproto.string_field(2, optional=True)
    authentication_type: str = betterproto.string_field(3, optional=True)
    properties: list["ConnectionDocProperty"] = betterproto.message_field(4, optional=True)
    table: list["ConnectionDocTableDoc"] = betterproto.message_field(5, optional=True)
    description: str = betterproto.string_field(6, optional=True)
    connection_configurations: list["ConnectionDocConnectionConfigurationDoc"] = betterproto.message_field(
        7, optional=True
    )


@dataclass(eq=False, repr=False)
class ConnectionDocTableDoc(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    id: str = betterproto.string_field(2, optional=True)
    external_table: "ConnectionDocTableDocExternalTableMapping" = betterproto.message_field(3, optional=True)
    column: list["ConnectionDocTableDocColumnDoc"] = betterproto.message_field(4, optional=True)


@dataclass(eq=False, repr=False)
class ConnectionDocTableDocExternalTableMapping(betterproto.Message):
    db_name: str = betterproto.string_field(1, optional=True)
    schema_name: str = betterproto.string_field(2, optional=True)
    table_name: str = betterproto.string_field(3, optional=True)


@dataclass(eq=False, repr=False)
class ConnectionDocTableDocColumnDoc(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    id: str = betterproto.string_field(2, optional=True)
    data_type: str = betterproto.string_field(3, optional=True)
    external_column: str = betterproto.string_field(4, optional=True)


@dataclass(eq=False, repr=False)
class ConnectionDocConnectionConfigurationDoc(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    name: str = betterproto.string_field(2, optional=True)
    authentication_type: str = betterproto.string_field(3, optional=True)
    properties: list["KeyValueStr"] = betterproto.message_field(4, optional=True)
    query_triggers: list["QueryTriggerE"] = betterproto.enum_field(5, optional=True)
    user_group_ids: list[str] = betterproto.string_field(6, optional=True)
    policy_type: str = betterproto.string_field(7, optional=True)
    disabled: bool = betterproto.bool_field(8, optional=True)
    description: str = betterproto.string_field(9, optional=True)


@dataclass(eq=False, repr=False)
class ConnectionDocProperty(betterproto.Message):
    key: str = betterproto.string_field(1, optional=True)
    value: str = betterproto.string_field(2, optional=True)
    templated_fields: "ConnectionDocPropertyTemplatedFields" = betterproto.message_field(3, optional=True)


@dataclass(eq=False, repr=False)
class ConnectionDocPropertyTemplatedFields(betterproto.Message):
    value: str = betterproto.string_field(1, optional=True)


@dataclass(eq=False, repr=False)
class ConditionalFormattingProto(betterproto.Message):
    rule: list["ConditionalFormattingProtoRule"] = betterproto.message_field(1, optional=True)


@dataclass(eq=False, repr=False)
class ConditionalFormattingProtoRange(betterproto.Message):
    min: float = betterproto.double_field(1, optional=True)
    max: float = betterproto.double_field(2, optional=True)


@dataclass(eq=False, repr=False)
class ConditionalFormattingProtoRule(betterproto.Message):
    range: "ConditionalFormattingProtoRange" = betterproto.message_field(1, optional=True)
    color: str = betterproto.string_field(2, optional=True)
    plotAsBand: bool = betterproto.bool_field(5, optional=True)


@dataclass(eq=False, repr=False)
class TableVisualization(betterproto.Message):
    table_columns: list["TableVisualizationTableColumn"] = betterproto.message_field(1, optional=True)
    ordered_column_ids: list[str] = betterproto.string_field(2, optional=True)
    show_grid_summary: bool = betterproto.bool_field(3, optional=True)
    show_table_footer: bool = betterproto.bool_field(4, optional=True)
    wrap_table_header: bool = betterproto.bool_field(5, optional=True)
    client_state: str = betterproto.string_field(6, optional=True)
    client_state_v2: str = betterproto.string_field(7, optional=True)


@dataclass(eq=False, repr=False)
class TableVisualizationTableColumn(betterproto.Message):
    column_id: str = betterproto.string_field(1, optional=True)
    conditional_formatting: "ConditionalFormattingProto" = betterproto.message_field(2, optional=True)
    wrap_column_text: bool = betterproto.bool_field(4, optional=True)
    column_width: int = betterproto.int32_field(5, optional=True)
    show_headline: bool = betterproto.bool_field(6, optional=True)
    headline_aggregation: str = betterproto.string_field(7, optional=True)
    headline_client_state: str = betterproto.string_field(8, optional=True)


@dataclass(eq=False, repr=False)
class ChartVisualization(betterproto.Message):
    type: str = betterproto.string_field(1, optional=True)
    chart_columns: list["ChartVisualizationChartColumn"] = betterproto.message_field(2, optional=True)
    axis_configs: list["ChartVisualizationAxisConfig"] = betterproto.message_field(3, optional=True)
    locked: bool = betterproto.bool_field(4, optional=True)
    client_state: str = betterproto.string_field(5, optional=True)
    client_state_v2: str = betterproto.string_field(6, optional=True)
    custom_chart_config: list["ChartVizConfigCustomChartConfig"] = betterproto.message_field(7, optional=True)
    custom_chart_name: str = betterproto.string_field(8, optional=True)
    custom_visual_props: str = betterproto.string_field(9, optional=True)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("locked"):
            warnings.warn("ChartVisualization.locked is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class ChartVisualizationChartColumn(betterproto.Message):
    column_id: str = betterproto.string_field(1, optional=True)
    conditional_formatting: "ConditionalFormattingProto" = betterproto.message_field(2, optional=True)
    show_data_labels: bool = betterproto.bool_field(3, optional=True)
    type: "ChartVizProtoChartSpecificColumnType" = betterproto.enum_field(4, optional=True)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("show_data_labels"):
            warnings.warn("ChartVisualizationChartColumn.show_data_labels is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class ChartVisualizationAxisConfig(betterproto.Message):
    x: list[str] = betterproto.string_field(1, optional=True)
    y: list[str] = betterproto.string_field(2, optional=True)
    color: list[str] = betterproto.string_field(3, optional=True)
    size: str = betterproto.string_field(4, optional=True)
    hidden: list[str] = betterproto.string_field(5, optional=True)
    category: list[str] = betterproto.string_field(6, optional=True)
    sort: list[str] = betterproto.string_field(7, optional=True)
    measure_values: list[str] = betterproto.string_field(8, optional=True)


@dataclass(eq=False, repr=False)
class AnswerEDocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    tables: list["Identity"] = betterproto.message_field(3, optional=True)
    joins: list["Join"] = betterproto.message_field(4, optional=True)
    table_paths: list["TablePath"] = betterproto.message_field(5, optional=True)
    formulas: list["Formula"] = betterproto.message_field(6, optional=True)
    search_query: str = betterproto.string_field(7, optional=True)
    answer_columns: list["AnswerEDocProtoAnswerColumn"] = betterproto.message_field(8, optional=True)
    table: "TableVisualization" = betterproto.message_field(9, optional=True)
    chart: "ChartVisualization" = betterproto.message_field(10, optional=True)
    display_mode: str = betterproto.string_field(11, optional=True)
    client_state: str = betterproto.string_field(12, optional=True)
    parameters: list["Parameter"] = betterproto.message_field(13, optional=True)
    parameter_values: dict[str, str] = betterproto.map_field(14, betterproto.TYPE_STRING, betterproto.TYPE_STRING)
    action_object_associations: list["ActionObjectAssociationEdocProto"] = betterproto.message_field(15, optional=True)
    dynamic_name: str = betterproto.string_field(16, optional=True)
    dynamic_description: str = betterproto.string_field(17, optional=True)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("client_state"):
            warnings.warn("AnswerEDocProto.client_state is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class AnswerEDocProtoAnswerColumn(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    name: str = betterproto.string_field(2, optional=True)
    custom_name: str = betterproto.string_field(3, optional=True)
    format: "FormatConfig" = betterproto.message_field(4, optional=True)
    dynamic_title: str = betterproto.string_field(5, optional=True)
    sort_info: "AnswerEDocProtoColumnSortInfo" = betterproto.message_field(6, optional=True)


@dataclass(eq=False, repr=False)
class AnswerEDocProtoColumnSortInfo(betterproto.Message):
    category: "AnswerEDocProtoColumnSortInfoColumnSortCategory" = betterproto.enum_field(1, optional=True)
    custom_order: list[str] = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class CohortEDocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    answer: "AnswerEDocProto" = betterproto.message_field(3, optional=True)
    cohort_config: "CohortEDocProtoCohortConfig" = betterproto.message_field(4, optional=True)
    referenced_cohorts: list[str] = betterproto.string_field(5, optional=True)
    owner: str = betterproto.string_field(6, optional=True)
    worksheet: "Identity" = betterproto.message_field(8, optional=True)
    config: "CohortEDocProtoEDocCohortConfig" = betterproto.message_field(9, optional=True)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("cohort_config"):
            warnings.warn("CohortEDocProto.cohort_config is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class CohortEDocProtoFilterCondition(betterproto.Message):
    operator: "ComparisonOperatorE" = betterproto.enum_field(2, optional=True)
    value: list[str] = betterproto.string_field(3, optional=True)
    column_name: str = betterproto.string_field(4, optional=True)
    filter_value_type: "FilterConditionFilterValueType" = betterproto.enum_field(5, optional=True)
    date_filter_values: list["DateFilterProto"] = betterproto.message_field(6, optional=True)


@dataclass(eq=False, repr=False)
class CohortEDocProtoCohortGroup(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    conditions: list["CohortEDocProtoFilterCondition"] = betterproto.message_field(2, optional=True)
    combine_type: "ConditionCombineTypeE" = betterproto.enum_field(3, optional=True)


@dataclass(eq=False, repr=False)
class CohortEDocProtoCohortBin(betterproto.Message):
    minimum_value: float = betterproto.double_field(1, optional=True)
    maximum_value: float = betterproto.double_field(2, optional=True)
    bin_size: float = betterproto.double_field(3, optional=True)
    binning_column_name: str = betterproto.string_field(5, optional=True)


@dataclass(eq=False, repr=False)
class CohortEDocProtoPassThruFilter(betterproto.Message):
    accept_all: bool = betterproto.bool_field(1, optional=True)
    include_column_ids: list[str] = betterproto.string_field(2, optional=True)
    exclude_column_ids: list[str] = betterproto.string_field(3, optional=True)
    include_column_names: list[str] = betterproto.string_field(4, optional=True)
    exclude_column_names: list[str] = betterproto.string_field(5, optional=True)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("include_column_ids"):
            warnings.warn("CohortEDocProtoPassThruFilter.include_column_ids is deprecated", DeprecationWarning)
        if self.is_set("exclude_column_ids"):
            warnings.warn("CohortEDocProtoPassThruFilter.exclude_column_ids is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class CohortEDocProtoEDocCohortConfig(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    null_output_value: str = betterproto.string_field(3, optional=True)
    combine_non_group_values: bool = betterproto.bool_field(4, optional=True)
    cohort_type: "CohortTypeE" = betterproto.enum_field(5, optional=True)
    anchor_column_id: str = betterproto.string_field(6, optional=True)
    return_column_id: str = betterproto.string_field(7, optional=True)
    groups: list["CohortEDocProtoCohortGroup"] = betterproto.message_field(8, optional=True)
    bins: "CohortEDocProtoCohortBin" = betterproto.message_field(9, optional=True)
    cohort_grouping_type: "CohortGroupingTypeE" = betterproto.enum_field(10, optional=True)
    cohort_answer_guid: str = betterproto.string_field(11, optional=True)
    is_editable: bool = betterproto.bool_field(12, optional=True)
    cohort_guid: str = betterproto.string_field(13, optional=True)
    hide_excluded_query_values: bool = betterproto.bool_field(14, optional=True)
    group_excluded_query_values: str = betterproto.string_field(15, optional=True)
    version: "CohortConfigVersion" = betterproto.enum_field(16, optional=True)
    pass_thru_filter: "CohortEDocProtoPassThruFilter" = betterproto.message_field(17, optional=True)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("cohort_guid"):
            warnings.warn("CohortEDocProtoEDocCohortConfig.cohort_guid is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class CohortEDocProtoCohortConfig(betterproto.Message):
    anchor_column: list["AnswerEDocProtoAnswerColumn"] = betterproto.message_field(1, optional=True)
    return_column: "AnswerEDocProtoAnswerColumn" = betterproto.message_field(2, optional=True)
    null_output_value: str = betterproto.string_field(3, optional=True)
    combine_non_group_values: bool = betterproto.bool_field(4, optional=True)
    cohort_type: "CohortTypeE" = betterproto.enum_field(5, optional=True)
    cohort_grouping_type: "CohortGroupingTypeE" = betterproto.enum_field(6, optional=True)
    groups: list["CohortGroup"] = betterproto.message_field(7, optional=True)
    bins: "CohortBin" = betterproto.message_field(8, optional=True)
    base_column: str = betterproto.string_field(9, optional=True)
    worksheet: "Identity" = betterproto.message_field(10, optional=True)


@dataclass(eq=False, repr=False)
class NoteTileEDocProto(betterproto.Message):
    html_parsed_string: str = betterproto.string_field(1, optional=True)


@dataclass(eq=False, repr=False)
class UrlActionDetails(betterproto.Message):
    url: str = betterproto.string_field(1, optional=True)
    reference: str = betterproto.string_field(2, optional=True)
    authentication: "UrlActionDetailsAuthentication" = betterproto.message_field(3, optional=True)
    url_query_params: list["UrlActionDetailsUrlQueryParam"] = betterproto.message_field(4, optional=True)


@dataclass(eq=False, repr=False)
class UrlActionDetailsBasic(betterproto.Message):
    username: str = betterproto.string_field(1, optional=True)
    password: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class UrlActionDetailsBearerToken(betterproto.Message):
    token: str = betterproto.string_field(1, optional=True)


@dataclass(eq=False, repr=False)
class UrlActionDetailsApiKey(betterproto.Message):
    key: str = betterproto.string_field(1, optional=True)
    value: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class UrlActionDetailsAuthentication(betterproto.Message):
    type: "UrlActionDetailsAuthenticationTypeE" = betterproto.enum_field(1, optional=True)
    basic: "UrlActionDetailsBasic" = betterproto.message_field(2, optional=True)
    bearer_token: "UrlActionDetailsBearerToken" = betterproto.message_field(3, optional=True)
    api_key: "UrlActionDetailsApiKey" = betterproto.message_field(4, optional=True)


@dataclass(eq=False, repr=False)
class UrlActionDetailsUrlQueryParam(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    key: str = betterproto.string_field(2, optional=True)
    value: str = betterproto.string_field(3, optional=True)


@dataclass(eq=False, repr=False)
class CallbackActionDetails(betterproto.Message):
    reference: str = betterproto.string_field(1, optional=True)


@dataclass(eq=False, repr=False)
class ActionObjectEDocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    type: "ActionTypeE" = betterproto.enum_field(2, optional=True)
    callback_action_details: "CallbackActionDetails" = betterproto.message_field(3, group="details", optional=True)
    url_action_details: "UrlActionDetails" = betterproto.message_field(4, group="details", optional=True)
    availability: "AvailabilityContentTypeE" = betterproto.enum_field(5, optional=True)
    application: "ActionObjectApplicationTypeE" = betterproto.enum_field(6, optional=True)
    user_groups: list[str] = betterproto.string_field(7, optional=True)


@dataclass(eq=False, repr=False)
class ActionObjectAssociationEdocProto(betterproto.Message):
    action_id: str = betterproto.string_field(1, optional=True)
    action_name: str = betterproto.string_field(2, optional=True)
    context: "ActionContextE" = betterproto.enum_field(3, optional=True)
    enabled: bool = betterproto.bool_field(4, optional=True)


@dataclass(eq=False, repr=False)
class PinnedVisualization(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    answer: "AnswerEDocProto" = betterproto.message_field(2, optional=True)
    display_headline_column: str = betterproto.string_field(3, optional=True)
    generic_viz_sub_type: str = betterproto.string_field(4, optional=True)
    viz_guid: str = betterproto.string_field(5, optional=True)
    note_tile: "NoteTileEDocProto" = betterproto.message_field(6, optional=True)
    action_object_associations: list["ActionObjectAssociationEdocProto"] = betterproto.message_field(7, optional=True)


@dataclass(eq=False, repr=False)
class PinboardLayout(betterproto.Message):
    tabs: list["PinboardLayoutTab"] = betterproto.message_field(1, optional=True)
    tiles: list["PinboardLayoutTile"] = betterproto.message_field(2, optional=True)
    group_layouts: list["PinboardLayoutGroupLayout"] = betterproto.message_field(3, optional=True)


@dataclass(eq=False, repr=False)
class PinboardLayoutTab(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    tiles: list["PinboardLayoutTile"] = betterproto.message_field(3, optional=True)
    id: str = betterproto.string_field(4, optional=True)
    group_layouts: list["PinboardLayoutGroupLayout"] = betterproto.message_field(5, optional=True)


@dataclass(eq=False, repr=False)
class PinboardLayoutTile(betterproto.Message):
    visualization_id: str = betterproto.string_field(1, optional=True)
    size: str = betterproto.string_field(2, optional=True)
    x: int = betterproto.int32_field(3, optional=True)
    y: int = betterproto.int32_field(4, optional=True)
    height: int = betterproto.int32_field(5, optional=True)
    width: int = betterproto.int32_field(6, optional=True)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("size"):
            warnings.warn("PinboardLayoutTile.size is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class PinboardLayoutGroupLayout(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    tiles: list["PinboardLayoutTile"] = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class PinboardParameterOverrideEDoc(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    id: str = betterproto.string_field(2, optional=True)
    excluded_container_id: list[str] = betterproto.string_field(3, optional=True)
    override_value: str = betterproto.string_field(4, optional=True)
    secondary_parameter: list[str] = betterproto.string_field(5, optional=True)
    display_name: str = betterproto.string_field(6, optional=True)


@dataclass(eq=False, repr=False)
class PinboardEDocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    tables: list["Identity"] = betterproto.message_field(3, optional=True)
    visualizations: list["PinnedVisualization"] = betterproto.message_field(4, optional=True)
    groups: list["PinboardGroupEDocProto"] = betterproto.message_field(5, optional=True)
    filters: list["Filter"] = betterproto.message_field(6, optional=True)
    layout: "PinboardLayout" = betterproto.message_field(7, optional=True)
    parameters: list["Parameter"] = betterproto.message_field(8, optional=True)
    parameter_overrides: dict[str, "PinboardParameterOverrideEDoc"] = betterproto.map_field(
        9, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    ordered_chips: list["OrderedChipEDocProto"] = betterproto.message_field(10, optional=True)
    views: list["PersonalisedViewEDocProto"] = betterproto.message_field(11, optional=True)
    style: "LiveboardStyleEDocProto" = betterproto.message_field(12, optional=True)


@dataclass(eq=False, repr=False)
class PinboardGroupEDocProto(betterproto.Message):
    id: str = betterproto.string_field(1, optional=True)
    name: str = betterproto.string_field(2, optional=True)
    description: str = betterproto.string_field(3, optional=True)
    visualizations: list[str] = betterproto.string_field(4, optional=True)
    group_guid: str = betterproto.string_field(5, optional=True)


@dataclass(eq=False, repr=False)
class LiveboardStyleEDocProto(betterproto.Message):
    style_properties: list["LiveboardStyleEDocProtoStyleProperty"] = betterproto.message_field(1, optional=True)
    overrides: list["LiveboardStyleEDocProtoOverrideProto"] = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class LiveboardStyleEDocProtoStyleProperty(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    value: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class LiveboardStyleEDocProtoOverrideProto(betterproto.Message):
    object_id: str = betterproto.string_field(1, optional=True)
    style_properties: list["LiveboardStyleEDocProtoStyleProperty"] = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class OrderedChipEDocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    type: "ChipChipType" = betterproto.enum_field(2, optional=True)


@dataclass(eq=False, repr=False)
class PersonalisedViewEDocProto(betterproto.Message):
    view_guid: str = betterproto.string_field(1, optional=True)
    name: str = betterproto.string_field(2, optional=True)
    view_filters: list["Filter"] = betterproto.message_field(3, optional=True)
    is_public: bool = betterproto.bool_field(4, optional=True)
    view_parameters: list["PinboardParameterOverrideEDoc"] = betterproto.message_field(5, optional=True)


@dataclass(eq=False, repr=False)
class LogicalTableEDocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    db: str = betterproto.string_field(3, optional=True)
    schema: str = betterproto.string_field(4, optional=True)
    db_table: str = betterproto.string_field(5, optional=True)
    connection: "Identity" = betterproto.message_field(6, optional=True)
    columns: list["LogicalTableEDocProtoLogicalColumnEDocProto"] = betterproto.message_field(7, optional=True)
    rls_rules: "LogicalTableEDocProtoRlsRule" = betterproto.message_field(8, optional=True)
    joins_with: list["RelationEDocProto"] = betterproto.message_field(9, optional=True)
    parameters: list["Parameter"] = betterproto.message_field(10, optional=True)
    dataset_id: str = betterproto.string_field(11, optional=True)
    properties: "LogicalTableEDocProtoProperties" = betterproto.message_field(12, optional=True)
    templated_fields: "LogicalTableEDocProtoTemplatedFields" = betterproto.message_field(13, optional=True)


@dataclass(eq=False, repr=False)
class LogicalTableEDocProtoRlsRule(betterproto.Message):
    tables: list["Identity"] = betterproto.message_field(1, optional=True)
    joins: list["Join"] = betterproto.message_field(2, optional=True)
    table_paths: list["TablePath"] = betterproto.message_field(3, optional=True)
    rules: list["LogicalTableEDocProtoRlsRuleRule"] = betterproto.message_field(4, optional=True)
    table: "Identity" = betterproto.message_field(5, optional=True)


@dataclass(eq=False, repr=False)
class LogicalTableEDocProtoRlsRuleRule(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    expr: str = betterproto.string_field(2, optional=True)
    rule_id: str = betterproto.string_field(3, optional=True)


@dataclass(eq=False, repr=False)
class LogicalTableEDocProtoLogicalColumnEDocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    db_column_name: str = betterproto.string_field(3, optional=True)
    properties: "ColumnProperties" = betterproto.message_field(4, optional=True)
    db_column_properties: "LogicalTableEDocProtoDbColumnProperties" = betterproto.message_field(5, optional=True)


@dataclass(eq=False, repr=False)
class LogicalTableEDocProtoDbColumnProperties(betterproto.Message):
    data_type: str = betterproto.string_field(1, optional=True)


@dataclass(eq=False, repr=False)
class LogicalTableEDocProtoProperties(betterproto.Message):
    sage_config: "SageConfigProto" = betterproto.message_field(1, optional=True)
    spotter_config: "SpotterConfigProto" = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class LogicalTableEDocProtoTemplatedFields(betterproto.Message):
    db: str = betterproto.string_field(1, optional=True)
    schema: str = betterproto.string_field(2, optional=True)
    db_table: str = betterproto.string_field(3, optional=True)


@dataclass(eq=False, repr=False)
class ObjectPermissions(betterproto.Message):
    columns: list[str] = betterproto.string_field(1, optional=True)
    access_type: str = betterproto.string_field(2, optional=True)
    users: list[str] = betterproto.string_field(3, optional=True)
    user_groups: list[str] = betterproto.string_field(4, optional=True)


@dataclass(eq=False, repr=False)
class SqlViewEDocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    connection: "Identity" = betterproto.message_field(3, optional=True)
    sql_query: str = betterproto.string_field(4, optional=True)
    sql_view_columns: list["SqlViewEDocProtoSqlViewColumn"] = betterproto.message_field(5, optional=True)
    joins_with: list["RelationEDocProto"] = betterproto.message_field(6, optional=True)


@dataclass(eq=False, repr=False)
class SqlViewEDocProtoSqlViewColumn(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    sql_output_column: str = betterproto.string_field(3, optional=True)
    properties: "ColumnProperties" = betterproto.message_field(4, optional=True)


@dataclass(eq=False, repr=False)
class MonitorAlertEDocProto(betterproto.Message):
    guid: str = betterproto.string_field(1, optional=True)
    name: str = betterproto.string_field(2, optional=True)
    frequency_spec: "FrequencySpec" = betterproto.message_field(3, optional=True)
    creator: "MonitorAlertEDocProtoUser" = betterproto.message_field(4, optional=True)
    condition: "ConditionInfo" = betterproto.message_field(5, optional=True)
    metric_id: "MetricId" = betterproto.message_field(6, optional=True)
    subscribed_user: list["MonitorAlertEDocProtoUser"] = betterproto.message_field(7, optional=True)
    custom_message: str = betterproto.string_field(8, optional=True)
    personalised_view_info: "MonitorAlertEDocProtoPersonalisedViewInfo" = betterproto.message_field(9, optional=True)
    alert_type: "AlertType" = betterproto.enum_field(10, optional=True)
    attribute_info: "AttributeInfo" = betterproto.message_field(11, optional=True)
    subscribed_group: list["MonitorAlertEDocProtoGroup"] = betterproto.message_field(12, optional=True)
    slack_channel_ids: list[str] = betterproto.string_field(13, optional=True)


@dataclass(eq=False, repr=False)
class MonitorAlertEDocProtoUser(betterproto.Message):
    username: str = betterproto.string_field(1, optional=True)
    user_email: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class MonitorAlertEDocProtoGroup(betterproto.Message):
    group_name: str = betterproto.string_field(1, optional=True)


@dataclass(eq=False, repr=False)
class MonitorAlertEDocProtoPersonalisedViewInfo(betterproto.Message):
    tables: list["Identity"] = betterproto.message_field(1, optional=True)
    filters: list["Filter"] = betterproto.message_field(2, optional=True)
    parameter_overrides: list["PinboardParameterOverrideEDoc"] = betterproto.message_field(3, optional=True)


@dataclass(eq=False, repr=False)
class RoleEDocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    privileges: list[str] = betterproto.string_field(3, optional=True)
    org_name: str = betterproto.string_field(4, optional=True)


@dataclass(eq=False, repr=False)
class GroupDependency(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    org_name: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class RoleDependency(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    org_name: str = betterproto.string_field(2, optional=True)


@dataclass(eq=False, repr=False)
class GroupEdocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
    org_name: str = betterproto.string_field(3, optional=True)
    display_name: str = betterproto.string_field(4, optional=True)
    visibility: str = betterproto.string_field(5, optional=True)
    privileges: list[str] = betterproto.string_field(6, optional=True)
    roles: list["RoleDependency"] = betterproto.message_field(7, optional=True)
    groups: list["GroupDependency"] = betterproto.message_field(8, optional=True)


@dataclass(eq=False, repr=False)
class UserEdocProto(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    email: str = betterproto.string_field(2, optional=True)
    display_name: str = betterproto.string_field(3, optional=True)
    visibility: str = betterproto.string_field(4, optional=True)
    description: str = betterproto.string_field(5, optional=True)
    org_names: list[str] = betterproto.string_field(6, optional=True)
    groups: list["GroupDependency"] = betterproto.message_field(7, optional=True)


@dataclass(eq=False, repr=False)
class SpotterConfigProto(betterproto.Message):
    is_spotter_enabled: bool = betterproto.bool_field(1, optional=True)


@dataclass(eq=False, repr=False)
class SageConfigProto(betterproto.Message):
    is_sage_enabled: bool = betterproto.bool_field(1, optional=True)


@dataclass(eq=False, repr=False)
class ColumnSecurityRuleEDocProto(betterproto.Message):
    table: "Identity" = betterproto.message_field(1, optional=True)
    rules: list["ColumnSecurityRuleEDocProtoColumnRule"] = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class ColumnSecurityRuleEDocProtoColumnRule(betterproto.Message):
    column_name: str = betterproto.string_field(1, optional=True)
    accessible_groups: "ColumnSecurityRuleEDocProtoColumnRuleAccessibleGroups" = betterproto.message_field(
        2, optional=True
    )


@dataclass(eq=False, repr=False)
class ColumnSecurityRuleEDocProtoColumnRuleAccessibleGroups(betterproto.Message):
    group_name: list[str] = betterproto.string_field(1, optional=True)


@dataclass(eq=False, repr=False)
class ColumnAliasUdfEDocProto(betterproto.Message):
    model: "Identity" = betterproto.message_field(1, optional=True)
    columns: list["ColumnAliasUdfEDocProtoColumn"] = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class ColumnAliasUdfEDocProtoColumn(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    locales: list["ColumnAliasUdfEDocProtoLocale"] = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class ColumnAliasUdfEDocProtoLocale(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    orgs: list["ColumnAliasUdfEDocProtoOrg"] = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class ColumnAliasUdfEDocProtoOrg(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    groups: list["ColumnAliasUdfEDocProtoGroup"] = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class ColumnAliasUdfEDocProtoGroup(betterproto.Message):
    name: str = betterproto.string_field(1, optional=True)
    entries: list["ColumnAliasUdfEDocProtoEntry"] = betterproto.message_field(2, optional=True)


@dataclass(eq=False, repr=False)
class ColumnAliasUdfEDocProtoEntry(betterproto.Message):
    alias: str = betterproto.string_field(1, optional=True)
    description: str = betterproto.string_field(2, optional=True)
