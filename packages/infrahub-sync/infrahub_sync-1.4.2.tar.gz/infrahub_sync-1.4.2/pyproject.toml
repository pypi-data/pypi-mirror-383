[tool.poetry]
name = "infrahub-sync"
version = "1.4.2"
description = "Infrahub-Sync is a versatile Python package that synchronizes data between a source and a destination system"
authors = ["OpsMill <info@opsmill.com>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://opsmill.com"
repository = "https://github.com/opsmill/infrahub"
documentation = "https://docs.infrahub.app/integrations/sync/"
packages = [{ include = "infrahub_sync" }]
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = ">=3.9, < 3.13"
infrahub-sdk = {version = "^1", extras = ["all"]}
structlog = ">=22.3,<26.0"
diffsync = { version = ">=1.10,<2.0 || >=2.0", extras = ["redis"] }
netutils = ">=1.9"
tqdm = ">=4.66"

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-clarity = "^1.0.1"
pytest-cov = ">=4,<7"
pytest-httpx = "*"
yamllint = "^1.35.1"
pylint = "*"
mypy = "*"
ipython = "*"
pytest-asyncio = "*"
requests = "*"
pre-commit = ">=2.20,<5.0"
types-toml = "*"
types-ujson = "*"
types-pyyaml = "*"
typer-cli = "*"
ruff = ">=0.8,<0.10"
invoke = "^2.2.0"
pytest-xdist = "^3.3.1"
types-python-slugify = ">=8.0.0.3"

[tool.poetry.scripts]
infrahub-sync = "infrahub_sync.cli:app"

[tool.pylint.general]
extension-pkg-whitelist = [
    "pydantic",
    "ujson",
]

[tool.pylint.format]
disable = "logging-fstring-interpolation"

[tool.pylint.basic]
# No docstrings required for private methods (Pylint default), or for test_ functions.
no-docstring-rgx="^(_|test_)"

[tool.pylint.messages_control]
# Line length is enforced by Black, so pylint doesn't need to check it.
# Pylint and Black disagree about how to format multi-line arrays; Black wins.
# assigning-non-slot,no-member,unsupported-membership-test,unsubscriptable-object,unsupported-assignment-operation,not-an-iterable
# are disabled because of our move to pydantic 2, pylint does not seem to respect the type hint for pydantic 2 model fields.
disable = """,
    line-too-long,
    missing-module-docstring,
    missing-function-docstring,
    missing-class-docstring,
    consider-using-from-import,
    invalid-name,
    too-many-arguments,
    too-many-locals,
    keyword-arg-before-vararg,
    too-few-public-methods,
    too-many-instance-attributes,
    fixme,
    consider-using-f-string,
    protected-access,
    import-self,
    wrong-import-order,
    assigning-non-slot,
    no-member,
    unsupported-membership-test,
    unsubscriptable-object,
    unsupported-assignment-operation,
    not-an-iterable,
    multiple-statements,
    """

[tool.pylint.miscellaneous]
notes = """,
    FIXME,
    XXX,
    """

[tool.pylint.similarities]
min-similarity-lines = 20

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = [
    "tests"
]
filterwarnings = [
    "ignore:Module already imported so cannot be rewritten",
    "ignore:the imp module is deprecated",
    "ignore:Deprecated call to",
]
addopts = "-vs --cov-report term-missing --cov-report xml --dist loadscope"

[tool.mypy]
pretty = true
ignore_missing_imports = true
disallow_untyped_defs = true
disable_error_code = ["type-abstract"]

[tool.ruff]
line-length = 120

exclude = [
    ".git",
    ".tox",
    ".venv",
    "env",
    "_build",
    "build",
    "dist",
    "examples",
]


[tool.ruff.lint]
preview = true

select = ["ALL"]

ignore = [
    "D",        # pydocstyle
    "DOC",      # pydoclint
    "CPY",      # flake8-copyright
    "T201",     # use of `print`
    "ISC",      # flake8-implicit-str-concat
    "COM812",   # missing-trailing-comma
]

#https://docs.astral.sh/ruff/formatter/black/
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["infrahub"]

[tool.ruff.lint.pycodestyle]
max-line-length = 150

[tool.ruff.lint.mccabe]
# Target max-complexity=10
max-complexity = 33

[tool.ruff.lint.per-file-ignores]

"examples/**.py" = [
    "FIX002",    # Line contains TODO, consider resolving the issue
    "PLR0904",  # Too many public methods
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments in function definition
    "PLR0914",  # Too many local variables
    "PLR0915",  # Too many statements
    "PLR0916",  # Too many Boolean expressions
    "PLR0917",  # Too many positional arguments
    "PLR1702",  # Too many nested blocks
    "TC003",  # Move standard library import `collections.abc.Mapping` into a type-checking block
    "TD002",    # Missing author in TODO
    "TD003",    # Missing issue link on the line following this TODO
    "RUF012", # Mutable class attributes should be annotated

]

"infrahub_sync/**.py" = [
    ##################################################################################################
    # Review and change the below later                                                              #
    ##################################################################################################
    "ANN001", # Missing type annotation for function argument
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN204", # Missing return type annotation for special method
    "ANN205", # Missing return type annotation for staticmethod
    "ANN206", # Missing return type annotation for classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "ASYNC230", # Async functions should not open files with blocking methods like `open`
    "ASYNC251", # Async functions should not call `time.sleep`
    "B007",     # Loop control variable not used within loop body
    "B008",     # Do not perform function call `Depends` in argument defaults;
    "B009",     # [*] Do not call `getattr` with a constant attribute value. It is not any safer than normal property access.
    "B010",     # [*] Do not call `setattr` with a constant attribute value. It is not any safer than normal property access.
    "B904",     # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "C403",     # Unnecessary `list` comprehension (rewrite as a `set` comprehension)
    "C409",     # Unnecessary `list` literal passed to `tuple()` (rewrite as a `tuple` literal)
    "C414",     # Unnecessary `list` call within `sorted()`
    "FBT001",   # Boolean-typed positional argument in function definition
    "FBT002",   # Boolean default positional argument in function definition
    "FIX002",    # Line contains TODO, consider resolving the issue
    "N801",     # Class name should use CapWords convention
    "N802",     # Function name should be lowercase
    "N805",     # First argument of a method should be named self
    "N806",     # Variable in function should be lowercase
    "N812",     # Lowercase imported as non-lowercase
    "PERF203",  # `try`-`except` within a loop incurs performance overhead
    "PERF401",  # Use a list comprehension to create a transformed list
    "PERF402",  # Use `list` or `list.copy` to create a copy of a list
    "PERF403",  # Use a dictionary comprehension instead of a for-loop
    "PLC0415",  # `import` should be at the top-level of a file
    "PLC2701",  # Private name import from external module
    "PLR0904",  # Too many public methods
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments in function definition
    "PLR0914",  # Too many local variables
    "PLR0915",  # Too many statements
    "PLR0916",  # Too many Boolean expressions
    "PLR0917",  # Too many positional arguments
    "PLR1702",  # Too many nested blocks
    "PLR2004",  # Magic value used in comparison this could possibly be fine in the tests folders
    "PLR6201",  # Use a `set` literal when testing for membership
    "PLR6301",  # Method could be a function, class method, or static method
    "PLW0603",  # Using the global statement to update `SETTINGS` is discouraged
    "PLW1508",  # Invalid type for environment variable default; expected `str` or `None`
    "PLW3201",  # Bad or misspelled dunder method name `__init_subclass_with_meta__`
    "PTH100",   # `os.path.abspath()` should be replaced by `Path.resolve()`
    "PTH102",   # `os.mkdir()` should be replaced by `Path.mkdir()`
    "PTH103",   # `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    "PTH107",   # `os.remove()` should be replaced by `Path.unlink()`
    "PTH108",   # `os.unlink()` should be replaced by `Path.unlink()`
    "PTH109",   # `os.getcwd()` should be replaced by `Path.cwd()`
    "PTH110",   # `os.path.exists()` should be replaced by `Path.exists()`
    "PTH112",   # `os.path.isdir()` should be replaced by `Path.is_dir()`
    "PTH113",   # `os.path.isfile()` should be replaced by `Path.is_file()`
    "PTH117",   # `os.path.isabs()` should be replaced by `Path.is_absolute()`
    "PTH118",   # `os.path.join()` should be replaced by `Path` with `/` operator
    "RET503",   # Missing explicit `return` at the end of function able to return non-`None` value
    "RET504",   # Unnecessary assignment before `return` statement
    "S101",     # Use of `assert` detected
    "S105",     # Possible hardcoded password assigned to: "REGEX_PASSWORD"
    "S108",     # Probable insecure usage of temporary file or directory
    "S202",     # Uses of `tarfile.extractall()`
    "S311",     # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S701",     # By default, jinja2 sets `autoescape` to `False`. Consider using `autoescape=True`
    "SLF001",   # Private member accessed
    "TD002",    # Missing author in TODO
    "TD003",    # Missing issue link on the line following this TODO
    "UP007",    # Use X | Y for type annotations
    "UP012",    # Unnecessary call to encode as UTF-8
    "UP018",    # Unnecessary {literal_type} call (rewrite as a literal)
    "UP031",    # Use format specifiers instead of percent format
    "UP034",    # Avoid extraneous parentheses
]

"infrahub_sync/adapters/**.py" = [
    "INP001", # Is part of an implicit namespace package
    ##################################################################################################
    # Review and change the below later                                                              #
    ##################################################################################################
    "C416", # Unnecessary `list` comprehension
]

"tests/**.py" = [
    "PGH003", # Use specific rule codes when ignoring type issues
]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
