---
format: html
html-table-processing: none
---

# Test cases for schema step report

```{python}
import polars as pl

tbl = pl.DataFrame(
    {
        "a": ["apple", "banana", "cherry", "date"],
        "b": [1, 6, 3, 5],
        "c": [1.1, 2.2, 3.3, 4.4],
    }
)
```

1. Schema matches completely and in order; dtypes all correct.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "String"),
        ("b", "Int64"),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_01 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

1-1. Use `complete=False` / `in_order=True`

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "String"),
        ("b", "Int64"),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=False,  # non-default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_01_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

1-2. Use `complete=True` / `in_order=False`

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "String"),
        ("b", "Int64"),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=False,  # non-default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_01_2 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

1-3. Use `complete=False` / `in_order=False`

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "String"),
        ("b", "Int64"),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=False,  # non-default
        in_order=False,  # non-default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_01_3 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

2. Schema matches completely; option taken to match any of two different dtypes for column "a", but
all dtypes correct.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", ["String", "Int64"]),
        ("b", "Int64"),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_02 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

2-1. Use `complete=False` / `in_order=True`

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", ["String", "Int64"]),
        ("b", "Int64"),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=False,  # non-default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_02_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```


2-2. Use `complete=True` / `in_order=False`

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", ["String", "Int64"]),
        ("b", "Int64"),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=False,  # non-default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_02_2 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

2-3. Use `complete=False` / `in_order=False`

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", ["String", "Int64"]),
        ("b", "Int64"),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=False,  # non-default
        in_order=False,  # non-default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_02_3 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

3. Schema has all three columns accounted for but in an incorrect order; dtypes correct.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("b", "Int64"),
        ("a", "String"),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_03 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

3-1. Use `complete=False` / `in_order=True`

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("b", "Int64"),
        ("a", "String"),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=False,  # non-default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_03_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

3-2. Use `complete=True` / `in_order=False`

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("b", "Int64"),
        ("a", "String"),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=False,  # non-default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_03_2 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

3-3. Use `complete=False` / `in_order=False`

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("b", "Int64"),
        ("a", "String"),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=False,  # default
        in_order=False,  # non-default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_03_3 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```


4. Schema has all three columns accounted for but in an incorrect order; option taken to match any
of two different dtypes for column "a", but all dtypes correct.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("b", "Int64"),
        ("a", ["Int64", "String"]),
        ("c", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_04 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

5. Schema has all three columns matching, correct order; no dtypes provided.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a",),
        ("b",),
        ("c",),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_05 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

6. Schema has all three columns matching, correct order; incorrect dtypes.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", ["invalid", "invalid"]),
        ("b", "invalid"),
        ("c", "invalid"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_06 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

7. Schema has 2/3 columns matching, correct order; incorrect dtypes.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", ["invalid", "invalid"]),
        ("c", "invalid"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_07 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

8. Schema has 2/3 columns matching, incorrect order; incorrect dtypes.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("c", "invalid"),
        ("a", ["invalid", "invalid"]),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_08 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

9. Schema has single column match; incorrect dtype.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("c", "invalid"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_09 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

10. Schema is empty.

```{python}
import pointblank as pb

schema = pb.Schema(columns=[])

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_10 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

11. Schema has complete match of columns plus an additional, unmatched column.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", ["String", "Int64"]),
        ("b", "Int64"),
        ("c", "Float64"),
        ("d", "String"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_11 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

12. Schema has partial match of columns (in right order) plus an additional, unmatched column.

```{python}
import pointblank as pb

schema = pb.Schema(columns=[
    ("a", ["String", "Int64"]),
    ("c", "Float64"),
    ("d", "String"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_12 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

13. Schema has no matches to any column names.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("x", "String"),
        ("y", "Int64"),
        ("z", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_13 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

14. Schema has all columns matching in case-insensitive manner, correct order; dtypes all correct.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("A", "String"),
        ("B", "Int64"),
        ("C", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_14 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

14-1. Using `case_sensitive_colnames=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("A", "String"),
        ("B", "Int64"),
        ("C", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=False,  # non-default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_14_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

15. Schema has all columns matching in case-insensitive manner, correct order; dtypes all correct.

```{python}
import pointblank as pb

schema = pb.Schema(
     columns=[
         ("B", "Int64"),
         ("A", "String"),
         ("C", "Float64"),
     ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_15 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

15-1. Using `case_sensitive_colnames=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("B", "Int64"),
        ("A", "String"),
        ("C", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=False,  # non-default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_15_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

16. Schema has 2/3 columns matching in case-insensitive manner, correct order; dtypes all correct.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("A", "String"),
        ("C", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_16 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

16-1. Using `case_sensitive_colnames=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("A", "String"),
        ("C", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=False,  # non-default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_16_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

17. Schema has 2/3 columns matching in case-insensitive manner, incorrect order; dtypes all correct.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("C", "Float64"),
        ("A", "String"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_17 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

17-1. Using `case_sensitive_colnames=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("C", "Float64"),
        ("A", "String"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=False,  # non-default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_17_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

18. Schema has one column matching in case-insensitive manner; dtype is correct.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("C", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_18 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

18-1. Using `case_sensitive_colnames=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("C", "Float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=False,  # non-default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_18_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

19. Schema has all three columns matching, correct order; dtypes don't match case of actual dtypes.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "string"),
        ("b", "int64"),
        ("c", "float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_19 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

19-1. Using `case_sensitive_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "string"),
        ("b", "int64"),
        ("c", "float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=False,  # non-default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_19_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

20. Schema has all three columns matching, correct order; dtypes are substrings of actual dtypes.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "Str"),
        ("b", "Int"),
        ("c", "Float"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_20 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

20-1. Using `full_match_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "Str"),
        ("b", "Int"),
        ("c", "Float"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=False,  # non-default
    )
    .interrogate()
)

df_20_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

21. Schema has all three columns matching, correct order; dtypes are substrings of actual dtypes
where case doesn't match.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "str"),
        ("b", "int"),
        ("c", "float"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_21 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

21-1. Using `case_sensitive_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "str"),
        ("b", "int"),
        ("c", "float"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=False,  # non-default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_21_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

21-2. Using `full_match_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "str"),
        ("b", "int"),
        ("c", "float"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=False,  # non-default
    )
    .interrogate()
)

df_21_2 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

21-3. Using `case_sensitive_dtypes=False` and `full_match_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "str"),
        ("b", "int"),
        ("c", "float"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=False,  # non-default
        full_match_dtypes=False,  # non-default
    )
    .interrogate()
)

df_21_3 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

22. Schema has all 2/3 columns matching, missing one, correct order; dtypes don't match case of
actual dtypes.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "string"),
        ("c", "float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_22 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

22-1. Using `case_sensitive_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "string"),
        ("c", "float64"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=False,  # non-default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_22_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

23. Schema has all 2/3 columns matching, missing one, correct order; dtypes are substrings of actual
dtypes.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "Str"),
        ("c", "Float"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_23 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

23-1. Using `full_match_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "Str"),
        ("c", "Float"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=False,  # non-default
    )
    .interrogate()
)

df_23_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

24. Schema has all 2/3 columns matching, missing one, correct order; dtypes are substrings of actual
dtypes where case doesn't match.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "str"),
        ("c", "float"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_24 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

24-1. Using `case_sensitive_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "str"),
        ("c", "float"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=False,  # non-default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_24_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

24-2. Using `full_match_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "str"),
        ("c", "float"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=False,  # non-default
    )
    .interrogate()
)

df_24_2 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

24-3. Using `case_sensitive_dtypes=False` and `full_match_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("a", "str"),
        ("c", "float"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=False,  # non-default
        full_match_dtypes=False,  # non-default
    )
    .interrogate()
)

df_24_3 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

25. Schema has all 2/3 columns matching, missing one, an unmatched column, correct order for the
matching set; dtypes are substrings of actual dtypes where case doesn't match.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("A", "str"),
        ("C", "float"),
        ("X", "int"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_25 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

25-1. Using `case_sensitive_colnames=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("A", "str"),
        ("C", "float"),
        ("X", "int"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=False,  # non-default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_25_1 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

25-2. Using `case_sensitive_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("A", "str"),
        ("C", "float"),
        ("X", "int"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=False,  # non-default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_25_2 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

25-3. Using `full_match_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("A", "str"),
        ("C", "float"),
        ("X", "int"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=True,  # default
        case_sensitive_dtypes=True,  # default
        full_match_dtypes=False,  # non-default
    )
    .interrogate()
)

df_25_3 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

25-4. Using `case_sensitive_colnames=False` and `case_sensitive_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("A", "str"),
        ("C", "float"),
        ("X", "int"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=False,  # non-default
        case_sensitive_dtypes=False,  # non-default
        full_match_dtypes=True,  # default
    )
    .interrogate()
)

df_25_4 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

25-5. Using `case_sensitive_colnames=False`, `case_sensitive_dtypes=False`, and
`full_match_dtypes=False`.

```{python}
import pointblank as pb

schema = pb.Schema(
    columns=[
        ("A", "str"),
        ("C", "float"),
        ("X", "int"),
    ]
)

validation = (
    pb.Validate(data=tbl)
    .col_schema_match(
        schema=schema,
        complete=True,  # default
        in_order=True,  # default
        case_sensitive_colnames=False,  # non-default
        case_sensitive_dtypes=False,  # non-default
        full_match_dtypes=False,  # non-default
    )
    .interrogate()
)

df_25_5 = validation.get_step_report(i=-99)
validation.get_step_report(i=1)
```

