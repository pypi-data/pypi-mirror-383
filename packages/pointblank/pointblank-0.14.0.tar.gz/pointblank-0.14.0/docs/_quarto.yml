project:
  type: website
  post-render: scripts/post-render.py
  resources:
    - "assets/**"

format:
  html:
    include-in-header:
      - text: |
          <script src="https://cdn.jsdelivr.net/gh/posit-dev/supported-by-posit/js/badge.min.js"></script>
    theme: flatly
    css:
      - styles.css
      - reference/_styles-quartodoc.css
    toc: true
    grid:
      sidebar-width: 270px
      body-width: 950px
      margin-width: 225px
      gutter-width: 1rem

filters:
  - interlinks

interlinks:
  fast: true
  autolink: true
  aliases:
    pointblank: [null, pb]
  sources:
    numpy:
      url: https://numpy.org/doc/stable/
    python:
      url: https://docs.python.org/3/

website:
  title: Pointblank
  google-analytics: "G-XSFKYZM9GW"
  search:
    show-item-context: true
  page-navigation: true
  bread-crumbs: false
  favicon: assets/fav-logo.png
  site-url: https://posit-dev.github.io/pointblank/
  description: "Find out if your data is what you think it is"
  navbar:
    left:
      - text: User Guide
        file: user-guide/index.qmd
      - text: Examples
        file: demos/index.qmd
      - href: reference/index.qmd
        text: API Reference
      - href: blog/index.qmd
        text: Pointblog
    right:
      - icon: discord
        href: https://discord.com/invite/YH7CybCNCQ
      - icon: github
        href: https://github.com/posit-dev/pointblank
  sidebar:
      id: user-guide
      contents:
        - section: "Getting Started"
          contents:
            - user-guide/index.qmd
            - user-guide/installation.qmd
        - section: "Validation Plan"
          contents:
            - user-guide/validation-overview.qmd
            - user-guide/validation-methods.qmd
            - user-guide/column-selection-patterns.qmd
            - user-guide/preprocessing.qmd
            - user-guide/segmentation.qmd
            - user-guide/thresholds.qmd
            - user-guide/actions.qmd
            - user-guide/briefs.qmd
        - section: "Advanced Validation"
          contents:
            - user-guide/expressions.qmd
            - user-guide/schema-validation.qmd
            - user-guide/assertions.qmd
            - user-guide/draft-validation.qmd
        - section: "YAML"
          contents:
            - user-guide/yaml-validation-workflows.qmd
            - user-guide/yaml-reference.qmd
        - section: "Post Interrogation"
          contents:
            - user-guide/step-reports.qmd
            - user-guide/extracts.qmd
            - user-guide/sundering.qmd
        - section: "Data Inspection"
          contents:
            - user-guide/preview.qmd
            - user-guide/col-summary-tbl.qmd
            - user-guide/missing-vals-tbl.qmd
        - section: "The Pointblank CLI"
          contents:
            - user-guide/cli-data-inspection.qmd
            - user-guide/cli-data-validation.qmd
            - user-guide/cli-reference.qmd
        - section: "MCP Server"
          contents:
            - user-guide/mcp-quick-start.qmd

  page-footer:
    left: 'Proudly supported by <a href="https://www.posit.co/" class="no-icon"><img src="/assets/posit-logo-black.svg" alt="Posit" width="80" style="padding-left: 3px;vertical-align:text-top;"></a>'
    right: "&copy; 2024&ndash;2025 Posit Software, PBC."

html-table-processing: none

quartodoc:
  package: pointblank
  dir: reference
  title: API Reference
  style: pkgdown
  dynamic: true
  render_interlinks: true
  renderer:
    style: markdown
    table_style: description-list
  sections:
    - title: Validate
      desc: >
        When performing data validation, you'll need the `Validate` class to get the process started.
        It's given the target table and you can optionally provide some metadata and/or failure
        thresholds (using the `Thresholds` class or through shorthands for this task). The
        `Validate` class has numerous methods for defining validation steps and for obtaining
        post-interrogation metrics and data.
      contents:
        - name: Validate
          members: []
        - name: Thresholds
        - name: Actions
          members: []
        - name: FinalActions
        - name: Schema
          members: []
        - name: DraftValidation
          members: []
    - title: Validation Steps
      desc: >
        Validation steps can be thought of as sequential validations on the target data. We call
        `Validate`'s validation methods to build up a validation plan: a collection of steps that,
        in the aggregate, provides good validation coverage.
      contents:
        - name: Validate.col_vals_gt
        - name: Validate.col_vals_lt
        - name: Validate.col_vals_ge
        - name: Validate.col_vals_le
        - name: Validate.col_vals_eq
        - name: Validate.col_vals_ne
        - name: Validate.col_vals_between
        - name: Validate.col_vals_outside
        - name: Validate.col_vals_in_set
        - name: Validate.col_vals_not_in_set
        - name: Validate.col_vals_null
        - name: Validate.col_vals_not_null
        - name: Validate.col_vals_regex
        - name: Validate.col_vals_expr
        - name: Validate.rows_distinct
        - name: Validate.rows_complete
        - name: Validate.col_exists
        - name: Validate.col_schema_match
        - name: Validate.row_count_match
        - name: Validate.col_count_match
        - name: Validate.conjointly
        - name: Validate.specially
        - name: Validate.prompt
    - title: Column Selection
      desc: >
        A flexible way to select columns for validation is to use the `col()` function along with
        column selection helper functions. A combination of `col()` + `starts_with()`, `matches()`,
        etc., allows for the selection of multiple target columns (mapping a validation across many
        steps). Furthermore, the `col()` function can be used to declare a comparison column (e.g.,
        for the `value=` argument in many `col_vals_*()` methods) when you can't use a fixed value
        for comparison.
      contents:
        - name: col
        - name: starts_with
        - name: ends_with
        - name: contains
        - name: matches
        - name: everything
        - name: first_n
        - name: last_n
        - name: expr_col
    - title: Segment Groups
      desc: >
        Combine multiple values into a single segment using `seg_*()` helper functions.
      contents:
        - name: seg_group
    - title: Interrogation and Reporting
      desc: >
        The validation plan is put into action when `interrogate()` is called. The workflow for
        performing a comprehensive validation is then: (1) `Validate()`, (2) adding validation
        steps, (3) `interrogate()`. After interrogation of the data, we can view a validation report
        table (by printing the object or using `get_tabular_report()`), extract key metrics, or we
        can split the data based on the validation results (with `get_sundered_data()`).
      contents:
        - name: Validate.interrogate
        - name: Validate.set_tbl
        - name: Validate.get_tabular_report
        - name: Validate.get_step_report
        - name: Validate.get_json_report
        - name: Validate.get_sundered_data
        - name: Validate.get_data_extracts
        - name: Validate.all_passed
        - name: Validate.assert_passing
        - name: Validate.assert_below_threshold
        - name: Validate.above_threshold
        - name: Validate.n
        - name: Validate.n_passed
        - name: Validate.n_failed
        - name: Validate.f_passed
        - name: Validate.f_failed
        - name: Validate.warning
        - name: Validate.error
        - name: Validate.critical
    - title: Inspection and Assistance
      desc: >
        The *Inspection and Assistance* group contains functions that are helpful for getting to
        grips on a new data table. Use the `DataScan` class to get a quick overview of the data,
        `preview()` to see the first and last few rows of a table, `col_summary_tbl()` for a
        column-level summary of a table, and `missing_vals_tbl()` to see where there are missing
        values in a table. Several datasets included in the package can be accessed via the
        `load_dataset()` function. On the assistance side, the `assistant()` function can be used to
        get help with Pointblank.
      contents:
        - name: DataScan
        - name: preview
        - name: col_summary_tbl
        - name: missing_vals_tbl
        - name: assistant
        - name: load_dataset
        - name: get_data_path
        - name: connect_to_table
    - title: YAML
      desc: >
        The *YAML* group contains functions that allow for the use of YAML to orchestrate validation
        workflows. The `yaml_interrogate()` function can be used to run a validation workflow from
        YAML strings or files. The `validate_yaml()` function checks if the YAML configuration
        passes its own validity checks. The `yaml_to_python()` function converts YAML configuration
        to equivalent Python code.
      contents:
        - name: yaml_interrogate
        - name: validate_yaml
        - name: yaml_to_python
    - title: Utility Functions
      desc: >
        The *Utility Functions* group contains functions that are useful accessing metadata about
        the target data. Use `get_column_count()` or `get_row_count()` to get the number of columns
        or rows in a table. The `get_action_metadata()` function is useful when building custom
        actions since it returns metadata about the validation step that's triggering the action.
        Lastly, the `config()` utility lets us set global configuration parameters.
      contents:
        - name: get_column_count
        - name: get_row_count
        - name: get_action_metadata
        - name: get_validation_summary
        - name: write_file
        - name: read_file
        - name: config
    - title: Prebuilt Actions
      desc: >
        The *Prebuilt Actions* group contains a function that can be used to send a Slack
        notification when validation steps exceed failure threshold levels or just to provide a
        summary of the validation results, including the status, number of steps, passing and
        failing steps, table information, and timing details.
      contents:
        - name: send_slack_notification
