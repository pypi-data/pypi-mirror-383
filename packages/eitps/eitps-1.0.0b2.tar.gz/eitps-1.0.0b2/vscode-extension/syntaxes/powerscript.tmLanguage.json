{
  "_license": "MIT License - Copyright (c) 2025 Saleem Ahmad (Elite India Org Team) <team@eliteindia.org>",
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "PowerScript",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#classes"
    },
    {
      "include": "#types"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.powerscript",
          "match": "\\b(if|else|while|for|do|break|continue|switch|case|default|return|yield|await|async|try|catch|finally|throw|with)\\b"
        },
        {
          "name": "keyword.declaration.powerscript",
          "match": "\\b(class|constructor|function|let|const|var|type|interface|enum|import|export|from|as|default)\\b"
        },
        {
          "name": "keyword.modifier.powerscript",
          "match": "\\b(public|private|protected|static|readonly|abstract)\\b"
        },
        {
          "name": "keyword.operator.powerscript",
          "match": "\\b(new|typeof|instanceof|in|of|extends|implements)\\b"
        },
        {
          "name": "constant.language.powerscript",
          "match": "\\b(true|false|null|undefined|this|super)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.powerscript",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.powerscript",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.powerscript",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.powerscript",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.template.powerscript",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "meta.embedded.line.powerscript",
              "begin": "\\$\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "name": "string.interpolated.powerscript",
          "begin": "f\"",
          "end": "\"",
          "patterns": [
            {
              "name": "meta.embedded.line.powerscript",
              "begin": "\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.powerscript",
          "match": "//.*$"
        },
        {
          "name": "comment.block.powerscript",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.powerscript",
          "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.hex.powerscript",
          "match": "\\b0[xX][a-fA-F0-9]+\\b"
        },
        {
          "name": "constant.numeric.binary.powerscript",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.octal.powerscript",
          "match": "\\b0[oO][0-7]+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.powerscript",
          "match": "(\\+=|-=|\\*=|/=|%=|\\|=|&=|\\^=|<<=|>>=|>>>=|\\?\\?=|\\|\\|=|&&=)"
        },
        {
          "name": "keyword.operator.comparison.powerscript",
          "match": "(===|!==|==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.powerscript",
          "match": "(&&|\\|\\||!|\\?\\?)"
        },
        {
          "name": "keyword.operator.arithmetic.powerscript",
          "match": "(\\+\\+|--|\\+|-|\\*|/|%|\\*\\*)"
        },
        {
          "name": "keyword.operator.bitwise.powerscript",
          "match": "(&|\\||\\^|~|<<|>>|>>>)"
        },
        {
          "name": "keyword.operator.other.powerscript",
          "match": "(=>|\\?|:|\\.|\\.\\.\\.|=)"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.powerscript",
          "match": "\\b(function|async\\s+function)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "storage.type.function.powerscript"
            },
            "2": {
              "name": "entity.name.function.powerscript"
            }
          }
        },
        {
          "name": "meta.constructor.powerscript",
          "match": "\\b(constructor)\\s*\\(",
          "captures": {
            "1": {
              "name": "storage.type.constructor.powerscript"
            }
          }
        },
        {
          "name": "meta.arrow-function.powerscript",
          "match": "([a-zA-Z_$][a-zA-Z0-9_$]*|\\([^)]*\\))\\s*=>",
          "captures": {
            "1": {
              "name": "variable.parameter.powerscript"
            }
          }
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "meta.class.powerscript",
          "match": "\\b(class)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)(?:\\s+(extends)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*))?",
          "captures": {
            "1": {
              "name": "storage.type.class.powerscript"
            },
            "2": {
              "name": "entity.name.type.class.powerscript"
            },
            "3": {
              "name": "storage.modifier.extends.powerscript"
            },
            "4": {
              "name": "entity.other.inherited-class.powerscript"
            }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "meta.type.annotation.powerscript",
          "match": ":\\s*([a-zA-Z_$][a-zA-Z0-9_$]*(?:\\[\\]|<[^>]*>)?(?:\\s*\\|\\s*[a-zA-Z_$][a-zA-Z0-9_$]*(?:\\[\\]|<[^>]*>)?)*)",
          "captures": {
            "1": {
              "name": "entity.name.type.powerscript"
            }
          }
        },
        {
          "name": "storage.type.primitive.powerscript",
          "match": "\\b(string|number|boolean|object|any|void|never|unknown|Hello)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.constant.powerscript",
          "match": "\\b[A-Z][A-Z0-9_]*\\b"
        },
        {
          "name": "variable.other.powerscript",
          "match": "\\b[a-zA-Z_$][a-zA-Z0-9_$]*\\b"
        }
      ]
    }
  },
  "scopeName": "source.powerscript"
}