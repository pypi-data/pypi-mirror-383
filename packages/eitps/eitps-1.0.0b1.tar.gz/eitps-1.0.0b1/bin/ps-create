#!/usr/bin/env python3
"""
MIT License

Copyright (c) 2025 Saleem Ahmad (Elite India Org Team)
Email: team@eliteindia.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

"""
PowerScript Project Creator CLI - ps-create
Creates new PowerScript projects with proper scaffolding
"""

import sys
import os
import argparse
from pathlib import Path

# Add powerscript to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from powerscript.cli.project_creator import ProjectCreator


def main():
    parser = argparse.ArgumentParser(
        description="PowerScript Project Creator - Scaffold new PowerScript projects",
        prog="ps-create"
    )
    
    parser.add_argument(
        "project_name",
        help="Name of the new project"
    )
    
    parser.add_argument(
        "--template",
        choices=["basic", "ai", "web", "api"],
        default="basic",
        help="Project template to use"
    )
    
    parser.add_argument(
        "--dir",
        help="Directory to create project in (default: current directory)"
    )
    
    parser.add_argument(
        "--git",
        action="store_true",
        help="Initialize git repository"
    )
    
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Verbose output"
    )
    
    args = parser.parse_args()
    
    # Determine project directory
    if args.dir:
        project_dir = Path(args.dir) / args.project_name
    else:
        project_dir = Path.cwd() / args.project_name
    
    if project_dir.exists():
        print(f"‚ùå Directory already exists: {project_dir}")
        sys.exit(1)
    
    try:
        creator = ProjectCreator()
        
        print(f"üöÄ Creating PowerScript project: {args.project_name}")
        print(f"üìÅ Location: {project_dir}")
        print(f"üìã Template: {args.template}")
        
        creator.create_project(
            project_name=args.project_name,
            project_dir=str(project_dir),
            template=args.template,
            init_git=args.git,
            verbose=args.verbose
        )
        
        print("\n‚úÖ Project created successfully!")
        print("\nüöÄ Next steps:")
        print(f"   cd {args.project_name}")
        print("   code .  # Open in VS Code")
        print("   powerscriptc src/ -o build/  # Compile")
        print("   python build/main.py  # Run")
        
    except Exception as e:
        print(f"‚ùå Error creating project: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()