#!/usr/bin/env python3
"""
MIT License

Copyright (c) 2025 Saleem Ahmad (Elite India Org Team)
Email: team@eliteindia.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

"""
PowerScript Runner CLI - ps-run
Transpiles and runs PowerScript files on-the-fly
"""

import sys
import os
import argparse
import tempfile
from pathlib import Path

# Add powerscript to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from powerscript.compiler.lexer import Lexer
from powerscript.compiler.parser import Parser
from powerscript.compiler.transpiler import Transpiler


def main():
    parser = argparse.ArgumentParser(
        description="PowerScript Runner - Transpile and execute PowerScript files",
        prog="ps-run"
    )
    
    parser.add_argument(
        "file",
        help="PowerScript file to run"
    )
    
    parser.add_argument(
        "--keep-temp",
        action="store_true",
        help="Keep temporary Python file after execution"
    )
    
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Verbose output"
    )
    
    args = parser.parse_args()
    
    if not os.path.exists(args.file):
        print(f"‚ùå File not found: {args.file}")
        sys.exit(1)
    
    if not args.file.endswith('.ps'):
        print(f"‚ùå File must have .ps extension: {args.file}")
        sys.exit(1)
    
    try:
        # Read PowerScript source
        with open(args.file, 'r') as f:
            source = f.read()
        
        if args.verbose:
            print(f"üìñ Reading {args.file}")
        
        # Transpile to Python
        lexer = Lexer(source, args.file)
        tokens = lexer.tokenize()
        
        if args.verbose:
            print(f"üîç Lexed {len(tokens)} tokens")
        
        parser_instance = Parser(lexer)
        ast = parser_instance.parse()
        
        if args.verbose:
            print(f"üå≥ Parsed {len(ast)} AST nodes")
        
        transpiler = Transpiler()
        python_code = transpiler.transpile_to_code(ast)
        
        if args.verbose:
            print("üîÑ Transpiled to Python")
        
        # Create temporary Python file
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as temp_file:
            temp_file.write(python_code)
            temp_python_file = temp_file.name
        
        if args.verbose:
            print(f"üìù Created temporary file: {temp_python_file}")
        
        # Execute the Python file
        if args.verbose:
            print("üöÄ Executing...")
        
        import subprocess
        result = subprocess.run([sys.executable, temp_python_file], 
                              capture_output=False, 
                              text=True)
        
        # Cleanup
        if not args.keep_temp:
            os.unlink(temp_python_file)
        elif args.verbose:
            print(f"üìÑ Temporary file kept: {temp_python_file}")
        
        sys.exit(result.returncode)
    
    except Exception as e:
        print(f"‚ùå Error: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()