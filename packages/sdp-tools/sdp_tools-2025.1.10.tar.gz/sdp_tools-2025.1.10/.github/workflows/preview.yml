# This is a basic workflow to help you get started with Actions
name: Stage & preview workflow

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master, main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  publish_dev_build:
    runs-on: ubuntu-22.04
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/sdp-tools
    strategy:
      matrix:
        python-versions: ["3.10"]
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for version bumping
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Set up Python ${{ matrix.python-versions }}
        run: uv python install ${{ matrix.python-versions }}
      
      - name: Create virtual environment
        run: uv venv --python ${{ matrix.python-versions }}
      
      - name: Install dependencies
        run: |
          uv pip install -e ".[dev,test]"
          uv pip install toml
      
      - name: Run tests
        run: |
          # Coverage includes surfdrive if it exists (cross-platform Python check)
          uv run python -c "
          import os
          import subprocess
          import sys
          cov_args = ['--cov=minio_file']
          if os.path.exists('src/surfdrive'):
              cov_args.append('--cov=surfdrive')
          cmd = ['uv', 'run', 'pytest', 'tests/', '-v', '-m', 'not slow'] + cov_args + ['--cov-report=term-missing']
          result = subprocess.run(cmd)
          sys.exit(result.returncode)
          "
      
      - name: Create development version
        run: |
          # Use Python to read version from pyproject.toml without importing the package
          CURRENT_VERSION=$(uv run python -c "
          import toml
          with open('pyproject.toml', 'r') as f:
              data = toml.load(f)
              print(data['project']['version'])
          ")
          DEV_VERSION="${CURRENT_VERSION}.dev${GITHUB_RUN_NUMBER}"
          echo "Current version: $CURRENT_VERSION"
          echo "Development version: $DEV_VERSION"
          
          # Update version in __init__.py files using Python
          uv run python -c "
          import re
          import os
          # Update minio_file version
          if os.path.exists('src/minio_file/__init__.py'):
              with open('src/minio_file/__init__.py', 'r') as f:
                  content = f.read()
              content = re.sub(r'__version__ = \".*?\"', '__version__ = \"$DEV_VERSION\"', content)
              with open('src/minio_file/__init__.py', 'w') as f:
                  f.write(content)
              print('Updated minio_file version')
          # Update surfdrive version if it exists
          if os.path.exists('src/surfdrive/__init__.py'):
              with open('src/surfdrive/__init__.py', 'r') as f:
                  content = f.read()
              content = re.sub(r'__version__ = \".*?\"', '__version__ = \"$DEV_VERSION\"', content)
              with open('src/surfdrive/__init__.py', 'w') as f:
                  f.write(content)
              print('Updated surfdrive version')
          print('Updated __init__.py versions')
          "

          # Update version in pyproject.toml using Python
          uv run python -c "
          import toml
          with open('pyproject.toml', 'r') as f:
              data = toml.load(f)
          data['project']['version'] = '$DEV_VERSION'
          with open('pyproject.toml', 'w') as f:
              toml.dump(data, f)
          print('Updated pyproject.toml version')
          "

          echo "Updated to version: $DEV_VERSION"

          # Verify the changes
          echo "Checking updated files:"
          if [ -f src/minio_file/__init__.py ]; then
              grep "__version__" src/minio_file/__init__.py
          fi
          if [ -f src/surfdrive/__init__.py ]; then
              grep "__version__" src/surfdrive/__init__.py
          fi
          grep "version =" pyproject.toml | head -1
      
      - name: Build wheels and source tarball
        run: |
          uv build
      
      - name: Show build artifacts
        run: |
          ls -la dist/
          echo "Built packages:"
          ls dist/
        shell: bash

      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
