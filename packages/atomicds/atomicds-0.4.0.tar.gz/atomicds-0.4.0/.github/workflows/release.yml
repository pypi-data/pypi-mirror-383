name: Publish

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest]  # macos-13 (Intel) can produce universal2

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"   # host Python; cibuildwheel builds for multiple Pythons

      # QEMU only needed for cross-arch Linux wheels
      - name: Set up QEMU (Linux only)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install SSL
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update || true
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev --fix-missing

      # Install Rust toolchain on host (macOS/Windows builds run on host)
      - name: Install Rust toolchain (host)
        if: runner.os != 'Linux'
        uses: dtolnay/rust-toolchain@stable

      - name: Add macOS universal2 targets
        if: runner.os == 'macOS'
        run: |
          rustup target add x86_64-apple-darwin aarch64-apple-darwin

      - name: Upgrade pip & install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.* setuptools setuptools-rust wheel build

      - name: Build wheels with cibuildwheel
        env:
          # Build CPython for version 3.x . Adjust as needed.
          CIBW_BUILD: "cp3{10,11,12}-*"
          # Skip 32-bit, PyPy, and musllinux
          CIBW_SKIP: "pp* *-manylinux_i686 *-musllinux_*"
          # Architectures
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_MACOS: "universal2"
          CIBW_ARCHS_WINDOWS: "AMD64"
          # Ensure Rust is present inside manylinux Docker images
          CIBW_BEFORE_ALL_LINUX: |
            set -euo pipefail
            if command -v dnf >/dev/null 2>&1; then
              dnf -y update || true
              dnf -y install openssl-devel pkgconfig perl make gcc
            else
              yum -y update || true
              yum -y install openssl-devel pkgconfig perl make gcc
            fi

            # Install Rust inside the manylinux container
            curl https://sh.rustup.rs -sSf | sh -s -- -y
          CIBW_ENVIRONMENT_LINUX: 'PATH="$HOME/.cargo/bin:$PATH"'
          CIBW_ENVIRONMENT_MACOS: >
              MACOSX_DEPLOYMENT_TARGET=10.12
          # Make sure setuptools-rust is available in the build env
          CIBW_BEFORE_BUILD: "python -m pip install -U pip setuptools setuptools-rust wheel"
          # (Optional) If extra  system deps, use CIBW_BEFORE_ALL_* hooks per OS.
        run: python -m cibuildwheel --output-dir dist

      - name: Upload built wheels (artifact)
        uses: actions/upload-artifact@v4
        with:
          # make the name unique per matrix entry
          name: wheels-${{ matrix.os }}
          path: dist/*.whl
          if-no-files-found: error

  sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build sdist
        run: |
          python -m pip install --upgrade pip build
          python -m build --sdist
        env:
          # If PEP 517 backend pulls in setuptools-rust, pip will handle it.
          # Otherwise: PIP_PRE=1 and explicit deps as needed.
          PIP_DISABLE_PIP_VERSION_CHECK: "1"

      - name: Upload sdist (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    needs: [build_wheels, sdist]
    runs-on: ubuntu-latest
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true    # puts everything under ./
          path: dist

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: dist

  docs:
    runs-on: ubuntu-latest
    needs:
      - publish
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements-ubuntu-latest_py3.11.txt
          pip install -r requirements/requirements-ubuntu-latest_py3.11_extras.txt
          pip install sphinx
          pip install -e .

      - name: Build docs
        run: sphinx-build ./docs ./docs/_build

      - name: Deploy docs
        uses: peaceiris/actions-gh-pages@v3.8.0
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: ./docs/_build
