[build-system]
requires = ["setuptools", "setuptools-scm", "setuptools-rust", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "atomicds"
description = "API client for Atomscale."
dynamic = ["version"]
readme = "README.md"
license = { text = "GPL-3.0-only" }
authors = [{ name = "Atomscale", email = "info@atomscale.ai" }]
classifiers = [
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: Unix",
  "Operating System :: MacOS",
]
requires-python = ">=3.10, <3.13"
dependencies = [
  "numpy",
  "pandas",
  "monty",
  "pillow",
  "networkx",
  "requests",
  "rich",
  "matplotlib",
  "pycocotools",
  "trackpy",
]

[project.urls]
Homepage = "https://www.atomscale.ai"
Documentation = "https://atomic-data-sciences.github.io/api-client"

[tool.setuptools_scm]

[project.optional-dependencies]
dev = [
  "pytest",
  "pytest-httpserver",
  "pytest-cov",
  "pytest-order",
  "pytest-dependency",
  "ruff",
  "mypy",
  "types-requests",
  "pandas-stubs",
]
docs = ["sphinx>=6.2", "sphinx-autodoc-typehints>=1.24", "alabaster>=0.7"]

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]
include = ["atomicds*"]

[tool.setuptools-rust]
debug = false
# optional global defaults (e.g., debug = false)

[[tool.setuptools-rust.ext-modules]]
target = "atomicds.streaming.rheed_stream"
path = "src/atomicds/streaming/Cargo.toml"
binding = "PyO3"


[tool.pyright]
include = ["atomicds"]
exclude = ["**/__pycache__"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-p no:warnings", "--import-mode=importlib"]
xfail_strict = true
log_cli_level = "warn"
testpaths = ["tests"]

[tool.black]
exclude = '''
/(
    \.git
  | \.tox
)/
'''

[tool.isort]
profile = 'black'
skip_gitignore = true

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_also = [
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
  "except ImportError",
]

[tool.ruff]
lint.select = [
  "E",
  "F",
  "W",   # flake8
  "B",   # flake8-bugbear
  "I",   # isort
  "ARG", # flake8-unused-arguments
  "C4",  # flake8-comprehensions
  "EM",  # flake8-errmsg
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "G",   # flake8-logging-format
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "RET", # flake8-return
  "RUF", # Ruff-specific
  "SIM", # flake8-simplify
  "T20", # flake8-print
  "UP",  # pyupgrade
  "YTT", # flake8-2020
  "EXE", # flake8-executable
  "NPY", # NumPy specific rules
  "PD",  # pandas-vet
]
lint.extend-ignore = [
  "PLR",   # Design related pylint codes
  "E501",  # Line too long
  "PT004", # Use underscore for non-returning fixture (use usefixture instead)
  "B028",  # No explicit stacklevel
  "EM101", # Exception must not use a string literal
  "EM102", # Exception must not use an f-string literal
]
lint.typing-modules = ["mypackage._compat.typing"]
src = ["src"]
lint.unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
lint.flake8-unused-arguments.ignore-variadic-names = true
extend-exclude = ["tests"]
lint.pydocstyle.convention = "google"
lint.isort.known-first-party = ["atomicds"]

[tool.docformatter]
pre-summary-newline = true
black = true

[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
no_implicit_optional = false
disable_error_code = "annotation-unchecked"

[tool.codespell]
ignore-words-list = "fpr"
