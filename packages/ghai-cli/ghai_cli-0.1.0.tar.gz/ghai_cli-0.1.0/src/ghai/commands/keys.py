"""Keys management commands for GHAI CLI."""

import json
from pathlib import Path
from typing import Any

import click


def get_keys_file_path() -> Path:
    """Get the path to the keys.json file."""
    # Use user's home directory for cross-platform compatibility
    home_dir = Path.home()
    ghai_dir = home_dir / ".ghai"
    return ghai_dir / "keys.json"


def ensure_keys_file() -> Path:
    """Ensure the keys.json file exists with proper permissions."""
    keys_path = get_keys_file_path()
    keys_path.parent.mkdir(parents=True, exist_ok=True)

    if not keys_path.exists():
        default: dict[str, str] = {
            "// Note": "This file stores secret API credentials. Do not share!",
            "// Created": "Auto-generated by GHAI CLI",
        }
        keys_path.write_text(json.dumps(default, indent=2) + "\n")
        keys_path.chmod(0o600)  # Read/write for owner only

    return keys_path


def load_keys() -> dict[str, str]:
    """Load keys from the keys.json file."""
    keys_path = ensure_keys_file()
    keys: dict[str, str] = json.loads(keys_path.read_text())
    return keys


def save_keys(keys_data: dict[str, Any]) -> None:
    """Save keys to the keys.json file."""
    keys_path = ensure_keys_file()
    keys_path.write_text(json.dumps(keys_data, indent=2) + "\n")


@click.group()
@click.pass_context
def keys(ctx: click.Context) -> None:
    """Manage API keys and tokens"""


@keys.command()
@click.pass_context
def list(ctx: click.Context) -> None:
    """List stored API keys"""
    keys_data = load_keys()

    # Filter out comment keys
    actual_keys = {k: v for k, v in keys_data.items()
                   if not k.startswith("//")}

    if not actual_keys:
        click.echo("No API keys stored.")
        click.echo("\nTo add a key, use: ghai keys set <key_name>")
        return

    click.echo("=" * 40)
    for key_name in sorted(actual_keys.keys()):
        value = actual_keys[key_name]
        click.echo(f"{key_name}: {value}")


@keys.command()
@click.argument("name")
@click.option(
    "--value",
    prompt="Enter key",
    hide_input=True,
    help="Value to set (will prompt securely if not provided)",
)
@click.pass_context
def set(ctx: click.Context, name: str, value: str) -> None:
    """Set an API key or token.

    Example usage:

    \b
        $ ghai keys set GITHUB_TOKEN
        Enter key: ...

        $ ghai keys set openai --value your_token_here
    """

    keys_data = load_keys()

    keys_data[name] = value

    save_keys(keys_data)

    click.echo(f"âœ“ Key '{name}' has been set successfully.")

    # Special handling for GITHUB_TOKEN
    if name == "GITHUB_TOKEN":
        click.echo("\nðŸ’¡ Tip: Your GITHUB_TOKEN is now stored securely.")
        click.echo(
            "   The CLI will automatically use this token for GitHub API calls.")


@keys.command()
@click.pass_context
def path(ctx: click.Context) -> None:
    """Show the path to the keys.json file."""

    keys_path = get_keys_file_path()

    if keys_path.exists():
        click.echo(f"Keys file path: {keys_path}")
    else:
        click.echo("Keys file does not exist")
        click.echo("It will be created when you set your first key")


@keys.command()
@click.argument("name")
@click.confirmation_option(prompt="Are you sure you want to delete this key?")
@click.pass_context
def delete(ctx: click.Context, name: str) -> None:
    """Delete a stored API key."""

    keys_data = load_keys()

    if name not in keys_data:
        raise click.ClickException(f"Key '{name}' not found.")

    if name.startswith("//"):
        raise click.ClickException("Cannot delete comment entries.")

    del keys_data[name]
    save_keys(keys_data)

    click.echo(f"âœ“ Key '{name}' has been deleted.")
