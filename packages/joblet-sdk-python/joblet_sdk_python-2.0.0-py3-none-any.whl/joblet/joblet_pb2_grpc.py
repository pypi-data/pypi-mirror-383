# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import joblet_pb2 as joblet__pb2

GRPC_GENERATED_VERSION = "1.75.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in joblet_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class JobServiceStub(object):
    """Main service for running jobs and workflows"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunJob = channel.unary_unary(
            "/joblet.JobService/RunJob",
            request_serializer=joblet__pb2.RunJobRequest.SerializeToString,
            response_deserializer=joblet__pb2.RunJobResponse.FromString,
            _registered_method=True,
        )
        self.GetJobStatus = channel.unary_unary(
            "/joblet.JobService/GetJobStatus",
            request_serializer=joblet__pb2.GetJobStatusReq.SerializeToString,
            response_deserializer=joblet__pb2.GetJobStatusRes.FromString,
            _registered_method=True,
        )
        self.StopJob = channel.unary_unary(
            "/joblet.JobService/StopJob",
            request_serializer=joblet__pb2.StopJobReq.SerializeToString,
            response_deserializer=joblet__pb2.StopJobRes.FromString,
            _registered_method=True,
        )
        self.CancelJob = channel.unary_unary(
            "/joblet.JobService/CancelJob",
            request_serializer=joblet__pb2.CancelJobReq.SerializeToString,
            response_deserializer=joblet__pb2.CancelJobRes.FromString,
            _registered_method=True,
        )
        self.DeleteJob = channel.unary_unary(
            "/joblet.JobService/DeleteJob",
            request_serializer=joblet__pb2.DeleteJobReq.SerializeToString,
            response_deserializer=joblet__pb2.DeleteJobRes.FromString,
            _registered_method=True,
        )
        self.DeleteAllJobs = channel.unary_unary(
            "/joblet.JobService/DeleteAllJobs",
            request_serializer=joblet__pb2.DeleteAllJobsReq.SerializeToString,
            response_deserializer=joblet__pb2.DeleteAllJobsRes.FromString,
            _registered_method=True,
        )
        self.GetJobLogs = channel.unary_stream(
            "/joblet.JobService/GetJobLogs",
            request_serializer=joblet__pb2.GetJobLogsReq.SerializeToString,
            response_deserializer=joblet__pb2.DataChunk.FromString,
            _registered_method=True,
        )
        self.ListJobs = channel.unary_unary(
            "/joblet.JobService/ListJobs",
            request_serializer=joblet__pb2.EmptyRequest.SerializeToString,
            response_deserializer=joblet__pb2.Jobs.FromString,
            _registered_method=True,
        )
        self.RunWorkflow = channel.unary_unary(
            "/joblet.JobService/RunWorkflow",
            request_serializer=joblet__pb2.RunWorkflowRequest.SerializeToString,
            response_deserializer=joblet__pb2.RunWorkflowResponse.FromString,
            _registered_method=True,
        )
        self.GetWorkflowStatus = channel.unary_unary(
            "/joblet.JobService/GetWorkflowStatus",
            request_serializer=joblet__pb2.GetWorkflowStatusRequest.SerializeToString,
            response_deserializer=joblet__pb2.GetWorkflowStatusResponse.FromString,
            _registered_method=True,
        )
        self.ListWorkflows = channel.unary_unary(
            "/joblet.JobService/ListWorkflows",
            request_serializer=joblet__pb2.ListWorkflowsRequest.SerializeToString,
            response_deserializer=joblet__pb2.ListWorkflowsResponse.FromString,
            _registered_method=True,
        )
        self.GetWorkflowJobs = channel.unary_unary(
            "/joblet.JobService/GetWorkflowJobs",
            request_serializer=joblet__pb2.GetWorkflowJobsRequest.SerializeToString,
            response_deserializer=joblet__pb2.GetWorkflowJobsResponse.FromString,
            _registered_method=True,
        )


class JobServiceServicer(object):
    """Main service for running jobs and workflows"""

    def RunJob(self, request, context):
        """Job operations"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetJobStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StopJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CancelJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteAllJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetJobLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RunWorkflow(self, request, context):
        """Workflow operations"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetWorkflowStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListWorkflows(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetWorkflowJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_JobServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "RunJob": grpc.unary_unary_rpc_method_handler(
            servicer.RunJob,
            request_deserializer=joblet__pb2.RunJobRequest.FromString,
            response_serializer=joblet__pb2.RunJobResponse.SerializeToString,
        ),
        "GetJobStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetJobStatus,
            request_deserializer=joblet__pb2.GetJobStatusReq.FromString,
            response_serializer=joblet__pb2.GetJobStatusRes.SerializeToString,
        ),
        "StopJob": grpc.unary_unary_rpc_method_handler(
            servicer.StopJob,
            request_deserializer=joblet__pb2.StopJobReq.FromString,
            response_serializer=joblet__pb2.StopJobRes.SerializeToString,
        ),
        "CancelJob": grpc.unary_unary_rpc_method_handler(
            servicer.CancelJob,
            request_deserializer=joblet__pb2.CancelJobReq.FromString,
            response_serializer=joblet__pb2.CancelJobRes.SerializeToString,
        ),
        "DeleteJob": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteJob,
            request_deserializer=joblet__pb2.DeleteJobReq.FromString,
            response_serializer=joblet__pb2.DeleteJobRes.SerializeToString,
        ),
        "DeleteAllJobs": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteAllJobs,
            request_deserializer=joblet__pb2.DeleteAllJobsReq.FromString,
            response_serializer=joblet__pb2.DeleteAllJobsRes.SerializeToString,
        ),
        "GetJobLogs": grpc.unary_stream_rpc_method_handler(
            servicer.GetJobLogs,
            request_deserializer=joblet__pb2.GetJobLogsReq.FromString,
            response_serializer=joblet__pb2.DataChunk.SerializeToString,
        ),
        "ListJobs": grpc.unary_unary_rpc_method_handler(
            servicer.ListJobs,
            request_deserializer=joblet__pb2.EmptyRequest.FromString,
            response_serializer=joblet__pb2.Jobs.SerializeToString,
        ),
        "RunWorkflow": grpc.unary_unary_rpc_method_handler(
            servicer.RunWorkflow,
            request_deserializer=joblet__pb2.RunWorkflowRequest.FromString,
            response_serializer=joblet__pb2.RunWorkflowResponse.SerializeToString,
        ),
        "GetWorkflowStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetWorkflowStatus,
            request_deserializer=joblet__pb2.GetWorkflowStatusRequest.FromString,
            response_serializer=joblet__pb2.GetWorkflowStatusResponse.SerializeToString,
        ),
        "ListWorkflows": grpc.unary_unary_rpc_method_handler(
            servicer.ListWorkflows,
            request_deserializer=joblet__pb2.ListWorkflowsRequest.FromString,
            response_serializer=joblet__pb2.ListWorkflowsResponse.SerializeToString,
        ),
        "GetWorkflowJobs": grpc.unary_unary_rpc_method_handler(
            servicer.GetWorkflowJobs,
            request_deserializer=joblet__pb2.GetWorkflowJobsRequest.FromString,
            response_serializer=joblet__pb2.GetWorkflowJobsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "joblet.JobService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("joblet.JobService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class JobService(object):
    """Main service for running jobs and workflows"""

    @staticmethod
    def RunJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.JobService/RunJob",
            joblet__pb2.RunJobRequest.SerializeToString,
            joblet__pb2.RunJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetJobStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.JobService/GetJobStatus",
            joblet__pb2.GetJobStatusReq.SerializeToString,
            joblet__pb2.GetJobStatusRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def StopJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.JobService/StopJob",
            joblet__pb2.StopJobReq.SerializeToString,
            joblet__pb2.StopJobRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CancelJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.JobService/CancelJob",
            joblet__pb2.CancelJobReq.SerializeToString,
            joblet__pb2.CancelJobRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.JobService/DeleteJob",
            joblet__pb2.DeleteJobReq.SerializeToString,
            joblet__pb2.DeleteJobRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteAllJobs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.JobService/DeleteAllJobs",
            joblet__pb2.DeleteAllJobsReq.SerializeToString,
            joblet__pb2.DeleteAllJobsRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetJobLogs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/joblet.JobService/GetJobLogs",
            joblet__pb2.GetJobLogsReq.SerializeToString,
            joblet__pb2.DataChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListJobs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.JobService/ListJobs",
            joblet__pb2.EmptyRequest.SerializeToString,
            joblet__pb2.Jobs.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RunWorkflow(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.JobService/RunWorkflow",
            joblet__pb2.RunWorkflowRequest.SerializeToString,
            joblet__pb2.RunWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetWorkflowStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.JobService/GetWorkflowStatus",
            joblet__pb2.GetWorkflowStatusRequest.SerializeToString,
            joblet__pb2.GetWorkflowStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListWorkflows(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.JobService/ListWorkflows",
            joblet__pb2.ListWorkflowsRequest.SerializeToString,
            joblet__pb2.ListWorkflowsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetWorkflowJobs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.JobService/GetWorkflowJobs",
            joblet__pb2.GetWorkflowJobsRequest.SerializeToString,
            joblet__pb2.GetWorkflowJobsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class NetworkServiceStub(object):
    """Network service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateNetwork = channel.unary_unary(
            "/joblet.NetworkService/CreateNetwork",
            request_serializer=joblet__pb2.CreateNetworkReq.SerializeToString,
            response_deserializer=joblet__pb2.CreateNetworkRes.FromString,
            _registered_method=True,
        )
        self.ListNetworks = channel.unary_unary(
            "/joblet.NetworkService/ListNetworks",
            request_serializer=joblet__pb2.EmptyRequest.SerializeToString,
            response_deserializer=joblet__pb2.Networks.FromString,
            _registered_method=True,
        )
        self.RemoveNetwork = channel.unary_unary(
            "/joblet.NetworkService/RemoveNetwork",
            request_serializer=joblet__pb2.RemoveNetworkReq.SerializeToString,
            response_deserializer=joblet__pb2.RemoveNetworkRes.FromString,
            _registered_method=True,
        )


class NetworkServiceServicer(object):
    """Network service"""

    def CreateNetwork(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListNetworks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RemoveNetwork(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_NetworkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateNetwork": grpc.unary_unary_rpc_method_handler(
            servicer.CreateNetwork,
            request_deserializer=joblet__pb2.CreateNetworkReq.FromString,
            response_serializer=joblet__pb2.CreateNetworkRes.SerializeToString,
        ),
        "ListNetworks": grpc.unary_unary_rpc_method_handler(
            servicer.ListNetworks,
            request_deserializer=joblet__pb2.EmptyRequest.FromString,
            response_serializer=joblet__pb2.Networks.SerializeToString,
        ),
        "RemoveNetwork": grpc.unary_unary_rpc_method_handler(
            servicer.RemoveNetwork,
            request_deserializer=joblet__pb2.RemoveNetworkReq.FromString,
            response_serializer=joblet__pb2.RemoveNetworkRes.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "joblet.NetworkService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("joblet.NetworkService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class NetworkService(object):
    """Network service"""

    @staticmethod
    def CreateNetwork(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.NetworkService/CreateNetwork",
            joblet__pb2.CreateNetworkReq.SerializeToString,
            joblet__pb2.CreateNetworkRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListNetworks(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.NetworkService/ListNetworks",
            joblet__pb2.EmptyRequest.SerializeToString,
            joblet__pb2.Networks.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RemoveNetwork(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.NetworkService/RemoveNetwork",
            joblet__pb2.RemoveNetworkReq.SerializeToString,
            joblet__pb2.RemoveNetworkRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class VolumeServiceStub(object):
    """Volume service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateVolume = channel.unary_unary(
            "/joblet.VolumeService/CreateVolume",
            request_serializer=joblet__pb2.CreateVolumeReq.SerializeToString,
            response_deserializer=joblet__pb2.CreateVolumeRes.FromString,
            _registered_method=True,
        )
        self.ListVolumes = channel.unary_unary(
            "/joblet.VolumeService/ListVolumes",
            request_serializer=joblet__pb2.EmptyRequest.SerializeToString,
            response_deserializer=joblet__pb2.Volumes.FromString,
            _registered_method=True,
        )
        self.RemoveVolume = channel.unary_unary(
            "/joblet.VolumeService/RemoveVolume",
            request_serializer=joblet__pb2.RemoveVolumeReq.SerializeToString,
            response_deserializer=joblet__pb2.RemoveVolumeRes.FromString,
            _registered_method=True,
        )


class VolumeServiceServicer(object):
    """Volume service"""

    def CreateVolume(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListVolumes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RemoveVolume(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_VolumeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateVolume": grpc.unary_unary_rpc_method_handler(
            servicer.CreateVolume,
            request_deserializer=joblet__pb2.CreateVolumeReq.FromString,
            response_serializer=joblet__pb2.CreateVolumeRes.SerializeToString,
        ),
        "ListVolumes": grpc.unary_unary_rpc_method_handler(
            servicer.ListVolumes,
            request_deserializer=joblet__pb2.EmptyRequest.FromString,
            response_serializer=joblet__pb2.Volumes.SerializeToString,
        ),
        "RemoveVolume": grpc.unary_unary_rpc_method_handler(
            servicer.RemoveVolume,
            request_deserializer=joblet__pb2.RemoveVolumeReq.FromString,
            response_serializer=joblet__pb2.RemoveVolumeRes.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "joblet.VolumeService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("joblet.VolumeService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class VolumeService(object):
    """Volume service"""

    @staticmethod
    def CreateVolume(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.VolumeService/CreateVolume",
            joblet__pb2.CreateVolumeReq.SerializeToString,
            joblet__pb2.CreateVolumeRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListVolumes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.VolumeService/ListVolumes",
            joblet__pb2.EmptyRequest.SerializeToString,
            joblet__pb2.Volumes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RemoveVolume(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.VolumeService/RemoveVolume",
            joblet__pb2.RemoveVolumeReq.SerializeToString,
            joblet__pb2.RemoveVolumeRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class MonitoringServiceStub(object):
    """Monitoring service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSystemStatus = channel.unary_unary(
            "/joblet.MonitoringService/GetSystemStatus",
            request_serializer=joblet__pb2.EmptyRequest.SerializeToString,
            response_deserializer=joblet__pb2.SystemStatusRes.FromString,
            _registered_method=True,
        )
        self.StreamSystemMetrics = channel.unary_stream(
            "/joblet.MonitoringService/StreamSystemMetrics",
            request_serializer=joblet__pb2.StreamMetricsReq.SerializeToString,
            response_deserializer=joblet__pb2.SystemMetricsRes.FromString,
            _registered_method=True,
        )


class MonitoringServiceServicer(object):
    """Monitoring service"""

    def GetSystemStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StreamSystemMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MonitoringServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetSystemStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetSystemStatus,
            request_deserializer=joblet__pb2.EmptyRequest.FromString,
            response_serializer=joblet__pb2.SystemStatusRes.SerializeToString,
        ),
        "StreamSystemMetrics": grpc.unary_stream_rpc_method_handler(
            servicer.StreamSystemMetrics,
            request_deserializer=joblet__pb2.StreamMetricsReq.FromString,
            response_serializer=joblet__pb2.SystemMetricsRes.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "joblet.MonitoringService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "joblet.MonitoringService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class MonitoringService(object):
    """Monitoring service"""

    @staticmethod
    def GetSystemStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.MonitoringService/GetSystemStatus",
            joblet__pb2.EmptyRequest.SerializeToString,
            joblet__pb2.SystemStatusRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def StreamSystemMetrics(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/joblet.MonitoringService/StreamSystemMetrics",
            joblet__pb2.StreamMetricsReq.SerializeToString,
            joblet__pb2.SystemMetricsRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class RuntimeServiceStub(object):
    """Runtime service for managing execution environments"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListRuntimes = channel.unary_unary(
            "/joblet.RuntimeService/ListRuntimes",
            request_serializer=joblet__pb2.EmptyRequest.SerializeToString,
            response_deserializer=joblet__pb2.RuntimesRes.FromString,
            _registered_method=True,
        )
        self.GetRuntimeInfo = channel.unary_unary(
            "/joblet.RuntimeService/GetRuntimeInfo",
            request_serializer=joblet__pb2.RuntimeInfoReq.SerializeToString,
            response_deserializer=joblet__pb2.RuntimeInfoRes.FromString,
            _registered_method=True,
        )
        self.TestRuntime = channel.unary_unary(
            "/joblet.RuntimeService/TestRuntime",
            request_serializer=joblet__pb2.RuntimeTestReq.SerializeToString,
            response_deserializer=joblet__pb2.RuntimeTestRes.FromString,
            _registered_method=True,
        )
        self.InstallRuntimeFromGithub = channel.unary_unary(
            "/joblet.RuntimeService/InstallRuntimeFromGithub",
            request_serializer=joblet__pb2.InstallRuntimeRequest.SerializeToString,
            response_deserializer=joblet__pb2.InstallRuntimeResponse.FromString,
            _registered_method=True,
        )
        self.InstallRuntimeFromLocal = channel.unary_unary(
            "/joblet.RuntimeService/InstallRuntimeFromLocal",
            request_serializer=joblet__pb2.InstallRuntimeFromLocalRequest.SerializeToString,
            response_deserializer=joblet__pb2.InstallRuntimeResponse.FromString,
            _registered_method=True,
        )
        self.StreamingInstallRuntimeFromGithub = channel.unary_stream(
            "/joblet.RuntimeService/StreamingInstallRuntimeFromGithub",
            request_serializer=joblet__pb2.InstallRuntimeRequest.SerializeToString,
            response_deserializer=joblet__pb2.RuntimeInstallationChunk.FromString,
            _registered_method=True,
        )
        self.StreamingInstallRuntimeFromLocal = channel.unary_stream(
            "/joblet.RuntimeService/StreamingInstallRuntimeFromLocal",
            request_serializer=joblet__pb2.InstallRuntimeFromLocalRequest.SerializeToString,
            response_deserializer=joblet__pb2.RuntimeInstallationChunk.FromString,
            _registered_method=True,
        )
        self.ValidateRuntimeSpec = channel.unary_unary(
            "/joblet.RuntimeService/ValidateRuntimeSpec",
            request_serializer=joblet__pb2.ValidateRuntimeSpecRequest.SerializeToString,
            response_deserializer=joblet__pb2.ValidateRuntimeSpecResponse.FromString,
            _registered_method=True,
        )
        self.RemoveRuntime = channel.unary_unary(
            "/joblet.RuntimeService/RemoveRuntime",
            request_serializer=joblet__pb2.RuntimeRemoveReq.SerializeToString,
            response_deserializer=joblet__pb2.RuntimeRemoveRes.FromString,
            _registered_method=True,
        )


class RuntimeServiceServicer(object):
    """Runtime service for managing execution environments"""

    def ListRuntimes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetRuntimeInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def TestRuntime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def InstallRuntimeFromGithub(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def InstallRuntimeFromLocal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StreamingInstallRuntimeFromGithub(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StreamingInstallRuntimeFromLocal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ValidateRuntimeSpec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RemoveRuntime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RuntimeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ListRuntimes": grpc.unary_unary_rpc_method_handler(
            servicer.ListRuntimes,
            request_deserializer=joblet__pb2.EmptyRequest.FromString,
            response_serializer=joblet__pb2.RuntimesRes.SerializeToString,
        ),
        "GetRuntimeInfo": grpc.unary_unary_rpc_method_handler(
            servicer.GetRuntimeInfo,
            request_deserializer=joblet__pb2.RuntimeInfoReq.FromString,
            response_serializer=joblet__pb2.RuntimeInfoRes.SerializeToString,
        ),
        "TestRuntime": grpc.unary_unary_rpc_method_handler(
            servicer.TestRuntime,
            request_deserializer=joblet__pb2.RuntimeTestReq.FromString,
            response_serializer=joblet__pb2.RuntimeTestRes.SerializeToString,
        ),
        "InstallRuntimeFromGithub": grpc.unary_unary_rpc_method_handler(
            servicer.InstallRuntimeFromGithub,
            request_deserializer=joblet__pb2.InstallRuntimeRequest.FromString,
            response_serializer=joblet__pb2.InstallRuntimeResponse.SerializeToString,
        ),
        "InstallRuntimeFromLocal": grpc.unary_unary_rpc_method_handler(
            servicer.InstallRuntimeFromLocal,
            request_deserializer=joblet__pb2.InstallRuntimeFromLocalRequest.FromString,
            response_serializer=joblet__pb2.InstallRuntimeResponse.SerializeToString,
        ),
        "StreamingInstallRuntimeFromGithub": grpc.unary_stream_rpc_method_handler(
            servicer.StreamingInstallRuntimeFromGithub,
            request_deserializer=joblet__pb2.InstallRuntimeRequest.FromString,
            response_serializer=joblet__pb2.RuntimeInstallationChunk.SerializeToString,
        ),
        "StreamingInstallRuntimeFromLocal": grpc.unary_stream_rpc_method_handler(
            servicer.StreamingInstallRuntimeFromLocal,
            request_deserializer=joblet__pb2.InstallRuntimeFromLocalRequest.FromString,
            response_serializer=joblet__pb2.RuntimeInstallationChunk.SerializeToString,
        ),
        "ValidateRuntimeSpec": grpc.unary_unary_rpc_method_handler(
            servicer.ValidateRuntimeSpec,
            request_deserializer=joblet__pb2.ValidateRuntimeSpecRequest.FromString,
            response_serializer=joblet__pb2.ValidateRuntimeSpecResponse.SerializeToString,
        ),
        "RemoveRuntime": grpc.unary_unary_rpc_method_handler(
            servicer.RemoveRuntime,
            request_deserializer=joblet__pb2.RuntimeRemoveReq.FromString,
            response_serializer=joblet__pb2.RuntimeRemoveRes.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "joblet.RuntimeService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("joblet.RuntimeService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class RuntimeService(object):
    """Runtime service for managing execution environments"""

    @staticmethod
    def ListRuntimes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.RuntimeService/ListRuntimes",
            joblet__pb2.EmptyRequest.SerializeToString,
            joblet__pb2.RuntimesRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetRuntimeInfo(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.RuntimeService/GetRuntimeInfo",
            joblet__pb2.RuntimeInfoReq.SerializeToString,
            joblet__pb2.RuntimeInfoRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def TestRuntime(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.RuntimeService/TestRuntime",
            joblet__pb2.RuntimeTestReq.SerializeToString,
            joblet__pb2.RuntimeTestRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def InstallRuntimeFromGithub(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.RuntimeService/InstallRuntimeFromGithub",
            joblet__pb2.InstallRuntimeRequest.SerializeToString,
            joblet__pb2.InstallRuntimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def InstallRuntimeFromLocal(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.RuntimeService/InstallRuntimeFromLocal",
            joblet__pb2.InstallRuntimeFromLocalRequest.SerializeToString,
            joblet__pb2.InstallRuntimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def StreamingInstallRuntimeFromGithub(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/joblet.RuntimeService/StreamingInstallRuntimeFromGithub",
            joblet__pb2.InstallRuntimeRequest.SerializeToString,
            joblet__pb2.RuntimeInstallationChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def StreamingInstallRuntimeFromLocal(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/joblet.RuntimeService/StreamingInstallRuntimeFromLocal",
            joblet__pb2.InstallRuntimeFromLocalRequest.SerializeToString,
            joblet__pb2.RuntimeInstallationChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ValidateRuntimeSpec(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.RuntimeService/ValidateRuntimeSpec",
            joblet__pb2.ValidateRuntimeSpecRequest.SerializeToString,
            joblet__pb2.ValidateRuntimeSpecResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RemoveRuntime(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/joblet.RuntimeService/RemoveRuntime",
            joblet__pb2.RuntimeRemoveReq.SerializeToString,
            joblet__pb2.RuntimeRemoveRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
