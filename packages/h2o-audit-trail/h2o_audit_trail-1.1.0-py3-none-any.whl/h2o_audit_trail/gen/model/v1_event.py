"""
    ai/h2o/audittrail/v1/status.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_audit_trail.gen.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from h2o_audit_trail.gen.exceptions import ApiAttributeError


def lazy_import():
    from h2o_audit_trail.gen.model.audittrailv1_status import Audittrailv1Status
    globals()['Audittrailv1Status'] = Audittrailv1Status


class V1Event(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'event_time': (datetime,),  # noqa: E501
            'event_source': (str,),  # noqa: E501
            'action': (str,),  # noqa: E501
            'read_only': (bool,),  # noqa: E501
            'principal': (str,),  # noqa: E501
            'source_ip_address': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'receive_time': (datetime,),  # noqa: E501
            'resource': (str,),  # noqa: E501
            'request_parameters': ({str: (str,)},),  # noqa: E501
            'status': (Audittrailv1Status,),  # noqa: E501
            'login_principal': (str,),  # noqa: E501
            'user_agent': (str,),  # noqa: E501
            'metadata': ({str: (str,)},),  # noqa: E501
            'workspace': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'event_time': 'eventTime',  # noqa: E501
        'event_source': 'eventSource',  # noqa: E501
        'action': 'action',  # noqa: E501
        'read_only': 'readOnly',  # noqa: E501
        'principal': 'principal',  # noqa: E501
        'source_ip_address': 'sourceIpAddress',  # noqa: E501
        'name': 'name',  # noqa: E501
        'receive_time': 'receiveTime',  # noqa: E501
        'resource': 'resource',  # noqa: E501
        'request_parameters': 'requestParameters',  # noqa: E501
        'status': 'status',  # noqa: E501
        'login_principal': 'loginPrincipal',  # noqa: E501
        'user_agent': 'userAgent',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'workspace': 'workspace',  # noqa: E501
    }

    read_only_vars = {
        'name',  # noqa: E501
        'receive_time',  # noqa: E501
        'login_principal',  # noqa: E501
        'workspace',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, event_time, event_source, action, read_only, principal, source_ip_address, *args, **kwargs):  # noqa: E501
        """V1Event - a model defined in OpenAPI

        Args:
            event_time (datetime): Required. The time when the event occurred.
            event_source (str): Required. The canonical name of the container image where the event occurred. It MUST match the agreed HAIC container naming. For example, \"h2oai-enginemanager-server\" or \"thirdparty-chainguard-bitnamikeycloak\".
            action (str): Required. The requested action. Where applicable, it MUST match the name of the action registered with AuthZ.
            read_only (bool): Required. Whether the action is a read-only operation.
            principal (str): Required. The identifier of the authenticated principal making the request. For example: \"users/a2b3b8a6-05c6-47d1-8ae1-774113404975\" or \"services/appstore\".
            source_ip_address (str): Required. The IP address that the request was made from. For a source from the Internet, this will be the public IPv4 or IPv6 address. Private IP addresses will be redacted to \"private\".

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): [optional]  # noqa: E501
            receive_time (datetime): Output only. The time when the event was received.. [optional]  # noqa: E501
            resource (str): Optional. The target of the request, specified as a full resource name or a collection name. Must be a scheme-less URI followed by the relative name.  For example: - Single resource: \"//engine-manager/workspaces/8dcc8393-7b39-45f8-9f85-d1978adba483/daiEngines/new-dai-engine-7268\" - Collection: \"//engine-manager/workspaces/8dcc8393-7b39-45f8-9f85-d1978adba483/daiEngines\"  All aliases must be fully resolved. For example \"//engine-manager/workspaces/default\" is not allowed.. [optional]  # noqa: E501
            request_parameters ({str: (str,)}): Optional. The parameters, if any, that were sent with the request. May not include all request parameters, such as those that are too large privacy-sensitive, or duplicated elsewhere in the event.. [optional]  # noqa: E501
            status (Audittrailv1Status): [optional]  # noqa: E501
            login_principal (str): Output Only. Unique user-friendly identifier of the User typically used for the authentication. The values is taken at the search event time.. [optional]  # noqa: E501
            user_agent (str): Optional. The agent through which the request was made.. [optional]  # noqa: E501
            metadata ({str: (str,)}): [optional]  # noqa: E501
            workspace (str): Output Only. Name of workspace to which the event is related to. Format: \"workspaces/*\". When event is related to no workspace, then this field is unset (empty string).  Workspace can be derived from other fields. For example, if resource=\"workspaces/w1/daiEngines/e1\", then workspace=\"workspaces/w1\".. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.event_time = event_time
        self.event_source = event_source
        self.action = action
        self.read_only = read_only
        self.principal = principal
        self.source_ip_address = source_ip_address
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, event_time, event_source, action, read_only, principal, source_ip_address, *args, **kwargs):  # noqa: E501
        """V1Event - a model defined in OpenAPI

        Args:
            event_time (datetime): Required. The time when the event occurred.
            event_source (str): Required. The canonical name of the container image where the event occurred. It MUST match the agreed HAIC container naming. For example, \"h2oai-enginemanager-server\" or \"thirdparty-chainguard-bitnamikeycloak\".
            action (str): Required. The requested action. Where applicable, it MUST match the name of the action registered with AuthZ.
            read_only (bool): Required. Whether the action is a read-only operation.
            principal (str): Required. The identifier of the authenticated principal making the request. For example: \"users/a2b3b8a6-05c6-47d1-8ae1-774113404975\" or \"services/appstore\".
            source_ip_address (str): Required. The IP address that the request was made from. For a source from the Internet, this will be the public IPv4 or IPv6 address. Private IP addresses will be redacted to \"private\".

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): [optional]  # noqa: E501
            receive_time (datetime): Output only. The time when the event was received.. [optional]  # noqa: E501
            resource (str): Optional. The target of the request, specified as a full resource name or a collection name. Must be a scheme-less URI followed by the relative name.  For example: - Single resource: \"//engine-manager/workspaces/8dcc8393-7b39-45f8-9f85-d1978adba483/daiEngines/new-dai-engine-7268\" - Collection: \"//engine-manager/workspaces/8dcc8393-7b39-45f8-9f85-d1978adba483/daiEngines\"  All aliases must be fully resolved. For example \"//engine-manager/workspaces/default\" is not allowed.. [optional]  # noqa: E501
            request_parameters ({str: (str,)}): Optional. The parameters, if any, that were sent with the request. May not include all request parameters, such as those that are too large privacy-sensitive, or duplicated elsewhere in the event.. [optional]  # noqa: E501
            status (Audittrailv1Status): [optional]  # noqa: E501
            login_principal (str): Output Only. Unique user-friendly identifier of the User typically used for the authentication. The values is taken at the search event time.. [optional]  # noqa: E501
            user_agent (str): Optional. The agent through which the request was made.. [optional]  # noqa: E501
            metadata ({str: (str,)}): [optional]  # noqa: E501
            workspace (str): Output Only. Name of workspace to which the event is related to. Format: \"workspaces/*\". When event is related to no workspace, then this field is unset (empty string).  Workspace can be derived from other fields. For example, if resource=\"workspaces/w1/daiEngines/e1\", then workspace=\"workspaces/w1\".. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.event_time = event_time
        self.event_source = event_source
        self.action = action
        self.read_only = read_only
        self.principal = principal
        self.source_ip_address = source_ip_address
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
