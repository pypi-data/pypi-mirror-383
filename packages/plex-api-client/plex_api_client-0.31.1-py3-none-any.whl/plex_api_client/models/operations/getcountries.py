"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.types import BaseModel
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Flavor(int, Enum):
    r"""- `0`: The country is divided into regions, and following the key will lead to a list of regions.
    - `1`: The county is divided by postal codes, and an example code is returned in `example`.
    - `2`: The country has a single postal code, returned in `example`.

    """

    ZERO = 0
    ONE = 1
    TWO = 2


class CountryTypedDict(TypedDict):
    code: NotRequired[str]
    r"""Three letter code"""
    example: NotRequired[str]
    flavor: NotRequired[Flavor]
    r"""- `0`: The country is divided into regions, and following the key will lead to a list of regions.
    - `1`: The county is divided by postal codes, and an example code is returned in `example`.
    - `2`: The country has a single postal code, returned in `example`.

    """
    key: NotRequired[str]
    language: NotRequired[str]
    r"""Three letter language code"""
    language_title: NotRequired[str]
    r"""The title of the language"""
    title: NotRequired[str]
    type: NotRequired[str]


class Country(BaseModel):
    code: Optional[str] = None
    r"""Three letter code"""

    example: Optional[str] = None

    flavor: Optional[Flavor] = None
    r"""- `0`: The country is divided into regions, and following the key will lead to a list of regions.
    - `1`: The county is divided by postal codes, and an example code is returned in `example`.
    - `2`: The country has a single postal code, returned in `example`.

    """

    key: Optional[str] = None

    language: Optional[str] = None
    r"""Three letter language code"""

    language_title: Annotated[Optional[str], pydantic.Field(alias="languageTitle")] = (
        None
    )
    r"""The title of the language"""

    title: Optional[str] = None

    type: Optional[str] = None


class GetCountriesMediaContainerTypedDict(TypedDict):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: NotRequired[str]
    offset: NotRequired[int]
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """
    size: NotRequired[int]
    total_size: NotRequired[int]
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """
    country: NotRequired[List[CountryTypedDict]]


class GetCountriesMediaContainer(BaseModel):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: Optional[str] = None

    offset: Optional[int] = None
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """

    size: Optional[int] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """

    country: Annotated[Optional[List[Country]], pydantic.Field(alias="Country")] = None


class GetCountriesResponseBodyTypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[GetCountriesMediaContainerTypedDict]


class GetCountriesResponseBody(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[GetCountriesMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class GetCountriesResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    headers: Dict[str, List[str]]
    object: NotRequired[GetCountriesResponseBodyTypedDict]
    r"""OK"""


class GetCountriesResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    headers: Dict[str, List[str]]

    object: Optional[GetCountriesResponseBody] = None
    r"""OK"""
