"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.models.components import accepts as components_accepts
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, HeaderMetadata, PathParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetPlaylistGeneratorGlobalsTypedDict(TypedDict):
    accepts: NotRequired[components_accepts.Accepts]
    r"""Indicates the client accepts the indicated media types"""
    client_identifier: NotRequired[str]
    r"""An opaque identifier unique to the client"""
    product: NotRequired[str]
    r"""The name of the client product"""
    version: NotRequired[str]
    r"""The version of the client application"""
    platform: NotRequired[str]
    r"""The platform of the client"""
    platform_version: NotRequired[str]
    r"""The version of the platform"""
    device: NotRequired[str]
    r"""A relatively friendly name for the client device"""
    model: NotRequired[str]
    r"""A potentially less friendly identifier for the device model"""
    device_vendor: NotRequired[str]
    r"""The device vendor"""
    device_name: NotRequired[str]
    r"""A friendly name for the client"""
    marketplace: NotRequired[str]
    r"""The marketplace on which the client application is distributed"""


class GetPlaylistGeneratorGlobals(BaseModel):
    accepts: Annotated[
        Optional[components_accepts.Accepts],
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = components_accepts.Accepts.APPLICATION_XML
    r"""Indicates the client accepts the indicated media types"""

    client_identifier: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Client-Identifier"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""An opaque identifier unique to the client"""

    product: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Product"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The name of the client product"""

    version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the client application"""

    platform: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The platform of the client"""

    platform_version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the platform"""

    device: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A relatively friendly name for the client device"""

    model: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Model"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A potentially less friendly identifier for the device model"""

    device_vendor: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Vendor"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The device vendor"""

    device_name: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Name"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A friendly name for the client"""

    marketplace: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Marketplace"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The marketplace on which the client application is distributed"""


class GetPlaylistGeneratorRequestTypedDict(TypedDict):
    playlist_id: int
    r"""The ID of the playlist"""
    generator_id: int
    r"""The generator item ID to delete."""
    accepts: NotRequired[components_accepts.Accepts]
    r"""Indicates the client accepts the indicated media types"""
    client_identifier: NotRequired[str]
    r"""An opaque identifier unique to the client"""
    product: NotRequired[str]
    r"""The name of the client product"""
    version: NotRequired[str]
    r"""The version of the client application"""
    platform: NotRequired[str]
    r"""The platform of the client"""
    platform_version: NotRequired[str]
    r"""The version of the platform"""
    device: NotRequired[str]
    r"""A relatively friendly name for the client device"""
    model: NotRequired[str]
    r"""A potentially less friendly identifier for the device model"""
    device_vendor: NotRequired[str]
    r"""The device vendor"""
    device_name: NotRequired[str]
    r"""A friendly name for the client"""
    marketplace: NotRequired[str]
    r"""The marketplace on which the client application is distributed"""


class GetPlaylistGeneratorRequest(BaseModel):
    playlist_id: Annotated[
        int,
        pydantic.Field(alias="playlistId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The ID of the playlist"""

    generator_id: Annotated[
        int,
        pydantic.Field(alias="generatorId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The generator item ID to delete."""

    accepts: Annotated[
        Optional[components_accepts.Accepts],
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = components_accepts.Accepts.APPLICATION_XML
    r"""Indicates the client accepts the indicated media types"""

    client_identifier: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Client-Identifier"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""An opaque identifier unique to the client"""

    product: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Product"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The name of the client product"""

    version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the client application"""

    platform: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The platform of the client"""

    platform_version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the platform"""

    device: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A relatively friendly name for the client device"""

    model: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Model"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A potentially less friendly identifier for the device model"""

    device_vendor: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Vendor"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The device vendor"""

    device_name: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Name"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A friendly name for the client"""

    marketplace: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Marketplace"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The marketplace on which the client application is distributed"""


class GetPlaylistGeneratorDeviceTypedDict(TypedDict):
    profile: NotRequired[str]


class GetPlaylistGeneratorDevice(BaseModel):
    profile: Optional[str] = None


class GetPlaylistGeneratorLocationTypedDict(TypedDict):
    library_section_id: NotRequired[int]
    uri: NotRequired[str]


class GetPlaylistGeneratorLocation(BaseModel):
    library_section_id: Annotated[
        Optional[int], pydantic.Field(alias="librarySectionID")
    ] = None

    uri: Optional[str] = None


class AdvancedSubtitles(str, Enum):
    AUTO = "auto"
    BURN = "burn"
    NONE = "none"
    SIDECAR = "sidecar"
    EMBEDDED = "embedded"
    SEGMENTED = "segmented"


class GetPlaylistGeneratorSubtitles(str, Enum):
    AUTO = "auto"
    BURN = "burn"
    NONE = "none"
    SIDECAR = "sidecar"
    EMBEDDED = "embedded"
    SEGMENTED = "segmented"


class MediaSettingsTypedDict(TypedDict):
    advanced_subtitles: NotRequired[AdvancedSubtitles]
    audio_boost: NotRequired[int]
    audio_channel_count: NotRequired[int]
    auto_adjust_quality: NotRequired[bool]
    auto_adjust_subtitle: NotRequired[bool]
    direct_play: NotRequired[bool]
    direct_stream: NotRequired[bool]
    direct_stream_audio: NotRequired[bool]
    disable_resolution_rotation: NotRequired[bool]
    max_video_bitrate: NotRequired[int]
    music_bitrate: NotRequired[int]
    peak_bitrate: NotRequired[int]
    photo_quality: NotRequired[int]
    photo_resolution: NotRequired[str]
    seconds_per_segment: NotRequired[int]
    subtitles: NotRequired[GetPlaylistGeneratorSubtitles]
    subtitle_size: NotRequired[int]
    video_bitrate: NotRequired[int]
    video_quality: NotRequired[int]
    video_resolution: NotRequired[str]


class MediaSettings(BaseModel):
    advanced_subtitles: Annotated[
        Optional[AdvancedSubtitles], pydantic.Field(alias="advancedSubtitles")
    ] = None

    audio_boost: Annotated[Optional[int], pydantic.Field(alias="audioBoost")] = None

    audio_channel_count: Annotated[
        Optional[int], pydantic.Field(alias="audioChannelCount")
    ] = None

    auto_adjust_quality: Annotated[
        Optional[bool], pydantic.Field(alias="autoAdjustQuality")
    ] = None

    auto_adjust_subtitle: Annotated[
        Optional[bool], pydantic.Field(alias="autoAdjustSubtitle")
    ] = None

    direct_play: Annotated[Optional[bool], pydantic.Field(alias="directPlay")] = None

    direct_stream: Annotated[Optional[bool], pydantic.Field(alias="directStream")] = (
        None
    )

    direct_stream_audio: Annotated[
        Optional[bool], pydantic.Field(alias="directStreamAudio")
    ] = None

    disable_resolution_rotation: Annotated[
        Optional[bool], pydantic.Field(alias="disableResolutionRotation")
    ] = None

    max_video_bitrate: Annotated[
        Optional[int], pydantic.Field(alias="maxVideoBitrate")
    ] = None

    music_bitrate: Annotated[Optional[int], pydantic.Field(alias="musicBitrate")] = None

    peak_bitrate: Annotated[Optional[int], pydantic.Field(alias="peakBitrate")] = None

    photo_quality: Annotated[Optional[int], pydantic.Field(alias="photoQuality")] = None

    photo_resolution: Annotated[
        Optional[str], pydantic.Field(alias="photoResolution")
    ] = None

    seconds_per_segment: Annotated[
        Optional[int], pydantic.Field(alias="secondsPerSegment")
    ] = None

    subtitles: Optional[GetPlaylistGeneratorSubtitles] = None

    subtitle_size: Annotated[Optional[int], pydantic.Field(alias="subtitleSize")] = None

    video_bitrate: Annotated[Optional[int], pydantic.Field(alias="videoBitrate")] = None

    video_quality: Annotated[Optional[int], pydantic.Field(alias="videoQuality")] = None

    video_resolution: Annotated[
        Optional[str], pydantic.Field(alias="videoResolution")
    ] = None


class GetPlaylistGeneratorScope(str, Enum):
    ALL = "all"
    COUNT = "count"


class GetPlaylistGeneratorPolicyTypedDict(TypedDict):
    scope: NotRequired[GetPlaylistGeneratorScope]
    unwatched: NotRequired[bool]
    r"""True if only unwatched items are optimized"""
    value: NotRequired[int]
    r"""If the scope is count, the number of items to optimize"""


class GetPlaylistGeneratorPolicy(BaseModel):
    scope: Optional[GetPlaylistGeneratorScope] = None

    unwatched: Optional[bool] = None
    r"""True if only unwatched items are optimized"""

    value: Optional[int] = None
    r"""If the scope is count, the number of items to optimize"""


class GetPlaylistGeneratorState(str, Enum):
    PENDING = "pending"
    COMPLETE = "complete"
    FAILED = "failed"


class GetPlaylistGeneratorStatusTypedDict(TypedDict):
    items_complete_count: NotRequired[int]
    items_count: NotRequired[int]
    items_successful_count: NotRequired[int]
    state: NotRequired[GetPlaylistGeneratorState]
    total_size: NotRequired[int]


class GetPlaylistGeneratorStatus(BaseModel):
    items_complete_count: Annotated[
        Optional[int], pydantic.Field(alias="itemsCompleteCount")
    ] = None

    items_count: Annotated[Optional[int], pydantic.Field(alias="itemsCount")] = None

    items_successful_count: Annotated[
        Optional[int], pydantic.Field(alias="itemsSuccessfulCount")
    ] = None

    state: Optional[GetPlaylistGeneratorState] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None


class GetPlaylistGeneratorType(int, Enum):
    r"""The type of this generator"""

    MINUS_1 = -1
    FORTY_TWO = 42


class GetPlaylistGeneratorItemTypedDict(TypedDict):
    composite: NotRequired[str]
    r"""The composite thumbnail image path"""
    device: NotRequired[GetPlaylistGeneratorDeviceTypedDict]
    id: NotRequired[int]
    location: NotRequired[GetPlaylistGeneratorLocationTypedDict]
    media_settings: NotRequired[MediaSettingsTypedDict]
    policy: NotRequired[GetPlaylistGeneratorPolicyTypedDict]
    status: NotRequired[GetPlaylistGeneratorStatusTypedDict]
    target: NotRequired[str]
    target_tag_id: NotRequired[int]
    r"""The tag of this generator's settings"""
    title: NotRequired[str]
    type: NotRequired[GetPlaylistGeneratorType]
    r"""The type of this generator"""


class GetPlaylistGeneratorItem(BaseModel):
    composite: Optional[str] = None
    r"""The composite thumbnail image path"""

    device: Annotated[
        Optional[GetPlaylistGeneratorDevice], pydantic.Field(alias="Device")
    ] = None

    id: Optional[int] = None

    location: Annotated[
        Optional[GetPlaylistGeneratorLocation], pydantic.Field(alias="Location")
    ] = None

    media_settings: Annotated[
        Optional[MediaSettings], pydantic.Field(alias="MediaSettings")
    ] = None

    policy: Annotated[
        Optional[GetPlaylistGeneratorPolicy], pydantic.Field(alias="Policy")
    ] = None

    status: Annotated[
        Optional[GetPlaylistGeneratorStatus], pydantic.Field(alias="Status")
    ] = None

    target: Optional[str] = None

    target_tag_id: Annotated[Optional[int], pydantic.Field(alias="targetTagID")] = None
    r"""The tag of this generator's settings"""

    title: Optional[str] = None

    type: Optional[GetPlaylistGeneratorType] = None
    r"""The type of this generator"""


class GetPlaylistGeneratorMediaContainerTypedDict(TypedDict):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: NotRequired[str]
    offset: NotRequired[int]
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """
    size: NotRequired[int]
    total_size: NotRequired[int]
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """
    item: NotRequired[List[GetPlaylistGeneratorItemTypedDict]]


class GetPlaylistGeneratorMediaContainer(BaseModel):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: Optional[str] = None

    offset: Optional[int] = None
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """

    size: Optional[int] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """

    item: Annotated[
        Optional[List[GetPlaylistGeneratorItem]], pydantic.Field(alias="Item")
    ] = None


class GetPlaylistGeneratorResponseBodyTypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[GetPlaylistGeneratorMediaContainerTypedDict]


class GetPlaylistGeneratorResponseBody(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[GetPlaylistGeneratorMediaContainer],
        pydantic.Field(alias="MediaContainer"),
    ] = None


class GetPlaylistGeneratorResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetPlaylistGeneratorResponseBodyTypedDict]
    r"""OK"""


class GetPlaylistGeneratorResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetPlaylistGeneratorResponseBody] = None
    r"""OK"""
