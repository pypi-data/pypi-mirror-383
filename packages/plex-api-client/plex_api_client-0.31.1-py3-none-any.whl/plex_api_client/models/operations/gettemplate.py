"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from plex_api_client.models.components import (
    accepts as components_accepts,
    mediagraboperation as components_mediagraboperation,
    setting as components_setting,
)
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, HeaderMetadata, QueryParamMetadata
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetTemplateGlobalsTypedDict(TypedDict):
    accepts: NotRequired[components_accepts.Accepts]
    r"""Indicates the client accepts the indicated media types"""
    client_identifier: NotRequired[str]
    r"""An opaque identifier unique to the client"""
    product: NotRequired[str]
    r"""The name of the client product"""
    version: NotRequired[str]
    r"""The version of the client application"""
    platform: NotRequired[str]
    r"""The platform of the client"""
    platform_version: NotRequired[str]
    r"""The version of the platform"""
    device: NotRequired[str]
    r"""A relatively friendly name for the client device"""
    model: NotRequired[str]
    r"""A potentially less friendly identifier for the device model"""
    device_vendor: NotRequired[str]
    r"""The device vendor"""
    device_name: NotRequired[str]
    r"""A friendly name for the client"""
    marketplace: NotRequired[str]
    r"""The marketplace on which the client application is distributed"""


class GetTemplateGlobals(BaseModel):
    accepts: Annotated[
        Optional[components_accepts.Accepts],
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = components_accepts.Accepts.APPLICATION_XML
    r"""Indicates the client accepts the indicated media types"""

    client_identifier: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Client-Identifier"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""An opaque identifier unique to the client"""

    product: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Product"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The name of the client product"""

    version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the client application"""

    platform: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The platform of the client"""

    platform_version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the platform"""

    device: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A relatively friendly name for the client device"""

    model: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Model"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A potentially less friendly identifier for the device model"""

    device_vendor: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Vendor"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The device vendor"""

    device_name: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Name"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A friendly name for the client"""

    marketplace: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Marketplace"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The marketplace on which the client application is distributed"""


class GetTemplateRequestTypedDict(TypedDict):
    accepts: NotRequired[components_accepts.Accepts]
    r"""Indicates the client accepts the indicated media types"""
    client_identifier: NotRequired[str]
    r"""An opaque identifier unique to the client"""
    product: NotRequired[str]
    r"""The name of the client product"""
    version: NotRequired[str]
    r"""The version of the client application"""
    platform: NotRequired[str]
    r"""The platform of the client"""
    platform_version: NotRequired[str]
    r"""The version of the platform"""
    device: NotRequired[str]
    r"""A relatively friendly name for the client device"""
    model: NotRequired[str]
    r"""A potentially less friendly identifier for the device model"""
    device_vendor: NotRequired[str]
    r"""The device vendor"""
    device_name: NotRequired[str]
    r"""A friendly name for the client"""
    marketplace: NotRequired[str]
    r"""The marketplace on which the client application is distributed"""
    guid: NotRequired[str]
    r"""The guid of the item for which to get the template"""


class GetTemplateRequest(BaseModel):
    accepts: Annotated[
        Optional[components_accepts.Accepts],
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = components_accepts.Accepts.APPLICATION_XML
    r"""Indicates the client accepts the indicated media types"""

    client_identifier: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Client-Identifier"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""An opaque identifier unique to the client"""

    product: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Product"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The name of the client product"""

    version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the client application"""

    platform: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The platform of the client"""

    platform_version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the platform"""

    device: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A relatively friendly name for the client device"""

    model: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Model"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A potentially less friendly identifier for the device model"""

    device_vendor: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Vendor"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The device vendor"""

    device_name: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Name"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A friendly name for the client"""

    marketplace: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Marketplace"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The marketplace on which the client application is distributed"""

    guid: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The guid of the item for which to get the template"""


class MediaSubscriptionTypedDict(TypedDict):
    r"""A media subscription contains a representation of metadata desired to be recorded"""

    title: NotRequired[str]
    r"""The title of this subscription type"""
    type: NotRequired[int]
    r"""Metadata type number"""
    airings_type: NotRequired[str]
    created_at: NotRequired[int]
    directory: NotRequired[Dict[str, Any]]
    r"""Media Matching Hints"""
    duration_total: NotRequired[int]
    r"""Only included if `includeStorage` is specified"""
    key: NotRequired[str]
    library_section_title: NotRequired[str]
    location_path: NotRequired[str]
    media_grab_operation: NotRequired[
        List[components_mediagraboperation.MediaGrabOperationTypedDict]
    ]
    playlist: NotRequired[Dict[str, Any]]
    r"""Media Matching Hints"""
    setting: NotRequired[List[components_setting.SettingTypedDict]]
    storage_total: NotRequired[int]
    r"""Only included if `includeStorage` is specified"""
    target_library_section_id: NotRequired[int]
    r"""Where this subscription will record to"""
    target_section_location_id: NotRequired[int]
    r"""The library section location id for where the item is to be recorded"""
    video: NotRequired[Dict[str, Any]]
    r"""Media Matching Hints"""
    parameters: NotRequired[str]
    r"""Parameter string for creating this subscription"""
    selected: NotRequired[bool]


class MediaSubscription(BaseModel):
    r"""A media subscription contains a representation of metadata desired to be recorded"""

    title: Optional[str] = None
    r"""The title of this subscription type"""

    type: Optional[int] = None
    r"""Metadata type number"""

    airings_type: Annotated[Optional[str], pydantic.Field(alias="airingsType")] = None

    created_at: Annotated[Optional[int], pydantic.Field(alias="createdAt")] = None

    directory: Annotated[
        Optional[Dict[str, Any]], pydantic.Field(alias="Directory")
    ] = None
    r"""Media Matching Hints"""

    duration_total: Annotated[Optional[int], pydantic.Field(alias="durationTotal")] = (
        None
    )
    r"""Only included if `includeStorage` is specified"""

    key: Optional[str] = None

    library_section_title: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionTitle")
    ] = None

    location_path: Annotated[Optional[str], pydantic.Field(alias="locationPath")] = None

    media_grab_operation: Annotated[
        Optional[List[components_mediagraboperation.MediaGrabOperation]],
        pydantic.Field(alias="MediaGrabOperation"),
    ] = None

    playlist: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="Playlist")] = (
        None
    )
    r"""Media Matching Hints"""

    setting: Annotated[
        Optional[List[components_setting.Setting]], pydantic.Field(alias="Setting")
    ] = None

    storage_total: Annotated[Optional[int], pydantic.Field(alias="storageTotal")] = None
    r"""Only included if `includeStorage` is specified"""

    target_library_section_id: Annotated[
        Optional[int], pydantic.Field(alias="targetLibrarySectionID")
    ] = None
    r"""Where this subscription will record to"""

    target_section_location_id: Annotated[
        Optional[int], pydantic.Field(alias="targetSectionLocationID")
    ] = None
    r"""The library section location id for where the item is to be recorded"""

    video: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="Video")] = None
    r"""Media Matching Hints"""

    parameters: Optional[str] = None
    r"""Parameter string for creating this subscription"""

    selected: Optional[bool] = None


class SubscriptionTemplateTypedDict(TypedDict):
    media_subscription: NotRequired[List[MediaSubscriptionTypedDict]]


class SubscriptionTemplate(BaseModel):
    media_subscription: Annotated[
        Optional[List[MediaSubscription]], pydantic.Field(alias="MediaSubscription")
    ] = None


class GetTemplateMediaContainerTypedDict(TypedDict):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: NotRequired[str]
    offset: NotRequired[int]
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """
    size: NotRequired[int]
    total_size: NotRequired[int]
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """
    subscription_template: NotRequired[List[SubscriptionTemplateTypedDict]]


class GetTemplateMediaContainer(BaseModel):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: Optional[str] = None

    offset: Optional[int] = None
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """

    size: Optional[int] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """

    subscription_template: Annotated[
        Optional[List[SubscriptionTemplate]],
        pydantic.Field(alias="SubscriptionTemplate"),
    ] = None


class GetTemplateResponseBodyTypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[GetTemplateMediaContainerTypedDict]


class GetTemplateResponseBody(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[GetTemplateMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class GetTemplateResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    headers: Dict[str, List[str]]
    object: NotRequired[GetTemplateResponseBodyTypedDict]
    r"""OK"""


class GetTemplateResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    headers: Dict[str, List[str]]

    object: Optional[GetTemplateResponseBody] = None
    r"""OK"""
