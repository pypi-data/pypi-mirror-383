"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .metadata import Metadata, MetadataTypedDict
from enum import Enum
from plex_api_client.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Status(str, Enum):
    INACTIVE = "inactive"
    SCHEDULED = "scheduled"
    INPROGRESS = "inprogress"
    COMPLETE = "complete"
    CANCELLED = "cancelled"
    ERROR = "error"
    POSTPROCESSING = "postprocessing"
    PAUSED = "paused"


class MediaGrabOperationTypedDict(TypedDict):
    r"""A media grab opration represents a scheduled or active recording of media"""

    current_size: NotRequired[int]
    grabber_identifier: NotRequired[str]
    grabber_protocol: NotRequired[str]
    id: NotRequired[str]
    key: NotRequired[str]
    media_index: NotRequired[int]
    media_subscription_id: NotRequired[int]
    metadata: NotRequired[MetadataTypedDict]
    r"""Items in a library are referred to as \"metadata items.\" These metadata items are distinct from \"media items\" which represent actual instances of media that can be consumed. Consider a TV library that has a single video file in it for a particular episode of a show. The library has a single media item, but it has three metadata items: one for the show, one for the season, and one for the episode. Consider a movie library that has two video files in it: the same movie, but two different resolutions. The library has a single metadata item for the movie, but that metadata item has two media items, one for each resolution. Additionally a \"media item\" will have one or more \"media parts\" where the the parts are intended to be watched together, such as a CD1 and CD2 parts of the same movie.

    Note that when a metadata item has multiple media items, those media items should be isomorphic. That is, a 4K version and 1080p version of a movie are different versions of the same movie. They have the same duration, same summary, same rating, etc. and they can generally be considered interchangeable. A theatrical release vs. director's cut vs. unrated version on the other hand would be separate metadata items.

    Metadata items can often live in a hierarchy with relationships between them.  For example, the metadata item for an episodes is associated with a season metadata item which is associated with a show metadata item.  A similar hierarchy exists with track, album, and artist and photos and photo album.  The relationships may be expressed via relative terms and absolute terms.  For example, \"leaves\" refer to metadata items which has associated media (there is no media for a season nor show).  A show will have \"children\" in the form of seasons and a season will have \"children\" in the form of episodes and episodes have \"parent\" in the form of a season which has a \"parent\" in the form of a show.  Similarly, a show has \"grandchildren\" in the form of episodse and an episode has a \"grandparent\" in the form of a show.

    """
    percent: NotRequired[float]
    provider: NotRequired[str]
    status: NotRequired[Status]


class MediaGrabOperation(BaseModel):
    r"""A media grab opration represents a scheduled or active recording of media"""

    current_size: Annotated[Optional[int], pydantic.Field(alias="currentSize")] = None

    grabber_identifier: Annotated[
        Optional[str], pydantic.Field(alias="grabberIdentifier")
    ] = None

    grabber_protocol: Annotated[
        Optional[str], pydantic.Field(alias="grabberProtocol")
    ] = None

    id: Optional[str] = None

    key: Optional[str] = None

    media_index: Annotated[Optional[int], pydantic.Field(alias="mediaIndex")] = None

    media_subscription_id: Annotated[
        Optional[int], pydantic.Field(alias="mediaSubscriptionID")
    ] = None

    metadata: Annotated[Optional[Metadata], pydantic.Field(alias="Metadata")] = None
    r"""Items in a library are referred to as \"metadata items.\" These metadata items are distinct from \"media items\" which represent actual instances of media that can be consumed. Consider a TV library that has a single video file in it for a particular episode of a show. The library has a single media item, but it has three metadata items: one for the show, one for the season, and one for the episode. Consider a movie library that has two video files in it: the same movie, but two different resolutions. The library has a single metadata item for the movie, but that metadata item has two media items, one for each resolution. Additionally a \"media item\" will have one or more \"media parts\" where the the parts are intended to be watched together, such as a CD1 and CD2 parts of the same movie.

    Note that when a metadata item has multiple media items, those media items should be isomorphic. That is, a 4K version and 1080p version of a movie are different versions of the same movie. They have the same duration, same summary, same rating, etc. and they can generally be considered interchangeable. A theatrical release vs. director's cut vs. unrated version on the other hand would be separate metadata items.

    Metadata items can often live in a hierarchy with relationships between them.  For example, the metadata item for an episodes is associated with a season metadata item which is associated with a show metadata item.  A similar hierarchy exists with track, album, and artist and photos and photo album.  The relationships may be expressed via relative terms and absolute terms.  For example, \"leaves\" refer to metadata items which has associated media (there is no media for a season nor show).  A show will have \"children\" in the form of seasons and a season will have \"children\" in the form of episodes and episodes have \"parent\" in the form of a season which has a \"parent\" in the form of a show.  Similarly, a show has \"grandchildren\" in the form of episodse and an episode has a \"grandparent\" in the form of a show.

    """

    percent: Optional[float] = None

    provider: Optional[str] = None

    status: Optional[Status] = None
