"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .metadata import Metadata, MetadataTypedDict
from plex_api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SlashGetResponses200MediaContainerTypedDict(TypedDict):
    content: NotRequired[str]
    r"""The flavors of directory found here:
    - Primary: (e.g. all, On Deck) These are still used in some clients to provide \"shortcuts\" to subsets of media. However, with the exception of On Deck, all of them can be created by media queries, and the desire is to allow these to be customized by users.
    - Secondary: These are marked with `\"secondary\": true` and were used by old clients to provide nested menus allowing for primative (but structured) navigation.
    - Special: There is a By Folder entry which allows browsing the media by the underlying filesystem structure, and there's a completely obsolete entry marked `\"search\": true` which used to be used to allow clients to build search dialogs on the fly.
    """
    allow_sync: NotRequired[bool]
    art: NotRequired[str]
    directory: NotRequired[List[MetadataTypedDict]]
    identifier: NotRequired[str]
    library_section_id: NotRequired[int]
    media_tag_prefix: NotRequired[str]
    media_tag_version: NotRequired[int]
    size: NotRequired[int]
    sort_asc: NotRequired[bool]
    thumb: NotRequired[str]
    title1: NotRequired[str]
    view_group: NotRequired[str]
    view_mode: NotRequired[int]


class SlashGetResponses200MediaContainer(BaseModel):
    content: Optional[str] = None
    r"""The flavors of directory found here:
    - Primary: (e.g. all, On Deck) These are still used in some clients to provide \"shortcuts\" to subsets of media. However, with the exception of On Deck, all of them can be created by media queries, and the desire is to allow these to be customized by users.
    - Secondary: These are marked with `\"secondary\": true` and were used by old clients to provide nested menus allowing for primative (but structured) navigation.
    - Special: There is a By Folder entry which allows browsing the media by the underlying filesystem structure, and there's a completely obsolete entry marked `\"search\": true` which used to be used to allow clients to build search dialogs on the fly.
    """

    allow_sync: Annotated[Optional[bool], pydantic.Field(alias="allowSync")] = None

    art: Optional[str] = None

    directory: Annotated[
        Optional[List[Metadata]], pydantic.Field(alias="Directory")
    ] = None

    identifier: Optional[str] = None

    library_section_id: Annotated[
        Optional[int], pydantic.Field(alias="librarySectionID")
    ] = None

    media_tag_prefix: Annotated[
        Optional[str], pydantic.Field(alias="mediaTagPrefix")
    ] = None

    media_tag_version: Annotated[
        Optional[int], pydantic.Field(alias="mediaTagVersion")
    ] = None

    size: Optional[int] = None

    sort_asc: Annotated[Optional[bool], pydantic.Field(alias="sortAsc")] = None

    thumb: Optional[str] = None

    title1: Optional[str] = None

    view_group: Annotated[Optional[str], pydantic.Field(alias="viewGroup")] = None

    view_mode: Annotated[Optional[int], pydantic.Field(alias="viewMode")] = None


class SlashGetResponses200TypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[SlashGetResponses200MediaContainerTypedDict]


class SlashGetResponses200(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[SlashGetResponses200MediaContainer],
        pydantic.Field(alias="MediaContainer"),
    ] = None
