"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .part import Part, PartTypedDict
from plex_api_client.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class MediaTypedDict(TypedDict):
    r"""`Media` represents an one or more media files (parts) and is a child of a metadata item. There aren't necessarily any guaranteed attributes on media elements since the attributes will vary based on the type. The possible attributes are not documented here, but they typically have self-evident names. High-level media information that can be used for badging and flagging, such as `videoResolution` and codecs, is included on the media element."""

    aspect_ratio: NotRequired[float]
    audio_channels: NotRequired[int]
    audio_codec: NotRequired[Any]
    audio_profile: NotRequired[Any]
    bitrate: NotRequired[int]
    container: NotRequired[Any]
    duration: NotRequired[int]
    has64bit_offsets: NotRequired[bool]
    has_voice_activity: NotRequired[bool]
    height: NotRequired[int]
    id: NotRequired[int]
    optimized_for_streaming: NotRequired[bool]
    part: NotRequired[List[PartTypedDict]]
    video_codec: NotRequired[Any]
    video_frame_rate: NotRequired[Any]
    video_profile: NotRequired[Any]
    video_resolution: NotRequired[Any]
    width: NotRequired[int]


class Media(BaseModel):
    r"""`Media` represents an one or more media files (parts) and is a child of a metadata item. There aren't necessarily any guaranteed attributes on media elements since the attributes will vary based on the type. The possible attributes are not documented here, but they typically have self-evident names. High-level media information that can be used for badging and flagging, such as `videoResolution` and codecs, is included on the media element."""

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    aspect_ratio: Annotated[Optional[float], pydantic.Field(alias="aspectRatio")] = None

    audio_channels: Annotated[Optional[int], pydantic.Field(alias="audioChannels")] = (
        None
    )

    audio_codec: Annotated[Optional[Any], pydantic.Field(alias="audioCodec")] = None

    audio_profile: Annotated[Optional[Any], pydantic.Field(alias="audioProfile")] = None

    bitrate: Optional[int] = None

    container: Optional[Any] = None

    duration: Optional[int] = None

    has64bit_offsets: Annotated[
        Optional[bool], pydantic.Field(alias="has64bitOffsets")
    ] = None

    has_voice_activity: Annotated[
        Optional[bool], pydantic.Field(alias="hasVoiceActivity")
    ] = None

    height: Optional[int] = None

    id: Optional[int] = None

    optimized_for_streaming: Annotated[
        Optional[bool], pydantic.Field(alias="optimizedForStreaming")
    ] = None

    part: Annotated[Optional[List[Part]], pydantic.Field(alias="Part")] = None

    video_codec: Annotated[Optional[Any], pydantic.Field(alias="videoCodec")] = None

    video_frame_rate: Annotated[
        Optional[Any], pydantic.Field(alias="videoFrameRate")
    ] = None

    video_profile: Annotated[Optional[Any], pydantic.Field(alias="videoProfile")] = None

    video_resolution: Annotated[
        Optional[Any], pydantic.Field(alias="videoResolution")
    ] = None

    width: Optional[int] = None

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
