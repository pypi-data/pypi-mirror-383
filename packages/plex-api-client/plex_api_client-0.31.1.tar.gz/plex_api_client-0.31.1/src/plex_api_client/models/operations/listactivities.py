"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from plex_api_client.types import BaseModel
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ActivityTypedDict(TypedDict):
    cancellable: NotRequired[bool]
    r"""Indicates whether this activity can be cancelled"""
    context: NotRequired[Dict[str, Any]]
    r"""An object with additional values"""
    progress: NotRequired[float]
    r"""A progress percentage.  A value of -1 means the progress is indeterminate"""
    response: NotRequired[Dict[str, Any]]
    r"""An object with the response to the async opperation"""
    subtitle: NotRequired[str]
    r"""A user-friendly sub-title for this activity"""
    title: NotRequired[str]
    r"""A user-friendly title for this activity"""
    type: NotRequired[str]
    r"""The type of activity"""
    user_id: NotRequired[int]
    r"""The user this activity belongs to"""
    uuid: NotRequired[str]
    r"""The ID of the activity"""


class Activity(BaseModel):
    cancellable: Optional[bool] = None
    r"""Indicates whether this activity can be cancelled"""

    context: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="Context")] = None
    r"""An object with additional values"""

    progress: Optional[float] = None
    r"""A progress percentage.  A value of -1 means the progress is indeterminate"""

    response: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="Response")] = (
        None
    )
    r"""An object with the response to the async opperation"""

    subtitle: Optional[str] = None
    r"""A user-friendly sub-title for this activity"""

    title: Optional[str] = None
    r"""A user-friendly title for this activity"""

    type: Optional[str] = None
    r"""The type of activity"""

    user_id: Annotated[Optional[int], pydantic.Field(alias="userID")] = None
    r"""The user this activity belongs to"""

    uuid: Optional[str] = None
    r"""The ID of the activity"""


class ListActivitiesMediaContainerTypedDict(TypedDict):
    activity: NotRequired[List[ActivityTypedDict]]


class ListActivitiesMediaContainer(BaseModel):
    activity: Annotated[Optional[List[Activity]], pydantic.Field(alias="Activity")] = (
        None
    )


class ListActivitiesResponseBodyTypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[ListActivitiesMediaContainerTypedDict]


class ListActivitiesResponseBody(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[ListActivitiesMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class ListActivitiesResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[ListActivitiesResponseBodyTypedDict]
    r"""OK"""


class ListActivitiesResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[ListActivitiesResponseBody] = None
    r"""OK"""
