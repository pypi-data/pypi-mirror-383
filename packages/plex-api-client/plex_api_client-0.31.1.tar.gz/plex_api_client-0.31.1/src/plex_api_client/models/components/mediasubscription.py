"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .mediagraboperation import MediaGrabOperation, MediaGrabOperationTypedDict
from .setting import Setting, SettingTypedDict
from enum import Enum
from plex_api_client.types import BaseModel
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AiringsType(str, Enum):
    NEW_AIRINGS_ONLY = "New Airings Only"
    NEW_AND_REPEAT_AIRINGS = "New and Repeat Airings"


class MediaSubscriptionTypedDict(TypedDict):
    r"""A media subscription contains a representation of metadata desired to be recorded"""

    title: NotRequired[str]
    type: NotRequired[int]
    r"""The metadata type of the root item of the subscription"""
    airings_type: NotRequired[AiringsType]
    created_at: NotRequired[int]
    directory: NotRequired[Dict[str, Any]]
    r"""Media Matching Hints"""
    duration_total: NotRequired[int]
    r"""Only included if `includeStorage` is specified"""
    key: NotRequired[str]
    library_section_title: NotRequired[str]
    location_path: NotRequired[str]
    media_grab_operation: NotRequired[List[MediaGrabOperationTypedDict]]
    playlist: NotRequired[Dict[str, Any]]
    r"""Media Matching Hints"""
    setting: NotRequired[List[SettingTypedDict]]
    storage_total: NotRequired[int]
    r"""Only included if `includeStorage` is specified"""
    target_library_section_id: NotRequired[int]
    r"""The library section id for where the item is to be recorded"""
    target_section_location_id: NotRequired[int]
    r"""The library section location id for where the item is to be recorded"""
    video: NotRequired[Dict[str, Any]]
    r"""Media Matching Hints"""


class MediaSubscription(BaseModel):
    r"""A media subscription contains a representation of metadata desired to be recorded"""

    title: Optional[str] = None

    type: Optional[int] = None
    r"""The metadata type of the root item of the subscription"""

    airings_type: Annotated[
        Optional[AiringsType], pydantic.Field(alias="airingsType")
    ] = None

    created_at: Annotated[Optional[int], pydantic.Field(alias="createdAt")] = None

    directory: Annotated[
        Optional[Dict[str, Any]], pydantic.Field(alias="Directory")
    ] = None
    r"""Media Matching Hints"""

    duration_total: Annotated[Optional[int], pydantic.Field(alias="durationTotal")] = (
        None
    )
    r"""Only included if `includeStorage` is specified"""

    key: Optional[str] = None

    library_section_title: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionTitle")
    ] = None

    location_path: Annotated[Optional[str], pydantic.Field(alias="locationPath")] = None

    media_grab_operation: Annotated[
        Optional[List[MediaGrabOperation]], pydantic.Field(alias="MediaGrabOperation")
    ] = None

    playlist: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="Playlist")] = (
        None
    )
    r"""Media Matching Hints"""

    setting: Annotated[Optional[List[Setting]], pydantic.Field(alias="Setting")] = None

    storage_total: Annotated[Optional[int], pydantic.Field(alias="storageTotal")] = None
    r"""Only included if `includeStorage` is specified"""

    target_library_section_id: Annotated[
        Optional[int], pydantic.Field(alias="targetLibrarySectionID")
    ] = None
    r"""The library section id for where the item is to be recorded"""

    target_section_location_id: Annotated[
        Optional[int], pydantic.Field(alias="targetSectionLocationID")
    ] = None
    r"""The library section location id for where the item is to be recorded"""

    video: Annotated[Optional[Dict[str, Any]], pydantic.Field(alias="Video")] = None
    r"""Media Matching Hints"""
