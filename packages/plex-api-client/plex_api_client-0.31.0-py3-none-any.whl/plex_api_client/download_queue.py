"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from plex_api_client import utils
from plex_api_client._hooks import HookContext
from plex_api_client.models import components, errors, operations
from plex_api_client.types import BaseModel, OptionalNullable, UNSET
from plex_api_client.utils.unmarshal_json_response import unmarshal_json_response
from typing import Mapping, Optional, Union, cast


class DownloadQueue(BaseSDK):
    r"""API Operations against the Download Queue"""

    def create_download_queue(
        self,
        *,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.CreateDownloadQueueResponse:
        r"""Create download queue

        Available: 0.2.0

        Creates a download queue for this client if one doesn't exist, or returns the existing queue for this client and user.


        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)
        req = self._build_request(
            method="POST",
            path="/downloadQueue",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="createDownloadQueue",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.CreateDownloadQueueResponse(
                object=unmarshal_json_response(
                    Optional[operations.CreateDownloadQueueResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def create_download_queue_async(
        self,
        *,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.CreateDownloadQueueResponse:
        r"""Create download queue

        Available: 0.2.0

        Creates a download queue for this client if one doesn't exist, or returns the existing queue for this client and user.


        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)
        req = self._build_request_async(
            method="POST",
            path="/downloadQueue",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="createDownloadQueue",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.CreateDownloadQueueResponse(
                object=unmarshal_json_response(
                    Optional[operations.CreateDownloadQueueResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def get_download_queue(
        self,
        *,
        request: Union[
            operations.GetDownloadQueueRequest,
            operations.GetDownloadQueueRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetDownloadQueueResponse:
        r"""Get a download queue

        Available: 0.2.0

        Get a download queue by its id


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetDownloadQueueRequest)
        request = cast(operations.GetDownloadQueueRequest, request)

        req = self._build_request(
            method="GET",
            path="/downloadQueue/{queueId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.GetDownloadQueueGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getDownloadQueue",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetDownloadQueueResponse(
                object=unmarshal_json_response(
                    Optional[operations.GetDownloadQueueResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def get_download_queue_async(
        self,
        *,
        request: Union[
            operations.GetDownloadQueueRequest,
            operations.GetDownloadQueueRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetDownloadQueueResponse:
        r"""Get a download queue

        Available: 0.2.0

        Get a download queue by its id


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetDownloadQueueRequest)
        request = cast(operations.GetDownloadQueueRequest, request)

        req = self._build_request_async(
            method="GET",
            path="/downloadQueue/{queueId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.GetDownloadQueueGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getDownloadQueue",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetDownloadQueueResponse(
                object=unmarshal_json_response(
                    Optional[operations.GetDownloadQueueResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def add_download_queue_items(
        self,
        *,
        request: Union[
            operations.AddDownloadQueueItemsRequest,
            operations.AddDownloadQueueItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.AddDownloadQueueItemsResponse:
        r"""Add to download queue

        Available: 0.2.0

        Add items to the download queue


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.AddDownloadQueueItemsRequest)
        request = cast(operations.AddDownloadQueueItemsRequest, request)

        req = self._build_request(
            method="POST",
            path="/downloadQueue/{queueId}/add",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.AddDownloadQueueItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="addDownloadQueueItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.AddDownloadQueueItemsResponse(
                object=unmarshal_json_response(
                    Optional[operations.AddDownloadQueueItemsResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def add_download_queue_items_async(
        self,
        *,
        request: Union[
            operations.AddDownloadQueueItemsRequest,
            operations.AddDownloadQueueItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.AddDownloadQueueItemsResponse:
        r"""Add to download queue

        Available: 0.2.0

        Add items to the download queue


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.AddDownloadQueueItemsRequest)
        request = cast(operations.AddDownloadQueueItemsRequest, request)

        req = self._build_request_async(
            method="POST",
            path="/downloadQueue/{queueId}/add",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.AddDownloadQueueItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="addDownloadQueueItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.AddDownloadQueueItemsResponse(
                object=unmarshal_json_response(
                    Optional[operations.AddDownloadQueueItemsResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def list_download_queue_items(
        self,
        *,
        request: Union[
            operations.ListDownloadQueueItemsRequest,
            operations.ListDownloadQueueItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.ListDownloadQueueItemsResponse:
        r"""Get download queue items

        Available: 0.2.0

        Get items from a download queue


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.ListDownloadQueueItemsRequest)
        request = cast(operations.ListDownloadQueueItemsRequest, request)

        req = self._build_request(
            method="GET",
            path="/downloadQueue/{queueId}/items",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.ListDownloadQueueItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="listDownloadQueueItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.ListDownloadQueueItemsResponse(
                object=unmarshal_json_response(
                    Optional[operations.ListDownloadQueueItemsResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def list_download_queue_items_async(
        self,
        *,
        request: Union[
            operations.ListDownloadQueueItemsRequest,
            operations.ListDownloadQueueItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.ListDownloadQueueItemsResponse:
        r"""Get download queue items

        Available: 0.2.0

        Get items from a download queue


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.ListDownloadQueueItemsRequest)
        request = cast(operations.ListDownloadQueueItemsRequest, request)

        req = self._build_request_async(
            method="GET",
            path="/downloadQueue/{queueId}/items",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.ListDownloadQueueItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="listDownloadQueueItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.ListDownloadQueueItemsResponse(
                object=unmarshal_json_response(
                    Optional[operations.ListDownloadQueueItemsResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def get_item_decision(
        self,
        *,
        request: Union[
            operations.GetItemDecisionRequest,
            operations.GetItemDecisionRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetItemDecisionResponse:
        r"""Grab download queue item decision

        Available: 0.2.0

        Grab the decision for a download queue item


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetItemDecisionRequest)
        request = cast(operations.GetItemDecisionRequest, request)

        req = self._build_request(
            method="GET",
            path="/downloadQueue/{queueId}/item/{itemId}/decision",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.GetItemDecisionGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getItemDecision",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetItemDecisionResponse(
                media_container_with_decision=unmarshal_json_response(
                    Optional[components.MediaContainerWithDecision], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def get_item_decision_async(
        self,
        *,
        request: Union[
            operations.GetItemDecisionRequest,
            operations.GetItemDecisionRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetItemDecisionResponse:
        r"""Grab download queue item decision

        Available: 0.2.0

        Grab the decision for a download queue item


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetItemDecisionRequest)
        request = cast(operations.GetItemDecisionRequest, request)

        req = self._build_request_async(
            method="GET",
            path="/downloadQueue/{queueId}/item/{itemId}/decision",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.GetItemDecisionGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getItemDecision",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetItemDecisionResponse(
                media_container_with_decision=unmarshal_json_response(
                    Optional[components.MediaContainerWithDecision], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def get_download_queue_media(
        self,
        *,
        request: Union[
            operations.GetDownloadQueueMediaRequest,
            operations.GetDownloadQueueMediaRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetDownloadQueueMediaResponse:
        r"""Grab download queue media

        Available: 0.2.0

        Grab the media for a download queue item


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetDownloadQueueMediaRequest)
        request = cast(operations.GetDownloadQueueMediaRequest, request)

        req = self._build_request(
            method="GET",
            path="/downloadQueue/{queueId}/item/{itemId}/media",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.GetDownloadQueueMediaGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getDownloadQueueMedia",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "503", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return operations.GetDownloadQueueMediaResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
                headers={},
            )
        if utils.match_response(http_res, "503", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def get_download_queue_media_async(
        self,
        *,
        request: Union[
            operations.GetDownloadQueueMediaRequest,
            operations.GetDownloadQueueMediaRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetDownloadQueueMediaResponse:
        r"""Grab download queue media

        Available: 0.2.0

        Grab the media for a download queue item


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetDownloadQueueMediaRequest)
        request = cast(operations.GetDownloadQueueMediaRequest, request)

        req = self._build_request_async(
            method="GET",
            path="/downloadQueue/{queueId}/item/{itemId}/media",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.GetDownloadQueueMediaGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getDownloadQueueMedia",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "503", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return operations.GetDownloadQueueMediaResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
                headers={},
            )
        if utils.match_response(http_res, "503", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def remove_download_queue_items(
        self,
        *,
        request: Union[
            operations.RemoveDownloadQueueItemsRequest,
            operations.RemoveDownloadQueueItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.RemoveDownloadQueueItemsResponse:
        r"""Delete download queue items

        delete items from a download queue

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, operations.RemoveDownloadQueueItemsRequest
            )
        request = cast(operations.RemoveDownloadQueueItemsRequest, request)

        req = self._build_request(
            method="DELETE",
            path="/downloadQueue/{queueId}/items/{itemId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.RemoveDownloadQueueItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="removeDownloadQueueItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return operations.RemoveDownloadQueueItemsResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def remove_download_queue_items_async(
        self,
        *,
        request: Union[
            operations.RemoveDownloadQueueItemsRequest,
            operations.RemoveDownloadQueueItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.RemoveDownloadQueueItemsResponse:
        r"""Delete download queue items

        delete items from a download queue

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, operations.RemoveDownloadQueueItemsRequest
            )
        request = cast(operations.RemoveDownloadQueueItemsRequest, request)

        req = self._build_request_async(
            method="DELETE",
            path="/downloadQueue/{queueId}/items/{itemId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.RemoveDownloadQueueItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="removeDownloadQueueItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return operations.RemoveDownloadQueueItemsResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def get_download_queue_items(
        self,
        *,
        request: Union[
            operations.GetDownloadQueueItemsRequest,
            operations.GetDownloadQueueItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetDownloadQueueItemsResponse:
        r"""Get download queue items

        Available: 0.2.0

        Get items from a download queue


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetDownloadQueueItemsRequest)
        request = cast(operations.GetDownloadQueueItemsRequest, request)

        req = self._build_request(
            method="GET",
            path="/downloadQueue/{queueId}/items/{itemId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.GetDownloadQueueItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getDownloadQueueItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetDownloadQueueItemsResponse(
                object=unmarshal_json_response(
                    Optional[operations.GetDownloadQueueItemsResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def get_download_queue_items_async(
        self,
        *,
        request: Union[
            operations.GetDownloadQueueItemsRequest,
            operations.GetDownloadQueueItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetDownloadQueueItemsResponse:
        r"""Get download queue items

        Available: 0.2.0

        Get items from a download queue


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetDownloadQueueItemsRequest)
        request = cast(operations.GetDownloadQueueItemsRequest, request)

        req = self._build_request_async(
            method="GET",
            path="/downloadQueue/{queueId}/items/{itemId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.GetDownloadQueueItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getDownloadQueueItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetDownloadQueueItemsResponse(
                object=unmarshal_json_response(
                    Optional[operations.GetDownloadQueueItemsResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def restart_processing_download_queue_items(
        self,
        *,
        request: Union[
            operations.RestartProcessingDownloadQueueItemsRequest,
            operations.RestartProcessingDownloadQueueItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.RestartProcessingDownloadQueueItemsResponse:
        r"""Restart processing of items from the decision

        Available: 0.2.0

        Reprocess download queue items with previous decision parameters


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, operations.RestartProcessingDownloadQueueItemsRequest
            )
        request = cast(operations.RestartProcessingDownloadQueueItemsRequest, request)

        req = self._build_request(
            method="POST",
            path="/downloadQueue/{queueId}/items/{itemId}/restart",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.RestartProcessingDownloadQueueItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="restartProcessingDownloadQueueItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return operations.RestartProcessingDownloadQueueItemsResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def restart_processing_download_queue_items_async(
        self,
        *,
        request: Union[
            operations.RestartProcessingDownloadQueueItemsRequest,
            operations.RestartProcessingDownloadQueueItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.RestartProcessingDownloadQueueItemsResponse:
        r"""Restart processing of items from the decision

        Available: 0.2.0

        Reprocess download queue items with previous decision parameters


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, operations.RestartProcessingDownloadQueueItemsRequest
            )
        request = cast(operations.RestartProcessingDownloadQueueItemsRequest, request)

        req = self._build_request_async(
            method="POST",
            path="/downloadQueue/{queueId}/items/{itemId}/restart",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.RestartProcessingDownloadQueueItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="restartProcessingDownloadQueueItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return operations.RestartProcessingDownloadQueueItemsResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)
