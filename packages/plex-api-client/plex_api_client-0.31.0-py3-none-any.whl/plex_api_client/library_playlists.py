"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from plex_api_client import utils
from plex_api_client._hooks import HookContext
from plex_api_client.models import components, errors, operations
from plex_api_client.types import BaseModel, OptionalNullable, UNSET
from plex_api_client.utils.unmarshal_json_response import unmarshal_json_response
from typing import Mapping, Optional, Union, cast


class LibraryPlaylists(BaseSDK):
    r"""Endpoints for manipulating playlists."""

    def create_playlist(
        self,
        *,
        request: Union[
            operations.CreatePlaylistRequest, operations.CreatePlaylistRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.CreatePlaylistResponse:
        r"""Create a Playlist

        Create a new playlist. By default the playlist is blank.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.CreatePlaylistRequest)
        request = cast(operations.CreatePlaylistRequest, request)

        req = self._build_request(
            method="POST",
            path="/playlists",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.CreatePlaylistGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="createPlaylist",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.CreatePlaylistResponse(
                media_container_with_playlist_metadata=unmarshal_json_response(
                    Optional[components.MediaContainerWithPlaylistMetadata], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def create_playlist_async(
        self,
        *,
        request: Union[
            operations.CreatePlaylistRequest, operations.CreatePlaylistRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.CreatePlaylistResponse:
        r"""Create a Playlist

        Create a new playlist. By default the playlist is blank.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.CreatePlaylistRequest)
        request = cast(operations.CreatePlaylistRequest, request)

        req = self._build_request_async(
            method="POST",
            path="/playlists",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.CreatePlaylistGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="createPlaylist",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.CreatePlaylistResponse(
                media_container_with_playlist_metadata=unmarshal_json_response(
                    Optional[components.MediaContainerWithPlaylistMetadata], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def upload_playlist(
        self,
        *,
        request: Union[
            operations.UploadPlaylistRequest, operations.UploadPlaylistRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.UploadPlaylistResponse:
        r"""Upload

        Imports m3u playlists by passing a path on the server to scan for m3u-formatted playlist files, or a path to a single playlist file.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.UploadPlaylistRequest)
        request = cast(operations.UploadPlaylistRequest, request)

        req = self._build_request(
            method="POST",
            path="/playlists/upload",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.UploadPlaylistGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="uploadPlaylist",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["403", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return operations.UploadPlaylistResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["403", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def upload_playlist_async(
        self,
        *,
        request: Union[
            operations.UploadPlaylistRequest, operations.UploadPlaylistRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.UploadPlaylistResponse:
        r"""Upload

        Imports m3u playlists by passing a path on the server to scan for m3u-formatted playlist files, or a path to a single playlist file.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.UploadPlaylistRequest)
        request = cast(operations.UploadPlaylistRequest, request)

        req = self._build_request_async(
            method="POST",
            path="/playlists/upload",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.UploadPlaylistGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="uploadPlaylist",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["403", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return operations.UploadPlaylistResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["403", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def delete_playlist(
        self,
        *,
        request: Union[
            operations.DeletePlaylistRequest, operations.DeletePlaylistRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.DeletePlaylistResponse:
        r"""Delete a Playlist

        Deletes a playlist by provided id

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.DeletePlaylistRequest)
        request = cast(operations.DeletePlaylistRequest, request)

        req = self._build_request(
            method="DELETE",
            path="/playlists/{playlistId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.DeletePlaylistGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="deletePlaylist",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "204", "*"):
            return operations.DeletePlaylistResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def delete_playlist_async(
        self,
        *,
        request: Union[
            operations.DeletePlaylistRequest, operations.DeletePlaylistRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.DeletePlaylistResponse:
        r"""Delete a Playlist

        Deletes a playlist by provided id

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.DeletePlaylistRequest)
        request = cast(operations.DeletePlaylistRequest, request)

        req = self._build_request_async(
            method="DELETE",
            path="/playlists/{playlistId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.DeletePlaylistGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="deletePlaylist",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "204", "*"):
            return operations.DeletePlaylistResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def update_playlist(
        self,
        *,
        request: Union[
            operations.UpdatePlaylistRequest, operations.UpdatePlaylistRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.UpdatePlaylistResponse:
        r"""Editing a Playlist

        Edits a playlist in the same manner as [editing metadata](#tag/Provider/operation/metadataPutItem)

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.UpdatePlaylistRequest)
        request = cast(operations.UpdatePlaylistRequest, request)

        req = self._build_request(
            method="PUT",
            path="/playlists/{playlistId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.UpdatePlaylistGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="updatePlaylist",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "204", "*"):
            return operations.UpdatePlaylistResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def update_playlist_async(
        self,
        *,
        request: Union[
            operations.UpdatePlaylistRequest, operations.UpdatePlaylistRequestTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.UpdatePlaylistResponse:
        r"""Editing a Playlist

        Edits a playlist in the same manner as [editing metadata](#tag/Provider/operation/metadataPutItem)

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.UpdatePlaylistRequest)
        request = cast(operations.UpdatePlaylistRequest, request)

        req = self._build_request_async(
            method="PUT",
            path="/playlists/{playlistId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.UpdatePlaylistGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="updatePlaylist",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "204", "*"):
            return operations.UpdatePlaylistResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def get_playlist_generators(
        self,
        *,
        request: Union[
            operations.GetPlaylistGeneratorsRequest,
            operations.GetPlaylistGeneratorsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetPlaylistGeneratorsResponse:
        r"""Get a playlist's generators

        Get all the generators in a playlist

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetPlaylistGeneratorsRequest)
        request = cast(operations.GetPlaylistGeneratorsRequest, request)

        req = self._build_request(
            method="GET",
            path="/playlists/{playlistId}/generators",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.GetPlaylistGeneratorsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getPlaylistGenerators",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetPlaylistGeneratorsResponse(
                object=unmarshal_json_response(
                    Optional[operations.GetPlaylistGeneratorsResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def get_playlist_generators_async(
        self,
        *,
        request: Union[
            operations.GetPlaylistGeneratorsRequest,
            operations.GetPlaylistGeneratorsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetPlaylistGeneratorsResponse:
        r"""Get a playlist's generators

        Get all the generators in a playlist

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetPlaylistGeneratorsRequest)
        request = cast(operations.GetPlaylistGeneratorsRequest, request)

        req = self._build_request_async(
            method="GET",
            path="/playlists/{playlistId}/generators",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.GetPlaylistGeneratorsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getPlaylistGenerators",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetPlaylistGeneratorsResponse(
                object=unmarshal_json_response(
                    Optional[operations.GetPlaylistGeneratorsResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def clear_playlist_items(
        self,
        *,
        request: Union[
            operations.ClearPlaylistItemsRequest,
            operations.ClearPlaylistItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.ClearPlaylistItemsResponse:
        r"""Clearing a playlist

        Clears a playlist, only works with dumb playlists. Returns the playlist.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.ClearPlaylistItemsRequest)
        request = cast(operations.ClearPlaylistItemsRequest, request)

        req = self._build_request(
            method="DELETE",
            path="/playlists/{playlistId}/items",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.ClearPlaylistItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="clearPlaylistItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.ClearPlaylistItemsResponse(
                media_container_with_playlist_metadata=unmarshal_json_response(
                    Optional[components.MediaContainerWithPlaylistMetadata], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def clear_playlist_items_async(
        self,
        *,
        request: Union[
            operations.ClearPlaylistItemsRequest,
            operations.ClearPlaylistItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.ClearPlaylistItemsResponse:
        r"""Clearing a playlist

        Clears a playlist, only works with dumb playlists. Returns the playlist.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.ClearPlaylistItemsRequest)
        request = cast(operations.ClearPlaylistItemsRequest, request)

        req = self._build_request_async(
            method="DELETE",
            path="/playlists/{playlistId}/items",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.ClearPlaylistItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="clearPlaylistItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.ClearPlaylistItemsResponse(
                media_container_with_playlist_metadata=unmarshal_json_response(
                    Optional[components.MediaContainerWithPlaylistMetadata], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def add_playlist_items(
        self,
        *,
        request: Union[
            operations.AddPlaylistItemsRequest,
            operations.AddPlaylistItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.AddPlaylistItemsResponse:
        r"""Adding to  a Playlist

        Adds a generator to a playlist, same parameters as the POST above. With a dumb playlist, this adds the specified items to the playlist. With a smart playlist, passing a new `uri` parameter replaces the rules for the playlist. Returns the playlist.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.AddPlaylistItemsRequest)
        request = cast(operations.AddPlaylistItemsRequest, request)

        req = self._build_request(
            method="PUT",
            path="/playlists/{playlistId}/items",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.AddPlaylistItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="addPlaylistItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.AddPlaylistItemsResponse(
                media_container_with_playlist_metadata=unmarshal_json_response(
                    Optional[components.MediaContainerWithPlaylistMetadata], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def add_playlist_items_async(
        self,
        *,
        request: Union[
            operations.AddPlaylistItemsRequest,
            operations.AddPlaylistItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.AddPlaylistItemsResponse:
        r"""Adding to  a Playlist

        Adds a generator to a playlist, same parameters as the POST above. With a dumb playlist, this adds the specified items to the playlist. With a smart playlist, passing a new `uri` parameter replaces the rules for the playlist. Returns the playlist.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.AddPlaylistItemsRequest)
        request = cast(operations.AddPlaylistItemsRequest, request)

        req = self._build_request_async(
            method="PUT",
            path="/playlists/{playlistId}/items",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.AddPlaylistItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="addPlaylistItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.AddPlaylistItemsResponse(
                media_container_with_playlist_metadata=unmarshal_json_response(
                    Optional[components.MediaContainerWithPlaylistMetadata], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def delete_playlist_item(
        self,
        *,
        request: Union[
            operations.DeletePlaylistItemRequest,
            operations.DeletePlaylistItemRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.DeletePlaylistItemResponse:
        r"""Delete a Generator

        Deletes an item from a playlist. Only works with dumb playlists.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.DeletePlaylistItemRequest)
        request = cast(operations.DeletePlaylistItemRequest, request)

        req = self._build_request(
            method="DELETE",
            path="/playlists/{playlistId}/items/{generatorId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.DeletePlaylistItemGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="deletePlaylistItem",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.DeletePlaylistItemResponse(
                media_container_with_playlist_metadata=unmarshal_json_response(
                    Optional[components.MediaContainerWithPlaylistMetadata], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def delete_playlist_item_async(
        self,
        *,
        request: Union[
            operations.DeletePlaylistItemRequest,
            operations.DeletePlaylistItemRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.DeletePlaylistItemResponse:
        r"""Delete a Generator

        Deletes an item from a playlist. Only works with dumb playlists.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.DeletePlaylistItemRequest)
        request = cast(operations.DeletePlaylistItemRequest, request)

        req = self._build_request_async(
            method="DELETE",
            path="/playlists/{playlistId}/items/{generatorId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.DeletePlaylistItemGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="deletePlaylistItem",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.DeletePlaylistItemResponse(
                media_container_with_playlist_metadata=unmarshal_json_response(
                    Optional[components.MediaContainerWithPlaylistMetadata], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def get_playlist_generator(
        self,
        *,
        request: Union[
            operations.GetPlaylistGeneratorRequest,
            operations.GetPlaylistGeneratorRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetPlaylistGeneratorResponse:
        r"""Get a playlist generator

        Get a playlist's generator.  Only used for optimized versions

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetPlaylistGeneratorRequest)
        request = cast(operations.GetPlaylistGeneratorRequest, request)

        req = self._build_request(
            method="GET",
            path="/playlists/{playlistId}/items/{generatorId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.GetPlaylistGeneratorGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getPlaylistGenerator",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetPlaylistGeneratorResponse(
                object=unmarshal_json_response(
                    Optional[operations.GetPlaylistGeneratorResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def get_playlist_generator_async(
        self,
        *,
        request: Union[
            operations.GetPlaylistGeneratorRequest,
            operations.GetPlaylistGeneratorRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetPlaylistGeneratorResponse:
        r"""Get a playlist generator

        Get a playlist's generator.  Only used for optimized versions

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetPlaylistGeneratorRequest)
        request = cast(operations.GetPlaylistGeneratorRequest, request)

        req = self._build_request_async(
            method="GET",
            path="/playlists/{playlistId}/items/{generatorId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.GetPlaylistGeneratorGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getPlaylistGenerator",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetPlaylistGeneratorResponse(
                object=unmarshal_json_response(
                    Optional[operations.GetPlaylistGeneratorResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def modify_playlist_generator(
        self,
        *,
        request: Union[
            operations.ModifyPlaylistGeneratorRequest,
            operations.ModifyPlaylistGeneratorRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.ModifyPlaylistGeneratorResponse:
        r"""Modify a Generator

        Modify a playlist generator.  Only used for optimizer

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, operations.ModifyPlaylistGeneratorRequest
            )
        request = cast(operations.ModifyPlaylistGeneratorRequest, request)

        req = self._build_request(
            method="PUT",
            path="/playlists/{playlistId}/items/{generatorId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.ModifyPlaylistGeneratorGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="modifyPlaylistGenerator",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.ModifyPlaylistGeneratorResponse(
                media_container_with_playlist_metadata=unmarshal_json_response(
                    Optional[components.MediaContainerWithPlaylistMetadata], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def modify_playlist_generator_async(
        self,
        *,
        request: Union[
            operations.ModifyPlaylistGeneratorRequest,
            operations.ModifyPlaylistGeneratorRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.ModifyPlaylistGeneratorResponse:
        r"""Modify a Generator

        Modify a playlist generator.  Only used for optimizer

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, operations.ModifyPlaylistGeneratorRequest
            )
        request = cast(operations.ModifyPlaylistGeneratorRequest, request)

        req = self._build_request_async(
            method="PUT",
            path="/playlists/{playlistId}/items/{generatorId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.ModifyPlaylistGeneratorGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="modifyPlaylistGenerator",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.ModifyPlaylistGeneratorResponse(
                media_container_with_playlist_metadata=unmarshal_json_response(
                    Optional[components.MediaContainerWithPlaylistMetadata], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def get_playlist_generator_items(
        self,
        *,
        request: Union[
            operations.GetPlaylistGeneratorItemsRequest,
            operations.GetPlaylistGeneratorItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetPlaylistGeneratorItemsResponse:
        r"""Get a playlist generator's items

        Get a playlist generator's items

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, operations.GetPlaylistGeneratorItemsRequest
            )
        request = cast(operations.GetPlaylistGeneratorItemsRequest, request)

        req = self._build_request(
            method="GET",
            path="/playlists/{playlistId}/items/{generatorId}/items",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.GetPlaylistGeneratorItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getPlaylistGeneratorItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetPlaylistGeneratorItemsResponse(
                object=unmarshal_json_response(
                    Optional[operations.GetPlaylistGeneratorItemsResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def get_playlist_generator_items_async(
        self,
        *,
        request: Union[
            operations.GetPlaylistGeneratorItemsRequest,
            operations.GetPlaylistGeneratorItemsRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.GetPlaylistGeneratorItemsResponse:
        r"""Get a playlist generator's items

        Get a playlist generator's items

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, operations.GetPlaylistGeneratorItemsRequest
            )
        request = cast(operations.GetPlaylistGeneratorItemsRequest, request)

        req = self._build_request_async(
            method="GET",
            path="/playlists/{playlistId}/items/{generatorId}/items",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.GetPlaylistGeneratorItemsGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getPlaylistGeneratorItems",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetPlaylistGeneratorItemsResponse(
                object=unmarshal_json_response(
                    Optional[operations.GetPlaylistGeneratorItemsResponseBody], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def move_playlist_item(
        self,
        *,
        request: Union[
            operations.MovePlaylistItemRequest,
            operations.MovePlaylistItemRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.MovePlaylistItemResponse:
        r"""Moving items in a playlist

        Moves an item in a playlist. Only works with dumb playlists.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.MovePlaylistItemRequest)
        request = cast(operations.MovePlaylistItemRequest, request)

        req = self._build_request(
            method="PUT",
            path="/playlists/{playlistId}/items/{playlistItemId}/move",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.MovePlaylistItemGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="movePlaylistItem",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.MovePlaylistItemResponse(
                media_container_with_playlist_metadata=unmarshal_json_response(
                    Optional[components.MediaContainerWithPlaylistMetadata], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def move_playlist_item_async(
        self,
        *,
        request: Union[
            operations.MovePlaylistItemRequest,
            operations.MovePlaylistItemRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.MovePlaylistItemResponse:
        r"""Moving items in a playlist

        Moves an item in a playlist. Only works with dumb playlists.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.MovePlaylistItemRequest)
        request = cast(operations.MovePlaylistItemRequest, request)

        req = self._build_request_async(
            method="PUT",
            path="/playlists/{playlistId}/items/{playlistItemId}/move",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            _globals=operations.MovePlaylistItemGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="movePlaylistItem",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.MovePlaylistItemResponse(
                media_container_with_playlist_metadata=unmarshal_json_response(
                    Optional[components.MediaContainerWithPlaylistMetadata], http_res
                ),
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    def refresh_playlist(
        self,
        *,
        request: Union[
            operations.RefreshPlaylistRequest,
            operations.RefreshPlaylistRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.RefreshPlaylistResponse:
        r"""Reprocess a generator

        Make a generator reprocess (refresh)

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.RefreshPlaylistRequest)
        request = cast(operations.RefreshPlaylistRequest, request)

        req = self._build_request(
            method="PUT",
            path="/playlists/{playlistId}/items/{generatorId}/{metadataId}/{action}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.RefreshPlaylistGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="refreshPlaylist",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return operations.RefreshPlaylistResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)

    async def refresh_playlist_async(
        self,
        *,
        request: Union[
            operations.RefreshPlaylistRequest,
            operations.RefreshPlaylistRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.RefreshPlaylistResponse:
        r"""Reprocess a generator

        Make a generator reprocess (refresh)

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.RefreshPlaylistRequest)
        request = cast(operations.RefreshPlaylistRequest, request)

        req = self._build_request_async(
            method="PUT",
            path="/playlists/{playlistId}/items/{generatorId}/{metadataId}/{action}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            http_headers=http_headers,
            _globals=operations.RefreshPlaylistGlobals(
                accepts=self.sdk_configuration.globals.accepts,
                client_identifier=self.sdk_configuration.globals.client_identifier,
                product=self.sdk_configuration.globals.product,
                version=self.sdk_configuration.globals.version,
                platform=self.sdk_configuration.globals.platform,
                platform_version=self.sdk_configuration.globals.platform_version,
                device=self.sdk_configuration.globals.device,
                model=self.sdk_configuration.globals.model,
                device_vendor=self.sdk_configuration.globals.device_vendor,
                device_name=self.sdk_configuration.globals.device_name,
                marketplace=self.sdk_configuration.globals.marketplace,
            ),
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="refreshPlaylist",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "*"):
            return operations.RefreshPlaylistResponse(
                status_code=http_res.status_code,
                content_type=http_res.headers.get("Content-Type") or "",
                raw_response=http_res,
            )
        if utils.match_response(http_res, ["400", "404", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)

        raise errors.SDKError("Unexpected response received", http_res)
