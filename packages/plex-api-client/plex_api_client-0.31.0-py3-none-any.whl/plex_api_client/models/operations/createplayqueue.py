"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.models.components import (
    accepts as components_accepts,
    boolint as components_boolint,
)
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, HeaderMetadata, QueryParamMetadata
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreatePlayQueueGlobalsTypedDict(TypedDict):
    accepts: NotRequired[components_accepts.Accepts]
    r"""Indicates the client accepts the indicated media types"""
    client_identifier: NotRequired[str]
    r"""An opaque identifier unique to the client"""
    product: NotRequired[str]
    r"""The name of the client product"""
    version: NotRequired[str]
    r"""The version of the client application"""
    platform: NotRequired[str]
    r"""The platform of the client"""
    platform_version: NotRequired[str]
    r"""The version of the platform"""
    device: NotRequired[str]
    r"""A relatively friendly name for the client device"""
    model: NotRequired[str]
    r"""A potentially less friendly identifier for the device model"""
    device_vendor: NotRequired[str]
    r"""The device vendor"""
    device_name: NotRequired[str]
    r"""A friendly name for the client"""
    marketplace: NotRequired[str]
    r"""The marketplace on which the client application is distributed"""


class CreatePlayQueueGlobals(BaseModel):
    accepts: Annotated[
        Optional[components_accepts.Accepts],
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = components_accepts.Accepts.APPLICATION_XML
    r"""Indicates the client accepts the indicated media types"""

    client_identifier: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Client-Identifier"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""An opaque identifier unique to the client"""

    product: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Product"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The name of the client product"""

    version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the client application"""

    platform: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The platform of the client"""

    platform_version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the platform"""

    device: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A relatively friendly name for the client device"""

    model: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Model"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A potentially less friendly identifier for the device model"""

    device_vendor: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Vendor"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The device vendor"""

    device_name: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Name"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A friendly name for the client"""

    marketplace: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Marketplace"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The marketplace on which the client application is distributed"""


class Type(str, Enum):
    r"""The type of play queue to create"""

    AUDIO = "audio"
    VIDEO = "video"
    PHOTO = "photo"


class CreatePlayQueueRequestTypedDict(TypedDict):
    type: Type
    r"""The type of play queue to create"""
    accepts: NotRequired[components_accepts.Accepts]
    r"""Indicates the client accepts the indicated media types"""
    client_identifier: NotRequired[str]
    r"""An opaque identifier unique to the client"""
    product: NotRequired[str]
    r"""The name of the client product"""
    version: NotRequired[str]
    r"""The version of the client application"""
    platform: NotRequired[str]
    r"""The platform of the client"""
    platform_version: NotRequired[str]
    r"""The version of the platform"""
    device: NotRequired[str]
    r"""A relatively friendly name for the client device"""
    model: NotRequired[str]
    r"""A potentially less friendly identifier for the device model"""
    device_vendor: NotRequired[str]
    r"""The device vendor"""
    device_name: NotRequired[str]
    r"""A friendly name for the client"""
    marketplace: NotRequired[str]
    r"""The marketplace on which the client application is distributed"""
    uri: NotRequired[str]
    r"""The content URI for what we're playing."""
    playlist_id: NotRequired[int]
    r"""the ID of the playlist we're playing."""
    key: NotRequired[str]
    r"""The key of the first item to play, defaults to the first in the play queue."""
    shuffle: NotRequired[components_boolint.BoolInt]
    r"""Whether to shuffle the playlist, defaults to 0."""
    repeat: NotRequired[components_boolint.BoolInt]
    r"""If the PQ is bigger than the window, fill any empty space with wraparound items, defaults to 0."""
    continuous: NotRequired[components_boolint.BoolInt]
    r"""Whether to create a continuous play queue (e.g. from an episode), defaults to 0."""
    extras_prefix_count: NotRequired[int]
    r"""Number of trailers to prepend a movie with not including the pre-roll. If omitted the pre-roll will not be returned in the play queue. When resuming a movie `extrasPrefixCount` should be omitted as a parameter instead of passing 0."""
    recursive: NotRequired[components_boolint.BoolInt]
    r"""Only applies to queues of type photo, whether to retrieve all descendent photos from an album or section, defaults to 1."""
    on_deck: NotRequired[components_boolint.BoolInt]
    r"""Only applies to queues of type show or seasons, whether to return a queue that is started on the On Deck episode if one exists. Otherwise begins the play queue on the beginning of the show or season."""


class CreatePlayQueueRequest(BaseModel):
    type: Annotated[
        Type, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""The type of play queue to create"""

    accepts: Annotated[
        Optional[components_accepts.Accepts],
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = components_accepts.Accepts.APPLICATION_XML
    r"""Indicates the client accepts the indicated media types"""

    client_identifier: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Client-Identifier"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""An opaque identifier unique to the client"""

    product: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Product"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The name of the client product"""

    version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the client application"""

    platform: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The platform of the client"""

    platform_version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the platform"""

    device: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A relatively friendly name for the client device"""

    model: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Model"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A potentially less friendly identifier for the device model"""

    device_vendor: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Vendor"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The device vendor"""

    device_name: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Name"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A friendly name for the client"""

    marketplace: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Marketplace"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The marketplace on which the client application is distributed"""

    uri: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The content URI for what we're playing."""

    playlist_id: Annotated[
        Optional[int],
        pydantic.Field(alias="playlistID"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""the ID of the playlist we're playing."""

    key: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The key of the first item to play, defaults to the first in the play queue."""

    shuffle: Annotated[
        Optional[components_boolint.BoolInt],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Whether to shuffle the playlist, defaults to 0."""

    repeat: Annotated[
        Optional[components_boolint.BoolInt],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""If the PQ is bigger than the window, fill any empty space with wraparound items, defaults to 0."""

    continuous: Annotated[
        Optional[components_boolint.BoolInt],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Whether to create a continuous play queue (e.g. from an episode), defaults to 0."""

    extras_prefix_count: Annotated[
        Optional[int],
        pydantic.Field(alias="extrasPrefixCount"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Number of trailers to prepend a movie with not including the pre-roll. If omitted the pre-roll will not be returned in the play queue. When resuming a movie `extrasPrefixCount` should be omitted as a parameter instead of passing 0."""

    recursive: Annotated[
        Optional[components_boolint.BoolInt],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Only applies to queues of type photo, whether to retrieve all descendent photos from an album or section, defaults to 1."""

    on_deck: Annotated[
        Optional[components_boolint.BoolInt],
        pydantic.Field(alias="onDeck"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Only applies to queues of type show or seasons, whether to return a queue that is started on the On Deck episode if one exists. Otherwise begins the play queue on the beginning of the show or season."""


class CreatePlayQueueMediaContainerTypedDict(TypedDict):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: NotRequired[str]
    offset: NotRequired[int]
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """
    size: NotRequired[int]
    total_size: NotRequired[int]
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """
    play_queue_id: NotRequired[int]
    r"""The ID of the play queue, which is used in subsequent requests."""
    play_queue_last_added_item_id: NotRequired[str]
    r"""Defines where the \"Up Next\" region starts"""
    play_queue_selected_item_id: NotRequired[int]
    r"""The queue item ID of the currently selected  item."""
    play_queue_selected_item_offset: NotRequired[int]
    r"""The offset of the selected item in the play queue, from the beginning of the queue."""
    play_queue_selected_metadata_item_id: NotRequired[int]
    r"""The metadata item ID of the currently selected item (matches `ratingKey` attribute in metadata item if the media provider is a library)."""
    play_queue_shuffled: NotRequired[bool]
    r"""Whether or not the queue is shuffled."""
    play_queue_source_uri: NotRequired[str]
    r"""The original URI used to create the play queue."""
    play_queue_total_count: NotRequired[int]
    r"""The total number of items in the play queue."""
    play_queue_version: NotRequired[int]
    r"""The version of the play queue. It increments every time a change is made to the play queue to assist clients in knowing when to refresh."""


class CreatePlayQueueMediaContainer(BaseModel):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: Optional[str] = None

    offset: Optional[int] = None
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """

    size: Optional[int] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """

    play_queue_id: Annotated[Optional[int], pydantic.Field(alias="playQueueID")] = None
    r"""The ID of the play queue, which is used in subsequent requests."""

    play_queue_last_added_item_id: Annotated[
        Optional[str], pydantic.Field(alias="playQueueLastAddedItemID")
    ] = None
    r"""Defines where the \"Up Next\" region starts"""

    play_queue_selected_item_id: Annotated[
        Optional[int], pydantic.Field(alias="playQueueSelectedItemID")
    ] = None
    r"""The queue item ID of the currently selected  item."""

    play_queue_selected_item_offset: Annotated[
        Optional[int], pydantic.Field(alias="playQueueSelectedItemOffset")
    ] = None
    r"""The offset of the selected item in the play queue, from the beginning of the queue."""

    play_queue_selected_metadata_item_id: Annotated[
        Optional[int], pydantic.Field(alias="playQueueSelectedMetadataItemID")
    ] = None
    r"""The metadata item ID of the currently selected item (matches `ratingKey` attribute in metadata item if the media provider is a library)."""

    play_queue_shuffled: Annotated[
        Optional[bool], pydantic.Field(alias="playQueueShuffled")
    ] = None
    r"""Whether or not the queue is shuffled."""

    play_queue_source_uri: Annotated[
        Optional[str], pydantic.Field(alias="playQueueSourceURI")
    ] = None
    r"""The original URI used to create the play queue."""

    play_queue_total_count: Annotated[
        Optional[int], pydantic.Field(alias="playQueueTotalCount")
    ] = None
    r"""The total number of items in the play queue."""

    play_queue_version: Annotated[
        Optional[int], pydantic.Field(alias="playQueueVersion")
    ] = None
    r"""The version of the play queue. It increments every time a change is made to the play queue to assist clients in knowing when to refresh."""


class CreatePlayQueueResponseBodyTypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[CreatePlayQueueMediaContainerTypedDict]


class CreatePlayQueueResponseBody(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[CreatePlayQueueMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class CreatePlayQueueResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    headers: Dict[str, List[str]]
    object: NotRequired[CreatePlayQueueResponseBodyTypedDict]
    r"""OK"""


class CreatePlayQueueResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    headers: Dict[str, List[str]]

    object: Optional[CreatePlayQueueResponseBody] = None
    r"""OK"""
