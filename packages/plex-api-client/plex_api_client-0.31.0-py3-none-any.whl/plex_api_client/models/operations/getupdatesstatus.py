"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetUpdatesStatusState(str, Enum):
    r"""The status of this update.

    - available - This release is available
    - downloading - This release is downloading
    - downloaded - This release has been downloaded
    - installing - This release is installing
    - tonight - This release will be installed tonight
    - skipped - This release has been skipped
    - error - This release has an error
    - notify - This release is only notifying it is available (typically because it cannot be installed on this setup)
    - done - This release is complete

    """

    AVAILABLE = "available"
    DOWNLOADING = "downloading"
    DOWNLOADED = "downloaded"
    INSTALLING = "installing"
    TONIGHT = "tonight"
    SKIPPED = "skipped"
    ERROR = "error"
    NOTIFY = "notify"
    DONE = "done"


class ReleaseTypedDict(TypedDict):
    added: NotRequired[str]
    r"""A list of what has been added in this version"""
    download_url: NotRequired[str]
    r"""The URL of where this update is available"""
    fixed: NotRequired[str]
    r"""A list of what has been fixed in this version"""
    key: NotRequired[str]
    r"""The URL key of the update"""
    state: NotRequired[GetUpdatesStatusState]
    r"""The status of this update.

    - available - This release is available
    - downloading - This release is downloading
    - downloaded - This release has been downloaded
    - installing - This release is installing
    - tonight - This release will be installed tonight
    - skipped - This release has been skipped
    - error - This release has an error
    - notify - This release is only notifying it is available (typically because it cannot be installed on this setup)
    - done - This release is complete

    """
    version: NotRequired[str]
    r"""The version available"""


class Release(BaseModel):
    added: Optional[str] = None
    r"""A list of what has been added in this version"""

    download_url: Annotated[Optional[str], pydantic.Field(alias="downloadURL")] = None
    r"""The URL of where this update is available"""

    fixed: Optional[str] = None
    r"""A list of what has been fixed in this version"""

    key: Optional[str] = None
    r"""The URL key of the update"""

    state: Optional[GetUpdatesStatusState] = None
    r"""The status of this update.

    - available - This release is available
    - downloading - This release is downloading
    - downloaded - This release has been downloaded
    - installing - This release is installing
    - tonight - This release will be installed tonight
    - skipped - This release has been skipped
    - error - This release has an error
    - notify - This release is only notifying it is available (typically because it cannot be installed on this setup)
    - done - This release is complete

    """

    version: Optional[str] = None
    r"""The version available"""


class GetUpdatesStatusMediaContainerTypedDict(TypedDict):
    auto_update_version: NotRequired[int]
    r"""The version of the updater (currently `1`)"""
    can_install: NotRequired[bool]
    r"""Indicates whether this install can be updated through these endpoints (typically only on MacOS and Windows)"""
    checked_at: NotRequired[int]
    r"""The last time a check for updates was performed"""
    download_url: NotRequired[str]
    r"""The URL where the update is available"""
    release: NotRequired[List[ReleaseTypedDict]]
    status: NotRequired[int]
    r"""The current error code (`0` means no error)"""


class GetUpdatesStatusMediaContainer(BaseModel):
    auto_update_version: Annotated[
        Optional[int], pydantic.Field(alias="autoUpdateVersion")
    ] = None
    r"""The version of the updater (currently `1`)"""

    can_install: Annotated[Optional[bool], pydantic.Field(alias="canInstall")] = None
    r"""Indicates whether this install can be updated through these endpoints (typically only on MacOS and Windows)"""

    checked_at: Annotated[Optional[int], pydantic.Field(alias="checkedAt")] = None
    r"""The last time a check for updates was performed"""

    download_url: Annotated[Optional[str], pydantic.Field(alias="downloadURL")] = None
    r"""The URL where the update is available"""

    release: Annotated[Optional[List[Release]], pydantic.Field(alias="Release")] = None

    status: Optional[int] = None
    r"""The current error code (`0` means no error)"""


class GetUpdatesStatusResponseBodyTypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[GetUpdatesStatusMediaContainerTypedDict]


class GetUpdatesStatusResponseBody(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[GetUpdatesStatusMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class GetUpdatesStatusResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetUpdatesStatusResponseBodyTypedDict]
    r"""OK"""


class GetUpdatesStatusResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetUpdatesStatusResponseBody] = None
    r"""OK"""
