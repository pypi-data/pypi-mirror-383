"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.models.components import (
    accepts as components_accepts,
    transcodesession as components_transcodesession,
)
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, HeaderMetadata, PathParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListDownloadQueueItemsGlobalsTypedDict(TypedDict):
    accepts: NotRequired[components_accepts.Accepts]
    r"""Indicates the client accepts the indicated media types"""
    client_identifier: NotRequired[str]
    r"""An opaque identifier unique to the client"""
    product: NotRequired[str]
    r"""The name of the client product"""
    version: NotRequired[str]
    r"""The version of the client application"""
    platform: NotRequired[str]
    r"""The platform of the client"""
    platform_version: NotRequired[str]
    r"""The version of the platform"""
    device: NotRequired[str]
    r"""A relatively friendly name for the client device"""
    model: NotRequired[str]
    r"""A potentially less friendly identifier for the device model"""
    device_vendor: NotRequired[str]
    r"""The device vendor"""
    device_name: NotRequired[str]
    r"""A friendly name for the client"""
    marketplace: NotRequired[str]
    r"""The marketplace on which the client application is distributed"""


class ListDownloadQueueItemsGlobals(BaseModel):
    accepts: Annotated[
        Optional[components_accepts.Accepts],
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = components_accepts.Accepts.APPLICATION_XML
    r"""Indicates the client accepts the indicated media types"""

    client_identifier: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Client-Identifier"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""An opaque identifier unique to the client"""

    product: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Product"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The name of the client product"""

    version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the client application"""

    platform: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The platform of the client"""

    platform_version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the platform"""

    device: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A relatively friendly name for the client device"""

    model: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Model"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A potentially less friendly identifier for the device model"""

    device_vendor: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Vendor"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The device vendor"""

    device_name: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Name"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A friendly name for the client"""

    marketplace: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Marketplace"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The marketplace on which the client application is distributed"""


class ListDownloadQueueItemsRequestTypedDict(TypedDict):
    queue_id: int
    r"""The queue id"""
    accepts: NotRequired[components_accepts.Accepts]
    r"""Indicates the client accepts the indicated media types"""
    client_identifier: NotRequired[str]
    r"""An opaque identifier unique to the client"""
    product: NotRequired[str]
    r"""The name of the client product"""
    version: NotRequired[str]
    r"""The version of the client application"""
    platform: NotRequired[str]
    r"""The platform of the client"""
    platform_version: NotRequired[str]
    r"""The version of the platform"""
    device: NotRequired[str]
    r"""A relatively friendly name for the client device"""
    model: NotRequired[str]
    r"""A potentially less friendly identifier for the device model"""
    device_vendor: NotRequired[str]
    r"""The device vendor"""
    device_name: NotRequired[str]
    r"""A friendly name for the client"""
    marketplace: NotRequired[str]
    r"""The marketplace on which the client application is distributed"""


class ListDownloadQueueItemsRequest(BaseModel):
    queue_id: Annotated[
        int,
        pydantic.Field(alias="queueId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The queue id"""

    accepts: Annotated[
        Optional[components_accepts.Accepts],
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = components_accepts.Accepts.APPLICATION_XML
    r"""Indicates the client accepts the indicated media types"""

    client_identifier: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Client-Identifier"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""An opaque identifier unique to the client"""

    product: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Product"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The name of the client product"""

    version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the client application"""

    platform: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The platform of the client"""

    platform_version: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Platform-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The version of the platform"""

    device: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A relatively friendly name for the client device"""

    model: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Model"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A potentially less friendly identifier for the device model"""

    device_vendor: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Vendor"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The device vendor"""

    device_name: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Device-Name"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A friendly name for the client"""

    marketplace: Annotated[
        Optional[str],
        pydantic.Field(alias="X-Plex-Marketplace"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The marketplace on which the client application is distributed"""


class DecisionResultTypedDict(TypedDict):
    available_bandwidth: NotRequired[int]
    r"""The maximum bitrate set when item was added"""
    direct_play_decision_code: NotRequired[int]
    direct_play_decision_text: NotRequired[str]
    general_decision_code: NotRequired[int]
    general_decision_text: NotRequired[str]
    mde_decision_code: NotRequired[int]
    r"""The code indicating the status of evaluation of playback when client indicates `hasMDE=1`"""
    mde_decision_text: NotRequired[str]
    r"""Descriptive text for the above code"""
    transcode_decision_code: NotRequired[int]
    transcode_decision_text: NotRequired[str]


class DecisionResult(BaseModel):
    available_bandwidth: Annotated[
        Optional[int], pydantic.Field(alias="availableBandwidth")
    ] = None
    r"""The maximum bitrate set when item was added"""

    direct_play_decision_code: Annotated[
        Optional[int], pydantic.Field(alias="directPlayDecisionCode")
    ] = None

    direct_play_decision_text: Annotated[
        Optional[str], pydantic.Field(alias="directPlayDecisionText")
    ] = None

    general_decision_code: Annotated[
        Optional[int], pydantic.Field(alias="generalDecisionCode")
    ] = None

    general_decision_text: Annotated[
        Optional[str], pydantic.Field(alias="generalDecisionText")
    ] = None

    mde_decision_code: Annotated[
        Optional[int], pydantic.Field(alias="mdeDecisionCode")
    ] = None
    r"""The code indicating the status of evaluation of playback when client indicates `hasMDE=1`"""

    mde_decision_text: Annotated[
        Optional[str], pydantic.Field(alias="mdeDecisionText")
    ] = None
    r"""Descriptive text for the above code"""

    transcode_decision_code: Annotated[
        Optional[int], pydantic.Field(alias="transcodeDecisionCode")
    ] = None

    transcode_decision_text: Annotated[
        Optional[str], pydantic.Field(alias="transcodeDecisionText")
    ] = None


class ListDownloadQueueItemsStatus(str, Enum):
    r"""The state of the item:
    - deciding: The item decision is pending
    - waiting: The item is waiting for transcode
    - processing: The item is being transcoded
    - available: The item is available for download
    - error: The item encountered an error in the decision or transcode
    - expired: The transcoded item has timed out and is no longer available

    """

    DECIDING = "deciding"
    WAITING = "waiting"
    PROCESSING = "processing"
    AVAILABLE = "available"
    ERROR = "error"
    EXPIRED = "expired"


class TranscodeTypedDict(TypedDict):
    r"""The transcode session object which is not yet documented otherwise it'd be a $ref here."""


class Transcode(BaseModel):
    r"""The transcode session object which is not yet documented otherwise it'd be a $ref here."""


class DownloadQueueItemTypedDict(TypedDict):
    decision_result: NotRequired[DecisionResultTypedDict]
    error: NotRequired[str]
    r"""The error encountered in transcoding or decision"""
    id: NotRequired[int]
    key: NotRequired[str]
    queue_id: NotRequired[int]
    status: NotRequired[ListDownloadQueueItemsStatus]
    r"""The state of the item:
    - deciding: The item decision is pending
    - waiting: The item is waiting for transcode
    - processing: The item is being transcoded
    - available: The item is available for download
    - error: The item encountered an error in the decision or transcode
    - expired: The transcoded item has timed out and is no longer available

    """
    transcode: NotRequired[TranscodeTypedDict]
    r"""The transcode session object which is not yet documented otherwise it'd be a $ref here."""
    transcode_session: NotRequired[
        components_transcodesession.TranscodeSessionTypedDict
    ]
    r"""The transcode session if item is currently being transcoded"""


class DownloadQueueItem(BaseModel):
    decision_result: Annotated[
        Optional[DecisionResult], pydantic.Field(alias="DecisionResult")
    ] = None

    error: Optional[str] = None
    r"""The error encountered in transcoding or decision"""

    id: Optional[int] = None

    key: Optional[str] = None

    queue_id: Annotated[Optional[int], pydantic.Field(alias="queueId")] = None

    status: Optional[ListDownloadQueueItemsStatus] = None
    r"""The state of the item:
    - deciding: The item decision is pending
    - waiting: The item is waiting for transcode
    - processing: The item is being transcoded
    - available: The item is available for download
    - error: The item encountered an error in the decision or transcode
    - expired: The transcoded item has timed out and is no longer available

    """

    transcode: Optional[Transcode] = None
    r"""The transcode session object which is not yet documented otherwise it'd be a $ref here."""

    transcode_session: Annotated[
        Optional[components_transcodesession.TranscodeSession],
        pydantic.Field(alias="TranscodeSession"),
    ] = None
    r"""The transcode session if item is currently being transcoded"""


class ListDownloadQueueItemsMediaContainerTypedDict(TypedDict):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: NotRequired[str]
    offset: NotRequired[int]
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """
    size: NotRequired[int]
    total_size: NotRequired[int]
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """
    download_queue_item: NotRequired[List[DownloadQueueItemTypedDict]]


class ListDownloadQueueItemsMediaContainer(BaseModel):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: Optional[str] = None

    offset: Optional[int] = None
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """

    size: Optional[int] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """

    download_queue_item: Annotated[
        Optional[List[DownloadQueueItem]], pydantic.Field(alias="DownloadQueueItem")
    ] = None


class ListDownloadQueueItemsResponseBodyTypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[ListDownloadQueueItemsMediaContainerTypedDict]


class ListDownloadQueueItemsResponseBody(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[ListDownloadQueueItemsMediaContainer],
        pydantic.Field(alias="MediaContainer"),
    ] = None


class ListDownloadQueueItemsResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[ListDownloadQueueItemsResponseBodyTypedDict]
    r"""OK"""


class ListDownloadQueueItemsResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[ListDownloadQueueItemsResponseBody] = None
    r"""OK"""
