"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Status(str, Enum):
    r"""The state of this queue
    - deciding: At least one item is still being decided
    - waiting: At least one item is waiting for transcode and none are currently transcoding
    - processing: At least one item is being transcoded
    - done: All items are available (or potentially expired)
    - error: At least one item has encountered an error

    """

    DECIDING = "deciding"
    WAITING = "waiting"
    PROCESSING = "processing"
    DONE = "done"
    ERROR = "error"


class DownloadQueueTypedDict(TypedDict):
    id: NotRequired[int]
    item_count: NotRequired[int]
    status: NotRequired[Status]
    r"""The state of this queue
    - deciding: At least one item is still being decided
    - waiting: At least one item is waiting for transcode and none are currently transcoding
    - processing: At least one item is being transcoded
    - done: All items are available (or potentially expired)
    - error: At least one item has encountered an error

    """


class DownloadQueue(BaseModel):
    id: Optional[int] = None

    item_count: Annotated[Optional[int], pydantic.Field(alias="itemCount")] = None

    status: Optional[Status] = None
    r"""The state of this queue
    - deciding: At least one item is still being decided
    - waiting: At least one item is waiting for transcode and none are currently transcoding
    - processing: At least one item is being transcoded
    - done: All items are available (or potentially expired)
    - error: At least one item has encountered an error

    """


class CreateDownloadQueueMediaContainerTypedDict(TypedDict):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: NotRequired[str]
    offset: NotRequired[int]
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """
    size: NotRequired[int]
    total_size: NotRequired[int]
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """
    download_queue: NotRequired[List[DownloadQueueTypedDict]]


class CreateDownloadQueueMediaContainer(BaseModel):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: Optional[str] = None

    offset: Optional[int] = None
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """

    size: Optional[int] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """

    download_queue: Annotated[
        Optional[List[DownloadQueue]], pydantic.Field(alias="DownloadQueue")
    ] = None


class CreateDownloadQueueResponseBodyTypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[CreateDownloadQueueMediaContainerTypedDict]


class CreateDownloadQueueResponseBody(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[CreateDownloadQueueMediaContainer],
        pydantic.Field(alias="MediaContainer"),
    ] = None


class CreateDownloadQueueResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[CreateDownloadQueueResponseBodyTypedDict]
    r"""OK"""


class CreateDownloadQueueResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[CreateDownloadQueueResponseBody] = None
    r"""OK"""
