"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from plex_api_client.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class FilterPivotTypedDict(TypedDict):
    title: NotRequired[str]
    type: NotRequired[str]
    context: NotRequired[str]
    id: NotRequired[str]
    key: NotRequired[str]
    symbol: NotRequired[str]


class FilterPivot(BaseModel):
    title: Optional[str] = None

    type: Optional[str] = None

    context: Optional[str] = None

    id: Optional[str] = None

    key: Optional[str] = None

    symbol: Optional[str] = None


class FilterTypedDict(TypedDict):
    r"""Each `Filter` object contains a description of the filter. Note that it is not an exhaustive list of the full media query language, but an important subset useful for top-level API."""

    title: NotRequired[str]
    r"""The title for the filter."""
    type: NotRequired[str]
    art: NotRequired[str]
    content: NotRequired[bool]
    filter_: NotRequired[str]
    r"""This represents the filter name used for the filter, which can be used to construct complex media queries with."""
    has_prefs: NotRequired[bool]
    has_store_services: NotRequired[bool]
    hub_key: NotRequired[str]
    identifier: NotRequired[str]
    key: NotRequired[str]
    r"""This provides the endpoint where the possible range of values for the filter can be retrieved (e.g. for a \"Genre\" filter, it returns a list of all the genres in the library). This will include a `type` argument that matches the metadata type of the Type element."""
    last_accessed_at: NotRequired[int]
    pivot: NotRequired[List[FilterPivotTypedDict]]
    share: NotRequired[int]
    thumb: NotRequired[str]
    title_bar: NotRequired[str]
    filter_type: NotRequired[str]
    r"""This is either `string`, `integer`, or `boolean`, and describes the type of values used for the filter."""


class Filter(BaseModel):
    r"""Each `Filter` object contains a description of the filter. Note that it is not an exhaustive list of the full media query language, but an important subset useful for top-level API."""

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    title: Optional[str] = None
    r"""The title for the filter."""

    type: Optional[str] = None

    art: Optional[str] = None

    content: Optional[bool] = None

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = None
    r"""This represents the filter name used for the filter, which can be used to construct complex media queries with."""

    has_prefs: Annotated[Optional[bool], pydantic.Field(alias="hasPrefs")] = None

    has_store_services: Annotated[
        Optional[bool], pydantic.Field(alias="hasStoreServices")
    ] = None

    hub_key: Annotated[Optional[str], pydantic.Field(alias="hubKey")] = None

    identifier: Optional[str] = None

    key: Optional[str] = None
    r"""This provides the endpoint where the possible range of values for the filter can be retrieved (e.g. for a \"Genre\" filter, it returns a list of all the genres in the library). This will include a `type` argument that matches the metadata type of the Type element."""

    last_accessed_at: Annotated[
        Optional[int], pydantic.Field(alias="lastAccessedAt")
    ] = None

    pivot: Annotated[Optional[List[FilterPivot]], pydantic.Field(alias="Pivot")] = None

    share: Optional[int] = None

    thumb: Optional[str] = None

    title_bar: Annotated[Optional[str], pydantic.Field(alias="titleBar")] = None

    filter_type: Annotated[Optional[str], pydantic.Field(alias="filterType")] = None
    r"""This is either `string`, `integer`, or `boolean`, and describes the type of values used for the filter."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
