"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from plex_api_client.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PostResponses200Type(str, Enum):
    INTRO = "intro"
    COMMERCIAL = "commercial"
    BOOKMARK = "bookmark"
    RESUME = "resume"
    CREDIT = "credit"


class PostResponses200MediaContainerTypedDict(TypedDict):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: NotRequired[str]
    offset: NotRequired[int]
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """
    size: NotRequired[int]
    total_size: NotRequired[int]
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """
    color: NotRequired[str]
    end_time_offset: NotRequired[int]
    id: NotRequired[int]
    start_time_offset: NotRequired[int]
    title: NotRequired[str]
    type: NotRequired[PostResponses200Type]


class PostResponses200MediaContainer(BaseModel):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    identifier: Optional[str] = None

    offset: Optional[int] = None
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """

    size: Optional[int] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """

    color: Optional[str] = None

    end_time_offset: Annotated[Optional[int], pydantic.Field(alias="endTimeOffset")] = (
        None
    )

    id: Optional[int] = None

    start_time_offset: Annotated[
        Optional[int], pydantic.Field(alias="startTimeOffset")
    ] = None

    title: Optional[str] = None

    type: Optional[PostResponses200Type] = None

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]


class PostResponses200TypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[PostResponses200MediaContainerTypedDict]


class PostResponses200(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[PostResponses200MediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None
