"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .filter_ import Filter, FilterTypedDict
from .image import Image, ImageTypedDict
from .media import Media, MediaTypedDict
from .sort import Sort, SortTypedDict
from .tag import Tag, TagTypedDict
from plex_api_client.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ItemsTypedDict(TypedDict):
    r"""Items in a library are referred to as \"metadata items.\" These metadata items are distinct from \"media items\" which represent actual instances of media that can be consumed. Consider a TV library that has a single video file in it for a particular episode of a show. The library has a single media item, but it has three metadata items: one for the show, one for the season, and one for the episode. Consider a movie library that has two video files in it: the same movie, but two different resolutions. The library has a single metadata item for the movie, but that metadata item has two media items, one for each resolution. Additionally a \"media item\" will have one or more \"media parts\" where the the parts are intended to be watched together, such as a CD1 and CD2 parts of the same movie.

    Note that when a metadata item has multiple media items, those media items should be isomorphic. That is, a 4K version and 1080p version of a movie are different versions of the same movie. They have the same duration, same summary, same rating, etc. and they can generally be considered interchangeable. A theatrical release vs. director's cut vs. unrated version on the other hand would be separate metadata items.

    Metadata items can often live in a hierarchy with relationships between them.  For example, the metadata item for an episodes is associated with a season metadata item which is associated with a show metadata item.  A similar hierarchy exists with track, album, and artist and photos and photo album.  The relationships may be expressed via relative terms and absolute terms.  For example, \"leaves\" refer to metadata items which has associated media (there is no media for a season nor show).  A show will have \"children\" in the form of seasons and a season will have \"children\" in the form of episodes and episodes have \"parent\" in the form of a season which has a \"parent\" in the form of a show.  Similarly, a show has \"grandchildren\" in the form of episodse and an episode has a \"grandparent\" in the form of a show.

    """

    title: NotRequired[Any]
    r"""The title of the item (e.g. “300” or “The Simpsons”)"""
    type: NotRequired[Any]
    r"""The type of the video item, such as `movie`, `episode`, or `clip`."""
    absolute_index: NotRequired[int]
    r"""When present, contains the disc number for a track on multi-disc albums."""
    added_at: NotRequired[int]
    r"""In units of seconds since the epoch, returns the time at which the item was added to the library."""
    art: NotRequired[Any]
    r"""When present, the URL for the background artwork for the item."""
    audience_rating: NotRequired[float]
    r"""Some rating systems separate reviewer ratings from audience ratings"""
    audience_rating_image: NotRequired[Any]
    r"""A URI representing the image to be shown with the audience rating (e.g. rottentomatoes://image.rating.spilled)."""
    autotag: NotRequired[List[TagTypedDict]]
    banner: NotRequired[Any]
    r"""When present, the URL for a banner graphic for the item."""
    chapter_source: NotRequired[Any]
    r"""When present, indicates the source for the chapters in the media file. Can be media (the chapters were embedded in the media itself), agent (a metadata agent computed them), or mixed (a combination of the two)."""
    composite: NotRequired[Any]
    r"""When present, the URL for a composite image for descendent items (e.g. photo albums or playlists)."""
    content_rating: NotRequired[Any]
    r"""If known, the content rating (e.g. MPAA) for an item."""
    country: NotRequired[List[TagTypedDict]]
    director: NotRequired[List[TagTypedDict]]
    duration: NotRequired[int]
    r"""When present, the duration for the item, in units of milliseconds."""
    filter_: NotRequired[List[FilterTypedDict]]
    r"""Typically only seen in metadata at a library's top level"""
    genre: NotRequired[List[TagTypedDict]]
    grandparent_art: NotRequired[str]
    r"""The `art` of the grandparent"""
    grandparent_hero: NotRequired[str]
    r"""The `hero` of the grandparent"""
    grandparent_key: NotRequired[str]
    r"""The `key` of the grandparent"""
    grandparent_rating_key: NotRequired[str]
    r"""The `ratingKey` of the grandparent"""
    grandparent_theme: NotRequired[str]
    r"""The `theme` of the grandparent"""
    grandparent_thumb: NotRequired[str]
    r"""The `thumb` of the grandparent"""
    grandparent_title: NotRequired[str]
    r"""The `title` of the grandparent"""
    guid: NotRequired[List[TagTypedDict]]
    hero: NotRequired[Any]
    r"""When present, the URL for a hero image for the item."""
    image: NotRequired[List[ImageTypedDict]]
    index: NotRequired[int]
    r"""When present, this represents the episode number for episodes, season number for seasons, or track number for audio tracks."""
    key: NotRequired[Any]
    r"""The key at which the item's details can be fetched.  In many cases a metadata item may be passed without all the details (such as in a hub) and this key corresponds to the endpoint to fetch additional details."""
    last_viewed_at: NotRequired[int]
    r"""When a user has watched or listened to an item, this contains a timestamp (epoch seconds) for that last consumption time."""
    leaf_count: NotRequired[int]
    r"""For shows and seasons, contains the number of total episodes."""
    media: NotRequired[List[MediaTypedDict]]
    originally_available_at: NotRequired[Any]
    r"""When present, in the format YYYY-MM-DD [HH:MM:SS] (the hours/minutes/seconds part is not always present). The air date, or a higher resolution release date for an item, depending on type. For example, episodes usually have air date like 1979-08-10 (we don't use epoch seconds because media existed prior to 1970). In some cases, recorded over-the-air content has higher resolution air date which includes a time component. Albums and movies may have day-resolution release dates as well."""
    original_title: NotRequired[Any]
    r"""When present, used to indicate an item's original title, e.g. a movie's foreign title."""
    parent_hero: NotRequired[str]
    r"""The `hero` of the parent"""
    parent_index: NotRequired[int]
    r"""The `index` of the parent"""
    parent_key: NotRequired[str]
    r"""The `key` of the parent"""
    parent_rating_key: NotRequired[str]
    r"""The `ratingKey` of the parent"""
    parent_thumb: NotRequired[str]
    r"""The `thumb` of the parent"""
    parent_title: NotRequired[str]
    r"""The `title` of the parent"""
    primary_extra_key: NotRequired[Any]
    r"""Indicates that the item has a primary extra; for a movie, this is a trailer, and for a music track it is a music video. The URL points to the metadata details endpoint for the item."""
    prompt: NotRequired[str]
    r"""Prompt to give the user for this directory (such as `Search Movies`)"""
    rating: NotRequired[float]
    r"""When present, the rating for the item. The exact meaning and representation depends on where the rating was sourced from."""
    rating_array: NotRequired[List[TagTypedDict]]
    rating_count: NotRequired[int]
    r"""Number of ratings under this metadata"""
    rating_image: NotRequired[Any]
    r"""When present, indicates an image to be shown with the rating. This is passed back as a small set of defined URI values, e.g. rottentomatoes://image.rating.rotten."""
    rating_key: NotRequired[Any]
    r"""This is the opaque string to be passed into timeline, scrobble, and rating endpoints to identify them.  While it often appears to be numeric, this is not guaranteed."""
    role: NotRequired[List[TagTypedDict]]
    search: NotRequired[bool]
    r"""Indicates this is a search directory"""
    secondary: NotRequired[bool]
    r"""Used by old clients to provide nested menus allowing for primative (but structured) navigation."""
    skip_children: NotRequired[bool]
    r"""When found on a show item, indicates that the children (seasons) should be skipped in favor of the grandchildren (episodes). Useful for mini-series, etc."""
    skip_parent: NotRequired[bool]
    r"""When present on an episode or track item, indicates parent should be skipped in favor of grandparent (show)."""
    sort: NotRequired[List[SortTypedDict]]
    r"""Typically only seen in metadata at a library's top level"""
    studio: NotRequired[Any]
    r"""When present, the studio or label which produced an item (e.g. movie studio for movies, record label for albums)."""
    subtype: NotRequired[Any]
    r"""The subtype of the video item, such as `photo` when the video item is in a photo library"""
    summary: NotRequired[Any]
    r"""When present, the extended textual information about the item (e.g. movie plot, artist biography, album review)."""
    tagline: NotRequired[Any]
    r"""When present, a pithy one-liner about the item (usually only seen for movies)."""
    theme: NotRequired[Any]
    r"""When present, the URL for theme music for the item (usually only for TV shows)."""
    thumb: NotRequired[Any]
    r"""When present, the URL for the poster or thumbnail for the item. When available for types like movie, it will be the poster graphic, but fall-back to the extracted media thumbnail."""
    title_sort: NotRequired[Any]
    r"""Whene present, this is the string used for sorting the item. It's usually the title with any leading articles removed (e.g. “Simpsons”)."""
    updated_at: NotRequired[int]
    r"""In units of seconds since the epoch, returns the time at which the item was last changed (e.g. had its metadata updated)."""
    user_rating: NotRequired[float]
    r"""When the user has rated an item, this contains the user rating"""
    view_count: NotRequired[int]
    r"""When a users has completed watched or listened to an item, this attribute contains the number of consumptions."""
    viewed_leaf_count: NotRequired[int]
    r"""For shows and seasons, contains the number of viewed episodes."""
    view_offset: NotRequired[int]
    r"""When a user is in the process of viewing or listening to this item, this attribute contains the current offset, in units of milliseconds."""
    writer: NotRequired[List[TagTypedDict]]
    year: NotRequired[int]
    r"""When present, the year associated with the item's release (e.g. release year for a movie)."""
    metadata_item: NotRequired[List[ItemsTypedDict]]


class Items(BaseModel):
    r"""Items in a library are referred to as \"metadata items.\" These metadata items are distinct from \"media items\" which represent actual instances of media that can be consumed. Consider a TV library that has a single video file in it for a particular episode of a show. The library has a single media item, but it has three metadata items: one for the show, one for the season, and one for the episode. Consider a movie library that has two video files in it: the same movie, but two different resolutions. The library has a single metadata item for the movie, but that metadata item has two media items, one for each resolution. Additionally a \"media item\" will have one or more \"media parts\" where the the parts are intended to be watched together, such as a CD1 and CD2 parts of the same movie.

    Note that when a metadata item has multiple media items, those media items should be isomorphic. That is, a 4K version and 1080p version of a movie are different versions of the same movie. They have the same duration, same summary, same rating, etc. and they can generally be considered interchangeable. A theatrical release vs. director's cut vs. unrated version on the other hand would be separate metadata items.

    Metadata items can often live in a hierarchy with relationships between them.  For example, the metadata item for an episodes is associated with a season metadata item which is associated with a show metadata item.  A similar hierarchy exists with track, album, and artist and photos and photo album.  The relationships may be expressed via relative terms and absolute terms.  For example, \"leaves\" refer to metadata items which has associated media (there is no media for a season nor show).  A show will have \"children\" in the form of seasons and a season will have \"children\" in the form of episodes and episodes have \"parent\" in the form of a season which has a \"parent\" in the form of a show.  Similarly, a show has \"grandchildren\" in the form of episodse and an episode has a \"grandparent\" in the form of a show.

    """

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    title: Optional[Any] = None
    r"""The title of the item (e.g. “300” or “The Simpsons”)"""

    type: Optional[Any] = None
    r"""The type of the video item, such as `movie`, `episode`, or `clip`."""

    absolute_index: Annotated[Optional[int], pydantic.Field(alias="absoluteIndex")] = (
        None
    )
    r"""When present, contains the disc number for a track on multi-disc albums."""

    added_at: Annotated[Optional[int], pydantic.Field(alias="addedAt")] = None
    r"""In units of seconds since the epoch, returns the time at which the item was added to the library."""

    art: Optional[Any] = None
    r"""When present, the URL for the background artwork for the item."""

    audience_rating: Annotated[
        Optional[float], pydantic.Field(alias="audienceRating")
    ] = None
    r"""Some rating systems separate reviewer ratings from audience ratings"""

    audience_rating_image: Annotated[
        Optional[Any], pydantic.Field(alias="audienceRatingImage")
    ] = None
    r"""A URI representing the image to be shown with the audience rating (e.g. rottentomatoes://image.rating.spilled)."""

    autotag: Annotated[Optional[List[Tag]], pydantic.Field(alias="Autotag")] = None

    banner: Optional[Any] = None
    r"""When present, the URL for a banner graphic for the item."""

    chapter_source: Annotated[Optional[Any], pydantic.Field(alias="chapterSource")] = (
        None
    )
    r"""When present, indicates the source for the chapters in the media file. Can be media (the chapters were embedded in the media itself), agent (a metadata agent computed them), or mixed (a combination of the two)."""

    composite: Optional[Any] = None
    r"""When present, the URL for a composite image for descendent items (e.g. photo albums or playlists)."""

    content_rating: Annotated[Optional[Any], pydantic.Field(alias="contentRating")] = (
        None
    )
    r"""If known, the content rating (e.g. MPAA) for an item."""

    country: Annotated[Optional[List[Tag]], pydantic.Field(alias="Country")] = None

    director: Annotated[Optional[List[Tag]], pydantic.Field(alias="Director")] = None

    duration: Optional[int] = None
    r"""When present, the duration for the item, in units of milliseconds."""

    filter_: Annotated[Optional[List[Filter]], pydantic.Field(alias="Filter")] = None
    r"""Typically only seen in metadata at a library's top level"""

    genre: Annotated[Optional[List[Tag]], pydantic.Field(alias="Genre")] = None

    grandparent_art: Annotated[
        Optional[str], pydantic.Field(alias="grandparentArt")
    ] = None
    r"""The `art` of the grandparent"""

    grandparent_hero: Annotated[
        Optional[str], pydantic.Field(alias="grandparentHero")
    ] = None
    r"""The `hero` of the grandparent"""

    grandparent_key: Annotated[
        Optional[str], pydantic.Field(alias="grandparentKey")
    ] = None
    r"""The `key` of the grandparent"""

    grandparent_rating_key: Annotated[
        Optional[str], pydantic.Field(alias="grandparentRatingKey")
    ] = None
    r"""The `ratingKey` of the grandparent"""

    grandparent_theme: Annotated[
        Optional[str], pydantic.Field(alias="grandparentTheme")
    ] = None
    r"""The `theme` of the grandparent"""

    grandparent_thumb: Annotated[
        Optional[str], pydantic.Field(alias="grandparentThumb")
    ] = None
    r"""The `thumb` of the grandparent"""

    grandparent_title: Annotated[
        Optional[str], pydantic.Field(alias="grandparentTitle")
    ] = None
    r"""The `title` of the grandparent"""

    guid: Annotated[Optional[List[Tag]], pydantic.Field(alias="Guid")] = None

    hero: Optional[Any] = None
    r"""When present, the URL for a hero image for the item."""

    image: Annotated[Optional[List[Image]], pydantic.Field(alias="Image")] = None

    index: Optional[int] = None
    r"""When present, this represents the episode number for episodes, season number for seasons, or track number for audio tracks."""

    key: Optional[Any] = None
    r"""The key at which the item's details can be fetched.  In many cases a metadata item may be passed without all the details (such as in a hub) and this key corresponds to the endpoint to fetch additional details."""

    last_viewed_at: Annotated[Optional[int], pydantic.Field(alias="lastViewedAt")] = (
        None
    )
    r"""When a user has watched or listened to an item, this contains a timestamp (epoch seconds) for that last consumption time."""

    leaf_count: Annotated[Optional[int], pydantic.Field(alias="leafCount")] = None
    r"""For shows and seasons, contains the number of total episodes."""

    media: Annotated[Optional[List[Media]], pydantic.Field(alias="Media")] = None

    originally_available_at: Annotated[
        Optional[Any], pydantic.Field(alias="originallyAvailableAt")
    ] = None
    r"""When present, in the format YYYY-MM-DD [HH:MM:SS] (the hours/minutes/seconds part is not always present). The air date, or a higher resolution release date for an item, depending on type. For example, episodes usually have air date like 1979-08-10 (we don't use epoch seconds because media existed prior to 1970). In some cases, recorded over-the-air content has higher resolution air date which includes a time component. Albums and movies may have day-resolution release dates as well."""

    original_title: Annotated[Optional[Any], pydantic.Field(alias="originalTitle")] = (
        None
    )
    r"""When present, used to indicate an item's original title, e.g. a movie's foreign title."""

    parent_hero: Annotated[Optional[str], pydantic.Field(alias="parentHero")] = None
    r"""The `hero` of the parent"""

    parent_index: Annotated[Optional[int], pydantic.Field(alias="parentIndex")] = None
    r"""The `index` of the parent"""

    parent_key: Annotated[Optional[str], pydantic.Field(alias="parentKey")] = None
    r"""The `key` of the parent"""

    parent_rating_key: Annotated[
        Optional[str], pydantic.Field(alias="parentRatingKey")
    ] = None
    r"""The `ratingKey` of the parent"""

    parent_thumb: Annotated[Optional[str], pydantic.Field(alias="parentThumb")] = None
    r"""The `thumb` of the parent"""

    parent_title: Annotated[Optional[str], pydantic.Field(alias="parentTitle")] = None
    r"""The `title` of the parent"""

    primary_extra_key: Annotated[
        Optional[Any], pydantic.Field(alias="primaryExtraKey")
    ] = None
    r"""Indicates that the item has a primary extra; for a movie, this is a trailer, and for a music track it is a music video. The URL points to the metadata details endpoint for the item."""

    prompt: Optional[str] = None
    r"""Prompt to give the user for this directory (such as `Search Movies`)"""

    rating: Optional[float] = None
    r"""When present, the rating for the item. The exact meaning and representation depends on where the rating was sourced from."""

    rating_array: Annotated[Optional[List[Tag]], pydantic.Field(alias="Rating")] = None

    rating_count: Annotated[Optional[int], pydantic.Field(alias="ratingCount")] = None
    r"""Number of ratings under this metadata"""

    rating_image: Annotated[Optional[Any], pydantic.Field(alias="ratingImage")] = None
    r"""When present, indicates an image to be shown with the rating. This is passed back as a small set of defined URI values, e.g. rottentomatoes://image.rating.rotten."""

    rating_key: Annotated[Optional[Any], pydantic.Field(alias="ratingKey")] = None
    r"""This is the opaque string to be passed into timeline, scrobble, and rating endpoints to identify them.  While it often appears to be numeric, this is not guaranteed."""

    role: Annotated[Optional[List[Tag]], pydantic.Field(alias="Role")] = None

    search: Optional[bool] = None
    r"""Indicates this is a search directory"""

    secondary: Optional[bool] = None
    r"""Used by old clients to provide nested menus allowing for primative (but structured) navigation."""

    skip_children: Annotated[Optional[bool], pydantic.Field(alias="skipChildren")] = (
        None
    )
    r"""When found on a show item, indicates that the children (seasons) should be skipped in favor of the grandchildren (episodes). Useful for mini-series, etc."""

    skip_parent: Annotated[Optional[bool], pydantic.Field(alias="skipParent")] = None
    r"""When present on an episode or track item, indicates parent should be skipped in favor of grandparent (show)."""

    sort: Annotated[Optional[List[Sort]], pydantic.Field(alias="Sort")] = None
    r"""Typically only seen in metadata at a library's top level"""

    studio: Optional[Any] = None
    r"""When present, the studio or label which produced an item (e.g. movie studio for movies, record label for albums)."""

    subtype: Optional[Any] = None
    r"""The subtype of the video item, such as `photo` when the video item is in a photo library"""

    summary: Optional[Any] = None
    r"""When present, the extended textual information about the item (e.g. movie plot, artist biography, album review)."""

    tagline: Optional[Any] = None
    r"""When present, a pithy one-liner about the item (usually only seen for movies)."""

    theme: Optional[Any] = None
    r"""When present, the URL for theme music for the item (usually only for TV shows)."""

    thumb: Optional[Any] = None
    r"""When present, the URL for the poster or thumbnail for the item. When available for types like movie, it will be the poster graphic, but fall-back to the extracted media thumbnail."""

    title_sort: Annotated[Optional[Any], pydantic.Field(alias="titleSort")] = None
    r"""Whene present, this is the string used for sorting the item. It's usually the title with any leading articles removed (e.g. “Simpsons”)."""

    updated_at: Annotated[Optional[int], pydantic.Field(alias="updatedAt")] = None
    r"""In units of seconds since the epoch, returns the time at which the item was last changed (e.g. had its metadata updated)."""

    user_rating: Annotated[Optional[float], pydantic.Field(alias="userRating")] = None
    r"""When the user has rated an item, this contains the user rating"""

    view_count: Annotated[Optional[int], pydantic.Field(alias="viewCount")] = None
    r"""When a users has completed watched or listened to an item, this attribute contains the number of consumptions."""

    viewed_leaf_count: Annotated[
        Optional[int], pydantic.Field(alias="viewedLeafCount")
    ] = None
    r"""For shows and seasons, contains the number of viewed episodes."""

    view_offset: Annotated[Optional[int], pydantic.Field(alias="viewOffset")] = None
    r"""When a user is in the process of viewing or listening to this item, this attribute contains the current offset, in units of milliseconds."""

    writer: Annotated[Optional[List[Tag]], pydantic.Field(alias="Writer")] = None

    year: Optional[int] = None
    r"""When present, the year associated with the item's release (e.g. release year for a movie)."""

    metadata_item: Annotated[
        Optional[List[Items]], pydantic.Field(alias="MetadataItem")
    ] = None

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
