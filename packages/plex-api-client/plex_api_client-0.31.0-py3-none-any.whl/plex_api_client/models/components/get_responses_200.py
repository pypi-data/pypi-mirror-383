"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from plex_api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class HomeVisibility(str, Enum):
    r"""Whether this hub is visible on the home screen
    - all: Visible to all users
    - none: Visible to no users
    - admin: Visible to only admin users
    - shared: Visible to shared users

    """

    ALL = "all"
    NONE = "none"
    ADMIN = "admin"
    SHARED = "shared"


class RecommendationsVisibility(str, Enum):
    r"""The visibility of this hub in recommendations:
    - all: Visible to all users
    - none: Visible to no users
    - admin: Visible to only admin users
    - shared: Visible to shared users

    """

    ALL = "all"
    NONE = "none"
    ADMIN = "admin"
    SHARED = "shared"


class GetResponses200HubTypedDict(TypedDict):
    home_visibility: NotRequired[HomeVisibility]
    r"""Whether this hub is visible on the home screen
    - all: Visible to all users
    - none: Visible to no users
    - admin: Visible to only admin users
    - shared: Visible to shared users

    """
    identifier: NotRequired[str]
    r"""The identifier for this hub"""
    promoted_to_own_home: NotRequired[bool]
    r"""Whether this hub is visible to admin user home"""
    promoted_to_recommended: NotRequired[bool]
    r"""Whether this hub is promoted to all for recommendations"""
    promoted_to_shared_home: NotRequired[bool]
    r"""Whether this hub is visible to shared user's home"""
    recommendations_visibility: NotRequired[RecommendationsVisibility]
    r"""The visibility of this hub in recommendations:
    - all: Visible to all users
    - none: Visible to no users
    - admin: Visible to only admin users
    - shared: Visible to shared users

    """
    title: NotRequired[str]
    r"""The title of this hub"""


class GetResponses200Hub(BaseModel):
    home_visibility: Annotated[
        Optional[HomeVisibility], pydantic.Field(alias="homeVisibility")
    ] = None
    r"""Whether this hub is visible on the home screen
    - all: Visible to all users
    - none: Visible to no users
    - admin: Visible to only admin users
    - shared: Visible to shared users

    """

    identifier: Optional[str] = None
    r"""The identifier for this hub"""

    promoted_to_own_home: Annotated[
        Optional[bool], pydantic.Field(alias="promotedToOwnHome")
    ] = None
    r"""Whether this hub is visible to admin user home"""

    promoted_to_recommended: Annotated[
        Optional[bool], pydantic.Field(alias="promotedToRecommended")
    ] = None
    r"""Whether this hub is promoted to all for recommendations"""

    promoted_to_shared_home: Annotated[
        Optional[bool], pydantic.Field(alias="promotedToSharedHome")
    ] = None
    r"""Whether this hub is visible to shared user's home"""

    recommendations_visibility: Annotated[
        Optional[RecommendationsVisibility],
        pydantic.Field(alias="recommendationsVisibility"),
    ] = None
    r"""The visibility of this hub in recommendations:
    - all: Visible to all users
    - none: Visible to no users
    - admin: Visible to only admin users
    - shared: Visible to shared users

    """

    title: Optional[str] = None
    r"""The title of this hub"""


class GetResponses200MediaContainerTypedDict(TypedDict):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: NotRequired[str]
    offset: NotRequired[int]
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """
    size: NotRequired[int]
    total_size: NotRequired[int]
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """
    hub: NotRequired[List[GetResponses200HubTypedDict]]


class GetResponses200MediaContainer(BaseModel):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: Optional[str] = None

    offset: Optional[int] = None
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """

    size: Optional[int] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """

    hub: Annotated[Optional[List[GetResponses200Hub]], pydantic.Field(alias="Hub")] = (
        None
    )


class GetResponses200TypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[GetResponses200MediaContainerTypedDict]


class GetResponses200(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[GetResponses200MediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None
