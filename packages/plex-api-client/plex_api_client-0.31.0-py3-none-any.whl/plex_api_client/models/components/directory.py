"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from plex_api_client.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PivotTypedDict(TypedDict):
    title: NotRequired[str]
    type: NotRequired[str]
    context: NotRequired[str]
    id: NotRequired[str]
    key: NotRequired[str]
    symbol: NotRequired[str]


class Pivot(BaseModel):
    title: Optional[str] = None

    type: Optional[str] = None

    context: Optional[str] = None

    id: Optional[str] = None

    key: Optional[str] = None

    symbol: Optional[str] = None


class DirectoryTypedDict(TypedDict):
    title: NotRequired[str]
    type: NotRequired[str]
    art: NotRequired[str]
    content: NotRequired[bool]
    filter_: NotRequired[str]
    has_prefs: NotRequired[bool]
    has_store_services: NotRequired[bool]
    hub_key: NotRequired[str]
    identifier: NotRequired[str]
    key: NotRequired[str]
    last_accessed_at: NotRequired[int]
    pivot: NotRequired[List[PivotTypedDict]]
    share: NotRequired[int]
    thumb: NotRequired[str]
    title_bar: NotRequired[str]


class Directory(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    title: Optional[str] = None

    type: Optional[str] = None

    art: Optional[str] = None

    content: Optional[bool] = None

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = None

    has_prefs: Annotated[Optional[bool], pydantic.Field(alias="hasPrefs")] = None

    has_store_services: Annotated[
        Optional[bool], pydantic.Field(alias="hasStoreServices")
    ] = None

    hub_key: Annotated[Optional[str], pydantic.Field(alias="hubKey")] = None

    identifier: Optional[str] = None

    key: Optional[str] = None

    last_accessed_at: Annotated[
        Optional[int], pydantic.Field(alias="lastAccessedAt")
    ] = None

    pivot: Annotated[Optional[List[Pivot]], pydantic.Field(alias="Pivot")] = None

    share: Optional[int] = None

    thumb: Optional[str] = None

    title_bar: Annotated[Optional[str], pydantic.Field(alias="titleBar")] = None

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
