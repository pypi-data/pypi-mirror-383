"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .channelmapping import ChannelMapping, ChannelMappingTypedDict
from plex_api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class MediaContainerWithDeviceDeviceTypedDict(TypedDict):
    channel_mapping: NotRequired[List[ChannelMappingTypedDict]]
    key: NotRequired[str]
    last_seen_at: NotRequired[int]
    make: NotRequired[str]
    model: NotRequired[str]
    model_number: NotRequired[str]
    protocol: NotRequired[str]
    sources: NotRequired[str]
    state: NotRequired[str]
    status: NotRequired[str]
    tuners: NotRequired[str]
    uri: NotRequired[str]
    uuid: NotRequired[str]


class MediaContainerWithDeviceDevice(BaseModel):
    channel_mapping: Annotated[
        Optional[List[ChannelMapping]], pydantic.Field(alias="ChannelMapping")
    ] = None

    key: Optional[str] = None

    last_seen_at: Annotated[Optional[int], pydantic.Field(alias="lastSeenAt")] = None

    make: Optional[str] = None

    model: Optional[str] = None

    model_number: Annotated[Optional[str], pydantic.Field(alias="modelNumber")] = None

    protocol: Optional[str] = None

    sources: Optional[str] = None

    state: Optional[str] = None

    status: Optional[str] = None

    tuners: Optional[str] = None

    uri: Optional[str] = None

    uuid: Optional[str] = None


class MediaContainerWithDeviceMediaContainerTypedDict(TypedDict):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: NotRequired[str]
    offset: NotRequired[int]
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """
    size: NotRequired[int]
    total_size: NotRequired[int]
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """
    device: NotRequired[List[MediaContainerWithDeviceDeviceTypedDict]]


class MediaContainerWithDeviceMediaContainer(BaseModel):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: Optional[str] = None

    offset: Optional[int] = None
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """

    size: Optional[int] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """

    device: Annotated[
        Optional[List[MediaContainerWithDeviceDevice]], pydantic.Field(alias="Device")
    ] = None


class MediaContainerWithDeviceTypedDict(TypedDict):
    media_container: NotRequired[MediaContainerWithDeviceMediaContainerTypedDict]


class MediaContainerWithDevice(BaseModel):
    media_container: Annotated[
        Optional[MediaContainerWithDeviceMediaContainer],
        pydantic.Field(alias="MediaContainer"),
    ] = None
