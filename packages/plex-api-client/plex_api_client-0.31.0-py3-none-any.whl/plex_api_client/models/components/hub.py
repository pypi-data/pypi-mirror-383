"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .metadata import Metadata, MetadataTypedDict
from plex_api_client.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class HubTypedDict(TypedDict):
    title: NotRequired[str]
    r"""A title for this grouping of content"""
    type: NotRequired[str]
    r"""The type of the items contained in this hub, or possibly `mixed` if there are multiple types"""
    context: NotRequired[str]
    hub_identifier: NotRequired[str]
    r"""A unique identifier for the hub"""
    hub_key: NotRequired[str]
    r"""A key at which the exact content currently displayed can be fetched again. This is particularly important when a hub is marked as random and requesting the `key` may get different results. It's otherwise optional.

    """
    key: NotRequired[str]
    r"""The key at which all of the content for this hub can be retrieved"""
    metadata: NotRequired[List[MetadataTypedDict]]
    more: NotRequired[bool]
    r"""\"A boolean indicating that the hub contains more than what's included in the current response.\" 

    """
    promoted: NotRequired[bool]
    r"""Indicating if the hub should be promoted to the user's homescreen"""
    random: NotRequired[bool]
    r"""Indicating that the contents of the hub may change on each request"""
    size: NotRequired[int]
    style: NotRequired[str]
    r"""A suggestion on how this hub's contents might be displayed by a client. Some examples include `hero`, `list`, `spotlight`, and `upsell`"""
    subtype: NotRequired[str]
    r"""The subtype of the items contained in this hub, or possibly `mixed` if there are multiple types"""
    total_size: NotRequired[int]


class Hub(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    title: Optional[str] = None
    r"""A title for this grouping of content"""

    type: Optional[str] = None
    r"""The type of the items contained in this hub, or possibly `mixed` if there are multiple types"""

    context: Optional[str] = None

    hub_identifier: Annotated[Optional[str], pydantic.Field(alias="hubIdentifier")] = (
        None
    )
    r"""A unique identifier for the hub"""

    hub_key: Annotated[Optional[str], pydantic.Field(alias="hubKey")] = None
    r"""A key at which the exact content currently displayed can be fetched again. This is particularly important when a hub is marked as random and requesting the `key` may get different results. It's otherwise optional.

    """

    key: Optional[str] = None
    r"""The key at which all of the content for this hub can be retrieved"""

    metadata: Annotated[Optional[List[Metadata]], pydantic.Field(alias="Metadata")] = (
        None
    )

    more: Optional[bool] = None
    r"""\"A boolean indicating that the hub contains more than what's included in the current response.\" 

    """

    promoted: Optional[bool] = None
    r"""Indicating if the hub should be promoted to the user's homescreen"""

    random: Optional[bool] = None
    r"""Indicating that the contents of the hub may change on each request"""

    size: Optional[int] = None

    style: Optional[str] = None
    r"""A suggestion on how this hub's contents might be displayed by a client. Some examples include `hero`, `list`, `spotlight`, and `upsell`"""

    subtype: Optional[str] = None
    r"""The subtype of the items contained in this hub, or possibly `mixed` if there are multiple types"""

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
