"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetBackgroundTasksType(str, Enum):
    TRANSCODE = "transcode"


class TranscodeJobTypedDict(TypedDict):
    generator_id: NotRequired[int]
    key: NotRequired[str]
    progress: NotRequired[float]
    rating_key: NotRequired[str]
    remaining: NotRequired[int]
    r"""The number of seconds remaining in this job"""
    size: NotRequired[int]
    r"""The size of the result so far"""
    speed: NotRequired[float]
    r"""The speed of the transcode; 1.0 means real-time"""
    target_tag_id: NotRequired[int]
    r"""The tag associated with the job.  This could be the tag containing the optimizer settings."""
    thumb: NotRequired[str]
    title: NotRequired[str]
    type: NotRequired[GetBackgroundTasksType]


class TranscodeJob(BaseModel):
    generator_id: Annotated[Optional[int], pydantic.Field(alias="generatorID")] = None

    key: Optional[str] = None

    progress: Optional[float] = None

    rating_key: Annotated[Optional[str], pydantic.Field(alias="ratingKey")] = None

    remaining: Optional[int] = None
    r"""The number of seconds remaining in this job"""

    size: Optional[int] = None
    r"""The size of the result so far"""

    speed: Optional[float] = None
    r"""The speed of the transcode; 1.0 means real-time"""

    target_tag_id: Annotated[Optional[int], pydantic.Field(alias="targetTagID")] = None
    r"""The tag associated with the job.  This could be the tag containing the optimizer settings."""

    thumb: Optional[str] = None

    title: Optional[str] = None

    type: Optional[GetBackgroundTasksType] = None


class GetBackgroundTasksMediaContainerTypedDict(TypedDict):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: NotRequired[str]
    offset: NotRequired[int]
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """
    size: NotRequired[int]
    total_size: NotRequired[int]
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """
    transcode_job: NotRequired[List[TranscodeJobTypedDict]]


class GetBackgroundTasksMediaContainer(BaseModel):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: Optional[str] = None

    offset: Optional[int] = None
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """

    size: Optional[int] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """

    transcode_job: Annotated[
        Optional[List[TranscodeJob]], pydantic.Field(alias="TranscodeJob")
    ] = None


class GetBackgroundTasksResponseBodyTypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[GetBackgroundTasksMediaContainerTypedDict]


class GetBackgroundTasksResponseBody(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[GetBackgroundTasksMediaContainer],
        pydantic.Field(alias="MediaContainer"),
    ] = None


class GetBackgroundTasksResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetBackgroundTasksResponseBodyTypedDict]
    r"""OK"""


class GetBackgroundTasksResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetBackgroundTasksResponseBody] = None
    r"""OK"""
