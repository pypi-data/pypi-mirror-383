"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .device import Device, DeviceTypedDict
from plex_api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainerTypedDict(
    TypedDict
):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: NotRequired[str]
    offset: NotRequired[int]
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """
    size: NotRequired[int]
    total_size: NotRequired[int]
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """
    status: NotRequired[int]
    r"""A status indicator. If present and non-zero, indicates an error"""


class DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainer(BaseModel):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: Optional[str] = None

    offset: Optional[int] = None
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """

    size: Optional[int] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """

    status: Optional[int] = None
    r"""A status indicator. If present and non-zero, indicates an error"""


class DvrTypedDict(TypedDict):
    device: NotRequired[List[DeviceTypedDict]]
    key: NotRequired[str]
    language: NotRequired[str]
    lineup: NotRequired[str]
    uuid: NotRequired[str]


class Dvr(BaseModel):
    device: Annotated[Optional[List[Device]], pydantic.Field(alias="Device")] = None

    key: Optional[str] = None

    language: Optional[str] = None

    lineup: Optional[str] = None

    uuid: Optional[str] = None


class DvrRequestHandlerSlashGetResponses200MediaContainerTypedDict(TypedDict):
    media_container: NotRequired[
        DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainerTypedDict
    ]
    dvr: NotRequired[List[DvrTypedDict]]


class DvrRequestHandlerSlashGetResponses200MediaContainer(BaseModel):
    media_container: Annotated[
        Optional[DvrRequestHandlerSlashGetResponses200MediaContainerMediaContainer],
        pydantic.Field(alias="MediaContainer"),
    ] = None

    dvr: Annotated[Optional[List[Dvr]], pydantic.Field(alias="DVR")] = None


class DvrRequestHandlerSlashGetResponses200TypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[
        DvrRequestHandlerSlashGetResponses200MediaContainerTypedDict
    ]


class DvrRequestHandlerSlashGetResponses200(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[DvrRequestHandlerSlashGetResponses200MediaContainer],
        pydantic.Field(alias="MediaContainer"),
    ] = None
