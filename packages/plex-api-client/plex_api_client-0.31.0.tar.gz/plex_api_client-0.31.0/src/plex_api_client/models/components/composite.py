"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Format(str, Enum):
    r"""The image type"""

    JPG = "jpg"
    PNG = "png"


class Crop(str, Enum):
    r"""Where to crop source images to fit into composite image proportions"""

    CENTER = "center"
    TOP = "top"


class CompositeMedia(str, Enum):
    r"""The default image type to use as the sources"""

    THUMB = "thumb"
    ART = "art"
    BANNER = "banner"


class CompositeTypedDict(TypedDict):
    type: NotRequired[int]
    r"""Limit composite to specified metadata types"""
    format_: NotRequired[Format]
    r"""The image type"""
    background_color: NotRequired[str]
    r"""6 character hex RGB value for background color for image"""
    border: NotRequired[int]
    r"""The width of the intra-image border"""
    cols: NotRequired[int]
    r"""Number of columns to construct in the composite image"""
    crop: NotRequired[Crop]
    r"""Where to crop source images to fit into composite image proportions"""
    height: NotRequired[int]
    r"""The height of the image"""
    media: NotRequired[CompositeMedia]
    r"""The default image type to use as the sources"""
    repeat: NotRequired[bool]
    r"""Allow repetion of images if there are not enough source images to fill grid"""
    rows: NotRequired[int]
    r"""Number of rows to construct in the composite image"""
    width: NotRequired[int]
    r"""The width of the image"""


class Composite(BaseModel):
    type: Annotated[Optional[int], FieldMetadata(query=True)] = None
    r"""Limit composite to specified metadata types"""

    format_: Annotated[
        Optional[Format], pydantic.Field(alias="format"), FieldMetadata(query=True)
    ] = None
    r"""The image type"""

    background_color: Annotated[
        Optional[str],
        pydantic.Field(alias="backgroundColor"),
        FieldMetadata(query=True),
    ] = None
    r"""6 character hex RGB value for background color for image"""

    border: Annotated[Optional[int], FieldMetadata(query=True)] = None
    r"""The width of the intra-image border"""

    cols: Annotated[Optional[int], FieldMetadata(query=True)] = None
    r"""Number of columns to construct in the composite image"""

    crop: Annotated[Optional[Crop], FieldMetadata(query=True)] = None
    r"""Where to crop source images to fit into composite image proportions"""

    height: Annotated[Optional[int], FieldMetadata(query=True)] = None
    r"""The height of the image"""

    media: Annotated[Optional[CompositeMedia], FieldMetadata(query=True)] = None
    r"""The default image type to use as the sources"""

    repeat: Annotated[Optional[bool], FieldMetadata(query=True)] = None
    r"""Allow repetion of images if there are not enough source images to fill grid"""

    rows: Annotated[Optional[int], FieldMetadata(query=True)] = None
    r"""Number of rows to construct in the composite image"""

    width: Annotated[Optional[int], FieldMetadata(query=True)] = None
    r"""The width of the image"""
