"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from plex_api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class HistoryAllGetResponses200MetadataTypedDict(TypedDict):
    account_id: NotRequired[int]
    r"""The account id of this playback"""
    device_id: NotRequired[int]
    r"""The device id which played the item"""
    history_key: NotRequired[str]
    r"""The key for this individual history item"""
    key: NotRequired[str]
    r"""The metadata key for the item played"""
    library_section_id: NotRequired[str]
    r"""The library section id containing the item played"""
    originally_available_at: NotRequired[str]
    r"""The originally available at of the item played"""
    rating_key: NotRequired[str]
    r"""The rating key for the item played"""
    thumb: NotRequired[str]
    r"""The thumb of the item played"""
    title: NotRequired[str]
    r"""The title of the item played"""
    type: NotRequired[str]
    r"""The metadata type of the item played"""
    viewed_at: NotRequired[int]
    r"""The time when the item was played"""


class HistoryAllGetResponses200Metadata(BaseModel):
    account_id: Annotated[Optional[int], pydantic.Field(alias="accountID")] = None
    r"""The account id of this playback"""

    device_id: Annotated[Optional[int], pydantic.Field(alias="deviceID")] = None
    r"""The device id which played the item"""

    history_key: Annotated[Optional[str], pydantic.Field(alias="historyKey")] = None
    r"""The key for this individual history item"""

    key: Optional[str] = None
    r"""The metadata key for the item played"""

    library_section_id: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionID")
    ] = None
    r"""The library section id containing the item played"""

    originally_available_at: Annotated[
        Optional[str], pydantic.Field(alias="originallyAvailableAt")
    ] = None
    r"""The originally available at of the item played"""

    rating_key: Annotated[Optional[str], pydantic.Field(alias="ratingKey")] = None
    r"""The rating key for the item played"""

    thumb: Optional[str] = None
    r"""The thumb of the item played"""

    title: Optional[str] = None
    r"""The title of the item played"""

    type: Optional[str] = None
    r"""The metadata type of the item played"""

    viewed_at: Annotated[Optional[int], pydantic.Field(alias="viewedAt")] = None
    r"""The time when the item was played"""


class HistoryAllGetResponses200MediaContainerTypedDict(TypedDict):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: NotRequired[str]
    offset: NotRequired[int]
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """
    size: NotRequired[int]
    total_size: NotRequired[int]
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """
    metadata: NotRequired[List[HistoryAllGetResponses200MetadataTypedDict]]


class HistoryAllGetResponses200MediaContainer(BaseModel):
    r"""`MediaContainer` is the root element of most Plex API responses. It serves as a generic container for various types of content (Metadata, Hubs, Directories, etc.) and includes pagination information (offset, size, totalSize) when applicable.
    Common attributes: - identifier: Unique identifier for this container - size: Number of items in this response page - totalSize: Total number of items available (for pagination) - offset: Starting index of this page (for pagination)
    The container often \"hoists\" common attributes from its children. For example, if all tracks in a container share the same album title, the `parentTitle` attribute may appear on the MediaContainer rather than being repeated on each track.

    """

    identifier: Optional[str] = None

    offset: Optional[int] = None
    r"""The offset of where this container page starts among the total objects available. Also provided in the `X-Plex-Container-Start` header.

    """

    size: Optional[int] = None

    total_size: Annotated[Optional[int], pydantic.Field(alias="totalSize")] = None
    r"""The total size of objects available. Also provided in the `X-Plex-Container-Total-Size` header.

    """

    metadata: Annotated[
        Optional[List[HistoryAllGetResponses200Metadata]],
        pydantic.Field(alias="Metadata"),
    ] = None


class HistoryAllGetResponses200TypedDict(TypedDict):
    r"""OK"""

    media_container: NotRequired[HistoryAllGetResponses200MediaContainerTypedDict]


class HistoryAllGetResponses200(BaseModel):
    r"""OK"""

    media_container: Annotated[
        Optional[HistoryAllGetResponses200MediaContainer],
        pydantic.Field(alias="MediaContainer"),
    ] = None
