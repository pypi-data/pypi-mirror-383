# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .rcs_agent_email import RcsAgentEmail
    from .rcs_agent_phone import RcsAgentPhone
    from .rcs_agent_website import RcsAgentWebsite
    from .rcs_autofill_response import RcsAutofillResponse
    from .upsert_rcs_agent import UpsertRcsAgent
    from .upsert_rcs_links import UpsertRcsLinks
    from .upsert_rcs_opt_in import UpsertRcsOptIn
    from .upsert_rcs_opt_out import UpsertRcsOptOut
    from .upsert_rcs_use_case import UpsertRcsUseCase
_dynamic_imports: typing.Dict[str, str] = {
    "RcsAgentEmail": ".rcs_agent_email",
    "RcsAgentPhone": ".rcs_agent_phone",
    "RcsAgentWebsite": ".rcs_agent_website",
    "RcsAutofillResponse": ".rcs_autofill_response",
    "UpsertRcsAgent": ".upsert_rcs_agent",
    "UpsertRcsLinks": ".upsert_rcs_links",
    "UpsertRcsOptIn": ".upsert_rcs_opt_in",
    "UpsertRcsOptOut": ".upsert_rcs_opt_out",
    "UpsertRcsUseCase": ".upsert_rcs_use_case",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "RcsAgentEmail",
    "RcsAgentPhone",
    "RcsAgentWebsite",
    "RcsAutofillResponse",
    "UpsertRcsAgent",
    "UpsertRcsLinks",
    "UpsertRcsOptIn",
    "UpsertRcsOptOut",
    "UpsertRcsUseCase",
]
