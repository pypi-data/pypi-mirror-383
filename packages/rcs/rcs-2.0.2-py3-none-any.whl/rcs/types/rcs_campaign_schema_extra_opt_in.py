# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .rcs_campaign_opt_in_method_enum import RcsCampaignOptInMethodEnum


class RcsCampaignSchemaExtraOptIn(UniversalBaseModel):
    """
    Opt-in configuration.
    """

    method: typing.Optional[RcsCampaignOptInMethodEnum] = None
    terms_and_conditions: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="termsAndConditions")
    ] = pydantic.Field(default=None)
    """
    Message shown to users explaining what they are agreeing to when opting in.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
