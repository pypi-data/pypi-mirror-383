# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.campaign_enum import CampaignEnum
from ..types.conversation import Conversation
from ..types.conversation_list import ConversationList
from ..types.get_conversation_params import GetConversationParams
from ..types.sender import Sender
from ..types.successful_conversation_update import SuccessfulConversationUpdate
from .raw_client import AsyncRawConversationsClient, RawConversationsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ConversationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawConversationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawConversationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawConversationsClient
        """
        return self._raw_client

    def get(
        self, *, request: GetConversationParams, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[Conversation]:
        """
        Fetch a specific conversation using either its unique identifier or by matching sender and recipient details.

        Parameters
        ----------
        request : GetConversationParams

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Conversation]
            Returns the full conversation details, or null if not found.

        Examples
        --------
        from rcs import ConversationByIdParams, Pinnacle

        client = Pinnacle(
            api_key="YOUR_API_KEY",
        )
        client.conversations.get(
            request=ConversationByIdParams(
                id=1,
            ),
        )
        """
        _response = self._raw_client.get(request=request, request_options=request_options)
        return _response.data

    def list(
        self,
        *,
        page_index: int,
        brand_id: typing.Optional[int] = OMIT,
        campaign_id: typing.Optional[int] = OMIT,
        campaign_type: typing.Optional[CampaignEnum] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        receiver: typing.Optional[str] = OMIT,
        sender: typing.Optional[Sender] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConversationList:
        """
        Retrieves conversations by page with optional filtering based off provided parameters.

        Parameters
        ----------
        page_index : int
            Zero-based index for pagination.

        brand_id : typing.Optional[int]
            The unique identifier of the brand to filter conversations.

        campaign_id : typing.Optional[int]
            The unique identifier of the campaign to filter conversations.

        campaign_type : typing.Optional[CampaignEnum]

        page_size : typing.Optional[int]
            Number of conversations to return per page.

        receiver : typing.Optional[str]
            Receiver's phone number in E.164 format.

        sender : typing.Optional[Sender]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConversationList
            Returns conversations that meets your filters.

        Examples
        --------
        from rcs import Pinnacle

        client = Pinnacle(
            api_key="YOUR_API_KEY",
        )
        client.conversations.list(
            brand_id=101,
            campaign_id=136,
            campaign_type="TOLL_FREE",
            page_index=0,
            page_size=20,
            receiver="+16509231662",
            sender="+18445551234",
        )
        """
        _response = self._raw_client.list(
            page_index=page_index,
            brand_id=brand_id,
            campaign_id=campaign_id,
            campaign_type=campaign_type,
            page_size=page_size,
            receiver=receiver,
            sender=sender,
            request_options=request_options,
        )
        return _response.data

    def update(
        self, *, id: int, notes: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SuccessfulConversationUpdate:
        """
        Update the notes associated with a specific conversation.

        Parameters
        ----------
        id : int
            The unique identifier of the conversation to update.

        notes : str
            New notes or comments for the conversation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SuccessfulConversationUpdate
            Successfully updated the conversation.

        Examples
        --------
        from rcs import Pinnacle

        client = Pinnacle(
            api_key="YOUR_API_KEY",
        )
        client.conversations.update(
            id=123,
            notes="Follow-up completed. Customer satisfied with resolution.",
        )
        """
        _response = self._raw_client.update(id=id, notes=notes, request_options=request_options)
        return _response.data


class AsyncConversationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawConversationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawConversationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawConversationsClient
        """
        return self._raw_client

    async def get(
        self, *, request: GetConversationParams, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[Conversation]:
        """
        Fetch a specific conversation using either its unique identifier or by matching sender and recipient details.

        Parameters
        ----------
        request : GetConversationParams

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Conversation]
            Returns the full conversation details, or null if not found.

        Examples
        --------
        import asyncio

        from rcs import AsyncPinnacle, ConversationByIdParams

        client = AsyncPinnacle(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.conversations.get(
                request=ConversationByIdParams(
                    id=1,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(request=request, request_options=request_options)
        return _response.data

    async def list(
        self,
        *,
        page_index: int,
        brand_id: typing.Optional[int] = OMIT,
        campaign_id: typing.Optional[int] = OMIT,
        campaign_type: typing.Optional[CampaignEnum] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        receiver: typing.Optional[str] = OMIT,
        sender: typing.Optional[Sender] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConversationList:
        """
        Retrieves conversations by page with optional filtering based off provided parameters.

        Parameters
        ----------
        page_index : int
            Zero-based index for pagination.

        brand_id : typing.Optional[int]
            The unique identifier of the brand to filter conversations.

        campaign_id : typing.Optional[int]
            The unique identifier of the campaign to filter conversations.

        campaign_type : typing.Optional[CampaignEnum]

        page_size : typing.Optional[int]
            Number of conversations to return per page.

        receiver : typing.Optional[str]
            Receiver's phone number in E.164 format.

        sender : typing.Optional[Sender]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConversationList
            Returns conversations that meets your filters.

        Examples
        --------
        import asyncio

        from rcs import AsyncPinnacle

        client = AsyncPinnacle(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.conversations.list(
                brand_id=101,
                campaign_id=136,
                campaign_type="TOLL_FREE",
                page_index=0,
                page_size=20,
                receiver="+16509231662",
                sender="+18445551234",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            page_index=page_index,
            brand_id=brand_id,
            campaign_id=campaign_id,
            campaign_type=campaign_type,
            page_size=page_size,
            receiver=receiver,
            sender=sender,
            request_options=request_options,
        )
        return _response.data

    async def update(
        self, *, id: int, notes: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SuccessfulConversationUpdate:
        """
        Update the notes associated with a specific conversation.

        Parameters
        ----------
        id : int
            The unique identifier of the conversation to update.

        notes : str
            New notes or comments for the conversation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SuccessfulConversationUpdate
            Successfully updated the conversation.

        Examples
        --------
        import asyncio

        from rcs import AsyncPinnacle

        client = AsyncPinnacle(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.conversations.update(
                id=123,
                notes="Follow-up completed. Customer satisfied with resolution.",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(id=id, notes=notes, request_options=request_options)
        return _response.data
