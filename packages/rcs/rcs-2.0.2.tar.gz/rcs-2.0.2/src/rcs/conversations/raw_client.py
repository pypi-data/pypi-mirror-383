# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..errors.bad_request_error import BadRequestError
from ..errors.internal_server_error import InternalServerError
from ..errors.unauthorized_error import UnauthorizedError
from ..types.campaign_enum import CampaignEnum
from ..types.conversation import Conversation
from ..types.conversation_list import ConversationList
from ..types.error import Error
from ..types.get_conversation_params import GetConversationParams
from ..types.sender import Sender
from ..types.successful_conversation_update import SuccessfulConversationUpdate

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawConversationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(
        self, *, request: GetConversationParams, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.Optional[Conversation]]:
        """
        Fetch a specific conversation using either its unique identifier or by matching sender and recipient details.

        Parameters
        ----------
        request : GetConversationParams

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.Optional[Conversation]]
            Returns the full conversation details, or null if not found.
        """
        _response = self._client_wrapper.httpx_client.request(
            "conversations/get",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=GetConversationParams, direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if _response is None or not _response.text.strip():
                return HttpResponse(response=_response, data=None)
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.Optional[Conversation],
                    parse_obj_as(
                        type_=typing.Optional[Conversation],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list(
        self,
        *,
        page_index: int,
        brand_id: typing.Optional[int] = OMIT,
        campaign_id: typing.Optional[int] = OMIT,
        campaign_type: typing.Optional[CampaignEnum] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        receiver: typing.Optional[str] = OMIT,
        sender: typing.Optional[Sender] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ConversationList]:
        """
        Retrieves conversations by page with optional filtering based off provided parameters.

        Parameters
        ----------
        page_index : int
            Zero-based index for pagination.

        brand_id : typing.Optional[int]
            The unique identifier of the brand to filter conversations.

        campaign_id : typing.Optional[int]
            The unique identifier of the campaign to filter conversations.

        campaign_type : typing.Optional[CampaignEnum]

        page_size : typing.Optional[int]
            Number of conversations to return per page.

        receiver : typing.Optional[str]
            Receiver's phone number in E.164 format.

        sender : typing.Optional[Sender]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ConversationList]
            Returns conversations that meets your filters.
        """
        _response = self._client_wrapper.httpx_client.request(
            "conversations/list",
            method="POST",
            json={
                "brandId": brand_id,
                "campaignId": campaign_id,
                "campaignType": campaign_type,
                "pageIndex": page_index,
                "pageSize": page_size,
                "receiver": receiver,
                "sender": sender,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ConversationList,
                    parse_obj_as(
                        type_=ConversationList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self, *, id: int, notes: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[SuccessfulConversationUpdate]:
        """
        Update the notes associated with a specific conversation.

        Parameters
        ----------
        id : int
            The unique identifier of the conversation to update.

        notes : str
            New notes or comments for the conversation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SuccessfulConversationUpdate]
            Successfully updated the conversation.
        """
        _response = self._client_wrapper.httpx_client.request(
            "conversations/update",
            method="POST",
            json={
                "id": id,
                "notes": notes,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SuccessfulConversationUpdate,
                    parse_obj_as(
                        type_=SuccessfulConversationUpdate,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawConversationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(
        self, *, request: GetConversationParams, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.Optional[Conversation]]:
        """
        Fetch a specific conversation using either its unique identifier or by matching sender and recipient details.

        Parameters
        ----------
        request : GetConversationParams

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.Optional[Conversation]]
            Returns the full conversation details, or null if not found.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "conversations/get",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=GetConversationParams, direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if _response is None or not _response.text.strip():
                return AsyncHttpResponse(response=_response, data=None)
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.Optional[Conversation],
                    parse_obj_as(
                        type_=typing.Optional[Conversation],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list(
        self,
        *,
        page_index: int,
        brand_id: typing.Optional[int] = OMIT,
        campaign_id: typing.Optional[int] = OMIT,
        campaign_type: typing.Optional[CampaignEnum] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        receiver: typing.Optional[str] = OMIT,
        sender: typing.Optional[Sender] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ConversationList]:
        """
        Retrieves conversations by page with optional filtering based off provided parameters.

        Parameters
        ----------
        page_index : int
            Zero-based index for pagination.

        brand_id : typing.Optional[int]
            The unique identifier of the brand to filter conversations.

        campaign_id : typing.Optional[int]
            The unique identifier of the campaign to filter conversations.

        campaign_type : typing.Optional[CampaignEnum]

        page_size : typing.Optional[int]
            Number of conversations to return per page.

        receiver : typing.Optional[str]
            Receiver's phone number in E.164 format.

        sender : typing.Optional[Sender]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ConversationList]
            Returns conversations that meets your filters.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "conversations/list",
            method="POST",
            json={
                "brandId": brand_id,
                "campaignId": campaign_id,
                "campaignType": campaign_type,
                "pageIndex": page_index,
                "pageSize": page_size,
                "receiver": receiver,
                "sender": sender,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ConversationList,
                    parse_obj_as(
                        type_=ConversationList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self, *, id: int, notes: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[SuccessfulConversationUpdate]:
        """
        Update the notes associated with a specific conversation.

        Parameters
        ----------
        id : int
            The unique identifier of the conversation to update.

        notes : str
            New notes or comments for the conversation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SuccessfulConversationUpdate]
            Successfully updated the conversation.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "conversations/update",
            method="POST",
            json={
                "id": id,
                "notes": notes,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SuccessfulConversationUpdate,
                    parse_obj_as(
                        type_=SuccessfulConversationUpdate,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
