# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from panshi2task.grpc_gen import task_paddle_pb2 as panshi2task_dot_grpc__gen_dot_task__paddle__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in panshi2task/grpc_gen/task_paddle_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class OCRStub(object):
    """===================OCR==========================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecStream = channel.unary_stream(
                '/panshi.task.paddle.OCR/RecStream',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.OCRRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.OCRResponse.FromString,
                _registered_method=True)
        self.BytesRecStream = channel.stream_stream(
                '/panshi.task.paddle.OCR/BytesRecStream',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.BytesOCRRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.OCRResponse.FromString,
                _registered_method=True)


class OCRServicer(object):
    """===================OCR==========================
    """

    def RecStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BytesRecStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OCRServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecStream': grpc.unary_stream_rpc_method_handler(
                    servicer.RecStream,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.OCRRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.OCRResponse.SerializeToString,
            ),
            'BytesRecStream': grpc.stream_stream_rpc_method_handler(
                    servicer.BytesRecStream,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.BytesOCRRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.OCRResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'panshi.task.paddle.OCR', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('panshi.task.paddle.OCR', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OCR(object):
    """===================OCR==========================
    """

    @staticmethod
    def RecStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/panshi.task.paddle.OCR/RecStream',
            panshi2task_dot_grpc__gen_dot_task__paddle__pb2.OCRRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__paddle__pb2.OCRResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BytesRecStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/panshi.task.paddle.OCR/BytesRecStream',
            panshi2task_dot_grpc__gen_dot_task__paddle__pb2.BytesOCRRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__paddle__pb2.OCRResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StructureStub(object):
    """====================Structure======================

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyseStream = channel.unary_stream(
                '/panshi.task.paddle.Structure/AnalyseStream',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.StructureRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.StructureResponse.FromString,
                _registered_method=True)
        self.BytesAnalyseStream = channel.stream_stream(
                '/panshi.task.paddle.Structure/BytesAnalyseStream',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.BytesStructureRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.StructureResponse.FromString,
                _registered_method=True)


class StructureServicer(object):
    """====================Structure======================

    """

    def AnalyseStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BytesAnalyseStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StructureServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyseStream': grpc.unary_stream_rpc_method_handler(
                    servicer.AnalyseStream,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.StructureRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.StructureResponse.SerializeToString,
            ),
            'BytesAnalyseStream': grpc.stream_stream_rpc_method_handler(
                    servicer.BytesAnalyseStream,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.BytesStructureRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.StructureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'panshi.task.paddle.Structure', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('panshi.task.paddle.Structure', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Structure(object):
    """====================Structure======================

    """

    @staticmethod
    def AnalyseStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/panshi.task.paddle.Structure/AnalyseStream',
            panshi2task_dot_grpc__gen_dot_task__paddle__pb2.StructureRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__paddle__pb2.StructureResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BytesAnalyseStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/panshi.task.paddle.Structure/BytesAnalyseStream',
            panshi2task_dot_grpc__gen_dot_task__paddle__pb2.BytesStructureRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__paddle__pb2.StructureResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class InformationExtractStub(object):
    """===================UIE==========================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EntityExtract = channel.unary_unary(
                '/panshi.task.paddle.InformationExtract/EntityExtract',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.EntityExtractRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.EntityExtractResponse.FromString,
                _registered_method=True)
        self.RelationExtract = channel.unary_unary(
                '/panshi.task.paddle.InformationExtract/RelationExtract',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.RelationExtractRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.RelationExtractResponse.FromString,
                _registered_method=True)


class InformationExtractServicer(object):
    """===================UIE==========================
    """

    def EntityExtract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RelationExtract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InformationExtractServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EntityExtract': grpc.unary_unary_rpc_method_handler(
                    servicer.EntityExtract,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.EntityExtractRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.EntityExtractResponse.SerializeToString,
            ),
            'RelationExtract': grpc.unary_unary_rpc_method_handler(
                    servicer.RelationExtract,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.RelationExtractRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__paddle__pb2.RelationExtractResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'panshi.task.paddle.InformationExtract', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('panshi.task.paddle.InformationExtract', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class InformationExtract(object):
    """===================UIE==========================
    """

    @staticmethod
    def EntityExtract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.paddle.InformationExtract/EntityExtract',
            panshi2task_dot_grpc__gen_dot_task__paddle__pb2.EntityExtractRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__paddle__pb2.EntityExtractResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RelationExtract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.paddle.InformationExtract/RelationExtract',
            panshi2task_dot_grpc__gen_dot_task__paddle__pb2.RelationExtractRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__paddle__pb2.RelationExtractResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
