# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from panshi2task.grpc_gen import task_llm_pb2 as panshi2task_dot_grpc__gen_dot_task__llm__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in panshi2task/grpc_gen/task_llm_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class EntityMiniingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.excute = channel.unary_unary(
                '/panshi.task.llm.EntityMiniing/excute',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.EntityMiniingRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.EntityMiniingResponse.FromString,
                _registered_method=True)
        self.batch = channel.unary_unary(
                '/panshi.task.llm.EntityMiniing/batch',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.EntityMiniingBatchRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.EntityMiniingBatchResponse.FromString,
                _registered_method=True)


class EntityMiniingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def excute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EntityMiniingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'excute': grpc.unary_unary_rpc_method_handler(
                    servicer.excute,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.EntityMiniingRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.EntityMiniingResponse.SerializeToString,
            ),
            'batch': grpc.unary_unary_rpc_method_handler(
                    servicer.batch,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.EntityMiniingBatchRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.EntityMiniingBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'panshi.task.llm.EntityMiniing', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('panshi.task.llm.EntityMiniing', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EntityMiniing(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def excute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.EntityMiniing/excute',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.EntityMiniingRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.EntityMiniingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def batch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.EntityMiniing/batch',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.EntityMiniingBatchRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.EntityMiniingBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class FAQMiniingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.excute = channel.unary_unary(
                '/panshi.task.llm.FAQMiniing/excute',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.FAQMiniingRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.FAQMiniingResponse.FromString,
                _registered_method=True)
        self.batch = channel.unary_unary(
                '/panshi.task.llm.FAQMiniing/batch',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.FAQMiniingBatchRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.FAQMiniingBatchResponse.FromString,
                _registered_method=True)


class FAQMiniingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def excute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FAQMiniingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'excute': grpc.unary_unary_rpc_method_handler(
                    servicer.excute,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.FAQMiniingRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.FAQMiniingResponse.SerializeToString,
            ),
            'batch': grpc.unary_unary_rpc_method_handler(
                    servicer.batch,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.FAQMiniingBatchRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.FAQMiniingBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'panshi.task.llm.FAQMiniing', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('panshi.task.llm.FAQMiniing', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FAQMiniing(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def excute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.FAQMiniing/excute',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.FAQMiniingRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.FAQMiniingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def batch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.FAQMiniing/batch',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.FAQMiniingBatchRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.FAQMiniingBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class QuestionGenStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.excute = channel.unary_unary(
                '/panshi.task.llm.QuestionGen/excute',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.QuestionGenRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.QuestionGenResponse.FromString,
                _registered_method=True)
        self.batch = channel.unary_unary(
                '/panshi.task.llm.QuestionGen/batch',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.QuestionGenBatchRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.QuestionGenBatchResponse.FromString,
                _registered_method=True)


class QuestionGenServicer(object):
    """Missing associated documentation comment in .proto file."""

    def excute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuestionGenServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'excute': grpc.unary_unary_rpc_method_handler(
                    servicer.excute,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.QuestionGenRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.QuestionGenResponse.SerializeToString,
            ),
            'batch': grpc.unary_unary_rpc_method_handler(
                    servicer.batch,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.QuestionGenBatchRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.QuestionGenBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'panshi.task.llm.QuestionGen', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('panshi.task.llm.QuestionGen', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class QuestionGen(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def excute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.QuestionGen/excute',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.QuestionGenRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.QuestionGenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def batch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.QuestionGen/batch',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.QuestionGenBatchRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.QuestionGenBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SummaryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.excute = channel.unary_unary(
                '/panshi.task.llm.Summary/excute',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.SummaryRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.SummaryResponse.FromString,
                _registered_method=True)
        self.batch = channel.unary_unary(
                '/panshi.task.llm.Summary/batch',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.SummaryBatchRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.SummaryBatchResponse.FromString,
                _registered_method=True)


class SummaryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def excute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SummaryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'excute': grpc.unary_unary_rpc_method_handler(
                    servicer.excute,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.SummaryRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.SummaryResponse.SerializeToString,
            ),
            'batch': grpc.unary_unary_rpc_method_handler(
                    servicer.batch,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.SummaryBatchRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.SummaryBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'panshi.task.llm.Summary', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('panshi.task.llm.Summary', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Summary(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def excute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.Summary/excute',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.SummaryRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.SummaryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def batch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.Summary/batch',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.SummaryBatchRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.SummaryBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TableSummaryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.excute = channel.unary_unary(
                '/panshi.task.llm.TableSummary/excute',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TableSummaryRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TableSummaryResponse.FromString,
                _registered_method=True)
        self.batch = channel.unary_unary(
                '/panshi.task.llm.TableSummary/batch',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TableSummaryBatchRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TableSummaryBatchResponse.FromString,
                _registered_method=True)


class TableSummaryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def excute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TableSummaryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'excute': grpc.unary_unary_rpc_method_handler(
                    servicer.excute,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TableSummaryRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TableSummaryResponse.SerializeToString,
            ),
            'batch': grpc.unary_unary_rpc_method_handler(
                    servicer.batch,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TableSummaryBatchRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TableSummaryBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'panshi.task.llm.TableSummary', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('panshi.task.llm.TableSummary', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TableSummary(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def excute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.TableSummary/excute',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.TableSummaryRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.TableSummaryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def batch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.TableSummary/batch',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.TableSummaryBatchRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.TableSummaryBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TopicMiningStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.excute = channel.unary_unary(
                '/panshi.task.llm.TopicMining/excute',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TopicMiningRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TopicMiningResponse.FromString,
                _registered_method=True)
        self.batch = channel.unary_unary(
                '/panshi.task.llm.TopicMining/batch',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TopicMiningBatchRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TopicMiningBatchResponse.FromString,
                _registered_method=True)


class TopicMiningServicer(object):
    """Missing associated documentation comment in .proto file."""

    def excute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TopicMiningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'excute': grpc.unary_unary_rpc_method_handler(
                    servicer.excute,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TopicMiningRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TopicMiningResponse.SerializeToString,
            ),
            'batch': grpc.unary_unary_rpc_method_handler(
                    servicer.batch,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TopicMiningBatchRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TopicMiningBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'panshi.task.llm.TopicMining', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('panshi.task.llm.TopicMining', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TopicMining(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def excute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.TopicMining/excute',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.TopicMiningRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.TopicMiningResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def batch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.TopicMining/batch',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.TopicMiningBatchRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.TopicMiningBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TranslateStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.excute = channel.unary_unary(
                '/panshi.task.llm.Translate/excute',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TranslateRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TranslateResponse.FromString,
                _registered_method=True)
        self.batch = channel.unary_unary(
                '/panshi.task.llm.Translate/batch',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TranslateBatchRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TranslateBatchResponse.FromString,
                _registered_method=True)


class TranslateServicer(object):
    """Missing associated documentation comment in .proto file."""

    def excute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TranslateServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'excute': grpc.unary_unary_rpc_method_handler(
                    servicer.excute,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TranslateRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TranslateResponse.SerializeToString,
            ),
            'batch': grpc.unary_unary_rpc_method_handler(
                    servicer.batch,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TranslateBatchRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.TranslateBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'panshi.task.llm.Translate', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('panshi.task.llm.Translate', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Translate(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def excute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.Translate/excute',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.TranslateRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.TranslateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def batch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.Translate/batch',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.TranslateBatchRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.TranslateBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ImageToTextStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.excute = channel.unary_unary(
                '/panshi.task.llm.ImageToText/excute',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.ImageToTextRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.ImageToTextResponse.FromString,
                _registered_method=True)
        self.batch = channel.unary_unary(
                '/panshi.task.llm.ImageToText/batch',
                request_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.ImageToTextBatchRequest.SerializeToString,
                response_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.ImageToTextBatchResponse.FromString,
                _registered_method=True)


class ImageToTextServicer(object):
    """Missing associated documentation comment in .proto file."""

    def excute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageToTextServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'excute': grpc.unary_unary_rpc_method_handler(
                    servicer.excute,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.ImageToTextRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.ImageToTextResponse.SerializeToString,
            ),
            'batch': grpc.unary_unary_rpc_method_handler(
                    servicer.batch,
                    request_deserializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.ImageToTextBatchRequest.FromString,
                    response_serializer=panshi2task_dot_grpc__gen_dot_task__llm__pb2.ImageToTextBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'panshi.task.llm.ImageToText', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('panshi.task.llm.ImageToText', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ImageToText(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def excute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.ImageToText/excute',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.ImageToTextRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.ImageToTextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def batch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/panshi.task.llm.ImageToText/batch',
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.ImageToTextBatchRequest.SerializeToString,
            panshi2task_dot_grpc__gen_dot_task__llm__pb2.ImageToTextBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
