# Generated by Django 5.2.4 on 2025-07-10 16:49

from django.db import migrations

CREATE_SEASON_TRIGGER = """
CREATE OR REPLACE FUNCTION set_season_ordinal()
RETURNS TRIGGER AS $$
DECLARE
    max_ord INTEGER;
    use_ord_season BOOLEAN;
BEGIN
    -- Only execute if an ordinal was NOT provided in the INSERT statement
    IF NEW.ordinal IS NULL THEN
        -- Find the current max ordinal for the show
        SELECT MAX(ordinal) INTO max_ord
        FROM pbsmm_season WHERE show_id = NEW.show_id;

        IF max_ord IS NULL THEN
            -- This is the first season, so we check the show's setting
            SELECT ordinal_season INTO use_ord_season
            FROM pbsmm_show WHERE id = NEW.show_id;

            IF use_ord_season THEN
                NEW.ordinal := 1;
            ELSE
                NEW.ordinal := EXTRACT(YEAR FROM NOW());
            END IF;
        ELSE
            -- This is a subsequent season, so just increment
            NEW.ordinal := max_ord + 1;
        END IF;
    END IF;

    -- Return the row to be inserted (either with the original or new ordinal)
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_set_season_ordinal
BEFORE INSERT ON pbsmm_season
FOR EACH ROW
EXECUTE FUNCTION set_season_ordinal();
"""

DROP_SEASON_TRIGGER = """
DROP TRIGGER IF EXISTS trigger_set_season_ordinal ON pbsmm_season;
DROP FUNCTION IF EXISTS set_season_ordinal();
"""


class Migration(migrations.Migration):
    dependencies = [
        ("season", "0017_season_provisional"),
    ]

    operations = [
        migrations.RunSQL(
            sql=CREATE_SEASON_TRIGGER,
            reverse_sql=DROP_SEASON_TRIGGER,
        ),
    ]
