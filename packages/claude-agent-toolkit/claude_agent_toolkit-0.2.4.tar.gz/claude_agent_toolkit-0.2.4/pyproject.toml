[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "claude-agent-toolkit"
version = "0.2.4"
description = "Python framework for building Claude Code agents with custom tools"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Cheolwan Park", email = "cheolwan.park552@gmail.com"},
]
maintainers = [
    {name = "Cheolwan Park", email = "cheolwan.park552@gmail.com"},
]
keywords = [
    "claude-code",
    "claude-agent-sdk",
    "claude-agents",
    "mcp-tools",
    "ai-agents",
    "claude-agent-toolkit",
    "agent-framework",
    "docker",
    "model-context-protocol"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed",
]
dependencies = [
    "claude-agent-sdk>=0.1.3",
    "docker>=7.1.0",
    "fastmcp>=2.12.2",
    "httpx>=0.28.1",
    "jsonpatch>=1.33",
    "mcp>=1.3.0",
    "uvicorn>=0.35.0",
]

[project.urls]
"Homepage" = "https://github.com/cheolwanpark/claude-agent-toolkit"
"Repository" = "https://github.com/cheolwanpark/claude-agent-toolkit.git"
"Issues" = "https://github.com/cheolwanpark/claude-agent-toolkit/issues"
"Changelog" = "https://github.com/cheolwanpark/claude-agent-toolkit/blob/main/CHANGELOG.md"
"Documentation" = "https://github.com/cheolwanpark/claude-agent-toolkit#readme"
"Claude Code" = "https://claude.ai/code"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
examples = [
    "pytz>=2023.3",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
]
build = [
    "build>=1.0.0",
    "twine>=4.0.0",
    "check-manifest>=0.49",
]

[tool.hatch.build.targets.wheel]
packages = ["src/claude_agent_toolkit"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/CHANGELOG.md",
    "/LICENSE",
    "/pyproject.toml",
]
exclude = [
    "/.git",
    "/__pycache__",
    "*.pyc",
    "/.pytest_cache",
    "/.coverage",
    "/dist",
    "/build",
]

# Development tool configurations
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "docker: marks tests that require Docker",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
line-length = 88
target-version = "py312"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.uv.workspace]
members = [
    "src/examples",
]

[dependency-groups]
build = [
    "build>=1.3.0",
    "twine>=6.1.0",
]
