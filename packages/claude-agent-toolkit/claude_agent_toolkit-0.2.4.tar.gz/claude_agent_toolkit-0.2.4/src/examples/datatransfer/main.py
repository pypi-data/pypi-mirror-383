#!/usr/bin/env python3
# main.py - DataTransfer Tool Demonstration Entry Point

import asyncio
import os
import time

import single_model
import multiple_models
import complex


async def main():
    """Run all DataTransfer tool demonstrations."""
    print("üöÄ DATATRANSFER TOOL COMPREHENSIVE DEMONSTRATIONS")
    print("=" * 70)
    
    # Check for OAuth token
    if not os.environ.get('CLAUDE_CODE_OAUTH_TOKEN'):
        print("\n‚ö†Ô∏è  WARNING: CLAUDE_CODE_OAUTH_TOKEN not set!")
        print("Please set your OAuth token: export CLAUDE_CODE_OAUTH_TOKEN='your-token'")
        print("Get your token from: https://claude.ai/code")
        return
    
    start_time = time.time()
    
    try:
        print("\nRunning comprehensive DataTransfer demonstrations...")
        print("This shows DataTransferTool capabilities across various scenarios.\n")
        
        # Run all demo categories
        await single_model.run_all()
        await multiple_models.run_all()
        await complex.run_all()
        
        elapsed = time.time() - start_time
        
        print("\n" + "=" * 70)
        print("‚úÖ ALL DATATRANSFER DEMONSTRATIONS COMPLETED SUCCESSFULLY")
        print("=" * 70)
        
        print(f"\nExecution time: {elapsed:.1f} seconds")
        
        print("\nKey features demonstrated:")
        print("‚Ä¢ Generic tool that works with any Pydantic BaseModel")
        print("‚Ä¢ Dynamic class creation for distinct tool identities")  
        print("‚Ä¢ Automatic schema inclusion in tool descriptions")
        print("‚Ä¢ Type-safe data validation and transfer")
        print("‚Ä¢ Clear error messages for validation failures")
        print("‚Ä¢ Nested model support for complex data structures")
        print("‚Ä¢ Multiple tools in single agent scenarios")
        print("‚Ä¢ Data transformation between different models")
        print("‚Ä¢ Field constraints and validation handling")
        print("‚Ä¢ Simple transfer/get interface for host applications")
        
        print(f"\nüéâ DataTransferTool is production-ready!")
        
    except Exception as e:
        print(f"\n‚ùå Demo failed with error: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)