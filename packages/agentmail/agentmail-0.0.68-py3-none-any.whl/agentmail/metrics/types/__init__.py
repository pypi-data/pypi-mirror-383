# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .list_metrics_response import ListMetricsResponse
    from .message_metrics import MessageMetrics
    from .metric_end_timestamp import MetricEndTimestamp
    from .metric_event_type import MetricEventType
    from .metric_event_types import MetricEventTypes
    from .metric_start_timestamp import MetricStartTimestamp
    from .metric_timestamp import MetricTimestamp
_dynamic_imports: typing.Dict[str, str] = {
    "ListMetricsResponse": ".list_metrics_response",
    "MessageMetrics": ".message_metrics",
    "MetricEndTimestamp": ".metric_end_timestamp",
    "MetricEventType": ".metric_event_type",
    "MetricEventTypes": ".metric_event_types",
    "MetricStartTimestamp": ".metric_start_timestamp",
    "MetricTimestamp": ".metric_timestamp",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "ListMetricsResponse",
    "MessageMetrics",
    "MetricEndTimestamp",
    "MetricEventType",
    "MetricEventTypes",
    "MetricStartTimestamp",
    "MetricTimestamp",
]
