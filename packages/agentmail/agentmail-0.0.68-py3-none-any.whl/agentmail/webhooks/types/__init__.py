# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .client_id import ClientId
    from .create_webhook_request import CreateWebhookRequest
    from .event_type import EventType
    from .event_types import EventTypes
    from .inbox_ids import InboxIds
    from .list_webhooks_response import ListWebhooksResponse
    from .url import Url
    from .webhook import Webhook
    from .webhook_id import WebhookId
_dynamic_imports: typing.Dict[str, str] = {
    "ClientId": ".client_id",
    "CreateWebhookRequest": ".create_webhook_request",
    "EventType": ".event_type",
    "EventTypes": ".event_types",
    "InboxIds": ".inbox_ids",
    "ListWebhooksResponse": ".list_webhooks_response",
    "Url": ".url",
    "Webhook": ".webhook",
    "WebhookId": ".webhook_id",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "ClientId",
    "CreateWebhookRequest",
    "EventType",
    "EventTypes",
    "InboxIds",
    "ListWebhooksResponse",
    "Url",
    "Webhook",
    "WebhookId",
]
