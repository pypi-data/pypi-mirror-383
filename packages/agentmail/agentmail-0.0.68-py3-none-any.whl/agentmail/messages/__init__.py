# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        Addresses,
        ListMessagesResponse,
        Message,
        MessageAttachments,
        MessageBcc,
        MessageCc,
        MessageCreatedAt,
        MessageFrom,
        MessageHtml,
        MessageId,
        MessageInReplyTo,
        MessageItem,
        MessageLabels,
        MessagePreview,
        MessageReferences,
        MessageReplyTo,
        MessageSize,
        MessageSubject,
        MessageText,
        MessageTimestamp,
        MessageTo,
        MessageUpdatedAt,
        ReplyToMessageRequest,
        SendMessageAttachments,
        SendMessageBcc,
        SendMessageCc,
        SendMessageReplyTo,
        SendMessageRequest,
        SendMessageResponse,
        SendMessageTo,
        UpdateMessageRequest,
    )
    from .errors import MessageRejectedError
_dynamic_imports: typing.Dict[str, str] = {
    "Addresses": ".types",
    "ListMessagesResponse": ".types",
    "Message": ".types",
    "MessageAttachments": ".types",
    "MessageBcc": ".types",
    "MessageCc": ".types",
    "MessageCreatedAt": ".types",
    "MessageFrom": ".types",
    "MessageHtml": ".types",
    "MessageId": ".types",
    "MessageInReplyTo": ".types",
    "MessageItem": ".types",
    "MessageLabels": ".types",
    "MessagePreview": ".types",
    "MessageReferences": ".types",
    "MessageRejectedError": ".errors",
    "MessageReplyTo": ".types",
    "MessageSize": ".types",
    "MessageSubject": ".types",
    "MessageText": ".types",
    "MessageTimestamp": ".types",
    "MessageTo": ".types",
    "MessageUpdatedAt": ".types",
    "ReplyToMessageRequest": ".types",
    "SendMessageAttachments": ".types",
    "SendMessageBcc": ".types",
    "SendMessageCc": ".types",
    "SendMessageReplyTo": ".types",
    "SendMessageRequest": ".types",
    "SendMessageResponse": ".types",
    "SendMessageTo": ".types",
    "UpdateMessageRequest": ".types",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Addresses",
    "ListMessagesResponse",
    "Message",
    "MessageAttachments",
    "MessageBcc",
    "MessageCc",
    "MessageCreatedAt",
    "MessageFrom",
    "MessageHtml",
    "MessageId",
    "MessageInReplyTo",
    "MessageItem",
    "MessageLabels",
    "MessagePreview",
    "MessageReferences",
    "MessageRejectedError",
    "MessageReplyTo",
    "MessageSize",
    "MessageSubject",
    "MessageText",
    "MessageTimestamp",
    "MessageTo",
    "MessageUpdatedAt",
    "ReplyToMessageRequest",
    "SendMessageAttachments",
    "SendMessageBcc",
    "SendMessageCc",
    "SendMessageReplyTo",
    "SendMessageRequest",
    "SendMessageResponse",
    "SendMessageTo",
    "UpdateMessageRequest",
]
