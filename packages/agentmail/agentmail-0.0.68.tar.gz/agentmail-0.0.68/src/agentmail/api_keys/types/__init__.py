# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .api_key import ApiKey
    from .api_key_id import ApiKeyId
    from .create_api_key_request import CreateApiKeyRequest
    from .create_api_key_response import CreateApiKeyResponse
    from .created_at import CreatedAt
    from .list_api_keys_response import ListApiKeysResponse
    from .name import Name
    from .prefix import Prefix
_dynamic_imports: typing.Dict[str, str] = {
    "ApiKey": ".api_key",
    "ApiKeyId": ".api_key_id",
    "CreateApiKeyRequest": ".create_api_key_request",
    "CreateApiKeyResponse": ".create_api_key_response",
    "CreatedAt": ".created_at",
    "ListApiKeysResponse": ".list_api_keys_response",
    "Name": ".name",
    "Prefix": ".prefix",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "ApiKey",
    "ApiKeyId",
    "CreateApiKeyRequest",
    "CreateApiKeyResponse",
    "CreatedAt",
    "ListApiKeysResponse",
    "Name",
    "Prefix",
]
