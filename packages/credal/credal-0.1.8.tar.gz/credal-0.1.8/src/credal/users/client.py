# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawUsersClient, RawUsersClient
from .types.user_metadata_patch import UserMetadataPatch

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUsersClient
        """
        return self._raw_client

    def metadata(
        self, *, request: typing.Sequence[UserMetadataPatch], request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Bulk patch metadata for users

        Parameters
        ----------
        request : typing.Sequence[UserMetadataPatch]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from credal import CredalApi
        from credal.users import UserMetadataPatch

        client = CredalApi(
            api_key="YOUR_API_KEY",
        )
        client.users.metadata(
            request=[
                UserMetadataPatch(
                    metadata={"State": "NY", "Job Role": "CEO"},
                    user_email="ravin@credal.ai",
                ),
                UserMetadataPatch(
                    metadata={"State": "NY", "Department": "Engineering"},
                    user_email="jack@credal.ai",
                ),
            ],
        )
        """
        _response = self._raw_client.metadata(request=request, request_options=request_options)
        return _response.data


class AsyncUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUsersClient
        """
        return self._raw_client

    async def metadata(
        self, *, request: typing.Sequence[UserMetadataPatch], request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Bulk patch metadata for users

        Parameters
        ----------
        request : typing.Sequence[UserMetadataPatch]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from credal import AsyncCredalApi
        from credal.users import UserMetadataPatch

        client = AsyncCredalApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.metadata(
                request=[
                    UserMetadataPatch(
                        metadata={"State": "NY", "Job Role": "CEO"},
                        user_email="ravin@credal.ai",
                    ),
                    UserMetadataPatch(
                        metadata={"State": "NY", "Department": "Engineering"},
                        user_email="jack@credal.ai",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.metadata(request=request, request_options=request_options)
        return _response.data
