# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .collaborator import Collaborator
    from .custom_metadata_value import CustomMetadataValue
    from .external_resource_id import ExternalResourceId
    from .operator import Operator
    from .resource_identifier import ResourceIdentifier, ResourceIdentifier_ExternalResourceId, ResourceIdentifier_Url
    from .resource_type import ResourceType
    from .role import Role
    from .url import Url
_dynamic_imports: typing.Dict[str, str] = {
    "Collaborator": ".collaborator",
    "CustomMetadataValue": ".custom_metadata_value",
    "ExternalResourceId": ".external_resource_id",
    "Operator": ".operator",
    "ResourceIdentifier": ".resource_identifier",
    "ResourceIdentifier_ExternalResourceId": ".resource_identifier",
    "ResourceIdentifier_Url": ".resource_identifier",
    "ResourceType": ".resource_type",
    "Role": ".role",
    "Url": ".url",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Collaborator",
    "CustomMetadataValue",
    "ExternalResourceId",
    "Operator",
    "ResourceIdentifier",
    "ResourceIdentifier_ExternalResourceId",
    "ResourceIdentifier_Url",
    "ResourceType",
    "Role",
    "Url",
]
