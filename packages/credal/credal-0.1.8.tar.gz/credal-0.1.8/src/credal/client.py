# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import os
import typing

import httpx
from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import CredalApiEnvironment

if typing.TYPE_CHECKING:
    from .copilots.client import AsyncCopilotsClient, CopilotsClient
    from .document_catalog.client import AsyncDocumentCatalogClient, DocumentCatalogClient
    from .document_collections.client import AsyncDocumentCollectionsClient, DocumentCollectionsClient
    from .search.client import AsyncSearchClient, SearchClient
    from .users.client import AsyncUsersClient, UsersClient


class CredalApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : CredalApiEnvironment
        The environment to use for requests from the client. from .environment import CredalApiEnvironment



        Defaults to CredalApiEnvironment.PRODUCTION



    api_key : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from credal import CredalApi

    client = CredalApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: CredalApiEnvironment = CredalApiEnvironment.PRODUCTION,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("CREDAL_API_KEY"),
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        if api_key is None:
            raise ApiError(
                body="The client must be instantiated be either passing in api_key or setting CREDAL_API_KEY"
            )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._copilots: typing.Optional[CopilotsClient] = None
        self._document_catalog: typing.Optional[DocumentCatalogClient] = None
        self._document_collections: typing.Optional[DocumentCollectionsClient] = None
        self._search: typing.Optional[SearchClient] = None
        self._users: typing.Optional[UsersClient] = None

    @property
    def copilots(self):
        if self._copilots is None:
            from .copilots.client import CopilotsClient  # noqa: E402

            self._copilots = CopilotsClient(client_wrapper=self._client_wrapper)
        return self._copilots

    @property
    def document_catalog(self):
        if self._document_catalog is None:
            from .document_catalog.client import DocumentCatalogClient  # noqa: E402

            self._document_catalog = DocumentCatalogClient(client_wrapper=self._client_wrapper)
        return self._document_catalog

    @property
    def document_collections(self):
        if self._document_collections is None:
            from .document_collections.client import DocumentCollectionsClient  # noqa: E402

            self._document_collections = DocumentCollectionsClient(client_wrapper=self._client_wrapper)
        return self._document_collections

    @property
    def search(self):
        if self._search is None:
            from .search.client import SearchClient  # noqa: E402

            self._search = SearchClient(client_wrapper=self._client_wrapper)
        return self._search

    @property
    def users(self):
        if self._users is None:
            from .users.client import UsersClient  # noqa: E402

            self._users = UsersClient(client_wrapper=self._client_wrapper)
        return self._users


class AsyncCredalApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : CredalApiEnvironment
        The environment to use for requests from the client. from .environment import CredalApiEnvironment



        Defaults to CredalApiEnvironment.PRODUCTION



    api_key : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from credal import AsyncCredalApi

    client = AsyncCredalApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: CredalApiEnvironment = CredalApiEnvironment.PRODUCTION,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("CREDAL_API_KEY"),
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        if api_key is None:
            raise ApiError(
                body="The client must be instantiated be either passing in api_key or setting CREDAL_API_KEY"
            )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._copilots: typing.Optional[AsyncCopilotsClient] = None
        self._document_catalog: typing.Optional[AsyncDocumentCatalogClient] = None
        self._document_collections: typing.Optional[AsyncDocumentCollectionsClient] = None
        self._search: typing.Optional[AsyncSearchClient] = None
        self._users: typing.Optional[AsyncUsersClient] = None

    @property
    def copilots(self):
        if self._copilots is None:
            from .copilots.client import AsyncCopilotsClient  # noqa: E402

            self._copilots = AsyncCopilotsClient(client_wrapper=self._client_wrapper)
        return self._copilots

    @property
    def document_catalog(self):
        if self._document_catalog is None:
            from .document_catalog.client import AsyncDocumentCatalogClient  # noqa: E402

            self._document_catalog = AsyncDocumentCatalogClient(client_wrapper=self._client_wrapper)
        return self._document_catalog

    @property
    def document_collections(self):
        if self._document_collections is None:
            from .document_collections.client import AsyncDocumentCollectionsClient  # noqa: E402

            self._document_collections = AsyncDocumentCollectionsClient(client_wrapper=self._client_wrapper)
        return self._document_collections

    @property
    def search(self):
        if self._search is None:
            from .search.client import AsyncSearchClient  # noqa: E402

            self._search = AsyncSearchClient(client_wrapper=self._client_wrapper)
        return self._search

    @property
    def users(self):
        if self._users is None:
            from .users.client import AsyncUsersClient  # noqa: E402

            self._users = AsyncUsersClient(client_wrapper=self._client_wrapper)
        return self._users


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: CredalApiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
