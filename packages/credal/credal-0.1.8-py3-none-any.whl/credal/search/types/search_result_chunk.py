# This file was auto-generated by Fern from our API Definition.

import typing
import uuid

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class SearchResultChunk(UniversalBaseModel):
    chunk_id: typing_extensions.Annotated[uuid.UUID, FieldMetadata(alias="chunkId")]
    chunk_index: typing_extensions.Annotated[int, FieldMetadata(alias="chunkIndex")]
    text: str
    score: float = pydantic.Field()
    """
    The similarity score between 0 and 1 for the search result. A higher number means the chunk is more relevant to the search query.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
