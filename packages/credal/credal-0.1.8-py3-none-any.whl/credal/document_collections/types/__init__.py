# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .create_collection_response import CreateCollectionResponse
    from .delete_collection_response import DeleteCollectionResponse
    from .list_documents_in_collection_response import ListDocumentsInCollectionResponse
    from .mongo_collection_sync_config import MongoCollectionSyncConfig
    from .mongo_collection_sync_response import MongoCollectionSyncResponse
    from .mongo_source_fields_config import MongoSourceFieldsConfig
_dynamic_imports: typing.Dict[str, str] = {
    "CreateCollectionResponse": ".create_collection_response",
    "DeleteCollectionResponse": ".delete_collection_response",
    "ListDocumentsInCollectionResponse": ".list_documents_in_collection_response",
    "MongoCollectionSyncConfig": ".mongo_collection_sync_config",
    "MongoCollectionSyncResponse": ".mongo_collection_sync_response",
    "MongoSourceFieldsConfig": ".mongo_source_fields_config",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "CreateCollectionResponse",
    "DeleteCollectionResponse",
    "ListDocumentsInCollectionResponse",
    "MongoCollectionSyncConfig",
    "MongoCollectionSyncResponse",
    "MongoSourceFieldsConfig",
]
