name: MOBILE BUILD

on:
  workflow_dispatch:

jobs:
  build-android:
    name: Build Android Wheels (${{ matrix.target }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-linux-android, armv7-linux-androideabi]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Android SDK + NDK (Auto)
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y wget unzip
          mkdir -p $HOME/android-sdk/cmdline-tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdtools.zip
          unzip -q cmdtools.zip -d $HOME/android-sdk/cmdline-tools
          mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
          yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk \
            "platforms;android-29" "platform-tools" "build-tools;33.0.2" "ndk;23.1.7779620"
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$HOME/android-sdk/ndk/23.1.7779620" >> $GITHUB_ENV
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin setuptools_rust

      - name: Build Android Wheel (Auto)
        run: |
          set -eux
          export NDK_HOME=$ANDROID_NDK_ROOT
          export PATH=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          TARGET=${{ matrix.target }}
          # Derive the correct linker automatically
          LINKER=$(echo "$TARGET" | sed 's/-/ /g' | awk '{print $1"-"$2"-"$3"21-clang"}')
          export CARGO_TARGET_$(echo $TARGET | tr 'a-z-' 'A-Z_')_LINKER=$LINKER
          maturin build --release --target $TARGET --out dist || true

      - name: Upload Android wheels
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.target }}-wheels
          path: dist/*.whl

  build-ios:
    name: Build iOS Wheels (${{ matrix.target }})
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-apple-ios, x86_64-apple-ios]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin setuptools_rust

      - name: Build iOS wheel
        run: |
          set -eux
          maturin build --release --target ${{ matrix.target }} --out dist || true

      - name: Upload iOS wheels
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ matrix.target }}-wheels
          path: dist/*.whl

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    steps:
      - name: Print Summary
        run: |
          echo "✅ All builds finished automatically!"
          echo "Generated wheels:"
          echo "  • Android (armv7, aarch64)"
          echo "  • iOS (x86_64, aarch64)"
          echo
          echo "Artifacts available in the workflow run → Artifacts tab."
