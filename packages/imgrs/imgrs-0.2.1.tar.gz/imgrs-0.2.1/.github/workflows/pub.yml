name: PUBLISH TO PYPI

# Manual trigger only - no auto-run
on:
  workflow_dispatch:

jobs:
  # Build wheels for Linux (manylinux)
  build-linux:
    name: Build Linux Wheels (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64, aarch64, armv7, s390x, ppc64le]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install maturin
        run: pip install maturin

      - name: Build manylinux wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto

      - name: Upload Linux wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist/*.whl
          retention-days: 7

  # Build wheels for Windows
  build-windows:
    name: Build Windows Wheels (${{ matrix.target }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x64]  # Only x64 - x86 (32-bit) and aarch64 not supported
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install maturin
        run: pip install maturin

      - name: Build Windows wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'

      - name: Upload Windows wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist/*.whl
          retention-days: 7

  # Build wheels for macOS
  build-macos:
    name: Build macOS Wheels (${{ matrix.target }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64, aarch64]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install maturin
        run: pip install maturin

      - name: Build macOS wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'

      - name: Upload macOS wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist/*.whl
          retention-days: 7

  # Build wheels for Android
  build-android:
    name: Build Android Wheels (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-linux-android, armv7-linux-androideabi, x86_64-linux-android, i686-linux-android]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Android target
        run: rustup target add ${{ matrix.target }}

      - name: Install maturin
        run: pip install maturin

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c

      - name: Build Android wheels
        run: |
          maturin build --release --target ${{ matrix.target }} --out dist || echo "Build failed for ${{ matrix.target }}, continuing..."

      - name: Upload Android wheels
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: wheels-android-${{ matrix.target }}
          path: dist/*.whl
          retention-days: 7
          if-no-files-found: ignore

  # Build source distribution
  build-sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install maturin
        run: pip install maturin

      - name: Build sdist
        run: maturin sdist --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          retention-days: 7

  # Publish to PyPI after all builds complete
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos, build-android, build-sdist]
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-all

      - name: Consolidate distributions
        run: |
          mkdir -p dist
          find dist-all -name "*.whl" -exec cp {} dist/ \;
          find dist-all -name "*.tar.gz" -exec cp {} dist/ \;
          ls -lh dist/
          echo "Total wheels and sdist:"
          ls dist/ | wc -l

      - name: Publish to PyPI
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install maturin
          # Publish all wheels and sdist to PyPI
          maturin upload --skip-existing dist/*

      - name: Upload all distributions
        uses: actions/upload-artifact@v4
        with:
          name: published-distributions
          path: dist/
          retention-days: 30

  summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    
    steps:
      - name: Print Summary
        run: |
          echo "ðŸŽ‰ Successfully published to PyPI!"
          echo ""
          echo "âœ… Built wheels for:"
          echo "  â€¢ Linux (x86_64, aarch64, armv7, s390x, ppc64le) - manylinux"
          echo "  â€¢ Windows (x64 only - covers 99%+ users)"
          echo "  â€¢ macOS (x86_64, aarch64/Apple Silicon)"
          echo "  â€¢ Android (aarch64, armv7, x86_64, i686)"
          echo ""
          echo "âœ… Published source distribution (sdist)"
          echo ""
          echo "Users can now install with: pip install imgrs"
          echo "No compilation needed - pre-built wheels available!"
