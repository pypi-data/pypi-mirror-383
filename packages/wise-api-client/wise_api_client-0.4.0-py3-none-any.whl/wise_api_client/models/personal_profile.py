# coding: utf-8

"""
    (TransferWise) Wise Platform API

    Comprehensive API for (TransferWise) Wise platform services including: - Profile - Activity tracking and management - Quote creation and management - Recipient - Transfer 

    The version of the OpenAPI document: 0.5.5
    Contact: maksim.ploter@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from wise_api_client.models.address import Address
from wise_api_client.models.profile_contact_details import ProfileContactDetails
from typing import Optional, Set
from typing_extensions import Self

class PersonalProfile(BaseModel):
    """
    PersonalProfile
    """ # noqa: E501
    type: Optional[StrictStr] = None
    id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="A unique profile identifier")
    public_id: Optional[StrictStr] = Field(default=None, description="Public identifier for the profile", alias="publicId")
    user_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="A unique user identifier", alias="userId")
    address: Optional[Address] = None
    email: Optional[StrictStr] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    avatar: Optional[StrictStr] = None
    current_state: Optional[StrictStr] = Field(default=None, description="The current state of the profile. Common values include VISIBLE, HIDDEN, SUSPENDED.", alias="currentState")
    contact_details: Optional[ProfileContactDetails] = Field(default=None, alias="contactDetails")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    preferred_name: Optional[StrictStr] = Field(default=None, alias="preferredName")
    date_of_birth: Optional[date] = Field(default=None, alias="dateOfBirth")
    phone_number: Optional[StrictStr] = Field(default=None, alias="phoneNumber")
    secondary_addresses: Optional[List[Address]] = Field(default=None, alias="secondaryAddresses")
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    __properties: ClassVar[List[str]] = ["type", "id", "publicId", "userId", "address", "email", "createdAt", "updatedAt", "avatar", "currentState", "contactDetails", "firstName", "lastName", "preferredName", "dateOfBirth", "phoneNumber", "secondaryAddresses", "fullName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonalProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_details
        if self.contact_details:
            _dict['contactDetails'] = self.contact_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in secondary_addresses (list)
        _items = []
        if self.secondary_addresses:
            for _item_secondary_addresses in self.secondary_addresses:
                if _item_secondary_addresses:
                    _items.append(_item_secondary_addresses.to_dict())
            _dict['secondaryAddresses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonalProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "id": obj.get("id"),
            "publicId": obj.get("publicId"),
            "userId": obj.get("userId"),
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "email": obj.get("email"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "avatar": obj.get("avatar"),
            "currentState": obj.get("currentState"),
            "contactDetails": ProfileContactDetails.from_dict(obj["contactDetails"]) if obj.get("contactDetails") is not None else None,
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "preferredName": obj.get("preferredName"),
            "dateOfBirth": obj.get("dateOfBirth"),
            "phoneNumber": obj.get("phoneNumber"),
            "secondaryAddresses": [Address.from_dict(_item) for _item in obj["secondaryAddresses"]] if obj.get("secondaryAddresses") is not None else None,
            "fullName": obj.get("fullName")
        })
        return _obj


