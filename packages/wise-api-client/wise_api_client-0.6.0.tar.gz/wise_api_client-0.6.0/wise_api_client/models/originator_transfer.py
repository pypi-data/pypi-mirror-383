# coding: utf-8

"""
    (TransferWise) Wise Platform API

    Comprehensive API for (TransferWise) Wise platform services including: - Profile - Activity tracking and management - Quote creation and management - Recipient - Transfer 

    The version of the OpenAPI document: 0.5.7
    Contact: maksim.ploter@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from wise_api_client.models.originator import Originator
from wise_api_client.models.transfer_details import TransferDetails
from typing import Optional, Set
from typing_extensions import Self

class OriginatorTransfer(BaseModel):
    """
    OriginatorTransfer
    """ # noqa: E501
    id: Annotated[int, Field(strict=True, ge=1)] = Field(description="A unique transfer identifier")
    user: StrictInt
    target_account: StrictInt = Field(alias="targetAccount")
    source_account: Optional[StrictInt] = Field(default=None, alias="sourceAccount")
    quote: Optional[StrictStr] = Field(default=None, description="quote ID")
    status: StrictStr = Field(description="The current status of the transfer. Common values include pending, processing, funded, cancelled, outgoing_payment_sent, funds_refunded. This list may be extended by the API provider.")
    rate: Union[StrictFloat, StrictInt]
    created: datetime
    business: Optional[StrictInt] = None
    transfer_request: Optional[StrictInt] = Field(default=None, alias="transferRequest")
    details: TransferDetails
    has_active_issues: Optional[StrictBool] = Field(default=None, alias="hasActiveIssues")
    source_currency: Annotated[str, Field(min_length=3, strict=True, max_length=3)] = Field(description="ISO 4217 three-letter currency code", alias="sourceCurrency")
    source_value: Union[StrictFloat, StrictInt] = Field(alias="sourceValue")
    target_currency: Annotated[str, Field(min_length=3, strict=True, max_length=3)] = Field(description="ISO 4217 three-letter currency code", alias="targetCurrency")
    target_value: Union[StrictFloat, StrictInt] = Field(alias="targetValue")
    original_transfer_id: StrictStr = Field(description="Unique identifier randomly generated per transfer request by the calling client", alias="originalTransferId")
    payin_session_id: Optional[StrictStr] = Field(default=None, description="ID of the Payin Session generated for the transfer", alias="payinSessionId")
    originator: Originator
    __properties: ClassVar[List[str]] = ["id", "user", "targetAccount", "sourceAccount", "quote", "status", "rate", "created", "business", "transferRequest", "details", "hasActiveIssues", "sourceCurrency", "sourceValue", "targetCurrency", "targetValue", "originalTransferId", "payinSessionId", "originator"]

    @field_validator('source_currency')
    def source_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3}$/")
        return value

    @field_validator('target_currency')
    def target_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OriginatorTransfer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of originator
        if self.originator:
            _dict['originator'] = self.originator.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OriginatorTransfer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "user": obj.get("user"),
            "targetAccount": obj.get("targetAccount"),
            "sourceAccount": obj.get("sourceAccount"),
            "quote": obj.get("quote"),
            "status": obj.get("status"),
            "rate": obj.get("rate"),
            "created": obj.get("created"),
            "business": obj.get("business"),
            "transferRequest": obj.get("transferRequest"),
            "details": TransferDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "hasActiveIssues": obj.get("hasActiveIssues"),
            "sourceCurrency": obj.get("sourceCurrency"),
            "sourceValue": obj.get("sourceValue"),
            "targetCurrency": obj.get("targetCurrency"),
            "targetValue": obj.get("targetValue"),
            "originalTransferId": obj.get("originalTransferId"),
            "payinSessionId": obj.get("payinSessionId"),
            "originator": Originator.from_dict(obj["originator"]) if obj.get("originator") is not None else None
        })
        return _obj


