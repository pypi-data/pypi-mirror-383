# coding: utf-8

"""
    (TransferWise) Wise Platform API

    Comprehensive API for (TransferWise) Wise platform services including: - Profile - Activity tracking and management - Quote creation and management - Recipient - Transfer 

    The version of the OpenAPI document: 0.5.6
    Contact: maksim.ploter@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from wise_api_client.models.payment_metadata import PaymentMetadata
from wise_api_client.models.pricing_configuration import PricingConfiguration
from typing import Optional, Set
from typing_extensions import Self

class CreateAuthenticatedQuoteRequestBase(BaseModel):
    """
    CreateAuthenticatedQuoteRequestBase
    """ # noqa: E501
    source_currency: Annotated[str, Field(min_length=3, strict=True, max_length=3)] = Field(description="ISO 4217 three-letter currency code", alias="sourceCurrency")
    target_currency: Annotated[str, Field(min_length=3, strict=True, max_length=3)] = Field(description="ISO 4217 three-letter currency code", alias="targetCurrency")
    target_account: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="A unique recipient account identifier", alias="targetAccount")
    pay_out: Optional[StrictStr] = Field(default=None, description="Optional. Preferred payout method. Default value is BANK_TRANSFER. Common values include BANK_TRANSFER, BALANCE, SWIFT, SWIFT_OUR, INTERAC, but other values may be supported.", alias="payOut")
    preferred_pay_in: Optional[StrictStr] = Field(default=None, description="Optional. Preferred payin method. Use BANK_TRANSFER to return this method at the top of the response's results. Common values include BANK_TRANSFER, BALANCE, SWIFT, SWIFT_OUR, INTERAC, but other values may be supported.", alias="preferredPayIn")
    payment_metadata: Optional[PaymentMetadata] = Field(default=None, alias="paymentMetadata")
    pricing_configuration: Optional[PricingConfiguration] = Field(default=None, alias="pricingConfiguration")
    __properties: ClassVar[List[str]] = ["sourceCurrency", "targetCurrency", "targetAccount", "payOut", "preferredPayIn", "paymentMetadata", "pricingConfiguration"]

    @field_validator('source_currency')
    def source_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3}$/")
        return value

    @field_validator('target_currency')
    def target_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAuthenticatedQuoteRequestBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payment_metadata
        if self.payment_metadata:
            _dict['paymentMetadata'] = self.payment_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing_configuration
        if self.pricing_configuration:
            _dict['pricingConfiguration'] = self.pricing_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAuthenticatedQuoteRequestBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceCurrency": obj.get("sourceCurrency"),
            "targetCurrency": obj.get("targetCurrency"),
            "targetAccount": obj.get("targetAccount"),
            "payOut": obj.get("payOut"),
            "preferredPayIn": obj.get("preferredPayIn"),
            "paymentMetadata": PaymentMetadata.from_dict(obj["paymentMetadata"]) if obj.get("paymentMetadata") is not None else None,
            "pricingConfiguration": PricingConfiguration.from_dict(obj["pricingConfiguration"]) if obj.get("pricingConfiguration") is not None else None
        })
        return _obj


