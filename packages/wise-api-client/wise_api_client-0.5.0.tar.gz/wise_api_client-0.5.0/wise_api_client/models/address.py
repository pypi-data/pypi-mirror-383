# coding: utf-8

"""
    (TransferWise) Wise Platform API

    Comprehensive API for (TransferWise) Wise platform services including: - Profile - Activity tracking and management - Quote creation and management - Recipient - Transfer 

    The version of the OpenAPI document: 0.5.6
    Contact: maksim.ploter@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    Address
    """ # noqa: E501
    id: Optional[StrictInt] = None
    address_first_line: Optional[StrictStr] = Field(default=None, alias="addressFirstLine")
    city: Optional[StrictStr] = None
    country_iso2_code: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="countryIso2Code")
    country_iso3_code: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="countryIso3Code")
    post_code: Optional[StrictStr] = Field(default=None, alias="postCode")
    state_code: Optional[StrictStr] = Field(default=None, alias="stateCode")
    __properties: ClassVar[List[str]] = ["id", "addressFirstLine", "city", "countryIso2Code", "countryIso3Code", "postCode", "stateCode"]

    @field_validator('country_iso2_code')
    def country_iso2_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2}$/")
        return value

    @field_validator('country_iso3_code')
    def country_iso3_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z]{3}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z]{3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "addressFirstLine": obj.get("addressFirstLine"),
            "city": obj.get("city"),
            "countryIso2Code": obj.get("countryIso2Code"),
            "countryIso3Code": obj.get("countryIso3Code"),
            "postCode": obj.get("postCode"),
            "stateCode": obj.get("stateCode")
        })
        return _obj


