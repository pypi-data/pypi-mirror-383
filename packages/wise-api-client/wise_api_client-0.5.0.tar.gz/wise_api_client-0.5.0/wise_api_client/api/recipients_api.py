# coding: utf-8

"""
    (TransferWise) Wise Platform API

    Comprehensive API for (TransferWise) Wise platform services including: - Profile - Activity tracking and management - Quote creation and management - Recipient - Transfer 

    The version of the OpenAPI document: 0.5.6
    Contact: maksim.ploter@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from wise_api_client.models.account_requirements_inner import AccountRequirementsInner
from wise_api_client.models.create_recipient_request import CreateRecipientRequest
from wise_api_client.models.paginated_recipients import PaginatedRecipients
from wise_api_client.models.recipient import Recipient

from wise_api_client.api_client import ApiClient, RequestSerialized
from wise_api_client.api_response import ApiResponse
from wise_api_client.rest import RESTResponseType


class RecipientsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_recipient_account(
        self,
        create_recipient_request: CreateRecipientRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Recipient:
        """Create a recipient account


        :param create_recipient_request: (required)
        :type create_recipient_request: CreateRecipientRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_recipient_account_serialize(
            create_recipient_request=create_recipient_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recipient",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_recipient_account_with_http_info(
        self,
        create_recipient_request: CreateRecipientRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Recipient]:
        """Create a recipient account


        :param create_recipient_request: (required)
        :type create_recipient_request: CreateRecipientRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_recipient_account_serialize(
            create_recipient_request=create_recipient_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recipient",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_recipient_account_without_preload_content(
        self,
        create_recipient_request: CreateRecipientRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a recipient account


        :param create_recipient_request: (required)
        :type create_recipient_request: CreateRecipientRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_recipient_account_serialize(
            create_recipient_request=create_recipient_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recipient",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_recipient_account_serialize(
        self,
        create_recipient_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_recipient_request is not None:
            _body_params = create_recipient_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/accounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def deactivate_recipient_account(
        self,
        account_id: Annotated[int, Field(strict=True, ge=1)],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Recipient:
        """Deactivate a recipient account


        :param account_id: (required)
        :type account_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deactivate_recipient_account_serialize(
            account_id=account_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recipient",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def deactivate_recipient_account_with_http_info(
        self,
        account_id: Annotated[int, Field(strict=True, ge=1)],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Recipient]:
        """Deactivate a recipient account


        :param account_id: (required)
        :type account_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deactivate_recipient_account_serialize(
            account_id=account_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recipient",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def deactivate_recipient_account_without_preload_content(
        self,
        account_id: Annotated[int, Field(strict=True, ge=1)],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deactivate a recipient account


        :param account_id: (required)
        :type account_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deactivate_recipient_account_serialize(
            account_id=account_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recipient",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _deactivate_recipient_account_serialize(
        self,
        account_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if account_id is not None:
            _path_params['accountId'] = account_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v2/accounts/{accountId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_account_requirements(
        self,
        quote_id: StrictStr,
        originator_legal_entity_type: Optional[StrictStr] = None,
        address_required: Annotated[Optional[StrictBool], Field(description="Set to true to force the address fields to be returned as required.")] = None,
        accept_minor_version: Optional[Annotated[int, Field(strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[AccountRequirementsInner]:
        """Get account requirements for a quote


        :param quote_id: (required)
        :type quote_id: str
        :param originator_legal_entity_type:
        :type originator_legal_entity_type: str
        :param address_required: Set to true to force the address fields to be returned as required.
        :type address_required: bool
        :param accept_minor_version:
        :type accept_minor_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_account_requirements_serialize(
            quote_id=quote_id,
            originator_legal_entity_type=originator_legal_entity_type,
            address_required=address_required,
            accept_minor_version=accept_minor_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AccountRequirementsInner]",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_account_requirements_with_http_info(
        self,
        quote_id: StrictStr,
        originator_legal_entity_type: Optional[StrictStr] = None,
        address_required: Annotated[Optional[StrictBool], Field(description="Set to true to force the address fields to be returned as required.")] = None,
        accept_minor_version: Optional[Annotated[int, Field(strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[AccountRequirementsInner]]:
        """Get account requirements for a quote


        :param quote_id: (required)
        :type quote_id: str
        :param originator_legal_entity_type:
        :type originator_legal_entity_type: str
        :param address_required: Set to true to force the address fields to be returned as required.
        :type address_required: bool
        :param accept_minor_version:
        :type accept_minor_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_account_requirements_serialize(
            quote_id=quote_id,
            originator_legal_entity_type=originator_legal_entity_type,
            address_required=address_required,
            accept_minor_version=accept_minor_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AccountRequirementsInner]",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_account_requirements_without_preload_content(
        self,
        quote_id: StrictStr,
        originator_legal_entity_type: Optional[StrictStr] = None,
        address_required: Annotated[Optional[StrictBool], Field(description="Set to true to force the address fields to be returned as required.")] = None,
        accept_minor_version: Optional[Annotated[int, Field(strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get account requirements for a quote


        :param quote_id: (required)
        :type quote_id: str
        :param originator_legal_entity_type:
        :type originator_legal_entity_type: str
        :param address_required: Set to true to force the address fields to be returned as required.
        :type address_required: bool
        :param accept_minor_version:
        :type accept_minor_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_account_requirements_serialize(
            quote_id=quote_id,
            originator_legal_entity_type=originator_legal_entity_type,
            address_required=address_required,
            accept_minor_version=accept_minor_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AccountRequirementsInner]",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_account_requirements_serialize(
        self,
        quote_id,
        originator_legal_entity_type,
        address_required,
        accept_minor_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if quote_id is not None:
            _path_params['quoteId'] = quote_id
        # process the query parameters
        if originator_legal_entity_type is not None:
            
            _query_params.append(('originatorLegalEntityType', originator_legal_entity_type))
            
        if address_required is not None:
            
            _query_params.append(('addressRequired', address_required))
            
        # process the header parameters
        if accept_minor_version is not None:
            _header_params['Accept-Minor-Version'] = accept_minor_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/quotes/{quoteId}/account-requirements',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recipient_account_by_id(
        self,
        account_id: Annotated[int, Field(strict=True, ge=1)],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Recipient:
        """Get recipient account by ID


        :param account_id: (required)
        :type account_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipient_account_by_id_serialize(
            account_id=account_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recipient",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recipient_account_by_id_with_http_info(
        self,
        account_id: Annotated[int, Field(strict=True, ge=1)],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Recipient]:
        """Get recipient account by ID


        :param account_id: (required)
        :type account_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipient_account_by_id_serialize(
            account_id=account_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recipient",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recipient_account_by_id_without_preload_content(
        self,
        account_id: Annotated[int, Field(strict=True, ge=1)],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get recipient account by ID


        :param account_id: (required)
        :type account_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recipient_account_by_id_serialize(
            account_id=account_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Recipient",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recipient_account_by_id_serialize(
        self,
        account_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if account_id is not None:
            _path_params['accountId'] = account_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/accounts/{accountId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_refined_account_requirements(
        self,
        quote_id: StrictStr,
        create_recipient_request: Annotated[CreateRecipientRequest, Field(description="A partial or complete recipient object based on the requirements you have already received.")],
        originator_legal_entity_type: Annotated[Optional[StrictStr], Field(description="The legal entity type of the sender. Required for some routes when the sender is a third party.")] = None,
        address_required: Annotated[Optional[StrictBool], Field(description="Set to true to always include address fields in the response.")] = None,
        accept_minor_version: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Set to '1' to use version 1.1 which includes dynamic fields for name and email.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[AccountRequirementsInner]:
        """Get refined account requirements for a quote

        Use this endpoint to get additional requirements that may appear after a user provides certain information. For example, after selecting a country that has states, this endpoint will return the list of states. The request body should contain the recipient information collected so far.

        :param quote_id: (required)
        :type quote_id: str
        :param create_recipient_request: A partial or complete recipient object based on the requirements you have already received. (required)
        :type create_recipient_request: CreateRecipientRequest
        :param originator_legal_entity_type: The legal entity type of the sender. Required for some routes when the sender is a third party.
        :type originator_legal_entity_type: str
        :param address_required: Set to true to always include address fields in the response.
        :type address_required: bool
        :param accept_minor_version: Set to '1' to use version 1.1 which includes dynamic fields for name and email.
        :type accept_minor_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_refined_account_requirements_serialize(
            quote_id=quote_id,
            create_recipient_request=create_recipient_request,
            originator_legal_entity_type=originator_legal_entity_type,
            address_required=address_required,
            accept_minor_version=accept_minor_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AccountRequirementsInner]",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_refined_account_requirements_with_http_info(
        self,
        quote_id: StrictStr,
        create_recipient_request: Annotated[CreateRecipientRequest, Field(description="A partial or complete recipient object based on the requirements you have already received.")],
        originator_legal_entity_type: Annotated[Optional[StrictStr], Field(description="The legal entity type of the sender. Required for some routes when the sender is a third party.")] = None,
        address_required: Annotated[Optional[StrictBool], Field(description="Set to true to always include address fields in the response.")] = None,
        accept_minor_version: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Set to '1' to use version 1.1 which includes dynamic fields for name and email.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[AccountRequirementsInner]]:
        """Get refined account requirements for a quote

        Use this endpoint to get additional requirements that may appear after a user provides certain information. For example, after selecting a country that has states, this endpoint will return the list of states. The request body should contain the recipient information collected so far.

        :param quote_id: (required)
        :type quote_id: str
        :param create_recipient_request: A partial or complete recipient object based on the requirements you have already received. (required)
        :type create_recipient_request: CreateRecipientRequest
        :param originator_legal_entity_type: The legal entity type of the sender. Required for some routes when the sender is a third party.
        :type originator_legal_entity_type: str
        :param address_required: Set to true to always include address fields in the response.
        :type address_required: bool
        :param accept_minor_version: Set to '1' to use version 1.1 which includes dynamic fields for name and email.
        :type accept_minor_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_refined_account_requirements_serialize(
            quote_id=quote_id,
            create_recipient_request=create_recipient_request,
            originator_legal_entity_type=originator_legal_entity_type,
            address_required=address_required,
            accept_minor_version=accept_minor_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AccountRequirementsInner]",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_refined_account_requirements_without_preload_content(
        self,
        quote_id: StrictStr,
        create_recipient_request: Annotated[CreateRecipientRequest, Field(description="A partial or complete recipient object based on the requirements you have already received.")],
        originator_legal_entity_type: Annotated[Optional[StrictStr], Field(description="The legal entity type of the sender. Required for some routes when the sender is a third party.")] = None,
        address_required: Annotated[Optional[StrictBool], Field(description="Set to true to always include address fields in the response.")] = None,
        accept_minor_version: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Set to '1' to use version 1.1 which includes dynamic fields for name and email.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get refined account requirements for a quote

        Use this endpoint to get additional requirements that may appear after a user provides certain information. For example, after selecting a country that has states, this endpoint will return the list of states. The request body should contain the recipient information collected so far.

        :param quote_id: (required)
        :type quote_id: str
        :param create_recipient_request: A partial or complete recipient object based on the requirements you have already received. (required)
        :type create_recipient_request: CreateRecipientRequest
        :param originator_legal_entity_type: The legal entity type of the sender. Required for some routes when the sender is a third party.
        :type originator_legal_entity_type: str
        :param address_required: Set to true to always include address fields in the response.
        :type address_required: bool
        :param accept_minor_version: Set to '1' to use version 1.1 which includes dynamic fields for name and email.
        :type accept_minor_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_refined_account_requirements_serialize(
            quote_id=quote_id,
            create_recipient_request=create_recipient_request,
            originator_legal_entity_type=originator_legal_entity_type,
            address_required=address_required,
            accept_minor_version=accept_minor_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AccountRequirementsInner]",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_refined_account_requirements_serialize(
        self,
        quote_id,
        create_recipient_request,
        originator_legal_entity_type,
        address_required,
        accept_minor_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if quote_id is not None:
            _path_params['quoteId'] = quote_id
        # process the query parameters
        if originator_legal_entity_type is not None:
            
            _query_params.append(('originatorLegalEntityType', originator_legal_entity_type))
            
        if address_required is not None:
            
            _query_params.append(('addressRequired', address_required))
            
        # process the header parameters
        if accept_minor_version is not None:
            _header_params['Accept-Minor-Version'] = accept_minor_version
        # process the form parameters
        # process the body parameter
        if create_recipient_request is not None:
            _body_params = create_recipient_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/quotes/{quoteId}/account-requirements',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_recipient_accounts(
        self,
        creator_id: Annotated[Optional[StrictInt], Field(description="Creator of the account")] = None,
        profile_id: Annotated[Optional[StrictInt], Field(description="Filter by personal or business profile, returns only those owned by this profile. Defaults to the personal profile.")] = None,
        currency: Annotated[Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]], Field(description="Filter responses by currency, comma separated values are supported (e.g. USD,GBP)")] = None,
        active: Annotated[Optional[StrictBool], Field(description="Filter by whether this profile is active. Defaults to true.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter responses by account type, comma separated values are supported (e.g. iban,swift_code)")] = None,
        owned_by_customer: Annotated[Optional[StrictBool], Field(description="Filter to get accounts owned by the customer or not, leave out to get all accounts")] = None,
        size: Annotated[Optional[Annotated[int, Field(le=40, strict=True)]], Field(description="Page size of the response. Defaults to a maximum of 20.")] = None,
        seek_position: Annotated[Optional[StrictInt], Field(description="Account ID to start the page of responses from in the response. null if no more pages.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorting strategy for the response. Comma separated options: firstly either id or currency, followed by asc or desc for direction (e.g. id,asc or currency,desc)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedRecipients:
        """List recipient accounts

        Retrieve a paginated list of recipient accounts with optional filtering and sorting. All query parameters are optional.

        :param creator_id: Creator of the account
        :type creator_id: int
        :param profile_id: Filter by personal or business profile, returns only those owned by this profile. Defaults to the personal profile.
        :type profile_id: int
        :param currency: Filter responses by currency, comma separated values are supported (e.g. USD,GBP)
        :type currency: str
        :param active: Filter by whether this profile is active. Defaults to true.
        :type active: bool
        :param type: Filter responses by account type, comma separated values are supported (e.g. iban,swift_code)
        :type type: str
        :param owned_by_customer: Filter to get accounts owned by the customer or not, leave out to get all accounts
        :type owned_by_customer: bool
        :param size: Page size of the response. Defaults to a maximum of 20.
        :type size: int
        :param seek_position: Account ID to start the page of responses from in the response. null if no more pages.
        :type seek_position: int
        :param sort: Sorting strategy for the response. Comma separated options: firstly either id or currency, followed by asc or desc for direction (e.g. id,asc or currency,desc)
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_recipient_accounts_serialize(
            creator_id=creator_id,
            profile_id=profile_id,
            currency=currency,
            active=active,
            type=type,
            owned_by_customer=owned_by_customer,
            size=size,
            seek_position=seek_position,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedRecipients",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_recipient_accounts_with_http_info(
        self,
        creator_id: Annotated[Optional[StrictInt], Field(description="Creator of the account")] = None,
        profile_id: Annotated[Optional[StrictInt], Field(description="Filter by personal or business profile, returns only those owned by this profile. Defaults to the personal profile.")] = None,
        currency: Annotated[Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]], Field(description="Filter responses by currency, comma separated values are supported (e.g. USD,GBP)")] = None,
        active: Annotated[Optional[StrictBool], Field(description="Filter by whether this profile is active. Defaults to true.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter responses by account type, comma separated values are supported (e.g. iban,swift_code)")] = None,
        owned_by_customer: Annotated[Optional[StrictBool], Field(description="Filter to get accounts owned by the customer or not, leave out to get all accounts")] = None,
        size: Annotated[Optional[Annotated[int, Field(le=40, strict=True)]], Field(description="Page size of the response. Defaults to a maximum of 20.")] = None,
        seek_position: Annotated[Optional[StrictInt], Field(description="Account ID to start the page of responses from in the response. null if no more pages.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorting strategy for the response. Comma separated options: firstly either id or currency, followed by asc or desc for direction (e.g. id,asc or currency,desc)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedRecipients]:
        """List recipient accounts

        Retrieve a paginated list of recipient accounts with optional filtering and sorting. All query parameters are optional.

        :param creator_id: Creator of the account
        :type creator_id: int
        :param profile_id: Filter by personal or business profile, returns only those owned by this profile. Defaults to the personal profile.
        :type profile_id: int
        :param currency: Filter responses by currency, comma separated values are supported (e.g. USD,GBP)
        :type currency: str
        :param active: Filter by whether this profile is active. Defaults to true.
        :type active: bool
        :param type: Filter responses by account type, comma separated values are supported (e.g. iban,swift_code)
        :type type: str
        :param owned_by_customer: Filter to get accounts owned by the customer or not, leave out to get all accounts
        :type owned_by_customer: bool
        :param size: Page size of the response. Defaults to a maximum of 20.
        :type size: int
        :param seek_position: Account ID to start the page of responses from in the response. null if no more pages.
        :type seek_position: int
        :param sort: Sorting strategy for the response. Comma separated options: firstly either id or currency, followed by asc or desc for direction (e.g. id,asc or currency,desc)
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_recipient_accounts_serialize(
            creator_id=creator_id,
            profile_id=profile_id,
            currency=currency,
            active=active,
            type=type,
            owned_by_customer=owned_by_customer,
            size=size,
            seek_position=seek_position,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedRecipients",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_recipient_accounts_without_preload_content(
        self,
        creator_id: Annotated[Optional[StrictInt], Field(description="Creator of the account")] = None,
        profile_id: Annotated[Optional[StrictInt], Field(description="Filter by personal or business profile, returns only those owned by this profile. Defaults to the personal profile.")] = None,
        currency: Annotated[Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]], Field(description="Filter responses by currency, comma separated values are supported (e.g. USD,GBP)")] = None,
        active: Annotated[Optional[StrictBool], Field(description="Filter by whether this profile is active. Defaults to true.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter responses by account type, comma separated values are supported (e.g. iban,swift_code)")] = None,
        owned_by_customer: Annotated[Optional[StrictBool], Field(description="Filter to get accounts owned by the customer or not, leave out to get all accounts")] = None,
        size: Annotated[Optional[Annotated[int, Field(le=40, strict=True)]], Field(description="Page size of the response. Defaults to a maximum of 20.")] = None,
        seek_position: Annotated[Optional[StrictInt], Field(description="Account ID to start the page of responses from in the response. null if no more pages.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorting strategy for the response. Comma separated options: firstly either id or currency, followed by asc or desc for direction (e.g. id,asc or currency,desc)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List recipient accounts

        Retrieve a paginated list of recipient accounts with optional filtering and sorting. All query parameters are optional.

        :param creator_id: Creator of the account
        :type creator_id: int
        :param profile_id: Filter by personal or business profile, returns only those owned by this profile. Defaults to the personal profile.
        :type profile_id: int
        :param currency: Filter responses by currency, comma separated values are supported (e.g. USD,GBP)
        :type currency: str
        :param active: Filter by whether this profile is active. Defaults to true.
        :type active: bool
        :param type: Filter responses by account type, comma separated values are supported (e.g. iban,swift_code)
        :type type: str
        :param owned_by_customer: Filter to get accounts owned by the customer or not, leave out to get all accounts
        :type owned_by_customer: bool
        :param size: Page size of the response. Defaults to a maximum of 20.
        :type size: int
        :param seek_position: Account ID to start the page of responses from in the response. null if no more pages.
        :type seek_position: int
        :param sort: Sorting strategy for the response. Comma separated options: firstly either id or currency, followed by asc or desc for direction (e.g. id,asc or currency,desc)
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_recipient_accounts_serialize(
            creator_id=creator_id,
            profile_id=profile_id,
            currency=currency,
            active=active,
            type=type,
            owned_by_customer=owned_by_customer,
            size=size,
            seek_position=seek_position,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedRecipients",
            '400': "ApiError",
            '401': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '408': "ApiError",
            '422': "ApiError",
            '429': "ApiError",
            '500': "ApiError",
            '4XX': "ApiError",
            '5XX': "ApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_recipient_accounts_serialize(
        self,
        creator_id,
        profile_id,
        currency,
        active,
        type,
        owned_by_customer,
        size,
        seek_position,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if creator_id is not None:
            
            _query_params.append(('creatorId', creator_id))
            
        if profile_id is not None:
            
            _query_params.append(('profileId', profile_id))
            
        if currency is not None:
            
            _query_params.append(('currency', currency))
            
        if active is not None:
            
            _query_params.append(('active', active))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if owned_by_customer is not None:
            
            _query_params.append(('ownedByCustomer', owned_by_customer))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if seek_position is not None:
            
            _query_params.append(('seekPosition', seek_position))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/accounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


