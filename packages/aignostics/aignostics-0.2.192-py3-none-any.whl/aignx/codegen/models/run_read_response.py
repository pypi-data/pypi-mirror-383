# coding: utf-8

"""
    Aignostics Platform API

     The Aignostics Platform is a cloud-based service that enables organizations to access advanced computational pathology applications through a secure API.  The platform provides standardized access to Aignostics' portfolio of computational pathology solutions, with Atlas H&E-TME serving as an example of the available API endpoints.   To begin using the platform, your organization must first be registered by our business support team. If you don't have an account yet, please contact your account manager or email support@aignostics.com to get started.   More information about our applications can be found on [https://platform.aignostics.com](https://platform.aignostics.com).  **How to authorize and test API endpoints:**  1. Click the \"Authorize\" button in the right corner below 3. Click \"Authorize\" button in the dialog to log in with your Aignostics Platform credentials 4. After successful login, you'll be redirected back and can use \"Try it out\" on any endpoint  **Note**: You only need to authorize once per session. The lock icons next to endpoints will show green when authorized.  

    The version of the OpenAPI document: 1.0.0-beta6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aignx.codegen.models.application_run_status import ApplicationRunStatus
from aignx.codegen.models.user_payload import UserPayload
from typing import Optional, Set
from typing_extensions import Self

class RunReadResponse(BaseModel):
    """
    Response schema for `Get run details` endpoint
    """ # noqa: E501
    application_run_id: StrictStr = Field(description="UUID of the application")
    application_version_id: StrictStr = Field(description="ID of the application version")
    organization_id: StrictStr = Field(description="Organization of the owner of the application run")
    user_payload: Optional[UserPayload] = None
    status: ApplicationRunStatus = Field(description="When the application run request is received by the Platform, the `status` of it is set to `running`. When the application run is scheduled, the input items will be processed and the result will be generated incrementally. The results can be downloaded via `/v1/runs/{run_id}/results` endpoint. When all items are processed and all results are generated, the application status is set to `completed`. If the processing is done, but some items fail, the status is set to `completed_with_error`.  When the application run reaches the threshold of number of failed items, the whole application run is set to `canceled_system` and the remaining pending items are not processed. When the application run fails, the finished item results are available for download.  If the application run is canceled by calling `POST /v1/runs/{run_id}/cancel` endpoint, the processing of the items is stopped, and the application status is set to `cancelled_user`     ")
    message: Optional[StrictStr]
    metadata: Optional[Dict[str, Any]] = None
    triggered_at: datetime = Field(description="Timestamp showing when the application run was triggered")
    triggered_by: StrictStr = Field(description="Id of the user who triggered the application run")
    terminated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["application_run_id", "application_version_id", "organization_id", "user_payload", "status", "message", "metadata", "triggered_at", "triggered_by", "terminated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunReadResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_payload
        if self.user_payload:
            _dict['user_payload'] = self.user_payload.to_dict()
        # set to None if user_payload (nullable) is None
        # and model_fields_set contains the field
        if self.user_payload is None and "user_payload" in self.model_fields_set:
            _dict['user_payload'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if terminated_at (nullable) is None
        # and model_fields_set contains the field
        if self.terminated_at is None and "terminated_at" in self.model_fields_set:
            _dict['terminated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunReadResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application_run_id": obj.get("application_run_id"),
            "application_version_id": obj.get("application_version_id"),
            "organization_id": obj.get("organization_id"),
            "user_payload": UserPayload.from_dict(obj["user_payload"]) if obj.get("user_payload") is not None else None,
            "status": obj.get("status"),
            "message": obj.get("message"),
            "metadata": obj.get("metadata"),
            "triggered_at": obj.get("triggered_at"),
            "triggered_by": obj.get("triggered_by"),
            "terminated_at": obj.get("terminated_at")
        })
        return _obj


