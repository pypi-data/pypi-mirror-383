[build-system]
requires = ['setuptools']
build-backend = 'setuptools.build_meta'

[project]
name = 'aiostem'
dynamic = ['version']
authors = [
	{name = 'Romain Bezut', email = 'morian@xdec.net'},
]
description = 'Asynchronous Tor controller library for asyncio and Python'
readme = 'README.rst'
classifiers = [
	'Framework :: AsyncIO',
	'Framework :: Pydantic :: 2',
	'Intended Audience :: Developers',
	'Intended Audience :: Information Technology',
	'License :: OSI Approved :: MIT License',
	'Operating System :: POSIX :: Linux',
	'Programming Language :: Python',
	'Programming Language :: Python :: 3',
	'Programming Language :: Python :: 3 :: Only',
	'Programming Language :: Python :: 3.10',
	'Programming Language :: Python :: 3.11',
	'Programming Language :: Python :: 3.12',
	'Programming Language :: Python :: 3.13',
	'Programming Language :: Python :: 3.14',
	'Topic :: Software Development :: Libraries :: Python Modules',
	'Typing :: Typed',
]
dependencies = [
	'cryptography >= 44.0, < 47.0',
	'pydantic >= 2.9, < 3.0',
	'typing_extensions > 4.0; python_version < "3.11"',
]
requires-python = '>=3.10'

[project.urls]
Changelog = 'https://github.com/morian/aiostem/blob/master/CHANGELOG.rst'
Coverage = 'https://app.codecov.io/github/morian/aiostem'
Documentation = 'https://aiostem.readthedocs.io'
Homepage = 'https://pypi.org/project/aiostem/'
Issues = 'https://github.com/morian/aiostem/issues'
Repository = 'https://github.com/morian/aiostem'

[tool.setuptools.packages.find]
include = [
	'aiostem',
	'aiostem.utils',
]

[tool.setuptools.dynamic]
version = {attr = 'aiostem.version.version'}

[tool.setuptools.package-data]
aiostem = ['py.typed']

[tool.coverage.run]
source = ['aiostem']
branch = true

[tool.coverage.report]
precision = 2
exclude_lines = [
	'pragma: no cover',
	'raise NotImplementedError',
	'if TYPE_CHECKING:',
	'@overload',
]

[tool.coverage.paths]
source = [
	'aiostem/',
]

[tool.pytest.ini_options]
addopts = "--cov=aiostem"
asyncio_default_fixture_loop_scope = 'function'
asyncio_mode = 'strict'
log_cli = true
log_cli_level = 'WARNING'
testpaths = ['tests']

[tool.ruff]
include = ['aiostem/**/*.py', 'tests/**/*.py']
indent-width = 4
line-length = 95
output-format = 'grouped'

[tool.ruff.format]
indent-style = 'space'
line-ending = 'lf'
quote-style = 'single'
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [
	'A',      # flake8-builtins
	'ASYNC',  # flake8-async
	'B',      # flake8-bugbear
	'C4',     # flake8-comprehensions
	'C90',    # mccabe
	'COM',    # flake8-commas
	'D',      # pydocstyle
	'DTZ',    # flake8-datetimez
	'E',      # pycodestyle errors
	'ERA',    # eradicate
	'F',      # Pyflakes
	'FA',     # flake8-future-annotations
	'I',      # isort
	'INP',    # flake8-no-pep420
	'LOG',    # flake8-logging
	'N',      # pep8-naming
	'PIE',    # flake8-pie
	'PT',     # flake8-pytest-style
	'PYI',    # flake8-pyi
	'Q',      # flake8-quotes
	'RET',    # flake8-return
	'RSE',    # flake8-raise
	'RUF',    # ruff-specific rules
	'S',      # flake8-bandit
	'SIM',    # flake8-simplify
	'SLF',    # flake8-self
	'T20',    # flake8-print
	'TC',     # flake8-type-checking
	'TRY',    # tryceratops
	'UP',     # pyupgrade
	'W',      # pycodestyle warnings
]
ignore = [
	'B019',   # Use of lru_cache or cache from functools can lead to memory leaks
	'COM812', # missing-trailing-comma
	'D100',   # Missing docstring in public module
	'D104',   # Missing docstring in public package
	'D203',   # 1 blank line required before class docstring
	'D212',   # Multi-line docstring summary should start at the second line
]

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
detect-same-package = false
known-first-party = ['aiostem']
force-wrap-aliases = true
split-on-trailing-comma = false
required-imports = ['from __future__ import annotations']

[tool.ruff.lint.flake8-quotes]
docstring-quotes = 'double'
inline-quotes = 'single'
multiline-quotes = 'double'

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ['pydantic.BaseModel']
runtime-evaluated-decorators = ['dataclasses.dataclass']

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.per-file-ignores]
'aiostem/types.py' = [
	'A005',   # Module shadows a Python standard-library module
]
'tests/*.py' = [
	'D',      # pydocstyle
	'S101',   # bandit: Use of `assert` detected
]

[tool.mypy]
files = ['aiostem/**/*.py']
plugins = ['pydantic.mypy']
python_version = '3.10'
namespace_packages = true
explicit_package_bases = true
show_error_codes = true
follow_imports = 'silent'
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
warn_unused_configs = true
disallow_subclassing_any = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true
disallow_untyped_defs = true
