"""
    ai/h2o/securestore/v1/oauth_client.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from h2o_secure_store.gen.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from h2o_secure_store.gen.exceptions import ApiAttributeError



class V1OAuthClient(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'issuer': (str,),  # noqa: E501
            'client_id': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'display_name': (str,),  # noqa: E501
            'client_secret': (str,),  # noqa: E501
            'client_secret_set': (bool,),  # noqa: E501
            'authorization_endpoint': (str,),  # noqa: E501
            'token_endpoint': (str,),  # noqa: E501
            'extra_scopes': ([str],),  # noqa: E501
            'refresh_disabled': (bool,),  # noqa: E501
            'login_principal_claim': (str,),  # noqa: E501
            'callback_uri': (str,),  # noqa: E501
            'creator': (str,),  # noqa: E501
            'updater': (str,),  # noqa: E501
            'create_time': (datetime,),  # noqa: E501
            'update_time': (datetime, none_type,),  # noqa: E501
            'uid': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'issuer': 'issuer',  # noqa: E501
        'client_id': 'clientId',  # noqa: E501
        'name': 'name',  # noqa: E501
        'display_name': 'displayName',  # noqa: E501
        'client_secret': 'clientSecret',  # noqa: E501
        'client_secret_set': 'clientSecretSet',  # noqa: E501
        'authorization_endpoint': 'authorizationEndpoint',  # noqa: E501
        'token_endpoint': 'tokenEndpoint',  # noqa: E501
        'extra_scopes': 'extraScopes',  # noqa: E501
        'refresh_disabled': 'refreshDisabled',  # noqa: E501
        'login_principal_claim': 'loginPrincipalClaim',  # noqa: E501
        'callback_uri': 'callbackUri',  # noqa: E501
        'creator': 'creator',  # noqa: E501
        'updater': 'updater',  # noqa: E501
        'create_time': 'createTime',  # noqa: E501
        'update_time': 'updateTime',  # noqa: E501
        'uid': 'uid',  # noqa: E501
    }

    read_only_vars = {
        'name',  # noqa: E501
        'client_secret_set',  # noqa: E501
        'callback_uri',  # noqa: E501
        'creator',  # noqa: E501
        'updater',  # noqa: E501
        'create_time',  # noqa: E501
        'update_time',  # noqa: E501
        'uid',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, issuer, client_id, *args, **kwargs):  # noqa: E501
        """V1OAuthClient - a model defined in OpenAPI

        Args:
            issuer (str): Required. Immutable. The issuer of the OAuth Client. It is the URI of the IDP that the OAuth Client is registered with. In Okta it is the Authorization Server Issuer URI. For example, \"https://dev-123456.okta.com/oauth2/ausads85d7\".
            client_id (str): Required. Immutable. The client ID of the OAuth Client.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): [optional]  # noqa: E501
            display_name (str): Optional. Human-readable name.. [optional]  # noqa: E501
            client_secret (str): Optional. Input Only. The client secret of the OAuth Client.. [optional]  # noqa: E501
            client_secret_set (bool): Output only. Indicates if the client_secret field is set.. [optional]  # noqa: E501
            authorization_endpoint (str): Optional. The authorization endpoint of the OAuth Client. For example, \"https://dev-123456.okta.com/oauth2/ausads85d7/v1/authorize\". If not set, it is discovered from the issuer.. [optional]  # noqa: E501
            token_endpoint (str): Optional. The token endpoint of the OAuth Client. For example, \"https://dev-123456.okta.com/oauth2/ausads85d7/v1/token\". If not set, it is discovered from the issuer.. [optional]  # noqa: E501
            extra_scopes ([str]): Optional. A list of additional scopes to request from the OAuth Client.  Any value must not contain a whitespace character. For example: - [\" profile\"] - is invalid, because the value contains a space - [\"pro file\"] - is invalid, because the value contains a space  Scopes \"openid\" and \"offline_access\" cannot be specified here because: - The \"openid\" scope is always included. - The \"offline_access\" scope is included if \"refresh_disabled\" is false.  Please note that: The \"profile\" scope is strongly recommended if \"login_principal_claim\" is not set to \"sub\". The \"email\" scope is strongly recommended if \"login_principal_claim\" is set to \"email\". Recommended to set as [\"profile\", \"email\"].. [optional]  # noqa: E501
            refresh_disabled (bool): Optional. If set to true, the \"offline_access\" scope is not requested. This means that the TokenSource will not be able to refresh tokens. When the Token expires, the user will need to log in again. Defaults to false.. [optional]  # noqa: E501
            login_principal_claim (str): Optional. The ID Token claim name for the login principal. Once the login is successful, it is extracted into TokenProvider.login_principal field. Defaults to \"preferred_username\".. [optional]  # noqa: E501
            callback_uri (str): Output only. The URI that needs to be configured in the IDP Client registration as the allowed redirect URI.. [optional]  # noqa: E501
            creator (str): [optional]  # noqa: E501
            updater (str): [optional]  # noqa: E501
            create_time (datetime): Output only. Time when the OAuthClient was created.. [optional]  # noqa: E501
            update_time (datetime, none_type): Output only. Time when the OAuthClient was last updated.. [optional]  # noqa: E501
            uid (str): Output only. Globally unique identifier of the resource.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.issuer = issuer
        self.client_id = client_id
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, issuer, client_id, *args, **kwargs):  # noqa: E501
        """V1OAuthClient - a model defined in OpenAPI

        Args:
            issuer (str): Required. Immutable. The issuer of the OAuth Client. It is the URI of the IDP that the OAuth Client is registered with. In Okta it is the Authorization Server Issuer URI. For example, \"https://dev-123456.okta.com/oauth2/ausads85d7\".
            client_id (str): Required. Immutable. The client ID of the OAuth Client.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): [optional]  # noqa: E501
            display_name (str): Optional. Human-readable name.. [optional]  # noqa: E501
            client_secret (str): Optional. Input Only. The client secret of the OAuth Client.. [optional]  # noqa: E501
            client_secret_set (bool): Output only. Indicates if the client_secret field is set.. [optional]  # noqa: E501
            authorization_endpoint (str): Optional. The authorization endpoint of the OAuth Client. For example, \"https://dev-123456.okta.com/oauth2/ausads85d7/v1/authorize\". If not set, it is discovered from the issuer.. [optional]  # noqa: E501
            token_endpoint (str): Optional. The token endpoint of the OAuth Client. For example, \"https://dev-123456.okta.com/oauth2/ausads85d7/v1/token\". If not set, it is discovered from the issuer.. [optional]  # noqa: E501
            extra_scopes ([str]): Optional. A list of additional scopes to request from the OAuth Client.  Any value must not contain a whitespace character. For example: - [\" profile\"] - is invalid, because the value contains a space - [\"pro file\"] - is invalid, because the value contains a space  Scopes \"openid\" and \"offline_access\" cannot be specified here because: - The \"openid\" scope is always included. - The \"offline_access\" scope is included if \"refresh_disabled\" is false.  Please note that: The \"profile\" scope is strongly recommended if \"login_principal_claim\" is not set to \"sub\". The \"email\" scope is strongly recommended if \"login_principal_claim\" is set to \"email\". Recommended to set as [\"profile\", \"email\"].. [optional]  # noqa: E501
            refresh_disabled (bool): Optional. If set to true, the \"offline_access\" scope is not requested. This means that the TokenSource will not be able to refresh tokens. When the Token expires, the user will need to log in again. Defaults to false.. [optional]  # noqa: E501
            login_principal_claim (str): Optional. The ID Token claim name for the login principal. Once the login is successful, it is extracted into TokenProvider.login_principal field. Defaults to \"preferred_username\".. [optional]  # noqa: E501
            callback_uri (str): Output only. The URI that needs to be configured in the IDP Client registration as the allowed redirect URI.. [optional]  # noqa: E501
            creator (str): [optional]  # noqa: E501
            updater (str): [optional]  # noqa: E501
            create_time (datetime): Output only. Time when the OAuthClient was created.. [optional]  # noqa: E501
            update_time (datetime, none_type): Output only. Time when the OAuthClient was last updated.. [optional]  # noqa: E501
            uid (str): Output only. Globally unique identifier of the resource.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.issuer = issuer
        self.client_id = client_id
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
