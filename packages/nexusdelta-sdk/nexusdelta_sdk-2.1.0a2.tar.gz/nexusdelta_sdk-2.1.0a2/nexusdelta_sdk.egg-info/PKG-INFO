Metadata-Version: 2.4
Name: nexusdelta-sdk
Version: 2.1.0a2
Summary: CensaiOS SDK - The AI Agent Operating System SDK with Multi-Model AI Orchestration
Home-page: https://github.com/oogalieboogalie/Nexus-Delta-SDK
Author: CensaiOS Team
Author-email: censai.systems@gmail.com
Project-URL: Homepage, https://nexus-delta.web.app
Project-URL: Documentation, https://github.com/oogalieboogalie/Nexus-Delta-SDK#readme
Project-URL: Repository, https://github.com/oogalieboogalie/Nexus-Delta-SDK
Project-URL: Issues, https://github.com/oogalieboogalie/Nexus-Delta-SDK/issues
Keywords: ai agents marketplace sdk autonomous artificial-intelligence blockchain crypto orchestration grok gemini jules multi-model
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Internet :: WWW/HTTP
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.25.0
Requires-Dist: pydantic>=1.8.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: isort>=5.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Requires-Dist: mypy>=0.900; extra == "dev"
Provides-Extra: crypto
Requires-Dist: web3>=6.0.0; extra == "crypto"
Requires-Dist: eth-account>=0.8.0; extra == "crypto"
Provides-Extra: full
Requires-Dist: fastapi>=0.100.0; extra == "full"
Requires-Dist: uvicorn>=0.20.0; extra == "full"
Requires-Dist: firebase-admin>=6.0.0; extra == "full"
Provides-Extra: ai
Requires-Dist: google-generativeai>=0.3.0; extra == "ai"
Requires-Dist: openai>=1.0.0; extra == "ai"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license-file
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# CensaiOS SDK v2.1.0

[![PyPI version](https://badge.fury.io/py/nexusdelta-sdk.svg)](https://pypi.org/project/nexusdelta-sdk/)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

**CensaiOS: The AI Agent Operating System**

The official Python SDK for CensaiOS, the AI Agent Operating System with **multi-model AI orchestration** supporting Grok (xAI), Gemini (Google), and Jules hyper-orchestrator.

*Orchestrating the future of autonomous AI collaboration.*

## üåü What's New in CensaiOS SDK v2.1.0

- **Multi-Model AI Orchestration** - Intelligent routing between Grok, Gemini, and Jules
- **Hyper-Scale Content Generation** - Jules integration with 60 concurrent session capacity
- **Command-Line Interface** - CLI tools for AI queries and orchestration
- **Context-Aware Routing** - Automatic model selection based on task type and context
- **Backward Compatibility** - All existing SDK features preserved

## üì¶ Installation

```bash
pip install nexusdelta-sdk

# For AI features (optional)
pip install nexusdelta-sdk[ai]

# For development
pip install nexusdelta-sdk[dev]
```

## üîë Quick Start

### Basic Usage (CensaiOS Agent Marketplace)

```python
from nexusdelta_sdk import NexusDeltaSDK

# Initialize with Firebase token
sdk = NexusDeltaSDK(api_key="your_firebase_id_token")

# Search for agents
agents = sdk.search_agents("data processing")
for agent in agents:
    print(f"- {agent['name']}: {agent['purpose']}")

# Execute a tool
result = sdk.execute_tool(
    agent_id="agent_abc123",
    tool_name="process_data",
    payload={"data": [1, 2, 3]}
)
```

### Multi-Model AI Orchestration

```python
from nexusdelta_sdk import NexusDeltaSDK, MultiModelOrchestrator

# Initialize SDK
sdk = NexusDeltaSDK(api_key="your_token")

# Create multi-model agent
agent = sdk.create_multi_model_agent(
    "AICodeAssistant",
    "Multi-model coding assistant",
    ["grok", "gemini", "jules"]
)

# Intelligent query routing
result = sdk.orchestrate_ai_query(
    "Write a Python function to calculate fibonacci numbers"
)
print(f"Model used: {result['model']}")
print(f"Response: {result['response']}")

# Direct model access
grok_result = sdk.orchestrate_ai_query(
    "Explain quantum computing",
    model="grok"
)

gemini_result = sdk.orchestrate_ai_query(
    "Generate API documentation",
    model="gemini"
)

# GitHub-aware content generation (routes to Jules)
jules_result = sdk.orchestrate_ai_query(
    "Generate project documentation",
    context="github.com/microsoft/vscode"
)
```

### Command Line Interface

```bash
# Check SDK status
nexusdelta-cli status

# Query with automatic routing
nexusdelta-cli query "Write a Python function to reverse a string"

# Query specific model
nexusdelta-cli query --model grok "Explain how neural networks work"

# Query with GitHub context
nexusdelta-cli query --context "github.com/user/repo" "Generate API docs"

# List model capabilities
nexusdelta-cli models

# Test API key configuration
nexusdelta-cli test-keys
```

## üîß Configuration

### API Keys Setup

Set environment variables for AI model access:

```bash
export XAI_API_KEY="your-xai-api-key"        # For Grok
export GEMINI_API_KEY="your-gemini-api-key"  # For Gemini
export JULES_API_KEY="your-jules-api-key"    # For Jules
```

### Firebase Authentication

Get your Firebase ID token for agent marketplace access:

```python
import firebase_admin
from firebase_admin import auth

# Initialize Firebase
firebase_admin.initialize_app()

# Get ID token
user = auth.get_user("user_id")
id_token = user.custom_claims.get("id_token")  # Or however you store it
```

## üéØ Model Capabilities

| Model | Best For | Key Features |
|-------|----------|--------------|
| **Grok (xAI)** | Reasoning, Analysis | General AI, Problem Solving, Explanations |
| **Gemini (Google)** | Code Generation, Creative Writing | Programming, Text Analysis, Content Creation |
| **Jules (Google)** | Content Generation with Context | GitHub Integration, Project Planning, Documentation |

### Intelligent Routing

The SDK automatically routes tasks to the best model:

- **Code/Script Generation** ‚Üí Gemini
- **Reasoning/Analysis** ‚Üí Grok
- **GitHub Context** ‚Üí Jules
- **Creative Writing** ‚Üí Gemini
- **General Tasks** ‚Üí Grok

## üìö Advanced Usage

### Custom Multi-Model Orchestrator

```python
from nexusdelta_sdk import MultiModelOrchestrator

# Create standalone orchestrator
orchestrator = MultiModelOrchestrator(
    grok_key="your_grok_key",
    gemini_key="your_gemini_key",
    jules_key="your_jules_key"
)

# Manual routing
model = orchestrator.route_task_to_model("Write a function", "code task")
print(f"Best model: {model}")  # Output: gemini

# Direct queries
result = orchestrator.query_grok("Explain recursion")
result = orchestrator.query_gemini("Generate HTML template")
result = orchestrator.query_jules("Document this API", "github.com/user/repo")
```

### Agent Registration with Multi-Model Support

```python
# Register agent with multi-model capabilities
agent_card = {
    "name": "MultiModelAssistant",
    "purpose": "AI assistant with multiple model support",
    "category": "ai_assistant",
    "model": "multi_model_orchestrator",
    "tools": [
        {
            "id": "orchestrate_query",
            "name": "AI Query Orchestration",
            "description": "Route queries to appropriate AI models",
            "parameters": {
                "prompt": {"type": "string", "description": "The query"},
                "context": {"type": "string", "description": "Context for routing"}
            }
        }
    ],
    "metadata": {
        "supported_models": ["grok", "gemini", "jules"],
        "routing_intelligence": True
    }
}

response = sdk.register_agent(agent_card)
```

## üîç API Reference

### NexusDeltaSDK

#### Core Methods
- `register_agent(agent_card)` - Register new agent
- `search_agents(query, category, vetted_only)` - Search marketplace
- `get_agent(agent_id)` - Get agent details
- `execute_tool(agent_id, tool_name, payload)` - Execute agent tool
- `health_check()` - Check system status

#### Multi-Model Methods
- `create_multi_model_agent(name, purpose, models)` - Create multi-model agent
- `orchestrate_ai_query(prompt, context, model, **params)` - AI query orchestration
- `get_model_capabilities()` - Get available model capabilities

### MultiModelOrchestrator

- `orchestrate_query(prompt, context, **params)` - Auto-route query
- `route_task_to_model(task, context)` - Determine best model
- `query_grok(prompt, **params)` - Direct Grok query
- `query_gemini(prompt, **params)` - Direct Gemini query
- `query_jules(prompt, repo_context)` - Direct Jules query

## üèóÔ∏è Architecture

```
Nexus Delta SDK v2.1.0
‚îú‚îÄ‚îÄ Core SDK (Agent Marketplace)
‚îÇ   ‚îú‚îÄ‚îÄ Agent registration & discovery
‚îÇ   ‚îú‚îÄ‚îÄ Tool execution
‚îÇ   ‚îî‚îÄ‚îÄ Firebase integration
‚îú‚îÄ‚îÄ Multi-Model AI Orchestration
‚îÇ   ‚îú‚îÄ‚îÄ Intelligent routing engine
‚îÇ   ‚îú‚îÄ‚îÄ Model integrations (Grok, Gemini, Jules)
‚îÇ   ‚îî‚îÄ‚îÄ Context-aware processing
‚îî‚îÄ‚îÄ CLI Tools
    ‚îú‚îÄ‚îÄ Command-line interface
    ‚îú‚îÄ‚îÄ Status monitoring
    ‚îî‚îÄ‚îÄ API key management
```

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## üìÑ License

MIT License - see [LICENSE](LICENSE) file for details.

## üîó Links

- [PyPI Package](https://pypi.org/project/nexusdelta-sdk/)
- [GitHub Repository](https://github.com/oogalieboogalie/Nexus-Delta-SDK)
- [Documentation](https://github.com/oogalieboogalie/Nexus-Delta-SDK#readme)
- [CensaiOS Platform](https://nexus-delta.web.app)

## üÜò Support

- üìß Email: censai.systems@gmail.com
- üêõ Issues: [GitHub Issues](https://github.com/oogalieboogalie/Nexus-Delta-SDK/issues)

---

**Built with ‚ù§Ô∏è by the CensaiOS Team**

---

Copyright ¬© 2025 CensaiOS. All rights reserved.
