name: Release

on:
  push:
    tags:
      - 'v*.*.*'        # Stable releases: v1.2.3
      - 'v*.*.*-*'      # Pre-releases: v1.2.3-rc.1, v1.2.3-beta.2, etc.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3 or v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark GitHub release as prerelease'
        required: false
        default: false
        type: boolean

# Principle of least privilege by default. Elevate per job when needed.
permissions:
  contents: read

env:
  TEST_PYPI_INDEX_URL: https://test.pypi.org/legacy/

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Set up uv (fast installer/lock support)
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        # UV in CI: Use --system flag to install into system Python (no venv needed)
        # This is simpler and more reliable than creating/activating virtual environments
        run: |
          uv pip install --system -e ".[dev]" packaging

      - name: Run pre-commit
        # pre-commit manages its own environments, so uv run is acceptable here
        run: uv run pre-commit run --all-files

      - name: Extract & classify version (PEP 440)
        id: version
        shell: bash
        # Using direct command (installed via --system) rather than uv run
        # CI environments are already isolated, no need for additional ephemeral envs
        run: |
          python - <<'PY'
          import os, sys
          from packaging.version import Version, InvalidVersion

          ev = os.environ.get("GITHUB_EVENT_NAME")
          if ev == "workflow_dispatch":
              raw = "${{ inputs.version }}"
              if not raw:
                  print("::error::INPUT_VERSION not provided for workflow_dispatch")
                  sys.exit(1)
          else:
              # refs/tags/v1.2.3
              raw = os.environ["GITHUB_REF"].split("/")[-1]
          ver = raw[1:] if raw.startswith("v") else raw

          try:
              v = Version(ver)
          except InvalidVersion:
              print(f"::error::Invalid version: {raw} (normalized: {ver})")
              sys.exit(1)

          is_pre = "true" if (v.is_prerelease or v.is_devrelease) else "false"

          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"version={ver}\n")
              f.write(f"is_prerelease={is_pre}\n")
          PY

      - name: Verify version consistency
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Check pyproject.toml version
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          if [ "$VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "::error::Version mismatch: tag=$VERSION but pyproject.toml=$PYPROJECT_VERSION"
            exit 1
          fi

          # Check __init__.py version
          INIT_VERSION=$(grep '^__version__ = ' src/tripwire/__init__.py | sed 's/__version__ = "\(.*\)"/\1/')
          if [ "$VERSION" != "$INIT_VERSION" ]; then
            echo "::error::Version mismatch: tag=$VERSION but __init__.py=$INIT_VERSION"
            exit 1
          fi

          # Check cli.py version using Python for more reliable parsing
          CLI_VERSION=$(python3 -c "import re; content=open('src/tripwire/cli.py').read(); match=re.search(r'@click\.version_option\(version=\"([^\"]+)\"', content); print(match.group(1) if match else '')")
          if [ "$VERSION" != "$CLI_VERSION" ]; then
            echo "::error::Version mismatch: tag=$VERSION but cli.py=$CLI_VERSION"
            exit 1
          fi

          echo "✓ Version $VERSION is consistent across all files"

      # Only block duplicate version when manually dispatching (tag push already contains the tag)
      - name: Guard duplicate tag (dispatch only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists"; exit 1
          fi

      - name: Run tests with coverage
        # Using direct command (installed via --system) rather than uv run
        # CI environments are already isolated, no need for additional ephemeral envs
        run: |
          pytest --cov=tripwire --cov-report=xml --cov-report=term

      - name: Check coverage threshold (75%)
        # Using direct command (installed via --system) rather than uv run
        # CI environments are already isolated, no need for additional ephemeral envs
        run: |
          python - <<'PY'
          import sys
          import xml.etree.ElementTree as ET

          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage = float(root.attrib['line-rate']) * 100

          threshold = 75.0
          print(f"Coverage: {coverage:.2f}%")

          if coverage < threshold:
              print(f"::error::Coverage {coverage:.2f}% is below threshold {threshold}%")
              sys.exit(1)
          else:
              print(f"✓ Coverage {coverage:.2f}% meets threshold {threshold}%")
          PY

      - name: Run type checking
        # Using direct command (installed via --system) rather than uv run
        # CI environments are already isolated, no need for additional ephemeral envs
        run: mypy src/tripwire

      - name: Security scan with bandit
        # Using direct command (installed via --system) rather than uv run
        # CI environments are already isolated, no need for additional ephemeral envs
        run: bandit -r src/tripwire -ll

      - name: Scan for secrets in codebase
        # Using direct command (installed via --system) rather than uv run
        # CI environments are already isolated, no need for additional ephemeral envs
        run: |
          # Use tripwire's own secret scanner
          python - <<'PY'
          import sys
          from pathlib import Path
          from tripwire.secrets import scan_env_file

          # Scan example files for accidentally committed secrets
          for env_file in Path('.').rglob('.env.example'):
              findings = scan_env_file(env_file)
              if findings:
                  print(f"::error::Found {len(findings)} potential secrets in {env_file}")
                  for finding in findings:
                      print(f"  - {finding.variable_name}: {finding.secret_type.value}")
                  sys.exit(1)

          print("✓ No secrets found in example files")
          PY

      - name: Dependency vulnerability scan
        # Using direct command (installed via --system) rather than uv run
        # CI environments are already isolated, no need for additional ephemeral envs
        # Note: Ignoring pip vulnerabilities (CI-only tool, not shipped with package)
        run: pip-audit --skip-editable || true

      - name: Validate CHANGELOG.md
        # Skip pre-release changelog check for prereleases
        if: steps.version.outputs.is_prerelease == 'false'
        run: |
          chmod +x .github/scripts/validate_changelog.sh
          .github/scripts/validate_changelog.sh ${{ steps.version.outputs.version }}

  tests:
    name: Test Matrix (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: validate-release
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    env:
      # Force UTF-8 encoding on Windows for proper Unicode handling
      PYTHONIOENCODING: utf-8
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        # UV in CI: Use --system flag to install into system Python (no venv needed)
        run: uv pip install --system -e ".[dev]"

      - name: Run tests
        # Using direct command (installed via --system) rather than uv run
        # CI environments are already isolated, no need for additional ephemeral envs
        run: pytest -v

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [validate-release, tests]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - uses: astral-sh/setup-uv@v4

      - name: Install build tools
        # UV in CI: Use --system flag to install into system Python (no venv needed)
        run: uv pip install --system build twine

      - name: Build package (sdist + wheel)
        # Using direct command (installed via --system) rather than uv run
        # CI environments are already isolated, no need for additional ephemeral envs
        run: python -m build

      - name: Check package metadata
        # Using direct command (installed via --system) rather than uv run
        # CI environments are already isolated, no need for additional ephemeral envs
        run: twine check dist/*

      - name: Verify package contents
        run: |
          # List wheel contents to verify structure
          python -m zipfile -l dist/*.whl | head -20
          echo "---"
          # Check entry points
          python -m zipfile -e dist/*.whl /tmp/wheel_check
          cat /tmp/wheel_check/tripwire_py-*.dist-info/entry_points.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  test-pypi:
    name: Test PyPI Upload
    runs-on: ubuntu-latest
    needs: [validate-release, build-package]
    # Keep your original logic: tag push OR explicit prerelease flag uploads to TestPyPI
    if: github.event_name == 'push' || github.event.inputs.prerelease == 'true'
    env:
      # Force UTF-8 encoding on Windows for proper Unicode handling
      PYTHONIOENCODING: utf-8
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: astral-sh/setup-uv@v4

      - name: Upload to Test PyPI (API token)
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
          TWINE_REPOSITORY_URL: ${{ env.TEST_PYPI_INDEX_URL }}
        run: |
          # UV in CI: Use --system flag to install into system Python (no venv needed)
          uv pip install --system twine
          # Using direct command (installed via --system) rather than uv run
          # CI environments are already isolated, no need for additional ephemeral envs
          twine upload --skip-existing dist/*

      - name: Wait for Test PyPI propagation
        run: sleep 10

      - name: Verify install from Test PyPI (with retry)
        # Manual venv creation here is intentional - we're testing the installed package
        # in isolation, separate from the build environment
        run: |
          rm -rf .venv_test
          python -m venv .venv_test
          . .venv_test/bin/activate
          pip install -U pip

          # Retry installation with exponential backoff
          for i in {1..5}; do
            if pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ tripwire-py==${{ needs.validate-release.outputs.version }}; then
              echo "✓ Package installed successfully"
              break
            fi
            echo "Retry $i/5 after TestPyPI sync..."
            sleep $((5 * i))
          done

      # NEW: Run validation script (Phase 2 - additional check)
      - name: Run validation script (additional check)
        # Using the test venv created above to verify the installed package
        run: |
          . .venv_test/bin/activate
          chmod +x .github/scripts/validate_cli.sh
          ./.github/scripts/validate_cli.sh ${{ needs.validate-release.outputs.version }}

      # KEEP: Existing comprehensive CLI verification (for now - Phase 2)
      - name: Comprehensive CLI verification
        # Using the test venv created above to verify the installed package
        run: |
          . .venv_test/bin/activate

          echo "=== Testing --version ==="
          tripwire --version
          if ! tripwire --version | grep -q "${{ needs.validate-release.outputs.version }}"; then
            echo "::error::Version mismatch in CLI output"
            exit 1
          fi

          echo "=== Testing --help ==="
          tripwire --help
          if ! tripwire --help | grep -q "TripWire - Catch config errors before they explode"; then
            echo "::error::Help output doesn't match expected format"
            exit 1
          fi

          echo "=== Testing subcommands exist ==="
          for cmd in init generate check sync scan audit validate docs; do
            if ! tripwire --help | grep -q "$cmd"; then
              echo "::error::Command '$cmd' not found in help output"
              exit 1
            fi
            echo "✓ Command '$cmd' exists"
          done

          echo "=== Testing subcommand help ==="
          tripwire init --help
          tripwire generate --help
          tripwire check --help

      - name: Verify Python imports
        # Using the test venv created above to verify the installed package
        run: |
          . .venv_test/bin/activate

          python - <<'PY'
          import sys

          # Test basic import
          try:
              import tripwire
              print(f"✓ Successfully imported tripwire version {tripwire.__version__}")
          except ImportError as e:
              print(f"::error::Failed to import tripwire: {e}")
              sys.exit(1)

          # Test core functionality
          try:
              from tripwire import env, TripWire
              print("✓ Successfully imported env and TripWire")
          except ImportError as e:
              print(f"::error::Failed to import core components: {e}")
              sys.exit(1)

          # Test exceptions
          try:
              from tripwire import (
                  TripWireError,
                  MissingVariableError,
                  ValidationError,
              )
              print("✓ Successfully imported exceptions")
          except ImportError as e:
              print(f"::error::Failed to import exceptions: {e}")
              sys.exit(1)

          # Test validator
          try:
              from tripwire import validator
              print("✓ Successfully imported validator")
          except ImportError as e:
              print(f"::error::Failed to import validator: {e}")
              sys.exit(1)

          print("\n✓ All imports successful")
          PY

      - name: Test core functionality in clean environment
        # Using the test venv created above to verify the installed package
        run: |
          . .venv_test/bin/activate
          cd /tmp

          # Test init command
          mkdir -p test_tripwire_functionality
          cd test_tripwire_functionality

          echo "=== Testing tripwire init ==="
          tripwire init --project-type=cli
          if [ ! -f .env ]; then
            echo "::error::init command didn't create .env file"
            exit 1
          fi
          if [ ! -f .env.example ]; then
            echo "::error::init command didn't create .env.example file"
            exit 1
          fi
          echo "✓ init command works"

          echo "=== Testing tripwire check ==="
          tripwire check || echo "Check command executed (drift expected)"

          echo "\n✓ All functionality tests passed"

  pypi:
    name: PyPI Upload (Trusted Publishing)
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, test-pypi]
    if: github.event_name == 'push' && needs.validate-release.outputs.is_prerelease == 'false'
    # OIDC for Trusted Publishing
    permissions:
      contents: read
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/tripwire-py
    env:
      # Force UTF-8 encoding on Windows for proper Unicode handling
      PYTHONIOENCODING: utf-8
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Check if version already exists on PyPI
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Check if version exists on PyPI
          if pip index versions tripwire-py 2>/dev/null | grep -q "tripwire-py ($VERSION)"; then
            echo "::error::Version $VERSION already exists on PyPI!"
            echo "::error::PyPI does not allow overwriting versions."
            echo "::error::Please bump the version number and try again."
            exit 1
          fi
          echo "✓ Version $VERSION does not exist on PyPI yet"

      # Publish via OIDC (configure Trusted Publisher in PyPI first)
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages_dir: dist
          # Enable SLSA provenance for supply chain security
          attestations: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Wait for PyPI propagation
        run: sleep 15

      - name: Verify install from PyPI (with retry)
        # Manual venv creation here is intentional - we're testing the installed package
        # in isolation, separate from the build environment
        run: |
          rm -rf .venv_pypi
          python -m venv .venv_pypi
          . .venv_pypi/bin/activate
          pip install -U pip

          # Retry installation with exponential backoff
          for i in {1..5}; do
            if pip install tripwire-py==${{ needs.validate-release.outputs.version }}; then
              echo "✓ Package installed from PyPI"
              break
            fi
            echo "Retry $i/5 after PyPI sync..."
            sleep $((10 * i))
          done

      # NEW: Run validation script (Phase 2 - additional check)
      - name: Run validation script (additional check)
        # Using the test venv created above to verify the installed package
        run: |
          . .venv_pypi/bin/activate
          chmod +x .github/scripts/validate_cli.sh
          ./.github/scripts/validate_cli.sh ${{ needs.validate-release.outputs.version }}

      # KEEP: Existing comprehensive verification (for now - Phase 2)
      - name: Comprehensive verification (PyPI)
        # Using the test venv created above to verify the installed package
        run: |
          . .venv_pypi/bin/activate

          echo "=== Verifying version ==="
          tripwire --version
          if ! tripwire --version | grep -q "${{ needs.validate-release.outputs.version }}"; then
            echo "::error::Version mismatch"
            exit 1
          fi

          echo "=== Verifying CLI works ==="
          tripwire --help

          echo "=== Verifying imports ==="
          python -c "from tripwire import env, TripWire, validator; print('✓ All imports successful')"

          echo "✓ PyPI package verification complete"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, pypi, test-pypi]
    if: always() && (needs.pypi.result == 'success' || needs.test-pypi.result == 'success')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Extract release notes from CHANGELOG.md
        id: changelog
        run: |
          chmod +x .github/scripts/extract_changelog.sh
          .github/scripts/extract_changelog.sh ${{ needs.validate-release.outputs.version }} > RELEASE_NOTES.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release v${{ needs.validate-release.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          files: |
            dist/tripwire-${{ needs.validate-release.outputs.version }}-py3-none-any.whl
            dist/tripwire-${{ needs.validate-release.outputs.version }}.tar.gz

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, validate-release]
    if: always()
    steps:
      - name: Outcome
        run: |
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "✅ Release v${{ needs.validate-release.outputs.version }} published."
            echo "📦 PyPI: https://pypi.org/project/tripwire-py/${{ needs.validate-release.outputs.version }}/"
            echo "🏷️ GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}"
          else
            echo "❌ Release failed. Check logs."
          fi
