name: CI

on:
  push:
    branches: [ main, feature/* ]
    paths:
      - "src/**"
  pull_request:
    branches: [ main ]
    paths:
      - "src/**"

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]
    env:
      # Force UTF-8 encoding on Windows for proper Unicode handling
      PYTHONIOENCODING: utf-8

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pre-commit

    - name: Run pre-commit hooks (format/lint/static checks)
      run: |
        pre-commit run --all-files

    - name: Run type checking
      run: mypy src/tripwire

    - name: Run tests with coverage
      run: |
        pytest --cov=tripwire --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: unittests
        name: tripwire-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # NEW: Dedicated CLI validation test job (Phase 2)
  cli-validation:
    name: CLI Validation Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run CLI validation test suite
      run: |
        pytest tests/test_cli_validation.py -v --tb=short

    - name: Display test summary
      if: always()
      run: |
        echo "CLI Validation Test Summary:"
        pytest tests/test_cli_validation.py --collect-only -q

  security:
    name: Security Scan (pre-commit)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pre-commit

    - name: Run Bandit via pre-commit
      run: pre-commit run bandit --all-files || true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, cli-validation, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install built package
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl

    # UPDATED: Use validation script (Phase 2 - additional check)
    - name: Validate CLI using script (additional check)
      run: |
        chmod +x .github/scripts/validate_cli.sh
        # Note: No version check in CI (only on releases)
        ./.github/scripts/validate_cli.sh

    # Keep existing workflow test for completeness
    - name: Test basic functionality
      run: |
        # Create a test project
        mkdir test_project
        cd test_project

        # Initialize TripWire
        tripwire init --project-type web

        # Create a test Python file
        cat > test_app.py << 'EOF'
        from tripwire import env

        API_KEY = env.require('API_KEY', description='Test API key')
        DEBUG = env.optional('DEBUG', default=False, type=bool)
        PORT = env.optional('PORT', default=8000, type=int)
        EOF

        # Set environment variables
        export API_KEY=test-key-12345
        export DEBUG=true
        export PORT=3000

        # Test the app
        python test_app.py

        # Test generation
        tripwire generate --force

        # Test validation
        tripwire validate

        # Test check command
        tripwire check

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run performance tests
      run: |
        python benchmarks/performance.py

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Generate documentation
      run: |
        # Test documentation generation
        tripwire docs --format markdown > docs/generated.md
        tripwire docs --format html > docs/generated.html
        tripwire docs --format json > docs/generated.json

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/generated.*
