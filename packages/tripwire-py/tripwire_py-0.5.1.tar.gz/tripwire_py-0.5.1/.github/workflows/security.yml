name: Security Scan

on:
  push:
    branches: [ main, feature/* ]
    paths:
      - "src/**"
  pull_request:
    branches: [ main ]
    paths:
      - "src/**"
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run TripWire secret scan
      run: |
        # Create a test .env file for scanning
        cat > .env << 'EOF'
        API_KEY=test-key-12345
        DEBUG=true
        PORT=8000
        EOF

        # Test secret scanning
        tripwire scan --strict || echo "Secret scan completed with findings"

    - name: Run git history audit
      run: |
        # Test audit functionality
        tripwire audit --all --json > audit-results.json || echo "Audit completed"
        cat audit-results.json

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Run Safety check
      run: |
        safety check --output json > safety-report.json || true
        safety check || true

    - name: Run pip-audit
      run: |
        pip-audit --format json --output pip-audit-report.json || true
        pip-audit || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-security-reports
        path: |
          safety-report.json
          pip-audit-report.json

  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit

    - name: Run Bandit security scan
      run: |
        bandit -c bandit.yaml -r src/tripwire -f json -o bandit-report.json || true
        bandit -c bandit.yaml -r src/tripwire -f txt || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: code-security-reports
        path: |
          bandit-report.json

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install license checking tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses

    - name: Check licenses
      run: |
        pip-licenses --format json --output-file licenses.json || true
        pip-licenses --format markdown --output-file licenses.md || true
        pip-licenses --format csv --output-file licenses.csv || true

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: |
          licenses.json
          licenses.csv

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, code-security, license-check]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        echo "## Artifacts Generated" >> security-summary.md
        if compgen -G "*/" > /dev/null; then
          ls -la */ >> security-summary.md
        else
          echo "(No artifact directories present)" >> security-summary.md
        fi
        echo "" >> security-summary.md
        echo "## Next Steps" >> security-summary.md
        echo "1. Review all security reports" >> security-summary.md
        echo "2. Address any critical vulnerabilities" >> security-summary.md
        echo "3. Update dependencies if needed" >> security-summary.md
        echo "4. Consider security recommendations" >> security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
