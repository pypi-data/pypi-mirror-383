apiVersion: apps/v1
kind: Deployment
metadata:
  name: policy-guard-backend
  namespace: policy-guard
  labels:
    app.kubernetes.io/name: policy-guard
    app.kubernetes.io/component: backend
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: policy-guard
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: policy-guard
        app.kubernetes.io/component: backend
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: policy-guard-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: policy-guard-backend
        image: policy-guard-backend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: policy-guard-config
              key: DATABASE_URL
        - name: API_HOST
          valueFrom:
            configMapKeyRef:
              name: policy-guard-config
              key: API_HOST
        - name: API_PORT
          valueFrom:
            configMapKeyRef:
              name: policy-guard-config
              key: API_PORT
        - name: API_WORKERS
          valueFrom:
            configMapKeyRef:
              name: policy-guard-config
              key: API_WORKERS
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: policy-guard-config
              key: CORS_ORIGINS
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: policy-guard-config
              key: LOG_LEVEL
        - name: ENABLE_METRICS
          valueFrom:
            configMapKeyRef:
              name: policy-guard-config
              key: ENABLE_METRICS
        - name: METRICS_PORT
          valueFrom:
            configMapKeyRef:
              name: policy-guard-config
              key: METRICS_PORT
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: policy-guard-secrets
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: policy-guard-secrets
              key: DB_PASSWORD
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: policy-guard-secrets
              key: API_KEY
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: policy-guard-secrets
              key: JWT_SECRET
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: database-storage
          mountPath: /app/data
        - name: reports-storage
          mountPath: /app/reports
        - name: backups-storage
          mountPath: /app/backups
        - name: rules-config
          mountPath: /app/rules
          readOnly: true
        - name: app-config
          mountPath: /app/config
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
      volumes:
      - name: database-storage
        persistentVolumeClaim:
          claimName: policy-guard-db-pvc
      - name: reports-storage
        persistentVolumeClaim:
          claimName: policy-guard-reports-pvc
      - name: backups-storage
        persistentVolumeClaim:
          claimName: policy-guard-backups-pvc
      - name: rules-config
        configMap:
          name: policy-guard-rules
      - name: app-config
        configMap:
          name: policy-guard-config
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - policy-guard
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: policy-guard-backend-pdb
  namespace: policy-guard
  labels:
    app.kubernetes.io/name: policy-guard
    app.kubernetes.io/component: backend
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: policy-guard
      app.kubernetes.io/component: backend
