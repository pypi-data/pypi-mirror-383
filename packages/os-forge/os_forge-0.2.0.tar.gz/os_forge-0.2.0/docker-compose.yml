version: '3.8'

services:
  # OS Forge Backend
  os-forge-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: os-forge-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    volumes:
      - os_forge_data:/app/data
      - os_forge_reports:/app/reports
      - os_forge_backups:/app/backups
      - os_forge_logs:/app/logs
    environment:
      - DATABASE_URL=postgresql://os_forge:${POSTGRES_PASSWORD:-os_forge_password}@postgres:5432/os_forge
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - CORS_ORIGINS=http://localhost:3000,http://os-forge-frontend:3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - os-forge-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.os-forge.local`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # OS Forge Frontend
  os-forge-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: os-forge-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://os-forge-backend:8000
      - PORT=3001
      - HOSTNAME=127.0.0.1
    depends_on:
      os-forge-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - os-forge-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`os-forge.local`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000" 

  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: os-forge-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=os_forge
      - POSTGRES_USER=os_forge
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-os_forge_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U os_forge -d os_forge"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - os-forge-network

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: os-forge-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - os-forge-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: os-forge-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - os-forge-frontend
      - os-forge-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - os-forge-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: os-forge-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - os-forge-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: os-forge-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - os-forge-network

# Networks
networks:
  os-forge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  os_forge_data:
    driver: local
  os_forge_reports:
    driver: local
  os_forge_backups:
    driver: local
  os_forge_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local