# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tecton_proto/spark_common/clusters__client.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import struct_pb2 as google_dot_protobuf_dot_struct__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n0tecton_proto/spark_common/clusters__client.proto\x12\x19tecton_proto.spark_common\x1a\x1cgoogle/protobuf/struct.proto\"0\n\x0f\x45xistingCluster\x12\x1d\n\ncluster_id\x18\x01 \x01(\tR\tclusterId\"\xb7\x0b\n\nNewCluster\x12!\n\x0bnum_workers\x18\x01 \x01(\x05H\x00R\nnumWorkers\x12\x44\n\tautoscale\x18\x02 \x01(\x0b\x32$.tecton_proto.spark_common.AutoScaleH\x00R\tautoscale\x12!\n\x0c\x63luster_name\x18\x03 \x01(\tR\x0b\x63lusterName\x12#\n\rspark_version\x18\x04 \x01(\tR\x0csparkVersion\x12S\n\nspark_conf\x18\x0f \x03(\x0b\x32\x34.tecton_proto.spark_common.NewCluster.SparkConfEntryR\tsparkConf\x12O\n\x0e\x61ws_attributes\x18\x07 \x01(\x0b\x32(.tecton_proto.spark_common.AwsAttributesR\rawsAttributes\x12 \n\x0cnode_type_id\x18\x06 \x01(\tR\nnodeTypeId\x12.\n\x13\x65nable_elastic_disk\x18\x0c \x01(\x08R\x11\x65nableElasticDisk\x12N\n\x0cinit_scripts\x18\t \x03(\x0b\x32+.tecton_proto.spark_common.ResourceLocationR\x0binitScripts\x12U\n\x10\x63luster_log_conf\x18\n \x01(\x0b\x32+.tecton_proto.spark_common.ResourceLocationR\x0e\x63lusterLogConf\x12\x46\n\x0b\x63ustom_tags\x18\x0b \x03(\x0b\x32%.tecton_proto.spark_common.ClusterTagR\ncustomTags\x12\x30\n\x13terminateOnComplete\x18\r \x01(\x08R\x13terminateOnComplete\x12]\n\x0espark_env_vars\x18\x10 \x03(\x0b\x32\x37.tecton_proto.spark_common.NewCluster.SparkEnvVarsEntryR\x0csparkEnvVars\x12O\n\x0egcp_attributes\x18\x13 \x01(\x0b\x32(.tecton_proto.spark_common.GCPAttributesR\rgcpAttributes\x12G\n\x13json_cluster_config\x18\x11 \x01(\x0b\x32\x17.google.protobuf.StructR\x11jsonClusterConfig\x12\x1b\n\tpolicy_id\x18\x12 \x01(\tR\x08policyId\x12=\n\x1b\x61pply_policy_default_values\x18\x18 \x01(\x08R\x18\x61pplyPolicyDefaultValues\x12-\n\x13\x64river_node_type_id\x18\x1a \x01(\tR\x10\x64riverNodeTypeId\x12\x32\n\x16root_volume_size_in_gb\x18\x14 \x01(\x03R\x12rootVolumeSizeInGb\x12,\n\x12\x64\x61ta_security_mode\x18\x16 \x01(\tR\x10\x64\x61taSecurityMode\x12(\n\x10single_user_name\x18\x17 \x01(\tR\x0esingleUserName\x12(\n\x10instance_pool_id\x18\x19 \x01(\tR\x0einstancePoolId\x1a<\n\x0eSparkConfEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n\x05value\x18\x02 \x01(\tR\x05value:\x02\x38\x01\x1a?\n\x11SparkEnvVarsEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n\x05value\x18\x02 \x01(\tR\x05value:\x02\x38\x01\x42\x0e\n\x0cworkers_typeJ\x04\x08\x05\x10\x06J\x04\x08\x08\x10\tJ\x04\x08\x0e\x10\x0fJ\x04\x08\x15\x10\x16\"\x90\x01\n\x0b\x43lusterInfo\x12\x46\n\x0bnew_cluster\x18\x01 \x01(\x0b\x32%.tecton_proto.spark_common.NewClusterR\nnewCluster\x12\x1d\n\nfinal_json\x18\x02 \x01(\tR\tfinalJson\x12\x1a\n\x08warnings\x18\x03 \x03(\tR\x08warnings\"M\n\tAutoScale\x12\x1f\n\x0bmin_workers\x18\x01 \x01(\x05R\nminWorkers\x12\x1f\n\x0bmax_workers\x18\x02 \x01(\x05R\nmaxWorkers\"\xab\x03\n\rAwsAttributes\x12&\n\x0f\x66irst_on_demand\x18\x05 \x01(\x05R\rfirstOnDemand\x12N\n\x0c\x61vailability\x18\x06 \x01(\x0e\x32*.tecton_proto.spark_common.AwsAvailabilityR\x0c\x61vailability\x12\x17\n\x07zone_id\x18\x07 \x01(\tR\x06zoneId\x12\x33\n\x16spot_bid_price_percent\x18\x08 \x01(\x05R\x13spotBidPricePercent\x12\x30\n\x14instance_profile_arn\x18\x04 \x01(\tR\x12instanceProfileArn\x12P\n\x0f\x65\x62s_volume_type\x18\x01 \x01(\x0e\x32(.tecton_proto.spark_common.EbsVolumeTypeR\rebsVolumeType\x12(\n\x10\x65\x62s_volume_count\x18\x02 \x01(\x05R\x0e\x65\x62sVolumeCount\x12&\n\x0f\x65\x62s_volume_size\x18\x03 \x01(\x05R\rebsVolumeSize\"\xb2\x02\n\x10ResourceLocation\x12:\n\x02s3\x18\x01 \x01(\x0b\x32(.tecton_proto.spark_common.S3StorageInfoH\x00R\x02s3\x12@\n\x04\x64\x62\x66s\x18\x03 \x01(\x0b\x32*.tecton_proto.spark_common.DbfsStorageInfoH\x00R\x04\x64\x62\x66s\x12O\n\tworkspace\x18\x04 \x01(\x0b\x32/.tecton_proto.spark_common.WorkspaceStorageInfoH\x00R\tworkspace\x12\x43\n\x05local\x18\x02 \x01(\x0b\x32+.tecton_proto.spark_common.LocalStorageInfoH\x00R\x05localB\n\n\x08location\"I\n\rS3StorageInfo\x12 \n\x0b\x64\x65stination\x18\x01 \x01(\tR\x0b\x64\x65stination\x12\x16\n\x06region\x18\x02 \x01(\tR\x06region\"3\n\x0f\x44\x62\x66sStorageInfo\x12 \n\x0b\x64\x65stination\x18\x01 \x01(\tR\x0b\x64\x65stination\"8\n\x14WorkspaceStorageInfo\x12 \n\x0b\x64\x65stination\x18\x01 \x01(\tR\x0b\x64\x65stination\"&\n\x10LocalStorageInfo\x12\x12\n\x04path\x18\x01 \x01(\tR\x04path\"J\n\x0e\x43lusterLogConf\x12\x38\n\x02s3\x18\x01 \x01(\x0b\x32(.tecton_proto.spark_common.S3StorageInfoR\x02s3\"4\n\nClusterTag\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n\x05value\x18\x02 \x01(\tR\x05value\"\xe4\x01\n\rGCPAttributes\x12:\n\x19use_preemptible_executors\x18\x01 \x01(\x08R\x17usePreemptibleExecutors\x12\x34\n\x16google_service_account\x18\x02 \x01(\tR\x14googleServiceAccount\x12$\n\x0e\x62oot_disk_size\x18\x03 \x01(\x05R\x0c\x62ootDiskSize\x12\"\n\x0c\x61vailability\x18\x04 \x01(\tR\x0c\x61vailability\x12\x17\n\x07zone_id\x18\x05 \x01(\tR\x06zoneId*\x8f\x01\n\x0f\x41wsAvailability\x12\x1c\n\x18UNKNOWN_AWS_AVAILABILITY\x10\x00\x12\x08\n\x04SPOT\x10\x01\x12\r\n\tON_DEMAND\x10\x02\x12\x16\n\x12SPOT_WITH_FALLBACK\x10\x03\x12-\n)INSTANCE_FLEET_FOR_INTEGRATION_TESTS_ONLY\x10\x04*c\n\rEbsVolumeType\x12\x1b\n\x17UNKNOWN_EBS_VOLUME_TYPE\x10\x00\x12\x17\n\x13GENERAL_PURPOSE_SSD\x10\x01\x12\x1c\n\x18THROUGHPUT_OPTIMIZED_HDD\x10\x02\x42\x1b\n\x17\x63om.tecton.spark_commonP\x01')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'tecton_proto.spark_common.clusters__client_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\027com.tecton.spark_commonP\001'
  _NEWCLUSTER_SPARKCONFENTRY._options = None
  _NEWCLUSTER_SPARKCONFENTRY._serialized_options = b'8\001'
  _NEWCLUSTER_SPARKENVVARSENTRY._options = None
  _NEWCLUSTER_SPARKENVVARSENTRY._serialized_options = b'8\001'
  _AWSAVAILABILITY._serialized_start=3178
  _AWSAVAILABILITY._serialized_end=3321
  _EBSVOLUMETYPE._serialized_start=3323
  _EBSVOLUMETYPE._serialized_end=3422
  _EXISTINGCLUSTER._serialized_start=109
  _EXISTINGCLUSTER._serialized_end=157
  _NEWCLUSTER._serialized_start=160
  _NEWCLUSTER._serialized_end=1623
  _NEWCLUSTER_SPARKCONFENTRY._serialized_start=1458
  _NEWCLUSTER_SPARKCONFENTRY._serialized_end=1518
  _NEWCLUSTER_SPARKENVVARSENTRY._serialized_start=1520
  _NEWCLUSTER_SPARKENVVARSENTRY._serialized_end=1583
  _CLUSTERINFO._serialized_start=1626
  _CLUSTERINFO._serialized_end=1770
  _AUTOSCALE._serialized_start=1772
  _AUTOSCALE._serialized_end=1849
  _AWSATTRIBUTES._serialized_start=1852
  _AWSATTRIBUTES._serialized_end=2279
  _RESOURCELOCATION._serialized_start=2282
  _RESOURCELOCATION._serialized_end=2588
  _S3STORAGEINFO._serialized_start=2590
  _S3STORAGEINFO._serialized_end=2663
  _DBFSSTORAGEINFO._serialized_start=2665
  _DBFSSTORAGEINFO._serialized_end=2716
  _WORKSPACESTORAGEINFO._serialized_start=2718
  _WORKSPACESTORAGEINFO._serialized_end=2774
  _LOCALSTORAGEINFO._serialized_start=2776
  _LOCALSTORAGEINFO._serialized_end=2814
  _CLUSTERLOGCONF._serialized_start=2816
  _CLUSTERLOGCONF._serialized_end=2890
  _CLUSTERTAG._serialized_start=2892
  _CLUSTERTAG._serialized_end=2944
  _GCPATTRIBUTES._serialized_start=2947
  _GCPATTRIBUTES._serialized_end=3175
# @@protoc_insertion_point(module_scope)
