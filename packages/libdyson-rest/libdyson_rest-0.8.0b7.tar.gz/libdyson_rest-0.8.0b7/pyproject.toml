[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "libdyson-rest"
version = "0.8.0b7"
description = "Python library for interacting with Dyson devices through their official REST API"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Christopher Gray", email = "79777799+cmgrayb@users.noreply.github.com"},
]
maintainers = [
    {name = "Christopher Gray", email = "79777799+cmgrayb@users.noreply.github.com"},
]
keywords = [
    "dyson",
    "air-purifier",
    "fan",
    "iot",
    "rest-api",
    "mqtt",
    "home-automation",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Home Automation",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "requests>=2.28.0",
    "httpx>=0.24.0",
    "cryptography>=3.4.0",
    "typing_extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "black==25.9.0",
    "flake8==7.3.0",
    "isort==6.1.0",
    "pytest==8.4.2",
    "pytest-cov==7.0.0",
    "pytest-asyncio==1.2.0",
    "mypy==1.18.2",
    "bandit[toml]==1.8.6",
    "safety==4.0.4",
]

[project.urls]
Homepage = "https://github.com/cmgrayb/libdyson-rest"
Repository = "https://github.com/cmgrayb/libdyson-rest"
Documentation = "https://github.com/cmgrayb/libdyson-rest#readme"
Issues = "https://github.com/cmgrayb/libdyson-rest/issues"
Changelog = "https://github.com/cmgrayb/libdyson-rest/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["libdyson_rest"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    ".eggs",
    "*.egg",
    "build",
    "dist",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]
