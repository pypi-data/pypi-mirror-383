=====
HCube
=====

HCube provides a simple interface for working with mutlidimensional data in different backends.
The motivation is to give a uniform interface for working with the data regardless if it is stored
in a file or databases of different kinds.

It is currently in active development with the aim to support `ClickHouse` and `PostgreSQL` backends
while making it simple to provide more backends.

The current development plan is shortly outlined in `To implement`_. To see how to use it, it is
best to study the tests.

---------
Structure
---------

Cube
  defines the structure of the underlying data. Contains a list of dimensions, metrics and possibly
  other parameters

Dimension
  describes a dimension used by a HCube. Should contain `name` and `type`. Type could be an attr
  but most likely it will be a child class of `Dimension` like `StringDimension`.

Metric
  desribes one metric. I think only number based metrics like `IntegerMetric` and `FloatMetric`
  make sense. One metric should be marked as default, so that it could be skipped in query
  definition.

CubeQuery
  is generated by a HCube and may contain a link to it. It contains data about applied filters,
  groups, aggregations, and ordering. Each `Cube` dimension could be assigned a filter. Each
  dimension will then be either part of a group-by or will be ignored from the result. Grouping
  must store order because group-by ``A,B`` is different from ``B,A``. Ordering as well.

  The result of a `CubeQuery` will be a generator of `namedtuple` instances
  which will have keys for group-by dimensions and for all the `Aggregations` specified.

Filter
  describes how to filter a column. Should have operation specific impelementations, like
  `ListFilter` for filtering give a list of values, `RangeFilter` for lt/gt filtering, etc.

OrderSpec
  should contain a reference to a field - either a dimension or an aggregation result - and a
  direction - ``desc`` or ``asc``.

Aggregation
  describes how to aggregate metrics. At the start, ``Sum``, ``Count``, ``Min``, ``Max`` should be
  quite enough.


------------
To implement
------------

* filter for OR
