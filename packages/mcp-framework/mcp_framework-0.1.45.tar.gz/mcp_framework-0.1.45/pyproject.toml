[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-framework"
version = "0.1.45"
description = "一个强大且易用的 MCP (Model Context Protocol) 服务器开发框架"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "MCP Framework Team", email = "team@mcpframework.com"},
]
maintainers = [
    {name = "MCP Framework Team", email = "team@mcpframework.com"},
]
keywords = [
    "mcp", "model-context-protocol", "server", "framework", 
    "ai", "llm", "tools", "streaming", "async", "web-server"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: AsyncIO",
    "Operating System :: OS Independent",
]
dependencies = [
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "colorama>=0.4.6",
    "psutil>=5.9.0",
    "PyInstaller>=5.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
web = [
    "jinja2>=3.0.0",
    "aiohttp-jinja2>=1.5.0",
]
build = [
    "PyInstaller>=5.0.0",
    "wheel>=0.37.0",
    "twine>=4.0.0",
]
all = [
    "mcp-framework[dev,web,build]",
]

[project.scripts]
mcp-framework = "mcp_framework.cli:main"
mcp-build = "mcp_framework.build:main"

[project.urls]
Homepage = "https://github.com/mcpframework/mcp_framework"
Documentation = "https://mcp-framework.readthedocs.io/"
Repository = "https://github.com/mcpframework/mcp_framework.git"
"Bug Reports" = "https://github.com/mcpframework/mcp_framework/issues"
"Source Code" = "https://github.com/mcpframework/mcp_framework"

[tool.setuptools]
packages = ["mcp_framework"]
include-package-data = true

[tool.setuptools.package-data]
mcp_framework = [
    "web/templates/*.html",
    "web/static/*.css",
    "web/static/*.js",
    "docs/*.md",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["mcp_framework"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]