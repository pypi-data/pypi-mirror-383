#
# This is an auto-generated file.  DO NOT EDIT!
#

from ansys.fluent.core.solver.flobject import *

from ansys.fluent.core.solver.flobject import (
    _ChildNamedObjectAccessorMixin,
    _NonCreatableNamedObjectMixin,
    _InputFile,
    _OutputFile,
    _InOutFile,
    _FlStringConstant,
)

SHASH = "3c9ace44a737e26144a81a72d3c131f0d6ca0ddb50483e465617d890da30dea1"

class single_precision_coordinates(Boolean):
    """
    Specifies whether to write nodal coordinates in single precision.
    """
    _version = '241'
    fluent_name = 'single-precision-coordinates?'
    _python_name = 'single_precision_coordinates'
    return_type = 'object'

class binary_legacy_files(Boolean):
    """
    Specifies whether to write binary or text format case and data files.
    """
    _version = '241'
    fluent_name = 'binary-legacy-files?'
    _python_name = 'binary_legacy_files'
    return_type = 'object'

class cff_files(Boolean):
    """
    Specifies whether to write ANSYS common fluids format (CFF) files or legacy case and data files.
    """
    _version = '241'
    fluent_name = 'cff-files?'
    _python_name = 'cff_files'
    return_type = 'object'

class convert_hanging_nodes_during_read(Boolean):
    """
    Specifies whether meshes with hanging-nodes will be converted to polyhedra while reading.
    """
    _version = '241'
    fluent_name = 'convert-hanging-nodes-during-read?'
    _python_name = 'convert_hanging_nodes_during_read'
    return_type = 'object'

class async_optimize(Boolean):
    """
    Specifies whether to optimize file IO using scratch disks and asynchronous operations.
    """
    _version = '241'
    fluent_name = 'async-optimize?'
    _python_name = 'async_optimize'
    return_type = 'object'

class write_pdat(Boolean):
    """
    Specifies whether to attempt to save pdat files.
    """
    _version = '241'
    fluent_name = 'write-pdat?'
    _python_name = 'write_pdat'
    return_type = 'object'

class case_frequency(String, AllowedValuesMixin):
    """
    The preference for saving case files.
    """
    _version = '241'
    fluent_name = 'case-frequency'
    _python_name = 'case_frequency'
    return_type = 'object'

class data_frequency(Real):
    """
    The iteration or time step increment for saving data files.
    """
    _version = '241'
    fluent_name = 'data-frequency'
    _python_name = 'data_frequency'
    return_type = 'object'

class root_name(Filename):
    """
    The root name for auto-saved files. The number of iterations or time steps will be appended to this root name.
    """
    _version = '241'
    fluent_name = 'root-name'
    _python_name = 'root_name'
    return_type = 'object'

class retain_most_recent_files(Boolean):
    """
    After the maximum (as in max-files) is reached, a file will be deleted for each file saved.
    """
    _version = '241'
    fluent_name = 'retain-most-recent-files?'
    _python_name = 'retain_most_recent_files'
    return_type = 'object'

class max_files(Integer):
    """
    The maximum number of data files to save. After the maximum is reached, a file will be deleted for each file saved.
    """
    _version = '241'
    fluent_name = 'max-files'
    _python_name = 'max_files'
    return_type = 'object'

class file_suffix_type(String, AllowedValuesMixin):
    """
    'file_suffix_type' child.
    """
    _version = '241'
    fluent_name = 'file-suffix-type'
    _python_name = 'file_suffix_type'
    return_type = 'object'

class file_decimal_digit(Integer):
    """
    'file_decimal_digit' child.
    """
    _version = '241'
    fluent_name = 'file-decimal-digit'
    _python_name = 'file_decimal_digit'
    return_type = 'object'

class append_file_name_with(Group):
    """
    The suffix for auto-saved files. The file name can be appended by flow-time, time-step value or by user specified flags in file name.
    """
    _version = '241'
    fluent_name = 'append-file-name-with'
    _python_name = 'append_file_name_with'
    child_names = ['file_suffix_type', 'file_decimal_digit']
    _child_classes = dict(
        file_suffix_type=file_suffix_type,
        file_decimal_digit=file_decimal_digit,
    )
    return_type = 'object'

class frequency_type(String, AllowedValuesMixin):
    """
    The auto save frequency type to either time-step or crank-angle and set the corresponding frequency.
    """
    _version = '241'
    fluent_name = 'frequency-type'
    _python_name = 'frequency_type'
    return_type = 'object'

class save_frequency(Real):
    """
    'save_frequency' child.
    """
    _version = '241'
    fluent_name = 'save-frequency'
    _python_name = 'save_frequency'
    return_type = 'object'

class save_data_file_every(Group):
    """
    The auto save frequency type to either time-step or crank-angle and set the corresponding frequency.
    """
    _version = '241'
    fluent_name = 'save-data-file-every'
    _python_name = 'save_data_file_every'
    child_names = ['frequency_type', 'save_frequency']
    _child_classes = dict(
        frequency_type=frequency_type,
        save_frequency=save_frequency,
    )
    return_type = 'object'

class auto_save(Group):
    """
    'auto_save' child.
    """
    _version = '241'
    fluent_name = 'auto-save'
    _python_name = 'auto_save'
    child_names = ['case_frequency', 'data_frequency', 'root_name', 'retain_most_recent_files', 'max_files', 'append_file_name_with', 'save_data_file_every']
    _child_classes = dict(
        case_frequency=case_frequency,
        data_frequency=data_frequency,
        root_name=root_name,
        retain_most_recent_files=retain_most_recent_files,
        max_files=max_files,
        append_file_name_with=append_file_name_with,
        save_data_file_every=save_data_file_every,
    )
    return_type = 'object'

class enable_auto_creation_of_scp_file(Boolean):
    """
    Enable/disable automatic creation of scp file during case write.
    """
    _version = '241'
    fluent_name = 'enable-auto-creation-of-scp-file?'
    _python_name = 'enable_auto_creation_of_scp_file'
    return_type = 'object'

class file_name(String):
    """
    'file_name' child.
    """
    _version = '241'
    fluent_name = 'file-name'
    _python_name = 'file_name'
    return_type = 'object'

class write_sc_file(Command):
    """
    Write a Fluent Input File for System Coupling.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'write-sc-file'
    _python_name = 'write_sc_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name,
    )
    return_type = 'object'

class sc_def_file_settings(Group):
    """
    File object.
    """
    _version = '241'
    fluent_name = 'sc-def-file-settings'
    _python_name = 'sc_def_file_settings'
    child_names = ['enable_auto_creation_of_scp_file']
    command_names = ['write_sc_file']
    _child_classes = dict(
        enable_auto_creation_of_scp_file=enable_auto_creation_of_scp_file,
        write_sc_file=write_sc_file,
    )
    return_type = 'object'

class cgns_export_filetype(String, AllowedValuesMixin):
    """
    HDF5 or ADF as file format for CGNS.
    """
    _version = '241'
    fluent_name = 'cgns-export-filetype'
    _python_name = 'cgns_export_filetype'
    return_type = 'object'

class cgns_mesh_type(String, AllowedValuesMixin):
    """
    'cgns_mesh_type' child.
    """
    _version = '241'
    fluent_name = 'cgns-mesh-type'
    _python_name = 'cgns_mesh_type'
    return_type = 'object'

class cgns_polyhedral_cpu_threads(Integer):
    """
    CPU threads for CGNS Poly export.
    """
    _version = '241'
    fluent_name = 'cgns-polyhedral-cpu-threads'
    _python_name = 'cgns_polyhedral_cpu_threads'
    return_type = 'object'

class cgns_merge_ngons_to_single_ngon(Boolean):
    """
    Merges multiple CGNS NGON_n s to single NGON_n.
    """
    _version = '241'
    fluent_name = 'cgns-merge-ngons-to-single-ngon'
    _python_name = 'cgns_merge_ngons_to_single_ngon'
    return_type = 'object'

class cgns_default_cellsize_changes(Boolean):
    """
    Enable/disable default CGNS cellsize correction.
    """
    _version = '241'
    fluent_name = 'cgns-default-cellsize-changes'
    _python_name = 'cgns_default_cellsize_changes'
    return_type = 'object'

class cgns_enhance_poly_export_performance(Boolean):
    """
    Disable NGON_n performance improvements if experiencing issues with exporting polyhedral elements to cgns.
    """
    _version = '241'
    fluent_name = 'cgns-enhance-poly-export-performance'
    _python_name = 'cgns_enhance_poly_export_performance'
    return_type = 'object'

class settings(Group):
    """
    The export settings object.
    """
    _version = '241'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['cgns_export_filetype', 'cgns_mesh_type', 'cgns_polyhedral_cpu_threads', 'cgns_merge_ngons_to_single_ngon', 'cgns_default_cellsize_changes', 'cgns_enhance_poly_export_performance']
    _child_classes = dict(
        cgns_export_filetype=cgns_export_filetype,
        cgns_mesh_type=cgns_mesh_type,
        cgns_polyhedral_cpu_threads=cgns_polyhedral_cpu_threads,
        cgns_merge_ngons_to_single_ngon=cgns_merge_ngons_to_single_ngon,
        cgns_default_cellsize_changes=cgns_default_cellsize_changes,
        cgns_enhance_poly_export_performance=cgns_enhance_poly_export_performance,
    )
    return_type = 'object'

class file_name_1(Filename):
    """
    'file_name' child.
    """
    _version = '241'
    fluent_name = 'file-name'
    _python_name = 'file_name'
    return_type = 'object'

class surface_name_list(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '241'
    fluent_name = 'surface-name-list'
    _python_name = 'surface_name_list'
    return_type = 'object'

class structural_analysis(Boolean):
    """
    'structural_analysis' child.
    """
    _version = '241'
    fluent_name = 'structural-analysis?'
    _python_name = 'structural_analysis'
    return_type = 'object'

class write_loads(Boolean):
    """
    'write_loads' child.
    """
    _version = '241'
    fluent_name = 'write-loads?'
    _python_name = 'write_loads'
    return_type = 'object'

class loads(StringList, AllowedValuesMixin):
    """
    'loads' child.
    """
    _version = '241'
    fluent_name = 'loads'
    _python_name = 'loads'
    return_type = 'object'

class abaqus(Command):
    """
    Write an ABAQUS file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        surface_name_list : List
            Surface.
        structural_analysis : bool
            'structural_analysis' child.
        write_loads : bool
            'write_loads' child.
        loads : List
            'loads' child.
    """
    _version = '241'
    fluent_name = 'abaqus'
    _python_name = 'abaqus'
    argument_names = ['file_name', 'surface_name_list', 'structural_analysis', 'write_loads', 'loads']
    _child_classes = dict(
        file_name=file_name_1,
        surface_name_list=surface_name_list,
        structural_analysis=structural_analysis,
        write_loads=write_loads,
        loads=loads,
    )
    return_type = 'object'

class thread_name_list(StringList, AllowedValuesMixin):
    """
    Cell zone name list.
    """
    _version = '241'
    fluent_name = 'thread-name-list'
    _python_name = 'thread_name_list'
    return_type = 'object'

class mechanical_apdl(Command):
    """
    Write an Mechanical APDL file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        thread_name_list : List
            Cell zone name list.
    """
    _version = '241'
    fluent_name = 'mechanical-apdl'
    _python_name = 'mechanical_apdl'
    argument_names = ['file_name', 'thread_name_list']
    _child_classes = dict(
        file_name=file_name_1,
        thread_name_list=thread_name_list,
    )
    return_type = 'object'

class mechanical_apdl_input(Command):
    """
    Write an Mechanical APDL Input file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        surface_name_list : List
            Surface.
        structural_analysis : bool
            'structural_analysis' child.
        write_loads : bool
            'write_loads' child.
        loads : List
            'loads' child.
    """
    _version = '241'
    fluent_name = 'mechanical-apdl-input'
    _python_name = 'mechanical_apdl_input'
    argument_names = ['file_name', 'surface_name_list', 'structural_analysis', 'write_loads', 'loads']
    _child_classes = dict(
        file_name=file_name_1,
        surface_name_list=surface_name_list,
        structural_analysis=structural_analysis,
        write_loads=write_loads,
        loads=loads,
    )
    return_type = 'object'

class surface_name_list_1(StringList, AllowedValuesMixin):
    """
    List of surfaces to export.
    """
    _version = '241'
    fluent_name = 'surface-name-list'
    _python_name = 'surface_name_list'
    return_type = 'object'

class delimiter(String, AllowedValuesMixin):
    """
    'delimiter' child.
    """
    _version = '241'
    fluent_name = 'delimiter'
    _python_name = 'delimiter'
    return_type = 'object'

class cell_func_domain(StringList, AllowedValuesMixin):
    """
    'cell_func_domain' child.
    """
    _version = '241'
    fluent_name = 'cell-func-domain'
    _python_name = 'cell_func_domain'
    return_type = 'object'

class location(String, AllowedValuesMixin):
    """
    'location' child.
    """
    _version = '241'
    fluent_name = 'location'
    _python_name = 'location'
    return_type = 'object'

class ascii(Command):
    """
    Write an ASCII file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        surface_name_list : List
            List of surfaces to export.
        delimiter : str
            'delimiter' child.
        cell_func_domain : List
            'cell_func_domain' child.
        location : str
            'location' child.
    """
    _version = '241'
    fluent_name = 'ascii'
    _python_name = 'ascii'
    argument_names = ['file_name', 'surface_name_list', 'delimiter', 'cell_func_domain', 'location']
    _child_classes = dict(
        file_name=file_name_1,
        surface_name_list=surface_name_list_1,
        delimiter=delimiter,
        cell_func_domain=cell_func_domain,
        location=location,
    )
    return_type = 'object'

class cell_func_domain_export(StringList, AllowedValuesMixin):
    """
    'cell_func_domain_export' child.
    """
    _version = '241'
    fluent_name = 'cell-func-domain-export'
    _python_name = 'cell_func_domain_export'
    return_type = 'object'

class avs(Command):
    """
    Write an AVS UCD file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        cell_func_domain_export : List
            'cell_func_domain_export' child.
    """
    _version = '241'
    fluent_name = 'avs'
    _python_name = 'avs'
    argument_names = ['file_name', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        cell_func_domain_export=cell_func_domain_export,
    )
    return_type = 'object'

class ensight(Command):
    """
    Write EnSight 6 geometry, velocity, and scalar files.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        cell_func_domain_export : List
            'cell_func_domain_export' child.
    """
    _version = '241'
    fluent_name = 'ensight'
    _python_name = 'ensight'
    argument_names = ['file_name', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        cell_func_domain_export=cell_func_domain_export,
    )
    return_type = 'object'

class binary_format(Boolean):
    """
    'binary_format' child.
    """
    _version = '241'
    fluent_name = 'binary-format?'
    _python_name = 'binary_format'
    return_type = 'object'

class cellzones(StringList, AllowedValuesMixin):
    """
    List of cell zones to export.
    """
    _version = '241'
    fluent_name = 'cellzones'
    _python_name = 'cellzones'
    return_type = 'object'

class interior_zone_surfaces(StringList):
    """
    List of surfaces to export.
    """
    _version = '241'
    fluent_name = 'interior-zone-surfaces'
    _python_name = 'interior_zone_surfaces'
    return_type = 'object'

class cell_centered(Boolean):
    """
    'cell_centered' child.
    """
    _version = '241'
    fluent_name = 'cell-centered?'
    _python_name = 'cell_centered'
    return_type = 'object'

class ensight_gold(Command):
    """
    Write EnSight Gold geometry, velocity, and scalar files.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        cell_func_domain_export : List
            'cell_func_domain_export' child.
        binary_format : bool
            'binary_format' child.
        cellzones : List
            List of cell zones to export.
        interior_zone_surfaces : List
            List of surfaces to export.
        cell_centered : bool
            'cell_centered' child.
    """
    _version = '241'
    fluent_name = 'ensight-gold'
    _python_name = 'ensight_gold'
    argument_names = ['file_name', 'cell_func_domain_export', 'binary_format', 'cellzones', 'interior_zone_surfaces', 'cell_centered']
    _child_classes = dict(
        file_name=file_name_1,
        cell_func_domain_export=cell_func_domain_export,
        binary_format=binary_format,
        cellzones=cellzones,
        interior_zone_surfaces=interior_zone_surfaces,
        cell_centered=cell_centered,
    )
    return_type = 'object'

class fieldview(Command):
    """
    Write Fieldview case and data files.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        cell_func_domain_export : List
            'cell_func_domain_export' child.
    """
    _version = '241'
    fluent_name = 'fieldview'
    _python_name = 'fieldview'
    argument_names = ['file_name', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        cell_func_domain_export=cell_func_domain_export,
    )
    return_type = 'object'

class fieldview_data(Command):
    """
    Write Fieldview case and data files.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        cell_func_domain_export : List
            'cell_func_domain_export' child.
    """
    _version = '241'
    fluent_name = 'fieldview-data'
    _python_name = 'fieldview_data'
    argument_names = ['file_name', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        cell_func_domain_export=cell_func_domain_export,
    )
    return_type = 'object'

class gambit(Command):
    """
    Write a Gambit neutral file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        cell_func_domain_export : List
            'cell_func_domain_export' child.
    """
    _version = '241'
    fluent_name = 'gambit'
    _python_name = 'gambit'
    argument_names = ['file_name', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        cell_func_domain_export=cell_func_domain_export,
    )
    return_type = 'object'

class scope(String, AllowedValuesMixin):
    """
    'scope' child.
    """
    _version = '241'
    fluent_name = 'scope'
    _python_name = 'scope'
    return_type = 'object'

class cell_zones(StringList, AllowedValuesMixin):
    """
    Cell zone name list.
    """
    _version = '241'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'
    return_type = 'object'

class surfaces(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '241'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    return_type = 'object'

class format_class(String, AllowedValuesMixin):
    """
    'format_class' child.
    """
    _version = '241'
    fluent_name = 'format-class'
    _python_name = 'format_class'
    return_type = 'object'

class cgns_scalar(StringList, AllowedValuesMixin):
    """
    'cgns_scalar' child.
    """
    _version = '241'
    fluent_name = 'cgns-scalar'
    _python_name = 'cgns_scalar'
    return_type = 'object'

class cgns(Command):
    """
    Write a CGNS file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        scope : str
            'scope' child.
        cell_zones : List
            Cell zone name list.
        surfaces : List
            Surface.
        cell_centered : bool
            'cell_centered' child.
        format_class : str
            'format_class' child.
        cgns_scalar : List
            'cgns_scalar' child.
    """
    _version = '241'
    fluent_name = 'cgns'
    _python_name = 'cgns'
    argument_names = ['file_name', 'scope', 'cell_zones', 'surfaces', 'cell_centered', 'format_class', 'cgns_scalar']
    _child_classes = dict(
        file_name=file_name_1,
        scope=scope,
        cell_zones=cell_zones,
        surfaces=surfaces,
        cell_centered=cell_centered,
        format_class=format_class,
        cgns_scalar=cgns_scalar,
    )
    return_type = 'object'

class wall_function(Boolean):
    """
    'wall_function' child.
    """
    _version = '241'
    fluent_name = 'wall-function?'
    _python_name = 'wall_function'
    return_type = 'object'

class custom_heat_flux(Command):
    """
    Write a generic file for heat transfer.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        wall_function : bool
            'wall_function' child.
        surface_name_list : List
            Surface.
    """
    _version = '241'
    fluent_name = 'custom-heat-flux'
    _python_name = 'custom_heat_flux'
    argument_names = ['file_name', 'wall_function', 'surface_name_list']
    _child_classes = dict(
        file_name=file_name_1,
        wall_function=wall_function,
        surface_name_list=surface_name_list,
    )
    return_type = 'object'

class techplot_scalars(StringList, AllowedValuesMixin):
    """
    'techplot_scalars' child.
    """
    _version = '241'
    fluent_name = 'techplot-scalars'
    _python_name = 'techplot_scalars'
    return_type = 'object'

class dx(Command):
    """
    Write an IBM Data Explorer format file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        surfaces : List
            Surface.
        techplot_scalars : List
            'techplot_scalars' child.
    """
    _version = '241'
    fluent_name = 'dx'
    _python_name = 'dx'
    argument_names = ['file_name', 'surfaces', 'techplot_scalars']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces,
        techplot_scalars=techplot_scalars,
    )
    return_type = 'object'

class cell_function(StringList, AllowedValuesMixin):
    """
    'cell_function' child.
    """
    _version = '241'
    fluent_name = 'cell-function'
    _python_name = 'cell_function'
    return_type = 'object'

class ensight_gold_parallel_surfaces(Command):
    """
    Write EnSight Gold geometry, velocity and scalar files for surfaces. Fluent will write files suitable for EnSight Parallel.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        binary_format : bool
            'binary_format' child.
        surfaces : List
            Surface.
        cell_centered : bool
            'cell_centered' child.
        cell_function : List
            'cell_function' child.
    """
    _version = '241'
    fluent_name = 'ensight-gold-parallel-surfaces'
    _python_name = 'ensight_gold_parallel_surfaces'
    argument_names = ['file_name', 'binary_format', 'surfaces', 'cell_centered', 'cell_function']
    _child_classes = dict(
        file_name=file_name_1,
        binary_format=binary_format,
        surfaces=surfaces,
        cell_centered=cell_centered,
        cell_function=cell_function,
    )
    return_type = 'object'

class cellzones_1(StringList, AllowedValuesMixin):
    """
    Cell zone name list.
    """
    _version = '241'
    fluent_name = 'cellzones'
    _python_name = 'cellzones'
    return_type = 'object'

class ensight_gold_parallel_volume(Command):
    """
    Write EnSight Gold geometry, velocity and scalar files for cell zones and boundaries attached to them. Fluent will write files suitable for EnSight Parallel.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        binary_format : bool
            'binary_format' child.
        cellzones : List
            Cell zone name list.
        cell_centered : bool
            'cell_centered' child.
        cell_function : List
            'cell_function' child.
    """
    _version = '241'
    fluent_name = 'ensight-gold-parallel-volume'
    _python_name = 'ensight_gold_parallel_volume'
    argument_names = ['file_name', 'binary_format', 'cellzones', 'cell_centered', 'cell_function']
    _child_classes = dict(
        file_name=file_name_1,
        binary_format=binary_format,
        cellzones=cellzones_1,
        cell_centered=cell_centered,
        cell_function=cell_function,
    )
    return_type = 'object'

class icemcfd_for_icepak(Command):
    """
    Write a binary ICEMCFD domain file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'icemcfd-for-icepak'
    _python_name = 'icemcfd_for_icepak'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class fast_mesh(Command):
    """
    Write a FAST/Plot3D unstructured mesh file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'fast-mesh'
    _python_name = 'fast_mesh'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class fast_solution(Command):
    """
    Write a FAST/Plot3D unstructured solution file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'fast-solution'
    _python_name = 'fast_solution'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class fast_velocity(Command):
    """
    Write a FAST/Plot3D unstructured vector function file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'fast-velocity'
    _python_name = 'fast_velocity'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class htc_on_walls(Boolean):
    """
    'htc_on_walls' child.
    """
    _version = '241'
    fluent_name = 'htc-on-walls?'
    _python_name = 'htc_on_walls'
    return_type = 'object'

class taitherm(Command):
    """
    Write a TAITherm file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        surface_name_list : List
            Surface.
        wall_function : bool
            'wall_function' child.
        htc_on_walls : bool
            'htc_on_walls' child.
    """
    _version = '241'
    fluent_name = 'taitherm'
    _python_name = 'taitherm'
    argument_names = ['file_name', 'surface_name_list', 'wall_function', 'htc_on_walls']
    _child_classes = dict(
        file_name=file_name_1,
        surface_name_list=surface_name_list,
        wall_function=wall_function,
        htc_on_walls=htc_on_walls,
    )
    return_type = 'object'

class surfaces_1(StringList, AllowedValuesMixin):
    """
    List of surfaces to export.
    """
    _version = '241'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    return_type = 'object'

class fieldview_unstruct(Command):
    """
    Write a Fieldview unstructured combined file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        surfaces : List
            List of surfaces to export.
        cellzones : List
            List of cell zones to export.
        cell_func_domain : List
            'cell_func_domain' child.
    """
    _version = '241'
    fluent_name = 'fieldview-unstruct'
    _python_name = 'fieldview_unstruct'
    argument_names = ['file_name', 'surfaces', 'cellzones', 'cell_func_domain']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces_1,
        cellzones=cellzones,
        cell_func_domain=cell_func_domain,
    )
    return_type = 'object'

class fieldview_unstruct_mesh(Command):
    """
    Write a Fieldview unstructured mesh only file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        surfaces : List
            List of surfaces to export.
        cellzones : List
            List of cell zones to export.
        cell_func_domain : List
            'cell_func_domain' child.
    """
    _version = '241'
    fluent_name = 'fieldview-unstruct-mesh'
    _python_name = 'fieldview_unstruct_mesh'
    argument_names = ['file_name', 'surfaces', 'cellzones', 'cell_func_domain']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces_1,
        cellzones=cellzones,
        cell_func_domain=cell_func_domain,
    )
    return_type = 'object'

class fieldview_unstruct_data(Command):
    """
    Write a Fieldview unstructured results only file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        surfaces : List
            List of surfaces to export.
        cellzones : List
            List of cell zones to export.
        cell_func_domain : List
            'cell_func_domain' child.
    """
    _version = '241'
    fluent_name = 'fieldview-unstruct-data'
    _python_name = 'fieldview_unstruct_data'
    argument_names = ['file_name', 'surfaces', 'cellzones', 'cell_func_domain']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces_1,
        cellzones=cellzones,
        cell_func_domain=cell_func_domain,
    )
    return_type = 'object'

class option(String, AllowedValuesMixin):
    """
    'option' child.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class fieldview_unstruct_surfaces(Command):
    """
    Write a Fieldview unstructured surface mesh, data.
    
    Parameters
    ----------
        option : str
            'option' child.
        file_name : str
            'file_name' child.
        surfaces : List
            Surface.
        cell_func_domain : List
            'cell_func_domain' child.
    """
    _version = '241'
    fluent_name = 'fieldview-unstruct-surfaces'
    _python_name = 'fieldview_unstruct_surfaces'
    argument_names = ['option', 'file_name', 'surfaces', 'cell_func_domain']
    _child_classes = dict(
        option=option,
        file_name=file_name_1,
        surfaces=surfaces,
        cell_func_domain=cell_func_domain,
    )
    return_type = 'object'

class ideas(Command):
    """
    Write an IDEAS universal file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        surfaces : List
            List of surfaces to export.
        structural_analysis : bool
            'structural_analysis' child.
        write_loads : bool
            'write_loads' child.
        loads : List
            'loads' child.
        cell_func_domain_export : List
            'cell_func_domain_export' child.
    """
    _version = '241'
    fluent_name = 'ideas'
    _python_name = 'ideas'
    argument_names = ['file_name', 'surfaces', 'structural_analysis', 'write_loads', 'loads', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces_1,
        structural_analysis=structural_analysis,
        write_loads=write_loads,
        loads=loads,
        cell_func_domain_export=cell_func_domain_export,
    )
    return_type = 'object'

class bndry_threads(StringList, AllowedValuesMixin):
    """
    Boundary zone name list.
    """
    _version = '241'
    fluent_name = 'bndry-threads'
    _python_name = 'bndry_threads'
    return_type = 'object'

class nastran(Command):
    """
    Write a NASTRAN file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        bndry_threads : List
            Boundary zone name list.
        surfaces : List
            Surface.
        structural_analysis : bool
            'structural_analysis' child.
        write_loads : bool
            'write_loads' child.
        loads : List
            'loads' child.
        cell_func_domain_export : List
            'cell_func_domain_export' child.
    """
    _version = '241'
    fluent_name = 'nastran'
    _python_name = 'nastran'
    argument_names = ['file_name', 'bndry_threads', 'surfaces', 'structural_analysis', 'write_loads', 'loads', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        bndry_threads=bndry_threads,
        surfaces=surfaces,
        structural_analysis=structural_analysis,
        write_loads=write_loads,
        loads=loads,
        cell_func_domain_export=cell_func_domain_export,
    )
    return_type = 'object'

class patran_neutral(Command):
    """
    Write a PATRAN neutral file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        surfaces : List
            Surface.
        structural_analysis : bool
            'structural_analysis' child.
        write_loads : bool
            'write_loads' child.
        loads : List
            'loads' child.
        cell_func_domain_export : List
            'cell_func_domain_export' child.
    """
    _version = '241'
    fluent_name = 'patran-neutral'
    _python_name = 'patran_neutral'
    argument_names = ['file_name', 'surfaces', 'structural_analysis', 'write_loads', 'loads', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces,
        structural_analysis=structural_analysis,
        write_loads=write_loads,
        loads=loads,
        cell_func_domain_export=cell_func_domain_export,
    )
    return_type = 'object'

class surfaces_2(StringList):
    """
    'surfaces' child.
    """
    _version = '241'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    return_type = 'object'

class patran_nodal(Command):
    """
    Write a PATRAN nodal results file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        surfaces : List
            'surfaces' child.
        cell_func_domain_export : List
            'cell_func_domain_export' child.
    """
    _version = '241'
    fluent_name = 'patran-nodal'
    _python_name = 'patran_nodal'
    argument_names = ['file_name', 'surfaces', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces_2,
        cell_func_domain_export=cell_func_domain_export,
    )
    return_type = 'object'

class tecplot(Command):
    """
    Write a Tecplot+3DV format file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        surfaces : List
            Surface.
        cell_func_domain_export : List
            'cell_func_domain_export' child.
    """
    _version = '241'
    fluent_name = 'tecplot'
    _python_name = 'tecplot'
    argument_names = ['file_name', 'surfaces', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces,
        cell_func_domain_export=cell_func_domain_export,
    )
    return_type = 'object'

class export(Group):
    """
    The export object.
    """
    _version = '241'
    fluent_name = 'export'
    _python_name = 'export'
    child_names = ['sc_def_file_settings', 'settings']
    command_names = ['abaqus', 'mechanical_apdl', 'mechanical_apdl_input', 'ascii', 'avs', 'ensight', 'ensight_gold', 'fieldview', 'fieldview_data', 'gambit', 'cgns', 'custom_heat_flux', 'dx', 'ensight_gold_parallel_surfaces', 'ensight_gold_parallel_volume', 'icemcfd_for_icepak', 'fast_mesh', 'fast_solution', 'fast_velocity', 'taitherm', 'fieldview_unstruct', 'fieldview_unstruct_mesh', 'fieldview_unstruct_data', 'fieldview_unstruct_surfaces', 'ideas', 'nastran', 'patran_neutral', 'patran_nodal', 'tecplot']
    _child_classes = dict(
        sc_def_file_settings=sc_def_file_settings,
        settings=settings,
        abaqus=abaqus,
        mechanical_apdl=mechanical_apdl,
        mechanical_apdl_input=mechanical_apdl_input,
        ascii=ascii,
        avs=avs,
        ensight=ensight,
        ensight_gold=ensight_gold,
        fieldview=fieldview,
        fieldview_data=fieldview_data,
        gambit=gambit,
        cgns=cgns,
        custom_heat_flux=custom_heat_flux,
        dx=dx,
        ensight_gold_parallel_surfaces=ensight_gold_parallel_surfaces,
        ensight_gold_parallel_volume=ensight_gold_parallel_volume,
        icemcfd_for_icepak=icemcfd_for_icepak,
        fast_mesh=fast_mesh,
        fast_solution=fast_solution,
        fast_velocity=fast_velocity,
        taitherm=taitherm,
        fieldview_unstruct=fieldview_unstruct,
        fieldview_unstruct_mesh=fieldview_unstruct_mesh,
        fieldview_unstruct_data=fieldview_unstruct_data,
        fieldview_unstruct_surfaces=fieldview_unstruct_surfaces,
        ideas=ideas,
        nastran=nastran,
        patran_neutral=patran_neutral,
        patran_nodal=patran_nodal,
        tecplot=tecplot,
    )
    return_type = 'object'

class create_zones_from_ccl(Boolean):
    """
    'create_zones_from_ccl' child.
    """
    _version = '241'
    fluent_name = 'create-zones-from-ccl?'
    _python_name = 'create_zones_from_ccl'
    return_type = 'object'

class file_type(String, AllowedValuesMixin):
    """
    'file_type' child.
    """
    _version = '241'
    fluent_name = 'file-type'
    _python_name = 'file_type'
    return_type = 'object'

class read_1(Command):
    """
    'read' command.
    """
    _version = '241'
    fluent_name = 'read'
    _python_name = 'read'
    argument_names = ['file_type', 'file_name']
    _child_classes = dict(
        file_type=file_type,
        file_name=file_name_1,
    )
    return_type = 'object'

class report_each_line(Boolean):
    """
    Enable/disable reporting after reading each line.
    """
    _version = '241'
    fluent_name = 'report-each-line?'
    _python_name = 'report_each_line'
    return_type = 'object'

class chemkin_report_each_line(Command):
    """
    'chemkin_report_each_line' command.
    """
    _version = '241'
    fluent_name = 'chemkin-report-each-line?'
    _python_name = 'chemkin_report_each_line'
    argument_names = ['report_each_line']
    _child_classes = dict(
        report_each_line=report_each_line,
    )
    return_type = 'object'

class import_fmu(Command):
    """
    Import a FMU file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'import-fmu'
    _python_name = 'import_fmu'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class import_(Group):
    """
    'import' child.
    """
    _version = '241'
    fluent_name = 'import'
    _python_name = 'import_'
    child_names = ['create_zones_from_ccl']
    command_names = ['read', 'chemkin_report_each_line', 'import_fmu']
    _child_classes = dict(
        create_zones_from_ccl=create_zones_from_ccl,
        read=read_1,
        chemkin_report_each_line=chemkin_report_each_line,
        import_fmu=import_fmu,
    )
    return_type = 'object'

class project_filename(Filename):
    """
    'project_filename' child.
    """
    _version = '241'
    fluent_name = 'project-filename'
    _python_name = 'project_filename'
    return_type = 'object'

class new(Command):
    """
    Create New Project.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
    """
    _version = '241'
    fluent_name = 'new'
    _python_name = 'new'
    argument_names = ['project_filename']
    _child_classes = dict(
        project_filename=project_filename,
    )
    return_type = 'object'

class load_case(Boolean):
    """
    'load_case' child.
    """
    _version = '241'
    fluent_name = 'load-case'
    _python_name = 'load_case'
    return_type = 'object'

class open(Command):
    """
    Open project.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
        load_case : bool
            'load_case' child.
    """
    _version = '241'
    fluent_name = 'open'
    _python_name = 'open'
    argument_names = ['project_filename', 'load_case']
    _child_classes = dict(
        project_filename=project_filename,
        load_case=load_case,
    )
    return_type = 'object'

class save(Command):
    """
    Save Project.
    """
    _version = '241'
    fluent_name = 'save'
    _python_name = 'save'
    return_type = 'object'

class save_as(Command):
    """
    Save As Project.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
    """
    _version = '241'
    fluent_name = 'save-as'
    _python_name = 'save_as'
    argument_names = ['project_filename']
    _child_classes = dict(
        project_filename=project_filename,
    )
    return_type = 'object'

class convert_to_managed(Boolean):
    """
    'convert_to_managed' child.
    """
    _version = '241'
    fluent_name = 'convert-to-managed'
    _python_name = 'convert_to_managed'
    return_type = 'object'

class save_as_copy(Command):
    """
    Save As Project.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
        convert_to_managed : bool
            'convert_to_managed' child.
    """
    _version = '241'
    fluent_name = 'save-as-copy'
    _python_name = 'save_as_copy'
    argument_names = ['project_filename', 'convert_to_managed']
    _child_classes = dict(
        project_filename=project_filename,
        convert_to_managed=convert_to_managed,
    )
    return_type = 'object'

class archive_name(Filename):
    """
    'archive_name' child.
    """
    _version = '241'
    fluent_name = 'archive-name'
    _python_name = 'archive_name'
    return_type = 'object'

class archive(Command):
    """
    Archive Project.
    
    Parameters
    ----------
        archive_name : str
            'archive_name' child.
    """
    _version = '241'
    fluent_name = 'archive'
    _python_name = 'archive'
    argument_names = ['archive_name']
    _child_classes = dict(
        archive_name=archive_name,
    )
    return_type = 'object'

class parametric_project(Group):
    """
    'parametric_project' child.
    """
    _version = '241'
    fluent_name = 'parametric-project'
    _python_name = 'parametric_project'
    command_names = ['new', 'open', 'save', 'save_as', 'save_as_copy', 'archive']
    _child_classes = dict(
        new=new,
        open=open,
        save=save,
        save_as=save_as,
        save_as_copy=save_as_copy,
        archive=archive,
    )
    return_type = 'object'

class io_mode(String, AllowedValuesMixin):
    """
    CFF I/O mode.
    """
    _version = '241'
    fluent_name = 'io-mode'
    _python_name = 'io_mode'
    return_type = 'object'

class compression_level(Integer):
    """
    0 => no compression, 1 => best compression speed; least compression, 9 => best compression ratio, slowetst speed.
    """
    _version = '241'
    fluent_name = 'compression-level'
    _python_name = 'compression_level'
    return_type = 'object'

class single_precision_data(Boolean):
    """
    Specifies whether the double-precision solver saves single-precision data when writing CFF data files.
    """
    _version = '241'
    fluent_name = 'single-precision-data?'
    _python_name = 'single_precision_data'
    return_type = 'object'

class cffio_options(Group):
    """
    CFF I/O options.
    """
    _version = '241'
    fluent_name = 'cffio-options'
    _python_name = 'cffio_options'
    child_names = ['io_mode', 'compression_level', 'single_precision_data']
    _child_classes = dict(
        io_mode=io_mode,
        compression_level=compression_level,
        single_precision_data=single_precision_data,
    )
    return_type = 'object'

class confirm_overwrite(Boolean):
    """
    Specifies whether to confirm attempts to overwrite existing files.
    """
    _version = '241'
    fluent_name = 'confirm-overwrite?'
    _python_name = 'confirm_overwrite'
    return_type = 'object'

class exit_on_error(Boolean):
    """
    Specifies whether to exit the when error occurs.
    """
    _version = '241'
    fluent_name = 'exit-on-error?'
    _python_name = 'exit_on_error'
    return_type = 'object'

class hide_answer(Boolean):
    """
    'hide_answer' child.
    """
    _version = '241'
    fluent_name = 'hide-answer?'
    _python_name = 'hide_answer'
    return_type = 'object'

class redisplay_question(Boolean):
    """
    'redisplay_question' child.
    """
    _version = '241'
    fluent_name = 'redisplay-question?'
    _python_name = 'redisplay_question'
    return_type = 'object'

class batch_options(Group):
    """
    The batch options.
    """
    _version = '241'
    fluent_name = 'batch-options'
    _python_name = 'batch_options'
    child_names = ['confirm_overwrite', 'exit_on_error', 'hide_answer', 'redisplay_question']
    _child_classes = dict(
        confirm_overwrite=confirm_overwrite,
        exit_on_error=exit_on_error,
        hide_answer=hide_answer,
        redisplay_question=redisplay_question,
    )
    return_type = 'object'

class define_macro(Command):
    """
    Save input to a named macro.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'define-macro'
    _python_name = 'define_macro'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class macro_filename(Filename):
    """
    'macro_filename' child.
    """
    _version = '241'
    fluent_name = 'macro-filename'
    _python_name = 'macro_filename'
    return_type = 'object'

class execute_macro(Command):
    """
    Run a previously defined macro.
    
    Parameters
    ----------
        macro_filename : str
            'macro_filename' child.
    """
    _version = '241'
    fluent_name = 'execute-macro'
    _python_name = 'execute_macro'
    argument_names = ['macro_filename']
    _child_classes = dict(
        macro_filename=macro_filename,
    )
    return_type = 'object'

class read_macros(Command):
    """
    Read macro definitions from a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'read-macros'
    _python_name = 'read_macros'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class pdf_file_name(Filename):
    """
    'pdf_file_name' child.
    """
    _version = '241'
    fluent_name = 'pdf-file-name'
    _python_name = 'pdf_file_name'
    return_type = 'object'

class lightweight_setup(Boolean):
    """
    'lightweight_setup' child.
    """
    _version = '241'
    fluent_name = 'lightweight-setup?'
    _python_name = 'lightweight_setup'
    return_type = 'object'

class read(Command):
    """
    'read' command.
    """
    _version = '241'
    fluent_name = 'read'
    _python_name = 'read'
    argument_names = ['file_type', 'file_name', 'pdf_file_name', 'lightweight_setup']
    _child_classes = dict(
        file_type=file_type,
        file_name=file_name_1,
        pdf_file_name=pdf_file_name,
        lightweight_setup=lightweight_setup,
    )
    return_type = 'object'

class read_case(Command):
    """
    'read_case' command.
    """
    _version = '241'
    fluent_name = 'read-case'
    _python_name = 'read_case'
    argument_names = ['file_name', 'pdf_file_name']
    _child_classes = dict(
        file_name=file_name_1,
        pdf_file_name=pdf_file_name,
    )
    return_type = 'object'

class read_case_data(Command):
    """
    'read_case_data' command.
    """
    _version = '241'
    fluent_name = 'read-case-data'
    _python_name = 'read_case_data'
    argument_names = ['file_name', 'pdf_file_name']
    _child_classes = dict(
        file_name=file_name_1,
        pdf_file_name=pdf_file_name,
    )
    return_type = 'object'

class read_case_setting(Command):
    """
    'read_case_setting' command.
    """
    _version = '241'
    fluent_name = 'read-case-setting'
    _python_name = 'read_case_setting'
    argument_names = ['file_name', 'pdf_file_name']
    _child_classes = dict(
        file_name=file_name_1,
        pdf_file_name=pdf_file_name,
    )
    return_type = 'object'

class read_data(Command):
    """
    'read_data' command.
    """
    _version = '241'
    fluent_name = 'read-data'
    _python_name = 'read_data'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class read_mesh(Command):
    """
    'read_mesh' command.
    """
    _version = '241'
    fluent_name = 'read-mesh'
    _python_name = 'read_mesh'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class filename(Filename):
    """
    Path to surface mesh file.
    """
    _version = '241'
    fluent_name = 'filename'
    _python_name = 'filename'
    return_type = 'object'

class unit(String, AllowedValuesMixin):
    """
    Unit in which the mesh was created.
    """
    _version = '241'
    fluent_name = 'unit'
    _python_name = 'unit'
    return_type = 'object'

class read_surface_mesh(Command):
    """
    Read surface meshes.
    
    Parameters
    ----------
        filename : str
            Path to surface mesh file.
        unit : str
            Unit in which the mesh was created.
    """
    _version = '241'
    fluent_name = 'read-surface-mesh'
    _python_name = 'read_surface_mesh'
    argument_names = ['filename', 'unit']
    _child_classes = dict(
        filename=filename,
        unit=unit,
    )
    return_type = 'object'

class file_name_list(FilenameList):
    """
    'file_name_list' child.
    """
    _version = '241'
    fluent_name = 'file-name-list'
    _python_name = 'file_name_list'
    return_type = 'object'

class read_journal(Command):
    """
    Read a journal file.
    
    Parameters
    ----------
        file_name_list : List
            'file_name_list' child.
    """
    _version = '241'
    fluent_name = 'read-journal'
    _python_name = 'read_journal'
    argument_names = ['file_name_list']
    _child_classes = dict(
        file_name_list=file_name_list,
    )
    return_type = 'object'

class start_journal(Command):
    """
    Start recording all input in a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'start-journal'
    _python_name = 'start_journal'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class stop_journal(Command):
    """
    Stop recording input and close the journal file.
    """
    _version = '241'
    fluent_name = 'stop-journal'
    _python_name = 'stop_journal'
    return_type = 'object'

class replace_mesh(Command):
    """
    'replace_mesh' command.
    """
    _version = '241'
    fluent_name = 'replace-mesh'
    _python_name = 'replace_mesh'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class write(Command):
    """
    'write' command.
    """
    _version = '241'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['file_type', 'file_name']
    _child_classes = dict(
        file_type=file_type,
        file_name=file_name_1,
    )
    return_type = 'object'

class write_case(Command):
    """
    'write_case' command.
    """
    _version = '241'
    fluent_name = 'write-case'
    _python_name = 'write_case'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class write_data(Command):
    """
    'write_data' command.
    """
    _version = '241'
    fluent_name = 'write-data'
    _python_name = 'write_data'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class write_case_data(Command):
    """
    'write_case_data' command.
    """
    _version = '241'
    fluent_name = 'write-case-data'
    _python_name = 'write_case_data'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class read_settings(Command):
    """
    Read and set boundary conditions from specified file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'read-settings'
    _python_name = 'read_settings'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class read_field_functions(Command):
    """
    Read custom field-function definitions from a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'read-field-functions'
    _python_name = 'read_field_functions'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class read_injections(Command):
    """
    Read all DPM injections from a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'read-injections'
    _python_name = 'read_injections'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class read_profile(Command):
    """
    Read boundary profile data (\\*.prof, \\*.csv). Default is \\*.prof.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'read-profile'
    _python_name = 'read_profile'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class read_pdf(Command):
    """
    Read a PDF file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'read-pdf'
    _python_name = 'read_pdf'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class read_isat_table(Command):
    """
    Read an ISAT table.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'read-isat-table'
    _python_name = 'read_isat_table'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class show_configuration(Command):
    """
    Display current release and version information.
    """
    _version = '241'
    fluent_name = 'show-configuration'
    _python_name = 'show_configuration'
    return_type = 'object'

class stop_macro(Command):
    """
    Stop recording input to a macro.
    """
    _version = '241'
    fluent_name = 'stop-macro'
    _python_name = 'stop_macro'
    return_type = 'object'

class start_transcript(Command):
    """
    Start recording input and output in a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'start-transcript'
    _python_name = 'start_transcript'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class stop_transcript(Command):
    """
    Stop recording input and output and close the transcript file.
    """
    _version = '241'
    fluent_name = 'stop-transcript'
    _python_name = 'stop_transcript'
    return_type = 'object'

class reset_defined_derived_quantities(Boolean):
    """
    'reset_defined_derived_quantities' child.
    """
    _version = '241'
    fluent_name = 'reset-defined-derived-quantities?'
    _python_name = 'reset_defined_derived_quantities'
    return_type = 'object'

class derived_quantities(StringList, AllowedValuesMixin):
    """
    'derived_quantities' child.
    """
    _version = '241'
    fluent_name = 'derived-quantities'
    _python_name = 'derived_quantities'
    return_type = 'object'

class data_file_options(Command):
    """
    Set derived quantities to be written in data file.
    
    Parameters
    ----------
        reset_defined_derived_quantities : bool
            'reset_defined_derived_quantities' child.
        derived_quantities : List
            'derived_quantities' child.
    """
    _version = '241'
    fluent_name = 'data-file-options'
    _python_name = 'data_file_options'
    argument_names = ['reset_defined_derived_quantities', 'derived_quantities']
    _child_classes = dict(
        reset_defined_derived_quantities=reset_defined_derived_quantities,
        derived_quantities=derived_quantities,
    )
    return_type = 'object'

class file(Group):
    """
    'file' child.
    """
    _version = '241'
    fluent_name = 'file'
    _python_name = 'file'
    child_names = ['single_precision_coordinates', 'binary_legacy_files', 'cff_files', 'convert_hanging_nodes_during_read', 'async_optimize', 'write_pdat', 'auto_save', 'export', 'import_', 'parametric_project', 'cffio_options', 'batch_options']
    command_names = ['define_macro', 'execute_macro', 'read_macros', 'read', 'read_case', 'read_case_data', 'read_case_setting', 'read_data', 'read_mesh', 'read_surface_mesh', 'read_journal', 'start_journal', 'stop_journal', 'replace_mesh', 'write', 'write_case', 'write_data', 'write_case_data', 'read_settings', 'read_field_functions', 'read_injections', 'read_profile', 'read_pdf', 'read_isat_table', 'show_configuration', 'stop_macro', 'start_transcript', 'stop_transcript', 'data_file_options']
    _child_classes = dict(
        single_precision_coordinates=single_precision_coordinates,
        binary_legacy_files=binary_legacy_files,
        cff_files=cff_files,
        convert_hanging_nodes_during_read=convert_hanging_nodes_during_read,
        async_optimize=async_optimize,
        write_pdat=write_pdat,
        auto_save=auto_save,
        export=export,
        import_=import_,
        parametric_project=parametric_project,
        cffio_options=cffio_options,
        batch_options=batch_options,
        define_macro=define_macro,
        execute_macro=execute_macro,
        read_macros=read_macros,
        read=read,
        read_case=read_case,
        read_case_data=read_case_data,
        read_case_setting=read_case_setting,
        read_data=read_data,
        read_mesh=read_mesh,
        read_surface_mesh=read_surface_mesh,
        read_journal=read_journal,
        start_journal=start_journal,
        stop_journal=stop_journal,
        replace_mesh=replace_mesh,
        write=write,
        write_case=write_case,
        write_data=write_data,
        write_case_data=write_case_data,
        read_settings=read_settings,
        read_field_functions=read_field_functions,
        read_injections=read_injections,
        read_profile=read_profile,
        read_pdf=read_pdf,
        read_isat_table=read_isat_table,
        show_configuration=show_configuration,
        stop_macro=stop_macro,
        start_transcript=start_transcript,
        stop_transcript=stop_transcript,
        data_file_options=data_file_options,
    )
    return_type = 'object'

class refinement_criteria(String):
    """
    Expression for refinement criterion.
    """
    _version = '241'
    fluent_name = 'refinement-criteria'
    _python_name = 'refinement_criteria'
    return_type = 'object'

class coarsening_criteria(String):
    """
    Expression for coarsening criterion.
    """
    _version = '241'
    fluent_name = 'coarsening-criteria'
    _python_name = 'coarsening_criteria'
    return_type = 'object'

class manual_refinement_criteria(String):
    """
    Expression for manual refinement criterion.
    """
    _version = '241'
    fluent_name = 'manual-refinement-criteria'
    _python_name = 'manual_refinement_criteria'
    return_type = 'object'

class manual_coarsening_criteria(String):
    """
    Expression for manual coarsening criterion.
    """
    _version = '241'
    fluent_name = 'manual-coarsening-criteria'
    _python_name = 'manual_coarsening_criteria'
    return_type = 'object'

class adaption_method(String, AllowedValuesMixin):
    """
    The adaption method.
    """
    _version = '241'
    fluent_name = 'adaption-method'
    _python_name = 'adaption_method'
    return_type = 'object'

class prismatic_boundary_zones(StringList, AllowedValuesMixin):
    """
    The boundary zones to specify directions for prismatic refinement.
    """
    _version = '241'
    fluent_name = 'prismatic-boundary-zones'
    _python_name = 'prismatic_boundary_zones'
    return_type = 'object'

class cell_zones_1(StringList, AllowedValuesMixin):
    """
    Cell zones to be used for marking adaption. An empty list implies that all zones are considered for adaption.
    """
    _version = '241'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'
    return_type = 'object'

class dynamic_adaption_frequency(Integer):
    """
    Frequency for dynamic adaption.
    """
    _version = '241'
    fluent_name = 'dynamic-adaption-frequency'
    _python_name = 'dynamic_adaption_frequency'
    return_type = 'object'

class verbosity(Integer):
    """
    The adaption verbosity.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class encapsulate_children(Boolean):
    """
    Encapsulate all children of parent cells on the same partition.
    """
    _version = '241'
    fluent_name = 'encapsulate-children?'
    _python_name = 'encapsulate_children'
    return_type = 'object'

class maximum_refinement_level(Integer):
    """
    Maximum level of refinement in the mesh.
    """
    _version = '241'
    fluent_name = 'maximum-refinement-level'
    _python_name = 'maximum_refinement_level'
    return_type = 'object'

class minimum_edge_length(Real):
    """
    Limit on the minimum effective edge-length of cells in the mesh.
    """
    _version = '241'
    fluent_name = 'minimum-edge-length'
    _python_name = 'minimum_edge_length'
    return_type = 'object'

class minimum_cell_quality(Real):
    """
    Limit on the minimum cell orthogonal quality during adaption.
    """
    _version = '241'
    fluent_name = 'minimum-cell-quality'
    _python_name = 'minimum_cell_quality'
    return_type = 'object'

class maximum_cell_count(Integer):
    """
    Limit on the maximum number of cells during adaption.
    """
    _version = '241'
    fluent_name = 'maximum-cell-count'
    _python_name = 'maximum_cell_count'
    return_type = 'object'

class additional_refinement_layers(Integer):
    """
    The number of additional cell layers for refinement.
    """
    _version = '241'
    fluent_name = 'additional-refinement-layers'
    _python_name = 'additional_refinement_layers'
    return_type = 'object'

class prismatic_adaption(Boolean):
    """
    Enable/Disable anisotropic adaption for prismatic cells.
    """
    _version = '241'
    fluent_name = 'prismatic-adaption?'
    _python_name = 'prismatic_adaption'
    return_type = 'object'

class prismatic_split_ratio(Real):
    """
    The split ratio for anisotropic refinement of prismatic cells.
    """
    _version = '241'
    fluent_name = 'prismatic-split-ratio'
    _python_name = 'prismatic_split_ratio'
    return_type = 'object'

class overset_adapt_dead_cells(Boolean):
    """
    Enables adaption of dead cells in overset meshes.
    """
    _version = '241'
    fluent_name = 'overset-adapt-dead-cells?'
    _python_name = 'overset_adapt_dead_cells'
    return_type = 'object'

class enable(Boolean):
    """
    'enable' child.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class dynamic_adaption(Command):
    """
    Adapt the mesh during solution.
    
    Parameters
    ----------
        enable : bool
            'enable' child.
    """
    _version = '241'
    fluent_name = 'dynamic-adaption?'
    _python_name = 'dynamic_adaption'
    argument_names = ['enable']
    _child_classes = dict(
        enable=enable,
    )
    return_type = 'object'

class set(Group):
    """
    The adaption set object.
    """
    _version = '241'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['adaption_method', 'prismatic_boundary_zones', 'cell_zones', 'dynamic_adaption_frequency', 'verbosity', 'encapsulate_children', 'maximum_refinement_level', 'minimum_edge_length', 'minimum_cell_quality', 'maximum_cell_count', 'additional_refinement_layers', 'prismatic_adaption', 'prismatic_split_ratio', 'overset_adapt_dead_cells']
    command_names = ['dynamic_adaption']
    _child_classes = dict(
        adaption_method=adaption_method,
        prismatic_boundary_zones=prismatic_boundary_zones,
        cell_zones=cell_zones_1,
        dynamic_adaption_frequency=dynamic_adaption_frequency,
        verbosity=verbosity,
        encapsulate_children=encapsulate_children,
        maximum_refinement_level=maximum_refinement_level,
        minimum_edge_length=minimum_edge_length,
        minimum_cell_quality=minimum_cell_quality,
        maximum_cell_count=maximum_cell_count,
        additional_refinement_layers=additional_refinement_layers,
        prismatic_adaption=prismatic_adaption,
        prismatic_split_ratio=prismatic_split_ratio,
        overset_adapt_dead_cells=overset_adapt_dead_cells,
        dynamic_adaption=dynamic_adaption,
    )
    return_type = 'object'

class enable_1(Command):
    """
    Enable adaption profiling.
    """
    _version = '241'
    fluent_name = 'enable'
    _python_name = 'enable'
    return_type = 'object'

class disable(Command):
    """
    Disable adaption profiling.
    """
    _version = '241'
    fluent_name = 'disable'
    _python_name = 'disable'
    return_type = 'object'

class print(Command):
    """
    Print adaption profiling results.
    """
    _version = '241'
    fluent_name = 'print'
    _python_name = 'print'
    return_type = 'object'

class clear(Command):
    """
    Clear adaption profiling counters.
    """
    _version = '241'
    fluent_name = 'clear'
    _python_name = 'clear'
    return_type = 'object'

class profile(Group):
    """
    The adaption profile object.
    """
    _version = '241'
    fluent_name = 'profile'
    _python_name = 'profile'
    command_names = ['enable', 'disable', 'print', 'clear']
    _child_classes = dict(
        enable=enable_1,
        disable=disable,
        print=print,
        clear=clear,
    )
    return_type = 'object'

class free_hierarchy(Boolean):
    """
    Delete the adaption hierarchy.
    """
    _version = '241'
    fluent_name = 'free-hierarchy'
    _python_name = 'free_hierarchy'
    return_type = 'object'

class growth_ratio(Real):
    """
    Growth Ratio.
    """
    _version = '241'
    fluent_name = 'growth-ratio'
    _python_name = 'growth_ratio'
    return_type = 'object'

class growth_ratio_refinement(Group):
    """
    'growth_ratio_refinement' child.
    """
    _version = '241'
    fluent_name = 'growth-ratio-refinement'
    _python_name = 'growth_ratio_refinement'
    child_names = ['growth_ratio']
    _child_classes = dict(
        growth_ratio=growth_ratio,
    )
    return_type = 'object'

class type(Group):
    """
    'type' child.
    """
    _version = '241'
    fluent_name = 'type'
    _python_name = 'type'
    child_names = ['option', 'growth_ratio_refinement']
    _child_classes = dict(
        option=option,
        growth_ratio_refinement=growth_ratio_refinement,
    )
    return_type = 'object'

class layer_count(Integer):
    """
    Layer Count.
    """
    _version = '241'
    fluent_name = 'layer-count'
    _python_name = 'layer_count'
    return_type = 'object'

class boundary_list(StringList, AllowedValuesMixin):
    """
    'boundary_list' child.
    """
    _version = '241'
    fluent_name = 'boundary-list'
    _python_name = 'boundary_list'
    return_type = 'object'

class refine_mesh(Command):
    """
    Refine the mesh for multiple boundary layers.
    """
    _version = '241'
    fluent_name = 'refine-mesh'
    _python_name = 'refine_mesh'
    return_type = 'object'

class multi_layer_refinement(Group):
    """
    The multiple boundary layer refinement object.
    """
    _version = '241'
    fluent_name = 'multi-layer-refinement'
    _python_name = 'multi_layer_refinement'
    child_names = ['type', 'layer_count', 'boundary_list']
    command_names = ['refine_mesh']
    _child_classes = dict(
        type=type,
        layer_count=layer_count,
        boundary_list=boundary_list,
        refine_mesh=refine_mesh,
    )
    return_type = 'object'

class reconstruct_geometry(Boolean):
    """
    Enable/Disable geometry based adaption.
    """
    _version = '241'
    fluent_name = 'reconstruct-geometry'
    _python_name = 'reconstruct_geometry'
    return_type = 'object'

class geometry(Group):
    """
    The adaption geometry object.
    """
    _version = '241'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    child_names = ['reconstruct_geometry']
    _child_classes = dict(
        reconstruct_geometry=reconstruct_geometry,
    )
    return_type = 'object'

class adapt_mesh(Command):
    """
    Adapt the mesh based on set refinement/coarsening criterion.
    """
    _version = '241'
    fluent_name = 'adapt-mesh'
    _python_name = 'adapt_mesh'
    return_type = 'object'

class display_adaption_cells(Command):
    """
    Display cells marked for refinement/coarsening.
    """
    _version = '241'
    fluent_name = 'display-adaption-cells'
    _python_name = 'display_adaption_cells'
    return_type = 'object'

class list_adaption_cells(Command):
    """
    List the number of cells marked for refinement/coarsening.
    """
    _version = '241'
    fluent_name = 'list-adaption-cells'
    _python_name = 'list_adaption_cells'
    return_type = 'object'

class adapt(Group):
    """
    The adaption object.
    """
    _version = '241'
    fluent_name = 'adapt'
    _python_name = 'adapt'
    child_names = ['refinement_criteria', 'coarsening_criteria', 'manual_refinement_criteria', 'manual_coarsening_criteria', 'set', 'profile', 'free_hierarchy', 'multi_layer_refinement', 'geometry']
    command_names = ['adapt_mesh', 'display_adaption_cells', 'list_adaption_cells']
    _child_classes = dict(
        refinement_criteria=refinement_criteria,
        coarsening_criteria=coarsening_criteria,
        manual_refinement_criteria=manual_refinement_criteria,
        manual_coarsening_criteria=manual_coarsening_criteria,
        set=set,
        profile=profile,
        free_hierarchy=free_hierarchy,
        multi_layer_refinement=multi_layer_refinement,
        geometry=geometry,
        adapt_mesh=adapt_mesh,
        display_adaption_cells=display_adaption_cells,
        list_adaption_cells=list_adaption_cells,
    )
    return_type = 'object'

class coarsen(Boolean):
    """
    Enable coarsen operations.
    """
    _version = '241'
    fluent_name = 'coarsen?'
    _python_name = 'coarsen'
    return_type = 'object'

class refine(Boolean):
    """
    Enable refine operations.
    """
    _version = '241'
    fluent_name = 'refine?'
    _python_name = 'refine'
    return_type = 'object'

class swap(Boolean):
    """
    Enable swap operations.
    """
    _version = '241'
    fluent_name = 'swap?'
    _python_name = 'swap'
    return_type = 'object'

class move(Boolean):
    """
    Enable move operations.
    """
    _version = '241'
    fluent_name = 'move?'
    _python_name = 'move'
    return_type = 'object'

class operations(Group):
    """
    The anisotropic adaption operations object.
    """
    _version = '241'
    fluent_name = 'operations'
    _python_name = 'operations'
    child_names = ['coarsen', 'refine', 'swap', 'move']
    _child_classes = dict(
        coarsen=coarsen,
        refine=refine,
        swap=swap,
        move=move,
    )
    return_type = 'object'

class iterations(Integer):
    """
    The number of adaption iterations.
    """
    _version = '241'
    fluent_name = 'iterations'
    _python_name = 'iterations'
    return_type = 'object'

class fixed_zones(StringList, AllowedValuesMixin):
    """
    The boundary zones to remain fixed during anisotropic adaption.
    """
    _version = '241'
    fluent_name = 'fixed-zones'
    _python_name = 'fixed_zones'
    return_type = 'object'

class indicator_type(String, AllowedValuesMixin):
    """
    'indicator_type' child.
    """
    _version = '241'
    fluent_name = 'indicator-type'
    _python_name = 'indicator_type'
    return_type = 'object'

class single_scalar_fn(String, AllowedValuesMixin):
    """
    'single_scalar_fn' child.
    """
    _version = '241'
    fluent_name = 'single-scalar-fn'
    _python_name = 'single_scalar_fn'
    return_type = 'object'

class multi_scalar_fn(StringList, AllowedValuesMixin):
    """
    'multi_scalar_fn' child.
    """
    _version = '241'
    fluent_name = 'multi-scalar-fn'
    _python_name = 'multi_scalar_fn'
    return_type = 'object'

class indicator(Group):
    """
    The indicator type and variable(s) for anisotropic adaption.
    """
    _version = '241'
    fluent_name = 'indicator'
    _python_name = 'indicator'
    child_names = ['indicator_type', 'single_scalar_fn', 'multi_scalar_fn']
    _child_classes = dict(
        indicator_type=indicator_type,
        single_scalar_fn=single_scalar_fn,
        multi_scalar_fn=multi_scalar_fn,
    )
    return_type = 'object'

class target_type(String, AllowedValuesMixin):
    """
    'target_type' child.
    """
    _version = '241'
    fluent_name = 'target-type'
    _python_name = 'target_type'
    return_type = 'object'

class number_of_cells(Real):
    """
    'number_of_cells' child.
    """
    _version = '241'
    fluent_name = 'number-of-cells'
    _python_name = 'number_of_cells'
    return_type = 'object'

class factor_of_cells(Real):
    """
    'factor_of_cells' child.
    """
    _version = '241'
    fluent_name = 'factor-of-cells'
    _python_name = 'factor_of_cells'
    return_type = 'object'

class target(Group):
    """
    The target type and value for anisotropic adaption.
    """
    _version = '241'
    fluent_name = 'target'
    _python_name = 'target'
    child_names = ['target_type', 'number_of_cells', 'factor_of_cells']
    _child_classes = dict(
        target_type=target_type,
        number_of_cells=number_of_cells,
        factor_of_cells=factor_of_cells,
    )
    return_type = 'object'

class maximum_anisotropic_ratio(Real):
    """
    The maximum anisotropic ratio for adapted cells.
    """
    _version = '241'
    fluent_name = 'maximum-anisotropic-ratio'
    _python_name = 'maximum_anisotropic_ratio'
    return_type = 'object'

class minimum_edge_length_1(Real):
    """
    The target minimum length scale.
    """
    _version = '241'
    fluent_name = 'minimum-edge-length'
    _python_name = 'minimum_edge_length'
    return_type = 'object'

class minimum_cell_quality_1(Real):
    """
    The minimum orthogonal quality bound for adapted cells.
    """
    _version = '241'
    fluent_name = 'minimum-cell-quality'
    _python_name = 'minimum_cell_quality'
    return_type = 'object'

class adapt_mesh_1(Command):
    """
    Adapt the mesh based on specified anisotropic adaption setup.
    """
    _version = '241'
    fluent_name = 'adapt-mesh'
    _python_name = 'adapt_mesh'
    return_type = 'object'

class anisotropic_adaption(Group):
    """
    The anisotropic adaption object.
    """
    _version = '241'
    fluent_name = 'anisotropic-adaption'
    _python_name = 'anisotropic_adaption'
    child_names = ['operations', 'iterations', 'fixed_zones', 'indicator', 'target', 'maximum_anisotropic_ratio', 'minimum_edge_length', 'minimum_cell_quality']
    command_names = ['adapt_mesh']
    _child_classes = dict(
        operations=operations,
        iterations=iterations,
        fixed_zones=fixed_zones,
        indicator=indicator,
        target=target,
        maximum_anisotropic_ratio=maximum_anisotropic_ratio,
        minimum_edge_length=minimum_edge_length_1,
        minimum_cell_quality=minimum_cell_quality_1,
        adapt_mesh=adapt_mesh_1,
    )
    return_type = 'object'

class check_before_solve(Boolean):
    """
    Specifies whether to perform various mesh consistency checks before solve.
    """
    _version = '241'
    fluent_name = 'check-before-solve?'
    _python_name = 'check_before_solve'
    return_type = 'object'

class check_verbosity(Integer):
    """
    Verbosity output of mesh check and mesh quality. Higher verbosity corresponds to more detailed information.
    """
    _version = '241'
    fluent_name = 'check-verbosity'
    _python_name = 'check_verbosity'
    return_type = 'object'

class enhanced_orthogonal_quality(Boolean):
    """
    Enable enhanced orthogonal quality method.
    """
    _version = '241'
    fluent_name = 'enhanced-orthogonal-quality?'
    _python_name = 'enhanced_orthogonal_quality'
    return_type = 'object'

class matching_tolerance(Real):
    """
    The normalized tolerance used for finding coincident nodes.
    """
    _version = '241'
    fluent_name = 'matching-tolerance'
    _python_name = 'matching_tolerance'
    return_type = 'object'

class cell_deactivate_list(StringList, AllowedValuesMixin):
    """
    Deactivate a cell zone.
    """
    _version = '241'
    fluent_name = 'cell-deactivate-list'
    _python_name = 'cell_deactivate_list'
    return_type = 'object'

class deactivate_cell_zone(Command):
    """
    Deactivate cell thread.
    
    Parameters
    ----------
        cell_deactivate_list : List
            Deactivate a cell zone.
    """
    _version = '241'
    fluent_name = 'deactivate-cell-zone'
    _python_name = 'deactivate_cell_zone'
    argument_names = ['cell_deactivate_list']
    _child_classes = dict(
        cell_deactivate_list=cell_deactivate_list,
    )
    return_type = 'object'

class cell_zones_2(StringList, AllowedValuesMixin):
    """
    Delete a cell zone.
    """
    _version = '241'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'
    return_type = 'object'

class delete_cell_zone(Command):
    """
    Delete a cell thread.
    
    Parameters
    ----------
        cell_zones : List
            Delete a cell zone.
    """
    _version = '241'
    fluent_name = 'delete-cell-zone'
    _python_name = 'delete_cell_zone'
    argument_names = ['cell_zones']
    _child_classes = dict(
        cell_zones=cell_zones_2,
    )
    return_type = 'object'

class cell_zone_name(String, AllowedValuesMixin):
    """
    The cell zone name.
    """
    _version = '241'
    fluent_name = 'cell-zone-name'
    _python_name = 'cell_zone_name'
    return_type = 'object'

class translate_1(Boolean):
    """
    Specifies whether copied zone should be translated (#t) or rotated (#f).
    """
    _version = '241'
    fluent_name = 'translate?'
    _python_name = 'translate'
    return_type = 'object'

class rotation_angle(Real):
    """
    'rotation_angle' child.
    """
    _version = '241'
    fluent_name = 'rotation-angle'
    _python_name = 'rotation_angle'
    return_type = 'object'

class offset(RealList):
    """
    'offset' child.
    """
    _version = '241'
    fluent_name = 'offset'
    _python_name = 'offset'
    return_type = 'object'

class axis(RealList):
    """
    'axis' child.
    """
    _version = '241'
    fluent_name = 'axis'
    _python_name = 'axis'
    return_type = 'object'

class copy_move_cell_zone(Command):
    """
    Copy and translate or rotate a cell zone.
    
    Parameters
    ----------
        cell_zone_name : str
            The cell zone name.
        translate : bool
            Specifies whether copied zone should be translated (#t) or rotated (#f).
        rotation_angle : real
            'rotation_angle' child.
        offset : List
            'offset' child.
        axis : List
            'axis' child.
    """
    _version = '241'
    fluent_name = 'copy-move-cell-zone'
    _python_name = 'copy_move_cell_zone'
    argument_names = ['cell_zone_name', 'translate', 'rotation_angle', 'offset', 'axis']
    _child_classes = dict(
        cell_zone_name=cell_zone_name,
        translate=translate_1,
        rotation_angle=rotation_angle,
        offset=offset,
        axis=axis,
    )
    return_type = 'object'

class list_zones(Command):
    """
    List zone IDs, types, kinds, and names.
    """
    _version = '241'
    fluent_name = 'list-zones'
    _python_name = 'list_zones'
    return_type = 'object'

class face_zone(String, AllowedValuesMixin):
    """
    The zone name.
    """
    _version = '241'
    fluent_name = 'face-zone'
    _python_name = 'face_zone'
    return_type = 'object'

class distance_delta(RealList):
    """
    'distance_delta' child.
    """
    _version = '241'
    fluent_name = 'distance-delta'
    _python_name = 'distance_delta'
    return_type = 'object'

class extrude_face_zone_delta(Command):
    """
    Extrude a face thread a specified distance based on a list of deltas.
    
    Parameters
    ----------
        face_zone : str
            The zone name.
        distance_delta : List
            'distance_delta' child.
    """
    _version = '241'
    fluent_name = 'extrude-face-zone-delta'
    _python_name = 'extrude_face_zone_delta'
    argument_names = ['face_zone', 'distance_delta']
    _child_classes = dict(
        face_zone=face_zone,
        distance_delta=distance_delta,
    )
    return_type = 'object'

class normal_distance(Real):
    """
    'normal_distance' child.
    """
    _version = '241'
    fluent_name = 'normal-distance'
    _python_name = 'normal_distance'
    return_type = 'object'

class parametric_coordinates(RealList):
    """
    'parametric_coordinates' child.
    """
    _version = '241'
    fluent_name = 'parametric-coordinates'
    _python_name = 'parametric_coordinates'
    return_type = 'object'

class extrude_face_zone_para(Command):
    """
    Extrude a face thread a specified distance based on a distance and a list of parametric locations between 0 and 1 (eg. 0 0.2 0.4 0.8 1.0).
    
    Parameters
    ----------
        face_zone : str
            The zone name.
        normal_distance : real
            'normal_distance' child.
        parametric_coordinates : List
            'parametric_coordinates' child.
    """
    _version = '241'
    fluent_name = 'extrude-face-zone-para'
    _python_name = 'extrude_face_zone_para'
    argument_names = ['face_zone', 'normal_distance', 'parametric_coordinates']
    _child_classes = dict(
        face_zone=face_zone,
        normal_distance=normal_distance,
        parametric_coordinates=parametric_coordinates,
    )
    return_type = 'object'

class zone_names(StringList, AllowedValuesMixin):
    """
    Merge duplicate faces and nodes of zones in list.
    """
    _version = '241'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'
    return_type = 'object'

class zone_name_1(String):
    """
    'zone_name' child.
    """
    _version = '241'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'
    return_type = 'object'

class fuse_face_zones(Command):
    """
    Attempt to fuse zones by removing duplicate faces and nodes.
    
    Parameters
    ----------
        zone_names : List
            Merge duplicate faces and nodes of zones in list.
        zone_name : str
            'zone_name' child.
    """
    _version = '241'
    fluent_name = 'fuse-face-zones'
    _python_name = 'fuse_face_zones'
    argument_names = ['zone_names', 'zone_name']
    _child_classes = dict(
        zone_names=zone_names,
        zone_name=zone_name_1,
    )
    return_type = 'object'

class zone_names_1(StringList, AllowedValuesMixin):
    """
    Scale specified cell zones.
    """
    _version = '241'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'
    return_type = 'object'

class scale_1(RealList):
    """
    'scale' child.
    """
    _version = '241'
    fluent_name = 'scale'
    _python_name = 'scale'
    return_type = 'object'

class scale_zone(Command):
    """
    Scale nodal coordinates of input cell zones.
    
    Parameters
    ----------
        zone_names : List
            Scale specified cell zones.
        scale : List
            'scale' child.
    """
    _version = '241'
    fluent_name = 'scale-zone'
    _python_name = 'scale_zone'
    argument_names = ['zone_names', 'scale']
    _child_classes = dict(
        zone_names=zone_names_1,
        scale=scale_1,
    )
    return_type = 'object'

class zone_names_2(StringList, AllowedValuesMixin):
    """
    Rotate specified cell zones.
    """
    _version = '241'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'
    return_type = 'object'

class origin(RealList):
    """
    'origin' child.
    """
    _version = '241'
    fluent_name = 'origin'
    _python_name = 'origin'
    return_type = 'object'

class rotate_zone(Command):
    """
    Rotate nodal coordinates of input cell zones.
    
    Parameters
    ----------
        zone_names : List
            Rotate specified cell zones.
        rotation_angle : real
            'rotation_angle' child.
        origin : List
            'origin' child.
        axis : List
            'axis' child.
    """
    _version = '241'
    fluent_name = 'rotate-zone'
    _python_name = 'rotate_zone'
    argument_names = ['zone_names', 'rotation_angle', 'origin', 'axis']
    _child_classes = dict(
        zone_names=zone_names_2,
        rotation_angle=rotation_angle,
        origin=origin,
        axis=axis,
    )
    return_type = 'object'

class zone_names_3(StringList, AllowedValuesMixin):
    """
    Translate specified cell zones.
    """
    _version = '241'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'
    return_type = 'object'

class translate_zone(Command):
    """
    Translate nodal coordinates of input cell zones.
    
    Parameters
    ----------
        zone_names : List
            Translate specified cell zones.
        offset : List
            'offset' child.
    """
    _version = '241'
    fluent_name = 'translate-zone'
    _python_name = 'translate_zone'
    argument_names = ['zone_names', 'offset']
    _child_classes = dict(
        zone_names=zone_names_3,
        offset=offset,
    )
    return_type = 'object'

class zone_names_4(StringList, AllowedValuesMixin):
    """
    Zone name list.
    """
    _version = '241'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'
    return_type = 'object'

class merge_zones(Command):
    """
    Merge zones of the same type and condition into one.
    
    Parameters
    ----------
        zone_names : List
            Zone name list.
    """
    _version = '241'
    fluent_name = 'merge-zones'
    _python_name = 'merge_zones'
    argument_names = ['zone_names']
    _child_classes = dict(
        zone_names=zone_names_4,
    )
    return_type = 'object'

class zone_1_name(String, AllowedValuesMixin):
    """
    The zone name.
    """
    _version = '241'
    fluent_name = 'zone-1-name'
    _python_name = 'zone_1_name'
    return_type = 'object'

class zone_2_name(String):
    """
    'zone_2_name' child.
    """
    _version = '241'
    fluent_name = 'zone-2-name'
    _python_name = 'zone_2_name'
    return_type = 'object'

class interpolate(Boolean):
    """
    'interpolate' child.
    """
    _version = '241'
    fluent_name = 'interpolate?'
    _python_name = 'interpolate'
    return_type = 'object'

class replace_zone(Command):
    """
    Replace a cell zone.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        zone_1_name : str
            The zone name.
        zone_2_name : str
            'zone_2_name' child.
        interpolate : bool
            'interpolate' child.
    """
    _version = '241'
    fluent_name = 'replace-zone'
    _python_name = 'replace_zone'
    argument_names = ['file_name', 'zone_1_name', 'zone_2_name', 'interpolate']
    _child_classes = dict(
        file_name=file_name_1,
        zone_1_name=zone_1_name,
        zone_2_name=zone_2_name,
        interpolate=interpolate,
    )
    return_type = 'object'

class append_mesh(Command):
    """
    Append new mesh.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'append-mesh'
    _python_name = 'append_mesh'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class append_mesh_data(Command):
    """
    Append new mesh with data.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'append-mesh-data'
    _python_name = 'append_mesh_data'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class cell_zone_name_1(String, AllowedValuesMixin):
    """
    The zone name.
    """
    _version = '241'
    fluent_name = 'cell-zone-name'
    _python_name = 'cell_zone_name'
    return_type = 'object'

class register(String):
    """
    'register' child.
    """
    _version = '241'
    fluent_name = 'register'
    _python_name = 'register'
    return_type = 'object'

class move_faces(Boolean):
    """
    'move_faces' child.
    """
    _version = '241'
    fluent_name = 'move-faces?'
    _python_name = 'move_faces'
    return_type = 'object'

class sep_cell_zone_mark(Command):
    """
    Separate a cell zone based on cell marking.
    
    Parameters
    ----------
        cell_zone_name : str
            The zone name.
        register : str
            'register' child.
        move_faces : bool
            'move_faces' child.
    """
    _version = '241'
    fluent_name = 'sep-cell-zone-mark'
    _python_name = 'sep_cell_zone_mark'
    argument_names = ['cell_zone_name', 'register', 'move_faces']
    _child_classes = dict(
        cell_zone_name=cell_zone_name_1,
        register=register,
        move_faces=move_faces,
    )
    return_type = 'object'

class move_cells(Boolean):
    """
    'move_cells' child.
    """
    _version = '241'
    fluent_name = 'move-cells?'
    _python_name = 'move_cells'
    return_type = 'object'

class sep_cell_zone_region(Command):
    """
    Separate a cell zone based on contiguous regions.
    
    Parameters
    ----------
        cell_zone_name : str
            The zone name.
        move_cells : bool
            'move_cells' child.
    """
    _version = '241'
    fluent_name = 'sep-cell-zone-region'
    _python_name = 'sep_cell_zone_region'
    argument_names = ['cell_zone_name', 'move_cells']
    _child_classes = dict(
        cell_zone_name=cell_zone_name_1,
        move_cells=move_cells,
    )
    return_type = 'object'

class face_zone_name(String, AllowedValuesMixin):
    """
    The zone name.
    """
    _version = '241'
    fluent_name = 'face-zone-name'
    _python_name = 'face_zone_name'
    return_type = 'object'

class angle(Real):
    """
    'angle' child.
    """
    _version = '241'
    fluent_name = 'angle'
    _python_name = 'angle'
    return_type = 'object'

class sep_face_zone_angle(Command):
    """
    Separate a face zone based on significant angle.
    
    Parameters
    ----------
        face_zone_name : str
            The zone name.
        angle : real
            'angle' child.
        move_faces : bool
            'move_faces' child.
    """
    _version = '241'
    fluent_name = 'sep-face-zone-angle'
    _python_name = 'sep_face_zone_angle'
    argument_names = ['face_zone_name', 'angle', 'move_faces']
    _child_classes = dict(
        face_zone_name=face_zone_name,
        angle=angle,
        move_faces=move_faces,
    )
    return_type = 'object'

class sep_face_zone_face(Command):
    """
    Separate each face in a zone into unique zone.
    
    Parameters
    ----------
        face_zone_name : str
            The zone name.
        move_faces : bool
            'move_faces' child.
    """
    _version = '241'
    fluent_name = 'sep-face-zone-face'
    _python_name = 'sep_face_zone_face'
    argument_names = ['face_zone_name', 'move_faces']
    _child_classes = dict(
        face_zone_name=face_zone_name,
        move_faces=move_faces,
    )
    return_type = 'object'

class register_name(String):
    """
    'register_name' child.
    """
    _version = '241'
    fluent_name = 'register-name'
    _python_name = 'register_name'
    return_type = 'object'

class sep_face_zone_mark(Command):
    """
    Separate a face zone based on cell marking.
    
    Parameters
    ----------
        face_zone_name : str
            The zone name.
        register_name : str
            'register_name' child.
        move_faces : bool
            'move_faces' child.
    """
    _version = '241'
    fluent_name = 'sep-face-zone-mark'
    _python_name = 'sep_face_zone_mark'
    argument_names = ['face_zone_name', 'register_name', 'move_faces']
    _child_classes = dict(
        face_zone_name=face_zone_name,
        register_name=register_name,
        move_faces=move_faces,
    )
    return_type = 'object'

class sep_face_zone_region(Command):
    """
    Separate a face zone based on contiguous regions.
    
    Parameters
    ----------
        face_zone_name : str
            The zone name.
        move_faces : bool
            'move_faces' child.
    """
    _version = '241'
    fluent_name = 'sep-face-zone-region'
    _python_name = 'sep_face_zone_region'
    argument_names = ['face_zone_name', 'move_faces']
    _child_classes = dict(
        face_zone_name=face_zone_name,
        move_faces=move_faces,
    )
    return_type = 'object'

class zone_name_2(String, AllowedValuesMixin):
    """
    The zone name.
    """
    _version = '241'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'
    return_type = 'object'

class new_name(String):
    """
    'new_name' child.
    """
    _version = '241'
    fluent_name = 'new-name'
    _python_name = 'new_name'
    return_type = 'object'

class zone_name(Command):
    """
    Give a zone a new name.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
        new_name : str
            'new_name' child.
    """
    _version = '241'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'
    argument_names = ['zone_name', 'new_name']
    _child_classes = dict(
        zone_name=zone_name_2,
        new_name=new_name,
    )
    return_type = 'object'

class zone_name_3(String, AllowedValuesMixin):
    """
    The fluid zone name.
    """
    _version = '241'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'
    return_type = 'object'

class domain(String, AllowedValuesMixin):
    """
    'domain' child.
    """
    _version = '241'
    fluent_name = 'domain'
    _python_name = 'domain'
    return_type = 'object'

class new_phase(Integer, AllowedValuesMixin):
    """
    'new_phase' child.
    """
    _version = '241'
    fluent_name = 'new-phase'
    _python_name = 'new_phase'
    return_type = 'object'

class change_zone_state(Command):
    """
    Change the realgas material state for a zone.
    
    Parameters
    ----------
        zone_name : str
            The fluid zone name.
        domain : str
            'domain' child.
        new_phase : int
            'new_phase' child.
    """
    _version = '241'
    fluent_name = 'change-zone-state'
    _python_name = 'change_zone_state'
    argument_names = ['zone_name', 'domain', 'new_phase']
    _child_classes = dict(
        zone_name=zone_name_3,
        domain=domain,
        new_phase=new_phase,
    )
    return_type = 'object'

class zone_name_4(String, AllowedValuesMixin):
    """
    Id/name of zone to convert to periodic.
    """
    _version = '241'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'
    return_type = 'object'

class shadow_zone_name(String, AllowedValuesMixin):
    """
    Id/name of zone to convert to shadow.
    """
    _version = '241'
    fluent_name = 'shadow-zone-name'
    _python_name = 'shadow_zone_name'
    return_type = 'object'

class rotate_periodic(Boolean):
    """
    'rotate_periodic' child.
    """
    _version = '241'
    fluent_name = 'rotate-periodic?'
    _python_name = 'rotate_periodic'
    return_type = 'object'

class create(Boolean):
    """
    'create' child.
    """
    _version = '241'
    fluent_name = 'create?'
    _python_name = 'create'
    return_type = 'object'

class auto_translation(Boolean):
    """
    'auto_translation' child.
    """
    _version = '241'
    fluent_name = 'auto-translation?'
    _python_name = 'auto_translation'
    return_type = 'object'

class direction(RealList):
    """
    'direction' child.
    """
    _version = '241'
    fluent_name = 'direction'
    _python_name = 'direction'
    return_type = 'object'

class make_periodic(Command):
    """
    Attempt to establish conformal periodic face zone connectivity.
    
    Parameters
    ----------
        zone_name : str
            Id/name of zone to convert to periodic.
        shadow_zone_name : str
            Id/name of zone to convert to shadow.
        rotate_periodic : bool
            'rotate_periodic' child.
        create : bool
            'create' child.
        auto_translation : bool
            'auto_translation' child.
        direction : List
            'direction' child.
    """
    _version = '241'
    fluent_name = 'make-periodic'
    _python_name = 'make_periodic'
    argument_names = ['zone_name', 'shadow_zone_name', 'rotate_periodic', 'create', 'auto_translation', 'direction']
    _child_classes = dict(
        zone_name=zone_name_4,
        shadow_zone_name=shadow_zone_name,
        rotate_periodic=rotate_periodic,
        create=create,
        auto_translation=auto_translation,
        direction=direction,
    )
    return_type = 'object'

class periodic_method(String, AllowedValuesMixin):
    """
    Method.
    """
    _version = '241'
    fluent_name = 'periodic-method'
    _python_name = 'periodic_method'
    return_type = 'object'

class interface_name(String):
    """
    The name for this periodic interface.
    """
    _version = '241'
    fluent_name = 'interface-name'
    _python_name = 'interface_name'
    return_type = 'object'

class new_axis(Boolean):
    """
    'new_axis' child.
    """
    _version = '241'
    fluent_name = 'new-axis?'
    _python_name = 'new_axis'
    return_type = 'object'

class new_direction(Boolean):
    """
    'new_direction' child.
    """
    _version = '241'
    fluent_name = 'new-direction?'
    _python_name = 'new_direction'
    return_type = 'object'

class auto_angle(Boolean):
    """
    'auto_angle' child.
    """
    _version = '241'
    fluent_name = 'auto-angle?'
    _python_name = 'auto_angle'
    return_type = 'object'

class translation(RealList):
    """
    'translation' child.
    """
    _version = '241'
    fluent_name = 'translation'
    _python_name = 'translation'
    return_type = 'object'

class create_periodic(Boolean):
    """
    'create_periodic' child.
    """
    _version = '241'
    fluent_name = 'create-periodic?'
    _python_name = 'create_periodic'
    return_type = 'object'

class auto_offset(Boolean):
    """
    'auto_offset' child.
    """
    _version = '241'
    fluent_name = 'auto-offset?'
    _python_name = 'auto_offset'
    return_type = 'object'

class nonconformal_angle(Real):
    """
    'nonconformal_angle' child.
    """
    _version = '241'
    fluent_name = 'nonconformal-angle'
    _python_name = 'nonconformal_angle'
    return_type = 'object'

class nonconformal_translation(RealList):
    """
    'nonconformal_translation' child.
    """
    _version = '241'
    fluent_name = 'nonconformal-translation'
    _python_name = 'nonconformal_translation'
    return_type = 'object'

class create_matching(Boolean):
    """
    'create_matching' child.
    """
    _version = '241'
    fluent_name = 'create-matching?'
    _python_name = 'create_matching'
    return_type = 'object'

class nonconformal_create_periodic(Boolean):
    """
    'nonconformal_create_periodic' child.
    """
    _version = '241'
    fluent_name = 'nonconformal-create-periodic?'
    _python_name = 'nonconformal_create_periodic'
    return_type = 'object'

class create_periodic_interface(Command):
    """
    Create a conformal or non-conformal periodic interface.
    
    Parameters
    ----------
        periodic_method : str
            Method.
        interface_name : str
            The name for this periodic interface.
        zone_name : str
            Id/name of zone to convert to periodic.
        shadow_zone_name : str
            Id/name of zone to convert to shadow.
        rotate_periodic : bool
            'rotate_periodic' child.
        new_axis : bool
            'new_axis' child.
        origin : List
            'origin' child.
        new_direction : bool
            'new_direction' child.
        direction : List
            'direction' child.
        auto_angle : bool
            'auto_angle' child.
        rotation_angle : real
            'rotation_angle' child.
        auto_translation : bool
            'auto_translation' child.
        translation : List
            'translation' child.
        create_periodic : bool
            'create_periodic' child.
        auto_offset : bool
            'auto_offset' child.
        nonconformal_angle : real
            'nonconformal_angle' child.
        nonconformal_translation : List
            'nonconformal_translation' child.
        create_matching : bool
            'create_matching' child.
        nonconformal_create_periodic : bool
            'nonconformal_create_periodic' child.
    """
    _version = '241'
    fluent_name = 'create-periodic-interface'
    _python_name = 'create_periodic_interface'
    argument_names = ['periodic_method', 'interface_name', 'zone_name', 'shadow_zone_name', 'rotate_periodic', 'new_axis', 'origin', 'new_direction', 'direction', 'auto_angle', 'rotation_angle', 'auto_translation', 'translation', 'create_periodic', 'auto_offset', 'nonconformal_angle', 'nonconformal_translation', 'create_matching', 'nonconformal_create_periodic']
    _child_classes = dict(
        periodic_method=periodic_method,
        interface_name=interface_name,
        zone_name=zone_name_4,
        shadow_zone_name=shadow_zone_name,
        rotate_periodic=rotate_periodic,
        new_axis=new_axis,
        origin=origin,
        new_direction=new_direction,
        direction=direction,
        auto_angle=auto_angle,
        rotation_angle=rotation_angle,
        auto_translation=auto_translation,
        translation=translation,
        create_periodic=create_periodic,
        auto_offset=auto_offset,
        nonconformal_angle=nonconformal_angle,
        nonconformal_translation=nonconformal_translation,
        create_matching=create_matching,
        nonconformal_create_periodic=nonconformal_create_periodic,
    )
    return_type = 'object'

class periodic_zone_name(String, AllowedValuesMixin):
    """
    Id/name of periodic zone to slit.
    """
    _version = '241'
    fluent_name = 'periodic-zone-name'
    _python_name = 'periodic_zone_name'
    return_type = 'object'

class slit_periodic_1(Boolean):
    """
    'slit_periodic' child.
    """
    _version = '241'
    fluent_name = 'slit-periodic?'
    _python_name = 'slit_periodic'
    return_type = 'object'

class slit_periodic(Command):
    """
    Slit a periodic zone into two symmetry zones.
    
    Parameters
    ----------
        periodic_zone_name : str
            Id/name of periodic zone to slit.
        slit_periodic : bool
            'slit_periodic' child.
    """
    _version = '241'
    fluent_name = 'slit-periodic'
    _python_name = 'slit_periodic'
    argument_names = ['periodic_zone_name', 'slit_periodic']
    _child_classes = dict(
        periodic_zone_name=periodic_zone_name,
        slit_periodic=slit_periodic_1,
    )
    return_type = 'object'

class zone_names_5(StringList, AllowedValuesMixin):
    """
    Zone id/name.
    """
    _version = '241'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'
    return_type = 'object'

class new_type(String, AllowedValuesMixin):
    """
    'new_type' child.
    """
    _version = '241'
    fluent_name = 'new-type'
    _python_name = 'new_type'
    return_type = 'object'

class zone_type(Command):
    """
    Set a zone's type.
    
    Parameters
    ----------
        zone_names : List
            Zone id/name.
        new_type : str
            'new_type' child.
    """
    _version = '241'
    fluent_name = 'zone-type'
    _python_name = 'zone_type'
    argument_names = ['zone_names', 'new_type']
    _child_classes = dict(
        zone_names=zone_names_5,
        new_type=new_type,
    )
    return_type = 'object'

class modify_zones(Group):
    """
    The modify zones object.
    """
    _version = '241'
    fluent_name = 'modify-zones'
    _python_name = 'modify_zones'
    command_names = ['deactivate_cell_zone', 'delete_cell_zone', 'copy_move_cell_zone', 'list_zones', 'extrude_face_zone_delta', 'extrude_face_zone_para', 'fuse_face_zones', 'scale_zone', 'rotate_zone', 'translate_zone', 'merge_zones', 'replace_zone', 'append_mesh', 'append_mesh_data', 'sep_cell_zone_mark', 'sep_cell_zone_region', 'sep_face_zone_angle', 'sep_face_zone_face', 'sep_face_zone_mark', 'sep_face_zone_region', 'zone_name', 'change_zone_state', 'make_periodic', 'create_periodic_interface', 'slit_periodic', 'zone_type']
    _child_classes = dict(
        deactivate_cell_zone=deactivate_cell_zone,
        delete_cell_zone=delete_cell_zone,
        copy_move_cell_zone=copy_move_cell_zone,
        list_zones=list_zones,
        extrude_face_zone_delta=extrude_face_zone_delta,
        extrude_face_zone_para=extrude_face_zone_para,
        fuse_face_zones=fuse_face_zones,
        scale_zone=scale_zone,
        rotate_zone=rotate_zone,
        translate_zone=translate_zone,
        merge_zones=merge_zones,
        replace_zone=replace_zone,
        append_mesh=append_mesh,
        append_mesh_data=append_mesh_data,
        sep_cell_zone_mark=sep_cell_zone_mark,
        sep_cell_zone_region=sep_cell_zone_region,
        sep_face_zone_angle=sep_face_zone_angle,
        sep_face_zone_face=sep_face_zone_face,
        sep_face_zone_mark=sep_face_zone_mark,
        sep_face_zone_region=sep_face_zone_region,
        zone_name=zone_name,
        change_zone_state=change_zone_state,
        make_periodic=make_periodic,
        create_periodic_interface=create_periodic_interface,
        slit_periodic=slit_periodic,
        zone_type=zone_type,
    )
    return_type = 'object'

class show_periodic_shadow_zones(Boolean):
    """
    Option to show periodic shadow zones in user interface.
    """
    _version = '241'
    fluent_name = 'show-periodic-shadow-zones?'
    _python_name = 'show_periodic_shadow_zones'
    return_type = 'object'

class band_width(Command):
    """
    Print cell bandwidth.
    """
    _version = '241'
    fluent_name = 'band-width'
    _python_name = 'band_width'
    return_type = 'object'

class reorder_domain(Command):
    """
    Reorder cells and faces by reverse Cuthill-McKee.
    """
    _version = '241'
    fluent_name = 'reorder-domain'
    _python_name = 'reorder_domain'
    return_type = 'object'

class reorder_zones(Command):
    """
    Reorder zones by partition, type, and id.
    """
    _version = '241'
    fluent_name = 'reorder-zones'
    _python_name = 'reorder_zones'
    return_type = 'object'

class reorder(Group):
    """
    The reorder domain object.
    """
    _version = '241'
    fluent_name = 'reorder'
    _python_name = 'reorder'
    command_names = ['band_width', 'reorder_domain', 'reorder_zones']
    _child_classes = dict(
        band_width=band_width,
        reorder_domain=reorder_domain,
        reorder_zones=reorder_zones,
    )
    return_type = 'object'

class allow_repair_at_boundaries(Boolean):
    """
    Enable/disable adjustment of boundary nodes during mesh repair.
    """
    _version = '241'
    fluent_name = 'allow-repair-at-boundaries?'
    _python_name = 'allow_repair_at_boundaries'
    return_type = 'object'

class include_local_polyhedra_conversion_in_repair(Boolean):
    """
    Enable/disable local conversion to polyhedra during mesh repair.
    """
    _version = '241'
    fluent_name = 'include-local-polyhedra-conversion-in-repair?'
    _python_name = 'include_local_polyhedra_conversion_in_repair'
    return_type = 'object'

class repair_poor_elements(Command):
    """
    Report invalid and poor quality elements.
    """
    _version = '241'
    fluent_name = 'repair-poor-elements'
    _python_name = 'repair_poor_elements'
    return_type = 'object'

class improve_quality(Command):
    """
    Tries to improve the mesh quality.
    """
    _version = '241'
    fluent_name = 'improve-quality'
    _python_name = 'improve_quality'
    return_type = 'object'

class repair(Command):
    """
    Tries to repair mesh problems identified by mesh check.
    """
    _version = '241'
    fluent_name = 'repair'
    _python_name = 'repair'
    return_type = 'object'

class repair_1(Boolean):
    """
    'repair' child.
    """
    _version = '241'
    fluent_name = 'repair?'
    _python_name = 'repair'
    return_type = 'object'

class disable_repair(Boolean):
    """
    'disable_repair' child.
    """
    _version = '241'
    fluent_name = 'disable-repair?'
    _python_name = 'disable_repair'
    return_type = 'object'

class repair_face_handedness(Command):
    """
    Correct face handedness at left handed faces if possible.
    
    Parameters
    ----------
        repair : bool
            'repair' child.
        disable_repair : bool
            'disable_repair' child.
    """
    _version = '241'
    fluent_name = 'repair-face-handedness'
    _python_name = 'repair_face_handedness'
    argument_names = ['repair', 'disable_repair']
    _child_classes = dict(
        repair=repair_1,
        disable_repair=disable_repair,
    )
    return_type = 'object'

class repair_face_node_order(Command):
    """
    Reverse order of face nodes if needed.
    """
    _version = '241'
    fluent_name = 'repair-face-node-order'
    _python_name = 'repair_face_node_order'
    return_type = 'object'

class repair_wall_distance(Command):
    """
    Correct wall distance at very high aspect ratio hexahedral/polyhedral cells.
    
    Parameters
    ----------
        repair : bool
            'repair' child.
    """
    _version = '241'
    fluent_name = 'repair-wall-distance'
    _python_name = 'repair_wall_distance'
    argument_names = ['repair']
    _child_classes = dict(
        repair=repair_1,
    )
    return_type = 'object'

class repair_angle(Boolean):
    """
    'repair_angle' child.
    """
    _version = '241'
    fluent_name = 'repair-angle?'
    _python_name = 'repair_angle'
    return_type = 'object'

class periodic_input(String):
    """
    Id/name of zone to repair.
    """
    _version = '241'
    fluent_name = 'periodic-input'
    _python_name = 'periodic_input'
    return_type = 'object'

class angle_input(Real):
    """
    Desired angle of rotation in degrees.
    """
    _version = '241'
    fluent_name = 'angle-input'
    _python_name = 'angle_input'
    return_type = 'object'

class repair_periodic_1(Boolean):
    """
    'repair_periodic' child.
    """
    _version = '241'
    fluent_name = 'repair-periodic?'
    _python_name = 'repair_periodic'
    return_type = 'object'

class repair_periodic(Command):
    """
    Modify mesh to enforce specified periodic rotation angle.
    
    Parameters
    ----------
        repair_angle : bool
            'repair_angle' child.
        periodic_input : str
            Id/name of zone to repair.
        angle_input : real
            Desired angle of rotation in degrees.
        repair_periodic : bool
            'repair_periodic' child.
    """
    _version = '241'
    fluent_name = 'repair-periodic'
    _python_name = 'repair_periodic'
    argument_names = ['repair_angle', 'periodic_input', 'angle_input', 'repair_periodic']
    _child_classes = dict(
        repair_angle=repair_angle,
        periodic_input=periodic_input,
        angle_input=angle_input,
        repair_periodic=repair_periodic_1,
    )
    return_type = 'object'

class repair_improve(Group):
    """
    The repair and improve quality object.
    """
    _version = '241'
    fluent_name = 'repair-improve'
    _python_name = 'repair_improve'
    child_names = ['allow_repair_at_boundaries', 'include_local_polyhedra_conversion_in_repair']
    command_names = ['repair_poor_elements', 'improve_quality', 'repair', 'repair_face_handedness', 'repair_face_node_order', 'repair_wall_distance', 'repair_periodic']
    _child_classes = dict(
        allow_repair_at_boundaries=allow_repair_at_boundaries,
        include_local_polyhedra_conversion_in_repair=include_local_polyhedra_conversion_in_repair,
        repair_poor_elements=repair_poor_elements,
        improve_quality=improve_quality,
        repair=repair,
        repair_face_handedness=repair_face_handedness,
        repair_face_node_order=repair_face_node_order,
        repair_wall_distance=repair_wall_distance,
        repair_periodic=repair_periodic,
    )
    return_type = 'object'

class surface(String, AllowedValuesMixin):
    """
    'surface' child.
    """
    _version = '241'
    fluent_name = 'surface'
    _python_name = 'surface'
    return_type = 'object'

class delete(CommandWithPositionalArgs):
    """
    Delete surface mesh.
    
    Parameters
    ----------
        surface : str
            'surface' child.
    """
    _version = '241'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['surface']
    _child_classes = dict(
        surface=surface,
    )
    return_type = 'object'

class display(Command):
    """
    Display surface meshes.
    """
    _version = '241'
    fluent_name = 'display'
    _python_name = 'display'
    return_type = 'object'

class filename_1(Filename):
    """
    'filename' child.
    """
    _version = '241'
    fluent_name = 'filename'
    _python_name = 'filename'
    return_type = 'object'

class unit_1(String):
    """
    'unit' child.
    """
    _version = '241'
    fluent_name = 'unit'
    _python_name = 'unit'
    return_type = 'object'

class read_2(Command):
    """
    Read surface meshes.
    
    Parameters
    ----------
        filename : str
            'filename' child.
        unit : str
            'unit' child.
    """
    _version = '241'
    fluent_name = 'read'
    _python_name = 'read'
    argument_names = ['filename', 'unit']
    _child_classes = dict(
        filename=filename_1,
        unit=unit_1,
    )
    return_type = 'object'

class surface_mesh(Group):
    """
    The surface mesh object.
    """
    _version = '241'
    fluent_name = 'surface-mesh'
    _python_name = 'surface_mesh'
    command_names = ['delete', 'display', 'read']
    _child_classes = dict(
        delete=delete,
        display=display,
        read=read_2,
    )
    return_type = 'object'

class migrate_and_reorder(Boolean):
    """
    Specifies whether to perform migration and reordering at the end of the polyhedra conversion.
    """
    _version = '241'
    fluent_name = 'migrate-and-reorder?'
    _python_name = 'migrate_and_reorder'
    return_type = 'object'

class preserve_boundary_layer(Integer):
    """
    0 = Decide at runtime.
    1 = Never preserve.
    2 = Always preserve.
    """
    _version = '241'
    fluent_name = 'preserve-boundary-layer'
    _python_name = 'preserve_boundary_layer'
    return_type = 'object'

class preserve_interior_zones(String):
    """
    'preserve_interior_zones' child.
    """
    _version = '241'
    fluent_name = 'preserve-interior-zones'
    _python_name = 'preserve_interior_zones'
    return_type = 'object'

class options(Group):
    """
    Options object.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['migrate_and_reorder', 'preserve_boundary_layer', 'preserve_interior_zones']
    _child_classes = dict(
        migrate_and_reorder=migrate_and_reorder,
        preserve_boundary_layer=preserve_boundary_layer,
        preserve_interior_zones=preserve_interior_zones,
    )
    return_type = 'object'

class convert_domain(Command):
    """
    Convert entire domain to polyhedra cells.
    """
    _version = '241'
    fluent_name = 'convert-domain'
    _python_name = 'convert_domain'
    return_type = 'object'

class convert_hanging_nodes(Command):
    """
    Convert cells with hanging nodes and faces to polyhedra.
    """
    _version = '241'
    fluent_name = 'convert-hanging-nodes'
    _python_name = 'convert_hanging_nodes'
    return_type = 'object'

class convert_hanging_node_zones(Command):
    """
    Convert selected cell zones with hanging nodes and faces to polyhedra. 
    The selected cell zones cannot be connected to other zones.
    """
    _version = '241'
    fluent_name = 'convert-hanging-node-zones'
    _python_name = 'convert_hanging_node_zones'
    return_type = 'object'

class cell_thread_list(StringList, AllowedValuesMixin):
    """
    Zones where cells should be converted.
    """
    _version = '241'
    fluent_name = 'cell-thread-list'
    _python_name = 'cell_thread_list'
    return_type = 'object'

class max_cell_skewness(Real):
    """
    Target maximum cell skewness.
    """
    _version = '241'
    fluent_name = 'max-cell-skewness'
    _python_name = 'max_cell_skewness'
    return_type = 'object'

class convert_skewed_cells_1(Boolean):
    """
    'convert_skewed_cells' child.
    """
    _version = '241'
    fluent_name = 'convert-skewed-cells?'
    _python_name = 'convert_skewed_cells'
    return_type = 'object'

class convert_skewed_cells(Command):
    """
    'convert_skewed_cells' command.
    """
    _version = '241'
    fluent_name = 'convert-skewed-cells'
    _python_name = 'convert_skewed_cells'
    argument_names = ['cell_thread_list', 'max_cell_skewness', 'convert_skewed_cells']
    _child_classes = dict(
        cell_thread_list=cell_thread_list,
        max_cell_skewness=max_cell_skewness,
        convert_skewed_cells=convert_skewed_cells_1,
    )
    return_type = 'object'

class polyhedra(Group):
    """
    The polyhedra object.
    """
    _version = '241'
    fluent_name = 'polyhedra'
    _python_name = 'polyhedra'
    child_names = ['options']
    command_names = ['convert_domain', 'convert_hanging_nodes', 'convert_hanging_node_zones', 'convert_skewed_cells']
    _child_classes = dict(
        options=options,
        convert_domain=convert_domain,
        convert_hanging_nodes=convert_hanging_nodes,
        convert_hanging_node_zones=convert_hanging_node_zones,
        convert_skewed_cells=convert_skewed_cells,
    )
    return_type = 'object'

class wall_distance_method(String, AllowedValuesMixin):
    """
    Wall distance method.
    """
    _version = '241'
    fluent_name = 'wall-distance-method'
    _python_name = 'wall_distance_method'
    return_type = 'object'

class adjacency(Command):
    """
    View and rename face zones adjacent to selected cell zones.
    """
    _version = '241'
    fluent_name = 'adjacency'
    _python_name = 'adjacency'
    return_type = 'object'

class check(Command):
    """
    Perform various mesh consistency checks.
    """
    _version = '241'
    fluent_name = 'check'
    _python_name = 'check'
    return_type = 'object'

class memory_usage(Command):
    """
    Report solver memory use.
    """
    _version = '241'
    fluent_name = 'memory-usage'
    _python_name = 'memory_usage'
    return_type = 'object'

class print_level(Integer):
    """
    Print zone information size.
    """
    _version = '241'
    fluent_name = 'print-level'
    _python_name = 'print_level'
    return_type = 'object'

class mesh_info(Command):
    """
    Print zone information size.
    
    Parameters
    ----------
        print_level : int
            Print zone information size.
    """
    _version = '241'
    fluent_name = 'mesh-info'
    _python_name = 'mesh_info'
    argument_names = ['print_level']
    _child_classes = dict(
        print_level=print_level,
    )
    return_type = 'object'

class quality(Command):
    """
    Perform analysis of mesh quality.
    """
    _version = '241'
    fluent_name = 'quality'
    _python_name = 'quality'
    return_type = 'object'

class axis_components(RealList):
    """
    'axis_components' child.
    """
    _version = '241'
    fluent_name = 'axis-components'
    _python_name = 'axis_components'
    return_type = 'object'

class rotate(Command):
    """
    Rotate the mesh.
    
    Parameters
    ----------
        angle : real
            'angle' child.
        origin : List
            'origin' child.
        axis_components : List
            'axis_components' child.
    """
    _version = '241'
    fluent_name = 'rotate'
    _python_name = 'rotate'
    argument_names = ['angle', 'origin', 'axis_components']
    _child_classes = dict(
        angle=angle,
        origin=origin,
        axis_components=axis_components,
    )
    return_type = 'object'

class x_scale(Real):
    """
    'x_scale' child.
    """
    _version = '241'
    fluent_name = 'x-scale'
    _python_name = 'x_scale'
    return_type = 'object'

class y_scale(Real):
    """
    'y_scale' child.
    """
    _version = '241'
    fluent_name = 'y-scale'
    _python_name = 'y_scale'
    return_type = 'object'

class z_scale(Real):
    """
    'z_scale' child.
    """
    _version = '241'
    fluent_name = 'z-scale'
    _python_name = 'z_scale'
    return_type = 'object'

class scale(Command):
    """
    'scale' command.
    """
    _version = '241'
    fluent_name = 'scale'
    _python_name = 'scale'
    argument_names = ['x_scale', 'y_scale', 'z_scale']
    _child_classes = dict(
        x_scale=x_scale,
        y_scale=y_scale,
        z_scale=z_scale,
    )
    return_type = 'object'

class size_info(Command):
    """
    Print mesh size.
    """
    _version = '241'
    fluent_name = 'size-info'
    _python_name = 'size_info'
    return_type = 'object'

class growth_rate(Real):
    """
    'growth_rate' child.
    """
    _version = '241'
    fluent_name = 'growth-rate'
    _python_name = 'growth_rate'
    return_type = 'object'

class redistribute_boundary_layer(Command):
    """
    Enforce growth rate in boundary layer.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
        growth_rate : real
            'growth_rate' child.
    """
    _version = '241'
    fluent_name = 'redistribute-boundary-layer'
    _python_name = 'redistribute_boundary_layer'
    argument_names = ['zone_name', 'growth_rate']
    _child_classes = dict(
        zone_name=zone_name_2,
        growth_rate=growth_rate,
    )
    return_type = 'object'

class swap_mesh_faces(Command):
    """
    Swap mesh faces.
    """
    _version = '241'
    fluent_name = 'swap-mesh-faces'
    _python_name = 'swap_mesh_faces'
    return_type = 'object'

class type_of_smoothing(String, AllowedValuesMixin):
    """
    'type_of_smoothing' child.
    """
    _version = '241'
    fluent_name = 'type-of-smoothing'
    _python_name = 'type_of_smoothing'
    return_type = 'object'

class number_of_iterations(Integer):
    """
    'number_of_iterations' child.
    """
    _version = '241'
    fluent_name = 'number-of-iterations'
    _python_name = 'number_of_iterations'
    return_type = 'object'

class relaxtion_factor(Real):
    """
    'relaxtion_factor' child.
    """
    _version = '241'
    fluent_name = 'relaxtion-factor'
    _python_name = 'relaxtion_factor'
    return_type = 'object'

class percentage_of_cells(Real):
    """
    'percentage_of_cells' child.
    """
    _version = '241'
    fluent_name = 'percentage-of-cells'
    _python_name = 'percentage_of_cells'
    return_type = 'object'

class skewness_threshold(Real):
    """
    'skewness_threshold' child.
    """
    _version = '241'
    fluent_name = 'skewness-threshold'
    _python_name = 'skewness_threshold'
    return_type = 'object'

class smooth_mesh(Command):
    """
    Smooth the mesh using quality-based, Laplace or skewness methods.
    
    Parameters
    ----------
        type_of_smoothing : str
            'type_of_smoothing' child.
        number_of_iterations : int
            'number_of_iterations' child.
        relaxtion_factor : real
            'relaxtion_factor' child.
        percentage_of_cells : real
            'percentage_of_cells' child.
        skewness_threshold : real
            'skewness_threshold' child.
    """
    _version = '241'
    fluent_name = 'smooth-mesh'
    _python_name = 'smooth_mesh'
    argument_names = ['type_of_smoothing', 'number_of_iterations', 'relaxtion_factor', 'percentage_of_cells', 'skewness_threshold']
    _child_classes = dict(
        type_of_smoothing=type_of_smoothing,
        number_of_iterations=number_of_iterations,
        relaxtion_factor=relaxtion_factor,
        percentage_of_cells=percentage_of_cells,
        skewness_threshold=skewness_threshold,
    )
    return_type = 'object'

class zones(Boolean):
    """
    'zones' child.
    """
    _version = '241'
    fluent_name = 'zones?'
    _python_name = 'zones'
    return_type = 'object'

class replace(Command):
    """
    Replace mesh and interpolate data.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        zones : bool
            'zones' child.
    """
    _version = '241'
    fluent_name = 'replace'
    _python_name = 'replace'
    argument_names = ['file_name', 'zones']
    _child_classes = dict(
        file_name=file_name_1,
        zones=zones,
    )
    return_type = 'object'

class translate(Command):
    """
    Translate the mesh.
    
    Parameters
    ----------
        offset : List
            'offset' child.
    """
    _version = '241'
    fluent_name = 'translate'
    _python_name = 'translate'
    argument_names = ['offset']
    _child_classes = dict(
        offset=offset,
    )
    return_type = 'object'

class mesh(Group):
    """
    'mesh' child.
    """
    _version = '241'
    fluent_name = 'mesh'
    _python_name = 'mesh'
    child_names = ['adapt', 'anisotropic_adaption', 'check_before_solve', 'check_verbosity', 'enhanced_orthogonal_quality', 'matching_tolerance', 'modify_zones', 'show_periodic_shadow_zones', 'reorder', 'repair_improve', 'surface_mesh', 'polyhedra', 'wall_distance_method']
    command_names = ['adjacency', 'check', 'memory_usage', 'mesh_info', 'quality', 'rotate', 'scale', 'size_info', 'redistribute_boundary_layer', 'swap_mesh_faces', 'smooth_mesh', 'replace', 'translate']
    _child_classes = dict(
        adapt=adapt,
        anisotropic_adaption=anisotropic_adaption,
        check_before_solve=check_before_solve,
        check_verbosity=check_verbosity,
        enhanced_orthogonal_quality=enhanced_orthogonal_quality,
        matching_tolerance=matching_tolerance,
        modify_zones=modify_zones,
        show_periodic_shadow_zones=show_periodic_shadow_zones,
        reorder=reorder,
        repair_improve=repair_improve,
        surface_mesh=surface_mesh,
        polyhedra=polyhedra,
        wall_distance_method=wall_distance_method,
        adjacency=adjacency,
        check=check,
        memory_usage=memory_usage,
        mesh_info=mesh_info,
        quality=quality,
        rotate=rotate,
        scale=scale,
        size_info=size_info,
        redistribute_boundary_layer=redistribute_boundary_layer,
        swap_mesh_faces=swap_mesh_faces,
        smooth_mesh=smooth_mesh,
        replace=replace,
        translate=translate,
    )
    return_type = 'object'

class session_name(String):
    """
    Name for the web server.
    """
    _version = '241'
    fluent_name = 'session-name'
    _python_name = 'session_name'
    return_type = 'object'

class port(Integer):
    """
    Listening port for the web server.
    """
    _version = '241'
    fluent_name = 'port'
    _python_name = 'port'
    return_type = 'object'

class port_span(Integer):
    """
    Number of ports to try starting from given 'port' for the web server.
    """
    _version = '241'
    fluent_name = 'port-span'
    _python_name = 'port_span'
    return_type = 'object'

class job_service_url(String):
    """
    Job service URL to register Fluent.
    """
    _version = '241'
    fluent_name = 'job-service-url'
    _python_name = 'job_service_url'
    return_type = 'object'

class start(Command):
    """
    Start the web server.
    
    Parameters
    ----------
        session_name : str
            Name for the web server.
        port : int
            Listening port for the web server.
        port_span : int
            Number of ports to try starting from given 'port' for the web server.
        job_service_url : str
            Job service URL to register Fluent.
    """
    _version = '241'
    fluent_name = 'start'
    _python_name = 'start'
    argument_names = ['session_name', 'port', 'port_span', 'job_service_url']
    _child_classes = dict(
        session_name=session_name,
        port=port,
        port_span=port_span,
        job_service_url=job_service_url,
    )
    return_type = 'object'

class stop(Command):
    """
    Stop the web server.
    """
    _version = '241'
    fluent_name = 'stop'
    _python_name = 'stop'
    return_type = 'object'

class print_server_info(Command):
    """
    Print the web server information.
    """
    _version = '241'
    fluent_name = 'print-server-info'
    _python_name = 'print_server_info'
    return_type = 'object'

class get_server_info(Query):
    """
    Get the web server information.
    """
    _version = '241'
    fluent_name = 'get-server-info'
    _python_name = 'get_server_info'
    return_type = 'object'

class web_server(Group):
    """
    REST and WebSocket based web server.
    """
    _version = '241'
    fluent_name = 'web-server'
    _python_name = 'web_server'
    command_names = ['start', 'stop', 'print_server_info']
    query_names = ['get_server_info']
    _child_classes = dict(
        start=start,
        stop=stop,
        print_server_info=print_server_info,
        get_server_info=get_server_info,
    )
    return_type = 'object'

class server(Group):
    """
    'server' child.
    """
    _version = '241'
    fluent_name = 'server'
    _python_name = 'server'
    child_names = ['web_server']
    _child_classes = dict(
        web_server=web_server,
    )
    return_type = 'object'

class type_1(String, AllowedValuesMixin):
    """
    Solver type.
    """
    _version = '241'
    fluent_name = 'type'
    _python_name = 'type'
    return_type = 'object'

class two_dim_space(String, AllowedValuesMixin):
    """
    'two_dim_space' child.
    """
    _version = '241'
    fluent_name = 'two-dim-space'
    _python_name = 'two_dim_space'
    return_type = 'object'

class velocity_formulation(String, AllowedValuesMixin):
    """
    Velocity formulation.
    """
    _version = '241'
    fluent_name = 'velocity-formulation'
    _python_name = 'velocity_formulation'
    return_type = 'object'

class time(String, AllowedValuesMixin):
    """
    'time' child.
    """
    _version = '241'
    fluent_name = 'time'
    _python_name = 'time'
    return_type = 'object'

class solver(Group):
    """
    'solver' child.
    """
    _version = '241'
    fluent_name = 'solver'
    _python_name = 'solver'
    child_names = ['type', 'two_dim_space', 'velocity_formulation', 'time']
    _child_classes = dict(
        type=type_1,
        two_dim_space=two_dim_space,
        velocity_formulation=velocity_formulation,
        time=time,
    )
    return_type = 'object'

class adjust_solver_defaults_based_on_setup(Boolean):
    """
    Enable/disable adjustment of solver defaults based on setup.
    """
    _version = '241'
    fluent_name = 'adjust-solver-defaults-based-on-setup'
    _python_name = 'adjust_solver_defaults_based_on_setup'
    return_type = 'object'

class enable_2(Boolean):
    """
    Gravitational acceleration.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class components(RealList):
    """
    'components' child.
    """
    _version = '241'
    fluent_name = 'components'
    _python_name = 'components'
    return_type = 'object'

class gravity_mrf_behavior(Boolean):
    """
    Enable/disable the fix of gravity vector in a stationary reference frame.
    """
    _version = '241'
    fluent_name = 'gravity-mrf-behavior'
    _python_name = 'gravity_mrf_behavior'
    return_type = 'object'

class gravity(Group):
    """
    'gravity' child.
    """
    _version = '241'
    fluent_name = 'gravity'
    _python_name = 'gravity'
    child_names = ['enable', 'components', 'gravity_mrf_behavior']
    _child_classes = dict(
        enable=enable_2,
        components=components,
        gravity_mrf_behavior=gravity_mrf_behavior,
    )
    return_type = 'object'

class real_gas_state(String, AllowedValuesMixin):
    """
    State for real gas EOS subcritical condition.
    """
    _version = '241'
    fluent_name = 'real-gas-state'
    _python_name = 'real_gas_state'
    return_type = 'object'

class operating_pressure(Real):
    """
    The operating pressure.
    """
    _version = '241'
    fluent_name = 'operating-pressure'
    _python_name = 'operating_pressure'
    return_type = 'object'

class reference_pressure_location(RealList):
    """
    Coordinates of reference pressure.
    """
    _version = '241'
    fluent_name = 'reference-pressure-location'
    _python_name = 'reference_pressure_location'
    return_type = 'object'

class reference_pressure_method(String, AllowedValuesMixin):
    """
    Choosing reference pressure type.
    """
    _version = '241'
    fluent_name = 'reference-pressure-method'
    _python_name = 'reference_pressure_method'
    return_type = 'object'

class enable_3(Boolean):
    """
    Enable/disable use of a operating density.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class method(String, AllowedValuesMixin):
    """
    Operating density methods for multiphase flow.
    """
    _version = '241'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class value(Real):
    """
    Operating density.
    """
    _version = '241'
    fluent_name = 'value'
    _python_name = 'value'
    return_type = 'object'

class print_1(Command):
    """
    Print operating density value.
    """
    _version = '241'
    fluent_name = 'print'
    _python_name = 'print'
    return_type = 'object'

class operating_density(Group):
    """
    Enable/disable use of a specified operating density.
    """
    _version = '241'
    fluent_name = 'operating-density'
    _python_name = 'operating_density'
    child_names = ['enable', 'method', 'value']
    command_names = ['print']
    _child_classes = dict(
        enable=enable_3,
        method=method,
        value=value,
        print=print_1,
    )
    return_type = 'object'

class operating_temperature(Real):
    """
    The operating temperature for Boussinesq.
    """
    _version = '241'
    fluent_name = 'operating-temperature'
    _python_name = 'operating_temperature'
    return_type = 'object'

class enable_4(Boolean):
    """
    Enable/disable computing operating density from inlet.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class zone_name_5(String, AllowedValuesMixin):
    """
    The name of inlet from which the opreating density is computed.
    """
    _version = '241'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'
    return_type = 'object'

class inlet_temperature_for_operating_density(Group):
    """
    Enable/disable non-zero operating density computed from inlet temperature.
    """
    _version = '241'
    fluent_name = 'inlet-temperature-for-operating-density'
    _python_name = 'inlet_temperature_for_operating_density'
    child_names = ['enable', 'zone_name']
    _child_classes = dict(
        enable=enable_4,
        zone_name=zone_name_5,
    )
    return_type = 'object'

class used_ref_pressure_location(Command):
    """
    See the actual coordinates of reference pressure used.
    """
    _version = '241'
    fluent_name = 'used-ref-pressure-location'
    _python_name = 'used_ref_pressure_location'
    return_type = 'object'

class operating_conditions(Group):
    """
    'operating_conditions' child.
    """
    _version = '241'
    fluent_name = 'operating-conditions'
    _python_name = 'operating_conditions'
    child_names = ['gravity', 'real_gas_state', 'operating_pressure', 'reference_pressure_location', 'reference_pressure_method', 'operating_density', 'operating_temperature', 'inlet_temperature_for_operating_density']
    command_names = ['used_ref_pressure_location']
    _child_classes = dict(
        gravity=gravity,
        real_gas_state=real_gas_state,
        operating_pressure=operating_pressure,
        reference_pressure_location=reference_pressure_location,
        reference_pressure_method=reference_pressure_method,
        operating_density=operating_density,
        operating_temperature=operating_temperature,
        inlet_temperature_for_operating_density=inlet_temperature_for_operating_density,
        used_ref_pressure_location=used_ref_pressure_location,
    )
    return_type = 'object'

class quantity(String, AllowedValuesMixin):
    """
    'quantity' child.
    """
    _version = '241'
    fluent_name = 'quantity'
    _python_name = 'quantity'
    return_type = 'object'

class units_name(String):
    """
    'units_name' child.
    """
    _version = '241'
    fluent_name = 'units-name'
    _python_name = 'units_name'
    return_type = 'object'

class scale_factor(Real):
    """
    'scale_factor' child.
    """
    _version = '241'
    fluent_name = 'scale-factor'
    _python_name = 'scale_factor'
    return_type = 'object'

class offset_1(Real):
    """
    'offset' child.
    """
    _version = '241'
    fluent_name = 'offset'
    _python_name = 'offset'
    return_type = 'object'

class set_units(Command):
    """
    Set unit conversion factors.
    
    Parameters
    ----------
        quantity : str
            'quantity' child.
        units_name : str
            'units_name' child.
        scale_factor : real
            'scale_factor' child.
        offset : real
            'offset' child.
    """
    _version = '241'
    fluent_name = 'set-units'
    _python_name = 'set_units'
    argument_names = ['quantity', 'units_name', 'scale_factor', 'offset']
    _child_classes = dict(
        quantity=quantity,
        units_name=units_name,
        scale_factor=scale_factor,
        offset=offset_1,
    )
    return_type = 'object'

class unit_system(String, AllowedValuesMixin):
    """
    'unit_system' child.
    """
    _version = '241'
    fluent_name = 'unit-system'
    _python_name = 'unit_system'
    return_type = 'object'

class set_unit_system(Command):
    """
    Apply standard set of units to all quantities.
    
    Parameters
    ----------
        unit_system : str
            'unit_system' child.
    """
    _version = '241'
    fluent_name = 'set-unit-system'
    _python_name = 'set_unit_system'
    argument_names = ['unit_system']
    _child_classes = dict(
        unit_system=unit_system,
    )
    return_type = 'object'

class units(Group):
    """
    'units' child.
    """
    _version = '241'
    fluent_name = 'units'
    _python_name = 'units'
    command_names = ['set_units', 'set_unit_system']
    _child_classes = dict(
        set_units=set_units,
        set_unit_system=set_unit_system,
    )
    return_type = 'object'

class general(Group):
    """
    'general' child.
    """
    _version = '241'
    fluent_name = 'general'
    _python_name = 'general'
    child_names = ['solver', 'adjust_solver_defaults_based_on_setup', 'operating_conditions', 'units']
    _child_classes = dict(
        solver=solver,
        adjust_solver_defaults_based_on_setup=adjust_solver_defaults_based_on_setup,
        operating_conditions=operating_conditions,
        units=units,
    )
    return_type = 'object'

class models_1(String, AllowedValuesMixin):
    """
    Multiphase model.
    """
    _version = '241'
    fluent_name = 'models'
    _python_name = 'models'
    return_type = 'object'

class vaporization_pressure(Real):
    """
    Vaporization pressure.
    """
    _version = '241'
    fluent_name = 'vaporization-pressure'
    _python_name = 'vaporization_pressure'
    return_type = 'object'

class non_condensable_gas(Real):
    """
    Non condensable gas.
    """
    _version = '241'
    fluent_name = 'non-condensable-gas'
    _python_name = 'non_condensable_gas'
    return_type = 'object'

class liquid_surface_tension(Real):
    """
    Liquid surface tension.
    """
    _version = '241'
    fluent_name = 'liquid-surface-tension'
    _python_name = 'liquid_surface_tension'
    return_type = 'object'

class bubble_number_density(Real):
    """
    Bubble number density.
    """
    _version = '241'
    fluent_name = 'bubble-number-density'
    _python_name = 'bubble_number_density'
    return_type = 'object'

class number_of_phases(Integer):
    """
    >= 2 and <= 20.
    """
    _version = '241'
    fluent_name = 'number-of-phases'
    _python_name = 'number_of_phases'
    return_type = 'object'

class number_of_eulerian_discrete_phases(IntegerList):
    """
    Sets the number of phases, calculated with the Discrete Phase model.
    The sum of Eulerian and Discrete phases has to be in the range (2,20).
    """
    _version = '241'
    fluent_name = 'number-of-eulerian-discrete-phases'
    _python_name = 'number_of_eulerian_discrete_phases'
    return_type = 'object'

class multiphase(Group):
    """
    Multiphase model.
    """
    _version = '241'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['models', 'vaporization_pressure', 'non_condensable_gas', 'liquid_surface_tension', 'bubble_number_density', 'number_of_phases', 'number_of_eulerian_discrete_phases']
    _child_classes = dict(
        models=models_1,
        vaporization_pressure=vaporization_pressure,
        non_condensable_gas=non_condensable_gas,
        liquid_surface_tension=liquid_surface_tension,
        bubble_number_density=bubble_number_density,
        number_of_phases=number_of_phases,
        number_of_eulerian_discrete_phases=number_of_eulerian_discrete_phases,
    )
    return_type = 'object'

class enabled(Boolean):
    """
    Enable the energy transport model.
    """
    _version = '241'
    fluent_name = 'enabled'
    _python_name = 'enabled'
    return_type = 'object'

class viscous_dissipation(Boolean):
    """
    'viscous_dissipation' child.
    """
    _version = '241'
    fluent_name = 'viscous-dissipation'
    _python_name = 'viscous_dissipation'
    return_type = 'object'

class pressure_work(Boolean):
    """
    'pressure_work' child.
    """
    _version = '241'
    fluent_name = 'pressure-work'
    _python_name = 'pressure_work'
    return_type = 'object'

class kinetic_energy(Boolean):
    """
    'kinetic_energy' child.
    """
    _version = '241'
    fluent_name = 'kinetic-energy'
    _python_name = 'kinetic_energy'
    return_type = 'object'

class inlet_diffusion(Boolean):
    """
    'inlet_diffusion' child.
    """
    _version = '241'
    fluent_name = 'inlet-diffusion'
    _python_name = 'inlet_diffusion'
    return_type = 'object'

class enable_5(Boolean):
    """
    Enable the two-temperature equation model.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class robustness_enhancement(Boolean):
    """
    Apply robustness enhancements in the two-temperature model.
    """
    _version = '241'
    fluent_name = 'robustness-enhancement?'
    _python_name = 'robustness_enhancement'
    return_type = 'object'

class nasa9_enhancement(Boolean):
    """
    Apply nasa9 robustness enhancements in the two-temperature model.
    """
    _version = '241'
    fluent_name = 'nasa9-enhancement?'
    _python_name = 'nasa9_enhancement'
    return_type = 'object'

class set_verbosity(Integer):
    """
    Two-temperature model verbosity option.
    """
    _version = '241'
    fluent_name = 'set-verbosity'
    _python_name = 'set_verbosity'
    return_type = 'object'

class model(String, AllowedValuesMixin):
    """
    The translational-vibrational energy relaxation model.
    """
    _version = '241'
    fluent_name = 'model'
    _python_name = 'model'
    return_type = 'object'

class object_at(Integer):
    """
    Object index to delete.
    """
    _version = '241'
    fluent_name = 'object-at'
    _python_name = 'object_at'
    return_type = 'object'

class list_properties(Command):
    """
    List properties of selected object.
    
    Parameters
    ----------
        object_at : int
            Object index to delete.
    """
    _version = '241'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    argument_names = ['object_at']
    _child_classes = dict(
        object_at=object_at,
    )
    return_type = 'object'

class list_all(Command):
    """
    List all the constants used in the Park's model.
    """
    _version = '241'
    fluent_name = 'list-all'
    _python_name = 'list_all'
    return_type = 'object'

class species_1(String):
    """
    'species_1' child.
    """
    _version = '241'
    fluent_name = 'species-1'
    _python_name = 'species_1'
    return_type = 'object'

class species_2(String):
    """
    'species_2' child.
    """
    _version = '241'
    fluent_name = 'species-2'
    _python_name = 'species_2'
    return_type = 'object'

class coefficient_1(Real):
    """
    'coefficient_1' child.
    """
    _version = '241'
    fluent_name = 'coefficient-1'
    _python_name = 'coefficient_1'
    return_type = 'object'

class coefficient_2(Real):
    """
    'coefficient_2' child.
    """
    _version = '241'
    fluent_name = 'coefficient-2'
    _python_name = 'coefficient_2'
    return_type = 'object'

class expert_child(Group):
    """
    'child_object_type' of expert.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'expert_child'
    child_names = ['species_1', 'species_2', 'coefficient_1', 'coefficient_2']
    _child_classes = dict(
        species_1=species_1,
        species_2=species_2,
        coefficient_1=coefficient_1,
        coefficient_2=coefficient_2,
    )
    return_type = 'object'

class expert(ListObject[expert_child]):
    """
    Expert options in Park's model.
    """
    _version = '241'
    fluent_name = 'expert'
    _python_name = 'expert'
    command_names = ['list_properties', 'list_all']
    _child_classes = dict(
        list_properties=list_properties,
        list_all=list_all,
    )
    child_object_type = expert_child
    return_type = 'object'

class translational_vibrational_energy_relaxation(Group):
    """
    Define translational-vibrational energy relaxation model.
    """
    _version = '241'
    fluent_name = 'translational-vibrational-energy-relaxation'
    _python_name = 'translational_vibrational_energy_relaxation'
    child_names = ['model', 'expert']
    _child_classes = dict(
        model=model,
        expert=expert,
    )
    return_type = 'object'

class two_temperature(Group):
    """
    Define two-temperature model object.
    """
    _version = '241'
    fluent_name = 'two-temperature'
    _python_name = 'two_temperature'
    child_names = ['enable', 'robustness_enhancement', 'nasa9_enhancement', 'set_verbosity', 'translational_vibrational_energy_relaxation']
    _child_classes = dict(
        enable=enable_5,
        robustness_enhancement=robustness_enhancement,
        nasa9_enhancement=nasa9_enhancement,
        set_verbosity=set_verbosity,
        translational_vibrational_energy_relaxation=translational_vibrational_energy_relaxation,
    )
    return_type = 'object'

class energy(Group):
    """
    The energy transport model settings.
    """
    _version = '241'
    fluent_name = 'energy'
    _python_name = 'energy'
    child_names = ['enabled', 'viscous_dissipation', 'pressure_work', 'kinetic_energy', 'inlet_diffusion', 'two_temperature']
    _child_classes = dict(
        enabled=enabled,
        viscous_dissipation=viscous_dissipation,
        pressure_work=pressure_work,
        kinetic_energy=kinetic_energy,
        inlet_diffusion=inlet_diffusion,
        two_temperature=two_temperature,
    )
    return_type = 'object'

class model_1(String, AllowedValuesMixin):
    """
    'model' child.
    """
    _version = '241'
    fluent_name = 'model'
    _python_name = 'model'
    return_type = 'object'

class spalart_allmaras_production(String, AllowedValuesMixin):
    """
    Enable/disable strain/vorticity production in Spalart-Allmaras model.
    """
    _version = '241'
    fluent_name = 'spalart-allmaras-production'
    _python_name = 'spalart_allmaras_production'
    return_type = 'object'

class k_epsilon_model(String, AllowedValuesMixin):
    """
    'k_epsilon_model' child.
    """
    _version = '241'
    fluent_name = 'k-epsilon-model'
    _python_name = 'k_epsilon_model'
    return_type = 'object'

class k_omega_model(String, AllowedValuesMixin):
    """
    'k_omega_model' child.
    """
    _version = '241'
    fluent_name = 'k-omega-model'
    _python_name = 'k_omega_model'
    return_type = 'object'

class kw_low_re_correction(Boolean):
    """
    Enable/disable the k-omega low Re option.
    """
    _version = '241'
    fluent_name = 'kw-low-re-correction'
    _python_name = 'kw_low_re_correction'
    return_type = 'object'

class kw_shear_correction(Boolean):
    """
    Enable/disable the k-omega shear-flow correction option.
    """
    _version = '241'
    fluent_name = 'kw-shear-correction'
    _python_name = 'kw_shear_correction'
    return_type = 'object'

class k_omega_options(Group):
    """
    'k_omega_options' child.
    """
    _version = '241'
    fluent_name = 'k-omega-options'
    _python_name = 'k_omega_options'
    child_names = ['kw_low_re_correction', 'kw_shear_correction']
    _child_classes = dict(
        kw_low_re_correction=kw_low_re_correction,
        kw_shear_correction=kw_shear_correction,
    )
    return_type = 'object'

class wall_distance_free(Boolean):
    """
    Enable/disable wall-distance-free version of GEKO model.
    """
    _version = '241'
    fluent_name = 'wall-distance-free?'
    _python_name = 'wall_distance_free'
    return_type = 'object'

class cjet(Real):
    """
    The GEKO model coefficient CJET.
    """
    _version = '241'
    fluent_name = 'cjet'
    _python_name = 'cjet'
    return_type = 'object'

class creal(Real):
    """
    The GEKO model coefficient CREAL.
    """
    _version = '241'
    fluent_name = 'creal'
    _python_name = 'creal'
    return_type = 'object'

class cnw_sub(Real):
    """
    The GEKO model coefficient CNW-SUB.
    """
    _version = '241'
    fluent_name = 'cnw-sub'
    _python_name = 'cnw_sub'
    return_type = 'object'

class cjet_aux(Real):
    """
    The GEKO model coefficient CJET_AUX.
    """
    _version = '241'
    fluent_name = 'cjet-aux'
    _python_name = 'cjet_aux'
    return_type = 'object'

class cbf_lam(Real):
    """
    The GEKO model coefficient CBF_LAM.
    """
    _version = '241'
    fluent_name = 'cbf-lam'
    _python_name = 'cbf_lam'
    return_type = 'object'

class cbf_tur(Real):
    """
    The GEKO model coefficient CBF_TUR.
    """
    _version = '241'
    fluent_name = 'cbf-tur'
    _python_name = 'cbf_tur'
    return_type = 'object'

class geko_defaults(Command):
    """
    Set GEKO options to default.
    """
    _version = '241'
    fluent_name = 'geko-defaults'
    _python_name = 'geko_defaults'
    return_type = 'object'

class geko_options(Group):
    """
    'geko_options' child.
    """
    _version = '241'
    fluent_name = 'geko-options'
    _python_name = 'geko_options'
    child_names = ['wall_distance_free', 'cjet', 'creal', 'cnw_sub', 'cjet_aux', 'cbf_lam', 'cbf_tur']
    command_names = ['geko_defaults']
    _child_classes = dict(
        wall_distance_free=wall_distance_free,
        cjet=cjet,
        creal=creal,
        cnw_sub=cnw_sub,
        cjet_aux=cjet_aux,
        cbf_lam=cbf_lam,
        cbf_tur=cbf_tur,
        geko_defaults=geko_defaults,
    )
    return_type = 'object'

class differential_viscosity_model(Boolean):
    """
    Enable/disable the differential-viscosity model.
    """
    _version = '241'
    fluent_name = 'differential-viscosity-model'
    _python_name = 'differential_viscosity_model'
    return_type = 'object'

class swirl_dominated_flow(Boolean):
    """
    Enable/disable swirl corrections for rng-model.
    """
    _version = '241'
    fluent_name = 'swirl-dominated-flow'
    _python_name = 'swirl_dominated_flow'
    return_type = 'object'

class rng_options(Group):
    """
    'rng_options' child.
    """
    _version = '241'
    fluent_name = 'rng-options'
    _python_name = 'rng_options'
    child_names = ['differential_viscosity_model', 'swirl_dominated_flow']
    _child_classes = dict(
        differential_viscosity_model=differential_viscosity_model,
        swirl_dominated_flow=swirl_dominated_flow,
    )
    return_type = 'object'

class wall_treatment(String, AllowedValuesMixin):
    """
    'wall_treatment' child.
    """
    _version = '241'
    fluent_name = 'wall-treatment'
    _python_name = 'wall_treatment'
    return_type = 'object'

class user_defined_1(String, AllowedValuesMixin):
    """
    'user_defined' child.
    """
    _version = '241'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'
    return_type = 'object'

class pressure_gradient_effects(Boolean):
    """
    Enable/disable wall function pressure-gradient effects.
    """
    _version = '241'
    fluent_name = 'pressure-gradient-effects'
    _python_name = 'pressure_gradient_effects'
    return_type = 'object'

class thermal_effects(Boolean):
    """
    Enable/disable wall function thermal effects.
    """
    _version = '241'
    fluent_name = 'thermal-effects'
    _python_name = 'thermal_effects'
    return_type = 'object'

class enhanced_wall_treatment_options(Group):
    """
    'enhanced_wall_treatment_options' child.
    """
    _version = '241'
    fluent_name = 'enhanced-wall-treatment-options'
    _python_name = 'enhanced_wall_treatment_options'
    child_names = ['pressure_gradient_effects', 'thermal_effects']
    _child_classes = dict(
        pressure_gradient_effects=pressure_gradient_effects,
        thermal_effects=thermal_effects,
    )
    return_type = 'object'

class wall_omega_treatment(String, AllowedValuesMixin):
    """
    A wall omega treatment.
    """
    _version = '241'
    fluent_name = 'wall-omega-treatment'
    _python_name = 'wall_omega_treatment'
    return_type = 'object'

class near_wall_treatment(Group):
    """
    'near_wall_treatment' child.
    """
    _version = '241'
    fluent_name = 'near-wall-treatment'
    _python_name = 'near_wall_treatment'
    child_names = ['wall_treatment', 'user_defined', 'enhanced_wall_treatment_options', 'wall_omega_treatment']
    _child_classes = dict(
        wall_treatment=wall_treatment,
        user_defined=user_defined_1,
        enhanced_wall_treatment_options=enhanced_wall_treatment_options,
        wall_omega_treatment=wall_omega_treatment,
    )
    return_type = 'object'

class reynolds_stress_model(String, AllowedValuesMixin):
    """
    'reynolds_stress_model' child.
    """
    _version = '241'
    fluent_name = 'reynolds-stress-model'
    _python_name = 'reynolds_stress_model'
    return_type = 'object'

class subgrid_scale_model(String, AllowedValuesMixin):
    """
    'subgrid_scale_model' child.
    """
    _version = '241'
    fluent_name = 'subgrid-scale-model'
    _python_name = 'subgrid_scale_model'
    return_type = 'object'

class dynamic_stress(Boolean):
    """
    Enable/Disable Dynamic model option.
    """
    _version = '241'
    fluent_name = 'dynamic-stress'
    _python_name = 'dynamic_stress'
    return_type = 'object'

class dynamic_energy_flux(Boolean):
    """
    Enable/disable the dynamic sub-grid scale turbulent Prandtl Number.
    """
    _version = '241'
    fluent_name = 'dynamic-energy-flux'
    _python_name = 'dynamic_energy_flux'
    return_type = 'object'

class dynamic_scalar_flux(Boolean):
    """
    Enable/Disable dynamic Schmidt Number.
    """
    _version = '241'
    fluent_name = 'dynamic-scalar-flux'
    _python_name = 'dynamic_scalar_flux'
    return_type = 'object'

class subgrid_dynamic_fvar(Boolean):
    """
    Enable/Disable the dynamic subgrid-scale mixture fraction variance model.
    """
    _version = '241'
    fluent_name = 'subgrid-dynamic-fvar'
    _python_name = 'subgrid_dynamic_fvar'
    return_type = 'object'

class cvreman(Real):
    """
    The Vreman Model constant.
    """
    _version = '241'
    fluent_name = 'cvreman'
    _python_name = 'cvreman'
    return_type = 'object'

class csigma(Real):
    """
    The Sigma Model constant.
    """
    _version = '241'
    fluent_name = 'csigma'
    _python_name = 'csigma'
    return_type = 'object'

class near_wall_rans_layer(Boolean):
    """
    Enable/Disable Near Wall RANS Layer (WMLES) option.
    """
    _version = '241'
    fluent_name = 'near-wall-rans-layer?'
    _python_name = 'near_wall_rans_layer'
    return_type = 'object'

class cw1(Real):
    """
    The Wall Model coefficient Cw1.
    """
    _version = '241'
    fluent_name = 'cw1'
    _python_name = 'cw1'
    return_type = 'object'

class cw2(Real):
    """
    The Wall Model coefficient Cw2.
    """
    _version = '241'
    fluent_name = 'cw2'
    _python_name = 'cw2'
    return_type = 'object'

class les_model_options(Group):
    """
    'les_model_options' child.
    """
    _version = '241'
    fluent_name = 'les-model-options'
    _python_name = 'les_model_options'
    child_names = ['dynamic_stress', 'dynamic_energy_flux', 'dynamic_scalar_flux', 'subgrid_dynamic_fvar', 'cvreman', 'csigma', 'near_wall_rans_layer', 'cw1', 'cw2']
    _child_classes = dict(
        dynamic_stress=dynamic_stress,
        dynamic_energy_flux=dynamic_energy_flux,
        dynamic_scalar_flux=dynamic_scalar_flux,
        subgrid_dynamic_fvar=subgrid_dynamic_fvar,
        cvreman=cvreman,
        csigma=csigma,
        near_wall_rans_layer=near_wall_rans_layer,
        cw1=cw1,
        cw2=cw2,
    )
    return_type = 'object'

class solve_tke(Boolean):
    """
    Enable/disable the solution of T.K.E. in RSM model.
    """
    _version = '241'
    fluent_name = 'solve-tke'
    _python_name = 'solve_tke'
    return_type = 'object'

class wall_echo(Boolean):
    """
    Enable/disable wall-echo effects in RSM model.
    """
    _version = '241'
    fluent_name = 'wall-echo'
    _python_name = 'wall_echo'
    return_type = 'object'

class reynolds_stress_options(Group):
    """
    'reynolds_stress_options' child.
    """
    _version = '241'
    fluent_name = 'reynolds-stress-options'
    _python_name = 'reynolds_stress_options'
    child_names = ['solve_tke', 'wall_echo']
    _child_classes = dict(
        solve_tke=solve_tke,
        wall_echo=wall_echo,
    )
    return_type = 'object'

class rans_model(String, AllowedValuesMixin):
    """
    'rans_model' child.
    """
    _version = '241'
    fluent_name = 'rans-model'
    _python_name = 'rans_model'
    return_type = 'object'

class all_len_modified(Boolean):
    """
    Modify all length scales in nut equation? (if no, destruction term only).
    """
    _version = '241'
    fluent_name = 'all-len-modified?'
    _python_name = 'all_len_modified'
    return_type = 'object'

class des_limiter_option(String, AllowedValuesMixin):
    """
    DES limiter option.
    """
    _version = '241'
    fluent_name = 'des-limiter-option'
    _python_name = 'des_limiter_option'
    return_type = 'object'

class des_options(Group):
    """
    'des_options' child.
    """
    _version = '241'
    fluent_name = 'des-options'
    _python_name = 'des_options'
    child_names = ['all_len_modified', 'des_limiter_option']
    _child_classes = dict(
        all_len_modified=all_len_modified,
        des_limiter_option=des_limiter_option,
    )
    return_type = 'object'

class transition_module(String, AllowedValuesMixin):
    """
    Enable/disable a transition model to account for transitional effects.
    """
    _version = '241'
    fluent_name = 'transition-module'
    _python_name = 'transition_module'
    return_type = 'object'

class hybrid_rans_les(String, AllowedValuesMixin):
    """
    Enable/disable a hybrid RANS-LES model.
    """
    _version = '241'
    fluent_name = 'hybrid-rans-les'
    _python_name = 'hybrid_rans_les'
    return_type = 'object'

class hybrid_model(String, AllowedValuesMixin):
    """
    The SBES / SDES hybrid model.
    """
    _version = '241'
    fluent_name = 'hybrid-model'
    _python_name = 'hybrid_model'
    return_type = 'object'

class user_defined_2(String, AllowedValuesMixin):
    """
    User-Defined Function for SBES.
    """
    _version = '241'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'
    return_type = 'object'

class update_interval_k_omega(Integer):
    """
    An integer value how often the k and omega equations are updated in a transient SBES run.
    """
    _version = '241'
    fluent_name = 'update-interval-k-omega'
    _python_name = 'update_interval_k_omega'
    return_type = 'object'

class les_subgrid_scale_model(String, AllowedValuesMixin):
    """
    The LES subgrid-scale model used in SBES.
    """
    _version = '241'
    fluent_name = 'les-subgrid-scale-model'
    _python_name = 'les_subgrid_scale_model'
    return_type = 'object'

class les_subgrid_dynamic_fvar(Boolean):
    """
    Enable/disable the dynamic subgrid-scale mixture fraction variance model.
    """
    _version = '241'
    fluent_name = 'les-subgrid-dynamic-fvar?'
    _python_name = 'les_subgrid_dynamic_fvar'
    return_type = 'object'

class sbes_options(Group):
    """
    'sbes_options' child.
    """
    _version = '241'
    fluent_name = 'sbes-options'
    _python_name = 'sbes_options'
    child_names = ['hybrid_model', 'user_defined', 'update_interval_k_omega', 'les_subgrid_scale_model', 'les_subgrid_dynamic_fvar']
    _child_classes = dict(
        hybrid_model=hybrid_model,
        user_defined=user_defined_2,
        update_interval_k_omega=update_interval_k_omega,
        les_subgrid_scale_model=les_subgrid_scale_model,
        les_subgrid_dynamic_fvar=les_subgrid_dynamic_fvar,
    )
    return_type = 'object'

class f_length(String):
    """
    User-defined transition correlations.
    """
    _version = '241'
    fluent_name = 'f_length'
    _python_name = 'f_length'
    return_type = 'object'

class re_theta_c(String):
    """
    User-defined transition correlations.
    """
    _version = '241'
    fluent_name = 're_theta_c'
    _python_name = 're_theta_c'
    return_type = 'object'

class re_theta_t(String):
    """
    User-defined transition correlations.
    """
    _version = '241'
    fluent_name = 're_theta_t'
    _python_name = 're_theta_t'
    return_type = 'object'

class user_defined_transition(Group):
    """
    User-defined transition correlations.
    """
    _version = '241'
    fluent_name = 'user-defined-transition'
    _python_name = 'user_defined_transition'
    child_names = ['f_length', 're_theta_c', 're_theta_t']
    _child_classes = dict(
        f_length=f_length,
        re_theta_c=re_theta_c,
        re_theta_t=re_theta_t,
    )
    return_type = 'object'

class viscous_heating(Boolean):
    """
    Compute viscous energy dissipation.
    """
    _version = '241'
    fluent_name = 'viscous-heating'
    _python_name = 'viscous_heating'
    return_type = 'object'

class low_pressure_boundary_slip(Boolean):
    """
    Enable/disable the slip boundary formulation for low-pressure gas systems.
    """
    _version = '241'
    fluent_name = 'low-pressure-boundary-slip?'
    _python_name = 'low_pressure_boundary_slip'
    return_type = 'object'

class curvature_correction(Boolean):
    """
    Enable/disable the curvature correction.
    """
    _version = '241'
    fluent_name = 'curvature-correction'
    _python_name = 'curvature_correction'
    return_type = 'object'

class corner_flow_correction(Boolean):
    """
    Enable/disable the corner flow correction.
    """
    _version = '241'
    fluent_name = 'corner-flow-correction'
    _python_name = 'corner_flow_correction'
    return_type = 'object'

class compressibility_effects(Boolean):
    """
    Enable/disable the compressibility correction option.
    """
    _version = '241'
    fluent_name = 'compressibility-effects'
    _python_name = 'compressibility_effects'
    return_type = 'object'

class production_kato_launder_enabled(Boolean):
    """
    Enable/disable Kato-Launder modification for production.
    """
    _version = '241'
    fluent_name = 'production-kato-launder-enabled?'
    _python_name = 'production_kato_launder_enabled'
    return_type = 'object'

class enabled_1(Boolean):
    """
    Enable/disable the Production Limiter.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class clip_factor(Real):
    """
    Clip Factor for Production Limiter.
    """
    _version = '241'
    fluent_name = 'clip-factor'
    _python_name = 'clip_factor'
    return_type = 'object'

class production_limiter(Group):
    """
    'production_limiter' child.
    """
    _version = '241'
    fluent_name = 'production-limiter'
    _python_name = 'production_limiter'
    child_names = ['enabled', 'clip_factor']
    _child_classes = dict(
        enabled=enabled_1,
        clip_factor=clip_factor,
    )
    return_type = 'object'

class turb_buoyancy_effects(String, AllowedValuesMixin):
    """
    Buoyancy effects on turbulence.
    """
    _version = '241'
    fluent_name = 'turb-buoyancy-effects'
    _python_name = 'turb_buoyancy_effects'
    return_type = 'object'

class kw_buoyancy_effects(Boolean):
    """
    Enable/disable effects of buoyancy on k-omega turbulence model.
    """
    _version = '241'
    fluent_name = 'kw-buoyancy-effects?'
    _python_name = 'kw_buoyancy_effects'
    return_type = 'object'

class enable_geko(Boolean):
    """
    Enable/disable the GEKO option for RSM or EARSM.
    """
    _version = '241'
    fluent_name = 'enable-geko?'
    _python_name = 'enable_geko'
    return_type = 'object'

class options_1(Group):
    """
    'options' child.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['viscous_heating', 'low_pressure_boundary_slip', 'curvature_correction', 'corner_flow_correction', 'compressibility_effects', 'production_kato_launder_enabled', 'production_limiter', 'turb_buoyancy_effects', 'kw_buoyancy_effects', 'enable_geko']
    _child_classes = dict(
        viscous_heating=viscous_heating,
        low_pressure_boundary_slip=low_pressure_boundary_slip,
        curvature_correction=curvature_correction,
        corner_flow_correction=corner_flow_correction,
        compressibility_effects=compressibility_effects,
        production_kato_launder_enabled=production_kato_launder_enabled,
        production_limiter=production_limiter,
        turb_buoyancy_effects=turb_buoyancy_effects,
        kw_buoyancy_effects=kw_buoyancy_effects,
        enable_geko=enable_geko,
    )
    return_type = 'object'

class dispersion_force_in_momentum(Boolean):
    """
    Enable/Disable dispersion force in momentum?.
    """
    _version = '241'
    fluent_name = 'dispersion-force-in-momentum?'
    _python_name = 'dispersion_force_in_momentum'
    return_type = 'object'

class dispersion_in_relative_velocity(Boolean):
    """
    Enable/Disable dispersion in relative velocity?.
    """
    _version = '241'
    fluent_name = 'dispersion-in-relative-velocity?'
    _python_name = 'dispersion_in_relative_velocity'
    return_type = 'object'

class multiphase_options(Group):
    """
    'multiphase_options' child.
    """
    _version = '241'
    fluent_name = 'multiphase-options'
    _python_name = 'multiphase_options'
    child_names = ['dispersion_force_in_momentum', 'dispersion_in_relative_velocity']
    _child_classes = dict(
        dispersion_force_in_momentum=dispersion_force_in_momentum,
        dispersion_in_relative_velocity=dispersion_in_relative_velocity,
    )
    return_type = 'object'

class turbulence_multiphase_models(String, AllowedValuesMixin):
    """
    'turbulence_multiphase_models' child.
    """
    _version = '241'
    fluent_name = 'turbulence-multiphase-models'
    _python_name = 'turbulence_multiphase_models'
    return_type = 'object'

class rsm_multiphase_models(String, AllowedValuesMixin):
    """
    'rsm_multiphase_models' child.
    """
    _version = '241'
    fluent_name = 'rsm-multiphase-models'
    _python_name = 'rsm_multiphase_models'
    return_type = 'object'

class subgrid_turbulence_contribution_aiad(Boolean):
    """
    Enable/disable the Subgrid Turbulence Contribution for the AIAD model.
    """
    _version = '241'
    fluent_name = 'subgrid-turbulence-contribution-aiad?'
    _python_name = 'subgrid_turbulence_contribution_aiad'
    return_type = 'object'

class multiphase_turbulence(Group):
    """
    'multiphase_turbulence' child.
    """
    _version = '241'
    fluent_name = 'multiphase-turbulence'
    _python_name = 'multiphase_turbulence'
    child_names = ['multiphase_options', 'turbulence_multiphase_models', 'rsm_multiphase_models', 'subgrid_turbulence_contribution_aiad']
    _child_classes = dict(
        multiphase_options=multiphase_options,
        turbulence_multiphase_models=turbulence_multiphase_models,
        rsm_multiphase_models=rsm_multiphase_models,
        subgrid_turbulence_contribution_aiad=subgrid_turbulence_contribution_aiad,
    )
    return_type = 'object'

class kw_vorticity_based_production(Boolean):
    """
    Enable/disable vorticity based production.
    """
    _version = '241'
    fluent_name = 'kw-vorticity-based-production?'
    _python_name = 'kw_vorticity_based_production'
    return_type = 'object'

class kw_add_sas(Boolean):
    """
    Enable/disable the SAS-mode with the current turbulence model.
    """
    _version = '241'
    fluent_name = 'kw-add-sas?'
    _python_name = 'kw_add_sas'
    return_type = 'object'

class kw_add_des(Boolean):
    """
    Enable/disable DES-mode with the current turbulence model.
    """
    _version = '241'
    fluent_name = 'kw-add-des?'
    _python_name = 'kw_add_des'
    return_type = 'object'

class enable_turb_damping(Boolean):
    """
    Enable/Disable Turbulence Damping.
    """
    _version = '241'
    fluent_name = 'enable-turb-damping?'
    _python_name = 'enable_turb_damping'
    return_type = 'object'

class turb_damping_factor(Real):
    """
    Damping Factor.
    """
    _version = '241'
    fluent_name = 'turb-damping-factor'
    _python_name = 'turb_damping_factor'
    return_type = 'object'

class turbulence_damping(Group):
    """
    'turbulence_damping' child.
    """
    _version = '241'
    fluent_name = 'turbulence-damping'
    _python_name = 'turbulence_damping'
    child_names = ['enable_turb_damping', 'turb_damping_factor']
    _child_classes = dict(
        enable_turb_damping=enable_turb_damping,
        turb_damping_factor=turb_damping_factor,
    )
    return_type = 'object'

class rke_cmu_rotation_term(Boolean):
    """
    Enable/disable inclusion of omega in the Cmu definition.
    """
    _version = '241'
    fluent_name = 'rke-cmu-rotation-term?'
    _python_name = 'rke_cmu_rotation_term'
    return_type = 'object'

class turb_non_newtonian(Boolean):
    """
    Enable/disable turbulence for non-Newtonian fluids.
    """
    _version = '241'
    fluent_name = 'turb-non-newtonian?'
    _python_name = 'turb_non_newtonian'
    return_type = 'object'

class non_newtonian_modification(Boolean):
    """
    Enable/disable non-Newtonian modification for Lam-Bremhorst model.
    """
    _version = '241'
    fluent_name = 'non-newtonian-modification?'
    _python_name = 'non_newtonian_modification'
    return_type = 'object'

class turb_pk_compressible(Boolean):
    """
    Enable/disable turbulent production due to compressible divergence.
    """
    _version = '241'
    fluent_name = 'turb-pk-compressible?'
    _python_name = 'turb_pk_compressible'
    return_type = 'object'

class thermal_p_function(Boolean):
    """
    Enable/disable the Jayatilleke P function.
    """
    _version = '241'
    fluent_name = 'thermal-p-function?'
    _python_name = 'thermal_p_function'
    return_type = 'object'

class restore_sst_v61(Boolean):
    """
    Enable/disable SST formulation of v6.1.
    """
    _version = '241'
    fluent_name = 'restore-sst-v61?'
    _python_name = 'restore_sst_v61'
    return_type = 'object'

class turbulence_expert(Group):
    """
    'turbulence_expert' child.
    """
    _version = '241'
    fluent_name = 'turbulence-expert'
    _python_name = 'turbulence_expert'
    child_names = ['kw_vorticity_based_production', 'kw_add_sas', 'kw_add_des', 'turbulence_damping', 'rke_cmu_rotation_term', 'turb_non_newtonian', 'non_newtonian_modification', 'turb_pk_compressible', 'thermal_p_function', 'restore_sst_v61']
    _child_classes = dict(
        kw_vorticity_based_production=kw_vorticity_based_production,
        kw_add_sas=kw_add_sas,
        kw_add_des=kw_add_des,
        turbulence_damping=turbulence_damping,
        rke_cmu_rotation_term=rke_cmu_rotation_term,
        turb_non_newtonian=turb_non_newtonian,
        non_newtonian_modification=non_newtonian_modification,
        turb_pk_compressible=turb_pk_compressible,
        thermal_p_function=thermal_p_function,
        restore_sst_v61=restore_sst_v61,
    )
    return_type = 'object'

class crossflow_transition(Boolean):
    """
    Enable/disable crossflow transition for the intermittency transition model.
    """
    _version = '241'
    fluent_name = 'crossflow-transition?'
    _python_name = 'crossflow_transition'
    return_type = 'object'

class critical_reynolds_number_correlation(String):
    """
    The critical Reynolds number correlation.
    """
    _version = '241'
    fluent_name = 'critical-reynolds-number-correlation'
    _python_name = 'critical_reynolds_number_correlation'
    return_type = 'object'

class clambda_scale(Real):
    """
    The algebraic transition model coefficient CLAMBDA_SCALE.
    """
    _version = '241'
    fluent_name = 'clambda-scale'
    _python_name = 'clambda_scale'
    return_type = 'object'

class capg_hightu(Real):
    """
    The algebraic transition model coefficient CAPG_HIGHTU.
    """
    _version = '241'
    fluent_name = 'capg-hightu'
    _python_name = 'capg_hightu'
    return_type = 'object'

class cfpg_hightu(Real):
    """
    The algebraic transition model coefficient CFPG_HIGHTU.
    """
    _version = '241'
    fluent_name = 'cfpg-hightu'
    _python_name = 'cfpg_hightu'
    return_type = 'object'

class capg_lowtu(Real):
    """
    The algebraic transition model coefficient CAPG_LOWTU.
    """
    _version = '241'
    fluent_name = 'capg-lowtu'
    _python_name = 'capg_lowtu'
    return_type = 'object'

class cfpg_lowtu(Real):
    """
    The algebraic transition model coefficient CFPG_LOWTU.
    """
    _version = '241'
    fluent_name = 'cfpg-lowtu'
    _python_name = 'cfpg_lowtu'
    return_type = 'object'

class ctu_hightu(Real):
    """
    The algebraic transition model coefficient CTU_HIGHTU.
    """
    _version = '241'
    fluent_name = 'ctu-hightu'
    _python_name = 'ctu_hightu'
    return_type = 'object'

class ctu_lowtu(Real):
    """
    The algebraic transition model coefficient CTU_LOWTU.
    """
    _version = '241'
    fluent_name = 'ctu-lowtu'
    _python_name = 'ctu_lowtu'
    return_type = 'object'

class rec_max(Real):
    """
    The algebraic transition model coefficient REC_MAX.
    """
    _version = '241'
    fluent_name = 'rec-max'
    _python_name = 'rec_max'
    return_type = 'object'

class rec_c1(Real):
    """
    The algebraic transition model coefficient REC_C1.
    """
    _version = '241'
    fluent_name = 'rec-c1'
    _python_name = 'rec_c1'
    return_type = 'object'

class rec_c2(Real):
    """
    The algebraic transition model coefficient REC_C2.
    """
    _version = '241'
    fluent_name = 'rec-c2'
    _python_name = 'rec_c2'
    return_type = 'object'

class cbubble_c1(Real):
    """
    The algebraic transition model coefficient CBUBBLE_C1.
    """
    _version = '241'
    fluent_name = 'cbubble-c1'
    _python_name = 'cbubble_c1'
    return_type = 'object'

class cbubble_c2(Real):
    """
    The algebraic transition model coefficient CBUBBLE_C2.
    """
    _version = '241'
    fluent_name = 'cbubble-c2'
    _python_name = 'cbubble_c2'
    return_type = 'object'

class rv1_switch(Real):
    """
    The algebraic transition model coefficient RV1_SWITCH.
    """
    _version = '241'
    fluent_name = 'rv1-switch'
    _python_name = 'rv1_switch'
    return_type = 'object'

class transition_model_options(Group):
    """
    'transition_model_options' child.
    """
    _version = '241'
    fluent_name = 'transition-model-options'
    _python_name = 'transition_model_options'
    child_names = ['crossflow_transition', 'critical_reynolds_number_correlation', 'clambda_scale', 'capg_hightu', 'cfpg_hightu', 'capg_lowtu', 'cfpg_lowtu', 'ctu_hightu', 'ctu_lowtu', 'rec_max', 'rec_c1', 'rec_c2', 'cbubble_c1', 'cbubble_c2', 'rv1_switch']
    _child_classes = dict(
        crossflow_transition=crossflow_transition,
        critical_reynolds_number_correlation=critical_reynolds_number_correlation,
        clambda_scale=clambda_scale,
        capg_hightu=capg_hightu,
        cfpg_hightu=cfpg_hightu,
        capg_lowtu=capg_lowtu,
        cfpg_lowtu=cfpg_lowtu,
        ctu_hightu=ctu_hightu,
        ctu_lowtu=ctu_lowtu,
        rec_max=rec_max,
        rec_c1=rec_c1,
        rec_c2=rec_c2,
        cbubble_c1=cbubble_c1,
        cbubble_c2=cbubble_c2,
        rv1_switch=rv1_switch,
    )
    return_type = 'object'

class enable_roughness_correlation(Boolean):
    """
    Enable/Disable Transition-SST roughness correlation?.
    """
    _version = '241'
    fluent_name = 'enable-roughness-correlation?'
    _python_name = 'enable_roughness_correlation'
    return_type = 'object'

class roughness_correlation_fcn(String, AllowedValuesMixin):
    """
    'roughness_correlation_fcn' child.
    """
    _version = '241'
    fluent_name = 'roughness-correlation-fcn'
    _python_name = 'roughness_correlation_fcn'
    return_type = 'object'

class geometric_roughness_ht_val(Real):
    """
    Geometric Roughness Height.
    """
    _version = '241'
    fluent_name = 'geometric-roughness-ht-val'
    _python_name = 'geometric_roughness_ht_val'
    return_type = 'object'

class transition_sst_option(Group):
    """
    'transition_sst_option' child.
    """
    _version = '241'
    fluent_name = 'transition-sst-option'
    _python_name = 'transition_sst_option'
    child_names = ['enable_roughness_correlation', 'roughness_correlation_fcn', 'geometric_roughness_ht_val']
    _child_classes = dict(
        enable_roughness_correlation=enable_roughness_correlation,
        roughness_correlation_fcn=roughness_correlation_fcn,
        geometric_roughness_ht_val=geometric_roughness_ht_val,
    )
    return_type = 'object'

class subgrid_scale_turb_visc(String, AllowedValuesMixin):
    """
    'subgrid_scale_turb_visc' child.
    """
    _version = '241'
    fluent_name = 'subgrid-scale-turb-visc'
    _python_name = 'subgrid_scale_turb_visc'
    return_type = 'object'

class name_list(StringList, AllowedValuesMixin):
    """
    Objects to be deleted.
    """
    _version = '241'
    fluent_name = 'name-list'
    _python_name = 'name_list'
    return_type = 'object'

class delete_1(CommandWithPositionalArgs):
    """
    Delete selected objects.
    
    Parameters
    ----------
        name_list : List
            Objects to be deleted.
    """
    _version = '241'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['name_list']
    _child_classes = dict(
        name_list=name_list,
    )
    return_type = 'object'

class list(Command):
    """
    List the names of the objects.
    """
    _version = '241'
    fluent_name = 'list'
    _python_name = 'list'
    return_type = 'object'

class object_name(String, AllowedValuesMixin):
    """
    Object for which properties are to be listed.
    """
    _version = '241'
    fluent_name = 'object-name'
    _python_name = 'object_name'
    return_type = 'object'

class list_properties_1(Command):
    """
    List active properties of the object.
    
    Parameters
    ----------
        object_name : str
            Object for which properties are to be listed.
    """
    _version = '241'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name,
    )
    return_type = 'object'

class from_(String, AllowedValuesMixin):
    """
    The object to duplicate.
    """
    _version = '241'
    fluent_name = 'from'
    _python_name = 'from_'
    return_type = 'object'

class to(String):
    """
    The name of the new object.
    """
    _version = '241'
    fluent_name = 'to'
    _python_name = 'to'
    return_type = 'object'

class make_a_copy(Command):
    """
    Create a copy of the object.
    
    Parameters
    ----------
        from_ : str
            The object to duplicate.
        to : str
            The name of the new object.
    """
    _version = '241'
    fluent_name = 'make-a-copy'
    _python_name = 'make_a_copy'
    argument_names = ['from_', 'to']
    _child_classes = dict(
        from_=from_,
        to=to,
    )
    return_type = 'object'

class turb_visc_func_mf_child(String, AllowedValuesMixin):
    """
    'child_object_type' of turb_visc_func_mf.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'turb_visc_func_mf_child'
    return_type = 'object'

class turb_visc_func_mf(NamedObject[turb_visc_func_mf_child], _NonCreatableNamedObjectMixin[turb_visc_func_mf_child]):
    """
    'turb_visc_func_mf' child.
    """
    _version = '241'
    fluent_name = 'turb-visc-func-mf'
    _python_name = 'turb_visc_func_mf'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = turb_visc_func_mf_child
    return_type = 'object'

class turb_visc_func(String, AllowedValuesMixin):
    """
    'turb_visc_func' child.
    """
    _version = '241'
    fluent_name = 'turb-visc-func'
    _python_name = 'turb_visc_func'
    return_type = 'object'

class tke_prandtl(String, AllowedValuesMixin):
    """
    TKE prandtl number function.
    """
    _version = '241'
    fluent_name = 'tke-prandtl'
    _python_name = 'tke_prandtl'
    return_type = 'object'

class tdr_prandtl(String, AllowedValuesMixin):
    """
    TDR prandtl number function.
    """
    _version = '241'
    fluent_name = 'tdr-prandtl'
    _python_name = 'tdr_prandtl'
    return_type = 'object'

class sdr_prandtl(String, AllowedValuesMixin):
    """
    SDR prandtl number function.
    """
    _version = '241'
    fluent_name = 'sdr-prandtl'
    _python_name = 'sdr_prandtl'
    return_type = 'object'

class energy_prandtl(String, AllowedValuesMixin):
    """
    Energy Prandtl number function.
    """
    _version = '241'
    fluent_name = 'energy-prandtl'
    _python_name = 'energy_prandtl'
    return_type = 'object'

class wall_prandtl(String, AllowedValuesMixin):
    """
    Wall Prandtl number function.
    """
    _version = '241'
    fluent_name = 'wall-prandtl'
    _python_name = 'wall_prandtl'
    return_type = 'object'

class turbulent_schmidt(String, AllowedValuesMixin):
    """
    Turbulent Schmidt number function.
    """
    _version = '241'
    fluent_name = 'turbulent-schmidt'
    _python_name = 'turbulent_schmidt'
    return_type = 'object'

class user_defined(Group):
    """
    'user_defined' child.
    """
    _version = '241'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'
    child_names = ['subgrid_scale_turb_visc', 'turb_visc_func_mf', 'turb_visc_func', 'tke_prandtl', 'tdr_prandtl', 'sdr_prandtl', 'energy_prandtl', 'wall_prandtl', 'turbulent_schmidt']
    _child_classes = dict(
        subgrid_scale_turb_visc=subgrid_scale_turb_visc,
        turb_visc_func_mf=turb_visc_func_mf,
        turb_visc_func=turb_visc_func,
        tke_prandtl=tke_prandtl,
        tdr_prandtl=tdr_prandtl,
        sdr_prandtl=sdr_prandtl,
        energy_prandtl=energy_prandtl,
        wall_prandtl=wall_prandtl,
        turbulent_schmidt=turbulent_schmidt,
    )
    return_type = 'object'

class sa_enhanced_wall_treatment(Boolean):
    """
    Enable/disable the enhanced wall treatment for the Spalart-Allmaras model.
    If disabled, no smooth blending between the viscous sublayer and the
    log-law formulation is employed, as was done in versions previous to Fluent14.
    """
    _version = '241'
    fluent_name = 'sa-enhanced-wall-treatment?'
    _python_name = 'sa_enhanced_wall_treatment'
    return_type = 'object'

class sa_damping(Boolean):
    """
    Enable/disable the full low-Reynolds number form of Spalart-Allmaras model.
    """
    _version = '241'
    fluent_name = 'sa-damping?'
    _python_name = 'sa_damping'
    return_type = 'object'

class viscous(Group):
    """
    'viscous' child.
    """
    _version = '241'
    fluent_name = 'viscous'
    _python_name = 'viscous'
    child_names = ['model', 'spalart_allmaras_production', 'k_epsilon_model', 'k_omega_model', 'k_omega_options', 'geko_options', 'rng_options', 'near_wall_treatment', 'reynolds_stress_model', 'subgrid_scale_model', 'les_model_options', 'reynolds_stress_options', 'rans_model', 'des_options', 'transition_module', 'hybrid_rans_les', 'sbes_options', 'user_defined_transition', 'options', 'multiphase_turbulence', 'turbulence_expert', 'transition_model_options', 'transition_sst_option', 'user_defined', 'sa_enhanced_wall_treatment', 'sa_damping']
    _child_classes = dict(
        model=model_1,
        spalart_allmaras_production=spalart_allmaras_production,
        k_epsilon_model=k_epsilon_model,
        k_omega_model=k_omega_model,
        k_omega_options=k_omega_options,
        geko_options=geko_options,
        rng_options=rng_options,
        near_wall_treatment=near_wall_treatment,
        reynolds_stress_model=reynolds_stress_model,
        subgrid_scale_model=subgrid_scale_model,
        les_model_options=les_model_options,
        reynolds_stress_options=reynolds_stress_options,
        rans_model=rans_model,
        des_options=des_options,
        transition_module=transition_module,
        hybrid_rans_les=hybrid_rans_les,
        sbes_options=sbes_options,
        user_defined_transition=user_defined_transition,
        options=options_1,
        multiphase_turbulence=multiphase_turbulence,
        turbulence_expert=turbulence_expert,
        transition_model_options=transition_model_options,
        transition_sst_option=transition_sst_option,
        user_defined=user_defined,
        sa_enhanced_wall_treatment=sa_enhanced_wall_treatment,
        sa_damping=sa_damping,
    )
    return_type = 'object'

class model_2(String, AllowedValuesMixin):
    """
    Activate a radiation model.
    """
    _version = '241'
    fluent_name = 'model'
    _python_name = 'model'
    return_type = 'object'

class solar_model(String, AllowedValuesMixin):
    """
    'solar_model' child.
    """
    _version = '241'
    fluent_name = 'solar-model'
    _python_name = 'solar_model'
    return_type = 'object'

class sun_direction_vector(RealList):
    """
    Sun direction vector.
    """
    _version = '241'
    fluent_name = 'sun-direction-vector'
    _python_name = 'sun_direction_vector'
    return_type = 'object'

class constant(Real):
    """
    'constant' child.
    """
    _version = '241'
    fluent_name = 'constant'
    _python_name = 'constant'
    return_type = 'object'

class piecewise_linear_child(RealList):
    """
    'child_object_type' of piecewise_linear.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'piecewise_linear_child'
    return_type = 'object'

class piecewise_linear(ListObject[piecewise_linear_child]):
    """
    'piecewise_linear' child.
    """
    _version = '241'
    fluent_name = 'piecewise-linear'
    _python_name = 'piecewise_linear'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = piecewise_linear_child
    return_type = 'object'

class number_of_coefficients(Integer):
    """
    Number of polynomial coefficients (polynomial order plus one).
    """
    _version = '241'
    fluent_name = 'number-of-coefficients'
    _python_name = 'number_of_coefficients'
    return_type = 'object'

class coefficients(RealList):
    """
    Polynomial coefficients.
    """
    _version = '241'
    fluent_name = 'coefficients'
    _python_name = 'coefficients'
    return_type = 'object'

class polynomial(Group):
    """
    'polynomial' child.
    """
    _version = '241'
    fluent_name = 'polynomial'
    _python_name = 'polynomial'
    child_names = ['number_of_coefficients', 'coefficients']
    _child_classes = dict(
        number_of_coefficients=number_of_coefficients,
        coefficients=coefficients,
    )
    return_type = 'object'

class user_defined_3(String, AllowedValuesMixin):
    """
    User defined functions for direct solar irradiation.
    """
    _version = '241'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'
    return_type = 'object'

class direct_solar_irradiation(Group):
    """
    'direct_solar_irradiation' child.
    """
    _version = '241'
    fluent_name = 'direct-solar-irradiation'
    _python_name = 'direct_solar_irradiation'
    child_names = ['option', 'constant', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option,
        constant=constant,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_3,
    )
    return_type = 'object'

class user_defined_4(String, AllowedValuesMixin):
    """
    User defined functions for diffuse solar irradiation.
    """
    _version = '241'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'
    return_type = 'object'

class diffuse_solar_irradiation(Group):
    """
    'diffuse_solar_irradiation' child.
    """
    _version = '241'
    fluent_name = 'diffuse-solar-irradiation'
    _python_name = 'diffuse_solar_irradiation'
    child_names = ['option', 'constant', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option,
        constant=constant,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_4,
    )
    return_type = 'object'

class spectral_fraction(Real):
    """
    'spectral_fraction' child.
    """
    _version = '241'
    fluent_name = 'spectral-fraction'
    _python_name = 'spectral_fraction'
    return_type = 'object'

class illumination_parameters(Group):
    """
    'illumination_parameters' child.
    """
    _version = '241'
    fluent_name = 'illumination-parameters'
    _python_name = 'illumination_parameters'
    child_names = ['direct_solar_irradiation', 'diffuse_solar_irradiation', 'spectral_fraction']
    _child_classes = dict(
        direct_solar_irradiation=direct_solar_irradiation,
        diffuse_solar_irradiation=diffuse_solar_irradiation,
        spectral_fraction=spectral_fraction,
    )
    return_type = 'object'

class quad_tree_parameters(Integer):
    """
    Maximum Quad-Tree Refinement level.
    """
    _version = '241'
    fluent_name = 'quad-tree-parameters'
    _python_name = 'quad_tree_parameters'
    return_type = 'object'

class ground_reflectivity(Real):
    """
    Ground Reflectivity value.
    """
    _version = '241'
    fluent_name = 'ground-reflectivity'
    _python_name = 'ground_reflectivity'
    return_type = 'object'

class scattering_fraction(Real):
    """
    'scattering_fraction' child.
    """
    _version = '241'
    fluent_name = 'scattering-fraction'
    _python_name = 'scattering_fraction'
    return_type = 'object'

class solar_on_adjacent_fluid(Boolean):
    """
    Enable solar load for adjacent fluid cells.
    """
    _version = '241'
    fluent_name = 'solar-on-adjacent-fluid'
    _python_name = 'solar_on_adjacent_fluid'
    return_type = 'object'

class direction_from_solar_calculator(Boolean):
    """
    Use direction computed from solar calulator?.
    """
    _version = '241'
    fluent_name = 'direction-from-solar-calculator'
    _python_name = 'direction_from_solar_calculator'
    return_type = 'object'

class solar_load_frequency(Integer):
    """
    Solar model update parameters.
    """
    _version = '241'
    fluent_name = 'solar-load-frequency'
    _python_name = 'solar_load_frequency'
    return_type = 'object'

class latitude(Real):
    """
    'latitude' child.
    """
    _version = '241'
    fluent_name = 'latitude'
    _python_name = 'latitude'
    return_type = 'object'

class longitude(Real):
    """
    'longitude' child.
    """
    _version = '241'
    fluent_name = 'longitude'
    _python_name = 'longitude'
    return_type = 'object'

class timezone(Real):
    """
    'timezone' child.
    """
    _version = '241'
    fluent_name = 'timezone'
    _python_name = 'timezone'
    return_type = 'object'

class north_x(Real):
    """
    'north_x' child.
    """
    _version = '241'
    fluent_name = 'north_x'
    _python_name = 'north_x'
    return_type = 'object'

class north_y(Real):
    """
    'north_y' child.
    """
    _version = '241'
    fluent_name = 'north_y'
    _python_name = 'north_y'
    return_type = 'object'

class north_z(Real):
    """
    'north_z' child.
    """
    _version = '241'
    fluent_name = 'north_z'
    _python_name = 'north_z'
    return_type = 'object'

class north_direction(Group):
    """
    'north_direction' child.
    """
    _version = '241'
    fluent_name = 'north-direction'
    _python_name = 'north_direction'
    child_names = ['north_x', 'north_y', 'north_z']
    _child_classes = dict(
        north_x=north_x,
        north_y=north_y,
        north_z=north_z,
    )
    return_type = 'object'

class east_x(Real):
    """
    'east_x' child.
    """
    _version = '241'
    fluent_name = 'east_x'
    _python_name = 'east_x'
    return_type = 'object'

class east_y(Real):
    """
    'east_y' child.
    """
    _version = '241'
    fluent_name = 'east_y'
    _python_name = 'east_y'
    return_type = 'object'

class east_z(Real):
    """
    'east_z' child.
    """
    _version = '241'
    fluent_name = 'east_z'
    _python_name = 'east_z'
    return_type = 'object'

class east_direction(Group):
    """
    'east_direction' child.
    """
    _version = '241'
    fluent_name = 'east-direction'
    _python_name = 'east_direction'
    child_names = ['east_x', 'east_y', 'east_z']
    _child_classes = dict(
        east_x=east_x,
        east_y=east_y,
        east_z=east_z,
    )
    return_type = 'object'

class day(Integer):
    """
    'day' child.
    """
    _version = '241'
    fluent_name = 'day'
    _python_name = 'day'
    return_type = 'object'

class month(Integer):
    """
    'month' child.
    """
    _version = '241'
    fluent_name = 'month'
    _python_name = 'month'
    return_type = 'object'

class hour(Integer):
    """
    'hour' child.
    """
    _version = '241'
    fluent_name = 'hour'
    _python_name = 'hour'
    return_type = 'object'

class minute(Integer):
    """
    'minute' child.
    """
    _version = '241'
    fluent_name = 'minute'
    _python_name = 'minute'
    return_type = 'object'

class date_and_time(Group):
    """
    'date_and_time' child.
    """
    _version = '241'
    fluent_name = 'date-and-time'
    _python_name = 'date_and_time'
    child_names = ['day', 'month', 'hour', 'minute']
    _child_classes = dict(
        day=day,
        month=month,
        hour=hour,
        minute=minute,
    )
    return_type = 'object'

class calculator_method(String, AllowedValuesMixin):
    """
    A method for solar calculator.
    """
    _version = '241'
    fluent_name = 'calculator-method'
    _python_name = 'calculator_method'
    return_type = 'object'

class sunshine_factor(Real):
    """
    The sunshine factor.
    """
    _version = '241'
    fluent_name = 'sunshine-factor'
    _python_name = 'sunshine_factor'
    return_type = 'object'

class solar_calculator(Group):
    """
    'solar_calculator' child.
    """
    _version = '241'
    fluent_name = 'solar-calculator'
    _python_name = 'solar_calculator'
    child_names = ['latitude', 'longitude', 'timezone', 'north_direction', 'east_direction', 'date_and_time', 'calculator_method', 'sunshine_factor']
    _child_classes = dict(
        latitude=latitude,
        longitude=longitude,
        timezone=timezone,
        north_direction=north_direction,
        east_direction=east_direction,
        date_and_time=date_and_time,
        calculator_method=calculator_method,
        sunshine_factor=sunshine_factor,
    )
    return_type = 'object'

class apply_full_solar_irradiation(Boolean):
    """
    Enable/Disable application of solar irradiation to first band with DO model.
    """
    _version = '241'
    fluent_name = 'apply-full-solar-irradiation?'
    _python_name = 'apply_full_solar_irradiation'
    return_type = 'object'

class solar_frequency_data(Real):
    """
    Autosave solar data file frequency.
    """
    _version = '241'
    fluent_name = 'solar-frequency-data'
    _python_name = 'solar_frequency_data'
    return_type = 'object'

class solar_filename(Filename):
    """
    Filename for autoreading solar data.
    """
    _version = '241'
    fluent_name = 'solar-filename'
    _python_name = 'solar_filename'
    return_type = 'object'

class autoread_solar_data(Group):
    """
    Autoread solar data parameters.
    """
    _version = '241'
    fluent_name = 'autoread-solar-data'
    _python_name = 'autoread_solar_data'
    child_names = ['solar_frequency_data', 'solar_filename']
    _child_classes = dict(
        solar_frequency_data=solar_frequency_data,
        solar_filename=solar_filename,
    )
    return_type = 'object'

class use_binary_format(Boolean):
    """
    'use_binary_format' child.
    """
    _version = '241'
    fluent_name = 'use-binary-format?'
    _python_name = 'use_binary_format'
    return_type = 'object'

class autosave_solar_data(Group):
    """
    'autosave_solar_data' child.
    """
    _version = '241'
    fluent_name = 'autosave-solar-data'
    _python_name = 'autosave_solar_data'
    child_names = ['solar_frequency_data', 'solar_filename', 'use_binary_format']
    _child_classes = dict(
        solar_frequency_data=solar_frequency_data,
        solar_filename=solar_filename,
        use_binary_format=use_binary_format,
    )
    return_type = 'object'

class solar_on_demand(Command):
    """
    Enable  solar load on demand.
    """
    _version = '241'
    fluent_name = 'solar-on-demand'
    _python_name = 'solar_on_demand'
    return_type = 'object'

class solar_load(Group):
    """
    'solar_load' child.
    """
    _version = '241'
    fluent_name = 'solar-load'
    _python_name = 'solar_load'
    child_names = ['solar_model', 'sun_direction_vector', 'illumination_parameters', 'quad_tree_parameters', 'ground_reflectivity', 'scattering_fraction', 'solar_on_adjacent_fluid', 'direction_from_solar_calculator', 'solar_load_frequency', 'solar_calculator', 'apply_full_solar_irradiation', 'autoread_solar_data', 'autosave_solar_data']
    command_names = ['solar_on_demand']
    _child_classes = dict(
        solar_model=solar_model,
        sun_direction_vector=sun_direction_vector,
        illumination_parameters=illumination_parameters,
        quad_tree_parameters=quad_tree_parameters,
        ground_reflectivity=ground_reflectivity,
        scattering_fraction=scattering_fraction,
        solar_on_adjacent_fluid=solar_on_adjacent_fluid,
        direction_from_solar_calculator=direction_from_solar_calculator,
        solar_load_frequency=solar_load_frequency,
        solar_calculator=solar_calculator,
        apply_full_solar_irradiation=apply_full_solar_irradiation,
        autoread_solar_data=autoread_solar_data,
        autosave_solar_data=autosave_solar_data,
        solar_on_demand=solar_on_demand,
    )
    return_type = 'object'

class n_theta_divisions(Integer):
    """
    'n_theta_divisions' child.
    """
    _version = '241'
    fluent_name = 'n-theta-divisions'
    _python_name = 'n_theta_divisions'
    return_type = 'object'

class n_phi_divisions(Integer):
    """
    'n_phi_divisions' child.
    """
    _version = '241'
    fluent_name = 'n-phi-divisions'
    _python_name = 'n_phi_divisions'
    return_type = 'object'

class n_theta_pixels(Integer):
    """
    'n_theta_pixels' child.
    """
    _version = '241'
    fluent_name = 'n-theta-pixels'
    _python_name = 'n_theta_pixels'
    return_type = 'object'

class n_phi_pixels(Integer):
    """
    'n_phi_pixels' child.
    """
    _version = '241'
    fluent_name = 'n-phi-pixels'
    _python_name = 'n_phi_pixels'
    return_type = 'object'

class do_acceleration(Boolean):
    """
    Enable/disable acceleration of computation of DO model.
    """
    _version = '241'
    fluent_name = 'do-acceleration?'
    _python_name = 'do_acceleration'
    return_type = 'object'

class enable_6(Boolean):
    """
    Enabled DO Energy Coupling.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class solution_method(String, AllowedValuesMixin):
    """
    Enable the solution method for DO/Energy Coupling.
    """
    _version = '241'
    fluent_name = 'solution-method'
    _python_name = 'solution_method'
    return_type = 'object'

class do_energy_coupling(Group):
    """
    'do_energy_coupling' child.
    """
    _version = '241'
    fluent_name = 'do-energy-coupling'
    _python_name = 'do_energy_coupling'
    child_names = ['enable', 'solution_method']
    _child_classes = dict(
        enable=enable_6,
        solution_method=solution_method,
    )
    return_type = 'object'

class method_partially_specular_wall(String, AllowedValuesMixin):
    """
    Method for partially specular wall with discrete ordinate model.
    """
    _version = '241'
    fluent_name = 'method-partially-specular-wall'
    _python_name = 'method_partially_specular_wall'
    return_type = 'object'

class fast_second_order_discrete_ordinate(Boolean):
    """
    Enable/disable the fast-second-order option for Discrete Ordinate Model.
    """
    _version = '241'
    fluent_name = 'fast-second-order-discrete-ordinate?'
    _python_name = 'fast_second_order_discrete_ordinate'
    return_type = 'object'

class blending_factor(Real):
    """
    'blending_factor' child.
    """
    _version = '241'
    fluent_name = 'blending-factor'
    _python_name = 'blending_factor'
    return_type = 'object'

class discrete_ordinates(Group):
    """
    Enable/disable the discrete ordinates radiation model.
    """
    _version = '241'
    fluent_name = 'discrete-ordinates'
    _python_name = 'discrete_ordinates'
    child_names = ['n_theta_divisions', 'n_phi_divisions', 'n_theta_pixels', 'n_phi_pixels', 'do_acceleration', 'do_energy_coupling', 'method_partially_specular_wall', 'fast_second_order_discrete_ordinate', 'blending_factor']
    _child_classes = dict(
        n_theta_divisions=n_theta_divisions,
        n_phi_divisions=n_phi_divisions,
        n_theta_pixels=n_theta_pixels,
        n_phi_pixels=n_phi_pixels,
        do_acceleration=do_acceleration,
        do_energy_coupling=do_energy_coupling,
        method_partially_specular_wall=method_partially_specular_wall,
        fast_second_order_discrete_ordinate=fast_second_order_discrete_ordinate,
        blending_factor=blending_factor,
    )
    return_type = 'object'

class number_of_histories(Integer):
    """
    'number_of_histories' child.
    """
    _version = '241'
    fluent_name = 'number-of-histories'
    _python_name = 'number_of_histories'
    return_type = 'object'

class under_relaxation(Real):
    """
    'under_relaxation' child.
    """
    _version = '241'
    fluent_name = 'under-relaxation'
    _python_name = 'under_relaxation'
    return_type = 'object'

class target_cells_per_volume_cluster(Integer):
    """
    'target_cells_per_volume_cluster' child.
    """
    _version = '241'
    fluent_name = 'target-cells-per-volume-cluster'
    _python_name = 'target_cells_per_volume_cluster'
    return_type = 'object'

class monte_carlo(Group):
    """
    Enable/disable the Monte Carlo radiation model.
    """
    _version = '241'
    fluent_name = 'monte-carlo'
    _python_name = 'monte_carlo'
    child_names = ['number_of_histories', 'under_relaxation', 'target_cells_per_volume_cluster']
    _child_classes = dict(
        number_of_histories=number_of_histories,
        under_relaxation=under_relaxation,
        target_cells_per_volume_cluster=target_cells_per_volume_cluster,
    )
    return_type = 'object'

class basis(String, AllowedValuesMixin):
    """
    Basis for viewfactor calculation.
    """
    _version = '241'
    fluent_name = 'basis'
    _python_name = 'basis'
    return_type = 'object'

class method_1(String, AllowedValuesMixin):
    """
    Method for viewfactor calculation.
    """
    _version = '241'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class surfaces_3(String, AllowedValuesMixin):
    """
    Surfaces for Hemi-Cube method.
    """
    _version = '241'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    return_type = 'object'

class smoothing(String, AllowedValuesMixin):
    """
    Smoothing for Hemi-Cube method.
    """
    _version = '241'
    fluent_name = 'smoothing'
    _python_name = 'smoothing'
    return_type = 'object'

class resolution(Integer):
    """
    Resolution for view-factor calculation.
    """
    _version = '241'
    fluent_name = 'resolution'
    _python_name = 'resolution'
    return_type = 'object'

class separation(Real):
    """
    Separation for Hemi-Cube method.
    """
    _version = '241'
    fluent_name = 'separation'
    _python_name = 'separation'
    return_type = 'object'

class subdivide(Integer):
    """
    Subdivide for Hemi-Cube method.
    """
    _version = '241'
    fluent_name = 'subdivide'
    _python_name = 'subdivide'
    return_type = 'object'

class non_participating_zone_temperature(Real):
    """
    Temperature for the non-participating boundary zones.
    """
    _version = '241'
    fluent_name = 'non-participating-zone-temperature'
    _python_name = 'non_participating_zone_temperature'
    return_type = 'object'

class viewfactor_settings(Group):
    """
    Viewfactor related settings.
    """
    _version = '241'
    fluent_name = 'viewfactor-settings'
    _python_name = 'viewfactor_settings'
    child_names = ['basis', 'method', 'surfaces', 'smoothing', 'resolution', 'separation', 'subdivide', 'non_participating_zone_temperature']
    _child_classes = dict(
        basis=basis,
        method=method_1,
        surfaces=surfaces_3,
        smoothing=smoothing,
        resolution=resolution,
        separation=separation,
        subdivide=subdivide,
        non_participating_zone_temperature=non_participating_zone_temperature,
    )
    return_type = 'object'

class enable_mesh_interface_clustering(Boolean):
    """
    Enable clustering on mesh interface.
    """
    _version = '241'
    fluent_name = 'enable-mesh-interface-clustering'
    _python_name = 'enable_mesh_interface_clustering'
    return_type = 'object'

class split_angle(Real):
    """
    Split angle for clustering algorithm.
    """
    _version = '241'
    fluent_name = 'split-angle'
    _python_name = 'split_angle'
    return_type = 'object'

class clustering_algorithm(String, AllowedValuesMixin):
    """
    The cluster algorithm.
    """
    _version = '241'
    fluent_name = 'clustering-algorithm'
    _python_name = 'clustering_algorithm'
    return_type = 'object'

class option_1(String, AllowedValuesMixin):
    """
    An option to compute faces per surface cluster.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class global_faces_per_surface_cluster(Integer):
    """
    Manually enter global faces per surface cluster.
    """
    _version = '241'
    fluent_name = 'global-faces-per-surface-cluster'
    _python_name = 'global_faces_per_surface_cluster'
    return_type = 'object'

class maximum_faces_per_surface_cluster(Integer):
    """
    Maximum number of faces for automatic computation of faces per surface cluster.
    """
    _version = '241'
    fluent_name = 'maximum-faces-per-surface-cluster'
    _python_name = 'maximum_faces_per_surface_cluster'
    return_type = 'object'

class faces_per_cluster(Group):
    """
    'faces_per_cluster' child.
    """
    _version = '241'
    fluent_name = 'faces-per-cluster'
    _python_name = 'faces_per_cluster'
    child_names = ['option', 'global_faces_per_surface_cluster', 'maximum_faces_per_surface_cluster']
    _child_classes = dict(
        option=option_1,
        global_faces_per_surface_cluster=global_faces_per_surface_cluster,
        maximum_faces_per_surface_cluster=maximum_faces_per_surface_cluster,
    )
    return_type = 'object'

class print_thread_clusters(Command):
    """
    Prints the following for all boundary threads: thread-id, number of faces, faces per surface cluster, and the number of surface clusters.
    """
    _version = '241'
    fluent_name = 'print-thread-clusters'
    _python_name = 'print_thread_clusters'
    return_type = 'object'

class clustering_settings(Group):
    """
    Clustering related settings.
    """
    _version = '241'
    fluent_name = 'clustering-settings'
    _python_name = 'clustering_settings'
    child_names = ['enable_mesh_interface_clustering', 'split_angle', 'clustering_algorithm', 'faces_per_cluster']
    command_names = ['print_thread_clusters']
    _child_classes = dict(
        enable_mesh_interface_clustering=enable_mesh_interface_clustering,
        split_angle=split_angle,
        clustering_algorithm=clustering_algorithm,
        faces_per_cluster=faces_per_cluster,
        print_thread_clusters=print_thread_clusters,
    )
    return_type = 'object'

class maximum_radiation_iterations(Integer):
    """
    Maximum Radiation Iterations(number of sweeps).
    """
    _version = '241'
    fluent_name = 'maximum-radiation-iterations'
    _python_name = 'maximum_radiation_iterations'
    return_type = 'object'

class residual_convergence_criteria(Real):
    """
    Residual Convergence Criterion.
    """
    _version = '241'
    fluent_name = 'residual-convergence-criteria'
    _python_name = 'residual_convergence_criteria'
    return_type = 'object'

class radiosity_solver_control(Group):
    """
    'radiosity_solver_control' child.
    """
    _version = '241'
    fluent_name = 'radiosity-solver-control'
    _python_name = 'radiosity_solver_control'
    child_names = ['maximum_radiation_iterations', 'residual_convergence_criteria']
    _child_classes = dict(
        maximum_radiation_iterations=maximum_radiation_iterations,
        residual_convergence_criteria=residual_convergence_criteria,
    )
    return_type = 'object'

class compute_write_vf(Command):
    """
    Compute/write surface clusters and view factors for S2S radiation model.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'compute-write-vf'
    _python_name = 'compute_write_vf'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class compute_vf_accelerated(Command):
    """
    Compute/Write view factors from existing surface clusters.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'compute-vf-accelerated'
    _python_name = 'compute_vf_accelerated'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class compute_clusters_and_vf_accelerated(Command):
    """
    Compute/Write surface cluster first and then view factors.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'compute-clusters-and-vf-accelerated'
    _python_name = 'compute_clusters_and_vf_accelerated'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class compute_vf_only(Command):
    """
    Compute/write view factors only.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'compute-vf-only'
    _python_name = 'compute_vf_only'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class read_vf_file(Command):
    """
    Read an S2S file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'read-vf-file'
    _python_name = 'read_vf_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class s2s(Group):
    """
    's2s' child.
    """
    _version = '241'
    fluent_name = 's2s'
    _python_name = 's2s'
    child_names = ['viewfactor_settings', 'clustering_settings', 'radiosity_solver_control']
    command_names = ['compute_write_vf', 'compute_vf_accelerated', 'compute_clusters_and_vf_accelerated', 'compute_vf_only', 'read_vf_file']
    _child_classes = dict(
        viewfactor_settings=viewfactor_settings,
        clustering_settings=clustering_settings,
        radiosity_solver_control=radiosity_solver_control,
        compute_write_vf=compute_write_vf,
        compute_vf_accelerated=compute_vf_accelerated,
        compute_clusters_and_vf_accelerated=compute_clusters_and_vf_accelerated,
        compute_vf_only=compute_vf_only,
        read_vf_file=read_vf_file,
    )
    return_type = 'object'

class name(String):
    """
    Name of the object.
    """
    _version = '241'
    fluent_name = 'name'
    _python_name = 'name'
    return_type = 'object'

class start_1(Real):
    """
    'start' child.
    """
    _version = '241'
    fluent_name = 'start'
    _python_name = 'start'
    return_type = 'object'

class end(Real):
    """
    'end' child.
    """
    _version = '241'
    fluent_name = 'end'
    _python_name = 'end'
    return_type = 'object'

class multiband_child(Group):
    """
    'child_object_type' of multiband.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'multiband_child'
    child_names = ['name', 'start', 'end']
    _child_classes = dict(
        name=name,
        start=start_1,
        end=end,
    )
    return_type = 'object'

class multiband(NamedObject[multiband_child], CreatableNamedObjectMixinOld[multiband_child]):
    """
    Multi-band information.
    """
    _version = '241'
    fluent_name = 'multiband'
    _python_name = 'multiband'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = multiband_child
    return_type = 'object'

class method_2(String, AllowedValuesMixin):
    """
    'method' child.
    """
    _version = '241'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class time_step_interval(Integer):
    """
    'time_step_interval' child.
    """
    _version = '241'
    fluent_name = 'time-step-interval'
    _python_name = 'time_step_interval'
    return_type = 'object'

class time_interval(Real):
    """
    'time_interval' child.
    """
    _version = '241'
    fluent_name = 'time-interval'
    _python_name = 'time_interval'
    return_type = 'object'

class iteration_interval(Integer):
    """
    'iteration_interval' child.
    """
    _version = '241'
    fluent_name = 'iteration-interval'
    _python_name = 'iteration_interval'
    return_type = 'object'

class solve_frequency(Group):
    """
    Radiation solve frequency.
    """
    _version = '241'
    fluent_name = 'solve-frequency'
    _python_name = 'solve_frequency'
    child_names = ['method', 'time_step_interval', 'time_interval', 'iteration_interval']
    _child_classes = dict(
        method=method_2,
        time_step_interval=time_step_interval,
        time_interval=time_interval,
        iteration_interval=iteration_interval,
    )
    return_type = 'object'

class radiation(Group):
    """
    'radiation' child.
    """
    _version = '241'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['model', 'solar_load', 'discrete_ordinates', 'monte_carlo', 's2s', 'multiband', 'solve_frequency']
    _child_classes = dict(
        model=model_2,
        solar_load=solar_load,
        discrete_ordinates=discrete_ordinates,
        monte_carlo=monte_carlo,
        s2s=s2s,
        multiband=multiband,
        solve_frequency=solve_frequency,
    )
    return_type = 'object'

class material(String, AllowedValuesMixin):
    """
    'material' child.
    """
    _version = '241'
    fluent_name = 'material'
    _python_name = 'material'
    return_type = 'object'

class phase_material_child(String, AllowedValuesMixin):
    """
    'child_object_type' of phase_material.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_material_child'
    return_type = 'object'

class phase_material(NamedObject[phase_material_child], _NonCreatableNamedObjectMixin[phase_material_child]):
    """
    'phase_material' child.
    """
    _version = '241'
    fluent_name = 'phase-material'
    _python_name = 'phase_material'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_material_child
    return_type = 'object'

class model_3(Group):
    """
    'model' child.
    """
    _version = '241'
    fluent_name = 'model'
    _python_name = 'model'
    child_names = ['option', 'material', 'phase_material']
    _child_classes = dict(
        option=option,
        material=material,
        phase_material=phase_material,
    )
    return_type = 'object'

class inlet_diffusion_1(Boolean):
    """
    Enable/disable inclusion of diffusion at inlets.
    """
    _version = '241'
    fluent_name = 'inlet-diffusion'
    _python_name = 'inlet_diffusion'
    return_type = 'object'

class thermal_diffusion(Boolean):
    """
    Enable/disable thermal diffusion.
    """
    _version = '241'
    fluent_name = 'thermal-diffusion'
    _python_name = 'thermal_diffusion'
    return_type = 'object'

class thickened_flame_model(Boolean):
    """
    Enable/disable the thickened flame model.
    """
    _version = '241'
    fluent_name = 'thickened-flame-model'
    _python_name = 'thickened_flame_model'
    return_type = 'object'

class diffusion_energy_source(Boolean):
    """
    Enable/disable diffusion energy source.
    """
    _version = '241'
    fluent_name = 'diffusion-energy-source'
    _python_name = 'diffusion_energy_source'
    return_type = 'object'

class multi_component_diffusion_mf_child(Boolean):
    """
    'child_object_type' of multi_component_diffusion_mf.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'multi_component_diffusion_mf_child'
    return_type = 'object'

class multi_component_diffusion_mf(NamedObject[multi_component_diffusion_mf_child], _NonCreatableNamedObjectMixin[multi_component_diffusion_mf_child]):
    """
    'multi_component_diffusion_mf' child.
    """
    _version = '241'
    fluent_name = 'multi-component-diffusion-mf'
    _python_name = 'multi_component_diffusion_mf'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = multi_component_diffusion_mf_child
    return_type = 'object'

class multi_component_diffusion(Boolean):
    """
    Enable/disable multicomponent diffusion.
    """
    _version = '241'
    fluent_name = 'multi-component-diffusion'
    _python_name = 'multi_component_diffusion'
    return_type = 'object'

class liquid_energy_diffusion(Boolean):
    """
    Enable/disable energy diffusion for liquid regime.
    """
    _version = '241'
    fluent_name = 'liquid-energy-diffusion'
    _python_name = 'liquid_energy_diffusion'
    return_type = 'object'

class save_gradients(Boolean):
    """
    Enable/disable storage of species mass fraction gradients.
    """
    _version = '241'
    fluent_name = 'save-gradients'
    _python_name = 'save_gradients'
    return_type = 'object'

class species_migration(Boolean):
    """
    Enable/disable ion species migration in electric field.
    """
    _version = '241'
    fluent_name = 'species-migration'
    _python_name = 'species_migration'
    return_type = 'object'

class species_transport_expert(Boolean):
    """
    Enable/disable the convergence acceleration method.
    """
    _version = '241'
    fluent_name = 'species-transport-expert'
    _python_name = 'species_transport_expert'
    return_type = 'object'

class options_2(Group):
    """
    'options' child.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['inlet_diffusion', 'thermal_diffusion', 'thickened_flame_model', 'diffusion_energy_source', 'multi_component_diffusion_mf', 'multi_component_diffusion', 'liquid_energy_diffusion', 'save_gradients', 'species_migration', 'species_transport_expert']
    _child_classes = dict(
        inlet_diffusion=inlet_diffusion_1,
        thermal_diffusion=thermal_diffusion,
        thickened_flame_model=thickened_flame_model,
        diffusion_energy_source=diffusion_energy_source,
        multi_component_diffusion_mf=multi_component_diffusion_mf,
        multi_component_diffusion=multi_component_diffusion,
        liquid_energy_diffusion=liquid_energy_diffusion,
        save_gradients=save_gradients,
        species_migration=species_migration,
        species_transport_expert=species_transport_expert,
    )
    return_type = 'object'

class enable_volumetric_reactions(Boolean):
    """
    Enable/disable volumetric reactions.
    """
    _version = '241'
    fluent_name = 'enable-volumetric-reactions'
    _python_name = 'enable_volumetric_reactions'
    return_type = 'object'

class enable_wall_surface(Boolean):
    """
    Enable/disable wall surface reactions.
    """
    _version = '241'
    fluent_name = 'enable-wall-surface'
    _python_name = 'enable_wall_surface'
    return_type = 'object'

class enable_particle_surface(Boolean):
    """
    Enable/disable particle surface reactions.
    """
    _version = '241'
    fluent_name = 'enable-particle-surface'
    _python_name = 'enable_particle_surface'
    return_type = 'object'

class enable_electrochemical_surface(Boolean):
    """
    Enable/disable electrochemical surface reactions.
    """
    _version = '241'
    fluent_name = 'enable-electrochemical-surface'
    _python_name = 'enable_electrochemical_surface'
    return_type = 'object'

class reactions(Group):
    """
    'reactions' child.
    """
    _version = '241'
    fluent_name = 'reactions'
    _python_name = 'reactions'
    child_names = ['enable_volumetric_reactions', 'enable_wall_surface', 'enable_particle_surface', 'enable_electrochemical_surface']
    _child_classes = dict(
        enable_volumetric_reactions=enable_volumetric_reactions,
        enable_wall_surface=enable_wall_surface,
        enable_particle_surface=enable_particle_surface,
        enable_electrochemical_surface=enable_electrochemical_surface,
    )
    return_type = 'object'

class heat_of_surface_reactions(Boolean):
    """
    Enable/disable heat of surface reactions.
    """
    _version = '241'
    fluent_name = 'heat-of-surface-reactions'
    _python_name = 'heat_of_surface_reactions'
    return_type = 'object'

class mass_deposition_source(Boolean):
    """
    Enable/disable mass deposition source due to surface reactions.
    """
    _version = '241'
    fluent_name = 'mass-deposition-source'
    _python_name = 'mass_deposition_source'
    return_type = 'object'

class reaction_diffusion_balance(Boolean):
    """
    Enable/disable reaction diffusion balance at reacting surface for surface reactions.
    """
    _version = '241'
    fluent_name = 'reaction-diffusion-balance'
    _python_name = 'reaction_diffusion_balance'
    return_type = 'object'

class surface_reaction_aggresiveness_factor(Real):
    """
    The surface reaction aggressiveness factor.
    """
    _version = '241'
    fluent_name = 'surface-reaction-aggresiveness-factor'
    _python_name = 'surface_reaction_aggresiveness_factor'
    return_type = 'object'

class surface_reaction_rate_temperature_factor(Real):
    """
    The surface reaction parameters for the Non-Equilibrium Thermal Model: Surface reaction-rate temperature factor.
    """
    _version = '241'
    fluent_name = 'surface-reaction-rate-temperature-factor'
    _python_name = 'surface_reaction_rate_temperature_factor'
    return_type = 'object'

class surface_reaction_solid_fraction(Real):
    """
    The surface reaction parameters for the Non-Equilibrium Thermal Model: Reaction heat source fraction into solid zone.
    """
    _version = '241'
    fluent_name = 'surface-reaction-solid-fraction'
    _python_name = 'surface_reaction_solid_fraction'
    return_type = 'object'

class wall_surface_options(Group):
    """
    'wall_surface_options' child.
    """
    _version = '241'
    fluent_name = 'wall-surface-options'
    _python_name = 'wall_surface_options'
    child_names = ['heat_of_surface_reactions', 'mass_deposition_source', 'reaction_diffusion_balance', 'surface_reaction_aggresiveness_factor', 'surface_reaction_rate_temperature_factor', 'surface_reaction_solid_fraction']
    _child_classes = dict(
        heat_of_surface_reactions=heat_of_surface_reactions,
        mass_deposition_source=mass_deposition_source,
        reaction_diffusion_balance=reaction_diffusion_balance,
        surface_reaction_aggresiveness_factor=surface_reaction_aggresiveness_factor,
        surface_reaction_rate_temperature_factor=surface_reaction_rate_temperature_factor,
        surface_reaction_solid_fraction=surface_reaction_solid_fraction,
    )
    return_type = 'object'

class turb_chem_interaction_model(String, AllowedValuesMixin):
    """
    'turb_chem_interaction_model' child.
    """
    _version = '241'
    fluent_name = 'turb-chem-interaction-model'
    _python_name = 'turb_chem_interaction_model'
    return_type = 'object'

class chemistry_iterations(Integer):
    """
    Flow iterations per chemistry update.
    """
    _version = '241'
    fluent_name = 'chemistry-iterations'
    _python_name = 'chemistry_iterations'
    return_type = 'object'

class aggresiveness_factor(Real):
    """
    The aggressiveness factor [between 0 (most robust but slowest convergence) and 1].
    """
    _version = '241'
    fluent_name = 'aggresiveness-factor'
    _python_name = 'aggresiveness_factor'
    return_type = 'object'

class transport_time_scale_factor(Real):
    """
    The factor for the reaction averaging time step calculation.
    """
    _version = '241'
    fluent_name = 'transport-time-scale-factor'
    _python_name = 'transport_time_scale_factor'
    return_type = 'object'

class min_temperature(Real):
    """
    The minimum cell temperature for kinetics calculations.
    """
    _version = '241'
    fluent_name = 'min-temperature'
    _python_name = 'min_temperature'
    return_type = 'object'

class turb_chem_interaction_model_options(Group):
    """
    'turb_chem_interaction_model_options' child.
    """
    _version = '241'
    fluent_name = 'turb-chem-interaction-model-options'
    _python_name = 'turb_chem_interaction_model_options'
    child_names = ['chemistry_iterations', 'aggresiveness_factor', 'transport_time_scale_factor', 'min_temperature']
    _child_classes = dict(
        chemistry_iterations=chemistry_iterations,
        aggresiveness_factor=aggresiveness_factor,
        transport_time_scale_factor=transport_time_scale_factor,
        min_temperature=min_temperature,
    )
    return_type = 'object'

class linearize_convection_source(Boolean):
    """
    Enable/disable linearization of higher order convection sources.
    """
    _version = '241'
    fluent_name = 'linearize-convection-source'
    _python_name = 'linearize_convection_source'
    return_type = 'object'

class linearize_diffusion_source(Boolean):
    """
    Enable/disable linearization of secondary diffusion sources.
    """
    _version = '241'
    fluent_name = 'linearize-diffusion-source'
    _python_name = 'linearize_diffusion_source'
    return_type = 'object'

class blending(Boolean):
    """
    Enable/disable mesh quality based first-second order species blending.
    """
    _version = '241'
    fluent_name = 'blending'
    _python_name = 'blending'
    return_type = 'object'

class minimum_cell_quality_threshold(Real):
    """
    The minmum cell quality threshold for blending.
    """
    _version = '241'
    fluent_name = 'minimum-cell-quality-threshold'
    _python_name = 'minimum_cell_quality_threshold'
    return_type = 'object'

class species_transport_expert_options(Group):
    """
    'species_transport_expert_options' child.
    """
    _version = '241'
    fluent_name = 'species-transport-expert-options'
    _python_name = 'species_transport_expert_options'
    child_names = ['linearize_convection_source', 'linearize_diffusion_source', 'blending', 'minimum_cell_quality_threshold']
    _child_classes = dict(
        linearize_convection_source=linearize_convection_source,
        linearize_diffusion_source=linearize_diffusion_source,
        blending=blending,
        minimum_cell_quality_threshold=minimum_cell_quality_threshold,
    )
    return_type = 'object'

class edc_choice(String, AllowedValuesMixin):
    """
    'edc_choice' child.
    """
    _version = '241'
    fluent_name = 'edc-choice'
    _python_name = 'edc_choice'
    return_type = 'object'

class volume_fraction_constant(Real):
    """
    The Volume fraction constant.
    """
    _version = '241'
    fluent_name = 'volume-fraction-constant'
    _python_name = 'volume_fraction_constant'
    return_type = 'object'

class time_scale_constant(Real):
    """
    The time scale constant.
    """
    _version = '241'
    fluent_name = 'time-scale-constant'
    _python_name = 'time_scale_constant'
    return_type = 'object'

class edc_constant_coefficient_options(Group):
    """
    'edc_constant_coefficient_options' child.
    """
    _version = '241'
    fluent_name = 'edc-constant-coefficient-options'
    _python_name = 'edc_constant_coefficient_options'
    child_names = ['volume_fraction_constant', 'time_scale_constant']
    _child_classes = dict(
        volume_fraction_constant=volume_fraction_constant,
        time_scale_constant=time_scale_constant,
    )
    return_type = 'object'

class edc_pasr_mixing_model(String, AllowedValuesMixin):
    """
    The PaSR mixing model.
    """
    _version = '241'
    fluent_name = 'edc-pasr-mixing-model'
    _python_name = 'edc_pasr_mixing_model'
    return_type = 'object'

class mixing_constant(Real):
    """
    The mixing constant [from 0.05 to 1.0].
    """
    _version = '241'
    fluent_name = 'mixing-constant'
    _python_name = 'mixing_constant'
    return_type = 'object'

class fractal_dimension(Real):
    """
    The fractal dimension [from 3.0 and 5.0].
    """
    _version = '241'
    fluent_name = 'fractal-dimension'
    _python_name = 'fractal_dimension'
    return_type = 'object'

class edc_pasr_model_options(Group):
    """
    'edc_pasr_model_options' child.
    """
    _version = '241'
    fluent_name = 'edc-pasr-model-options'
    _python_name = 'edc_pasr_model_options'
    child_names = ['edc_pasr_mixing_model', 'mixing_constant', 'fractal_dimension']
    _child_classes = dict(
        edc_pasr_mixing_model=edc_pasr_mixing_model,
        mixing_constant=mixing_constant,
        fractal_dimension=fractal_dimension,
    )
    return_type = 'object'

class user_defined_edc_scales(String, AllowedValuesMixin):
    """
    'user_defined_edc_scales' child.
    """
    _version = '241'
    fluent_name = 'user-defined-edc-scales'
    _python_name = 'user_defined_edc_scales'
    return_type = 'object'

class edc_model_options(Group):
    """
    'edc_model_options' child.
    """
    _version = '241'
    fluent_name = 'edc-model-options'
    _python_name = 'edc_model_options'
    child_names = ['edc_choice', 'edc_constant_coefficient_options', 'edc_pasr_model_options', 'user_defined_edc_scales']
    _child_classes = dict(
        edc_choice=edc_choice,
        edc_constant_coefficient_options=edc_constant_coefficient_options,
        edc_pasr_model_options=edc_pasr_model_options,
        user_defined_edc_scales=user_defined_edc_scales,
    )
    return_type = 'object'

class efficiency_function(String, AllowedValuesMixin):
    """
    'efficiency_function' child.
    """
    _version = '241'
    fluent_name = 'efficiency-function'
    _python_name = 'efficiency_function'
    return_type = 'object'

class number_of_points_in_flame(Integer):
    """
    The number of grid points in flame.
    """
    _version = '241'
    fluent_name = 'number-of-points-in-flame'
    _python_name = 'number_of_points_in_flame'
    return_type = 'object'

class integral_length_scale(Real):
    """
    The integral length scale.
    """
    _version = '241'
    fluent_name = 'integral-length-scale'
    _python_name = 'integral_length_scale'
    return_type = 'object'

class sensor_method(String, AllowedValuesMixin):
    """
    'sensor_method' child.
    """
    _version = '241'
    fluent_name = 'sensor-method'
    _python_name = 'sensor_method'
    return_type = 'object'

class sensor_reaction_index(Integer):
    """
    The reaction index to use for the sensor method.
    """
    _version = '241'
    fluent_name = 'sensor-reaction-index'
    _python_name = 'sensor_reaction_index'
    return_type = 'object'

class beta_factor_omega_equation(Real):
    """
    The beta factor in the omega equation.
    """
    _version = '241'
    fluent_name = 'beta-factor-omega-equation'
    _python_name = 'beta_factor_omega_equation'
    return_type = 'object'

class sensor_num_smooths(Integer):
    """
    The number of times omega is filtered.
    """
    _version = '241'
    fluent_name = 'sensor-num-smooths'
    _python_name = 'sensor_num_smooths'
    return_type = 'object'

class tfm_model_options(Group):
    """
    'tfm_model_options' child.
    """
    _version = '241'
    fluent_name = 'tfm-model-options'
    _python_name = 'tfm_model_options'
    child_names = ['efficiency_function', 'number_of_points_in_flame', 'integral_length_scale', 'sensor_method', 'sensor_reaction_index', 'beta_factor_omega_equation', 'sensor_num_smooths']
    _child_classes = dict(
        efficiency_function=efficiency_function,
        number_of_points_in_flame=number_of_points_in_flame,
        integral_length_scale=integral_length_scale,
        sensor_method=sensor_method,
        sensor_reaction_index=sensor_reaction_index,
        beta_factor_omega_equation=beta_factor_omega_equation,
        sensor_num_smooths=sensor_num_smooths,
    )
    return_type = 'object'

class chemistry_solver(String, AllowedValuesMixin):
    """
    'chemistry_solver' child.
    """
    _version = '241'
    fluent_name = 'chemistry-solver'
    _python_name = 'chemistry_solver'
    return_type = 'object'

class integration_method(String, AllowedValuesMixin):
    """
    The integration method.
    """
    _version = '241'
    fluent_name = 'integration-method'
    _python_name = 'integration_method'
    return_type = 'object'

class absolute_ode_tolerance(Real):
    """
    The ODE Absolute error tolerance.
    """
    _version = '241'
    fluent_name = 'absolute-ode-tolerance'
    _python_name = 'absolute_ode_tolerance'
    return_type = 'object'

class relative_ode_tolerance(Real):
    """
    The ODE Relative error tolerance.
    """
    _version = '241'
    fluent_name = 'relative-ode-tolerance'
    _python_name = 'relative_ode_tolerance'
    return_type = 'object'

class integration_options(Group):
    """
    'integration_options' child.
    """
    _version = '241'
    fluent_name = 'integration-options'
    _python_name = 'integration_options'
    child_names = ['absolute_ode_tolerance', 'relative_ode_tolerance']
    _child_classes = dict(
        absolute_ode_tolerance=absolute_ode_tolerance,
        relative_ode_tolerance=relative_ode_tolerance,
    )
    return_type = 'object'

class isat_error_tolerance(Real):
    """
    The ISAT error tolerance.
    """
    _version = '241'
    fluent_name = 'isat-error-tolerance'
    _python_name = 'isat_error_tolerance'
    return_type = 'object'

class isat_table_size(Real):
    """
    The Max. Storage [Mb].
    """
    _version = '241'
    fluent_name = 'isat-table-size'
    _python_name = 'isat_table_size'
    return_type = 'object'

class isat_verbosity(Integer):
    """
    Verbosity for ISAT output.
    """
    _version = '241'
    fluent_name = 'isat-verbosity'
    _python_name = 'isat_verbosity'
    return_type = 'object'

class clear_isat_table(Command):
    """
    Clear the current ISAT table.
    """
    _version = '241'
    fluent_name = 'clear-isat-table'
    _python_name = 'clear_isat_table'
    return_type = 'object'

class isat_options(Group):
    """
    'isat_options' child.
    """
    _version = '241'
    fluent_name = 'isat-options'
    _python_name = 'isat_options'
    child_names = ['isat_error_tolerance', 'isat_table_size', 'isat_verbosity']
    command_names = ['clear_isat_table']
    _child_classes = dict(
        isat_error_tolerance=isat_error_tolerance,
        isat_table_size=isat_table_size,
        isat_verbosity=isat_verbosity,
        clear_isat_table=clear_isat_table,
    )
    return_type = 'object'

class chemistry_agglomeration(Boolean):
    """
    Enable/disable chemistry agglomeration.
    """
    _version = '241'
    fluent_name = 'chemistry-agglomeration'
    _python_name = 'chemistry_agglomeration'
    return_type = 'object'

class chemistry_agglomeration_error_tolerance(Real):
    """
    The agglomerate chemistry error tolerance.
    """
    _version = '241'
    fluent_name = 'chemistry-agglomeration-error-tolerance'
    _python_name = 'chemistry_agglomeration_error_tolerance'
    return_type = 'object'

class chemistry_agglomeration_temperature_bin(Real):
    """
    The agglomerate chemistry temperature bin.
    """
    _version = '241'
    fluent_name = 'chemistry-agglomeration-temperature-bin'
    _python_name = 'chemistry_agglomeration_temperature_bin'
    return_type = 'object'

class chemistry_agglomeration_options(Group):
    """
    'chemistry_agglomeration_options' child.
    """
    _version = '241'
    fluent_name = 'chemistry-agglomeration-options'
    _python_name = 'chemistry_agglomeration_options'
    child_names = ['chemistry_agglomeration_error_tolerance', 'chemistry_agglomeration_temperature_bin']
    _child_classes = dict(
        chemistry_agglomeration_error_tolerance=chemistry_agglomeration_error_tolerance,
        chemistry_agglomeration_temperature_bin=chemistry_agglomeration_temperature_bin,
    )
    return_type = 'object'

class turbulent_rate_constant(Real):
    """
    The Turbulent Rate Constant.
    """
    _version = '241'
    fluent_name = 'turbulent-rate-constant'
    _python_name = 'turbulent_rate_constant'
    return_type = 'object'

class chemical_rate_constant(Real):
    """
    The Chemical Rate Constant.
    """
    _version = '241'
    fluent_name = 'chemical-rate-constant'
    _python_name = 'chemical_rate_constant'
    return_type = 'object'

class fuel_species(StringList, AllowedValuesMixin):
    """
    The fuel species.
    """
    _version = '241'
    fluent_name = 'fuel-species'
    _python_name = 'fuel_species'
    return_type = 'object'

class equilibrium_rich_flammability(Boolean):
    """
    Enable/disable slow reaction rate in rich mixtures.
    """
    _version = '241'
    fluent_name = 'equilibrium-rich-flammability'
    _python_name = 'equilibrium_rich_flammability'
    return_type = 'object'

class rich_equivalence_ratio_limit(Real):
    """
    The Rich equivalence ratio limit.
    """
    _version = '241'
    fluent_name = 'rich-equivalence-ratio-limit'
    _python_name = 'rich_equivalence_ratio_limit'
    return_type = 'object'

class exponential_factor_beta(Real):
    """
    The Exponential factor (beta).
    """
    _version = '241'
    fluent_name = 'exponential-factor-beta'
    _python_name = 'exponential_factor_beta'
    return_type = 'object'

class equilibrium_rich_flammability_options(Group):
    """
    'equilibrium_rich_flammability_options' child.
    """
    _version = '241'
    fluent_name = 'equilibrium-rich-flammability-options'
    _python_name = 'equilibrium_rich_flammability_options'
    child_names = ['rich_equivalence_ratio_limit', 'exponential_factor_beta']
    _child_classes = dict(
        rich_equivalence_ratio_limit=rich_equivalence_ratio_limit,
        exponential_factor_beta=exponential_factor_beta,
    )
    return_type = 'object'

class relax_to_equilibrium_options(Group):
    """
    'relax_to_equilibrium_options' child.
    """
    _version = '241'
    fluent_name = 'relax-to-equilibrium-options'
    _python_name = 'relax_to_equilibrium_options'
    child_names = ['turbulent_rate_constant', 'chemical_rate_constant', 'fuel_species', 'equilibrium_rich_flammability', 'equilibrium_rich_flammability_options']
    _child_classes = dict(
        turbulent_rate_constant=turbulent_rate_constant,
        chemical_rate_constant=chemical_rate_constant,
        fuel_species=fuel_species,
        equilibrium_rich_flammability=equilibrium_rich_flammability,
        equilibrium_rich_flammability_options=equilibrium_rich_flammability_options,
    )
    return_type = 'object'

class dynamic_mechanism_reduction(Boolean):
    """
    Enable/disable dynamic mechanism reduction.
    """
    _version = '241'
    fluent_name = 'dynamic-mechanism-reduction'
    _python_name = 'dynamic_mechanism_reduction'
    return_type = 'object'

class dynamic_mechanism_reduction_tolerance(Real):
    """
    The mechanism reduction error tolerance.
    """
    _version = '241'
    fluent_name = 'dynamic-mechanism-reduction-tolerance'
    _python_name = 'dynamic_mechanism_reduction_tolerance'
    return_type = 'object'

class dynamic_mechanism_reduction_expert(Boolean):
    """
    Enable expert options for dynamic mechanism reduction.
    """
    _version = '241'
    fluent_name = 'dynamic-mechanism-reduction-expert'
    _python_name = 'dynamic_mechanism_reduction_expert'
    return_type = 'object'

class dynamic_mechanism_reduction_min_target(Integer):
    """
    Minimum number of target species for dynamic mechanism reduction.
    """
    _version = '241'
    fluent_name = 'dynamic-mechanism-reduction-min-target'
    _python_name = 'dynamic_mechanism_reduction_min_target'
    return_type = 'object'

class dynamic_mechanism_reduction_target_threshold(Real):
    """
    Minimum mass fraction of target species.
    """
    _version = '241'
    fluent_name = 'dynamic-mechanism-reduction-target-threshold'
    _python_name = 'dynamic_mechanism_reduction_target_threshold'
    return_type = 'object'

class dynamic_mechanism_reduction_targets(StringList, AllowedValuesMixin):
    """
    The target species.
    """
    _version = '241'
    fluent_name = 'dynamic-mechanism-reduction-targets'
    _python_name = 'dynamic_mechanism_reduction_targets'
    return_type = 'object'

class dynamic_mechanism_reduction_options(Group):
    """
    'dynamic_mechanism_reduction_options' child.
    """
    _version = '241'
    fluent_name = 'dynamic-mechanism-reduction-options'
    _python_name = 'dynamic_mechanism_reduction_options'
    child_names = ['dynamic_mechanism_reduction_tolerance', 'dynamic_mechanism_reduction_expert', 'dynamic_mechanism_reduction_min_target', 'dynamic_mechanism_reduction_target_threshold', 'dynamic_mechanism_reduction_targets']
    _child_classes = dict(
        dynamic_mechanism_reduction_tolerance=dynamic_mechanism_reduction_tolerance,
        dynamic_mechanism_reduction_expert=dynamic_mechanism_reduction_expert,
        dynamic_mechanism_reduction_min_target=dynamic_mechanism_reduction_min_target,
        dynamic_mechanism_reduction_target_threshold=dynamic_mechanism_reduction_target_threshold,
        dynamic_mechanism_reduction_targets=dynamic_mechanism_reduction_targets,
    )
    return_type = 'object'

class dimension_reduction(Boolean):
    """
    Enable/disable dimension reduction.
    """
    _version = '241'
    fluent_name = 'dimension-reduction'
    _python_name = 'dimension_reduction'
    return_type = 'object'

class number_of_represented_species(Integer):
    """
    The number of represented species.
    """
    _version = '241'
    fluent_name = 'number-of-represented-species'
    _python_name = 'number_of_represented_species'
    return_type = 'object'

class full_mechanism_material_name(String):
    """
    The full mechanism material name.
    """
    _version = '241'
    fluent_name = 'full-mechanism-material-name'
    _python_name = 'full_mechanism_material_name'
    return_type = 'object'

class fuel_oxidizer_species(StringList, AllowedValuesMixin):
    """
    The fuel species.
    """
    _version = '241'
    fluent_name = 'fuel-oxidizer-species'
    _python_name = 'fuel_oxidizer_species'
    return_type = 'object'

class dimension_reduction_mixture_options(Group):
    """
    'dimension_reduction_mixture_options' child.
    """
    _version = '241'
    fluent_name = 'dimension-reduction-mixture-options'
    _python_name = 'dimension_reduction_mixture_options'
    child_names = ['number_of_represented_species', 'full_mechanism_material_name', 'fuel_oxidizer_species']
    _child_classes = dict(
        number_of_represented_species=number_of_represented_species,
        full_mechanism_material_name=full_mechanism_material_name,
        fuel_oxidizer_species=fuel_oxidizer_species,
    )
    return_type = 'object'

class integration_parameters(Group):
    """
    'integration_parameters' child.
    """
    _version = '241'
    fluent_name = 'integration-parameters'
    _python_name = 'integration_parameters'
    child_names = ['integration_method', 'integration_options', 'isat_options', 'chemistry_agglomeration', 'chemistry_agglomeration_options', 'relax_to_equilibrium_options', 'dynamic_mechanism_reduction', 'dynamic_mechanism_reduction_options', 'dimension_reduction', 'dimension_reduction_mixture_options']
    _child_classes = dict(
        integration_method=integration_method,
        integration_options=integration_options,
        isat_options=isat_options,
        chemistry_agglomeration=chemistry_agglomeration,
        chemistry_agglomeration_options=chemistry_agglomeration_options,
        relax_to_equilibrium_options=relax_to_equilibrium_options,
        dynamic_mechanism_reduction=dynamic_mechanism_reduction,
        dynamic_mechanism_reduction_options=dynamic_mechanism_reduction_options,
        dimension_reduction=dimension_reduction,
        dimension_reduction_mixture_options=dimension_reduction_mixture_options,
    )
    return_type = 'object'

class species(Group):
    """
    'species' child.
    """
    _version = '241'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['model', 'options', 'reactions', 'wall_surface_options', 'turb_chem_interaction_model', 'turb_chem_interaction_model_options', 'species_transport_expert_options', 'edc_model_options', 'tfm_model_options', 'chemistry_solver', 'integration_parameters']
    _child_classes = dict(
        model=model_3,
        options=options_2,
        reactions=reactions,
        wall_surface_options=wall_surface_options,
        turb_chem_interaction_model=turb_chem_interaction_model,
        turb_chem_interaction_model_options=turb_chem_interaction_model_options,
        species_transport_expert_options=species_transport_expert_options,
        edc_model_options=edc_model_options,
        tfm_model_options=tfm_model_options,
        chemistry_solver=chemistry_solver,
        integration_parameters=integration_parameters,
    )
    return_type = 'object'

class contour_plotting(String, AllowedValuesMixin):
    """
    Enable/disable contour and vector plots of mean and rms particle data.
    """
    _version = '241'
    fluent_name = 'contour-plotting'
    _python_name = 'contour_plotting'
    return_type = 'object'

class option_2(String, AllowedValuesMixin):
    """
    The interphase coupling option.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class update_sources_every_iteration(Boolean):
    """
    'update_sources_every_iteration' child.
    """
    _version = '241'
    fluent_name = 'update-sources-every-iteration?'
    _python_name = 'update_sources_every_iteration'
    return_type = 'object'

class interaction(Group):
    """
    'interaction' child.
    """
    _version = '241'
    fluent_name = 'interaction'
    _python_name = 'interaction'
    child_names = ['option', 'update_sources_every_iteration', 'iteration_interval']
    _child_classes = dict(
        option=option_2,
        update_sources_every_iteration=update_sources_every_iteration,
        iteration_interval=iteration_interval,
    )
    return_type = 'object'

class option_3(String, AllowedValuesMixin):
    """
    The unsteady particle tracking option.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class create_particles_every_dpm_step(Boolean):
    """
    Create particles every particle time step (else every fluid time step)?.
    """
    _version = '241'
    fluent_name = 'create-particles-every-dpm-step?'
    _python_name = 'create_particles_every_dpm_step'
    return_type = 'object'

class dpm_time_step_size(Real):
    """
    The particle time step.
    """
    _version = '241'
    fluent_name = 'dpm-time-step-size'
    _python_name = 'dpm_time_step_size'
    return_type = 'object'

class number_of_time_steps(Integer):
    """
    Number of steps particles are advanced in time.
    """
    _version = '241'
    fluent_name = 'number-of-time-steps'
    _python_name = 'number_of_time_steps'
    return_type = 'object'

class clear_all_particles(Command):
    """
    Clear all particles currently in the domain.
    """
    _version = '241'
    fluent_name = 'clear-all-particles'
    _python_name = 'clear_all_particles'
    return_type = 'object'

class unsteady_tracking(Group):
    """
    'unsteady_tracking' child.
    """
    _version = '241'
    fluent_name = 'unsteady-tracking'
    _python_name = 'unsteady_tracking'
    child_names = ['option', 'create_particles_every_dpm_step', 'dpm_time_step_size', 'number_of_time_steps']
    command_names = ['clear_all_particles']
    _child_classes = dict(
        option=option_3,
        create_particles_every_dpm_step=create_particles_every_dpm_step,
        dpm_time_step_size=dpm_time_step_size,
        number_of_time_steps=number_of_time_steps,
        clear_all_particles=clear_all_particles,
    )
    return_type = 'object'

class general_settings(Group):
    """
    Main object.
    """
    _version = '241'
    fluent_name = 'general-settings'
    _python_name = 'general_settings'
    child_names = ['contour_plotting', 'interaction', 'unsteady_tracking']
    _child_classes = dict(
        contour_plotting=contour_plotting,
        interaction=interaction,
        unsteady_tracking=unsteady_tracking,
    )
    return_type = 'object'

class particle_type(String, AllowedValuesMixin):
    """
    'particle_type' child.
    """
    _version = '241'
    fluent_name = 'particle-type'
    _python_name = 'particle_type'
    return_type = 'object'

class reference_frame(String, AllowedValuesMixin):
    """
    'reference_frame' child.
    """
    _version = '241'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'
    return_type = 'object'

class number_of_streams(Integer, AllowedValuesMixin):
    """
    'number_of_streams' child.
    """
    _version = '241'
    fluent_name = 'number-of-streams'
    _python_name = 'number_of_streams'
    return_type = 'object'

class cone_type(String, AllowedValuesMixin):
    """
    'cone_type' child.
    """
    _version = '241'
    fluent_name = 'cone-type'
    _python_name = 'cone_type'
    return_type = 'object'

class inject_as_film(Boolean, AllowedValuesMixin):
    """
    'inject_as_film' child.
    """
    _version = '241'
    fluent_name = 'inject-as-film?'
    _python_name = 'inject_as_film'
    return_type = 'object'

class filename_2(Filename, AllowedValuesMixin):
    """
    'filename' child.
    """
    _version = '241'
    fluent_name = 'filename'
    _python_name = 'filename'
    return_type = 'object'

class injection_type(Group):
    """
    'injection_type' child.
    """
    _version = '241'
    fluent_name = 'injection-type'
    _python_name = 'injection_type'
    child_names = ['option', 'cone_type', 'inject_as_film', 'filename']
    _child_classes = dict(
        option=option,
        cone_type=cone_type,
        inject_as_film=inject_as_film,
        filename=filename_2,
    )
    return_type = 'object'

class continuous_phase(String, AllowedValuesMixin):
    """
    'continuous_phase' child.
    """
    _version = '241'
    fluent_name = 'continuous-phase'
    _python_name = 'continuous_phase'
    return_type = 'object'

class rough_wall_model_enabled(Boolean, AllowedValuesMixin):
    """
    'rough_wall_model_enabled' child.
    """
    _version = '241'
    fluent_name = 'rough-wall-model-enabled?'
    _python_name = 'rough_wall_model_enabled'
    return_type = 'object'

class ddpm_phase(String, AllowedValuesMixin):
    """
    'ddpm_phase' child.
    """
    _version = '241'
    fluent_name = 'ddpm-phase'
    _python_name = 'ddpm_phase'
    return_type = 'object'

class volume_displacement(Group):
    """
    'volume_displacement' child.
    """
    _version = '241'
    fluent_name = 'volume-displacement'
    _python_name = 'volume_displacement'
    child_names = ['option', 'ddpm_phase']
    _child_classes = dict(
        option=option,
        ddpm_phase=ddpm_phase,
    )
    return_type = 'object'

class interaction_1(Group):
    """
    'interaction' child.
    """
    _version = '241'
    fluent_name = 'interaction'
    _python_name = 'interaction'
    child_names = ['continuous_phase', 'rough_wall_model_enabled', 'volume_displacement']
    _child_classes = dict(
        continuous_phase=continuous_phase,
        rough_wall_model_enabled=rough_wall_model_enabled,
        volume_displacement=volume_displacement,
    )
    return_type = 'object'

class const_number_in_parcel(Real, AllowedValuesMixin):
    """
    'const_number_in_parcel' child.
    """
    _version = '241'
    fluent_name = 'const-number-in-parcel'
    _python_name = 'const_number_in_parcel'
    return_type = 'object'

class const_parcel_mass(Real, AllowedValuesMixin):
    """
    'const_parcel_mass' child.
    """
    _version = '241'
    fluent_name = 'const-parcel-mass'
    _python_name = 'const_parcel_mass'
    return_type = 'object'

class const_parcel_diameter(Real, AllowedValuesMixin):
    """
    'const_parcel_diameter' child.
    """
    _version = '241'
    fluent_name = 'const-parcel-diameter'
    _python_name = 'const_parcel_diameter'
    return_type = 'object'

class parcel_method(Group):
    """
    'parcel_method' child.
    """
    _version = '241'
    fluent_name = 'parcel-method'
    _python_name = 'parcel_method'
    child_names = ['option', 'const_number_in_parcel', 'const_parcel_mass', 'const_parcel_diameter']
    _child_classes = dict(
        option=option,
        const_number_in_parcel=const_number_in_parcel,
        const_parcel_mass=const_parcel_mass,
        const_parcel_diameter=const_parcel_diameter,
    )
    return_type = 'object'

class enable_7(Boolean, AllowedValuesMixin):
    """
    'enable' child.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class time_delay(Real, AllowedValuesMixin):
    """
    'time_delay' child.
    """
    _version = '241'
    fluent_name = 'time-delay'
    _python_name = 'time_delay'
    return_type = 'object'

class particle_reinjector(Group):
    """
    'particle_reinjector' child.
    """
    _version = '241'
    fluent_name = 'particle-reinjector'
    _python_name = 'particle_reinjector'
    child_names = ['enable', 'time_delay']
    _child_classes = dict(
        enable=enable_7,
        time_delay=time_delay,
    )
    return_type = 'object'

class shape_factor(Real, AllowedValuesMixin):
    """
    'shape_factor' child.
    """
    _version = '241'
    fluent_name = 'shape-factor'
    _python_name = 'shape_factor'
    return_type = 'object'

class cunningham_factor(Real, AllowedValuesMixin):
    """
    'cunningham_factor' child.
    """
    _version = '241'
    fluent_name = 'cunningham-factor'
    _python_name = 'cunningham_factor'
    return_type = 'object'

class particle_drag(Group):
    """
    'particle_drag' child.
    """
    _version = '241'
    fluent_name = 'particle-drag'
    _python_name = 'particle_drag'
    child_names = ['option', 'shape_factor', 'cunningham_factor']
    _child_classes = dict(
        option=option,
        shape_factor=shape_factor,
        cunningham_factor=cunningham_factor,
    )
    return_type = 'object'

class enabled_2(Boolean, AllowedValuesMixin):
    """
    'enabled' child.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class drag_law(String, AllowedValuesMixin):
    """
    'drag_law' child.
    """
    _version = '241'
    fluent_name = 'drag-law'
    _python_name = 'drag_law'
    return_type = 'object'

class lift_law(String, AllowedValuesMixin):
    """
    'lift_law' child.
    """
    _version = '241'
    fluent_name = 'lift-law'
    _python_name = 'lift_law'
    return_type = 'object'

class particle_rotation(Group):
    """
    'particle_rotation' child.
    """
    _version = '241'
    fluent_name = 'particle-rotation'
    _python_name = 'particle_rotation'
    child_names = ['enabled', 'drag_law', 'lift_law']
    _child_classes = dict(
        enabled=enabled_2,
        drag_law=drag_law,
        lift_law=lift_law,
    )
    return_type = 'object'

class const_htc(Real, AllowedValuesMixin):
    """
    'const_htc' child.
    """
    _version = '241'
    fluent_name = 'const-htc'
    _python_name = 'const_htc'
    return_type = 'object'

class const_nu(Real, AllowedValuesMixin):
    """
    'const_nu' child.
    """
    _version = '241'
    fluent_name = 'const-nu'
    _python_name = 'const_nu'
    return_type = 'object'

class heat_exchange(Group):
    """
    'heat_exchange' child.
    """
    _version = '241'
    fluent_name = 'heat-exchange'
    _python_name = 'heat_exchange'
    child_names = ['option', 'const_htc', 'const_nu']
    _child_classes = dict(
        option=option,
        const_htc=const_htc,
        const_nu=const_nu,
    )
    return_type = 'object'

class law_1(String, AllowedValuesMixin):
    """
    'law_1' child.
    """
    _version = '241'
    fluent_name = 'law-1'
    _python_name = 'law_1'
    return_type = 'object'

class law_2(String, AllowedValuesMixin):
    """
    'law_2' child.
    """
    _version = '241'
    fluent_name = 'law-2'
    _python_name = 'law_2'
    return_type = 'object'

class law_3(String, AllowedValuesMixin):
    """
    'law_3' child.
    """
    _version = '241'
    fluent_name = 'law-3'
    _python_name = 'law_3'
    return_type = 'object'

class law_4(String, AllowedValuesMixin):
    """
    'law_4' child.
    """
    _version = '241'
    fluent_name = 'law-4'
    _python_name = 'law_4'
    return_type = 'object'

class law_5(String, AllowedValuesMixin):
    """
    'law_5' child.
    """
    _version = '241'
    fluent_name = 'law-5'
    _python_name = 'law_5'
    return_type = 'object'

class law_6(String, AllowedValuesMixin):
    """
    'law_6' child.
    """
    _version = '241'
    fluent_name = 'law-6'
    _python_name = 'law_6'
    return_type = 'object'

class law_7(String, AllowedValuesMixin):
    """
    'law_7' child.
    """
    _version = '241'
    fluent_name = 'law-7'
    _python_name = 'law_7'
    return_type = 'object'

class law_8(String, AllowedValuesMixin):
    """
    'law_8' child.
    """
    _version = '241'
    fluent_name = 'law-8'
    _python_name = 'law_8'
    return_type = 'object'

class law_9(String, AllowedValuesMixin):
    """
    'law_9' child.
    """
    _version = '241'
    fluent_name = 'law-9'
    _python_name = 'law_9'
    return_type = 'object'

class law_10(String, AllowedValuesMixin):
    """
    'law_10' child.
    """
    _version = '241'
    fluent_name = 'law-10'
    _python_name = 'law_10'
    return_type = 'object'

class switch(String, AllowedValuesMixin):
    """
    'switch' child.
    """
    _version = '241'
    fluent_name = 'switch'
    _python_name = 'switch'
    return_type = 'object'

class custom_laws(Group):
    """
    'custom_laws' child.
    """
    _version = '241'
    fluent_name = 'custom-laws'
    _python_name = 'custom_laws'
    child_names = ['law_1', 'law_2', 'law_3', 'law_4', 'law_5', 'law_6', 'law_7', 'law_8', 'law_9', 'law_10', 'switch']
    _child_classes = dict(
        law_1=law_1,
        law_2=law_2,
        law_3=law_3,
        law_4=law_4,
        law_5=law_5,
        law_6=law_6,
        law_7=law_7,
        law_8=law_8,
        law_9=law_9,
        law_10=law_10,
        switch=switch,
    )
    return_type = 'object'

class random_eddy_lifetime(Boolean, AllowedValuesMixin):
    """
    'random_eddy_lifetime' child.
    """
    _version = '241'
    fluent_name = 'random-eddy-lifetime?'
    _python_name = 'random_eddy_lifetime'
    return_type = 'object'

class number_of_tries(Integer, AllowedValuesMixin):
    """
    'number_of_tries' child.
    """
    _version = '241'
    fluent_name = 'number-of-tries'
    _python_name = 'number_of_tries'
    return_type = 'object'

class time_scale_constant_1(Real, AllowedValuesMixin):
    """
    'time_scale_constant' child.
    """
    _version = '241'
    fluent_name = 'time-scale-constant'
    _python_name = 'time_scale_constant'
    return_type = 'object'

class length_scale_constant(Real, AllowedValuesMixin):
    """
    'length_scale_constant' child.
    """
    _version = '241'
    fluent_name = 'length-scale-constant'
    _python_name = 'length_scale_constant'
    return_type = 'object'

class turbulent_dispersion(Group):
    """
    'turbulent_dispersion' child.
    """
    _version = '241'
    fluent_name = 'turbulent-dispersion'
    _python_name = 'turbulent_dispersion'
    child_names = ['option', 'random_eddy_lifetime', 'number_of_tries', 'time_scale_constant', 'length_scale_constant']
    _child_classes = dict(
        option=option,
        random_eddy_lifetime=random_eddy_lifetime,
        number_of_tries=number_of_tries,
        time_scale_constant=time_scale_constant_1,
        length_scale_constant=length_scale_constant,
    )
    return_type = 'object'

class y0(Real, AllowedValuesMixin):
    """
    'y0' child.
    """
    _version = '241'
    fluent_name = 'y0'
    _python_name = 'y0'
    return_type = 'object'

class number_of_child_droplets(Integer, AllowedValuesMixin):
    """
    'number_of_child_droplets' child.
    """
    _version = '241'
    fluent_name = 'number-of-child-droplets'
    _python_name = 'number_of_child_droplets'
    return_type = 'object'

class b1(Real, AllowedValuesMixin):
    """
    'b1' child.
    """
    _version = '241'
    fluent_name = 'b1'
    _python_name = 'b1'
    return_type = 'object'

class b0(Real, AllowedValuesMixin):
    """
    'b0' child.
    """
    _version = '241'
    fluent_name = 'b0'
    _python_name = 'b0'
    return_type = 'object'

class cl(Real, AllowedValuesMixin):
    """
    'cl' child.
    """
    _version = '241'
    fluent_name = 'cl'
    _python_name = 'cl'
    return_type = 'object'

class ctau(Real, AllowedValuesMixin):
    """
    'ctau' child.
    """
    _version = '241'
    fluent_name = 'ctau'
    _python_name = 'ctau'
    return_type = 'object'

class crt(Real, AllowedValuesMixin):
    """
    'crt' child.
    """
    _version = '241'
    fluent_name = 'crt'
    _python_name = 'crt'
    return_type = 'object'

class critical_weber_number(Real, AllowedValuesMixin):
    """
    'critical_weber_number' child.
    """
    _version = '241'
    fluent_name = 'critical-weber-number'
    _python_name = 'critical_weber_number'
    return_type = 'object'

class core_b1(Real, AllowedValuesMixin):
    """
    'core_b1' child.
    """
    _version = '241'
    fluent_name = 'core-b1'
    _python_name = 'core_b1'
    return_type = 'object'

class xi(Real, AllowedValuesMixin):
    """
    'xi' child.
    """
    _version = '241'
    fluent_name = 'xi'
    _python_name = 'xi'
    return_type = 'object'

class target_number_in_parcel(Real, AllowedValuesMixin):
    """
    'target_number_in_parcel' child.
    """
    _version = '241'
    fluent_name = 'target-number-in-parcel'
    _python_name = 'target_number_in_parcel'
    return_type = 'object'

class c0(Real, AllowedValuesMixin):
    """
    'c0' child.
    """
    _version = '241'
    fluent_name = 'c0'
    _python_name = 'c0'
    return_type = 'object'

class column_drag_coeff(Real, AllowedValuesMixin):
    """
    'column_drag_coeff' child.
    """
    _version = '241'
    fluent_name = 'column-drag-coeff'
    _python_name = 'column_drag_coeff'
    return_type = 'object'

class ligament_factor(Real, AllowedValuesMixin):
    """
    'ligament_factor' child.
    """
    _version = '241'
    fluent_name = 'ligament-factor'
    _python_name = 'ligament_factor'
    return_type = 'object'

class jet_diameter(Real, AllowedValuesMixin):
    """
    'jet_diameter' child.
    """
    _version = '241'
    fluent_name = 'jet-diameter'
    _python_name = 'jet_diameter'
    return_type = 'object'

class k1(Real, AllowedValuesMixin):
    """
    'k1' child.
    """
    _version = '241'
    fluent_name = 'k1'
    _python_name = 'k1'
    return_type = 'object'

class k2(Real, AllowedValuesMixin):
    """
    'k2' child.
    """
    _version = '241'
    fluent_name = 'k2'
    _python_name = 'k2'
    return_type = 'object'

class tb(Real, AllowedValuesMixin):
    """
    'tb' child.
    """
    _version = '241'
    fluent_name = 'tb'
    _python_name = 'tb'
    return_type = 'object'

class droplet_breakup(Group):
    """
    'droplet_breakup' child.
    """
    _version = '241'
    fluent_name = 'droplet-breakup'
    _python_name = 'droplet_breakup'
    child_names = ['option', 'y0', 'number_of_child_droplets', 'b1', 'b0', 'cl', 'ctau', 'crt', 'critical_weber_number', 'core_b1', 'xi', 'target_number_in_parcel', 'c0', 'column_drag_coeff', 'ligament_factor', 'jet_diameter', 'k1', 'k2', 'tb']
    _child_classes = dict(
        option=option,
        y0=y0,
        number_of_child_droplets=number_of_child_droplets,
        b1=b1,
        b0=b0,
        cl=cl,
        ctau=ctau,
        crt=crt,
        critical_weber_number=critical_weber_number,
        core_b1=core_b1,
        xi=xi,
        target_number_in_parcel=target_number_in_parcel,
        c0=c0,
        column_drag_coeff=column_drag_coeff,
        ligament_factor=ligament_factor,
        jet_diameter=jet_diameter,
        k1=k1,
        k2=k2,
        tb=tb,
    )
    return_type = 'object'

class physical_models_1(Group):
    """
    'physical_models' child.
    """
    _version = '241'
    fluent_name = 'physical-models'
    _python_name = 'physical_models'
    child_names = ['particle_drag', 'particle_rotation', 'heat_exchange', 'custom_laws', 'turbulent_dispersion', 'droplet_breakup']
    _child_classes = dict(
        particle_drag=particle_drag,
        particle_rotation=particle_rotation,
        heat_exchange=heat_exchange,
        custom_laws=custom_laws,
        turbulent_dispersion=turbulent_dispersion,
        droplet_breakup=droplet_breakup,
    )
    return_type = 'object'

class x(Real, AllowedValuesMixin):
    """
    'x' child.
    """
    _version = '241'
    fluent_name = 'x'
    _python_name = 'x'
    return_type = 'object'

class x_2(Real, AllowedValuesMixin):
    """
    'x_2' child.
    """
    _version = '241'
    fluent_name = 'x-2'
    _python_name = 'x_2'
    return_type = 'object'

class y(Real, AllowedValuesMixin):
    """
    'y' child.
    """
    _version = '241'
    fluent_name = 'y'
    _python_name = 'y'
    return_type = 'object'

class y_2(Real, AllowedValuesMixin):
    """
    'y_2' child.
    """
    _version = '241'
    fluent_name = 'y-2'
    _python_name = 'y_2'
    return_type = 'object'

class z(Real, AllowedValuesMixin):
    """
    'z' child.
    """
    _version = '241'
    fluent_name = 'z'
    _python_name = 'z'
    return_type = 'object'

class z_2(Real, AllowedValuesMixin):
    """
    'z_2' child.
    """
    _version = '241'
    fluent_name = 'z-2'
    _python_name = 'z_2'
    return_type = 'object'

class azimuthal_start_angle(Real, AllowedValuesMixin):
    """
    'azimuthal_start_angle' child.
    """
    _version = '241'
    fluent_name = 'azimuthal-start-angle'
    _python_name = 'azimuthal_start_angle'
    return_type = 'object'

class azimuthal_stop_angle(Real, AllowedValuesMixin):
    """
    'azimuthal_stop_angle' child.
    """
    _version = '241'
    fluent_name = 'azimuthal-stop-angle'
    _python_name = 'azimuthal_stop_angle'
    return_type = 'object'

class injection_surfaces(StringList, AllowedValuesMixin):
    """
    'injection_surfaces' child.
    """
    _version = '241'
    fluent_name = 'injection-surfaces'
    _python_name = 'injection_surfaces'
    return_type = 'object'

class random_surface_inj(Boolean, AllowedValuesMixin):
    """
    'random_surface_inj' child.
    """
    _version = '241'
    fluent_name = 'random-surface-inj?'
    _python_name = 'random_surface_inj'
    return_type = 'object'

class location_1(Group):
    """
    'location' child.
    """
    _version = '241'
    fluent_name = 'location'
    _python_name = 'location'
    child_names = ['x', 'x_2', 'y', 'y_2', 'z', 'z_2', 'azimuthal_start_angle', 'azimuthal_stop_angle', 'injection_surfaces', 'random_surface_inj']
    _child_classes = dict(
        x=x,
        x_2=x_2,
        y=y,
        y_2=y_2,
        z=z,
        z_2=z_2,
        azimuthal_start_angle=azimuthal_start_angle,
        azimuthal_stop_angle=azimuthal_stop_angle,
        injection_surfaces=injection_surfaces,
        random_surface_inj=random_surface_inj,
    )
    return_type = 'object'

class r(Group):
    """
    'r' child.
    """
    _version = '241'
    fluent_name = 'r'
    _python_name = 'r'
    child_names = ['x', 'y', 'z']
    _child_classes = dict(
        x=x,
        y=y,
        z=z,
    )
    return_type = 'object'

class u(Group):
    """
    'u' child.
    """
    _version = '241'
    fluent_name = 'u'
    _python_name = 'u'
    child_names = ['x', 'y', 'z']
    _child_classes = dict(
        x=x,
        y=y,
        z=z,
    )
    return_type = 'object'

class matrix(Group):
    """
    'matrix' child.
    """
    _version = '241'
    fluent_name = 'matrix'
    _python_name = 'matrix'
    child_names = ['r', 'u']
    _child_classes = dict(
        r=r,
        u=u,
    )
    return_type = 'object'

class half_angle(Real, AllowedValuesMixin):
    """
    'half_angle' child.
    """
    _version = '241'
    fluent_name = 'half-angle'
    _python_name = 'half_angle'
    return_type = 'object'

class dispersion_angle(Real, AllowedValuesMixin):
    """
    'dispersion_angle' child.
    """
    _version = '241'
    fluent_name = 'dispersion-angle'
    _python_name = 'dispersion_angle'
    return_type = 'object'

class inner_radius(Real, AllowedValuesMixin):
    """
    'inner_radius' child.
    """
    _version = '241'
    fluent_name = 'inner-radius'
    _python_name = 'inner_radius'
    return_type = 'object'

class outer_radius(Real, AllowedValuesMixin):
    """
    'outer_radius' child.
    """
    _version = '241'
    fluent_name = 'outer-radius'
    _python_name = 'outer_radius'
    return_type = 'object'

class x_axis(Real, AllowedValuesMixin):
    """
    'x_axis' child.
    """
    _version = '241'
    fluent_name = 'x-axis'
    _python_name = 'x_axis'
    return_type = 'object'

class y_axis(Real, AllowedValuesMixin):
    """
    'y_axis' child.
    """
    _version = '241'
    fluent_name = 'y-axis'
    _python_name = 'y_axis'
    return_type = 'object'

class z_axis(Real, AllowedValuesMixin):
    """
    'z_axis' child.
    """
    _version = '241'
    fluent_name = 'z-axis'
    _python_name = 'z_axis'
    return_type = 'object'

class cone_settings(Group):
    """
    'cone_settings' child.
    """
    _version = '241'
    fluent_name = 'cone-settings'
    _python_name = 'cone_settings'
    child_names = ['half_angle', 'dispersion_angle', 'inner_radius', 'outer_radius', 'x_axis', 'y_axis', 'z_axis']
    _child_classes = dict(
        half_angle=half_angle,
        dispersion_angle=dispersion_angle,
        inner_radius=inner_radius,
        outer_radius=outer_radius,
        x_axis=x_axis,
        y_axis=y_axis,
        z_axis=z_axis,
    )
    return_type = 'object'

class x_velocity(Real, AllowedValuesMixin):
    """
    'x_velocity' child.
    """
    _version = '241'
    fluent_name = 'x-velocity'
    _python_name = 'x_velocity'
    return_type = 'object'

class x_velocity_2(Real, AllowedValuesMixin):
    """
    'x_velocity_2' child.
    """
    _version = '241'
    fluent_name = 'x-velocity-2'
    _python_name = 'x_velocity_2'
    return_type = 'object'

class y_velocity(Real, AllowedValuesMixin):
    """
    'y_velocity' child.
    """
    _version = '241'
    fluent_name = 'y-velocity'
    _python_name = 'y_velocity'
    return_type = 'object'

class y_velocity_2(Real, AllowedValuesMixin):
    """
    'y_velocity_2' child.
    """
    _version = '241'
    fluent_name = 'y-velocity-2'
    _python_name = 'y_velocity_2'
    return_type = 'object'

class z_velocity(Real, AllowedValuesMixin):
    """
    'z_velocity' child.
    """
    _version = '241'
    fluent_name = 'z-velocity'
    _python_name = 'z_velocity'
    return_type = 'object'

class z_velocity_2(Real, AllowedValuesMixin):
    """
    'z_velocity_2' child.
    """
    _version = '241'
    fluent_name = 'z-velocity-2'
    _python_name = 'z_velocity_2'
    return_type = 'object'

class magnitude(Real, AllowedValuesMixin):
    """
    'magnitude' child.
    """
    _version = '241'
    fluent_name = 'magnitude'
    _python_name = 'magnitude'
    return_type = 'object'

class swirl_fraction(Real, AllowedValuesMixin):
    """
    'swirl_fraction' child.
    """
    _version = '241'
    fluent_name = 'swirl-fraction'
    _python_name = 'swirl_fraction'
    return_type = 'object'

class use_face_normal_direction(Boolean, AllowedValuesMixin):
    """
    'use_face_normal_direction' child.
    """
    _version = '241'
    fluent_name = 'use-face-normal-direction?'
    _python_name = 'use_face_normal_direction'
    return_type = 'object'

class velocity(Group):
    """
    'velocity' child.
    """
    _version = '241'
    fluent_name = 'velocity'
    _python_name = 'velocity'
    child_names = ['x_velocity', 'x_velocity_2', 'y_velocity', 'y_velocity_2', 'z_velocity', 'z_velocity_2', 'magnitude', 'swirl_fraction', 'use_face_normal_direction']
    _child_classes = dict(
        x_velocity=x_velocity,
        x_velocity_2=x_velocity_2,
        y_velocity=y_velocity,
        y_velocity_2=y_velocity_2,
        z_velocity=z_velocity,
        z_velocity_2=z_velocity_2,
        magnitude=magnitude,
        swirl_fraction=swirl_fraction,
        use_face_normal_direction=use_face_normal_direction,
    )
    return_type = 'object'

class angular_velocity(Group):
    """
    'angular_velocity' child.
    """
    _version = '241'
    fluent_name = 'angular-velocity'
    _python_name = 'angular_velocity'
    child_names = ['x', 'x_2', 'y', 'y_2', 'z', 'z_2', 'magnitude']
    _child_classes = dict(
        x=x,
        x_2=x_2,
        y=y,
        y_2=y_2,
        z=z,
        z_2=z_2,
        magnitude=magnitude,
    )
    return_type = 'object'

class flow_rate(Real, AllowedValuesMixin):
    """
    'flow_rate' child.
    """
    _version = '241'
    fluent_name = 'flow-rate'
    _python_name = 'flow_rate'
    return_type = 'object'

class flow_rate_2(Real, AllowedValuesMixin):
    """
    'flow_rate_2' child.
    """
    _version = '241'
    fluent_name = 'flow-rate-2'
    _python_name = 'flow_rate_2'
    return_type = 'object'

class total_flow_rate(Real, AllowedValuesMixin):
    """
    'total_flow_rate' child.
    """
    _version = '241'
    fluent_name = 'total-flow-rate'
    _python_name = 'total_flow_rate'
    return_type = 'object'

class scale_by_area(Boolean, AllowedValuesMixin):
    """
    'scale_by_area' child.
    """
    _version = '241'
    fluent_name = 'scale-by-area?'
    _python_name = 'scale_by_area'
    return_type = 'object'

class mass_flow_rate(Group):
    """
    'mass_flow_rate' child.
    """
    _version = '241'
    fluent_name = 'mass-flow-rate'
    _python_name = 'mass_flow_rate'
    child_names = ['flow_rate', 'flow_rate_2', 'total_flow_rate', 'scale_by_area']
    _child_classes = dict(
        flow_rate=flow_rate,
        flow_rate_2=flow_rate_2,
        total_flow_rate=total_flow_rate,
        scale_by_area=scale_by_area,
    )
    return_type = 'object'

class start_time(Real, AllowedValuesMixin):
    """
    'start_time' child.
    """
    _version = '241'
    fluent_name = 'start-time'
    _python_name = 'start_time'
    return_type = 'object'

class stop_time(Real, AllowedValuesMixin):
    """
    'stop_time' child.
    """
    _version = '241'
    fluent_name = 'stop-time'
    _python_name = 'stop_time'
    return_type = 'object'

class times(Group):
    """
    'times' child.
    """
    _version = '241'
    fluent_name = 'times'
    _python_name = 'times'
    child_names = ['start_time', 'stop_time']
    _child_classes = dict(
        start_time=start_time,
        stop_time=stop_time,
    )
    return_type = 'object'

class diameter(Real, AllowedValuesMixin):
    """
    'diameter' child.
    """
    _version = '241'
    fluent_name = 'diameter'
    _python_name = 'diameter'
    return_type = 'object'

class diameter_2(Real, AllowedValuesMixin):
    """
    'diameter_2' child.
    """
    _version = '241'
    fluent_name = 'diameter-2'
    _python_name = 'diameter_2'
    return_type = 'object'

class min_diam(Real, AllowedValuesMixin):
    """
    'min_diam' child.
    """
    _version = '241'
    fluent_name = 'min-diam'
    _python_name = 'min_diam'
    return_type = 'object'

class max_diam(Real, AllowedValuesMixin):
    """
    'max_diam' child.
    """
    _version = '241'
    fluent_name = 'max-diam'
    _python_name = 'max_diam'
    return_type = 'object'

class mean_diam(Real, AllowedValuesMixin):
    """
    'mean_diam' child.
    """
    _version = '241'
    fluent_name = 'mean-diam'
    _python_name = 'mean_diam'
    return_type = 'object'

class spread(Real, AllowedValuesMixin):
    """
    'spread' child.
    """
    _version = '241'
    fluent_name = 'spread'
    _python_name = 'spread'
    return_type = 'object'

class number_of_diameters(Real, AllowedValuesMixin):
    """
    'number_of_diameters' child.
    """
    _version = '241'
    fluent_name = 'number-of-diameters'
    _python_name = 'number_of_diameters'
    return_type = 'object'

class rosin_rammler(Group):
    """
    'rosin_rammler' child.
    """
    _version = '241'
    fluent_name = 'rosin-rammler'
    _python_name = 'rosin_rammler'
    child_names = ['min_diam', 'max_diam', 'mean_diam', 'spread', 'number_of_diameters']
    _child_classes = dict(
        min_diam=min_diam,
        max_diam=max_diam,
        mean_diam=mean_diam,
        spread=spread,
        number_of_diameters=number_of_diameters,
    )
    return_type = 'object'

class table_name(String, AllowedValuesMixin):
    """
    'table_name' child.
    """
    _version = '241'
    fluent_name = 'table-name'
    _python_name = 'table_name'
    return_type = 'object'

class column_with_diameters(Integer, AllowedValuesMixin):
    """
    'column_with_diameters' child.
    """
    _version = '241'
    fluent_name = 'column-with-diameters'
    _python_name = 'column_with_diameters'
    return_type = 'object'

class column_with_number_fractions(Integer, AllowedValuesMixin):
    """
    'column_with_number_fractions' child.
    """
    _version = '241'
    fluent_name = 'column-with-number-fractions'
    _python_name = 'column_with_number_fractions'
    return_type = 'object'

class column_with_mass_fractions(Integer, AllowedValuesMixin):
    """
    'column_with_mass_fractions' child.
    """
    _version = '241'
    fluent_name = 'column-with-mass-fractions'
    _python_name = 'column_with_mass_fractions'
    return_type = 'object'

class accumulated_number_fraction(Boolean, AllowedValuesMixin):
    """
    'accumulated_number_fraction' child.
    """
    _version = '241'
    fluent_name = 'accumulated-number-fraction?'
    _python_name = 'accumulated_number_fraction'
    return_type = 'object'

class accumulated_mass_fraction(Boolean, AllowedValuesMixin):
    """
    'accumulated_mass_fraction' child.
    """
    _version = '241'
    fluent_name = 'accumulated-mass-fraction?'
    _python_name = 'accumulated_mass_fraction'
    return_type = 'object'

class tabulated_size(Group):
    """
    'tabulated_size' child.
    """
    _version = '241'
    fluent_name = 'tabulated-size'
    _python_name = 'tabulated_size'
    child_names = ['table_name', 'column_with_diameters', 'column_with_number_fractions', 'column_with_mass_fractions', 'accumulated_number_fraction', 'accumulated_mass_fraction']
    _child_classes = dict(
        table_name=table_name,
        column_with_diameters=column_with_diameters,
        column_with_number_fractions=column_with_number_fractions,
        column_with_mass_fractions=column_with_mass_fractions,
        accumulated_number_fraction=accumulated_number_fraction,
        accumulated_mass_fraction=accumulated_mass_fraction,
    )
    return_type = 'object'

class particle_size(Group):
    """
    'particle_size' child.
    """
    _version = '241'
    fluent_name = 'particle-size'
    _python_name = 'particle_size'
    child_names = ['diameter', 'diameter_2', 'option', 'rosin_rammler', 'tabulated_size']
    _child_classes = dict(
        diameter=diameter,
        diameter_2=diameter_2,
        option=option,
        rosin_rammler=rosin_rammler,
        tabulated_size=tabulated_size,
    )
    return_type = 'object'

class temperature(Real, AllowedValuesMixin):
    """
    'temperature' child.
    """
    _version = '241'
    fluent_name = 'temperature'
    _python_name = 'temperature'
    return_type = 'object'

class temperature_2(Real, AllowedValuesMixin):
    """
    'temperature_2' child.
    """
    _version = '241'
    fluent_name = 'temperature-2'
    _python_name = 'temperature_2'
    return_type = 'object'

class initial_values(Group):
    """
    'initial_values' child.
    """
    _version = '241'
    fluent_name = 'initial-values'
    _python_name = 'initial_values'
    child_names = ['location', 'matrix', 'cone_settings', 'velocity', 'angular_velocity', 'mass_flow_rate', 'times', 'particle_size', 'temperature', 'temperature_2']
    _child_classes = dict(
        location=location_1,
        matrix=matrix,
        cone_settings=cone_settings,
        velocity=velocity,
        angular_velocity=angular_velocity,
        mass_flow_rate=mass_flow_rate,
        times=times,
        particle_size=particle_size,
        temperature=temperature,
        temperature_2=temperature_2,
    )
    return_type = 'object'

class injections_child(Group):
    """
    'child_object_type' of injections.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'injections_child'
    child_names = ['particle_type', 'material', 'reference_frame', 'number_of_streams', 'injection_type', 'interaction', 'parcel_method', 'particle_reinjector', 'physical_models', 'initial_values', 'name']
    _child_classes = dict(
        particle_type=particle_type,
        material=material,
        reference_frame=reference_frame,
        number_of_streams=number_of_streams,
        injection_type=injection_type,
        interaction=interaction_1,
        parcel_method=parcel_method,
        particle_reinjector=particle_reinjector,
        physical_models=physical_models_1,
        initial_values=initial_values,
        name=name,
    )
    return_type = 'object'

class injections(NamedObject[injections_child], CreatableNamedObjectMixinOld[injections_child]):
    """
    'injections' child.
    """
    _version = '241'
    fluent_name = 'injections'
    _python_name = 'injections'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = injections_child
    return_type = 'object'

class node_avg_enabled(Boolean):
    """
    Enable/disable node-based averaging of DPM variables.
    """
    _version = '241'
    fluent_name = 'node-avg-enabled?'
    _python_name = 'node_avg_enabled'
    return_type = 'object'

class source_avg_enabled(Boolean):
    """
    Enable/disable averaging of DPM source terms to nodes.
    """
    _version = '241'
    fluent_name = 'source-avg-enabled?'
    _python_name = 'source_avg_enabled'
    return_type = 'object'

class average_every_step(Boolean):
    """
    Do the averaging after each integration step for higher accuracy at a higher cost.
    """
    _version = '241'
    fluent_name = 'average-every-step?'
    _python_name = 'average_every_step'
    return_type = 'object'

class option_4(String, AllowedValuesMixin):
    """
    A kernel for the averaging.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class gaussian_factor(Real):
    """
    A factor for the gaussian kernel for node-based averaging.~%Large values give small size, small values give large size of kernel.
    """
    _version = '241'
    fluent_name = 'gaussian-factor'
    _python_name = 'gaussian_factor'
    return_type = 'object'

class kernel(Group):
    """
    'kernel' child.
    """
    _version = '241'
    fluent_name = 'kernel'
    _python_name = 'kernel'
    child_names = ['option', 'gaussian_factor']
    _child_classes = dict(
        option=option_4,
        gaussian_factor=gaussian_factor,
    )
    return_type = 'object'

class averaging(Group):
    """
    Menu containing options to enable/disable node-based averaging of DPM variables and DPM source terms. 
    Please note that node-based averaging functionality is only available if source term linearization is not active.
    """
    _version = '241'
    fluent_name = 'averaging'
    _python_name = 'averaging'
    child_names = ['node_avg_enabled', 'source_avg_enabled', 'average_every_step', 'kernel']
    _child_classes = dict(
        node_avg_enabled=node_avg_enabled,
        source_avg_enabled=source_avg_enabled,
        average_every_step=average_every_step,
        kernel=kernel,
    )
    return_type = 'object'

class constant_during_flow_iterations(Boolean):
    """
    Enable/disable keeping linearized DPM source terms constant until the next DPM Update.
    """
    _version = '241'
    fluent_name = 'constant-during-flow-iterations?'
    _python_name = 'constant_during_flow_iterations'
    return_type = 'object'

class enabled_3(Boolean):
    """
    Enable/disable linearization of DPM source terms.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class enhanced_form_enabled(Boolean):
    """
    Enable/disable enhanced DPM source terms linearization.
    """
    _version = '241'
    fluent_name = 'enhanced-form-enabled?'
    _python_name = 'enhanced_form_enabled'
    return_type = 'object'

class limiter(Real):
    """
    Relative limit for DPM source linear coefficient with respect to fluid linear Ap coefficient.
    """
    _version = '241'
    fluent_name = 'limiter'
    _python_name = 'limiter'
    return_type = 'object'

class linearization(Group):
    """
    Menu containing options to enable/disable linearization of DPM source terms. 
    Please note that source term linearization is only available if the node-based averaging option is not active.
    """
    _version = '241'
    fluent_name = 'linearization'
    _python_name = 'linearization'
    child_names = ['constant_during_flow_iterations', 'enabled', 'enhanced_form_enabled', 'limiter']
    _child_classes = dict(
        constant_during_flow_iterations=constant_during_flow_iterations,
        enabled=enabled_3,
        enhanced_form_enabled=enhanced_form_enabled,
        limiter=limiter,
    )
    return_type = 'object'

class impl_mom_cplg_enabled(Boolean):
    """
    Enable/disable implicit treatment for the DPM momentum source terms.
    """
    _version = '241'
    fluent_name = 'impl-mom-cplg-enabled?'
    _python_name = 'impl_mom_cplg_enabled'
    return_type = 'object'

class impl_cplg_enabled(Boolean):
    """
    Enable/disable implicit treatment for all DPM source terms.
    """
    _version = '241'
    fluent_name = 'impl-cplg-enabled?'
    _python_name = 'impl_cplg_enabled'
    return_type = 'object'

class linear_change_enabled(Boolean):
    """
    Enable/disable the linear growth of DPM source terms every DPM iteration.
    """
    _version = '241'
    fluent_name = 'linear-change-enabled?'
    _python_name = 'linear_change_enabled'
    return_type = 'object'

class reset_sources_at_timestep(Boolean):
    """
    Enable/disable flushing of DPM source terms at beginning of every time step.
    """
    _version = '241'
    fluent_name = 'reset-sources-at-timestep?'
    _python_name = 'reset_sources_at_timestep'
    return_type = 'object'

class underrelaxation_factor(Real):
    """
    DPM source term under-relaxation factor.
    """
    _version = '241'
    fluent_name = 'underrelaxation-factor'
    _python_name = 'underrelaxation_factor'
    return_type = 'object'

class time_accurate_sources_enabled(Boolean):
    """
    Enable/disable second order accurate formulation for transient DPM source terms.
    """
    _version = '241'
    fluent_name = 'time-accurate-sources-enabled?'
    _python_name = 'time_accurate_sources_enabled'
    return_type = 'object'

class source_terms(Group):
    """
    'source_terms' child.
    """
    _version = '241'
    fluent_name = 'source-terms'
    _python_name = 'source_terms'
    child_names = ['linearization', 'impl_mom_cplg_enabled', 'impl_cplg_enabled', 'linear_change_enabled', 'reset_sources_at_timestep', 'underrelaxation_factor', 'time_accurate_sources_enabled']
    _child_classes = dict(
        linearization=linearization,
        impl_mom_cplg_enabled=impl_mom_cplg_enabled,
        impl_cplg_enabled=impl_cplg_enabled,
        linear_change_enabled=linear_change_enabled,
        reset_sources_at_timestep=reset_sources_at_timestep,
        underrelaxation_factor=underrelaxation_factor,
        time_accurate_sources_enabled=time_accurate_sources_enabled,
    )
    return_type = 'object'

class scheme(String, AllowedValuesMixin):
    """
    A tracking scheme used for DPM.
    """
    _version = '241'
    fluent_name = 'scheme'
    _python_name = 'scheme'
    return_type = 'object'

class low_order_scheme(String, AllowedValuesMixin):
    """
    A low-order tracking scheme used for automated tracking scheme selection.
    """
    _version = '241'
    fluent_name = 'low-order-scheme'
    _python_name = 'low_order_scheme'
    return_type = 'object'

class high_order_scheme(String, AllowedValuesMixin):
    """
    A high-order tracking scheme used for automated tracking scheme selection.
    """
    _version = '241'
    fluent_name = 'high-order-scheme'
    _python_name = 'high_order_scheme'
    return_type = 'object'

class enabled_4(Boolean):
    """
    Enable/disable error control during tracking.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class tolerance(Real):
    """
    The maximum number of step size refinements if error control is active.
    """
    _version = '241'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'
    return_type = 'object'

class max_num_refinements(Integer):
    """
    The maximum number of step size refinements if error control is active.
    """
    _version = '241'
    fluent_name = 'max-num-refinements'
    _python_name = 'max_num_refinements'
    return_type = 'object'

class step_size_fraction(Real):
    """
    The maximum number of cells to be crossed in one step.
    """
    _version = '241'
    fluent_name = 'step-size-fraction'
    _python_name = 'step_size_fraction'
    return_type = 'object'

class accuracy_control(Group):
    """
    'accuracy_control' child.
    """
    _version = '241'
    fluent_name = 'accuracy-control'
    _python_name = 'accuracy_control'
    child_names = ['enabled', 'tolerance', 'max_num_refinements', 'step_size_fraction']
    _child_classes = dict(
        enabled=enabled_4,
        tolerance=tolerance,
        max_num_refinements=max_num_refinements,
        step_size_fraction=step_size_fraction,
    )
    return_type = 'object'

class tracking_1(Group):
    """
    'tracking' child.
    """
    _version = '241'
    fluent_name = 'tracking'
    _python_name = 'tracking'
    child_names = ['scheme', 'low_order_scheme', 'high_order_scheme', 'accuracy_control']
    _child_classes = dict(
        scheme=scheme,
        low_order_scheme=low_order_scheme,
        high_order_scheme=high_order_scheme,
        accuracy_control=accuracy_control,
    )
    return_type = 'object'

class numerics(Group):
    """
    Main object.
    """
    _version = '241'
    fluent_name = 'numerics'
    _python_name = 'numerics'
    child_names = ['averaging', 'source_terms', 'tracking']
    _child_classes = dict(
        averaging=averaging,
        source_terms=source_terms,
        tracking=tracking_1,
    )
    return_type = 'object'

class option_5(String, AllowedValuesMixin):
    """
    A parallel scheme used for DPM.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class parallel_verbosity_level(Integer):
    """
    The parallel verbosity level [0]: none.
    """
    _version = '241'
    fluent_name = 'parallel-verbosity-level'
    _python_name = 'parallel_verbosity_level'
    return_type = 'object'

class crossover_tolerance(Real):
    """
    The fraction a particle is moved towards the cell center (0: not moved, 1: moved to cell center).
    """
    _version = '241'
    fluent_name = 'crossover-tolerance'
    _python_name = 'crossover_tolerance'
    return_type = 'object'

class expert_1(Group):
    """
    'expert' child.
    """
    _version = '241'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['parallel_verbosity_level', 'crossover_tolerance']
    _child_classes = dict(
        parallel_verbosity_level=parallel_verbosity_level,
        crossover_tolerance=crossover_tolerance,
    )
    return_type = 'object'

class enabled_5(Boolean):
    """
    Enable/disable DPM domain for hybrid tracking.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class partitioning_method(String, AllowedValuesMixin):
    """
    The DPM domain partitioning method.
    """
    _version = '241'
    fluent_name = 'partitioning-method'
    _python_name = 'partitioning_method'
    return_type = 'object'

class dpm_domain(Group):
    """
    'dpm_domain' child.
    """
    _version = '241'
    fluent_name = 'dpm-domain'
    _python_name = 'dpm_domain'
    child_names = ['enabled', 'partitioning_method']
    _child_classes = dict(
        enabled=enabled_5,
        partitioning_method=partitioning_method,
    )
    return_type = 'object'

class ordered_accumulation(Boolean):
    """
    Enable/disable deterministic accumulation order of DPM source terms.
    """
    _version = '241'
    fluent_name = 'ordered-accumulation?'
    _python_name = 'ordered_accumulation'
    return_type = 'object'

class hybrid(Group):
    """
    'hybrid' child.
    """
    _version = '241'
    fluent_name = 'hybrid'
    _python_name = 'hybrid'
    child_names = ['dpm_domain', 'ordered_accumulation']
    _child_classes = dict(
        dpm_domain=dpm_domain,
        ordered_accumulation=ordered_accumulation,
    )
    return_type = 'object'

class parallel_1(Group):
    """
    Main object.
    """
    _version = '241'
    fluent_name = 'parallel'
    _python_name = 'parallel'
    child_names = ['option', 'expert', 'hybrid']
    _child_classes = dict(
        option=option_5,
        expert=expert_1,
        hybrid=hybrid,
    )
    return_type = 'object'

class enabled_6(Boolean):
    """
    Enable/disable pressure gradient force acting on particles in non-uniform flow.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class pressure_gradient_force(Group):
    """
    'pressure_gradient_force' child.
    """
    _version = '241'
    fluent_name = 'pressure-gradient-force'
    _python_name = 'pressure_gradient_force'
    child_names = ['enabled']
    _child_classes = dict(
        enabled=enabled_6,
    )
    return_type = 'object'

class enabled_7(Boolean):
    """
    Enable/disable virtual mass force acting on particles. This force term may be important if the particle density is equal to or less than the local fluid density.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class virtual_mass_factor(Real):
    """
    The virtual mass factor.
    """
    _version = '241'
    fluent_name = 'virtual-mass-factor'
    _python_name = 'virtual_mass_factor'
    return_type = 'object'

class virtual_mass_force(Group):
    """
    'virtual_mass_force' child.
    """
    _version = '241'
    fluent_name = 'virtual-mass-force'
    _python_name = 'virtual_mass_force'
    child_names = ['enabled', 'virtual_mass_factor']
    _child_classes = dict(
        enabled=enabled_7,
        virtual_mass_factor=virtual_mass_factor,
    )
    return_type = 'object'

class enabled_8(Boolean):
    """
    Enable/disable displacement of the continuous phase due to particles.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class blocking_max_vol_frac(Real):
    """
    The maximum value for the DPM volume fraction used in the continuous flow when the volume displacement option is active.
    """
    _version = '241'
    fluent_name = 'blocking-max-vol-frac'
    _python_name = 'blocking_max_vol_frac'
    return_type = 'object'

class drag_scaling_enabled(Boolean):
    """
    Enable/disable scaling of DPM drag coefficient due to inclusion of DPM volume fraction in continuous flow.
    """
    _version = '241'
    fluent_name = 'drag-scaling-enabled?'
    _python_name = 'drag_scaling_enabled'
    return_type = 'object'

class mom_source_scaling_enabled(Boolean):
    """
    Enable/disable scaling of DPM momentum source terms due to inclusion of DPM volume fraction in continuous flow.
    """
    _version = '241'
    fluent_name = 'mom-source-scaling-enabled?'
    _python_name = 'mom_source_scaling_enabled'
    return_type = 'object'

class other_source_scaling_enabled(Boolean):
    """
    Enable/disable scaling of other DPM source terms due to inclusion of DPM volume fraction in continuous flow.
    """
    _version = '241'
    fluent_name = 'other-source-scaling-enabled?'
    _python_name = 'other_source_scaling_enabled'
    return_type = 'object'

class volume_displacement_1(Group):
    """
    In many Lagrangian-Eulerian simulations, the volume fraction of the local particle phase may not be small,
    and the blocking effect of the particulate phase on the carrier phase may need to be taken into account.
    To enable the volume displacement effect of particles, select "option = #t".
    """
    _version = '241'
    fluent_name = 'volume-displacement'
    _python_name = 'volume_displacement'
    child_names = ['enabled', 'blocking_max_vol_frac', 'drag_scaling_enabled', 'mom_source_scaling_enabled', 'other_source_scaling_enabled']
    _child_classes = dict(
        enabled=enabled_8,
        blocking_max_vol_frac=blocking_max_vol_frac,
        drag_scaling_enabled=drag_scaling_enabled,
        mom_source_scaling_enabled=mom_source_scaling_enabled,
        other_source_scaling_enabled=other_source_scaling_enabled,
    )
    return_type = 'object'

class enabled_9(Boolean):
    """
    Enable/disable convection/conduction in the film-to-wall heat transfer model.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class turbulent_approximation(Boolean):
    """
    Enable/disable turbulent approximation in convection/conduction film-to-wall heat transfer model.
    """
    _version = '241'
    fluent_name = 'turbulent-approximation?'
    _python_name = 'turbulent_approximation'
    return_type = 'object'

class convective_heat_transfer(Group):
    """
    'convective_heat_transfer' child.
    """
    _version = '241'
    fluent_name = 'convective-heat-transfer'
    _python_name = 'convective_heat_transfer'
    child_names = ['enabled', 'turbulent_approximation']
    _child_classes = dict(
        enabled=enabled_9,
        turbulent_approximation=turbulent_approximation,
    )
    return_type = 'object'

class include_convective_heat_transfer(Boolean):
    """
    Enable/disable convection/conduction in the film-to-wall heat transfer model.
    """
    _version = '241'
    fluent_name = 'include-convective-heat-transfer'
    _python_name = 'include_convective_heat_transfer'
    return_type = 'object'

class condensing_film_stationary(Boolean):
    """
    Enable/Disable movement of condensing film particles.
    """
    _version = '241'
    fluent_name = 'condensing-film-stationary?'
    _python_name = 'condensing_film_stationary'
    return_type = 'object'

class all_film_stationary(Boolean):
    """
    Enable/Disable acceleration of all film particles.
    """
    _version = '241'
    fluent_name = 'all-film-stationary?'
    _python_name = 'all_film_stationary'
    return_type = 'object'

class film_movement(Group):
    """
    Options for controlling the film particles movement.
    """
    _version = '241'
    fluent_name = 'film-movement'
    _python_name = 'film_movement'
    child_names = ['condensing_film_stationary', 'all_film_stationary']
    _child_classes = dict(
        condensing_film_stationary=condensing_film_stationary,
        all_film_stationary=all_film_stationary,
    )
    return_type = 'object'

class film_adds_to_dpm_concentration(Boolean):
    """
    Include/exclude LWF particle mass in the calculation of DPM Concentration.
    """
    _version = '241'
    fluent_name = 'film-adds-to-dpm-concentration?'
    _python_name = 'film_adds_to_dpm_concentration'
    return_type = 'object'

class leidenfrost_temp_postproc_enabled(Boolean):
    """
    Enable/disable the reporting of wall film faces above the Leidenfrost point.
    """
    _version = '241'
    fluent_name = 'leidenfrost-temp-postproc-enabled?'
    _python_name = 'leidenfrost_temp_postproc_enabled'
    return_type = 'object'

class enabled_10(Boolean):
    """
    Enable/disable the Leidenfrost wall film temperature limiter.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class temp_limit_rel_to_boil_point(Real):
    """
    The temperature difference above the film boiling point.
    """
    _version = '241'
    fluent_name = 'temp-limit-rel-to-boil-point'
    _python_name = 'temp_limit_rel_to_boil_point'
    return_type = 'object'

class temperature_limiter(Group):
    """
    'temperature_limiter' child.
    """
    _version = '241'
    fluent_name = 'temperature-limiter'
    _python_name = 'temperature_limiter'
    child_names = ['leidenfrost_temp_postproc_enabled', 'enabled', 'temp_limit_rel_to_boil_point']
    _child_classes = dict(
        leidenfrost_temp_postproc_enabled=leidenfrost_temp_postproc_enabled,
        enabled=enabled_10,
        temp_limit_rel_to_boil_point=temp_limit_rel_to_boil_point,
    )
    return_type = 'object'

class wall_film(Group):
    """
    'wall_film' child.
    """
    _version = '241'
    fluent_name = 'wall-film'
    _python_name = 'wall_film'
    child_names = ['convective_heat_transfer', 'include_convective_heat_transfer', 'film_movement', 'film_adds_to_dpm_concentration', 'temperature_limiter']
    _child_classes = dict(
        convective_heat_transfer=convective_heat_transfer,
        include_convective_heat_transfer=include_convective_heat_transfer,
        film_movement=film_movement,
        film_adds_to_dpm_concentration=film_adds_to_dpm_concentration,
        temperature_limiter=temperature_limiter,
    )
    return_type = 'object'

class physical_models(Group):
    """
    Main object.
    """
    _version = '241'
    fluent_name = 'physical-models'
    _python_name = 'physical_models'
    child_names = ['pressure_gradient_force', 'virtual_mass_force', 'volume_displacement', 'wall_film']
    _child_classes = dict(
        pressure_gradient_force=pressure_gradient_force,
        virtual_mass_force=virtual_mass_force,
        volume_displacement=volume_displacement_1,
        wall_film=wall_film,
    )
    return_type = 'object'

class randomize_every_iteration(Boolean):
    """
    Enable/disable changing the pseudo-random number sequences from iteration to iteration.
    """
    _version = '241'
    fluent_name = 'randomize-every-iteration?'
    _python_name = 'randomize_every_iteration'
    return_type = 'object'

class randomize_every_timestep(Boolean):
    """
    Enable/disable changing the pseudo-random number sequences from timestep to timestep.
    """
    _version = '241'
    fluent_name = 'randomize-every-timestep?'
    _python_name = 'randomize_every_timestep'
    return_type = 'object'

class tracking_statistics_format(Integer):
    """
    Control the format of the one-line tracking statistics printed after every DPM tracking pass.
    """
    _version = '241'
    fluent_name = 'tracking-statistics-format'
    _python_name = 'tracking_statistics_format'
    return_type = 'object'

class verbosity_1(Integer):
    """
    The DPM tracker's verbosity level.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class expert_2(Group):
    """
    Menu containing not frequently used (expert level) settings.
    """
    _version = '241'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['randomize_every_iteration', 'randomize_every_timestep', 'tracking_statistics_format', 'verbosity']
    _child_classes = dict(
        randomize_every_iteration=randomize_every_iteration,
        randomize_every_timestep=randomize_every_timestep,
        tracking_statistics_format=tracking_statistics_format,
        verbosity=verbosity_1,
    )
    return_type = 'object'

class enabled_11(Boolean):
    """
    Enable/disable high resolution tracking. Please note that high-resolution tracking is the recommended default for highest tracking robustness, accuracy and performance.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class always_use_face_centroid_with_periodics(Boolean):
    """
    Enable/disable using quad face centroids when creating subtets if the case contains periodic boundaries.
    """
    _version = '241'
    fluent_name = 'always-use-face-centroid-with-periodics?'
    _python_name = 'always_use_face_centroid_with_periodics'
    return_type = 'object'

class specific_heat_enabled(Boolean):
    """
    Enable/disable interpolation of flow specific heat to the particle position.
    """
    _version = '241'
    fluent_name = 'specific-heat-enabled?'
    _python_name = 'specific_heat_enabled'
    return_type = 'object'

class density_enabled(Boolean):
    """
    Enable/disable interpolation of flow density to the particle position.
    """
    _version = '241'
    fluent_name = 'density-enabled?'
    _python_name = 'density_enabled'
    return_type = 'object'

class gradients_enabled(Boolean):
    """
    Enable/disable interpolation of flow solution gradients to the particle position.
    """
    _version = '241'
    fluent_name = 'gradients-enabled?'
    _python_name = 'gradients_enabled'
    return_type = 'object'

class viscosity_enabled(Boolean):
    """
    Enable/disable interpolation of flow laminar viscosity to the particle position.
    """
    _version = '241'
    fluent_name = 'viscosity-enabled?'
    _python_name = 'viscosity_enabled'
    return_type = 'object'

class temperature_enabled(Boolean):
    """
    Enable/disable interpolation of flow temperature to the particle position.
    """
    _version = '241'
    fluent_name = 'temperature-enabled?'
    _python_name = 'temperature_enabled'
    return_type = 'object'

class wall_zero_vel_enabled(Boolean):
    """
    Enable/disable setting the nodal velocity on all walls to zero.
    """
    _version = '241'
    fluent_name = 'wall-zero-vel-enabled?'
    _python_name = 'wall_zero_vel_enabled'
    return_type = 'object'

class flow_interpolation(Group):
    """
    Main object.
    """
    _version = '241'
    fluent_name = 'flow-interpolation'
    _python_name = 'flow_interpolation'
    child_names = ['specific_heat_enabled', 'density_enabled', 'gradients_enabled', 'viscosity_enabled', 'temperature_enabled', 'wall_zero_vel_enabled']
    _child_classes = dict(
        specific_heat_enabled=specific_heat_enabled,
        density_enabled=density_enabled,
        gradients_enabled=gradients_enabled,
        viscosity_enabled=viscosity_enabled,
        temperature_enabled=temperature_enabled,
        wall_zero_vel_enabled=wall_zero_vel_enabled,
    )
    return_type = 'object'

class boundary_layer_tracking_enabled(Boolean):
    """
    Enable/disable adjusting the particle timestep to account for high aspect ratio cells.
    """
    _version = '241'
    fluent_name = 'boundary-layer-tracking-enabled?'
    _python_name = 'boundary_layer_tracking_enabled'
    return_type = 'object'

class subtet_validity_checking_enabled(Boolean):
    """
    Enable/disable testing for inverted subtets due to warped cells.
    """
    _version = '241'
    fluent_name = 'subtet-validity-checking-enabled?'
    _python_name = 'subtet_validity_checking_enabled'
    return_type = 'object'

class auto_intersect_tol_enabled(Boolean):
    """
    Enable/disable using an automatic scaling of subtet intersection tolerance.
    """
    _version = '241'
    fluent_name = 'auto-intersect-tol-enabled?'
    _python_name = 'auto_intersect_tol_enabled'
    return_type = 'object'

class barycentric_intersection_enabled(Boolean):
    """
    Enable/disable using barycentric coordinates for intersection calculations.
    """
    _version = '241'
    fluent_name = 'barycentric-intersection-enabled?'
    _python_name = 'barycentric_intersection_enabled'
    return_type = 'object'

class enhanced_method_enabled(Boolean):
    """
    Enable/disable enhanced method of locating particles in cells.
    """
    _version = '241'
    fluent_name = 'enhanced-method-enabled?'
    _python_name = 'enhanced_method_enabled'
    return_type = 'object'

class support_for_std_track_data_read_enabled(Boolean):
    """
    Enable/disable data-read verification, preventing particle loss when transitioning between standard and high-res tracking.
    """
    _version = '241'
    fluent_name = 'support-for-std-track-data-read-enabled?'
    _python_name = 'support_for_std_track_data_read_enabled'
    return_type = 'object'

class overset_robustness_level(Integer):
    """
    The robustness level for particle relocation in overset meshes.
    """
    _version = '241'
    fluent_name = 'overset-robustness-level'
    _python_name = 'overset_robustness_level'
    return_type = 'object'

class legacy_method_enabled(Boolean):
    """
    Enable/disable legacy method of locating particles in cells.
    """
    _version = '241'
    fluent_name = 'legacy-method-enabled?'
    _python_name = 'legacy_method_enabled'
    return_type = 'object'

class particle_relocation(Group):
    """
    Main object.
    """
    _version = '241'
    fluent_name = 'particle-relocation'
    _python_name = 'particle_relocation'
    child_names = ['enhanced_method_enabled', 'support_for_std_track_data_read_enabled', 'overset_robustness_level', 'legacy_method_enabled']
    _child_classes = dict(
        enhanced_method_enabled=enhanced_method_enabled,
        support_for_std_track_data_read_enabled=support_for_std_track_data_read_enabled,
        overset_robustness_level=overset_robustness_level,
        legacy_method_enabled=legacy_method_enabled,
    )
    return_type = 'object'

class stuck_particle_removal_enabled(Boolean):
    """
    Enable/disable removal of particles that are stuck at edges or faces.
    """
    _version = '241'
    fluent_name = 'stuck-particle-removal-enabled?'
    _python_name = 'stuck_particle_removal_enabled'
    return_type = 'object'

class barycentric_sampling_enabled(Boolean):
    """
    Enable/disable using of barycentric coordinates when sampling particles at planes.
    """
    _version = '241'
    fluent_name = 'barycentric-sampling-enabled?'
    _python_name = 'barycentric_sampling_enabled'
    return_type = 'object'

class quad_face_centroid_enabled(Boolean):
    """
    Enable/disable using of quad face centroids when creating subtets.
    """
    _version = '241'
    fluent_name = 'quad-face-centroid-enabled?'
    _python_name = 'quad_face_centroid_enabled'
    return_type = 'object'

class high_res_tracking(Group):
    """
    Main object.
    """
    _version = '241'
    fluent_name = 'high-res-tracking'
    _python_name = 'high_res_tracking'
    child_names = ['enabled', 'always_use_face_centroid_with_periodics', 'flow_interpolation', 'boundary_layer_tracking_enabled', 'subtet_validity_checking_enabled', 'auto_intersect_tol_enabled', 'barycentric_intersection_enabled', 'particle_relocation', 'stuck_particle_removal_enabled', 'barycentric_sampling_enabled', 'quad_face_centroid_enabled']
    _child_classes = dict(
        enabled=enabled_11,
        always_use_face_centroid_with_periodics=always_use_face_centroid_with_periodics,
        flow_interpolation=flow_interpolation,
        boundary_layer_tracking_enabled=boundary_layer_tracking_enabled,
        subtet_validity_checking_enabled=subtet_validity_checking_enabled,
        auto_intersect_tol_enabled=auto_intersect_tol_enabled,
        barycentric_intersection_enabled=barycentric_intersection_enabled,
        particle_relocation=particle_relocation,
        stuck_particle_removal_enabled=stuck_particle_removal_enabled,
        barycentric_sampling_enabled=barycentric_sampling_enabled,
        quad_face_centroid_enabled=quad_face_centroid_enabled,
    )
    return_type = 'object'

class max_num_steps(Integer):
    """
    The maximum number of integration steps per particle.
    """
    _version = '241'
    fluent_name = 'max-num-steps'
    _python_name = 'max_num_steps'
    return_type = 'object'

class option_6(String, AllowedValuesMixin):
    """
    The option to determine the initial tracking step length.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class length_scale(Real):
    """
    The tracking step length scale.
    """
    _version = '241'
    fluent_name = 'length-scale'
    _python_name = 'length_scale'
    return_type = 'object'

class step_length_factor(Integer):
    """
    The tracking step length factor.
    """
    _version = '241'
    fluent_name = 'step-length-factor'
    _python_name = 'step_length_factor'
    return_type = 'object'

class step_size_controls(Group):
    """
    Main object.
    """
    _version = '241'
    fluent_name = 'step-size-controls'
    _python_name = 'step_size_controls'
    child_names = ['option', 'length_scale', 'step_length_factor']
    _child_classes = dict(
        option=option_6,
        length_scale=length_scale,
        step_length_factor=step_length_factor,
    )
    return_type = 'object'

class track_in_absolute_frame_enabled(Boolean):
    """
    Enable/disable tracking of particles in the absolute frame. Please note that tracking in the relative frame is the recommended default.
    """
    _version = '241'
    fluent_name = 'track-in-absolute-frame-enabled?'
    _python_name = 'track_in_absolute_frame_enabled'
    return_type = 'object'

class tracking(Group):
    """
    Main object.
    """
    _version = '241'
    fluent_name = 'tracking'
    _python_name = 'tracking'
    child_names = ['expert', 'high_res_tracking', 'max_num_steps', 'step_size_controls', 'track_in_absolute_frame_enabled']
    _child_classes = dict(
        expert=expert_2,
        high_res_tracking=high_res_tracking,
        max_num_steps=max_num_steps,
        step_size_controls=step_size_controls,
        track_in_absolute_frame_enabled=track_in_absolute_frame_enabled,
    )
    return_type = 'object'

class body_force(String, AllowedValuesMixin):
    """
    The name of the DPM body force function.
    """
    _version = '241'
    fluent_name = 'body-force'
    _python_name = 'body_force'
    return_type = 'object'

class source_terms_1(String, AllowedValuesMixin):
    """
    The name of the DPM source function.
    """
    _version = '241'
    fluent_name = 'source-terms'
    _python_name = 'source_terms'
    return_type = 'object'

class erosion_accretion(String, AllowedValuesMixin):
    """
    The name of the DPM erosion/accretion function.
    """
    _version = '241'
    fluent_name = 'erosion-accretion'
    _python_name = 'erosion_accretion'
    return_type = 'object'

class output(String, AllowedValuesMixin):
    """
    The name of the DPM output function.
    """
    _version = '241'
    fluent_name = 'output'
    _python_name = 'output'
    return_type = 'object'

class scalar_update(String, AllowedValuesMixin):
    """
    The name of the DPM scalar update function.
    """
    _version = '241'
    fluent_name = 'scalar-update'
    _python_name = 'scalar_update'
    return_type = 'object'

class collision(String, AllowedValuesMixin):
    """
    The name of the DPM collision function.
    """
    _version = '241'
    fluent_name = 'collision'
    _python_name = 'collision'
    return_type = 'object'

class dpm_time_step_size_1(String, AllowedValuesMixin):
    """
    The name of the DPM timestep function.
    """
    _version = '241'
    fluent_name = 'dpm-time-step-size'
    _python_name = 'dpm_time_step_size'
    return_type = 'object'

class impingement_model(String, AllowedValuesMixin):
    """
    The name of the impingement model function.
    """
    _version = '241'
    fluent_name = 'impingement-model'
    _python_name = 'impingement_model'
    return_type = 'object'

class film_regime(String, AllowedValuesMixin):
    """
    The name of the film regime function.
    """
    _version = '241'
    fluent_name = 'film-regime'
    _python_name = 'film_regime'
    return_type = 'object'

class splashing_distribution(String, AllowedValuesMixin):
    """
    The name of the splashing distribution function.
    """
    _version = '241'
    fluent_name = 'splashing-distribution'
    _python_name = 'splashing_distribution'
    return_type = 'object'

class num_scalars(Integer):
    """
    The number of user reals stored on a particle.
    """
    _version = '241'
    fluent_name = 'num-scalars'
    _python_name = 'num_scalars'
    return_type = 'object'

class flow_interpolation_1(String, AllowedValuesMixin):
    """
    The name of the interpolation function.
    """
    _version = '241'
    fluent_name = 'flow-interpolation'
    _python_name = 'flow_interpolation'
    return_type = 'object'

class max_num_udf_species(Integer):
    """
    The maximum number of species that can be used in DPM UDFs.
    """
    _version = '241'
    fluent_name = 'max-num-udf-species'
    _python_name = 'max_num_udf_species'
    return_type = 'object'

class user_functions(Group):
    """
    Main object.
    """
    _version = '241'
    fluent_name = 'user-functions'
    _python_name = 'user_functions'
    child_names = ['body_force', 'source_terms', 'erosion_accretion', 'output', 'scalar_update', 'collision', 'dpm_time_step_size', 'impingement_model', 'film_regime', 'splashing_distribution', 'num_scalars', 'flow_interpolation', 'max_num_udf_species']
    _child_classes = dict(
        body_force=body_force,
        source_terms=source_terms_1,
        erosion_accretion=erosion_accretion,
        output=output,
        scalar_update=scalar_update,
        collision=collision,
        dpm_time_step_size=dpm_time_step_size_1,
        impingement_model=impingement_model,
        film_regime=film_regime,
        splashing_distribution=splashing_distribution,
        num_scalars=num_scalars,
        flow_interpolation=flow_interpolation_1,
        max_num_udf_species=max_num_udf_species,
    )
    return_type = 'object'

class discrete_phase(Group):
    """
    Toplevel object.
    """
    _version = '241'
    fluent_name = 'discrete-phase'
    _python_name = 'discrete_phase'
    child_names = ['general_settings', 'injections', 'numerics', 'parallel', 'physical_models', 'tracking', 'user_functions']
    _child_classes = dict(
        general_settings=general_settings,
        injections=injections,
        numerics=numerics,
        parallel=parallel_1,
        physical_models=physical_models,
        tracking=tracking,
        user_functions=user_functions,
    )
    return_type = 'object'

class enable_8(Boolean):
    """
    Enable/disable vbm model.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class mode(String, AllowedValuesMixin):
    """
    VBM mode edm/fdm.
    """
    _version = '241'
    fluent_name = 'mode'
    _python_name = 'mode'
    return_type = 'object'

class number_of_blades(Integer):
    """
    The number of blades.
    """
    _version = '241'
    fluent_name = 'number-of-blades'
    _python_name = 'number_of_blades'
    return_type = 'object'

class rotor_speed(Real):
    """
    Rotor speed.
    """
    _version = '241'
    fluent_name = 'rotor-speed'
    _python_name = 'rotor_speed'
    return_type = 'object'

class tip_radius(Real):
    """
    Rotor tip radius.
    """
    _version = '241'
    fluent_name = 'tip-radius'
    _python_name = 'tip_radius'
    return_type = 'object'

class root_radius(Real):
    """
    Rotor root cutout radius.
    """
    _version = '241'
    fluent_name = 'root-radius'
    _python_name = 'root_radius'
    return_type = 'object'

class basic_info(Group):
    """
    Menu to define the rotor basic informations:
     - Number of Blades 
     - Rotor Speed  , 
     - Tip Radius 
     - Root Radius , 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '241'
    fluent_name = 'basic-info'
    _python_name = 'basic_info'
    child_names = ['number_of_blades', 'rotor_speed', 'tip_radius', 'root_radius']
    _child_classes = dict(
        number_of_blades=number_of_blades,
        rotor_speed=rotor_speed,
        tip_radius=tip_radius,
        root_radius=root_radius,
    )
    return_type = 'object'

class disk_origin_x(Real):
    """
    Rotor origin x-coordinate.
    """
    _version = '241'
    fluent_name = 'disk-origin-x'
    _python_name = 'disk_origin_x'
    return_type = 'object'

class disk_origin_y(Real):
    """
    Rotor origin y-coordinate.
    """
    _version = '241'
    fluent_name = 'disk-origin-y'
    _python_name = 'disk_origin_y'
    return_type = 'object'

class disk_origin_z(Real):
    """
    Rotor origin z-coordinate.
    """
    _version = '241'
    fluent_name = 'disk-origin-z'
    _python_name = 'disk_origin_z'
    return_type = 'object'

class disk_origin(Group):
    """
    Menu to define the disk center coordinates.
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '241'
    fluent_name = 'disk-origin'
    _python_name = 'disk_origin'
    child_names = ['disk_origin_x', 'disk_origin_y', 'disk_origin_z']
    _child_classes = dict(
        disk_origin_x=disk_origin_x,
        disk_origin_y=disk_origin_y,
        disk_origin_z=disk_origin_z,
    )
    return_type = 'object'

class terminology(Integer):
    """
    Rotor Disk Orientation Terminology:.
    """
    _version = '241'
    fluent_name = 'terminology'
    _python_name = 'terminology'
    return_type = 'object'

class disk_normal_x(Real):
    """
    X-component of disk normal vector:.
    """
    _version = '241'
    fluent_name = 'disk-normal-x'
    _python_name = 'disk_normal_x'
    return_type = 'object'

class disk_normal_y(Real):
    """
    Y-component of disk normal vector:.
    """
    _version = '241'
    fluent_name = 'disk-normal-y'
    _python_name = 'disk_normal_y'
    return_type = 'object'

class disk_normal_z(Real):
    """
    X-component of disk normal vector:.
    """
    _version = '241'
    fluent_name = 'disk-normal-z'
    _python_name = 'disk_normal_z'
    return_type = 'object'

class disk_pitch_angle(Real):
    """
    Disk pitch angle:.
    """
    _version = '241'
    fluent_name = 'disk-pitch-angle'
    _python_name = 'disk_pitch_angle'
    return_type = 'object'

class disk_bank_angle(Real):
    """
    Disk bank angle:.
    """
    _version = '241'
    fluent_name = 'disk-bank-angle'
    _python_name = 'disk_bank_angle'
    return_type = 'object'

class disk_orientation(Group):
    """
    Menu to define the rotor disk orientation.
     - terminology      : the terminology to specify the rotor disk orientation: rotor-disk-angles / rotor-disk-normal, 
     - disk-normal-x/yz : rotor-disk-normal components, 
     - disk-pitch-angle : , 
     - disk-bank-angle : , 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '241'
    fluent_name = 'disk-orientation'
    _python_name = 'disk_orientation'
    child_names = ['terminology', 'disk_normal_x', 'disk_normal_y', 'disk_normal_z', 'disk_pitch_angle', 'disk_bank_angle']
    _child_classes = dict(
        terminology=terminology,
        disk_normal_x=disk_normal_x,
        disk_normal_y=disk_normal_y,
        disk_normal_z=disk_normal_z,
        disk_pitch_angle=disk_pitch_angle,
        disk_bank_angle=disk_bank_angle,
    )
    return_type = 'object'

class embedded_face_zone(String, AllowedValuesMixin):
    """
    Embedded face zone:.
    """
    _version = '241'
    fluent_name = 'embedded-face-zone'
    _python_name = 'embedded_face_zone'
    return_type = 'object'

class floating_surface_name(String, AllowedValuesMixin):
    """
    Floating surface name:.
    """
    _version = '241'
    fluent_name = 'floating-surface-name'
    _python_name = 'floating_surface_name'
    return_type = 'object'

class create_floating_disk(Command):
    """
    'create_floating_disk' command.
    """
    _version = '241'
    fluent_name = 'create-floating-disk'
    _python_name = 'create_floating_disk'
    return_type = 'object'

class disk_id(Group):
    """
    Menu to define the disk face/surface name:
     - embedded-face-zone    : select embedded-face-zone name, 
     - floating-surface-name : select floating-surface-name, 
     - create-floating-disk  : create a floating-disk for the current rotor, 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '241'
    fluent_name = 'disk-id'
    _python_name = 'disk_id'
    child_names = ['embedded_face_zone', 'floating_surface_name']
    command_names = ['create_floating_disk']
    _child_classes = dict(
        embedded_face_zone=embedded_face_zone,
        floating_surface_name=floating_surface_name,
        create_floating_disk=create_floating_disk,
    )
    return_type = 'object'

class blade_pitch_collective(Real):
    """
    Blade collective pitch angle:.
    """
    _version = '241'
    fluent_name = 'blade-pitch-collective'
    _python_name = 'blade_pitch_collective'
    return_type = 'object'

class blade_pitch_cyclic_sin(Real):
    """
    Magnitude of sin component of blade's cyclic pitch angle:.
    """
    _version = '241'
    fluent_name = 'blade-pitch-cyclic-sin'
    _python_name = 'blade_pitch_cyclic_sin'
    return_type = 'object'

class blade_pitch_cyclic_cos(Real):
    """
    Magnitude of cos component of blade's cyclic pitch angle:.
    """
    _version = '241'
    fluent_name = 'blade-pitch-cyclic-cos'
    _python_name = 'blade_pitch_cyclic_cos'
    return_type = 'object'

class blade_pitch_angles(Group):
    """
    Menu to define the rotor pitch and flapping angles.
     - blade-pitch-collective    : , 
     - blade-pitch-cyclic-sin    : , 
     - blade-pitch-cyclic-cos    : , 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '241'
    fluent_name = 'blade-pitch-angles'
    _python_name = 'blade_pitch_angles'
    child_names = ['blade_pitch_collective', 'blade_pitch_cyclic_sin', 'blade_pitch_cyclic_cos']
    _child_classes = dict(
        blade_pitch_collective=blade_pitch_collective,
        blade_pitch_cyclic_sin=blade_pitch_cyclic_sin,
        blade_pitch_cyclic_cos=blade_pitch_cyclic_cos,
    )
    return_type = 'object'

class blade_flapping_cone(Real):
    """
    Blade flapping cone angle:.
    """
    _version = '241'
    fluent_name = 'blade-flapping-cone'
    _python_name = 'blade_flapping_cone'
    return_type = 'object'

class blade_flapping_cyclic_sin(Real):
    """
    Magnitude of sin component of blade's cyclic flapping angle:.
    """
    _version = '241'
    fluent_name = 'blade-flapping-cyclic-sin'
    _python_name = 'blade_flapping_cyclic_sin'
    return_type = 'object'

class blade_flapping_cyclic_cos(Real):
    """
    Magnitude of cos component of blade's cyclic flapping angle:.
    """
    _version = '241'
    fluent_name = 'blade-flapping-cyclic-cos'
    _python_name = 'blade_flapping_cyclic_cos'
    return_type = 'object'

class blade_flap_angles(Group):
    """
    Menu to define the rotor pitch angles.
     - blade-flapping-cone       : , 
     - blade-flapping-cyclic-sin : , 
     - blade-flapping-cyclic-cos : , 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '241'
    fluent_name = 'blade-flap-angles'
    _python_name = 'blade_flap_angles'
    child_names = ['blade_flapping_cone', 'blade_flapping_cyclic_sin', 'blade_flapping_cyclic_cos']
    _child_classes = dict(
        blade_flapping_cone=blade_flapping_cone,
        blade_flapping_cyclic_sin=blade_flapping_cyclic_sin,
        blade_flapping_cyclic_cos=blade_flapping_cyclic_cos,
    )
    return_type = 'object'

class model_tip_loss(Integer):
    """
    Tip Loss Model:.
    """
    _version = '241'
    fluent_name = 'model-tip-loss'
    _python_name = 'model_tip_loss'
    return_type = 'object'

class tip_loss_limit(Real):
    """
    Tip Loss Limit (%R) if using Quadratic tip loss model:.
    """
    _version = '241'
    fluent_name = 'tip-loss-limit'
    _python_name = 'tip_loss_limit'
    return_type = 'object'

class prandtl_tuning_coefficient(Real):
    """
    The tuning coefficient in modified prandtl tip loss model:.
    """
    _version = '241'
    fluent_name = 'prandtl-tuning-coefficient'
    _python_name = 'prandtl_tuning_coefficient'
    return_type = 'object'

class tip_loss(Group):
    """
    Menu to define the rotor tip loss model.
     - method  : define the method to model rotor tip loss, quadratic-tip-loss, prandtl-tip-loss
     - tip-loss-limit : tip-loss-limit, 
     - prandtl-tuning-coefficient: prandtl-tuning-coefficient, 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '241'
    fluent_name = 'tip-loss'
    _python_name = 'tip_loss'
    child_names = ['model_tip_loss', 'tip_loss_limit', 'prandtl_tuning_coefficient']
    _child_classes = dict(
        model_tip_loss=model_tip_loss,
        tip_loss_limit=tip_loss_limit,
        prandtl_tuning_coefficient=prandtl_tuning_coefficient,
    )
    return_type = 'object'

class general_1(Group):
    """
    Menu to define the rotor general information.
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '241'
    fluent_name = 'general'
    _python_name = 'general'
    child_names = ['basic_info', 'disk_origin', 'disk_orientation', 'disk_id', 'blade_pitch_angles', 'blade_flap_angles', 'tip_loss']
    _child_classes = dict(
        basic_info=basic_info,
        disk_origin=disk_origin,
        disk_orientation=disk_orientation,
        disk_id=disk_id,
        blade_pitch_angles=blade_pitch_angles,
        blade_flap_angles=blade_flap_angles,
        tip_loss=tip_loss,
    )
    return_type = 'object'

class radius_ratio(Real):
    """
    The span-wise distance of blade section from rotor origin over rotor tip radius (r/R).
    """
    _version = '241'
    fluent_name = 'radius-ratio'
    _python_name = 'radius_ratio'
    return_type = 'object'

class chord(Real):
    """
    The chord lenght of blade section.
    """
    _version = '241'
    fluent_name = 'chord'
    _python_name = 'chord'
    return_type = 'object'

class twist(Real):
    """
    The blade twist at blade section.
    """
    _version = '241'
    fluent_name = 'twist'
    _python_name = 'twist'
    return_type = 'object'

class airfoil_data_file(String):
    """
    Airfoil data file (cl/cd) at blade section.
    """
    _version = '241'
    fluent_name = 'airfoil-data-file'
    _python_name = 'airfoil_data_file'
    return_type = 'object'

class geometry_2_child(Group):
    """
    'child_object_type' of geometry.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'geometry_child'
    child_names = ['name', 'radius_ratio', 'chord', 'twist', 'airfoil_data_file']
    _child_classes = dict(
        name=name,
        radius_ratio=radius_ratio,
        chord=chord,
        twist=twist,
        airfoil_data_file=airfoil_data_file,
    )
    return_type = 'object'

class geometry_2(NamedObject[geometry_2_child], CreatableNamedObjectMixinOld[geometry_2_child]):
    """
    Main object.
    """
    _version = '241'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = geometry_2_child
    return_type = 'object'

class trim_option(Integer):
    """
    Trimming Option:.
    """
    _version = '241'
    fluent_name = 'trim-option'
    _python_name = 'trim_option'
    return_type = 'object'

class update_frequency(Integer):
    """
    Trimming Update Frequency N (trim after each N iterations):.
    """
    _version = '241'
    fluent_name = 'update-frequency'
    _python_name = 'update_frequency'
    return_type = 'object'

class damping_factor(Real):
    """
    Trimming damping factor (relaxation factor):.
    """
    _version = '241'
    fluent_name = 'damping-factor'
    _python_name = 'damping_factor'
    return_type = 'object'

class thrust_coef(Real):
    """
    Desired thrust coefficient:.
    """
    _version = '241'
    fluent_name = 'thrust-coef'
    _python_name = 'thrust_coef'
    return_type = 'object'

class pitch_moment_coef(Real):
    """
    Desired pitch-moment coefficient:.
    """
    _version = '241'
    fluent_name = 'pitch-moment-coef'
    _python_name = 'pitch_moment_coef'
    return_type = 'object'

class roll_moment_coef(Real):
    """
    Desired roll-moment coefficient:.
    """
    _version = '241'
    fluent_name = 'roll-moment-coef'
    _python_name = 'roll_moment_coef'
    return_type = 'object'

class trimming(Group):
    """
    Menu to define rotor trimming set-up.
     - trim-option       : to define collective and cyclic pitches to trim, 
     - update-frequency  : the number of solver iterations that pitch angle will be updated each time, 
     - damping-factor    : relaxation factor for pitch angles, 
     - thrust-coef       : desired thrust coefficient to set pitch for
     - pitch-moment-coef : desired pitch-moment coefficient to set pitch for, 
     - roll-moment-coef  : desired roll-moment coefficient to set pitch for, 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '241'
    fluent_name = 'trimming'
    _python_name = 'trimming'
    child_names = ['trim_option', 'update_frequency', 'damping_factor', 'thrust_coef', 'pitch_moment_coef', 'roll_moment_coef']
    _child_classes = dict(
        trim_option=trim_option,
        update_frequency=update_frequency,
        damping_factor=damping_factor,
        thrust_coef=thrust_coef,
        pitch_moment_coef=pitch_moment_coef,
        roll_moment_coef=roll_moment_coef,
    )
    return_type = 'object'

class rotor_child(Group):
    """
    'child_object_type' of rotor.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'rotor_child'
    child_names = ['name', 'general', 'geometry', 'trimming']
    _child_classes = dict(
        name=name,
        general=general_1,
        geometry=geometry_2,
        trimming=trimming,
    )
    return_type = 'object'

class rotor(NamedObject[rotor_child], CreatableNamedObjectMixinOld[rotor_child]):
    """
    Main object.
    """
    _version = '241'
    fluent_name = 'rotor'
    _python_name = 'rotor'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = rotor_child
    return_type = 'object'

class apply(Command):
    """
    Read and apply VBM setting.
    """
    _version = '241'
    fluent_name = 'apply'
    _python_name = 'apply'
    return_type = 'object'

class virtual_blade_model(Group):
    """
    The vbm model object.
    """
    _version = '241'
    fluent_name = 'virtual-blade-model'
    _python_name = 'virtual_blade_model'
    child_names = ['enable', 'mode', 'rotor']
    command_names = ['apply']
    _child_classes = dict(
        enable=enable_8,
        mode=mode,
        rotor=rotor,
        apply=apply,
    )
    return_type = 'object'

class enable_9(Boolean):
    """
    Enable/disable aero-optical model.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class orig_beam_name(String, AllowedValuesMixin):
    """
    The name for the optical beam to be copied.
    """
    _version = '241'
    fluent_name = 'orig-beam-name'
    _python_name = 'orig_beam_name'
    return_type = 'object'

class beam_name(String):
    """
    A unique name for each optical beam.
    """
    _version = '241'
    fluent_name = 'beam-name'
    _python_name = 'beam_name'
    return_type = 'object'

class ap_face_zone(String, AllowedValuesMixin):
    """
    The wall face zones to specify the optical aperture surface.
    """
    _version = '241'
    fluent_name = 'ap-face-zone'
    _python_name = 'ap_face_zone'
    return_type = 'object'

class beam_length(Real):
    """
    The length of optical beam propagation.
    """
    _version = '241'
    fluent_name = 'beam-length'
    _python_name = 'beam_length'
    return_type = 'object'

class ray_npoints(Integer):
    """
    The number of grid point in each ray of the optical beam.
    """
    _version = '241'
    fluent_name = 'ray-npoints'
    _python_name = 'ray_npoints'
    return_type = 'object'

class x_beam_vector(Real):
    """
    The x-component of the beam propagation vector.
    """
    _version = '241'
    fluent_name = 'x-beam-vector'
    _python_name = 'x_beam_vector'
    return_type = 'object'

class y_beam_vector(Real):
    """
    The y-component of the beam propagation vector.
    """
    _version = '241'
    fluent_name = 'y-beam-vector'
    _python_name = 'y_beam_vector'
    return_type = 'object'

class z_beam_vector(Real):
    """
    The z-component of the beam propagation vector.
    """
    _version = '241'
    fluent_name = 'z-beam-vector'
    _python_name = 'z_beam_vector'
    return_type = 'object'

class copy(Command):
    """
    Copy optical beam grid.
    
    Parameters
    ----------
        orig_beam_name : str
            The name for the optical beam to be copied.
        beam_name : str
            A unique name for each optical beam.
        ap_face_zone : str
            The wall face zones to specify the optical aperture surface.
        beam_length : real
            The length of optical beam propagation.
        ray_npoints : int
            The number of grid point in each ray of the optical beam.
        x_beam_vector : real
            The x-component of the beam propagation vector.
        y_beam_vector : real
            The y-component of the beam propagation vector.
        z_beam_vector : real
            The z-component of the beam propagation vector.
    """
    _version = '241'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['orig_beam_name', 'beam_name', 'ap_face_zone', 'beam_length', 'ray_npoints', 'x_beam_vector', 'y_beam_vector', 'z_beam_vector']
    _child_classes = dict(
        orig_beam_name=orig_beam_name,
        beam_name=beam_name,
        ap_face_zone=ap_face_zone,
        beam_length=beam_length,
        ray_npoints=ray_npoints,
        x_beam_vector=x_beam_vector,
        y_beam_vector=y_beam_vector,
        z_beam_vector=z_beam_vector,
    )
    return_type = 'object'

class ap_face_zone_1(String, AllowedValuesMixin):
    """
    The wall face zone to specify the optical aperture surface.
    """
    _version = '241'
    fluent_name = 'ap-face-zone'
    _python_name = 'ap_face_zone'
    return_type = 'object'

class ray_points_count(Integer):
    """
    The number of grid point in each ray of the optical beam.
    """
    _version = '241'
    fluent_name = 'ray-points-count'
    _python_name = 'ray_points_count'
    return_type = 'object'

class beam_vector(RealList):
    """
    The components of the beam propagation vector.
    """
    _version = '241'
    fluent_name = 'beam-vector'
    _python_name = 'beam_vector'
    return_type = 'object'

class beams_child(Group):
    """
    'child_object_type' of beams.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'beams_child'
    child_names = ['name', 'ap_face_zone', 'beam_length', 'ray_points_count', 'beam_vector']
    _child_classes = dict(
        name=name,
        ap_face_zone=ap_face_zone_1,
        beam_length=beam_length,
        ray_points_count=ray_points_count,
        beam_vector=beam_vector,
    )
    return_type = 'object'

class beams(NamedObject[beams_child], CreatableNamedObjectMixinOld[beams_child]):
    """
    The optical beams object.
    """
    _version = '241'
    fluent_name = 'beams'
    _python_name = 'beams'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        copy=copy,
    )
    child_object_type = beams_child
    return_type = 'object'

class reset_statistics(Boolean):
    """
    Reset the statistics of averaging of flow and optical quantities.
    """
    _version = '241'
    fluent_name = 'reset-statistics'
    _python_name = 'reset_statistics'
    return_type = 'object'

class method_3(Integer):
    """
    'method' child.
    """
    _version = '241'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class samp_time_period(Real):
    """
    'samp_time_period' child.
    """
    _version = '241'
    fluent_name = 'samp-time-period'
    _python_name = 'samp_time_period'
    return_type = 'object'

class samp_time_steps(Integer):
    """
    'samp_time_steps' child.
    """
    _version = '241'
    fluent_name = 'samp-time-steps'
    _python_name = 'samp_time_steps'
    return_type = 'object'

class avg_time_period(Real):
    """
    'avg_time_period' child.
    """
    _version = '241'
    fluent_name = 'avg-time-period'
    _python_name = 'avg_time_period'
    return_type = 'object'

class avg_time_steps(Integer):
    """
    'avg_time_steps' child.
    """
    _version = '241'
    fluent_name = 'avg-time-steps'
    _python_name = 'avg_time_steps'
    return_type = 'object'

class statistics_controls(Command):
    """
    Specify statistics parameters of sampling and averaging of flow and optical quantities.
    
    Parameters
    ----------
        method : int
            'method' child.
        samp_time_period : real
            'samp_time_period' child.
        samp_time_steps : int
            'samp_time_steps' child.
        avg_time_period : real
            'avg_time_period' child.
        avg_time_steps : int
            'avg_time_steps' child.
    """
    _version = '241'
    fluent_name = 'statistics-controls'
    _python_name = 'statistics_controls'
    argument_names = ['method', 'samp_time_period', 'samp_time_steps', 'avg_time_period', 'avg_time_steps']
    _child_classes = dict(
        method=method_3,
        samp_time_period=samp_time_period,
        samp_time_steps=samp_time_steps,
        avg_time_period=avg_time_period,
        avg_time_steps=avg_time_steps,
    )
    return_type = 'object'

class statistics(Group):
    """
    The statistics object.
    """
    _version = '241'
    fluent_name = 'statistics'
    _python_name = 'statistics'
    child_names = ['reset_statistics']
    command_names = ['statistics_controls']
    _child_classes = dict(
        reset_statistics=reset_statistics,
        statistics_controls=statistics_controls,
    )
    return_type = 'object'

class sampling_iterations(Integer):
    """
    The sampling iterations of flow quantities.
    """
    _version = '241'
    fluent_name = 'sampling-iterations'
    _python_name = 'sampling_iterations'
    return_type = 'object'

class index_of_refraction(Real):
    """
    The model parameters of index of refraction.
    """
    _version = '241'
    fluent_name = 'index-of-refraction'
    _python_name = 'index_of_refraction'
    return_type = 'object'

class report(Boolean):
    """
    Write aero-optical reports for optical beams.
    """
    _version = '241'
    fluent_name = 'report'
    _python_name = 'report'
    return_type = 'object'

class verbosity_2(Integer):
    """
    The verbosity of the model messages.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class optics(Group):
    """
    The optics model object.
    """
    _version = '241'
    fluent_name = 'optics'
    _python_name = 'optics'
    child_names = ['enable', 'beams', 'statistics', 'sampling_iterations', 'index_of_refraction', 'report', 'verbosity']
    _child_classes = dict(
        enable=enable_9,
        beams=beams,
        statistics=statistics,
        sampling_iterations=sampling_iterations,
        index_of_refraction=index_of_refraction,
        report=report,
        verbosity=verbosity_2,
    )
    return_type = 'object'

class thermal_effects_1(Boolean):
    """
    Enable structure thermal effects.
    """
    _version = '241'
    fluent_name = 'thermal-effects?'
    _python_name = 'thermal_effects'
    return_type = 'object'

class options_3(Group):
    """
    'options' child.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['thermal_effects']
    _child_classes = dict(
        thermal_effects=thermal_effects_1,
    )
    return_type = 'object'

class numerical_damping_factor(Real):
    """
    Structure damping parameters.
    """
    _version = '241'
    fluent_name = 'numerical-damping-factor'
    _python_name = 'numerical_damping_factor'
    return_type = 'object'

class enhanced_strain(Boolean):
    """
    Enable enhanced strain element.
    """
    _version = '241'
    fluent_name = 'enhanced-strain?'
    _python_name = 'enhanced_strain'
    return_type = 'object'

class unsteady_damping_rayleigh(Boolean):
    """
    Enable/disable Newmark unsteady solution model.
    """
    _version = '241'
    fluent_name = 'unsteady-damping-rayleigh?'
    _python_name = 'unsteady_damping_rayleigh'
    return_type = 'object'

class amg_stabilization(String, AllowedValuesMixin):
    """
    The AMG stabilization method for structural solver.
    """
    _version = '241'
    fluent_name = 'amg-stabilization'
    _python_name = 'amg_stabilization'
    return_type = 'object'

class max_iter(Integer):
    """
    The maximum number of iterations for structural solver.
    """
    _version = '241'
    fluent_name = 'max-iter'
    _python_name = 'max_iter'
    return_type = 'object'

class controls(Group):
    """
    The structure controls object.
    """
    _version = '241'
    fluent_name = 'controls'
    _python_name = 'controls'
    child_names = ['numerical_damping_factor', 'enhanced_strain', 'unsteady_damping_rayleigh', 'amg_stabilization', 'max_iter']
    _child_classes = dict(
        numerical_damping_factor=numerical_damping_factor,
        enhanced_strain=enhanced_strain,
        unsteady_damping_rayleigh=unsteady_damping_rayleigh,
        amg_stabilization=amg_stabilization,
        max_iter=max_iter,
    )
    return_type = 'object'

class include_pop_in_fsi_force(Boolean):
    """
    Enable inclusion of operating p into fsi force.
    """
    _version = '241'
    fluent_name = 'include-pop-in-fsi-force?'
    _python_name = 'include_pop_in_fsi_force'
    return_type = 'object'

class steady_2way_fsi(Boolean):
    """
    Enable steady 2-way fsi workflow.
    """
    _version = '241'
    fluent_name = 'steady-2way-fsi?'
    _python_name = 'steady_2way_fsi'
    return_type = 'object'

class include_viscous_fsi_force(Boolean):
    """
    Enable inclusion of viscous fsi force.
    """
    _version = '241'
    fluent_name = 'include-viscous-fsi-force?'
    _python_name = 'include_viscous_fsi_force'
    return_type = 'object'

class explicit_fsi_force(Boolean):
    """
    Enable explicit fsi force.
    """
    _version = '241'
    fluent_name = 'explicit-fsi-force?'
    _python_name = 'explicit_fsi_force'
    return_type = 'object'

class starting_t_re_initialization(String, AllowedValuesMixin):
    """
    Starting T-field re-initialization method.
    """
    _version = '241'
    fluent_name = 'starting-t-re-initialization'
    _python_name = 'starting_t_re_initialization'
    return_type = 'object'

class expert_3(Group):
    """
    The structure expert object.
    """
    _version = '241'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['include_pop_in_fsi_force', 'steady_2way_fsi', 'include_viscous_fsi_force', 'explicit_fsi_force', 'starting_t_re_initialization']
    _child_classes = dict(
        include_pop_in_fsi_force=include_pop_in_fsi_force,
        steady_2way_fsi=steady_2way_fsi,
        include_viscous_fsi_force=include_viscous_fsi_force,
        explicit_fsi_force=explicit_fsi_force,
        starting_t_re_initialization=starting_t_re_initialization,
    )
    return_type = 'object'

class structure(Group):
    """
    'structure' child.
    """
    _version = '241'
    fluent_name = 'structure'
    _python_name = 'structure'
    child_names = ['model', 'options', 'controls', 'expert']
    _child_classes = dict(
        model=model_1,
        options=options_3,
        controls=controls,
        expert=expert_3,
    )
    return_type = 'object'

class enabled_12(Boolean):
    """
    'enabled' child.
    """
    _version = '241'
    fluent_name = 'enabled'
    _python_name = 'enabled'
    return_type = 'object'

class ablation(Group):
    """
    Enable/disable ablation model.
    """
    _version = '241'
    fluent_name = 'ablation'
    _python_name = 'ablation'
    child_names = ['enabled']
    _child_classes = dict(
        enabled=enabled_12,
    )
    return_type = 'object'

class potential(Boolean):
    """
    Enable the electric potential model.
    """
    _version = '241'
    fluent_name = 'potential'
    _python_name = 'potential'
    return_type = 'object'

class joule_heating(Boolean):
    """
    'joule_heating' child.
    """
    _version = '241'
    fluent_name = 'joule-heating'
    _python_name = 'joule_heating'
    return_type = 'object'

class li_battery_enabled(Boolean):
    """
    Enable the detailed lithium-ion battery model.
    """
    _version = '241'
    fluent_name = 'li-battery-enabled'
    _python_name = 'li_battery_enabled'
    return_type = 'object'

class echemistry_enabled(Boolean):
    """
    Enable the echemistry-related model.
    """
    _version = '241'
    fluent_name = 'echemistry-enabled'
    _python_name = 'echemistry_enabled'
    return_type = 'object'

class echem_heating_enabled(Boolean):
    """
    'echem_heating_enabled' child.
    """
    _version = '241'
    fluent_name = 'echem-heating-enabled'
    _python_name = 'echem_heating_enabled'
    return_type = 'object'

class positive_electrode_zone(StringList, AllowedValuesMixin):
    """
    Positive electrode zones.
    """
    _version = '241'
    fluent_name = 'positive-electrode-zone'
    _python_name = 'positive_electrode_zone'
    return_type = 'object'

class electrolyte_zone(StringList, AllowedValuesMixin):
    """
    Electrolyte zones.
    """
    _version = '241'
    fluent_name = 'electrolyte-zone'
    _python_name = 'electrolyte_zone'
    return_type = 'object'

class negative_electrode_zone(StringList, AllowedValuesMixin):
    """
    Negative electrode zones.
    """
    _version = '241'
    fluent_name = 'negative-electrode-zone'
    _python_name = 'negative_electrode_zone'
    return_type = 'object'

class zone_assignment(Group):
    """
    'zone_assignment' child.
    """
    _version = '241'
    fluent_name = 'zone-assignment'
    _python_name = 'zone_assignment'
    child_names = ['positive_electrode_zone', 'electrolyte_zone', 'negative_electrode_zone']
    _child_classes = dict(
        positive_electrode_zone=positive_electrode_zone,
        electrolyte_zone=electrolyte_zone,
        negative_electrode_zone=negative_electrode_zone,
    )
    return_type = 'object'

class cathode_i0(Real):
    """
    Io at cathode.
    """
    _version = '241'
    fluent_name = 'cathode-i0'
    _python_name = 'cathode_i0'
    return_type = 'object'

class cathode_alpha1(Real):
    """
    Ce rate exponent at cathode.
    """
    _version = '241'
    fluent_name = 'cathode-alpha1'
    _python_name = 'cathode_alpha1'
    return_type = 'object'

class cathode_alpha2(Real):
    """
    Cmax-cs rate exponent at cathode.
    """
    _version = '241'
    fluent_name = 'cathode-alpha2'
    _python_name = 'cathode_alpha2'
    return_type = 'object'

class cathode_alpha3(Real):
    """
    Cs rate exponent at cathode.
    """
    _version = '241'
    fluent_name = 'cathode-alpha3'
    _python_name = 'cathode_alpha3'
    return_type = 'object'

class cathode_alpha_a(Real):
    """
    Alpha_a at cathode.
    """
    _version = '241'
    fluent_name = 'cathode-alpha-a'
    _python_name = 'cathode_alpha_a'
    return_type = 'object'

class cathode_alpha_c(Real):
    """
    Alpha_c at cathode.
    """
    _version = '241'
    fluent_name = 'cathode-alpha-c'
    _python_name = 'cathode_alpha_c'
    return_type = 'object'

class method_4(String, AllowedValuesMixin):
    """
    Method for the property.
    """
    _version = '241'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class value_1(Real):
    """
    'value' child.
    """
    _version = '241'
    fluent_name = 'value'
    _python_name = 'value'
    return_type = 'object'

class cathode_ocv(Group):
    """
    'cathode_ocv' child.
    """
    _version = '241'
    fluent_name = 'cathode-ocv'
    _python_name = 'cathode_ocv'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_1,
        user_defined=user_defined_1,
    )
    return_type = 'object'

class anode_i0(Real):
    """
    Io at anode.
    """
    _version = '241'
    fluent_name = 'anode-i0'
    _python_name = 'anode_i0'
    return_type = 'object'

class anode_alpha1(Real):
    """
    Ce rate exponent at anode.
    """
    _version = '241'
    fluent_name = 'anode-alpha1'
    _python_name = 'anode_alpha1'
    return_type = 'object'

class anode_alpha2(Real):
    """
    Cmax-cs rate exponent at anode.
    """
    _version = '241'
    fluent_name = 'anode-alpha2'
    _python_name = 'anode_alpha2'
    return_type = 'object'

class anode_alpha3(Real):
    """
    Cs rate exponent at anode.
    """
    _version = '241'
    fluent_name = 'anode-alpha3'
    _python_name = 'anode_alpha3'
    return_type = 'object'

class anode_alpha_a(Real):
    """
    Alpha_a at anode.
    """
    _version = '241'
    fluent_name = 'anode-alpha-a'
    _python_name = 'anode_alpha_a'
    return_type = 'object'

class anode_alpha_c(Real):
    """
    Alpha_c at anode.
    """
    _version = '241'
    fluent_name = 'anode-alpha-c'
    _python_name = 'anode_alpha_c'
    return_type = 'object'

class anode_ocv(Group):
    """
    'anode_ocv' child.
    """
    _version = '241'
    fluent_name = 'anode-ocv'
    _python_name = 'anode_ocv'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_1,
        user_defined=user_defined_1,
    )
    return_type = 'object'

class linearized_bv_rate(Boolean):
    """
    'linearized_bv_rate' child.
    """
    _version = '241'
    fluent_name = 'linearized-bv-rate'
    _python_name = 'linearized_bv_rate'
    return_type = 'object'

class butler_volmer_rate(Group):
    """
    'butler_volmer_rate' child.
    """
    _version = '241'
    fluent_name = 'butler-volmer-rate'
    _python_name = 'butler_volmer_rate'
    child_names = ['cathode_i0', 'cathode_alpha1', 'cathode_alpha2', 'cathode_alpha3', 'cathode_alpha_a', 'cathode_alpha_c', 'cathode_ocv', 'anode_i0', 'anode_alpha1', 'anode_alpha2', 'anode_alpha3', 'anode_alpha_a', 'anode_alpha_c', 'anode_ocv', 'linearized_bv_rate']
    _child_classes = dict(
        cathode_i0=cathode_i0,
        cathode_alpha1=cathode_alpha1,
        cathode_alpha2=cathode_alpha2,
        cathode_alpha3=cathode_alpha3,
        cathode_alpha_a=cathode_alpha_a,
        cathode_alpha_c=cathode_alpha_c,
        cathode_ocv=cathode_ocv,
        anode_i0=anode_i0,
        anode_alpha1=anode_alpha1,
        anode_alpha2=anode_alpha2,
        anode_alpha3=anode_alpha3,
        anode_alpha_a=anode_alpha_a,
        anode_alpha_c=anode_alpha_c,
        anode_ocv=anode_ocv,
        linearized_bv_rate=linearized_bv_rate,
    )
    return_type = 'object'

class cathode_cmax(Real):
    """
    Max Li+ conc. in cathode.
    """
    _version = '241'
    fluent_name = 'cathode-cmax'
    _python_name = 'cathode_cmax'
    return_type = 'object'

class anode_cmax(Real):
    """
    Max Li+ conc. in anode.
    """
    _version = '241'
    fluent_name = 'anode-cmax'
    _python_name = 'anode_cmax'
    return_type = 'object'

class cathode_c_init(Real):
    """
    Initial Li+ conc. in cathode.
    """
    _version = '241'
    fluent_name = 'cathode-c-init'
    _python_name = 'cathode_c_init'
    return_type = 'object'

class anode_c_init(Real):
    """
    Initial Li+ conc. in anode.
    """
    _version = '241'
    fluent_name = 'anode-c-init'
    _python_name = 'anode_c_init'
    return_type = 'object'

class electrolyte_c_init(Real):
    """
    Initial Li+ conc. in electrolyte.
    """
    _version = '241'
    fluent_name = 'electrolyte-c-init'
    _python_name = 'electrolyte_c_init'
    return_type = 'object'

class tplus(Group):
    """
    'tplus' child.
    """
    _version = '241'
    fluent_name = 'tplus'
    _python_name = 'tplus'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_1,
        user_defined=user_defined_1,
    )
    return_type = 'object'

class activity_term(Group):
    """
    'activity_term' child.
    """
    _version = '241'
    fluent_name = 'activity-term'
    _python_name = 'activity_term'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_1,
        user_defined=user_defined_1,
    )
    return_type = 'object'

class material_property(Group):
    """
    'material_property' child.
    """
    _version = '241'
    fluent_name = 'material-property'
    _python_name = 'material_property'
    child_names = ['cathode_cmax', 'anode_cmax', 'cathode_c_init', 'anode_c_init', 'electrolyte_c_init', 'tplus', 'activity_term']
    _child_classes = dict(
        cathode_cmax=cathode_cmax,
        anode_cmax=anode_cmax,
        cathode_c_init=cathode_c_init,
        anode_c_init=anode_c_init,
        electrolyte_c_init=electrolyte_c_init,
        tplus=tplus,
        activity_term=activity_term,
    )
    return_type = 'object'

class lithium_battery(Group):
    """
    'lithium_battery' child.
    """
    _version = '241'
    fluent_name = 'lithium-battery'
    _python_name = 'lithium_battery'
    child_names = ['echem_heating_enabled', 'zone_assignment', 'butler_volmer_rate', 'material_property']
    _child_classes = dict(
        echem_heating_enabled=echem_heating_enabled,
        zone_assignment=zone_assignment,
        butler_volmer_rate=butler_volmer_rate,
        material_property=material_property,
    )
    return_type = 'object'

class device_type(Integer):
    """
    'device_type' child.
    """
    _version = '241'
    fluent_name = 'device-type'
    _python_name = 'device_type'
    return_type = 'object'

class mea_model(Integer):
    """
    'mea_model' child.
    """
    _version = '241'
    fluent_name = 'mea-model'
    _python_name = 'mea_model'
    return_type = 'object'

class source_enabled(Boolean):
    """
    Include Electrochemistry Sources.
    """
    _version = '241'
    fluent_name = 'source-enabled'
    _python_name = 'source_enabled'
    return_type = 'object'

class butlervolmer_rate(Boolean):
    """
    Use Butler-Volmer Rate.
    """
    _version = '241'
    fluent_name = 'butlervolmer-rate'
    _python_name = 'butlervolmer_rate'
    return_type = 'object'

class multidiff_enabled(Boolean):
    """
    Enable Multi-Component Diffusion.
    """
    _version = '241'
    fluent_name = 'multidiff-enabled'
    _python_name = 'multidiff_enabled'
    return_type = 'object'

class halfcell_voltage(Boolean):
    """
    Enable Half-Cell Potential.
    """
    _version = '241'
    fluent_name = 'halfcell-voltage'
    _python_name = 'halfcell_voltage'
    return_type = 'object'

class osmotic_drag(Boolean):
    """
    Include Osmotic Drag Effect.
    """
    _version = '241'
    fluent_name = 'osmotic-drag'
    _python_name = 'osmotic_drag'
    return_type = 'object'

class capillary_pressure(Boolean):
    """
    Include Capillary Pressure Effect.
    """
    _version = '241'
    fluent_name = 'capillary-pressure'
    _python_name = 'capillary_pressure'
    return_type = 'object'

class reaction_heat(Boolean):
    """
    Include Reaction Heat.
    """
    _version = '241'
    fluent_name = 'reaction-heat'
    _python_name = 'reaction_heat'
    return_type = 'object'

class phase_change(Boolean):
    """
    Include Water Phase Change.
    """
    _version = '241'
    fluent_name = 'phase-change'
    _python_name = 'phase_change'
    return_type = 'object'

class water_content(Boolean):
    """
    Include Water Content Transport Equation.
    """
    _version = '241'
    fluent_name = 'water-content'
    _python_name = 'water_content'
    return_type = 'object'

class bc_type(Integer):
    """
    'bc_type' child.
    """
    _version = '241'
    fluent_name = 'bc-type'
    _python_name = 'bc_type'
    return_type = 'object'

class tot_voltage(Real):
    """
    Total Cell Voltage (V).
    """
    _version = '241'
    fluent_name = 'tot-voltage'
    _python_name = 'tot_voltage'
    return_type = 'object'

class tot_current(Real):
    """
    Total Cell Current (A).
    """
    _version = '241'
    fluent_name = 'tot-current'
    _python_name = 'tot_current'
    return_type = 'object'

class options_4(Group):
    """
    'options' child.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['device_type', 'mea_model', 'source_enabled', 'butlervolmer_rate', 'multidiff_enabled', 'halfcell_voltage', 'osmotic_drag', 'capillary_pressure', 'reaction_heat', 'phase_change', 'water_content', 'bc_type', 'tot_voltage', 'tot_current']
    _child_classes = dict(
        device_type=device_type,
        mea_model=mea_model,
        source_enabled=source_enabled,
        butlervolmer_rate=butlervolmer_rate,
        multidiff_enabled=multidiff_enabled,
        halfcell_voltage=halfcell_voltage,
        osmotic_drag=osmotic_drag,
        capillary_pressure=capillary_pressure,
        reaction_heat=reaction_heat,
        phase_change=phase_change,
        water_content=water_content,
        bc_type=bc_type,
        tot_voltage=tot_voltage,
        tot_current=tot_current,
    )
    return_type = 'object'

class anode_jref(Real):
    """
    Anode Reference Current Density (A/m2).
    """
    _version = '241'
    fluent_name = 'anode-jref'
    _python_name = 'anode_jref'
    return_type = 'object'

class anode_jea(Real):
    """
    Anode Activation Energy (J/mol).
    """
    _version = '241'
    fluent_name = 'anode-jea'
    _python_name = 'anode_jea'
    return_type = 'object'

class anode_cref(Real):
    """
    Anode Reference Concentration (kmol/m3).
    """
    _version = '241'
    fluent_name = 'anode-cref'
    _python_name = 'anode_cref'
    return_type = 'object'

class anode_exp(Real):
    """
    Anode Concentration Exponent.
    """
    _version = '241'
    fluent_name = 'anode-exp'
    _python_name = 'anode_exp'
    return_type = 'object'

class anode_ex_a(Real):
    """
    Anode Exchange Coefficient(a).
    """
    _version = '241'
    fluent_name = 'anode-ex-a'
    _python_name = 'anode_ex_a'
    return_type = 'object'

class anode_ex_c(Real):
    """
    Anode Exchange Coefficient(c).
    """
    _version = '241'
    fluent_name = 'anode-ex-c'
    _python_name = 'anode_ex_c'
    return_type = 'object'

class cathode_jref(Real):
    """
    Cathode Reference Current Density (A/m2).
    """
    _version = '241'
    fluent_name = 'cathode-jref'
    _python_name = 'cathode_jref'
    return_type = 'object'

class cathode_jea(Real):
    """
    Cathode Activation Energy (J/mol).
    """
    _version = '241'
    fluent_name = 'cathode-jea'
    _python_name = 'cathode_jea'
    return_type = 'object'

class cathode_cref(Real):
    """
    Cathode Reference Concentration (kmol/m3).
    """
    _version = '241'
    fluent_name = 'cathode-cref'
    _python_name = 'cathode_cref'
    return_type = 'object'

class cathode_exp(Real):
    """
    Cathode Concentration Exponent.
    """
    _version = '241'
    fluent_name = 'cathode-exp'
    _python_name = 'cathode_exp'
    return_type = 'object'

class cathode_ex_a(Real):
    """
    Cathode Exchange Coefficient(a).
    """
    _version = '241'
    fluent_name = 'cathode-ex-a'
    _python_name = 'cathode_ex_a'
    return_type = 'object'

class cathode_ex_c(Real):
    """
    Cathode Exchange Coefficient(c).
    """
    _version = '241'
    fluent_name = 'cathode-ex-c'
    _python_name = 'cathode_ex_c'
    return_type = 'object'

class anode_stde(Real):
    """
    Anode Half-Cell Potential (V).
    """
    _version = '241'
    fluent_name = 'anode-stde'
    _python_name = 'anode_stde'
    return_type = 'object'

class cathode_stde(Real):
    """
    Cathode Half-Cell Potential (V).
    """
    _version = '241'
    fluent_name = 'cathode-stde'
    _python_name = 'cathode_stde'
    return_type = 'object'

class std_tem(Real):
    """
    Standard State Temperature (K).
    """
    _version = '241'
    fluent_name = 'std-tem'
    _python_name = 'std_tem'
    return_type = 'object'

class std_pre(Real):
    """
    Standard State Pressure (Pa).
    """
    _version = '241'
    fluent_name = 'std-pre'
    _python_name = 'std_pre'
    return_type = 'object'

class open_voltage(Real):
    """
    Open-Circuit Voltage (V).
    """
    _version = '241'
    fluent_name = 'open-voltage'
    _python_name = 'open_voltage'
    return_type = 'object'

class anode_entro(Real):
    """
    Anode Reaction Entropy (j/kgmol-k).
    """
    _version = '241'
    fluent_name = 'anode-entro'
    _python_name = 'anode_entro'
    return_type = 'object'

class cathode_entro(Real):
    """
    Cathode Reaction Entropy (j/kgmol-k).
    """
    _version = '241'
    fluent_name = 'cathode-entro'
    _python_name = 'cathode_entro'
    return_type = 'object'

class evaporation_rate(Real):
    """
    Vaporation Rate (1/s).
    """
    _version = '241'
    fluent_name = 'evaporation-rate'
    _python_name = 'evaporation_rate'
    return_type = 'object'

class condensation_rate(Real):
    """
    Condensation Rate (1/s).
    """
    _version = '241'
    fluent_name = 'condensation-rate'
    _python_name = 'condensation_rate'
    return_type = 'object'

class osmoticdrag_coeff(Real):
    """
    Modification to Osmotic Drag.
    """
    _version = '241'
    fluent_name = 'osmoticdrag-coeff'
    _python_name = 'osmoticdrag_coeff'
    return_type = 'object'

class parameters_1(Group):
    """
    'parameters' child.
    """
    _version = '241'
    fluent_name = 'parameters'
    _python_name = 'parameters'
    child_names = ['anode_jref', 'anode_jea', 'anode_cref', 'anode_exp', 'anode_ex_a', 'anode_ex_c', 'cathode_jref', 'cathode_jea', 'cathode_cref', 'cathode_exp', 'cathode_ex_a', 'cathode_ex_c', 'anode_stde', 'cathode_stde', 'std_tem', 'std_pre', 'open_voltage', 'anode_entro', 'cathode_entro', 'evaporation_rate', 'condensation_rate', 'osmoticdrag_coeff']
    _child_classes = dict(
        anode_jref=anode_jref,
        anode_jea=anode_jea,
        anode_cref=anode_cref,
        anode_exp=anode_exp,
        anode_ex_a=anode_ex_a,
        anode_ex_c=anode_ex_c,
        cathode_jref=cathode_jref,
        cathode_jea=cathode_jea,
        cathode_cref=cathode_cref,
        cathode_exp=cathode_exp,
        cathode_ex_a=cathode_ex_a,
        cathode_ex_c=cathode_ex_c,
        anode_stde=anode_stde,
        cathode_stde=cathode_stde,
        std_tem=std_tem,
        std_pre=std_pre,
        open_voltage=open_voltage,
        anode_entro=anode_entro,
        cathode_entro=cathode_entro,
        evaporation_rate=evaporation_rate,
        condensation_rate=condensation_rate,
        osmoticdrag_coeff=osmoticdrag_coeff,
    )
    return_type = 'object'

class anode_cc_zone_list(StringList, AllowedValuesMixin):
    """
    Anode current collector cell zones.
    """
    _version = '241'
    fluent_name = 'anode-cc-zone-list'
    _python_name = 'anode_cc_zone_list'
    return_type = 'object'

class anode_cc_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '241'
    fluent_name = 'anode-cc-update'
    _python_name = 'anode_cc_update'
    return_type = 'object'

class anode_cc_material(String):
    """
    Anode current collector material.
    """
    _version = '241'
    fluent_name = 'anode-cc-material'
    _python_name = 'anode_cc_material'
    return_type = 'object'

class anode_cc_zone(Group):
    """
    'anode_cc_zone' child.
    """
    _version = '241'
    fluent_name = 'anode-cc-zone'
    _python_name = 'anode_cc_zone'
    child_names = ['anode_cc_zone_list', 'anode_cc_update', 'anode_cc_material']
    _child_classes = dict(
        anode_cc_zone_list=anode_cc_zone_list,
        anode_cc_update=anode_cc_update,
        anode_cc_material=anode_cc_material,
    )
    return_type = 'object'

class anode_fc_zone_list(StringList, AllowedValuesMixin):
    """
    Anode flow channel cell zones.
    """
    _version = '241'
    fluent_name = 'anode-fc-zone-list'
    _python_name = 'anode_fc_zone_list'
    return_type = 'object'

class anode_fc_zone(Group):
    """
    'anode_fc_zone' child.
    """
    _version = '241'
    fluent_name = 'anode-fc-zone'
    _python_name = 'anode_fc_zone'
    child_names = ['anode_fc_zone_list']
    _child_classes = dict(
        anode_fc_zone_list=anode_fc_zone_list,
    )
    return_type = 'object'

class anode_pl_zone_list(StringList, AllowedValuesMixin):
    """
    Anode porous layer cell zones.
    """
    _version = '241'
    fluent_name = 'anode-pl-zone-list'
    _python_name = 'anode_pl_zone_list'
    return_type = 'object'

class anode_pl_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '241'
    fluent_name = 'anode-pl-update'
    _python_name = 'anode_pl_update'
    return_type = 'object'

class anode_pl_material(String):
    """
    Anode porous layer material.
    """
    _version = '241'
    fluent_name = 'anode-pl-material'
    _python_name = 'anode_pl_material'
    return_type = 'object'

class anode_pl_porosity(Real):
    """
    Anode porous layer porosity.
    """
    _version = '241'
    fluent_name = 'anode-pl-porosity'
    _python_name = 'anode_pl_porosity'
    return_type = 'object'

class anode_pl_kr(Real):
    """
    Anode porous layer permibility.
    """
    _version = '241'
    fluent_name = 'anode-pl-kr'
    _python_name = 'anode_pl_kr'
    return_type = 'object'

class anode_pl_zone(Group):
    """
    'anode_pl_zone' child.
    """
    _version = '241'
    fluent_name = 'anode-pl-zone'
    _python_name = 'anode_pl_zone'
    child_names = ['anode_pl_zone_list', 'anode_pl_update', 'anode_pl_material', 'anode_pl_porosity', 'anode_pl_kr']
    _child_classes = dict(
        anode_pl_zone_list=anode_pl_zone_list,
        anode_pl_update=anode_pl_update,
        anode_pl_material=anode_pl_material,
        anode_pl_porosity=anode_pl_porosity,
        anode_pl_kr=anode_pl_kr,
    )
    return_type = 'object'

class anode_pl_cp_function(String, AllowedValuesMixin):
    """
    'anode_pl_cp_function' child.
    """
    _version = '241'
    fluent_name = 'anode-pl-cp-function'
    _python_name = 'anode_pl_cp_function'
    return_type = 'object'

class anode_pl_angle(Real):
    """
    Anode porous layer contact angle.
    """
    _version = '241'
    fluent_name = 'anode-pl-angle'
    _python_name = 'anode_pl_angle'
    return_type = 'object'

class anode_pl_a(Real):
    """
    Anode porous layer Leverett function coefficient a.
    """
    _version = '241'
    fluent_name = 'anode-pl-a'
    _python_name = 'anode_pl_a'
    return_type = 'object'

class anode_pl_b(Real):
    """
    Anode porous layer Leverett function coefficient b.
    """
    _version = '241'
    fluent_name = 'anode-pl-b'
    _python_name = 'anode_pl_b'
    return_type = 'object'

class anode_pl_c(Real):
    """
    Anode porous layer Leverett function coefficient c.
    """
    _version = '241'
    fluent_name = 'anode-pl-c'
    _python_name = 'anode_pl_c'
    return_type = 'object'

class anode_cl_zone_list(StringList, AllowedValuesMixin):
    """
    Anode catalyst layer cell zones.
    """
    _version = '241'
    fluent_name = 'anode-cl-zone-list'
    _python_name = 'anode_cl_zone_list'
    return_type = 'object'

class anode_cl_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '241'
    fluent_name = 'anode-cl-update'
    _python_name = 'anode_cl_update'
    return_type = 'object'

class anode_cl_material(String):
    """
    Anode catalyst layer material.
    """
    _version = '241'
    fluent_name = 'anode-cl-material'
    _python_name = 'anode_cl_material'
    return_type = 'object'

class anode_cl_porosity(Real):
    """
    Anode catalyst layer porosity.
    """
    _version = '241'
    fluent_name = 'anode-cl-porosity'
    _python_name = 'anode_cl_porosity'
    return_type = 'object'

class anode_cl_kr(Real):
    """
    Anode catalyst layer permibility.
    """
    _version = '241'
    fluent_name = 'anode-cl-kr'
    _python_name = 'anode_cl_kr'
    return_type = 'object'

class anode_cl_zone(Group):
    """
    'anode_cl_zone' child.
    """
    _version = '241'
    fluent_name = 'anode-cl-zone'
    _python_name = 'anode_cl_zone'
    child_names = ['anode_cl_zone_list', 'anode_cl_update', 'anode_cl_material', 'anode_cl_porosity', 'anode_cl_kr']
    _child_classes = dict(
        anode_cl_zone_list=anode_cl_zone_list,
        anode_cl_update=anode_cl_update,
        anode_cl_material=anode_cl_material,
        anode_cl_porosity=anode_cl_porosity,
        anode_cl_kr=anode_cl_kr,
    )
    return_type = 'object'

class anode_cl_svratio(Real):
    """
    Anode catalyst layer surface volume ratio.
    """
    _version = '241'
    fluent_name = 'anode-cl-svratio'
    _python_name = 'anode_cl_svratio'
    return_type = 'object'

class anode_cl_thickness(Real):
    """
    Anode catalyst layer thickness.
    """
    _version = '241'
    fluent_name = 'anode-cl-thickness'
    _python_name = 'anode_cl_thickness'
    return_type = 'object'

class anode_cl_cp_function(String, AllowedValuesMixin):
    """
    'anode_cl_cp_function' child.
    """
    _version = '241'
    fluent_name = 'anode-cl-cp-function'
    _python_name = 'anode_cl_cp_function'
    return_type = 'object'

class anode_cl_angle(Real):
    """
    Anode catalyst layer contact angle.
    """
    _version = '241'
    fluent_name = 'anode-cl-angle'
    _python_name = 'anode_cl_angle'
    return_type = 'object'

class anode_cl_a(Real):
    """
    Anode catalyst layer Leverett function coefficient a.
    """
    _version = '241'
    fluent_name = 'anode-cl-a'
    _python_name = 'anode_cl_a'
    return_type = 'object'

class anode_cl_b(Real):
    """
    Anode catalyst layer Leverett function coefficient b.
    """
    _version = '241'
    fluent_name = 'anode-cl-b'
    _python_name = 'anode_cl_b'
    return_type = 'object'

class anode_cl_c(Real):
    """
    Anode catalyst layer Leverett function coefficient c.
    """
    _version = '241'
    fluent_name = 'anode-cl-c'
    _python_name = 'anode_cl_c'
    return_type = 'object'

class anode(Group):
    """
    'anode' child.
    """
    _version = '241'
    fluent_name = 'anode'
    _python_name = 'anode'
    child_names = ['anode_cc_zone', 'anode_fc_zone', 'anode_pl_zone', 'anode_pl_cp_function', 'anode_pl_angle', 'anode_pl_a', 'anode_pl_b', 'anode_pl_c', 'anode_cl_zone', 'anode_cl_svratio', 'anode_cl_thickness', 'anode_cl_cp_function', 'anode_cl_angle', 'anode_cl_a', 'anode_cl_b', 'anode_cl_c']
    _child_classes = dict(
        anode_cc_zone=anode_cc_zone,
        anode_fc_zone=anode_fc_zone,
        anode_pl_zone=anode_pl_zone,
        anode_pl_cp_function=anode_pl_cp_function,
        anode_pl_angle=anode_pl_angle,
        anode_pl_a=anode_pl_a,
        anode_pl_b=anode_pl_b,
        anode_pl_c=anode_pl_c,
        anode_cl_zone=anode_cl_zone,
        anode_cl_svratio=anode_cl_svratio,
        anode_cl_thickness=anode_cl_thickness,
        anode_cl_cp_function=anode_cl_cp_function,
        anode_cl_angle=anode_cl_angle,
        anode_cl_a=anode_cl_a,
        anode_cl_b=anode_cl_b,
        anode_cl_c=anode_cl_c,
    )
    return_type = 'object'

class mem_zone_list(StringList, AllowedValuesMixin):
    """
    Electrolyte cell zones.
    """
    _version = '241'
    fluent_name = 'mem-zone-list'
    _python_name = 'mem_zone_list'
    return_type = 'object'

class mem_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '241'
    fluent_name = 'mem-update'
    _python_name = 'mem_update'
    return_type = 'object'

class mem_material(String):
    """
    Electrolyte material.
    """
    _version = '241'
    fluent_name = 'mem-material'
    _python_name = 'mem_material'
    return_type = 'object'

class mem_porosity(Real):
    """
    Membrane porosity.
    """
    _version = '241'
    fluent_name = 'mem-porosity'
    _python_name = 'mem_porosity'
    return_type = 'object'

class mem_kr(Real):
    """
    Membrane permibility.
    """
    _version = '241'
    fluent_name = 'mem-kr'
    _python_name = 'mem_kr'
    return_type = 'object'

class mem_zone(Group):
    """
    'mem_zone' child.
    """
    _version = '241'
    fluent_name = 'mem-zone'
    _python_name = 'mem_zone'
    child_names = ['mem_zone_list', 'mem_update', 'mem_material', 'mem_porosity', 'mem_kr']
    _child_classes = dict(
        mem_zone_list=mem_zone_list,
        mem_update=mem_update,
        mem_material=mem_material,
        mem_porosity=mem_porosity,
        mem_kr=mem_kr,
    )
    return_type = 'object'

class permeation_enabled(Boolean):
    """
    Enable species permeation.
    """
    _version = '241'
    fluent_name = 'permeation-enabled'
    _python_name = 'permeation_enabled'
    return_type = 'object'

class permeation_n(Integer):
    """
    The total number of permeation species.
    """
    _version = '241'
    fluent_name = 'permeation-n'
    _python_name = 'permeation_n'
    return_type = 'object'

class permeation_name(StringList, AllowedValuesMixin):
    """
    Permeation species name.
    """
    _version = '241'
    fluent_name = 'permeation-name'
    _python_name = 'permeation_name'
    return_type = 'object'

class permeation_rate(RealList):
    """
    Permeation rate.
    """
    _version = '241'
    fluent_name = 'permeation-rate'
    _python_name = 'permeation_rate'
    return_type = 'object'

class permeation_ea(RealList):
    """
    Permeation activation Energy.
    """
    _version = '241'
    fluent_name = 'permeation-ea'
    _python_name = 'permeation_ea'
    return_type = 'object'

class species_permeation(Group):
    """
    'species_permeation' child.
    """
    _version = '241'
    fluent_name = 'species-permeation'
    _python_name = 'species_permeation'
    child_names = ['permeation_enabled', 'permeation_n', 'permeation_name', 'permeation_rate', 'permeation_ea']
    _child_classes = dict(
        permeation_enabled=permeation_enabled,
        permeation_n=permeation_n,
        permeation_name=permeation_name,
        permeation_rate=permeation_rate,
        permeation_ea=permeation_ea,
    )
    return_type = 'object'

class mem_anode_interface(StringList, AllowedValuesMixin):
    """
    Electrolyte Anode Interface.
    """
    _version = '241'
    fluent_name = 'mem-anode-interface'
    _python_name = 'mem_anode_interface'
    return_type = 'object'

class mem_cathode_interface(StringList, AllowedValuesMixin):
    """
    Electrolyte Cathode Interface.
    """
    _version = '241'
    fluent_name = 'mem-cathode-interface'
    _python_name = 'mem_cathode_interface'
    return_type = 'object'

class mem_thickness(Real):
    """
    Membrane thickness.
    """
    _version = '241'
    fluent_name = 'mem-thickness'
    _python_name = 'mem_thickness'
    return_type = 'object'

class mem_cond(Real):
    """
    Membrane conductivity.
    """
    _version = '241'
    fluent_name = 'mem-cond'
    _python_name = 'mem_cond'
    return_type = 'object'

class electrolyte(Group):
    """
    'electrolyte' child.
    """
    _version = '241'
    fluent_name = 'electrolyte'
    _python_name = 'electrolyte'
    child_names = ['mem_zone', 'species_permeation', 'mem_anode_interface', 'mem_cathode_interface', 'mem_thickness', 'mem_cond']
    _child_classes = dict(
        mem_zone=mem_zone,
        species_permeation=species_permeation,
        mem_anode_interface=mem_anode_interface,
        mem_cathode_interface=mem_cathode_interface,
        mem_thickness=mem_thickness,
        mem_cond=mem_cond,
    )
    return_type = 'object'

class cathode_cc_zone_list(StringList, AllowedValuesMixin):
    """
    Cathode current collector cell zones.
    """
    _version = '241'
    fluent_name = 'cathode-cc-zone-list'
    _python_name = 'cathode_cc_zone_list'
    return_type = 'object'

class cathode_cc_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '241'
    fluent_name = 'cathode-cc-update'
    _python_name = 'cathode_cc_update'
    return_type = 'object'

class cathode_cc_material(String):
    """
    Cathode current collector material.
    """
    _version = '241'
    fluent_name = 'cathode-cc-material'
    _python_name = 'cathode_cc_material'
    return_type = 'object'

class cathode_cc_zone(Group):
    """
    'cathode_cc_zone' child.
    """
    _version = '241'
    fluent_name = 'cathode-cc-zone'
    _python_name = 'cathode_cc_zone'
    child_names = ['cathode_cc_zone_list', 'cathode_cc_update', 'cathode_cc_material']
    _child_classes = dict(
        cathode_cc_zone_list=cathode_cc_zone_list,
        cathode_cc_update=cathode_cc_update,
        cathode_cc_material=cathode_cc_material,
    )
    return_type = 'object'

class cathode_fc_zone_list(StringList, AllowedValuesMixin):
    """
    Cathode flow channel cell zones.
    """
    _version = '241'
    fluent_name = 'cathode-fc-zone-list'
    _python_name = 'cathode_fc_zone_list'
    return_type = 'object'

class cathode_fc_zone(Group):
    """
    'cathode_fc_zone' child.
    """
    _version = '241'
    fluent_name = 'cathode-fc-zone'
    _python_name = 'cathode_fc_zone'
    child_names = ['cathode_fc_zone_list']
    _child_classes = dict(
        cathode_fc_zone_list=cathode_fc_zone_list,
    )
    return_type = 'object'

class cathode_pl_zone_list(StringList, AllowedValuesMixin):
    """
    Cathode porous layer cell zones.
    """
    _version = '241'
    fluent_name = 'cathode-pl-zone-list'
    _python_name = 'cathode_pl_zone_list'
    return_type = 'object'

class cathode_pl_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '241'
    fluent_name = 'cathode-pl-update'
    _python_name = 'cathode_pl_update'
    return_type = 'object'

class cathode_pl_material(String):
    """
    Cathode porous layer material.
    """
    _version = '241'
    fluent_name = 'cathode-pl-material'
    _python_name = 'cathode_pl_material'
    return_type = 'object'

class cathode_pl_porosity(Real):
    """
    Cathode porous layer porosity.
    """
    _version = '241'
    fluent_name = 'cathode-pl-porosity'
    _python_name = 'cathode_pl_porosity'
    return_type = 'object'

class cathode_pl_kr(Real):
    """
    Cathode porous layer permibility.
    """
    _version = '241'
    fluent_name = 'cathode-pl-kr'
    _python_name = 'cathode_pl_kr'
    return_type = 'object'

class cathode_pl_zone(Group):
    """
    'cathode_pl_zone' child.
    """
    _version = '241'
    fluent_name = 'cathode-pl-zone'
    _python_name = 'cathode_pl_zone'
    child_names = ['cathode_pl_zone_list', 'cathode_pl_update', 'cathode_pl_material', 'cathode_pl_porosity', 'cathode_pl_kr']
    _child_classes = dict(
        cathode_pl_zone_list=cathode_pl_zone_list,
        cathode_pl_update=cathode_pl_update,
        cathode_pl_material=cathode_pl_material,
        cathode_pl_porosity=cathode_pl_porosity,
        cathode_pl_kr=cathode_pl_kr,
    )
    return_type = 'object'

class cathode_pl_cp_function(String, AllowedValuesMixin):
    """
    'cathode_pl_cp_function' child.
    """
    _version = '241'
    fluent_name = 'cathode-pl-cp-function'
    _python_name = 'cathode_pl_cp_function'
    return_type = 'object'

class cathode_pl_angle(Real):
    """
    Cathode porous layer contact angle.
    """
    _version = '241'
    fluent_name = 'cathode-pl-angle'
    _python_name = 'cathode_pl_angle'
    return_type = 'object'

class cathode_pl_a(Real):
    """
    Cathode porous layer Leverett function coefficient a.
    """
    _version = '241'
    fluent_name = 'cathode-pl-a'
    _python_name = 'cathode_pl_a'
    return_type = 'object'

class cathode_pl_b(Real):
    """
    Cathode porous layer Leverett function coefficient b.
    """
    _version = '241'
    fluent_name = 'cathode-pl-b'
    _python_name = 'cathode_pl_b'
    return_type = 'object'

class cathode_pl_c(Real):
    """
    Cathode porous layer Leverett function coefficient c.
    """
    _version = '241'
    fluent_name = 'cathode-pl-c'
    _python_name = 'cathode_pl_c'
    return_type = 'object'

class cathode_cl_zone_list(StringList, AllowedValuesMixin):
    """
    Cathode catalyst layer cell zones.
    """
    _version = '241'
    fluent_name = 'cathode-cl-zone-list'
    _python_name = 'cathode_cl_zone_list'
    return_type = 'object'

class cathode_cl_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '241'
    fluent_name = 'cathode-cl-update'
    _python_name = 'cathode_cl_update'
    return_type = 'object'

class cathode_cl_material(String):
    """
    Cathode catalyst layer material.
    """
    _version = '241'
    fluent_name = 'cathode-cl-material'
    _python_name = 'cathode_cl_material'
    return_type = 'object'

class cathode_cl_porosity(Real):
    """
    Cathode catalyst layer porosity.
    """
    _version = '241'
    fluent_name = 'cathode-cl-porosity'
    _python_name = 'cathode_cl_porosity'
    return_type = 'object'

class cathode_cl_kr(Real):
    """
    Cathode catalyst layer permibility.
    """
    _version = '241'
    fluent_name = 'cathode-cl-kr'
    _python_name = 'cathode_cl_kr'
    return_type = 'object'

class cathode_cl_zone(Group):
    """
    'cathode_cl_zone' child.
    """
    _version = '241'
    fluent_name = 'cathode-cl-zone'
    _python_name = 'cathode_cl_zone'
    child_names = ['cathode_cl_zone_list', 'cathode_cl_update', 'cathode_cl_material', 'cathode_cl_porosity', 'cathode_cl_kr']
    _child_classes = dict(
        cathode_cl_zone_list=cathode_cl_zone_list,
        cathode_cl_update=cathode_cl_update,
        cathode_cl_material=cathode_cl_material,
        cathode_cl_porosity=cathode_cl_porosity,
        cathode_cl_kr=cathode_cl_kr,
    )
    return_type = 'object'

class cathode_cl_svratio(Real):
    """
    Cathode catalyst layer surface volume ratio.
    """
    _version = '241'
    fluent_name = 'cathode-cl-svratio'
    _python_name = 'cathode_cl_svratio'
    return_type = 'object'

class cathode_cl_thickness(Real):
    """
    Cathode catalyst layer thickness.
    """
    _version = '241'
    fluent_name = 'cathode-cl-thickness'
    _python_name = 'cathode_cl_thickness'
    return_type = 'object'

class cathode_cl_cp_function(String, AllowedValuesMixin):
    """
    'cathode_cl_cp_function' child.
    """
    _version = '241'
    fluent_name = 'cathode-cl-cp-function'
    _python_name = 'cathode_cl_cp_function'
    return_type = 'object'

class cathode_cl_angle(Real):
    """
    Cathode catalyst layer contact angle.
    """
    _version = '241'
    fluent_name = 'cathode-cl-angle'
    _python_name = 'cathode_cl_angle'
    return_type = 'object'

class cathode_cl_a(Real):
    """
    Cathode catalyst layer Leverett function coefficient a.
    """
    _version = '241'
    fluent_name = 'cathode-cl-a'
    _python_name = 'cathode_cl_a'
    return_type = 'object'

class cathode_cl_b(Real):
    """
    Cathode catalyst layer Leverett function coefficient b.
    """
    _version = '241'
    fluent_name = 'cathode-cl-b'
    _python_name = 'cathode_cl_b'
    return_type = 'object'

class cathode_cl_c(Real):
    """
    Cathode catalyst layer Leverett function coefficient c.
    """
    _version = '241'
    fluent_name = 'cathode-cl-c'
    _python_name = 'cathode_cl_c'
    return_type = 'object'

class cathode(Group):
    """
    'cathode' child.
    """
    _version = '241'
    fluent_name = 'cathode'
    _python_name = 'cathode'
    child_names = ['cathode_cc_zone', 'cathode_fc_zone', 'cathode_pl_zone', 'cathode_pl_cp_function', 'cathode_pl_angle', 'cathode_pl_a', 'cathode_pl_b', 'cathode_pl_c', 'cathode_cl_zone', 'cathode_cl_svratio', 'cathode_cl_thickness', 'cathode_cl_cp_function', 'cathode_cl_angle', 'cathode_cl_a', 'cathode_cl_b', 'cathode_cl_c']
    _child_classes = dict(
        cathode_cc_zone=cathode_cc_zone,
        cathode_fc_zone=cathode_fc_zone,
        cathode_pl_zone=cathode_pl_zone,
        cathode_pl_cp_function=cathode_pl_cp_function,
        cathode_pl_angle=cathode_pl_angle,
        cathode_pl_a=cathode_pl_a,
        cathode_pl_b=cathode_pl_b,
        cathode_pl_c=cathode_pl_c,
        cathode_cl_zone=cathode_cl_zone,
        cathode_cl_svratio=cathode_cl_svratio,
        cathode_cl_thickness=cathode_cl_thickness,
        cathode_cl_cp_function=cathode_cl_cp_function,
        cathode_cl_angle=cathode_cl_angle,
        cathode_cl_a=cathode_cl_a,
        cathode_cl_b=cathode_cl_b,
        cathode_cl_c=cathode_cl_c,
    )
    return_type = 'object'

class anode_tab(StringList, AllowedValuesMixin):
    """
    Wall zone name list.
    """
    _version = '241'
    fluent_name = 'anode-tab'
    _python_name = 'anode_tab'
    return_type = 'object'

class cathode_tab(StringList, AllowedValuesMixin):
    """
    Wall zone name list.
    """
    _version = '241'
    fluent_name = 'cathode-tab'
    _python_name = 'cathode_tab'
    return_type = 'object'

class electrical_tab(Group):
    """
    'electrical_tab' child.
    """
    _version = '241'
    fluent_name = 'electrical-tab'
    _python_name = 'electrical_tab'
    child_names = ['anode_tab', 'cathode_tab']
    _child_classes = dict(
        anode_tab=anode_tab,
        cathode_tab=cathode_tab,
    )
    return_type = 'object'

class add_zone(Command):
    """
    'add_zone' command.
    """
    _version = '241'
    fluent_name = 'add-zone'
    _python_name = 'add_zone'
    argument_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_1,
        value=value_1,
    )
    return_type = 'object'

class list_zone(Command):
    """
    'list_zone' command.
    """
    _version = '241'
    fluent_name = 'list-zone'
    _python_name = 'list_zone'
    return_type = 'object'

class face_name(String, AllowedValuesMixin):
    """
    Pick ~a zone you want to delete.
    """
    _version = '241'
    fluent_name = 'face-name'
    _python_name = 'face_name'
    return_type = 'object'

class delete_zone(Command):
    """
    'delete_zone' command.
    """
    _version = '241'
    fluent_name = 'delete-zone'
    _python_name = 'delete_zone'
    argument_names = ['face_name']
    _child_classes = dict(
        face_name=face_name,
    )
    return_type = 'object'

class contact_resis_child(Group):
    """
    'child_object_type' of contact_resis.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'contact_resis_child'
    child_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_2,
        value=value_1,
    )
    return_type = 'object'

class contact_resis(ListObject[contact_resis_child]):
    """
    Contact Resistance Regions.
    """
    _version = '241'
    fluent_name = 'contact-resis'
    _python_name = 'contact_resis'
    command_names = ['list_properties', 'add_zone', 'list_zone', 'delete_zone']
    _child_classes = dict(
        list_properties=list_properties,
        add_zone=add_zone,
        list_zone=list_zone,
        delete_zone=delete_zone,
    )
    child_object_type = contact_resis_child
    return_type = 'object'

class advanced(Group):
    """
    'advanced' child.
    """
    _version = '241'
    fluent_name = 'advanced'
    _python_name = 'advanced'
    child_names = ['contact_resis']
    _child_classes = dict(
        contact_resis=contact_resis,
    )
    return_type = 'object'

class electrolysis(Group):
    """
    'electrolysis' child.
    """
    _version = '241'
    fluent_name = 'electrolysis'
    _python_name = 'electrolysis'
    child_names = ['options', 'parameters', 'anode', 'electrolyte', 'cathode', 'electrical_tab', 'advanced']
    _child_classes = dict(
        options=options_4,
        parameters=parameters_1,
        anode=anode,
        electrolyte=electrolyte,
        cathode=cathode,
        electrical_tab=electrical_tab,
        advanced=advanced,
    )
    return_type = 'object'

class echemistry(Group):
    """
    The potential/echemistry model settings.
    """
    _version = '241'
    fluent_name = 'echemistry'
    _python_name = 'echemistry'
    child_names = ['potential', 'joule_heating', 'li_battery_enabled', 'echemistry_enabled', 'lithium_battery', 'electrolysis']
    _child_classes = dict(
        potential=potential,
        joule_heating=joule_heating,
        li_battery_enabled=li_battery_enabled,
        echemistry_enabled=echemistry_enabled,
        lithium_battery=lithium_battery,
        electrolysis=electrolysis,
    )
    return_type = 'object'

class solution_method_1(Integer):
    """
    'solution_method' child.
    """
    _version = '241'
    fluent_name = 'solution-method'
    _python_name = 'solution_method'
    return_type = 'object'

class echem_model(Integer):
    """
    'echem_model' child.
    """
    _version = '241'
    fluent_name = 'echem-model'
    _python_name = 'echem_model'
    return_type = 'object'

class active_zone(StringList, AllowedValuesMixin):
    """
    Battery active zones.
    """
    _version = '241'
    fluent_name = 'active-zone'
    _python_name = 'active_zone'
    return_type = 'object'

class passive_zone(StringList, AllowedValuesMixin):
    """
    Passive zones.
    """
    _version = '241'
    fluent_name = 'passive-zone'
    _python_name = 'passive_zone'
    return_type = 'object'

class positive_tab(String, AllowedValuesMixin):
    """
    'positive_tab' child.
    """
    _version = '241'
    fluent_name = 'positive-tab'
    _python_name = 'positive_tab'
    return_type = 'object'

class negative_tab(String, AllowedValuesMixin):
    """
    'negative_tab' child.
    """
    _version = '241'
    fluent_name = 'negative-tab'
    _python_name = 'negative_tab'
    return_type = 'object'

class virtual_connection(Command):
    """
    'virtual_connection' command.
    """
    _version = '241'
    fluent_name = 'virtual-connection'
    _python_name = 'virtual_connection'
    argument_names = ['enabled', 'file_name']
    _child_classes = dict(
        enabled=enabled_12,
        file_name=file_name,
    )
    return_type = 'object'

class print_battery_connection(Command):
    """
    Print battery connection information.
    """
    _version = '241'
    fluent_name = 'print-battery-connection'
    _python_name = 'print_battery_connection'
    return_type = 'object'

class zone_assignment_1(Group):
    """
    'zone_assignment' child.
    """
    _version = '241'
    fluent_name = 'zone-assignment'
    _python_name = 'zone_assignment'
    child_names = ['active_zone', 'passive_zone', 'positive_tab', 'negative_tab']
    command_names = ['virtual_connection', 'print_battery_connection']
    _child_classes = dict(
        active_zone=active_zone,
        passive_zone=passive_zone,
        positive_tab=positive_tab,
        negative_tab=negative_tab,
        virtual_connection=virtual_connection,
        print_battery_connection=print_battery_connection,
    )
    return_type = 'object'

class contact_face(String, AllowedValuesMixin):
    """
    Contact face.
    """
    _version = '241'
    fluent_name = 'contact-face'
    _python_name = 'contact_face'
    return_type = 'object'

class resistance_value(Real):
    """
    Resistance value.
    """
    _version = '241'
    fluent_name = 'resistance-value'
    _python_name = 'resistance_value'
    return_type = 'object'

class add_contact_resistance(Command):
    """
    'add_contact_resistance' command.
    """
    _version = '241'
    fluent_name = 'add-contact-resistance'
    _python_name = 'add_contact_resistance'
    argument_names = ['contact_face', 'resistance_value']
    _child_classes = dict(
        contact_face=contact_face,
        resistance_value=resistance_value,
    )
    return_type = 'object'

class list_contact_face(Command):
    """
    'list_contact_face' command.
    """
    _version = '241'
    fluent_name = 'list-contact-face'
    _python_name = 'list_contact_face'
    return_type = 'object'

class face_name_1(String, AllowedValuesMixin):
    """
    Pick contact face you want to delete.
    """
    _version = '241'
    fluent_name = 'face-name'
    _python_name = 'face_name'
    return_type = 'object'

class delete_contact_face(Command):
    """
    'delete_contact_face' command.
    """
    _version = '241'
    fluent_name = 'delete-contact-face'
    _python_name = 'delete_contact_face'
    argument_names = ['face_name']
    _child_classes = dict(
        face_name=face_name_1,
    )
    return_type = 'object'

class contact_resistance(Group):
    """
    'contact_resistance' child.
    """
    _version = '241'
    fluent_name = 'contact-resistance'
    _python_name = 'contact_resistance'
    command_names = ['add_contact_resistance', 'list_contact_face', 'delete_contact_face']
    _child_classes = dict(
        add_contact_resistance=add_contact_resistance,
        list_contact_face=list_contact_face,
        delete_contact_face=delete_contact_face,
    )
    return_type = 'object'

class initial_dod(Real):
    """
    Initial DOD.
    """
    _version = '241'
    fluent_name = 'initial-dod'
    _python_name = 'initial_dod'
    return_type = 'object'

class ref_capacity(Real):
    """
    Ref. capacity.
    """
    _version = '241'
    fluent_name = 'ref-capacity'
    _python_name = 'ref_capacity'
    return_type = 'object'

class data_type(Integer):
    """
    Data type.
    """
    _version = '241'
    fluent_name = 'data-type'
    _python_name = 'data_type'
    return_type = 'object'

class poly_u_function(RealList):
    """
    List u value.
    """
    _version = '241'
    fluent_name = 'poly-u-function'
    _python_name = 'poly_u_function'
    return_type = 'object'

class poly_y_function(RealList):
    """
    List y value.
    """
    _version = '241'
    fluent_name = 'poly-y-function'
    _python_name = 'poly_y_function'
    return_type = 'object'

class poly_t_dependence(RealList):
    """
    List t value.
    """
    _version = '241'
    fluent_name = 'poly-t-dependence'
    _python_name = 'poly_t_dependence'
    return_type = 'object'

class row_number(Integer):
    """
    'row_number' child.
    """
    _version = '241'
    fluent_name = 'row-number'
    _python_name = 'row_number'
    return_type = 'object'

class column_number(Integer):
    """
    'column_number' child.
    """
    _version = '241'
    fluent_name = 'column-number'
    _python_name = 'column_number'
    return_type = 'object'

class row_value(RealList):
    """
    List row variable value.
    """
    _version = '241'
    fluent_name = 'row-value'
    _python_name = 'row_value'
    return_type = 'object'

class column_value(RealList):
    """
    List column variable value.
    """
    _version = '241'
    fluent_name = 'column-value'
    _python_name = 'column_value'
    return_type = 'object'

class table_value(RealList):
    """
    List table variable value.
    """
    _version = '241'
    fluent_name = 'table-value'
    _python_name = 'table_value'
    return_type = 'object'

class u_table(Group):
    """
    'u_table' child.
    """
    _version = '241'
    fluent_name = 'u-table'
    _python_name = 'u_table'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class y_table(Group):
    """
    'y_table' child.
    """
    _version = '241'
    fluent_name = 'y-table'
    _python_name = 'y_table'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class ntgk_model_settings(Group):
    """
    'ntgk_model_settings' child.
    """
    _version = '241'
    fluent_name = 'ntgk-model-settings'
    _python_name = 'ntgk_model_settings'
    child_names = ['initial_dod', 'ref_capacity', 'data_type', 'poly_u_function', 'poly_y_function', 'poly_t_dependence', 'u_table', 'y_table']
    _child_classes = dict(
        initial_dod=initial_dod,
        ref_capacity=ref_capacity,
        data_type=data_type,
        poly_u_function=poly_u_function,
        poly_y_function=poly_y_function,
        poly_t_dependence=poly_t_dependence,
        u_table=u_table,
        y_table=y_table,
    )
    return_type = 'object'

class initial_soc(Real):
    """
    Initial SOC.
    """
    _version = '241'
    fluent_name = 'initial-soc'
    _python_name = 'initial_soc'
    return_type = 'object'

class two_set_data(Boolean):
    """
    'two_set_data' child.
    """
    _version = '241'
    fluent_name = 'two-set-data'
    _python_name = 'two_set_data'
    return_type = 'object'

class chen_rs(RealList):
    """
    List rs value.
    """
    _version = '241'
    fluent_name = 'chen-rs'
    _python_name = 'chen_rs'
    return_type = 'object'

class chen_r1(RealList):
    """
    List r1 value.
    """
    _version = '241'
    fluent_name = 'chen-r1'
    _python_name = 'chen_r1'
    return_type = 'object'

class chen_c1(RealList):
    """
    List c1 value.
    """
    _version = '241'
    fluent_name = 'chen-c1'
    _python_name = 'chen_c1'
    return_type = 'object'

class chen_r2(RealList):
    """
    List r2 value.
    """
    _version = '241'
    fluent_name = 'chen-r2'
    _python_name = 'chen_r2'
    return_type = 'object'

class chen_c2(RealList):
    """
    List c2 value.
    """
    _version = '241'
    fluent_name = 'chen-c2'
    _python_name = 'chen_c2'
    return_type = 'object'

class chen_voc(RealList):
    """
    List voc value.
    """
    _version = '241'
    fluent_name = 'chen-voc'
    _python_name = 'chen_voc'
    return_type = 'object'

class chen_rs_c(RealList):
    """
    List rs-c  value.
    """
    _version = '241'
    fluent_name = 'chen-rs-c'
    _python_name = 'chen_rs_c'
    return_type = 'object'

class chen_r1_c(RealList):
    """
    List r1-c  value.
    """
    _version = '241'
    fluent_name = 'chen-r1-c'
    _python_name = 'chen_r1_c'
    return_type = 'object'

class chen_c1_c(RealList):
    """
    List c1-c  value.
    """
    _version = '241'
    fluent_name = 'chen-c1-c'
    _python_name = 'chen_c1_c'
    return_type = 'object'

class chen_r2_c(RealList):
    """
    List r2-c  value.
    """
    _version = '241'
    fluent_name = 'chen-r2-c'
    _python_name = 'chen_r2_c'
    return_type = 'object'

class chen_c2_c(RealList):
    """
    List c2-c value.
    """
    _version = '241'
    fluent_name = 'chen-c2-c'
    _python_name = 'chen_c2_c'
    return_type = 'object'

class chen_voc_c(RealList):
    """
    List voc-c  value.
    """
    _version = '241'
    fluent_name = 'chen-voc-c'
    _python_name = 'chen_voc_c'
    return_type = 'object'

class poly_rs(RealList):
    """
    List rs-poly value.
    """
    _version = '241'
    fluent_name = 'poly-rs'
    _python_name = 'poly_rs'
    return_type = 'object'

class poly_r1(RealList):
    """
    List r1-poly value.
    """
    _version = '241'
    fluent_name = 'poly-r1'
    _python_name = 'poly_r1'
    return_type = 'object'

class poly_c1(RealList):
    """
    List c1-poly value.
    """
    _version = '241'
    fluent_name = 'poly-c1'
    _python_name = 'poly_c1'
    return_type = 'object'

class poly_r2(RealList):
    """
    List r2-poly value.
    """
    _version = '241'
    fluent_name = 'poly-r2'
    _python_name = 'poly_r2'
    return_type = 'object'

class poly_c2(RealList):
    """
    List c2-poly value.
    """
    _version = '241'
    fluent_name = 'poly-c2'
    _python_name = 'poly_c2'
    return_type = 'object'

class poly_voc(RealList):
    """
    List voc-poly value.
    """
    _version = '241'
    fluent_name = 'poly-voc'
    _python_name = 'poly_voc'
    return_type = 'object'

class poly_rs_c(RealList):
    """
    List rs-poly-c  value.
    """
    _version = '241'
    fluent_name = 'poly-rs-c'
    _python_name = 'poly_rs_c'
    return_type = 'object'

class poly_r1_c(RealList):
    """
    List r1-poly-c  value.
    """
    _version = '241'
    fluent_name = 'poly-r1-c'
    _python_name = 'poly_r1_c'
    return_type = 'object'

class poly_c1_c(RealList):
    """
    List c1-poly-c  value.
    """
    _version = '241'
    fluent_name = 'poly-c1-c'
    _python_name = 'poly_c1_c'
    return_type = 'object'

class poly_r2_c(RealList):
    """
    List r2-poly-c  value.
    """
    _version = '241'
    fluent_name = 'poly-r2-c'
    _python_name = 'poly_r2_c'
    return_type = 'object'

class poly_c2_c(RealList):
    """
    List c2-poly-c value.
    """
    _version = '241'
    fluent_name = 'poly-c2-c'
    _python_name = 'poly_c2_c'
    return_type = 'object'

class poly_voc_c(RealList):
    """
    List voc-poly-c  value.
    """
    _version = '241'
    fluent_name = 'poly-voc-c'
    _python_name = 'poly_voc_c'
    return_type = 'object'

class table_rs(Group):
    """
    'table_rs' child.
    """
    _version = '241'
    fluent_name = 'table-rs'
    _python_name = 'table_rs'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_r1(Group):
    """
    'table_r1' child.
    """
    _version = '241'
    fluent_name = 'table-r1'
    _python_name = 'table_r1'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_c1(Group):
    """
    'table_c1' child.
    """
    _version = '241'
    fluent_name = 'table-c1'
    _python_name = 'table_c1'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_r2(Group):
    """
    'table_r2' child.
    """
    _version = '241'
    fluent_name = 'table-r2'
    _python_name = 'table_r2'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_c2(Group):
    """
    'table_c2' child.
    """
    _version = '241'
    fluent_name = 'table-c2'
    _python_name = 'table_c2'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_r3(Group):
    """
    'table_r3' child.
    """
    _version = '241'
    fluent_name = 'table-r3'
    _python_name = 'table_r3'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_c3(Group):
    """
    'table_c3' child.
    """
    _version = '241'
    fluent_name = 'table-c3'
    _python_name = 'table_c3'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_voc(Group):
    """
    'table_voc' child.
    """
    _version = '241'
    fluent_name = 'table-voc'
    _python_name = 'table_voc'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_rs_c(Group):
    """
    'table_rs_c' child.
    """
    _version = '241'
    fluent_name = 'table-rs-c'
    _python_name = 'table_rs_c'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_r1_c(Group):
    """
    'table_r1_c' child.
    """
    _version = '241'
    fluent_name = 'table-r1-c'
    _python_name = 'table_r1_c'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_c1_c(Group):
    """
    'table_c1_c' child.
    """
    _version = '241'
    fluent_name = 'table-c1-c'
    _python_name = 'table_c1_c'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_r2_c(Group):
    """
    'table_r2_c' child.
    """
    _version = '241'
    fluent_name = 'table-r2-c'
    _python_name = 'table_r2_c'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_c2_c(Group):
    """
    'table_c2_c' child.
    """
    _version = '241'
    fluent_name = 'table-c2-c'
    _python_name = 'table_c2_c'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_r3_c(Group):
    """
    'table_r3_c' child.
    """
    _version = '241'
    fluent_name = 'table-r3-c'
    _python_name = 'table_r3_c'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_c3_c(Group):
    """
    'table_c3_c' child.
    """
    _version = '241'
    fluent_name = 'table-c3-c'
    _python_name = 'table_c3_c'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_voc_c(Group):
    """
    'table_voc_c' child.
    """
    _version = '241'
    fluent_name = 'table-voc-c'
    _python_name = 'table_voc_c'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class ecm_model_settings(Group):
    """
    'ecm_model_settings' child.
    """
    _version = '241'
    fluent_name = 'ecm-model-settings'
    _python_name = 'ecm_model_settings'
    child_names = ['initial_soc', 'ref_capacity', 'two_set_data', 'data_type', 'chen_rs', 'chen_r1', 'chen_c1', 'chen_r2', 'chen_c2', 'chen_voc', 'chen_rs_c', 'chen_r1_c', 'chen_c1_c', 'chen_r2_c', 'chen_c2_c', 'chen_voc_c', 'poly_rs', 'poly_r1', 'poly_c1', 'poly_r2', 'poly_c2', 'poly_voc', 'poly_rs_c', 'poly_r1_c', 'poly_c1_c', 'poly_r2_c', 'poly_c2_c', 'poly_voc_c', 'table_rs', 'table_r1', 'table_c1', 'table_r2', 'table_c2', 'table_r3', 'table_c3', 'table_voc', 'table_rs_c', 'table_r1_c', 'table_c1_c', 'table_r2_c', 'table_c2_c', 'table_r3_c', 'table_c3_c', 'table_voc_c']
    _child_classes = dict(
        initial_soc=initial_soc,
        ref_capacity=ref_capacity,
        two_set_data=two_set_data,
        data_type=data_type,
        chen_rs=chen_rs,
        chen_r1=chen_r1,
        chen_c1=chen_c1,
        chen_r2=chen_r2,
        chen_c2=chen_c2,
        chen_voc=chen_voc,
        chen_rs_c=chen_rs_c,
        chen_r1_c=chen_r1_c,
        chen_c1_c=chen_c1_c,
        chen_r2_c=chen_r2_c,
        chen_c2_c=chen_c2_c,
        chen_voc_c=chen_voc_c,
        poly_rs=poly_rs,
        poly_r1=poly_r1,
        poly_c1=poly_c1,
        poly_r2=poly_r2,
        poly_c2=poly_c2,
        poly_voc=poly_voc,
        poly_rs_c=poly_rs_c,
        poly_r1_c=poly_r1_c,
        poly_c1_c=poly_c1_c,
        poly_r2_c=poly_r2_c,
        poly_c2_c=poly_c2_c,
        poly_voc_c=poly_voc_c,
        table_rs=table_rs,
        table_r1=table_r1,
        table_c1=table_c1,
        table_r2=table_r2,
        table_c2=table_c2,
        table_r3=table_r3,
        table_c3=table_c3,
        table_voc=table_voc,
        table_rs_c=table_rs_c,
        table_r1_c=table_r1_c,
        table_c1_c=table_c1_c,
        table_r2_c=table_r2_c,
        table_c2_c=table_c2_c,
        table_r3_c=table_r3_c,
        table_c3_c=table_c3_c,
        table_voc_c=table_voc_c,
    )
    return_type = 'object'

class anode_thickness(Real):
    """
    Negative electrode thickness (m).
    """
    _version = '241'
    fluent_name = 'anode-thickness'
    _python_name = 'anode_thickness'
    return_type = 'object'

class anode_n_grid(Integer):
    """
    Mumber of grid in negative electrode zone.
    """
    _version = '241'
    fluent_name = 'anode-n-grid'
    _python_name = 'anode_n_grid'
    return_type = 'object'

class anode_size_ratio(Real):
    """
    Grid ratio for Ln.
    """
    _version = '241'
    fluent_name = 'anode-size-ratio'
    _python_name = 'anode_size_ratio'
    return_type = 'object'

class anode_p_diameter(Real):
    """
    Particle diameter in negative Electrode (m).
    """
    _version = '241'
    fluent_name = 'anode-p-diameter'
    _python_name = 'anode_p_diameter'
    return_type = 'object'

class anode_n_sphere(Integer):
    """
    Mumber of grids across radius of particle at anode.
    """
    _version = '241'
    fluent_name = 'anode-n-sphere'
    _python_name = 'anode_n_sphere'
    return_type = 'object'

class anode_size_ratio_r(Real):
    """
    Grid ratio for rn.
    """
    _version = '241'
    fluent_name = 'anode-size-ratio-r'
    _python_name = 'anode_size_ratio_r'
    return_type = 'object'

class anode_cs_max(Real):
    """
    Max. Solid Li+ conc. (-).
    """
    _version = '241'
    fluent_name = 'anode-cs-max'
    _python_name = 'anode_cs_max'
    return_type = 'object'

class anode_stio_0(Real):
    """
    Stoi. at 0%(-).
    """
    _version = '241'
    fluent_name = 'anode-stio-0'
    _python_name = 'anode_stio_0'
    return_type = 'object'

class anode_stio_100(Real):
    """
    Stoi. at 100%(-).
    """
    _version = '241'
    fluent_name = 'anode-stio-100'
    _python_name = 'anode_stio_100'
    return_type = 'object'

class anode_ce_0(Real):
    """
    Electrolyte Li+ conc. (-).
    """
    _version = '241'
    fluent_name = 'anode-ce-0'
    _python_name = 'anode_ce_0'
    return_type = 'object'

class anode_vof(Real):
    """
    Volume fraction in negative electrode.
    """
    _version = '241'
    fluent_name = 'anode-vof'
    _python_name = 'anode_vof'
    return_type = 'object'

class anode_filler_f(Real):
    """
    Filler fraction in negative electrode.
    """
    _version = '241'
    fluent_name = 'anode-filler-f'
    _python_name = 'anode_filler_f'
    return_type = 'object'

class anode_ds(Group):
    """
    'anode_ds' child.
    """
    _version = '241'
    fluent_name = 'anode-ds'
    _python_name = 'anode_ds'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_1,
        user_defined=user_defined_1,
    )
    return_type = 'object'

class anode_ed(Real):
    """
    Activation energy for diff-.
    """
    _version = '241'
    fluent_name = 'anode-ed'
    _python_name = 'anode_ed'
    return_type = 'object'

class anode_brugg(Real):
    """
    Tortuosity of negative electrode.
    """
    _version = '241'
    fluent_name = 'anode-brugg'
    _python_name = 'anode_brugg'
    return_type = 'object'

class anode_sigma(Group):
    """
    'anode_sigma' child.
    """
    _version = '241'
    fluent_name = 'anode-sigma'
    _python_name = 'anode_sigma'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_1,
        user_defined=user_defined_1,
    )
    return_type = 'object'

class anode_i0_1(Real):
    """
    Ref. rate constant in nrgative electrode.
    """
    _version = '241'
    fluent_name = 'anode-i0'
    _python_name = 'anode_i0'
    return_type = 'object'

class anode_er(Real):
    """
    Activation energy for k-.
    """
    _version = '241'
    fluent_name = 'anode-er'
    _python_name = 'anode_er'
    return_type = 'object'

class anode_alpha_a_1(Real):
    """
    Ttrans. Coef. a-.
    """
    _version = '241'
    fluent_name = 'anode-alpha-a'
    _python_name = 'anode_alpha_a'
    return_type = 'object'

class anode_alpha_c_1(Real):
    """
    Ttrans. Coef. c-.
    """
    _version = '241'
    fluent_name = 'anode-alpha-c'
    _python_name = 'anode_alpha_c'
    return_type = 'object'

class cathode_thickness(Real):
    """
    Positive electrode thickness (m).
    """
    _version = '241'
    fluent_name = 'cathode-thickness'
    _python_name = 'cathode_thickness'
    return_type = 'object'

class cathode_n_grid(Integer):
    """
    Mumber of grid in positive electrode zone.
    """
    _version = '241'
    fluent_name = 'cathode-n-grid'
    _python_name = 'cathode_n_grid'
    return_type = 'object'

class cathode_size_ratio(Real):
    """
    Grid ratio for Lp.
    """
    _version = '241'
    fluent_name = 'cathode-size-ratio'
    _python_name = 'cathode_size_ratio'
    return_type = 'object'

class cathode_p_diameter(Real):
    """
    Particle diameter in positive Electrode (m).
    """
    _version = '241'
    fluent_name = 'cathode-p-diameter'
    _python_name = 'cathode_p_diameter'
    return_type = 'object'

class cathode_n_sphere(Integer):
    """
    Mumber of grids across radius of particle at cathode.
    """
    _version = '241'
    fluent_name = 'cathode-n-sphere'
    _python_name = 'cathode_n_sphere'
    return_type = 'object'

class cathode_size_ratio_r(Real):
    """
    Grid ratio for rp.
    """
    _version = '241'
    fluent_name = 'cathode-size-ratio-r'
    _python_name = 'cathode_size_ratio_r'
    return_type = 'object'

class cathode_cs_max(Real):
    """
    Max. Solid Li+ conc. (+).
    """
    _version = '241'
    fluent_name = 'cathode-cs-max'
    _python_name = 'cathode_cs_max'
    return_type = 'object'

class cathode_stio_0(Real):
    """
    Stoi. at 0%(+).
    """
    _version = '241'
    fluent_name = 'cathode-stio-0'
    _python_name = 'cathode_stio_0'
    return_type = 'object'

class cathode_stio_100(Real):
    """
    Stoi. at 100%(+).
    """
    _version = '241'
    fluent_name = 'cathode-stio-100'
    _python_name = 'cathode_stio_100'
    return_type = 'object'

class cathode_ce_0(Real):
    """
    Electrolyte Li+ conc. (+).
    """
    _version = '241'
    fluent_name = 'cathode-ce-0'
    _python_name = 'cathode_ce_0'
    return_type = 'object'

class cathode_vof(Real):
    """
    Volume fraction in positive electrode.
    """
    _version = '241'
    fluent_name = 'cathode-vof'
    _python_name = 'cathode_vof'
    return_type = 'object'

class cathode_filler_f(Real):
    """
    Filler fraction in positive electrode.
    """
    _version = '241'
    fluent_name = 'cathode-filler-f'
    _python_name = 'cathode_filler_f'
    return_type = 'object'

class cathode_ds(Group):
    """
    'cathode_ds' child.
    """
    _version = '241'
    fluent_name = 'cathode-ds'
    _python_name = 'cathode_ds'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_1,
        user_defined=user_defined_1,
    )
    return_type = 'object'

class cathode_ed(Real):
    """
    Activation energy for diff+.
    """
    _version = '241'
    fluent_name = 'cathode-ed'
    _python_name = 'cathode_ed'
    return_type = 'object'

class cathode_brugg(Real):
    """
    Tortuosity of positive electrode.
    """
    _version = '241'
    fluent_name = 'cathode-brugg'
    _python_name = 'cathode_brugg'
    return_type = 'object'

class cathode_sigma(Group):
    """
    'cathode_sigma' child.
    """
    _version = '241'
    fluent_name = 'cathode-sigma'
    _python_name = 'cathode_sigma'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_1,
        user_defined=user_defined_1,
    )
    return_type = 'object'

class cathode_i0_1(Real):
    """
    Ref. rate constant in positive electrode.
    """
    _version = '241'
    fluent_name = 'cathode-i0'
    _python_name = 'cathode_i0'
    return_type = 'object'

class cathode_er(Real):
    """
    Activation energy for k+.
    """
    _version = '241'
    fluent_name = 'cathode-er'
    _python_name = 'cathode_er'
    return_type = 'object'

class cathode_alpha_a_1(Real):
    """
    Ttrans. Coef. a+.
    """
    _version = '241'
    fluent_name = 'cathode-alpha-a'
    _python_name = 'cathode_alpha_a'
    return_type = 'object'

class cathode_alpha_c_1(Real):
    """
    Ttrans. Coef. c+.
    """
    _version = '241'
    fluent_name = 'cathode-alpha-c'
    _python_name = 'cathode_alpha_c'
    return_type = 'object'

class electrolyte_thickness(Real):
    """
    Separator thickness (m).
    """
    _version = '241'
    fluent_name = 'electrolyte-thickness'
    _python_name = 'electrolyte_thickness'
    return_type = 'object'

class electrolyte_n_grid(Integer):
    """
    Mumber of grid in separator zone.
    """
    _version = '241'
    fluent_name = 'electrolyte-n-grid'
    _python_name = 'electrolyte_n_grid'
    return_type = 'object'

class electrolyte_ce_0(Real):
    """
    Electrolyte Li+ conc. (s).
    """
    _version = '241'
    fluent_name = 'electrolyte-ce-0'
    _python_name = 'electrolyte_ce_0'
    return_type = 'object'

class electrolyte_vof(Real):
    """
    Volume fraction in separator.
    """
    _version = '241'
    fluent_name = 'electrolyte-vof'
    _python_name = 'electrolyte_vof'
    return_type = 'object'

class electrolyte_brugg(Real):
    """
    Tortuosity of separator.
    """
    _version = '241'
    fluent_name = 'electrolyte-brugg'
    _python_name = 'electrolyte_brugg'
    return_type = 'object'

class electrolyte_de(Group):
    """
    'electrolyte_de' child.
    """
    _version = '241'
    fluent_name = 'electrolyte-de'
    _python_name = 'electrolyte_de'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_1,
        user_defined=user_defined_1,
    )
    return_type = 'object'

class electrolyte_t_plus(Group):
    """
    'electrolyte_t_plus' child.
    """
    _version = '241'
    fluent_name = 'electrolyte-t-plus'
    _python_name = 'electrolyte_t_plus'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_1,
        user_defined=user_defined_1,
    )
    return_type = 'object'

class electrolyte_sigma(Group):
    """
    'electrolyte_sigma' child.
    """
    _version = '241'
    fluent_name = 'electrolyte-sigma'
    _python_name = 'electrolyte_sigma'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_1,
        user_defined=user_defined_1,
    )
    return_type = 'object'

class electrolyte_activity(Group):
    """
    'electrolyte_activity' child.
    """
    _version = '241'
    fluent_name = 'electrolyte-activity'
    _python_name = 'electrolyte_activity'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_1,
        user_defined=user_defined_1,
    )
    return_type = 'object'

class analytical_cs(Boolean):
    """
    'analytical_cs' child.
    """
    _version = '241'
    fluent_name = 'analytical-cs'
    _python_name = 'analytical_cs'
    return_type = 'object'

class analytical_cs_order(Integer):
    """
    Cs function order.
    """
    _version = '241'
    fluent_name = 'analytical-cs-order'
    _python_name = 'analytical_cs_order'
    return_type = 'object'

class aging_model_enabled(Boolean):
    """
    'aging_model_enabled' child.
    """
    _version = '241'
    fluent_name = 'aging-model-enabled'
    _python_name = 'aging_model_enabled'
    return_type = 'object'

class swelling_model_enabled(Boolean):
    """
    'swelling_model_enabled' child.
    """
    _version = '241'
    fluent_name = 'swelling-model-enabled'
    _python_name = 'swelling_model_enabled'
    return_type = 'object'

class omega_pe(Real):
    """
    Swell coefficient of positive electrode.
    """
    _version = '241'
    fluent_name = 'omega-pe'
    _python_name = 'omega_pe'
    return_type = 'object'

class omega_ne(Real):
    """
    Swell coefficient of negative electrode.
    """
    _version = '241'
    fluent_name = 'omega-ne'
    _python_name = 'omega_ne'
    return_type = 'object'

class e_elastic_pe(Real):
    """
    Young's modulus of positive electrode (Pa).
    """
    _version = '241'
    fluent_name = 'e-elastic-pe'
    _python_name = 'e_elastic_pe'
    return_type = 'object'

class e_elastic_sp(Real):
    """
    Young's modulus of separator (Pa).
    """
    _version = '241'
    fluent_name = 'e-elastic-sp'
    _python_name = 'e_elastic_sp'
    return_type = 'object'

class e_elastic_ne(Real):
    """
    Young's modulus of negative electrode (Pa).
    """
    _version = '241'
    fluent_name = 'e-elastic-ne'
    _python_name = 'e_elastic_ne'
    return_type = 'object'

class soc_ref(Real):
    """
    Neutral swell state of charge.
    """
    _version = '241'
    fluent_name = 'soc-ref'
    _python_name = 'soc_ref'
    return_type = 'object'

class cell_type(Integer):
    """
    Cell type.
    """
    _version = '241'
    fluent_name = 'cell-type'
    _python_name = 'cell_type'
    return_type = 'object'

class axis_vec(RealList):
    """
    'axis_vec' child.
    """
    _version = '241'
    fluent_name = 'axis-vec'
    _python_name = 'axis_vec'
    return_type = 'object'

class normal_vec(RealList):
    """
    'normal_vec' child.
    """
    _version = '241'
    fluent_name = 'normal-vec'
    _python_name = 'normal_vec'
    return_type = 'object'

class prism_axis_vec(RealList):
    """
    'prism_axis_vec' child.
    """
    _version = '241'
    fluent_name = 'prism-axis-vec'
    _python_name = 'prism_axis_vec'
    return_type = 'object'

class prism_vec2(RealList):
    """
    'prism_vec2' child.
    """
    _version = '241'
    fluent_name = 'prism-vec2'
    _python_name = 'prism_vec2'
    return_type = 'object'

class udf_name(String, AllowedValuesMixin):
    """
    'udf_name' child.
    """
    _version = '241'
    fluent_name = 'udf-name'
    _python_name = 'udf_name'
    return_type = 'object'

class swelling_model_parameter(Group):
    """
    'swelling_model_parameter' child.
    """
    _version = '241'
    fluent_name = 'swelling-model-parameter'
    _python_name = 'swelling_model_parameter'
    child_names = ['omega_pe', 'omega_ne', 'e_elastic_pe', 'e_elastic_sp', 'e_elastic_ne', 'soc_ref', 'cell_type', 'axis_vec', 'normal_vec', 'prism_axis_vec', 'prism_vec2', 'udf_name']
    _child_classes = dict(
        omega_pe=omega_pe,
        omega_ne=omega_ne,
        e_elastic_pe=e_elastic_pe,
        e_elastic_sp=e_elastic_sp,
        e_elastic_ne=e_elastic_ne,
        soc_ref=soc_ref,
        cell_type=cell_type,
        axis_vec=axis_vec,
        normal_vec=normal_vec,
        prism_axis_vec=prism_axis_vec,
        prism_vec2=prism_vec2,
        udf_name=udf_name,
    )
    return_type = 'object'

class p2d_model_settings(Group):
    """
    'p2d_model_settings' child.
    """
    _version = '241'
    fluent_name = 'p2d-model-settings'
    _python_name = 'p2d_model_settings'
    child_names = ['initial_soc', 'ref_capacity', 'anode_thickness', 'anode_n_grid', 'anode_size_ratio', 'anode_p_diameter', 'anode_n_sphere', 'anode_size_ratio_r', 'anode_cs_max', 'anode_stio_0', 'anode_stio_100', 'anode_ce_0', 'anode_vof', 'anode_filler_f', 'anode_ds', 'anode_ed', 'anode_brugg', 'anode_sigma', 'anode_i0', 'anode_er', 'anode_alpha_a', 'anode_alpha_c', 'anode_ocv', 'cathode_thickness', 'cathode_n_grid', 'cathode_size_ratio', 'cathode_p_diameter', 'cathode_n_sphere', 'cathode_size_ratio_r', 'cathode_cs_max', 'cathode_stio_0', 'cathode_stio_100', 'cathode_ce_0', 'cathode_vof', 'cathode_filler_f', 'cathode_ds', 'cathode_ed', 'cathode_brugg', 'cathode_sigma', 'cathode_i0', 'cathode_er', 'cathode_alpha_a', 'cathode_alpha_c', 'cathode_ocv', 'electrolyte_thickness', 'electrolyte_n_grid', 'electrolyte_ce_0', 'electrolyte_vof', 'electrolyte_brugg', 'electrolyte_de', 'electrolyte_t_plus', 'electrolyte_sigma', 'electrolyte_activity', 'analytical_cs', 'analytical_cs_order', 'aging_model_enabled', 'swelling_model_enabled', 'swelling_model_parameter']
    _child_classes = dict(
        initial_soc=initial_soc,
        ref_capacity=ref_capacity,
        anode_thickness=anode_thickness,
        anode_n_grid=anode_n_grid,
        anode_size_ratio=anode_size_ratio,
        anode_p_diameter=anode_p_diameter,
        anode_n_sphere=anode_n_sphere,
        anode_size_ratio_r=anode_size_ratio_r,
        anode_cs_max=anode_cs_max,
        anode_stio_0=anode_stio_0,
        anode_stio_100=anode_stio_100,
        anode_ce_0=anode_ce_0,
        anode_vof=anode_vof,
        anode_filler_f=anode_filler_f,
        anode_ds=anode_ds,
        anode_ed=anode_ed,
        anode_brugg=anode_brugg,
        anode_sigma=anode_sigma,
        anode_i0=anode_i0_1,
        anode_er=anode_er,
        anode_alpha_a=anode_alpha_a_1,
        anode_alpha_c=anode_alpha_c_1,
        anode_ocv=anode_ocv,
        cathode_thickness=cathode_thickness,
        cathode_n_grid=cathode_n_grid,
        cathode_size_ratio=cathode_size_ratio,
        cathode_p_diameter=cathode_p_diameter,
        cathode_n_sphere=cathode_n_sphere,
        cathode_size_ratio_r=cathode_size_ratio_r,
        cathode_cs_max=cathode_cs_max,
        cathode_stio_0=cathode_stio_0,
        cathode_stio_100=cathode_stio_100,
        cathode_ce_0=cathode_ce_0,
        cathode_vof=cathode_vof,
        cathode_filler_f=cathode_filler_f,
        cathode_ds=cathode_ds,
        cathode_ed=cathode_ed,
        cathode_brugg=cathode_brugg,
        cathode_sigma=cathode_sigma,
        cathode_i0=cathode_i0_1,
        cathode_er=cathode_er,
        cathode_alpha_a=cathode_alpha_a_1,
        cathode_alpha_c=cathode_alpha_c_1,
        cathode_ocv=cathode_ocv,
        electrolyte_thickness=electrolyte_thickness,
        electrolyte_n_grid=electrolyte_n_grid,
        electrolyte_ce_0=electrolyte_ce_0,
        electrolyte_vof=electrolyte_vof,
        electrolyte_brugg=electrolyte_brugg,
        electrolyte_de=electrolyte_de,
        electrolyte_t_plus=electrolyte_t_plus,
        electrolyte_sigma=electrolyte_sigma,
        electrolyte_activity=electrolyte_activity,
        analytical_cs=analytical_cs,
        analytical_cs_order=analytical_cs_order,
        aging_model_enabled=aging_model_enabled,
        swelling_model_enabled=swelling_model_enabled,
        swelling_model_parameter=swelling_model_parameter,
    )
    return_type = 'object'

class eload_type(Integer):
    """
    Eload type.
    """
    _version = '241'
    fluent_name = 'eload-type'
    _python_name = 'eload_type'
    return_type = 'object'

class crate_value(Real):
    """
    System c-rate type.
    """
    _version = '241'
    fluent_name = 'crate-value'
    _python_name = 'crate_value'
    return_type = 'object'

class current_value(Real):
    """
    System current type.
    """
    _version = '241'
    fluent_name = 'current-value'
    _python_name = 'current_value'
    return_type = 'object'

class voltage_value(Real):
    """
    System voltage type.
    """
    _version = '241'
    fluent_name = 'voltage-value'
    _python_name = 'voltage_value'
    return_type = 'object'

class power_value(Real):
    """
    System power type.
    """
    _version = '241'
    fluent_name = 'power-value'
    _python_name = 'power_value'
    return_type = 'object'

class external_resistance(Real):
    """
    System resistance type.
    """
    _version = '241'
    fluent_name = 'external-resistance'
    _python_name = 'external_resistance'
    return_type = 'object'

class profile_type(Integer):
    """
    Eload profile type.
    """
    _version = '241'
    fluent_name = 'profile-type'
    _python_name = 'profile_type'
    return_type = 'object'

class profile_file(String):
    """
    Profile file name.
    """
    _version = '241'
    fluent_name = 'profile-file'
    _python_name = 'profile_file'
    return_type = 'object'

class udf_profile_name(String, AllowedValuesMixin):
    """
    'udf_profile_name' child.
    """
    _version = '241'
    fluent_name = 'udf-profile-name'
    _python_name = 'udf_profile_name'
    return_type = 'object'

class eload_condition(Group):
    """
    'eload_condition' child.
    """
    _version = '241'
    fluent_name = 'eload-condition'
    _python_name = 'eload_condition'
    child_names = ['eload_type', 'crate_value', 'current_value', 'voltage_value', 'power_value', 'external_resistance', 'profile_type', 'profile_file', 'udf_profile_name']
    _child_classes = dict(
        eload_type=eload_type,
        crate_value=crate_value,
        current_value=current_value,
        voltage_value=voltage_value,
        power_value=power_value,
        external_resistance=external_resistance,
        profile_type=profile_type,
        profile_file=profile_file,
        udf_profile_name=udf_profile_name,
    )
    return_type = 'object'

class echem_stop_type(Integer):
    """
    Echem stop type.
    """
    _version = '241'
    fluent_name = 'echem-stop-type'
    _python_name = 'echem_stop_type'
    return_type = 'object'

class min_voltage(Real):
    """
    Min stop voltage.
    """
    _version = '241'
    fluent_name = 'min-voltage'
    _python_name = 'min_voltage'
    return_type = 'object'

class max_voltage(Real):
    """
    Max stop voltage.
    """
    _version = '241'
    fluent_name = 'max-voltage'
    _python_name = 'max_voltage'
    return_type = 'object'

class min_soc(Real):
    """
    Min stop soc.
    """
    _version = '241'
    fluent_name = 'min-soc'
    _python_name = 'min_soc'
    return_type = 'object'

class max_soc(Real):
    """
    Max stop soc.
    """
    _version = '241'
    fluent_name = 'max-soc'
    _python_name = 'max_soc'
    return_type = 'object'

class echem_stop_criterion(Group):
    """
    'echem_stop_criterion' child.
    """
    _version = '241'
    fluent_name = 'echem-stop-criterion'
    _python_name = 'echem_stop_criterion'
    child_names = ['echem_stop_type', 'min_voltage', 'max_voltage', 'min_soc', 'max_soc']
    _child_classes = dict(
        echem_stop_type=echem_stop_type,
        min_voltage=min_voltage,
        max_voltage=max_voltage,
        min_soc=min_soc,
        max_soc=max_soc,
    )
    return_type = 'object'

class clustering_type(Integer):
    """
    Clustering type.
    """
    _version = '241'
    fluent_name = 'clustering-type'
    _python_name = 'clustering_type'
    return_type = 'object'

class nx(Integer):
    """
    'nx' child.
    """
    _version = '241'
    fluent_name = 'nx'
    _python_name = 'nx'
    return_type = 'object'

class ny(Integer):
    """
    'ny' child.
    """
    _version = '241'
    fluent_name = 'ny'
    _python_name = 'ny'
    return_type = 'object'

class nz(Integer):
    """
    'nz' child.
    """
    _version = '241'
    fluent_name = 'nz'
    _python_name = 'nz'
    return_type = 'object'

class cluster_number(Integer):
    """
    'cluster_number' child.
    """
    _version = '241'
    fluent_name = 'cluster-number'
    _python_name = 'cluster_number'
    return_type = 'object'

class target_variable(String, AllowedValuesMixin):
    """
    'target_variable' child.
    """
    _version = '241'
    fluent_name = 'target-variable'
    _python_name = 'target_variable'
    return_type = 'object'

class cell_clustering(Group):
    """
    'cell_clustering' child.
    """
    _version = '241'
    fluent_name = 'cell-clustering'
    _python_name = 'cell_clustering'
    child_names = ['enabled', 'clustering_type', 'nx', 'ny', 'nz', 'cluster_number', 'target_variable', 'udf_name']
    _child_classes = dict(
        enabled=enabled_12,
        clustering_type=clustering_type,
        nx=nx,
        ny=ny,
        nz=nz,
        cluster_number=cluster_number,
        target_variable=target_variable,
        udf_name=udf_name,
    )
    return_type = 'object'

class joule_heat_in_passive_zone(Boolean):
    """
    'joule_heat_in_passive_zone' child.
    """
    _version = '241'
    fluent_name = 'joule-heat-in-passive-zone'
    _python_name = 'joule_heat_in_passive_zone'
    return_type = 'object'

class echem_heat_enabled(Boolean):
    """
    'echem_heat_enabled' child.
    """
    _version = '241'
    fluent_name = 'echem-heat-enabled'
    _python_name = 'echem_heat_enabled'
    return_type = 'object'

class entropic_heat_enabled(Boolean):
    """
    'entropic_heat_enabled' child.
    """
    _version = '241'
    fluent_name = 'entropic-heat-enabled'
    _python_name = 'entropic_heat_enabled'
    return_type = 'object'

class data_type_1(Boolean):
    """
    'data_type' child.
    """
    _version = '241'
    fluent_name = 'data-type'
    _python_name = 'data_type'
    return_type = 'object'

class two_tables(Boolean):
    """
    'two_tables' child.
    """
    _version = '241'
    fluent_name = 'two-tables'
    _python_name = 'two_tables'
    return_type = 'object'

class table_discharge(Group):
    """
    'table_discharge' child.
    """
    _version = '241'
    fluent_name = 'table-discharge'
    _python_name = 'table_discharge'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class table_charge(Group):
    """
    'table_charge' child.
    """
    _version = '241'
    fluent_name = 'table-charge'
    _python_name = 'table_charge'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class entropic_heat(Group):
    """
    'entropic_heat' child.
    """
    _version = '241'
    fluent_name = 'entropic-heat'
    _python_name = 'entropic_heat'
    child_names = ['entropic_heat_enabled', 'data_type', 'two_tables', 'table_discharge', 'table_charge', 'udf_name']
    _child_classes = dict(
        entropic_heat_enabled=entropic_heat_enabled,
        data_type=data_type_1,
        two_tables=two_tables,
        table_discharge=table_discharge,
        table_charge=table_charge,
        udf_name=udf_name,
    )
    return_type = 'object'

class current_urf(Real):
    """
    Exchange current under-relaxation factor.
    """
    _version = '241'
    fluent_name = 'current-urf'
    _python_name = 'current_urf'
    return_type = 'object'

class voltage_correction_urf(Real):
    """
    Voltage correction under-relaxation factor.
    """
    _version = '241'
    fluent_name = 'voltage-correction-urf'
    _python_name = 'voltage_correction_urf'
    return_type = 'object'

class solution_option(Group):
    """
    'solution_option' child.
    """
    _version = '241'
    fluent_name = 'solution-option'
    _python_name = 'solution_option'
    child_names = ['joule_heat_in_passive_zone', 'echem_heat_enabled', 'entropic_heat', 'current_urf', 'voltage_correction_urf']
    _child_classes = dict(
        joule_heat_in_passive_zone=joule_heat_in_passive_zone,
        echem_heat_enabled=echem_heat_enabled,
        entropic_heat=entropic_heat,
        current_urf=current_urf,
        voltage_correction_urf=voltage_correction_urf,
    )
    return_type = 'object'

class calendar_time(Real):
    """
    Calendar time.
    """
    _version = '241'
    fluent_name = 'calendar-time'
    _python_name = 'calendar_time'
    return_type = 'object'

class cycle_number(Real):
    """
    Cycle number.
    """
    _version = '241'
    fluent_name = 'cycle-number'
    _python_name = 'cycle_number'
    return_type = 'object'

class operation_temperature(Real):
    """
    Operation-temperature.
    """
    _version = '241'
    fluent_name = 'operation-temperature'
    _python_name = 'operation_temperature'
    return_type = 'object'

class ref_temperature(Real):
    """
    Ref. temperature.
    """
    _version = '241'
    fluent_name = 'ref-temperature'
    _python_name = 'ref_temperature'
    return_type = 'object'

class pre_exp_fac(Real):
    """
    Pre-exp-fac.
    """
    _version = '241'
    fluent_name = 'pre-exp-fac'
    _python_name = 'pre_exp_fac'
    return_type = 'object'

class activation_e(Real):
    """
    Activation energy.
    """
    _version = '241'
    fluent_name = 'activation-e'
    _python_name = 'activation_e'
    return_type = 'object'

class exponent_value(Real):
    """
    Exponent value.
    """
    _version = '241'
    fluent_name = 'exponent-value'
    _python_name = 'exponent_value'
    return_type = 'object'

class calendar_life_params(Group):
    """
    'calendar_life_params' child.
    """
    _version = '241'
    fluent_name = 'calendar-life-params'
    _python_name = 'calendar_life_params'
    child_names = ['ref_temperature', 'pre_exp_fac', 'activation_e', 'exponent_value']
    _child_classes = dict(
        ref_temperature=ref_temperature,
        pre_exp_fac=pre_exp_fac,
        activation_e=activation_e,
        exponent_value=exponent_value,
    )
    return_type = 'object'

class cycle_life_table(Group):
    """
    'cycle_life_table' child.
    """
    _version = '241'
    fluent_name = 'cycle-life-table'
    _python_name = 'cycle_life_table'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class life_model(Group):
    """
    'life_model' child.
    """
    _version = '241'
    fluent_name = 'life-model'
    _python_name = 'life_model'
    child_names = ['enabled', 'calendar_time', 'cycle_number', 'operation_temperature', 'calendar_life_params', 'cycle_life_table']
    _child_classes = dict(
        enabled=enabled_12,
        calendar_time=calendar_time,
        cycle_number=cycle_number,
        operation_temperature=operation_temperature,
        calendar_life_params=calendar_life_params,
        cycle_life_table=cycle_life_table,
    )
    return_type = 'object'

class orientation_udf_name(String, AllowedValuesMixin):
    """
    'orientation_udf_name' child.
    """
    _version = '241'
    fluent_name = 'orientation-udf-name'
    _python_name = 'orientation_udf_name'
    return_type = 'object'

class customize_swelling_strain(Boolean):
    """
    'customize_swelling_strain' child.
    """
    _version = '241'
    fluent_name = 'customize-swelling-strain'
    _python_name = 'customize_swelling_strain'
    return_type = 'object'

class strain_udf_name(String, AllowedValuesMixin):
    """
    'strain_udf_name' child.
    """
    _version = '241'
    fluent_name = 'strain-udf-name'
    _python_name = 'strain_udf_name'
    return_type = 'object'

class swelling_model(Group):
    """
    'swelling_model' child.
    """
    _version = '241'
    fluent_name = 'swelling-model'
    _python_name = 'swelling_model'
    child_names = ['enabled', 'soc_ref', 'cell_type', 'axis_vec', 'normal_vec', 'prism_axis_vec', 'prism_vec2', 'orientation_udf_name', 'customize_swelling_strain', 'strain_udf_name']
    _child_classes = dict(
        enabled=enabled_12,
        soc_ref=soc_ref,
        cell_type=cell_type,
        axis_vec=axis_vec,
        normal_vec=normal_vec,
        prism_axis_vec=prism_axis_vec,
        prism_vec2=prism_vec2,
        orientation_udf_name=orientation_udf_name,
        customize_swelling_strain=customize_swelling_strain,
        strain_udf_name=strain_udf_name,
    )
    return_type = 'object'

class model_type(Integer):
    """
    Abuse model type.
    """
    _version = '241'
    fluent_name = 'model-type'
    _python_name = 'model_type'
    return_type = 'object'

class only_abuse(Boolean):
    """
    'only_abuse' child.
    """
    _version = '241'
    fluent_name = 'only-abuse'
    _python_name = 'only_abuse'
    return_type = 'object'

class hw(Real):
    """
    Hw value.
    """
    _version = '241'
    fluent_name = 'hw'
    _python_name = 'hw'
    return_type = 'object'

class a(Real):
    """
    A value.
    """
    _version = '241'
    fluent_name = 'a'
    _python_name = 'a'
    return_type = 'object'

class e(Real):
    """
    E value.
    """
    _version = '241'
    fluent_name = 'e'
    _python_name = 'e'
    return_type = 'object'

class m(Real):
    """
    M value.
    """
    _version = '241'
    fluent_name = 'm'
    _python_name = 'm'
    return_type = 'object'

class n(Real):
    """
    N value.
    """
    _version = '241'
    fluent_name = 'n'
    _python_name = 'n'
    return_type = 'object'

class alpha0(Real):
    """
    Alpha0 value.
    """
    _version = '241'
    fluent_name = 'alpha0'
    _python_name = 'alpha0'
    return_type = 'object'

class rate_table(Group):
    """
    'rate_table' child.
    """
    _version = '241'
    fluent_name = 'rate-table'
    _python_name = 'rate_table'
    child_names = ['row_number', 'column_number', 'row_value', 'column_value', 'table_value']
    _child_classes = dict(
        row_number=row_number,
        column_number=column_number,
        row_value=row_value,
        column_value=column_value,
        table_value=table_value,
    )
    return_type = 'object'

class hw_table(Real):
    """
    Hw value.
    """
    _version = '241'
    fluent_name = 'hw-table'
    _python_name = 'hw_table'
    return_type = 'object'

class hw_udf(Real):
    """
    Hw value.
    """
    _version = '241'
    fluent_name = 'hw-udf'
    _python_name = 'hw_udf'
    return_type = 'object'

class one_equation(Group):
    """
    'one_equation' child.
    """
    _version = '241'
    fluent_name = 'one-equation'
    _python_name = 'one_equation'
    child_names = ['data_type', 'hw', 'a', 'e', 'm', 'n', 'alpha0', 'rate_table', 'hw_table', 'hw_udf', 'udf_name']
    _child_classes = dict(
        data_type=data_type,
        hw=hw,
        a=a,
        e=e,
        m=m,
        n=n,
        alpha0=alpha0,
        rate_table=rate_table,
        hw_table=hw_table,
        hw_udf=hw_udf,
        udf_name=udf_name,
    )
    return_type = 'object'

class a_sei(Real):
    """
    A-sei value.
    """
    _version = '241'
    fluent_name = 'a-sei'
    _python_name = 'a_sei'
    return_type = 'object'

class e_sei(Real):
    """
    E-sei value.
    """
    _version = '241'
    fluent_name = 'e-sei'
    _python_name = 'e_sei'
    return_type = 'object'

class m_sei(Real):
    """
    M-sei value.
    """
    _version = '241'
    fluent_name = 'm-sei'
    _python_name = 'm_sei'
    return_type = 'object'

class h_sei(Real):
    """
    H-sei value.
    """
    _version = '241'
    fluent_name = 'h-sei'
    _python_name = 'h_sei'
    return_type = 'object'

class w_sei(Real):
    """
    W-sei value.
    """
    _version = '241'
    fluent_name = 'w-sei'
    _python_name = 'w_sei'
    return_type = 'object'

class sei0(Real):
    """
    W-sei value.
    """
    _version = '241'
    fluent_name = 'sei0'
    _python_name = 'sei0'
    return_type = 'object'

class a_ne(Real):
    """
    A-ne value.
    """
    _version = '241'
    fluent_name = 'a-ne'
    _python_name = 'a_ne'
    return_type = 'object'

class e_ne(Real):
    """
    E-ne value.
    """
    _version = '241'
    fluent_name = 'e-ne'
    _python_name = 'e_ne'
    return_type = 'object'

class m_ne(Real):
    """
    M-ne value.
    """
    _version = '241'
    fluent_name = 'm-ne'
    _python_name = 'm_ne'
    return_type = 'object'

class h_ne(Real):
    """
    H-ne value.
    """
    _version = '241'
    fluent_name = 'h-ne'
    _python_name = 'h_ne'
    return_type = 'object'

class w_ne(Real):
    """
    W-ne value.
    """
    _version = '241'
    fluent_name = 'w-ne'
    _python_name = 'w_ne'
    return_type = 'object'

class ne0(Real):
    """
    Ne0 value.
    """
    _version = '241'
    fluent_name = 'ne0'
    _python_name = 'ne0'
    return_type = 'object'

class ne_tsei_ref(Real):
    """
    Ne-tsei-ref value.
    """
    _version = '241'
    fluent_name = 'ne-tsei-ref'
    _python_name = 'ne_tsei_ref'
    return_type = 'object'

class ne_tsei0(Real):
    """
    Ne-tsei0 value.
    """
    _version = '241'
    fluent_name = 'ne-tsei0'
    _python_name = 'ne_tsei0'
    return_type = 'object'

class a_pe(Real):
    """
    A-pe value.
    """
    _version = '241'
    fluent_name = 'a-pe'
    _python_name = 'a_pe'
    return_type = 'object'

class e_pe(Real):
    """
    E-pe value.
    """
    _version = '241'
    fluent_name = 'e-pe'
    _python_name = 'e_pe'
    return_type = 'object'

class m1_pe(Real):
    """
    M1-pe value.
    """
    _version = '241'
    fluent_name = 'm1-pe'
    _python_name = 'm1_pe'
    return_type = 'object'

class m2_pe(Real):
    """
    M2-pe value.
    """
    _version = '241'
    fluent_name = 'm2-pe'
    _python_name = 'm2_pe'
    return_type = 'object'

class h_pe(Real):
    """
    H-pe value.
    """
    _version = '241'
    fluent_name = 'h-pe'
    _python_name = 'h_pe'
    return_type = 'object'

class w_pe(Real):
    """
    W-pe value.
    """
    _version = '241'
    fluent_name = 'w-pe'
    _python_name = 'w_pe'
    return_type = 'object'

class pe0(Real):
    """
    Pe0 value.
    """
    _version = '241'
    fluent_name = 'pe0'
    _python_name = 'pe0'
    return_type = 'object'

class a_e(Real):
    """
    A-e value.
    """
    _version = '241'
    fluent_name = 'a-e'
    _python_name = 'a_e'
    return_type = 'object'

class e_e(Real):
    """
    E-e value.
    """
    _version = '241'
    fluent_name = 'e-e'
    _python_name = 'e_e'
    return_type = 'object'

class m_e(Real):
    """
    M-e value.
    """
    _version = '241'
    fluent_name = 'm-e'
    _python_name = 'm_e'
    return_type = 'object'

class h_e(Real):
    """
    H-e value.
    """
    _version = '241'
    fluent_name = 'h-e'
    _python_name = 'h_e'
    return_type = 'object'

class w_e(Real):
    """
    W-e value.
    """
    _version = '241'
    fluent_name = 'w-e'
    _python_name = 'w_e'
    return_type = 'object'

class e0(Real):
    """
    E0 value.
    """
    _version = '241'
    fluent_name = 'e0'
    _python_name = 'e0'
    return_type = 'object'

class four_equation(Group):
    """
    'four_equation' child.
    """
    _version = '241'
    fluent_name = 'four-equation'
    _python_name = 'four_equation'
    child_names = ['a_sei', 'e_sei', 'm_sei', 'h_sei', 'w_sei', 'sei0', 'a_ne', 'e_ne', 'm_ne', 'h_ne', 'w_ne', 'ne0', 'ne_tsei_ref', 'ne_tsei0', 'a_pe', 'e_pe', 'm1_pe', 'm2_pe', 'h_pe', 'w_pe', 'pe0', 'a_e', 'e_e', 'm_e', 'h_e', 'w_e', 'e0']
    _child_classes = dict(
        a_sei=a_sei,
        e_sei=e_sei,
        m_sei=m_sei,
        h_sei=h_sei,
        w_sei=w_sei,
        sei0=sei0,
        a_ne=a_ne,
        e_ne=e_ne,
        m_ne=m_ne,
        h_ne=h_ne,
        w_ne=w_ne,
        ne0=ne0,
        ne_tsei_ref=ne_tsei_ref,
        ne_tsei0=ne_tsei0,
        a_pe=a_pe,
        e_pe=e_pe,
        m1_pe=m1_pe,
        m2_pe=m2_pe,
        h_pe=h_pe,
        w_pe=w_pe,
        pe0=pe0,
        a_e=a_e,
        e_e=e_e,
        m_e=m_e,
        h_e=h_e,
        w_e=w_e,
        e0=e0,
    )
    return_type = 'object'

class h(Real):
    """
    H value.
    """
    _version = '241'
    fluent_name = 'h'
    _python_name = 'h'
    return_type = 'object'

class trigger_t(Real):
    """
    Trigger temperature value.
    """
    _version = '241'
    fluent_name = 'trigger-t'
    _python_name = 'trigger_t'
    return_type = 'object'

class internal_short(Group):
    """
    'internal_short' child.
    """
    _version = '241'
    fluent_name = 'internal-short'
    _python_name = 'internal_short'
    child_names = ['enabled', 'h', 'a', 'e', 'trigger_t', 'e0']
    _child_classes = dict(
        enabled=enabled_12,
        h=h,
        a=a,
        e=e,
        trigger_t=trigger_t,
        e0=e0,
    )
    return_type = 'object'

class thermal_abuse_model(Group):
    """
    'thermal_abuse_model' child.
    """
    _version = '241'
    fluent_name = 'thermal-abuse-model'
    _python_name = 'thermal_abuse_model'
    child_names = ['enabled', 'model_type', 'only_abuse', 'one_equation', 'four_equation', 'internal_short']
    _child_classes = dict(
        enabled=enabled_12,
        model_type=model_type,
        only_abuse=only_abuse,
        one_equation=one_equation,
        four_equation=four_equation,
        internal_short=internal_short,
    )
    return_type = 'object'

class module_case_file(String):
    """
    'module_case_file' child.
    """
    _version = '241'
    fluent_name = 'module-case-file'
    _python_name = 'module_case_file'
    return_type = 'object'

class cold_plate_file(String):
    """
    'cold_plate_file' child.
    """
    _version = '241'
    fluent_name = 'cold-plate-file'
    _python_name = 'cold_plate_file'
    return_type = 'object'

class read_location_file(String):
    """
    'read_location_file' child.
    """
    _version = '241'
    fluent_name = 'read-location-file'
    _python_name = 'read_location_file'
    return_type = 'object'

class nci_face_list(StringList, AllowedValuesMixin):
    """
    Non-conformal interface list.
    """
    _version = '241'
    fluent_name = 'nci-face-list'
    _python_name = 'nci_face_list'
    return_type = 'object'

class construct_battery_pack(Command):
    """
    Construct battery pack.
    """
    _version = '241'
    fluent_name = 'construct-battery-pack'
    _python_name = 'construct_battery_pack'
    return_type = 'object'

class nci_pair_creation(Command):
    """
    Non-conformal Interface Matching.
    """
    _version = '241'
    fluent_name = 'nci-pair-creation'
    _python_name = 'nci_pair_creation'
    return_type = 'object'

class pack_builder(Group):
    """
    'pack_builder' child.
    """
    _version = '241'
    fluent_name = 'pack-builder'
    _python_name = 'pack_builder'
    child_names = ['module_case_file', 'cold_plate_file', 'read_location_file', 'nci_face_list']
    command_names = ['construct_battery_pack', 'nci_pair_creation']
    _child_classes = dict(
        module_case_file=module_case_file,
        cold_plate_file=cold_plate_file,
        read_location_file=read_location_file,
        nci_face_list=nci_face_list,
        construct_battery_pack=construct_battery_pack,
        nci_pair_creation=nci_pair_creation,
    )
    return_type = 'object'

class rom_type(Integer):
    """
    'rom_type' child.
    """
    _version = '241'
    fluent_name = 'rom-type'
    _python_name = 'rom_type'
    return_type = 'object'

class value_2(Real):
    """
    Electric tab current.
    """
    _version = '241'
    fluent_name = 'value'
    _python_name = 'value'
    return_type = 'object'

class joule_heat_parameter(Group):
    """
    'joule_heat_parameter' child.
    """
    _version = '241'
    fluent_name = 'joule-heat-parameter'
    _python_name = 'joule_heat_parameter'
    child_names = ['enabled', 'value']
    _child_classes = dict(
        enabled=enabled_12,
        value=value_2,
    )
    return_type = 'object'

class time_stepping_method(Integer):
    """
    'time_stepping_method' child.
    """
    _version = '241'
    fluent_name = 'time-stepping-method'
    _python_name = 'time_stepping_method'
    return_type = 'object'

class max_time(Real):
    """
    'max_time' child.
    """
    _version = '241'
    fluent_name = 'max-time'
    _python_name = 'max_time'
    return_type = 'object'

class dt_0(Real):
    """
    'dt_0' child.
    """
    _version = '241'
    fluent_name = 'dt-0'
    _python_name = 'dt_0'
    return_type = 'object'

class dt_max(Real):
    """
    'dt_max' child.
    """
    _version = '241'
    fluent_name = 'dt-max'
    _python_name = 'dt_max'
    return_type = 'object'

class increment_factor(Real):
    """
    'increment_factor' child.
    """
    _version = '241'
    fluent_name = 'increment-factor'
    _python_name = 'increment_factor'
    return_type = 'object'

class n_time_step_per_setting(Integer):
    """
    'n_time_step_per_setting' child.
    """
    _version = '241'
    fluent_name = 'n-time-step-per-setting'
    _python_name = 'n_time_step_per_setting'
    return_type = 'object'

class max_n_per_time_step(Integer):
    """
    'max_n_per_time_step' child.
    """
    _version = '241'
    fluent_name = 'max-n-per-time-step'
    _python_name = 'max_n_per_time_step'
    return_type = 'object'

class stop_range_fraction(Real):
    """
    'stop_range_fraction' child.
    """
    _version = '241'
    fluent_name = 'stop-range-fraction'
    _python_name = 'stop_range_fraction'
    return_type = 'object'

class transient_setup(Group):
    """
    'transient_setup' child.
    """
    _version = '241'
    fluent_name = 'transient-setup'
    _python_name = 'transient_setup'
    child_names = ['time_stepping_method', 'max_time', 'dt_0', 'dt_max', 'increment_factor', 'n_time_step_per_setting', 'max_n_per_time_step', 'file_name', 'stop_range_fraction']
    _child_classes = dict(
        time_stepping_method=time_stepping_method,
        max_time=max_time,
        dt_0=dt_0,
        dt_max=dt_max,
        increment_factor=increment_factor,
        n_time_step_per_setting=n_time_step_per_setting,
        max_n_per_time_step=max_n_per_time_step,
        file_name=file_name,
        stop_range_fraction=stop_range_fraction,
    )
    return_type = 'object'

class volume_heat_run(Integer):
    """
    'volume_heat_run' child.
    """
    _version = '241'
    fluent_name = 'volume-heat-run'
    _python_name = 'volume_heat_run'
    return_type = 'object'

class face_heat_run(Integer):
    """
    'face_heat_run' child.
    """
    _version = '241'
    fluent_name = 'face-heat-run'
    _python_name = 'face_heat_run'
    return_type = 'object'

class face_temperature_run(Integer):
    """
    'face_temperature_run' child.
    """
    _version = '241'
    fluent_name = 'face-temperature-run'
    _python_name = 'face_temperature_run'
    return_type = 'object'

class joule_heat_run(Integer):
    """
    'joule_heat_run' child.
    """
    _version = '241'
    fluent_name = 'joule-heat-run'
    _python_name = 'joule_heat_run'
    return_type = 'object'

class file_saving_frequency(Group):
    """
    'file_saving_frequency' child.
    """
    _version = '241'
    fluent_name = 'file-saving-frequency'
    _python_name = 'file_saving_frequency'
    child_names = ['volume_heat_run', 'face_heat_run', 'face_temperature_run', 'joule_heat_run']
    _child_classes = dict(
        volume_heat_run=volume_heat_run,
        face_heat_run=face_heat_run,
        face_temperature_run=face_temperature_run,
        joule_heat_run=joule_heat_run,
    )
    return_type = 'object'

class lti_folder_name(String):
    """
    'lti_folder_name' child.
    """
    _version = '241'
    fluent_name = 'lti-folder-name'
    _python_name = 'lti_folder_name'
    return_type = 'object'

class user_config(Boolean):
    """
    'user_config' child.
    """
    _version = '241'
    fluent_name = 'user-config'
    _python_name = 'user_config'
    return_type = 'object'

class min_order(Integer):
    """
    State space model min order.
    """
    _version = '241'
    fluent_name = 'min-order'
    _python_name = 'min_order'
    return_type = 'object'

class max_order(Integer):
    """
    State space model min order.
    """
    _version = '241'
    fluent_name = 'max-order'
    _python_name = 'max_order'
    return_type = 'object'

class rel_error(Real):
    """
    Target relatove error.
    """
    _version = '241'
    fluent_name = 'rel-error'
    _python_name = 'rel_error'
    return_type = 'object'

class tolerance_0th_order(Real):
    """
    Tolerance for 0-th order.
    """
    _version = '241'
    fluent_name = 'tolerance-0th-order'
    _python_name = 'tolerance_0th_order'
    return_type = 'object'

class slope_method(Integer):
    """
    Slope specification metho.
    """
    _version = '241'
    fluent_name = 'slope-method'
    _python_name = 'slope_method'
    return_type = 'object'

class run_rom_generation(Command):
    """
    Non-conformal Interface Matching.
    """
    _version = '241'
    fluent_name = 'run-rom-generation'
    _python_name = 'run_rom_generation'
    return_type = 'object'

class lti_rom_generation(Group):
    """
    'lti_rom_generation' child.
    """
    _version = '241'
    fluent_name = 'lti-rom-generation'
    _python_name = 'lti_rom_generation'
    child_names = ['lti_folder_name', 'user_config', 'min_order', 'max_order', 'rel_error', 'tolerance_0th_order', 'slope_method']
    command_names = ['run_rom_generation']
    _child_classes = dict(
        lti_folder_name=lti_folder_name,
        user_config=user_config,
        min_order=min_order,
        max_order=max_order,
        rel_error=rel_error,
        tolerance_0th_order=tolerance_0th_order,
        slope_method=slope_method,
        run_rom_generation=run_rom_generation,
    )
    return_type = 'object'

class parameter_type(Integer):
    """
    'parameter_type' child.
    """
    _version = '241'
    fluent_name = 'parameter-type'
    _python_name = 'parameter_type'
    return_type = 'object'

class entity_list(StringList, AllowedValuesMixin):
    """
    'entity_list' child.
    """
    _version = '241'
    fluent_name = 'entity-list'
    _python_name = 'entity_list'
    return_type = 'object'

class individual_or_group(Boolean):
    """
    'individual_or_group' child.
    """
    _version = '241'
    fluent_name = 'individual-or-group'
    _python_name = 'individual_or_group'
    return_type = 'object'

class individual_value(Boolean):
    """
    'individual_value' child.
    """
    _version = '241'
    fluent_name = 'individual-value'
    _python_name = 'individual_value'
    return_type = 'object'

class group_value(Real):
    """
    'group_value' child.
    """
    _version = '241'
    fluent_name = 'group-value'
    _python_name = 'group_value'
    return_type = 'object'

class value_list(RealList):
    """
    'value_list' child.
    """
    _version = '241'
    fluent_name = 'value-list'
    _python_name = 'value_list'
    return_type = 'object'

class add_rom_parameter(Command):
    """
    'add_rom_parameter' command.
    """
    _version = '241'
    fluent_name = 'add-rom-parameter'
    _python_name = 'add_rom_parameter'
    argument_names = ['parameter_type', 'entity_list', 'individual_or_group', 'individual_value', 'group_value', 'value_list']
    _child_classes = dict(
        parameter_type=parameter_type,
        entity_list=entity_list,
        individual_or_group=individual_or_group,
        individual_value=individual_value,
        group_value=group_value,
        value_list=value_list,
    )
    return_type = 'object'

class rom_data_creator(Command):
    """
    Non-conformal Interface Matching.
    """
    _version = '241'
    fluent_name = 'rom-data-creator'
    _python_name = 'rom_data_creator'
    return_type = 'object'

class list_rom_parameter(Command):
    """
    Print all ROM-related paramters.
    """
    _version = '241'
    fluent_name = 'list-rom-parameter'
    _python_name = 'list_rom_parameter'
    return_type = 'object'

class parameter_names(StringList, AllowedValuesMixin):
    """
    Deleted parameter lists.
    """
    _version = '241'
    fluent_name = 'parameter-names'
    _python_name = 'parameter_names'
    return_type = 'object'

class delete_rom_parameter(Command):
    """
    Delete ROM-related paramters.
    
    Parameters
    ----------
        parameter_names : List
            Deleted parameter lists.
    """
    _version = '241'
    fluent_name = 'delete-rom-parameter'
    _python_name = 'delete_rom_parameter'
    argument_names = ['parameter_names']
    _child_classes = dict(
        parameter_names=parameter_names,
    )
    return_type = 'object'

class rom_tool_kit(Group):
    """
    'rom_tool_kit' child.
    """
    _version = '241'
    fluent_name = 'rom-tool-kit'
    _python_name = 'rom_tool_kit'
    child_names = ['rom_type', 'joule_heat_parameter', 'transient_setup', 'file_saving_frequency', 'lti_rom_generation']
    command_names = ['add_rom_parameter', 'rom_data_creator', 'list_rom_parameter', 'delete_rom_parameter']
    _child_classes = dict(
        rom_type=rom_type,
        joule_heat_parameter=joule_heat_parameter,
        transient_setup=transient_setup,
        file_saving_frequency=file_saving_frequency,
        lti_rom_generation=lti_rom_generation,
        add_rom_parameter=add_rom_parameter,
        rom_data_creator=rom_data_creator,
        list_rom_parameter=list_rom_parameter,
        delete_rom_parameter=delete_rom_parameter,
    )
    return_type = 'object'

class value_input(RealList):
    """
    List voc-poly-c  value.
    """
    _version = '241'
    fluent_name = 'value-input'
    _python_name = 'value_input'
    return_type = 'object'

class orthotropic_k(Group):
    """
    'orthotropic_k' child.
    """
    _version = '241'
    fluent_name = 'orthotropic-k'
    _python_name = 'orthotropic_k'
    child_names = ['enabled', 'value_input']
    _child_classes = dict(
        enabled=enabled_12,
        value_input=value_input,
    )
    return_type = 'object'

class ntgk_model_parameter(String, AllowedValuesMixin):
    """
    'ntgk_model_parameter' child.
    """
    _version = '241'
    fluent_name = 'ntgk-model-parameter'
    _python_name = 'ntgk_model_parameter'
    return_type = 'object'

class ecm_model_parameter(String, AllowedValuesMixin):
    """
    'ecm_model_parameter' child.
    """
    _version = '241'
    fluent_name = 'ecm-model-parameter'
    _python_name = 'ecm_model_parameter'
    return_type = 'object'

class user_defined_echem_model(String, AllowedValuesMixin):
    """
    'user_defined_echem_model' child.
    """
    _version = '241'
    fluent_name = 'user-defined-echem-model'
    _python_name = 'user_defined_echem_model'
    return_type = 'object'

class p2d_bv_rate(String, AllowedValuesMixin):
    """
    'p2d_bv_rate' child.
    """
    _version = '241'
    fluent_name = 'p2d-bv-rate'
    _python_name = 'p2d_bv_rate'
    return_type = 'object'

class p2d_postprocessing(String, AllowedValuesMixin):
    """
    'p2d_postprocessing' child.
    """
    _version = '241'
    fluent_name = 'p2d-postprocessing'
    _python_name = 'p2d_postprocessing'
    return_type = 'object'

class p2d_porosity_p(String, AllowedValuesMixin):
    """
    'p2d_porosity_p' child.
    """
    _version = '241'
    fluent_name = 'p2d-porosity-p'
    _python_name = 'p2d_porosity_p'
    return_type = 'object'

class p2d_porosity_n(String, AllowedValuesMixin):
    """
    'p2d_porosity_n' child.
    """
    _version = '241'
    fluent_name = 'p2d-porosity-n'
    _python_name = 'p2d_porosity_n'
    return_type = 'object'

class udf_hooks(Group):
    """
    'udf_hooks' child.
    """
    _version = '241'
    fluent_name = 'udf-hooks'
    _python_name = 'udf_hooks'
    child_names = ['ntgk_model_parameter', 'ecm_model_parameter', 'user_defined_echem_model', 'p2d_bv_rate', 'p2d_postprocessing', 'p2d_porosity_p', 'p2d_porosity_n']
    _child_classes = dict(
        ntgk_model_parameter=ntgk_model_parameter,
        ecm_model_parameter=ecm_model_parameter,
        user_defined_echem_model=user_defined_echem_model,
        p2d_bv_rate=p2d_bv_rate,
        p2d_postprocessing=p2d_postprocessing,
        p2d_porosity_p=p2d_porosity_p,
        p2d_porosity_n=p2d_porosity_n,
    )
    return_type = 'object'

class parameter_estimation_tool(Command):
    """
    'parameter_estimation_tool' command.
    """
    _version = '241'
    fluent_name = 'parameter-estimation-tool'
    _python_name = 'parameter_estimation_tool'
    return_type = 'object'

class standalone_echem_model(Command):
    """
    'standalone_echem_model' command.
    """
    _version = '241'
    fluent_name = 'standalone-echem-model'
    _python_name = 'standalone_echem_model'
    return_type = 'object'

class battery(Group):
    """
    'battery' child.
    """
    _version = '241'
    fluent_name = 'battery'
    _python_name = 'battery'
    child_names = ['enabled', 'solution_method', 'echem_model', 'zone_assignment', 'contact_resistance', 'ntgk_model_settings', 'ecm_model_settings', 'p2d_model_settings', 'eload_condition', 'echem_stop_criterion', 'cell_clustering', 'solution_option', 'life_model', 'swelling_model', 'thermal_abuse_model', 'pack_builder', 'rom_tool_kit', 'orthotropic_k', 'udf_hooks']
    command_names = ['parameter_estimation_tool', 'standalone_echem_model']
    _child_classes = dict(
        enabled=enabled_12,
        solution_method=solution_method_1,
        echem_model=echem_model,
        zone_assignment=zone_assignment_1,
        contact_resistance=contact_resistance,
        ntgk_model_settings=ntgk_model_settings,
        ecm_model_settings=ecm_model_settings,
        p2d_model_settings=p2d_model_settings,
        eload_condition=eload_condition,
        echem_stop_criterion=echem_stop_criterion,
        cell_clustering=cell_clustering,
        solution_option=solution_option,
        life_model=life_model,
        swelling_model=swelling_model,
        thermal_abuse_model=thermal_abuse_model,
        pack_builder=pack_builder,
        rom_tool_kit=rom_tool_kit,
        orthotropic_k=orthotropic_k,
        udf_hooks=udf_hooks,
        parameter_estimation_tool=parameter_estimation_tool,
        standalone_echem_model=standalone_echem_model,
    )
    return_type = 'object'

class calculation_method(String, AllowedValuesMixin):
    """
    'calculation_method' child.
    """
    _version = '241'
    fluent_name = 'calculation-method'
    _python_name = 'calculation_method'
    return_type = 'object'

class htc(Group):
    """
    The heat transfer coeficient object.
    """
    _version = '241'
    fluent_name = 'htc'
    _python_name = 'htc'
    child_names = ['calculation_method']
    _child_classes = dict(
        calculation_method=calculation_method,
    )
    return_type = 'object'

class enable_sub_stepping(Boolean):
    """
    Enable or Disable sub stepping options for each coupling  steps.
    """
    _version = '241'
    fluent_name = 'enable-sub-stepping?'
    _python_name = 'enable_sub_stepping'
    return_type = 'object'

class num_sub_stepping_coupling_itr(Integer):
    """
    The number of substeps for each coupling iterations (default = 1).
    """
    _version = '241'
    fluent_name = 'num-sub-stepping-coupling-itr'
    _python_name = 'num_sub_stepping_coupling_itr'
    return_type = 'object'

class sc_enable_sub_stepping_option_per_coupling_step(Command):
    """
    Enable/disable sub stepping option per coupling step.
    
    Parameters
    ----------
        enable_sub_stepping : bool
            Enable or Disable sub stepping options for each coupling  steps.
        num_sub_stepping_coupling_itr : int
            The number of substeps for each coupling iterations (default = 1).
    """
    _version = '241'
    fluent_name = 'sc-enable-sub-stepping-option-per-coupling-step'
    _python_name = 'sc_enable_sub_stepping_option_per_coupling_step'
    argument_names = ['enable_sub_stepping', 'num_sub_stepping_coupling_itr']
    _child_classes = dict(
        enable_sub_stepping=enable_sub_stepping,
        num_sub_stepping_coupling_itr=num_sub_stepping_coupling_itr,
    )
    return_type = 'object'

class unsteady_statistics(Group):
    """
    The unsteady statistics object.
    """
    _version = '241'
    fluent_name = 'unsteady-statistics'
    _python_name = 'unsteady_statistics'
    command_names = ['sc_enable_sub_stepping_option_per_coupling_step']
    _child_classes = dict(
        sc_enable_sub_stepping_option_per_coupling_step=sc_enable_sub_stepping_option_per_coupling_step,
    )
    return_type = 'object'

class udm_index(Integer):
    """
    'udm_index' child.
    """
    _version = '241'
    fluent_name = 'udm-index'
    _python_name = 'udm_index'
    return_type = 'object'

class zone_names_6(StringList, AllowedValuesMixin):
    """
    'zone_names' child.
    """
    _version = '241'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'
    return_type = 'object'

class extensive(Boolean):
    """
    'extensive' child.
    """
    _version = '241'
    fluent_name = 'extensive?'
    _python_name = 'extensive'
    return_type = 'object'

class input(Boolean):
    """
    'input' child.
    """
    _version = '241'
    fluent_name = 'input?'
    _python_name = 'input'
    return_type = 'object'

class output_1(Boolean):
    """
    'output' child.
    """
    _version = '241'
    fluent_name = 'output?'
    _python_name = 'output'
    return_type = 'object'

class output_variable_name(String):
    """
    'output_variable_name' child.
    """
    _version = '241'
    fluent_name = 'output-variable-name'
    _python_name = 'output_variable_name'
    return_type = 'object'

class input_variable_name(String):
    """
    'input_variable_name' child.
    """
    _version = '241'
    fluent_name = 'input-variable-name'
    _python_name = 'input_variable_name'
    return_type = 'object'

class user_defined_coupling_variables_via_udm_child(Group):
    """
    'child_object_type' of user_defined_coupling_variables_via_udm.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'user_defined_coupling_variables_via_udm_child'
    child_names = ['udm_index', 'zone_names', 'extensive', 'input', 'output', 'output_variable_name', 'input_variable_name']
    _child_classes = dict(
        udm_index=udm_index,
        zone_names=zone_names_6,
        extensive=extensive,
        input=input,
        output=output_1,
        output_variable_name=output_variable_name,
        input_variable_name=input_variable_name,
    )
    return_type = 'object'

class user_defined_coupling_variables_via_udm(ListObject[user_defined_coupling_variables_via_udm_child]):
    """
    'user_defined_coupling_variables_via_udm' child.
    """
    _version = '241'
    fluent_name = 'user-defined-coupling-variables-via-udm'
    _python_name = 'user_defined_coupling_variables_via_udm'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = user_defined_coupling_variables_via_udm_child
    return_type = 'object'

class use_face_or_element_based_data_transfer(Boolean):
    """
    Enable/disable face based data transfer.
    """
    _version = '241'
    fluent_name = 'use-face-or-element-based-data-transfer?'
    _python_name = 'use_face_or_element_based_data_transfer'
    return_type = 'object'

class write_scp_file(Command):
    """
    Write fluent input scp file for sc.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'write-scp-file'
    _python_name = 'write_scp_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class schost(String):
    """
    Sc solver host input.
    """
    _version = '241'
    fluent_name = 'schost'
    _python_name = 'schost'
    return_type = 'object'

class scport(Integer):
    """
    Sc solver port input.
    """
    _version = '241'
    fluent_name = 'scport'
    _python_name = 'scport'
    return_type = 'object'

class scname(String):
    """
    Sc solver name input.
    """
    _version = '241'
    fluent_name = 'scname'
    _python_name = 'scname'
    return_type = 'object'

class connect_parallel(Command):
    """
    System coupling connection status.
    
    Parameters
    ----------
        schost : str
            Sc solver host input.
        scport : int
            Sc solver port input.
        scname : str
            Sc solver name input.
    """
    _version = '241'
    fluent_name = 'connect-parallel'
    _python_name = 'connect_parallel'
    argument_names = ['schost', 'scport', 'scname']
    _child_classes = dict(
        schost=schost,
        scport=scport,
        scname=scname,
    )
    return_type = 'object'

class init_and_solve(Command):
    """
    System-coupling-solve-init-command.
    """
    _version = '241'
    fluent_name = 'init-and-solve'
    _python_name = 'init_and_solve'
    return_type = 'object'

class solve(Command):
    """
    System-coupling-solve-command.
    """
    _version = '241'
    fluent_name = 'solve'
    _python_name = 'solve'
    return_type = 'object'

class system_coupling(Group):
    """
    The system coupling model object.
    """
    _version = '241'
    fluent_name = 'system-coupling'
    _python_name = 'system_coupling'
    child_names = ['htc', 'unsteady_statistics', 'user_defined_coupling_variables_via_udm', 'use_face_or_element_based_data_transfer']
    command_names = ['write_scp_file', 'connect_parallel', 'init_and_solve', 'solve']
    _child_classes = dict(
        htc=htc,
        unsteady_statistics=unsteady_statistics,
        user_defined_coupling_variables_via_udm=user_defined_coupling_variables_via_udm,
        use_face_or_element_based_data_transfer=use_face_or_element_based_data_transfer,
        write_scp_file=write_scp_file,
        connect_parallel=connect_parallel,
        init_and_solve=init_and_solve,
        solve=solve,
    )
    return_type = 'object'

class enabled_13(Boolean):
    """
    Enable SOFC Model.
    """
    _version = '241'
    fluent_name = 'enabled'
    _python_name = 'enabled'
    return_type = 'object'

class anode_alpha_a_2(Real):
    """
    Anode Anodic Transfer Coefficient.
    """
    _version = '241'
    fluent_name = 'anode-alpha-a'
    _python_name = 'anode_alpha_a'
    return_type = 'object'

class anode_alpha_b(Real):
    """
    Anode Cathodic Transfer Coefficient.
    """
    _version = '241'
    fluent_name = 'anode-alpha-b'
    _python_name = 'anode_alpha_b'
    return_type = 'object'

class cathode_alpha_a_2(Real):
    """
    Cathode Anodic Transfer Coefficient.
    """
    _version = '241'
    fluent_name = 'cathode-alpha-a'
    _python_name = 'cathode_alpha_a'
    return_type = 'object'

class cathode_alpha_b(Real):
    """
    Cathode Cathodic Transfer Coefficient.
    """
    _version = '241'
    fluent_name = 'cathode-alpha-b'
    _python_name = 'cathode_alpha_b'
    return_type = 'object'

class molef_ref_h2(Real):
    """
    H2 Reference Value.
    """
    _version = '241'
    fluent_name = 'molef-ref-h2'
    _python_name = 'molef_ref_h2'
    return_type = 'object'

class molef_ref_o2(Real):
    """
    O2 Reference Value.
    """
    _version = '241'
    fluent_name = 'molef-ref-o2'
    _python_name = 'molef_ref_o2'
    return_type = 'object'

class molef_ref_h2o(Real):
    """
    H2O Reference Value.
    """
    _version = '241'
    fluent_name = 'molef-ref-h2o'
    _python_name = 'molef_ref_h2o'
    return_type = 'object'

class exponent_h2(Real):
    """
    H2 Exponent.
    """
    _version = '241'
    fluent_name = 'exponent-h2'
    _python_name = 'exponent_h2'
    return_type = 'object'

class exponent_o2(Real):
    """
    O2 Exponent.
    """
    _version = '241'
    fluent_name = 'exponent-o2'
    _python_name = 'exponent_o2'
    return_type = 'object'

class exponent_h2o(Real):
    """
    H2O Exponent.
    """
    _version = '241'
    fluent_name = 'exponent-h2o'
    _python_name = 'exponent_h2o'
    return_type = 'object'

class temp_depend_anode_i0(Boolean):
    """
    Enable Anode Temperature Dependent I_0.
    """
    _version = '241'
    fluent_name = 'temp-depend-anode-i0'
    _python_name = 'temp_depend_anode_i0'
    return_type = 'object'

class temp_depend_cathode_i0(Boolean):
    """
    Enable Cathode Temperature Dependent I_0.
    """
    _version = '241'
    fluent_name = 'temp-depend-cathode-i0'
    _python_name = 'temp_depend_cathode_i0'
    return_type = 'object'

class anode_i0_2(Real):
    """
    Anode Exchange Current Density (A/m2).
    """
    _version = '241'
    fluent_name = 'anode-i0'
    _python_name = 'anode_i0'
    return_type = 'object'

class cathode_i0_2(Real):
    """
    Cathode Exchange Current Density (A/m2).
    """
    _version = '241'
    fluent_name = 'cathode-i0'
    _python_name = 'cathode_i0'
    return_type = 'object'

class a_anode_i0(Real):
    """
    Temperature Dependent Coefficient A (Anode).
    """
    _version = '241'
    fluent_name = 'a-anode-i0'
    _python_name = 'a_anode_i0'
    return_type = 'object'

class b_anode_i0(Real):
    """
    Temperature Dependent Coefficient B (Anode).
    """
    _version = '241'
    fluent_name = 'b-anode-i0'
    _python_name = 'b_anode_i0'
    return_type = 'object'

class a_cathode_i0(Real):
    """
    Temperature Dependent Coefficient A (Cathode).
    """
    _version = '241'
    fluent_name = 'a-cathode-i0'
    _python_name = 'a_cathode_i0'
    return_type = 'object'

class b_cathode_i0(Real):
    """
    Temperature Dependent Coefficient B (Cathode).
    """
    _version = '241'
    fluent_name = 'b-cathode-i0'
    _python_name = 'b_cathode_i0'
    return_type = 'object'

class electrochemistry(Group):
    """
    Electrochemistry.
    """
    _version = '241'
    fluent_name = 'electrochemistry'
    _python_name = 'electrochemistry'
    child_names = ['anode_alpha_a', 'anode_alpha_b', 'cathode_alpha_a', 'cathode_alpha_b', 'molef_ref_h2', 'molef_ref_o2', 'molef_ref_h2o', 'exponent_h2', 'exponent_o2', 'exponent_h2o', 'temp_depend_anode_i0', 'temp_depend_cathode_i0', 'anode_i0', 'cathode_i0', 'a_anode_i0', 'b_anode_i0', 'a_cathode_i0', 'b_cathode_i0']
    _child_classes = dict(
        anode_alpha_a=anode_alpha_a_2,
        anode_alpha_b=anode_alpha_b,
        cathode_alpha_a=cathode_alpha_a_2,
        cathode_alpha_b=cathode_alpha_b,
        molef_ref_h2=molef_ref_h2,
        molef_ref_o2=molef_ref_o2,
        molef_ref_h2o=molef_ref_h2o,
        exponent_h2=exponent_h2,
        exponent_o2=exponent_o2,
        exponent_h2o=exponent_h2o,
        temp_depend_anode_i0=temp_depend_anode_i0,
        temp_depend_cathode_i0=temp_depend_cathode_i0,
        anode_i0=anode_i0_2,
        cathode_i0=cathode_i0_2,
        a_anode_i0=a_anode_i0,
        b_anode_i0=b_anode_i0,
        a_cathode_i0=a_cathode_i0,
        b_cathode_i0=b_cathode_i0,
    )
    return_type = 'object'

class electrolyte_submodel_enabled(Boolean):
    """
    Enable Electrolyte Conductivity Submodel.
    """
    _version = '241'
    fluent_name = 'electrolyte-submodel-enabled'
    _python_name = 'electrolyte_submodel_enabled'
    return_type = 'object'

class vol_energy_enabled(Boolean):
    """
    Enable Volumetric Energy Source.
    """
    _version = '241'
    fluent_name = 'vol-energy-enabled'
    _python_name = 'vol_energy_enabled'
    return_type = 'object'

class surf_energy_enabled(Boolean):
    """
    Enable Surface Energy Source.
    """
    _version = '241'
    fluent_name = 'surf-energy-enabled'
    _python_name = 'surf_energy_enabled'
    return_type = 'object'

class species_enabled(Boolean):
    """
    Enable Species Sources.
    """
    _version = '241'
    fluent_name = 'species-enabled'
    _python_name = 'species_enabled'
    return_type = 'object'

class co_echemistry_disabled(Boolean):
    """
    Disable CO Electrochemistry.
    """
    _version = '241'
    fluent_name = 'co-echemistry-disabled'
    _python_name = 'co_echemistry_disabled'
    return_type = 'object'

class electrolysis_mode_enabled(Boolean):
    """
    Enable Electrolysis Mode.
    """
    _version = '241'
    fluent_name = 'electrolysis-mode-enabled'
    _python_name = 'electrolysis_mode_enabled'
    return_type = 'object'

class knudsen_diff_enabled(Boolean):
    """
    Enable Knudsen Diffusion.
    """
    _version = '241'
    fluent_name = 'knudsen-diff-enabled'
    _python_name = 'knudsen_diff_enabled'
    return_type = 'object'

class individual_bc_enabled(Boolean):
    """
    Electrical Boundary Condition in Boundary Conditions Task Page.
    """
    _version = '241'
    fluent_name = 'individual-bc-enabled'
    _python_name = 'individual_bc_enabled'
    return_type = 'object'

class converg_voltage_enabled(Boolean):
    """
    Converge to Specified System Voltage.
    """
    _version = '241'
    fluent_name = 'converg-voltage-enabled'
    _python_name = 'converg_voltage_enabled'
    return_type = 'object'

class system_voltage(Real):
    """
    Total System Voltage (V).
    """
    _version = '241'
    fluent_name = 'system-voltage'
    _python_name = 'system_voltage'
    return_type = 'object'

class system_current(Real):
    """
    Total System Current (A).
    """
    _version = '241'
    fluent_name = 'system-current'
    _python_name = 'system_current'
    return_type = 'object'

class leakage_current_density(Real):
    """
    Leakage Current Density (A/m2).
    """
    _version = '241'
    fluent_name = 'leakage-current-density'
    _python_name = 'leakage_current_density'
    return_type = 'object'

class electrolyte_thickness_1(Real):
    """
    Electrolyte Thickness (m).
    """
    _version = '241'
    fluent_name = 'electrolyte-thickness'
    _python_name = 'electrolyte_thickness'
    return_type = 'object'

class electrolyte_resistivity(Real):
    """
    Electrolyte Resistivity (Ohm-m).
    """
    _version = '241'
    fluent_name = 'electrolyte-resistivity'
    _python_name = 'electrolyte_resistivity'
    return_type = 'object'

class current_urf_1(Real):
    """
    Current Under-Relaxation Factor.
    """
    _version = '241'
    fluent_name = 'current-urf'
    _python_name = 'current_urf'
    return_type = 'object'

class fcycle_amg_enabled(Boolean):
    """
    Apply F-Cycle for All Equations.
    """
    _version = '241'
    fluent_name = 'fcycle-amg-enabled'
    _python_name = 'fcycle_amg_enabled'
    return_type = 'object'

class model_parameters(Group):
    """
    Model Parameters.
    """
    _version = '241'
    fluent_name = 'model-parameters'
    _python_name = 'model_parameters'
    child_names = ['electrolyte_submodel_enabled', 'vol_energy_enabled', 'surf_energy_enabled', 'species_enabled', 'co_echemistry_disabled', 'electrolysis_mode_enabled', 'knudsen_diff_enabled', 'individual_bc_enabled', 'converg_voltage_enabled', 'system_voltage', 'system_current', 'leakage_current_density', 'electrolyte_thickness', 'electrolyte_resistivity', 'current_urf', 'fcycle_amg_enabled']
    _child_classes = dict(
        electrolyte_submodel_enabled=electrolyte_submodel_enabled,
        vol_energy_enabled=vol_energy_enabled,
        surf_energy_enabled=surf_energy_enabled,
        species_enabled=species_enabled,
        co_echemistry_disabled=co_echemistry_disabled,
        electrolysis_mode_enabled=electrolysis_mode_enabled,
        knudsen_diff_enabled=knudsen_diff_enabled,
        individual_bc_enabled=individual_bc_enabled,
        converg_voltage_enabled=converg_voltage_enabled,
        system_voltage=system_voltage,
        system_current=system_current,
        leakage_current_density=leakage_current_density,
        electrolyte_thickness=electrolyte_thickness_1,
        electrolyte_resistivity=electrolyte_resistivity,
        current_urf=current_urf_1,
        fcycle_amg_enabled=fcycle_amg_enabled,
    )
    return_type = 'object'

class anode_interface(StringList, AllowedValuesMixin):
    """
    Fuelcell Anode Interface.
    """
    _version = '241'
    fluent_name = 'anode-interface'
    _python_name = 'anode_interface'
    return_type = 'object'

class cathode_interface(StringList, AllowedValuesMixin):
    """
    Fuelcell Cathode Interface.
    """
    _version = '241'
    fluent_name = 'cathode-interface'
    _python_name = 'cathode_interface'
    return_type = 'object'

class tortuosity_interface_child(Group):
    """
    'child_object_type' of tortuosity_interface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'tortuosity_interface_child'
    child_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_2,
        value=value_1,
    )
    return_type = 'object'

class tortuosity_interface(ListObject[tortuosity_interface_child]):
    """
    Tortuosity Interface.
    """
    _version = '241'
    fluent_name = 'tortuosity-interface'
    _python_name = 'tortuosity_interface'
    command_names = ['list_properties', 'add_zone', 'list_zone', 'delete_zone']
    _child_classes = dict(
        list_properties=list_properties,
        add_zone=add_zone,
        list_zone=list_zone,
        delete_zone=delete_zone,
    )
    child_object_type = tortuosity_interface_child
    return_type = 'object'

class pore_size_interface_child(Group):
    """
    'child_object_type' of pore_size_interface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pore_size_interface_child'
    child_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_2,
        value=value_1,
    )
    return_type = 'object'

class pore_size_interface(ListObject[pore_size_interface_child]):
    """
    Pore Size Interface.
    """
    _version = '241'
    fluent_name = 'pore-size-interface'
    _python_name = 'pore_size_interface'
    command_names = ['list_properties', 'add_zone', 'list_zone', 'delete_zone']
    _child_classes = dict(
        list_properties=list_properties,
        add_zone=add_zone,
        list_zone=list_zone,
        delete_zone=delete_zone,
    )
    child_object_type = pore_size_interface_child
    return_type = 'object'

class voltage_tap(StringList, AllowedValuesMixin):
    """
    Voltage Tap Surface.
    """
    _version = '241'
    fluent_name = 'voltage-tap'
    _python_name = 'voltage_tap'
    return_type = 'object'

class current_tap(StringList, AllowedValuesMixin):
    """
    Voltage Tap Surface.
    """
    _version = '241'
    fluent_name = 'current-tap'
    _python_name = 'current_tap'
    return_type = 'object'

class conductive_regions_child(Group):
    """
    'child_object_type' of conductive_regions.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'conductive_regions_child'
    child_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_2,
        value=value_1,
    )
    return_type = 'object'

class conductive_regions(ListObject[conductive_regions_child]):
    """
    Conductive Regions.
    """
    _version = '241'
    fluent_name = 'conductive-regions'
    _python_name = 'conductive_regions'
    command_names = ['list_properties', 'add_zone', 'list_zone', 'delete_zone']
    _child_classes = dict(
        list_properties=list_properties,
        add_zone=add_zone,
        list_zone=list_zone,
        delete_zone=delete_zone,
    )
    child_object_type = conductive_regions_child
    return_type = 'object'

class contact_resistance_regions_child(Group):
    """
    'child_object_type' of contact_resistance_regions.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'contact_resistance_regions_child'
    child_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_2,
        value=value_1,
    )
    return_type = 'object'

class contact_resistance_regions(ListObject[contact_resistance_regions_child]):
    """
    Contact Resistance Regions.
    """
    _version = '241'
    fluent_name = 'contact-resistance-regions'
    _python_name = 'contact_resistance_regions'
    command_names = ['list_properties', 'add_zone', 'list_zone', 'delete_zone']
    _child_classes = dict(
        list_properties=list_properties,
        add_zone=add_zone,
        list_zone=list_zone,
        delete_zone=delete_zone,
    )
    child_object_type = contact_resistance_regions_child
    return_type = 'object'

class electric_field(Group):
    """
    'electric_field' child.
    """
    _version = '241'
    fluent_name = 'electric-field'
    _python_name = 'electric_field'
    child_names = ['voltage_tap', 'current_tap', 'conductive_regions', 'contact_resistance_regions']
    _child_classes = dict(
        voltage_tap=voltage_tap,
        current_tap=current_tap,
        conductive_regions=conductive_regions,
        contact_resistance_regions=contact_resistance_regions,
    )
    return_type = 'object'

class enabled_14(Boolean):
    """
    Use customized addon module.
    """
    _version = '241'
    fluent_name = 'enabled'
    _python_name = 'enabled'
    return_type = 'object'

class source_file(Filename):
    """
    'source_file' child.
    """
    _version = '241'
    fluent_name = 'source-file'
    _python_name = 'source_file'
    return_type = 'object'

class create_customized_addon_lib(Command):
    """
    Compile customized addon library.
    """
    _version = '241'
    fluent_name = 'create-customized-addon-lib'
    _python_name = 'create_customized_addon_lib'
    return_type = 'object'

class customized_udf(Group):
    """
    'customized_udf' child.
    """
    _version = '241'
    fluent_name = 'customized-udf'
    _python_name = 'customized_udf'
    child_names = ['enabled', 'source_file']
    command_names = ['create_customized_addon_lib']
    _child_classes = dict(
        enabled=enabled_14,
        source_file=source_file,
        create_customized_addon_lib=create_customized_addon_lib,
    )
    return_type = 'object'

class sofc(Group):
    """
    SOFC model settings.
    """
    _version = '241'
    fluent_name = 'sofc'
    _python_name = 'sofc'
    child_names = ['enabled', 'electrochemistry', 'model_parameters', 'anode_interface', 'cathode_interface', 'tortuosity_interface', 'pore_size_interface', 'electric_field', 'customized_udf']
    _child_classes = dict(
        enabled=enabled_13,
        electrochemistry=electrochemistry,
        model_parameters=model_parameters,
        anode_interface=anode_interface,
        cathode_interface=cathode_interface,
        tortuosity_interface=tortuosity_interface,
        pore_size_interface=pore_size_interface,
        electric_field=electric_field,
        customized_udf=customized_udf,
    )
    return_type = 'object'

class models(Group):
    """
    'models' child.
    """
    _version = '241'
    fluent_name = 'models'
    _python_name = 'models'
    child_names = ['multiphase', 'energy', 'viscous', 'radiation', 'species', 'discrete_phase', 'virtual_blade_model', 'optics', 'structure', 'ablation', 'echemistry', 'battery', 'system_coupling', 'sofc']
    _child_classes = dict(
        multiphase=multiphase,
        energy=energy,
        viscous=viscous,
        radiation=radiation,
        species=species,
        discrete_phase=discrete_phase,
        virtual_blade_model=virtual_blade_model,
        optics=optics,
        structure=structure,
        ablation=ablation,
        echemistry=echemistry,
        battery=battery,
        system_coupling=system_coupling,
        sofc=sofc,
    )
    return_type = 'object'

class database_type(String, AllowedValuesMixin):
    """
    The database type.
    """
    _version = '241'
    fluent_name = 'database-type'
    _python_name = 'database_type'
    return_type = 'object'

class type_2(String, AllowedValuesMixin):
    """
    'type' child.
    """
    _version = '241'
    fluent_name = 'type'
    _python_name = 'type'
    return_type = 'object'

class formula(String, AllowedValuesMixin):
    """
    'formula' child.
    """
    _version = '241'
    fluent_name = 'formula'
    _python_name = 'formula'
    return_type = 'object'

class copy_by_formula(Command):
    """
    Copy a material from the database (pick by formula).
    
    Parameters
    ----------
        type : str
            'type' child.
        formula : str
            'formula' child.
    """
    _version = '241'
    fluent_name = 'copy-by-formula'
    _python_name = 'copy_by_formula'
    argument_names = ['type', 'formula']
    _child_classes = dict(
        type=type_2,
        formula=formula,
    )
    return_type = 'object'

class name_1(String, AllowedValuesMixin):
    """
    'name' child.
    """
    _version = '241'
    fluent_name = 'name'
    _python_name = 'name'
    return_type = 'object'

class copy_by_name(Command):
    """
    Copy a material from the database (pick by name).
    
    Parameters
    ----------
        type : str
            'type' child.
        name : str
            'name' child.
    """
    _version = '241'
    fluent_name = 'copy-by-name'
    _python_name = 'copy_by_name'
    argument_names = ['type', 'name']
    _child_classes = dict(
        type=type_2,
        name=name_1,
    )
    return_type = 'object'

class list_materials_1(Command):
    """
    List all materials in the database.
    """
    _version = '241'
    fluent_name = 'list-materials'
    _python_name = 'list_materials'
    return_type = 'object'

class list_properties_3(Command):
    """
    List the properties of a material in the database.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '241'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    argument_names = ['name']
    _child_classes = dict(
        name=name_1,
    )
    return_type = 'object'

class database(Group):
    """
    'database' child.
    """
    _version = '241'
    fluent_name = 'database'
    _python_name = 'database'
    child_names = ['database_type']
    command_names = ['copy_by_formula', 'copy_by_name', 'list_materials', 'list_properties']
    _child_classes = dict(
        database_type=database_type,
        copy_by_formula=copy_by_formula,
        copy_by_name=copy_by_name,
        list_materials=list_materials_1,
        list_properties=list_properties_3,
    )
    return_type = 'object'

class chemical_formula(String):
    """
    The chemical formula for the substance.
    """
    _version = '241'
    fluent_name = 'chemical-formula'
    _python_name = 'chemical_formula'
    return_type = 'object'

class option_7(String, AllowedValuesMixin):
    """
    Method for calculating material property.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class nist_fluid(String, AllowedValuesMixin):
    """
    NIST fluid data.
    """
    _version = '241'
    fluent_name = 'nist-fluid'
    _python_name = 'nist_fluid'
    return_type = 'object'

class lookup_table(Boolean):
    """
    Whether to use a lookup table for accelerating NIST calls.
    """
    _version = '241'
    fluent_name = 'lookup-table?'
    _python_name = 'lookup_table'
    return_type = 'object'

class pressure_points(Integer):
    """
    Number of table points for pressure.
    """
    _version = '241'
    fluent_name = 'pressure-points'
    _python_name = 'pressure_points'
    return_type = 'object'

class pressure_minimum(Real):
    """
    Lower table bound for pressure.
    """
    _version = '241'
    fluent_name = 'pressure-minimum'
    _python_name = 'pressure_minimum'
    return_type = 'object'

class pressure_maximum(Real):
    """
    Upper table bound for pressure.
    """
    _version = '241'
    fluent_name = 'pressure-maximum'
    _python_name = 'pressure_maximum'
    return_type = 'object'

class temperature_points(Integer):
    """
    Number of table points for temperature.
    """
    _version = '241'
    fluent_name = 'temperature-points'
    _python_name = 'temperature_points'
    return_type = 'object'

class temperature_minimum(Real):
    """
    Lower table bound for temperature.
    """
    _version = '241'
    fluent_name = 'temperature-minimum'
    _python_name = 'temperature_minimum'
    return_type = 'object'

class temperature_maximum(Real):
    """
    Upper table bound for temperature.
    """
    _version = '241'
    fluent_name = 'temperature-maximum'
    _python_name = 'temperature_maximum'
    return_type = 'object'

class saturation_points(Integer):
    """
    Number of table points for saturation.
    """
    _version = '241'
    fluent_name = 'saturation-points'
    _python_name = 'saturation_points'
    return_type = 'object'

class real_gas_nist(Group):
    """
    'real_gas_nist' child.
    """
    _version = '241'
    fluent_name = 'real-gas-nist'
    _python_name = 'real_gas_nist'
    child_names = ['nist_fluid', 'lookup_table', 'pressure_points', 'pressure_minimum', 'pressure_maximum', 'temperature_points', 'temperature_minimum', 'temperature_maximum', 'saturation_points']
    _child_classes = dict(
        nist_fluid=nist_fluid,
        lookup_table=lookup_table,
        pressure_points=pressure_points,
        pressure_minimum=pressure_minimum,
        pressure_maximum=pressure_maximum,
        temperature_points=temperature_points,
        temperature_minimum=temperature_minimum,
        temperature_maximum=temperature_maximum,
        saturation_points=saturation_points,
    )
    return_type = 'object'

class value_3(Real):
    """
    The constant property value.
    """
    _version = '241'
    fluent_name = 'value'
    _python_name = 'value'
    return_type = 'object'

class reference_pressure(Real):
    """
    'reference_pressure' child.
    """
    _version = '241'
    fluent_name = 'reference-pressure'
    _python_name = 'reference_pressure'
    return_type = 'object'

class reference_density(Real):
    """
    'reference_density' child.
    """
    _version = '241'
    fluent_name = 'reference-density'
    _python_name = 'reference_density'
    return_type = 'object'

class reference_bulk_modulus(Real):
    """
    'reference_bulk_modulus' child.
    """
    _version = '241'
    fluent_name = 'reference-bulk-modulus'
    _python_name = 'reference_bulk_modulus'
    return_type = 'object'

class density_exponent(Real):
    """
    'density_exponent' child.
    """
    _version = '241'
    fluent_name = 'density-exponent'
    _python_name = 'density_exponent'
    return_type = 'object'

class maximum_density_ratio(Real):
    """
    'maximum_density_ratio' child.
    """
    _version = '241'
    fluent_name = 'maximum-density-ratio'
    _python_name = 'maximum_density_ratio'
    return_type = 'object'

class minimum_density_ratio(Real):
    """
    'minimum_density_ratio' child.
    """
    _version = '241'
    fluent_name = 'minimum-density-ratio'
    _python_name = 'minimum_density_ratio'
    return_type = 'object'

class compressible_liquid(Group):
    """
    'compressible_liquid' child.
    """
    _version = '241'
    fluent_name = 'compressible-liquid'
    _python_name = 'compressible_liquid'
    child_names = ['reference_pressure', 'reference_density', 'reference_bulk_modulus', 'density_exponent', 'maximum_density_ratio', 'minimum_density_ratio']
    _child_classes = dict(
        reference_pressure=reference_pressure,
        reference_density=reference_density,
        reference_bulk_modulus=reference_bulk_modulus,
        density_exponent=density_exponent,
        maximum_density_ratio=maximum_density_ratio,
        minimum_density_ratio=minimum_density_ratio,
    )
    return_type = 'object'

class piecewise_linear_1_child(RealList):
    """
    'child_object_type' of piecewise_linear.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'piecewise_linear_child'
    return_type = 'object'

class piecewise_linear_1(ListObject[piecewise_linear_1_child]):
    """
    Ranges and values for piecewise-linear property.
    """
    _version = '241'
    fluent_name = 'piecewise-linear'
    _python_name = 'piecewise_linear'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = piecewise_linear_1_child
    return_type = 'object'

class minimum(Real):
    """
    Minimum argument range for this polynomial segment.
    """
    _version = '241'
    fluent_name = 'minimum'
    _python_name = 'minimum'
    return_type = 'object'

class maximum(Real):
    """
    Maximum argument range for this polynomial segment.
    """
    _version = '241'
    fluent_name = 'maximum'
    _python_name = 'maximum'
    return_type = 'object'

class coefficients_1(RealList):
    """
    Coefficients of polynomial.
    """
    _version = '241'
    fluent_name = 'coefficients'
    _python_name = 'coefficients'
    return_type = 'object'

class piecewise_polynomial_child(Group):
    """
    'child_object_type' of piecewise_polynomial.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'piecewise_polynomial_child'
    child_names = ['minimum', 'maximum', 'coefficients']
    _child_classes = dict(
        minimum=minimum,
        maximum=maximum,
        coefficients=coefficients_1,
    )
    return_type = 'object'

class piecewise_polynomial(ListObject[piecewise_polynomial_child]):
    """
    Piecewise-polynomial settings.
    """
    _version = '241'
    fluent_name = 'piecewise-polynomial'
    _python_name = 'piecewise_polynomial'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = piecewise_polynomial_child
    return_type = 'object'

class polynomial_1(RealList):
    """
    Polynomial coefficients.
    """
    _version = '241'
    fluent_name = 'polynomial'
    _python_name = 'polynomial'
    return_type = 'object'

class expression(Real):
    """
    The property value as an expression.
    """
    _version = '241'
    fluent_name = 'expression'
    _python_name = 'expression'
    return_type = 'object'

class user_defined_function(String, AllowedValuesMixin):
    """
    'user_defined_function' child.
    """
    _version = '241'
    fluent_name = 'user-defined-function'
    _python_name = 'user_defined_function'
    return_type = 'object'

class rgp_table(String, AllowedValuesMixin):
    """
    RGP Table Data Set.
    """
    _version = '241'
    fluent_name = 'rgp-table'
    _python_name = 'rgp_table'
    return_type = 'object'

class density(Group):
    """
    'density' child.
    """
    _version = '241'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'real_gas_nist', 'value', 'compressible_liquid', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function', 'rgp_table']
    _child_classes = dict(
        option=option_7,
        real_gas_nist=real_gas_nist,
        value=value_3,
        compressible_liquid=compressible_liquid,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        user_defined_function=user_defined_function,
        rgp_table=rgp_table,
    )
    return_type = 'object'

class b(Real):
    """
    'b' child.
    """
    _version = '241'
    fluent_name = 'b'
    _python_name = 'b'
    return_type = 'object'

class reference_viscosity(Real):
    """
    'reference_viscosity' child.
    """
    _version = '241'
    fluent_name = 'reference-viscosity'
    _python_name = 'reference_viscosity'
    return_type = 'object'

class reference_temperature_1(Real):
    """
    'reference_temperature' child.
    """
    _version = '241'
    fluent_name = 'reference-temperature'
    _python_name = 'reference_temperature'
    return_type = 'object'

class temperature_exponent(Real):
    """
    'temperature_exponent' child.
    """
    _version = '241'
    fluent_name = 'temperature-exponent'
    _python_name = 'temperature_exponent'
    return_type = 'object'

class power_law(Group):
    """
    'power_law' child.
    """
    _version = '241'
    fluent_name = 'power-law'
    _python_name = 'power_law'
    child_names = ['option', 'b', 'reference_viscosity', 'reference_temperature', 'temperature_exponent']
    _child_classes = dict(
        option=option,
        b=b,
        reference_viscosity=reference_viscosity,
        reference_temperature=reference_temperature_1,
        temperature_exponent=temperature_exponent,
    )
    return_type = 'object'

class a_1(Real):
    """
    'a' child.
    """
    _version = '241'
    fluent_name = 'a'
    _python_name = 'a'
    return_type = 'object'

class c(Real):
    """
    'c' child.
    """
    _version = '241'
    fluent_name = 'c'
    _python_name = 'c'
    return_type = 'object'

class blottner_curve_fit(Group):
    """
    'blottner_curve_fit' child.
    """
    _version = '241'
    fluent_name = 'blottner-curve-fit'
    _python_name = 'blottner_curve_fit'
    child_names = ['a', 'b', 'c']
    _child_classes = dict(
        a=a_1,
        b=b,
        c=c,
    )
    return_type = 'object'

class gupta_curve_fit_viscosity(Group):
    """
    'gupta_curve_fit_viscosity' child.
    """
    _version = '241'
    fluent_name = 'gupta-curve-fit-viscosity'
    _python_name = 'gupta_curve_fit_viscosity'
    child_names = ['a', 'b', 'c']
    _child_classes = dict(
        a=a_1,
        b=b,
        c=c,
    )
    return_type = 'object'

class c1(Real):
    """
    'c1' child.
    """
    _version = '241'
    fluent_name = 'c1'
    _python_name = 'c1'
    return_type = 'object'

class c2(Real):
    """
    'c2' child.
    """
    _version = '241'
    fluent_name = 'c2'
    _python_name = 'c2'
    return_type = 'object'

class effective_temperature(Real):
    """
    'effective_temperature' child.
    """
    _version = '241'
    fluent_name = 'effective-temperature'
    _python_name = 'effective_temperature'
    return_type = 'object'

class sutherland(Group):
    """
    'sutherland' child.
    """
    _version = '241'
    fluent_name = 'sutherland'
    _python_name = 'sutherland'
    child_names = ['option', 'c1', 'c2', 'reference_viscosity', 'reference_temperature', 'effective_temperature']
    _child_classes = dict(
        option=option,
        c1=c1,
        c2=c2,
        reference_viscosity=reference_viscosity,
        reference_temperature=reference_temperature_1,
        effective_temperature=effective_temperature,
    )
    return_type = 'object'

class zero_shear_viscosity(Real):
    """
    'zero_shear_viscosity' child.
    """
    _version = '241'
    fluent_name = 'zero-shear-viscosity'
    _python_name = 'zero_shear_viscosity'
    return_type = 'object'

class power_law_index(Real):
    """
    'power_law_index' child.
    """
    _version = '241'
    fluent_name = 'power-law-index'
    _python_name = 'power_law_index'
    return_type = 'object'

class time_constant(Real):
    """
    'time_constant' child.
    """
    _version = '241'
    fluent_name = 'time-constant'
    _python_name = 'time_constant'
    return_type = 'object'

class activation_energy(Real):
    """
    'activation_energy' child.
    """
    _version = '241'
    fluent_name = 'activation-energy'
    _python_name = 'activation_energy'
    return_type = 'object'

class cross(Group):
    """
    'cross' child.
    """
    _version = '241'
    fluent_name = 'cross'
    _python_name = 'cross'
    child_names = ['option', 'zero_shear_viscosity', 'power_law_index', 'time_constant', 'reference_temperature', 'activation_energy']
    _child_classes = dict(
        option=option,
        zero_shear_viscosity=zero_shear_viscosity,
        power_law_index=power_law_index,
        time_constant=time_constant,
        reference_temperature=reference_temperature_1,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class consistency_index(Real):
    """
    'consistency_index' child.
    """
    _version = '241'
    fluent_name = 'consistency-index'
    _python_name = 'consistency_index'
    return_type = 'object'

class yield_stress_threshold(Real):
    """
    'yield_stress_threshold' child.
    """
    _version = '241'
    fluent_name = 'yield-stress-threshold'
    _python_name = 'yield_stress_threshold'
    return_type = 'object'

class critical_shear_rate(Real):
    """
    'critical_shear_rate' child.
    """
    _version = '241'
    fluent_name = 'critical-shear-rate'
    _python_name = 'critical_shear_rate'
    return_type = 'object'

class herschel_bulkley(Group):
    """
    'herschel_bulkley' child.
    """
    _version = '241'
    fluent_name = 'herschel-bulkley'
    _python_name = 'herschel_bulkley'
    child_names = ['option', 'consistency_index', 'power_law_index', 'yield_stress_threshold', 'critical_shear_rate', 'reference_temperature', 'activation_energy']
    _child_classes = dict(
        option=option,
        consistency_index=consistency_index,
        power_law_index=power_law_index,
        yield_stress_threshold=yield_stress_threshold,
        critical_shear_rate=critical_shear_rate,
        reference_temperature=reference_temperature_1,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class infinite_shear_viscosity(Real):
    """
    'infinite_shear_viscosity' child.
    """
    _version = '241'
    fluent_name = 'infinite-shear-viscosity'
    _python_name = 'infinite_shear_viscosity'
    return_type = 'object'

class carreau(Group):
    """
    'carreau' child.
    """
    _version = '241'
    fluent_name = 'carreau'
    _python_name = 'carreau'
    child_names = ['option', 'time_constant', 'power_law_index', 'zero_shear_viscosity', 'infinite_shear_viscosity', 'reference_temperature', 'activation_energy']
    _child_classes = dict(
        option=option,
        time_constant=time_constant,
        power_law_index=power_law_index,
        zero_shear_viscosity=zero_shear_viscosity,
        infinite_shear_viscosity=infinite_shear_viscosity,
        reference_temperature=reference_temperature_1,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class minimum_viscosity(Real):
    """
    'minimum_viscosity' child.
    """
    _version = '241'
    fluent_name = 'minimum-viscosity'
    _python_name = 'minimum_viscosity'
    return_type = 'object'

class maximum_viscosity(Real):
    """
    'maximum_viscosity' child.
    """
    _version = '241'
    fluent_name = 'maximum-viscosity'
    _python_name = 'maximum_viscosity'
    return_type = 'object'

class non_newtonian_power_law(Group):
    """
    'non_newtonian_power_law' child.
    """
    _version = '241'
    fluent_name = 'non-newtonian-power-law'
    _python_name = 'non_newtonian_power_law'
    child_names = ['option', 'consistency_index', 'power_law_index', 'minimum_viscosity', 'maximum_viscosity', 'reference_temperature', 'activation_energy']
    _child_classes = dict(
        option=option,
        consistency_index=consistency_index,
        power_law_index=power_law_index,
        minimum_viscosity=minimum_viscosity,
        maximum_viscosity=maximum_viscosity,
        reference_temperature=reference_temperature_1,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class viscosity(Group):
    """
    'viscosity' child.
    """
    _version = '241'
    fluent_name = 'viscosity'
    _python_name = 'viscosity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'power_law', 'blottner_curve_fit', 'gupta_curve_fit_viscosity', 'sutherland', 'cross', 'herschel_bulkley', 'carreau', 'non_newtonian_power_law', 'user_defined_function', 'rgp_table', 'real_gas_nist']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        power_law=power_law,
        blottner_curve_fit=blottner_curve_fit,
        gupta_curve_fit_viscosity=gupta_curve_fit_viscosity,
        sutherland=sutherland,
        cross=cross,
        herschel_bulkley=herschel_bulkley,
        carreau=carreau,
        non_newtonian_power_law=non_newtonian_power_law,
        user_defined_function=user_defined_function,
        rgp_table=rgp_table,
        real_gas_nist=real_gas_nist,
    )
    return_type = 'object'

class nasa_9_piecewise_polynomial_child(Group):
    """
    'child_object_type' of nasa_9_piecewise_polynomial.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'nasa_9_piecewise_polynomial_child'
    child_names = ['minimum', 'maximum', 'coefficients']
    _child_classes = dict(
        minimum=minimum,
        maximum=maximum,
        coefficients=coefficients_1,
    )
    return_type = 'object'

class nasa_9_piecewise_polynomial(ListObject[nasa_9_piecewise_polynomial_child]):
    """
    Piecewise-polynomial settings.
    """
    _version = '241'
    fluent_name = 'nasa-9-piecewise-polynomial'
    _python_name = 'nasa_9_piecewise_polynomial'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = nasa_9_piecewise_polynomial_child
    return_type = 'object'

class specific_heat(Group):
    """
    'specific_heat' child.
    """
    _version = '241'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'nasa_9_piecewise_polynomial', 'user_defined_function', 'rgp_table', 'real_gas_nist']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        nasa_9_piecewise_polynomial=nasa_9_piecewise_polynomial,
        user_defined_function=user_defined_function,
        rgp_table=rgp_table,
        real_gas_nist=real_gas_nist,
    )
    return_type = 'object'

class d(Real):
    """
    'd' child.
    """
    _version = '241'
    fluent_name = 'd'
    _python_name = 'd'
    return_type = 'object'

class e_1(Real):
    """
    'e' child.
    """
    _version = '241'
    fluent_name = 'e'
    _python_name = 'e'
    return_type = 'object'

class gupta_curve_fit_conductivity(Group):
    """
    'gupta_curve_fit_conductivity' child.
    """
    _version = '241'
    fluent_name = 'gupta-curve-fit-conductivity'
    _python_name = 'gupta_curve_fit_conductivity'
    child_names = ['a', 'b', 'c', 'd', 'e']
    _child_classes = dict(
        a=a_1,
        b=b,
        c=c,
        d=d,
        e=e_1,
    )
    return_type = 'object'

class thermal_conductivity(Group):
    """
    'thermal_conductivity' child.
    """
    _version = '241'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'gupta_curve_fit_conductivity', 'expression', 'user_defined_function', 'rgp_table', 'real_gas_nist']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        gupta_curve_fit_conductivity=gupta_curve_fit_conductivity,
        expression=expression,
        user_defined_function=user_defined_function,
        rgp_table=rgp_table,
        real_gas_nist=real_gas_nist,
    )
    return_type = 'object'

class molecular_weight(Group):
    """
    'molecular_weight' child.
    """
    _version = '241'
    fluent_name = 'molecular-weight'
    _python_name = 'molecular_weight'
    child_names = ['option', 'value', 'rgp_table']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        rgp_table=rgp_table,
    )
    return_type = 'object'

class combustion_mixture(String, AllowedValuesMixin):
    """
    'combustion_mixture' child.
    """
    _version = '241'
    fluent_name = 'combustion-mixture'
    _python_name = 'combustion_mixture'
    return_type = 'object'

class premix_laminar_speed(Group):
    """
    'premix_laminar_speed' child.
    """
    _version = '241'
    fluent_name = 'premix-laminar-speed'
    _python_name = 'premix_laminar_speed'
    child_names = ['option', 'value', 'user_defined_function', 'combustion_mixture']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
        combustion_mixture=combustion_mixture,
    )
    return_type = 'object'

class premix_critical_strain(Group):
    """
    'premix_critical_strain' child.
    """
    _version = '241'
    fluent_name = 'premix-critical-strain'
    _python_name = 'premix_critical_strain'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class premix_unburnt_temp(Group):
    """
    'premix_unburnt_temp' child.
    """
    _version = '241'
    fluent_name = 'premix-unburnt-temp'
    _python_name = 'premix_unburnt_temp'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class premix_unburnt_density(Group):
    """
    'premix_unburnt_density' child.
    """
    _version = '241'
    fluent_name = 'premix-unburnt-density'
    _python_name = 'premix_unburnt_density'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class premix_heat_trans_coeff(Group):
    """
    'premix_heat_trans_coeff' child.
    """
    _version = '241'
    fluent_name = 'premix-heat-trans-coeff'
    _python_name = 'premix_heat_trans_coeff'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class premix_heat_of_comb(Group):
    """
    'premix_heat_of_comb' child.
    """
    _version = '241'
    fluent_name = 'premix-heat-of-comb'
    _python_name = 'premix_heat_of_comb'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class premix_unburnt_fuel_mf(Group):
    """
    'premix_unburnt_fuel_mf' child.
    """
    _version = '241'
    fluent_name = 'premix-unburnt-fuel-mf'
    _python_name = 'premix_unburnt_fuel_mf'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class premix_adiabatic_temp(Group):
    """
    'premix_adiabatic_temp' child.
    """
    _version = '241'
    fluent_name = 'premix-adiabatic-temp'
    _python_name = 'premix_adiabatic_temp'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class therm_exp_coeff(Group):
    """
    'therm_exp_coeff' child.
    """
    _version = '241'
    fluent_name = 'therm-exp-coeff'
    _python_name = 'therm_exp_coeff'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class vibrational_temperature_mode_1(Real):
    """
    'vibrational_temperature_mode_1' child.
    """
    _version = '241'
    fluent_name = 'vibrational-temperature-mode-1'
    _python_name = 'vibrational_temperature_mode_1'
    return_type = 'object'

class vibrational_degeneracy_mode_1(Real):
    """
    'vibrational_degeneracy_mode_1' child.
    """
    _version = '241'
    fluent_name = 'vibrational-degeneracy-mode-1'
    _python_name = 'vibrational_degeneracy_mode_1'
    return_type = 'object'

class vibrational_temperature_mode_2(Real):
    """
    'vibrational_temperature_mode_2' child.
    """
    _version = '241'
    fluent_name = 'vibrational-temperature-mode-2'
    _python_name = 'vibrational_temperature_mode_2'
    return_type = 'object'

class vibrational_degeneracy_mode_2(Real):
    """
    'vibrational_degeneracy_mode_2' child.
    """
    _version = '241'
    fluent_name = 'vibrational-degeneracy-mode-2'
    _python_name = 'vibrational_degeneracy_mode_2'
    return_type = 'object'

class vibrational_temperature_mode_3(Real):
    """
    'vibrational_temperature_mode_3' child.
    """
    _version = '241'
    fluent_name = 'vibrational-temperature-mode-3'
    _python_name = 'vibrational_temperature_mode_3'
    return_type = 'object'

class vibrational_degeneracy_mode_3(Real):
    """
    'vibrational_degeneracy_mode_3' child.
    """
    _version = '241'
    fluent_name = 'vibrational-degeneracy-mode-3'
    _python_name = 'vibrational_degeneracy_mode_3'
    return_type = 'object'

class vibrational_modes(Group):
    """
    'vibrational_modes' child.
    """
    _version = '241'
    fluent_name = 'vibrational-modes'
    _python_name = 'vibrational_modes'
    child_names = ['vibrational_temperature_mode_1', 'vibrational_degeneracy_mode_1', 'vibrational_temperature_mode_2', 'vibrational_degeneracy_mode_2', 'vibrational_temperature_mode_3', 'vibrational_degeneracy_mode_3']
    _child_classes = dict(
        vibrational_temperature_mode_1=vibrational_temperature_mode_1,
        vibrational_degeneracy_mode_1=vibrational_degeneracy_mode_1,
        vibrational_temperature_mode_2=vibrational_temperature_mode_2,
        vibrational_degeneracy_mode_2=vibrational_degeneracy_mode_2,
        vibrational_temperature_mode_3=vibrational_temperature_mode_3,
        vibrational_degeneracy_mode_3=vibrational_degeneracy_mode_3,
    )
    return_type = 'object'

class characteristic_vibrational_temperature(Group):
    """
    'characteristic_vibrational_temperature' child.
    """
    _version = '241'
    fluent_name = 'characteristic-vibrational-temperature'
    _python_name = 'characteristic_vibrational_temperature'
    child_names = ['option', 'vibrational_modes', 'value']
    _child_classes = dict(
        option=option_7,
        vibrational_modes=vibrational_modes,
        value=value_3,
    )
    return_type = 'object'

class gray_band_coefficients(RealList):
    """
    'gray_band_coefficients' child.
    """
    _version = '241'
    fluent_name = 'gray-band-coefficients'
    _python_name = 'gray_band_coefficients'
    return_type = 'object'

class absorption_coefficient(Group):
    """
    'absorption_coefficient' child.
    """
    _version = '241'
    fluent_name = 'absorption-coefficient'
    _python_name = 'absorption_coefficient'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'gray_band_coefficients', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        gray_band_coefficients=gray_band_coefficients,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class melting_heat(Group):
    """
    'melting_heat' child.
    """
    _version = '241'
    fluent_name = 'melting-heat'
    _python_name = 'melting_heat'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class tsolidus(Group):
    """
    'tsolidus' child.
    """
    _version = '241'
    fluent_name = 'tsolidus'
    _python_name = 'tsolidus'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class tliqidus(Group):
    """
    'tliqidus' child.
    """
    _version = '241'
    fluent_name = 'tliqidus'
    _python_name = 'tliqidus'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class liquidus_slope(Group):
    """
    'liquidus_slope' child.
    """
    _version = '241'
    fluent_name = 'liquidus-slope'
    _python_name = 'liquidus_slope'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class partition_coeff(Group):
    """
    'partition_coeff' child.
    """
    _version = '241'
    fluent_name = 'partition-coeff'
    _python_name = 'partition_coeff'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class eutectic_mf(Group):
    """
    'eutectic_mf' child.
    """
    _version = '241'
    fluent_name = 'eutectic-mf'
    _python_name = 'eutectic_mf'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class solid_diffusion(Group):
    """
    'solid_diffusion' child.
    """
    _version = '241'
    fluent_name = 'solid-diffusion'
    _python_name = 'solid_diffusion'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class solut_exp_coeff(Group):
    """
    'solut_exp_coeff' child.
    """
    _version = '241'
    fluent_name = 'solut-exp-coeff'
    _python_name = 'solut_exp_coeff'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class scattering_coefficient(Group):
    """
    'scattering_coefficient' child.
    """
    _version = '241'
    fluent_name = 'scattering-coefficient'
    _python_name = 'scattering_coefficient'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class forward_scattering_factor(Real):
    """
    'forward_scattering_factor' child.
    """
    _version = '241'
    fluent_name = 'forward-scattering-factor'
    _python_name = 'forward_scattering_factor'
    return_type = 'object'

class asymmetry_factor(Real):
    """
    'asymmetry_factor' child.
    """
    _version = '241'
    fluent_name = 'asymmetry-factor'
    _python_name = 'asymmetry_factor'
    return_type = 'object'

class delta_eddington(Group):
    """
    'delta_eddington' child.
    """
    _version = '241'
    fluent_name = 'delta-eddington'
    _python_name = 'delta_eddington'
    child_names = ['forward_scattering_factor', 'asymmetry_factor']
    _child_classes = dict(
        forward_scattering_factor=forward_scattering_factor,
        asymmetry_factor=asymmetry_factor,
    )
    return_type = 'object'

class scattering_phase_function(Group):
    """
    'scattering_phase_function' child.
    """
    _version = '241'
    fluent_name = 'scattering-phase-function'
    _python_name = 'scattering_phase_function'
    child_names = ['option', 'value', 'delta_eddington', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        delta_eddington=delta_eddington,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class refractive_index(Group):
    """
    'refractive_index' child.
    """
    _version = '241'
    fluent_name = 'refractive-index'
    _python_name = 'refractive_index'
    child_names = ['option', 'value', 'gray_band_coefficients']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        gray_band_coefficients=gray_band_coefficients,
    )
    return_type = 'object'

class formation_entropy(Group):
    """
    'formation_entropy' child.
    """
    _version = '241'
    fluent_name = 'formation-entropy'
    _python_name = 'formation_entropy'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class formation_enthalpy(Group):
    """
    'formation_enthalpy' child.
    """
    _version = '241'
    fluent_name = 'formation-enthalpy'
    _python_name = 'formation_enthalpy'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class reference_temperature(Group):
    """
    'reference_temperature' child.
    """
    _version = '241'
    fluent_name = 'reference-temperature'
    _python_name = 'reference_temperature'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class lennard_jones_length(Group):
    """
    'lennard_jones_length' child.
    """
    _version = '241'
    fluent_name = 'lennard-jones-length'
    _python_name = 'lennard_jones_length'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class lennard_jones_energy(Group):
    """
    'lennard_jones_energy' child.
    """
    _version = '241'
    fluent_name = 'lennard-jones-energy'
    _python_name = 'lennard_jones_energy'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class thermal_accom_coefficient(Group):
    """
    'thermal_accom_coefficient' child.
    """
    _version = '241'
    fluent_name = 'thermal-accom-coefficient'
    _python_name = 'thermal_accom_coefficient'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class velocity_accom_coefficient(Group):
    """
    'velocity_accom_coefficient' child.
    """
    _version = '241'
    fluent_name = 'velocity-accom-coefficient'
    _python_name = 'velocity_accom_coefficient'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class degrees_of_freedom(Group):
    """
    'degrees_of_freedom' child.
    """
    _version = '241'
    fluent_name = 'degrees-of-freedom'
    _python_name = 'degrees_of_freedom'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class matrix_component(RealList):
    """
    'matrix_component' child.
    """
    _version = '241'
    fluent_name = 'matrix-component'
    _python_name = 'matrix_component'
    return_type = 'object'

class diffusivity(Group):
    """
    'diffusivity' child.
    """
    _version = '241'
    fluent_name = 'diffusivity'
    _python_name = 'diffusivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class anisotropic(Group):
    """
    'anisotropic' child.
    """
    _version = '241'
    fluent_name = 'anisotropic'
    _python_name = 'anisotropic'
    child_names = ['matrix_component', 'diffusivity']
    _child_classes = dict(
        matrix_component=matrix_component,
        diffusivity=diffusivity,
    )
    return_type = 'object'

class direction_0(RealList):
    """
    'direction_0' child.
    """
    _version = '241'
    fluent_name = 'direction-0'
    _python_name = 'direction_0'
    return_type = 'object'

class direction_1(RealList):
    """
    'direction_1' child.
    """
    _version = '241'
    fluent_name = 'direction-1'
    _python_name = 'direction_1'
    return_type = 'object'

class diffusivity_0(Group):
    """
    'diffusivity_0' child.
    """
    _version = '241'
    fluent_name = 'diffusivity-0'
    _python_name = 'diffusivity_0'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class diffusivity_1(Group):
    """
    'diffusivity_1' child.
    """
    _version = '241'
    fluent_name = 'diffusivity-1'
    _python_name = 'diffusivity_1'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class diffusivity_2(Group):
    """
    'diffusivity_2' child.
    """
    _version = '241'
    fluent_name = 'diffusivity-2'
    _python_name = 'diffusivity_2'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class orthotropic(Group):
    """
    'orthotropic' child.
    """
    _version = '241'
    fluent_name = 'orthotropic'
    _python_name = 'orthotropic'
    child_names = ['direction_0', 'direction_1', 'diffusivity_0', 'diffusivity_1', 'diffusivity_2']
    _child_classes = dict(
        direction_0=direction_0,
        direction_1=direction_1,
        diffusivity_0=diffusivity_0,
        diffusivity_1=diffusivity_1,
        diffusivity_2=diffusivity_2,
    )
    return_type = 'object'

class axis_origin(RealList):
    """
    'axis_origin' child.
    """
    _version = '241'
    fluent_name = 'axis-origin'
    _python_name = 'axis_origin'
    return_type = 'object'

class axis_direction(RealList):
    """
    'axis_direction' child.
    """
    _version = '241'
    fluent_name = 'axis-direction'
    _python_name = 'axis_direction'
    return_type = 'object'

class radial_diffusivity(Group):
    """
    'radial_diffusivity' child.
    """
    _version = '241'
    fluent_name = 'radial-diffusivity'
    _python_name = 'radial_diffusivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class tangential_diffusivity(Group):
    """
    'tangential_diffusivity' child.
    """
    _version = '241'
    fluent_name = 'tangential-diffusivity'
    _python_name = 'tangential_diffusivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class axial_diffusivity(Group):
    """
    'axial_diffusivity' child.
    """
    _version = '241'
    fluent_name = 'axial-diffusivity'
    _python_name = 'axial_diffusivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class cyl_orthotropic(Group):
    """
    'cyl_orthotropic' child.
    """
    _version = '241'
    fluent_name = 'cyl-orthotropic'
    _python_name = 'cyl_orthotropic'
    child_names = ['axis_origin', 'axis_direction', 'radial_diffusivity', 'tangential_diffusivity', 'axial_diffusivity']
    _child_classes = dict(
        axis_origin=axis_origin,
        axis_direction=axis_direction,
        radial_diffusivity=radial_diffusivity,
        tangential_diffusivity=tangential_diffusivity,
        axial_diffusivity=axial_diffusivity,
    )
    return_type = 'object'

class uds_diffusivities_child(Group):
    """
    'child_object_type' of uds_diffusivities.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'uds_diffusivities_child'
    child_names = ['option', 'value', 'expression', 'polynomial', 'user_defined_function', 'anisotropic', 'orthotropic', 'cyl_orthotropic']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
        anisotropic=anisotropic,
        orthotropic=orthotropic,
        cyl_orthotropic=cyl_orthotropic,
    )
    return_type = 'object'

class uds_diffusivities(NamedObject[uds_diffusivities_child], _NonCreatableNamedObjectMixin[uds_diffusivities_child]):
    """
    'uds_diffusivities' child.
    """
    _version = '241'
    fluent_name = 'uds-diffusivities'
    _python_name = 'uds_diffusivities'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = uds_diffusivities_child
    return_type = 'object'

class uds_diffusivity(Group):
    """
    'uds_diffusivity' child.
    """
    _version = '241'
    fluent_name = 'uds-diffusivity'
    _python_name = 'uds_diffusivity'
    child_names = ['option', 'uds_diffusivities', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        uds_diffusivities=uds_diffusivities,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class electric_conductivity(Group):
    """
    'electric_conductivity' child.
    """
    _version = '241'
    fluent_name = 'electric-conductivity'
    _python_name = 'electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class dual_electric_conductivity(Group):
    """
    'dual_electric_conductivity' child.
    """
    _version = '241'
    fluent_name = 'dual-electric-conductivity'
    _python_name = 'dual_electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class lithium_diffusivity(Group):
    """
    'lithium_diffusivity' child.
    """
    _version = '241'
    fluent_name = 'lithium-diffusivity'
    _python_name = 'lithium_diffusivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class magnetic_permeability(Group):
    """
    'magnetic_permeability' child.
    """
    _version = '241'
    fluent_name = 'magnetic-permeability'
    _python_name = 'magnetic_permeability'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class speed_of_sound(Group):
    """
    'speed_of_sound' child.
    """
    _version = '241'
    fluent_name = 'speed-of-sound'
    _python_name = 'speed_of_sound'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class critical_temperature(Group):
    """
    'critical_temperature' child.
    """
    _version = '241'
    fluent_name = 'critical-temperature'
    _python_name = 'critical_temperature'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class critical_pressure(Group):
    """
    'critical_pressure' child.
    """
    _version = '241'
    fluent_name = 'critical-pressure'
    _python_name = 'critical_pressure'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class critical_volume(Group):
    """
    'critical_volume' child.
    """
    _version = '241'
    fluent_name = 'critical-volume'
    _python_name = 'critical_volume'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class acentric_factor(Group):
    """
    'acentric_factor' child.
    """
    _version = '241'
    fluent_name = 'acentric-factor'
    _python_name = 'acentric_factor'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class latent_heat(Group):
    """
    'latent_heat' child.
    """
    _version = '241'
    fluent_name = 'latent-heat'
    _python_name = 'latent_heat'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class saturation_pressure(Group):
    """
    'saturation_pressure' child.
    """
    _version = '241'
    fluent_name = 'saturation-pressure'
    _python_name = 'saturation_pressure'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class vaporization_temperature(Group):
    """
    'vaporization_temperature' child.
    """
    _version = '241'
    fluent_name = 'vaporization-temperature'
    _python_name = 'vaporization_temperature'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class charge(Group):
    """
    'charge' child.
    """
    _version = '241'
    fluent_name = 'charge'
    _python_name = 'charge'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class fluid_child(Group):
    """
    'child_object_type' of fluid.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'fluid_child'
    child_names = ['name', 'chemical_formula', 'density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'molecular_weight', 'premix_laminar_speed', 'premix_critical_strain', 'premix_unburnt_temp', 'premix_unburnt_density', 'premix_heat_trans_coeff', 'premix_heat_of_comb', 'premix_unburnt_fuel_mf', 'premix_adiabatic_temp', 'therm_exp_coeff', 'characteristic_vibrational_temperature', 'absorption_coefficient', 'melting_heat', 'tsolidus', 'tliqidus', 'liquidus_slope', 'partition_coeff', 'eutectic_mf', 'solid_diffusion', 'solut_exp_coeff', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'formation_entropy', 'formation_enthalpy', 'reference_temperature', 'lennard_jones_length', 'lennard_jones_energy', 'thermal_accom_coefficient', 'velocity_accom_coefficient', 'degrees_of_freedom', 'uds_diffusivity', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'magnetic_permeability', 'speed_of_sound', 'critical_temperature', 'critical_pressure', 'critical_volume', 'acentric_factor', 'latent_heat', 'saturation_pressure', 'vaporization_temperature', 'charge']
    _child_classes = dict(
        name=name,
        chemical_formula=chemical_formula,
        density=density,
        viscosity=viscosity,
        specific_heat=specific_heat,
        thermal_conductivity=thermal_conductivity,
        molecular_weight=molecular_weight,
        premix_laminar_speed=premix_laminar_speed,
        premix_critical_strain=premix_critical_strain,
        premix_unburnt_temp=premix_unburnt_temp,
        premix_unburnt_density=premix_unburnt_density,
        premix_heat_trans_coeff=premix_heat_trans_coeff,
        premix_heat_of_comb=premix_heat_of_comb,
        premix_unburnt_fuel_mf=premix_unburnt_fuel_mf,
        premix_adiabatic_temp=premix_adiabatic_temp,
        therm_exp_coeff=therm_exp_coeff,
        characteristic_vibrational_temperature=characteristic_vibrational_temperature,
        absorption_coefficient=absorption_coefficient,
        melting_heat=melting_heat,
        tsolidus=tsolidus,
        tliqidus=tliqidus,
        liquidus_slope=liquidus_slope,
        partition_coeff=partition_coeff,
        eutectic_mf=eutectic_mf,
        solid_diffusion=solid_diffusion,
        solut_exp_coeff=solut_exp_coeff,
        scattering_coefficient=scattering_coefficient,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        formation_entropy=formation_entropy,
        formation_enthalpy=formation_enthalpy,
        reference_temperature=reference_temperature,
        lennard_jones_length=lennard_jones_length,
        lennard_jones_energy=lennard_jones_energy,
        thermal_accom_coefficient=thermal_accom_coefficient,
        velocity_accom_coefficient=velocity_accom_coefficient,
        degrees_of_freedom=degrees_of_freedom,
        uds_diffusivity=uds_diffusivity,
        electric_conductivity=electric_conductivity,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        magnetic_permeability=magnetic_permeability,
        speed_of_sound=speed_of_sound,
        critical_temperature=critical_temperature,
        critical_pressure=critical_pressure,
        critical_volume=critical_volume,
        acentric_factor=acentric_factor,
        latent_heat=latent_heat,
        saturation_pressure=saturation_pressure,
        vaporization_temperature=vaporization_temperature,
        charge=charge,
    )
    return_type = 'object'

class fluid(NamedObject[fluid_child], CreatableNamedObjectMixinOld[fluid_child]):
    """
    'fluid' child.
    """
    _version = '241'
    fluent_name = 'fluid'
    _python_name = 'fluid'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = fluid_child
    return_type = 'object'

class density_1(Group):
    """
    'density' child.
    """
    _version = '241'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'user_defined_function', 'value']
    _child_classes = dict(
        option=option_7,
        user_defined_function=user_defined_function,
        value=value_3,
    )
    return_type = 'object'

class specific_heat_1(Group):
    """
    'specific_heat' child.
    """
    _version = '241'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'user_defined_function', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'nasa_9_piecewise_polynomial']
    _child_classes = dict(
        option=option_7,
        user_defined_function=user_defined_function,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        nasa_9_piecewise_polynomial=nasa_9_piecewise_polynomial,
    )
    return_type = 'object'

class planar_conductivity(Group):
    """
    'planar_conductivity' child.
    """
    _version = '241'
    fluent_name = 'planar-conductivity'
    _python_name = 'planar_conductivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class transverse_conductivity(Group):
    """
    'transverse_conductivity' child.
    """
    _version = '241'
    fluent_name = 'transverse-conductivity'
    _python_name = 'transverse_conductivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class biaxial(Group):
    """
    'biaxial' child.
    """
    _version = '241'
    fluent_name = 'biaxial'
    _python_name = 'biaxial'
    child_names = ['planar_conductivity', 'transverse_conductivity']
    _child_classes = dict(
        planar_conductivity=planar_conductivity,
        transverse_conductivity=transverse_conductivity,
    )
    return_type = 'object'

class radial_conductivity(Group):
    """
    'radial_conductivity' child.
    """
    _version = '241'
    fluent_name = 'radial-conductivity'
    _python_name = 'radial_conductivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class tangential_conductivity(Group):
    """
    'tangential_conductivity' child.
    """
    _version = '241'
    fluent_name = 'tangential-conductivity'
    _python_name = 'tangential_conductivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class axial_conductivity(Group):
    """
    'axial_conductivity' child.
    """
    _version = '241'
    fluent_name = 'axial-conductivity'
    _python_name = 'axial_conductivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class cyl_orthotropic_1(Group):
    """
    'cyl_orthotropic' child.
    """
    _version = '241'
    fluent_name = 'cyl-orthotropic'
    _python_name = 'cyl_orthotropic'
    child_names = ['axis_origin', 'axis_direction', 'radial_conductivity', 'tangential_conductivity', 'axial_conductivity']
    _child_classes = dict(
        axis_origin=axis_origin,
        axis_direction=axis_direction,
        radial_conductivity=radial_conductivity,
        tangential_conductivity=tangential_conductivity,
        axial_conductivity=axial_conductivity,
    )
    return_type = 'object'

class conductivity_0(Group):
    """
    'conductivity_0' child.
    """
    _version = '241'
    fluent_name = 'conductivity-0'
    _python_name = 'conductivity_0'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class conductivity_1(Group):
    """
    'conductivity_1' child.
    """
    _version = '241'
    fluent_name = 'conductivity-1'
    _python_name = 'conductivity_1'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class conductivity_2(Group):
    """
    'conductivity_2' child.
    """
    _version = '241'
    fluent_name = 'conductivity-2'
    _python_name = 'conductivity_2'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class orthotropic_1(Group):
    """
    'orthotropic' child.
    """
    _version = '241'
    fluent_name = 'orthotropic'
    _python_name = 'orthotropic'
    child_names = ['direction_0', 'direction_1', 'conductivity_0', 'conductivity_1', 'conductivity_2']
    _child_classes = dict(
        direction_0=direction_0,
        direction_1=direction_1,
        conductivity_0=conductivity_0,
        conductivity_1=conductivity_1,
        conductivity_2=conductivity_2,
    )
    return_type = 'object'

class principal_axes(RealList):
    """
    'principal_axes' child.
    """
    _version = '241'
    fluent_name = 'principal-axes'
    _python_name = 'principal_axes'
    return_type = 'object'

class principal_values(RealList):
    """
    'principal_values' child.
    """
    _version = '241'
    fluent_name = 'principal-values'
    _python_name = 'principal_values'
    return_type = 'object'

class conductivity(Group):
    """
    'conductivity' child.
    """
    _version = '241'
    fluent_name = 'conductivity'
    _python_name = 'conductivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class principal_axes_values(Group):
    """
    'principal_axes_values' child.
    """
    _version = '241'
    fluent_name = 'principal-axes-values'
    _python_name = 'principal_axes_values'
    child_names = ['principal_axes', 'principal_values', 'conductivity']
    _child_classes = dict(
        principal_axes=principal_axes,
        principal_values=principal_values,
        conductivity=conductivity,
    )
    return_type = 'object'

class anisotropic_1(Group):
    """
    'anisotropic' child.
    """
    _version = '241'
    fluent_name = 'anisotropic'
    _python_name = 'anisotropic'
    child_names = ['matrix_component', 'conductivity']
    _child_classes = dict(
        matrix_component=matrix_component,
        conductivity=conductivity,
    )
    return_type = 'object'

class thermal_conductivity_1(Group):
    """
    'thermal_conductivity' child.
    """
    _version = '241'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'biaxial', 'cyl_orthotropic', 'orthotropic', 'principal_axes_values', 'anisotropic', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        biaxial=biaxial,
        cyl_orthotropic=cyl_orthotropic_1,
        orthotropic=orthotropic_1,
        principal_axes_values=principal_axes_values,
        anisotropic=anisotropic_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class atomic_number(Group):
    """
    'atomic_number' child.
    """
    _version = '241'
    fluent_name = 'atomic-number'
    _python_name = 'atomic_number'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class scattering_coefficient_1(Group):
    """
    'scattering_coefficient' child.
    """
    _version = '241'
    fluent_name = 'scattering-coefficient'
    _python_name = 'scattering_coefficient'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'gray_band_coefficients', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        gray_band_coefficients=gray_band_coefficients,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class uds_diffusivity_1(Group):
    """
    'uds_diffusivity' child.
    """
    _version = '241'
    fluent_name = 'uds-diffusivity'
    _python_name = 'uds_diffusivity'
    child_names = ['option', 'value', 'uds_diffusivities', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        uds_diffusivities=uds_diffusivities,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class youngs_modulus_0(Group):
    """
    'youngs_modulus_0' child.
    """
    _version = '241'
    fluent_name = 'youngs-modulus-0'
    _python_name = 'youngs_modulus_0'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class youngs_modulus_1(Group):
    """
    'youngs_modulus_1' child.
    """
    _version = '241'
    fluent_name = 'youngs-modulus-1'
    _python_name = 'youngs_modulus_1'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class youngs_modulus_2(Group):
    """
    'youngs_modulus_2' child.
    """
    _version = '241'
    fluent_name = 'youngs-modulus-2'
    _python_name = 'youngs_modulus_2'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class shear_modulus_01(Group):
    """
    'shear_modulus_01' child.
    """
    _version = '241'
    fluent_name = 'shear-modulus-01'
    _python_name = 'shear_modulus_01'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class shear_modulus_12(Group):
    """
    'shear_modulus_12' child.
    """
    _version = '241'
    fluent_name = 'shear-modulus-12'
    _python_name = 'shear_modulus_12'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class shear_modulus_02(Group):
    """
    'shear_modulus_02' child.
    """
    _version = '241'
    fluent_name = 'shear-modulus-02'
    _python_name = 'shear_modulus_02'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class orthotropic_structure_ym(Group):
    """
    'orthotropic_structure_ym' child.
    """
    _version = '241'
    fluent_name = 'orthotropic-structure-ym'
    _python_name = 'orthotropic_structure_ym'
    child_names = ['direction_0', 'direction_1', 'youngs_modulus_0', 'youngs_modulus_1', 'youngs_modulus_2', 'shear_modulus_01', 'shear_modulus_12', 'shear_modulus_02']
    _child_classes = dict(
        direction_0=direction_0,
        direction_1=direction_1,
        youngs_modulus_0=youngs_modulus_0,
        youngs_modulus_1=youngs_modulus_1,
        youngs_modulus_2=youngs_modulus_2,
        shear_modulus_01=shear_modulus_01,
        shear_modulus_12=shear_modulus_12,
        shear_modulus_02=shear_modulus_02,
    )
    return_type = 'object'

class struct_youngs_modulus(Group):
    """
    'struct_youngs_modulus' child.
    """
    _version = '241'
    fluent_name = 'struct-youngs-modulus'
    _python_name = 'struct_youngs_modulus'
    child_names = ['option', 'value', 'orthotropic_structure_ym', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        orthotropic_structure_ym=orthotropic_structure_ym,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class poisson_ratio_01(Group):
    """
    'poisson_ratio_01' child.
    """
    _version = '241'
    fluent_name = 'poisson-ratio-01'
    _python_name = 'poisson_ratio_01'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class poisson_ratio_12(Group):
    """
    'poisson_ratio_12' child.
    """
    _version = '241'
    fluent_name = 'poisson-ratio-12'
    _python_name = 'poisson_ratio_12'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class poisson_ratio_02(Group):
    """
    'poisson_ratio_02' child.
    """
    _version = '241'
    fluent_name = 'poisson-ratio-02'
    _python_name = 'poisson_ratio_02'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class orthotropic_structure_nu(Group):
    """
    'orthotropic_structure_nu' child.
    """
    _version = '241'
    fluent_name = 'orthotropic-structure-nu'
    _python_name = 'orthotropic_structure_nu'
    child_names = ['poisson_ratio_01', 'poisson_ratio_12', 'poisson_ratio_02']
    _child_classes = dict(
        poisson_ratio_01=poisson_ratio_01,
        poisson_ratio_12=poisson_ratio_12,
        poisson_ratio_02=poisson_ratio_02,
    )
    return_type = 'object'

class struct_poisson_ratio(Group):
    """
    'struct_poisson_ratio' child.
    """
    _version = '241'
    fluent_name = 'struct-poisson-ratio'
    _python_name = 'struct_poisson_ratio'
    child_names = ['option', 'value', 'orthotropic_structure_nu', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        orthotropic_structure_nu=orthotropic_structure_nu,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class struct_start_temperature(Group):
    """
    'struct_start_temperature' child.
    """
    _version = '241'
    fluent_name = 'struct-start-temperature'
    _python_name = 'struct_start_temperature'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class thermal_expansion_0(Group):
    """
    'thermal_expansion_0' child.
    """
    _version = '241'
    fluent_name = 'thermal-expansion-0'
    _python_name = 'thermal_expansion_0'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class thermal_expansion_1(Group):
    """
    'thermal_expansion_1' child.
    """
    _version = '241'
    fluent_name = 'thermal-expansion-1'
    _python_name = 'thermal_expansion_1'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class thermal_expansion_2(Group):
    """
    'thermal_expansion_2' child.
    """
    _version = '241'
    fluent_name = 'thermal-expansion-2'
    _python_name = 'thermal_expansion_2'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class orthotropic_structure_te(Group):
    """
    'orthotropic_structure_te' child.
    """
    _version = '241'
    fluent_name = 'orthotropic-structure-te'
    _python_name = 'orthotropic_structure_te'
    child_names = ['thermal_expansion_0', 'thermal_expansion_1', 'thermal_expansion_2']
    _child_classes = dict(
        thermal_expansion_0=thermal_expansion_0,
        thermal_expansion_1=thermal_expansion_1,
        thermal_expansion_2=thermal_expansion_2,
    )
    return_type = 'object'

class struct_thermal_expansion(Group):
    """
    'struct_thermal_expansion' child.
    """
    _version = '241'
    fluent_name = 'struct-thermal-expansion'
    _python_name = 'struct_thermal_expansion'
    child_names = ['option', 'value', 'orthotropic_structure_te', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        orthotropic_structure_te=orthotropic_structure_te,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class struct_damping_alpha(Group):
    """
    'struct_damping_alpha' child.
    """
    _version = '241'
    fluent_name = 'struct-damping-alpha'
    _python_name = 'struct_damping_alpha'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class struct_damping_beta(Group):
    """
    'struct_damping_beta' child.
    """
    _version = '241'
    fluent_name = 'struct-damping-beta'
    _python_name = 'struct_damping_beta'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class solid_child(Group):
    """
    'child_object_type' of solid.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'solid_child'
    child_names = ['name', 'chemical_formula', 'density', 'specific_heat', 'thermal_conductivity', 'atomic_number', 'absorption_coefficient', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'uds_diffusivity', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'magnetic_permeability', 'struct_youngs_modulus', 'struct_poisson_ratio', 'struct_start_temperature', 'struct_thermal_expansion', 'struct_damping_alpha', 'struct_damping_beta']
    _child_classes = dict(
        name=name,
        chemical_formula=chemical_formula,
        density=density_1,
        specific_heat=specific_heat_1,
        thermal_conductivity=thermal_conductivity_1,
        atomic_number=atomic_number,
        absorption_coefficient=absorption_coefficient,
        scattering_coefficient=scattering_coefficient_1,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        uds_diffusivity=uds_diffusivity_1,
        electric_conductivity=electric_conductivity,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        magnetic_permeability=magnetic_permeability,
        struct_youngs_modulus=struct_youngs_modulus,
        struct_poisson_ratio=struct_poisson_ratio,
        struct_start_temperature=struct_start_temperature,
        struct_thermal_expansion=struct_thermal_expansion,
        struct_damping_alpha=struct_damping_alpha,
        struct_damping_beta=struct_damping_beta,
    )
    return_type = 'object'

class solid(NamedObject[solid_child], CreatableNamedObjectMixinOld[solid_child]):
    """
    'solid' child.
    """
    _version = '241'
    fluent_name = 'solid'
    _python_name = 'solid'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = solid_child
    return_type = 'object'

class composition_type(String, AllowedValuesMixin):
    """
    'composition_type' child.
    """
    _version = '241'
    fluent_name = 'composition-type'
    _python_name = 'composition_type'
    return_type = 'object'

class species_fractions(RealList):
    """
    'species_fractions' child.
    """
    _version = '241'
    fluent_name = 'species-fractions'
    _python_name = 'species_fractions'
    return_type = 'object'

class real_gas_nist_mixture(Group):
    """
    'real_gas_nist_mixture' child.
    """
    _version = '241'
    fluent_name = 'real-gas-nist-mixture'
    _python_name = 'real_gas_nist_mixture'
    child_names = ['lookup_table', 'composition_type', 'species_fractions', 'pressure_points', 'pressure_minimum', 'pressure_maximum', 'temperature_points', 'temperature_minimum', 'temperature_maximum']
    _child_classes = dict(
        lookup_table=lookup_table,
        composition_type=composition_type,
        species_fractions=species_fractions,
        pressure_points=pressure_points,
        pressure_minimum=pressure_minimum,
        pressure_maximum=pressure_maximum,
        temperature_points=temperature_points,
        temperature_minimum=temperature_minimum,
        temperature_maximum=temperature_maximum,
    )
    return_type = 'object'

class density_2(Group):
    """
    'density' child.
    """
    _version = '241'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'real_gas_nist_mixture', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        real_gas_nist_mixture=real_gas_nist_mixture,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class viscosity_1(Group):
    """
    'viscosity' child.
    """
    _version = '241'
    fluent_name = 'viscosity'
    _python_name = 'viscosity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'power_law', 'sutherland', 'user_defined_function', 'real_gas_nist_mixture']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        power_law=power_law,
        sutherland=sutherland,
        user_defined_function=user_defined_function,
        real_gas_nist_mixture=real_gas_nist_mixture,
    )
    return_type = 'object'

class specific_heat_2(Group):
    """
    'specific_heat' child.
    """
    _version = '241'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'nasa_9_piecewise_polynomial', 'real_gas_nist_mixture', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        nasa_9_piecewise_polynomial=nasa_9_piecewise_polynomial,
        real_gas_nist_mixture=real_gas_nist_mixture,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class thermal_conductivity_2(Group):
    """
    'thermal_conductivity' child.
    """
    _version = '241'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function', 'real_gas_nist_mixture']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        user_defined_function=user_defined_function,
        real_gas_nist_mixture=real_gas_nist_mixture,
    )
    return_type = 'object'

class premix_laminar_thickness(Group):
    """
    'premix_laminar_thickness' child.
    """
    _version = '241'
    fluent_name = 'premix-laminar-thickness'
    _python_name = 'premix_laminar_thickness'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class premix_unburnt_temp_1(Group):
    """
    'premix_unburnt_temp' child.
    """
    _version = '241'
    fluent_name = 'premix-unburnt-temp'
    _python_name = 'premix_unburnt_temp'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class premix_unburnt_cp(Group):
    """
    'premix_unburnt_cp' child.
    """
    _version = '241'
    fluent_name = 'premix-unburnt-cp'
    _python_name = 'premix_unburnt_cp'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class premix_unburnt_density_1(Group):
    """
    'premix_unburnt_density' child.
    """
    _version = '241'
    fluent_name = 'premix-unburnt-density'
    _python_name = 'premix_unburnt_density'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class premix_heat_trans_coeff_1(Group):
    """
    'premix_heat_trans_coeff' child.
    """
    _version = '241'
    fluent_name = 'premix-heat-trans-coeff'
    _python_name = 'premix_heat_trans_coeff'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class path_length(Real):
    """
    'path_length' child.
    """
    _version = '241'
    fluent_name = 'path-length'
    _python_name = 'path_length'
    return_type = 'object'

class absorption_coefficient_1(Group):
    """
    'absorption_coefficient' child.
    """
    _version = '241'
    fluent_name = 'absorption-coefficient'
    _python_name = 'absorption_coefficient'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'path_length', 'gray_band_coefficients', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression,
        path_length=path_length,
        gray_band_coefficients=gray_band_coefficients,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class lewis_number(Real):
    """
    'lewis_number' child.
    """
    _version = '241'
    fluent_name = 'lewis-number'
    _python_name = 'lewis_number'
    return_type = 'object'

class species_diffusivity_child(Group):
    """
    'child_object_type' of species_diffusivity.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'species_diffusivity_child'
    child_names = ['option', 'value', 'polynomial']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class species_diffusivity(NamedObject[species_diffusivity_child], _NonCreatableNamedObjectMixin[species_diffusivity_child]):
    """
    'species_diffusivity' child.
    """
    _version = '241'
    fluent_name = 'species-diffusivity'
    _python_name = 'species_diffusivity'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_diffusivity_child
    return_type = 'object'

class multicomponent_child_child(Group):
    """
    'child_object_type' of child_object_type.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'multicomponent_child_child'
    child_names = ['option', 'value', 'polynomial']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class multicomponent_child(NamedObject[multicomponent_child_child], _NonCreatableNamedObjectMixin[multicomponent_child_child]):
    """
    'child_object_type' of multicomponent.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'multicomponent_child'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = multicomponent_child_child
    return_type = 'object'

class multicomponent(NamedObject[multicomponent_child], _NonCreatableNamedObjectMixin[multicomponent_child]):
    """
    'multicomponent' child.
    """
    _version = '241'
    fluent_name = 'multicomponent'
    _python_name = 'multicomponent'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = multicomponent_child
    return_type = 'object'

class mass_diffusivity(Group):
    """
    'mass_diffusivity' child.
    """
    _version = '241'
    fluent_name = 'mass-diffusivity'
    _python_name = 'mass_diffusivity'
    child_names = ['option', 'lewis_number', 'value', 'species_diffusivity', 'multicomponent', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        lewis_number=lewis_number,
        value=value_1,
        species_diffusivity=species_diffusivity,
        multicomponent=multicomponent,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class volumetric_species_child(Group):
    """
    'child_object_type' of volumetric_species.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'volumetric_species_child'
    child_names = ['name', 'chemical_formula', 'density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'molecular_weight', 'premix_laminar_speed', 'premix_critical_strain', 'premix_unburnt_temp', 'premix_unburnt_density', 'premix_heat_trans_coeff', 'premix_heat_of_comb', 'premix_unburnt_fuel_mf', 'premix_adiabatic_temp', 'therm_exp_coeff', 'characteristic_vibrational_temperature', 'absorption_coefficient', 'melting_heat', 'tsolidus', 'tliqidus', 'liquidus_slope', 'partition_coeff', 'eutectic_mf', 'solid_diffusion', 'solut_exp_coeff', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'formation_entropy', 'formation_enthalpy', 'reference_temperature', 'lennard_jones_length', 'lennard_jones_energy', 'thermal_accom_coefficient', 'velocity_accom_coefficient', 'degrees_of_freedom', 'uds_diffusivity', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'magnetic_permeability', 'speed_of_sound', 'critical_temperature', 'critical_pressure', 'critical_volume', 'acentric_factor', 'latent_heat', 'saturation_pressure', 'vaporization_temperature', 'charge']
    _child_classes = dict(
        name=name,
        chemical_formula=chemical_formula,
        density=density,
        viscosity=viscosity,
        specific_heat=specific_heat,
        thermal_conductivity=thermal_conductivity,
        molecular_weight=molecular_weight,
        premix_laminar_speed=premix_laminar_speed,
        premix_critical_strain=premix_critical_strain,
        premix_unburnt_temp=premix_unburnt_temp,
        premix_unburnt_density=premix_unburnt_density,
        premix_heat_trans_coeff=premix_heat_trans_coeff,
        premix_heat_of_comb=premix_heat_of_comb,
        premix_unburnt_fuel_mf=premix_unburnt_fuel_mf,
        premix_adiabatic_temp=premix_adiabatic_temp,
        therm_exp_coeff=therm_exp_coeff,
        characteristic_vibrational_temperature=characteristic_vibrational_temperature,
        absorption_coefficient=absorption_coefficient,
        melting_heat=melting_heat,
        tsolidus=tsolidus,
        tliqidus=tliqidus,
        liquidus_slope=liquidus_slope,
        partition_coeff=partition_coeff,
        eutectic_mf=eutectic_mf,
        solid_diffusion=solid_diffusion,
        solut_exp_coeff=solut_exp_coeff,
        scattering_coefficient=scattering_coefficient,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        formation_entropy=formation_entropy,
        formation_enthalpy=formation_enthalpy,
        reference_temperature=reference_temperature,
        lennard_jones_length=lennard_jones_length,
        lennard_jones_energy=lennard_jones_energy,
        thermal_accom_coefficient=thermal_accom_coefficient,
        velocity_accom_coefficient=velocity_accom_coefficient,
        degrees_of_freedom=degrees_of_freedom,
        uds_diffusivity=uds_diffusivity,
        electric_conductivity=electric_conductivity,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        magnetic_permeability=magnetic_permeability,
        speed_of_sound=speed_of_sound,
        critical_temperature=critical_temperature,
        critical_pressure=critical_pressure,
        critical_volume=critical_volume,
        acentric_factor=acentric_factor,
        latent_heat=latent_heat,
        saturation_pressure=saturation_pressure,
        vaporization_temperature=vaporization_temperature,
        charge=charge,
    )
    return_type = 'object'

class volumetric_species(NamedObject[volumetric_species_child], CreatableNamedObjectMixinOld[volumetric_species_child]):
    """
    'volumetric_species' child.
    """
    _version = '241'
    fluent_name = 'volumetric-species'
    _python_name = 'volumetric_species'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = volumetric_species_child
    return_type = 'object'

class last_species(String, AllowedValuesMixin):
    """
    The last species should be the most abundant one, no transport equation will be solved for it.
    """
    _version = '241'
    fluent_name = 'last-species'
    _python_name = 'last_species'
    return_type = 'object'

class species_3(Group):
    """
    'species' child.
    """
    _version = '241'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['volumetric_species', 'last_species']
    _child_classes = dict(
        volumetric_species=volumetric_species,
        last_species=last_species,
    )
    return_type = 'object'

class reactions_1(Group):
    """
    'reactions' child.
    """
    _version = '241'
    fluent_name = 'reactions'
    _python_name = 'reactions'
    child_names = ['option']
    _child_classes = dict(
        option=option_7,
    )
    return_type = 'object'

class reaction_mechs(Group):
    """
    'reaction_mechs' child.
    """
    _version = '241'
    fluent_name = 'reaction-mechs'
    _python_name = 'reaction_mechs'
    child_names = ['option']
    _child_classes = dict(
        option=option_7,
    )
    return_type = 'object'

class thermal_diffusivity(Group):
    """
    'thermal_diffusivity' child.
    """
    _version = '241'
    fluent_name = 'thermal-diffusivity'
    _python_name = 'thermal_diffusivity'
    child_names = ['option', 'species_diffusivity', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        species_diffusivity=species_diffusivity,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class tmelt(Group):
    """
    'tmelt' child.
    """
    _version = '241'
    fluent_name = 'tmelt'
    _python_name = 'tmelt'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class eutectic_temp(Group):
    """
    'eutectic_temp' child.
    """
    _version = '241'
    fluent_name = 'eutectic-temp'
    _python_name = 'eutectic_temp'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class diffusion_collision_integral(RealList):
    """
    'diffusion_collision_integral' child.
    """
    _version = '241'
    fluent_name = 'diffusion-collision-integral'
    _python_name = 'diffusion_collision_integral'
    return_type = 'object'

class viscosity_collision_integral(RealList):
    """
    'viscosity_collision_integral' child.
    """
    _version = '241'
    fluent_name = 'viscosity-collision-integral'
    _python_name = 'viscosity_collision_integral'
    return_type = 'object'

class neutral_involved_interaction(Group):
    """
    'neutral_involved_interaction' child.
    """
    _version = '241'
    fluent_name = 'neutral-involved-interaction'
    _python_name = 'neutral_involved_interaction'
    child_names = ['diffusion_collision_integral', 'viscosity_collision_integral']
    _child_classes = dict(
        diffusion_collision_integral=diffusion_collision_integral,
        viscosity_collision_integral=viscosity_collision_integral,
    )
    return_type = 'object'

class charged_particle_interaction(String, AllowedValuesMixin):
    """
    'charged_particle_interaction' child.
    """
    _version = '241'
    fluent_name = 'charged-particle-interaction'
    _python_name = 'charged_particle_interaction'
    return_type = 'object'

class cross_section_multicomponent_child_child(Group):
    """
    'child_object_type' of child_object_type.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'cross_section_multicomponent_child_child'
    child_names = ['option', 'neutral_involved_interaction', 'charged_particle_interaction']
    _child_classes = dict(
        option=option_7,
        neutral_involved_interaction=neutral_involved_interaction,
        charged_particle_interaction=charged_particle_interaction,
    )
    return_type = 'object'

class cross_section_multicomponent_child(NamedObject[cross_section_multicomponent_child_child], _NonCreatableNamedObjectMixin[cross_section_multicomponent_child_child]):
    """
    'child_object_type' of cross_section_multicomponent.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'cross_section_multicomponent_child'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = cross_section_multicomponent_child_child
    return_type = 'object'

class cross_section_multicomponent(NamedObject[cross_section_multicomponent_child], _NonCreatableNamedObjectMixin[cross_section_multicomponent_child]):
    """
    'cross_section_multicomponent' child.
    """
    _version = '241'
    fluent_name = 'cross-section-multicomponent'
    _python_name = 'cross_section_multicomponent'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = cross_section_multicomponent_child
    return_type = 'object'

class collision_cross_section(Group):
    """
    'collision_cross_section' child.
    """
    _version = '241'
    fluent_name = 'collision-cross-section'
    _python_name = 'collision_cross_section'
    child_names = ['option', 'cross_section_multicomponent']
    _child_classes = dict(
        option=option_7,
        cross_section_multicomponent=cross_section_multicomponent,
    )
    return_type = 'object'

class mixture_child(Group):
    """
    'child_object_type' of mixture.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'mixture_child'
    child_names = ['name', 'chemical_formula', 'density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'premix_laminar_speed', 'premix_laminar_thickness', 'premix_unburnt_temp', 'premix_unburnt_cp', 'premix_unburnt_density', 'premix_heat_trans_coeff', 'premix_critical_strain', 'therm_exp_coeff', 'absorption_coefficient', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'mass_diffusivity', 'species', 'reactions', 'reaction_mechs', 'uds_diffusivity', 'thermal_diffusivity', 'tmelt', 'melting_heat', 'eutectic_temp', 'speed_of_sound', 'critical_temperature', 'critical_pressure', 'critical_volume', 'acentric_factor', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'collision_cross_section']
    _child_classes = dict(
        name=name,
        chemical_formula=chemical_formula,
        density=density_2,
        viscosity=viscosity_1,
        specific_heat=specific_heat_2,
        thermal_conductivity=thermal_conductivity_2,
        premix_laminar_speed=premix_laminar_speed,
        premix_laminar_thickness=premix_laminar_thickness,
        premix_unburnt_temp=premix_unburnt_temp_1,
        premix_unburnt_cp=premix_unburnt_cp,
        premix_unburnt_density=premix_unburnt_density_1,
        premix_heat_trans_coeff=premix_heat_trans_coeff_1,
        premix_critical_strain=premix_critical_strain,
        therm_exp_coeff=therm_exp_coeff,
        absorption_coefficient=absorption_coefficient_1,
        scattering_coefficient=scattering_coefficient,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        mass_diffusivity=mass_diffusivity,
        species=species_3,
        reactions=reactions_1,
        reaction_mechs=reaction_mechs,
        uds_diffusivity=uds_diffusivity,
        thermal_diffusivity=thermal_diffusivity,
        tmelt=tmelt,
        melting_heat=melting_heat,
        eutectic_temp=eutectic_temp,
        speed_of_sound=speed_of_sound,
        critical_temperature=critical_temperature,
        critical_pressure=critical_pressure,
        critical_volume=critical_volume,
        acentric_factor=acentric_factor,
        electric_conductivity=electric_conductivity,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        collision_cross_section=collision_cross_section,
    )
    return_type = 'object'

class mixture(NamedObject[mixture_child], CreatableNamedObjectMixinOld[mixture_child]):
    """
    'mixture' child.
    """
    _version = '241'
    fluent_name = 'mixture'
    _python_name = 'mixture'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = mixture_child
    return_type = 'object'

class density_3(Group):
    """
    'density' child.
    """
    _version = '241'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'compressible_liquid', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        compressible_liquid=compressible_liquid,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class specific_heat_3(Group):
    """
    'specific_heat' child.
    """
    _version = '241'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'nasa_9_piecewise_polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        nasa_9_piecewise_polynomial=nasa_9_piecewise_polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class thermal_conductivity_3(Group):
    """
    'thermal_conductivity' child.
    """
    _version = '241'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class thermophoretic_co(Group):
    """
    'thermophoretic_co' child.
    """
    _version = '241'
    fluent_name = 'thermophoretic-co'
    _python_name = 'thermophoretic_co'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class scattering_factor(Group):
    """
    'scattering_factor' child.
    """
    _version = '241'
    fluent_name = 'scattering-factor'
    _python_name = 'scattering_factor'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class emissivity(Group):
    """
    'emissivity' child.
    """
    _version = '241'
    fluent_name = 'emissivity'
    _python_name = 'emissivity'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class viscosity_2(Group):
    """
    'viscosity' child.
    """
    _version = '241'
    fluent_name = 'viscosity'
    _python_name = 'viscosity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class dpm_surften(Group):
    """
    'dpm_surften' child.
    """
    _version = '241'
    fluent_name = 'dpm-surften'
    _python_name = 'dpm_surften'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class electric_conductivity_1(Group):
    """
    'electric_conductivity' child.
    """
    _version = '241'
    fluent_name = 'electric-conductivity'
    _python_name = 'electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class dual_electric_conductivity_1(Group):
    """
    'dual_electric_conductivity' child.
    """
    _version = '241'
    fluent_name = 'dual-electric-conductivity'
    _python_name = 'dual_electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class charge_density(Group):
    """
    'charge_density' child.
    """
    _version = '241'
    fluent_name = 'charge-density'
    _python_name = 'charge_density'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class inert_particle_child(Group):
    """
    'child_object_type' of inert_particle.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'inert_particle_child'
    child_names = ['name', 'chemical_formula', 'density', 'specific_heat', 'thermal_conductivity', 'thermophoretic_co', 'scattering_factor', 'emissivity', 'viscosity', 'dpm_surften', 'electric_conductivity', 'dual_electric_conductivity', 'magnetic_permeability', 'charge_density']
    _child_classes = dict(
        name=name,
        chemical_formula=chemical_formula,
        density=density_3,
        specific_heat=specific_heat_3,
        thermal_conductivity=thermal_conductivity_3,
        thermophoretic_co=thermophoretic_co,
        scattering_factor=scattering_factor,
        emissivity=emissivity,
        viscosity=viscosity_2,
        dpm_surften=dpm_surften,
        electric_conductivity=electric_conductivity_1,
        dual_electric_conductivity=dual_electric_conductivity_1,
        magnetic_permeability=magnetic_permeability,
        charge_density=charge_density,
    )
    return_type = 'object'

class inert_particle(NamedObject[inert_particle_child], CreatableNamedObjectMixinOld[inert_particle_child]):
    """
    'inert_particle' child.
    """
    _version = '241'
    fluent_name = 'inert-particle'
    _python_name = 'inert_particle'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = inert_particle_child
    return_type = 'object'

class use_vapor_species_heat_capacity(Boolean):
    """
    'use_vapor_species_heat_capacity' child.
    """
    _version = '241'
    fluent_name = 'use-vapor-species-heat-capacity?'
    _python_name = 'use_vapor_species_heat_capacity'
    return_type = 'object'

class diffusion_controlled(Group):
    """
    'diffusion_controlled' child.
    """
    _version = '241'
    fluent_name = 'diffusion-controlled'
    _python_name = 'diffusion_controlled'
    child_names = ['use_vapor_species_heat_capacity']
    _child_classes = dict(
        use_vapor_species_heat_capacity=use_vapor_species_heat_capacity,
    )
    return_type = 'object'

class variable_lewis_number(Boolean):
    """
    'variable_lewis_number' child.
    """
    _version = '241'
    fluent_name = 'variable-lewis-number?'
    _python_name = 'variable_lewis_number'
    return_type = 'object'

class convection_diffusion_controlled(Group):
    """
    'convection_diffusion_controlled' child.
    """
    _version = '241'
    fluent_name = 'convection-diffusion-controlled'
    _python_name = 'convection_diffusion_controlled'
    child_names = ['variable_lewis_number', 'use_vapor_species_heat_capacity']
    _child_classes = dict(
        variable_lewis_number=variable_lewis_number,
        use_vapor_species_heat_capacity=use_vapor_species_heat_capacity,
    )
    return_type = 'object'

class vaporization_model(Group):
    """
    'vaporization_model' child.
    """
    _version = '241'
    fluent_name = 'vaporization-model'
    _python_name = 'vaporization_model'
    child_names = ['option', 'diffusion_controlled', 'convection_diffusion_controlled']
    _child_classes = dict(
        option=option_7,
        diffusion_controlled=diffusion_controlled,
        convection_diffusion_controlled=convection_diffusion_controlled,
    )
    return_type = 'object'

class pre_exponential_factor(Real):
    """
    'pre_exponential_factor' child.
    """
    _version = '241'
    fluent_name = 'pre-exponential-factor'
    _python_name = 'pre_exponential_factor'
    return_type = 'object'

class single_rate(Group):
    """
    'single_rate' child.
    """
    _version = '241'
    fluent_name = 'single-rate'
    _python_name = 'single_rate'
    child_names = ['pre_exponential_factor', 'activation_energy']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class particle_thermolysis_rate(Group):
    """
    'particle_thermolysis_rate' child.
    """
    _version = '241'
    fluent_name = 'particle-thermolysis-rate'
    _python_name = 'particle_thermolysis_rate'
    child_names = ['pre_exponential_factor', 'activation_energy']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class film_thermolysis_rate(Group):
    """
    'film_thermolysis_rate' child.
    """
    _version = '241'
    fluent_name = 'film-thermolysis-rate'
    _python_name = 'film_thermolysis_rate'
    child_names = ['pre_exponential_factor', 'activation_energy']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class secondary_rate(Group):
    """
    'secondary_rate' child.
    """
    _version = '241'
    fluent_name = 'secondary-rate'
    _python_name = 'secondary_rate'
    child_names = ['particle_thermolysis_rate', 'film_thermolysis_rate']
    _child_classes = dict(
        particle_thermolysis_rate=particle_thermolysis_rate,
        film_thermolysis_rate=film_thermolysis_rate,
    )
    return_type = 'object'

class thermolysis_model(Group):
    """
    'thermolysis_model' child.
    """
    _version = '241'
    fluent_name = 'thermolysis-model'
    _python_name = 'thermolysis_model'
    child_names = ['option', 'single_rate', 'secondary_rate', 'value']
    _child_classes = dict(
        option=option_7,
        single_rate=single_rate,
        secondary_rate=secondary_rate,
        value=value_3,
    )
    return_type = 'object'

class latent_heat_1(Group):
    """
    'latent_heat' child.
    """
    _version = '241'
    fluent_name = 'latent-heat'
    _python_name = 'latent_heat'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class volatile_fraction(Group):
    """
    'volatile_fraction' child.
    """
    _version = '241'
    fluent_name = 'volatile-fraction'
    _python_name = 'volatile_fraction'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class heat_of_pyrolysis(Group):
    """
    'heat_of_pyrolysis' child.
    """
    _version = '241'
    fluent_name = 'heat-of-pyrolysis'
    _python_name = 'heat_of_pyrolysis'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class averaging_coefficient(Real):
    """
    'averaging_coefficient' child.
    """
    _version = '241'
    fluent_name = 'averaging-coefficient'
    _python_name = 'averaging_coefficient'
    return_type = 'object'

class binary_diffusivity_1(Group):
    """
    'binary_diffusivity' child.
    """
    _version = '241'
    fluent_name = 'binary-diffusivity'
    _python_name = 'binary_diffusivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        expression=expression,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class film_averaged(Group):
    """
    'film_averaged' child.
    """
    _version = '241'
    fluent_name = 'film-averaged'
    _python_name = 'film_averaged'
    child_names = ['averaging_coefficient', 'binary_diffusivity']
    _child_classes = dict(
        averaging_coefficient=averaging_coefficient,
        binary_diffusivity=binary_diffusivity_1,
    )
    return_type = 'object'

class binary_diffusivity(Group):
    """
    'binary_diffusivity' child.
    """
    _version = '241'
    fluent_name = 'binary-diffusivity'
    _python_name = 'binary_diffusivity'
    child_names = ['option', 'value', 'film_averaged', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        film_averaged=film_averaged,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class diffusivity_reference_pressure(Group):
    """
    'diffusivity_reference_pressure' child.
    """
    _version = '241'
    fluent_name = 'diffusivity-reference-pressure'
    _python_name = 'diffusivity_reference_pressure'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class averaging_coefficient_t(Group):
    """
    'averaging_coefficient_t' child.
    """
    _version = '241'
    fluent_name = 'averaging-coefficient-t'
    _python_name = 'averaging_coefficient_t'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class averaging_coefficient_y(Group):
    """
    'averaging_coefficient_y' child.
    """
    _version = '241'
    fluent_name = 'averaging-coefficient-y'
    _python_name = 'averaging_coefficient_y'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class vapor_pressure(Group):
    """
    'vapor_pressure' child.
    """
    _version = '241'
    fluent_name = 'vapor-pressure'
    _python_name = 'vapor_pressure'
    child_names = ['option', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'value', 'rgp_table', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        value=value_3,
        rgp_table=rgp_table,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class molecular_weight_1(Group):
    """
    'molecular_weight' child.
    """
    _version = '241'
    fluent_name = 'molecular-weight'
    _python_name = 'molecular_weight'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class boiling_point(Group):
    """
    'boiling_point' child.
    """
    _version = '241'
    fluent_name = 'boiling-point'
    _python_name = 'boiling_point'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class scattering_factor_1(Group):
    """
    'scattering_factor' child.
    """
    _version = '241'
    fluent_name = 'scattering-factor'
    _python_name = 'scattering_factor'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class emissivity_1(Group):
    """
    'emissivity' child.
    """
    _version = '241'
    fluent_name = 'emissivity'
    _python_name = 'emissivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class dpm_surften_1(Group):
    """
    'dpm_surften' child.
    """
    _version = '241'
    fluent_name = 'dpm-surften'
    _python_name = 'dpm_surften'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'rgp_table', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        rgp_table=rgp_table,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class droplet_particle_child(Group):
    """
    'child_object_type' of droplet_particle.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'droplet_particle_child'
    child_names = ['name', 'chemical_formula', 'density', 'thermal_conductivity', 'vaporization_model', 'thermolysis_model', 'latent_heat', 'volatile_fraction', 'heat_of_pyrolysis', 'specific_heat', 'binary_diffusivity', 'diffusivity_reference_pressure', 'averaging_coefficient_t', 'averaging_coefficient_y', 'vapor_pressure', 'molecular_weight', 'vaporization_temperature', 'boiling_point', 'thermophoretic_co', 'scattering_factor', 'emissivity', 'viscosity', 'dpm_surften', 'electric_conductivity', 'dual_electric_conductivity', 'magnetic_permeability', 'charge_density', 'formation_entropy', 'formation_enthalpy', 'reference_temperature']
    _child_classes = dict(
        name=name,
        chemical_formula=chemical_formula,
        density=density_3,
        thermal_conductivity=thermal_conductivity_3,
        vaporization_model=vaporization_model,
        thermolysis_model=thermolysis_model,
        latent_heat=latent_heat_1,
        volatile_fraction=volatile_fraction,
        heat_of_pyrolysis=heat_of_pyrolysis,
        specific_heat=specific_heat_3,
        binary_diffusivity=binary_diffusivity,
        diffusivity_reference_pressure=diffusivity_reference_pressure,
        averaging_coefficient_t=averaging_coefficient_t,
        averaging_coefficient_y=averaging_coefficient_y,
        vapor_pressure=vapor_pressure,
        molecular_weight=molecular_weight_1,
        vaporization_temperature=vaporization_temperature,
        boiling_point=boiling_point,
        thermophoretic_co=thermophoretic_co,
        scattering_factor=scattering_factor_1,
        emissivity=emissivity_1,
        viscosity=viscosity_2,
        dpm_surften=dpm_surften_1,
        electric_conductivity=electric_conductivity_1,
        dual_electric_conductivity=dual_electric_conductivity_1,
        magnetic_permeability=magnetic_permeability,
        charge_density=charge_density,
        formation_entropy=formation_entropy,
        formation_enthalpy=formation_enthalpy,
        reference_temperature=reference_temperature,
    )
    return_type = 'object'

class droplet_particle(NamedObject[droplet_particle_child], CreatableNamedObjectMixinOld[droplet_particle_child]):
    """
    'droplet_particle' child.
    """
    _version = '241'
    fluent_name = 'droplet-particle'
    _python_name = 'droplet_particle'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = droplet_particle_child
    return_type = 'object'

class density_4(Group):
    """
    'density' child.
    """
    _version = '241'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class combustible_fraction(Group):
    """
    'combustible_fraction' child.
    """
    _version = '241'
    fluent_name = 'combustible-fraction'
    _python_name = 'combustible_fraction'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class swelling_coefficient(Group):
    """
    'swelling_coefficient' child.
    """
    _version = '241'
    fluent_name = 'swelling-coefficient'
    _python_name = 'swelling_coefficient'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class burn_stoichiometry(Group):
    """
    'burn_stoichiometry' child.
    """
    _version = '241'
    fluent_name = 'burn-stoichiometry'
    _python_name = 'burn_stoichiometry'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class binary_diffusivity_2(Group):
    """
    'binary_diffusivity' child.
    """
    _version = '241'
    fluent_name = 'binary-diffusivity'
    _python_name = 'binary_diffusivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class burn_hreact(Group):
    """
    'burn_hreact' child.
    """
    _version = '241'
    fluent_name = 'burn-hreact'
    _python_name = 'burn_hreact'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class burn_hreact_fraction(Group):
    """
    'burn_hreact_fraction' child.
    """
    _version = '241'
    fluent_name = 'burn-hreact-fraction'
    _python_name = 'burn_hreact_fraction'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_7,
        value=value_3,
    )
    return_type = 'object'

class weighting_factor(Real):
    """
    'weighting_factor' child.
    """
    _version = '241'
    fluent_name = 'weighting-factor'
    _python_name = 'weighting_factor'
    return_type = 'object'

class first_rate(Group):
    """
    'first_rate' child.
    """
    _version = '241'
    fluent_name = 'first-rate'
    _python_name = 'first_rate'
    child_names = ['pre_exponential_factor', 'activation_energy', 'weighting_factor']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
        weighting_factor=weighting_factor,
    )
    return_type = 'object'

class second_rate(Group):
    """
    'second_rate' child.
    """
    _version = '241'
    fluent_name = 'second-rate'
    _python_name = 'second_rate'
    child_names = ['pre_exponential_factor', 'activation_energy', 'weighting_factor']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
        weighting_factor=weighting_factor,
    )
    return_type = 'object'

class two_competing_rates(Group):
    """
    'two_competing_rates' child.
    """
    _version = '241'
    fluent_name = 'two-competing-rates'
    _python_name = 'two_competing_rates'
    child_names = ['first_rate', 'second_rate']
    _child_classes = dict(
        first_rate=first_rate,
        second_rate=second_rate,
    )
    return_type = 'object'

class initial_fraction_of_bridges_in_coal_lattice(Real):
    """
    'initial_fraction_of_bridges_in_coal_lattice' child.
    """
    _version = '241'
    fluent_name = 'initial-fraction-of-bridges-in-coal-lattice'
    _python_name = 'initial_fraction_of_bridges_in_coal_lattice'
    return_type = 'object'

class initial_fraction_of_char_bridges(Real):
    """
    'initial_fraction_of_char_bridges' child.
    """
    _version = '241'
    fluent_name = 'initial-fraction-of-char-bridges'
    _python_name = 'initial_fraction_of_char_bridges'
    return_type = 'object'

class lattice_coordination_number(Real):
    """
    'lattice_coordination_number' child.
    """
    _version = '241'
    fluent_name = 'lattice-coordination-number'
    _python_name = 'lattice_coordination_number'
    return_type = 'object'

class cluster_molecular_weight(Real):
    """
    'cluster_molecular_weight' child.
    """
    _version = '241'
    fluent_name = 'cluster-molecular-weight'
    _python_name = 'cluster_molecular_weight'
    return_type = 'object'

class side_chain_molecular_weight(Real):
    """
    'side_chain_molecular_weight' child.
    """
    _version = '241'
    fluent_name = 'side-chain-molecular-weight'
    _python_name = 'side_chain_molecular_weight'
    return_type = 'object'

class cpd_model(Group):
    """
    'cpd_model' child.
    """
    _version = '241'
    fluent_name = 'cpd-model'
    _python_name = 'cpd_model'
    child_names = ['initial_fraction_of_bridges_in_coal_lattice', 'initial_fraction_of_char_bridges', 'lattice_coordination_number', 'cluster_molecular_weight', 'side_chain_molecular_weight']
    _child_classes = dict(
        initial_fraction_of_bridges_in_coal_lattice=initial_fraction_of_bridges_in_coal_lattice,
        initial_fraction_of_char_bridges=initial_fraction_of_char_bridges,
        lattice_coordination_number=lattice_coordination_number,
        cluster_molecular_weight=cluster_molecular_weight,
        side_chain_molecular_weight=side_chain_molecular_weight,
    )
    return_type = 'object'

class devolatilization_model(Group):
    """
    'devolatilization_model' child.
    """
    _version = '241'
    fluent_name = 'devolatilization-model'
    _python_name = 'devolatilization_model'
    child_names = ['option', 'value', 'single_rate', 'two_competing_rates', 'cpd_model']
    _child_classes = dict(
        option=option_7,
        value=value_3,
        single_rate=single_rate,
        two_competing_rates=two_competing_rates,
        cpd_model=cpd_model,
    )
    return_type = 'object'

class char_intrinsic_reactivity(Real):
    """
    'char_intrinsic_reactivity' child.
    """
    _version = '241'
    fluent_name = 'char-intrinsic-reactivity'
    _python_name = 'char_intrinsic_reactivity'
    return_type = 'object'

class carbon_content_percentage(Real):
    """
    'carbon_content_percentage' child.
    """
    _version = '241'
    fluent_name = 'carbon-content-percentage'
    _python_name = 'carbon_content_percentage'
    return_type = 'object'

class cbk(Group):
    """
    'cbk' child.
    """
    _version = '241'
    fluent_name = 'cbk'
    _python_name = 'cbk'
    child_names = ['option', 'char_intrinsic_reactivity', 'carbon_content_percentage']
    _child_classes = dict(
        option=option,
        char_intrinsic_reactivity=char_intrinsic_reactivity,
        carbon_content_percentage=carbon_content_percentage,
    )
    return_type = 'object'

class diffusion_rate_constant(Real):
    """
    'diffusion_rate_constant' child.
    """
    _version = '241'
    fluent_name = 'diffusion-rate-constant'
    _python_name = 'diffusion_rate_constant'
    return_type = 'object'

class kinetics_diffusion_limited(Group):
    """
    'kinetics_diffusion_limited' child.
    """
    _version = '241'
    fluent_name = 'kinetics-diffusion-limited'
    _python_name = 'kinetics_diffusion_limited'
    child_names = ['diffusion_rate_constant', 'pre_exponential_factor', 'activation_energy']
    _child_classes = dict(
        diffusion_rate_constant=diffusion_rate_constant,
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class char_porosity(Real):
    """
    'char_porosity' child.
    """
    _version = '241'
    fluent_name = 'char-porosity'
    _python_name = 'char_porosity'
    return_type = 'object'

class mean_pore_radius(Real):
    """
    'mean_pore_radius' child.
    """
    _version = '241'
    fluent_name = 'mean-pore-radius'
    _python_name = 'mean_pore_radius'
    return_type = 'object'

class specific_internal_surface_area(Real):
    """
    'specific_internal_surface_area' child.
    """
    _version = '241'
    fluent_name = 'specific-internal-surface-area'
    _python_name = 'specific_internal_surface_area'
    return_type = 'object'

class tortuosity(Real):
    """
    'tortuosity' child.
    """
    _version = '241'
    fluent_name = 'tortuosity'
    _python_name = 'tortuosity'
    return_type = 'object'

class burning_mode(Real):
    """
    'burning_mode' child.
    """
    _version = '241'
    fluent_name = 'burning-mode'
    _python_name = 'burning_mode'
    return_type = 'object'

class intrinsic_model(Group):
    """
    'intrinsic_model' child.
    """
    _version = '241'
    fluent_name = 'intrinsic-model'
    _python_name = 'intrinsic_model'
    child_names = ['diffusion_rate_constant', 'pre_exponential_factor', 'activation_energy', 'char_porosity', 'mean_pore_radius', 'specific_internal_surface_area', 'tortuosity', 'burning_mode']
    _child_classes = dict(
        diffusion_rate_constant=diffusion_rate_constant,
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
        char_porosity=char_porosity,
        mean_pore_radius=mean_pore_radius,
        specific_internal_surface_area=specific_internal_surface_area,
        tortuosity=tortuosity,
        burning_mode=burning_mode,
    )
    return_type = 'object'

class composition_dependent_specific_heat(Boolean):
    """
    'composition_dependent_specific_heat' child.
    """
    _version = '241'
    fluent_name = 'composition-dependent-specific-heat?'
    _python_name = 'composition_dependent_specific_heat'
    return_type = 'object'

class composition_dependent_density(Boolean):
    """
    'composition_dependent_density' child.
    """
    _version = '241'
    fluent_name = 'composition-dependent-density?'
    _python_name = 'composition_dependent_density'
    return_type = 'object'

class multiple_surface_reactions(Group):
    """
    'multiple_surface_reactions' child.
    """
    _version = '241'
    fluent_name = 'multiple-surface-reactions'
    _python_name = 'multiple_surface_reactions'
    child_names = ['composition_dependent_specific_heat', 'composition_dependent_density']
    _child_classes = dict(
        composition_dependent_specific_heat=composition_dependent_specific_heat,
        composition_dependent_density=composition_dependent_density,
    )
    return_type = 'object'

class combustion_model(Group):
    """
    'combustion_model' child.
    """
    _version = '241'
    fluent_name = 'combustion-model'
    _python_name = 'combustion_model'
    child_names = ['option', 'cbk', 'kinetics_diffusion_limited', 'intrinsic_model', 'multiple_surface_reactions']
    _child_classes = dict(
        option=option_7,
        cbk=cbk,
        kinetics_diffusion_limited=kinetics_diffusion_limited,
        intrinsic_model=intrinsic_model,
        multiple_surface_reactions=multiple_surface_reactions,
    )
    return_type = 'object'

class combusting_particle_child(Group):
    """
    'child_object_type' of combusting_particle.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'combusting_particle_child'
    child_names = ['name', 'chemical_formula', 'density', 'thermal_conductivity', 'latent_heat', 'volatile_fraction', 'combustible_fraction', 'swelling_coefficient', 'burn_stoichiometry', 'specific_heat', 'binary_diffusivity', 'diffusivity_reference_pressure', 'vaporization_temperature', 'thermophoretic_co', 'burn_hreact', 'burn_hreact_fraction', 'devolatilization_model', 'combustion_model', 'scattering_factor', 'emissivity']
    _child_classes = dict(
        name=name,
        chemical_formula=chemical_formula,
        density=density_4,
        thermal_conductivity=thermal_conductivity_3,
        latent_heat=latent_heat_1,
        volatile_fraction=volatile_fraction,
        combustible_fraction=combustible_fraction,
        swelling_coefficient=swelling_coefficient,
        burn_stoichiometry=burn_stoichiometry,
        specific_heat=specific_heat_3,
        binary_diffusivity=binary_diffusivity_2,
        diffusivity_reference_pressure=diffusivity_reference_pressure,
        vaporization_temperature=vaporization_temperature,
        thermophoretic_co=thermophoretic_co,
        burn_hreact=burn_hreact,
        burn_hreact_fraction=burn_hreact_fraction,
        devolatilization_model=devolatilization_model,
        combustion_model=combustion_model,
        scattering_factor=scattering_factor_1,
        emissivity=emissivity_1,
    )
    return_type = 'object'

class combusting_particle(NamedObject[combusting_particle_child], CreatableNamedObjectMixinOld[combusting_particle_child]):
    """
    'combusting_particle' child.
    """
    _version = '241'
    fluent_name = 'combusting-particle'
    _python_name = 'combusting_particle'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = combusting_particle_child
    return_type = 'object'

class density_5(Group):
    """
    'density' child.
    """
    _version = '241'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'compressible_liquid', 'user_defined_function', 'value']
    _child_classes = dict(
        option=option_7,
        compressible_liquid=compressible_liquid,
        user_defined_function=user_defined_function,
        value=value_3,
    )
    return_type = 'object'

class specific_heat_4(Group):
    """
    'specific_heat' child.
    """
    _version = '241'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'user_defined_function', 'value']
    _child_classes = dict(
        option=option_7,
        user_defined_function=user_defined_function,
        value=value_3,
    )
    return_type = 'object'

class particle_species_child(Group):
    """
    'child_object_type' of particle_species.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'particle_species_child'
    child_names = ['name', 'chemical_formula', 'density', 'thermal_conductivity', 'vaporization_model', 'thermolysis_model', 'latent_heat', 'volatile_fraction', 'heat_of_pyrolysis', 'specific_heat', 'binary_diffusivity', 'diffusivity_reference_pressure', 'averaging_coefficient_t', 'averaging_coefficient_y', 'vapor_pressure', 'molecular_weight', 'vaporization_temperature', 'boiling_point', 'thermophoretic_co', 'scattering_factor', 'emissivity', 'viscosity', 'dpm_surften', 'electric_conductivity', 'dual_electric_conductivity', 'magnetic_permeability', 'charge_density', 'formation_entropy', 'formation_enthalpy', 'reference_temperature']
    _child_classes = dict(
        name=name,
        chemical_formula=chemical_formula,
        density=density_3,
        thermal_conductivity=thermal_conductivity_3,
        vaporization_model=vaporization_model,
        thermolysis_model=thermolysis_model,
        latent_heat=latent_heat_1,
        volatile_fraction=volatile_fraction,
        heat_of_pyrolysis=heat_of_pyrolysis,
        specific_heat=specific_heat_3,
        binary_diffusivity=binary_diffusivity,
        diffusivity_reference_pressure=diffusivity_reference_pressure,
        averaging_coefficient_t=averaging_coefficient_t,
        averaging_coefficient_y=averaging_coefficient_y,
        vapor_pressure=vapor_pressure,
        molecular_weight=molecular_weight_1,
        vaporization_temperature=vaporization_temperature,
        boiling_point=boiling_point,
        thermophoretic_co=thermophoretic_co,
        scattering_factor=scattering_factor_1,
        emissivity=emissivity_1,
        viscosity=viscosity_2,
        dpm_surften=dpm_surften_1,
        electric_conductivity=electric_conductivity_1,
        dual_electric_conductivity=dual_electric_conductivity_1,
        magnetic_permeability=magnetic_permeability,
        charge_density=charge_density,
        formation_entropy=formation_entropy,
        formation_enthalpy=formation_enthalpy,
        reference_temperature=reference_temperature,
    )
    return_type = 'object'

class particle_species(NamedObject[particle_species_child], CreatableNamedObjectMixinOld[particle_species_child]):
    """
    'particle_species' child.
    """
    _version = '241'
    fluent_name = 'particle-species'
    _python_name = 'particle_species'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = particle_species_child
    return_type = 'object'

class species_4(Group):
    """
    'species' child.
    """
    _version = '241'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['particle_species', 'last_species']
    _child_classes = dict(
        particle_species=particle_species,
        last_species=last_species,
    )
    return_type = 'object'

class vp_equilib(Group):
    """
    'vp_equilib' child.
    """
    _version = '241'
    fluent_name = 'vp-equilib'
    _python_name = 'vp_equilib'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_7,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class emissivity_2(Group):
    """
    'emissivity' child.
    """
    _version = '241'
    fluent_name = 'emissivity'
    _python_name = 'emissivity'
    child_names = ['option']
    _child_classes = dict(
        option=option_7,
    )
    return_type = 'object'

class scattering_factor_2(Group):
    """
    'scattering_factor' child.
    """
    _version = '241'
    fluent_name = 'scattering-factor'
    _python_name = 'scattering_factor'
    child_names = ['option']
    _child_classes = dict(
        option=option_7,
    )
    return_type = 'object'

class reaction_model(Group):
    """
    'reaction_model' child.
    """
    _version = '241'
    fluent_name = 'reaction-model'
    _python_name = 'reaction_model'
    child_names = ['option']
    _child_classes = dict(
        option=option_7,
    )
    return_type = 'object'

class particle_mixture_child(Group):
    """
    'child_object_type' of particle_mixture.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'particle_mixture_child'
    child_names = ['name', 'chemical_formula', 'density', 'specific_heat', 'species', 'vp_equilib', 'thermal_conductivity', 'viscosity', 'dpm_surften', 'emissivity', 'scattering_factor', 'vaporization_model', 'averaging_coefficient_t', 'averaging_coefficient_y', 'thermophoretic_co', 'reaction_model']
    _child_classes = dict(
        name=name,
        chemical_formula=chemical_formula,
        density=density_5,
        specific_heat=specific_heat_4,
        species=species_4,
        vp_equilib=vp_equilib,
        thermal_conductivity=thermal_conductivity_3,
        viscosity=viscosity_2,
        dpm_surften=dpm_surften,
        emissivity=emissivity_2,
        scattering_factor=scattering_factor_2,
        vaporization_model=vaporization_model,
        averaging_coefficient_t=averaging_coefficient_t,
        averaging_coefficient_y=averaging_coefficient_y,
        thermophoretic_co=thermophoretic_co,
        reaction_model=reaction_model,
    )
    return_type = 'object'

class particle_mixture(NamedObject[particle_mixture_child], CreatableNamedObjectMixinOld[particle_mixture_child]):
    """
    'particle_mixture' child.
    """
    _version = '241'
    fluent_name = 'particle-mixture'
    _python_name = 'particle_mixture'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = particle_mixture_child
    return_type = 'object'

class list_materials(Command):
    """
    List all locally-stored materials.
    """
    _version = '241'
    fluent_name = 'list-materials'
    _python_name = 'list_materials'
    return_type = 'object'

class list_properties_2(Command):
    """
    List the properties of a locally-stored material.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '241'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    argument_names = ['name']
    _child_classes = dict(
        name=name_1,
    )
    return_type = 'object'

class materials(Group):
    """
    'materials' child.
    """
    _version = '241'
    fluent_name = 'materials'
    _python_name = 'materials'
    child_names = ['database', 'fluid', 'solid', 'mixture', 'inert_particle', 'droplet_particle', 'combusting_particle', 'particle_mixture']
    command_names = ['list_materials', 'list_properties']
    _child_classes = dict(
        database=database,
        fluid=fluid,
        solid=solid,
        mixture=mixture,
        inert_particle=inert_particle,
        droplet_particle=droplet_particle,
        combusting_particle=combusting_particle,
        particle_mixture=particle_mixture,
        list_materials=list_materials,
        list_properties=list_properties_2,
    )
    return_type = 'object'

class material_1(String, AllowedValuesMixin):
    """
    Material Name.
    """
    _version = '241'
    fluent_name = 'material'
    _python_name = 'material'
    return_type = 'object'

class cylindrical_fixed_var(Boolean, AllowedValuesMixin):
    """
    Local Coordinate System for Fixed Velocities.
    """
    _version = '241'
    fluent_name = 'cylindrical-fixed-var?'
    _python_name = 'cylindrical_fixed_var'
    return_type = 'object'

class participates_in_radiation(Boolean, AllowedValuesMixin):
    """
    Participates in radiation.
    """
    _version = '241'
    fluent_name = 'participates-in-radiation'
    _python_name = 'participates_in_radiation'
    return_type = 'object'

class contact_property(Boolean, AllowedValuesMixin):
    """
    Contact Property Thread?.
    """
    _version = '241'
    fluent_name = 'contact-property?'
    _python_name = 'contact_property'
    return_type = 'object'

class active_wetsteam_zone(Boolean, AllowedValuesMixin):
    """
    Is Active Wetsteam Zone?.
    """
    _version = '241'
    fluent_name = 'active-wetsteam-zone?'
    _python_name = 'active_wetsteam_zone'
    return_type = 'object'

class vapor_phase_realgas(Integer, AllowedValuesMixin):
    """
    Zone real-gas state:.
    """
    _version = '241'
    fluent_name = 'vapor-phase-realgas'
    _python_name = 'vapor_phase_realgas'
    return_type = 'object'

class laminar(Boolean, AllowedValuesMixin):
    """
    Laminar zone?.
    """
    _version = '241'
    fluent_name = 'laminar?'
    _python_name = 'laminar'
    return_type = 'object'

class glass(Boolean, AllowedValuesMixin):
    """
    Glass zone?.
    """
    _version = '241'
    fluent_name = 'glass?'
    _python_name = 'glass'
    return_type = 'object'

class frame_motion(Boolean, AllowedValuesMixin):
    """
    Frame Motion?.
    """
    _version = '241'
    fluent_name = 'frame-motion'
    _python_name = 'frame_motion'
    return_type = 'object'

class mrf_relative_to_thread(String, AllowedValuesMixin):
    """
    Relative To Cell Zone.
    """
    _version = '241'
    fluent_name = 'mrf-relative-to-thread'
    _python_name = 'mrf_relative_to_thread'
    return_type = 'object'

class option_8(String, AllowedValuesMixin):
    """
    How the boundary condition will be defined.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class value_4(Real):
    """
    Value as constant or expression.
    """
    _version = '241'
    fluent_name = 'value'
    _python_name = 'value'
    return_type = 'object'

class profile_name(String, AllowedValuesMixin):
    """
    The name of the profile.
    """
    _version = '241'
    fluent_name = 'profile-name'
    _python_name = 'profile_name'
    return_type = 'object'

class field_name(String, AllowedValuesMixin):
    """
    The name of the field.
    """
    _version = '241'
    fluent_name = 'field-name'
    _python_name = 'field_name'
    return_type = 'object'

class udf(String, AllowedValuesMixin):
    """
    The name of the user-defined function.
    """
    _version = '241'
    fluent_name = 'udf'
    _python_name = 'udf'
    return_type = 'object'

class mrf_omega(Group):
    """
    Reference Frame Rotation Speed.
    """
    _version = '241'
    fluent_name = 'mrf-omega'
    _python_name = 'mrf_omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class reference_frame_velocity_child(Group):
    """
    'child_object_type' of reference_frame_velocity.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'reference_frame_velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class reference_frame_velocity(ListObject[reference_frame_velocity_child]):
    """
    'reference_frame_velocity' child.
    """
    _version = '241'
    fluent_name = 'reference-frame-velocity'
    _python_name = 'reference_frame_velocity'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = reference_frame_velocity_child
    return_type = 'object'

class reference_frame_axis_origin_child(Group):
    """
    'child_object_type' of reference_frame_axis_origin.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'reference_frame_axis_origin_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class reference_frame_axis_origin(ListObject[reference_frame_axis_origin_child]):
    """
    'reference_frame_axis_origin' child.
    """
    _version = '241'
    fluent_name = 'reference-frame-axis-origin'
    _python_name = 'reference_frame_axis_origin'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = reference_frame_axis_origin_child
    return_type = 'object'

class reference_frame_axis_direction_child(Group):
    """
    'child_object_type' of reference_frame_axis_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'reference_frame_axis_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class reference_frame_axis_direction(ListObject[reference_frame_axis_direction_child]):
    """
    'reference_frame_axis_direction' child.
    """
    _version = '241'
    fluent_name = 'reference-frame-axis-direction'
    _python_name = 'reference_frame_axis_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = reference_frame_axis_direction_child
    return_type = 'object'

class reference_frame_zone_motion_function(String, AllowedValuesMixin):
    """
    Reference Frame User Defined Zone Motion Function.
    """
    _version = '241'
    fluent_name = 'reference-frame-zone-motion-function'
    _python_name = 'reference_frame_zone_motion_function'
    return_type = 'object'

class reference_frame_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'
    child_names = ['frame_motion', 'mrf_relative_to_thread', 'mrf_omega', 'reference_frame_velocity', 'reference_frame_axis_origin', 'reference_frame_axis_direction', 'reference_frame_zone_motion_function']
    _child_classes = dict(
        frame_motion=frame_motion,
        mrf_relative_to_thread=mrf_relative_to_thread,
        mrf_omega=mrf_omega,
        reference_frame_velocity=reference_frame_velocity,
        reference_frame_axis_origin=reference_frame_axis_origin,
        reference_frame_axis_direction=reference_frame_axis_direction,
        reference_frame_zone_motion_function=reference_frame_zone_motion_function,
    )
    return_type = 'object'

class mesh_motion_1(Boolean, AllowedValuesMixin):
    """
    Mesh Motion?.
    """
    _version = '241'
    fluent_name = 'mesh-motion'
    _python_name = 'mesh_motion'
    return_type = 'object'

class mgrid_enable_transient(Boolean, AllowedValuesMixin):
    """
    'mgrid_enable_transient' child.
    """
    _version = '241'
    fluent_name = 'mgrid-enable-transient?'
    _python_name = 'mgrid_enable_transient'
    return_type = 'object'

class mgrid_relative_to_thread(String, AllowedValuesMixin):
    """
    Relative To Cell Zone.
    """
    _version = '241'
    fluent_name = 'mgrid-relative-to-thread'
    _python_name = 'mgrid_relative_to_thread'
    return_type = 'object'

class mgrid_omega(Group):
    """
    Moving Mesh Rotation Speed.
    """
    _version = '241'
    fluent_name = 'mgrid-omega'
    _python_name = 'mgrid_omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class moving_mesh_velocity_child(Group):
    """
    'child_object_type' of moving_mesh_velocity.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'moving_mesh_velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class moving_mesh_velocity(ListObject[moving_mesh_velocity_child]):
    """
    'moving_mesh_velocity' child.
    """
    _version = '241'
    fluent_name = 'moving-mesh-velocity'
    _python_name = 'moving_mesh_velocity'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = moving_mesh_velocity_child
    return_type = 'object'

class moving_mesh_axis_origin_child(Group):
    """
    'child_object_type' of moving_mesh_axis_origin.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'moving_mesh_axis_origin_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class moving_mesh_axis_origin(ListObject[moving_mesh_axis_origin_child]):
    """
    'moving_mesh_axis_origin' child.
    """
    _version = '241'
    fluent_name = 'moving-mesh-axis-origin'
    _python_name = 'moving_mesh_axis_origin'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = moving_mesh_axis_origin_child
    return_type = 'object'

class moving_mesh_axis_direction_child(Group):
    """
    'child_object_type' of moving_mesh_axis_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'moving_mesh_axis_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class moving_mesh_axis_direction(ListObject[moving_mesh_axis_direction_child]):
    """
    'moving_mesh_axis_direction' child.
    """
    _version = '241'
    fluent_name = 'moving-mesh-axis-direction'
    _python_name = 'moving_mesh_axis_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = moving_mesh_axis_direction_child
    return_type = 'object'

class moving_mesh_zone_motion_function(String, AllowedValuesMixin):
    """
    Moving Mesh User Defined Zone Motion Function.
    """
    _version = '241'
    fluent_name = 'moving-mesh-zone-motion-function'
    _python_name = 'moving_mesh_zone_motion_function'
    return_type = 'object'

class mesh_motion(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'mesh-motion'
    _python_name = 'mesh_motion'
    child_names = ['mesh_motion', 'mgrid_enable_transient', 'mgrid_relative_to_thread', 'mgrid_omega', 'moving_mesh_velocity', 'moving_mesh_axis_origin', 'moving_mesh_axis_direction', 'moving_mesh_zone_motion_function']
    _child_classes = dict(
        mesh_motion=mesh_motion_1,
        mgrid_enable_transient=mgrid_enable_transient,
        mgrid_relative_to_thread=mgrid_relative_to_thread,
        mgrid_omega=mgrid_omega,
        moving_mesh_velocity=moving_mesh_velocity,
        moving_mesh_axis_origin=moving_mesh_axis_origin,
        moving_mesh_axis_direction=moving_mesh_axis_direction,
        moving_mesh_zone_motion_function=moving_mesh_zone_motion_function,
    )
    return_type = 'object'

class porous(Boolean, AllowedValuesMixin):
    """
    Porous zone?.
    """
    _version = '241'
    fluent_name = 'porous?'
    _python_name = 'porous'
    return_type = 'object'

class cursys_name(String, AllowedValuesMixin):
    """
    Coordinate System.
    """
    _version = '241'
    fluent_name = 'cursys-name'
    _python_name = 'cursys_name'
    return_type = 'object'

class dir_spec_cond(String, AllowedValuesMixin):
    """
    Direction Specification.
    """
    _version = '241'
    fluent_name = 'dir-spec-cond'
    _python_name = 'dir_spec_cond'
    return_type = 'object'

class direction_1_vector_child(Group):
    """
    'child_object_type' of direction_1_vector.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'direction_1_vector_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_1_vector(ListObject[direction_1_vector_child]):
    """
    'direction_1_vector' child.
    """
    _version = '241'
    fluent_name = 'direction-1-vector'
    _python_name = 'direction_1_vector'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = direction_1_vector_child
    return_type = 'object'

class direction_2_vector_child(Group):
    """
    'child_object_type' of direction_2_vector.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'direction_2_vector_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_2_vector(ListObject[direction_2_vector_child]):
    """
    'direction_2_vector' child.
    """
    _version = '241'
    fluent_name = 'direction-2-vector'
    _python_name = 'direction_2_vector'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = direction_2_vector_child
    return_type = 'object'

class cone_axis_vector_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of cone_axis_vector.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'cone_axis_vector_child'
    return_type = 'object'

class cone_axis_vector(ListObject[cone_axis_vector_child]):
    """
    'cone_axis_vector' child.
    """
    _version = '241'
    fluent_name = 'cone-axis-vector'
    _python_name = 'cone_axis_vector'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = cone_axis_vector_child
    return_type = 'object'

class point_on_cone_axis_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of point_on_cone_axis.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'point_on_cone_axis_child'
    return_type = 'object'

class point_on_cone_axis(ListObject[point_on_cone_axis_child]):
    """
    'point_on_cone_axis' child.
    """
    _version = '241'
    fluent_name = 'point-on-cone-axis'
    _python_name = 'point_on_cone_axis'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = point_on_cone_axis_child
    return_type = 'object'

class cone_angle(Real, AllowedValuesMixin):
    """
    Half Angle of Cone Relative to its Axis.
    """
    _version = '241'
    fluent_name = 'cone-angle'
    _python_name = 'cone_angle'
    return_type = 'object'

class rel_vel_resistance(Boolean, AllowedValuesMixin):
    """
    Relative Velocity Resistance Formulation?.
    """
    _version = '241'
    fluent_name = 'rel-vel-resistance?'
    _python_name = 'rel_vel_resistance'
    return_type = 'object'

class viscous_resistance_child(Group):
    """
    'child_object_type' of viscous_resistance.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'viscous_resistance_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class viscous_resistance(ListObject[viscous_resistance_child]):
    """
    'viscous_resistance' child.
    """
    _version = '241'
    fluent_name = 'viscous-resistance'
    _python_name = 'viscous_resistance'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = viscous_resistance_child
    return_type = 'object'

class alt_inertial_form(Boolean, AllowedValuesMixin):
    """
    Alternative formulation for inertial resistance?.
    """
    _version = '241'
    fluent_name = 'alt-inertial-form?'
    _python_name = 'alt_inertial_form'
    return_type = 'object'

class inertial_resistance_child(Group):
    """
    'child_object_type' of inertial_resistance.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'inertial_resistance_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class inertial_resistance(ListObject[inertial_resistance_child]):
    """
    'inertial_resistance' child.
    """
    _version = '241'
    fluent_name = 'inertial-resistance'
    _python_name = 'inertial_resistance'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = inertial_resistance_child
    return_type = 'object'

class power_law_c0(Real, AllowedValuesMixin):
    """
    'power_law_c0' child.
    """
    _version = '241'
    fluent_name = 'power-law-c0'
    _python_name = 'power_law_c0'
    return_type = 'object'

class power_law_c1(Real, AllowedValuesMixin):
    """
    'power_law_c1' child.
    """
    _version = '241'
    fluent_name = 'power-law-c1'
    _python_name = 'power_law_c1'
    return_type = 'object'

class porosity(Group):
    """
    Porosity.
    """
    _version = '241'
    fluent_name = 'porosity'
    _python_name = 'porosity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class function_of(String, AllowedValuesMixin):
    """
    What variable this object is a function of.
    """
    _version = '241'
    fluent_name = 'function-of'
    _python_name = 'function_of'
    return_type = 'object'

class relative_viscosity(Group):
    """
    Relative Viscosity.
    """
    _version = '241'
    fluent_name = 'relative-viscosity'
    _python_name = 'relative_viscosity'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class none(Boolean, AllowedValuesMixin):
    """
    Enable Relative Permeability?.
    """
    _version = '241'
    fluent_name = 'none?'
    _python_name = 'none'
    return_type = 'object'

class corey(Boolean, AllowedValuesMixin):
    """
    Two-Phase Corey's Model?.
    """
    _version = '241'
    fluent_name = 'corey?'
    _python_name = 'corey'
    return_type = 'object'

class stone_1(Boolean, AllowedValuesMixin):
    """
    Three-Phase Stone-1?.
    """
    _version = '241'
    fluent_name = 'stone-1?'
    _python_name = 'stone_1'
    return_type = 'object'

class stone_2(Boolean, AllowedValuesMixin):
    """
    Three-Phase Stone-2?.
    """
    _version = '241'
    fluent_name = 'stone-2?'
    _python_name = 'stone_2'
    return_type = 'object'

class rel_perm_limit_p1(Real, AllowedValuesMixin):
    """
    Minimum Relative Permeability.
    """
    _version = '241'
    fluent_name = 'rel-perm-limit-p1'
    _python_name = 'rel_perm_limit_p1'
    return_type = 'object'

class rel_perm_limit_p2(Real, AllowedValuesMixin):
    """
    Minimum Relative Permeability.
    """
    _version = '241'
    fluent_name = 'rel-perm-limit-p2'
    _python_name = 'rel_perm_limit_p2'
    return_type = 'object'

class ref_perm_p1(Real, AllowedValuesMixin):
    """
    Reference Relative Permeability.
    """
    _version = '241'
    fluent_name = 'ref-perm-p1'
    _python_name = 'ref_perm_p1'
    return_type = 'object'

class exp_p1(Real, AllowedValuesMixin):
    """
    Corey Exponent.
    """
    _version = '241'
    fluent_name = 'exp-p1'
    _python_name = 'exp_p1'
    return_type = 'object'

class res_sat_p1(Real, AllowedValuesMixin):
    """
    Residual Saturation.
    """
    _version = '241'
    fluent_name = 'res-sat-p1'
    _python_name = 'res_sat_p1'
    return_type = 'object'

class ref_perm_p2(Real, AllowedValuesMixin):
    """
    Reference Relative Permeability.
    """
    _version = '241'
    fluent_name = 'ref-perm-p2'
    _python_name = 'ref_perm_p2'
    return_type = 'object'

class exp_p2(Real, AllowedValuesMixin):
    """
    Corey Exponent.
    """
    _version = '241'
    fluent_name = 'exp-p2'
    _python_name = 'exp_p2'
    return_type = 'object'

class res_sat_p2(Real, AllowedValuesMixin):
    """
    Residual Saturation.
    """
    _version = '241'
    fluent_name = 'res-sat-p2'
    _python_name = 'res_sat_p2'
    return_type = 'object'

class ref_perm_p3(Real, AllowedValuesMixin):
    """
    Reference Relative Permeability.
    """
    _version = '241'
    fluent_name = 'ref-perm-p3'
    _python_name = 'ref_perm_p3'
    return_type = 'object'

class exp_p3(Real, AllowedValuesMixin):
    """
    Corey Exponent.
    """
    _version = '241'
    fluent_name = 'exp-p3'
    _python_name = 'exp_p3'
    return_type = 'object'

class res_sat_p3(Real, AllowedValuesMixin):
    """
    Residual Saturation.
    """
    _version = '241'
    fluent_name = 'res-sat-p3'
    _python_name = 'res_sat_p3'
    return_type = 'object'

class capillary_pressure_1(Group):
    """
    Capillary Pressure.
    """
    _version = '241'
    fluent_name = 'capillary-pressure'
    _python_name = 'capillary_pressure'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class max_capillary_pressure(Real, AllowedValuesMixin):
    """
    Maximum Capillary Pressure.
    """
    _version = '241'
    fluent_name = 'max-capillary-pressure'
    _python_name = 'max_capillary_pressure'
    return_type = 'object'

class van_genuchten_pg(Real, AllowedValuesMixin):
    """
    Entry pressure.
    """
    _version = '241'
    fluent_name = 'van-genuchten-pg'
    _python_name = 'van_genuchten_pg'
    return_type = 'object'

class van_genuchten_ng(Real, AllowedValuesMixin):
    """
    Pore size exponent.
    """
    _version = '241'
    fluent_name = 'van-genuchten-ng'
    _python_name = 'van_genuchten_ng'
    return_type = 'object'

class skjaeveland_nw_pc_coef(Real, AllowedValuesMixin):
    """
    Entry pressure.
    """
    _version = '241'
    fluent_name = 'skjaeveland-nw-pc-coef'
    _python_name = 'skjaeveland_nw_pc_coef'
    return_type = 'object'

class skjaeveland_nw_pc_pwr(Real, AllowedValuesMixin):
    """
    Pore size exponent.
    """
    _version = '241'
    fluent_name = 'skjaeveland-nw-pc-pwr'
    _python_name = 'skjaeveland_nw_pc_pwr'
    return_type = 'object'

class skjaeveland_wet_pc_coef(Real, AllowedValuesMixin):
    """
    Entry pressure.
    """
    _version = '241'
    fluent_name = 'skjaeveland-wet-pc-coef'
    _python_name = 'skjaeveland_wet_pc_coef'
    return_type = 'object'

class skjaeveland_wet_pc_pwr(Real, AllowedValuesMixin):
    """
    Pore size exponent.
    """
    _version = '241'
    fluent_name = 'skjaeveland-wet-pc-pwr'
    _python_name = 'skjaeveland_wet_pc_pwr'
    return_type = 'object'

class brooks_corey_pe(Real, AllowedValuesMixin):
    """
    Entry Pressure.
    """
    _version = '241'
    fluent_name = 'brooks-corey-pe'
    _python_name = 'brooks_corey_pe'
    return_type = 'object'

class brooks_corey_ng(Real, AllowedValuesMixin):
    """
    Pore size exponent.
    """
    _version = '241'
    fluent_name = 'brooks-corey-ng'
    _python_name = 'brooks_corey_ng'
    return_type = 'object'

class leverett_con_ang(Real, AllowedValuesMixin):
    """
    Contact Angle.
    """
    _version = '241'
    fluent_name = 'leverett-con-ang'
    _python_name = 'leverett_con_ang'
    return_type = 'object'

class rp_cbox_p1(String, AllowedValuesMixin):
    """
    'rp_cbox_p1' child.
    """
    _version = '241'
    fluent_name = 'rp-cbox-p1'
    _python_name = 'rp_cbox_p1'
    return_type = 'object'

class rp_edit_p1(String, AllowedValuesMixin):
    """
    'rp_edit_p1' child.
    """
    _version = '241'
    fluent_name = 'rp-edit-p1'
    _python_name = 'rp_edit_p1'
    return_type = 'object'

class rel_perm_tabular_p1(Boolean, AllowedValuesMixin):
    """
    'rel_perm_tabular_p1' child.
    """
    _version = '241'
    fluent_name = 'rel-perm-tabular-p1?'
    _python_name = 'rel_perm_tabular_p1'
    return_type = 'object'

class rel_perm_table_p1(String, AllowedValuesMixin):
    """
    'rel_perm_table_p1' child.
    """
    _version = '241'
    fluent_name = 'rel-perm-table-p1'
    _python_name = 'rel_perm_table_p1'
    return_type = 'object'

class rel_perm_satw_p1(String, AllowedValuesMixin):
    """
    'rel_perm_satw_p1' child.
    """
    _version = '241'
    fluent_name = 'rel-perm-satw-p1'
    _python_name = 'rel_perm_satw_p1'
    return_type = 'object'

class rel_perm_rp_p1(String, AllowedValuesMixin):
    """
    'rel_perm_rp_p1' child.
    """
    _version = '241'
    fluent_name = 'rel-perm-rp-p1'
    _python_name = 'rel_perm_rp_p1'
    return_type = 'object'

class rp_cbox_p2(String, AllowedValuesMixin):
    """
    'rp_cbox_p2' child.
    """
    _version = '241'
    fluent_name = 'rp-cbox-p2'
    _python_name = 'rp_cbox_p2'
    return_type = 'object'

class rp_edit_p2(String, AllowedValuesMixin):
    """
    'rp_edit_p2' child.
    """
    _version = '241'
    fluent_name = 'rp-edit-p2'
    _python_name = 'rp_edit_p2'
    return_type = 'object'

class rel_perm_tabular_p2(Boolean, AllowedValuesMixin):
    """
    'rel_perm_tabular_p2' child.
    """
    _version = '241'
    fluent_name = 'rel-perm-tabular-p2?'
    _python_name = 'rel_perm_tabular_p2'
    return_type = 'object'

class rel_perm_table_p2(String, AllowedValuesMixin):
    """
    'rel_perm_table_p2' child.
    """
    _version = '241'
    fluent_name = 'rel-perm-table-p2'
    _python_name = 'rel_perm_table_p2'
    return_type = 'object'

class rel_perm_satw_p2(String, AllowedValuesMixin):
    """
    'rel_perm_satw_p2' child.
    """
    _version = '241'
    fluent_name = 'rel-perm-satw-p2'
    _python_name = 'rel_perm_satw_p2'
    return_type = 'object'

class rel_perm_rp_p2(String, AllowedValuesMixin):
    """
    'rel_perm_rp_p2' child.
    """
    _version = '241'
    fluent_name = 'rel-perm-rp-p2'
    _python_name = 'rel_perm_rp_p2'
    return_type = 'object'

class wetting_phase(String, AllowedValuesMixin):
    """
    Wetting Phase.
    """
    _version = '241'
    fluent_name = 'wetting-phase'
    _python_name = 'wetting_phase'
    return_type = 'object'

class non_wetting_phase(String, AllowedValuesMixin):
    """
    Non Wetting Phase.
    """
    _version = '241'
    fluent_name = 'non-wetting-phase'
    _python_name = 'non_wetting_phase'
    return_type = 'object'

class equib_thermal(Boolean, AllowedValuesMixin):
    """
    Equilibrium Thermal Model (if no, Non-Equilibrium)?.
    """
    _version = '241'
    fluent_name = 'equib-thermal?'
    _python_name = 'equib_thermal'
    return_type = 'object'

class non_equib_thermal(Boolean, AllowedValuesMixin):
    """
    Non-Equilibrium Thermal Model?.
    """
    _version = '241'
    fluent_name = 'non-equib-thermal?'
    _python_name = 'non_equib_thermal'
    return_type = 'object'

class solid_material(String, AllowedValuesMixin):
    """
    Solid Material Name.
    """
    _version = '241'
    fluent_name = 'solid-material'
    _python_name = 'solid_material'
    return_type = 'object'

class area_density(Group):
    """
    Interfacial Area Density.
    """
    _version = '241'
    fluent_name = 'area-density'
    _python_name = 'area_density'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class heat_transfer_coeff(Group):
    """
    Heat Transfer Coefficient.
    """
    _version = '241'
    fluent_name = 'heat-transfer-coeff'
    _python_name = 'heat_transfer_coeff'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class porous_structure(Boolean, AllowedValuesMixin):
    """
    Porous Structure?.
    """
    _version = '241'
    fluent_name = 'porous-structure?'
    _python_name = 'porous_structure'
    return_type = 'object'

class structure_material(String, AllowedValuesMixin):
    """
    Structure Material Name.
    """
    _version = '241'
    fluent_name = 'structure-material'
    _python_name = 'structure_material'
    return_type = 'object'

class anisotropic_spe_diff(Boolean, AllowedValuesMixin):
    """
    Anisotropic Species Diffusion?.
    """
    _version = '241'
    fluent_name = 'anisotropic-spe-diff?'
    _python_name = 'anisotropic_spe_diff'
    return_type = 'object'

class spe_diff_xx(Real, AllowedValuesMixin):
    """
    XX diffusion matrix coefficient.
    """
    _version = '241'
    fluent_name = 'spe-diff-xx'
    _python_name = 'spe_diff_xx'
    return_type = 'object'

class spe_diff_xy(Real, AllowedValuesMixin):
    """
    XY diffusion matrix coefficient.
    """
    _version = '241'
    fluent_name = 'spe-diff-xy'
    _python_name = 'spe_diff_xy'
    return_type = 'object'

class spe_diff_xz(Real, AllowedValuesMixin):
    """
    XZ diffusion matrix coefficient.
    """
    _version = '241'
    fluent_name = 'spe-diff-xz'
    _python_name = 'spe_diff_xz'
    return_type = 'object'

class spe_diff_yx(Real, AllowedValuesMixin):
    """
    YX diffusion matrix coefficient.
    """
    _version = '241'
    fluent_name = 'spe-diff-yx'
    _python_name = 'spe_diff_yx'
    return_type = 'object'

class spe_diff_yy(Real, AllowedValuesMixin):
    """
    YY diffusion matrix coefficient.
    """
    _version = '241'
    fluent_name = 'spe-diff-yy'
    _python_name = 'spe_diff_yy'
    return_type = 'object'

class spe_diff_yz(Real, AllowedValuesMixin):
    """
    YZ diffusion matrix coefficient.
    """
    _version = '241'
    fluent_name = 'spe-diff-yz'
    _python_name = 'spe_diff_yz'
    return_type = 'object'

class spe_diff_zx(Real, AllowedValuesMixin):
    """
    ZX diffusion matrix coefficient.
    """
    _version = '241'
    fluent_name = 'spe-diff-zx'
    _python_name = 'spe_diff_zx'
    return_type = 'object'

class spe_diff_zy(Real, AllowedValuesMixin):
    """
    ZY diffusion matrix coefficient.
    """
    _version = '241'
    fluent_name = 'spe-diff-zy'
    _python_name = 'spe_diff_zy'
    return_type = 'object'

class spe_diff_zz(Real, AllowedValuesMixin):
    """
    ZZ diffusion matrix coefficient.
    """
    _version = '241'
    fluent_name = 'spe-diff-zz'
    _python_name = 'spe_diff_zz'
    return_type = 'object'

class porous_zone(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'porous-zone'
    _python_name = 'porous_zone'
    child_names = ['porous', 'cursys_name', 'dir_spec_cond', 'direction_1_vector', 'direction_2_vector', 'cone_axis_vector', 'point_on_cone_axis', 'cone_angle', 'rel_vel_resistance', 'viscous_resistance', 'alt_inertial_form', 'inertial_resistance', 'power_law_c0', 'power_law_c1', 'porosity', 'relative_viscosity', 'none', 'corey', 'stone_1', 'stone_2', 'rel_perm_limit_p1', 'rel_perm_limit_p2', 'ref_perm_p1', 'exp_p1', 'res_sat_p1', 'ref_perm_p2', 'exp_p2', 'res_sat_p2', 'ref_perm_p3', 'exp_p3', 'res_sat_p3', 'capillary_pressure', 'max_capillary_pressure', 'van_genuchten_pg', 'van_genuchten_ng', 'skjaeveland_nw_pc_coef', 'skjaeveland_nw_pc_pwr', 'skjaeveland_wet_pc_coef', 'skjaeveland_wet_pc_pwr', 'brooks_corey_pe', 'brooks_corey_ng', 'leverett_con_ang', 'rp_cbox_p1', 'rp_edit_p1', 'rel_perm_tabular_p1', 'rel_perm_table_p1', 'rel_perm_satw_p1', 'rel_perm_rp_p1', 'rp_cbox_p2', 'rp_edit_p2', 'rel_perm_tabular_p2', 'rel_perm_table_p2', 'rel_perm_satw_p2', 'rel_perm_rp_p2', 'wetting_phase', 'non_wetting_phase', 'equib_thermal', 'non_equib_thermal', 'solid_material', 'area_density', 'heat_transfer_coeff', 'porous_structure', 'structure_material', 'anisotropic_spe_diff', 'spe_diff_xx', 'spe_diff_xy', 'spe_diff_xz', 'spe_diff_yx', 'spe_diff_yy', 'spe_diff_yz', 'spe_diff_zx', 'spe_diff_zy', 'spe_diff_zz']
    _child_classes = dict(
        porous=porous,
        cursys_name=cursys_name,
        dir_spec_cond=dir_spec_cond,
        direction_1_vector=direction_1_vector,
        direction_2_vector=direction_2_vector,
        cone_axis_vector=cone_axis_vector,
        point_on_cone_axis=point_on_cone_axis,
        cone_angle=cone_angle,
        rel_vel_resistance=rel_vel_resistance,
        viscous_resistance=viscous_resistance,
        alt_inertial_form=alt_inertial_form,
        inertial_resistance=inertial_resistance,
        power_law_c0=power_law_c0,
        power_law_c1=power_law_c1,
        porosity=porosity,
        relative_viscosity=relative_viscosity,
        none=none,
        corey=corey,
        stone_1=stone_1,
        stone_2=stone_2,
        rel_perm_limit_p1=rel_perm_limit_p1,
        rel_perm_limit_p2=rel_perm_limit_p2,
        ref_perm_p1=ref_perm_p1,
        exp_p1=exp_p1,
        res_sat_p1=res_sat_p1,
        ref_perm_p2=ref_perm_p2,
        exp_p2=exp_p2,
        res_sat_p2=res_sat_p2,
        ref_perm_p3=ref_perm_p3,
        exp_p3=exp_p3,
        res_sat_p3=res_sat_p3,
        capillary_pressure=capillary_pressure_1,
        max_capillary_pressure=max_capillary_pressure,
        van_genuchten_pg=van_genuchten_pg,
        van_genuchten_ng=van_genuchten_ng,
        skjaeveland_nw_pc_coef=skjaeveland_nw_pc_coef,
        skjaeveland_nw_pc_pwr=skjaeveland_nw_pc_pwr,
        skjaeveland_wet_pc_coef=skjaeveland_wet_pc_coef,
        skjaeveland_wet_pc_pwr=skjaeveland_wet_pc_pwr,
        brooks_corey_pe=brooks_corey_pe,
        brooks_corey_ng=brooks_corey_ng,
        leverett_con_ang=leverett_con_ang,
        rp_cbox_p1=rp_cbox_p1,
        rp_edit_p1=rp_edit_p1,
        rel_perm_tabular_p1=rel_perm_tabular_p1,
        rel_perm_table_p1=rel_perm_table_p1,
        rel_perm_satw_p1=rel_perm_satw_p1,
        rel_perm_rp_p1=rel_perm_rp_p1,
        rp_cbox_p2=rp_cbox_p2,
        rp_edit_p2=rp_edit_p2,
        rel_perm_tabular_p2=rel_perm_tabular_p2,
        rel_perm_table_p2=rel_perm_table_p2,
        rel_perm_satw_p2=rel_perm_satw_p2,
        rel_perm_rp_p2=rel_perm_rp_p2,
        wetting_phase=wetting_phase,
        non_wetting_phase=non_wetting_phase,
        equib_thermal=equib_thermal,
        non_equib_thermal=non_equib_thermal,
        solid_material=solid_material,
        area_density=area_density,
        heat_transfer_coeff=heat_transfer_coeff,
        porous_structure=porous_structure,
        structure_material=structure_material,
        anisotropic_spe_diff=anisotropic_spe_diff,
        spe_diff_xx=spe_diff_xx,
        spe_diff_xy=spe_diff_xy,
        spe_diff_xz=spe_diff_xz,
        spe_diff_yx=spe_diff_yx,
        spe_diff_yy=spe_diff_yy,
        spe_diff_yz=spe_diff_yz,
        spe_diff_zx=spe_diff_zx,
        spe_diff_zy=spe_diff_zy,
        spe_diff_zz=spe_diff_zz,
    )
    return_type = 'object'

class fan_zone_1(Boolean, AllowedValuesMixin):
    """
    3D Fan Zone?.
    """
    _version = '241'
    fluent_name = 'fan-zone'
    _python_name = 'fan_zone'
    return_type = 'object'

class inlet_fan_zone(String, AllowedValuesMixin):
    """
    Inlet Fan Zone.
    """
    _version = '241'
    fluent_name = 'inlet-fan-zone'
    _python_name = 'inlet_fan_zone'
    return_type = 'object'

class fan_thickness(Real, AllowedValuesMixin):
    """
    Fan Thickness.
    """
    _version = '241'
    fluent_name = 'fan-thickness'
    _python_name = 'fan_thickness'
    return_type = 'object'

class fan_hub_rad(Real, AllowedValuesMixin):
    """
    Fan Hub Radius.
    """
    _version = '241'
    fluent_name = 'fan-hub-rad'
    _python_name = 'fan_hub_rad'
    return_type = 'object'

class fan_tip_rad(Real, AllowedValuesMixin):
    """
    Fan Tip Radius.
    """
    _version = '241'
    fluent_name = 'fan-tip-rad'
    _python_name = 'fan_tip_rad'
    return_type = 'object'

class fan_origin_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of fan_origin.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'fan_origin_child'
    return_type = 'object'

class fan_origin(ListObject[fan_origin_child]):
    """
    'fan_origin' child.
    """
    _version = '241'
    fluent_name = 'fan-origin'
    _python_name = 'fan_origin'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = fan_origin_child
    return_type = 'object'

class fan_rot_dir(String, AllowedValuesMixin):
    """
    Rotational Direction.
    """
    _version = '241'
    fluent_name = 'fan-rot-dir'
    _python_name = 'fan_rot_dir'
    return_type = 'object'

class fan_opert_angvel(Real, AllowedValuesMixin):
    """
    Fan Operating Angular Velocity.
    """
    _version = '241'
    fluent_name = 'fan-opert-angvel'
    _python_name = 'fan_opert_angvel'
    return_type = 'object'

class fan_inflection_point(Real, AllowedValuesMixin):
    """
    Fan Inflection Point.
    """
    _version = '241'
    fluent_name = 'fan-inflection-point'
    _python_name = 'fan_inflection_point'
    return_type = 'object'

class limit_flow_fan(Boolean, AllowedValuesMixin):
    """
    Limit Flow Rate Through Fan.
    """
    _version = '241'
    fluent_name = 'limit-flow-fan'
    _python_name = 'limit_flow_fan'
    return_type = 'object'

class max_flow_rate(Real, AllowedValuesMixin):
    """
    Maximum Flow Rate.
    """
    _version = '241'
    fluent_name = 'max-flow-rate'
    _python_name = 'max_flow_rate'
    return_type = 'object'

class min_flow_rate(Real, AllowedValuesMixin):
    """
    Minimum Flow Rate.
    """
    _version = '241'
    fluent_name = 'min-flow-rate'
    _python_name = 'min_flow_rate'
    return_type = 'object'

class tan_source_term(Boolean, AllowedValuesMixin):
    """
    Tangential Source Term.
    """
    _version = '241'
    fluent_name = 'tan-source-term'
    _python_name = 'tan_source_term'
    return_type = 'object'

class rad_source_term(Boolean, AllowedValuesMixin):
    """
    Radial Source Term.
    """
    _version = '241'
    fluent_name = 'rad-source-term'
    _python_name = 'rad_source_term'
    return_type = 'object'

class axial_source_term(Boolean, AllowedValuesMixin):
    """
    Axial Source Term.
    """
    _version = '241'
    fluent_name = 'axial-source-term'
    _python_name = 'axial_source_term'
    return_type = 'object'

class fan_axial_source_method(String, AllowedValuesMixin):
    """
    Method.
    """
    _version = '241'
    fluent_name = 'fan-axial-source-method'
    _python_name = 'fan_axial_source_method'
    return_type = 'object'

class fan_pre_jump(Real, AllowedValuesMixin):
    """
    Pressure Jump.
    """
    _version = '241'
    fluent_name = 'fan-pre-jump'
    _python_name = 'fan_pre_jump'
    return_type = 'object'

class fan_curve_fit(String, AllowedValuesMixin):
    """
    Fan Curve Fitting Method.
    """
    _version = '241'
    fluent_name = 'fan-curve-fit'
    _python_name = 'fan_curve_fit'
    return_type = 'object'

class fan_poly_order(Real, AllowedValuesMixin):
    """
    Polynomial Order.
    """
    _version = '241'
    fluent_name = 'fan-poly-order'
    _python_name = 'fan_poly_order'
    return_type = 'object'

class fan_ini_flow(Real, AllowedValuesMixin):
    """
    Initial Flow Rate.
    """
    _version = '241'
    fluent_name = 'fan-ini-flow'
    _python_name = 'fan_ini_flow'
    return_type = 'object'

class fan_test_angvel(Real, AllowedValuesMixin):
    """
    Fan Test Angular Velocity.
    """
    _version = '241'
    fluent_name = 'fan-test-angvel'
    _python_name = 'fan_test_angvel'
    return_type = 'object'

class fan_test_temp(Real, AllowedValuesMixin):
    """
    Fan Test Temperature.
    """
    _version = '241'
    fluent_name = 'fan-test-temp'
    _python_name = 'fan_test_temp'
    return_type = 'object'

class fan_curve_filename(String, AllowedValuesMixin):
    """
    Fan Curve Filename.
    """
    _version = '241'
    fluent_name = 'fan-curve-filename'
    _python_name = 'fan_curve_filename'
    return_type = 'object'

class read_fan_curve(String, AllowedValuesMixin):
    """
    Read Fan Curve.
    """
    _version = '241'
    fluent_name = 'read-fan-curve'
    _python_name = 'read_fan_curve'
    return_type = 'object'

class fan_zone(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'fan-zone'
    _python_name = 'fan_zone'
    child_names = ['fan_zone', 'inlet_fan_zone', 'fan_thickness', 'fan_hub_rad', 'fan_tip_rad', 'fan_origin', 'fan_rot_dir', 'fan_opert_angvel', 'fan_inflection_point', 'limit_flow_fan', 'max_flow_rate', 'min_flow_rate', 'tan_source_term', 'rad_source_term', 'axial_source_term', 'fan_axial_source_method', 'fan_pre_jump', 'fan_curve_fit', 'fan_poly_order', 'fan_ini_flow', 'fan_test_angvel', 'fan_test_temp', 'fan_curve_filename', 'read_fan_curve']
    _child_classes = dict(
        fan_zone=fan_zone_1,
        inlet_fan_zone=inlet_fan_zone,
        fan_thickness=fan_thickness,
        fan_hub_rad=fan_hub_rad,
        fan_tip_rad=fan_tip_rad,
        fan_origin=fan_origin,
        fan_rot_dir=fan_rot_dir,
        fan_opert_angvel=fan_opert_angvel,
        fan_inflection_point=fan_inflection_point,
        limit_flow_fan=limit_flow_fan,
        max_flow_rate=max_flow_rate,
        min_flow_rate=min_flow_rate,
        tan_source_term=tan_source_term,
        rad_source_term=rad_source_term,
        axial_source_term=axial_source_term,
        fan_axial_source_method=fan_axial_source_method,
        fan_pre_jump=fan_pre_jump,
        fan_curve_fit=fan_curve_fit,
        fan_poly_order=fan_poly_order,
        fan_ini_flow=fan_ini_flow,
        fan_test_angvel=fan_test_angvel,
        fan_test_temp=fan_test_temp,
        fan_curve_filename=fan_curve_filename,
        read_fan_curve=read_fan_curve,
    )
    return_type = 'object'

class les_zone(Boolean, AllowedValuesMixin):
    """
    LES zone?.
    """
    _version = '241'
    fluent_name = 'les-zone'
    _python_name = 'les_zone'
    return_type = 'object'

class laminar_mut_zero(Boolean, AllowedValuesMixin):
    """
    Turbulent Viscosity to zero within laminar zone?.
    """
    _version = '241'
    fluent_name = 'laminar-mut-zero?'
    _python_name = 'laminar_mut_zero'
    return_type = 'object'

class les_embedded_spec(String, AllowedValuesMixin):
    """
    Embedded Subgrid-Scale Model.
    """
    _version = '241'
    fluent_name = 'les-embedded-spec'
    _python_name = 'les_embedded_spec'
    return_type = 'object'

class les_embedded_mom_scheme(String, AllowedValuesMixin):
    """
    Momentum Spatial Discretization.
    """
    _version = '241'
    fluent_name = 'les-embedded-mom-scheme'
    _python_name = 'les_embedded_mom_scheme'
    return_type = 'object'

class les_embedded_c_wale(Real, AllowedValuesMixin):
    """
    Cwale.
    """
    _version = '241'
    fluent_name = 'les-embedded-c-wale'
    _python_name = 'les_embedded_c_wale'
    return_type = 'object'

class les_embedded_c_smag(Real, AllowedValuesMixin):
    """
    Cs.
    """
    _version = '241'
    fluent_name = 'les-embedded-c-smag'
    _python_name = 'les_embedded_c_smag'
    return_type = 'object'

class embedded_les(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'embedded-les'
    _python_name = 'embedded_les'
    child_names = ['les_zone', 'laminar_mut_zero', 'les_embedded_spec', 'les_embedded_mom_scheme', 'les_embedded_c_wale', 'les_embedded_c_smag']
    _child_classes = dict(
        les_zone=les_zone,
        laminar_mut_zero=laminar_mut_zero,
        les_embedded_spec=les_embedded_spec,
        les_embedded_mom_scheme=les_embedded_mom_scheme,
        les_embedded_c_wale=les_embedded_c_wale,
        les_embedded_c_smag=les_embedded_c_smag,
    )
    return_type = 'object'

class react(Boolean, AllowedValuesMixin):
    """
    Activate reaction mechanisms?.
    """
    _version = '241'
    fluent_name = 'react?'
    _python_name = 'react'
    return_type = 'object'

class reaction_mechs_1(String, AllowedValuesMixin):
    """
    Reaction Mechanism.
    """
    _version = '241'
    fluent_name = 'reaction-mechs'
    _python_name = 'reaction_mechs'
    return_type = 'object'

class surface_volume_ratio(Real, AllowedValuesMixin):
    """
    Surface-Volume-Ratio.
    """
    _version = '241'
    fluent_name = 'surface-volume-ratio'
    _python_name = 'surface_volume_ratio'
    return_type = 'object'

class electrolyte_1(Boolean, AllowedValuesMixin):
    """
    Zone is electrolyte?.
    """
    _version = '241'
    fluent_name = 'electrolyte?'
    _python_name = 'electrolyte'
    return_type = 'object'

class reaction(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'reaction'
    _python_name = 'reaction'
    child_names = ['react', 'reaction_mechs', 'surface_volume_ratio', 'electrolyte']
    _child_classes = dict(
        react=react,
        reaction_mechs=reaction_mechs_1,
        surface_volume_ratio=surface_volume_ratio,
        electrolyte=electrolyte_1,
    )
    return_type = 'object'

class sources(Boolean, AllowedValuesMixin):
    """
    Source terms?.
    """
    _version = '241'
    fluent_name = 'sources?'
    _python_name = 'sources'
    return_type = 'object'

class source_terms_3_child_child(Group):
    """
    'child_object_type' of child_object_type.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'source_terms_child_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class source_terms_3_child(ListObject[source_terms_3_child_child]):
    """
    'child_object_type' of source_terms.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'source_terms_child'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = source_terms_3_child_child
    return_type = 'object'

class source_terms_3(NamedObject[source_terms_3_child], _NonCreatableNamedObjectMixin[source_terms_3_child]):
    """
    Source Terms.
    """
    _version = '241'
    fluent_name = 'source-terms'
    _python_name = 'source_terms'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = source_terms_3_child
    return_type = 'object'

class source_terms_2(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'source-terms'
    _python_name = 'source_terms'
    child_names = ['sources', 'source_terms']
    _child_classes = dict(
        sources=sources,
        source_terms=source_terms_3,
    )
    return_type = 'object'

class fixed(Boolean, AllowedValuesMixin):
    """
    Fixed values?.
    """
    _version = '241'
    fluent_name = 'fixed?'
    _python_name = 'fixed'
    return_type = 'object'

class fixes_child(Group):
    """
    'child_object_type' of fixes.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'fixes_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class fixes(NamedObject[fixes_child], _NonCreatableNamedObjectMixin[fixes_child]):
    """
    Fixed Values.
    """
    _version = '241'
    fluent_name = 'fixes'
    _python_name = 'fixes'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = fixes_child
    return_type = 'object'

class fixed_values(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'fixed-values'
    _python_name = 'fixed_values'
    child_names = ['fixed', 'fixes']
    _child_classes = dict(
        fixed=fixed,
        fixes=fixes,
    )
    return_type = 'object'

class mp_compressive_beta_max(Real, AllowedValuesMixin):
    """
    Compressive Scheme Slope Limiter.
    """
    _version = '241'
    fluent_name = 'mp-compressive-beta-max'
    _python_name = 'mp_compressive_beta_max'
    return_type = 'object'

class mp_boiling_zone(Boolean, AllowedValuesMixin):
    """
    Boiling Zone.
    """
    _version = '241'
    fluent_name = 'mp-boiling-zone?'
    _python_name = 'mp_boiling_zone'
    return_type = 'object'

class numerical_beach(Boolean, AllowedValuesMixin):
    """
    Numerical Beach.
    """
    _version = '241'
    fluent_name = 'numerical-beach?'
    _python_name = 'numerical_beach'
    return_type = 'object'

class beach_id(Integer, AllowedValuesMixin):
    """
    Beach Group ID.
    """
    _version = '241'
    fluent_name = 'beach-id'
    _python_name = 'beach_id'
    return_type = 'object'

class beach_multi_dir(Boolean, AllowedValuesMixin):
    """
    Multi-Directional Beach.
    """
    _version = '241'
    fluent_name = 'beach-multi-dir?'
    _python_name = 'beach_multi_dir'
    return_type = 'object'

class beach_damp_type(String, AllowedValuesMixin):
    """
    Damping Type.
    """
    _version = '241'
    fluent_name = 'beach-damp-type'
    _python_name = 'beach_damp_type'
    return_type = 'object'

class beach_inlet_bndr(String, AllowedValuesMixin):
    """
    Compute from Inlet Boundary.
    """
    _version = '241'
    fluent_name = 'beach-inlet-bndr'
    _python_name = 'beach_inlet_bndr'
    return_type = 'object'

class beach_fs_level(Real, AllowedValuesMixin):
    """
    Free Surface Level.
    """
    _version = '241'
    fluent_name = 'beach-fs-level'
    _python_name = 'beach_fs_level'
    return_type = 'object'

class beach_bottom_level(Real, AllowedValuesMixin):
    """
    Bottom Level.
    """
    _version = '241'
    fluent_name = 'beach-bottom-level'
    _python_name = 'beach_bottom_level'
    return_type = 'object'

class beach_dir_ni(Real, AllowedValuesMixin):
    """
    X-Direction.
    """
    _version = '241'
    fluent_name = 'beach-dir-ni'
    _python_name = 'beach_dir_ni'
    return_type = 'object'

class beach_dir_nj(Real, AllowedValuesMixin):
    """
    Y-Direction.
    """
    _version = '241'
    fluent_name = 'beach-dir-nj'
    _python_name = 'beach_dir_nj'
    return_type = 'object'

class beach_dir_nk(Real, AllowedValuesMixin):
    """
    Z-Direction.
    """
    _version = '241'
    fluent_name = 'beach-dir-nk'
    _python_name = 'beach_dir_nk'
    return_type = 'object'

class beach_damp_len_spec(String, AllowedValuesMixin):
    """
    Damping Length Specification.
    """
    _version = '241'
    fluent_name = 'beach-damp-len-spec'
    _python_name = 'beach_damp_len_spec'
    return_type = 'object'

class beach_end_point(Real, AllowedValuesMixin):
    """
    End Point.
    """
    _version = '241'
    fluent_name = 'beach-end-point'
    _python_name = 'beach_end_point'
    return_type = 'object'

class beach_wave_len(Real, AllowedValuesMixin):
    """
    Wave Length.
    """
    _version = '241'
    fluent_name = 'beach-wave-len'
    _python_name = 'beach_wave_len'
    return_type = 'object'

class beach_len_factor(Real, AllowedValuesMixin):
    """
    Number of Wave Lengths.
    """
    _version = '241'
    fluent_name = 'beach-len-factor'
    _python_name = 'beach_len_factor'
    return_type = 'object'

class beach_start_point(Real, AllowedValuesMixin):
    """
    Start Point.
    """
    _version = '241'
    fluent_name = 'beach-start-point'
    _python_name = 'beach_start_point'
    return_type = 'object'

class ni(Real, AllowedValuesMixin):
    """
    'ni' child.
    """
    _version = '241'
    fluent_name = 'ni'
    _python_name = 'ni'
    return_type = 'object'

class nj(Real, AllowedValuesMixin):
    """
    'nj' child.
    """
    _version = '241'
    fluent_name = 'nj'
    _python_name = 'nj'
    return_type = 'object'

class nk(Real, AllowedValuesMixin):
    """
    'nk' child.
    """
    _version = '241'
    fluent_name = 'nk'
    _python_name = 'nk'
    return_type = 'object'

class xe(Real, AllowedValuesMixin):
    """
    'xe' child.
    """
    _version = '241'
    fluent_name = 'xe'
    _python_name = 'xe'
    return_type = 'object'

class len(Real, AllowedValuesMixin):
    """
    'len' child.
    """
    _version = '241'
    fluent_name = 'len'
    _python_name = 'len'
    return_type = 'object'

class beach_dir_list_child(Group):
    """
    'child_object_type' of beach_dir_list.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'beach_dir_list_child'
    child_names = ['ni', 'nj', 'nk', 'xe', 'len']
    _child_classes = dict(
        ni=ni,
        nj=nj,
        nk=nk,
        xe=xe,
        len=len,
    )
    return_type = 'object'

class beach_dir_list(ListObject[beach_dir_list_child]):
    """
    Multi-Directional Beach Inputs.
    """
    _version = '241'
    fluent_name = 'beach-dir-list'
    _python_name = 'beach_dir_list'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = beach_dir_list_child
    return_type = 'object'

class beach_damp_relative(Boolean, AllowedValuesMixin):
    """
    Relative Velocity Resistance Formulation.
    """
    _version = '241'
    fluent_name = 'beach-damp-relative?'
    _python_name = 'beach_damp_relative'
    return_type = 'object'

class beach_damp_resist_lin(Real, AllowedValuesMixin):
    """
    Linear Damping Resistance.
    """
    _version = '241'
    fluent_name = 'beach-damp-resist-lin'
    _python_name = 'beach_damp_resist_lin'
    return_type = 'object'

class beach_damp_resist(Real, AllowedValuesMixin):
    """
    Quadratic Damping Resistance.
    """
    _version = '241'
    fluent_name = 'beach-damp-resist'
    _python_name = 'beach_damp_resist'
    return_type = 'object'

class multiphase_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['mp_compressive_beta_max', 'mp_boiling_zone', 'numerical_beach', 'beach_id', 'beach_multi_dir', 'beach_damp_type', 'beach_inlet_bndr', 'beach_fs_level', 'beach_bottom_level', 'beach_dir_ni', 'beach_dir_nj', 'beach_dir_nk', 'beach_damp_len_spec', 'beach_end_point', 'beach_wave_len', 'beach_len_factor', 'beach_start_point', 'beach_dir_list', 'beach_damp_relative', 'beach_damp_resist_lin', 'beach_damp_resist']
    _child_classes = dict(
        mp_compressive_beta_max=mp_compressive_beta_max,
        mp_boiling_zone=mp_boiling_zone,
        numerical_beach=numerical_beach,
        beach_id=beach_id,
        beach_multi_dir=beach_multi_dir,
        beach_damp_type=beach_damp_type,
        beach_inlet_bndr=beach_inlet_bndr,
        beach_fs_level=beach_fs_level,
        beach_bottom_level=beach_bottom_level,
        beach_dir_ni=beach_dir_ni,
        beach_dir_nj=beach_dir_nj,
        beach_dir_nk=beach_dir_nk,
        beach_damp_len_spec=beach_damp_len_spec,
        beach_end_point=beach_end_point,
        beach_wave_len=beach_wave_len,
        beach_len_factor=beach_len_factor,
        beach_start_point=beach_start_point,
        beach_dir_list=beach_dir_list,
        beach_damp_relative=beach_damp_relative,
        beach_damp_resist_lin=beach_damp_resist_lin,
        beach_damp_resist=beach_damp_resist,
    )
    return_type = 'object'

class udf_zmotion_name(String, AllowedValuesMixin):
    """
    User Defined Zone Motion Function.
    """
    _version = '241'
    fluent_name = 'udf-zmotion-name'
    _python_name = 'udf_zmotion_name'
    return_type = 'object'

class axis_direction_1_child(Group):
    """
    'child_object_type' of axis_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'axis_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class axis_direction_1(ListObject[axis_direction_1_child]):
    """
    'axis_direction' child.
    """
    _version = '241'
    fluent_name = 'axis-direction'
    _python_name = 'axis_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = axis_direction_1_child
    return_type = 'object'

class axis_origin_1_child(Group):
    """
    'child_object_type' of axis_origin.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'axis_origin_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class axis_origin_1(ListObject[axis_origin_1_child]):
    """
    'axis_origin' child.
    """
    _version = '241'
    fluent_name = 'axis-origin'
    _python_name = 'axis_origin'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = axis_origin_1_child
    return_type = 'object'

class cursys(Boolean, AllowedValuesMixin):
    """
    'cursys' child.
    """
    _version = '241'
    fluent_name = 'cursys?'
    _python_name = 'cursys'
    return_type = 'object'

class conical(Boolean, AllowedValuesMixin):
    """
    Conical porous zone?.
    """
    _version = '241'
    fluent_name = 'conical?'
    _python_name = 'conical'
    return_type = 'object'

class solid_omega(Group):
    """
    Solid Body Rotation Speed.
    """
    _version = '241'
    fluent_name = 'solid-omega'
    _python_name = 'solid_omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class solid_relative_to_thread(String, AllowedValuesMixin):
    """
    Relative To Cell Zone.
    """
    _version = '241'
    fluent_name = 'solid-relative-to-thread'
    _python_name = 'solid_relative_to_thread'
    return_type = 'object'

class solid_motion(Boolean, AllowedValuesMixin):
    """
    Solid Motion?.
    """
    _version = '241'
    fluent_name = 'solid-motion'
    _python_name = 'solid_motion'
    return_type = 'object'

class solid_motion_axis_direction_child(Group):
    """
    'child_object_type' of solid_motion_axis_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'solid_motion_axis_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class solid_motion_axis_direction(ListObject[solid_motion_axis_direction_child]):
    """
    'solid_motion_axis_direction' child.
    """
    _version = '241'
    fluent_name = 'solid-motion-axis-direction'
    _python_name = 'solid_motion_axis_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = solid_motion_axis_direction_child
    return_type = 'object'

class solid_motion_axis_origin_child(Group):
    """
    'child_object_type' of solid_motion_axis_origin.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'solid_motion_axis_origin_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class solid_motion_axis_origin(ListObject[solid_motion_axis_origin_child]):
    """
    'solid_motion_axis_origin' child.
    """
    _version = '241'
    fluent_name = 'solid-motion-axis-origin'
    _python_name = 'solid_motion_axis_origin'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = solid_motion_axis_origin_child
    return_type = 'object'

class solid_motion_velocity_child(Group):
    """
    'child_object_type' of solid_motion_velocity.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'solid_motion_velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class solid_motion_velocity(ListObject[solid_motion_velocity_child]):
    """
    'solid_motion_velocity' child.
    """
    _version = '241'
    fluent_name = 'solid-motion-velocity'
    _python_name = 'solid_motion_velocity'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = solid_motion_velocity_child
    return_type = 'object'

class solid_motion_zone_motion_function(String, AllowedValuesMixin):
    """
    Solid Motion User Defined Solid Motion Function.
    """
    _version = '241'
    fluent_name = 'solid-motion-zone-motion-function'
    _python_name = 'solid_motion_zone_motion_function'
    return_type = 'object'

class omega(Group):
    """
    'omega' child.
    """
    _version = '241'
    fluent_name = 'omega'
    _python_name = 'omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class relative_to_thread(String, AllowedValuesMixin):
    """
    Relative To Cell Zone.
    """
    _version = '241'
    fluent_name = 'relative-to-thread'
    _python_name = 'relative_to_thread'
    return_type = 'object'

class motion_spec(String, AllowedValuesMixin):
    """
    Motion Type.
    """
    _version = '241'
    fluent_name = 'motion-spec'
    _python_name = 'motion_spec'
    return_type = 'object'

class disabled(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'disabled'
    _python_name = 'disabled'
    child_names = ['udf_zmotion_name', 'axis_direction', 'axis_origin', 'cursys', 'conical', 'solid_omega', 'solid_relative_to_thread', 'solid_motion', 'solid_motion_axis_direction', 'solid_motion_axis_origin', 'solid_motion_velocity', 'solid_motion_zone_motion_function', 'omega', 'relative_to_thread', 'motion_spec']
    _child_classes = dict(
        udf_zmotion_name=udf_zmotion_name,
        axis_direction=axis_direction_1,
        axis_origin=axis_origin_1,
        cursys=cursys,
        conical=conical,
        solid_omega=solid_omega,
        solid_relative_to_thread=solid_relative_to_thread,
        solid_motion=solid_motion,
        solid_motion_axis_direction=solid_motion_axis_direction,
        solid_motion_axis_origin=solid_motion_axis_origin,
        solid_motion_velocity=solid_motion_velocity,
        solid_motion_zone_motion_function=solid_motion_zone_motion_function,
        omega=omega,
        relative_to_thread=relative_to_thread,
        motion_spec=motion_spec,
    )
    return_type = 'object'

class phase_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['material', 'cylindrical_fixed_var', 'participates_in_radiation', 'contact_property', 'active_wetsteam_zone', 'vapor_phase_realgas', 'laminar', 'glass', 'reference_frame', 'mesh_motion', 'porous_zone', 'fan_zone', 'embedded_les', 'reaction', 'source_terms', 'fixed_values', 'multiphase', 'disabled']
    _child_classes = dict(
        material=material_1,
        cylindrical_fixed_var=cylindrical_fixed_var,
        participates_in_radiation=participates_in_radiation,
        contact_property=contact_property,
        active_wetsteam_zone=active_wetsteam_zone,
        vapor_phase_realgas=vapor_phase_realgas,
        laminar=laminar,
        glass=glass,
        reference_frame=reference_frame_1,
        mesh_motion=mesh_motion,
        porous_zone=porous_zone,
        fan_zone=fan_zone,
        embedded_les=embedded_les,
        reaction=reaction,
        source_terms=source_terms_2,
        fixed_values=fixed_values,
        multiphase=multiphase_1,
        disabled=disabled,
    )
    return_type = 'object'

class phase(NamedObject[phase_child], _NonCreatableNamedObjectMixin[phase_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_child
    return_type = 'object'

class fluid_1_child(Group):
    """
    'child_object_type' of fluid.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'fluid_child'
    child_names = ['name', 'phase', 'material', 'cylindrical_fixed_var', 'participates_in_radiation', 'contact_property', 'active_wetsteam_zone', 'vapor_phase_realgas', 'laminar', 'glass', 'reference_frame', 'mesh_motion', 'porous_zone', 'fan_zone', 'embedded_les', 'reaction', 'source_terms', 'fixed_values', 'multiphase', 'disabled']
    _child_classes = dict(
        name=name,
        phase=phase,
        material=material_1,
        cylindrical_fixed_var=cylindrical_fixed_var,
        participates_in_radiation=participates_in_radiation,
        contact_property=contact_property,
        active_wetsteam_zone=active_wetsteam_zone,
        vapor_phase_realgas=vapor_phase_realgas,
        laminar=laminar,
        glass=glass,
        reference_frame=reference_frame_1,
        mesh_motion=mesh_motion,
        porous_zone=porous_zone,
        fan_zone=fan_zone,
        embedded_les=embedded_les,
        reaction=reaction,
        source_terms=source_terms_2,
        fixed_values=fixed_values,
        multiphase=multiphase_1,
        disabled=disabled,
    )
    return_type = 'object'

class fluid_1(NamedObject[fluid_1_child], _NonCreatableNamedObjectMixin[fluid_1_child]):
    """
    'fluid' child.
    """
    _version = '241'
    fluent_name = 'fluid'
    _python_name = 'fluid'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = fluid_1_child
    return_type = 'object'

class solid_motion_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'solid-motion'
    _python_name = 'solid_motion'
    child_names = ['solid_motion', 'solid_relative_to_thread', 'solid_omega', 'solid_motion_velocity', 'solid_motion_axis_origin', 'solid_motion_axis_direction', 'solid_motion_zone_motion_function']
    _child_classes = dict(
        solid_motion=solid_motion,
        solid_relative_to_thread=solid_relative_to_thread,
        solid_omega=solid_omega,
        solid_motion_velocity=solid_motion_velocity,
        solid_motion_axis_origin=solid_motion_axis_origin,
        solid_motion_axis_direction=solid_motion_axis_direction,
        solid_motion_zone_motion_function=solid_motion_zone_motion_function,
    )
    return_type = 'object'

class fixed_values_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'fixed-values'
    _python_name = 'fixed_values'
    child_names = ['fixed', 'cylindrical_fixed_var', 'fixes']
    _child_classes = dict(
        fixed=fixed,
        cylindrical_fixed_var=cylindrical_fixed_var,
        fixes=fixes,
    )
    return_type = 'object'

class cursys_1(Boolean, AllowedValuesMixin):
    """
    Assign local material orientation using curvilinear coordinate?.
    """
    _version = '241'
    fluent_name = 'cursys?'
    _python_name = 'cursys'
    return_type = 'object'

class material_orientation(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'material-orientation'
    _python_name = 'material_orientation'
    child_names = ['cursys', 'cursys_name']
    _child_classes = dict(
        cursys=cursys_1,
        cursys_name=cursys_name,
    )
    return_type = 'object'

class les_zone_1(Boolean, AllowedValuesMixin):
    """
    'les_zone' child.
    """
    _version = '241'
    fluent_name = 'les-zone'
    _python_name = 'les_zone'
    return_type = 'object'

class disabled_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'disabled'
    _python_name = 'disabled'
    child_names = ['les_zone', 'udf_zmotion_name', 'axis_origin', 'axis_direction', 'omega', 'relative_to_thread', 'motion_spec', 'cylindrical_fixed_var']
    _child_classes = dict(
        les_zone=les_zone_1,
        udf_zmotion_name=udf_zmotion_name,
        axis_origin=axis_origin_1,
        axis_direction=axis_direction_1,
        omega=omega,
        relative_to_thread=relative_to_thread,
        motion_spec=motion_spec,
        cylindrical_fixed_var=cylindrical_fixed_var,
    )
    return_type = 'object'

class ecad_name(String, AllowedValuesMixin):
    """
    'ecad_name' child.
    """
    _version = '241'
    fluent_name = 'ecad-name'
    _python_name = 'ecad_name'
    return_type = 'object'

class choice(String, AllowedValuesMixin):
    """
    'choice' child.
    """
    _version = '241'
    fluent_name = 'choice'
    _python_name = 'choice'
    return_type = 'object'

class rows(Real, AllowedValuesMixin):
    """
    'rows' child.
    """
    _version = '241'
    fluent_name = 'rows'
    _python_name = 'rows'
    return_type = 'object'

class columns(Real, AllowedValuesMixin):
    """
    'columns' child.
    """
    _version = '241'
    fluent_name = 'columns'
    _python_name = 'columns'
    return_type = 'object'

class ref_frame(String, AllowedValuesMixin):
    """
    'ref_frame' child.
    """
    _version = '241'
    fluent_name = 'ref-frame'
    _python_name = 'ref_frame'
    return_type = 'object'

class pwr_names(StringList, AllowedValuesMixin):
    """
    'pwr_names' child.
    """
    _version = '241'
    fluent_name = 'pwr-names'
    _python_name = 'pwr_names'
    return_type = 'object'

class pcb_zone_info(Group):
    """
    'pcb_zone_info' child.
    """
    _version = '241'
    fluent_name = 'pcb-zone-info'
    _python_name = 'pcb_zone_info'
    child_names = ['ecad_name', 'choice', 'rows', 'columns', 'ref_frame', 'pwr_names']
    _child_classes = dict(
        ecad_name=ecad_name,
        choice=choice,
        rows=rows,
        columns=columns,
        ref_frame=ref_frame,
        pwr_names=pwr_names,
    )
    return_type = 'object'

class pcb_model(Boolean, AllowedValuesMixin):
    """
    PCB Model ON?.
    """
    _version = '241'
    fluent_name = 'pcb-model'
    _python_name = 'pcb_model'
    return_type = 'object'

class internal(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'internal'
    _python_name = 'internal'
    child_names = ['pcb_zone_info', 'pcb_model', 'vapor_phase_realgas', 'active_wetsteam_zone', 'contact_property']
    _child_classes = dict(
        pcb_zone_info=pcb_zone_info,
        pcb_model=pcb_model,
        vapor_phase_realgas=vapor_phase_realgas,
        active_wetsteam_zone=active_wetsteam_zone,
        contact_property=contact_property,
    )
    return_type = 'object'

class phase_1_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['material', 'participates_in_radiation', 'reference_frame', 'mesh_motion', 'solid_motion', 'source_terms', 'fixed_values', 'material_orientation', 'disabled', 'internal']
    _child_classes = dict(
        material=material_1,
        participates_in_radiation=participates_in_radiation,
        reference_frame=reference_frame_1,
        mesh_motion=mesh_motion,
        solid_motion=solid_motion_1,
        source_terms=source_terms_2,
        fixed_values=fixed_values_1,
        material_orientation=material_orientation,
        disabled=disabled_1,
        internal=internal,
    )
    return_type = 'object'

class phase_1(NamedObject[phase_1_child], _NonCreatableNamedObjectMixin[phase_1_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_1_child
    return_type = 'object'

class solid_1_child(Group):
    """
    'child_object_type' of solid.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'solid_child'
    child_names = ['name', 'phase', 'material', 'participates_in_radiation', 'reference_frame', 'mesh_motion', 'solid_motion', 'source_terms', 'fixed_values', 'material_orientation', 'disabled', 'internal']
    _child_classes = dict(
        name=name,
        phase=phase_1,
        material=material_1,
        participates_in_radiation=participates_in_radiation,
        reference_frame=reference_frame_1,
        mesh_motion=mesh_motion,
        solid_motion=solid_motion_1,
        source_terms=source_terms_2,
        fixed_values=fixed_values_1,
        material_orientation=material_orientation,
        disabled=disabled_1,
        internal=internal,
    )
    return_type = 'object'

class solid_1(NamedObject[solid_1_child], _NonCreatableNamedObjectMixin[solid_1_child]):
    """
    'solid' child.
    """
    _version = '241'
    fluent_name = 'solid'
    _python_name = 'solid'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = solid_1_child
    return_type = 'object'

class from__1(String, AllowedValuesMixin):
    """
    'from' child.
    """
    _version = '241'
    fluent_name = 'from'
    _python_name = 'from_'
    return_type = 'object'

class to_1(StringList, AllowedValuesMixin):
    """
    'to' child.
    """
    _version = '241'
    fluent_name = 'to'
    _python_name = 'to'
    return_type = 'object'

class verbosity_3(Boolean):
    """
    'verbosity' child.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class copy_1(Command):
    """
    'copy' command.
    """
    _version = '241'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['from_', 'to', 'verbosity']
    _child_classes = dict(
        from_=from__1,
        to=to_1,
        verbosity=verbosity_3,
    )
    return_type = 'object'

class zone_list(StringList, AllowedValuesMixin):
    """
    Zone name list.
    """
    _version = '241'
    fluent_name = 'zone-list'
    _python_name = 'zone_list'
    return_type = 'object'

class set_zone_type(Command):
    """
    'set_zone_type' command.
    """
    _version = '241'
    fluent_name = 'set-zone-type'
    _python_name = 'set_zone_type'
    argument_names = ['zone_list', 'new_type']
    _child_classes = dict(
        zone_list=zone_list,
        new_type=new_type,
    )
    return_type = 'object'

class cell_zone_list(StringList, AllowedValuesMixin):
    """
    'cell_zone_list' child.
    """
    _version = '241'
    fluent_name = 'cell-zone-list'
    _python_name = 'cell_zone_list'
    return_type = 'object'

class activate_cell_zone(Command):
    """
    Activate a cell thread.
    
    Parameters
    ----------
        cell_zone_list : List
            'cell_zone_list' child.
    """
    _version = '241'
    fluent_name = 'activate-cell-zone'
    _python_name = 'activate_cell_zone'
    argument_names = ['cell_zone_list']
    _child_classes = dict(
        cell_zone_list=cell_zone_list,
    )
    return_type = 'object'

class mrf_to_sliding_mesh(Command):
    """
    Change motion specification from MRF to moving mesh.
    
    Parameters
    ----------
        cell_zone_name : str
            The cell zone name.
    """
    _version = '241'
    fluent_name = 'mrf-to-sliding-mesh'
    _python_name = 'mrf_to_sliding_mesh'
    argument_names = ['cell_zone_name']
    _child_classes = dict(
        cell_zone_name=cell_zone_name,
    )
    return_type = 'object'

class convert_all_solid_mrf_to_solid_motion(Command):
    """
    Change all solid zones motion specification from MRF to solid motion.
    """
    _version = '241'
    fluent_name = 'convert-all-solid-mrf-to-solid-motion'
    _python_name = 'convert_all_solid_mrf_to_solid_motion'
    return_type = 'object'

class overwrite(Boolean):
    """
    'overwrite' child.
    """
    _version = '241'
    fluent_name = 'overwrite?'
    _python_name = 'overwrite'
    return_type = 'object'

class copy_mrf_to_mesh_motion(Command):
    """
    Copy motion variable values for origin, axis and velocities from Frame Motion to Mesh Motion.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
        overwrite : bool
            'overwrite' child.
    """
    _version = '241'
    fluent_name = 'copy-mrf-to-mesh-motion'
    _python_name = 'copy_mrf_to_mesh_motion'
    argument_names = ['zone_name', 'overwrite']
    _child_classes = dict(
        zone_name=zone_name_2,
        overwrite=overwrite,
    )
    return_type = 'object'

class copy_mesh_to_mrf_motion(Command):
    """
    Copy motion variable values for origin, axis and velocities from Mesh Motion to Frame Motion.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
        overwrite : bool
            'overwrite' child.
    """
    _version = '241'
    fluent_name = 'copy-mesh-to-mrf-motion'
    _python_name = 'copy_mesh_to_mrf_motion'
    argument_names = ['zone_name', 'overwrite']
    _child_classes = dict(
        zone_name=zone_name_2,
        overwrite=overwrite,
    )
    return_type = 'object'

class cell_zone_conditions(Group, _ChildNamedObjectAccessorMixin):
    """
    'cell_zone_conditions' child.
    """
    _version = '241'
    fluent_name = 'cell-zone-conditions'
    _python_name = 'cell_zone_conditions'
    child_names = ['fluid', 'solid']
    command_names = ['copy', 'set_zone_type', 'activate_cell_zone', 'mrf_to_sliding_mesh', 'convert_all_solid_mrf_to_solid_motion', 'copy_mrf_to_mesh_motion', 'copy_mesh_to_mrf_motion']
    _child_classes = dict(
        fluid=fluid_1,
        solid=solid_1,
        copy=copy_1,
        set_zone_type=set_zone_type,
        activate_cell_zone=activate_cell_zone,
        mrf_to_sliding_mesh=mrf_to_sliding_mesh,
        convert_all_solid_mrf_to_solid_motion=convert_all_solid_mrf_to_solid_motion,
        copy_mrf_to_mesh_motion=copy_mrf_to_mesh_motion,
        copy_mesh_to_mrf_motion=copy_mesh_to_mrf_motion,
    )
    return_type = 'object'

class geom_disable(Boolean, AllowedValuesMixin):
    """
    Disable Geometry Based Adption.
    """
    _version = '241'
    fluent_name = 'geom-disable?'
    _python_name = 'geom_disable'
    return_type = 'object'

class geom_dir_spec(Boolean, AllowedValuesMixin):
    """
    Direction Specification.
    """
    _version = '241'
    fluent_name = 'geom-dir-spec'
    _python_name = 'geom_dir_spec'
    return_type = 'object'

class geom_dir_x(Real, AllowedValuesMixin):
    """
    X Direction.
    """
    _version = '241'
    fluent_name = 'geom-dir-x'
    _python_name = 'geom_dir_x'
    return_type = 'object'

class geom_dir_y(Real, AllowedValuesMixin):
    """
    Y Direction.
    """
    _version = '241'
    fluent_name = 'geom-dir-y'
    _python_name = 'geom_dir_y'
    return_type = 'object'

class geom_dir_z(Real, AllowedValuesMixin):
    """
    Z Direction.
    """
    _version = '241'
    fluent_name = 'geom-dir-z'
    _python_name = 'geom_dir_z'
    return_type = 'object'

class geom_levels(Integer, AllowedValuesMixin):
    """
    Levels.
    """
    _version = '241'
    fluent_name = 'geom-levels'
    _python_name = 'geom_levels'
    return_type = 'object'

class geom_bgthread(Integer, AllowedValuesMixin):
    """
    Background Thread.
    """
    _version = '241'
    fluent_name = 'geom-bgthread'
    _python_name = 'geom_bgthread'
    return_type = 'object'

class phase_2_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class phase_2(NamedObject[phase_2_child], _NonCreatableNamedObjectMixin[phase_2_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_2_child
    return_type = 'object'

class axis_1_child(Group):
    """
    'child_object_type' of axis.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'axis_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        name=name,
        phase=phase_2,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class axis_1(NamedObject[axis_1_child], _NonCreatableNamedObjectMixin[axis_1_child]):
    """
    'axis' child.
    """
    _version = '241'
    fluent_name = 'axis'
    _python_name = 'axis'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = axis_1_child
    return_type = 'object'

class degassing_child(Group):
    """
    'child_object_type' of degassing.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'degassing_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        name=name,
        phase=phase_2,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class degassing(NamedObject[degassing_child], _NonCreatableNamedObjectMixin[degassing_child]):
    """
    'degassing' child.
    """
    _version = '241'
    fluent_name = 'degassing'
    _python_name = 'degassing'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = degassing_child
    return_type = 'object'

class frame_of_reference(String, AllowedValuesMixin):
    """
    Backflow Reference Frame.
    """
    _version = '241'
    fluent_name = 'frame-of-reference'
    _python_name = 'frame_of_reference'
    return_type = 'object'

class gauge_pressure(Group):
    """
    Gauge Pressure.
    """
    _version = '241'
    fluent_name = 'gauge-pressure'
    _python_name = 'gauge_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class p_profile_multiplier(Real, AllowedValuesMixin):
    """
    Pressure Profile Multiplier.
    """
    _version = '241'
    fluent_name = 'p-profile-multiplier'
    _python_name = 'p_profile_multiplier'
    return_type = 'object'

class direction_spec(String, AllowedValuesMixin):
    """
    Backflow Direction Specification Method.
    """
    _version = '241'
    fluent_name = 'direction-spec'
    _python_name = 'direction_spec'
    return_type = 'object'

class coordinate_system(String, AllowedValuesMixin):
    """
    Coordinate System.
    """
    _version = '241'
    fluent_name = 'coordinate-system'
    _python_name = 'coordinate_system'
    return_type = 'object'

class flow_direction_child(Group):
    """
    'child_object_type' of flow_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'flow_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class flow_direction(ListObject[flow_direction_child]):
    """
    'flow_direction' child.
    """
    _version = '241'
    fluent_name = 'flow-direction'
    _python_name = 'flow_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = flow_direction_child
    return_type = 'object'

class p_backflow_spec_gen(String, AllowedValuesMixin):
    """
    Backflow Pressure Specification.
    """
    _version = '241'
    fluent_name = 'p-backflow-spec-gen'
    _python_name = 'p_backflow_spec_gen'
    return_type = 'object'

class p_backflow_spec(String, AllowedValuesMixin):
    """
    Backflow Pressure Specification.
    """
    _version = '241'
    fluent_name = 'p-backflow-spec'
    _python_name = 'p_backflow_spec'
    return_type = 'object'

class axis_direction_2_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of axis_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'axis_direction_child'
    return_type = 'object'

class axis_direction_2(ListObject[axis_direction_2_child]):
    """
    'axis_direction' child.
    """
    _version = '241'
    fluent_name = 'axis-direction'
    _python_name = 'axis_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = axis_direction_2_child
    return_type = 'object'

class axis_origin_2_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of axis_origin.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'axis_origin_child'
    return_type = 'object'

class axis_origin_2(ListObject[axis_origin_2_child]):
    """
    'axis_origin' child.
    """
    _version = '241'
    fluent_name = 'axis-origin'
    _python_name = 'axis_origin'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = axis_origin_2_child
    return_type = 'object'

class prevent_reverse_flow(Boolean, AllowedValuesMixin):
    """
    Build artificial walls to prevent reverse flow?.
    """
    _version = '241'
    fluent_name = 'prevent-reverse-flow?'
    _python_name = 'prevent_reverse_flow'
    return_type = 'object'

class radial(Boolean, AllowedValuesMixin):
    """
    'radial' child.
    """
    _version = '241'
    fluent_name = 'radial?'
    _python_name = 'radial'
    return_type = 'object'

class avg_press_spec(Boolean, AllowedValuesMixin):
    """
    Average Pressure Specification?.
    """
    _version = '241'
    fluent_name = 'avg-press-spec?'
    _python_name = 'avg_press_spec'
    return_type = 'object'

class press_averaging_method(String, AllowedValuesMixin):
    """
    Averaging Method.
    """
    _version = '241'
    fluent_name = 'press-averaging-method'
    _python_name = 'press_averaging_method'
    return_type = 'object'

class targeted_mf_boundary(Boolean, AllowedValuesMixin):
    """
    Targeted mass flow rate.
    """
    _version = '241'
    fluent_name = 'targeted-mf-boundary?'
    _python_name = 'targeted_mf_boundary'
    return_type = 'object'

class targeted_mf(Group):
    """
    Targeted mass flow.
    """
    _version = '241'
    fluent_name = 'targeted-mf'
    _python_name = 'targeted_mf'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class targeted_mf_pmax(Group):
    """
    Upper Limit of Absolute Pressure Value.
    """
    _version = '241'
    fluent_name = 'targeted-mf-pmax'
    _python_name = 'targeted_mf_pmax'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class targeted_mf_pmin(Group):
    """
    Lower Limit of Absolute Pressure Value.
    """
    _version = '241'
    fluent_name = 'targeted-mf-pmin'
    _python_name = 'targeted_mf_pmin'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class gen_nrbc_spec(String, AllowedValuesMixin):
    """
    Exit pressure specification.
    """
    _version = '241'
    fluent_name = 'gen-nrbc-spec'
    _python_name = 'gen_nrbc_spec'
    return_type = 'object'

class ac_options(String, AllowedValuesMixin):
    """
    'ac_options' child.
    """
    _version = '241'
    fluent_name = 'ac-options'
    _python_name = 'ac_options'
    return_type = 'object'

class impedance_0(Real, AllowedValuesMixin):
    """
    Zero order term.
    """
    _version = '241'
    fluent_name = 'impedance-0'
    _python_name = 'impedance_0'
    return_type = 'object'

class pole(Real, AllowedValuesMixin):
    """
    'pole' child.
    """
    _version = '241'
    fluent_name = 'pole'
    _python_name = 'pole'
    return_type = 'object'

class amplitude(Real, AllowedValuesMixin):
    """
    'amplitude' child.
    """
    _version = '241'
    fluent_name = 'amplitude'
    _python_name = 'amplitude'
    return_type = 'object'

class impedance_1_child(Group):
    """
    'child_object_type' of impedance_1.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'impedance_1_child'
    child_names = ['pole', 'amplitude']
    _child_classes = dict(
        pole=pole,
        amplitude=amplitude,
    )
    return_type = 'object'

class impedance_1(ListObject[impedance_1_child]):
    """
    Real Pole Series.
    """
    _version = '241'
    fluent_name = 'impedance-1'
    _python_name = 'impedance_1'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = impedance_1_child
    return_type = 'object'

class pole_real(Real, AllowedValuesMixin):
    """
    'pole_real' child.
    """
    _version = '241'
    fluent_name = 'pole-real'
    _python_name = 'pole_real'
    return_type = 'object'

class pole_imag(Real, AllowedValuesMixin):
    """
    'pole_imag' child.
    """
    _version = '241'
    fluent_name = 'pole-imag'
    _python_name = 'pole_imag'
    return_type = 'object'

class amplitude_real(Real, AllowedValuesMixin):
    """
    'amplitude_real' child.
    """
    _version = '241'
    fluent_name = 'amplitude-real'
    _python_name = 'amplitude_real'
    return_type = 'object'

class amplitude_imag(Real, AllowedValuesMixin):
    """
    'amplitude_imag' child.
    """
    _version = '241'
    fluent_name = 'amplitude-imag'
    _python_name = 'amplitude_imag'
    return_type = 'object'

class impedance_2_child(Group):
    """
    'child_object_type' of impedance_2.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'impedance_2_child'
    child_names = ['pole_real', 'pole_imag', 'amplitude_real', 'amplitude_imag']
    _child_classes = dict(
        pole_real=pole_real,
        pole_imag=pole_imag,
        amplitude_real=amplitude_real,
        amplitude_imag=amplitude_imag,
    )
    return_type = 'object'

class impedance_2(ListObject[impedance_2_child]):
    """
    Complex Pole Series.
    """
    _version = '241'
    fluent_name = 'impedance-2'
    _python_name = 'impedance_2'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = impedance_2_child
    return_type = 'object'

class ac_wave(Group):
    """
    Incoming Wave.
    """
    _version = '241'
    fluent_name = 'ac-wave'
    _python_name = 'ac_wave'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pressure_jump(Group):
    """
    Pressure Jump.
    """
    _version = '241'
    fluent_name = 'pressure-jump'
    _python_name = 'pressure_jump'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class strength(Group):
    """
    Strength.
    """
    _version = '241'
    fluent_name = 'strength'
    _python_name = 'strength'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class new_fan_definition(Boolean, AllowedValuesMixin):
    """
    New Fan Definition.
    """
    _version = '241'
    fluent_name = 'new-fan-definition'
    _python_name = 'new_fan_definition'
    return_type = 'object'

class momentum(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['frame_of_reference', 'gauge_pressure', 'p_profile_multiplier', 'direction_spec', 'coordinate_system', 'flow_direction', 'p_backflow_spec_gen', 'p_backflow_spec', 'axis_direction', 'axis_origin', 'prevent_reverse_flow', 'radial', 'avg_press_spec', 'press_averaging_method', 'targeted_mf_boundary', 'targeted_mf', 'targeted_mf_pmax', 'targeted_mf_pmin', 'gen_nrbc_spec', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'pressure_jump', 'strength', 'new_fan_definition']
    _child_classes = dict(
        frame_of_reference=frame_of_reference,
        gauge_pressure=gauge_pressure,
        p_profile_multiplier=p_profile_multiplier,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        p_backflow_spec_gen=p_backflow_spec_gen,
        p_backflow_spec=p_backflow_spec,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        prevent_reverse_flow=prevent_reverse_flow,
        radial=radial,
        avg_press_spec=avg_press_spec,
        press_averaging_method=press_averaging_method,
        targeted_mf_boundary=targeted_mf_boundary,
        targeted_mf=targeted_mf,
        targeted_mf_pmax=targeted_mf_pmax,
        targeted_mf_pmin=targeted_mf_pmin,
        gen_nrbc_spec=gen_nrbc_spec,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        pressure_jump=pressure_jump,
        strength=strength,
        new_fan_definition=new_fan_definition,
    )
    return_type = 'object'

class turbulent_specification(String, AllowedValuesMixin):
    """
    Turbulent Specification Method.
    """
    _version = '241'
    fluent_name = 'turbulent-specification'
    _python_name = 'turbulent_specification'
    return_type = 'object'

class modified_turbulent_viscosity(Group):
    """
    'modified_turbulent_viscosity' child.
    """
    _version = '241'
    fluent_name = 'modified-turbulent-viscosity'
    _python_name = 'modified_turbulent_viscosity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class laminar_kinetic_energy(Group):
    """
    'laminar_kinetic_energy' child.
    """
    _version = '241'
    fluent_name = 'laminar-kinetic-energy'
    _python_name = 'laminar_kinetic_energy'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class intermittency(Group):
    """
    'intermittency' child.
    """
    _version = '241'
    fluent_name = 'intermittency'
    _python_name = 'intermittency'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class turbulent_kinetic_energy(Group):
    """
    'turbulent_kinetic_energy' child.
    """
    _version = '241'
    fluent_name = 'turbulent-kinetic-energy'
    _python_name = 'turbulent_kinetic_energy'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class turbulent_dissipation_rate(Group):
    """
    'turbulent_dissipation_rate' child.
    """
    _version = '241'
    fluent_name = 'turbulent-dissipation-rate'
    _python_name = 'turbulent_dissipation_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class specific_dissipation_rate(Group):
    """
    'specific_dissipation_rate' child.
    """
    _version = '241'
    fluent_name = 'specific-dissipation-rate'
    _python_name = 'specific_dissipation_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class velocity_variance_scale(Group):
    """
    'velocity_variance_scale' child.
    """
    _version = '241'
    fluent_name = 'velocity-variance-scale'
    _python_name = 'velocity_variance_scale'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class turbulent_intensity(Real, AllowedValuesMixin):
    """
    'turbulent_intensity' child.
    """
    _version = '241'
    fluent_name = 'turbulent-intensity'
    _python_name = 'turbulent_intensity'
    return_type = 'object'

class turbulent_length_scale(Real, AllowedValuesMixin):
    """
    'turbulent_length_scale' child.
    """
    _version = '241'
    fluent_name = 'turbulent-length-scale'
    _python_name = 'turbulent_length_scale'
    return_type = 'object'

class hydraulic_diameter(Real, AllowedValuesMixin):
    """
    'hydraulic_diameter' child.
    """
    _version = '241'
    fluent_name = 'hydraulic-diameter'
    _python_name = 'hydraulic_diameter'
    return_type = 'object'

class turbulent_viscosity_ratio_real(Real, AllowedValuesMixin):
    """
    'turbulent_viscosity_ratio_real' child.
    """
    _version = '241'
    fluent_name = 'turbulent-viscosity-ratio-real'
    _python_name = 'turbulent_viscosity_ratio_real'
    return_type = 'object'

class turbulent_viscosity_ratio(Group):
    """
    'turbulent_viscosity_ratio' child.
    """
    _version = '241'
    fluent_name = 'turbulent-viscosity-ratio'
    _python_name = 'turbulent_viscosity_ratio'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class reynolds_stress_specification(String, AllowedValuesMixin):
    """
    Reynolds-Stress Specification Method.
    """
    _version = '241'
    fluent_name = 'reynolds-stress-specification'
    _python_name = 'reynolds_stress_specification'
    return_type = 'object'

class uu_reynolds_stresses(Group):
    """
    'uu_reynolds_stresses' child.
    """
    _version = '241'
    fluent_name = 'uu-reynolds-stresses'
    _python_name = 'uu_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class vv_reynolds_stresses(Group):
    """
    'vv_reynolds_stresses' child.
    """
    _version = '241'
    fluent_name = 'vv-reynolds-stresses'
    _python_name = 'vv_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ww_reynolds_stresses(Group):
    """
    'ww_reynolds_stresses' child.
    """
    _version = '241'
    fluent_name = 'ww-reynolds-stresses'
    _python_name = 'ww_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class uv_reynolds_stresses(Group):
    """
    'uv_reynolds_stresses' child.
    """
    _version = '241'
    fluent_name = 'uv-reynolds-stresses'
    _python_name = 'uv_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class vw_reynolds_stresses(Group):
    """
    'vw_reynolds_stresses' child.
    """
    _version = '241'
    fluent_name = 'vw-reynolds-stresses'
    _python_name = 'vw_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class uw_reynolds_stresses(Group):
    """
    'uw_reynolds_stresses' child.
    """
    _version = '241'
    fluent_name = 'uw-reynolds-stresses'
    _python_name = 'uw_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class subgrid_kinetic_energy_specification(String, AllowedValuesMixin):
    """
    Subgrid Kinetic Energy Specification Method.
    """
    _version = '241'
    fluent_name = 'subgrid-kinetic-energy-specification'
    _python_name = 'subgrid_kinetic_energy_specification'
    return_type = 'object'

class subgrid_kinetic_energy(Group):
    """
    Subgrid Kinetic Energy.
    """
    _version = '241'
    fluent_name = 'subgrid-kinetic-energy'
    _python_name = 'subgrid_kinetic_energy'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class subgrid_turbulent_intensity(Real, AllowedValuesMixin):
    """
    Subgrid Turbulent Intensity.
    """
    _version = '241'
    fluent_name = 'subgrid-turbulent-intensity'
    _python_name = 'subgrid_turbulent_intensity'
    return_type = 'object'

class turbulence(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'
    child_names = ['turbulent_specification', 'modified_turbulent_viscosity', 'laminar_kinetic_energy', 'intermittency', 'turbulent_kinetic_energy', 'turbulent_dissipation_rate', 'specific_dissipation_rate', 'velocity_variance_scale', 'turbulent_intensity', 'turbulent_length_scale', 'hydraulic_diameter', 'turbulent_viscosity_ratio_real', 'turbulent_viscosity_ratio', 'reynolds_stress_specification', 'uu_reynolds_stresses', 'vv_reynolds_stresses', 'ww_reynolds_stresses', 'uv_reynolds_stresses', 'vw_reynolds_stresses', 'uw_reynolds_stresses', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity']
    _child_classes = dict(
        turbulent_specification=turbulent_specification,
        modified_turbulent_viscosity=modified_turbulent_viscosity,
        laminar_kinetic_energy=laminar_kinetic_energy,
        intermittency=intermittency,
        turbulent_kinetic_energy=turbulent_kinetic_energy,
        turbulent_dissipation_rate=turbulent_dissipation_rate,
        specific_dissipation_rate=specific_dissipation_rate,
        velocity_variance_scale=velocity_variance_scale,
        turbulent_intensity=turbulent_intensity,
        turbulent_length_scale=turbulent_length_scale,
        hydraulic_diameter=hydraulic_diameter,
        turbulent_viscosity_ratio_real=turbulent_viscosity_ratio_real,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio,
        reynolds_stress_specification=reynolds_stress_specification,
        uu_reynolds_stresses=uu_reynolds_stresses,
        vv_reynolds_stresses=vv_reynolds_stresses,
        ww_reynolds_stresses=ww_reynolds_stresses,
        uv_reynolds_stresses=uv_reynolds_stresses,
        vw_reynolds_stresses=vw_reynolds_stresses,
        uw_reynolds_stresses=uw_reynolds_stresses,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
    )
    return_type = 'object'

class t0(Group):
    """
    Backflow Total Temperature.
    """
    _version = '241'
    fluent_name = 't0'
    _python_name = 't0'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class thermal(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'thermal'
    _python_name = 'thermal'
    child_names = ['t0']
    _child_classes = dict(
        t0=t0,
    )
    return_type = 'object'

class radiation_bc(String, AllowedValuesMixin):
    """
    Radiation BC Type.
    """
    _version = '241'
    fluent_name = 'radiation-bc'
    _python_name = 'radiation_bc'
    return_type = 'object'

class radial_direction_child(Group):
    """
    'child_object_type' of radial_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'radial_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class radial_direction(ListObject[radial_direction_child]):
    """
    'radial_direction' child.
    """
    _version = '241'
    fluent_name = 'radial-direction'
    _python_name = 'radial_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = radial_direction_child
    return_type = 'object'

class theta_width_of_beam(Real, AllowedValuesMixin):
    """
    Theta Width of Beam.
    """
    _version = '241'
    fluent_name = 'theta-width-of-beam'
    _python_name = 'theta_width_of_beam'
    return_type = 'object'

class phi_width_of_beam(Real, AllowedValuesMixin):
    """
    Phi Width of Beam.
    """
    _version = '241'
    fluent_name = 'phi-width-of-beam'
    _python_name = 'phi_width_of_beam'
    return_type = 'object'

class direct_irradiation_child(Group):
    """
    'child_object_type' of direct_irradiation.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'direct_irradiation_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direct_irradiation(NamedObject[direct_irradiation_child], _NonCreatableNamedObjectMixin[direct_irradiation_child]):
    """
    Direct Irradiation.
    """
    _version = '241'
    fluent_name = 'direct-irradiation'
    _python_name = 'direct_irradiation'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = direct_irradiation_child
    return_type = 'object'

class diffuse_irradiation_child(Group):
    """
    'child_object_type' of diffuse_irradiation.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'diffuse_irradiation_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class diffuse_irradiation(NamedObject[diffuse_irradiation_child], _NonCreatableNamedObjectMixin[diffuse_irradiation_child]):
    """
    Diffuse Irradiation.
    """
    _version = '241'
    fluent_name = 'diffuse-irradiation'
    _python_name = 'diffuse_irradiation'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = diffuse_irradiation_child
    return_type = 'object'

class parallel_collimated_beam(Boolean, AllowedValuesMixin):
    """
    'parallel_collimated_beam' child.
    """
    _version = '241'
    fluent_name = 'parallel-collimated-beam?'
    _python_name = 'parallel_collimated_beam'
    return_type = 'object'

class use_beeam_direction_from_solar_load_model_settings(Boolean, AllowedValuesMixin):
    """
    Use Beam Direction from Solar Load Model Settings.
    """
    _version = '241'
    fluent_name = 'use-beeam-direction-from-solar-load-model-settings'
    _python_name = 'use_beeam_direction_from_solar_load_model_settings'
    return_type = 'object'

class use_irradiation_from_solar_soad_model_settings(Boolean, AllowedValuesMixin):
    """
    Use Irradiation from Solar Load Model Settings.
    """
    _version = '241'
    fluent_name = 'use-irradiation-from-solar-soad-model-settings'
    _python_name = 'use_irradiation_from_solar_soad_model_settings'
    return_type = 'object'

class external_black_body_temperature_method(String, AllowedValuesMixin):
    """
    External Black Body Temperature Method.
    """
    _version = '241'
    fluent_name = 'external-black-body-temperature-method'
    _python_name = 'external_black_body_temperature_method'
    return_type = 'object'

class black_body_temperature(Real, AllowedValuesMixin):
    """
    Black Body Temperature.
    """
    _version = '241'
    fluent_name = 'black-body-temperature'
    _python_name = 'black_body_temperature'
    return_type = 'object'

class internal_emissivity(Group):
    """
    Internal Emissivity.
    """
    _version = '241'
    fluent_name = 'internal-emissivity'
    _python_name = 'internal_emissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class participates_in_solar_ray_tracing(Boolean, AllowedValuesMixin):
    """
    Participates in Solar Ray Tracing.
    """
    _version = '241'
    fluent_name = 'participates-in-solar-ray-tracing'
    _python_name = 'participates_in_solar_ray_tracing'
    return_type = 'object'

class solar_transmissivity_factor(Real, AllowedValuesMixin):
    """
    Solar Transmissivity Factor.
    """
    _version = '241'
    fluent_name = 'solar-transmissivity-factor'
    _python_name = 'solar_transmissivity_factor'
    return_type = 'object'

class radiating_s2s_surface(Boolean, AllowedValuesMixin):
    """
    Participates in View Factor Calculation?.
    """
    _version = '241'
    fluent_name = 'radiating-s2s-surface?'
    _python_name = 'radiating_s2s_surface'
    return_type = 'object'

class radiation_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['radiation_bc', 'radial_direction', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    return_type = 'object'

class mean_mixture_fraction(Group):
    """
    Mean Mixture Fraction.
    """
    _version = '241'
    fluent_name = 'mean-mixture-fraction'
    _python_name = 'mean_mixture_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class secondary_mean_mixture_fraction(Group):
    """
    Secondary Mean Mixture Fraction.
    """
    _version = '241'
    fluent_name = 'secondary-mean-mixture-fraction'
    _python_name = 'secondary_mean_mixture_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class mixture_fraction_variance(Group):
    """
    Mixture Fraction Variance.
    """
    _version = '241'
    fluent_name = 'mixture-fraction-variance'
    _python_name = 'mixture_fraction_variance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class secondary_mixture_fraction_variance(Group):
    """
    Secondary Mixture Fraction Variance.
    """
    _version = '241'
    fluent_name = 'secondary-mixture-fraction-variance'
    _python_name = 'secondary_mixture_fraction_variance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class specify_species_in_mole_fractions(Boolean, AllowedValuesMixin):
    """
    Species in Mole Fractions?.
    """
    _version = '241'
    fluent_name = 'specify-species-in-mole-fractions?'
    _python_name = 'specify_species_in_mole_fractions'
    return_type = 'object'

class mf_child(Group):
    """
    'child_object_type' of mf.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'mf_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class mf(NamedObject[mf_child], _NonCreatableNamedObjectMixin[mf_child]):
    """
    'mf' child.
    """
    _version = '241'
    fluent_name = 'mf'
    _python_name = 'mf'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = mf_child
    return_type = 'object'

class mixture_fraction(Group):
    """
    'mixture_fraction' child.
    """
    _version = '241'
    fluent_name = 'mixture-fraction'
    _python_name = 'mixture_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class mode_2_probability(Group):
    """
    'mode_2_probability' child.
    """
    _version = '241'
    fluent_name = 'mode-2-probability'
    _python_name = 'mode_2_probability'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class mode_3_probability(Group):
    """
    'mode_3_probability' child.
    """
    _version = '241'
    fluent_name = 'mode-3-probability'
    _python_name = 'mode_3_probability'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class progress_variable(Group):
    """
    'progress_variable' child.
    """
    _version = '241'
    fluent_name = 'progress-variable'
    _python_name = 'progress_variable'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class progress_variable_variance(Group):
    """
    'progress_variable_variance' child.
    """
    _version = '241'
    fluent_name = 'progress-variable-variance'
    _python_name = 'progress_variable_variance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class flame_area_density(Group):
    """
    'flame_area_density' child.
    """
    _version = '241'
    fluent_name = 'flame-area-density'
    _python_name = 'flame_area_density'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class inert_stream(Group):
    """
    'inert_stream' child.
    """
    _version = '241'
    fluent_name = 'inert-stream'
    _python_name = 'inert_stream'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollutant_no_mass_fraction(Group):
    """
    'pollutant_no_mass_fraction' child.
    """
    _version = '241'
    fluent_name = 'pollutant-no-mass-fraction'
    _python_name = 'pollutant_no_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class fraction(Group):
    """
    'fraction' child.
    """
    _version = '241'
    fluent_name = 'fraction'
    _python_name = 'fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollutant_nh3_mass_fraction(Group):
    """
    'pollutant_nh3_mass_fraction' child.
    """
    _version = '241'
    fluent_name = 'pollutant-nh3-mass-fraction'
    _python_name = 'pollutant_nh3_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollutant_n2o_mass_fraction(Group):
    """
    'pollutant_n2o_mass_fraction' child.
    """
    _version = '241'
    fluent_name = 'pollutant-n2o-mass-fraction'
    _python_name = 'pollutant_n2o_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_urea(Group):
    """
    'pollut_urea' child.
    """
    _version = '241'
    fluent_name = 'pollut-urea'
    _python_name = 'pollut_urea'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hnco(Group):
    """
    'pollut_hnco' child.
    """
    _version = '241'
    fluent_name = 'pollut-hnco'
    _python_name = 'pollut_hnco'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_nco(Group):
    """
    'pollut_nco' child.
    """
    _version = '241'
    fluent_name = 'pollut-nco'
    _python_name = 'pollut_nco'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_so2(Group):
    """
    'pollut_so2' child.
    """
    _version = '241'
    fluent_name = 'pollut-so2'
    _python_name = 'pollut_so2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_h2s(Group):
    """
    'pollut_h2s' child.
    """
    _version = '241'
    fluent_name = 'pollut-h2s'
    _python_name = 'pollut_h2s'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_so3(Group):
    """
    'pollut_so3' child.
    """
    _version = '241'
    fluent_name = 'pollut-so3'
    _python_name = 'pollut_so3'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_sh(Group):
    """
    'pollut_sh' child.
    """
    _version = '241'
    fluent_name = 'pollut-sh'
    _python_name = 'pollut_sh'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_so(Group):
    """
    'pollut_so' child.
    """
    _version = '241'
    fluent_name = 'pollut-so'
    _python_name = 'pollut_so'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class soot_mass_fraction(Group):
    """
    'soot_mass_fraction' child.
    """
    _version = '241'
    fluent_name = 'soot-mass-fraction'
    _python_name = 'soot_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class nuclei(Group):
    """
    'nuclei' child.
    """
    _version = '241'
    fluent_name = 'nuclei'
    _python_name = 'nuclei'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class tar_mass_fraction(Group):
    """
    'tar_mass_fraction' child.
    """
    _version = '241'
    fluent_name = 'tar-mass-fraction'
    _python_name = 'tar_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hg(Group):
    """
    'pollut_hg' child.
    """
    _version = '241'
    fluent_name = 'pollut-hg'
    _python_name = 'pollut_hg'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hgcl2(Group):
    """
    'pollut_hgcl2' child.
    """
    _version = '241'
    fluent_name = 'pollut-hgcl2'
    _python_name = 'pollut_hgcl2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hcl(Group):
    """
    'pollut_hcl' child.
    """
    _version = '241'
    fluent_name = 'pollut-hcl'
    _python_name = 'pollut_hcl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hgo(Group):
    """
    'pollut_hgo' child.
    """
    _version = '241'
    fluent_name = 'pollut-hgo'
    _python_name = 'pollut_hgo'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_cl(Group):
    """
    'pollut_cl' child.
    """
    _version = '241'
    fluent_name = 'pollut-cl'
    _python_name = 'pollut_cl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_cl2(Group):
    """
    'pollut_cl2' child.
    """
    _version = '241'
    fluent_name = 'pollut-cl2'
    _python_name = 'pollut_cl2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hgcl(Group):
    """
    'pollut_hgcl' child.
    """
    _version = '241'
    fluent_name = 'pollut-hgcl'
    _python_name = 'pollut_hgcl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hocl(Group):
    """
    'pollut_hocl' child.
    """
    _version = '241'
    fluent_name = 'pollut-hocl'
    _python_name = 'pollut_hocl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class tss_scalar_child(Group):
    """
    'child_object_type' of tss_scalar.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'tss_scalar_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class tss_scalar(NamedObject[tss_scalar_child], _NonCreatableNamedObjectMixin[tss_scalar_child]):
    """
    'tss_scalar' child.
    """
    _version = '241'
    fluent_name = 'tss-scalar'
    _python_name = 'tss_scalar'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = tss_scalar_child
    return_type = 'object'

class species_5(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['mean_mixture_fraction', 'secondary_mean_mixture_fraction', 'mixture_fraction_variance', 'secondary_mixture_fraction_variance', 'specify_species_in_mole_fractions', 'mf', 'mixture_fraction', 'mode_2_probability', 'mode_3_probability', 'progress_variable', 'progress_variable_variance', 'flame_area_density', 'inert_stream', 'pollutant_no_mass_fraction', 'fraction', 'pollutant_nh3_mass_fraction', 'pollutant_n2o_mass_fraction', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'soot_mass_fraction', 'nuclei', 'tar_mass_fraction', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar']
    _child_classes = dict(
        mean_mixture_fraction=mean_mixture_fraction,
        secondary_mean_mixture_fraction=secondary_mean_mixture_fraction,
        mixture_fraction_variance=mixture_fraction_variance,
        secondary_mixture_fraction_variance=secondary_mixture_fraction_variance,
        specify_species_in_mole_fractions=specify_species_in_mole_fractions,
        mf=mf,
        mixture_fraction=mixture_fraction,
        mode_2_probability=mode_2_probability,
        mode_3_probability=mode_3_probability,
        progress_variable=progress_variable,
        progress_variable_variance=progress_variable_variance,
        flame_area_density=flame_area_density,
        inert_stream=inert_stream,
        pollutant_no_mass_fraction=pollutant_no_mass_fraction,
        fraction=fraction,
        pollutant_nh3_mass_fraction=pollutant_nh3_mass_fraction,
        pollutant_n2o_mass_fraction=pollutant_n2o_mass_fraction,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        soot_mass_fraction=soot_mass_fraction,
        nuclei=nuclei,
        tar_mass_fraction=tar_mass_fraction,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
    )
    return_type = 'object'

class discrete_phase_bc_type(String, AllowedValuesMixin):
    """
    Discrete Phase BC Type.
    """
    _version = '241'
    fluent_name = 'discrete-phase-bc-type'
    _python_name = 'discrete_phase_bc_type'
    return_type = 'object'

class dem_collision_partner(String, AllowedValuesMixin):
    """
    DEM Collision Partner.
    """
    _version = '241'
    fluent_name = 'dem-collision-partner'
    _python_name = 'dem_collision_partner'
    return_type = 'object'

class reinj_inj(String, AllowedValuesMixin):
    """
    Use Settings from.
    """
    _version = '241'
    fluent_name = 'reinj-inj'
    _python_name = 'reinj_inj'
    return_type = 'object'

class discrete_phase_bc_function(String, AllowedValuesMixin):
    """
    Discrete Phase BC Function.
    """
    _version = '241'
    fluent_name = 'discrete-phase-bc-function'
    _python_name = 'discrete_phase_bc_function'
    return_type = 'object'

class mixing_plane_thread(Boolean, AllowedValuesMixin):
    """
    Is zone used in mixing-plane model?.
    """
    _version = '241'
    fluent_name = 'mixing-plane-thread?'
    _python_name = 'mixing_plane_thread'
    return_type = 'object'

class dpm(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'dpm'
    _python_name = 'dpm'
    child_names = ['discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'discrete_phase_bc_function', 'mixing_plane_thread']
    _child_classes = dict(
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        discrete_phase_bc_function=discrete_phase_bc_function,
        mixing_plane_thread=mixing_plane_thread,
    )
    return_type = 'object'

class open_channel(Boolean, AllowedValuesMixin):
    """
    Open Channel.
    """
    _version = '241'
    fluent_name = 'open-channel?'
    _python_name = 'open_channel'
    return_type = 'object'

class outlet_number(Integer, AllowedValuesMixin):
    """
    Outlet Group ID.
    """
    _version = '241'
    fluent_name = 'outlet-number'
    _python_name = 'outlet_number'
    return_type = 'object'

class pressure_spec_method(String, AllowedValuesMixin):
    """
    Pressure Specification Method.
    """
    _version = '241'
    fluent_name = 'pressure-spec-method'
    _python_name = 'pressure_spec_method'
    return_type = 'object'

class press_spec(String, AllowedValuesMixin):
    """
    Pressure Specification Method.
    """
    _version = '241'
    fluent_name = 'press-spec'
    _python_name = 'press_spec'
    return_type = 'object'

class phase_spec(String, AllowedValuesMixin):
    """
    Secondary Phase for Level Specification.
    """
    _version = '241'
    fluent_name = 'phase-spec'
    _python_name = 'phase_spec'
    return_type = 'object'

class ht_local(Group):
    """
    Free Surface Level.
    """
    _version = '241'
    fluent_name = 'ht-local'
    _python_name = 'ht_local'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ht_bottom(Group):
    """
    Bottom Level.
    """
    _version = '241'
    fluent_name = 'ht-bottom'
    _python_name = 'ht_bottom'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class den_spec(String, AllowedValuesMixin):
    """
    Density Interpolation Method.
    """
    _version = '241'
    fluent_name = 'den-spec'
    _python_name = 'den_spec'
    return_type = 'object'

class granular_temperature(Group):
    """
    'granular_temperature' child.
    """
    _version = '241'
    fluent_name = 'granular-temperature'
    _python_name = 'granular_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class interfacial_area_concentration(Group):
    """
    'interfacial_area_concentration' child.
    """
    _version = '241'
    fluent_name = 'interfacial-area-concentration'
    _python_name = 'interfacial_area_concentration'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class level_set_function_flux(Group):
    """
    'level_set_function_flux' child.
    """
    _version = '241'
    fluent_name = 'level-set-function-flux'
    _python_name = 'level_set_function_flux'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class vof_spec(String, AllowedValuesMixin):
    """
    Volume Fraction Specification Method.
    """
    _version = '241'
    fluent_name = 'vof-spec'
    _python_name = 'vof_spec'
    return_type = 'object'

class volume_fraction(Group):
    """
    'volume_fraction' child.
    """
    _version = '241'
    fluent_name = 'volume-fraction'
    _python_name = 'volume_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pb_disc_bc_child(String, AllowedValuesMixin):
    """
    'child_object_type' of pb_disc_bc.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pb_disc_bc_child'
    return_type = 'object'

class pb_disc_bc(NamedObject[pb_disc_bc_child], _NonCreatableNamedObjectMixin[pb_disc_bc_child]):
    """
    'pb_disc_bc' child.
    """
    _version = '241'
    fluent_name = 'pb-disc-bc'
    _python_name = 'pb_disc_bc'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pb_disc_bc_child
    return_type = 'object'

class pb_disc_child(Group):
    """
    'child_object_type' of pb_disc.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pb_disc_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pb_disc(NamedObject[pb_disc_child], _NonCreatableNamedObjectMixin[pb_disc_child]):
    """
    'pb_disc' child.
    """
    _version = '241'
    fluent_name = 'pb-disc'
    _python_name = 'pb_disc'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pb_disc_child
    return_type = 'object'

class pb_qmom_bc_child(String, AllowedValuesMixin):
    """
    'child_object_type' of pb_qmom_bc.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pb_qmom_bc_child'
    return_type = 'object'

class pb_qmom_bc(NamedObject[pb_qmom_bc_child], _NonCreatableNamedObjectMixin[pb_qmom_bc_child]):
    """
    'pb_qmom_bc' child.
    """
    _version = '241'
    fluent_name = 'pb-qmom-bc'
    _python_name = 'pb_qmom_bc'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pb_qmom_bc_child
    return_type = 'object'

class pb_qmom_child(Group):
    """
    'child_object_type' of pb_qmom.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pb_qmom_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pb_qmom(NamedObject[pb_qmom_child], _NonCreatableNamedObjectMixin[pb_qmom_child]):
    """
    'pb_qmom' child.
    """
    _version = '241'
    fluent_name = 'pb-qmom'
    _python_name = 'pb_qmom'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pb_qmom_child
    return_type = 'object'

class pb_qbmm_bc_child(String, AllowedValuesMixin):
    """
    'child_object_type' of pb_qbmm_bc.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pb_qbmm_bc_child'
    return_type = 'object'

class pb_qbmm_bc(NamedObject[pb_qbmm_bc_child], _NonCreatableNamedObjectMixin[pb_qbmm_bc_child]):
    """
    'pb_qbmm_bc' child.
    """
    _version = '241'
    fluent_name = 'pb-qbmm-bc'
    _python_name = 'pb_qbmm_bc'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pb_qbmm_bc_child
    return_type = 'object'

class pb_qbmm_child(Group):
    """
    'child_object_type' of pb_qbmm.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pb_qbmm_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pb_qbmm(NamedObject[pb_qbmm_child], _NonCreatableNamedObjectMixin[pb_qbmm_child]):
    """
    'pb_qbmm' child.
    """
    _version = '241'
    fluent_name = 'pb-qbmm'
    _python_name = 'pb_qbmm'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pb_qbmm_child
    return_type = 'object'

class pb_smm_bc_child(String, AllowedValuesMixin):
    """
    'child_object_type' of pb_smm_bc.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pb_smm_bc_child'
    return_type = 'object'

class pb_smm_bc(NamedObject[pb_smm_bc_child], _NonCreatableNamedObjectMixin[pb_smm_bc_child]):
    """
    'pb_smm_bc' child.
    """
    _version = '241'
    fluent_name = 'pb-smm-bc'
    _python_name = 'pb_smm_bc'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pb_smm_bc_child
    return_type = 'object'

class pb_smm_child(Group):
    """
    'child_object_type' of pb_smm.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pb_smm_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pb_smm(NamedObject[pb_smm_child], _NonCreatableNamedObjectMixin[pb_smm_child]):
    """
    'pb_smm' child.
    """
    _version = '241'
    fluent_name = 'pb-smm'
    _python_name = 'pb_smm'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pb_smm_child
    return_type = 'object'

class pb_dqmom_bc_child(String, AllowedValuesMixin):
    """
    'child_object_type' of pb_dqmom_bc.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pb_dqmom_bc_child'
    return_type = 'object'

class pb_dqmom_bc(NamedObject[pb_dqmom_bc_child], _NonCreatableNamedObjectMixin[pb_dqmom_bc_child]):
    """
    'pb_dqmom_bc' child.
    """
    _version = '241'
    fluent_name = 'pb-dqmom-bc'
    _python_name = 'pb_dqmom_bc'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pb_dqmom_bc_child
    return_type = 'object'

class pb_dqmom_child(Group):
    """
    'child_object_type' of pb_dqmom.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pb_dqmom_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pb_dqmom(NamedObject[pb_dqmom_child], _NonCreatableNamedObjectMixin[pb_dqmom_child]):
    """
    'pb_dqmom' child.
    """
    _version = '241'
    fluent_name = 'pb-dqmom'
    _python_name = 'pb_dqmom'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pb_dqmom_child
    return_type = 'object'

class wsf(Group):
    """
    Backflow Relative humidity.
    """
    _version = '241'
    fluent_name = 'wsf'
    _python_name = 'wsf'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wsb(Group):
    """
    Backflow Liquid Mass Fraction.
    """
    _version = '241'
    fluent_name = 'wsb'
    _python_name = 'wsb'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wsn(Group):
    """
    Backflow Log10(Droplets Per Unit Volume).
    """
    _version = '241'
    fluent_name = 'wsn'
    _python_name = 'wsn'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class multiphase_2(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['open_channel', 'outlet_number', 'pressure_spec_method', 'press_spec', 'phase_spec', 'ht_local', 'ht_bottom', 'den_spec', 'granular_temperature', 'interfacial_area_concentration', 'level_set_function_flux', 'vof_spec', 'volume_fraction', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_qbmm_bc', 'pb_qbmm', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'wsf', 'wsb', 'wsn']
    _child_classes = dict(
        open_channel=open_channel,
        outlet_number=outlet_number,
        pressure_spec_method=pressure_spec_method,
        press_spec=press_spec,
        phase_spec=phase_spec,
        ht_local=ht_local,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        granular_temperature=granular_temperature,
        interfacial_area_concentration=interfacial_area_concentration,
        level_set_function_flux=level_set_function_flux,
        vof_spec=vof_spec,
        volume_fraction=volume_fraction,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_qbmm_bc=pb_qbmm_bc,
        pb_qbmm=pb_qbmm,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
    )
    return_type = 'object'

class potential_boundary_condition(String, AllowedValuesMixin):
    """
    Potential Boundary Condition.
    """
    _version = '241'
    fluent_name = 'potential-boundary-condition'
    _python_name = 'potential_boundary_condition'
    return_type = 'object'

class potential_boundary_value(Group):
    """
    'potential_boundary_value' child.
    """
    _version = '241'
    fluent_name = 'potential-boundary-value'
    _python_name = 'potential_boundary_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class electrolyte_potential_boundary_condition(String, AllowedValuesMixin):
    """
    Electrolyte Potential Boundary Condition.
    """
    _version = '241'
    fluent_name = 'electrolyte-potential-boundary-condition'
    _python_name = 'electrolyte_potential_boundary_condition'
    return_type = 'object'

class current_density_boundary_value(Group):
    """
    'current_density_boundary_value' child.
    """
    _version = '241'
    fluent_name = 'current-density-boundary-value'
    _python_name = 'current_density_boundary_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class potential_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'potential'
    _python_name = 'potential'
    child_names = ['potential_boundary_condition', 'potential_boundary_value', 'electrolyte_potential_boundary_condition', 'current_density_boundary_value']
    _child_classes = dict(
        potential_boundary_condition=potential_boundary_condition,
        potential_boundary_value=potential_boundary_value,
        electrolyte_potential_boundary_condition=electrolyte_potential_boundary_condition,
        current_density_boundary_value=current_density_boundary_value,
    )
    return_type = 'object'

class x_displacement_type(String, AllowedValuesMixin):
    """
    X-Displacement Boundary Condition.
    """
    _version = '241'
    fluent_name = 'x-displacement-type'
    _python_name = 'x_displacement_type'
    return_type = 'object'

class x_displacement_value(Group):
    """
    X-Component Boundary Value.
    """
    _version = '241'
    fluent_name = 'x-displacement-value'
    _python_name = 'x_displacement_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class y_displacement_type(String, AllowedValuesMixin):
    """
    Y-Displacement Boundary Condition.
    """
    _version = '241'
    fluent_name = 'y-displacement-type'
    _python_name = 'y_displacement_type'
    return_type = 'object'

class y_displacement_value(Group):
    """
    Y-Component Boundary Value.
    """
    _version = '241'
    fluent_name = 'y-displacement-value'
    _python_name = 'y_displacement_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class z_displacement_type(String, AllowedValuesMixin):
    """
    Z-Displacement Boundary Condition.
    """
    _version = '241'
    fluent_name = 'z-displacement-type'
    _python_name = 'z_displacement_type'
    return_type = 'object'

class z_displacement_value(Group):
    """
    Z-Component Boundary Value.
    """
    _version = '241'
    fluent_name = 'z-displacement-value'
    _python_name = 'z_displacement_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class structure_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'structure'
    _python_name = 'structure'
    child_names = ['x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value']
    _child_classes = dict(
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
    )
    return_type = 'object'

class uds_bc_child(String, AllowedValuesMixin):
    """
    'child_object_type' of uds_bc.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'uds_bc_child'
    return_type = 'object'

class uds_bc(NamedObject[uds_bc_child], _NonCreatableNamedObjectMixin[uds_bc_child]):
    """
    'uds_bc' child.
    """
    _version = '241'
    fluent_name = 'uds-bc'
    _python_name = 'uds_bc'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = uds_bc_child
    return_type = 'object'

class uds_1_child(Group):
    """
    'child_object_type' of uds.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'uds_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class uds_1(NamedObject[uds_1_child], _NonCreatableNamedObjectMixin[uds_1_child]):
    """
    'uds' child.
    """
    _version = '241'
    fluent_name = 'uds'
    _python_name = 'uds'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = uds_1_child
    return_type = 'object'

class uds(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'uds'
    _python_name = 'uds'
    child_names = ['uds_bc', 'uds']
    _child_classes = dict(
        uds_bc=uds_bc,
        uds=uds_1,
    )
    return_type = 'object'

class fensapice_flow_bc_subtype(Integer, AllowedValuesMixin):
    """
    'fensapice_flow_bc_subtype' child.
    """
    _version = '241'
    fluent_name = 'fensapice-flow-bc-subtype'
    _python_name = 'fensapice_flow_bc_subtype'
    return_type = 'object'

class icing(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'icing'
    _python_name = 'icing'
    child_names = ['fensapice_flow_bc_subtype']
    _child_classes = dict(
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
    )
    return_type = 'object'

class geometry_4(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class phase_3_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        dpm=dpm,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
    )
    return_type = 'object'

class phase_3(NamedObject[phase_3_child], _NonCreatableNamedObjectMixin[phase_3_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_3_child
    return_type = 'object'

class exhaust_fan_child(Group):
    """
    'child_object_type' of exhaust_fan.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'exhaust_fan_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        name=name,
        phase=phase_3,
        momentum=momentum,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        dpm=dpm,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
    )
    return_type = 'object'

class exhaust_fan(NamedObject[exhaust_fan_child], _NonCreatableNamedObjectMixin[exhaust_fan_child]):
    """
    'exhaust_fan' child.
    """
    _version = '241'
    fluent_name = 'exhaust-fan'
    _python_name = 'exhaust_fan'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = exhaust_fan_child
    return_type = 'object'

class porous_jump_turb_wall_treatment(Boolean, AllowedValuesMixin):
    """
    'porous_jump_turb_wall_treatment' child.
    """
    _version = '241'
    fluent_name = 'porous-jump-turb-wall-treatment?'
    _python_name = 'porous_jump_turb_wall_treatment'
    return_type = 'object'

class dir(Integer, AllowedValuesMixin):
    """
    Flow Direction (-1,1).
    """
    _version = '241'
    fluent_name = 'dir'
    _python_name = 'dir'
    return_type = 'object'

class average_dp(Boolean, AllowedValuesMixin):
    """
    Calculate Pressure-Jump from Average Conditions?.
    """
    _version = '241'
    fluent_name = 'average-dp?'
    _python_name = 'average_dp'
    return_type = 'object'

class limit_range(Boolean, AllowedValuesMixin):
    """
    Limit Polynomial Velocity Range?.
    """
    _version = '241'
    fluent_name = 'limit-range?'
    _python_name = 'limit_range'
    return_type = 'object'

class v_min(Real, AllowedValuesMixin):
    """
    Polynomial Range: Minimum Velocity Magnitude.
    """
    _version = '241'
    fluent_name = 'v-min'
    _python_name = 'v_min'
    return_type = 'object'

class v_max(Real, AllowedValuesMixin):
    """
    Polynomial Range: Maximum Velocity Magnitude.
    """
    _version = '241'
    fluent_name = 'v-max'
    _python_name = 'v_max'
    return_type = 'object'

class profile_dp(Boolean, AllowedValuesMixin):
    """
    Profile Specification of Pressure-Jump?.
    """
    _version = '241'
    fluent_name = 'profile-dp?'
    _python_name = 'profile_dp'
    return_type = 'object'

class dp_profile(Group):
    """
    Pressure Jump Profile.
    """
    _version = '241'
    fluent_name = 'dp-profile'
    _python_name = 'dp_profile'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class swirl_model(Boolean, AllowedValuesMixin):
    """
    Swirl-Velocity Specification?.
    """
    _version = '241'
    fluent_name = 'swirl-model?'
    _python_name = 'swirl_model'
    return_type = 'object'

class fan_vr(RealList, AllowedValuesMixin):
    """
    Radial-Velocity Polynomial Coefficient.
    """
    _version = '241'
    fluent_name = 'fan-vr'
    _python_name = 'fan_vr'
    return_type = 'object'

class fr(RealList, AllowedValuesMixin):
    """
    Tangential-Velocity Polynomial Coefficient.
    """
    _version = '241'
    fluent_name = 'fr'
    _python_name = 'fr'
    return_type = 'object'

class hub(Real, AllowedValuesMixin):
    """
    Fan Hub Radius.
    """
    _version = '241'
    fluent_name = 'hub'
    _python_name = 'hub'
    return_type = 'object'

class profile_vt(Boolean, AllowedValuesMixin):
    """
    Profile Specification of Tangential Velocity?.
    """
    _version = '241'
    fluent_name = 'profile-vt?'
    _python_name = 'profile_vt'
    return_type = 'object'

class vt_profile(Group):
    """
    Tangential Velocity Profile.
    """
    _version = '241'
    fluent_name = 'vt-profile'
    _python_name = 'vt_profile'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class profile_vr(Boolean, AllowedValuesMixin):
    """
    Profile Specification of Radial Velocity?.
    """
    _version = '241'
    fluent_name = 'profile-vr?'
    _python_name = 'profile_vr'
    return_type = 'object'

class vr_profile(Group):
    """
    Radial Velocity Profile.
    """
    _version = '241'
    fluent_name = 'vr-profile'
    _python_name = 'vr_profile'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class swirl_factor(Real, AllowedValuesMixin):
    """
    Swirl factor.
    """
    _version = '241'
    fluent_name = 'swirl-factor'
    _python_name = 'swirl_factor'
    return_type = 'object'

class phase_4_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'porous_jump_turb_wall_treatment', 'dir', 'average_dp', 'pressure_jump', 'limit_range', 'v_min', 'v_max', 'strength', 'profile_dp', 'dp_profile', 'swirl_model', 'fan_vr', 'fr', 'hub', 'axis_origin', 'axis_direction', 'profile_vt', 'vt_profile', 'profile_vr', 'vr_profile', 'swirl_factor', 'discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'discrete_phase_bc_function', 'new_fan_definition']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        dir=dir,
        average_dp=average_dp,
        pressure_jump=pressure_jump,
        limit_range=limit_range,
        v_min=v_min,
        v_max=v_max,
        strength=strength,
        profile_dp=profile_dp,
        dp_profile=dp_profile,
        swirl_model=swirl_model,
        fan_vr=fan_vr,
        fr=fr,
        hub=hub,
        axis_origin=axis_origin_2,
        axis_direction=axis_direction_2,
        profile_vt=profile_vt,
        vt_profile=vt_profile,
        profile_vr=profile_vr,
        vr_profile=vr_profile,
        swirl_factor=swirl_factor,
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        discrete_phase_bc_function=discrete_phase_bc_function,
        new_fan_definition=new_fan_definition,
    )
    return_type = 'object'

class phase_4(NamedObject[phase_4_child], _NonCreatableNamedObjectMixin[phase_4_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_4_child
    return_type = 'object'

class fan_child(Group):
    """
    'child_object_type' of fan.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'fan_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'porous_jump_turb_wall_treatment', 'dir', 'average_dp', 'pressure_jump', 'limit_range', 'v_min', 'v_max', 'strength', 'profile_dp', 'dp_profile', 'swirl_model', 'fan_vr', 'fr', 'hub', 'axis_origin', 'axis_direction', 'profile_vt', 'vt_profile', 'profile_vr', 'vr_profile', 'swirl_factor', 'discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'discrete_phase_bc_function', 'new_fan_definition']
    _child_classes = dict(
        name=name,
        phase=phase_4,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        dir=dir,
        average_dp=average_dp,
        pressure_jump=pressure_jump,
        limit_range=limit_range,
        v_min=v_min,
        v_max=v_max,
        strength=strength,
        profile_dp=profile_dp,
        dp_profile=dp_profile,
        swirl_model=swirl_model,
        fan_vr=fan_vr,
        fr=fr,
        hub=hub,
        axis_origin=axis_origin_2,
        axis_direction=axis_direction_2,
        profile_vt=profile_vt,
        vt_profile=vt_profile,
        profile_vr=profile_vr,
        vr_profile=vr_profile,
        swirl_factor=swirl_factor,
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        discrete_phase_bc_function=discrete_phase_bc_function,
        new_fan_definition=new_fan_definition,
    )
    return_type = 'object'

class fan(NamedObject[fan_child], _NonCreatableNamedObjectMixin[fan_child]):
    """
    'fan' child.
    """
    _version = '241'
    fluent_name = 'fan'
    _python_name = 'fan'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = fan_child
    return_type = 'object'

class geometry_3_child(Group):
    """
    'child_object_type' of geometry.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'geometry_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        name=name,
        phase=phase_2,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class geometry_3(NamedObject[geometry_3_child], _NonCreatableNamedObjectMixin[geometry_3_child]):
    """
    'geometry' child.
    """
    _version = '241'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = geometry_3_child
    return_type = 'object'

class reference_frame_2(String, AllowedValuesMixin):
    """
    Reference Frame.
    """
    _version = '241'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'
    return_type = 'object'

class gauge_total_pressure(Group):
    """
    Gauge Total Pressure.
    """
    _version = '241'
    fluent_name = 'gauge-total-pressure'
    _python_name = 'gauge_total_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class supersonic_or_initial_gauge_pressure(Group):
    """
    Supersonic/Initial Gauge Pressure.
    """
    _version = '241'
    fluent_name = 'supersonic-or-initial-gauge-pressure'
    _python_name = 'supersonic_or_initial_gauge_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_specification_method(String, AllowedValuesMixin):
    """
    Direction Specification Method.
    """
    _version = '241'
    fluent_name = 'direction-specification-method'
    _python_name = 'direction_specification_method'
    return_type = 'object'

class direction_vector_child(Group):
    """
    'child_object_type' of direction_vector.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'direction_vector_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_vector(ListObject[direction_vector_child]):
    """
    'direction_vector' child.
    """
    _version = '241'
    fluent_name = 'direction-vector'
    _python_name = 'direction_vector'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = direction_vector_child
    return_type = 'object'

class loss_coefficient(Group):
    """
    Loss Coefficient.
    """
    _version = '241'
    fluent_name = 'loss-coefficient'
    _python_name = 'loss_coefficient'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class momentum_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['reference_frame', 'gauge_total_pressure', 'supersonic_or_initial_gauge_pressure', 'direction_specification_method', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'prevent_reverse_flow', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'loss_coefficient', 'strength']
    _child_classes = dict(
        reference_frame=reference_frame_2,
        gauge_total_pressure=gauge_total_pressure,
        supersonic_or_initial_gauge_pressure=supersonic_or_initial_gauge_pressure,
        direction_specification_method=direction_specification_method,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        prevent_reverse_flow=prevent_reverse_flow,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        loss_coefficient=loss_coefficient,
        strength=strength,
    )
    return_type = 'object'

class number_of_vortices(Integer, AllowedValuesMixin):
    """
    Number of Vortices.
    """
    _version = '241'
    fluent_name = 'number-of-vortices'
    _python_name = 'number_of_vortices'
    return_type = 'object'

class include_streamwise_fluctuations(Boolean, AllowedValuesMixin):
    """
    Include Streamwise Fluctuations?.
    """
    _version = '241'
    fluent_name = 'include-streamwise-fluctuations?'
    _python_name = 'include_streamwise_fluctuations'
    return_type = 'object'

class satisfy_mass_conservation(Boolean, AllowedValuesMixin):
    """
    Satisfy Mass Conservation?.
    """
    _version = '241'
    fluent_name = 'satisfy-mass-conservation?'
    _python_name = 'satisfy_mass_conservation'
    return_type = 'object'

class scale_search_limiter(String, AllowedValuesMixin):
    """
    Scale Search Limiter.
    """
    _version = '241'
    fluent_name = 'scale-search-limiter'
    _python_name = 'scale_search_limiter'
    return_type = 'object'

class turbulent_intensity_perc(Real, AllowedValuesMixin):
    """
    Turbulent Intensity [%].
    """
    _version = '241'
    fluent_name = 'turbulent-intensity-perc'
    _python_name = 'turbulent_intensity_perc'
    return_type = 'object'

class turbulent_viscosity_ratio_stg(Real, AllowedValuesMixin):
    """
    Turbulent Viscosity Ratio.
    """
    _version = '241'
    fluent_name = 'turbulent-viscosity-ratio-stg'
    _python_name = 'turbulent_viscosity_ratio_stg'
    return_type = 'object'

class wall_distance(Real, AllowedValuesMixin):
    """
    Wall Distance.
    """
    _version = '241'
    fluent_name = 'wall-distance'
    _python_name = 'wall_distance'
    return_type = 'object'

class volumetric_forcing(Boolean, AllowedValuesMixin):
    """
    Volumetric Forcing?.
    """
    _version = '241'
    fluent_name = 'volumetric-forcing?'
    _python_name = 'volumetric_forcing'
    return_type = 'object'

class forcing_zone_thickness(String, AllowedValuesMixin):
    """
    Forcing zone thickness.
    """
    _version = '241'
    fluent_name = 'forcing-zone-thickness'
    _python_name = 'forcing_zone_thickness'
    return_type = 'object'

class volumetric_thickness(Real, AllowedValuesMixin):
    """
    Thickness.
    """
    _version = '241'
    fluent_name = 'volumetric-thickness'
    _python_name = 'volumetric_thickness'
    return_type = 'object'

class les_spec(String, AllowedValuesMixin):
    """
    Pre-R18.1 Fluctuating Velocity Algorithm Choice.
    """
    _version = '241'
    fluent_name = 'les-spec'
    _python_name = 'les_spec'
    return_type = 'object'

class fluctuating_velocity_algorithm(String, AllowedValuesMixin):
    """
    Fluctuating Velocity Algorithm.
    """
    _version = '241'
    fluent_name = 'fluctuating-velocity-algorithm'
    _python_name = 'fluctuating_velocity_algorithm'
    return_type = 'object'

class modified_turbulent_viscosity_1(Group):
    """
    Modified Turbulent Viscosity.
    """
    _version = '241'
    fluent_name = 'modified-turbulent-viscosity'
    _python_name = 'modified_turbulent_viscosity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class laminar_kinetic_energy_1(Group):
    """
    Laminar Kinetic Energy.
    """
    _version = '241'
    fluent_name = 'laminar-kinetic-energy'
    _python_name = 'laminar_kinetic_energy'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class intermittency_1(Group):
    """
    Intermittency.
    """
    _version = '241'
    fluent_name = 'intermittency'
    _python_name = 'intermittency'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class turbulent_kinetic_energy_1(Group):
    """
    Turbulent Kinetic Energy.
    """
    _version = '241'
    fluent_name = 'turbulent-kinetic-energy'
    _python_name = 'turbulent_kinetic_energy'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class turbulent_dissipation_rate_1(Group):
    """
    Turbulent Dissipation Rate.
    """
    _version = '241'
    fluent_name = 'turbulent-dissipation-rate'
    _python_name = 'turbulent_dissipation_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class specific_dissipation_rate_1(Group):
    """
    Specific Dissipation Rate.
    """
    _version = '241'
    fluent_name = 'specific-dissipation-rate'
    _python_name = 'specific_dissipation_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class velocity_variance_scale_1(Group):
    """
    Velocity Variance Scale.
    """
    _version = '241'
    fluent_name = 'velocity-variance-scale'
    _python_name = 'velocity_variance_scale'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class turbulent_intensity_1(Real, AllowedValuesMixin):
    """
    Turbulent Intensity.
    """
    _version = '241'
    fluent_name = 'turbulent-intensity'
    _python_name = 'turbulent_intensity'
    return_type = 'object'

class turbulent_length_scale_1(Real, AllowedValuesMixin):
    """
    Turbulent Length Scale.
    """
    _version = '241'
    fluent_name = 'turbulent-length-scale'
    _python_name = 'turbulent_length_scale'
    return_type = 'object'

class hydraulic_diameter_1(Real, AllowedValuesMixin):
    """
    Hydraulic Diameter.
    """
    _version = '241'
    fluent_name = 'hydraulic-diameter'
    _python_name = 'hydraulic_diameter'
    return_type = 'object'

class turbulent_viscosity_ratio_real_1(Real, AllowedValuesMixin):
    """
    Turbulent Viscosity Ratio.
    """
    _version = '241'
    fluent_name = 'turbulent-viscosity-ratio-real'
    _python_name = 'turbulent_viscosity_ratio_real'
    return_type = 'object'

class turbulent_viscosity_ratio_1(Group):
    """
    Turbulent Viscosity Ratio.
    """
    _version = '241'
    fluent_name = 'turbulent-viscosity-ratio'
    _python_name = 'turbulent_viscosity_ratio'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class number_of_fourier_modes(Integer, AllowedValuesMixin):
    """
    Number of Fourier Modes.
    """
    _version = '241'
    fluent_name = 'number-of-fourier-modes'
    _python_name = 'number_of_fourier_modes'
    return_type = 'object'

class uu_reynolds_stresses_1(Group):
    """
    UU Reynolds Stresses.
    """
    _version = '241'
    fluent_name = 'uu-reynolds-stresses'
    _python_name = 'uu_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class vv_reynolds_stresses_1(Group):
    """
    VV Reynolds Stresses.
    """
    _version = '241'
    fluent_name = 'vv-reynolds-stresses'
    _python_name = 'vv_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ww_reynolds_stresses_1(Group):
    """
    WW Reynolds Stresses.
    """
    _version = '241'
    fluent_name = 'ww-reynolds-stresses'
    _python_name = 'ww_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class uv_reynolds_stresses_1(Group):
    """
    UV Reynolds Stresses.
    """
    _version = '241'
    fluent_name = 'uv-reynolds-stresses'
    _python_name = 'uv_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class vw_reynolds_stresses_1(Group):
    """
    VW Reynolds Stresses.
    """
    _version = '241'
    fluent_name = 'vw-reynolds-stresses'
    _python_name = 'vw_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class uw_reynolds_stresses_1(Group):
    """
    UW Reynolds Stresses.
    """
    _version = '241'
    fluent_name = 'uw-reynolds-stresses'
    _python_name = 'uw_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class turbulence_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'
    child_names = ['number_of_vortices', 'include_streamwise_fluctuations', 'satisfy_mass_conservation', 'scale_search_limiter', 'turbulent_intensity_perc', 'turbulent_viscosity_ratio_stg', 'wall_distance', 'volumetric_forcing', 'forcing_zone_thickness', 'volumetric_thickness', 'les_spec', 'fluctuating_velocity_algorithm', 'turbulent_specification', 'modified_turbulent_viscosity', 'laminar_kinetic_energy', 'intermittency', 'turbulent_kinetic_energy', 'turbulent_dissipation_rate', 'specific_dissipation_rate', 'velocity_variance_scale', 'turbulent_intensity', 'turbulent_length_scale', 'hydraulic_diameter', 'turbulent_viscosity_ratio_real', 'turbulent_viscosity_ratio', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity', 'number_of_fourier_modes', 'reynolds_stress_specification', 'uu_reynolds_stresses', 'vv_reynolds_stresses', 'ww_reynolds_stresses', 'uv_reynolds_stresses', 'vw_reynolds_stresses', 'uw_reynolds_stresses']
    _child_classes = dict(
        number_of_vortices=number_of_vortices,
        include_streamwise_fluctuations=include_streamwise_fluctuations,
        satisfy_mass_conservation=satisfy_mass_conservation,
        scale_search_limiter=scale_search_limiter,
        turbulent_intensity_perc=turbulent_intensity_perc,
        turbulent_viscosity_ratio_stg=turbulent_viscosity_ratio_stg,
        wall_distance=wall_distance,
        volumetric_forcing=volumetric_forcing,
        forcing_zone_thickness=forcing_zone_thickness,
        volumetric_thickness=volumetric_thickness,
        les_spec=les_spec,
        fluctuating_velocity_algorithm=fluctuating_velocity_algorithm,
        turbulent_specification=turbulent_specification,
        modified_turbulent_viscosity=modified_turbulent_viscosity_1,
        laminar_kinetic_energy=laminar_kinetic_energy_1,
        intermittency=intermittency_1,
        turbulent_kinetic_energy=turbulent_kinetic_energy_1,
        turbulent_dissipation_rate=turbulent_dissipation_rate_1,
        specific_dissipation_rate=specific_dissipation_rate_1,
        velocity_variance_scale=velocity_variance_scale_1,
        turbulent_intensity=turbulent_intensity_1,
        turbulent_length_scale=turbulent_length_scale_1,
        hydraulic_diameter=hydraulic_diameter_1,
        turbulent_viscosity_ratio_real=turbulent_viscosity_ratio_real_1,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio_1,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
        number_of_fourier_modes=number_of_fourier_modes,
        reynolds_stress_specification=reynolds_stress_specification,
        uu_reynolds_stresses=uu_reynolds_stresses_1,
        vv_reynolds_stresses=vv_reynolds_stresses_1,
        ww_reynolds_stresses=ww_reynolds_stresses_1,
        uv_reynolds_stresses=uv_reynolds_stresses_1,
        vw_reynolds_stresses=vw_reynolds_stresses_1,
        uw_reynolds_stresses=uw_reynolds_stresses_1,
    )
    return_type = 'object'

class t0_1(Group):
    """
    Total Temperature.
    """
    _version = '241'
    fluent_name = 't0'
    _python_name = 't0'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class thermal_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'thermal'
    _python_name = 'thermal'
    child_names = ['t0']
    _child_classes = dict(
        t0=t0_1,
    )
    return_type = 'object'

class radiation_2(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['radiation_bc', 'radial_direction', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'radiating_s2s_surface', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity']
    _child_classes = dict(
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
    )
    return_type = 'object'

class mixture_fraction_1(Group):
    """
    Mixture Fraction.
    """
    _version = '241'
    fluent_name = 'mixture-fraction'
    _python_name = 'mixture_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class mode_2_probability_1(Group):
    """
    Mode-2 Probability.
    """
    _version = '241'
    fluent_name = 'mode-2-probability'
    _python_name = 'mode_2_probability'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class mode_3_probability_1(Group):
    """
    Mode-3 Probability.
    """
    _version = '241'
    fluent_name = 'mode-3-probability'
    _python_name = 'mode_3_probability'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class equ_required(Boolean, AllowedValuesMixin):
    """
    Equilibrate this inlet stream?.
    """
    _version = '241'
    fluent_name = 'equ-required?'
    _python_name = 'equ_required'
    return_type = 'object'

class progress_variable_1(Group):
    """
    Progress Variable.
    """
    _version = '241'
    fluent_name = 'progress-variable'
    _python_name = 'progress_variable'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class progress_variable_variance_1(Group):
    """
    Progress Variable Variance.
    """
    _version = '241'
    fluent_name = 'progress-variable-variance'
    _python_name = 'progress_variable_variance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class flame_area_density_1(Group):
    """
    Flame Area Density.
    """
    _version = '241'
    fluent_name = 'flame-area-density'
    _python_name = 'flame_area_density'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class inert_stream_1(Group):
    """
    Inert Stream.
    """
    _version = '241'
    fluent_name = 'inert-stream'
    _python_name = 'inert_stream'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollutant_no_mass_fraction_1(Group):
    """
    Pollutant NO Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollutant-no-mass-fraction'
    _python_name = 'pollutant_no_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class fraction_1(Group):
    """
    Pollutant HCN Mass Fraction.
    """
    _version = '241'
    fluent_name = 'fraction'
    _python_name = 'fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollutant_nh3_mass_fraction_1(Group):
    """
    Pollutant NH3 Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollutant-nh3-mass-fraction'
    _python_name = 'pollutant_nh3_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollutant_n2o_mass_fraction_1(Group):
    """
    Pollutant N2O Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollutant-n2o-mass-fraction'
    _python_name = 'pollutant_n2o_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_urea_1(Group):
    """
    Pollutant UREA Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-urea'
    _python_name = 'pollut_urea'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hnco_1(Group):
    """
    Pollutant HNCO Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-hnco'
    _python_name = 'pollut_hnco'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_nco_1(Group):
    """
    Pollutant NCO Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-nco'
    _python_name = 'pollut_nco'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_so2_1(Group):
    """
    Pollutant SO2 Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-so2'
    _python_name = 'pollut_so2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_h2s_1(Group):
    """
    Pollutant H2S Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-h2s'
    _python_name = 'pollut_h2s'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_so3_1(Group):
    """
    Pollutant SO3 Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-so3'
    _python_name = 'pollut_so3'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_sh_1(Group):
    """
    Pollutant SH Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-sh'
    _python_name = 'pollut_sh'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_so_1(Group):
    """
    Pollutant SO Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-so'
    _python_name = 'pollut_so'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class soot_mass_fraction_1(Group):
    """
    Soot Mass Fraction.
    """
    _version = '241'
    fluent_name = 'soot-mass-fraction'
    _python_name = 'soot_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class nuclei_1(Group):
    """
    Nuclei.
    """
    _version = '241'
    fluent_name = 'nuclei'
    _python_name = 'nuclei'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class tar_mass_fraction_1(Group):
    """
    Tar Mass Fraction.
    """
    _version = '241'
    fluent_name = 'tar-mass-fraction'
    _python_name = 'tar_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hg_1(Group):
    """
    Pollutant HG Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-hg'
    _python_name = 'pollut_hg'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hgcl2_1(Group):
    """
    Pollutant HGCL2 Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-hgcl2'
    _python_name = 'pollut_hgcl2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hcl_1(Group):
    """
    Pollutant HCL Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-hcl'
    _python_name = 'pollut_hcl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hgo_1(Group):
    """
    Pollutant HGO Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-hgo'
    _python_name = 'pollut_hgo'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_cl_1(Group):
    """
    Pollutant CL Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-cl'
    _python_name = 'pollut_cl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_cl2_1(Group):
    """
    Pollutant CL2 Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-cl2'
    _python_name = 'pollut_cl2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hgcl_1(Group):
    """
    Pollutant HGCL Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-hgcl'
    _python_name = 'pollut_hgcl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hocl_1(Group):
    """
    Pollutant HOCL Mass Fraction.
    """
    _version = '241'
    fluent_name = 'pollut-hocl'
    _python_name = 'pollut_hocl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class species_6(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['mixture_fraction', 'mode_2_probability', 'mode_3_probability', 'equ_required', 'mean_mixture_fraction', 'mixture_fraction_variance', 'secondary_mean_mixture_fraction', 'secondary_mixture_fraction_variance', 'specify_species_in_mole_fractions', 'mf', 'progress_variable', 'progress_variable_variance', 'flame_area_density', 'inert_stream', 'pollutant_no_mass_fraction', 'fraction', 'pollutant_nh3_mass_fraction', 'pollutant_n2o_mass_fraction', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'soot_mass_fraction', 'nuclei', 'tar_mass_fraction', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar']
    _child_classes = dict(
        mixture_fraction=mixture_fraction_1,
        mode_2_probability=mode_2_probability_1,
        mode_3_probability=mode_3_probability_1,
        equ_required=equ_required,
        mean_mixture_fraction=mean_mixture_fraction,
        mixture_fraction_variance=mixture_fraction_variance,
        secondary_mean_mixture_fraction=secondary_mean_mixture_fraction,
        secondary_mixture_fraction_variance=secondary_mixture_fraction_variance,
        specify_species_in_mole_fractions=specify_species_in_mole_fractions,
        mf=mf,
        progress_variable=progress_variable_1,
        progress_variable_variance=progress_variable_variance_1,
        flame_area_density=flame_area_density_1,
        inert_stream=inert_stream_1,
        pollutant_no_mass_fraction=pollutant_no_mass_fraction_1,
        fraction=fraction_1,
        pollutant_nh3_mass_fraction=pollutant_nh3_mass_fraction_1,
        pollutant_n2o_mass_fraction=pollutant_n2o_mass_fraction_1,
        pollut_urea=pollut_urea_1,
        pollut_hnco=pollut_hnco_1,
        pollut_nco=pollut_nco_1,
        pollut_so2=pollut_so2_1,
        pollut_h2s=pollut_h2s_1,
        pollut_so3=pollut_so3_1,
        pollut_sh=pollut_sh_1,
        pollut_so=pollut_so_1,
        soot_mass_fraction=soot_mass_fraction_1,
        nuclei=nuclei_1,
        tar_mass_fraction=tar_mass_fraction_1,
        pollut_hg=pollut_hg_1,
        pollut_hgcl2=pollut_hgcl2_1,
        pollut_hcl=pollut_hcl_1,
        pollut_hgo=pollut_hgo_1,
        pollut_cl=pollut_cl_1,
        pollut_cl2=pollut_cl2_1,
        pollut_hgcl=pollut_hgcl_1,
        pollut_hocl=pollut_hocl_1,
        tss_scalar=tss_scalar,
    )
    return_type = 'object'

class inlet_number(Integer, AllowedValuesMixin):
    """
    Inlet Group ID.
    """
    _version = '241'
    fluent_name = 'inlet-number'
    _python_name = 'inlet_number'
    return_type = 'object'

class phase_spec_1(String, AllowedValuesMixin):
    """
    Secondary Phase for Inlet.
    """
    _version = '241'
    fluent_name = 'phase-spec'
    _python_name = 'phase_spec'
    return_type = 'object'

class flow_spec(String, AllowedValuesMixin):
    """
    Flow Specification Method.
    """
    _version = '241'
    fluent_name = 'flow-spec'
    _python_name = 'flow_spec'
    return_type = 'object'

class free_surface_level(Group):
    """
    Free Surface Level.
    """
    _version = '241'
    fluent_name = 'free-surface-level'
    _python_name = 'free_surface_level'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ht_total(Group):
    """
    Total Height.
    """
    _version = '241'
    fluent_name = 'ht-total'
    _python_name = 'ht_total'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class vmag(Group):
    """
    Velocity Magnitude.
    """
    _version = '241'
    fluent_name = 'vmag'
    _python_name = 'vmag'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class granular_temperature_1(Group):
    """
    Granular Temperature.
    """
    _version = '241'
    fluent_name = 'granular-temperature'
    _python_name = 'granular_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class interfacial_area_concentration_1(Group):
    """
    Interfacial Area Concentration.
    """
    _version = '241'
    fluent_name = 'interfacial-area-concentration'
    _python_name = 'interfacial_area_concentration'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class level_set_function_flux_1(Group):
    """
    Level-set Function Flux.
    """
    _version = '241'
    fluent_name = 'level-set-function-flux'
    _python_name = 'level_set_function_flux'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class volume_fraction_1(Group):
    """
    Volume Fraction.
    """
    _version = '241'
    fluent_name = 'volume-fraction'
    _python_name = 'volume_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wsf_1(Group):
    """
    Relative humidity.
    """
    _version = '241'
    fluent_name = 'wsf'
    _python_name = 'wsf'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wsb_1(Group):
    """
    Liquid Mass Fraction.
    """
    _version = '241'
    fluent_name = 'wsb'
    _python_name = 'wsb'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wsn_1(Group):
    """
    Log10(Droplets Per Unit Volume).
    """
    _version = '241'
    fluent_name = 'wsn'
    _python_name = 'wsn'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class multiphase_3(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['open_channel', 'inlet_number', 'phase_spec', 'flow_spec', 'free_surface_level', 'ht_bottom', 'ht_total', 'vmag', 'den_spec', 'granular_temperature', 'interfacial_area_concentration', 'level_set_function_flux', 'volume_fraction', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_qbmm_bc', 'pb_qbmm', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'wsf', 'wsb', 'wsn']
    _child_classes = dict(
        open_channel=open_channel,
        inlet_number=inlet_number,
        phase_spec=phase_spec_1,
        flow_spec=flow_spec,
        free_surface_level=free_surface_level,
        ht_bottom=ht_bottom,
        ht_total=ht_total,
        vmag=vmag,
        den_spec=den_spec,
        granular_temperature=granular_temperature_1,
        interfacial_area_concentration=interfacial_area_concentration_1,
        level_set_function_flux=level_set_function_flux_1,
        volume_fraction=volume_fraction_1,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_qbmm_bc=pb_qbmm_bc,
        pb_qbmm=pb_qbmm,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        wsf=wsf_1,
        wsb=wsb_1,
        wsn=wsn_1,
    )
    return_type = 'object'

class fensapice_drop_bccustom(Boolean, AllowedValuesMixin):
    """
    'fensapice_drop_bccustom' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-bccustom?'
    _python_name = 'fensapice_drop_bccustom'
    return_type = 'object'

class fensapice_drop_lwc(Real, AllowedValuesMixin):
    """
    'fensapice_drop_lwc' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-lwc'
    _python_name = 'fensapice_drop_lwc'
    return_type = 'object'

class fensapice_drop_dtemp(Real, AllowedValuesMixin):
    """
    'fensapice_drop_dtemp' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-dtemp'
    _python_name = 'fensapice_drop_dtemp'
    return_type = 'object'

class fensapice_drop_ddiam(Real, AllowedValuesMixin):
    """
    'fensapice_drop_ddiam' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-ddiam'
    _python_name = 'fensapice_drop_ddiam'
    return_type = 'object'

class fensapice_drop_dv(Boolean, AllowedValuesMixin):
    """
    'fensapice_drop_dv' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-dv?'
    _python_name = 'fensapice_drop_dv'
    return_type = 'object'

class fensapice_drop_dx(Real, AllowedValuesMixin):
    """
    'fensapice_drop_dx' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-dx'
    _python_name = 'fensapice_drop_dx'
    return_type = 'object'

class fensapice_drop_dy(Real, AllowedValuesMixin):
    """
    'fensapice_drop_dy' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-dy'
    _python_name = 'fensapice_drop_dy'
    return_type = 'object'

class fensapice_drop_dz(Real, AllowedValuesMixin):
    """
    'fensapice_drop_dz' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-dz'
    _python_name = 'fensapice_drop_dz'
    return_type = 'object'

class fensapice_dpm_surface_injection(Boolean, AllowedValuesMixin):
    """
    'fensapice_dpm_surface_injection' child.
    """
    _version = '241'
    fluent_name = 'fensapice-dpm-surface-injection?'
    _python_name = 'fensapice_dpm_surface_injection'
    return_type = 'object'

class fensapice_dpm_inj_nstream(Integer, AllowedValuesMixin):
    """
    'fensapice_dpm_inj_nstream' child.
    """
    _version = '241'
    fluent_name = 'fensapice-dpm-inj-nstream'
    _python_name = 'fensapice_dpm_inj_nstream'
    return_type = 'object'

class fensapice_drop_icc(Real, AllowedValuesMixin):
    """
    'fensapice_drop_icc' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-icc'
    _python_name = 'fensapice_drop_icc'
    return_type = 'object'

class fensapice_drop_ctemp(Real, AllowedValuesMixin):
    """
    'fensapice_drop_ctemp' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-ctemp'
    _python_name = 'fensapice_drop_ctemp'
    return_type = 'object'

class fensapice_drop_cmelt(Real, AllowedValuesMixin):
    """
    'fensapice_drop_cmelt' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-cmelt'
    _python_name = 'fensapice_drop_cmelt'
    return_type = 'object'

class fensapice_drop_cdiam(Real, AllowedValuesMixin):
    """
    'fensapice_drop_cdiam' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-cdiam'
    _python_name = 'fensapice_drop_cdiam'
    return_type = 'object'

class fensapice_drop_cv(Boolean, AllowedValuesMixin):
    """
    'fensapice_drop_cv' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-cv?'
    _python_name = 'fensapice_drop_cv'
    return_type = 'object'

class fensapice_drop_cx(Real, AllowedValuesMixin):
    """
    'fensapice_drop_cx' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-cx'
    _python_name = 'fensapice_drop_cx'
    return_type = 'object'

class fensapice_drop_cy(Real, AllowedValuesMixin):
    """
    'fensapice_drop_cy' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-cy'
    _python_name = 'fensapice_drop_cy'
    return_type = 'object'

class fensapice_drop_cz(Real, AllowedValuesMixin):
    """
    'fensapice_drop_cz' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-cz'
    _python_name = 'fensapice_drop_cz'
    return_type = 'object'

class fensapice_drop_vrh(Boolean, AllowedValuesMixin):
    """
    'fensapice_drop_vrh' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-vrh?'
    _python_name = 'fensapice_drop_vrh'
    return_type = 'object'

class fensapice_drop_vrh_1(Real, AllowedValuesMixin):
    """
    'fensapice_drop_vrh' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-vrh'
    _python_name = 'fensapice_drop_vrh'
    return_type = 'object'

class fensapice_drop_vc(Real, AllowedValuesMixin):
    """
    'fensapice_drop_vc' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-vc'
    _python_name = 'fensapice_drop_vc'
    return_type = 'object'

class icing_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'icing'
    _python_name = 'icing'
    child_names = ['fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cmelt', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc']
    _child_classes = dict(
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cmelt=fensapice_drop_cmelt,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
    )
    return_type = 'object'

class phase_5_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_1,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        dpm=dpm,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class phase_5(NamedObject[phase_5_child], _NonCreatableNamedObjectMixin[phase_5_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_5_child
    return_type = 'object'

class inlet_vent_child(Group):
    """
    'child_object_type' of inlet_vent.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'inlet_vent_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        name=name,
        phase=phase_5,
        momentum=momentum_1,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        dpm=dpm,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class inlet_vent(NamedObject[inlet_vent_child], _NonCreatableNamedObjectMixin[inlet_vent_child]):
    """
    'inlet_vent' child.
    """
    _version = '241'
    fluent_name = 'inlet-vent'
    _python_name = 'inlet_vent'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = inlet_vent_child
    return_type = 'object'

class swirl_velocity_specification(Boolean, AllowedValuesMixin):
    """
    Swirl-Velocity Specification?.
    """
    _version = '241'
    fluent_name = 'swirl-velocity-specification'
    _python_name = 'swirl_velocity_specification'
    return_type = 'object'

class fan_rotation_speed(Real, AllowedValuesMixin):
    """
    Fan Rotation Speed.
    """
    _version = '241'
    fluent_name = 'fan-rotation-speed'
    _python_name = 'fan_rotation_speed'
    return_type = 'object'

class momentum_2(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['reference_frame', 'gauge_total_pressure', 'supersonic_or_initial_gauge_pressure', 'direction_specification_method', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'prevent_reverse_flow', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'pressure_jump', 'swirl_velocity_specification', 'swirl_factor', 'fan_rotation_speed', 'fan_origin', 'strength', 'new_fan_definition']
    _child_classes = dict(
        reference_frame=reference_frame_2,
        gauge_total_pressure=gauge_total_pressure,
        supersonic_or_initial_gauge_pressure=supersonic_or_initial_gauge_pressure,
        direction_specification_method=direction_specification_method,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        prevent_reverse_flow=prevent_reverse_flow,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        pressure_jump=pressure_jump,
        swirl_velocity_specification=swirl_velocity_specification,
        swirl_factor=swirl_factor,
        fan_rotation_speed=fan_rotation_speed,
        fan_origin=fan_origin,
        strength=strength,
        new_fan_definition=new_fan_definition,
    )
    return_type = 'object'

class phase_6_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_2,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        dpm=dpm,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class phase_6(NamedObject[phase_6_child], _NonCreatableNamedObjectMixin[phase_6_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_6_child
    return_type = 'object'

class intake_fan_child(Group):
    """
    'child_object_type' of intake_fan.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'intake_fan_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        name=name,
        phase=phase_6,
        momentum=momentum_2,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        dpm=dpm,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class intake_fan(NamedObject[intake_fan_child], _NonCreatableNamedObjectMixin[intake_fan_child]):
    """
    'intake_fan' child.
    """
    _version = '241'
    fluent_name = 'intake-fan'
    _python_name = 'intake_fan'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = intake_fan_child
    return_type = 'object'

class non_overlap_zone_name(String, AllowedValuesMixin):
    """
    'non_overlap_zone_name' child.
    """
    _version = '241'
    fluent_name = 'non-overlap-zone-name'
    _python_name = 'non_overlap_zone_name'
    return_type = 'object'

class phase_7_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'non_overlap_zone_name']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        non_overlap_zone_name=non_overlap_zone_name,
    )
    return_type = 'object'

class phase_7(NamedObject[phase_7_child], _NonCreatableNamedObjectMixin[phase_7_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_7_child
    return_type = 'object'

class interface_child(Group):
    """
    'child_object_type' of interface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'interface_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'non_overlap_zone_name']
    _child_classes = dict(
        name=name,
        phase=phase_7,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        non_overlap_zone_name=non_overlap_zone_name,
    )
    return_type = 'object'

class interface(NamedObject[interface_child], _NonCreatableNamedObjectMixin[interface_child]):
    """
    'interface' child.
    """
    _version = '241'
    fluent_name = 'interface'
    _python_name = 'interface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = interface_child
    return_type = 'object'

class is_not_a_rans_les_interface(Boolean, AllowedValuesMixin):
    """
    This should never appear in the GUI nor TUI.
    """
    _version = '241'
    fluent_name = 'is-not-a-rans-les-interface'
    _python_name = 'is_not_a_rans_les_interface'
    return_type = 'object'

class phase_8_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['is_not_a_rans_les_interface']
    _child_classes = dict(
        is_not_a_rans_les_interface=is_not_a_rans_les_interface,
    )
    return_type = 'object'

class phase_8(NamedObject[phase_8_child], _NonCreatableNamedObjectMixin[phase_8_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_8_child
    return_type = 'object'

class interior_child(Group):
    """
    'child_object_type' of interior.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'interior_child'
    child_names = ['name', 'phase', 'is_not_a_rans_les_interface']
    _child_classes = dict(
        name=name,
        phase=phase_8,
        is_not_a_rans_les_interface=is_not_a_rans_les_interface,
    )
    return_type = 'object'

class interior(NamedObject[interior_child], _NonCreatableNamedObjectMixin[interior_child]):
    """
    'interior' child.
    """
    _version = '241'
    fluent_name = 'interior'
    _python_name = 'interior'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = interior_child
    return_type = 'object'

class mass_flow_specification(String, AllowedValuesMixin):
    """
    Mass Flow Specification Method.
    """
    _version = '241'
    fluent_name = 'mass-flow-specification'
    _python_name = 'mass_flow_specification'
    return_type = 'object'

class mass_flow_rate_1(Group):
    """
    Mass Flow Rate.
    """
    _version = '241'
    fluent_name = 'mass-flow-rate'
    _python_name = 'mass_flow_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class exit_corrected_mass_flow_rate(Group):
    """
    Exit Corrected Mass Flow Rate.
    """
    _version = '241'
    fluent_name = 'exit-corrected-mass-flow-rate'
    _python_name = 'exit_corrected_mass_flow_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class mass_flux(Group):
    """
    Mass Flux.
    """
    _version = '241'
    fluent_name = 'mass-flux'
    _python_name = 'mass_flux'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class average_mass_flux(Real, AllowedValuesMixin):
    """
    Average Mass Flux.
    """
    _version = '241'
    fluent_name = 'average-mass-flux'
    _python_name = 'average_mass_flux'
    return_type = 'object'

class supersonic_gauge_pressure(Group):
    """
    Supersonic/Initial Gauge Pressure.
    """
    _version = '241'
    fluent_name = 'supersonic-gauge-pressure'
    _python_name = 'supersonic_gauge_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_specification(String, AllowedValuesMixin):
    """
    Direction Specification Method.
    """
    _version = '241'
    fluent_name = 'direction-specification'
    _python_name = 'direction_specification'
    return_type = 'object'

class ecmf_reference_temperature(Real, AllowedValuesMixin):
    """
    ECMF Reference Temperature.
    """
    _version = '241'
    fluent_name = 'ecmf-reference-temperature'
    _python_name = 'ecmf_reference_temperature'
    return_type = 'object'

class ecmf_reference_gauge_pressure(Real, AllowedValuesMixin):
    """
    ECMF Reference Gauge Pressure.
    """
    _version = '241'
    fluent_name = 'ecmf-reference-gauge-pressure'
    _python_name = 'ecmf_reference_gauge_pressure'
    return_type = 'object'

class momentum_3(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['reference_frame', 'mass_flow_specification', 'mass_flow_rate', 'exit_corrected_mass_flow_rate', 'mass_flux', 'average_mass_flux', 'supersonic_gauge_pressure', 'direction_specification', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'swirl_velocity_specification', 'swirl_factor', 'fan_origin', 'ecmf_reference_temperature', 'ecmf_reference_gauge_pressure', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave']
    _child_classes = dict(
        reference_frame=reference_frame_2,
        mass_flow_specification=mass_flow_specification,
        mass_flow_rate=mass_flow_rate_1,
        exit_corrected_mass_flow_rate=exit_corrected_mass_flow_rate,
        mass_flux=mass_flux,
        average_mass_flux=average_mass_flux,
        supersonic_gauge_pressure=supersonic_gauge_pressure,
        direction_specification=direction_specification,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        swirl_velocity_specification=swirl_velocity_specification,
        swirl_factor=swirl_factor,
        fan_origin=fan_origin,
        ecmf_reference_temperature=ecmf_reference_temperature,
        ecmf_reference_gauge_pressure=ecmf_reference_gauge_pressure,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
    )
    return_type = 'object'

class turbulence_2(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'
    child_names = ['turbulent_specification', 'modified_turbulent_viscosity', 'laminar_kinetic_energy', 'intermittency', 'turbulent_kinetic_energy', 'turbulent_dissipation_rate', 'specific_dissipation_rate', 'velocity_variance_scale', 'turbulent_intensity', 'turbulent_length_scale', 'hydraulic_diameter', 'turbulent_viscosity_ratio_real', 'turbulent_viscosity_ratio', 'reynolds_stress_specification', 'uu_reynolds_stresses', 'vv_reynolds_stresses', 'ww_reynolds_stresses', 'uv_reynolds_stresses', 'vw_reynolds_stresses', 'uw_reynolds_stresses', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity']
    _child_classes = dict(
        turbulent_specification=turbulent_specification,
        modified_turbulent_viscosity=modified_turbulent_viscosity_1,
        laminar_kinetic_energy=laminar_kinetic_energy_1,
        intermittency=intermittency_1,
        turbulent_kinetic_energy=turbulent_kinetic_energy_1,
        turbulent_dissipation_rate=turbulent_dissipation_rate_1,
        specific_dissipation_rate=specific_dissipation_rate_1,
        velocity_variance_scale=velocity_variance_scale_1,
        turbulent_intensity=turbulent_intensity_1,
        turbulent_length_scale=turbulent_length_scale_1,
        hydraulic_diameter=hydraulic_diameter_1,
        turbulent_viscosity_ratio_real=turbulent_viscosity_ratio_real_1,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio_1,
        reynolds_stress_specification=reynolds_stress_specification,
        uu_reynolds_stresses=uu_reynolds_stresses_1,
        vv_reynolds_stresses=vv_reynolds_stresses_1,
        ww_reynolds_stresses=ww_reynolds_stresses_1,
        uv_reynolds_stresses=uv_reynolds_stresses_1,
        vw_reynolds_stresses=vw_reynolds_stresses_1,
        uw_reynolds_stresses=uw_reynolds_stresses_1,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
    )
    return_type = 'object'

class total_temperature(Group):
    """
    Total Temperature.
    """
    _version = '241'
    fluent_name = 'total-temperature'
    _python_name = 'total_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class thermal_2(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'thermal'
    _python_name = 'thermal'
    child_names = ['total_temperature']
    _child_classes = dict(
        total_temperature=total_temperature,
    )
    return_type = 'object'

class participates_in_view_factor_calculation(Boolean, AllowedValuesMixin):
    """
    Participates in View Factor Calculation?.
    """
    _version = '241'
    fluent_name = 'participates-in-view-factor-calculation'
    _python_name = 'participates_in_view_factor_calculation'
    return_type = 'object'

class radiation_3(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['radiation_bc', 'radial_direction', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'participates_in_view_factor_calculation']
    _child_classes = dict(
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        participates_in_view_factor_calculation=participates_in_view_factor_calculation,
    )
    return_type = 'object'

class species_7(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['specify_species_in_mole_fractions', 'mf', 'mixture_fraction', 'mode_2_probability', 'mode_3_probability', 'equ_required', 'progress_variable', 'progress_variable_variance', 'flame_area_density', 'inert_stream', 'pollutant_no_mass_fraction', 'fraction', 'pollutant_nh3_mass_fraction', 'pollutant_n2o_mass_fraction', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'soot_mass_fraction', 'nuclei', 'tar_mass_fraction', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'mean_mixture_fraction', 'mixture_fraction_variance', 'secondary_mean_mixture_fraction', 'secondary_mixture_fraction_variance', 'tss_scalar']
    _child_classes = dict(
        specify_species_in_mole_fractions=specify_species_in_mole_fractions,
        mf=mf,
        mixture_fraction=mixture_fraction_1,
        mode_2_probability=mode_2_probability_1,
        mode_3_probability=mode_3_probability_1,
        equ_required=equ_required,
        progress_variable=progress_variable_1,
        progress_variable_variance=progress_variable_variance_1,
        flame_area_density=flame_area_density_1,
        inert_stream=inert_stream_1,
        pollutant_no_mass_fraction=pollutant_no_mass_fraction_1,
        fraction=fraction_1,
        pollutant_nh3_mass_fraction=pollutant_nh3_mass_fraction_1,
        pollutant_n2o_mass_fraction=pollutant_n2o_mass_fraction_1,
        pollut_urea=pollut_urea_1,
        pollut_hnco=pollut_hnco_1,
        pollut_nco=pollut_nco_1,
        pollut_so2=pollut_so2_1,
        pollut_h2s=pollut_h2s_1,
        pollut_so3=pollut_so3_1,
        pollut_sh=pollut_sh_1,
        pollut_so=pollut_so_1,
        soot_mass_fraction=soot_mass_fraction_1,
        nuclei=nuclei_1,
        tar_mass_fraction=tar_mass_fraction_1,
        pollut_hg=pollut_hg_1,
        pollut_hgcl2=pollut_hgcl2_1,
        pollut_hcl=pollut_hcl_1,
        pollut_hgo=pollut_hgo_1,
        pollut_cl=pollut_cl_1,
        pollut_cl2=pollut_cl2_1,
        pollut_hgcl=pollut_hgcl_1,
        pollut_hocl=pollut_hocl_1,
        mean_mixture_fraction=mean_mixture_fraction,
        mixture_fraction_variance=mixture_fraction_variance,
        secondary_mean_mixture_fraction=secondary_mean_mixture_fraction,
        secondary_mixture_fraction_variance=secondary_mixture_fraction_variance,
        tss_scalar=tss_scalar,
    )
    return_type = 'object'

class upstream_torque_integral(Real, AllowedValuesMixin):
    """
    Upstream Torque Integral.
    """
    _version = '241'
    fluent_name = 'upstream-torque-integral'
    _python_name = 'upstream_torque_integral'
    return_type = 'object'

class upstream_total_enthalpy_integral(Real, AllowedValuesMixin):
    """
    Upstream Total Enthalpy Integral.
    """
    _version = '241'
    fluent_name = 'upstream-total-enthalpy-integral'
    _python_name = 'upstream_total_enthalpy_integral'
    return_type = 'object'

class dpm_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'dpm'
    _python_name = 'dpm'
    child_names = ['upstream_torque_integral', 'upstream_total_enthalpy_integral', 'discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'discrete_phase_bc_function', 'mixing_plane_thread']
    _child_classes = dict(
        upstream_torque_integral=upstream_torque_integral,
        upstream_total_enthalpy_integral=upstream_total_enthalpy_integral,
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        discrete_phase_bc_function=discrete_phase_bc_function,
        mixing_plane_thread=mixing_plane_thread,
    )
    return_type = 'object'

class open_channel_1(Boolean, AllowedValuesMixin):
    """
    Open Channel.
    """
    _version = '241'
    fluent_name = 'open-channel'
    _python_name = 'open_channel'
    return_type = 'object'

class secondary_phase_for_inlet(String, AllowedValuesMixin):
    """
    Secondary Phase for Inlet.
    """
    _version = '241'
    fluent_name = 'secondary-phase-for-inlet'
    _python_name = 'secondary_phase_for_inlet'
    return_type = 'object'

class bottom_level(Group):
    """
    Bottom Level.
    """
    _version = '241'
    fluent_name = 'bottom-level'
    _python_name = 'bottom_level'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class density_interpolation_method(String, AllowedValuesMixin):
    """
    Density Interpolation Method.
    """
    _version = '241'
    fluent_name = 'density-interpolation-method'
    _python_name = 'density_interpolation_method'
    return_type = 'object'

class slip_velocity_specification(String, AllowedValuesMixin):
    """
    Slip Velocity Specification Method.
    """
    _version = '241'
    fluent_name = 'slip-velocity-specification'
    _python_name = 'slip_velocity_specification'
    return_type = 'object'

class phase_velocity_ratio(Group):
    """
    Phase Velocity Ratio .
    """
    _version = '241'
    fluent_name = 'phase-velocity-ratio'
    _python_name = 'phase_velocity_ratio'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class relative_humidity(Group):
    """
    Relative humidity.
    """
    _version = '241'
    fluent_name = 'relative-humidity'
    _python_name = 'relative_humidity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class liquid_mass_fraction(Group):
    """
    Liquid Mass Fraction.
    """
    _version = '241'
    fluent_name = 'liquid-mass-fraction'
    _python_name = 'liquid_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class log10_droplets_per_unit_volume(Group):
    """
    Log10(Droplets Per Unit Volume).
    """
    _version = '241'
    fluent_name = 'log10-droplets-per-unit-volume'
    _python_name = 'log10_droplets_per_unit_volume'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class multiphase_4(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['open_channel', 'inlet_number', 'secondary_phase_for_inlet', 'free_surface_level', 'bottom_level', 'density_interpolation_method', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_qbmm_bc', 'pb_qbmm', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'slip_velocity_specification', 'phase_velocity_ratio', 'volume_fraction', 'granular_temperature', 'interfacial_area_concentration', 'relative_humidity', 'liquid_mass_fraction', 'log10_droplets_per_unit_volume']
    _child_classes = dict(
        open_channel=open_channel_1,
        inlet_number=inlet_number,
        secondary_phase_for_inlet=secondary_phase_for_inlet,
        free_surface_level=free_surface_level,
        bottom_level=bottom_level,
        density_interpolation_method=density_interpolation_method,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_qbmm_bc=pb_qbmm_bc,
        pb_qbmm=pb_qbmm,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        slip_velocity_specification=slip_velocity_specification,
        phase_velocity_ratio=phase_velocity_ratio,
        volume_fraction=volume_fraction_1,
        granular_temperature=granular_temperature_1,
        interfacial_area_concentration=interfacial_area_concentration_1,
        relative_humidity=relative_humidity,
        liquid_mass_fraction=liquid_mass_fraction,
        log10_droplets_per_unit_volume=log10_droplets_per_unit_volume,
    )
    return_type = 'object'

class phase_9_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_3,
        turbulence=turbulence_2,
        thermal=thermal_2,
        radiation=radiation_3,
        species=species_7,
        dpm=dpm_1,
        multiphase=multiphase_4,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class phase_9(NamedObject[phase_9_child], _NonCreatableNamedObjectMixin[phase_9_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_9_child
    return_type = 'object'

class mass_flow_inlet_child(Group):
    """
    'child_object_type' of mass_flow_inlet.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'mass_flow_inlet_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        name=name,
        phase=phase_9,
        momentum=momentum_3,
        turbulence=turbulence_2,
        thermal=thermal_2,
        radiation=radiation_3,
        species=species_7,
        dpm=dpm_1,
        multiphase=multiphase_4,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class mass_flow_inlet(NamedObject[mass_flow_inlet_child], _NonCreatableNamedObjectMixin[mass_flow_inlet_child]):
    """
    'mass_flow_inlet' child.
    """
    _version = '241'
    fluent_name = 'mass-flow-inlet'
    _python_name = 'mass_flow_inlet'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = mass_flow_inlet_child
    return_type = 'object'

class momentum_4(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['reference_frame', 'mass_flow_specification', 'mass_flow_rate', 'exit_corrected_mass_flow_rate', 'mass_flux', 'average_mass_flux', 'ecmf_reference_temperature', 'ecmf_reference_gauge_pressure']
    _child_classes = dict(
        reference_frame=reference_frame_2,
        mass_flow_specification=mass_flow_specification,
        mass_flow_rate=mass_flow_rate_1,
        exit_corrected_mass_flow_rate=exit_corrected_mass_flow_rate,
        mass_flux=mass_flux,
        average_mass_flux=average_mass_flux,
        ecmf_reference_temperature=ecmf_reference_temperature,
        ecmf_reference_gauge_pressure=ecmf_reference_gauge_pressure,
    )
    return_type = 'object'

class turbulence_3(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'
    return_type = 'object'

class thermal_3(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'thermal'
    _python_name = 'thermal'
    return_type = 'object'

class species_8(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'species'
    _python_name = 'species'
    return_type = 'object'

class multiphase_5(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['slip_velocity_specification', 'phase_velocity_ratio', 'volume_fraction', 'granular_temperature', 'interfacial_area_concentration']
    _child_classes = dict(
        slip_velocity_specification=slip_velocity_specification,
        phase_velocity_ratio=phase_velocity_ratio,
        volume_fraction=volume_fraction_1,
        granular_temperature=granular_temperature_1,
        interfacial_area_concentration=interfacial_area_concentration_1,
    )
    return_type = 'object'

class potential_2(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'potential'
    _python_name = 'potential'
    return_type = 'object'

class phase_10_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        momentum=momentum_4,
        turbulence=turbulence_3,
        thermal=thermal_3,
        radiation=radiation_3,
        species=species_8,
        dpm=dpm_1,
        multiphase=multiphase_5,
        potential=potential_2,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class phase_10(NamedObject[phase_10_child], _NonCreatableNamedObjectMixin[phase_10_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_10_child
    return_type = 'object'

class mass_flow_outlet_child(Group):
    """
    'child_object_type' of mass_flow_outlet.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'mass_flow_outlet_child'
    child_names = ['name', 'phase', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        name=name,
        phase=phase_10,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        momentum=momentum_4,
        turbulence=turbulence_3,
        thermal=thermal_3,
        radiation=radiation_3,
        species=species_8,
        dpm=dpm_1,
        multiphase=multiphase_5,
        potential=potential_2,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class mass_flow_outlet(NamedObject[mass_flow_outlet_child], _NonCreatableNamedObjectMixin[mass_flow_outlet_child]):
    """
    'mass_flow_outlet' child.
    """
    _version = '241'
    fluent_name = 'mass-flow-outlet'
    _python_name = 'mass_flow_outlet'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = mass_flow_outlet_child
    return_type = 'object'

class phase_11_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    return_type = 'object'

class phase_11(NamedObject[phase_11_child], _NonCreatableNamedObjectMixin[phase_11_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_11_child
    return_type = 'object'

class network_child(Group):
    """
    'child_object_type' of network.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'network_child'
    child_names = ['name', 'phase']
    _child_classes = dict(
        name=name,
        phase=phase_11,
    )
    return_type = 'object'

class network(NamedObject[network_child], _NonCreatableNamedObjectMixin[network_child]):
    """
    'network' child.
    """
    _version = '241'
    fluent_name = 'network'
    _python_name = 'network'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = network_child
    return_type = 'object'

class thermal_bc(String, AllowedValuesMixin):
    """
    Thermal BC Type.
    """
    _version = '241'
    fluent_name = 'thermal-bc'
    _python_name = 'thermal_bc'
    return_type = 'object'

class temperature_1(Group):
    """
    Temperature.
    """
    _version = '241'
    fluent_name = 'temperature'
    _python_name = 'temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class q(Group):
    """
    Heat Flux.
    """
    _version = '241'
    fluent_name = 'q'
    _python_name = 'q'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class phase_12_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['thermal_bc', 'temperature', 'q']
    _child_classes = dict(
        thermal_bc=thermal_bc,
        temperature=temperature_1,
        q=q,
    )
    return_type = 'object'

class phase_12(NamedObject[phase_12_child], _NonCreatableNamedObjectMixin[phase_12_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_12_child
    return_type = 'object'

class network_end_child(Group):
    """
    'child_object_type' of network_end.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'network_end_child'
    child_names = ['name', 'phase', 'thermal_bc', 'temperature', 'q']
    _child_classes = dict(
        name=name,
        phase=phase_12,
        thermal_bc=thermal_bc,
        temperature=temperature_1,
        q=q,
    )
    return_type = 'object'

class network_end(NamedObject[network_end_child], _NonCreatableNamedObjectMixin[network_end_child]):
    """
    'network_end' child.
    """
    _version = '241'
    fluent_name = 'network-end'
    _python_name = 'network_end'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = network_end_child
    return_type = 'object'

class flowrate_frac(Real, AllowedValuesMixin):
    """
    Flow rate weighting.
    """
    _version = '241'
    fluent_name = 'flowrate-frac'
    _python_name = 'flowrate_frac'
    return_type = 'object'

class phase_13_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'flowrate_frac', 'potential_boundary_condition', 'potential_boundary_value', 'electrolyte_potential_boundary_condition', 'current_density_boundary_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'uds_bc', 'uds', 'radiation_bc', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity', 'discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'discrete_phase_bc_function', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        flowrate_frac=flowrate_frac,
        potential_boundary_condition=potential_boundary_condition,
        potential_boundary_value=potential_boundary_value,
        electrolyte_potential_boundary_condition=electrolyte_potential_boundary_condition,
        current_density_boundary_value=current_density_boundary_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        uds_bc=uds_bc,
        uds=uds_1,
        radiation_bc=radiation_bc,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        discrete_phase_bc_function=discrete_phase_bc_function,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    return_type = 'object'

class phase_13(NamedObject[phase_13_child], _NonCreatableNamedObjectMixin[phase_13_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_13_child
    return_type = 'object'

class outflow_child(Group):
    """
    'child_object_type' of outflow.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'outflow_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'flowrate_frac', 'potential_boundary_condition', 'potential_boundary_value', 'electrolyte_potential_boundary_condition', 'current_density_boundary_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'uds_bc', 'uds', 'radiation_bc', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity', 'discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'discrete_phase_bc_function', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        name=name,
        phase=phase_13,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        flowrate_frac=flowrate_frac,
        potential_boundary_condition=potential_boundary_condition,
        potential_boundary_value=potential_boundary_value,
        electrolyte_potential_boundary_condition=electrolyte_potential_boundary_condition,
        current_density_boundary_value=current_density_boundary_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        uds_bc=uds_bc,
        uds=uds_1,
        radiation_bc=radiation_bc,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        discrete_phase_bc_function=discrete_phase_bc_function,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    return_type = 'object'

class outflow(NamedObject[outflow_child], _NonCreatableNamedObjectMixin[outflow_child]):
    """
    'outflow' child.
    """
    _version = '241'
    fluent_name = 'outflow'
    _python_name = 'outflow'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = outflow_child
    return_type = 'object'

class momentum_5(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['frame_of_reference', 'gauge_pressure', 'p_profile_multiplier', 'direction_spec', 'coordinate_system', 'flow_direction', 'p_backflow_spec_gen', 'p_backflow_spec', 'axis_direction', 'axis_origin', 'prevent_reverse_flow', 'radial', 'avg_press_spec', 'press_averaging_method', 'targeted_mf_boundary', 'targeted_mf', 'targeted_mf_pmax', 'targeted_mf_pmin', 'gen_nrbc_spec', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'loss_coefficient', 'strength']
    _child_classes = dict(
        frame_of_reference=frame_of_reference,
        gauge_pressure=gauge_pressure,
        p_profile_multiplier=p_profile_multiplier,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        p_backflow_spec_gen=p_backflow_spec_gen,
        p_backflow_spec=p_backflow_spec,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        prevent_reverse_flow=prevent_reverse_flow,
        radial=radial,
        avg_press_spec=avg_press_spec,
        press_averaging_method=press_averaging_method,
        targeted_mf_boundary=targeted_mf_boundary,
        targeted_mf=targeted_mf,
        targeted_mf_pmax=targeted_mf_pmax,
        targeted_mf_pmin=targeted_mf_pmin,
        gen_nrbc_spec=gen_nrbc_spec,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        loss_coefficient=loss_coefficient,
        strength=strength,
    )
    return_type = 'object'

class phase_14_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_5,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        dpm=dpm,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
    )
    return_type = 'object'

class phase_14(NamedObject[phase_14_child], _NonCreatableNamedObjectMixin[phase_14_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_14_child
    return_type = 'object'

class outlet_vent_child(Group):
    """
    'child_object_type' of outlet_vent.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'outlet_vent_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        name=name,
        phase=phase_14,
        momentum=momentum_5,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        dpm=dpm,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
    )
    return_type = 'object'

class outlet_vent(NamedObject[outlet_vent_child], _NonCreatableNamedObjectMixin[outlet_vent_child]):
    """
    'outlet_vent' child.
    """
    _version = '241'
    fluent_name = 'outlet-vent'
    _python_name = 'outlet_vent'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = outlet_vent_child
    return_type = 'object'

class overset_child(Group):
    """
    'child_object_type' of overset.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'overset_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        name=name,
        phase=phase_2,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class overset(NamedObject[overset_child], _NonCreatableNamedObjectMixin[overset_child]):
    """
    'overset' child.
    """
    _version = '241'
    fluent_name = 'overset'
    _python_name = 'overset'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = overset_child
    return_type = 'object'

class angular(Boolean, AllowedValuesMixin):
    """
    Rotationally Periodic?.
    """
    _version = '241'
    fluent_name = 'angular?'
    _python_name = 'angular'
    return_type = 'object'

class p_jump(Real, AllowedValuesMixin):
    """
    Periodic Pressure Jump.
    """
    _version = '241'
    fluent_name = 'p-jump'
    _python_name = 'p_jump'
    return_type = 'object'

class ai(Real, AllowedValuesMixin):
    """
    'ai' child.
    """
    _version = '241'
    fluent_name = 'ai'
    _python_name = 'ai'
    return_type = 'object'

class aj(Real, AllowedValuesMixin):
    """
    'aj' child.
    """
    _version = '241'
    fluent_name = 'aj'
    _python_name = 'aj'
    return_type = 'object'

class ak(Real, AllowedValuesMixin):
    """
    'ak' child.
    """
    _version = '241'
    fluent_name = 'ak'
    _python_name = 'ak'
    return_type = 'object'

class x_origin(Real, AllowedValuesMixin):
    """
    'x_origin' child.
    """
    _version = '241'
    fluent_name = 'x-origin'
    _python_name = 'x_origin'
    return_type = 'object'

class y_origin(Real, AllowedValuesMixin):
    """
    'y_origin' child.
    """
    _version = '241'
    fluent_name = 'y-origin'
    _python_name = 'y_origin'
    return_type = 'object'

class z_origin(Real, AllowedValuesMixin):
    """
    'z_origin' child.
    """
    _version = '241'
    fluent_name = 'z-origin'
    _python_name = 'z_origin'
    return_type = 'object'

class shift_x(Real, AllowedValuesMixin):
    """
    'shift_x' child.
    """
    _version = '241'
    fluent_name = 'shift-x'
    _python_name = 'shift_x'
    return_type = 'object'

class shift_y(Real, AllowedValuesMixin):
    """
    'shift_y' child.
    """
    _version = '241'
    fluent_name = 'shift-y'
    _python_name = 'shift_y'
    return_type = 'object'

class shift_z(Real, AllowedValuesMixin):
    """
    'shift_z' child.
    """
    _version = '241'
    fluent_name = 'shift-z'
    _python_name = 'shift_z'
    return_type = 'object'

class per_angle(Real, AllowedValuesMixin):
    """
    'per_angle' child.
    """
    _version = '241'
    fluent_name = 'per-angle'
    _python_name = 'per_angle'
    return_type = 'object'

class phase_15_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'angular', 'p_jump', 'ai', 'aj', 'ak', 'x_origin', 'y_origin', 'z_origin', 'shift_x', 'shift_y', 'shift_z', 'per_angle']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        angular=angular,
        p_jump=p_jump,
        ai=ai,
        aj=aj,
        ak=ak,
        x_origin=x_origin,
        y_origin=y_origin,
        z_origin=z_origin,
        shift_x=shift_x,
        shift_y=shift_y,
        shift_z=shift_z,
        per_angle=per_angle,
    )
    return_type = 'object'

class phase_15(NamedObject[phase_15_child], _NonCreatableNamedObjectMixin[phase_15_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_15_child
    return_type = 'object'

class periodic_child(Group):
    """
    'child_object_type' of periodic.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'periodic_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'angular', 'p_jump', 'ai', 'aj', 'ak', 'x_origin', 'y_origin', 'z_origin', 'shift_x', 'shift_y', 'shift_z', 'per_angle']
    _child_classes = dict(
        name=name,
        phase=phase_15,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        angular=angular,
        p_jump=p_jump,
        ai=ai,
        aj=aj,
        ak=ak,
        x_origin=x_origin,
        y_origin=y_origin,
        z_origin=z_origin,
        shift_x=shift_x,
        shift_y=shift_y,
        shift_z=shift_z,
        per_angle=per_angle,
    )
    return_type = 'object'

class periodic(NamedObject[periodic_child], _NonCreatableNamedObjectMixin[periodic_child]):
    """
    'periodic' child.
    """
    _version = '241'
    fluent_name = 'periodic'
    _python_name = 'periodic'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = periodic_child
    return_type = 'object'

class porous_jump_turb_wall_treatment_1(Boolean, AllowedValuesMixin):
    """
    Enable Turbulent Wall Treatment.
    """
    _version = '241'
    fluent_name = 'porous-jump-turb-wall-treatment?'
    _python_name = 'porous_jump_turb_wall_treatment'
    return_type = 'object'

class alpha(Real, AllowedValuesMixin):
    """
    Face Permeability.
    """
    _version = '241'
    fluent_name = 'alpha'
    _python_name = 'alpha'
    return_type = 'object'

class dm(Real, AllowedValuesMixin):
    """
    Porous Medium Thickness.
    """
    _version = '241'
    fluent_name = 'dm'
    _python_name = 'dm'
    return_type = 'object'

class c2_1(Real, AllowedValuesMixin):
    """
    Pressure-Jump Coefficient (C2).
    """
    _version = '241'
    fluent_name = 'c2'
    _python_name = 'c2'
    return_type = 'object'

class thermal_ctk(Real, AllowedValuesMixin):
    """
    Thermal Contact Resistance.
    """
    _version = '241'
    fluent_name = 'thermal-ctk'
    _python_name = 'thermal_ctk'
    return_type = 'object'

class solar_fluxes(Boolean, AllowedValuesMixin):
    """
    Participates in Solar Ray Tracing?.
    """
    _version = '241'
    fluent_name = 'solar-fluxes?'
    _python_name = 'solar_fluxes'
    return_type = 'object'

class v_absp(Group):
    """
    Direct Visible (Absorptivity).
    """
    _version = '241'
    fluent_name = 'v-absp'
    _python_name = 'v_absp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ir_absp(Group):
    """
    Direct IR (Absorptivity).
    """
    _version = '241'
    fluent_name = 'ir-absp'
    _python_name = 'ir_absp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ir_trans(Group):
    """
    Direct IR (Transmissivity).
    """
    _version = '241'
    fluent_name = 'ir-trans'
    _python_name = 'ir_trans'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class v_trans(Group):
    """
    Direct Visible (Transmissivity).
    """
    _version = '241'
    fluent_name = 'v-trans'
    _python_name = 'v_trans'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class jump_adhesion(Boolean, AllowedValuesMixin):
    """
    Jump Adhesion.
    """
    _version = '241'
    fluent_name = 'jump-adhesion?'
    _python_name = 'jump_adhesion'
    return_type = 'object'

class adhesion_constrained(Boolean, AllowedValuesMixin):
    """
    Constrained Two-Sided Adhesion.
    """
    _version = '241'
    fluent_name = 'adhesion-constrained?'
    _python_name = 'adhesion_constrained'
    return_type = 'object'

class contact_angles_child(Group):
    """
    'child_object_type' of contact_angles.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'contact_angles_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class contact_angles(NamedObject[contact_angles_child], _NonCreatableNamedObjectMixin[contact_angles_child]):
    """
    Contact Angles.
    """
    _version = '241'
    fluent_name = 'contact-angles'
    _python_name = 'contact_angles'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = contact_angles_child
    return_type = 'object'

class phase_16_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'porous_jump_turb_wall_treatment', 'alpha', 'dm', 'c2', 'thermal_ctk', 'solar_fluxes', 'v_absp', 'ir_absp', 'ir_trans', 'v_trans', 'discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'discrete_phase_bc_function', 'strength', 'jump_adhesion', 'adhesion_constrained', 'contact_angles', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment_1,
        alpha=alpha,
        dm=dm,
        c2=c2_1,
        thermal_ctk=thermal_ctk,
        solar_fluxes=solar_fluxes,
        v_absp=v_absp,
        ir_absp=ir_absp,
        ir_trans=ir_trans,
        v_trans=v_trans,
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        discrete_phase_bc_function=discrete_phase_bc_function,
        strength=strength,
        jump_adhesion=jump_adhesion,
        adhesion_constrained=adhesion_constrained,
        contact_angles=contact_angles,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
    )
    return_type = 'object'

class phase_16(NamedObject[phase_16_child], _NonCreatableNamedObjectMixin[phase_16_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_16_child
    return_type = 'object'

class porous_jump_child(Group):
    """
    'child_object_type' of porous_jump.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'porous_jump_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'porous_jump_turb_wall_treatment', 'alpha', 'dm', 'c2', 'thermal_ctk', 'solar_fluxes', 'v_absp', 'ir_absp', 'ir_trans', 'v_trans', 'discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'discrete_phase_bc_function', 'strength', 'jump_adhesion', 'adhesion_constrained', 'contact_angles', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value']
    _child_classes = dict(
        name=name,
        phase=phase_16,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment_1,
        alpha=alpha,
        dm=dm,
        c2=c2_1,
        thermal_ctk=thermal_ctk,
        solar_fluxes=solar_fluxes,
        v_absp=v_absp,
        ir_absp=ir_absp,
        ir_trans=ir_trans,
        v_trans=v_trans,
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        discrete_phase_bc_function=discrete_phase_bc_function,
        strength=strength,
        jump_adhesion=jump_adhesion,
        adhesion_constrained=adhesion_constrained,
        contact_angles=contact_angles,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
    )
    return_type = 'object'

class porous_jump(NamedObject[porous_jump_child], _NonCreatableNamedObjectMixin[porous_jump_child]):
    """
    'porous_jump' child.
    """
    _version = '241'
    fluent_name = 'porous-jump'
    _python_name = 'porous_jump'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = porous_jump_child
    return_type = 'object'

class m_1(Group):
    """
    Mach Number.
    """
    _version = '241'
    fluent_name = 'm'
    _python_name = 'm'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class t(Group):
    """
    Temperature.
    """
    _version = '241'
    fluent_name = 't'
    _python_name = 't'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class non_equil_boundary(Boolean, AllowedValuesMixin):
    """
    Thermodynamic Non-Equilibrium Boundary.
    """
    _version = '241'
    fluent_name = 'non-equil-boundary?'
    _python_name = 'non_equil_boundary'
    return_type = 'object'

class tve(Group):
    """
    Vibrational-Electronic Temperature.
    """
    _version = '241'
    fluent_name = 'tve'
    _python_name = 'tve'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class phase_17_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'gauge_pressure', 'm', 't', 'non_equil_boundary', 'tve', 'coordinate_system', 'flow_direction', 'axis_direction', 'axis_origin', 'turbulent_specification', 'modified_turbulent_viscosity', 'laminar_kinetic_energy', 'intermittency', 'turbulent_kinetic_energy', 'turbulent_dissipation_rate', 'specific_dissipation_rate', 'velocity_variance_scale', 'turbulent_intensity', 'turbulent_length_scale', 'hydraulic_diameter', 'turbulent_viscosity_ratio_real', 'turbulent_viscosity_ratio', 'reynolds_stress_specification', 'uu_reynolds_stresses', 'vv_reynolds_stresses', 'ww_reynolds_stresses', 'uv_reynolds_stresses', 'vw_reynolds_stresses', 'uw_reynolds_stresses', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity', 'radiation_bc', 'radial_direction', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity', 'mean_mixture_fraction', 'mixture_fraction_variance', 'secondary_mean_mixture_fraction', 'secondary_mixture_fraction_variance', 'specify_species_in_mole_fractions', 'mf', 'potential_boundary_condition', 'potential_boundary_value', 'electrolyte_potential_boundary_condition', 'current_density_boundary_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'mixture_fraction', 'mode_2_probability', 'mode_3_probability', 'pollutant_no_mass_fraction', 'fraction', 'pollutant_nh3_mass_fraction', 'pollutant_n2o_mass_fraction', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'soot_mass_fraction', 'nuclei', 'tar_mass_fraction', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cmelt', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'uds_bc', 'uds', 'discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'discrete_phase_bc_function', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        gauge_pressure=gauge_pressure,
        m=m_1,
        t=t,
        non_equil_boundary=non_equil_boundary,
        tve=tve,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        turbulent_specification=turbulent_specification,
        modified_turbulent_viscosity=modified_turbulent_viscosity_1,
        laminar_kinetic_energy=laminar_kinetic_energy_1,
        intermittency=intermittency_1,
        turbulent_kinetic_energy=turbulent_kinetic_energy_1,
        turbulent_dissipation_rate=turbulent_dissipation_rate_1,
        specific_dissipation_rate=specific_dissipation_rate_1,
        velocity_variance_scale=velocity_variance_scale_1,
        turbulent_intensity=turbulent_intensity_1,
        turbulent_length_scale=turbulent_length_scale_1,
        hydraulic_diameter=hydraulic_diameter_1,
        turbulent_viscosity_ratio_real=turbulent_viscosity_ratio_real_1,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio_1,
        reynolds_stress_specification=reynolds_stress_specification,
        uu_reynolds_stresses=uu_reynolds_stresses_1,
        vv_reynolds_stresses=vv_reynolds_stresses_1,
        ww_reynolds_stresses=ww_reynolds_stresses_1,
        uv_reynolds_stresses=uv_reynolds_stresses_1,
        vw_reynolds_stresses=vw_reynolds_stresses_1,
        uw_reynolds_stresses=uw_reynolds_stresses_1,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
        mean_mixture_fraction=mean_mixture_fraction,
        mixture_fraction_variance=mixture_fraction_variance,
        secondary_mean_mixture_fraction=secondary_mean_mixture_fraction,
        secondary_mixture_fraction_variance=secondary_mixture_fraction_variance,
        specify_species_in_mole_fractions=specify_species_in_mole_fractions,
        mf=mf,
        potential_boundary_condition=potential_boundary_condition,
        potential_boundary_value=potential_boundary_value,
        electrolyte_potential_boundary_condition=electrolyte_potential_boundary_condition,
        current_density_boundary_value=current_density_boundary_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        mixture_fraction=mixture_fraction_1,
        mode_2_probability=mode_2_probability_1,
        mode_3_probability=mode_3_probability_1,
        pollutant_no_mass_fraction=pollutant_no_mass_fraction_1,
        fraction=fraction_1,
        pollutant_nh3_mass_fraction=pollutant_nh3_mass_fraction_1,
        pollutant_n2o_mass_fraction=pollutant_n2o_mass_fraction_1,
        pollut_urea=pollut_urea_1,
        pollut_hnco=pollut_hnco_1,
        pollut_nco=pollut_nco_1,
        pollut_so2=pollut_so2_1,
        pollut_h2s=pollut_h2s_1,
        pollut_so3=pollut_so3_1,
        pollut_sh=pollut_sh_1,
        pollut_so=pollut_so_1,
        soot_mass_fraction=soot_mass_fraction_1,
        nuclei=nuclei_1,
        tar_mass_fraction=tar_mass_fraction_1,
        pollut_hg=pollut_hg_1,
        pollut_hgcl2=pollut_hgcl2_1,
        pollut_hcl=pollut_hcl_1,
        pollut_hgo=pollut_hgo_1,
        pollut_cl=pollut_cl_1,
        pollut_cl2=pollut_cl2_1,
        pollut_hgcl=pollut_hgcl_1,
        pollut_hocl=pollut_hocl_1,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cmelt=fensapice_drop_cmelt,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        uds_bc=uds_bc,
        uds=uds_1,
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        discrete_phase_bc_function=discrete_phase_bc_function,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    return_type = 'object'

class phase_17(NamedObject[phase_17_child], _NonCreatableNamedObjectMixin[phase_17_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_17_child
    return_type = 'object'

class pressure_far_field_child(Group):
    """
    'child_object_type' of pressure_far_field.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pressure_far_field_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'gauge_pressure', 'm', 't', 'non_equil_boundary', 'tve', 'coordinate_system', 'flow_direction', 'axis_direction', 'axis_origin', 'turbulent_specification', 'modified_turbulent_viscosity', 'laminar_kinetic_energy', 'intermittency', 'turbulent_kinetic_energy', 'turbulent_dissipation_rate', 'specific_dissipation_rate', 'velocity_variance_scale', 'turbulent_intensity', 'turbulent_length_scale', 'hydraulic_diameter', 'turbulent_viscosity_ratio_real', 'turbulent_viscosity_ratio', 'reynolds_stress_specification', 'uu_reynolds_stresses', 'vv_reynolds_stresses', 'ww_reynolds_stresses', 'uv_reynolds_stresses', 'vw_reynolds_stresses', 'uw_reynolds_stresses', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity', 'radiation_bc', 'radial_direction', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity', 'mean_mixture_fraction', 'mixture_fraction_variance', 'secondary_mean_mixture_fraction', 'secondary_mixture_fraction_variance', 'specify_species_in_mole_fractions', 'mf', 'potential_boundary_condition', 'potential_boundary_value', 'electrolyte_potential_boundary_condition', 'current_density_boundary_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'mixture_fraction', 'mode_2_probability', 'mode_3_probability', 'pollutant_no_mass_fraction', 'fraction', 'pollutant_nh3_mass_fraction', 'pollutant_n2o_mass_fraction', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'soot_mass_fraction', 'nuclei', 'tar_mass_fraction', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cmelt', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'uds_bc', 'uds', 'discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'discrete_phase_bc_function', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        name=name,
        phase=phase_17,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        gauge_pressure=gauge_pressure,
        m=m_1,
        t=t,
        non_equil_boundary=non_equil_boundary,
        tve=tve,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        turbulent_specification=turbulent_specification,
        modified_turbulent_viscosity=modified_turbulent_viscosity_1,
        laminar_kinetic_energy=laminar_kinetic_energy_1,
        intermittency=intermittency_1,
        turbulent_kinetic_energy=turbulent_kinetic_energy_1,
        turbulent_dissipation_rate=turbulent_dissipation_rate_1,
        specific_dissipation_rate=specific_dissipation_rate_1,
        velocity_variance_scale=velocity_variance_scale_1,
        turbulent_intensity=turbulent_intensity_1,
        turbulent_length_scale=turbulent_length_scale_1,
        hydraulic_diameter=hydraulic_diameter_1,
        turbulent_viscosity_ratio_real=turbulent_viscosity_ratio_real_1,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio_1,
        reynolds_stress_specification=reynolds_stress_specification,
        uu_reynolds_stresses=uu_reynolds_stresses_1,
        vv_reynolds_stresses=vv_reynolds_stresses_1,
        ww_reynolds_stresses=ww_reynolds_stresses_1,
        uv_reynolds_stresses=uv_reynolds_stresses_1,
        vw_reynolds_stresses=vw_reynolds_stresses_1,
        uw_reynolds_stresses=uw_reynolds_stresses_1,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
        mean_mixture_fraction=mean_mixture_fraction,
        mixture_fraction_variance=mixture_fraction_variance,
        secondary_mean_mixture_fraction=secondary_mean_mixture_fraction,
        secondary_mixture_fraction_variance=secondary_mixture_fraction_variance,
        specify_species_in_mole_fractions=specify_species_in_mole_fractions,
        mf=mf,
        potential_boundary_condition=potential_boundary_condition,
        potential_boundary_value=potential_boundary_value,
        electrolyte_potential_boundary_condition=electrolyte_potential_boundary_condition,
        current_density_boundary_value=current_density_boundary_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        mixture_fraction=mixture_fraction_1,
        mode_2_probability=mode_2_probability_1,
        mode_3_probability=mode_3_probability_1,
        pollutant_no_mass_fraction=pollutant_no_mass_fraction_1,
        fraction=fraction_1,
        pollutant_nh3_mass_fraction=pollutant_nh3_mass_fraction_1,
        pollutant_n2o_mass_fraction=pollutant_n2o_mass_fraction_1,
        pollut_urea=pollut_urea_1,
        pollut_hnco=pollut_hnco_1,
        pollut_nco=pollut_nco_1,
        pollut_so2=pollut_so2_1,
        pollut_h2s=pollut_h2s_1,
        pollut_so3=pollut_so3_1,
        pollut_sh=pollut_sh_1,
        pollut_so=pollut_so_1,
        soot_mass_fraction=soot_mass_fraction_1,
        nuclei=nuclei_1,
        tar_mass_fraction=tar_mass_fraction_1,
        pollut_hg=pollut_hg_1,
        pollut_hgcl2=pollut_hgcl2_1,
        pollut_hcl=pollut_hcl_1,
        pollut_hgo=pollut_hgo_1,
        pollut_cl=pollut_cl_1,
        pollut_cl2=pollut_cl2_1,
        pollut_hgcl=pollut_hgcl_1,
        pollut_hocl=pollut_hocl_1,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cmelt=fensapice_drop_cmelt,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        uds_bc=uds_bc,
        uds=uds_1,
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        discrete_phase_bc_function=discrete_phase_bc_function,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    return_type = 'object'

class pressure_far_field(NamedObject[pressure_far_field_child], _NonCreatableNamedObjectMixin[pressure_far_field_child]):
    """
    'pressure_far_field' child.
    """
    _version = '241'
    fluent_name = 'pressure-far-field'
    _python_name = 'pressure_far_field'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pressure_far_field_child
    return_type = 'object'

class momentum_6(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['reference_frame', 'gauge_total_pressure', 'supersonic_or_initial_gauge_pressure', 'direction_specification_method', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'prevent_reverse_flow', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave']
    _child_classes = dict(
        reference_frame=reference_frame_2,
        gauge_total_pressure=gauge_total_pressure,
        supersonic_or_initial_gauge_pressure=supersonic_or_initial_gauge_pressure,
        direction_specification_method=direction_specification_method,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        prevent_reverse_flow=prevent_reverse_flow,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
    )
    return_type = 'object'

class phase_18_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_6,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        dpm=dpm,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class phase_18(NamedObject[phase_18_child], _NonCreatableNamedObjectMixin[phase_18_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_18_child
    return_type = 'object'

class pressure_inlet_child(Group):
    """
    'child_object_type' of pressure_inlet.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pressure_inlet_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        name=name,
        phase=phase_18,
        momentum=momentum_6,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        dpm=dpm,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class pressure_inlet(NamedObject[pressure_inlet_child], _NonCreatableNamedObjectMixin[pressure_inlet_child]):
    """
    'pressure_inlet' child.
    """
    _version = '241'
    fluent_name = 'pressure-inlet'
    _python_name = 'pressure_inlet'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pressure_inlet_child
    return_type = 'object'

class momentum_7(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['frame_of_reference', 'gauge_pressure', 'p_profile_multiplier', 'direction_spec', 'coordinate_system', 'flow_direction', 'p_backflow_spec_gen', 'p_backflow_spec', 'axis_direction', 'axis_origin', 'prevent_reverse_flow', 'radial', 'avg_press_spec', 'press_averaging_method', 'targeted_mf_boundary', 'targeted_mf', 'targeted_mf_pmax', 'targeted_mf_pmin', 'gen_nrbc_spec', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave']
    _child_classes = dict(
        frame_of_reference=frame_of_reference,
        gauge_pressure=gauge_pressure,
        p_profile_multiplier=p_profile_multiplier,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        p_backflow_spec_gen=p_backflow_spec_gen,
        p_backflow_spec=p_backflow_spec,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        prevent_reverse_flow=prevent_reverse_flow,
        radial=radial,
        avg_press_spec=avg_press_spec,
        press_averaging_method=press_averaging_method,
        targeted_mf_boundary=targeted_mf_boundary,
        targeted_mf=targeted_mf,
        targeted_mf_pmax=targeted_mf_pmax,
        targeted_mf_pmin=targeted_mf_pmin,
        gen_nrbc_spec=gen_nrbc_spec,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
    )
    return_type = 'object'

class phase_19_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_7,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        dpm=dpm,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
    )
    return_type = 'object'

class phase_19(NamedObject[phase_19_child], _NonCreatableNamedObjectMixin[phase_19_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_19_child
    return_type = 'object'

class pressure_outlet_child(Group):
    """
    'child_object_type' of pressure_outlet.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pressure_outlet_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        name=name,
        phase=phase_19,
        momentum=momentum_7,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        dpm=dpm,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
    )
    return_type = 'object'

class pressure_outlet(NamedObject[pressure_outlet_child], _NonCreatableNamedObjectMixin[pressure_outlet_child]):
    """
    'pressure_outlet' child.
    """
    _version = '241'
    fluent_name = 'pressure-outlet'
    _python_name = 'pressure_outlet'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = pressure_outlet_child
    return_type = 'object'

class hc(Group):
    """
    Heat-Transfer-Coefficient.
    """
    _version = '241'
    fluent_name = 'hc'
    _python_name = 'hc'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class t_1(Real, AllowedValuesMixin):
    """
    Temperature.
    """
    _version = '241'
    fluent_name = 't'
    _python_name = 't'
    return_type = 'object'

class heat_flux(Real, AllowedValuesMixin):
    """
    Heat Flux.
    """
    _version = '241'
    fluent_name = 'heat-flux'
    _python_name = 'heat_flux'
    return_type = 'object'

class phase_20_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'porous_jump_turb_wall_treatment', 'loss_coefficient', 'hc', 't', 'heat_flux', 'discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'discrete_phase_bc_function', 'strength']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        loss_coefficient=loss_coefficient,
        hc=hc,
        t=t_1,
        heat_flux=heat_flux,
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        discrete_phase_bc_function=discrete_phase_bc_function,
        strength=strength,
    )
    return_type = 'object'

class phase_20(NamedObject[phase_20_child], _NonCreatableNamedObjectMixin[phase_20_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_20_child
    return_type = 'object'

class radiator_child(Group):
    """
    'child_object_type' of radiator.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'radiator_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'porous_jump_turb_wall_treatment', 'loss_coefficient', 'hc', 't', 'heat_flux', 'discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'discrete_phase_bc_function', 'strength']
    _child_classes = dict(
        name=name,
        phase=phase_20,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        loss_coefficient=loss_coefficient,
        hc=hc,
        t=t_1,
        heat_flux=heat_flux,
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        discrete_phase_bc_function=discrete_phase_bc_function,
        strength=strength,
    )
    return_type = 'object'

class radiator(NamedObject[radiator_child], _NonCreatableNamedObjectMixin[radiator_child]):
    """
    'radiator' child.
    """
    _version = '241'
    fluent_name = 'radiator'
    _python_name = 'radiator'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = radiator_child
    return_type = 'object'

class les_spec_name(String, AllowedValuesMixin):
    """
    Fluctuating Velocity Algorithm   .
    """
    _version = '241'
    fluent_name = 'les-spec-name'
    _python_name = 'les_spec_name'
    return_type = 'object'

class rfg_number_of_modes(Integer, AllowedValuesMixin):
    """
    Number of Fourier Modes.
    """
    _version = '241'
    fluent_name = 'rfg-number-of-modes'
    _python_name = 'rfg_number_of_modes'
    return_type = 'object'

class vm_nvortices(Integer, AllowedValuesMixin):
    """
    Number of Vortices.
    """
    _version = '241'
    fluent_name = 'vm-nvortices'
    _python_name = 'vm_nvortices'
    return_type = 'object'

class les_embedded_fluctuations(String, AllowedValuesMixin):
    """
    Pre-R18.1 Fluctuating Velocity Algorithm Choice.
    """
    _version = '241'
    fluent_name = 'les-embedded-fluctuations'
    _python_name = 'les_embedded_fluctuations'
    return_type = 'object'

class phase_21_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'les_spec_name', 'rfg_number_of_modes', 'vm_nvortices', 'les_embedded_fluctuations']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_nvortices=vm_nvortices,
        les_embedded_fluctuations=les_embedded_fluctuations,
    )
    return_type = 'object'

class phase_21(NamedObject[phase_21_child], _NonCreatableNamedObjectMixin[phase_21_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_21_child
    return_type = 'object'

class rans_les_interface_child(Group):
    """
    'child_object_type' of rans_les_interface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'rans_les_interface_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'les_spec_name', 'rfg_number_of_modes', 'vm_nvortices', 'les_embedded_fluctuations']
    _child_classes = dict(
        name=name,
        phase=phase_21,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_nvortices=vm_nvortices,
        les_embedded_fluctuations=les_embedded_fluctuations,
    )
    return_type = 'object'

class rans_les_interface(NamedObject[rans_les_interface_child], _NonCreatableNamedObjectMixin[rans_les_interface_child]):
    """
    'rans_les_interface' child.
    """
    _version = '241'
    fluent_name = 'rans-les-interface'
    _python_name = 'rans_les_interface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = rans_les_interface_child
    return_type = 'object'

class outlet_zone(Group):
    """
    Outlet Zone.
    """
    _version = '241'
    fluent_name = 'outlet-zone'
    _python_name = 'outlet_zone'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class temperature_rise_specification(String, AllowedValuesMixin):
    """
    Temperature Rise Specification Method.
    """
    _version = '241'
    fluent_name = 'temperature-rise-specification'
    _python_name = 'temperature_rise_specification'
    return_type = 'object'

class temperature_rise(Group):
    """
    Temperature Rise.
    """
    _version = '241'
    fluent_name = 'temperature-rise'
    _python_name = 'temperature_rise'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class heat_source(Group):
    """
    Heat Source.
    """
    _version = '241'
    fluent_name = 'heat-source'
    _python_name = 'heat_source'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class freestream_temperature(Real, AllowedValuesMixin):
    """
    Freestream temperature.
    """
    _version = '241'
    fluent_name = 'freestream-temperature'
    _python_name = 'freestream_temperature'
    return_type = 'object'

class transfer_coefficient(Group):
    """
    Heat-Transfer-Coefficient.
    """
    _version = '241'
    fluent_name = 'transfer-coefficient'
    _python_name = 'transfer_coefficient'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class mass_flow_multiplier_child(Group):
    """
    'child_object_type' of mass_flow_multiplier.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'mass_flow_multiplier_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class mass_flow_multiplier(NamedObject[mass_flow_multiplier_child], _NonCreatableNamedObjectMixin[mass_flow_multiplier_child]):
    """
    'mass_flow_multiplier' child.
    """
    _version = '241'
    fluent_name = 'mass-flow-multiplier'
    _python_name = 'mass_flow_multiplier'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = mass_flow_multiplier_child
    return_type = 'object'

class phase_22_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'outlet_zone', 'temperature_rise_specification', 'temperature_rise', 'heat_source', 'freestream_temperature', 'transfer_coefficient', 'direction_specification', 'coordinate_system', 'flow_direction', 'direction_vector', 'turbulent_specification', 'modified_turbulent_viscosity', 'laminar_kinetic_energy', 'intermittency', 'turbulent_kinetic_energy', 'turbulent_dissipation_rate', 'specific_dissipation_rate', 'velocity_variance_scale', 'turbulent_intensity', 'turbulent_length_scale', 'hydraulic_diameter', 'turbulent_viscosity_ratio_real', 'turbulent_viscosity_ratio', 'reynolds_stress_specification', 'uu_reynolds_stresses', 'vv_reynolds_stresses', 'ww_reynolds_stresses', 'uv_reynolds_stresses', 'vw_reynolds_stresses', 'uw_reynolds_stresses', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity', 'mass_flow_multiplier', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        outlet_zone=outlet_zone,
        temperature_rise_specification=temperature_rise_specification,
        temperature_rise=temperature_rise,
        heat_source=heat_source,
        freestream_temperature=freestream_temperature,
        transfer_coefficient=transfer_coefficient,
        direction_specification=direction_specification,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        turbulent_specification=turbulent_specification,
        modified_turbulent_viscosity=modified_turbulent_viscosity_1,
        laminar_kinetic_energy=laminar_kinetic_energy_1,
        intermittency=intermittency_1,
        turbulent_kinetic_energy=turbulent_kinetic_energy_1,
        turbulent_dissipation_rate=turbulent_dissipation_rate_1,
        specific_dissipation_rate=specific_dissipation_rate_1,
        velocity_variance_scale=velocity_variance_scale_1,
        turbulent_intensity=turbulent_intensity_1,
        turbulent_length_scale=turbulent_length_scale_1,
        hydraulic_diameter=hydraulic_diameter_1,
        turbulent_viscosity_ratio_real=turbulent_viscosity_ratio_real_1,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio_1,
        reynolds_stress_specification=reynolds_stress_specification,
        uu_reynolds_stresses=uu_reynolds_stresses_1,
        vv_reynolds_stresses=vv_reynolds_stresses_1,
        ww_reynolds_stresses=ww_reynolds_stresses_1,
        uv_reynolds_stresses=uv_reynolds_stresses_1,
        vw_reynolds_stresses=vw_reynolds_stresses_1,
        uw_reynolds_stresses=uw_reynolds_stresses_1,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
        mass_flow_multiplier=mass_flow_multiplier,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
    )
    return_type = 'object'

class phase_22(NamedObject[phase_22_child], _NonCreatableNamedObjectMixin[phase_22_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_22_child
    return_type = 'object'

class recirculation_inlet_child(Group):
    """
    'child_object_type' of recirculation_inlet.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'recirculation_inlet_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'outlet_zone', 'temperature_rise_specification', 'temperature_rise', 'heat_source', 'freestream_temperature', 'transfer_coefficient', 'direction_specification', 'coordinate_system', 'flow_direction', 'direction_vector', 'turbulent_specification', 'modified_turbulent_viscosity', 'laminar_kinetic_energy', 'intermittency', 'turbulent_kinetic_energy', 'turbulent_dissipation_rate', 'specific_dissipation_rate', 'velocity_variance_scale', 'turbulent_intensity', 'turbulent_length_scale', 'hydraulic_diameter', 'turbulent_viscosity_ratio_real', 'turbulent_viscosity_ratio', 'reynolds_stress_specification', 'uu_reynolds_stresses', 'vv_reynolds_stresses', 'ww_reynolds_stresses', 'uv_reynolds_stresses', 'vw_reynolds_stresses', 'uw_reynolds_stresses', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity', 'mass_flow_multiplier', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor']
    _child_classes = dict(
        name=name,
        phase=phase_22,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        outlet_zone=outlet_zone,
        temperature_rise_specification=temperature_rise_specification,
        temperature_rise=temperature_rise,
        heat_source=heat_source,
        freestream_temperature=freestream_temperature,
        transfer_coefficient=transfer_coefficient,
        direction_specification=direction_specification,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        turbulent_specification=turbulent_specification,
        modified_turbulent_viscosity=modified_turbulent_viscosity_1,
        laminar_kinetic_energy=laminar_kinetic_energy_1,
        intermittency=intermittency_1,
        turbulent_kinetic_energy=turbulent_kinetic_energy_1,
        turbulent_dissipation_rate=turbulent_dissipation_rate_1,
        specific_dissipation_rate=specific_dissipation_rate_1,
        velocity_variance_scale=velocity_variance_scale_1,
        turbulent_intensity=turbulent_intensity_1,
        turbulent_length_scale=turbulent_length_scale_1,
        hydraulic_diameter=hydraulic_diameter_1,
        turbulent_viscosity_ratio_real=turbulent_viscosity_ratio_real_1,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio_1,
        reynolds_stress_specification=reynolds_stress_specification,
        uu_reynolds_stresses=uu_reynolds_stresses_1,
        vv_reynolds_stresses=vv_reynolds_stresses_1,
        ww_reynolds_stresses=ww_reynolds_stresses_1,
        uv_reynolds_stresses=uv_reynolds_stresses_1,
        vw_reynolds_stresses=vw_reynolds_stresses_1,
        uw_reynolds_stresses=uw_reynolds_stresses_1,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
        mass_flow_multiplier=mass_flow_multiplier,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
    )
    return_type = 'object'

class recirculation_inlet(NamedObject[recirculation_inlet_child], _NonCreatableNamedObjectMixin[recirculation_inlet_child]):
    """
    'recirculation_inlet' child.
    """
    _version = '241'
    fluent_name = 'recirculation-inlet'
    _python_name = 'recirculation_inlet'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = recirculation_inlet_child
    return_type = 'object'

class phase_23_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'mass_flow_specification', 'mass_flow_rate', 'mass_flux', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        mass_flow_specification=mass_flow_specification,
        mass_flow_rate=mass_flow_rate_1,
        mass_flux=mass_flux,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
    )
    return_type = 'object'

class phase_23(NamedObject[phase_23_child], _NonCreatableNamedObjectMixin[phase_23_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_23_child
    return_type = 'object'

class recirculation_outlet_child(Group):
    """
    'child_object_type' of recirculation_outlet.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'recirculation_outlet_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'mass_flow_specification', 'mass_flow_rate', 'mass_flux', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor']
    _child_classes = dict(
        name=name,
        phase=phase_23,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        mass_flow_specification=mass_flow_specification,
        mass_flow_rate=mass_flow_rate_1,
        mass_flux=mass_flux,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
    )
    return_type = 'object'

class recirculation_outlet(NamedObject[recirculation_outlet_child], _NonCreatableNamedObjectMixin[recirculation_outlet_child]):
    """
    'recirculation_outlet' child.
    """
    _version = '241'
    fluent_name = 'recirculation-outlet'
    _python_name = 'recirculation_outlet'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = recirculation_outlet_child
    return_type = 'object'

class shadow_child(Group):
    """
    'child_object_type' of shadow.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'shadow_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        name=name,
        phase=phase_2,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class shadow(NamedObject[shadow_child], _NonCreatableNamedObjectMixin[shadow_child]):
    """
    'shadow' child.
    """
    _version = '241'
    fluent_name = 'shadow'
    _python_name = 'shadow'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = shadow_child
    return_type = 'object'

class symmetry_child(Group):
    """
    'child_object_type' of symmetry.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'symmetry_child'
    child_names = ['name', 'phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        name=name,
        phase=phase_2,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class symmetry(NamedObject[symmetry_child], _NonCreatableNamedObjectMixin[symmetry_child]):
    """
    'symmetry' child.
    """
    _version = '241'
    fluent_name = 'symmetry'
    _python_name = 'symmetry'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = symmetry_child
    return_type = 'object'

class velocity_specification_method(String, AllowedValuesMixin):
    """
    Velocity Specification Method.
    """
    _version = '241'
    fluent_name = 'velocity-specification-method'
    _python_name = 'velocity_specification_method'
    return_type = 'object'

class velocity_1(Group):
    """
    Velocity Magnitude.
    """
    _version = '241'
    fluent_name = 'velocity'
    _python_name = 'velocity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class initial_gauge_pressure(Group):
    """
    Supersonic/Initial Gauge Pressure.
    """
    _version = '241'
    fluent_name = 'initial-gauge-pressure'
    _python_name = 'initial_gauge_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class velocity_components_child(Group):
    """
    'child_object_type' of velocity_components.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'velocity_components_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class velocity_components(ListObject[velocity_components_child]):
    """
    'velocity_components' child.
    """
    _version = '241'
    fluent_name = 'velocity-components'
    _python_name = 'velocity_components'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = velocity_components_child
    return_type = 'object'

class swirl_angular_velocity(Real, AllowedValuesMixin):
    """
    'swirl_angular_velocity' child.
    """
    _version = '241'
    fluent_name = 'swirl-angular-velocity'
    _python_name = 'swirl_angular_velocity'
    return_type = 'object'

class gauge_pressure_1(Group):
    """
    Outflow Gauge Pressure.
    """
    _version = '241'
    fluent_name = 'gauge-pressure'
    _python_name = 'gauge_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class momentum_8(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['velocity_specification_method', 'reference_frame', 'velocity', 'initial_gauge_pressure', 'coordinate_system', 'velocity_components', 'flow_direction', 'axis_direction', 'axis_origin', 'swirl_angular_velocity', 'gauge_pressure', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave']
    _child_classes = dict(
        velocity_specification_method=velocity_specification_method,
        reference_frame=reference_frame_2,
        velocity=velocity_1,
        initial_gauge_pressure=initial_gauge_pressure,
        coordinate_system=coordinate_system,
        velocity_components=velocity_components,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        swirl_angular_velocity=swirl_angular_velocity,
        gauge_pressure=gauge_pressure_1,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
    )
    return_type = 'object'

class turbulence_4(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'
    child_names = ['les_spec', 'fluctuating_velocity_algorithm', 'number_of_fourier_modes', 'number_of_vortices', 'include_streamwise_fluctuations', 'satisfy_mass_conservation', 'scale_search_limiter', 'turbulent_intensity_perc', 'turbulent_viscosity_ratio_stg', 'wall_distance', 'volumetric_forcing', 'forcing_zone_thickness', 'volumetric_thickness', 'turbulent_specification', 'modified_turbulent_viscosity', 'laminar_kinetic_energy', 'intermittency', 'turbulent_kinetic_energy', 'turbulent_dissipation_rate', 'specific_dissipation_rate', 'velocity_variance_scale', 'turbulent_intensity', 'turbulent_length_scale', 'hydraulic_diameter', 'turbulent_viscosity_ratio_real', 'turbulent_viscosity_ratio', 'reynolds_stress_specification', 'uu_reynolds_stresses', 'vv_reynolds_stresses', 'ww_reynolds_stresses', 'uv_reynolds_stresses', 'vw_reynolds_stresses', 'uw_reynolds_stresses', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity']
    _child_classes = dict(
        les_spec=les_spec,
        fluctuating_velocity_algorithm=fluctuating_velocity_algorithm,
        number_of_fourier_modes=number_of_fourier_modes,
        number_of_vortices=number_of_vortices,
        include_streamwise_fluctuations=include_streamwise_fluctuations,
        satisfy_mass_conservation=satisfy_mass_conservation,
        scale_search_limiter=scale_search_limiter,
        turbulent_intensity_perc=turbulent_intensity_perc,
        turbulent_viscosity_ratio_stg=turbulent_viscosity_ratio_stg,
        wall_distance=wall_distance,
        volumetric_forcing=volumetric_forcing,
        forcing_zone_thickness=forcing_zone_thickness,
        volumetric_thickness=volumetric_thickness,
        turbulent_specification=turbulent_specification,
        modified_turbulent_viscosity=modified_turbulent_viscosity_1,
        laminar_kinetic_energy=laminar_kinetic_energy_1,
        intermittency=intermittency_1,
        turbulent_kinetic_energy=turbulent_kinetic_energy_1,
        turbulent_dissipation_rate=turbulent_dissipation_rate_1,
        specific_dissipation_rate=specific_dissipation_rate_1,
        velocity_variance_scale=velocity_variance_scale_1,
        turbulent_intensity=turbulent_intensity_1,
        turbulent_length_scale=turbulent_length_scale_1,
        hydraulic_diameter=hydraulic_diameter_1,
        turbulent_viscosity_ratio_real=turbulent_viscosity_ratio_real_1,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio_1,
        reynolds_stress_specification=reynolds_stress_specification,
        uu_reynolds_stresses=uu_reynolds_stresses_1,
        vv_reynolds_stresses=vv_reynolds_stresses_1,
        ww_reynolds_stresses=ww_reynolds_stresses_1,
        uv_reynolds_stresses=uv_reynolds_stresses_1,
        vw_reynolds_stresses=vw_reynolds_stresses_1,
        uw_reynolds_stresses=uw_reynolds_stresses_1,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
    )
    return_type = 'object'

class thermodynamic_non_equilibrium_boundary(Boolean, AllowedValuesMixin):
    """
    Thermodynamic Non-Equilibrium Boundary.
    """
    _version = '241'
    fluent_name = 'thermodynamic-non-equilibrium-boundary'
    _python_name = 'thermodynamic_non_equilibrium_boundary'
    return_type = 'object'

class vibrational_electronic_temperature(Group):
    """
    Vibrational-Electronic Temperature.
    """
    _version = '241'
    fluent_name = 'vibrational-electronic-temperature'
    _python_name = 'vibrational_electronic_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class thermal_4(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'thermal'
    _python_name = 'thermal'
    child_names = ['t', 'thermodynamic_non_equilibrium_boundary', 'vibrational_electronic_temperature']
    _child_classes = dict(
        t=t,
        thermodynamic_non_equilibrium_boundary=thermodynamic_non_equilibrium_boundary,
        vibrational_electronic_temperature=vibrational_electronic_temperature,
    )
    return_type = 'object'

class participates_in_view_factor_calculation_1(Boolean, AllowedValuesMixin):
    """
    Participates in View Factor Calculation?.
    """
    _version = '241'
    fluent_name = 'participates-in-view-factor-calculation?'
    _python_name = 'participates_in_view_factor_calculation'
    return_type = 'object'

class radiation_4(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['radiation_bc', 'radial_direction', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'participates_in_view_factor_calculation']
    _child_classes = dict(
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        participates_in_view_factor_calculation=participates_in_view_factor_calculation_1,
    )
    return_type = 'object'

class open_channel_wave_bc(Boolean, AllowedValuesMixin):
    """
    Open Channel Wave BC.
    """
    _version = '241'
    fluent_name = 'open-channel-wave-bc'
    _python_name = 'open_channel_wave_bc'
    return_type = 'object'

class segregated_velocity_inputs(Boolean, AllowedValuesMixin):
    """
    Segregated Velocity Inputs.
    """
    _version = '241'
    fluent_name = 'segregated-velocity-inputs'
    _python_name = 'segregated_velocity_inputs'
    return_type = 'object'

class averaged_flow_specification_method(String, AllowedValuesMixin):
    """
    Averaged Flow Specification Method.
    """
    _version = '241'
    fluent_name = 'averaged-flow-specification-method'
    _python_name = 'averaged_flow_specification_method'
    return_type = 'object'

class avg_flow_velocity(Group):
    """
    Averaged Flow Velocity Magnitude.
    """
    _version = '241'
    fluent_name = 'avg-flow-velocity'
    _python_name = 'avg_flow_velocity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_velocity_child(Group):
    """
    'child_object_type' of wave_velocity.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'wave_velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_velocity(ListObject[wave_velocity_child]):
    """
    'wave_velocity' child.
    """
    _version = '241'
    fluent_name = 'wave-velocity'
    _python_name = 'wave_velocity'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = wave_velocity_child
    return_type = 'object'

class moving_object_velocity_specification_method(String, AllowedValuesMixin):
    """
    Moving Object: Velocity Specification Method.
    """
    _version = '241'
    fluent_name = 'moving-object-velocity-specification-method'
    _python_name = 'moving_object_velocity_specification_method'
    return_type = 'object'

class moving_object_velocity(Group):
    """
    Moving Object: Velocity Magnitude.
    """
    _version = '241'
    fluent_name = 'moving-object-velocity'
    _python_name = 'moving_object_velocity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class moving_object_direction_child(Group):
    """
    'child_object_type' of moving_object_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'moving_object_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class moving_object_direction(ListObject[moving_object_direction_child]):
    """
    'moving_object_direction' child.
    """
    _version = '241'
    fluent_name = 'moving-object-direction'
    _python_name = 'moving_object_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = moving_object_direction_child
    return_type = 'object'

class secondary_phase_velocity_specification_method(String, AllowedValuesMixin):
    """
    Secondary Phase: Velocity Specification Method.
    """
    _version = '241'
    fluent_name = 'secondary-phase-velocity-specification-method'
    _python_name = 'secondary_phase_velocity_specification_method'
    return_type = 'object'

class secondary_phase_velocity(Group):
    """
    Secondary Phase: Velocity Magnitude.
    """
    _version = '241'
    fluent_name = 'secondary-phase-velocity'
    _python_name = 'secondary_phase_velocity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class secondary_phase_direction_child(Group):
    """
    'child_object_type' of secondary_phase_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'secondary_phase_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class secondary_phase_direction(ListObject[secondary_phase_direction_child]):
    """
    'secondary_phase_direction' child.
    """
    _version = '241'
    fluent_name = 'secondary-phase-direction'
    _python_name = 'secondary_phase_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = secondary_phase_direction_child
    return_type = 'object'

class primary_phase_velocity_specification_method(String, AllowedValuesMixin):
    """
    Primary Phase: Velocity Specification Method.
    """
    _version = '241'
    fluent_name = 'primary-phase-velocity-specification-method'
    _python_name = 'primary_phase_velocity_specification_method'
    return_type = 'object'

class primary_phase_reference_height_above_free_surface(Real, AllowedValuesMixin):
    """
    Primary Phase: Reference Height Above Free Surface.
    """
    _version = '241'
    fluent_name = 'primary-phase-reference-height-above-free-surface'
    _python_name = 'primary_phase_reference_height_above_free_surface'
    return_type = 'object'

class primary_phase_power_law_coefficient(Real, AllowedValuesMixin):
    """
    Primary Phase: Power Law Coefficient.
    """
    _version = '241'
    fluent_name = 'primary-phase-power-law-coefficient'
    _python_name = 'primary_phase_power_law_coefficient'
    return_type = 'object'

class primary_phase_velocity(Group):
    """
    Primary Phase: Velocity Magnitude.
    """
    _version = '241'
    fluent_name = 'primary-phase-velocity'
    _python_name = 'primary_phase_velocity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class primary_phase_reference_velocity(Group):
    """
    Primary Phase: Reference Velocity Magnitude.
    """
    _version = '241'
    fluent_name = 'primary-phase-reference-velocity'
    _python_name = 'primary_phase_reference_velocity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class primary_phase_direction_child(Group):
    """
    'child_object_type' of primary_phase_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'primary_phase_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class primary_phase_direction(ListObject[primary_phase_direction_child]):
    """
    'primary_phase_direction' child.
    """
    _version = '241'
    fluent_name = 'primary-phase-direction'
    _python_name = 'primary_phase_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = primary_phase_direction_child
    return_type = 'object'

class wave_option(String, AllowedValuesMixin):
    """
    Wave BC Options.
    """
    _version = '241'
    fluent_name = 'wave-option'
    _python_name = 'wave_option'
    return_type = 'object'

class reference_wave_direction(String, AllowedValuesMixin):
    """
    Reference Wave Direction.
    """
    _version = '241'
    fluent_name = 'reference-wave-direction'
    _python_name = 'reference_wave_direction'
    return_type = 'object'

class reference_direction_child(Group):
    """
    'child_object_type' of reference_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'reference_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class reference_direction(ListObject[reference_direction_child]):
    """
    'reference_direction' child.
    """
    _version = '241'
    fluent_name = 'reference-direction'
    _python_name = 'reference_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = reference_direction_child
    return_type = 'object'

class wave_modeling_option(String, AllowedValuesMixin):
    """
    Wave Modeling Options.
    """
    _version = '241'
    fluent_name = 'wave-modeling-option'
    _python_name = 'wave_modeling_option'
    return_type = 'object'

class theory(String, AllowedValuesMixin):
    """
    'theory' child.
    """
    _version = '241'
    fluent_name = 'theory'
    _python_name = 'theory'
    return_type = 'object'

class wave_ht(Group):
    """
    'wave_ht' child.
    """
    _version = '241'
    fluent_name = 'wave-ht'
    _python_name = 'wave_ht'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_len(Group):
    """
    'wave_len' child.
    """
    _version = '241'
    fluent_name = 'wave-len'
    _python_name = 'wave_len'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class phase_diff(Group):
    """
    'phase_diff' child.
    """
    _version = '241'
    fluent_name = 'phase-diff'
    _python_name = 'phase_diff'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class heading_angle(Group):
    """
    'heading_angle' child.
    """
    _version = '241'
    fluent_name = 'heading-angle'
    _python_name = 'heading_angle'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_group_inputs_child(Group):
    """
    'child_object_type' of wave_group_inputs.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'wave_group_inputs_child'
    child_names = ['theory', 'wave_ht', 'wave_len', 'phase_diff', 'heading_angle']
    _child_classes = dict(
        theory=theory,
        wave_ht=wave_ht,
        wave_len=wave_len,
        phase_diff=phase_diff,
        heading_angle=heading_angle,
    )
    return_type = 'object'

class wave_group_inputs(ListObject[wave_group_inputs_child]):
    """
    Wave Group Inputs.
    """
    _version = '241'
    fluent_name = 'wave-group-inputs'
    _python_name = 'wave_group_inputs'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = wave_group_inputs_child
    return_type = 'object'

class offset_2(Group):
    """
    'offset' child.
    """
    _version = '241'
    fluent_name = 'offset'
    _python_name = 'offset'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class shallow_wave_inputs_child(Group):
    """
    'child_object_type' of shallow_wave_inputs.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'shallow_wave_inputs_child'
    child_names = ['theory', 'wave_ht', 'wave_len', 'offset', 'heading_angle']
    _child_classes = dict(
        theory=theory,
        wave_ht=wave_ht,
        wave_len=wave_len,
        offset=offset_2,
        heading_angle=heading_angle,
    )
    return_type = 'object'

class shallow_wave_inputs(ListObject[shallow_wave_inputs_child]):
    """
    Shallow Wave Inputs.
    """
    _version = '241'
    fluent_name = 'shallow-wave-inputs'
    _python_name = 'shallow_wave_inputs'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = shallow_wave_inputs_child
    return_type = 'object'

class frequency_spectrum_method(String, AllowedValuesMixin):
    """
    Frequency Spectrum Method .
    """
    _version = '241'
    fluent_name = 'frequency-spectrum-method'
    _python_name = 'frequency_spectrum_method'
    return_type = 'object'

class peak_shape_parameter(Real, AllowedValuesMixin):
    """
    Peak Shape Parameter.
    """
    _version = '241'
    fluent_name = 'peak-shape-parameter'
    _python_name = 'peak_shape_parameter'
    return_type = 'object'

class significant_wave_height(Group):
    """
    Significant Wave Height.
    """
    _version = '241'
    fluent_name = 'significant-wave-height'
    _python_name = 'significant_wave_height'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class peak_frequency(Group):
    """
    Peak Frequency.
    """
    _version = '241'
    fluent_name = 'peak-frequency'
    _python_name = 'peak_frequency'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class minimum_frequency(Group):
    """
    Minimum Frequency.
    """
    _version = '241'
    fluent_name = 'minimum-frequency'
    _python_name = 'minimum_frequency'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class maximum_frequency(Group):
    """
    Maximum Frequency.
    """
    _version = '241'
    fluent_name = 'maximum-frequency'
    _python_name = 'maximum_frequency'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class number_of_frequency_components(Integer, AllowedValuesMixin):
    """
    Number of frequency components.
    """
    _version = '241'
    fluent_name = 'number-of-frequency-components'
    _python_name = 'number_of_frequency_components'
    return_type = 'object'

class directional_spreading_method(String, AllowedValuesMixin):
    """
    Directional Spreading Method .
    """
    _version = '241'
    fluent_name = 'directional-spreading-method'
    _python_name = 'directional_spreading_method'
    return_type = 'object'

class frequency_independent_cosine_exponent(Integer, AllowedValuesMixin):
    """
    Frequency Independent Cosine Exponent.
    """
    _version = '241'
    fluent_name = 'frequency-independent-cosine-exponent'
    _python_name = 'frequency_independent_cosine_exponent'
    return_type = 'object'

class mean_wave_heading_angle(Group):
    """
    Mean Wave Heading Angle.
    """
    _version = '241'
    fluent_name = 'mean-wave-heading-angle'
    _python_name = 'mean_wave_heading_angle'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class angular_deviation(Group):
    """
    Angular Deviation.
    """
    _version = '241'
    fluent_name = 'angular-deviation'
    _python_name = 'angular_deviation'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class number_of_angular_components(Integer, AllowedValuesMixin):
    """
    Number of Angular components.
    """
    _version = '241'
    fluent_name = 'number-of-angular-components'
    _python_name = 'number_of_angular_components'
    return_type = 'object'

class mean_and_std_deviation(RealList):
    """
    Mean and standard deviation.
    """
    _version = '241'
    fluent_name = 'mean-and-std-deviation'
    _python_name = 'mean_and_std_deviation'
    return_type = 'object'

class pb_disc_components_child(Group):
    """
    'child_object_type' of pb_disc_components.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pb_disc_components_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pb_disc_components(ListObject[pb_disc_components_child]):
    """
    'pb_disc_components' child.
    """
    _version = '241'
    fluent_name = 'pb-disc-components'
    _python_name = 'pb_disc_components'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = pb_disc_components_child
    return_type = 'object'

class pb_disc_1(Group):
    """
    'pb_disc' child.
    """
    _version = '241'
    fluent_name = 'pb-disc'
    _python_name = 'pb_disc'
    child_names = ['mean_and_std_deviation', 'pb_disc_components']
    _child_classes = dict(
        mean_and_std_deviation=mean_and_std_deviation,
        pb_disc_components=pb_disc_components,
    )
    return_type = 'object'

class multiphase_6(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['open_channel_wave_bc', 'segregated_velocity_inputs', 'averaged_flow_specification_method', 'avg_flow_velocity', 'wave_velocity', 'moving_object_velocity_specification_method', 'moving_object_velocity', 'moving_object_direction', 'secondary_phase_velocity_specification_method', 'secondary_phase_velocity', 'secondary_phase_direction', 'primary_phase_velocity_specification_method', 'primary_phase_reference_height_above_free_surface', 'primary_phase_power_law_coefficient', 'primary_phase_velocity', 'primary_phase_reference_velocity', 'primary_phase_direction', 'secondary_phase_for_inlet', 'wave_option', 'free_surface_level', 'bottom_level', 'reference_wave_direction', 'reference_direction', 'wave_modeling_option', 'wave_group_inputs', 'shallow_wave_inputs', 'frequency_spectrum_method', 'peak_shape_parameter', 'significant_wave_height', 'peak_frequency', 'minimum_frequency', 'maximum_frequency', 'number_of_frequency_components', 'directional_spreading_method', 'frequency_independent_cosine_exponent', 'mean_wave_heading_angle', 'angular_deviation', 'number_of_angular_components', 'granular_temperature', 'interfacial_area_concentration', 'level_set_function_flux', 'volume_fraction', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_qbmm_bc', 'pb_qbmm', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom']
    _child_classes = dict(
        open_channel_wave_bc=open_channel_wave_bc,
        segregated_velocity_inputs=segregated_velocity_inputs,
        averaged_flow_specification_method=averaged_flow_specification_method,
        avg_flow_velocity=avg_flow_velocity,
        wave_velocity=wave_velocity,
        moving_object_velocity_specification_method=moving_object_velocity_specification_method,
        moving_object_velocity=moving_object_velocity,
        moving_object_direction=moving_object_direction,
        secondary_phase_velocity_specification_method=secondary_phase_velocity_specification_method,
        secondary_phase_velocity=secondary_phase_velocity,
        secondary_phase_direction=secondary_phase_direction,
        primary_phase_velocity_specification_method=primary_phase_velocity_specification_method,
        primary_phase_reference_height_above_free_surface=primary_phase_reference_height_above_free_surface,
        primary_phase_power_law_coefficient=primary_phase_power_law_coefficient,
        primary_phase_velocity=primary_phase_velocity,
        primary_phase_reference_velocity=primary_phase_reference_velocity,
        primary_phase_direction=primary_phase_direction,
        secondary_phase_for_inlet=secondary_phase_for_inlet,
        wave_option=wave_option,
        free_surface_level=free_surface_level,
        bottom_level=bottom_level,
        reference_wave_direction=reference_wave_direction,
        reference_direction=reference_direction,
        wave_modeling_option=wave_modeling_option,
        wave_group_inputs=wave_group_inputs,
        shallow_wave_inputs=shallow_wave_inputs,
        frequency_spectrum_method=frequency_spectrum_method,
        peak_shape_parameter=peak_shape_parameter,
        significant_wave_height=significant_wave_height,
        peak_frequency=peak_frequency,
        minimum_frequency=minimum_frequency,
        maximum_frequency=maximum_frequency,
        number_of_frequency_components=number_of_frequency_components,
        directional_spreading_method=directional_spreading_method,
        frequency_independent_cosine_exponent=frequency_independent_cosine_exponent,
        mean_wave_heading_angle=mean_wave_heading_angle,
        angular_deviation=angular_deviation,
        number_of_angular_components=number_of_angular_components,
        granular_temperature=granular_temperature_1,
        interfacial_area_concentration=interfacial_area_concentration_1,
        level_set_function_flux=level_set_function_flux_1,
        volume_fraction=volume_fraction_1,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc_1,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_qbmm_bc=pb_qbmm_bc,
        pb_qbmm=pb_qbmm,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
    )
    return_type = 'object'

class phase_24_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_8,
        turbulence=turbulence_4,
        thermal=thermal_4,
        radiation=radiation_4,
        species=species_7,
        dpm=dpm,
        multiphase=multiphase_6,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class phase_24(NamedObject[phase_24_child], _NonCreatableNamedObjectMixin[phase_24_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_24_child
    return_type = 'object'

class velocity_inlet_child(Group):
    """
    'child_object_type' of velocity_inlet.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'velocity_inlet_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        name=name,
        phase=phase_24,
        momentum=momentum_8,
        turbulence=turbulence_4,
        thermal=thermal_4,
        radiation=radiation_4,
        species=species_7,
        dpm=dpm,
        multiphase=multiphase_6,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class velocity_inlet(NamedObject[velocity_inlet_child], _NonCreatableNamedObjectMixin[velocity_inlet_child]):
    """
    'velocity_inlet' child.
    """
    _version = '241'
    fluent_name = 'velocity-inlet'
    _python_name = 'velocity_inlet'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = velocity_inlet_child
    return_type = 'object'

class fensapice_drop_reinj(Boolean, AllowedValuesMixin):
    """
    'fensapice_drop_reinj' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-reinj?'
    _python_name = 'fensapice_drop_reinj'
    return_type = 'object'

class motion_bc(String, AllowedValuesMixin):
    """
    Wall Motion.
    """
    _version = '241'
    fluent_name = 'motion-bc'
    _python_name = 'motion_bc'
    return_type = 'object'

class shear_bc(String, AllowedValuesMixin):
    """
    Shear Boundary Condition.
    """
    _version = '241'
    fluent_name = 'shear-bc'
    _python_name = 'shear_bc'
    return_type = 'object'

class moving(Boolean, AllowedValuesMixin):
    """
    Apply a velocity to this wall?.
    """
    _version = '241'
    fluent_name = 'moving?'
    _python_name = 'moving'
    return_type = 'object'

class relative(Boolean, AllowedValuesMixin):
    """
    Define wall motion relative to adjacent cell zone?.
    """
    _version = '241'
    fluent_name = 'relative?'
    _python_name = 'relative'
    return_type = 'object'

class rotating(Boolean, AllowedValuesMixin):
    """
    Apply a rotational velocity to this wall?.
    """
    _version = '241'
    fluent_name = 'rotating?'
    _python_name = 'rotating'
    return_type = 'object'

class wall_translation_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of wall_translation.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'wall_translation_child'
    return_type = 'object'

class wall_translation(ListObject[wall_translation_child]):
    """
    'wall_translation' child.
    """
    _version = '241'
    fluent_name = 'wall-translation'
    _python_name = 'wall_translation'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = wall_translation_child
    return_type = 'object'

class components_1(Boolean, AllowedValuesMixin):
    """
    Define wall velocity components?.
    """
    _version = '241'
    fluent_name = 'components?'
    _python_name = 'components'
    return_type = 'object'

class velocity_2_child(Group):
    """
    'child_object_type' of velocity.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class velocity_2(ListObject[velocity_2_child]):
    """
    'velocity' child.
    """
    _version = '241'
    fluent_name = 'velocity'
    _python_name = 'velocity'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = velocity_2_child
    return_type = 'object'

class fsi_interface(Boolean, AllowedValuesMixin):
    """
    FSI Interface.
    """
    _version = '241'
    fluent_name = 'fsi-interface?'
    _python_name = 'fsi_interface'
    return_type = 'object'

class periodic_displacement_child(Group):
    """
    'child_object_type' of periodic_displacement.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'periodic_displacement_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class periodic_displacement(ListObject[periodic_displacement_child]):
    """
    'periodic_displacement' child.
    """
    _version = '241'
    fluent_name = 'periodic-displacement'
    _python_name = 'periodic_displacement'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = periodic_displacement_child
    return_type = 'object'

class periodic_imaginary_displacement_child(Group):
    """
    'child_object_type' of periodic_imaginary_displacement.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'periodic_imaginary_displacement_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class periodic_imaginary_displacement(ListObject[periodic_imaginary_displacement_child]):
    """
    'periodic_imaginary_displacement' child.
    """
    _version = '241'
    fluent_name = 'periodic-imaginary-displacement'
    _python_name = 'periodic_imaginary_displacement'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = periodic_imaginary_displacement_child
    return_type = 'object'

class freq(Group):
    """
    Frequency of Periodic Displacement.
    """
    _version = '241'
    fluent_name = 'freq'
    _python_name = 'freq'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class amp(Group):
    """
    Amplitude of Periodic Displacement.
    """
    _version = '241'
    fluent_name = 'amp'
    _python_name = 'amp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class nodal_diam(Integer, AllowedValuesMixin):
    """
    Nodal Diameter for Periodic Displacement.
    """
    _version = '241'
    fluent_name = 'nodal-diam'
    _python_name = 'nodal_diam'
    return_type = 'object'

class pass_number(Group):
    """
    Passage Number for Periodic Displacement.
    """
    _version = '241'
    fluent_name = 'pass-number'
    _python_name = 'pass_number'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class fwd(Boolean, AllowedValuesMixin):
    """
    Forward or Backward Travelling Wave.
    """
    _version = '241'
    fluent_name = 'fwd?'
    _python_name = 'fwd'
    return_type = 'object'

class aero(Boolean, AllowedValuesMixin):
    """
    Enable Aerodamping Monitoring?.
    """
    _version = '241'
    fluent_name = 'aero?'
    _python_name = 'aero'
    return_type = 'object'

class cmplx(Boolean, AllowedValuesMixin):
    """
    Complex Mode Shape?.
    """
    _version = '241'
    fluent_name = 'cmplx?'
    _python_name = 'cmplx'
    return_type = 'object'

class norm(Boolean, AllowedValuesMixin):
    """
    Normalized profile?.
    """
    _version = '241'
    fluent_name = 'norm?'
    _python_name = 'norm'
    return_type = 'object'

class method_5(Integer, AllowedValuesMixin):
    """
    Travelling Wave Method.
    """
    _version = '241'
    fluent_name = 'method?'
    _python_name = 'method'
    return_type = 'object'

class omega_1(Group):
    """
    Rotation Speed.
    """
    _version = '241'
    fluent_name = 'omega'
    _python_name = 'omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class rotation_axis_origin_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of rotation_axis_origin.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'rotation_axis_origin_child'
    return_type = 'object'

class rotation_axis_origin(ListObject[rotation_axis_origin_child]):
    """
    'rotation_axis_origin' child.
    """
    _version = '241'
    fluent_name = 'rotation-axis-origin'
    _python_name = 'rotation_axis_origin'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = rotation_axis_origin_child
    return_type = 'object'

class rotation_axis_direction_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of rotation_axis_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'rotation_axis_direction_child'
    return_type = 'object'

class rotation_axis_direction(ListObject[rotation_axis_direction_child]):
    """
    'rotation_axis_direction' child.
    """
    _version = '241'
    fluent_name = 'rotation-axis-direction'
    _python_name = 'rotation_axis_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = rotation_axis_direction_child
    return_type = 'object'

class specified_shear(Boolean, AllowedValuesMixin):
    """
    Shear stress?.
    """
    _version = '241'
    fluent_name = 'specified-shear?'
    _python_name = 'specified_shear'
    return_type = 'object'

class shear_stress_child(Group):
    """
    'child_object_type' of shear_stress.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'shear_stress_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class shear_stress(ListObject[shear_stress_child]):
    """
    'shear_stress' child.
    """
    _version = '241'
    fluent_name = 'shear-stress'
    _python_name = 'shear_stress'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = shear_stress_child
    return_type = 'object'

class fslip(Real, AllowedValuesMixin):
    """
    Fslip constant.
    """
    _version = '241'
    fluent_name = 'fslip'
    _python_name = 'fslip'
    return_type = 'object'

class eslip(Real, AllowedValuesMixin):
    """
    Eslip constant.
    """
    _version = '241'
    fluent_name = 'eslip'
    _python_name = 'eslip'
    return_type = 'object'

class surf_tens_grad(Real, AllowedValuesMixin):
    """
    Surface tension gradient.
    """
    _version = '241'
    fluent_name = 'surf-tens-grad'
    _python_name = 'surf_tens_grad'
    return_type = 'object'

class specular_coeff(Real, AllowedValuesMixin):
    """
    Specularity Coefficient.
    """
    _version = '241'
    fluent_name = 'specular-coeff'
    _python_name = 'specular_coeff'
    return_type = 'object'

class mom_accom_coef(Real, AllowedValuesMixin):
    """
    Momentum Accommodation Coefficient.
    """
    _version = '241'
    fluent_name = 'mom-accom-coef'
    _python_name = 'mom_accom_coef'
    return_type = 'object'

class momentum_9(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['motion_bc', 'shear_bc', 'moving', 'relative', 'rotating', 'vmag', 'wall_translation', 'components', 'velocity', 'fsi_interface', 'periodic_displacement', 'periodic_imaginary_displacement', 'freq', 'amp', 'nodal_diam', 'pass_number', 'fwd', 'aero', 'cmplx', 'norm', 'method', 'omega', 'rotation_axis_origin', 'rotation_axis_direction', 'specified_shear', 'shear_stress', 'fslip', 'eslip', 'surf_tens_grad', 'specular_coeff', 'mom_accom_coef']
    _child_classes = dict(
        motion_bc=motion_bc,
        shear_bc=shear_bc,
        moving=moving,
        relative=relative,
        rotating=rotating,
        vmag=vmag,
        wall_translation=wall_translation,
        components=components_1,
        velocity=velocity_2,
        fsi_interface=fsi_interface,
        periodic_displacement=periodic_displacement,
        periodic_imaginary_displacement=periodic_imaginary_displacement,
        freq=freq,
        amp=amp,
        nodal_diam=nodal_diam,
        pass_number=pass_number,
        fwd=fwd,
        aero=aero,
        cmplx=cmplx,
        norm=norm,
        method=method_5,
        omega=omega_1,
        rotation_axis_origin=rotation_axis_origin,
        rotation_axis_direction=rotation_axis_direction,
        specified_shear=specified_shear,
        shear_stress=shear_stress,
        fslip=fslip,
        eslip=eslip,
        surf_tens_grad=surf_tens_grad,
        specular_coeff=specular_coeff,
        mom_accom_coef=mom_accom_coef,
    )
    return_type = 'object'

class rough_bc(String, AllowedValuesMixin):
    """
    Wall Surface Roughness.
    """
    _version = '241'
    fluent_name = 'rough-bc'
    _python_name = 'rough_bc'
    return_type = 'object'

class rough_option(Boolean, AllowedValuesMixin):
    """
    Wall Roughness?.
    """
    _version = '241'
    fluent_name = 'rough-option?'
    _python_name = 'rough_option'
    return_type = 'object'

class rough_nasa(Boolean, AllowedValuesMixin):
    """
    NASA sand-grain roughness model for icing?.
    """
    _version = '241'
    fluent_name = 'rough-nasa?'
    _python_name = 'rough_nasa'
    return_type = 'object'

class rough_shin_et_al(Boolean, AllowedValuesMixin):
    """
    Shin-et-al sand-grain roughness model for icing ?.
    """
    _version = '241'
    fluent_name = 'rough-shin-et-al?'
    _python_name = 'rough_shin_et_al'
    return_type = 'object'

class rough_data(Boolean, AllowedValuesMixin):
    """
    Variable Roughness From ICE3D?.
    """
    _version = '241'
    fluent_name = 'rough-data?'
    _python_name = 'rough_data'
    return_type = 'object'

class roughness_height(Group):
    """
    Wall Roughness Height.
    """
    _version = '241'
    fluent_name = 'roughness-height'
    _python_name = 'roughness_height'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class roughness_const(Group):
    """
    Wall Roughness Constant.
    """
    _version = '241'
    fluent_name = 'roughness-const'
    _python_name = 'roughness_const'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class roughness_height_cp(Group):
    """
    Wall Roughness Height.
    """
    _version = '241'
    fluent_name = 'roughness-height-cp'
    _python_name = 'roughness_height_cp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class roughness_const_cp(Group):
    """
    Wall Roughness Constant.
    """
    _version = '241'
    fluent_name = 'roughness-const-cp'
    _python_name = 'roughness_const_cp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class roughness_const_nasa(Group):
    """
    Wall Roughness Constant.
    """
    _version = '241'
    fluent_name = 'roughness-const-nasa'
    _python_name = 'roughness_const_nasa'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class roughness_const_shin(Group):
    """
    Wall Roughness Constant.
    """
    _version = '241'
    fluent_name = 'roughness-const-shin'
    _python_name = 'roughness_const_shin'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class roughness_const_data(Group):
    """
    Wall Roughness Constant.
    """
    _version = '241'
    fluent_name = 'roughness-const-data'
    _python_name = 'roughness_const_data'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class variable_roughness(Group):
    """
    Variable Roughness Profile from ICE3D.
    """
    _version = '241'
    fluent_name = 'variable-roughness'
    _python_name = 'variable_roughness'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class free_stream_velocity(Real, AllowedValuesMixin):
    """
    Free Stream Velocity.
    """
    _version = '241'
    fluent_name = 'free-stream-velocity'
    _python_name = 'free_stream_velocity'
    return_type = 'object'

class free_stream_temp(Real, AllowedValuesMixin):
    """
    Free Stream Temperature.
    """
    _version = '241'
    fluent_name = 'free-stream-temp'
    _python_name = 'free_stream_temp'
    return_type = 'object'

class characteristic_length(Real, AllowedValuesMixin):
    """
    Characteristic Length.
    """
    _version = '241'
    fluent_name = 'characteristic-length'
    _python_name = 'characteristic_length'
    return_type = 'object'

class free_stream_temp_cp(Real, AllowedValuesMixin):
    """
    Free Stream Temperature.
    """
    _version = '241'
    fluent_name = 'free-stream-temp-cp'
    _python_name = 'free_stream_temp_cp'
    return_type = 'object'

class characteristic_length_cp(Real, AllowedValuesMixin):
    """
    Characteristic Length.
    """
    _version = '241'
    fluent_name = 'characteristic-length-cp'
    _python_name = 'characteristic_length_cp'
    return_type = 'object'

class liquid_content(Group):
    """
    Liquid Content (in [g/m^3]).
    """
    _version = '241'
    fluent_name = 'liquid-content'
    _python_name = 'liquid_content'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class liquid_content_cp(Group):
    """
    Liquid Content (in [g/m^3]).
    """
    _version = '241'
    fluent_name = 'liquid-content-cp'
    _python_name = 'liquid_content_cp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class droplet_diameter(Group):
    """
    Droplet Diameter (microns).
    """
    _version = '241'
    fluent_name = 'droplet-diameter'
    _python_name = 'droplet_diameter'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class turbulence_5(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'
    child_names = ['rough_bc', 'rough_option', 'rough_nasa', 'rough_shin_et_al', 'rough_data', 'roughness_height', 'roughness_const', 'roughness_height_cp', 'roughness_const_cp', 'roughness_const_nasa', 'roughness_const_shin', 'roughness_const_data', 'variable_roughness', 'free_stream_velocity', 'free_stream_temp', 'characteristic_length', 'free_stream_temp_cp', 'characteristic_length_cp', 'liquid_content', 'liquid_content_cp', 'droplet_diameter']
    _child_classes = dict(
        rough_bc=rough_bc,
        rough_option=rough_option,
        rough_nasa=rough_nasa,
        rough_shin_et_al=rough_shin_et_al,
        rough_data=rough_data,
        roughness_height=roughness_height,
        roughness_const=roughness_const,
        roughness_height_cp=roughness_height_cp,
        roughness_const_cp=roughness_const_cp,
        roughness_const_nasa=roughness_const_nasa,
        roughness_const_shin=roughness_const_shin,
        roughness_const_data=roughness_const_data,
        variable_roughness=variable_roughness,
        free_stream_velocity=free_stream_velocity,
        free_stream_temp=free_stream_temp,
        characteristic_length=characteristic_length,
        free_stream_temp_cp=free_stream_temp_cp,
        characteristic_length_cp=characteristic_length_cp,
        liquid_content=liquid_content,
        liquid_content_cp=liquid_content_cp,
        droplet_diameter=droplet_diameter,
    )
    return_type = 'object'

class wall_thickness_old(Real, AllowedValuesMixin):
    """
    Wall Thickness.
    """
    _version = '241'
    fluent_name = 'wall-thickness-old'
    _python_name = 'wall_thickness_old'
    return_type = 'object'

class wall_thickness(Group):
    """
    Wall Thickness.
    """
    _version = '241'
    fluent_name = 'wall-thickness'
    _python_name = 'wall_thickness'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class q_dot(Group):
    """
    Heat Generation Rate.
    """
    _version = '241'
    fluent_name = 'q-dot'
    _python_name = 'q_dot'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class h_1(Group):
    """
    Convective Heat Transfer Coefficient.
    """
    _version = '241'
    fluent_name = 'h'
    _python_name = 'h'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class tinf(Group):
    """
    'tinf' child.
    """
    _version = '241'
    fluent_name = 'tinf'
    _python_name = 'tinf'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class planar_conduction(Boolean, AllowedValuesMixin):
    """
    Enable shell conduction?.
    """
    _version = '241'
    fluent_name = 'planar-conduction?'
    _python_name = 'planar_conduction'
    return_type = 'object'

class thickness(Real, AllowedValuesMixin):
    """
    'thickness' child.
    """
    _version = '241'
    fluent_name = 'thickness'
    _python_name = 'thickness'
    return_type = 'object'

class qdot(Group):
    """
    'qdot' child.
    """
    _version = '241'
    fluent_name = 'qdot'
    _python_name = 'qdot'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class shell_conduction_child(Group):
    """
    'child_object_type' of shell_conduction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'shell_conduction_child'
    child_names = ['thickness', 'material', 'qdot']
    _child_classes = dict(
        thickness=thickness,
        material=material,
        qdot=qdot,
    )
    return_type = 'object'

class shell_conduction(ListObject[shell_conduction_child]):
    """
    Layer.
    """
    _version = '241'
    fluent_name = 'shell-conduction'
    _python_name = 'shell_conduction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = shell_conduction_child
    return_type = 'object'

class thickness_1(Group):
    """
    'thickness' child.
    """
    _version = '241'
    fluent_name = 'thickness'
    _python_name = 'thickness'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class thin_wall_child(Group):
    """
    'child_object_type' of thin_wall.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'thin_wall_child'
    child_names = ['thickness', 'material', 'qdot']
    _child_classes = dict(
        thickness=thickness_1,
        material=material,
        qdot=qdot,
    )
    return_type = 'object'

class thin_wall(ListObject[thin_wall_child]):
    """
    Layer.
    """
    _version = '241'
    fluent_name = 'thin-wall'
    _python_name = 'thin_wall'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = thin_wall_child
    return_type = 'object'

class external_emissivity(Group):
    """
    External Emissivity.
    """
    _version = '241'
    fluent_name = 'external-emissivity'
    _python_name = 'external_emissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class trad(Group):
    """
    External Radiation Temperature.
    """
    _version = '241'
    fluent_name = 'trad'
    _python_name = 'trad'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class int_rad(Boolean, AllowedValuesMixin):
    """
    Wall radiating to fixed temperature?.
    """
    _version = '241'
    fluent_name = 'int-rad?'
    _python_name = 'int_rad'
    return_type = 'object'

class trad_internal(Real, AllowedValuesMixin):
    """
    Internal Radiation Temperature.
    """
    _version = '241'
    fluent_name = 'trad-internal'
    _python_name = 'trad_internal'
    return_type = 'object'

class area_enhancement_factor(Group):
    """
    Area Enhancement Factor.
    """
    _version = '241'
    fluent_name = 'area-enhancement-factor'
    _python_name = 'area_enhancement_factor'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class contact_resistance_1(Group):
    """
    Contact Resistance.
    """
    _version = '241'
    fluent_name = 'contact-resistance'
    _python_name = 'contact_resistance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class therm_accom_coef(Real, AllowedValuesMixin):
    """
    Thermal Accommodation Coefficient.
    """
    _version = '241'
    fluent_name = 'therm-accom-coef'
    _python_name = 'therm_accom_coef'
    return_type = 'object'

class eve_accom_coef(Real, AllowedValuesMixin):
    """
    Vibrational-Electronic Accommodation Coefficient.
    """
    _version = '241'
    fluent_name = 'eve-accom-coef'
    _python_name = 'eve_accom_coef'
    return_type = 'object'

class caf(Group):
    """
    Convective Augmentation Factor.
    """
    _version = '241'
    fluent_name = 'caf'
    _python_name = 'caf'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class thermal_stabilization(Boolean, AllowedValuesMixin):
    """
    Enable Thermal Stabilization?.
    """
    _version = '241'
    fluent_name = 'thermal-stabilization?'
    _python_name = 'thermal_stabilization'
    return_type = 'object'

class scale_factor_1(Real, AllowedValuesMixin):
    """
    Scale Factor.
    """
    _version = '241'
    fluent_name = 'scale-factor'
    _python_name = 'scale_factor'
    return_type = 'object'

class stab_method(String, AllowedValuesMixin):
    """
    Stabilization Method.
    """
    _version = '241'
    fluent_name = 'stab-method'
    _python_name = 'stab_method'
    return_type = 'object'

class thermal_5(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'thermal'
    _python_name = 'thermal'
    child_names = ['wall_thickness_old', 'wall_thickness', 'q_dot', 'material', 'thermal_bc', 't', 'q', 'h', 'tinf', 'planar_conduction', 'shell_conduction', 'thin_wall', 'internal_emissivity', 'external_emissivity', 'trad', 'int_rad', 'trad_internal', 'area_enhancement_factor', 'contact_resistance', 'therm_accom_coef', 'eve_accom_coef', 'caf', 'thermal_stabilization', 'scale_factor', 'stab_method']
    _child_classes = dict(
        wall_thickness_old=wall_thickness_old,
        wall_thickness=wall_thickness,
        q_dot=q_dot,
        material=material_1,
        thermal_bc=thermal_bc,
        t=t,
        q=q,
        h=h_1,
        tinf=tinf,
        planar_conduction=planar_conduction,
        shell_conduction=shell_conduction,
        thin_wall=thin_wall,
        internal_emissivity=internal_emissivity,
        external_emissivity=external_emissivity,
        trad=trad,
        int_rad=int_rad,
        trad_internal=trad_internal,
        area_enhancement_factor=area_enhancement_factor,
        contact_resistance=contact_resistance_1,
        therm_accom_coef=therm_accom_coef,
        eve_accom_coef=eve_accom_coef,
        caf=caf,
        thermal_stabilization=thermal_stabilization,
        scale_factor=scale_factor_1,
        stab_method=stab_method,
    )
    return_type = 'object'

class band_in_emiss_child(Group):
    """
    'child_object_type' of band_in_emiss.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'band_in_emiss_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class band_in_emiss(NamedObject[band_in_emiss_child], _NonCreatableNamedObjectMixin[band_in_emiss_child]):
    """
    'band_in_emiss' child.
    """
    _version = '241'
    fluent_name = 'band-in-emiss'
    _python_name = 'band_in_emiss'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = band_in_emiss_child
    return_type = 'object'

class mc_bsource_p(Boolean, AllowedValuesMixin):
    """
    Boundary Source?.
    """
    _version = '241'
    fluent_name = 'mc-bsource-p?'
    _python_name = 'mc_bsource_p'
    return_type = 'object'

class mc_poldfun_p(Boolean, AllowedValuesMixin):
    """
    Polar Distribution Function?.
    """
    _version = '241'
    fluent_name = 'mc-poldfun-p?'
    _python_name = 'mc_poldfun_p'
    return_type = 'object'

class polar_func_type(String, AllowedValuesMixin):
    """
    Polar Function Type.
    """
    _version = '241'
    fluent_name = 'polar-func-type'
    _python_name = 'polar_func_type'
    return_type = 'object'

class mc_polar_expr(Real, AllowedValuesMixin):
    """
    Expression.
    """
    _version = '241'
    fluent_name = 'mc-polar-expr'
    _python_name = 'mc_polar_expr'
    return_type = 'object'

class polar_real_angle(Real, AllowedValuesMixin):
    """
    'polar_real_angle' child.
    """
    _version = '241'
    fluent_name = 'polar-real-angle'
    _python_name = 'polar_real_angle'
    return_type = 'object'

class polar_real_intensity(Real, AllowedValuesMixin):
    """
    'polar_real_intensity' child.
    """
    _version = '241'
    fluent_name = 'polar-real-intensity'
    _python_name = 'polar_real_intensity'
    return_type = 'object'

class polar_pair_list_child(Group):
    """
    'child_object_type' of polar_pair_list.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'polar_pair_list_child'
    child_names = ['polar_real_angle', 'polar_real_intensity']
    _child_classes = dict(
        polar_real_angle=polar_real_angle,
        polar_real_intensity=polar_real_intensity,
    )
    return_type = 'object'

class polar_pair_list(ListObject[polar_pair_list_child]):
    """
    Data Pairs.
    """
    _version = '241'
    fluent_name = 'polar-pair-list'
    _python_name = 'polar_pair_list'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = polar_pair_list_child
    return_type = 'object'

class pold_pair_list_rad(RealList, AllowedValuesMixin):
    """
    'pold_pair_list_rad' child.
    """
    _version = '241'
    fluent_name = 'pold-pair-list-rad'
    _python_name = 'pold_pair_list_rad'
    return_type = 'object'

class radiation_direction_child(Group):
    """
    'child_object_type' of radiation_direction.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'radiation_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class radiation_direction(ListObject[radiation_direction_child]):
    """
    'radiation_direction' child.
    """
    _version = '241'
    fluent_name = 'radiation-direction'
    _python_name = 'radiation_direction'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = radiation_direction_child
    return_type = 'object'

class coll_dtheta(Real, AllowedValuesMixin):
    """
    Theta Width of Beam.
    """
    _version = '241'
    fluent_name = 'coll-dtheta'
    _python_name = 'coll_dtheta'
    return_type = 'object'

class coll_dphi(Real, AllowedValuesMixin):
    """
    Phi Width of Beam.
    """
    _version = '241'
    fluent_name = 'coll-dphi'
    _python_name = 'coll_dphi'
    return_type = 'object'

class band_q_irrad_child(Group):
    """
    'child_object_type' of band_q_irrad.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'band_q_irrad_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class band_q_irrad(NamedObject[band_q_irrad_child], _NonCreatableNamedObjectMixin[band_q_irrad_child]):
    """
    Direct Irradiation.
    """
    _version = '241'
    fluent_name = 'band-q-irrad'
    _python_name = 'band_q_irrad'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = band_q_irrad_child
    return_type = 'object'

class band_q_irrad_diffuse_child(Group):
    """
    'child_object_type' of band_q_irrad_diffuse.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'band_q_irrad_diffuse_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class band_q_irrad_diffuse(NamedObject[band_q_irrad_diffuse_child], _NonCreatableNamedObjectMixin[band_q_irrad_diffuse_child]):
    """
    Diffuse Irradiation.
    """
    _version = '241'
    fluent_name = 'band-q-irrad-diffuse'
    _python_name = 'band_q_irrad_diffuse'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = band_q_irrad_diffuse_child
    return_type = 'object'

class band_diffuse_frac_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of band_diffuse_frac.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'band_diffuse_frac_child'
    return_type = 'object'

class band_diffuse_frac(NamedObject[band_diffuse_frac_child], _NonCreatableNamedObjectMixin[band_diffuse_frac_child]):
    """
    Diffuse Fraction.
    """
    _version = '241'
    fluent_name = 'band-diffuse-frac'
    _python_name = 'band_diffuse_frac'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = band_diffuse_frac_child
    return_type = 'object'

class critical_zone(Boolean, AllowedValuesMixin):
    """
    Critical Zone.
    """
    _version = '241'
    fluent_name = 'critical-zone?'
    _python_name = 'critical_zone'
    return_type = 'object'

class fpsc(Integer, AllowedValuesMixin):
    """
    Faces Per Surface Cluster.
    """
    _version = '241'
    fluent_name = 'fpsc'
    _python_name = 'fpsc'
    return_type = 'object'

class solar_direction(Boolean, AllowedValuesMixin):
    """
    Use Beam Direction from Solar Load Model Settings.
    """
    _version = '241'
    fluent_name = 'solar-direction?'
    _python_name = 'solar_direction'
    return_type = 'object'

class solar_irradiation(Boolean, AllowedValuesMixin):
    """
    Use Irradiation from Solar Load Model Settings.
    """
    _version = '241'
    fluent_name = 'solar-irradiation?'
    _python_name = 'solar_irradiation'
    return_type = 'object'

class v_transmissivity(Group):
    """
    Direct Visible (Transmissivity).
    """
    _version = '241'
    fluent_name = 'v-transmissivity'
    _python_name = 'v_transmissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ir_transmissivity(Group):
    """
    Direct IR (Transmissivity).
    """
    _version = '241'
    fluent_name = 'ir-transmissivity'
    _python_name = 'ir_transmissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class v_opq_absorbtivity(Group):
    """
    Direct Visible (Absorptivity).
    """
    _version = '241'
    fluent_name = 'v-opq-absorbtivity'
    _python_name = 'v_opq_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ir_opq_absorbtivity(Group):
    """
    Direct IR (Absorptivity).
    """
    _version = '241'
    fluent_name = 'ir-opq-absorbtivity'
    _python_name = 'ir_opq_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class v_st_absorbtivity(Group):
    """
    Direct Visible (Absorptivity).
    """
    _version = '241'
    fluent_name = 'v-st-absorbtivity'
    _python_name = 'v_st_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ir_st_absorbtivity(Group):
    """
    Direct IR (Absorptivity).
    """
    _version = '241'
    fluent_name = 'ir-st-absorbtivity'
    _python_name = 'ir_st_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class d_st_absorbtivity(Group):
    """
    Diffuse Hemispherical (Absorptivity).
    """
    _version = '241'
    fluent_name = 'd-st-absorbtivity'
    _python_name = 'd_st_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class d_transmissivity(Group):
    """
    Diffuse Hemispherical (Transmissivity).
    """
    _version = '241'
    fluent_name = 'd-transmissivity'
    _python_name = 'd_transmissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class radiation_5(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['band_in_emiss', 'radiation_bc', 'mc_bsource_p', 'mc_poldfun_p', 'polar_func_type', 'mc_polar_expr', 'polar_pair_list', 'pold_pair_list_rad', 'radiation_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'band_diffuse_frac', 'radiating_s2s_surface', 'critical_zone', 'fpsc', 'parallel_collimated_beam', 'solar_fluxes', 'solar_direction', 'solar_irradiation', 'v_transmissivity', 'ir_transmissivity', 'v_opq_absorbtivity', 'ir_opq_absorbtivity', 'v_st_absorbtivity', 'ir_st_absorbtivity', 'd_st_absorbtivity', 'd_transmissivity']
    _child_classes = dict(
        band_in_emiss=band_in_emiss,
        radiation_bc=radiation_bc,
        mc_bsource_p=mc_bsource_p,
        mc_poldfun_p=mc_poldfun_p,
        polar_func_type=polar_func_type,
        mc_polar_expr=mc_polar_expr,
        polar_pair_list=polar_pair_list,
        pold_pair_list_rad=pold_pair_list_rad,
        radiation_direction=radiation_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        band_diffuse_frac=band_diffuse_frac,
        radiating_s2s_surface=radiating_s2s_surface,
        critical_zone=critical_zone,
        fpsc=fpsc,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_fluxes=solar_fluxes,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        v_transmissivity=v_transmissivity,
        ir_transmissivity=ir_transmissivity,
        v_opq_absorbtivity=v_opq_absorbtivity,
        ir_opq_absorbtivity=ir_opq_absorbtivity,
        v_st_absorbtivity=v_st_absorbtivity,
        ir_st_absorbtivity=ir_st_absorbtivity,
        d_st_absorbtivity=d_st_absorbtivity,
        d_transmissivity=d_transmissivity,
    )
    return_type = 'object'

class react_1(Boolean, AllowedValuesMixin):
    """
    Activate Reaction.
    """
    _version = '241'
    fluent_name = 'react?'
    _python_name = 'react'
    return_type = 'object'

class partially_catalytic(Boolean, AllowedValuesMixin):
    """
    Activate Partially Catalytic Wall.
    """
    _version = '241'
    fluent_name = 'partially-catalytic?'
    _python_name = 'partially_catalytic'
    return_type = 'object'

class partially_catalytic_material(String, AllowedValuesMixin):
    """
    Material Options.
    """
    _version = '241'
    fluent_name = 'partially-catalytic-material'
    _python_name = 'partially_catalytic_material'
    return_type = 'object'

class partially_catalytic_recombination_coefficient_o(Group):
    """
    Recombination Coefficient For o.
    """
    _version = '241'
    fluent_name = 'partially-catalytic-recombination-coefficient-o'
    _python_name = 'partially_catalytic_recombination_coefficient_o'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class partially_catalytic_recombination_coefficient_n(Group):
    """
    Recombination Coefficient For n.
    """
    _version = '241'
    fluent_name = 'partially-catalytic-recombination-coefficient-n'
    _python_name = 'partially_catalytic_recombination_coefficient_n'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class partially_catalytic_recombination_model(String, AllowedValuesMixin):
    """
    Recombination Coefficient Model.
    """
    _version = '241'
    fluent_name = 'partially-catalytic-recombination-model'
    _python_name = 'partially_catalytic_recombination_model'
    return_type = 'object'

class species_boundary_conditions_child(String, AllowedValuesMixin):
    """
    'child_object_type' of species_boundary_conditions.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'species_boundary_conditions_child'
    return_type = 'object'

class species_boundary_conditions(NamedObject[species_boundary_conditions_child], _NonCreatableNamedObjectMixin[species_boundary_conditions_child]):
    """
    Species Boundary Conditions.
    """
    _version = '241'
    fluent_name = 'species-boundary-conditions'
    _python_name = 'species_boundary_conditions'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_boundary_conditions_child
    return_type = 'object'

class surf_washcoat_factor(Real, AllowedValuesMixin):
    """
    Surface Area Washcoat Factor.
    """
    _version = '241'
    fluent_name = 'surf-washcoat-factor'
    _python_name = 'surf_washcoat_factor'
    return_type = 'object'

class initial_deposition_height(Real, AllowedValuesMixin):
    """
    Initial Deposition Thickness.
    """
    _version = '241'
    fluent_name = 'initial-deposition-height'
    _python_name = 'initial_deposition_height'
    return_type = 'object'

class solid_species_density(Real, AllowedValuesMixin):
    """
    Solid Species Density.
    """
    _version = '241'
    fluent_name = 'solid-species-density'
    _python_name = 'solid_species_density'
    return_type = 'object'

class species_9(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['react', 'partially_catalytic', 'partially_catalytic_material', 'partially_catalytic_recombination_coefficient_o', 'partially_catalytic_recombination_coefficient_n', 'partially_catalytic_recombination_model', 'species_boundary_conditions', 'mf', 'reaction_mechs', 'surf_washcoat_factor', 'initial_deposition_height', 'solid_species_density']
    _child_classes = dict(
        react=react_1,
        partially_catalytic=partially_catalytic,
        partially_catalytic_material=partially_catalytic_material,
        partially_catalytic_recombination_coefficient_o=partially_catalytic_recombination_coefficient_o,
        partially_catalytic_recombination_coefficient_n=partially_catalytic_recombination_coefficient_n,
        partially_catalytic_recombination_model=partially_catalytic_recombination_model,
        species_boundary_conditions=species_boundary_conditions,
        mf=mf,
        reaction_mechs=reaction_mechs_1,
        surf_washcoat_factor=surf_washcoat_factor,
        initial_deposition_height=initial_deposition_height,
        solid_species_density=solid_species_density,
    )
    return_type = 'object'

class dpm_bc_norm_coeff(Group):
    """
    Normal .
    """
    _version = '241'
    fluent_name = 'dpm-bc-norm-coeff'
    _python_name = 'dpm_bc_norm_coeff'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class dpm_bc_tang_coeff(Group):
    """
    Tangent.
    """
    _version = '241'
    fluent_name = 'dpm-bc-tang-coeff'
    _python_name = 'dpm_bc_tang_coeff'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class dpm_bc_frictn_coeff(Group):
    """
    Friction Coefficient.
    """
    _version = '241'
    fluent_name = 'dpm-bc-frictn-coeff'
    _python_name = 'dpm_bc_frictn_coeff'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class dpm_film_splash_nsamp(Integer, AllowedValuesMixin):
    """
    Number of Splashed Drops .
    """
    _version = '241'
    fluent_name = 'dpm-film-splash-nsamp'
    _python_name = 'dpm_film_splash_nsamp'
    return_type = 'object'

class dpm_crit_temp_option(String, AllowedValuesMixin):
    """
    Critical Temperature Option (0: Temperature Factor, 1: Calibratable Temperature) .
    """
    _version = '241'
    fluent_name = 'dpm-crit-temp-option'
    _python_name = 'dpm_crit_temp_option'
    return_type = 'object'

class dpm_critical_temp_factor(Real, AllowedValuesMixin):
    """
    Temperature Factor .
    """
    _version = '241'
    fluent_name = 'dpm-critical-temp-factor'
    _python_name = 'dpm_critical_temp_factor'
    return_type = 'object'

class dpm_calibratable_temp(Real, AllowedValuesMixin):
    """
    Calibratable Temperature [K] .
    """
    _version = '241'
    fluent_name = 'dpm-calibratable-temp'
    _python_name = 'dpm_calibratable_temp'
    return_type = 'object'

class dpm_impingement_splashing_model(String, AllowedValuesMixin):
    """
    'dpm_impingement_splashing_model' child.
    """
    _version = '241'
    fluent_name = 'dpm-impingement-splashing-model'
    _python_name = 'dpm_impingement_splashing_model'
    return_type = 'object'

class dpm_upper_deposition_limit_offset(Real, AllowedValuesMixin):
    """
    Upper Deposition Limit Offset [K] .
    """
    _version = '241'
    fluent_name = 'dpm-upper-deposition-limit-offset'
    _python_name = 'dpm_upper_deposition_limit_offset'
    return_type = 'object'

class dpm_deposition_delta_t(Real, AllowedValuesMixin):
    """
    Deposition Delta T [K] .
    """
    _version = '241'
    fluent_name = 'dpm-deposition-delta-t'
    _python_name = 'dpm_deposition_delta_t'
    return_type = 'object'

class dpm_laplace_number_constant(Real, AllowedValuesMixin):
    """
    Laplace Number Constant .
    """
    _version = '241'
    fluent_name = 'dpm-laplace-number-constant'
    _python_name = 'dpm_laplace_number_constant'
    return_type = 'object'

class dpm_partial_evaporation_ratio(Real, AllowedValuesMixin):
    """
    Partial Evaporation Ratio .
    """
    _version = '241'
    fluent_name = 'dpm-partial-evaporation-ratio'
    _python_name = 'dpm_partial_evaporation_ratio'
    return_type = 'object'

class ra_roughness(Real, AllowedValuesMixin):
    """
    Ra.
    """
    _version = '241'
    fluent_name = 'ra-roughness'
    _python_name = 'ra_roughness'
    return_type = 'object'

class rz_roughness(Real, AllowedValuesMixin):
    """
    Rz.
    """
    _version = '241'
    fluent_name = 'rz-roughness'
    _python_name = 'rz_roughness'
    return_type = 'object'

class rq_roughness(Real, AllowedValuesMixin):
    """
    Rq.
    """
    _version = '241'
    fluent_name = 'rq-roughness'
    _python_name = 'rq_roughness'
    return_type = 'object'

class rsm_roughness(Real, AllowedValuesMixin):
    """
    RSm.
    """
    _version = '241'
    fluent_name = 'rsm-roughness'
    _python_name = 'rsm_roughness'
    return_type = 'object'

class enable_generic_erosion_model(Boolean, AllowedValuesMixin):
    """
    Enable Generic Erosion Model?.
    """
    _version = '241'
    fluent_name = 'enable-generic-erosion-model?'
    _python_name = 'enable_generic_erosion_model'
    return_type = 'object'

class generic_impact_angle_function(Group):
    """
    Generic Impact Angle Function.
    """
    _version = '241'
    fluent_name = 'generic-impact-angle-function'
    _python_name = 'generic_impact_angle_function'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class generic_diameter_function(Group):
    """
    Generic Diameter Function.
    """
    _version = '241'
    fluent_name = 'generic-diameter-function'
    _python_name = 'generic_diameter_function'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class generic_velocity_exponent_function(Group):
    """
    Generic Velocity Exponent Function.
    """
    _version = '241'
    fluent_name = 'generic-velocity-exponent-function'
    _python_name = 'generic_velocity_exponent_function'
    child_names = ['option', 'function_of', 'value', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option,
        function_of=function_of,
        value=value_4,
        piecewise_polynomial=piecewise_polynomial,
        piecewise_linear=piecewise_linear_1,
        polynomial=polynomial_1,
    )
    return_type = 'object'

class enable_finnie_erosion_model(Boolean, AllowedValuesMixin):
    """
    Enable Finnie Erosion Model?.
    """
    _version = '241'
    fluent_name = 'enable-finnie-erosion-model?'
    _python_name = 'enable_finnie_erosion_model'
    return_type = 'object'

class dpm_bc_erosion_finnie_k(Real, AllowedValuesMixin):
    """
    Finnie Model Constant, k:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-finnie-k'
    _python_name = 'dpm_bc_erosion_finnie_k'
    return_type = 'object'

class dpm_bc_erosion_finnie_vel_exp(Real, AllowedValuesMixin):
    """
    Finnie Velocity Exponent:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-finnie-vel-exp'
    _python_name = 'dpm_bc_erosion_finnie_vel_exp'
    return_type = 'object'

class dpm_bc_erosion_finnie_max_erosion_angle(Real, AllowedValuesMixin):
    """
    Finnie Angle of Maximum Erosion:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-finnie-max-erosion-angle'
    _python_name = 'dpm_bc_erosion_finnie_max_erosion_angle'
    return_type = 'object'

class dpm_bc_erosion_mclaury(Boolean, AllowedValuesMixin):
    """
    Enable McLaury Erosion Model?.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-mclaury?'
    _python_name = 'dpm_bc_erosion_mclaury'
    return_type = 'object'

class dpm_bc_erosion_mclaury_a(Real, AllowedValuesMixin):
    """
    McLaury Model Constant, A:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-mclaury-a'
    _python_name = 'dpm_bc_erosion_mclaury_a'
    return_type = 'object'

class dpm_bc_erosion_mclaury_vel_exp(Real, AllowedValuesMixin):
    """
    McLaury Velocity Exponent:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-mclaury-vel-exp'
    _python_name = 'dpm_bc_erosion_mclaury_vel_exp'
    return_type = 'object'

class dpm_bc_erosion_mclaury_transition_angle(Real, AllowedValuesMixin):
    """
    McLaury Transition Angle:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-mclaury-transition-angle'
    _python_name = 'dpm_bc_erosion_mclaury_transition_angle'
    return_type = 'object'

class dpm_bc_erosion_mclaury_b(Real, AllowedValuesMixin):
    """
    McLaury Impact Angle Constant, b:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-mclaury-b'
    _python_name = 'dpm_bc_erosion_mclaury_b'
    return_type = 'object'

class dpm_bc_erosion_mclaury_c(Real, AllowedValuesMixin):
    """
    McLaury Impact Angle Constant, c:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-mclaury-c'
    _python_name = 'dpm_bc_erosion_mclaury_c'
    return_type = 'object'

class dpm_bc_erosion_mclaury_w(Real, AllowedValuesMixin):
    """
    McLaury Impact Angle Constant, w:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-mclaury-w'
    _python_name = 'dpm_bc_erosion_mclaury_w'
    return_type = 'object'

class dpm_bc_erosion_mclaury_x(Real, AllowedValuesMixin):
    """
    McLaury Impact Angle Constant, x:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-mclaury-x'
    _python_name = 'dpm_bc_erosion_mclaury_x'
    return_type = 'object'

class dpm_bc_erosion_mclaury_y(Real, AllowedValuesMixin):
    """
    McLaury Impact Angle Constant, y:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-mclaury-y'
    _python_name = 'dpm_bc_erosion_mclaury_y'
    return_type = 'object'

class dpm_bc_erosion_oka(Boolean, AllowedValuesMixin):
    """
    Enable Oka Erosion Model?.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-oka?'
    _python_name = 'dpm_bc_erosion_oka'
    return_type = 'object'

class dpm_bc_erosion_oka_e90(Real, AllowedValuesMixin):
    """
    Oka Reference Erosion Rate:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-oka-e90'
    _python_name = 'dpm_bc_erosion_oka_e90'
    return_type = 'object'

class dpm_bc_erosion_oka_hv(Real, AllowedValuesMixin):
    """
    Oka Wall Material Vickers Hardness (GPa):.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-oka-hv'
    _python_name = 'dpm_bc_erosion_oka_hv'
    return_type = 'object'

class dpm_bc_erosion_oka_n1(Real, AllowedValuesMixin):
    """
    Oka Model Constant, n1:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-oka-n1'
    _python_name = 'dpm_bc_erosion_oka_n1'
    return_type = 'object'

class dpm_bc_erosion_oka_n2(Real, AllowedValuesMixin):
    """
    Oka Model Constant, n2:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-oka-n2'
    _python_name = 'dpm_bc_erosion_oka_n2'
    return_type = 'object'

class dpm_bc_erosion_oka_k2(Real, AllowedValuesMixin):
    """
    Oka Velocity Exponent:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-oka-k2'
    _python_name = 'dpm_bc_erosion_oka_k2'
    return_type = 'object'

class dpm_bc_erosion_oka_k3(Real, AllowedValuesMixin):
    """
    Oka Diameter Exponent:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-oka-k3'
    _python_name = 'dpm_bc_erosion_oka_k3'
    return_type = 'object'

class dpm_bc_erosion_oka_dref(Real, AllowedValuesMixin):
    """
    Oka Reference Diameter:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-oka-dref'
    _python_name = 'dpm_bc_erosion_oka_dref'
    return_type = 'object'

class dpm_bc_erosion_oka_vref(Real, AllowedValuesMixin):
    """
    Oka Reference Velocity:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-oka-vref'
    _python_name = 'dpm_bc_erosion_oka_vref'
    return_type = 'object'

class dpm_bc_erosion_dnv(Boolean, AllowedValuesMixin):
    """
    Enable DNV Erosion Model?.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-dnv?'
    _python_name = 'dpm_bc_erosion_dnv'
    return_type = 'object'

class dpm_bc_erosion_dnv_k(Real, AllowedValuesMixin):
    """
    DNV Model Constant, k:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-dnv-k'
    _python_name = 'dpm_bc_erosion_dnv_k'
    return_type = 'object'

class dpm_bc_erosion_dnv_n(Real, AllowedValuesMixin):
    """
    DNV Model Constant, n:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-dnv-n'
    _python_name = 'dpm_bc_erosion_dnv_n'
    return_type = 'object'

class dpm_bc_erosion_dnv_ductile(Boolean, AllowedValuesMixin):
    """
    DNV Ductile Wall Material?.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-dnv-ductile?'
    _python_name = 'dpm_bc_erosion_dnv_ductile'
    return_type = 'object'

class dpm_bc_erosion_shear(Boolean, AllowedValuesMixin):
    """
    Enable Shear Stress based Erosion Model?.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-shear?'
    _python_name = 'dpm_bc_erosion_shear'
    return_type = 'object'

class dpm_bc_erosion_shear_v(Real, AllowedValuesMixin):
    """
    Shear Stress Model Velocity Exponent, v:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-shear-v'
    _python_name = 'dpm_bc_erosion_shear_v'
    return_type = 'object'

class dpm_bc_erosion_shear_c(Real, AllowedValuesMixin):
    """
    Shear Stress Model Empirical Constant, c:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-shear-c'
    _python_name = 'dpm_bc_erosion_shear_c'
    return_type = 'object'

class dpm_bc_erosion_shear_packing_limit(Real, AllowedValuesMixin):
    """
    Shear Stress Model Packing Limit:.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-shear-packing-limit'
    _python_name = 'dpm_bc_erosion_shear_packing_limit'
    return_type = 'object'

class dpm_bc_erosion_shielding(Boolean, AllowedValuesMixin):
    """
    Account for Granular Phase Shielding?.
    """
    _version = '241'
    fluent_name = 'dpm-bc-erosion-shielding?'
    _python_name = 'dpm_bc_erosion_shielding'
    return_type = 'object'

class dpm_wall_heat_exchange(Boolean, AllowedValuesMixin):
    """
    Enable Particle-Wall Heat Exchange?.
    """
    _version = '241'
    fluent_name = 'dpm-wall-heat-exchange?'
    _python_name = 'dpm_wall_heat_exchange'
    return_type = 'object'

class dpm_film_condensation(Boolean, AllowedValuesMixin):
    """
    Enable Film Condensation?.
    """
    _version = '241'
    fluent_name = 'dpm-film-condensation?'
    _python_name = 'dpm_film_condensation'
    return_type = 'object'

class dpm_film_bl_model(Boolean, AllowedValuesMixin):
    """
    Enable Gas-Side Boundary Layer Model?.
    """
    _version = '241'
    fluent_name = 'dpm-film-bl-model?'
    _python_name = 'dpm_film_bl_model'
    return_type = 'object'

class dpm_particle_stripping(Boolean, AllowedValuesMixin):
    """
    Enable Particle Stripping?.
    """
    _version = '241'
    fluent_name = 'dpm-particle-stripping?'
    _python_name = 'dpm_particle_stripping'
    return_type = 'object'

class dpm_critical_shear_stress(Real, AllowedValuesMixin):
    """
    Critical Shear Stress .
    """
    _version = '241'
    fluent_name = 'dpm-critical-shear-stress'
    _python_name = 'dpm_critical_shear_stress'
    return_type = 'object'

class dpm_film_separation_model(String, AllowedValuesMixin):
    """
    'dpm_film_separation_model' child.
    """
    _version = '241'
    fluent_name = 'dpm-film-separation-model'
    _python_name = 'dpm_film_separation_model'
    return_type = 'object'

class dpm_critical_we_number(Real, AllowedValuesMixin):
    """
    Critical Weber Number.
    """
    _version = '241'
    fluent_name = 'dpm-critical-we-number'
    _python_name = 'dpm_critical_we_number'
    return_type = 'object'

class dpm_film_separation_angle(Real, AllowedValuesMixin):
    """
    Film Separation Angle.
    """
    _version = '241'
    fluent_name = 'dpm-film-separation-angle'
    _python_name = 'dpm_film_separation_angle'
    return_type = 'object'

class dpm_allow_lwf_to_vof(Boolean, AllowedValuesMixin):
    """
    Allow Lagrangian Wall Film-to-VOF transition?.
    """
    _version = '241'
    fluent_name = 'dpm-allow-lwf-to-vof?'
    _python_name = 'dpm_allow_lwf_to_vof'
    return_type = 'object'

class dpm_allow_vof_to_lwf(Boolean, AllowedValuesMixin):
    """
    Allow VOF-to-Lagrangian Wall Film transition?.
    """
    _version = '241'
    fluent_name = 'dpm-allow-vof-to-lwf?'
    _python_name = 'dpm_allow_vof_to_lwf'
    return_type = 'object'

class dpm_initialize_lwf(Boolean, AllowedValuesMixin):
    """
    Initialize Wall Film?.
    """
    _version = '241'
    fluent_name = 'dpm-initialize-lwf?'
    _python_name = 'dpm_initialize_lwf'
    return_type = 'object'

class dpm_initial_height(Real, AllowedValuesMixin):
    """
    Film Height .
    """
    _version = '241'
    fluent_name = 'dpm-initial-height'
    _python_name = 'dpm_initial_height'
    return_type = 'object'

class film_velocity_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of film_velocity.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'film_velocity_child'
    return_type = 'object'

class film_velocity(ListObject[film_velocity_child]):
    """
    'film_velocity' child.
    """
    _version = '241'
    fluent_name = 'film-velocity'
    _python_name = 'film_velocity'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = film_velocity_child
    return_type = 'object'

class dpm_initial_temperature(Real, AllowedValuesMixin):
    """
    Film Temperature.
    """
    _version = '241'
    fluent_name = 'dpm-initial-temperature'
    _python_name = 'dpm_initial_temperature'
    return_type = 'object'

class dpm_initial_injection(String, AllowedValuesMixin):
    """
    Initialize From Injection .
    """
    _version = '241'
    fluent_name = 'dpm-initial-injection'
    _python_name = 'dpm_initial_injection'
    return_type = 'object'

class film_parcel_surface_area_density(Real, AllowedValuesMixin):
    """
    Minimum Film Parcel Surface Density.
    """
    _version = '241'
    fluent_name = 'film-parcel-surface-area-density'
    _python_name = 'film_parcel_surface_area_density'
    return_type = 'object'

class minimum_number_of_parcels_per_face(Integer, AllowedValuesMixin):
    """
    Minimum Number Of Parcels Per Face.
    """
    _version = '241'
    fluent_name = 'minimum-number-of-parcels-per-face'
    _python_name = 'minimum_number_of_parcels_per_face'
    return_type = 'object'

class in_situ_data_reduction(Boolean, AllowedValuesMixin):
    """
    Apply in-situ data reduction to this film wall?.
    """
    _version = '241'
    fluent_name = 'in-situ-data-reduction?'
    _python_name = 'in_situ_data_reduction'
    return_type = 'object'

class data_reduction_interval(Integer, AllowedValuesMixin):
    """
    Execution Interval.
    """
    _version = '241'
    fluent_name = 'data-reduction-interval'
    _python_name = 'data_reduction_interval'
    return_type = 'object'

class target_num_parcels_per_face(Integer, AllowedValuesMixin):
    """
    Target Number of Parcels per Face.
    """
    _version = '241'
    fluent_name = 'target-num-parcels-per-face'
    _python_name = 'target_num_parcels_per_face'
    return_type = 'object'

class data_reduction(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'data-reduction'
    _python_name = 'data_reduction'
    child_names = ['data_reduction_interval', 'target_num_parcels_per_face']
    _child_classes = dict(
        data_reduction_interval=data_reduction_interval,
        target_num_parcels_per_face=target_num_parcels_per_face,
    )
    return_type = 'object'

class set_as_eulerian_film_wall(Boolean, AllowedValuesMixin):
    """
    As Eulerian Film Wall?.
    """
    _version = '241'
    fluent_name = 'set-as-eulerian-film-wall?'
    _python_name = 'set_as_eulerian_film_wall'
    return_type = 'object'

class film_condition_type(String, AllowedValuesMixin):
    """
    Film Condition Type (0: Boundary Condition, 1: Initial Condition).
    """
    _version = '241'
    fluent_name = 'film-condition-type'
    _python_name = 'film_condition_type'
    return_type = 'object'

class film_height(Group):
    """
    'film_height' child.
    """
    _version = '241'
    fluent_name = 'film-height'
    _python_name = 'film_height'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class flux_momentum_child(Group):
    """
    'child_object_type' of flux_momentum.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'flux_momentum_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class flux_momentum(ListObject[flux_momentum_child]):
    """
    'flux_momentum' child.
    """
    _version = '241'
    fluent_name = 'flux-momentum'
    _python_name = 'flux_momentum'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = flux_momentum_child
    return_type = 'object'

class relative_initial_film_velocity(Boolean, AllowedValuesMixin):
    """
    'relative_initial_film_velocity' child.
    """
    _version = '241'
    fluent_name = 'relative-initial-film-velocity'
    _python_name = 'relative_initial_film_velocity'
    return_type = 'object'

class include_film_momentum_pressure(Boolean, AllowedValuesMixin):
    """
    Include Film Momentum Pressure?.
    """
    _version = '241'
    fluent_name = 'include-film-momentum-pressure?'
    _python_name = 'include_film_momentum_pressure'
    return_type = 'object'

class film_temperature(Group):
    """
    'film_temperature' child.
    """
    _version = '241'
    fluent_name = 'film-temperature'
    _python_name = 'film_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class film_passive_scalar(Group):
    """
    'film_passive_scalar' child.
    """
    _version = '241'
    fluent_name = 'film-passive-scalar'
    _python_name = 'film_passive_scalar'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class enable_film_source_terms(Boolean, AllowedValuesMixin):
    """
    Enable Film Source Terms?.
    """
    _version = '241'
    fluent_name = 'enable-film-source-terms?'
    _python_name = 'enable_film_source_terms'
    return_type = 'object'

class film_mass_source(Group):
    """
    Film Mass Source.
    """
    _version = '241'
    fluent_name = 'film-mass-source'
    _python_name = 'film_mass_source'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class momentum_source_child(Group):
    """
    'child_object_type' of momentum_source.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'momentum_source_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class momentum_source(ListObject[momentum_source_child]):
    """
    'momentum_source' child.
    """
    _version = '241'
    fluent_name = 'momentum-source'
    _python_name = 'momentum_source'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = momentum_source_child
    return_type = 'object'

class film_heat_source(Group):
    """
    Film Heat Source.
    """
    _version = '241'
    fluent_name = 'film-heat-source'
    _python_name = 'film_heat_source'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class film_passive_scalar_source(Group):
    """
    Film Passive Scalar Source.
    """
    _version = '241'
    fluent_name = 'film-passive-scalar-source'
    _python_name = 'film_passive_scalar_source'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class enable_film_phase_change(Boolean, AllowedValuesMixin):
    """
    Enable Film Phase Change?.
    """
    _version = '241'
    fluent_name = 'enable-film-phase-change?'
    _python_name = 'enable_film_phase_change'
    return_type = 'object'

class phase_change_model(String, AllowedValuesMixin):
    """
    Phase Change Model: Diffusion Balance [0]; Wall Boundary Layer [1]; User Defined [2] -.
    """
    _version = '241'
    fluent_name = 'phase-change-model'
    _python_name = 'phase_change_model'
    return_type = 'object'

class film_condensation_constant(Real, AllowedValuesMixin):
    """
    Film Condensation Constant.
    """
    _version = '241'
    fluent_name = 'film-condensation-constant'
    _python_name = 'film_condensation_constant'
    return_type = 'object'

class film_vaporization_constant(Real, AllowedValuesMixin):
    """
    Film Vaporization Constant.
    """
    _version = '241'
    fluent_name = 'film-vaporization-constant'
    _python_name = 'film_vaporization_constant'
    return_type = 'object'

class film_condensation_rate(Group):
    """
    Film Condensation Rate.
    """
    _version = '241'
    fluent_name = 'film-condensation-rate'
    _python_name = 'film_condensation_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class film_vaporization_rate(Group):
    """
    Film Vaporization Rate.
    """
    _version = '241'
    fluent_name = 'film-vaporization-rate'
    _python_name = 'film_vaporization_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class enable_flow_momentum_coupling(Boolean, AllowedValuesMixin):
    """
    Enable Flow Momentum Coupling?.
    """
    _version = '241'
    fluent_name = 'enable-flow-momentum-coupling?'
    _python_name = 'enable_flow_momentum_coupling'
    return_type = 'object'

class enable_dpm_wall_splash(Boolean, AllowedValuesMixin):
    """
    Enable DPM Wall Splash?.
    """
    _version = '241'
    fluent_name = 'enable-dpm-wall-splash?'
    _python_name = 'enable_dpm_wall_splash'
    return_type = 'object'

class allow_film_boundary_separation(Boolean, AllowedValuesMixin):
    """
    Allow Film Boundary Separation?.
    """
    _version = '241'
    fluent_name = 'allow-film-boundary-separation?'
    _python_name = 'allow_film_boundary_separation'
    return_type = 'object'

class impingement_model_1(String, AllowedValuesMixin):
    """
    'impingement_model' child.
    """
    _version = '241'
    fluent_name = 'impingement-model'
    _python_name = 'impingement_model'
    return_type = 'object'

class number_of_splashed_particles(Integer, AllowedValuesMixin):
    """
    Number of Splashed Particles.
    """
    _version = '241'
    fluent_name = 'number-of-splashed-particles'
    _python_name = 'number_of_splashed_particles'
    return_type = 'object'

class critical_temperature_factor(Real, AllowedValuesMixin):
    """
    Critical Temperature Factor.
    """
    _version = '241'
    fluent_name = 'critical-temperature-factor'
    _python_name = 'critical_temperature_factor'
    return_type = 'object'

class wall_roughness_length_ra(Real, AllowedValuesMixin):
    """
    Wall Roughness Length Ra.
    """
    _version = '241'
    fluent_name = 'wall-roughness-length-ra'
    _python_name = 'wall_roughness_length_ra'
    return_type = 'object'

class wall_roughness_length_rz(Real, AllowedValuesMixin):
    """
    Wall Roughness Length Rz.
    """
    _version = '241'
    fluent_name = 'wall-roughness-length-rz'
    _python_name = 'wall_roughness_length_rz'
    return_type = 'object'

class upper_deposition_limit_offset(Real, AllowedValuesMixin):
    """
    Upper Deposition Limit Offset [K] .
    """
    _version = '241'
    fluent_name = 'upper-deposition-limit-offset'
    _python_name = 'upper_deposition_limit_offset'
    return_type = 'object'

class deposition_delta_t(Real, AllowedValuesMixin):
    """
    Deposition Delta T [K] .
    """
    _version = '241'
    fluent_name = 'deposition-delta-t'
    _python_name = 'deposition_delta_t'
    return_type = 'object'

class laplace_number_constant(Real, AllowedValuesMixin):
    """
    Laplace Number Constant .
    """
    _version = '241'
    fluent_name = 'laplace-number-constant'
    _python_name = 'laplace_number_constant'
    return_type = 'object'

class partial_evaporation_ratio(Real, AllowedValuesMixin):
    """
    Partial Evaporation Ratio .
    """
    _version = '241'
    fluent_name = 'partial-evaporation-ratio'
    _python_name = 'partial_evaporation_ratio'
    return_type = 'object'

class enable_film_contact_angle_force(Boolean, AllowedValuesMixin):
    """
    Enable Film Contact Angle Force?.
    """
    _version = '241'
    fluent_name = 'enable-film-contact-angle-force?'
    _python_name = 'enable_film_contact_angle_force'
    return_type = 'object'

class film_contact_angle_mean(Group):
    """
    Film Contact Angle Mean.
    """
    _version = '241'
    fluent_name = 'film-contact-angle-mean'
    _python_name = 'film_contact_angle_mean'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class film_contact_angle_rstd(Real, AllowedValuesMixin):
    """
    Film Contact Angle Relative Standard Deviation.
    """
    _version = '241'
    fluent_name = 'film-contact-angle-rstd'
    _python_name = 'film_contact_angle_rstd'
    return_type = 'object'

class film_contact_angle_beta(Real, AllowedValuesMixin):
    """
    Film Contact Angle Force Beta.
    """
    _version = '241'
    fluent_name = 'film-contact-angle-beta'
    _python_name = 'film_contact_angle_beta'
    return_type = 'object'

class film_vof_coupling_high(Boolean, AllowedValuesMixin):
    """
    Enable Film-to-VOF Transition?.
    """
    _version = '241'
    fluent_name = 'film-vof-coupling-high?'
    _python_name = 'film_vof_coupling_high'
    return_type = 'object'

class film_vof_trans_high(Real, AllowedValuesMixin):
    """
    Film to VOF Transition Criteria.
    """
    _version = '241'
    fluent_name = 'film-vof-trans-high'
    _python_name = 'film_vof_trans_high'
    return_type = 'object'

class film_vof_trans_high_relax(Real, AllowedValuesMixin):
    """
    Film to VOF Transition Relaxation.
    """
    _version = '241'
    fluent_name = 'film-vof-trans-high-relax'
    _python_name = 'film_vof_trans_high_relax'
    return_type = 'object'

class film_vof_coupling_low(Boolean, AllowedValuesMixin):
    """
    Enable VOF-to-Film Transition?.
    """
    _version = '241'
    fluent_name = 'film-vof-coupling-low?'
    _python_name = 'film_vof_coupling_low'
    return_type = 'object'

class film_vof_trans_low(Real, AllowedValuesMixin):
    """
    VOF to Film Transition Criteria.
    """
    _version = '241'
    fluent_name = 'film-vof-trans-low'
    _python_name = 'film_vof_trans_low'
    return_type = 'object'

class film_vof_trans_low_relax(Real, AllowedValuesMixin):
    """
    VOF to Film Transition Relaxation.
    """
    _version = '241'
    fluent_name = 'film-vof-trans-low-relax'
    _python_name = 'film_vof_trans_low_relax'
    return_type = 'object'

class dpm_do_initialize_lwf_now(Command, AllowedValuesMixin):
    """
    Apply All settings and initialize film on selected wall(s) Now?.
    """
    _version = '241'
    fluent_name = 'dpm-do-initialize-lwf-now'
    _python_name = 'dpm_do_initialize_lwf_now'
    return_type = 'object'

class dpm_2(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'dpm'
    _python_name = 'dpm'
    child_names = ['discrete_phase_bc_type', 'dem_collision_partner', 'reinj_inj', 'dpm_bc_norm_coeff', 'dpm_bc_tang_coeff', 'dpm_bc_frictn_coeff', 'discrete_phase_bc_function', 'dpm_film_splash_nsamp', 'dpm_crit_temp_option', 'dpm_critical_temp_factor', 'dpm_calibratable_temp', 'dpm_impingement_splashing_model', 'dpm_upper_deposition_limit_offset', 'dpm_deposition_delta_t', 'dpm_laplace_number_constant', 'dpm_partial_evaporation_ratio', 'ra_roughness', 'rz_roughness', 'rq_roughness', 'rsm_roughness', 'enable_generic_erosion_model', 'generic_impact_angle_function', 'generic_diameter_function', 'generic_velocity_exponent_function', 'enable_finnie_erosion_model', 'dpm_bc_erosion_finnie_k', 'dpm_bc_erosion_finnie_vel_exp', 'dpm_bc_erosion_finnie_max_erosion_angle', 'dpm_bc_erosion_mclaury', 'dpm_bc_erosion_mclaury_a', 'dpm_bc_erosion_mclaury_vel_exp', 'dpm_bc_erosion_mclaury_transition_angle', 'dpm_bc_erosion_mclaury_b', 'dpm_bc_erosion_mclaury_c', 'dpm_bc_erosion_mclaury_w', 'dpm_bc_erosion_mclaury_x', 'dpm_bc_erosion_mclaury_y', 'dpm_bc_erosion_oka', 'dpm_bc_erosion_oka_e90', 'dpm_bc_erosion_oka_hv', 'dpm_bc_erosion_oka_n1', 'dpm_bc_erosion_oka_n2', 'dpm_bc_erosion_oka_k2', 'dpm_bc_erosion_oka_k3', 'dpm_bc_erosion_oka_dref', 'dpm_bc_erosion_oka_vref', 'dpm_bc_erosion_dnv', 'dpm_bc_erosion_dnv_k', 'dpm_bc_erosion_dnv_n', 'dpm_bc_erosion_dnv_ductile', 'dpm_bc_erosion_shear', 'dpm_bc_erosion_shear_v', 'dpm_bc_erosion_shear_c', 'dpm_bc_erosion_shear_packing_limit', 'dpm_bc_erosion_shielding', 'dpm_wall_heat_exchange', 'dpm_film_condensation', 'dpm_film_bl_model', 'dpm_particle_stripping', 'dpm_critical_shear_stress', 'dpm_film_separation_model', 'dpm_critical_we_number', 'dpm_film_separation_angle', 'dpm_allow_lwf_to_vof', 'dpm_allow_vof_to_lwf', 'dpm_initialize_lwf', 'dpm_initial_height', 'film_velocity', 'dpm_initial_temperature', 'dpm_initial_injection', 'film_parcel_surface_area_density', 'minimum_number_of_parcels_per_face', 'in_situ_data_reduction', 'data_reduction', 'set_as_eulerian_film_wall', 'film_condition_type', 'film_height', 'flux_momentum', 'relative_initial_film_velocity', 'include_film_momentum_pressure', 'film_temperature', 'film_passive_scalar', 'enable_film_source_terms', 'film_mass_source', 'momentum_source', 'film_heat_source', 'film_passive_scalar_source', 'enable_film_phase_change', 'phase_change_model', 'film_condensation_constant', 'film_vaporization_constant', 'film_condensation_rate', 'film_vaporization_rate', 'enable_flow_momentum_coupling', 'enable_dpm_wall_splash', 'allow_film_boundary_separation', 'impingement_model', 'number_of_splashed_particles', 'critical_temperature_factor', 'wall_roughness_length_ra', 'wall_roughness_length_rz', 'upper_deposition_limit_offset', 'deposition_delta_t', 'laplace_number_constant', 'partial_evaporation_ratio', 'enable_film_contact_angle_force', 'film_contact_angle_mean', 'film_contact_angle_rstd', 'film_contact_angle_beta', 'film_vof_coupling_high', 'film_vof_trans_high', 'film_vof_trans_high_relax', 'film_vof_coupling_low', 'film_vof_trans_low', 'film_vof_trans_low_relax']
    command_names = ['dpm_do_initialize_lwf_now']
    _child_classes = dict(
        discrete_phase_bc_type=discrete_phase_bc_type,
        dem_collision_partner=dem_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_norm_coeff=dpm_bc_norm_coeff,
        dpm_bc_tang_coeff=dpm_bc_tang_coeff,
        dpm_bc_frictn_coeff=dpm_bc_frictn_coeff,
        discrete_phase_bc_function=discrete_phase_bc_function,
        dpm_film_splash_nsamp=dpm_film_splash_nsamp,
        dpm_crit_temp_option=dpm_crit_temp_option,
        dpm_critical_temp_factor=dpm_critical_temp_factor,
        dpm_calibratable_temp=dpm_calibratable_temp,
        dpm_impingement_splashing_model=dpm_impingement_splashing_model,
        dpm_upper_deposition_limit_offset=dpm_upper_deposition_limit_offset,
        dpm_deposition_delta_t=dpm_deposition_delta_t,
        dpm_laplace_number_constant=dpm_laplace_number_constant,
        dpm_partial_evaporation_ratio=dpm_partial_evaporation_ratio,
        ra_roughness=ra_roughness,
        rz_roughness=rz_roughness,
        rq_roughness=rq_roughness,
        rsm_roughness=rsm_roughness,
        enable_generic_erosion_model=enable_generic_erosion_model,
        generic_impact_angle_function=generic_impact_angle_function,
        generic_diameter_function=generic_diameter_function,
        generic_velocity_exponent_function=generic_velocity_exponent_function,
        enable_finnie_erosion_model=enable_finnie_erosion_model,
        dpm_bc_erosion_finnie_k=dpm_bc_erosion_finnie_k,
        dpm_bc_erosion_finnie_vel_exp=dpm_bc_erosion_finnie_vel_exp,
        dpm_bc_erosion_finnie_max_erosion_angle=dpm_bc_erosion_finnie_max_erosion_angle,
        dpm_bc_erosion_mclaury=dpm_bc_erosion_mclaury,
        dpm_bc_erosion_mclaury_a=dpm_bc_erosion_mclaury_a,
        dpm_bc_erosion_mclaury_vel_exp=dpm_bc_erosion_mclaury_vel_exp,
        dpm_bc_erosion_mclaury_transition_angle=dpm_bc_erosion_mclaury_transition_angle,
        dpm_bc_erosion_mclaury_b=dpm_bc_erosion_mclaury_b,
        dpm_bc_erosion_mclaury_c=dpm_bc_erosion_mclaury_c,
        dpm_bc_erosion_mclaury_w=dpm_bc_erosion_mclaury_w,
        dpm_bc_erosion_mclaury_x=dpm_bc_erosion_mclaury_x,
        dpm_bc_erosion_mclaury_y=dpm_bc_erosion_mclaury_y,
        dpm_bc_erosion_oka=dpm_bc_erosion_oka,
        dpm_bc_erosion_oka_e90=dpm_bc_erosion_oka_e90,
        dpm_bc_erosion_oka_hv=dpm_bc_erosion_oka_hv,
        dpm_bc_erosion_oka_n1=dpm_bc_erosion_oka_n1,
        dpm_bc_erosion_oka_n2=dpm_bc_erosion_oka_n2,
        dpm_bc_erosion_oka_k2=dpm_bc_erosion_oka_k2,
        dpm_bc_erosion_oka_k3=dpm_bc_erosion_oka_k3,
        dpm_bc_erosion_oka_dref=dpm_bc_erosion_oka_dref,
        dpm_bc_erosion_oka_vref=dpm_bc_erosion_oka_vref,
        dpm_bc_erosion_dnv=dpm_bc_erosion_dnv,
        dpm_bc_erosion_dnv_k=dpm_bc_erosion_dnv_k,
        dpm_bc_erosion_dnv_n=dpm_bc_erosion_dnv_n,
        dpm_bc_erosion_dnv_ductile=dpm_bc_erosion_dnv_ductile,
        dpm_bc_erosion_shear=dpm_bc_erosion_shear,
        dpm_bc_erosion_shear_v=dpm_bc_erosion_shear_v,
        dpm_bc_erosion_shear_c=dpm_bc_erosion_shear_c,
        dpm_bc_erosion_shear_packing_limit=dpm_bc_erosion_shear_packing_limit,
        dpm_bc_erosion_shielding=dpm_bc_erosion_shielding,
        dpm_wall_heat_exchange=dpm_wall_heat_exchange,
        dpm_film_condensation=dpm_film_condensation,
        dpm_film_bl_model=dpm_film_bl_model,
        dpm_particle_stripping=dpm_particle_stripping,
        dpm_critical_shear_stress=dpm_critical_shear_stress,
        dpm_film_separation_model=dpm_film_separation_model,
        dpm_critical_we_number=dpm_critical_we_number,
        dpm_film_separation_angle=dpm_film_separation_angle,
        dpm_allow_lwf_to_vof=dpm_allow_lwf_to_vof,
        dpm_allow_vof_to_lwf=dpm_allow_vof_to_lwf,
        dpm_initialize_lwf=dpm_initialize_lwf,
        dpm_initial_height=dpm_initial_height,
        film_velocity=film_velocity,
        dpm_initial_temperature=dpm_initial_temperature,
        dpm_initial_injection=dpm_initial_injection,
        film_parcel_surface_area_density=film_parcel_surface_area_density,
        minimum_number_of_parcels_per_face=minimum_number_of_parcels_per_face,
        in_situ_data_reduction=in_situ_data_reduction,
        data_reduction=data_reduction,
        set_as_eulerian_film_wall=set_as_eulerian_film_wall,
        film_condition_type=film_condition_type,
        film_height=film_height,
        flux_momentum=flux_momentum,
        relative_initial_film_velocity=relative_initial_film_velocity,
        include_film_momentum_pressure=include_film_momentum_pressure,
        film_temperature=film_temperature,
        film_passive_scalar=film_passive_scalar,
        enable_film_source_terms=enable_film_source_terms,
        film_mass_source=film_mass_source,
        momentum_source=momentum_source,
        film_heat_source=film_heat_source,
        film_passive_scalar_source=film_passive_scalar_source,
        enable_film_phase_change=enable_film_phase_change,
        phase_change_model=phase_change_model,
        film_condensation_constant=film_condensation_constant,
        film_vaporization_constant=film_vaporization_constant,
        film_condensation_rate=film_condensation_rate,
        film_vaporization_rate=film_vaporization_rate,
        enable_flow_momentum_coupling=enable_flow_momentum_coupling,
        enable_dpm_wall_splash=enable_dpm_wall_splash,
        allow_film_boundary_separation=allow_film_boundary_separation,
        impingement_model=impingement_model_1,
        number_of_splashed_particles=number_of_splashed_particles,
        critical_temperature_factor=critical_temperature_factor,
        wall_roughness_length_ra=wall_roughness_length_ra,
        wall_roughness_length_rz=wall_roughness_length_rz,
        upper_deposition_limit_offset=upper_deposition_limit_offset,
        deposition_delta_t=deposition_delta_t,
        laplace_number_constant=laplace_number_constant,
        partial_evaporation_ratio=partial_evaporation_ratio,
        enable_film_contact_angle_force=enable_film_contact_angle_force,
        film_contact_angle_mean=film_contact_angle_mean,
        film_contact_angle_rstd=film_contact_angle_rstd,
        film_contact_angle_beta=film_contact_angle_beta,
        film_vof_coupling_high=film_vof_coupling_high,
        film_vof_trans_high=film_vof_trans_high,
        film_vof_trans_high_relax=film_vof_trans_high_relax,
        film_vof_coupling_low=film_vof_coupling_low,
        film_vof_trans_low=film_vof_trans_low,
        film_vof_trans_low_relax=film_vof_trans_low_relax,
        dpm_do_initialize_lwf_now=dpm_do_initialize_lwf_now,
    )
    return_type = 'object'

class gtemp_bc(String, AllowedValuesMixin):
    """
    Granular Conditions.
    """
    _version = '241'
    fluent_name = 'gtemp-bc'
    _python_name = 'gtemp_bc'
    return_type = 'object'

class g_temperature(Group):
    """
    Granular Temperature.
    """
    _version = '241'
    fluent_name = 'g-temperature'
    _python_name = 'g_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class g_qflux(Group):
    """
    Granular Flux.
    """
    _version = '241'
    fluent_name = 'g-qflux'
    _python_name = 'g_qflux'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wall_restitution_coeff(Real, AllowedValuesMixin):
    """
    Restitution Coefficient.
    """
    _version = '241'
    fluent_name = 'wall-restitution-coeff'
    _python_name = 'wall_restitution_coeff'
    return_type = 'object'

class multiphase_7(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['gtemp_bc', 'g_temperature', 'g_qflux', 'wall_restitution_coeff', 'contact_angles']
    _child_classes = dict(
        gtemp_bc=gtemp_bc,
        g_temperature=g_temperature,
        g_qflux=g_qflux,
        wall_restitution_coeff=wall_restitution_coeff,
        contact_angles=contact_angles,
    )
    return_type = 'object'

class elec_potential_jump(Group):
    """
    Potential Jump.
    """
    _version = '241'
    fluent_name = 'elec-potential-jump'
    _python_name = 'elec_potential_jump'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class elec_potential_resistance(Group):
    """
    Contact Resistance.
    """
    _version = '241'
    fluent_name = 'elec-potential-resistance'
    _python_name = 'elec_potential_resistance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class echem_reaction(Boolean, AllowedValuesMixin):
    """
    'echem_reaction' child.
    """
    _version = '241'
    fluent_name = 'echem-reaction?'
    _python_name = 'echem_reaction'
    return_type = 'object'

class elec_potential_mechs(String, AllowedValuesMixin):
    """
    Reaction Mechanism.
    """
    _version = '241'
    fluent_name = 'elec-potential-mechs'
    _python_name = 'elec_potential_mechs'
    return_type = 'object'

class faradaic_heat(Boolean, AllowedValuesMixin):
    """
    'faradaic_heat' child.
    """
    _version = '241'
    fluent_name = 'faradaic-heat?'
    _python_name = 'faradaic_heat'
    return_type = 'object'

class li_ion_type(String, AllowedValuesMixin):
    """
    Lithium Concentration Condition.
    """
    _version = '241'
    fluent_name = 'li-ion-type'
    _python_name = 'li_ion_type'
    return_type = 'object'

class li_ion_value(Group):
    """
    Lithium Boundary Value.
    """
    _version = '241'
    fluent_name = 'li-ion-value'
    _python_name = 'li_ion_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class potential_3(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'potential'
    _python_name = 'potential'
    child_names = ['potential_boundary_condition', 'potential_boundary_value', 'elec_potential_jump', 'elec_potential_resistance', 'electrolyte_potential_boundary_condition', 'current_density_boundary_value', 'echem_reaction', 'elec_potential_mechs', 'faradaic_heat', 'li_ion_type', 'li_ion_value']
    _child_classes = dict(
        potential_boundary_condition=potential_boundary_condition,
        potential_boundary_value=potential_boundary_value,
        elec_potential_jump=elec_potential_jump,
        elec_potential_resistance=elec_potential_resistance,
        electrolyte_potential_boundary_condition=electrolyte_potential_boundary_condition,
        current_density_boundary_value=current_density_boundary_value,
        echem_reaction=echem_reaction,
        elec_potential_mechs=elec_potential_mechs,
        faradaic_heat=faradaic_heat,
        li_ion_type=li_ion_type,
        li_ion_value=li_ion_value,
    )
    return_type = 'object'

class fensapice_ice_icing_mode(Integer, AllowedValuesMixin):
    """
    'fensapice_ice_icing_mode' child.
    """
    _version = '241'
    fluent_name = 'fensapice-ice-icing-mode'
    _python_name = 'fensapice_ice_icing_mode'
    return_type = 'object'

class fensapice_ice_hflux(Boolean, AllowedValuesMixin):
    """
    'fensapice_ice_hflux' child.
    """
    _version = '241'
    fluent_name = 'fensapice-ice-hflux?'
    _python_name = 'fensapice_ice_hflux'
    return_type = 'object'

class fensapice_ice_hflux_1(Real, AllowedValuesMixin):
    """
    'fensapice_ice_hflux' child.
    """
    _version = '241'
    fluent_name = 'fensapice-ice-hflux'
    _python_name = 'fensapice_ice_hflux'
    return_type = 'object'

class fensapice_drop_vwet(Boolean, AllowedValuesMixin):
    """
    'fensapice_drop_vwet' child.
    """
    _version = '241'
    fluent_name = 'fensapice-drop-vwet?'
    _python_name = 'fensapice_drop_vwet'
    return_type = 'object'

class fensapice_dpm_wall_condition(Integer, AllowedValuesMixin):
    """
    'fensapice_dpm_wall_condition' child.
    """
    _version = '241'
    fluent_name = 'fensapice-dpm-wall-condition'
    _python_name = 'fensapice_dpm_wall_condition'
    return_type = 'object'

class fensapice_dpm_bc_norm_coeff(RealList, AllowedValuesMixin):
    """
    'fensapice_dpm_bc_norm_coeff' child.
    """
    _version = '241'
    fluent_name = 'fensapice-dpm-bc-norm-coeff'
    _python_name = 'fensapice_dpm_bc_norm_coeff'
    return_type = 'object'

class fensapice_dpm_bc_tang_coeff(RealList, AllowedValuesMixin):
    """
    'fensapice_dpm_bc_tang_coeff' child.
    """
    _version = '241'
    fluent_name = 'fensapice-dpm-bc-tang-coeff'
    _python_name = 'fensapice_dpm_bc_tang_coeff'
    return_type = 'object'

class icing_2(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'icing'
    _python_name = 'icing'
    child_names = ['fensapice_flow_bc_subtype', 'fensapice_ice_icing_mode', 'fensapice_ice_hflux', 'fensapice_ice_hflux_1', 'fensapice_drop_vwet', 'fensapice_dpm_wall_condition', 'fensapice_dpm_bc_norm_coeff', 'fensapice_dpm_bc_tang_coeff']
    _child_classes = dict(
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_ice_icing_mode=fensapice_ice_icing_mode,
        fensapice_ice_hflux=fensapice_ice_hflux,
        fensapice_ice_hflux_1=fensapice_ice_hflux_1,
        fensapice_drop_vwet=fensapice_drop_vwet,
        fensapice_dpm_wall_condition=fensapice_dpm_wall_condition,
        fensapice_dpm_bc_norm_coeff=fensapice_dpm_bc_norm_coeff,
        fensapice_dpm_bc_tang_coeff=fensapice_dpm_bc_tang_coeff,
    )
    return_type = 'object'

class ablation_select_model(String, AllowedValuesMixin):
    """
    Ablation Model.
    """
    _version = '241'
    fluent_name = 'ablation-select-model'
    _python_name = 'ablation_select_model'
    return_type = 'object'

class ablation_vielle_a(Real, AllowedValuesMixin):
    """
    Parameter A.
    """
    _version = '241'
    fluent_name = 'ablation-vielle-a'
    _python_name = 'ablation_vielle_a'
    return_type = 'object'

class ablation_vielle_n(Real, AllowedValuesMixin):
    """
    Parameter n.
    """
    _version = '241'
    fluent_name = 'ablation-vielle-n'
    _python_name = 'ablation_vielle_n'
    return_type = 'object'

class ablation_flux(Boolean, AllowedValuesMixin):
    """
    Species Flux?.
    """
    _version = '241'
    fluent_name = 'ablation-flux?'
    _python_name = 'ablation_flux'
    return_type = 'object'

class ablation_surfacerxn_density(Real, AllowedValuesMixin):
    """
    Ablative Material Density.
    """
    _version = '241'
    fluent_name = 'ablation-surfacerxn-density'
    _python_name = 'ablation_surfacerxn_density'
    return_type = 'object'

class ablation_species_mf_child(Group):
    """
    'child_object_type' of ablation_species_mf.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'ablation_species_mf_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ablation_species_mf(NamedObject[ablation_species_mf_child], _NonCreatableNamedObjectMixin[ablation_species_mf_child]):
    """
    'ablation_species_mf' child.
    """
    _version = '241'
    fluent_name = 'ablation-species-mf'
    _python_name = 'ablation_species_mf'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = ablation_species_mf_child
    return_type = 'object'

class ablation_1(Group):
    """
    Help not available.
    """
    _version = '241'
    fluent_name = 'ablation'
    _python_name = 'ablation'
    child_names = ['ablation_select_model', 'ablation_vielle_a', 'ablation_vielle_n', 'ablation_flux', 'ablation_surfacerxn_density', 'ablation_species_mf']
    _child_classes = dict(
        ablation_select_model=ablation_select_model,
        ablation_vielle_a=ablation_vielle_a,
        ablation_vielle_n=ablation_vielle_n,
        ablation_flux=ablation_flux,
        ablation_surfacerxn_density=ablation_surfacerxn_density,
        ablation_species_mf=ablation_species_mf,
    )
    return_type = 'object'

class phase_25_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['fensapice_drop_reinj', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'ablation', 'geometry']
    _child_classes = dict(
        fensapice_drop_reinj=fensapice_drop_reinj,
        momentum=momentum_9,
        turbulence=turbulence_5,
        thermal=thermal_5,
        radiation=radiation_5,
        species=species_9,
        dpm=dpm_2,
        multiphase=multiphase_7,
        potential=potential_3,
        structure=structure_1,
        uds=uds,
        icing=icing_2,
        ablation=ablation_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class phase_25(NamedObject[phase_25_child], _NonCreatableNamedObjectMixin[phase_25_child]):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_25_child
    return_type = 'object'

class wall_child(Group):
    """
    'child_object_type' of wall.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'wall_child'
    child_names = ['name', 'phase', 'fensapice_drop_reinj', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'dpm', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'ablation', 'geometry']
    _child_classes = dict(
        name=name,
        phase=phase_25,
        fensapice_drop_reinj=fensapice_drop_reinj,
        momentum=momentum_9,
        turbulence=turbulence_5,
        thermal=thermal_5,
        radiation=radiation_5,
        species=species_9,
        dpm=dpm_2,
        multiphase=multiphase_7,
        potential=potential_3,
        structure=structure_1,
        uds=uds,
        icing=icing_2,
        ablation=ablation_1,
        geometry=geometry_4,
    )
    return_type = 'object'

class wall(NamedObject[wall_child], _NonCreatableNamedObjectMixin[wall_child]):
    """
    'wall' child.
    """
    _version = '241'
    fluent_name = 'wall'
    _python_name = 'wall'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = wall_child
    return_type = 'object'

class sigma(Real):
    """
    Nrbc sigma factor (default value 0.15).
    """
    _version = '241'
    fluent_name = 'sigma'
    _python_name = 'sigma'
    return_type = 'object'

class sigma2(Real):
    """
    Nrbc sigma2 factor (default value 5.0).
    """
    _version = '241'
    fluent_name = 'sigma2'
    _python_name = 'sigma2'
    return_type = 'object'

class relax(Real):
    """
    NRBC relaxation factor (default value 0.5).
    """
    _version = '241'
    fluent_name = 'relax'
    _python_name = 'relax'
    return_type = 'object'

class tangential_source(Boolean):
    """
    Include or not NRBC tangential source (default value #t).
    """
    _version = '241'
    fluent_name = 'tangential-source?'
    _python_name = 'tangential_source'
    return_type = 'object'

class verbosity_4(Integer):
    """
    Print boundary equations convergence info.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class general_nrbc(Group):
    """
    'general_nrbc' child.
    """
    _version = '241'
    fluent_name = 'general-nrbc'
    _python_name = 'general_nrbc'
    child_names = ['sigma', 'sigma2', 'relax', 'tangential_source', 'verbosity']
    _child_classes = dict(
        sigma=sigma,
        sigma2=sigma2,
        relax=relax,
        tangential_source=tangential_source,
        verbosity=verbosity_4,
    )
    return_type = 'object'

class enable_10(Boolean):
    """
    Enable/disable turbo-specific non-reflecting b.c.'s.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class discretization(Boolean):
    """
    Enable use of higher-order reconstruction at boundaries if available.
    """
    _version = '241'
    fluent_name = 'discretization'
    _python_name = 'discretization'
    return_type = 'object'

class under_relaxation_1(Real):
    """
    Turbo-specific non-reflecting b.c. under-relaxation factor.
    """
    _version = '241'
    fluent_name = 'under-relaxation'
    _python_name = 'under_relaxation'
    return_type = 'object'

class verbosity_5(Integer):
    """
    Turbo-specific non-reflecting b.c. verbosity level.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class initialize(Command):
    """
    Initialize turbo-specific non-reflecting b.c.'s.
    """
    _version = '241'
    fluent_name = 'initialize'
    _python_name = 'initialize'
    return_type = 'object'

class show_status(Command):
    """
    Show current status of turbo-specific non-reflecting b.c.'s.
    """
    _version = '241'
    fluent_name = 'show-status'
    _python_name = 'show_status'
    return_type = 'object'

class turbo_sepcific_nrbc(Group):
    """
    'turbo_sepcific_nrbc' child.
    """
    _version = '241'
    fluent_name = 'turbo-sepcific-nrbc'
    _python_name = 'turbo_sepcific_nrbc'
    child_names = ['enable', 'discretization', 'under_relaxation', 'verbosity']
    command_names = ['initialize', 'show_status']
    _child_classes = dict(
        enable=enable_10,
        discretization=discretization,
        under_relaxation=under_relaxation_1,
        verbosity=verbosity_5,
        initialize=initialize,
        show_status=show_status,
    )
    return_type = 'object'

class non_reflecting_bc(Group):
    """
    'non_reflecting_bc' child.
    """
    _version = '241'
    fluent_name = 'non-reflecting-bc'
    _python_name = 'non_reflecting_bc'
    child_names = ['general_nrbc', 'turbo_sepcific_nrbc']
    _child_classes = dict(
        general_nrbc=general_nrbc,
        turbo_sepcific_nrbc=turbo_sepcific_nrbc,
    )
    return_type = 'object'

class setup_method(Integer):
    """
    'setup_method' child.
    """
    _version = '241'
    fluent_name = 'setup-method'
    _python_name = 'setup_method'
    return_type = 'object'

class ninjections(Integer):
    """
    The number of injection boundaries.
    """
    _version = '241'
    fluent_name = 'ninjections'
    _python_name = 'ninjections'
    return_type = 'object'

class urf(Real):
    """
    The explicit relaxation factor.
    """
    _version = '241'
    fluent_name = 'urf'
    _python_name = 'urf'
    return_type = 'object'

class injection_thread(String, AllowedValuesMixin):
    """
    The wall zone name.
    """
    _version = '241'
    fluent_name = 'injection-thread'
    _python_name = 'injection_thread'
    return_type = 'object'

class coupled(Boolean):
    """
    Injection wall is coupled?.
    """
    _version = '241'
    fluent_name = 'coupled?'
    _python_name = 'coupled'
    return_type = 'object'

class extraction_thread(String, AllowedValuesMixin):
    """
    The wall zone name.
    """
    _version = '241'
    fluent_name = 'extraction-thread'
    _python_name = 'extraction_thread'
    return_type = 'object'

class uniform(Boolean):
    """
    Injection wall is uniform?.
    """
    _version = '241'
    fluent_name = 'uniform?'
    _python_name = 'uniform'
    return_type = 'object'

class injection_hole_count(Integer):
    """
    The number of injection holes.
    """
    _version = '241'
    fluent_name = 'injection-hole-count'
    _python_name = 'injection_hole_count'
    return_type = 'object'

class discrete_ext(Boolean):
    """
    Discrete on extraction side?.
    """
    _version = '241'
    fluent_name = 'discrete-ext?'
    _python_name = 'discrete_ext'
    return_type = 'object'

class static(Boolean):
    """
    Static injection?.
    """
    _version = '241'
    fluent_name = 'static?'
    _python_name = 'static'
    return_type = 'object'

class formulation(Integer):
    """
    Mass flow rate formulation (0 [incompressible]; 1 [compressible]):.
    """
    _version = '241'
    fluent_name = 'formulation'
    _python_name = 'formulation'
    return_type = 'object'

class point1(RealList):
    """
    The coordinates of point 1.
    """
    _version = '241'
    fluent_name = 'point1'
    _python_name = 'point1'
    return_type = 'object'

class point2_or_vector(RealList):
    """
    The coordinates of point 2 or vector of aixs.
    """
    _version = '241'
    fluent_name = 'point2-or-vector'
    _python_name = 'point2_or_vector'
    return_type = 'object'

class diameter_1(Real):
    """
    The diameter of cyclinder.
    """
    _version = '241'
    fluent_name = 'diameter'
    _python_name = 'diameter'
    return_type = 'object'

class injection_hole_child(Group):
    """
    'child_object_type' of injection_hole.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'injection_hole_child'
    child_names = ['point1', 'point2_or_vector', 'diameter']
    _child_classes = dict(
        point1=point1,
        point2_or_vector=point2_or_vector,
        diameter=diameter_1,
    )
    return_type = 'object'

class injection_hole(ListObject[injection_hole_child]):
    """
    'injection_hole' child.
    """
    _version = '241'
    fluent_name = 'injection-hole'
    _python_name = 'injection_hole'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = injection_hole_child
    return_type = 'object'

class holes_setup(Group):
    """
    'holes_setup' child.
    """
    _version = '241'
    fluent_name = 'holes-setup'
    _python_name = 'holes_setup'
    child_names = ['method', 'injection_hole']
    _child_classes = dict(
        method=method_3,
        injection_hole=injection_hole,
    )
    return_type = 'object'

class method_6(Integer):
    """
    The dynamic injection method.
    """
    _version = '241'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class acd(Real):
    """
    ACd: .
    """
    _version = '241'
    fluent_name = 'acd'
    _python_name = 'acd'
    return_type = 'object'

class cd(Real):
    """
    Cd: .
    """
    _version = '241'
    fluent_name = 'cd'
    _python_name = 'cd'
    return_type = 'object'

class direction_2(RealList):
    """
    The vector of direction.
    """
    _version = '241'
    fluent_name = 'direction'
    _python_name = 'direction'
    return_type = 'object'

class angle_1(RealList):
    """
    The angles.
    """
    _version = '241'
    fluent_name = 'angle'
    _python_name = 'angle'
    return_type = 'object'

class dynamic_injection_child(Group):
    """
    'child_object_type' of dynamic_injection.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'dynamic_injection_child'
    child_names = ['acd', 'cd', 'direction', 'angle']
    _child_classes = dict(
        acd=acd,
        cd=cd,
        direction=direction_2,
        angle=angle_1,
    )
    return_type = 'object'

class dynamic_injection(ListObject[dynamic_injection_child]):
    """
    'dynamic_injection' child.
    """
    _version = '241'
    fluent_name = 'dynamic-injection'
    _python_name = 'dynamic_injection'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = dynamic_injection_child
    return_type = 'object'

class dynamic_setup(Group):
    """
    'dynamic_setup' child.
    """
    _version = '241'
    fluent_name = 'dynamic-setup'
    _python_name = 'dynamic_setup'
    child_names = ['method', 'dynamic_injection']
    _child_classes = dict(
        method=method_6,
        dynamic_injection=dynamic_injection,
    )
    return_type = 'object'

class method_7(Integer):
    """
    The static injection method.
    """
    _version = '241'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class mass_flow_rate_2(Real):
    """
    Mass flow rate [kg/s]: .
    """
    _version = '241'
    fluent_name = 'mass-flow-rate'
    _python_name = 'mass_flow_rate'
    return_type = 'object'

class flow_direction_1(RealList):
    """
    The vector of direction.
    """
    _version = '241'
    fluent_name = 'flow-direction'
    _python_name = 'flow_direction'
    return_type = 'object'

class temperature_3(Real):
    """
    Temperature [K]: .
    """
    _version = '241'
    fluent_name = 'temperature'
    _python_name = 'temperature'
    return_type = 'object'

class mixture_fraction_2(Real):
    """
    Mixture fraction: .
    """
    _version = '241'
    fluent_name = 'mixture-fraction'
    _python_name = 'mixture_fraction'
    return_type = 'object'

class progress_variable_2(Real):
    """
    Progress variable: .
    """
    _version = '241'
    fluent_name = 'progress-variable'
    _python_name = 'progress_variable'
    return_type = 'object'

class species_10(RealList):
    """
    The species mass fraction.
    """
    _version = '241'
    fluent_name = 'species'
    _python_name = 'species'
    return_type = 'object'

class static_injection_child(Group):
    """
    'child_object_type' of static_injection.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'static_injection_child'
    child_names = ['mass_flow_rate', 'flow_direction', 'temperature', 'mixture_fraction', 'progress_variable', 'species']
    _child_classes = dict(
        mass_flow_rate=mass_flow_rate_2,
        flow_direction=flow_direction_1,
        temperature=temperature_3,
        mixture_fraction=mixture_fraction_2,
        progress_variable=progress_variable_2,
        species=species_10,
    )
    return_type = 'object'

class static_injection(ListObject[static_injection_child]):
    """
    'static_injection' child.
    """
    _version = '241'
    fluent_name = 'static-injection'
    _python_name = 'static_injection'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = static_injection_child
    return_type = 'object'

class static_setup(Group):
    """
    'static_setup' child.
    """
    _version = '241'
    fluent_name = 'static-setup'
    _python_name = 'static_setup'
    child_names = ['method', 'static_injection']
    _child_classes = dict(
        method=method_7,
        static_injection=static_injection,
    )
    return_type = 'object'

class injection_child(Group):
    """
    'child_object_type' of injection.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'injection_child'
    child_names = ['injection_thread', 'coupled', 'extraction_thread', 'uniform', 'injection_hole_count', 'discrete_ext', 'static', 'formulation', 'holes_setup', 'dynamic_setup', 'static_setup']
    _child_classes = dict(
        injection_thread=injection_thread,
        coupled=coupled,
        extraction_thread=extraction_thread,
        uniform=uniform,
        injection_hole_count=injection_hole_count,
        discrete_ext=discrete_ext,
        static=static,
        formulation=formulation,
        holes_setup=holes_setup,
        dynamic_setup=dynamic_setup,
        static_setup=static_setup,
    )
    return_type = 'object'

class injection(ListObject[injection_child]):
    """
    'injection' child.
    """
    _version = '241'
    fluent_name = 'injection'
    _python_name = 'injection'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = injection_child
    return_type = 'object'

class model_setup(Group):
    """
    'model_setup' child.
    """
    _version = '241'
    fluent_name = 'model-setup'
    _python_name = 'model_setup'
    child_names = ['ninjections', 'urf', 'injection']
    _child_classes = dict(
        ninjections=ninjections,
        urf=urf,
        injection=injection,
    )
    return_type = 'object'

class read_input_file(Command):
    """
    'read_input_file' command.
    """
    _version = '241'
    fluent_name = 'read-input-file'
    _python_name = 'read_input_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name,
    )
    return_type = 'object'

class perforated_wall(Group):
    """
    Perforated wall model.
    """
    _version = '241'
    fluent_name = 'perforated-wall'
    _python_name = 'perforated_wall'
    child_names = ['setup_method', 'model_setup']
    command_names = ['read_input_file']
    _child_classes = dict(
        setup_method=setup_method,
        model_setup=model_setup,
        read_input_file=read_input_file,
    )
    return_type = 'object'

class degassing_verbosity(Integer, AllowedValuesMixin):
    """
    The verbosity level of the total mass flow rate at the degassing boundary. The acceptable values are:.
    """
    _version = '241'
    fluent_name = 'degassing-verbosity'
    _python_name = 'degassing_verbosity'
    return_type = 'object'

class mass_flow(Boolean):
    """
    Method for setting the mass flow rate.
    """
    _version = '241'
    fluent_name = 'mass-flow'
    _python_name = 'mass_flow'
    return_type = 'object'

class blending_factor_1(Integer):
    """
    The pressure blend factor(f), blends between specified pressure and average pressure conditions.
    If f = 1 recovers specified pressure, f = 0 recovers fully averaged pressure.
    """
    _version = '241'
    fluent_name = 'blending-factor'
    _python_name = 'blending_factor'
    return_type = 'object'

class bin_count(Integer):
    """
    The number of bins in to which the boundary is subdivided in radial or axial strips.
    """
    _version = '241'
    fluent_name = 'bin-count'
    _python_name = 'bin_count'
    return_type = 'object'

class pressure_outlet_1(Group):
    """
    Pressure specification method on pressure-outlet boundaries.
    """
    _version = '241'
    fluent_name = 'pressure-outlet'
    _python_name = 'pressure_outlet'
    child_names = ['blending_factor', 'bin_count']
    _child_classes = dict(
        blending_factor=blending_factor_1,
        bin_count=bin_count,
    )
    return_type = 'object'

class riemann_invariants_tangency_correction(Boolean):
    """
    Apply a local correction where the flow is tangential to the boundary.
    """
    _version = '241'
    fluent_name = 'riemann-invariants-tangency-correction'
    _python_name = 'riemann_invariants_tangency_correction'
    return_type = 'object'

class type_3(String, AllowedValuesMixin):
    """
    Pressure-far-field boundary-condition type.
    """
    _version = '241'
    fluent_name = 'type?'
    _python_name = 'type'
    return_type = 'object'

class pressure_far_field_1(Group):
    """
    Presure-far-field boundary-condition options.
    """
    _version = '241'
    fluent_name = 'pressure-far-field'
    _python_name = 'pressure_far_field'
    child_names = ['riemann_invariants_tangency_correction', 'type']
    _child_classes = dict(
        riemann_invariants_tangency_correction=riemann_invariants_tangency_correction,
        type=type_3,
    )
    return_type = 'object'

class physical_velocity_porous_formulation(Boolean):
    """
    Enables the physical velocity (rather than superficial velocity) porous formulation.
    """
    _version = '241'
    fluent_name = 'physical-velocity-porous-formulation?'
    _python_name = 'physical_velocity_porous_formulation'
    return_type = 'object'

class under_relaxation_factor(Real):
    """
    Under-relaxation-factor.
    """
    _version = '241'
    fluent_name = 'under-relaxation-factor'
    _python_name = 'under_relaxation_factor'
    return_type = 'object'

class verbosity_6(Boolean):
    """
    Enable targeted mass flow rate verbosity?.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class target_mass_flow_rate_settings(Group):
    """
    The targeted mass flow rate setting object.
    """
    _version = '241'
    fluent_name = 'target-mass-flow-rate-settings'
    _python_name = 'target_mass_flow_rate_settings'
    child_names = ['under_relaxation_factor', 'verbosity']
    _child_classes = dict(
        under_relaxation_factor=under_relaxation_factor,
        verbosity=verbosity_6,
    )
    return_type = 'object'

class delay_model_change_update(Boolean):
    """
    Model change call update.
    """
    _version = '241'
    fluent_name = 'delay-model-change-update?'
    _python_name = 'delay_model_change_update'
    return_type = 'object'

class batch_thread_update(Boolean):
    """
    Batch thread update option.
    """
    _version = '241'
    fluent_name = 'batch-thread-update?'
    _python_name = 'batch_thread_update'
    return_type = 'object'

class advanced_1(Group):
    """
    Control settings while doing BC setup.
    """
    _version = '241'
    fluent_name = 'advanced'
    _python_name = 'advanced'
    child_names = ['delay_model_change_update', 'batch_thread_update']
    _child_classes = dict(
        delay_model_change_update=delay_model_change_update,
        batch_thread_update=batch_thread_update,
    )
    return_type = 'object'

class settings_1(Group):
    """
    'settings' child.
    """
    _version = '241'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['degassing_verbosity', 'mass_flow', 'pressure_outlet', 'pressure_far_field', 'physical_velocity_porous_formulation', 'target_mass_flow_rate_settings', 'advanced']
    _child_classes = dict(
        degassing_verbosity=degassing_verbosity,
        mass_flow=mass_flow,
        pressure_outlet=pressure_outlet_1,
        pressure_far_field=pressure_far_field_1,
        physical_velocity_porous_formulation=physical_velocity_porous_formulation,
        target_mass_flow_rate_settings=target_mass_flow_rate_settings,
        advanced=advanced_1,
    )
    return_type = 'object'

class slit_face_zone(Command):
    """
    Slit a two-sided wall into two connected wall zones.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
    """
    _version = '241'
    fluent_name = 'slit-face-zone'
    _python_name = 'slit_face_zone'
    argument_names = ['zone_name']
    _child_classes = dict(
        zone_name=zone_name_2,
    )
    return_type = 'object'

class non_overlapping_zone_name(Command):
    """
    Get non-overlapping zone name from the associated interface zone.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
    """
    _version = '241'
    fluent_name = 'non-overlapping-zone-name'
    _python_name = 'non_overlapping_zone_name'
    argument_names = ['zone_name']
    _child_classes = dict(
        zone_name=zone_name_2,
    )
    return_type = 'object'

class slit_interior_between_diff_solids(Command):
    """
    Slit interior created between different solids into coupled walls.
    """
    _version = '241'
    fluent_name = 'slit-interior-between-diff-solids'
    _python_name = 'slit_interior_between_diff_solids'
    return_type = 'object'

class create_all_shell_threads(Command):
    """
    Mark all finite thickness wall for shell creation. Shell zones will be created at the start of iterations.
    """
    _version = '241'
    fluent_name = 'create-all-shell-threads'
    _python_name = 'create_all_shell_threads'
    return_type = 'object'

class recreate_all_shells(Command):
    """
    Create shell on all the walls where which were deleted using the command delete-all-shells.
    """
    _version = '241'
    fluent_name = 'recreate-all-shells'
    _python_name = 'recreate_all_shells'
    return_type = 'object'

class delete_all_shells(Command):
    """
    'delete_all_shells' command.
    """
    _version = '241'
    fluent_name = 'delete-all-shells'
    _python_name = 'delete_all_shells'
    return_type = 'object'

class orient_face_zone(Command):
    """
    Orient the face zone.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
    """
    _version = '241'
    fluent_name = 'orient-face-zone'
    _python_name = 'orient_face_zone'
    argument_names = ['zone_name']
    _child_classes = dict(
        zone_name=zone_name_2,
    )
    return_type = 'object'

class length(Real):
    """
    Characteristic physics length.
    """
    _version = '241'
    fluent_name = 'length'
    _python_name = 'length'
    return_type = 'object'

class boundary(String, AllowedValuesMixin):
    """
    'boundary' child.
    """
    _version = '241'
    fluent_name = 'boundary'
    _python_name = 'boundary'
    return_type = 'object'

class knudsen_number_calculator(Command):
    """
    Utility to compute Kudsen number based on characteristic length and boundary information.
    
    Parameters
    ----------
        length : real
            Characteristic physics length.
        boundary : str
            'boundary' child.
    """
    _version = '241'
    fluent_name = 'knudsen-number-calculator'
    _python_name = 'knudsen_number_calculator'
    argument_names = ['length', 'boundary']
    _child_classes = dict(
        length=length,
        boundary=boundary,
    )
    return_type = 'object'

class zonename(String, AllowedValuesMixin):
    """
    The zone name.
    """
    _version = '241'
    fluent_name = 'zonename'
    _python_name = 'zonename'
    return_type = 'object'

class newname(String):
    """
    'newname' child.
    """
    _version = '241'
    fluent_name = 'newname'
    _python_name = 'newname'
    return_type = 'object'

class set_zone_name(Command):
    """
    Give a zone a new name.
    
    Parameters
    ----------
        zonename : str
            The zone name.
        newname : str
            'newname' child.
    """
    _version = '241'
    fluent_name = 'set-zone-name'
    _python_name = 'set_zone_name'
    argument_names = ['zonename', 'newname']
    _child_classes = dict(
        zonename=zonename,
        newname=newname,
    )
    return_type = 'object'

class zone_name_6(StringList, AllowedValuesMixin):
    """
    Zone name list.
    """
    _version = '241'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'
    return_type = 'object'

class append(Boolean):
    """
    'append' child.
    """
    _version = '241'
    fluent_name = 'append?'
    _python_name = 'append'
    return_type = 'object'

class text(String):
    """
    'text' child.
    """
    _version = '241'
    fluent_name = 'text'
    _python_name = 'text'
    return_type = 'object'

class add_suffix_or_prefix(Command):
    """
    Add suffix or prefix to zone name.
    
    Parameters
    ----------
        zone_name : List
            Zone name list.
        append : bool
            'append' child.
        text : str
            'text' child.
    """
    _version = '241'
    fluent_name = 'add-suffix-or-prefix'
    _python_name = 'add_suffix_or_prefix'
    argument_names = ['zone_name', 'append', 'text']
    _child_classes = dict(
        zone_name=zone_name_6,
        append=append,
        text=text,
    )
    return_type = 'object'

class abbreviate_types(Boolean):
    """
    'abbreviate_types' child.
    """
    _version = '241'
    fluent_name = 'abbreviate-types?'
    _python_name = 'abbreviate_types'
    return_type = 'object'

class exclude(Boolean):
    """
    'exclude' child.
    """
    _version = '241'
    fluent_name = 'exclude?'
    _python_name = 'exclude'
    return_type = 'object'

class rename_by_adjacency(Command):
    """
    Rename zone to adjacent zones.
    
    Parameters
    ----------
        zone_name : List
            Zone name list.
        abbreviate_types : bool
            'abbreviate_types' child.
        exclude : bool
            'exclude' child.
    """
    _version = '241'
    fluent_name = 'rename-by-adjacency'
    _python_name = 'rename_by_adjacency'
    argument_names = ['zone_name', 'abbreviate_types', 'exclude']
    _child_classes = dict(
        zone_name=zone_name_6,
        abbreviate_types=abbreviate_types,
        exclude=exclude,
    )
    return_type = 'object'

class abbrev(Boolean):
    """
    'abbrev' child.
    """
    _version = '241'
    fluent_name = 'abbrev?'
    _python_name = 'abbrev'
    return_type = 'object'

class rename_to_default(Command):
    """
    Rename zone to default name.
    
    Parameters
    ----------
        zone_name : List
            Zone name list.
        abbrev : bool
            'abbrev' child.
        exclude : bool
            'exclude' child.
    """
    _version = '241'
    fluent_name = 'rename-to-default'
    _python_name = 'rename_to_default'
    argument_names = ['zone_name', 'abbrev', 'exclude']
    _child_classes = dict(
        zone_name=zone_name_6,
        abbrev=abbrev,
        exclude=exclude,
    )
    return_type = 'object'

class boundary_conditions(Group, _ChildNamedObjectAccessorMixin):
    """
    'boundary_conditions' child.
    """
    _version = '241'
    fluent_name = 'boundary-conditions'
    _python_name = 'boundary_conditions'
    child_names = ['axis', 'degassing', 'exhaust_fan', 'fan', 'geometry', 'inlet_vent', 'intake_fan', 'interface', 'interior', 'mass_flow_inlet', 'mass_flow_outlet', 'network', 'network_end', 'outflow', 'outlet_vent', 'overset', 'periodic', 'porous_jump', 'pressure_far_field', 'pressure_inlet', 'pressure_outlet', 'radiator', 'rans_les_interface', 'recirculation_inlet', 'recirculation_outlet', 'shadow', 'symmetry', 'velocity_inlet', 'wall', 'non_reflecting_bc', 'perforated_wall', 'settings']
    command_names = ['copy', 'set_zone_type', 'slit_face_zone', 'non_overlapping_zone_name', 'slit_interior_between_diff_solids', 'create_all_shell_threads', 'recreate_all_shells', 'delete_all_shells', 'orient_face_zone', 'knudsen_number_calculator', 'set_zone_name', 'add_suffix_or_prefix', 'rename_by_adjacency', 'rename_to_default']
    _child_classes = dict(
        axis=axis_1,
        degassing=degassing,
        exhaust_fan=exhaust_fan,
        fan=fan,
        geometry=geometry_3,
        inlet_vent=inlet_vent,
        intake_fan=intake_fan,
        interface=interface,
        interior=interior,
        mass_flow_inlet=mass_flow_inlet,
        mass_flow_outlet=mass_flow_outlet,
        network=network,
        network_end=network_end,
        outflow=outflow,
        outlet_vent=outlet_vent,
        overset=overset,
        periodic=periodic,
        porous_jump=porous_jump,
        pressure_far_field=pressure_far_field,
        pressure_inlet=pressure_inlet,
        pressure_outlet=pressure_outlet,
        radiator=radiator,
        rans_les_interface=rans_les_interface,
        recirculation_inlet=recirculation_inlet,
        recirculation_outlet=recirculation_outlet,
        shadow=shadow,
        symmetry=symmetry,
        velocity_inlet=velocity_inlet,
        wall=wall,
        non_reflecting_bc=non_reflecting_bc,
        perforated_wall=perforated_wall,
        settings=settings_1,
        copy=copy_1,
        set_zone_type=set_zone_type,
        slit_face_zone=slit_face_zone,
        non_overlapping_zone_name=non_overlapping_zone_name,
        slit_interior_between_diff_solids=slit_interior_between_diff_solids,
        create_all_shell_threads=create_all_shell_threads,
        recreate_all_shells=recreate_all_shells,
        delete_all_shells=delete_all_shells,
        orient_face_zone=orient_face_zone,
        knudsen_number_calculator=knudsen_number_calculator,
        set_zone_name=set_zone_name,
        add_suffix_or_prefix=add_suffix_or_prefix,
        rename_by_adjacency=rename_by_adjacency,
        rename_to_default=rename_to_default,
    )
    return_type = 'object'

class proximity_tolerance(Real):
    """
    Specification of auto pairing tolerance.
    """
    _version = '241'
    fluent_name = 'proximity-tolerance'
    _python_name = 'proximity_tolerance'
    return_type = 'object'

class set_default_name_prefix(String):
    """
    Specification of auto pairing default name prefix.
    """
    _version = '241'
    fluent_name = 'set-default-name-prefix'
    _python_name = 'set_default_name_prefix'
    return_type = 'object'

class set_one_to_one_pairing_tolerance(Boolean):
    """
    Enable/disable one-to-one auto pairing tolerance.
    """
    _version = '241'
    fluent_name = 'set-one-to-one-pairing-tolerance'
    _python_name = 'set_one_to_one_pairing_tolerance'
    return_type = 'object'

class set_minimum_area_percentage(Real):
    """
    The minimum area percentage for mesh interface creation.
    """
    _version = '241'
    fluent_name = 'set-minimum-area-percentage'
    _python_name = 'set_minimum_area_percentage'
    return_type = 'object'

class pairing_between_different_cell_zones_only(Boolean):
    """
    Pairing between interface zones from different cell zones only.
    """
    _version = '241'
    fluent_name = 'pairing-between-different-cell-zones-only?'
    _python_name = 'pairing_between_different_cell_zones_only'
    return_type = 'object'

class pairing_between_interface_zones_only(Boolean):
    """
    Pairing between interface zones only.
    """
    _version = '241'
    fluent_name = 'pairing-between-interface-zones-only?'
    _python_name = 'pairing_between_interface_zones_only'
    return_type = 'object'

class keep_empty_interface(Boolean):
    """
    Keep empty interfaces during one-to-one mesh interface creation.
    """
    _version = '241'
    fluent_name = 'keep-empty-interface?'
    _python_name = 'keep_empty_interface'
    return_type = 'object'

class option_9(Integer):
    """
    'option' child.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class change_all_o2o_si_names(Boolean):
    """
    'change_all_o2o_si_names' child.
    """
    _version = '241'
    fluent_name = 'change-all-o2o-si-names?'
    _python_name = 'change_all_o2o_si_names'
    return_type = 'object'

class naming_option(Command):
    """
    Specify whether or not to include an informative suffix to the mesh interface name.
    
    Parameters
    ----------
        option : int
            'option' child.
        change_all_o2o_si_names : bool
            'change_all_o2o_si_names' child.
    """
    _version = '241'
    fluent_name = 'naming-option'
    _python_name = 'naming_option'
    argument_names = ['option', 'change_all_o2o_si_names']
    _child_classes = dict(
        option=option_9,
        change_all_o2o_si_names=change_all_o2o_si_names,
    )
    return_type = 'object'

class auto_options(Group):
    """
    Auto-options object.
    """
    _version = '241'
    fluent_name = 'auto-options'
    _python_name = 'auto_options'
    child_names = ['proximity_tolerance', 'set_default_name_prefix', 'set_one_to_one_pairing_tolerance', 'set_minimum_area_percentage', 'pairing_between_different_cell_zones_only', 'pairing_between_interface_zones_only', 'keep_empty_interface']
    command_names = ['naming_option']
    _child_classes = dict(
        proximity_tolerance=proximity_tolerance,
        set_default_name_prefix=set_default_name_prefix,
        set_one_to_one_pairing_tolerance=set_one_to_one_pairing_tolerance,
        set_minimum_area_percentage=set_minimum_area_percentage,
        pairing_between_different_cell_zones_only=pairing_between_different_cell_zones_only,
        pairing_between_interface_zones_only=pairing_between_interface_zones_only,
        keep_empty_interface=keep_empty_interface,
        naming_option=naming_option,
    )
    return_type = 'object'

class interface_names(StringList, AllowedValuesMixin):
    """
    Interface zones for pairing.
    """
    _version = '241'
    fluent_name = 'interface-names'
    _python_name = 'interface_names'
    return_type = 'object'

class zone_names_7(StringList, AllowedValuesMixin):
    """
    Wall and/or interface zones for pairing.
    """
    _version = '241'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'
    return_type = 'object'

class zone1(StringList, AllowedValuesMixin):
    """
    First interface defining this mesh-interface.
    """
    _version = '241'
    fluent_name = 'zone1'
    _python_name = 'zone1'
    return_type = 'object'

class zone2(StringList, AllowedValuesMixin):
    """
    Second interface defining this mesh-interface.
    """
    _version = '241'
    fluent_name = 'zone2'
    _python_name = 'zone2'
    return_type = 'object'

class new_zones(StringList, AllowedValuesMixin):
    """
    Interface zones defining this mesh-interface.
    """
    _version = '241'
    fluent_name = 'new-zones'
    _python_name = 'new_zones'
    return_type = 'object'

class mapped(Boolean):
    """
    Specifies whether mesh-interface is mapped.
    """
    _version = '241'
    fluent_name = 'mapped'
    _python_name = 'mapped'
    return_type = 'object'

class enable_local_mapped_tolerance(Boolean):
    """
    Enable local tolerance for this mesh interface.
    """
    _version = '241'
    fluent_name = 'enable-local-mapped-tolerance?'
    _python_name = 'enable_local_mapped_tolerance'
    return_type = 'object'

class use_local_edge_length_factor(Boolean):
    """
    Enable tolerance based on local edge length factor instead of absolute tolerance.
    """
    _version = '241'
    fluent_name = 'use-local-edge-length-factor?'
    _python_name = 'use_local_edge_length_factor'
    return_type = 'object'

class local_relative_mapped_tolerance(Real):
    """
    'local_relative_mapped_tolerance' child.
    """
    _version = '241'
    fluent_name = 'local-relative-mapped-tolerance'
    _python_name = 'local_relative_mapped_tolerance'
    return_type = 'object'

class local_absolute_mapped_tolerance(Real):
    """
    'local_absolute_mapped_tolerance' child.
    """
    _version = '241'
    fluent_name = 'local-absolute-mapped-tolerance'
    _python_name = 'local_absolute_mapped_tolerance'
    return_type = 'object'

class periodic_1(Boolean):
    """
    Specifies whether mesh-interface is adjacent to periodic boundaries.
    """
    _version = '241'
    fluent_name = 'periodic'
    _python_name = 'periodic'
    return_type = 'object'

class turbo(Boolean):
    """
    Create a general turbo interface.
    """
    _version = '241'
    fluent_name = 'turbo'
    _python_name = 'turbo'
    return_type = 'object'

class pitch_change_types(String, AllowedValuesMixin):
    """
    'pitch_change_types' child.
    """
    _version = '241'
    fluent_name = 'pitch-change-types'
    _python_name = 'pitch_change_types'
    return_type = 'object'

class mixing_plane(Boolean):
    """
    If you want to use mixing plane mechanism.
    """
    _version = '241'
    fluent_name = 'mixing-plane'
    _python_name = 'mixing_plane'
    return_type = 'object'

class turbo_non_overlap(Boolean):
    """
    Create non-overlapping walls for gti interfaces.
    """
    _version = '241'
    fluent_name = 'turbo-non-overlap'
    _python_name = 'turbo_non_overlap'
    return_type = 'object'

class coupled_1(Boolean):
    """
    Specifies whether mesh-interface is coupled.
    """
    _version = '241'
    fluent_name = 'coupled'
    _python_name = 'coupled'
    return_type = 'object'

class matching(Boolean):
    """
    Specifies whether mesh-interface is matching.
    """
    _version = '241'
    fluent_name = 'matching'
    _python_name = 'matching'
    return_type = 'object'

class static_1(Boolean):
    """
    Specifies whether mesh-interface is static.
    """
    _version = '241'
    fluent_name = 'static'
    _python_name = 'static'
    return_type = 'object'

class ignore_diff(Boolean):
    """
    'ignore_diff' child.
    """
    _version = '241'
    fluent_name = 'ignore-diff?'
    _python_name = 'ignore_diff'
    return_type = 'object'

class interface_1_child(Group):
    """
    'child_object_type' of interface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'interface_child'
    child_names = ['name', 'interface_names', 'zone_names', 'zone1', 'zone2', 'new_zones', 'mapped', 'enable_local_mapped_tolerance', 'use_local_edge_length_factor', 'local_relative_mapped_tolerance', 'local_absolute_mapped_tolerance', 'periodic', 'turbo', 'pitch_change_types', 'mixing_plane', 'turbo_non_overlap', 'coupled', 'matching', 'static', 'ignore_diff']
    _child_classes = dict(
        name=name,
        interface_names=interface_names,
        zone_names=zone_names_7,
        zone1=zone1,
        zone2=zone2,
        new_zones=new_zones,
        mapped=mapped,
        enable_local_mapped_tolerance=enable_local_mapped_tolerance,
        use_local_edge_length_factor=use_local_edge_length_factor,
        local_relative_mapped_tolerance=local_relative_mapped_tolerance,
        local_absolute_mapped_tolerance=local_absolute_mapped_tolerance,
        periodic=periodic_1,
        turbo=turbo,
        pitch_change_types=pitch_change_types,
        mixing_plane=mixing_plane,
        turbo_non_overlap=turbo_non_overlap,
        coupled=coupled_1,
        matching=matching,
        static=static_1,
        ignore_diff=ignore_diff,
    )
    return_type = 'object'

class interface_1(NamedObject[interface_1_child], CreatableNamedObjectMixinOld[interface_1_child]):
    """
    'interface' child.
    """
    _version = '241'
    fluent_name = 'interface'
    _python_name = 'interface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = interface_1_child
    return_type = 'object'

class zone1_1(String, AllowedValuesMixin):
    """
    First interface defining this mesh-interface.
    """
    _version = '241'
    fluent_name = 'zone1'
    _python_name = 'zone1'
    return_type = 'object'

class zone2_1(String, AllowedValuesMixin):
    """
    Second interface defining this mesh-interface.
    """
    _version = '241'
    fluent_name = 'zone2'
    _python_name = 'zone2'
    return_type = 'object'

class turbo_interface_child(Group):
    """
    'child_object_type' of turbo_interface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'turbo_interface_child'
    child_names = ['name', 'zone1', 'zone2', 'pitch_change_types', 'mixing_plane', 'turbo_non_overlap']
    _child_classes = dict(
        name=name,
        zone1=zone1_1,
        zone2=zone2_1,
        pitch_change_types=pitch_change_types,
        mixing_plane=mixing_plane,
        turbo_non_overlap=turbo_non_overlap,
    )
    return_type = 'object'

class turbo_interface(NamedObject[turbo_interface_child], CreatableNamedObjectMixinOld[turbo_interface_child]):
    """
    'turbo_interface' child.
    """
    _version = '241'
    fluent_name = 'turbo-interface'
    _python_name = 'turbo_interface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = turbo_interface_child
    return_type = 'object'

class enforce_continuity_after_bc(Boolean):
    """
    Across the interface, enforces continuity over boundary condition.
    """
    _version = '241'
    fluent_name = 'enforce-continuity-after-bc?'
    _python_name = 'enforce_continuity_after_bc'
    return_type = 'object'

class coupled_interfaces_inherit_bcs(Boolean):
    """
    Copy wall boundary conditions to resulting coupled interfaces.
    """
    _version = '241'
    fluent_name = 'coupled-interfaces-inherit-bcs?'
    _python_name = 'coupled_interfaces_inherit_bcs'
    return_type = 'object'

class verbosity_7(Integer):
    """
    Mesh interface verbosity.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class enable_si_with_nodes(Boolean):
    """
    Enable sliding interfaces with nodes.
    """
    _version = '241'
    fluent_name = 'enable-si-with-nodes'
    _python_name = 'enable_si_with_nodes'
    return_type = 'object'

class enforce_coupled_wall_between_solids(Boolean):
    """
    Create coupled wall interface between solids.
    """
    _version = '241'
    fluent_name = 'enforce-coupled-wall-between-solids?'
    _python_name = 'enforce_coupled_wall_between_solids'
    return_type = 'object'

class enable_visualization_of_interfaces(Boolean):
    """
    Display facets on mesh interfaces.
    """
    _version = '241'
    fluent_name = 'enable-visualization-of-interfaces?'
    _python_name = 'enable_visualization_of_interfaces'
    return_type = 'object'

class mf_1(Integer):
    """
    'mf' child.
    """
    _version = '241'
    fluent_name = 'mf'
    _python_name = 'mf'
    return_type = 'object'

class urf_1(Real):
    """
    'urf' child.
    """
    _version = '241'
    fluent_name = 'urf'
    _python_name = 'urf'
    return_type = 'object'

class solution_controls(Command):
    """
    Specification of mapped frequency and under-relaxation factor for mapped interfaces.
    
    Parameters
    ----------
        mf : int
            'mf' child.
        urf : real
            'urf' child.
    """
    _version = '241'
    fluent_name = 'solution-controls'
    _python_name = 'solution_controls'
    argument_names = ['mf', 'urf']
    _child_classes = dict(
        mf=mf_1,
        urf=urf_1,
    )
    return_type = 'object'

class gtol_length_factor(Real):
    """
    'gtol_length_factor' child.
    """
    _version = '241'
    fluent_name = 'gtol-length-factor'
    _python_name = 'gtol_length_factor'
    return_type = 'object'

class gtol_absolute_value(Real):
    """
    'gtol_absolute_value' child.
    """
    _version = '241'
    fluent_name = 'gtol-absolute-value'
    _python_name = 'gtol_absolute_value'
    return_type = 'object'

class update(Boolean):
    """
    Update mapped interface with new tolerance.
    """
    _version = '241'
    fluent_name = 'update?'
    _python_name = 'update'
    return_type = 'object'

class tolerance_1(Command):
    """
    Specification of mapped interface tolerance.
    
    Parameters
    ----------
        use_local_edge_length_factor : bool
            Enable tolerance based on local edge length factor instead of absolute tolerance.
        gtol_length_factor : real
            'gtol_length_factor' child.
        gtol_absolute_value : real
            'gtol_absolute_value' child.
        update : bool
            Update mapped interface with new tolerance.
    """
    _version = '241'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'
    argument_names = ['use_local_edge_length_factor', 'gtol_length_factor', 'gtol_absolute_value', 'update']
    _child_classes = dict(
        use_local_edge_length_factor=use_local_edge_length_factor,
        gtol_length_factor=gtol_length_factor,
        gtol_absolute_value=gtol_absolute_value,
        update=update,
    )
    return_type = 'object'

class all(Boolean):
    """
    Convert all mesh interfaces to mapped mesh interfaces.
    """
    _version = '241'
    fluent_name = 'all?'
    _python_name = 'all'
    return_type = 'object'

class auto(Boolean):
    """
    Convert poorly matching mesh interfaces to mapped mesh interfaces.
    """
    _version = '241'
    fluent_name = 'auto?'
    _python_name = 'auto'
    return_type = 'object'

class convert_to_mapped_interface(Command):
    """
    Convert non-conformal mesh interface to mapped mesh interfaces.
    
    Parameters
    ----------
        all : bool
            Convert all mesh interfaces to mapped mesh interfaces.
        auto : bool
            Convert poorly matching mesh interfaces to mapped mesh interfaces.
        use_local_edge_length_factor : bool
            Enable tolerance based on local edge length factor instead of absolute tolerance.
        gtol_length_factor : real
            'gtol_length_factor' child.
        gtol_absolute_value : real
            'gtol_absolute_value' child.
    """
    _version = '241'
    fluent_name = 'convert-to-mapped-interface'
    _python_name = 'convert_to_mapped_interface'
    argument_names = ['all', 'auto', 'use_local_edge_length_factor', 'gtol_length_factor', 'gtol_absolute_value']
    _child_classes = dict(
        all=all,
        auto=auto,
        use_local_edge_length_factor=use_local_edge_length_factor,
        gtol_length_factor=gtol_length_factor,
        gtol_absolute_value=gtol_absolute_value,
    )
    return_type = 'object'

class mapped_interface_options(Group):
    """
    The mapped-interface-options object.
    """
    _version = '241'
    fluent_name = 'mapped-interface-options'
    _python_name = 'mapped_interface_options'
    command_names = ['solution_controls', 'tolerance', 'convert_to_mapped_interface']
    _child_classes = dict(
        solution_controls=solution_controls,
        tolerance=tolerance_1,
        convert_to_mapped_interface=convert_to_mapped_interface,
    )
    return_type = 'object'

class use_sided_area_vector(Boolean):
    """
    'use_sided_area_vector' child.
    """
    _version = '241'
    fluent_name = 'use-sided-area-vector?'
    _python_name = 'use_sided_area_vector'
    return_type = 'object'

class use_nci_sided_area_vectors(Boolean):
    """
    'use_nci_sided_area_vectors' child.
    """
    _version = '241'
    fluent_name = 'use-nci-sided-area-vectors?'
    _python_name = 'use_nci_sided_area_vectors'
    return_type = 'object'

class recreate(Boolean):
    """
    'recreate' child.
    """
    _version = '241'
    fluent_name = 'recreate?'
    _python_name = 'recreate'
    return_type = 'object'

class change_numerics(Command):
    """
    Enable modified non-conformal interface numerics.
    
    Parameters
    ----------
        use_sided_area_vector : bool
            'use_sided_area_vector' child.
        use_nci_sided_area_vectors : bool
            'use_nci_sided_area_vectors' child.
        recreate : bool
            'recreate' child.
    """
    _version = '241'
    fluent_name = 'change-numerics?'
    _python_name = 'change_numerics'
    argument_names = ['use_sided_area_vector', 'use_nci_sided_area_vectors', 'recreate']
    _child_classes = dict(
        use_sided_area_vector=use_sided_area_vector,
        use_nci_sided_area_vectors=use_nci_sided_area_vectors,
        recreate=recreate,
    )
    return_type = 'object'

class non_conformal_interface_numerics(Group):
    """
    Setting non-conformal numerics options.
    """
    _version = '241'
    fluent_name = 'non-conformal-interface-numerics'
    _python_name = 'non_conformal_interface_numerics'
    command_names = ['change_numerics']
    _child_classes = dict(
        change_numerics=change_numerics,
    )
    return_type = 'object'

class delete_2(CommandWithPositionalArgs):
    """
    Delete a mesh interface.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '241'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['name']
    _child_classes = dict(
        name=name_1,
    )
    return_type = 'object'

class zones_1(StringList, AllowedValuesMixin):
    """
    Zone name list.
    """
    _version = '241'
    fluent_name = 'zones'
    _python_name = 'zones'
    return_type = 'object'

class display_1(Command):
    """
    Display specified mesh interface zone.
    
    Parameters
    ----------
        zones : List
            Zone name list.
    """
    _version = '241'
    fluent_name = 'display'
    _python_name = 'display'
    argument_names = ['zones']
    _child_classes = dict(
        zones=zones_1,
    )
    return_type = 'object'

class list_1(Command):
    """
    List all mesh-interfaces.
    """
    _version = '241'
    fluent_name = 'list'
    _python_name = 'list'
    return_type = 'object'

class side_1(String, AllowedValuesMixin):
    """
    Id/name of zone to convert to phase lag side 1.
    """
    _version = '241'
    fluent_name = 'side-1'
    _python_name = 'side_1'
    return_type = 'object'

class side_2(String, AllowedValuesMixin):
    """
    Id/name of zone to convert to phase lag side 2.
    """
    _version = '241'
    fluent_name = 'side-2'
    _python_name = 'side_2'
    return_type = 'object'

class interface_name_1(String):
    """
    'interface_name' child.
    """
    _version = '241'
    fluent_name = 'interface-name'
    _python_name = 'interface_name'
    return_type = 'object'

class make_phaselag_from_boundaries(Command):
    """
    Make interface zones phase lagged.
    
    Parameters
    ----------
        side_1 : str
            Id/name of zone to convert to phase lag side 1.
        side_2 : str
            Id/name of zone to convert to phase lag side 2.
        angle : real
            'angle' child.
        interface_name : str
            'interface_name' child.
    """
    _version = '241'
    fluent_name = 'make-phaselag-from-boundaries'
    _python_name = 'make_phaselag_from_boundaries'
    argument_names = ['side_1', 'side_2', 'angle', 'interface_name']
    _child_classes = dict(
        side_1=side_1,
        side_2=side_2,
        angle=angle,
        interface_name=interface_name_1,
    )
    return_type = 'object'

class periodic_zone_name_1(String, AllowedValuesMixin):
    """
    The periodic zone name.
    """
    _version = '241'
    fluent_name = 'periodic-zone-name'
    _python_name = 'periodic_zone_name'
    return_type = 'object'

class make_phaselag_from_periodic(Command):
    """
    Convert periodic interface to phase lagged.
    
    Parameters
    ----------
        periodic_zone_name : str
            The periodic zone name.
    """
    _version = '241'
    fluent_name = 'make-phaselag-from-periodic'
    _python_name = 'make_phaselag_from_periodic'
    argument_names = ['periodic_zone_name']
    _child_classes = dict(
        periodic_zone_name=periodic_zone_name_1,
    )
    return_type = 'object'

class delete_3(Boolean):
    """
    'delete' child.
    """
    _version = '241'
    fluent_name = 'delete?'
    _python_name = 'delete'
    return_type = 'object'

class overlapping_percentage_threshold(Real):
    """
    'overlapping_percentage_threshold' child.
    """
    _version = '241'
    fluent_name = 'overlapping-percentage-threshold'
    _python_name = 'overlapping_percentage_threshold'
    return_type = 'object'

class delete_interfaces_with_small_overlap(Command):
    """
    Delete mesh interfaces that have an area percentage under a specified value.
    
    Parameters
    ----------
        delete : bool
            'delete' child.
        overlapping_percentage_threshold : real
            'overlapping_percentage_threshold' child.
    """
    _version = '241'
    fluent_name = 'delete-interfaces-with-small-overlap'
    _python_name = 'delete_interfaces_with_small_overlap'
    argument_names = ['delete', 'overlapping_percentage_threshold']
    _child_classes = dict(
        delete=delete_3,
        overlapping_percentage_threshold=overlapping_percentage_threshold,
    )
    return_type = 'object'

class delete_all(Command):
    """
    Delete all mesh interfaces.
    """
    _version = '241'
    fluent_name = 'delete-all'
    _python_name = 'delete_all'
    return_type = 'object'

class check_mapped_interface_quality(Boolean):
    """
    Check Mapped Interface Qaulity.
    """
    _version = '241'
    fluent_name = 'check-mapped-interface-quality?'
    _python_name = 'check_mapped_interface_quality'
    return_type = 'object'

class continue_(Boolean):
    """
    Continue to improve the mapped interface quality.
    """
    _version = '241'
    fluent_name = 'continue?'
    _python_name = 'continue_'
    return_type = 'object'

class tol_percentage_increment(Real):
    """
    'tol_percentage_increment' child.
    """
    _version = '241'
    fluent_name = 'tol-percentage-increment'
    _python_name = 'tol_percentage_increment'
    return_type = 'object'

class improve_quality_1(Command):
    """
    Improve mesh interface quality.
    
    Parameters
    ----------
        check_mapped_interface_quality : bool
            Check Mapped Interface Qaulity.
        continue_ : bool
            Continue to improve the mapped interface quality.
        tol_percentage_increment : real
            'tol_percentage_increment' child.
    """
    _version = '241'
    fluent_name = 'improve-quality'
    _python_name = 'improve_quality'
    argument_names = ['check_mapped_interface_quality', 'continue_', 'tol_percentage_increment']
    _child_classes = dict(
        check_mapped_interface_quality=check_mapped_interface_quality,
        continue_=continue_,
        tol_percentage_increment=tol_percentage_increment,
    )
    return_type = 'object'

class o2o_flag(Boolean):
    """
    Use the default one-to-one interface creation method?.
    """
    _version = '241'
    fluent_name = 'o2o-flag'
    _python_name = 'o2o_flag'
    return_type = 'object'

class toggle(Boolean):
    """
    Would you like to proceed?.
    """
    _version = '241'
    fluent_name = 'toggle?'
    _python_name = 'toggle'
    return_type = 'object'

class delete_empty(Boolean):
    """
    Delete empty interface interior zones from non-overlapping interfaces?.
    """
    _version = '241'
    fluent_name = 'delete-empty?'
    _python_name = 'delete_empty'
    return_type = 'object'

class one_to_one_pairing(Command):
    """
    Use the default one-to-one interface creation method?.
    
    Parameters
    ----------
        o2o_flag : bool
            Use the default one-to-one interface creation method?.
        toggle : bool
            Would you like to proceed?.
        delete_empty : bool
            Delete empty interface interior zones from non-overlapping interfaces?.
    """
    _version = '241'
    fluent_name = 'one-to-one-pairing?'
    _python_name = 'one_to_one_pairing'
    argument_names = ['o2o_flag', 'toggle', 'delete_empty']
    _child_classes = dict(
        o2o_flag=o2o_flag,
        toggle=toggle,
        delete_empty=delete_empty,
    )
    return_type = 'object'

class all_1(Boolean):
    """
    'all' child.
    """
    _version = '241'
    fluent_name = 'all?'
    _python_name = 'all'
    return_type = 'object'

class one_to_one_pairing_1(Boolean):
    """
    'one_to_one_pairing' child.
    """
    _version = '241'
    fluent_name = 'one-to-one-pairing?'
    _python_name = 'one_to_one_pairing'
    return_type = 'object'

class new_interface_zones(StringList, AllowedValuesMixin):
    """
    Unintersected interface zones for pairing.
    """
    _version = '241'
    fluent_name = 'new-interface-zones'
    _python_name = 'new_interface_zones'
    return_type = 'object'

class si_create(Boolean):
    """
    'si_create' child.
    """
    _version = '241'
    fluent_name = 'si-create?'
    _python_name = 'si_create'
    return_type = 'object'

class si_name(String):
    """
    The prefix for mesh interface names.
    """
    _version = '241'
    fluent_name = 'si-name'
    _python_name = 'si_name'
    return_type = 'object'

class apply_mapped(Boolean):
    """
    Apply Mapped option at solids.
    """
    _version = '241'
    fluent_name = 'apply-mapped?'
    _python_name = 'apply_mapped'
    return_type = 'object'

class static_interface(Boolean):
    """
    'static_interface' child.
    """
    _version = '241'
    fluent_name = 'static-interface?'
    _python_name = 'static_interface'
    return_type = 'object'

class auto_pairing(Command):
    """
    Automatically pair and create mesh interfaces for some or all interface zones.
    
    Parameters
    ----------
        all : bool
            'all' child.
        one_to_one_pairing : bool
            'one_to_one_pairing' child.
        new_interface_zones : List
            Unintersected interface zones for pairing.
        si_create : bool
            'si_create' child.
        si_name : str
            The prefix for mesh interface names.
        apply_mapped : bool
            Apply Mapped option at solids.
        static_interface : bool
            'static_interface' child.
    """
    _version = '241'
    fluent_name = 'auto-pairing'
    _python_name = 'auto_pairing'
    argument_names = ['all', 'one_to_one_pairing', 'new_interface_zones', 'si_create', 'si_name', 'apply_mapped', 'static_interface']
    _child_classes = dict(
        all=all_1,
        one_to_one_pairing=one_to_one_pairing_1,
        new_interface_zones=new_interface_zones,
        si_create=si_create,
        si_name=si_name,
        apply_mapped=apply_mapped,
        static_interface=static_interface,
    )
    return_type = 'object'

class enabled_15(Boolean):
    """
    'enabled' child.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class option_name(String, AllowedValuesMixin):
    """
    'option_name' child.
    """
    _version = '241'
    fluent_name = 'option-name'
    _python_name = 'option_name'
    return_type = 'object'

class transfer_motion_across_interfaces(Command):
    """
    Transfer motion from one side of the interface to the other when only one side undergoes user-defined or system-coupling motion.
    
    Parameters
    ----------
        enabled : bool
            'enabled' child.
        option_name : str
            'option_name' child.
    """
    _version = '241'
    fluent_name = 'transfer-motion-across-interfaces?'
    _python_name = 'transfer_motion_across_interfaces'
    argument_names = ['enabled', 'option_name']
    _child_classes = dict(
        enabled=enabled_15,
        option_name=option_name,
    )
    return_type = 'object'

class enable_11(Boolean):
    """
    Remove left-handed faces on mesh interfaces.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class update_1(Boolean):
    """
    'update' child.
    """
    _version = '241'
    fluent_name = 'update?'
    _python_name = 'update'
    return_type = 'object'

class remove_left_handed_interface_faces(Command):
    """
    Remove left-handed faces during mesh interface creation.
    
    Parameters
    ----------
        enable : bool
            Remove left-handed faces on mesh interfaces.
        update : bool
            'update' child.
    """
    _version = '241'
    fluent_name = 'remove-left-handed-interface-faces?'
    _python_name = 'remove_left_handed_interface_faces'
    argument_names = ['enable', 'update']
    _child_classes = dict(
        enable=enable_11,
        update=update_1,
    )
    return_type = 'object'

class zone_name_7(String, AllowedValuesMixin):
    """
    Zone id/name.
    """
    _version = '241'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'
    return_type = 'object'

class non_overlapping_zone_name_1(Command):
    """
    Get non-overlapping zone name from the associated interface zone.
    
    Parameters
    ----------
        zone_name : str
            Zone id/name.
    """
    _version = '241'
    fluent_name = 'non-overlapping-zone-name'
    _python_name = 'non_overlapping_zone_name'
    argument_names = ['zone_name']
    _child_classes = dict(
        zone_name=zone_name_7,
    )
    return_type = 'object'

class mesh_interfaces(Group):
    """
    The mesh interfaces object.
    """
    _version = '241'
    fluent_name = 'mesh-interfaces'
    _python_name = 'mesh_interfaces'
    child_names = ['auto_options', 'interface', 'turbo_interface', 'enforce_continuity_after_bc', 'coupled_interfaces_inherit_bcs', 'verbosity', 'enable_si_with_nodes', 'enforce_coupled_wall_between_solids', 'enable_visualization_of_interfaces', 'mapped_interface_options', 'non_conformal_interface_numerics']
    command_names = ['delete', 'display', 'list', 'make_phaselag_from_boundaries', 'make_phaselag_from_periodic', 'delete_interfaces_with_small_overlap', 'delete_all', 'improve_quality', 'one_to_one_pairing', 'auto_pairing', 'transfer_motion_across_interfaces', 'remove_left_handed_interface_faces', 'non_overlapping_zone_name']
    _child_classes = dict(
        auto_options=auto_options,
        interface=interface_1,
        turbo_interface=turbo_interface,
        enforce_continuity_after_bc=enforce_continuity_after_bc,
        coupled_interfaces_inherit_bcs=coupled_interfaces_inherit_bcs,
        verbosity=verbosity_7,
        enable_si_with_nodes=enable_si_with_nodes,
        enforce_coupled_wall_between_solids=enforce_coupled_wall_between_solids,
        enable_visualization_of_interfaces=enable_visualization_of_interfaces,
        mapped_interface_options=mapped_interface_options,
        non_conformal_interface_numerics=non_conformal_interface_numerics,
        delete=delete_2,
        display=display_1,
        list=list_1,
        make_phaselag_from_boundaries=make_phaselag_from_boundaries,
        make_phaselag_from_periodic=make_phaselag_from_periodic,
        delete_interfaces_with_small_overlap=delete_interfaces_with_small_overlap,
        delete_all=delete_all,
        improve_quality=improve_quality_1,
        one_to_one_pairing=one_to_one_pairing,
        auto_pairing=auto_pairing,
        transfer_motion_across_interfaces=transfer_motion_across_interfaces,
        remove_left_handed_interface_faces=remove_left_handed_interface_faces,
        non_overlapping_zone_name=non_overlapping_zone_name_1,
    )
    return_type = 'object'

class area(Real):
    """
    Reference area for normalization.
    """
    _version = '241'
    fluent_name = 'area'
    _python_name = 'area'
    return_type = 'object'

class depth(Real):
    """
    Reference depth for volume calculation.
    """
    _version = '241'
    fluent_name = 'depth'
    _python_name = 'depth'
    return_type = 'object'

class density_6(Real):
    """
    Reference density for normalization.
    """
    _version = '241'
    fluent_name = 'density'
    _python_name = 'density'
    return_type = 'object'

class enthalpy(Real):
    """
    Reference enthalpy for enthalpy damping and normalization.
    """
    _version = '241'
    fluent_name = 'enthalpy'
    _python_name = 'enthalpy'
    return_type = 'object'

class length_1(Real):
    """
    Reference length for normalization.
    """
    _version = '241'
    fluent_name = 'length'
    _python_name = 'length'
    return_type = 'object'

class pressure(Real):
    """
    Reference pressure for normalization.
    """
    _version = '241'
    fluent_name = 'pressure'
    _python_name = 'pressure'
    return_type = 'object'

class temperature_4(Real):
    """
    Reference temperature for normalization.
    """
    _version = '241'
    fluent_name = 'temperature'
    _python_name = 'temperature'
    return_type = 'object'

class yplus(Real):
    """
    Reference yplus for normalization.
    """
    _version = '241'
    fluent_name = 'yplus'
    _python_name = 'yplus'
    return_type = 'object'

class velocity_3(Real):
    """
    Reference velocity for normalization.
    """
    _version = '241'
    fluent_name = 'velocity'
    _python_name = 'velocity'
    return_type = 'object'

class viscosity_3(Real):
    """
    Reference viscosity for normalization.
    """
    _version = '241'
    fluent_name = 'viscosity'
    _python_name = 'viscosity'
    return_type = 'object'

class zone(String, AllowedValuesMixin):
    """
    Reference zone.
    """
    _version = '241'
    fluent_name = 'zone'
    _python_name = 'zone'
    return_type = 'object'

class from_zone_type(String, AllowedValuesMixin):
    """
    'from_zone_type' child.
    """
    _version = '241'
    fluent_name = 'from-zone-type'
    _python_name = 'from_zone_type'
    return_type = 'object'

class from_zone_name(String, AllowedValuesMixin):
    """
    'from_zone_name' child.
    """
    _version = '241'
    fluent_name = 'from-zone-name'
    _python_name = 'from_zone_name'
    return_type = 'object'

class phase_26(String):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    return_type = 'object'

class compute(Command):
    """
    'compute' command.
    """
    _version = '241'
    fluent_name = 'compute'
    _python_name = 'compute'
    argument_names = ['from_zone_type', 'from_zone_name', 'phase']
    _child_classes = dict(
        from_zone_type=from_zone_type,
        from_zone_name=from_zone_name,
        phase=phase_26,
    )
    return_type = 'object'

class list_values(Command):
    """
    'list_values' command.
    """
    _version = '241'
    fluent_name = 'list-values'
    _python_name = 'list_values'
    return_type = 'object'

class reference_values(Group):
    """
    'reference_values' child.
    """
    _version = '241'
    fluent_name = 'reference-values'
    _python_name = 'reference_values'
    child_names = ['area', 'depth', 'density', 'enthalpy', 'length', 'pressure', 'temperature', 'yplus', 'velocity', 'viscosity', 'zone']
    command_names = ['compute', 'list_values']
    _child_classes = dict(
        area=area,
        depth=depth,
        density=density_6,
        enthalpy=enthalpy,
        length=length_1,
        pressure=pressure,
        temperature=temperature_4,
        yplus=yplus,
        velocity=velocity_3,
        viscosity=viscosity_3,
        zone=zone,
        compute=compute,
        list_values=list_values,
    )
    return_type = 'object'

class display_frame(Command):
    """
    Display Reference Frame.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '241'
    fluent_name = 'display-frame'
    _python_name = 'display_frame'
    argument_names = ['name']
    _child_classes = dict(
        name=name_1,
    )
    return_type = 'object'

class hide_frame(Command):
    """
    Hide Reference Frame.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '241'
    fluent_name = 'hide-frame'
    _python_name = 'hide_frame'
    argument_names = ['name']
    _child_classes = dict(
        name=name_1,
    )
    return_type = 'object'

class motion_type(String, AllowedValuesMixin):
    """
    'motion_type' child.
    """
    _version = '241'
    fluent_name = 'motion-type'
    _python_name = 'motion_type'
    return_type = 'object'

class linear_velocity(RealList):
    """
    'linear_velocity' child.
    """
    _version = '241'
    fluent_name = 'linear-velocity'
    _python_name = 'linear_velocity'
    return_type = 'object'

class speed(Real):
    """
    'speed' child.
    """
    _version = '241'
    fluent_name = 'speed'
    _python_name = 'speed'
    return_type = 'object'

class rotation_axis(RealList):
    """
    'rotation_axis' child.
    """
    _version = '241'
    fluent_name = 'rotation-axis'
    _python_name = 'rotation_axis'
    return_type = 'object'

class rotational_velocity(Group):
    """
    'rotational_velocity' child.
    """
    _version = '241'
    fluent_name = 'rotational-velocity'
    _python_name = 'rotational_velocity'
    child_names = ['speed', 'rotation_axis']
    _child_classes = dict(
        speed=speed,
        rotation_axis=rotation_axis,
    )
    return_type = 'object'

class constant_velocity(Group):
    """
    'constant_velocity' child.
    """
    _version = '241'
    fluent_name = 'constant-velocity'
    _python_name = 'constant_velocity'
    child_names = ['linear_velocity', 'rotational_velocity']
    _child_classes = dict(
        linear_velocity=linear_velocity,
        rotational_velocity=rotational_velocity,
    )
    return_type = 'object'

class track_zone(String, AllowedValuesMixin):
    """
    'track_zone' child.
    """
    _version = '241'
    fluent_name = 'track-zone'
    _python_name = 'track_zone'
    return_type = 'object'

class zone_track(Group):
    """
    'zone_track' child.
    """
    _version = '241'
    fluent_name = 'zone-track'
    _python_name = 'zone_track'
    child_names = ['track_zone']
    _child_classes = dict(
        track_zone=track_zone,
    )
    return_type = 'object'

class motion(Group):
    """
    'motion' child.
    """
    _version = '241'
    fluent_name = 'motion'
    _python_name = 'motion'
    child_names = ['motion_type', 'constant_velocity', 'zone_track']
    _child_classes = dict(
        motion_type=motion_type,
        constant_velocity=constant_velocity,
        zone_track=zone_track,
    )
    return_type = 'object'

class parent_1(String, AllowedValuesMixin):
    """
    'parent' child.
    """
    _version = '241'
    fluent_name = 'parent'
    _python_name = 'parent'
    return_type = 'object'

class direction_option(String, AllowedValuesMixin):
    """
    'direction_option' child.
    """
    _version = '241'
    fluent_name = 'direction-option'
    _python_name = 'direction_option'
    return_type = 'object'

class vector(RealList):
    """
    'vector' child.
    """
    _version = '241'
    fluent_name = 'vector'
    _python_name = 'vector'
    return_type = 'object'

class point(RealList):
    """
    'point' child.
    """
    _version = '241'
    fluent_name = 'point'
    _python_name = 'point'
    return_type = 'object'

class axis_label(String, AllowedValuesMixin):
    """
    'axis_label' child.
    """
    _version = '241'
    fluent_name = 'axis-label'
    _python_name = 'axis_label'
    return_type = 'object'

class axis_from(Group):
    """
    'axis_from' child.
    """
    _version = '241'
    fluent_name = 'axis-from'
    _python_name = 'axis_from'
    child_names = ['direction_option', 'vector', 'point', 'axis_label']
    _child_classes = dict(
        direction_option=direction_option,
        vector=vector,
        point=point,
        axis_label=axis_label,
    )
    return_type = 'object'

class axis_to(Group):
    """
    'axis_to' child.
    """
    _version = '241'
    fluent_name = 'axis-to'
    _python_name = 'axis_to'
    child_names = ['direction_option', 'vector', 'point', 'axis_label']
    _child_classes = dict(
        direction_option=direction_option,
        vector=vector,
        point=point,
        axis_label=axis_label,
    )
    return_type = 'object'

class first_axis(Group):
    """
    'first_axis' child.
    """
    _version = '241'
    fluent_name = 'first-axis'
    _python_name = 'first_axis'
    child_names = ['axis_from', 'axis_to']
    _child_classes = dict(
        axis_from=axis_from,
        axis_to=axis_to,
    )
    return_type = 'object'

class second_axis(Group):
    """
    'second_axis' child.
    """
    _version = '241'
    fluent_name = 'second-axis'
    _python_name = 'second_axis'
    child_names = ['axis_from', 'axis_to']
    _child_classes = dict(
        axis_from=axis_from,
        axis_to=axis_to,
    )
    return_type = 'object'

class auto_second_axis(Boolean):
    """
    'auto_second_axis' child.
    """
    _version = '241'
    fluent_name = 'auto-second-axis'
    _python_name = 'auto_second_axis'
    return_type = 'object'

class orientation(Group):
    """
    'orientation' child.
    """
    _version = '241'
    fluent_name = 'orientation'
    _python_name = 'orientation'
    child_names = ['first_axis', 'second_axis', 'auto_second_axis']
    _child_classes = dict(
        first_axis=first_axis,
        second_axis=second_axis,
        auto_second_axis=auto_second_axis,
    )
    return_type = 'object'

class initial_state(Group):
    """
    'initial_state' child.
    """
    _version = '241'
    fluent_name = 'initial-state'
    _python_name = 'initial_state'
    child_names = ['origin', 'orientation']
    _child_classes = dict(
        origin=origin,
        orientation=orientation,
    )
    return_type = 'object'

class display_state(String, AllowedValuesMixin):
    """
    'display_state' child.
    """
    _version = '241'
    fluent_name = 'display-state'
    _python_name = 'display_state'
    return_type = 'object'

class reference_frames_child(Group):
    """
    'child_object_type' of reference_frames.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'reference_frames_child'
    child_names = ['name', 'motion', 'parent_1', 'initial_state', 'display_state']
    _child_classes = dict(
        name=name,
        motion=motion,
        parent_1=parent_1,
        initial_state=initial_state,
        display_state=display_state,
    )
    return_type = 'object'

class reference_frames(NamedObject[reference_frames_child], CreatableNamedObjectMixinOld[reference_frames_child]):
    """
    'reference_frames' child.
    """
    _version = '241'
    fluent_name = 'reference-frames'
    _python_name = 'reference_frames'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display_frame', 'hide_frame']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display_frame=display_frame,
        hide_frame=hide_frame,
    )
    child_object_type = reference_frames_child
    return_type = 'object'

class names(StringList, AllowedValuesMixin):
    """
    'names' child.
    """
    _version = '241'
    fluent_name = 'names'
    _python_name = 'names'
    return_type = 'object'

class compute_1(Command):
    """
    'compute' command.
    """
    _version = '241'
    fluent_name = 'compute'
    _python_name = 'compute'
    argument_names = ['names']
    _child_classes = dict(
        names=names,
    )
    return_type = 'object'

class definition(String, AllowedValuesMixin):
    """
    'definition' child.
    """
    _version = '241'
    fluent_name = 'definition'
    _python_name = 'definition'
    return_type = 'object'

class description(String, AllowedValuesMixin):
    """
    'description' child.
    """
    _version = '241'
    fluent_name = 'description'
    _python_name = 'description'
    return_type = 'object'

class parameterid(String, AllowedValuesMixin):
    """
    'parameterid' child.
    """
    _version = '241'
    fluent_name = 'parameterid'
    _python_name = 'parameterid'
    return_type = 'object'

class parametername(String, AllowedValuesMixin):
    """
    'parametername' child.
    """
    _version = '241'
    fluent_name = 'parametername'
    _python_name = 'parametername'
    return_type = 'object'

class unit_2(String, AllowedValuesMixin):
    """
    'unit' child.
    """
    _version = '241'
    fluent_name = 'unit'
    _python_name = 'unit'
    return_type = 'object'

class input_parameter(Boolean):
    """
    As input parameter?.
    """
    _version = '241'
    fluent_name = 'input-parameter'
    _python_name = 'input_parameter'
    return_type = 'object'

class output_parameter(Boolean):
    """
    As output parameter?.
    """
    _version = '241'
    fluent_name = 'output-parameter'
    _python_name = 'output_parameter'
    return_type = 'object'

class get_value(Query):
    """
    'get_value' query.
    """
    _version = '241'
    fluent_name = 'get-value'
    _python_name = 'get_value'
    return_type = 'object'

class named_expressions_child(Group):
    """
    'child_object_type' of named_expressions.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'named_expressions_child'
    child_names = ['name', 'definition', 'description', 'parameterid', 'parametername', 'unit', 'input_parameter', 'output_parameter']
    query_names = ['get_value']
    _child_classes = dict(
        name=name_1,
        definition=definition,
        description=description,
        parameterid=parameterid,
        parametername=parametername,
        unit=unit_2,
        input_parameter=input_parameter,
        output_parameter=output_parameter,
        get_value=get_value,
    )
    return_type = 'object'

class named_expressions(NamedObject[named_expressions_child], CreatableNamedObjectMixinOld[named_expressions_child]):
    """
    'named_expressions' child.
    """
    _version = '241'
    fluent_name = 'named-expressions'
    _python_name = 'named_expressions'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'compute']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        compute=compute_1,
    )
    child_object_type = named_expressions_child
    return_type = 'object'

class enable_turbo_model(Boolean):
    """
    Enable/disable turbo model object.
    """
    _version = '241'
    fluent_name = 'enable-turbo-model'
    _python_name = 'enable_turbo_model'
    return_type = 'object'

class enable_scale_all(Boolean):
    """
    Scale scaling of all the interfaces...
    """
    _version = '241'
    fluent_name = 'enable-scale-all?'
    _python_name = 'enable_scale_all'
    return_type = 'object'

class disable_scale_all(Boolean):
    """
    Disable scaling of all the interfaces...
    """
    _version = '241'
    fluent_name = 'disable-scale-all?'
    _python_name = 'disable_scale_all'
    return_type = 'object'

class interface_name_2(String, AllowedValuesMixin):
    """
    'interface_name' child.
    """
    _version = '241'
    fluent_name = 'interface-name'
    _python_name = 'interface_name'
    return_type = 'object'

class scale_2(Boolean):
    """
    Enable flux scaling at mixing plane interface.
    """
    _version = '241'
    fluent_name = 'scale?'
    _python_name = 'scale'
    return_type = 'object'

class enforce_flux_scaling(Command):
    """
    Enforce flux scaling ON/OFF at the turbo interfaces.
    
    Parameters
    ----------
        enable_scale_all : bool
            Scale scaling of all the interfaces...
        disable_scale_all : bool
            Disable scaling of all the interfaces...
        interface_name : str
            'interface_name' child.
        scale : bool
            Enable flux scaling at mixing plane interface.
    """
    _version = '241'
    fluent_name = 'enforce-flux-scaling'
    _python_name = 'enforce_flux_scaling'
    argument_names = ['enable_scale_all', 'disable_scale_all', 'interface_name', 'scale']
    _child_classes = dict(
        enable_scale_all=enable_scale_all,
        disable_scale_all=disable_scale_all,
        interface_name=interface_name_2,
        scale=scale_2,
    )
    return_type = 'object'

class print_settings(Command):
    """
    List the flux scale settings at the turbo interfaces.
    """
    _version = '241'
    fluent_name = 'print-settings'
    _python_name = 'print_settings'
    return_type = 'object'

class expert_4(Group):
    """
    The expert parameters for turbo interfaces.
    """
    _version = '241'
    fluent_name = 'expert'
    _python_name = 'expert'
    command_names = ['enforce_flux_scaling', 'print_settings']
    _child_classes = dict(
        enforce_flux_scaling=enforce_flux_scaling,
        print_settings=print_settings,
    )
    return_type = 'object'

class bands_type(Boolean):
    """
    The mixing plane bands type.
    """
    _version = '241'
    fluent_name = 'bands-type'
    _python_name = 'bands_type'
    return_type = 'object'

class set_all_interfaces(Integer):
    """
    Number of band to be used for mixing.
    """
    _version = '241'
    fluent_name = 'set-all-interfaces'
    _python_name = 'set_all_interfaces'
    return_type = 'object'

class interface_number(Integer):
    """
    Number of band to be used for mixing.
    """
    _version = '241'
    fluent_name = 'interface-number'
    _python_name = 'interface_number'
    return_type = 'object'

class bands(Integer):
    """
    Number of band to be used for mixing.
    """
    _version = '241'
    fluent_name = 'bands'
    _python_name = 'bands'
    return_type = 'object'

class set_specific_interface(Command):
    """
    Set number of band to be used for mixing.
    
    Parameters
    ----------
        interface_number : int
            Number of band to be used for mixing.
        bands : int
            Number of band to be used for mixing.
    """
    _version = '241'
    fluent_name = 'set-specific-interface'
    _python_name = 'set_specific_interface'
    argument_names = ['interface_number', 'bands']
    _child_classes = dict(
        interface_number=interface_number,
        bands=bands,
    )
    return_type = 'object'

class number_of_bands(Group):
    """
    The maximum number of bands to be used for mixing.
    """
    _version = '241'
    fluent_name = 'number-of-bands'
    _python_name = 'number_of_bands'
    child_names = ['set_all_interfaces']
    command_names = ['set_specific_interface']
    _child_classes = dict(
        set_all_interfaces=set_all_interfaces,
        set_specific_interface=set_specific_interface,
    )
    return_type = 'object'

class list_mixing_planes(Command):
    """
    List the settings of mixing planes in the case.
    """
    _version = '241'
    fluent_name = 'list-mixing-planes'
    _python_name = 'list_mixing_planes'
    return_type = 'object'

class mixing_plane_model_settings(Group):
    """
    The expert parameters for turbo interfaces.
    """
    _version = '241'
    fluent_name = 'mixing-plane-model-settings'
    _python_name = 'mixing_plane_model_settings'
    child_names = ['bands_type', 'number_of_bands']
    command_names = ['list_mixing_planes']
    _child_classes = dict(
        bands_type=bands_type,
        number_of_bands=number_of_bands,
        list_mixing_planes=list_mixing_planes,
    )
    return_type = 'object'

class general_turbo_interface_settings(Group):
    """
    The general turbo interface settings.
    """
    _version = '241'
    fluent_name = 'general-turbo-interface-settings'
    _python_name = 'general_turbo_interface_settings'
    child_names = ['expert', 'mixing_plane_model_settings']
    _child_classes = dict(
        expert=expert_4,
        mixing_plane_model_settings=mixing_plane_model_settings,
    )
    return_type = 'object'

class turbo_models(Group):
    """
    The turbo-models settings.
    """
    _version = '241'
    fluent_name = 'turbo-models'
    _python_name = 'turbo_models'
    child_names = ['enable_turbo_model', 'general_turbo_interface_settings']
    _child_classes = dict(
        enable_turbo_model=enable_turbo_model,
        general_turbo_interface_settings=general_turbo_interface_settings,
    )
    return_type = 'object'

class face_name_2(String, AllowedValuesMixin):
    """
    'face_name' child.
    """
    _version = '241'
    fluent_name = 'face-name'
    _python_name = 'face_name'
    return_type = 'object'

class list_face(Command):
    """
    'list_face' command.
    """
    _version = '241'
    fluent_name = 'list-face'
    _python_name = 'list_face'
    argument_names = ['face_name']
    _child_classes = dict(
        face_name=face_name_2,
    )
    return_type = 'object'

class list_properties_4(Command):
    """
    'list_properties' command.
    """
    _version = '241'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    return_type = 'object'

class faces_child(Group):
    """
    'child_object_type' of faces.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'faces_child'
    child_names = ['name']
    command_names = ['list_properties']
    _child_classes = dict(
        name=name,
        list_properties=list_properties_4,
    )
    return_type = 'object'

class faces(NamedObject[faces_child], CreatableNamedObjectMixinOld[faces_child]):
    """
    'faces' child.
    """
    _version = '241'
    fluent_name = 'faces'
    _python_name = 'faces'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'list_face']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        list_face=list_face,
    )
    child_object_type = faces_child
    return_type = 'object'

class bodies_child(Group):
    """
    'child_object_type' of bodies.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'bodies_child'
    child_names = ['name', 'faces']
    command_names = ['list_properties']
    _child_classes = dict(
        name=name,
        faces=faces,
        list_properties=list_properties_4,
    )
    return_type = 'object'

class bodies(NamedObject[bodies_child], CreatableNamedObjectMixinOld[bodies_child]):
    """
    'bodies' child.
    """
    _version = '241'
    fluent_name = 'bodies'
    _python_name = 'bodies'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = bodies_child
    return_type = 'object'

class components_2(StringList, AllowedValuesMixin):
    """
    Input component name.
    """
    _version = '241'
    fluent_name = 'components'
    _python_name = 'components'
    return_type = 'object'

class groups_child(Group):
    """
    'child_object_type' of groups.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'groups_child'
    child_names = ['name', 'components']
    command_names = ['list_properties']
    _child_classes = dict(
        name=name,
        components=components_2,
        list_properties=list_properties_4,
    )
    return_type = 'object'

class groups(NamedObject[groups_child], CreatableNamedObjectMixinOld[groups_child]):
    """
    'groups' child.
    """
    _version = '241'
    fluent_name = 'groups'
    _python_name = 'groups'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = groups_child
    return_type = 'object'

class parts_child(Group):
    """
    'child_object_type' of parts.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'parts_child'
    child_names = ['name', 'bodies', 'groups']
    _child_classes = dict(
        name=name,
        bodies=bodies,
        groups=groups,
    )
    return_type = 'object'

class parts(NamedObject[parts_child], CreatableNamedObjectMixinOld[parts_child]):
    """
    'parts' child.
    """
    _version = '241'
    fluent_name = 'parts'
    _python_name = 'parts'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = parts_child
    return_type = 'object'

class list_topology(Command):
    """
    'list_topology' command.
    """
    _version = '241'
    fluent_name = 'list-topology'
    _python_name = 'list_topology'
    return_type = 'object'

class geometry_1(Group):
    """
    'geometry' child.
    """
    _version = '241'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    child_names = ['parts']
    command_names = ['list_topology']
    _child_classes = dict(
        parts=parts,
        list_topology=list_topology,
    )
    return_type = 'object'

class type_4(String, AllowedValuesMixin):
    """
    Physics volume type.
    """
    _version = '241'
    fluent_name = 'type'
    _python_name = 'type'
    return_type = 'object'

class type_5(String, AllowedValuesMixin):
    """
    Physics boundary type.
    """
    _version = '241'
    fluent_name = 'type'
    _python_name = 'type'
    return_type = 'object'

class locations(StringList, AllowedValuesMixin):
    """
    Input location name.
    """
    _version = '241'
    fluent_name = 'locations'
    _python_name = 'locations'
    return_type = 'object'

class boundaries_child(Group):
    """
    'child_object_type' of boundaries.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'boundaries_child'
    child_names = ['name', 'type', 'locations']
    _child_classes = dict(
        name=name,
        type=type_5,
        locations=locations,
    )
    return_type = 'object'

class boundaries(NamedObject[boundaries_child], CreatableNamedObjectMixinOld[boundaries_child]):
    """
    'boundaries' child.
    """
    _version = '241'
    fluent_name = 'boundaries'
    _python_name = 'boundaries'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = boundaries_child
    return_type = 'object'

class volumes_child(Group):
    """
    'child_object_type' of volumes.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'volumes_child'
    child_names = ['name', 'type', 'boundaries', 'locations']
    _child_classes = dict(
        name=name,
        type=type_4,
        boundaries=boundaries,
        locations=locations,
    )
    return_type = 'object'

class volumes(NamedObject[volumes_child], CreatableNamedObjectMixinOld[volumes_child]):
    """
    'volumes' child.
    """
    _version = '241'
    fluent_name = 'volumes'
    _python_name = 'volumes'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = volumes_child
    return_type = 'object'

class type_6(String, AllowedValuesMixin):
    """
    Interface type.
    """
    _version = '241'
    fluent_name = 'type'
    _python_name = 'type'
    return_type = 'object'

class boundary_1(String, AllowedValuesMixin):
    """
    Interface side-1 boundary.
    """
    _version = '241'
    fluent_name = 'boundary-1'
    _python_name = 'boundary_1'
    return_type = 'object'

class boundary_2(String, AllowedValuesMixin):
    """
    Interface side-2 boundary.
    """
    _version = '241'
    fluent_name = 'boundary-2'
    _python_name = 'boundary_2'
    return_type = 'object'

class periodicity(String, AllowedValuesMixin):
    """
    Interface periodicity type.
    """
    _version = '241'
    fluent_name = 'periodicity'
    _python_name = 'periodicity'
    return_type = 'object'

class mesh_connectivity(String, AllowedValuesMixin):
    """
    Interface mesh connectivity type.
    """
    _version = '241'
    fluent_name = 'mesh-connectivity'
    _python_name = 'mesh_connectivity'
    return_type = 'object'

class interfaces_child(Group):
    """
    'child_object_type' of interfaces.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'interfaces_child'
    child_names = ['name', 'type', 'boundary_1', 'boundary_2', 'periodicity', 'mesh_connectivity']
    _child_classes = dict(
        name=name,
        type=type_6,
        boundary_1=boundary_1,
        boundary_2=boundary_2,
        periodicity=periodicity,
        mesh_connectivity=mesh_connectivity,
    )
    return_type = 'object'

class interfaces(NamedObject[interfaces_child], CreatableNamedObjectMixinOld[interfaces_child]):
    """
    'interfaces' child.
    """
    _version = '241'
    fluent_name = 'interfaces'
    _python_name = 'interfaces'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = interfaces_child
    return_type = 'object'

class list_physics(Command):
    """
    'list_physics' command.
    """
    _version = '241'
    fluent_name = 'list-physics'
    _python_name = 'list_physics'
    return_type = 'object'

class physics(Group):
    """
    'physics' child.
    """
    _version = '241'
    fluent_name = 'physics'
    _python_name = 'physics'
    child_names = ['volumes', 'interfaces']
    command_names = ['list_physics']
    _child_classes = dict(
        volumes=volumes,
        interfaces=interfaces,
        list_physics=list_physics,
    )
    return_type = 'object'

class setup(Group):
    """
    'setup' child.
    """
    _version = '241'
    fluent_name = 'setup'
    _python_name = 'setup'
    child_names = ['general', 'models', 'materials', 'cell_zone_conditions', 'boundary_conditions', 'mesh_interfaces', 'reference_values', 'reference_frames', 'named_expressions', 'turbo_models', 'geometry', 'physics']
    _child_classes = dict(
        general=general,
        models=models,
        materials=materials,
        cell_zone_conditions=cell_zone_conditions,
        boundary_conditions=boundary_conditions,
        mesh_interfaces=mesh_interfaces,
        reference_values=reference_values,
        reference_frames=reference_frames,
        named_expressions=named_expressions,
        turbo_models=turbo_models,
        geometry=geometry_1,
        physics=physics,
    )
    return_type = 'object'

class flow_scheme(String, AllowedValuesMixin):
    """
    'flow_scheme' child.
    """
    _version = '241'
    fluent_name = 'flow-scheme'
    _python_name = 'flow_scheme'
    return_type = 'object'

class coupled_form(Boolean):
    """
    'coupled_form' child.
    """
    _version = '241'
    fluent_name = 'coupled-form'
    _python_name = 'coupled_form'
    return_type = 'object'

class solve_n_phase(Boolean):
    """
    Enable/disable N-Phase volume fraction equations.
    """
    _version = '241'
    fluent_name = 'solve-n-phase?'
    _python_name = 'solve_n_phase'
    return_type = 'object'

class p_v_coupling(Group):
    """
    The pressure velocity coupling scheme.
    """
    _version = '241'
    fluent_name = 'p-v-coupling'
    _python_name = 'p_v_coupling'
    child_names = ['flow_scheme', 'coupled_form', 'solve_n_phase']
    _child_classes = dict(
        flow_scheme=flow_scheme,
        coupled_form=coupled_form,
        solve_n_phase=solve_n_phase,
    )
    return_type = 'object'

class flux_type_1(String, AllowedValuesMixin):
    """
    Flux type for density-based solver.
    """
    _version = '241'
    fluent_name = 'flux-type'
    _python_name = 'flux_type'
    return_type = 'object'

class dbns_cases(Group):
    """
    Flux type object.
    """
    _version = '241'
    fluent_name = 'dbns_cases'
    _python_name = 'dbns_cases'
    child_names = ['flux_type']
    _child_classes = dict(
        flux_type=flux_type_1,
    )
    return_type = 'object'

class flux_auto_select(Boolean):
    """
    Enable/disable auto select.
    """
    _version = '241'
    fluent_name = 'flux-auto-select?'
    _python_name = 'flux_auto_select'
    return_type = 'object'

class flux_type_2(String, AllowedValuesMixin):
    """
    Flux type for pressure-based solver.
    """
    _version = '241'
    fluent_name = 'flux-type'
    _python_name = 'flux_type'
    return_type = 'object'

class pbns_cases(Group):
    """
    Flux type object.
    """
    _version = '241'
    fluent_name = 'pbns_cases'
    _python_name = 'pbns_cases'
    child_names = ['flux_auto_select', 'flux_type']
    _child_classes = dict(
        flux_auto_select=flux_auto_select,
        flux_type=flux_type_2,
    )
    return_type = 'object'

class flux_type(Group):
    """
    The flux type.
    """
    _version = '241'
    fluent_name = 'flux-type'
    _python_name = 'flux_type'
    child_names = ['dbns_cases', 'pbns_cases']
    _child_classes = dict(
        dbns_cases=dbns_cases,
        pbns_cases=pbns_cases,
    )
    return_type = 'object'

class discretization_scheme_child(String, AllowedValuesMixin):
    """
    'child_object_type' of discretization_scheme.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'discretization_scheme_child'
    return_type = 'object'

class discretization_scheme(NamedObject[discretization_scheme_child], _NonCreatableNamedObjectMixin[discretization_scheme_child]):
    """
    Discretization scheme.
    """
    _version = '241'
    fluent_name = 'discretization-scheme'
    _python_name = 'discretization_scheme'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = discretization_scheme_child
    return_type = 'object'

class coupled_solver(String, AllowedValuesMixin):
    """
    Pseudo time step size formulation for the pseudo time method.
    """
    _version = '241'
    fluent_name = 'coupled-solver'
    _python_name = 'coupled_solver'
    return_type = 'object'

class segregated_solver(String, AllowedValuesMixin):
    """
    Pseudo time step size formulation for the pseudo time method.
    """
    _version = '241'
    fluent_name = 'segregated-solver'
    _python_name = 'segregated_solver'
    return_type = 'object'

class density_based_solver(String, AllowedValuesMixin):
    """
    Pseudo time step size formulation for the pseudo time method.
    """
    _version = '241'
    fluent_name = 'density-based-solver'
    _python_name = 'density_based_solver'
    return_type = 'object'

class formulation_1(Group):
    """
    The pseudo time step size formulation for the pseudo time method.
    """
    _version = '241'
    fluent_name = 'formulation'
    _python_name = 'formulation'
    child_names = ['coupled_solver', 'segregated_solver', 'density_based_solver']
    _child_classes = dict(
        coupled_solver=coupled_solver,
        segregated_solver=segregated_solver,
        density_based_solver=density_based_solver,
    )
    return_type = 'object'

class relaxation_method(String, AllowedValuesMixin):
    """
    Relaxation definition for pseudo time method.
    """
    _version = '241'
    fluent_name = 'relaxation-method'
    _python_name = 'relaxation_method'
    return_type = 'object'

class convergence_acceleration_type(String, AllowedValuesMixin):
    """
    Convergence acceleration type.
    """
    _version = '241'
    fluent_name = 'convergence-acceleration-type'
    _python_name = 'convergence_acceleration_type'
    return_type = 'object'

class casm_cutoff_multiplier(Real):
    """
    'casm_cutoff_multiplier' child.
    """
    _version = '241'
    fluent_name = 'casm-cutoff-multiplier'
    _python_name = 'casm_cutoff_multiplier'
    return_type = 'object'

class convergence_acceleration_for_stretched_meshes_1(Group):
    """
    Enable convergence acceleration for stretched meshes to improve the convergence of the implicit pressure based solver on meshes with high cell stretching.
    """
    _version = '241'
    fluent_name = 'convergence-acceleration-for-stretched-meshes'
    _python_name = 'convergence_acceleration_for_stretched_meshes'
    child_names = ['convergence_acceleration_type', 'casm_cutoff_multiplier']
    _child_classes = dict(
        convergence_acceleration_type=convergence_acceleration_type,
        casm_cutoff_multiplier=casm_cutoff_multiplier,
    )
    return_type = 'object'

class relaxation_bounding_method(String, AllowedValuesMixin):
    """
    'relaxation_bounding_method' child.
    """
    _version = '241'
    fluent_name = 'relaxation-bounding-method'
    _python_name = 'relaxation_bounding_method'
    return_type = 'object'

class default_min_max_relaxation_limits(Boolean):
    """
    'default_min_max_relaxation_limits' child.
    """
    _version = '241'
    fluent_name = 'default-min-max-relaxation-limits?'
    _python_name = 'default_min_max_relaxation_limits'
    return_type = 'object'

class minimum_allowed_effctive_relaxation(Real):
    """
    'minimum_allowed_effctive_relaxation' child.
    """
    _version = '241'
    fluent_name = 'minimum-allowed-effctive-relaxation'
    _python_name = 'minimum_allowed_effctive_relaxation'
    return_type = 'object'

class maximum_allowed_effctive_relaxation(Real):
    """
    'maximum_allowed_effctive_relaxation' child.
    """
    _version = '241'
    fluent_name = 'maximum-allowed-effctive-relaxation'
    _python_name = 'maximum_allowed_effctive_relaxation'
    return_type = 'object'

class relaxation_bounds(Command):
    """
    Select relaxation bounding scheme for pseudo time method.
    
    Parameters
    ----------
        relaxation_bounding_method : str
            'relaxation_bounding_method' child.
        default_min_max_relaxation_limits : bool
            'default_min_max_relaxation_limits' child.
        minimum_allowed_effctive_relaxation : real
            'minimum_allowed_effctive_relaxation' child.
        maximum_allowed_effctive_relaxation : real
            'maximum_allowed_effctive_relaxation' child.
    """
    _version = '241'
    fluent_name = 'relaxation-bounds'
    _python_name = 'relaxation_bounds'
    argument_names = ['relaxation_bounding_method', 'default_min_max_relaxation_limits', 'minimum_allowed_effctive_relaxation', 'maximum_allowed_effctive_relaxation']
    _child_classes = dict(
        relaxation_bounding_method=relaxation_bounding_method,
        default_min_max_relaxation_limits=default_min_max_relaxation_limits,
        minimum_allowed_effctive_relaxation=minimum_allowed_effctive_relaxation,
        maximum_allowed_effctive_relaxation=maximum_allowed_effctive_relaxation,
    )
    return_type = 'object'

class pseudo_time_method(Group):
    """
    The pseudo time method object.
    """
    _version = '241'
    fluent_name = 'pseudo-time-method'
    _python_name = 'pseudo_time_method'
    child_names = ['formulation', 'relaxation_method', 'convergence_acceleration_for_stretched_meshes']
    command_names = ['relaxation_bounds']
    _child_classes = dict(
        formulation=formulation_1,
        relaxation_method=relaxation_method,
        convergence_acceleration_for_stretched_meshes=convergence_acceleration_for_stretched_meshes_1,
        relaxation_bounds=relaxation_bounds,
    )
    return_type = 'object'

class transient_formulation(String, AllowedValuesMixin):
    """
    Transient formulation.
    """
    _version = '241'
    fluent_name = 'transient-formulation'
    _python_name = 'transient_formulation'
    return_type = 'object'

class unsteady_global_time(Boolean):
    """
    Enable/disable unsteady global-time-step solution model.
    """
    _version = '241'
    fluent_name = 'unsteady-global-time?'
    _python_name = 'unsteady_global_time'
    return_type = 'object'

class accelerated_non_iterative_time_marching(Boolean):
    """
    Enable/disable accelerated non-iterative time marching.
    """
    _version = '241'
    fluent_name = 'accelerated-non-iterative-time-marching?'
    _python_name = 'accelerated_non_iterative_time_marching'
    return_type = 'object'

class convergence_acceleration_type_1(String, AllowedValuesMixin):
    """
    'convergence_acceleration_type' child.
    """
    _version = '241'
    fluent_name = 'convergence-acceleration-type'
    _python_name = 'convergence_acceleration_type'
    return_type = 'object'

class casm_cutoff_multiplier_1(Real):
    """
    CASM cut-off multiplier :.
    """
    _version = '241'
    fluent_name = 'casm-cutoff-multiplier'
    _python_name = 'casm_cutoff_multiplier'
    return_type = 'object'

class convergence_acceleration_for_stretched_meshes(Group):
    """
    Enable convergence acceleration for stretched meshes to improve the convergence of the implicit density based solver on meshes with high cell stretching.
    """
    _version = '241'
    fluent_name = 'convergence-acceleration-for-stretched-meshes'
    _python_name = 'convergence_acceleration_for_stretched_meshes'
    child_names = ['convergence_acceleration_type', 'casm_cutoff_multiplier']
    _child_classes = dict(
        convergence_acceleration_type=convergence_acceleration_type_1,
        casm_cutoff_multiplier=casm_cutoff_multiplier_1,
    )
    return_type = 'object'

class reactions_2(Boolean):
    """
    Enable/disable the species reaction sources and set relaxation factor.
    """
    _version = '241'
    fluent_name = 'reactions?'
    _python_name = 'reactions'
    return_type = 'object'

class reaction_source_term_relaxation_factor(Real):
    """
    Reaction source term relaxation factor.
    """
    _version = '241'
    fluent_name = 'reaction-source-term-relaxation-factor'
    _python_name = 'reaction_source_term_relaxation_factor'
    return_type = 'object'

class implicit_bodyforce_treatment(Boolean):
    """
    Enable/disable implicit body force treatment.
    """
    _version = '241'
    fluent_name = 'implicit-bodyforce-treatment?'
    _python_name = 'implicit_bodyforce_treatment'
    return_type = 'object'

class physical_velocity_formulation(Boolean):
    """
    Enable/disable use of physical velocity formulation for porous media.
    """
    _version = '241'
    fluent_name = 'physical-velocity-formulation?'
    _python_name = 'physical_velocity_formulation'
    return_type = 'object'

class disable_rhie_chow_flux(Boolean):
    """
    Use low order velocity interpolation in flux calculation.
    """
    _version = '241'
    fluent_name = 'disable-rhie-chow-flux?'
    _python_name = 'disable_rhie_chow_flux'
    return_type = 'object'

class presto_pressure_scheme(Boolean):
    """
    Limit high-order terms for PRESTO! pressure scheme.
    """
    _version = '241'
    fluent_name = 'presto-pressure-scheme?'
    _python_name = 'presto_pressure_scheme'
    return_type = 'object'

class first_to_second_order_blending(Real):
    """
    1st-order to higher-order blending factor [min=0.0 - max=1.0].
    """
    _version = '241'
    fluent_name = 'first-to-second-order-blending'
    _python_name = 'first_to_second_order_blending'
    return_type = 'object'

class alternate_diffusion_for_porous_region_solids(Boolean):
    """
    Enable/disable use of alternate diffusion for porous region solids.
    """
    _version = '241'
    fluent_name = 'alternate-diffusion-for-porous-region-solids?'
    _python_name = 'alternate_diffusion_for_porous_region_solids'
    return_type = 'object'

class numerics_pbns(Group):
    """
    Numeric options for pressure-based solver.
    """
    _version = '241'
    fluent_name = 'numerics-pbns'
    _python_name = 'numerics_pbns'
    child_names = ['implicit_bodyforce_treatment', 'velocity_formulation', 'physical_velocity_formulation', 'disable_rhie_chow_flux', 'presto_pressure_scheme', 'first_to_second_order_blending', 'alternate_diffusion_for_porous_region_solids']
    _child_classes = dict(
        implicit_bodyforce_treatment=implicit_bodyforce_treatment,
        velocity_formulation=velocity_formulation,
        physical_velocity_formulation=physical_velocity_formulation,
        disable_rhie_chow_flux=disable_rhie_chow_flux,
        presto_pressure_scheme=presto_pressure_scheme,
        first_to_second_order_blending=first_to_second_order_blending,
        alternate_diffusion_for_porous_region_solids=alternate_diffusion_for_porous_region_solids,
    )
    return_type = 'object'

class first_to_second_order_blending_dbns(Real):
    """
    1st-order to higher-order blending factor [min=0.0 - max=1.0]:.
    """
    _version = '241'
    fluent_name = 'first-to-second-order-blending-dbns'
    _python_name = 'first_to_second_order_blending_dbns'
    return_type = 'object'

class numerics_dbns(Group):
    """
    Numeric options for density-based solver.
    """
    _version = '241'
    fluent_name = 'numerics-dbns'
    _python_name = 'numerics_dbns'
    child_names = ['first_to_second_order_blending_dbns']
    _child_classes = dict(
        first_to_second_order_blending_dbns=first_to_second_order_blending_dbns,
    )
    return_type = 'object'

class expert_5(Group):
    """
    Expert object.
    """
    _version = '241'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['reactions', 'reaction_source_term_relaxation_factor', 'numerics_pbns', 'numerics_dbns']
    _child_classes = dict(
        reactions=reactions_2,
        reaction_source_term_relaxation_factor=reaction_source_term_relaxation_factor,
        numerics_pbns=numerics_pbns,
        numerics_dbns=numerics_dbns,
    )
    return_type = 'object'

class frozen_flux(Boolean):
    """
    Enable/disable frozen flux formulation for transient flows.
    """
    _version = '241'
    fluent_name = 'frozen-flux?'
    _python_name = 'frozen_flux'
    return_type = 'object'

class gradient_scheme(String, AllowedValuesMixin):
    """
    Gradient scheme.
    """
    _version = '241'
    fluent_name = 'gradient-scheme'
    _python_name = 'gradient_scheme'
    return_type = 'object'

class enable_12(Boolean):
    """
    Enable/Disable High Order Term Relaxation.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class relaxation_factor(Real):
    """
    Relaxation factor.
    """
    _version = '241'
    fluent_name = 'relaxation-factor'
    _python_name = 'relaxation_factor'
    return_type = 'object'

class select_variables(String, AllowedValuesMixin):
    """
    Variables for high order term relaxation.
    """
    _version = '241'
    fluent_name = 'select-variables'
    _python_name = 'select_variables'
    return_type = 'object'

class type_7(String, AllowedValuesMixin):
    """
    High order relaxation type.
    """
    _version = '241'
    fluent_name = 'type'
    _python_name = 'type'
    return_type = 'object'

class options_5(Group):
    """
    High Order Term Relaxation Options.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['relaxation_factor', 'select_variables', 'type']
    _child_classes = dict(
        relaxation_factor=relaxation_factor,
        select_variables=select_variables,
        type=type_7,
    )
    return_type = 'object'

class high_order_term_relaxation(Group):
    """
    High Order Relaxation Menu.
    """
    _version = '241'
    fluent_name = 'high-order-term-relaxation'
    _python_name = 'high_order_term_relaxation'
    child_names = ['enable', 'options']
    _child_classes = dict(
        enable=enable_12,
        options=options_5,
    )
    return_type = 'object'

class relative_permeability(Boolean):
    """
    Multiphase relative permeability fix option.
    """
    _version = '241'
    fluent_name = 'relative-permeability?'
    _python_name = 'relative_permeability'
    return_type = 'object'

class capillary_pressure_as_diffusion(Boolean):
    """
    Model capillary pressure as diffusion.
    """
    _version = '241'
    fluent_name = 'capillary-pressure-as-diffusion?'
    _python_name = 'capillary_pressure_as_diffusion'
    return_type = 'object'

class porous_media(Group):
    """
    Multiphase miscellaneous porous media numerics object.
    """
    _version = '241'
    fluent_name = 'porous-media'
    _python_name = 'porous_media'
    child_names = ['relative_permeability', 'capillary_pressure_as_diffusion']
    _child_classes = dict(
        relative_permeability=relative_permeability,
        capillary_pressure_as_diffusion=capillary_pressure_as_diffusion,
    )
    return_type = 'object'

class enhanced_numerics(Boolean):
    """
    Multiphase enhanced compressible flow numerics options.
    """
    _version = '241'
    fluent_name = 'enhanced-numerics?'
    _python_name = 'enhanced_numerics'
    return_type = 'object'

class alternate_bc_formulation(Boolean):
    """
    Enable/disable use of alternate compressible bc formulation.
    """
    _version = '241'
    fluent_name = 'alternate-bc-formulation?'
    _python_name = 'alternate_bc_formulation'
    return_type = 'object'

class analytical_thermodynamic_derivatives(Boolean):
    """
    Enable/disable use of analytical thermodynamic derivatives.
    """
    _version = '241'
    fluent_name = 'analytical-thermodynamic-derivatives?'
    _python_name = 'analytical_thermodynamic_derivatives'
    return_type = 'object'

class compressible_flow(Group):
    """
    Multiphase compressible numerics options object.
    """
    _version = '241'
    fluent_name = 'compressible-flow'
    _python_name = 'compressible_flow'
    child_names = ['enhanced_numerics', 'alternate_bc_formulation', 'analytical_thermodynamic_derivatives']
    _child_classes = dict(
        enhanced_numerics=enhanced_numerics,
        alternate_bc_formulation=alternate_bc_formulation,
        analytical_thermodynamic_derivatives=analytical_thermodynamic_derivatives,
    )
    return_type = 'object'

class thin_film(Boolean):
    """
    Multiphase boiling thin film effects.
    """
    _version = '241'
    fluent_name = 'thin-film?'
    _python_name = 'thin_film'
    return_type = 'object'

class liquid_vof_factor(Boolean):
    """
    Multiphase boiling liquid volume fraction effects.
    """
    _version = '241'
    fluent_name = 'liquid-vof-factor?'
    _python_name = 'liquid_vof_factor'
    return_type = 'object'

class boiling_parameters(Group):
    """
    Multiphase boiling parameters object.
    """
    _version = '241'
    fluent_name = 'boiling-parameters'
    _python_name = 'boiling_parameters'
    child_names = ['thin_film', 'liquid_vof_factor']
    _child_classes = dict(
        thin_film=thin_film,
        liquid_vof_factor=liquid_vof_factor,
    )
    return_type = 'object'

class viscosity_averaging(Boolean):
    """
    Enable/disable use of harmonic averaging for viscosity.
    """
    _version = '241'
    fluent_name = 'viscosity-averaging?'
    _python_name = 'viscosity_averaging'
    return_type = 'object'

class turb_visc_based_damping(Boolean):
    """
    Enable/disable turbulence damping based on turbulent viscosity.
    """
    _version = '241'
    fluent_name = 'turb-visc-based-damping?'
    _python_name = 'turb_visc_based_damping'
    return_type = 'object'

class density_func_expo(Real):
    """
    Density function exponent.
    """
    _version = '241'
    fluent_name = 'density-func-expo'
    _python_name = 'density_func_expo'
    return_type = 'object'

class density_ratio_cutoff(Real):
    """
    Density ratio cut-off.
    """
    _version = '241'
    fluent_name = 'density-ratio-cutoff'
    _python_name = 'density_ratio_cutoff'
    return_type = 'object'

class n_smooth_for_interfacial_regims(Integer):
    """
    Number of smoothings for interfacial regime.
    """
    _version = '241'
    fluent_name = 'n-smooth-for-interfacial-regims'
    _python_name = 'n_smooth_for_interfacial_regims'
    return_type = 'object'

class sm_relax_factor(Real):
    """
    Smoothing relaxation factor.
    """
    _version = '241'
    fluent_name = 'sm-relax-factor'
    _python_name = 'sm_relax_factor'
    return_type = 'object'

class viscous_func_options(Integer):
    """
    Viscous function option.
    """
    _version = '241'
    fluent_name = 'viscous-func-options'
    _python_name = 'viscous_func_options'
    return_type = 'object'

class density_func_options(Integer):
    """
    Density function option.
    """
    _version = '241'
    fluent_name = 'density-func-options'
    _python_name = 'density_func_options'
    return_type = 'object'

class exponent_smoothing_func(Real):
    """
    Exponent of smoothing function.
    """
    _version = '241'
    fluent_name = 'exponent-smoothing-func'
    _python_name = 'exponent_smoothing_func'
    return_type = 'object'

class exponent_density_func(Real):
    """
    Exponent of density function.
    """
    _version = '241'
    fluent_name = 'exponent-density-func'
    _python_name = 'exponent_density_func'
    return_type = 'object'

class boundry_treatment(Boolean):
    """
    Enable/disable boundary treatment.
    """
    _version = '241'
    fluent_name = 'boundry-treatment?'
    _python_name = 'boundry_treatment'
    return_type = 'object'

class near_wall_treatment_1(Boolean):
    """
    Enable/disable near wall treatment?.
    """
    _version = '241'
    fluent_name = 'near-wall-treatment?'
    _python_name = 'near_wall_treatment'
    return_type = 'object'

class interfacial_artificial_viscosity(Group):
    """
    Interfacial artifical viscosity controls.
    """
    _version = '241'
    fluent_name = 'interfacial-artificial-viscosity'
    _python_name = 'interfacial_artificial_viscosity'
    child_names = ['n_smooth_for_interfacial_regims', 'sm_relax_factor', 'viscous_func_options', 'density_func_options', 'exponent_smoothing_func', 'exponent_density_func', 'boundry_treatment', 'near_wall_treatment']
    _child_classes = dict(
        n_smooth_for_interfacial_regims=n_smooth_for_interfacial_regims,
        sm_relax_factor=sm_relax_factor,
        viscous_func_options=viscous_func_options,
        density_func_options=density_func_options,
        exponent_smoothing_func=exponent_smoothing_func,
        exponent_density_func=exponent_density_func,
        boundry_treatment=boundry_treatment,
        near_wall_treatment=near_wall_treatment_1,
    )
    return_type = 'object'

class viscous_flow(Group):
    """
    Multiphase viscous flow numerics options object.
    """
    _version = '241'
    fluent_name = 'viscous-flow'
    _python_name = 'viscous_flow'
    child_names = ['viscosity_averaging', 'turb_visc_based_damping', 'density_func_expo', 'density_ratio_cutoff', 'interfacial_artificial_viscosity']
    _child_classes = dict(
        viscosity_averaging=viscosity_averaging,
        turb_visc_based_damping=turb_visc_based_damping,
        density_func_expo=density_func_expo,
        density_ratio_cutoff=density_ratio_cutoff,
        interfacial_artificial_viscosity=interfacial_artificial_viscosity,
    )
    return_type = 'object'

class schnerr_evap_coeff(Real):
    """
    Evaporation coefficient for Schnerr-Sauer model.
    """
    _version = '241'
    fluent_name = 'schnerr-evap-coeff'
    _python_name = 'schnerr_evap_coeff'
    return_type = 'object'

class schnerr_cond_coeff(Real):
    """
    Condensation coefficient for Schnerr-Sauer model.
    """
    _version = '241'
    fluent_name = 'schnerr-cond-coeff'
    _python_name = 'schnerr_cond_coeff'
    return_type = 'object'

class max_vapor_pressure_ratio(Real):
    """
    Maximum limit on vapor pressure after turbulence and thermal correction.
    """
    _version = '241'
    fluent_name = 'max-vapor-pressure-ratio'
    _python_name = 'max_vapor_pressure_ratio'
    return_type = 'object'

class min_vapor_pressure(Real):
    """
    Minimum vapor pressure limit for cavitation model.
    """
    _version = '241'
    fluent_name = 'min-vapor-pressure'
    _python_name = 'min_vapor_pressure'
    return_type = 'object'

class display_clipped_pressure(Boolean):
    """
    Clipped pressure is just used for the properties evaluation. Mass Transfer Rate uses unclipped pressure.
    """
    _version = '241'
    fluent_name = 'display-clipped-pressure?'
    _python_name = 'display_clipped_pressure'
    return_type = 'object'

class p_limit_method(String, AllowedValuesMixin):
    """
    It provides the pressure limit during properties calculation when pressure goes below the vapor pressure.
    """
    _version = '241'
    fluent_name = 'p-limit-method'
    _python_name = 'p_limit_method'
    return_type = 'object'

class turbulent_diffusion(Boolean):
    """
    New turbulent diffusion treatment is applicable to N-phase flow when one of the phases 
    participating in cavitation is selected as a primary phase.
    """
    _version = '241'
    fluent_name = 'turbulent-diffusion?'
    _python_name = 'turbulent_diffusion'
    return_type = 'object'

class old_treatment_for_turbulent_diffusion(Boolean):
    """
    Old turbulent diffusion treatment is applicable to two phase flow when vapor is selected as a secondary phase.
    """
    _version = '241'
    fluent_name = 'old-treatment-for-turbulent-diffusion?'
    _python_name = 'old_treatment_for_turbulent_diffusion'
    return_type = 'object'

class cavitation(Group):
    """
    Enable/disable turbulent diffusion treatment between phases participating in cavitation.
    This treatment is generally recommended for better solution stability.
    However, in case of numerical difficulties, it can be disabled.
    """
    _version = '241'
    fluent_name = 'cavitation'
    _python_name = 'cavitation'
    child_names = ['schnerr_evap_coeff', 'schnerr_cond_coeff', 'max_vapor_pressure_ratio', 'min_vapor_pressure', 'display_clipped_pressure', 'p_limit_method', 'turbulent_diffusion', 'old_treatment_for_turbulent_diffusion']
    _child_classes = dict(
        schnerr_evap_coeff=schnerr_evap_coeff,
        schnerr_cond_coeff=schnerr_cond_coeff,
        max_vapor_pressure_ratio=max_vapor_pressure_ratio,
        min_vapor_pressure=min_vapor_pressure,
        display_clipped_pressure=display_clipped_pressure,
        p_limit_method=p_limit_method,
        turbulent_diffusion=turbulent_diffusion,
        old_treatment_for_turbulent_diffusion=old_treatment_for_turbulent_diffusion,
    )
    return_type = 'object'

class vof_from_min_limit(Real):
    """
    Minimum volume fraction below which mass transfer rate is set to zero.
    """
    _version = '241'
    fluent_name = 'vof-from-min-limit'
    _python_name = 'vof_from_min_limit'
    return_type = 'object'

class vof_from_max_limit(Real):
    """
    Maximum volume fraction above which mass transfer rate is set to zero.
    """
    _version = '241'
    fluent_name = 'vof-from-max-limit'
    _python_name = 'vof_from_max_limit'
    return_type = 'object'

class vof_to_min_limit(Real):
    """
    Minimum volume fraction below which mass transfer rate is set to zero.
    """
    _version = '241'
    fluent_name = 'vof-to-min-limit'
    _python_name = 'vof_to_min_limit'
    return_type = 'object'

class vof_to_max_limit(Real):
    """
    Maximum volume fraction above which mass transfer rate is set to zero.
    """
    _version = '241'
    fluent_name = 'vof-to-max-limit'
    _python_name = 'vof_to_max_limit'
    return_type = 'object'

class ia_norm_min_limit(Real):
    """
    Minimum normalized area density below which mass transfer rate is set to zero.
    """
    _version = '241'
    fluent_name = 'ia-norm-min-limit'
    _python_name = 'ia_norm_min_limit'
    return_type = 'object'

class max_rel_humidity(Real):
    """
    Maximum value of relative humidity to limit condensation rate.
    """
    _version = '241'
    fluent_name = 'max-rel-humidity'
    _python_name = 'max_rel_humidity'
    return_type = 'object'

class evaporation_condensation(Group):
    """
    Evaporation-condensation advanced options object.
    """
    _version = '241'
    fluent_name = 'evaporation-condensation'
    _python_name = 'evaporation_condensation'
    child_names = ['vof_from_min_limit', 'vof_from_max_limit', 'vof_to_min_limit', 'vof_to_max_limit', 'ia_norm_min_limit', 'max_rel_humidity']
    _child_classes = dict(
        vof_from_min_limit=vof_from_min_limit,
        vof_from_max_limit=vof_from_max_limit,
        vof_to_min_limit=vof_to_min_limit,
        vof_to_max_limit=vof_to_max_limit,
        ia_norm_min_limit=ia_norm_min_limit,
        max_rel_humidity=max_rel_humidity,
    )
    return_type = 'object'

class heat_flux_relaxation_factor(Real):
    """
    Under-relaxation factor for boiling heat flux.
    """
    _version = '241'
    fluent_name = 'heat-flux-relaxation-factor'
    _python_name = 'heat_flux_relaxation_factor'
    return_type = 'object'

class show_expert_options(Boolean):
    """
    Exposes expert options of min/max superheat along with wetting fraction controls.
    """
    _version = '241'
    fluent_name = 'show-expert-options?'
    _python_name = 'show_expert_options'
    return_type = 'object'

class two_resistance_boiling_framework(Boolean):
    """
    Allow generalized two-resistance framework for boiling model.
    """
    _version = '241'
    fluent_name = 'two-resistance-boiling-framework?'
    _python_name = 'two_resistance_boiling_framework'
    return_type = 'object'

class boiling(Group):
    """
    Boiling advanced options object.
    """
    _version = '241'
    fluent_name = 'boiling'
    _python_name = 'boiling'
    child_names = ['heat_flux_relaxation_factor', 'show_expert_options', 'two_resistance_boiling_framework']
    _child_classes = dict(
        heat_flux_relaxation_factor=heat_flux_relaxation_factor,
        show_expert_options=show_expert_options,
        two_resistance_boiling_framework=two_resistance_boiling_framework,
    )
    return_type = 'object'

class vof_min_seeding(Real):
    """
    Minimum vof seeding for non-zero area density in heat and mass transfer.
    """
    _version = '241'
    fluent_name = 'vof-min-seeding'
    _python_name = 'vof_min_seeding'
    return_type = 'object'

class ia_grad_sym(Boolean):
    """
    Interfacial area density gradient-symmetric mechanism.
    """
    _version = '241'
    fluent_name = 'ia-grad-sym?'
    _python_name = 'ia_grad_sym'
    return_type = 'object'

class area_density_1(Group):
    """
    Interfacial area density object.
    """
    _version = '241'
    fluent_name = 'area-density'
    _python_name = 'area_density'
    child_names = ['vof_min_seeding', 'ia_grad_sym']
    _child_classes = dict(
        vof_min_seeding=vof_min_seeding,
        ia_grad_sym=ia_grad_sym,
    )
    return_type = 'object'

class alternative_energy_treatment(Boolean):
    """
    Alternative treatment of latent heat source due to mass transfer.
    """
    _version = '241'
    fluent_name = 'alternative-energy-treatment?'
    _python_name = 'alternative_energy_treatment'
    return_type = 'object'

class heat_mass_transfer(Group):
    """
    Multiphase interphase heat and mass transfer numerics options object.
    """
    _version = '241'
    fluent_name = 'heat-mass-transfer'
    _python_name = 'heat_mass_transfer'
    child_names = ['cavitation', 'evaporation_condensation', 'boiling', 'area_density', 'alternative_energy_treatment']
    _child_classes = dict(
        cavitation=cavitation,
        evaporation_condensation=evaporation_condensation,
        boiling=boiling,
        area_density=area_density_1,
        alternative_energy_treatment=alternative_energy_treatment,
    )
    return_type = 'object'

class smoothed_density_stabilization_method(Boolean):
    """
    Enable/disable smoothed density for momentum stabilization.
    """
    _version = '241'
    fluent_name = 'smoothed-density-stabilization-method?'
    _python_name = 'smoothed_density_stabilization_method'
    return_type = 'object'

class num_of_density_smoothing(Integer):
    """
    Number of density smoothings.
    """
    _version = '241'
    fluent_name = 'num-of-density-smoothing'
    _python_name = 'num_of_density_smoothing'
    return_type = 'object'

class false_time_step_linearization(Boolean):
    """
    False time-step linearization for added stability.
    """
    _version = '241'
    fluent_name = 'false-time-step-linearization?'
    _python_name = 'false_time_step_linearization'
    return_type = 'object'

class enable_13(Boolean):
    """
    Enable advanced automatic time stepping for better stability.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class dt_init_limit(Real):
    """
    Maximum value for pseudo time step size during first iteration.
    """
    _version = '241'
    fluent_name = 'dt-init-limit'
    _python_name = 'dt_init_limit'
    return_type = 'object'

class dt_max_1(Real):
    """
    Maximum pseudo time step size.
    """
    _version = '241'
    fluent_name = 'dt-max'
    _python_name = 'dt_max'
    return_type = 'object'

class dt_factor_min(Real):
    """
    Minimum limit for reduction in pseudo time step size.
    """
    _version = '241'
    fluent_name = 'dt-factor-min'
    _python_name = 'dt_factor_min'
    return_type = 'object'

class dt_factor_max(Real):
    """
    Maximum limit for increase in pseudo time step size.
    """
    _version = '241'
    fluent_name = 'dt-factor-max'
    _python_name = 'dt_factor_max'
    return_type = 'object'

class max_velocity_ratio(Real):
    """
    Velocity ratio to freeze the time step size for better solution stability.
    """
    _version = '241'
    fluent_name = 'max-velocity-ratio'
    _python_name = 'max_velocity_ratio'
    return_type = 'object'

class auto_dt_advanced_controls(Group):
    """
    Automatic time-stepping controls for better solution stability.
    """
    _version = '241'
    fluent_name = 'auto-dt-advanced-controls'
    _python_name = 'auto_dt_advanced_controls'
    child_names = ['enable', 'dt_init_limit', 'dt_max', 'dt_factor_min', 'dt_factor_max', 'max_velocity_ratio']
    _child_classes = dict(
        enable=enable_13,
        dt_init_limit=dt_init_limit,
        dt_max=dt_max_1,
        dt_factor_min=dt_factor_min,
        dt_factor_max=dt_factor_max,
        max_velocity_ratio=max_velocity_ratio,
    )
    return_type = 'object'

class pseudo_transient(Group):
    """
    Pseudo-Time stability controls for multiphase flow.
    """
    _version = '241'
    fluent_name = 'pseudo-transient'
    _python_name = 'pseudo_transient'
    child_names = ['smoothed_density_stabilization_method', 'num_of_density_smoothing', 'false_time_step_linearization', 'auto_dt_advanced_controls']
    _child_classes = dict(
        smoothed_density_stabilization_method=smoothed_density_stabilization_method,
        num_of_density_smoothing=num_of_density_smoothing,
        false_time_step_linearization=false_time_step_linearization,
        auto_dt_advanced_controls=auto_dt_advanced_controls,
    )
    return_type = 'object'

class buoyancy_force_linearization(Boolean):
    """
    Enable/disable linearized buoyancy force.
    """
    _version = '241'
    fluent_name = 'buoyancy-force-linearization?'
    _python_name = 'buoyancy_force_linearization'
    return_type = 'object'

class blended_treatment_for_buoyancy_forces(Boolean):
    """
    Enable/disable use of  blended treatment for buoyancy force.
    """
    _version = '241'
    fluent_name = 'blended-treatment-for-buoyancy-forces?'
    _python_name = 'blended_treatment_for_buoyancy_forces'
    return_type = 'object'

class coupled_vof(Group):
    """
    Coupled VOF stability controls.
    """
    _version = '241'
    fluent_name = 'coupled-vof'
    _python_name = 'coupled_vof'
    child_names = ['buoyancy_force_linearization', 'blended_treatment_for_buoyancy_forces']
    _child_classes = dict(
        buoyancy_force_linearization=buoyancy_force_linearization,
        blended_treatment_for_buoyancy_forces=blended_treatment_for_buoyancy_forces,
    )
    return_type = 'object'

class low_order_rhie_chow(Boolean):
    """
    Use low order velocity interpolation in flux calculation.
    """
    _version = '241'
    fluent_name = 'low-order-rhie-chow?'
    _python_name = 'low_order_rhie_chow'
    return_type = 'object'

class rhie_chow_flux(Group):
    """
    'rhie_chow_flux' child.
    """
    _version = '241'
    fluent_name = 'rhie-chow-flux'
    _python_name = 'rhie_chow_flux'
    child_names = ['low_order_rhie_chow']
    _child_classes = dict(
        low_order_rhie_chow=low_order_rhie_chow,
    )
    return_type = 'object'

class limit_pressure_correction_gradient(Boolean):
    """
    Use limited pressure correction gradient in skewness corrections for better stability.
    """
    _version = '241'
    fluent_name = 'limit-pressure-correction-gradient?'
    _python_name = 'limit_pressure_correction_gradient'
    return_type = 'object'

class skewness_correction(Group):
    """
    Skewness correction related stabiity controls for multiphase flow.
    """
    _version = '241'
    fluent_name = 'skewness-correction'
    _python_name = 'skewness_correction'
    child_names = ['limit_pressure_correction_gradient']
    _child_classes = dict(
        limit_pressure_correction_gradient=limit_pressure_correction_gradient,
    )
    return_type = 'object'

class p_v_coupling_1(Group):
    """
    Pressure velocity coupling controls for multiphase flow.
    """
    _version = '241'
    fluent_name = 'p-v-coupling'
    _python_name = 'p_v_coupling'
    child_names = ['coupled_vof', 'rhie_chow_flux', 'skewness_correction']
    _child_classes = dict(
        coupled_vof=coupled_vof,
        rhie_chow_flux=rhie_chow_flux,
        skewness_correction=skewness_correction,
    )
    return_type = 'object'

class outer_iterations(Integer):
    """
    Number of outer iterations in hybrid nita.
    """
    _version = '241'
    fluent_name = 'outer-iterations'
    _python_name = 'outer_iterations'
    return_type = 'object'

class initial_time_steps(Integer):
    """
    Number of initial time-steps.
    """
    _version = '241'
    fluent_name = 'initial-time-steps'
    _python_name = 'initial_time_steps'
    return_type = 'object'

class initial_outer_iter(Integer):
    """
    Number of initial outer iterations.
    """
    _version = '241'
    fluent_name = 'initial-outer-iter'
    _python_name = 'initial_outer_iter'
    return_type = 'object'

class initial_outer_iterations(Group):
    """
    Hybrid NITA start-up controls.
    """
    _version = '241'
    fluent_name = 'initial-outer-iterations'
    _python_name = 'initial_outer_iterations'
    child_names = ['initial_time_steps', 'initial_outer_iter']
    _child_classes = dict(
        initial_time_steps=initial_time_steps,
        initial_outer_iter=initial_outer_iter,
    )
    return_type = 'object'

class enable_instability_detector(Boolean):
    """
    Enable instability detector for better stability.
    """
    _version = '241'
    fluent_name = 'enable-instability-detector?'
    _python_name = 'enable_instability_detector'
    return_type = 'object'

class set_cfl_limit(Real):
    """
    Courant Number limit for detection of unstable event.
    """
    _version = '241'
    fluent_name = 'set-cfl-limit'
    _python_name = 'set_cfl_limit'
    return_type = 'object'

class set_cfl_type(String, AllowedValuesMixin):
    """
    Courant Number type for detection of unstable event.
    """
    _version = '241'
    fluent_name = 'set-cfl-type'
    _python_name = 'set_cfl_type'
    return_type = 'object'

class set_velocity_limit(Real):
    """
    Velocity limit for detection of unstable event.
    """
    _version = '241'
    fluent_name = 'set-velocity-limit'
    _python_name = 'set_velocity_limit'
    return_type = 'object'

class unstable_event_outer_iterations(Integer):
    """
    Number of outer iterations for unstable event.
    """
    _version = '241'
    fluent_name = 'unstable-event-outer-iterations'
    _python_name = 'unstable_event_outer_iterations'
    return_type = 'object'

class instability_detector(Group):
    """
    Hybrid NITA instability detector controls.
    """
    _version = '241'
    fluent_name = 'instability-detector'
    _python_name = 'instability_detector'
    child_names = ['enable_instability_detector', 'set_cfl_limit', 'set_cfl_type', 'set_velocity_limit', 'unstable_event_outer_iterations']
    _child_classes = dict(
        enable_instability_detector=enable_instability_detector,
        set_cfl_limit=set_cfl_limit,
        set_cfl_type=set_cfl_type,
        set_velocity_limit=set_velocity_limit,
        unstable_event_outer_iterations=unstable_event_outer_iterations,
    )
    return_type = 'object'

class hybrid_nita(Group):
    """
    Hybrid NITA stability controls for multiphase flow.
    """
    _version = '241'
    fluent_name = 'hybrid-nita'
    _python_name = 'hybrid_nita'
    child_names = ['outer_iterations', 'initial_outer_iterations', 'instability_detector']
    _child_classes = dict(
        outer_iterations=outer_iterations,
        initial_outer_iterations=initial_outer_iterations,
        instability_detector=instability_detector,
    )
    return_type = 'object'

class solve_flow_last(Boolean):
    """
    Solve flow equation at the end of iteration as an alternative.
    """
    _version = '241'
    fluent_name = 'solve-flow-last?'
    _python_name = 'solve_flow_last'
    return_type = 'object'

class solve_exp_vof_at_end(Boolean):
    """
    Solve Explicit VOF at the end of time-step as an alternative.
    """
    _version = '241'
    fluent_name = 'solve-exp-vof-at-end?'
    _python_name = 'solve_exp_vof_at_end'
    return_type = 'object'

class equation_order(Group):
    """
    Equation Order Menu for Homogeneous Multiphase Flow Models.
    """
    _version = '241'
    fluent_name = 'equation-order'
    _python_name = 'equation_order'
    child_names = ['solve_flow_last', 'solve_exp_vof_at_end']
    _child_classes = dict(
        solve_flow_last=solve_flow_last,
        solve_exp_vof_at_end=solve_exp_vof_at_end,
    )
    return_type = 'object'

class enable_dynamic_strength(Boolean):
    """
    Enable dynamic strength to reduce compression in the tangential direction to the interface.
    """
    _version = '241'
    fluent_name = 'enable-dynamic-strength?'
    _python_name = 'enable_dynamic_strength'
    return_type = 'object'

class set_dynamic_strength_exponent(Real):
    """
    Cosine exponent in dynamic strength treatment.
    """
    _version = '241'
    fluent_name = 'set-dynamic-strength-exponent'
    _python_name = 'set_dynamic_strength_exponent'
    return_type = 'object'

class set_maximum_dynamic_strength(Real):
    """
    Maximum value of dynamic anti-diffusion strength.
    """
    _version = '241'
    fluent_name = 'set-maximum-dynamic-strength'
    _python_name = 'set_maximum_dynamic_strength'
    return_type = 'object'

class anti_diffusion(Group):
    """
    Anti Diffusion Menu for VOF/Multi-Fluid VOF Models.
    """
    _version = '241'
    fluent_name = 'anti-diffusion'
    _python_name = 'anti_diffusion'
    child_names = ['enable_dynamic_strength', 'set_dynamic_strength_exponent', 'set_maximum_dynamic_strength']
    _child_classes = dict(
        enable_dynamic_strength=enable_dynamic_strength,
        set_dynamic_strength_exponent=set_dynamic_strength_exponent,
        set_maximum_dynamic_strength=set_maximum_dynamic_strength,
    )
    return_type = 'object'

class advanced_stability_controls(Group):
    """
    Stability controls for multiphase flow.
    """
    _version = '241'
    fluent_name = 'advanced-stability-controls'
    _python_name = 'advanced_stability_controls'
    child_names = ['pseudo_transient', 'p_v_coupling', 'hybrid_nita', 'equation_order', 'anti_diffusion']
    _child_classes = dict(
        pseudo_transient=pseudo_transient,
        p_v_coupling=p_v_coupling_1,
        hybrid_nita=hybrid_nita,
        equation_order=equation_order,
        anti_diffusion=anti_diffusion,
    )
    return_type = 'object'

class recommended_defaults_for_existing_cases(Boolean):
    """
    Activate multiphase defaults for loaded case.
    """
    _version = '241'
    fluent_name = 'recommended-defaults-for-existing-cases'
    _python_name = 'recommended_defaults_for_existing_cases'
    return_type = 'object'

class old_default_of_operating_density_method(Boolean):
    """
    Revert to the old default of operating density method.
    """
    _version = '241'
    fluent_name = 'old-default-of-operating-density-method'
    _python_name = 'old_default_of_operating_density_method'
    return_type = 'object'

class old_default_of_volume_fraction_smoothing(Boolean):
    """
    Revert to the old default of volume fraction smoothings for surface tension.
    """
    _version = '241'
    fluent_name = 'old-default-of-volume-fraction-smoothing'
    _python_name = 'old_default_of_volume_fraction_smoothing'
    return_type = 'object'

class old_variant_of_pesto_for_cases_using_structured_mesh(Boolean):
    """
    Revert to the old variant of PRESTO for cases using structured mesh.
    """
    _version = '241'
    fluent_name = 'old-variant-of-pesto-for-cases-using-structured-mesh'
    _python_name = 'old_variant_of_pesto_for_cases_using_structured_mesh'
    return_type = 'object'

class revert_to_pre_r20_1_default_settings(Group):
    """
    Revert to pre-R20.1 multiphase flow default settings.
    """
    _version = '241'
    fluent_name = 'revert-to-pre-r20-1-default-settings?'
    _python_name = 'revert_to_pre_r20_1_default_settings'
    child_names = ['old_default_of_operating_density_method', 'old_default_of_volume_fraction_smoothing', 'old_variant_of_pesto_for_cases_using_structured_mesh']
    _child_classes = dict(
        old_default_of_operating_density_method=old_default_of_operating_density_method,
        old_default_of_volume_fraction_smoothing=old_default_of_volume_fraction_smoothing,
        old_variant_of_pesto_for_cases_using_structured_mesh=old_variant_of_pesto_for_cases_using_structured_mesh,
    )
    return_type = 'object'

class default_controls(Group):
    """
    Multiphase default controls object.
    """
    _version = '241'
    fluent_name = 'default-controls'
    _python_name = 'default_controls'
    child_names = ['recommended_defaults_for_existing_cases', 'revert_to_pre_r20_1_default_settings']
    _child_classes = dict(
        recommended_defaults_for_existing_cases=recommended_defaults_for_existing_cases,
        revert_to_pre_r20_1_default_settings=revert_to_pre_r20_1_default_settings,
    )
    return_type = 'object'

class pressure_corr_grad(Boolean):
    """
    Enable/disable pressure correction gradient limiting in corrector step.
    """
    _version = '241'
    fluent_name = 'pressure-corr-grad?'
    _python_name = 'pressure_corr_grad'
    return_type = 'object'

class face_pressure_calculation_method(String):
    """
    Face pressure calculation method for corrector step .
    """
    _version = '241'
    fluent_name = 'face-pressure-calculation-method'
    _python_name = 'face_pressure_calculation_method'
    return_type = 'object'

class exclude_transient_term_in_face_pressure_calc(Boolean):
    """
    Enable/disale transient terms in face pressure calculation.
    """
    _version = '241'
    fluent_name = 'exclude-transient-term-in-face-pressure-calc'
    _python_name = 'exclude_transient_term_in_face_pressure_calc'
    return_type = 'object'

class face_pressure_options(Group):
    """
    Face pressure options.
    """
    _version = '241'
    fluent_name = 'face-pressure-options'
    _python_name = 'face_pressure_options'
    child_names = ['pressure_corr_grad', 'face_pressure_calculation_method', 'exclude_transient_term_in_face_pressure_calc']
    _child_classes = dict(
        pressure_corr_grad=pressure_corr_grad,
        face_pressure_calculation_method=face_pressure_calculation_method,
        exclude_transient_term_in_face_pressure_calc=exclude_transient_term_in_face_pressure_calc,
    )
    return_type = 'object'

class face_pressure_controls(Group):
    """
    The face pressure expert controls object.
    """
    _version = '241'
    fluent_name = 'face-pressure-controls'
    _python_name = 'face_pressure_controls'
    child_names = ['face_pressure_options']
    _child_classes = dict(
        face_pressure_options=face_pressure_options,
    )
    return_type = 'object'

class execute_settings_optimization(Boolean):
    """
    Execute optimized settings for VOF.
    """
    _version = '241'
    fluent_name = 'execute-settings-optimization?'
    _python_name = 'execute_settings_optimization'
    return_type = 'object'

class execute_advanced_stabilization(Boolean):
    """
    Execute advanced stabilization for VOF.
    """
    _version = '241'
    fluent_name = 'execute-advanced-stabilization?'
    _python_name = 'execute_advanced_stabilization'
    return_type = 'object'

class blended_compressive_scheme(Boolean):
    """
    Blended Compressive discretization scheme for VOF.
    """
    _version = '241'
    fluent_name = 'blended-compressive-scheme?'
    _python_name = 'blended_compressive_scheme'
    return_type = 'object'

class pseudo_time_stabilization(Boolean):
    """
    Pseudo-Time Momentum stabilization and False Time Step Linearization methods for VOF.
    """
    _version = '241'
    fluent_name = 'pseudo-time-stabilization?'
    _python_name = 'pseudo_time_stabilization'
    return_type = 'object'

class additional_stabilization_controls(Group):
    """
    Additional advanced stability controls for VOF.
    """
    _version = '241'
    fluent_name = 'additional-stabilization-controls'
    _python_name = 'additional_stabilization_controls'
    child_names = ['blended_compressive_scheme', 'pseudo_time_stabilization']
    _child_classes = dict(
        blended_compressive_scheme=blended_compressive_scheme,
        pseudo_time_stabilization=pseudo_time_stabilization,
    )
    return_type = 'object'

class execute_additional_stability_controls(Integer):
    """
    Execute additional stability controls for VOF.
    """
    _version = '241'
    fluent_name = 'execute-additional-stability-controls?'
    _python_name = 'execute_additional_stability_controls'
    return_type = 'object'

class enable_velocity_limiting(Boolean):
    """
    Enable velocity limiting treatment.
    """
    _version = '241'
    fluent_name = 'enable-velocity-limiting?'
    _python_name = 'enable_velocity_limiting'
    return_type = 'object'

class max_vel_mag(Real):
    """
    Maximum velocity magnitude.
    """
    _version = '241'
    fluent_name = 'max-vel-mag'
    _python_name = 'max_vel_mag'
    return_type = 'object'

class vol_frac_cutoff(Real):
    """
    Volume fraction cut-off.
    """
    _version = '241'
    fluent_name = 'vol-frac-cutoff'
    _python_name = 'vol_frac_cutoff'
    return_type = 'object'

class set_velocity_and_vof_cutoffs_child(Group):
    """
    'child_object_type' of set_velocity_and_vof_cutoffs.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'set_velocity_and_vof_cutoffs_child'
    child_names = ['max_vel_mag', 'vol_frac_cutoff']
    _child_classes = dict(
        max_vel_mag=max_vel_mag,
        vol_frac_cutoff=vol_frac_cutoff,
    )
    return_type = 'object'

class set_velocity_and_vof_cutoffs(NamedObject[set_velocity_and_vof_cutoffs_child], _NonCreatableNamedObjectMixin[set_velocity_and_vof_cutoffs_child]):
    """
    Velocity and vof cutoff.
    """
    _version = '241'
    fluent_name = 'set-velocity-and-vof-cutoffs'
    _python_name = 'set_velocity_and_vof_cutoffs'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = set_velocity_and_vof_cutoffs_child
    return_type = 'object'

class set_damping_strengths_child(Real):
    """
    'child_object_type' of set_damping_strengths.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'set_damping_strengths_child'
    return_type = 'object'

class set_damping_strengths(NamedObject[set_damping_strengths_child], _NonCreatableNamedObjectMixin[set_damping_strengths_child]):
    """
    Damping strength.
    """
    _version = '241'
    fluent_name = 'set-damping-strengths'
    _python_name = 'set_damping_strengths'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = set_damping_strengths_child
    return_type = 'object'

class set_velocity_cutoff(Real):
    """
    Max velocity magnitude.
    """
    _version = '241'
    fluent_name = 'set-velocity-cutoff'
    _python_name = 'set_velocity_cutoff'
    return_type = 'object'

class set_damping_strength(Real):
    """
    Damping Strength.
    """
    _version = '241'
    fluent_name = 'set-damping-strength'
    _python_name = 'set_damping_strength'
    return_type = 'object'

class verbosity_8(Boolean):
    """
    Enable verbosity to print number of velocity limited cells during iterations.
    """
    _version = '241'
    fluent_name = 'verbosity?'
    _python_name = 'verbosity'
    return_type = 'object'

class velocity_limiting_treatment(Group):
    """
    Velocity limiting related stabiity controls for VOF.
    """
    _version = '241'
    fluent_name = 'velocity-limiting-treatment'
    _python_name = 'velocity_limiting_treatment'
    child_names = ['enable_velocity_limiting', 'set_velocity_and_vof_cutoffs', 'set_damping_strengths', 'set_velocity_cutoff', 'set_damping_strength', 'verbosity']
    _child_classes = dict(
        enable_velocity_limiting=enable_velocity_limiting,
        set_velocity_and_vof_cutoffs=set_velocity_and_vof_cutoffs,
        set_damping_strengths=set_damping_strengths,
        set_velocity_cutoff=set_velocity_cutoff,
        set_damping_strength=set_damping_strength,
        verbosity=verbosity_8,
    )
    return_type = 'object'

class solution_stabilization(Group):
    """
    VOF solution stabilization object.
    """
    _version = '241'
    fluent_name = 'solution-stabilization'
    _python_name = 'solution_stabilization'
    child_names = ['execute_settings_optimization', 'execute_advanced_stabilization', 'additional_stabilization_controls', 'execute_additional_stability_controls', 'velocity_limiting_treatment']
    _child_classes = dict(
        execute_settings_optimization=execute_settings_optimization,
        execute_advanced_stabilization=execute_advanced_stabilization,
        additional_stabilization_controls=additional_stabilization_controls,
        execute_additional_stability_controls=execute_additional_stability_controls,
        velocity_limiting_treatment=velocity_limiting_treatment,
    )
    return_type = 'object'

class multiphase_numerics(Group):
    """
    The multiphase numerics options object.
    """
    _version = '241'
    fluent_name = 'multiphase-numerics'
    _python_name = 'multiphase_numerics'
    child_names = ['porous_media', 'compressible_flow', 'boiling_parameters', 'viscous_flow', 'heat_mass_transfer', 'advanced_stability_controls', 'default_controls', 'face_pressure_controls', 'solution_stabilization']
    _child_classes = dict(
        porous_media=porous_media,
        compressible_flow=compressible_flow,
        boiling_parameters=boiling_parameters,
        viscous_flow=viscous_flow,
        heat_mass_transfer=heat_mass_transfer,
        advanced_stability_controls=advanced_stability_controls,
        default_controls=default_controls,
        face_pressure_controls=face_pressure_controls,
        solution_stabilization=solution_stabilization,
    )
    return_type = 'object'

class nb_gradient(String, AllowedValuesMixin):
    """
    Type of boundary treatment for pressure-based solver.
    """
    _version = '241'
    fluent_name = 'nb-gradient'
    _python_name = 'nb_gradient'
    return_type = 'object'

class nb_gradient_dbns(String, AllowedValuesMixin):
    """
    Type of boundary treatment for density-based solver.
    """
    _version = '241'
    fluent_name = 'nb-gradient-dbns'
    _python_name = 'nb_gradient_dbns'
    return_type = 'object'

class nb_gradient_boundary_option(Group):
    """
    Ggnb options.
    """
    _version = '241'
    fluent_name = 'nb-gradient-boundary-option'
    _python_name = 'nb_gradient_boundary_option'
    child_names = ['nb_gradient', 'nb_gradient_dbns']
    _child_classes = dict(
        nb_gradient=nb_gradient,
        nb_gradient_dbns=nb_gradient_dbns,
    )
    return_type = 'object'

class nita(Boolean):
    """
    Enable/disable Use of Noniterative Time Advancement Scheme.
    """
    _version = '241'
    fluent_name = 'nita?'
    _python_name = 'nita'
    return_type = 'object'

class verbosity_9(Integer):
    """
    NITA verbosity option.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class skewness_neighbor_coupling(Boolean):
    """
    Skewness neighbor coupling for NITA.
    """
    _version = '241'
    fluent_name = 'skewness-neighbor-coupling?'
    _python_name = 'skewness_neighbor_coupling'
    return_type = 'object'

class enable_14(Boolean):
    """
    Enable/disable hybrid NITA settings.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class options_6(String, AllowedValuesMixin):
    """
    Hybrid NITA option.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    return_type = 'object'

class multi_phase_setting(Group):
    """
    Hybrid NITA for multi-phase flow.
    """
    _version = '241'
    fluent_name = 'multi-phase-setting'
    _python_name = 'multi_phase_setting'
    child_names = ['enable', 'options']
    _child_classes = dict(
        enable=enable_14,
        options=options_6,
    )
    return_type = 'object'

class single_phase_setting(String, AllowedValuesMixin):
    """
    Hybrid NITA for single phase flow.
    """
    _version = '241'
    fluent_name = 'single-phase-setting'
    _python_name = 'single_phase_setting'
    return_type = 'object'

class hybrid_nita_settings(Group):
    """
    A hybrid NITA settings option for faster performance and better robustness.
    """
    _version = '241'
    fluent_name = 'hybrid-nita-settings'
    _python_name = 'hybrid_nita_settings'
    child_names = ['multi_phase_setting', 'single_phase_setting']
    _child_classes = dict(
        multi_phase_setting=multi_phase_setting,
        single_phase_setting=single_phase_setting,
    )
    return_type = 'object'

class nita_expert_controls(Group):
    """
    The NITA expert controls object.
    """
    _version = '241'
    fluent_name = 'nita-expert-controls'
    _python_name = 'nita_expert_controls'
    child_names = ['verbosity', 'skewness_neighbor_coupling', 'hybrid_nita_settings']
    _child_classes = dict(
        verbosity=verbosity_9,
        skewness_neighbor_coupling=skewness_neighbor_coupling,
        hybrid_nita_settings=hybrid_nita_settings,
    )
    return_type = 'object'

class high_order_pressure(Boolean):
    """
    High order pressure extrapolation at overset interface.
    """
    _version = '241'
    fluent_name = 'high-order-pressure?'
    _python_name = 'high_order_pressure'
    return_type = 'object'

class interpolation_method(String, AllowedValuesMixin):
    """
    The interpolation method for overset interface(s).
    """
    _version = '241'
    fluent_name = 'interpolation-method'
    _python_name = 'interpolation_method'
    return_type = 'object'

class orphan_cell_treatment(Boolean):
    """
    Enable solver to run with orphans present.
    """
    _version = '241'
    fluent_name = 'orphan-cell-treatment?'
    _python_name = 'orphan_cell_treatment'
    return_type = 'object'

class mass_flux_correction_method(String, AllowedValuesMixin):
    """
    Mass flux correction option at overset interfaces.
    """
    _version = '241'
    fluent_name = 'mass-flux-correction-method'
    _python_name = 'mass_flux_correction_method'
    return_type = 'object'

class hybrid_mode_selection(String, AllowedValuesMixin):
    """
    Mode for hybrid interpolation.
    """
    _version = '241'
    fluent_name = 'hybrid-mode-selection'
    _python_name = 'hybrid_mode_selection'
    return_type = 'object'

class expert_6(Group):
    """
    Overset expert solver options object.
    """
    _version = '241'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['mass_flux_correction_method', 'hybrid_mode_selection']
    _child_classes = dict(
        mass_flux_correction_method=mass_flux_correction_method,
        hybrid_mode_selection=hybrid_mode_selection,
    )
    return_type = 'object'

class overset_1(Group):
    """
    Overset solver options object.
    """
    _version = '241'
    fluent_name = 'overset'
    _python_name = 'overset'
    child_names = ['high_order_pressure', 'interpolation_method', 'orphan_cell_treatment', 'expert']
    _child_classes = dict(
        high_order_pressure=high_order_pressure,
        interpolation_method=interpolation_method,
        orphan_cell_treatment=orphan_cell_treatment,
        expert=expert_6,
    )
    return_type = 'object'

class phase_based_vof_discretization_child(Real):
    """
    'child_object_type' of phase_based_vof_discretization.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'phase_based_vof_discretization_child'
    return_type = 'object'

class phase_based_vof_discretization(NamedObject[phase_based_vof_discretization_child], _NonCreatableNamedObjectMixin[phase_based_vof_discretization_child]):
    """
    Phase-based vof discretization.
    """
    _version = '241'
    fluent_name = 'phase-based-vof-discretization'
    _python_name = 'phase_based_vof_discretization'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_based_vof_discretization_child
    return_type = 'object'

class reduced_rank_extrapolation(Boolean):
    """
    Enable/disable Reduced Rank Extrapolation method to accelerate solution time.
    """
    _version = '241'
    fluent_name = 'reduced-rank-extrapolation'
    _python_name = 'reduced_rank_extrapolation'
    return_type = 'object'

class subspace_size(Integer):
    """
    Subspace size.
    """
    _version = '241'
    fluent_name = 'subspace-size'
    _python_name = 'subspace_size'
    return_type = 'object'

class skip_iter_count(Integer):
    """
    Skip every n iterations.
    """
    _version = '241'
    fluent_name = 'skip-iter-count'
    _python_name = 'skip_iter_count'
    return_type = 'object'

class reduced_rank_extrapolation_options(Group):
    """
    Reduced Rank Extrapolation options.
    """
    _version = '241'
    fluent_name = 'reduced-rank-extrapolation-options'
    _python_name = 'reduced_rank_extrapolation_options'
    child_names = ['subspace_size', 'skip_iter_count']
    _child_classes = dict(
        subspace_size=subspace_size,
        skip_iter_count=skip_iter_count,
    )
    return_type = 'object'

class residual_smoothing_factor(Real):
    """
    Residual smoothing factor.
    """
    _version = '241'
    fluent_name = 'residual-smoothing-factor'
    _python_name = 'residual_smoothing_factor'
    return_type = 'object'

class residual_smoothing_iter_count(Integer):
    """
    Number of implicit iterations.
    """
    _version = '241'
    fluent_name = 'residual-smoothing-iter-count'
    _python_name = 'residual_smoothing_iter_count'
    return_type = 'object'

class residual_smoothing(Group):
    """
    Residual smoothing factor and number of iterations.
    """
    _version = '241'
    fluent_name = 'residual-smoothing'
    _python_name = 'residual_smoothing'
    child_names = ['residual_smoothing_factor', 'residual_smoothing_iter_count']
    _child_classes = dict(
        residual_smoothing_factor=residual_smoothing_factor,
        residual_smoothing_iter_count=residual_smoothing_iter_count,
    )
    return_type = 'object'

class high_order_rc(Boolean):
    """
    Use low order velocity interpolation in flux calculation.
    """
    _version = '241'
    fluent_name = 'high-order-rc?'
    _python_name = 'high_order_rc'
    return_type = 'object'

class high_order_rc_hybrid_treatment(Boolean):
    """
    Enable/disable use of hybrid treatment for high order Rhie-Chow flux.
    """
    _version = '241'
    fluent_name = 'high-order-rc-hybrid-treatment?'
    _python_name = 'high_order_rc_hybrid_treatment'
    return_type = 'object'

class force_treatment_of_unsteady_rc(Boolean):
    """
    Enable/disable use of forced treatment of unsteady terms in Rhie-Chow flux.
    """
    _version = '241'
    fluent_name = 'force-treatment-of-unsteady-rc?'
    _python_name = 'force_treatment_of_unsteady_rc'
    return_type = 'object'

class unstructured_var_presto_scheme(Boolean):
    """
    Enable/disable use of unstructured variant of PRESTO pressure scheme.
    """
    _version = '241'
    fluent_name = 'unstructured-var-presto-scheme?'
    _python_name = 'unstructured_var_presto_scheme'
    return_type = 'object'

class new_framework_for_vof_specific_node_based_treatment(Boolean):
    """
    Enable/disable new framework for vof specific node based treatments.
    """
    _version = '241'
    fluent_name = 'new-framework-for-vof-specific-node-based-treatment?'
    _python_name = 'new_framework_for_vof_specific_node_based_treatment'
    return_type = 'object'

class vof_numerics(Group):
    """
    VOF numeric options.
    """
    _version = '241'
    fluent_name = 'vof-numerics'
    _python_name = 'vof_numerics'
    child_names = ['high_order_rc', 'high_order_rc_hybrid_treatment', 'force_treatment_of_unsteady_rc', 'unstructured_var_presto_scheme', 'new_framework_for_vof_specific_node_based_treatment']
    _child_classes = dict(
        high_order_rc=high_order_rc,
        high_order_rc_hybrid_treatment=high_order_rc_hybrid_treatment,
        force_treatment_of_unsteady_rc=force_treatment_of_unsteady_rc,
        unstructured_var_presto_scheme=unstructured_var_presto_scheme,
        new_framework_for_vof_specific_node_based_treatment=new_framework_for_vof_specific_node_based_treatment,
    )
    return_type = 'object'

class enable_15(Boolean):
    """
    Enable Warped-Face Gradient Correction.
    """
    _version = '241'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class mode_1(String, AllowedValuesMixin):
    """
    Gradient Correction Mode.
    """
    _version = '241'
    fluent_name = 'mode'
    _python_name = 'mode'
    return_type = 'object'

class turbulence_options(String, AllowedValuesMixin):
    """
    Options:
     Legacy computations 
     New computations .
    """
    _version = '241'
    fluent_name = 'turbulence-options'
    _python_name = 'turbulence_options'
    return_type = 'object'

class warped_face_gradient_correction(Group):
    """
    Warped-face-gradient-correction object.
    """
    _version = '241'
    fluent_name = 'warped-face-gradient-correction'
    _python_name = 'warped_face_gradient_correction'
    child_names = ['enable', 'mode', 'turbulence_options']
    _child_classes = dict(
        enable=enable_15,
        mode=mode_1,
        turbulence_options=turbulence_options,
    )
    return_type = 'object'

class set_solution_methods_to_default(Command):
    """
    Set solution methods to default values.
    """
    _version = '241'
    fluent_name = 'set-solution-methods-to-default'
    _python_name = 'set_solution_methods_to_default'
    return_type = 'object'

class methods(Group):
    """
    The solution methods object.
    """
    _version = '241'
    fluent_name = 'methods'
    _python_name = 'methods'
    child_names = ['p_v_coupling', 'flux_type', 'discretization_scheme', 'pseudo_time_method', 'transient_formulation', 'unsteady_global_time', 'accelerated_non_iterative_time_marching', 'convergence_acceleration_for_stretched_meshes', 'expert', 'frozen_flux', 'gradient_scheme', 'high_order_term_relaxation', 'multiphase_numerics', 'nb_gradient_boundary_option', 'nita', 'nita_expert_controls', 'overset', 'phase_based_vof_discretization', 'reduced_rank_extrapolation', 'reduced_rank_extrapolation_options', 'residual_smoothing', 'vof_numerics', 'warped_face_gradient_correction']
    command_names = ['set_solution_methods_to_default']
    _child_classes = dict(
        p_v_coupling=p_v_coupling,
        flux_type=flux_type,
        discretization_scheme=discretization_scheme,
        pseudo_time_method=pseudo_time_method,
        transient_formulation=transient_formulation,
        unsteady_global_time=unsteady_global_time,
        accelerated_non_iterative_time_marching=accelerated_non_iterative_time_marching,
        convergence_acceleration_for_stretched_meshes=convergence_acceleration_for_stretched_meshes,
        expert=expert_5,
        frozen_flux=frozen_flux,
        gradient_scheme=gradient_scheme,
        high_order_term_relaxation=high_order_term_relaxation,
        multiphase_numerics=multiphase_numerics,
        nb_gradient_boundary_option=nb_gradient_boundary_option,
        nita=nita,
        nita_expert_controls=nita_expert_controls,
        overset=overset_1,
        phase_based_vof_discretization=phase_based_vof_discretization,
        reduced_rank_extrapolation=reduced_rank_extrapolation,
        reduced_rank_extrapolation_options=reduced_rank_extrapolation_options,
        residual_smoothing=residual_smoothing,
        vof_numerics=vof_numerics,
        warped_face_gradient_correction=warped_face_gradient_correction,
        set_solution_methods_to_default=set_solution_methods_to_default,
    )
    return_type = 'object'

class courant_number(Real):
    """
    The fine mesh Courant number (time step factor).
    """
    _version = '241'
    fluent_name = 'courant-number'
    _python_name = 'courant_number'
    return_type = 'object'

class skewness_correction_itr_count(Integer):
    """
    Iterations for skewness correction.
    """
    _version = '241'
    fluent_name = 'skewness-correction-itr-count'
    _python_name = 'skewness_correction_itr_count'
    return_type = 'object'

class neighbor_correction_itr_count(Integer):
    """
    Iterations for neighbor correction.
    """
    _version = '241'
    fluent_name = 'neighbor-correction-itr-count'
    _python_name = 'neighbor_correction_itr_count'
    return_type = 'object'

class skewness_neighbor_coupling_1(Boolean):
    """
    Skewness-Neighbor Coupling?.
    """
    _version = '241'
    fluent_name = 'skewness-neighbor-coupling'
    _python_name = 'skewness_neighbor_coupling'
    return_type = 'object'

class vof_correction_itr_count(Integer):
    """
    Iterations for vof correction.
    """
    _version = '241'
    fluent_name = 'vof-correction-itr-count'
    _python_name = 'vof_correction_itr_count'
    return_type = 'object'

class flow_courant_number(Real):
    """
    Flow Courant number.
    """
    _version = '241'
    fluent_name = 'flow-courant-number'
    _python_name = 'flow_courant_number'
    return_type = 'object'

class volume_fraction_courant_number(Real):
    """
    Volume fraction Courant number.
    """
    _version = '241'
    fluent_name = 'volume-fraction-courant-number'
    _python_name = 'volume_fraction_courant_number'
    return_type = 'object'

class explicit_pressure_under_relaxation(Real):
    """
    Explicit pressure under-relaxation.
    """
    _version = '241'
    fluent_name = 'explicit-pressure-under-relaxation'
    _python_name = 'explicit_pressure_under_relaxation'
    return_type = 'object'

class explicit_momentum_under_relaxation(Real):
    """
    Explicit momentum under-relaxation.
    """
    _version = '241'
    fluent_name = 'explicit-momentum-under-relaxation'
    _python_name = 'explicit_momentum_under_relaxation'
    return_type = 'object'

class explicit_volume_fraction_under_relaxation(Real):
    """
    Explicit volume fraction under-relaxation.
    """
    _version = '241'
    fluent_name = 'explicit-volume-fraction-under-relaxation'
    _python_name = 'explicit_volume_fraction_under_relaxation'
    return_type = 'object'

class p_v_controls(Group):
    """
    P-V-Controls.
    """
    _version = '241'
    fluent_name = 'p-v-controls'
    _python_name = 'p_v_controls'
    child_names = ['skewness_correction_itr_count', 'neighbor_correction_itr_count', 'skewness_neighbor_coupling', 'vof_correction_itr_count', 'flow_courant_number', 'volume_fraction_courant_number', 'explicit_pressure_under_relaxation', 'explicit_momentum_under_relaxation', 'explicit_volume_fraction_under_relaxation']
    _child_classes = dict(
        skewness_correction_itr_count=skewness_correction_itr_count,
        neighbor_correction_itr_count=neighbor_correction_itr_count,
        skewness_neighbor_coupling=skewness_neighbor_coupling_1,
        vof_correction_itr_count=vof_correction_itr_count,
        flow_courant_number=flow_courant_number,
        volume_fraction_courant_number=volume_fraction_courant_number,
        explicit_pressure_under_relaxation=explicit_pressure_under_relaxation,
        explicit_momentum_under_relaxation=explicit_momentum_under_relaxation,
        explicit_volume_fraction_under_relaxation=explicit_volume_fraction_under_relaxation,
    )
    return_type = 'object'

class relaxation_factor_1_child(Real):
    """
    'child_object_type' of relaxation_factor.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'relaxation_factor_child'
    return_type = 'object'

class relaxation_factor_1(NamedObject[relaxation_factor_1_child], _NonCreatableNamedObjectMixin[relaxation_factor_1_child]):
    """
    Explicit relaxation object.
    """
    _version = '241'
    fluent_name = 'relaxation-factor'
    _python_name = 'relaxation_factor'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = relaxation_factor_1_child
    return_type = 'object'

class under_relaxation_2_child(Real):
    """
    'child_object_type' of under_relaxation.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'under_relaxation_child'
    return_type = 'object'

class under_relaxation_2(NamedObject[under_relaxation_2_child], _NonCreatableNamedObjectMixin[under_relaxation_2_child]):
    """
    Under Relaxation Menu.
    """
    _version = '241'
    fluent_name = 'under-relaxation'
    _python_name = 'under_relaxation'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = under_relaxation_2_child
    return_type = 'object'

class pseudo_time_courant_number(Real):
    """
    Courant number for the local pseudo time method.
    """
    _version = '241'
    fluent_name = 'pseudo-time-courant-number'
    _python_name = 'pseudo_time_courant_number'
    return_type = 'object'

class pseudo_time_step_method_solid_zone(Boolean):
    """
    Enable/disable pseudo time step method for solid zones.
    """
    _version = '241'
    fluent_name = 'pseudo-time-step-method-solid-zone?'
    _python_name = 'pseudo_time_step_method_solid_zone'
    return_type = 'object'

class time_step_size_scale_factor(Real):
    """
    Time step size scale factor for solid zones.
    """
    _version = '241'
    fluent_name = 'time-step-size-scale-factor'
    _python_name = 'time_step_size_scale_factor'
    return_type = 'object'

class pseudo_time_method_local_time_step(Group):
    """
    Pseudo time method local time step settings object.
    """
    _version = '241'
    fluent_name = 'pseudo-time-method-local-time-step'
    _python_name = 'pseudo_time_method_local_time_step'
    child_names = ['pseudo_time_courant_number', 'pseudo_time_step_method_solid_zone', 'time_step_size_scale_factor']
    _child_classes = dict(
        pseudo_time_courant_number=pseudo_time_courant_number,
        pseudo_time_step_method_solid_zone=pseudo_time_step_method_solid_zone,
        time_step_size_scale_factor=time_step_size_scale_factor,
    )
    return_type = 'object'

class local_dt_dualts_relax_child(Real):
    """
    'child_object_type' of local_dt_dualts_relax.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'local_dt_dualts_relax_child'
    return_type = 'object'

class local_dt_dualts_relax(NamedObject[local_dt_dualts_relax_child], _NonCreatableNamedObjectMixin[local_dt_dualts_relax_child]):
    """
    Local time step relaxation factor.
    """
    _version = '241'
    fluent_name = 'local-dt-dualts-relax'
    _python_name = 'local_dt_dualts_relax'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = local_dt_dualts_relax_child
    return_type = 'object'

class global_dt_pseudo_relax_child(Real):
    """
    'child_object_type' of global_dt_pseudo_relax.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'global_dt_pseudo_relax_child'
    return_type = 'object'

class global_dt_pseudo_relax(NamedObject[global_dt_pseudo_relax_child], _NonCreatableNamedObjectMixin[global_dt_pseudo_relax_child]):
    """
    Global time step relaxation factor.
    """
    _version = '241'
    fluent_name = 'global-dt-pseudo-relax'
    _python_name = 'global_dt_pseudo_relax'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = global_dt_pseudo_relax_child
    return_type = 'object'

class pseudo_time_explicit_relaxation_factor(Group):
    """
    Pseudo time explicit relaxation factor object.
    """
    _version = '241'
    fluent_name = 'pseudo-time-explicit-relaxation-factor'
    _python_name = 'pseudo_time_explicit_relaxation_factor'
    child_names = ['local_dt_dualts_relax', 'global_dt_pseudo_relax']
    _child_classes = dict(
        local_dt_dualts_relax=local_dt_dualts_relax,
        global_dt_pseudo_relax=global_dt_pseudo_relax,
    )
    return_type = 'object'

class under_relaxation_factor_1(Real):
    """
    Under-relaxation factor to be used in .
    """
    _version = '241'
    fluent_name = 'under-relaxation-factor'
    _python_name = 'under_relaxation_factor'
    return_type = 'object'

class explicit_relaxation_factor(Real):
    """
    Explicit relaxation factor to be applied to.
    """
    _version = '241'
    fluent_name = 'explicit-relaxation-factor'
    _python_name = 'explicit_relaxation_factor'
    return_type = 'object'

class expert_7(Group):
    """
    Object.
    """
    _version = '241'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['under_relaxation_factor', 'explicit_relaxation_factor']
    _child_classes = dict(
        under_relaxation_factor=under_relaxation_factor_1,
        explicit_relaxation_factor=explicit_relaxation_factor,
    )
    return_type = 'object'

class relative_convergence_criterion(Real):
    """
    Convergence tolerance for the timestep iterations.
    """
    _version = '241'
    fluent_name = 'relative-convergence-criterion'
    _python_name = 'relative_convergence_criterion'
    return_type = 'object'

class max_iter_per_timestep_count(Integer):
    """
    Maximum number of iterations per timestep.
    """
    _version = '241'
    fluent_name = 'max-iter-per-timestep-count'
    _python_name = 'max_iter_per_timestep_count'
    return_type = 'object'

class acoustics_wave_eqn_controls(Group):
    """
    Object.
    """
    _version = '241'
    fluent_name = 'acoustics-wave-eqn-controls'
    _python_name = 'acoustics_wave_eqn_controls'
    child_names = ['expert', 'relative_convergence_criterion', 'max_iter_per_timestep_count']
    _child_classes = dict(
        expert=expert_7,
        relative_convergence_criterion=relative_convergence_criterion,
        max_iter_per_timestep_count=max_iter_per_timestep_count,
    )
    return_type = 'object'

class solution_stabilization_1(Boolean):
    """
    Automatic solver settings adjustment for solution stabilization during contact process.
    """
    _version = '241'
    fluent_name = 'solution-stabilization?'
    _python_name = 'solution_stabilization'
    return_type = 'object'

class verbosity_10(Integer):
    """
    Verbosity level for contact solution controls.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class iter_count(Integer):
    """
    Additional iterations to accomodate contact solution stabilization.
    """
    _version = '241'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'
    return_type = 'object'

class solution_stabilization_persistence(Integer):
    """
    Persistence of the solution stabilization based on events [0-contact based, 1-always on].
    """
    _version = '241'
    fluent_name = 'solution-stabilization-persistence'
    _python_name = 'solution_stabilization_persistence'
    return_type = 'object'

class persistence_fixed_time_steps(Integer):
    """
    Fixed time-steps for solution stabilization persistence after trigger.
    """
    _version = '241'
    fluent_name = 'persistence-fixed-time-steps'
    _python_name = 'persistence_fixed_time_steps'
    return_type = 'object'

class persistence_fixed_duration(Real):
    """
    Fixed time for solution stabilization persistence after trigger.
    """
    _version = '241'
    fluent_name = 'persistence-fixed-duration'
    _python_name = 'persistence_fixed_duration'
    return_type = 'object'

class extrapolation_method(String, AllowedValuesMixin):
    """
    Solution extrapolation method for cells changing status from contact to non-contact.
    """
    _version = '241'
    fluent_name = 'extrapolation-method'
    _python_name = 'extrapolation_method'
    return_type = 'object'

class parameters_2(Group):
    """
    Flexible numerics controls parameters object.
    """
    _version = '241'
    fluent_name = 'parameters'
    _python_name = 'parameters'
    child_names = ['iter_count', 'solution_stabilization_persistence', 'persistence_fixed_time_steps', 'persistence_fixed_duration', 'extrapolation_method']
    _child_classes = dict(
        iter_count=iter_count,
        solution_stabilization_persistence=solution_stabilization_persistence,
        persistence_fixed_time_steps=persistence_fixed_time_steps,
        persistence_fixed_duration=persistence_fixed_duration,
        extrapolation_method=extrapolation_method,
    )
    return_type = 'object'

class first_to_second_order_blending_1(Real):
    """
    Factor to control first order to second order blending.
    """
    _version = '241'
    fluent_name = 'first-to-second-order-blending'
    _python_name = 'first_to_second_order_blending'
    return_type = 'object'

class first_to_second_order_blending_list(RealList):
    """
    List set factor to control first order to second order blending.
    """
    _version = '241'
    fluent_name = 'first-to-second-order-blending-list'
    _python_name = 'first_to_second_order_blending_list'
    return_type = 'object'

class scheme_1(Integer):
    """
    Advection scheme for contact event stability.
    """
    _version = '241'
    fluent_name = 'scheme'
    _python_name = 'scheme'
    return_type = 'object'

class flow_skew_diffusion_exclude(Boolean):
    """
    Exclude skew diffusion discretization contribution for momentum.
    """
    _version = '241'
    fluent_name = 'flow-skew-diffusion-exclude?'
    _python_name = 'flow_skew_diffusion_exclude'
    return_type = 'object'

class scalars_skew_diffusion_exclude(Boolean):
    """
    Exclude skew diffusion discretization contribution for scalars.
    """
    _version = '241'
    fluent_name = 'scalars-skew-diffusion-exclude?'
    _python_name = 'scalars_skew_diffusion_exclude'
    return_type = 'object'

class rhie_chow_flux_specify(Boolean):
    """
    Allow specification of the the rhie-chow flux method.
    """
    _version = '241'
    fluent_name = 'rhie-chow-flux-specify?'
    _python_name = 'rhie_chow_flux_specify'
    return_type = 'object'

class rhie_chow_method(Integer):
    """
    The rhie-chow flux method.
    """
    _version = '241'
    fluent_name = 'rhie-chow-method'
    _python_name = 'rhie_chow_method'
    return_type = 'object'

class spatial(Group):
    """
    Flexible numeris object.
    """
    _version = '241'
    fluent_name = 'spatial'
    _python_name = 'spatial'
    child_names = ['first_to_second_order_blending', 'first_to_second_order_blending_list', 'scheme', 'flow_skew_diffusion_exclude', 'scalars_skew_diffusion_exclude', 'rhie_chow_flux_specify', 'rhie_chow_method']
    _child_classes = dict(
        first_to_second_order_blending=first_to_second_order_blending_1,
        first_to_second_order_blending_list=first_to_second_order_blending_list,
        scheme=scheme_1,
        flow_skew_diffusion_exclude=flow_skew_diffusion_exclude,
        scalars_skew_diffusion_exclude=scalars_skew_diffusion_exclude,
        rhie_chow_flux_specify=rhie_chow_flux_specify,
        rhie_chow_method=rhie_chow_method,
    )
    return_type = 'object'

class transient_parameters_specify(Boolean):
    """
    Enable/Disable transient parameter specification.
    """
    _version = '241'
    fluent_name = 'transient-parameters-specify?'
    _python_name = 'transient_parameters_specify'
    return_type = 'object'

class transient_scheme(Integer):
    """
    Temporal scheme to be used.
    """
    _version = '241'
    fluent_name = 'transient-scheme'
    _python_name = 'transient_scheme'
    return_type = 'object'

class time_scale_modification_method(Integer):
    """
    Time scale modification method [0-time-step, 1-cfl].
    """
    _version = '241'
    fluent_name = 'time-scale-modification-method'
    _python_name = 'time_scale_modification_method'
    return_type = 'object'

class time_scale_modification_factor(Real):
    """
    Time-scale modification factor.
    """
    _version = '241'
    fluent_name = 'time-scale-modification-factor'
    _python_name = 'time_scale_modification_factor'
    return_type = 'object'

class transient(Group):
    """
    Flexible numeris object.
    """
    _version = '241'
    fluent_name = 'transient'
    _python_name = 'transient'
    child_names = ['transient_parameters_specify', 'transient_scheme', 'time_scale_modification_method', 'time_scale_modification_factor']
    _child_classes = dict(
        transient_parameters_specify=transient_parameters_specify,
        transient_scheme=transient_scheme,
        time_scale_modification_method=time_scale_modification_method,
        time_scale_modification_factor=time_scale_modification_factor,
    )
    return_type = 'object'

class enforce_laplace_coarsening(Boolean):
    """
    Enable/disable the use of laplace coarsening in AMG.
    """
    _version = '241'
    fluent_name = 'enforce-laplace-coarsening?'
    _python_name = 'enforce_laplace_coarsening'
    return_type = 'object'

class increase_pre_sweeps(Boolean):
    """
    Enable/disable increase in AMG pre-sweeps.
    """
    _version = '241'
    fluent_name = 'increase-pre-sweeps?'
    _python_name = 'increase_pre_sweeps'
    return_type = 'object'

class pre_sweeps(Integer):
    """
    The number of AMG pre-sweeps.
    """
    _version = '241'
    fluent_name = 'pre-sweeps'
    _python_name = 'pre_sweeps'
    return_type = 'object'

class specify_coarsening_rate(Boolean):
    """
    Enable/disable AMG coarsening rate.
    """
    _version = '241'
    fluent_name = 'specify-coarsening-rate?'
    _python_name = 'specify_coarsening_rate'
    return_type = 'object'

class coarsen_rate(Integer):
    """
    AMG coarsening rate.
    """
    _version = '241'
    fluent_name = 'coarsen-rate'
    _python_name = 'coarsen_rate'
    return_type = 'object'

class amg(Group):
    """
    Flexible numeris object.
    """
    _version = '241'
    fluent_name = 'amg'
    _python_name = 'amg'
    child_names = ['enforce_laplace_coarsening', 'increase_pre_sweeps', 'pre_sweeps', 'specify_coarsening_rate', 'coarsen_rate']
    _child_classes = dict(
        enforce_laplace_coarsening=enforce_laplace_coarsening,
        increase_pre_sweeps=increase_pre_sweeps,
        pre_sweeps=pre_sweeps,
        specify_coarsening_rate=specify_coarsening_rate,
        coarsen_rate=coarsen_rate,
    )
    return_type = 'object'

class model_ramping(Boolean):
    """
    Enable/disable model ramping for solver stability and accuracy.
    """
    _version = '241'
    fluent_name = 'model-ramping?'
    _python_name = 'model_ramping'
    return_type = 'object'

class ramp_flow(Boolean):
    """
    Enable/disable ramp flow for solver stability and accuracy.
    """
    _version = '241'
    fluent_name = 'ramp-flow?'
    _python_name = 'ramp_flow'
    return_type = 'object'

class ramp_turbulence(Boolean):
    """
    Enable/disable ramp turbulence for solver stability and accuracy.
    """
    _version = '241'
    fluent_name = 'ramp-turbulence?'
    _python_name = 'ramp_turbulence'
    return_type = 'object'

class ramp_scalars(Boolean):
    """
    Enable/disable ramp all scalar transport equations for solver stability and accuracy.
    """
    _version = '241'
    fluent_name = 'ramp-scalars?'
    _python_name = 'ramp_scalars'
    return_type = 'object'

class models_2(Group):
    """
    Flexible numeris object.
    """
    _version = '241'
    fluent_name = 'models'
    _python_name = 'models'
    child_names = ['model_ramping', 'ramp_flow', 'ramp_turbulence', 'ramp_scalars']
    _child_classes = dict(
        model_ramping=model_ramping,
        ramp_flow=ramp_flow,
        ramp_turbulence=ramp_turbulence,
        ramp_scalars=ramp_scalars,
    )
    return_type = 'object'

class pv_coupling_controls(Boolean):
    """
    Enable/disable pressure-velocity coupling method change for solver stability and accuracy.
    """
    _version = '241'
    fluent_name = 'pv-coupling-controls?'
    _python_name = 'pv_coupling_controls'
    return_type = 'object'

class pv_coupling_method(Integer):
    """
    Pressure-velocity coupling method change for solver stability and accuracy.
    """
    _version = '241'
    fluent_name = 'pv-coupling-method'
    _python_name = 'pv_coupling_method'
    return_type = 'object'

class gradient_controls(Boolean):
    """
    Enable/disable gradient method for solver stability and accuracy.
    """
    _version = '241'
    fluent_name = 'gradient-controls?'
    _python_name = 'gradient_controls'
    return_type = 'object'

class specify_gradient_method(Integer):
    """
    Gradient method for solver stability and accuracy.
    """
    _version = '241'
    fluent_name = 'specify-gradient-method'
    _python_name = 'specify_gradient_method'
    return_type = 'object'

class methods_1(Group):
    """
    Flexible numeris object.
    """
    _version = '241'
    fluent_name = 'methods'
    _python_name = 'methods'
    child_names = ['pv_coupling_controls', 'pv_coupling_method', 'gradient_controls', 'specify_gradient_method']
    _child_classes = dict(
        pv_coupling_controls=pv_coupling_controls,
        pv_coupling_method=pv_coupling_method,
        gradient_controls=gradient_controls,
        specify_gradient_method=specify_gradient_method,
    )
    return_type = 'object'

class compute_statistics(Boolean):
    """
    Enable/disable solution statistics for contact updates.
    """
    _version = '241'
    fluent_name = 'compute-statistics?'
    _python_name = 'compute_statistics'
    return_type = 'object'

class statistics_level(Integer):
    """
    Level of detail for solution statistics.
    """
    _version = '241'
    fluent_name = 'statistics-level'
    _python_name = 'statistics_level'
    return_type = 'object'

class miscellaneous(Group):
    """
    Flexible numeris object.
    """
    _version = '241'
    fluent_name = 'miscellaneous'
    _python_name = 'miscellaneous'
    child_names = ['compute_statistics', 'statistics_level']
    _child_classes = dict(
        compute_statistics=compute_statistics,
        statistics_level=statistics_level,
    )
    return_type = 'object'

class set_settings_to_default(Command):
    """
    Set contact solution stabilization to default.
    """
    _version = '241'
    fluent_name = 'set-settings-to-default'
    _python_name = 'set_settings_to_default'
    return_type = 'object'

class contact_solution_controls(Group):
    """
    Solver controls for contact marks method.
    """
    _version = '241'
    fluent_name = 'contact-solution-controls'
    _python_name = 'contact_solution_controls'
    child_names = ['solution_stabilization', 'verbosity', 'parameters', 'spatial', 'transient', 'amg', 'models', 'methods', 'miscellaneous']
    command_names = ['set_settings_to_default']
    _child_classes = dict(
        solution_stabilization=solution_stabilization_1,
        verbosity=verbosity_10,
        parameters=parameters_2,
        spatial=spatial,
        transient=transient,
        amg=amg,
        models=models_2,
        methods=methods_1,
        miscellaneous=miscellaneous,
        set_settings_to_default=set_settings_to_default,
    )
    return_type = 'object'

class equations_child(Boolean):
    """
    'child_object_type' of equations.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'equations_child'
    return_type = 'object'

class equations(NamedObject[equations_child], _NonCreatableNamedObjectMixin[equations_child]):
    """
    Equations to be solved.
    """
    _version = '241'
    fluent_name = 'equations'
    _python_name = 'equations'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = equations_child
    return_type = 'object'

class min_pressure(Real):
    """
    Minimum vapor pressure limit for cavitation model.
    """
    _version = '241'
    fluent_name = 'min-pressure'
    _python_name = 'min_pressure'
    return_type = 'object'

class max_pressure(Real):
    """
    Maximum allowable absolute pressure.
    """
    _version = '241'
    fluent_name = 'max-pressure'
    _python_name = 'max_pressure'
    return_type = 'object'

class min_temperature_1(Real):
    """
    Minimum allowable temperature.
    """
    _version = '241'
    fluent_name = 'min-temperature'
    _python_name = 'min_temperature'
    return_type = 'object'

class max_temperature(Real):
    """
    Maximum allowable temperature.
    """
    _version = '241'
    fluent_name = 'max-temperature'
    _python_name = 'max_temperature'
    return_type = 'object'

class min_tke(Real):
    """
    Minimum allowable k.
    """
    _version = '241'
    fluent_name = 'min-tke'
    _python_name = 'min_tke'
    return_type = 'object'

class min_lam_tke(Real):
    """
    Minimum allowable k1.
    """
    _version = '241'
    fluent_name = 'min-lam-tke'
    _python_name = 'min_lam_tke'
    return_type = 'object'

class min_des_tke(Real):
    """
    Minimum allowable k.
    """
    _version = '241'
    fluent_name = 'min-des-tke'
    _python_name = 'min_des_tke'
    return_type = 'object'

class min_epsilon(Real):
    """
    Minimum allowable epsilon.
    """
    _version = '241'
    fluent_name = 'min-epsilon'
    _python_name = 'min_epsilon'
    return_type = 'object'

class min_des_epsilon(Real):
    """
    Minimum allowable epsilon.
    """
    _version = '241'
    fluent_name = 'min-des-epsilon'
    _python_name = 'min_des_epsilon'
    return_type = 'object'

class min_v2f_tke(Real):
    """
    Minimum allowable k.
    """
    _version = '241'
    fluent_name = 'min-v2f-tke'
    _python_name = 'min_v2f_tke'
    return_type = 'object'

class min_v2f_epsilon(Real):
    """
    Minimum allowable epsilon.
    """
    _version = '241'
    fluent_name = 'min-v2f-epsilon'
    _python_name = 'min_v2f_epsilon'
    return_type = 'object'

class min_vel_var_scale(Real):
    """
    Minimum allowable v2.
    """
    _version = '241'
    fluent_name = 'min-vel-var-scale'
    _python_name = 'min_vel_var_scale'
    return_type = 'object'

class min_elliptic_relax_func(Real):
    """
    Minimum allowable f.
    """
    _version = '241'
    fluent_name = 'min-elliptic-relax-func'
    _python_name = 'min_elliptic_relax_func'
    return_type = 'object'

class min_omega(Real):
    """
    Minimum allowable omega.
    """
    _version = '241'
    fluent_name = 'min-omega'
    _python_name = 'min_omega'
    return_type = 'object'

class min_des_omega(Real):
    """
    Minimum allowable omega.
    """
    _version = '241'
    fluent_name = 'min-des-omega'
    _python_name = 'min_des_omega'
    return_type = 'object'

class max_turb_visc_ratio(Real):
    """
    Maximum allowable turbulent/laminar viscosity ratio.
    """
    _version = '241'
    fluent_name = 'max-turb-visc-ratio'
    _python_name = 'max_turb_visc_ratio'
    return_type = 'object'

class positivity_rate(Real):
    """
    Positivity Rate Limit.
    """
    _version = '241'
    fluent_name = 'positivity-rate'
    _python_name = 'positivity_rate'
    return_type = 'object'

class min_vol_frac_for_matrix_sol(Real):
    """
    Minimum Vol. Frac. for Matrix Solution.
    """
    _version = '241'
    fluent_name = 'min-vol-frac-for-matrix-sol'
    _python_name = 'min_vol_frac_for_matrix_sol'
    return_type = 'object'

class limits(Group):
    """
    Solver limits for the values of various solution variables.
    """
    _version = '241'
    fluent_name = 'limits'
    _python_name = 'limits'
    child_names = ['min_pressure', 'max_pressure', 'min_temperature', 'max_temperature', 'min_tke', 'min_lam_tke', 'min_des_tke', 'min_epsilon', 'min_des_epsilon', 'min_v2f_tke', 'min_v2f_epsilon', 'min_vel_var_scale', 'min_elliptic_relax_func', 'min_omega', 'min_des_omega', 'max_turb_visc_ratio', 'positivity_rate', 'min_vol_frac_for_matrix_sol']
    _child_classes = dict(
        min_pressure=min_pressure,
        max_pressure=max_pressure,
        min_temperature=min_temperature_1,
        max_temperature=max_temperature,
        min_tke=min_tke,
        min_lam_tke=min_lam_tke,
        min_des_tke=min_des_tke,
        min_epsilon=min_epsilon,
        min_des_epsilon=min_des_epsilon,
        min_v2f_tke=min_v2f_tke,
        min_v2f_epsilon=min_v2f_epsilon,
        min_vel_var_scale=min_vel_var_scale,
        min_elliptic_relax_func=min_elliptic_relax_func,
        min_omega=min_omega,
        min_des_omega=min_des_omega,
        max_turb_visc_ratio=max_turb_visc_ratio,
        positivity_rate=positivity_rate,
        min_vol_frac_for_matrix_sol=min_vol_frac_for_matrix_sol,
    )
    return_type = 'object'

class cycle_type(String, AllowedValuesMixin):
    """
    Multigrid cycle type.
    """
    _version = '241'
    fluent_name = 'cycle-type'
    _python_name = 'cycle_type'
    return_type = 'object'

class termination_criteria(Real):
    """
    Multigrid termination criterion.
    """
    _version = '241'
    fluent_name = 'termination-criteria'
    _python_name = 'termination_criteria'
    return_type = 'object'

class residual_reduction_tolerance(Real):
    """
    Multigrid residual reduction tolerance.
    """
    _version = '241'
    fluent_name = 'residual-reduction-tolerance'
    _python_name = 'residual_reduction_tolerance'
    return_type = 'object'

class method_8(String, AllowedValuesMixin):
    """
    Multigrid method.
    """
    _version = '241'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class stabilization(String, AllowedValuesMixin):
    """
    Multigrid stabilization.
    """
    _version = '241'
    fluent_name = 'stabilization'
    _python_name = 'stabilization'
    return_type = 'object'

class mg_controls_child(Group):
    """
    'child_object_type' of mg_controls.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'mg_controls_child'
    child_names = ['cycle_type', 'termination_criteria', 'residual_reduction_tolerance', 'method', 'stabilization']
    _child_classes = dict(
        cycle_type=cycle_type,
        termination_criteria=termination_criteria,
        residual_reduction_tolerance=residual_reduction_tolerance,
        method=method_8,
        stabilization=stabilization,
    )
    return_type = 'object'

class mg_controls(NamedObject[mg_controls_child], _NonCreatableNamedObjectMixin[mg_controls_child]):
    """
    Multi-grid controls object.
    """
    _version = '241'
    fluent_name = 'mg-controls'
    _python_name = 'mg_controls'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = mg_controls_child
    return_type = 'object'

class pre_sweeps_1(Integer):
    """
    Number of pre-relaxations for fixed cycles.
    """
    _version = '241'
    fluent_name = 'pre-sweeps'
    _python_name = 'pre_sweeps'
    return_type = 'object'

class post_sweeps(Integer):
    """
    Number of post-relaxations for fixed cycles.
    """
    _version = '241'
    fluent_name = 'post-sweeps'
    _python_name = 'post_sweeps'
    return_type = 'object'

class max_cycle(Integer):
    """
    Maximum number of cycles.
    """
    _version = '241'
    fluent_name = 'max-cycle'
    _python_name = 'max_cycle'
    return_type = 'object'

class fixed_cycle_parameters(Group):
    """
    'fixed_cycle_parameters' child.
    """
    _version = '241'
    fluent_name = 'fixed-cycle-parameters'
    _python_name = 'fixed_cycle_parameters'
    child_names = ['pre_sweeps', 'post_sweeps', 'max_cycle']
    _child_classes = dict(
        pre_sweeps=pre_sweeps_1,
        post_sweeps=post_sweeps,
        max_cycle=max_cycle,
    )
    return_type = 'object'

class max_coarse_levels(Integer):
    """
    Maximum number of coarse grid levels.
    """
    _version = '241'
    fluent_name = 'max-coarse-levels'
    _python_name = 'max_coarse_levels'
    return_type = 'object'

class coarsen_by_interval(Integer):
    """
    Coarsen by interval.
    """
    _version = '241'
    fluent_name = 'coarsen-by-interval'
    _python_name = 'coarsen_by_interval'
    return_type = 'object'

class conservative_coarsening(Boolean):
    """
    Use conservative AMG coarsening?.
    """
    _version = '241'
    fluent_name = 'conservative-coarsening?'
    _python_name = 'conservative_coarsening'
    return_type = 'object'

class aggressive_coarsening(Boolean):
    """
    Enable aggressive AMG coarsening for scalar equation systems.
    """
    _version = '241'
    fluent_name = 'aggressive-coarsening?'
    _python_name = 'aggressive_coarsening'
    return_type = 'object'

class laplace_coarsening(Boolean):
    """
    AMG laplace coarsening options.
    """
    _version = '241'
    fluent_name = 'laplace-coarsening?'
    _python_name = 'laplace_coarsening'
    return_type = 'object'

class coarsening_parameters(Group):
    """
    'coarsening_parameters' child.
    """
    _version = '241'
    fluent_name = 'coarsening-parameters'
    _python_name = 'coarsening_parameters'
    child_names = ['max_coarse_levels', 'coarsen_by_interval', 'conservative_coarsening', 'aggressive_coarsening', 'laplace_coarsening']
    _child_classes = dict(
        max_coarse_levels=max_coarse_levels,
        coarsen_by_interval=coarsen_by_interval,
        conservative_coarsening=conservative_coarsening,
        aggressive_coarsening=aggressive_coarsening,
        laplace_coarsening=laplace_coarsening,
    )
    return_type = 'object'

class smoother_type(String, AllowedValuesMixin):
    """
    Smoother type.
    """
    _version = '241'
    fluent_name = 'smoother-type'
    _python_name = 'smoother_type'
    return_type = 'object'

class scalar_parameters(Group):
    """
    AMG scalar parameters object.
    """
    _version = '241'
    fluent_name = 'scalar-parameters'
    _python_name = 'scalar_parameters'
    child_names = ['fixed_cycle_parameters', 'coarsening_parameters', 'smoother_type']
    _child_classes = dict(
        fixed_cycle_parameters=fixed_cycle_parameters,
        coarsening_parameters=coarsening_parameters,
        smoother_type=smoother_type,
    )
    return_type = 'object'

class pre_sweeps_2(Integer):
    """
    Coupled:number of pre-relaxations for fixed cycles.
    """
    _version = '241'
    fluent_name = 'pre-sweeps'
    _python_name = 'pre_sweeps'
    return_type = 'object'

class post_sweeps_1(Integer):
    """
    Coupled:number of post-relaxations for fixed cycles.
    """
    _version = '241'
    fluent_name = 'post-sweeps'
    _python_name = 'post_sweeps'
    return_type = 'object'

class max_cycle_1(Integer):
    """
    Coupled:maximum number of cycles.
    """
    _version = '241'
    fluent_name = 'max-cycle'
    _python_name = 'max_cycle'
    return_type = 'object'

class fixed_cycle_parameters_1(Group):
    """
    'fixed_cycle_parameters' child.
    """
    _version = '241'
    fluent_name = 'fixed-cycle-parameters'
    _python_name = 'fixed_cycle_parameters'
    child_names = ['pre_sweeps', 'post_sweeps', 'max_cycle']
    _child_classes = dict(
        pre_sweeps=pre_sweeps_2,
        post_sweeps=post_sweeps_1,
        max_cycle=max_cycle_1,
    )
    return_type = 'object'

class max_coarse_levels_1(Integer):
    """
    Coupled:maximum number of coarse grid levels.
    """
    _version = '241'
    fluent_name = 'max-coarse-levels'
    _python_name = 'max_coarse_levels'
    return_type = 'object'

class coarsen_by_interval_1(Integer):
    """
    Coupled:coarsen by interval.
    """
    _version = '241'
    fluent_name = 'coarsen-by-interval'
    _python_name = 'coarsen_by_interval'
    return_type = 'object'

class aggressive_coarsening_1(Boolean):
    """
    Enable aggressive AMG coarsening for coupled equation systems.
    """
    _version = '241'
    fluent_name = 'aggressive-coarsening?'
    _python_name = 'aggressive_coarsening'
    return_type = 'object'

class coarsening_parameters_1(Group):
    """
    'coarsening_parameters' child.
    """
    _version = '241'
    fluent_name = 'coarsening-parameters'
    _python_name = 'coarsening_parameters'
    child_names = ['max_coarse_levels', 'coarsen_by_interval', 'conservative_coarsening', 'aggressive_coarsening', 'laplace_coarsening']
    _child_classes = dict(
        max_coarse_levels=max_coarse_levels_1,
        coarsen_by_interval=coarsen_by_interval_1,
        conservative_coarsening=conservative_coarsening,
        aggressive_coarsening=aggressive_coarsening_1,
        laplace_coarsening=laplace_coarsening,
    )
    return_type = 'object'

class smoother_type_1(String, AllowedValuesMixin):
    """
    Coupled:smoother type.
    """
    _version = '241'
    fluent_name = 'smoother-type'
    _python_name = 'smoother_type'
    return_type = 'object'

class coupled_parameters(Group):
    """
    AMG coupled-parameters object.
    """
    _version = '241'
    fluent_name = 'coupled-parameters'
    _python_name = 'coupled_parameters'
    child_names = ['fixed_cycle_parameters', 'coarsening_parameters', 'smoother_type']
    _child_classes = dict(
        fixed_cycle_parameters=fixed_cycle_parameters_1,
        coarsening_parameters=coarsening_parameters_1,
        smoother_type=smoother_type_1,
    )
    return_type = 'object'

class max_fine_relaxations(Integer):
    """
    Maximum number of fine level relaxations for flexible cycle.
    """
    _version = '241'
    fluent_name = 'max-fine-relaxations'
    _python_name = 'max_fine_relaxations'
    return_type = 'object'

class max_coarse_relaxations(Integer):
    """
    Maximum number of coarse level relaxations for flexible cycle.
    """
    _version = '241'
    fluent_name = 'max-coarse-relaxations'
    _python_name = 'max_coarse_relaxations'
    return_type = 'object'

class flexible_cycle_parameters(Group):
    """
    AMG flexible cycle paramters object.
    """
    _version = '241'
    fluent_name = 'flexible-cycle-parameters'
    _python_name = 'flexible_cycle_parameters'
    child_names = ['max_fine_relaxations', 'max_coarse_relaxations']
    _child_classes = dict(
        max_fine_relaxations=max_fine_relaxations,
        max_coarse_relaxations=max_coarse_relaxations,
    )
    return_type = 'object'

class verbosity_11(Integer):
    """
    Multigrid verbosity.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class options_7(Group):
    """
    AMG options object.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['verbosity']
    _child_classes = dict(
        verbosity=verbosity_11,
    )
    return_type = 'object'

class amg_controls(Group):
    """
    AMG controls object.
    """
    _version = '241'
    fluent_name = 'amg-controls'
    _python_name = 'amg_controls'
    child_names = ['scalar_parameters', 'coupled_parameters', 'flexible_cycle_parameters', 'options']
    _child_classes = dict(
        scalar_parameters=scalar_parameters,
        coupled_parameters=coupled_parameters,
        flexible_cycle_parameters=flexible_cycle_parameters,
        options=options_7,
    )
    return_type = 'object'

class pre_sweeps_3(Integer):
    """
    Number of fine grid relaxations.
    """
    _version = '241'
    fluent_name = 'pre-sweeps'
    _python_name = 'pre_sweeps'
    return_type = 'object'

class post_sweeps_2(Integer):
    """
    Number of relaxations after interpolation.
    """
    _version = '241'
    fluent_name = 'post-sweeps'
    _python_name = 'post_sweeps'
    return_type = 'object'

class fixed_cycle_parameters_2(Group):
    """
    FAS multigrid fixed cycle parameters object.
    """
    _version = '241'
    fluent_name = 'fixed-cycle-parameters'
    _python_name = 'fixed_cycle_parameters'
    child_names = ['pre_sweeps', 'post_sweeps']
    _child_classes = dict(
        pre_sweeps=pre_sweeps_3,
        post_sweeps=post_sweeps_2,
    )
    return_type = 'object'

class max_coarse_levels_2(Integer):
    """
    Number of coarse grid levels.
    """
    _version = '241'
    fluent_name = 'max-coarse-levels'
    _python_name = 'max_coarse_levels'
    return_type = 'object'

class coarsen_by_interval_2(Integer):
    """
    Coarsen-by interval.
    """
    _version = '241'
    fluent_name = 'coarsen-by-interval'
    _python_name = 'coarsen_by_interval'
    return_type = 'object'

class coarsening_parameters_2(Group):
    """
    FAS multigrid coarsening parameters object.
    """
    _version = '241'
    fluent_name = 'coarsening-parameters'
    _python_name = 'coarsening_parameters'
    child_names = ['max_coarse_levels', 'coarsen_by_interval']
    _child_classes = dict(
        max_coarse_levels=max_coarse_levels_2,
        coarsen_by_interval=coarsen_by_interval_2,
    )
    return_type = 'object'

class courant_number_reduction(Real):
    """
    Coarse-grid Courant number reduction factor.
    """
    _version = '241'
    fluent_name = 'courant-number-reduction'
    _python_name = 'courant_number_reduction'
    return_type = 'object'

class correction_reduction(Real):
    """
    Correction relaxation factor.
    """
    _version = '241'
    fluent_name = 'correction-reduction'
    _python_name = 'correction_reduction'
    return_type = 'object'

class correction_smoothing(Real):
    """
    Correction smoothing factor.
    """
    _version = '241'
    fluent_name = 'correction-smoothing'
    _python_name = 'correction_smoothing'
    return_type = 'object'

class species_correction_reduction(Real):
    """
    Species relaxation factor.
    """
    _version = '241'
    fluent_name = 'species-correction-reduction'
    _python_name = 'species_correction_reduction'
    return_type = 'object'

class relaxation_factor_2(Group):
    """
    FAS multigrid relaxation factor object.
    """
    _version = '241'
    fluent_name = 'relaxation-factor'
    _python_name = 'relaxation_factor'
    child_names = ['courant_number_reduction', 'correction_reduction', 'correction_smoothing', 'species_correction_reduction']
    _child_classes = dict(
        courant_number_reduction=courant_number_reduction,
        correction_reduction=correction_reduction,
        correction_smoothing=correction_smoothing,
        species_correction_reduction=species_correction_reduction,
    )
    return_type = 'object'

class options_8(Group):
    """
    FAS multigrid options object.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['verbosity']
    _child_classes = dict(
        verbosity=verbosity_11,
    )
    return_type = 'object'

class fas_mg_controls(Group):
    """
    FAS multigrid controls object.
    """
    _version = '241'
    fluent_name = 'fas-mg-controls'
    _python_name = 'fas_mg_controls'
    child_names = ['fixed_cycle_parameters', 'coarsening_parameters', 'relaxation_factor', 'options']
    _child_classes = dict(
        fixed_cycle_parameters=fixed_cycle_parameters_2,
        coarsening_parameters=coarsening_parameters_2,
        relaxation_factor=relaxation_factor_2,
        options=options_8,
    )
    return_type = 'object'

class enable_gpu(Boolean):
    """
    Enable/Disable on GPGPU.
    """
    _version = '241'
    fluent_name = 'enable-gpu?'
    _python_name = 'enable_gpu'
    return_type = 'object'

class term_criterion(Real):
    """
    Termination criterion.
    """
    _version = '241'
    fluent_name = 'term-criterion'
    _python_name = 'term_criterion'
    return_type = 'object'

class solver_1(String, AllowedValuesMixin):
    """
    GPGPU equation solver.
    """
    _version = '241'
    fluent_name = 'solver'
    _python_name = 'solver'
    return_type = 'object'

class max_num_cycle(Integer):
    """
    Maximum number of cycles.
    """
    _version = '241'
    fluent_name = 'max-num-cycle'
    _python_name = 'max_num_cycle'
    return_type = 'object'

class coarsen_by_size(Integer):
    """
    GPGPU equation coarsen by size.
    """
    _version = '241'
    fluent_name = 'coarsen-by-size'
    _python_name = 'coarsen_by_size'
    return_type = 'object'

class pre_sweep(Integer):
    """
    Number of fine grid relaxations.
    """
    _version = '241'
    fluent_name = 'pre-sweep'
    _python_name = 'pre_sweep'
    return_type = 'object'

class post_sweep(Integer):
    """
    Number of relaxations after interpolation.
    """
    _version = '241'
    fluent_name = 'post-sweep'
    _python_name = 'post_sweep'
    return_type = 'object'

class smoother(String):
    """
    Smoother.
    """
    _version = '241'
    fluent_name = 'smoother'
    _python_name = 'smoother'
    return_type = 'object'

class amg_gpgpu_options_child(Group):
    """
    'child_object_type' of amg_gpgpu_options.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'amg_gpgpu_options_child'
    child_names = ['enable_gpu', 'term_criterion', 'solver', 'max_num_cycle', 'coarsen_by_size', 'pre_sweep', 'post_sweep', 'smoother']
    _child_classes = dict(
        enable_gpu=enable_gpu,
        term_criterion=term_criterion,
        solver=solver_1,
        max_num_cycle=max_num_cycle,
        coarsen_by_size=coarsen_by_size,
        pre_sweep=pre_sweep,
        post_sweep=post_sweep,
        smoother=smoother,
    )
    return_type = 'object'

class amg_gpgpu_options(NamedObject[amg_gpgpu_options_child], _NonCreatableNamedObjectMixin[amg_gpgpu_options_child]):
    """
    AMG GPGPU options object.
    """
    _version = '241'
    fluent_name = 'amg-gpgpu-options'
    _python_name = 'amg_gpgpu_options'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = amg_gpgpu_options_child
    return_type = 'object'

class multi_grid(Group):
    """
    Multi-grid object.
    """
    _version = '241'
    fluent_name = 'multi-grid'
    _python_name = 'multi_grid'
    child_names = ['mg_controls', 'amg_controls', 'fas_mg_controls', 'amg_gpgpu_options']
    _child_classes = dict(
        mg_controls=mg_controls,
        amg_controls=amg_controls,
        fas_mg_controls=fas_mg_controls,
        amg_gpgpu_options=amg_gpgpu_options,
    )
    return_type = 'object'

class coefficient(Real):
    """
    Multi-stage coefficient.
    """
    _version = '241'
    fluent_name = 'coefficient'
    _python_name = 'coefficient'
    return_type = 'object'

class update_dissipation(Boolean):
    """
    Update artificial dissipation at stage.
    """
    _version = '241'
    fluent_name = 'update-dissipation?'
    _python_name = 'update_dissipation'
    return_type = 'object'

class update_viscous(Boolean):
    """
    Update viscous stresses at stage.
    """
    _version = '241'
    fluent_name = 'update-viscous?'
    _python_name = 'update_viscous'
    return_type = 'object'

class multi_stage_child(Group):
    """
    'child_object_type' of multi_stage.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'multi_stage_child'
    child_names = ['coefficient', 'update_dissipation', 'update_viscous']
    _child_classes = dict(
        coefficient=coefficient,
        update_dissipation=update_dissipation,
        update_viscous=update_viscous,
    )
    return_type = 'object'

class multi_stage(ListObject[multi_stage_child]):
    """
    Multi-stage settings object.
    """
    _version = '241'
    fluent_name = 'multi-stage'
    _python_name = 'multi_stage'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = multi_stage_child
    return_type = 'object'

class limiter_type(String, AllowedValuesMixin):
    """
    Slope-limiter type.
    """
    _version = '241'
    fluent_name = 'limiter-type'
    _python_name = 'limiter_type'
    return_type = 'object'

class cell_to_limiting(String, AllowedValuesMixin):
    """
    Slope-limiter direction.
    """
    _version = '241'
    fluent_name = 'cell-to-limiting'
    _python_name = 'cell_to_limiting'
    return_type = 'object'

class limiter_filter(Boolean):
    """
    Enable limiter filter?.
    """
    _version = '241'
    fluent_name = 'limiter-filter?'
    _python_name = 'limiter_filter'
    return_type = 'object'

class spatial_discretization_limiter(Group):
    """
    The slope limiter set object.
    """
    _version = '241'
    fluent_name = 'spatial-discretization-limiter'
    _python_name = 'spatial_discretization_limiter'
    child_names = ['limiter_type', 'cell_to_limiting', 'limiter_filter']
    _child_classes = dict(
        limiter_type=limiter_type,
        cell_to_limiting=cell_to_limiting,
        limiter_filter=limiter_filter,
    )
    return_type = 'object'

class enable_pseudo_time_method(Boolean):
    """
    Enable/disable pseudo time method.
    """
    _version = '241'
    fluent_name = 'enable-pseudo-time-method?'
    _python_name = 'enable_pseudo_time_method'
    return_type = 'object'

class pseudo_time_scale_factor(Real):
    """
    Pseudo time scale factor.
    """
    _version = '241'
    fluent_name = 'pseudo-time-scale-factor'
    _python_name = 'pseudo_time_scale_factor'
    return_type = 'object'

class implicit_under_relaxation_factor(Real):
    """
    Implicit under-relaxation factor.
    """
    _version = '241'
    fluent_name = 'implicit-under-relaxation-factor'
    _python_name = 'implicit_under_relaxation_factor'
    return_type = 'object'

class local_dt_child(Group):
    """
    'child_object_type' of local_dt.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'local_dt_child'
    child_names = ['enable_pseudo_time_method', 'pseudo_time_scale_factor', 'implicit_under_relaxation_factor']
    _child_classes = dict(
        enable_pseudo_time_method=enable_pseudo_time_method,
        pseudo_time_scale_factor=pseudo_time_scale_factor,
        implicit_under_relaxation_factor=implicit_under_relaxation_factor,
    )
    return_type = 'object'

class local_dt(NamedObject[local_dt_child], _NonCreatableNamedObjectMixin[local_dt_child]):
    """
    Local time step method object.
    """
    _version = '241'
    fluent_name = 'local-dt'
    _python_name = 'local_dt'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = local_dt_child
    return_type = 'object'

class global_dt_child(Group):
    """
    'child_object_type' of global_dt.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'global_dt_child'
    child_names = ['enable_pseudo_time_method', 'pseudo_time_scale_factor', 'implicit_under_relaxation_factor']
    _child_classes = dict(
        enable_pseudo_time_method=enable_pseudo_time_method,
        pseudo_time_scale_factor=pseudo_time_scale_factor,
        implicit_under_relaxation_factor=implicit_under_relaxation_factor,
    )
    return_type = 'object'

class global_dt(NamedObject[global_dt_child], _NonCreatableNamedObjectMixin[global_dt_child]):
    """
    Global time step method object.
    """
    _version = '241'
    fluent_name = 'global-dt'
    _python_name = 'global_dt'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = global_dt_child
    return_type = 'object'

class pseudo_time_method_usage(Group):
    """
    Psueo time method expert settings object.
    """
    _version = '241'
    fluent_name = 'pseudo-time-method-usage'
    _python_name = 'pseudo_time_method_usage'
    child_names = ['local_dt', 'global_dt']
    _child_classes = dict(
        local_dt=local_dt,
        global_dt=global_dt,
    )
    return_type = 'object'

class expert_8(Group):
    """
    Expert options object.
    """
    _version = '241'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['spatial_discretization_limiter', 'pseudo_time_method_usage']
    _child_classes = dict(
        spatial_discretization_limiter=spatial_discretization_limiter,
        pseudo_time_method_usage=pseudo_time_method_usage,
    )
    return_type = 'object'

class two_stage(Boolean):
    """
    Enable/disable two-stage Runge-Kutta scheme.
    """
    _version = '241'
    fluent_name = 'two-stage?'
    _python_name = 'two_stage'
    return_type = 'object'

class default_multi_stage(Boolean):
    """
    Enable/disable default multi-stage Runge-Kutta scheme.
    """
    _version = '241'
    fluent_name = 'default-multi-stage?'
    _python_name = 'default_multi_stage'
    return_type = 'object'

class runge_kutta(Group):
    """
    Runge-Kutta schemes setup object.
    """
    _version = '241'
    fluent_name = 'runge-kutta'
    _python_name = 'runge_kutta'
    child_names = ['two_stage', 'default_multi_stage']
    _child_classes = dict(
        two_stage=two_stage,
        default_multi_stage=default_multi_stage,
    )
    return_type = 'object'

class fast_transient_settings(Group):
    """
    The fast transient settings object.
    """
    _version = '241'
    fluent_name = 'fast-transient-settings'
    _python_name = 'fast_transient_settings'
    child_names = ['runge_kutta']
    _child_classes = dict(
        runge_kutta=runge_kutta,
    )
    return_type = 'object'

class relaxation_method_1(String):
    """
    The solver relaxation method.
    """
    _version = '241'
    fluent_name = 'relaxation-method'
    _python_name = 'relaxation_method'
    return_type = 'object'

class correction_tolerance_child(Real):
    """
    'child_object_type' of correction_tolerance.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'correction_tolerance_child'
    return_type = 'object'

class correction_tolerance(NamedObject[correction_tolerance_child], _NonCreatableNamedObjectMixin[correction_tolerance_child]):
    """
    Correction tolerance object.
    """
    _version = '241'
    fluent_name = 'correction-tolerance'
    _python_name = 'correction_tolerance'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = correction_tolerance_child
    return_type = 'object'

class relaxation(Real):
    """
    The under-relaxation for heat flux coefficient.
    """
    _version = '241'
    fluent_name = 'relaxation'
    _python_name = 'relaxation'
    return_type = 'object'

class flux(String, AllowedValuesMixin):
    """
    The heat flux calculation method for solid zones.
    """
    _version = '241'
    fluent_name = 'flux'
    _python_name = 'flux'
    return_type = 'object'

class gradient(String, AllowedValuesMixin):
    """
    The temperature gradient calculation method for solid zones.
    """
    _version = '241'
    fluent_name = 'gradient'
    _python_name = 'gradient'
    return_type = 'object'

class anisotropic_solid_heat_transfer(Group):
    """
    Anisotropic solid heat transfer object.
    """
    _version = '241'
    fluent_name = 'anisotropic-solid-heat-transfer'
    _python_name = 'anisotropic_solid_heat_transfer'
    child_names = ['relaxation', 'flux', 'gradient']
    _child_classes = dict(
        relaxation=relaxation,
        flux=flux,
        gradient=gradient,
    )
    return_type = 'object'

class advanced_2(Group):
    """
    Solution method advanced object.
    """
    _version = '241'
    fluent_name = 'advanced'
    _python_name = 'advanced'
    child_names = ['multi_grid', 'multi_stage', 'expert', 'fast_transient_settings', 'relaxation_method', 'correction_tolerance', 'anisotropic_solid_heat_transfer']
    _child_classes = dict(
        multi_grid=multi_grid,
        multi_stage=multi_stage,
        expert=expert_8,
        fast_transient_settings=fast_transient_settings,
        relaxation_method=relaxation_method_1,
        correction_tolerance=correction_tolerance,
        anisotropic_solid_heat_transfer=anisotropic_solid_heat_transfer,
    )
    return_type = 'object'

class reset_solution_controls(Command):
    """
    Reset the solution controls to default.
    """
    _version = '241'
    fluent_name = 'reset-solution-controls'
    _python_name = 'reset_solution_controls'
    return_type = 'object'

class reset_amg_controls(Command):
    """
    Rest AMG controls to default.
    """
    _version = '241'
    fluent_name = 'reset-amg-controls'
    _python_name = 'reset_amg_controls'
    return_type = 'object'

class reset_multi_stage_parameters(Command):
    """
    Reset multi-stage parameters.
    """
    _version = '241'
    fluent_name = 'reset-multi-stage-parameters'
    _python_name = 'reset_multi_stage_parameters'
    return_type = 'object'

class reset_limits(Command):
    """
    Reset limits to default.
    """
    _version = '241'
    fluent_name = 'reset-limits'
    _python_name = 'reset_limits'
    return_type = 'object'

class reset_pseudo_time_method_generic(Command):
    """
    Set pseudo time method parameters to default.
    """
    _version = '241'
    fluent_name = 'reset-pseudo-time-method-generic'
    _python_name = 'reset_pseudo_time_method_generic'
    return_type = 'object'

class reset_pseudo_time_method_equations(Command):
    """
    Set pseudo time method equation specific usage to default.
    """
    _version = '241'
    fluent_name = 'reset-pseudo-time-method-equations'
    _python_name = 'reset_pseudo_time_method_equations'
    return_type = 'object'

class reset_pseudo_time_method_relaxations(Command):
    """
    Set pseudo time method relaxation factors to default.
    """
    _version = '241'
    fluent_name = 'reset-pseudo-time-method-relaxations'
    _python_name = 'reset_pseudo_time_method_relaxations'
    return_type = 'object'

class reset_pseudo_time_method_scale_factors(Command):
    """
    Set pseudo time method time scale factors to default.
    """
    _version = '241'
    fluent_name = 'reset-pseudo-time-method-scale-factors'
    _python_name = 'reset_pseudo_time_method_scale_factors'
    return_type = 'object'

class controls_1(Group):
    """
    Solution controls object.
    """
    _version = '241'
    fluent_name = 'controls'
    _python_name = 'controls'
    child_names = ['courant_number', 'p_v_controls', 'relaxation_factor', 'under_relaxation', 'pseudo_time_method_local_time_step', 'pseudo_time_explicit_relaxation_factor', 'acoustics_wave_eqn_controls', 'contact_solution_controls', 'equations', 'limits', 'advanced']
    command_names = ['reset_solution_controls', 'reset_amg_controls', 'reset_multi_stage_parameters', 'reset_limits', 'reset_pseudo_time_method_generic', 'reset_pseudo_time_method_equations', 'reset_pseudo_time_method_relaxations', 'reset_pseudo_time_method_scale_factors']
    _child_classes = dict(
        courant_number=courant_number,
        p_v_controls=p_v_controls,
        relaxation_factor=relaxation_factor_1,
        under_relaxation=under_relaxation_2,
        pseudo_time_method_local_time_step=pseudo_time_method_local_time_step,
        pseudo_time_explicit_relaxation_factor=pseudo_time_explicit_relaxation_factor,
        acoustics_wave_eqn_controls=acoustics_wave_eqn_controls,
        contact_solution_controls=contact_solution_controls,
        equations=equations,
        limits=limits,
        advanced=advanced_2,
        reset_solution_controls=reset_solution_controls,
        reset_amg_controls=reset_amg_controls,
        reset_multi_stage_parameters=reset_multi_stage_parameters,
        reset_limits=reset_limits,
        reset_pseudo_time_method_generic=reset_pseudo_time_method_generic,
        reset_pseudo_time_method_equations=reset_pseudo_time_method_equations,
        reset_pseudo_time_method_relaxations=reset_pseudo_time_method_relaxations,
        reset_pseudo_time_method_scale_factors=reset_pseudo_time_method_scale_factors,
    )
    return_type = 'object'

class report_type(String, AllowedValuesMixin):
    """
    'report_type' child.
    """
    _version = '241'
    fluent_name = 'report-type'
    _python_name = 'report_type'
    return_type = 'object'

class per_zone(Boolean):
    """
    'per_zone' child.
    """
    _version = '241'
    fluent_name = 'per-zone?'
    _python_name = 'per_zone'
    return_type = 'object'

class average_over(Integer):
    """
    'average_over' child.
    """
    _version = '241'
    fluent_name = 'average-over'
    _python_name = 'average_over'
    return_type = 'object'

class retain_instantaneous_values(Boolean):
    """
    'retain_instantaneous_values' child.
    """
    _version = '241'
    fluent_name = 'retain-instantaneous-values?'
    _python_name = 'retain_instantaneous_values'
    return_type = 'object'

class cell_zones_3(StringList, AllowedValuesMixin):
    """
    'cell_zones' child.
    """
    _version = '241'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'
    return_type = 'object'

class face_zones(StringList, AllowedValuesMixin):
    """
    'face_zones' child.
    """
    _version = '241'
    fluent_name = 'face-zones'
    _python_name = 'face_zones'
    return_type = 'object'

class create_output_parameter(Command):
    """
    'create_output_parameter' command.
    """
    _version = '241'
    fluent_name = 'create-output-parameter'
    _python_name = 'create_output_parameter'
    return_type = 'object'

class mesh_1_child(Group):
    """
    'child_object_type' of mesh.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'mesh_child'
    child_names = ['name', 'report_type', 'per_zone', 'average_over', 'retain_instantaneous_values', 'cell_zones', 'face_zones']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        report_type=report_type,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        cell_zones=cell_zones_3,
        face_zones=face_zones,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class mesh_1(NamedObject[mesh_1_child], CreatableNamedObjectMixinOld[mesh_1_child]):
    """
    'mesh' child.
    """
    _version = '241'
    fluent_name = 'mesh'
    _python_name = 'mesh'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = mesh_1_child
    return_type = 'object'

class field(String, AllowedValuesMixin):
    """
    'field' child.
    """
    _version = '241'
    fluent_name = 'field'
    _python_name = 'field'
    return_type = 'object'

class surface_names(StringList, AllowedValuesMixin):
    """
    'surface_names' child.
    """
    _version = '241'
    fluent_name = 'surface-names'
    _python_name = 'surface_names'
    return_type = 'object'

class per_surface(Boolean):
    """
    'per_surface' child.
    """
    _version = '241'
    fluent_name = 'per-surface?'
    _python_name = 'per_surface'
    return_type = 'object'

class custom_vector(String, AllowedValuesMixin):
    """
    'custom_vector' child.
    """
    _version = '241'
    fluent_name = 'custom-vector'
    _python_name = 'custom_vector'
    return_type = 'object'

class phase_27(String, AllowedValuesMixin):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    return_type = 'object'

class physics_1(StringList, AllowedValuesMixin):
    """
    'physics' child.
    """
    _version = '241'
    fluent_name = 'physics'
    _python_name = 'physics'
    return_type = 'object'

class geometry_5(StringList, AllowedValuesMixin):
    """
    'geometry' child.
    """
    _version = '241'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    return_type = 'object'

class surfaces_4(StringList, AllowedValuesMixin):
    """
    'surfaces' child.
    """
    _version = '241'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    return_type = 'object'

class surface_1_child(Group):
    """
    'child_object_type' of surface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'surface_child'
    child_names = ['name', 'report_type', 'field', 'surface_names', 'per_surface', 'average_over', 'retain_instantaneous_values', 'custom_vector', 'phase', 'physics', 'geometry', 'surfaces']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        report_type=report_type,
        field=field,
        surface_names=surface_names,
        per_surface=per_surface,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        custom_vector=custom_vector,
        phase=phase_27,
        physics=physics_1,
        geometry=geometry_5,
        surfaces=surfaces_4,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class surface_1(NamedObject[surface_1_child], CreatableNamedObjectMixinOld[surface_1_child]):
    """
    'surface' child.
    """
    _version = '241'
    fluent_name = 'surface'
    _python_name = 'surface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = surface_1_child
    return_type = 'object'

class cell_zones_4(StringList, AllowedValuesMixin):
    """
    Cell zones and cell registers and expression volumes.
    """
    _version = '241'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'
    return_type = 'object'

class volume_child(Group):
    """
    'child_object_type' of volume.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'volume_child'
    child_names = ['name', 'report_type', 'field', 'cell_zones', 'per_zone', 'average_over', 'retain_instantaneous_values', 'phase', 'physics', 'geometry']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        report_type=report_type,
        field=field,
        cell_zones=cell_zones_4,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        phase=phase_27,
        physics=physics_1,
        geometry=geometry_5,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class volume(NamedObject[volume_child], CreatableNamedObjectMixinOld[volume_child]):
    """
    'volume' child.
    """
    _version = '241'
    fluent_name = 'volume'
    _python_name = 'volume'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = volume_child
    return_type = 'object'

class force_vector(RealList):
    """
    'force_vector' child.
    """
    _version = '241'
    fluent_name = 'force-vector'
    _python_name = 'force_vector'
    return_type = 'object'

class zones_2(StringList, AllowedValuesMixin):
    """
    'zones' child.
    """
    _version = '241'
    fluent_name = 'zones'
    _python_name = 'zones'
    return_type = 'object'

class report_output_type(String, AllowedValuesMixin):
    """
    'report_output_type' child.
    """
    _version = '241'
    fluent_name = 'report-output-type'
    _python_name = 'report_output_type'
    return_type = 'object'

class force_child(Group):
    """
    'child_object_type' of force.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'force_child'
    child_names = ['name', 'report_type', 'force_vector', 'reference_frame', 'zones', 'per_zone', 'average_over', 'retain_instantaneous_values', 'report_output_type', 'physics', 'geometry']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        report_type=report_type,
        force_vector=force_vector,
        reference_frame=reference_frame,
        zones=zones_2,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        report_output_type=report_output_type,
        physics=physics_1,
        geometry=geometry_5,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class force(NamedObject[force_child], CreatableNamedObjectMixinOld[force_child]):
    """
    'force' child.
    """
    _version = '241'
    fluent_name = 'force'
    _python_name = 'force'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = force_child
    return_type = 'object'

class lift_child(Group):
    """
    'child_object_type' of lift.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'lift_child'
    child_names = ['name', 'report_type', 'force_vector', 'reference_frame', 'zones', 'per_zone', 'average_over', 'retain_instantaneous_values', 'report_output_type', 'physics', 'geometry']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        report_type=report_type,
        force_vector=force_vector,
        reference_frame=reference_frame,
        zones=zones_2,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        report_output_type=report_output_type,
        physics=physics_1,
        geometry=geometry_5,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class lift(NamedObject[lift_child], CreatableNamedObjectMixinOld[lift_child]):
    """
    'lift' child.
    """
    _version = '241'
    fluent_name = 'lift'
    _python_name = 'lift'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = lift_child
    return_type = 'object'

class drag_child(Group):
    """
    'child_object_type' of drag.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'drag_child'
    child_names = ['name', 'report_type', 'force_vector', 'reference_frame', 'zones', 'per_zone', 'average_over', 'retain_instantaneous_values', 'report_output_type', 'physics', 'geometry']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        report_type=report_type,
        force_vector=force_vector,
        reference_frame=reference_frame,
        zones=zones_2,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        report_output_type=report_output_type,
        physics=physics_1,
        geometry=geometry_5,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class drag(NamedObject[drag_child], CreatableNamedObjectMixinOld[drag_child]):
    """
    'drag' child.
    """
    _version = '241'
    fluent_name = 'drag'
    _python_name = 'drag'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = drag_child
    return_type = 'object'

class mom_center(RealList):
    """
    'mom_center' child.
    """
    _version = '241'
    fluent_name = 'mom-center'
    _python_name = 'mom_center'
    return_type = 'object'

class mom_axis(RealList):
    """
    'mom_axis' child.
    """
    _version = '241'
    fluent_name = 'mom-axis'
    _python_name = 'mom_axis'
    return_type = 'object'

class moment_child(Group):
    """
    'child_object_type' of moment.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'moment_child'
    child_names = ['name', 'report_type', 'mom_center', 'mom_axis', 'reference_frame', 'zones', 'per_zone', 'average_over', 'retain_instantaneous_values', 'report_output_type', 'physics', 'geometry']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        report_type=report_type,
        mom_center=mom_center,
        mom_axis=mom_axis,
        reference_frame=reference_frame,
        zones=zones_2,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        report_output_type=report_output_type,
        physics=physics_1,
        geometry=geometry_5,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class moment(NamedObject[moment_child], CreatableNamedObjectMixinOld[moment_child]):
    """
    'moment' child.
    """
    _version = '241'
    fluent_name = 'moment'
    _python_name = 'moment'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = moment_child
    return_type = 'object'

class time_1_child(Group):
    """
    'child_object_type' of time.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'time_child'
    command_names = ['create_output_parameter']
    _child_classes = dict(
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class time_1(NamedObject[time_1_child], CreatableNamedObjectMixinOld[time_1_child]):
    """
    'time' child.
    """
    _version = '241'
    fluent_name = 'time'
    _python_name = 'time'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = time_1_child
    return_type = 'object'

class boundaries_1(StringList, AllowedValuesMixin):
    """
    'boundaries' child.
    """
    _version = '241'
    fluent_name = 'boundaries'
    _python_name = 'boundaries'
    return_type = 'object'

class flux_1_child(Group):
    """
    'child_object_type' of flux.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'flux_child'
    child_names = ['name', 'report_type', 'boundaries', 'per_zone', 'average_over', 'retain_instantaneous_values', 'phase', 'physics', 'geometry']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        report_type=report_type,
        boundaries=boundaries_1,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        phase=phase_27,
        physics=physics_1,
        geometry=geometry_5,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class flux_1(NamedObject[flux_1_child], CreatableNamedObjectMixinOld[flux_1_child]):
    """
    'flux' child.
    """
    _version = '241'
    fluent_name = 'flux'
    _python_name = 'flux'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = flux_1_child
    return_type = 'object'

class injection_list(StringList, AllowedValuesMixin):
    """
    'injection_list' child.
    """
    _version = '241'
    fluent_name = 'injection-list'
    _python_name = 'injection_list'
    return_type = 'object'

class per_injection(Boolean):
    """
    'per_injection' child.
    """
    _version = '241'
    fluent_name = 'per-injection?'
    _python_name = 'per_injection'
    return_type = 'object'

class mass_criterion(Real):
    """
    'mass_criterion' child.
    """
    _version = '241'
    fluent_name = 'mass-criterion'
    _python_name = 'mass_criterion'
    return_type = 'object'

class user_specified_origin_and_axis(Boolean):
    """
    'user_specified_origin_and_axis' child.
    """
    _version = '241'
    fluent_name = 'user-specified-origin-and-axis?'
    _python_name = 'user_specified_origin_and_axis'
    return_type = 'object'

class show_unsteady_rate(Boolean):
    """
    'show_unsteady_rate' child.
    """
    _version = '241'
    fluent_name = 'show-unsteady-rate?'
    _python_name = 'show_unsteady_rate'
    return_type = 'object'

class inj_mass_rate_prev_time(Real):
    """
    'inj_mass_rate_prev_time' child.
    """
    _version = '241'
    fluent_name = 'inj-mass-rate-prev-time'
    _python_name = 'inj_mass_rate_prev_time'
    return_type = 'object'

class inj_mass_rate_prev_mass(Real):
    """
    'inj_mass_rate_prev_mass' child.
    """
    _version = '241'
    fluent_name = 'inj-mass-rate-prev-mass'
    _python_name = 'inj_mass_rate_prev_mass'
    return_type = 'object'

class inj_mass_rate_last_flow(Real):
    """
    'inj_mass_rate_last_flow' child.
    """
    _version = '241'
    fluent_name = 'inj-mass-rate-last-flow'
    _python_name = 'inj_mass_rate_last_flow'
    return_type = 'object'

class inj_mass_rate_last_tstp(Real):
    """
    'inj_mass_rate_last_tstp' child.
    """
    _version = '241'
    fluent_name = 'inj-mass-rate-last-tstp'
    _python_name = 'inj_mass_rate_last_tstp'
    return_type = 'object'

class injection_1_child(Group):
    """
    'child_object_type' of injection.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'injection_child'
    child_names = ['name', 'report_type', 'injection_list', 'boundaries', 'physics', 'per_injection', 'average_over', 'retain_instantaneous_values', 'mass_criterion', 'user_specified_origin_and_axis', 'origin', 'axis', 'show_unsteady_rate', 'inj_mass_rate_prev_time', 'inj_mass_rate_prev_mass', 'inj_mass_rate_last_flow', 'inj_mass_rate_last_tstp']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        report_type=report_type,
        injection_list=injection_list,
        boundaries=boundaries_1,
        physics=physics_1,
        per_injection=per_injection,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        mass_criterion=mass_criterion,
        user_specified_origin_and_axis=user_specified_origin_and_axis,
        origin=origin,
        axis=axis,
        show_unsteady_rate=show_unsteady_rate,
        inj_mass_rate_prev_time=inj_mass_rate_prev_time,
        inj_mass_rate_prev_mass=inj_mass_rate_prev_mass,
        inj_mass_rate_last_flow=inj_mass_rate_last_flow,
        inj_mass_rate_last_tstp=inj_mass_rate_last_tstp,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class injection_1(NamedObject[injection_1_child], CreatableNamedObjectMixinOld[injection_1_child]):
    """
    'injection' child.
    """
    _version = '241'
    fluent_name = 'injection'
    _python_name = 'injection'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = injection_1_child
    return_type = 'object'

class function_name(String, AllowedValuesMixin):
    """
    'function_name' child.
    """
    _version = '241'
    fluent_name = 'function-name'
    _python_name = 'function_name'
    return_type = 'object'

class input_params(StringList, AllowedValuesMixin):
    """
    'input_params' child.
    """
    _version = '241'
    fluent_name = 'input-params'
    _python_name = 'input_params'
    return_type = 'object'

class user_defined_5_child(Group):
    """
    'child_object_type' of user_defined.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'user_defined_child'
    child_names = ['name', 'average_over', 'retain_instantaneous_values', 'function_name', 'input_params']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        function_name=function_name,
        input_params=input_params,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class user_defined_5(NamedObject[user_defined_5_child], CreatableNamedObjectMixinOld[user_defined_5_child]):
    """
    'user_defined' child.
    """
    _version = '241'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = user_defined_5_child
    return_type = 'object'

class nodal_diameters(StringList, AllowedValuesMixin):
    """
    'nodal_diameters' child.
    """
    _version = '241'
    fluent_name = 'nodal-diameters'
    _python_name = 'nodal_diameters'
    return_type = 'object'

class integrate_over(Integer):
    """
    'integrate_over' child.
    """
    _version = '241'
    fluent_name = 'integrate-over'
    _python_name = 'integrate_over'
    return_type = 'object'

class normalization(Real):
    """
    'normalization' child.
    """
    _version = '241'
    fluent_name = 'normalization'
    _python_name = 'normalization'
    return_type = 'object'

class realcomponent(Boolean):
    """
    'realcomponent' child.
    """
    _version = '241'
    fluent_name = 'realcomponent?'
    _python_name = 'realcomponent'
    return_type = 'object'

class aeromechanics_child(Group):
    """
    'child_object_type' of aeromechanics.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'aeromechanics_child'
    child_names = ['name', 'report_type', 'zones', 'per_zone', 'nodal_diameters', 'average_over', 'integrate_over', 'normalization', 'realcomponent']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        report_type=report_type,
        zones=zones_2,
        per_zone=per_zone,
        nodal_diameters=nodal_diameters,
        average_over=average_over,
        integrate_over=integrate_over,
        normalization=normalization,
        realcomponent=realcomponent,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class aeromechanics(NamedObject[aeromechanics_child], CreatableNamedObjectMixinOld[aeromechanics_child]):
    """
    'aeromechanics' child.
    """
    _version = '241'
    fluent_name = 'aeromechanics'
    _python_name = 'aeromechanics'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = aeromechanics_child
    return_type = 'object'

class icing_3_child(Group):
    """
    'child_object_type' of icing.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'icing_child'
    child_names = ['name', 'report_type']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        report_type=report_type,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class icing_3(NamedObject[icing_3_child], CreatableNamedObjectMixinOld[icing_3_child]):
    """
    'icing' child.
    """
    _version = '241'
    fluent_name = 'icing'
    _python_name = 'icing'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = icing_3_child
    return_type = 'object'

class expr_value(Real):
    """
    'expr_value' child.
    """
    _version = '241'
    fluent_name = 'expr-value'
    _python_name = 'expr_value'
    return_type = 'object'

class define(String, AllowedValuesMixin):
    """
    'define' child.
    """
    _version = '241'
    fluent_name = 'define'
    _python_name = 'define'
    return_type = 'object'

class list_valid_report_names(String, AllowedValuesMixin):
    """
    'list_valid_report_names' child.
    """
    _version = '241'
    fluent_name = 'list-valid-report-names'
    _python_name = 'list_valid_report_names'
    return_type = 'object'

class expression_1_child(Group):
    """
    'child_object_type' of expression.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'expression_child'
    child_names = ['name', 'average_over', 'expr_value', 'define', 'list_valid_report_names']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        average_over=average_over,
        expr_value=expr_value,
        define=define,
        list_valid_report_names=list_valid_report_names,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class expression_1(NamedObject[expression_1_child], CreatableNamedObjectMixinOld[expression_1_child]):
    """
    'expression' child.
    """
    _version = '241'
    fluent_name = 'expression'
    _python_name = 'expression'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = expression_1_child
    return_type = 'object'

class single_valued_expression_child(Group):
    """
    'child_object_type' of single_valued_expression.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'single_valued_expression_child'
    child_names = ['name', 'average_over', 'retain_instantaneous_values', 'definition', 'list_valid_report_names']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        definition=definition,
        list_valid_report_names=list_valid_report_names,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class single_valued_expression(NamedObject[single_valued_expression_child], CreatableNamedObjectMixinOld[single_valued_expression_child]):
    """
    'single_valued_expression' child.
    """
    _version = '241'
    fluent_name = 'single-valued-expression'
    _python_name = 'single_valued_expression'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = single_valued_expression_child
    return_type = 'object'

class custom_child(Group):
    """
    'child_object_type' of custom.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'custom_child'
    child_names = ['name']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name,
        create_output_parameter=create_output_parameter,
    )
    return_type = 'object'

class custom(NamedObject[custom_child], CreatableNamedObjectMixinOld[custom_child]):
    """
    'custom' child.
    """
    _version = '241'
    fluent_name = 'custom'
    _python_name = 'custom'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = custom_child
    return_type = 'object'

class report_defs(StringList, AllowedValuesMixin):
    """
    'report_defs' child.
    """
    _version = '241'
    fluent_name = 'report-defs'
    _python_name = 'report_defs'
    return_type = 'object'

class compute_2(Command):
    """
    'compute' command.
    """
    _version = '241'
    fluent_name = 'compute'
    _python_name = 'compute'
    argument_names = ['report_defs']
    _child_classes = dict(
        report_defs=report_defs,
    )
    return_type = 'object'

class copy_from(String, AllowedValuesMixin):
    """
    'copy_from' child.
    """
    _version = '241'
    fluent_name = 'copy-from'
    _python_name = 'copy_from'
    return_type = 'object'

class copy_to(String):
    """
    'copy_to' child.
    """
    _version = '241'
    fluent_name = 'copy-to'
    _python_name = 'copy_to'
    return_type = 'object'

class copy_2(Command):
    """
    'copy' command.
    """
    _version = '241'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['copy_from', 'copy_to']
    _child_classes = dict(
        copy_from=copy_from,
        copy_to=copy_to,
    )
    return_type = 'object'

class report_definitions(Group, _ChildNamedObjectAccessorMixin):
    """
    'report_definitions' child.
    """
    _version = '241'
    fluent_name = 'report-definitions'
    _python_name = 'report_definitions'
    child_names = ['mesh', 'surface', 'volume', 'force', 'lift', 'drag', 'moment', 'time', 'flux', 'injection', 'user_defined', 'aeromechanics', 'icing', 'expression', 'single_valued_expression', 'custom']
    command_names = ['compute', 'copy']
    _child_classes = dict(
        mesh=mesh_1,
        surface=surface_1,
        volume=volume,
        force=force,
        lift=lift,
        drag=drag,
        moment=moment,
        time=time_1,
        flux=flux_1,
        injection=injection_1,
        user_defined=user_defined_5,
        aeromechanics=aeromechanics,
        icing=icing_3,
        expression=expression_1,
        single_valued_expression=single_valued_expression,
        custom=custom,
        compute=compute_2,
        copy=copy_2,
    )
    return_type = 'object'

class monitor_1(Boolean):
    """
    Which residuals to monitor as printed and/or plotted output.
    """
    _version = '241'
    fluent_name = 'monitor?'
    _python_name = 'monitor'
    return_type = 'object'

class normalization_factor(Real):
    """
    Normalization factors for currently-monitored residuals.
    """
    _version = '241'
    fluent_name = 'normalization-factor'
    _python_name = 'normalization_factor'
    return_type = 'object'

class check_convergence(Boolean):
    """
    Which currently-monitored residuals.
    """
    _version = '241'
    fluent_name = 'check-convergence?'
    _python_name = 'check_convergence'
    return_type = 'object'

class absolute_criteria(Real):
    """
    Convergence criteria for residuals which are.
    """
    _version = '241'
    fluent_name = 'absolute-criteria'
    _python_name = 'absolute_criteria'
    return_type = 'object'

class relative_criteria(Real):
    """
    Relative convergence criteria for residuals which are.
    """
    _version = '241'
    fluent_name = 'relative-criteria'
    _python_name = 'relative_criteria'
    return_type = 'object'

class equations_1_child(Group):
    """
    'child_object_type' of equations.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'equations_child'
    child_names = ['monitor', 'normalization_factor', 'check_convergence', 'absolute_criteria', 'relative_criteria']
    _child_classes = dict(
        monitor=monitor_1,
        normalization_factor=normalization_factor,
        check_convergence=check_convergence,
        absolute_criteria=absolute_criteria,
        relative_criteria=relative_criteria,
    )
    return_type = 'object'

class equations_1(NamedObject[equations_1_child], _NonCreatableNamedObjectMixin[equations_1_child]):
    """
    'equations' child.
    """
    _version = '241'
    fluent_name = 'equations'
    _python_name = 'equations'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = equations_1_child
    return_type = 'object'

class criterion_type(String, AllowedValuesMixin):
    """
    Convergence criterion type.
    """
    _version = '241'
    fluent_name = 'criterion-type'
    _python_name = 'criterion_type'
    return_type = 'object'

class n_save(Integer):
    """
    Number of residuals to be saved with data.
    """
    _version = '241'
    fluent_name = 'n-save'
    _python_name = 'n_save'
    return_type = 'object'

class normalize(Boolean):
    """
    Specifies whether to normalize residuals in printed and plotted output.
    """
    _version = '241'
    fluent_name = 'normalize?'
    _python_name = 'normalize'
    return_type = 'object'

class n_maximize_norms(Integer):
    """
    The number of iterations through which normalization factors will be maximized.
    """
    _version = '241'
    fluent_name = 'n-maximize-norms'
    _python_name = 'n_maximize_norms'
    return_type = 'object'

class enhanced_continuity_residual(Boolean):
    """
    Scale the continuity residuals locally based on the enhanced formulation.
    """
    _version = '241'
    fluent_name = 'enhanced-continuity-residual?'
    _python_name = 'enhanced_continuity_residual'
    return_type = 'object'

class scale_residuals(Boolean):
    """
    'scale_residuals' child.
    """
    _version = '241'
    fluent_name = 'scale-residuals?'
    _python_name = 'scale_residuals'
    return_type = 'object'

class compute_local_scale(Boolean):
    """
    'compute_local_scale' child.
    """
    _version = '241'
    fluent_name = 'compute-local-scale?'
    _python_name = 'compute_local_scale'
    return_type = 'object'

class scale_type(String, AllowedValuesMixin):
    """
    'scale_type' child.
    """
    _version = '241'
    fluent_name = 'scale-type'
    _python_name = 'scale_type'
    return_type = 'object'

class residual_values(Group):
    """
    Enable/disable scaling of residuals by coefficient sum in printed and plotted output.
    """
    _version = '241'
    fluent_name = 'residual-values'
    _python_name = 'residual_values'
    child_names = ['scale_residuals', 'compute_local_scale', 'scale_type']
    _child_classes = dict(
        scale_residuals=scale_residuals,
        compute_local_scale=compute_local_scale,
        scale_type=scale_type,
    )
    return_type = 'object'

class print_2(Boolean):
    """
    Specifies whether residuals will be printed during iteration.
    """
    _version = '241'
    fluent_name = 'print?'
    _python_name = 'print'
    return_type = 'object'

class plot_1(Boolean):
    """
    Specifies whether residuals will be plotted during iteration.
    """
    _version = '241'
    fluent_name = 'plot?'
    _python_name = 'plot'
    return_type = 'object'

class n_display(Integer):
    """
    The number of most recent residuals to display in plots.
    """
    _version = '241'
    fluent_name = 'n-display'
    _python_name = 'n_display'
    return_type = 'object'

class options_9(Group):
    """
    'options' child.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['criterion_type', 'n_save', 'normalize', 'n_maximize_norms', 'enhanced_continuity_residual', 'residual_values', 'print', 'plot', 'n_display']
    _child_classes = dict(
        criterion_type=criterion_type,
        n_save=n_save,
        normalize=normalize,
        n_maximize_norms=n_maximize_norms,
        enhanced_continuity_residual=enhanced_continuity_residual,
        residual_values=residual_values,
        print=print_2,
        plot=plot_1,
        n_display=n_display,
    )
    return_type = 'object'

class label(String):
    """
    Axis label.
    """
    _version = '241'
    fluent_name = 'label'
    _python_name = 'label'
    return_type = 'object'

class format_type(String, AllowedValuesMixin):
    """
    Choice of number-representation.
    """
    _version = '241'
    fluent_name = 'format-type'
    _python_name = 'format_type'
    return_type = 'object'

class precision(Integer):
    """
    Decimal precision.
    """
    _version = '241'
    fluent_name = 'precision'
    _python_name = 'precision'
    return_type = 'object'

class number_format(Group):
    """
    Number-formatting options.
    """
    _version = '241'
    fluent_name = 'number-format'
    _python_name = 'number_format'
    child_names = ['format_type', 'precision']
    _child_classes = dict(
        format_type=format_type,
        precision=precision,
    )
    return_type = 'object'

class log_scale(Boolean):
    """
    Represent axis in logarithmic scale?.
    """
    _version = '241'
    fluent_name = 'log-scale?'
    _python_name = 'log_scale'
    return_type = 'object'

class auto_range(Boolean):
    """
    Axis-range automatically?.
    """
    _version = '241'
    fluent_name = 'auto-range?'
    _python_name = 'auto_range'
    return_type = 'object'

class min(Real):
    """
    Minimum value represented on axis.
    """
    _version = '241'
    fluent_name = 'min'
    _python_name = 'min'
    return_type = 'object'

class max(Real):
    """
    Maximum value represented on axis.
    """
    _version = '241'
    fluent_name = 'max'
    _python_name = 'max'
    return_type = 'object'

class show_major_gridlines(Boolean):
    """
    Show major gridlines on plot?.
    """
    _version = '241'
    fluent_name = 'show-major-gridlines?'
    _python_name = 'show_major_gridlines'
    return_type = 'object'

class color(String, AllowedValuesMixin):
    """
    Color of gridlines on axis.
    """
    _version = '241'
    fluent_name = 'color'
    _python_name = 'color'
    return_type = 'object'

class weight(Integer):
    """
    Weight of gridlines on axis.
    """
    _version = '241'
    fluent_name = 'weight'
    _python_name = 'weight'
    return_type = 'object'

class major_gridlines(Group):
    """
    Properties of gridlines on axis.
    """
    _version = '241'
    fluent_name = 'major-gridlines'
    _python_name = 'major_gridlines'
    child_names = ['color', 'weight']
    _child_classes = dict(
        color=color,
        weight=weight,
    )
    return_type = 'object'

class show_minor_gridlines(Boolean):
    """
    Show minor gridlines on plot?.
    """
    _version = '241'
    fluent_name = 'show-minor-gridlines?'
    _python_name = 'show_minor_gridlines'
    return_type = 'object'

class minor_gridlines(Group):
    """
    Properties of gridlines on axis.
    """
    _version = '241'
    fluent_name = 'minor-gridlines'
    _python_name = 'minor_gridlines'
    child_names = ['color', 'weight']
    _child_classes = dict(
        color=color,
        weight=weight,
    )
    return_type = 'object'

class x_1(Group):
    """
    X-axis properties.
    """
    _version = '241'
    fluent_name = 'x'
    _python_name = 'x'
    child_names = ['label', 'number_format', 'log_scale', 'auto_range', 'min', 'max', 'show_major_gridlines', 'major_gridlines', 'show_minor_gridlines', 'minor_gridlines']
    _child_classes = dict(
        label=label,
        number_format=number_format,
        log_scale=log_scale,
        auto_range=auto_range,
        min=min,
        max=max,
        show_major_gridlines=show_major_gridlines,
        major_gridlines=major_gridlines,
        show_minor_gridlines=show_minor_gridlines,
        minor_gridlines=minor_gridlines,
    )
    return_type = 'object'

class y_1(Group):
    """
    Y-axis properties.
    """
    _version = '241'
    fluent_name = 'y'
    _python_name = 'y'
    child_names = ['label', 'number_format', 'log_scale', 'auto_range', 'min', 'max', 'show_major_gridlines', 'major_gridlines', 'show_minor_gridlines', 'minor_gridlines']
    _child_classes = dict(
        label=label,
        number_format=number_format,
        log_scale=log_scale,
        auto_range=auto_range,
        min=min,
        max=max,
        show_major_gridlines=show_major_gridlines,
        major_gridlines=major_gridlines,
        show_minor_gridlines=show_minor_gridlines,
        minor_gridlines=minor_gridlines,
    )
    return_type = 'object'

class background_color(String, AllowedValuesMixin):
    """
    Background color.
    """
    _version = '241'
    fluent_name = 'background-color'
    _python_name = 'background_color'
    return_type = 'object'

class axes(Group):
    """
    Axes-properties.
    """
    _version = '241'
    fluent_name = 'axes'
    _python_name = 'axes'
    child_names = ['x', 'y', 'background_color']
    _child_classes = dict(
        x=x_1,
        y=y_1,
        background_color=background_color,
    )
    return_type = 'object'

class pattern(String, AllowedValuesMixin):
    """
    'pattern' child.
    """
    _version = '241'
    fluent_name = 'pattern'
    _python_name = 'pattern'
    return_type = 'object'

class weight_1(Real):
    """
    'weight' child.
    """
    _version = '241'
    fluent_name = 'weight'
    _python_name = 'weight'
    return_type = 'object'

class color_1(String, AllowedValuesMixin):
    """
    'color' child.
    """
    _version = '241'
    fluent_name = 'color'
    _python_name = 'color'
    return_type = 'object'

class line(Group):
    """
    Parameters for plot lines.
    """
    _version = '241'
    fluent_name = 'line'
    _python_name = 'line'
    child_names = ['pattern', 'weight', 'color']
    _child_classes = dict(
        pattern=pattern,
        weight=weight_1,
        color=color_1,
    )
    return_type = 'object'

class line_in_file(Group):
    """
    Parameters for plot lines (file).
    """
    _version = '241'
    fluent_name = 'line-in-file'
    _python_name = 'line_in_file'
    child_names = ['pattern', 'weight', 'color']
    _child_classes = dict(
        pattern=pattern,
        weight=weight_1,
        color=color_1,
    )
    return_type = 'object'

class symbol(String, AllowedValuesMixin):
    """
    'symbol' child.
    """
    _version = '241'
    fluent_name = 'symbol'
    _python_name = 'symbol'
    return_type = 'object'

class size(Real):
    """
    'size' child.
    """
    _version = '241'
    fluent_name = 'size'
    _python_name = 'size'
    return_type = 'object'

class marker(Group):
    """
    Parameters for data markers.
    """
    _version = '241'
    fluent_name = 'marker'
    _python_name = 'marker'
    child_names = ['symbol', 'size', 'color']
    _child_classes = dict(
        symbol=symbol,
        size=size,
        color=color_1,
    )
    return_type = 'object'

class marker_in_file(Group):
    """
    Parameters for data markers (file).
    """
    _version = '241'
    fluent_name = 'marker-in-file'
    _python_name = 'marker_in_file'
    child_names = ['symbol', 'size', 'color']
    _child_classes = dict(
        symbol=symbol,
        size=size,
        color=color_1,
    )
    return_type = 'object'

class curves_child(Group):
    """
    'child_object_type' of curves.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'curves_child'
    child_names = ['line', 'line_in_file', 'marker', 'marker_in_file']
    _child_classes = dict(
        line=line,
        line_in_file=line_in_file,
        marker=marker,
        marker_in_file=marker_in_file,
    )
    return_type = 'object'

class curves(ListObject[curves_child]):
    """
    'curves' child.
    """
    _version = '241'
    fluent_name = 'curves'
    _python_name = 'curves'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = curves_child
    return_type = 'object'

class reset(Command):
    """
    Delete the residual history and reset iteration counter to unity.
    """
    _version = '241'
    fluent_name = 'reset'
    _python_name = 'reset'
    return_type = 'object'

class renormalize(Command):
    """
    Renormalize residuals by maximum values.
    """
    _version = '241'
    fluent_name = 'renormalize'
    _python_name = 'renormalize'
    return_type = 'object'

class plot(Command):
    """
    Plot residuals.
    """
    _version = '241'
    fluent_name = 'plot'
    _python_name = 'plot'
    return_type = 'object'

class residual(Group):
    """
    The residual monitors object.
    """
    _version = '241'
    fluent_name = 'residual'
    _python_name = 'residual'
    child_names = ['equations', 'options', 'axes', 'curves']
    command_names = ['reset', 'renormalize', 'plot']
    _child_classes = dict(
        equations=equations_1,
        options=options_9,
        axes=axes,
        curves=curves,
        reset=reset,
        renormalize=renormalize,
        plot=plot,
    )
    return_type = 'object'

class frequency(Integer):
    """
    How often convergence checks are performed.
    """
    _version = '241'
    fluent_name = 'frequency'
    _python_name = 'frequency'
    return_type = 'object'

class flow_frequency(Real):
    """
    'flow_frequency' child.
    """
    _version = '241'
    fluent_name = 'flow-frequency'
    _python_name = 'flow_frequency'
    return_type = 'object'

class itr_index(String, AllowedValuesMixin):
    """
    'itr_index' child.
    """
    _version = '241'
    fluent_name = 'itr-index'
    _python_name = 'itr_index'
    return_type = 'object'

class run_index(String, AllowedValuesMixin):
    """
    'run_index' child.
    """
    _version = '241'
    fluent_name = 'run-index'
    _python_name = 'run_index'
    return_type = 'object'

class frequency_of(String, AllowedValuesMixin):
    """
    'frequency_of' child.
    """
    _version = '241'
    fluent_name = 'frequency-of'
    _python_name = 'frequency_of'
    return_type = 'object'

class print_3(Boolean):
    """
    'print' child.
    """
    _version = '241'
    fluent_name = 'print?'
    _python_name = 'print'
    return_type = 'object'

class active(Boolean):
    """
    'active' child.
    """
    _version = '241'
    fluent_name = 'active?'
    _python_name = 'active'
    return_type = 'object'

class write_instantaneous_values(Boolean):
    """
    'write_instantaneous_values' child.
    """
    _version = '241'
    fluent_name = 'write-instantaneous-values?'
    _python_name = 'write_instantaneous_values'
    return_type = 'object'

class report_files_child(Group):
    """
    'child_object_type' of report_files.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'report_files_child'
    child_names = ['name', 'file_name', 'frequency', 'flow_frequency', 'itr_index', 'run_index', 'frequency_of', 'report_defs', 'print', 'active', 'write_instantaneous_values']
    _child_classes = dict(
        name=name_1,
        file_name=file_name_1,
        frequency=frequency,
        flow_frequency=flow_frequency,
        itr_index=itr_index,
        run_index=run_index,
        frequency_of=frequency_of,
        report_defs=report_defs,
        print=print_3,
        active=active,
        write_instantaneous_values=write_instantaneous_values,
    )
    return_type = 'object'

class report_files(NamedObject[report_files_child], CreatableNamedObjectMixinOld[report_files_child]):
    """
    'report_files' child.
    """
    _version = '241'
    fluent_name = 'report-files'
    _python_name = 'report_files'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = report_files_child
    return_type = 'object'

class plot_window(Integer):
    """
    'plot_window' child.
    """
    _version = '241'
    fluent_name = 'plot-window'
    _python_name = 'plot_window'
    return_type = 'object'

class title(String, AllowedValuesMixin):
    """
    'title' child.
    """
    _version = '241'
    fluent_name = 'title'
    _python_name = 'title'
    return_type = 'object'

class x_label(String, AllowedValuesMixin):
    """
    'x_label' child.
    """
    _version = '241'
    fluent_name = 'x-label'
    _python_name = 'x_label'
    return_type = 'object'

class y_label(String, AllowedValuesMixin):
    """
    'y_label' child.
    """
    _version = '241'
    fluent_name = 'y-label'
    _python_name = 'y_label'
    return_type = 'object'

class plot_instantaneous_values(Boolean):
    """
    'plot_instantaneous_values' child.
    """
    _version = '241'
    fluent_name = 'plot-instantaneous-values?'
    _python_name = 'plot_instantaneous_values'
    return_type = 'object'

class plot_2(Command):
    """
    Display the report-plot.
    """
    _version = '241'
    fluent_name = 'plot'
    _python_name = 'plot'
    return_type = 'object'

class report_plots_child(Group):
    """
    'child_object_type' of report_plots.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'report_plots_child'
    child_names = ['name', 'plot_window', 'frequency', 'flow_frequency', 'frequency_of', 'report_defs', 'print', 'title', 'x_label', 'y_label', 'active', 'plot_instantaneous_values', 'axes', 'curves']
    command_names = ['plot']
    _child_classes = dict(
        name=name_1,
        plot_window=plot_window,
        frequency=frequency,
        flow_frequency=flow_frequency,
        frequency_of=frequency_of,
        report_defs=report_defs,
        print=print_3,
        title=title,
        x_label=x_label,
        y_label=y_label,
        active=active,
        plot_instantaneous_values=plot_instantaneous_values,
        axes=axes,
        curves=curves,
        plot=plot_2,
    )
    return_type = 'object'

class report_plots(NamedObject[report_plots_child], CreatableNamedObjectMixinOld[report_plots_child]):
    """
    'report_plots' child.
    """
    _version = '241'
    fluent_name = 'report-plots'
    _python_name = 'report_plots'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = report_plots_child
    return_type = 'object'

class previous_values_to_consider(Integer):
    """
    How often convergence checks are performed.
    """
    _version = '241'
    fluent_name = 'previous-values-to-consider'
    _python_name = 'previous_values_to_consider'
    return_type = 'object'

class initial_values_to_ignore(Integer):
    """
    'initial_values_to_ignore' child.
    """
    _version = '241'
    fluent_name = 'initial-values-to-ignore'
    _python_name = 'initial_values_to_ignore'
    return_type = 'object'

class iteration_at_creation_or_edit(Integer):
    """
    'iteration_at_creation_or_edit' child.
    """
    _version = '241'
    fluent_name = 'iteration-at-creation-or-edit'
    _python_name = 'iteration_at_creation_or_edit'
    return_type = 'object'

class stop_criterion(Real):
    """
    'stop_criterion' child.
    """
    _version = '241'
    fluent_name = 'stop-criterion'
    _python_name = 'stop_criterion'
    return_type = 'object'

class report_defs_1(String, AllowedValuesMixin):
    """
    'report_defs' child.
    """
    _version = '241'
    fluent_name = 'report-defs'
    _python_name = 'report_defs'
    return_type = 'object'

class plot_3(Boolean):
    """
    'plot' child.
    """
    _version = '241'
    fluent_name = 'plot?'
    _python_name = 'plot'
    return_type = 'object'

class cov(Boolean):
    """
    'cov' child.
    """
    _version = '241'
    fluent_name = 'cov?'
    _python_name = 'cov'
    return_type = 'object'

class previous_values(StringList, AllowedValuesMixin):
    """
    'previous_values' child.
    """
    _version = '241'
    fluent_name = 'previous-values'
    _python_name = 'previous_values'
    return_type = 'object'

class convergence_reports_child(Group):
    """
    'child_object_type' of convergence_reports.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'convergence_reports_child'
    child_names = ['name', 'previous_values_to_consider', 'initial_values_to_ignore', 'iteration_at_creation_or_edit', 'stop_criterion', 'report_defs', 'print', 'plot', 'cov', 'active', 'x_label', 'previous_values']
    _child_classes = dict(
        name=name_1,
        previous_values_to_consider=previous_values_to_consider,
        initial_values_to_ignore=initial_values_to_ignore,
        iteration_at_creation_or_edit=iteration_at_creation_or_edit,
        stop_criterion=stop_criterion,
        report_defs=report_defs_1,
        print=print_3,
        plot=plot_3,
        cov=cov,
        active=active,
        x_label=x_label,
        previous_values=previous_values,
    )
    return_type = 'object'

class convergence_reports(NamedObject[convergence_reports_child], CreatableNamedObjectMixinOld[convergence_reports_child]):
    """
    'convergence_reports' child.
    """
    _version = '241'
    fluent_name = 'convergence-reports'
    _python_name = 'convergence_reports'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = convergence_reports_child
    return_type = 'object'

class frequency_1(Integer):
    """
    'frequency' child.
    """
    _version = '241'
    fluent_name = 'frequency'
    _python_name = 'frequency'
    return_type = 'object'

class condition(String, AllowedValuesMixin):
    """
    'condition' child.
    """
    _version = '241'
    fluent_name = 'condition'
    _python_name = 'condition'
    return_type = 'object'

class check_for(String, AllowedValuesMixin):
    """
    'check_for' child.
    """
    _version = '241'
    fluent_name = 'check-for'
    _python_name = 'check_for'
    return_type = 'object'

class convergence_conditions(Group):
    """
    'convergence_conditions' child.
    """
    _version = '241'
    fluent_name = 'convergence-conditions'
    _python_name = 'convergence_conditions'
    child_names = ['convergence_reports', 'frequency', 'condition', 'check_for']
    _child_classes = dict(
        convergence_reports=convergence_reports,
        frequency=frequency_1,
        condition=condition,
        check_for=check_for,
    )
    return_type = 'object'

class monitor(Group):
    """
    'monitor' child.
    """
    _version = '241'
    fluent_name = 'monitor'
    _python_name = 'monitor'
    child_names = ['residual', 'report_files', 'report_plots', 'convergence_conditions']
    _child_classes = dict(
        residual=residual,
        report_files=report_files,
        report_plots=report_plots,
        convergence_conditions=convergence_conditions,
    )
    return_type = 'object'

class python_name_1(String, AllowedValuesMixin):
    """
    'python_name' child.
    """
    _version = '241'
    fluent_name = 'python-name'
    _python_name = 'python_name'
    return_type = 'object'

class min_point(RealList):
    """
    'min_point' child.
    """
    _version = '241'
    fluent_name = 'min-point'
    _python_name = 'min_point'
    return_type = 'object'

class max_point(RealList):
    """
    'max_point' child.
    """
    _version = '241'
    fluent_name = 'max-point'
    _python_name = 'max_point'
    return_type = 'object'

class inside(Boolean):
    """
    'inside' child.
    """
    _version = '241'
    fluent_name = 'inside?'
    _python_name = 'inside'
    return_type = 'object'

class create_volume_surface(Boolean):
    """
    'create_volume_surface' child.
    """
    _version = '241'
    fluent_name = 'create-volume-surface'
    _python_name = 'create_volume_surface'
    return_type = 'object'

class hexahedron(Group):
    """
    'hexahedron' child.
    """
    _version = '241'
    fluent_name = 'hexahedron'
    _python_name = 'hexahedron'
    child_names = ['min_point', 'max_point', 'inside', 'create_volume_surface']
    _child_classes = dict(
        min_point=min_point,
        max_point=max_point,
        inside=inside,
        create_volume_surface=create_volume_surface,
    )
    return_type = 'object'

class center(RealList):
    """
    'center' child.
    """
    _version = '241'
    fluent_name = 'center'
    _python_name = 'center'
    return_type = 'object'

class radius(Real):
    """
    'radius' child.
    """
    _version = '241'
    fluent_name = 'radius'
    _python_name = 'radius'
    return_type = 'object'

class sphere(Group):
    """
    'sphere' child.
    """
    _version = '241'
    fluent_name = 'sphere'
    _python_name = 'sphere'
    child_names = ['center', 'radius', 'inside', 'create_volume_surface']
    _child_classes = dict(
        center=center,
        radius=radius,
        inside=inside,
        create_volume_surface=create_volume_surface,
    )
    return_type = 'object'

class axis_begin(RealList):
    """
    'axis_begin' child.
    """
    _version = '241'
    fluent_name = 'axis-begin'
    _python_name = 'axis_begin'
    return_type = 'object'

class axis_end(RealList):
    """
    'axis_end' child.
    """
    _version = '241'
    fluent_name = 'axis-end'
    _python_name = 'axis_end'
    return_type = 'object'

class cylinder(Group):
    """
    'cylinder' child.
    """
    _version = '241'
    fluent_name = 'cylinder'
    _python_name = 'cylinder'
    child_names = ['axis_begin', 'axis_end', 'radius', 'inside', 'create_volume_surface']
    _child_classes = dict(
        axis_begin=axis_begin,
        axis_end=axis_end,
        radius=radius,
        inside=inside,
        create_volume_surface=create_volume_surface,
    )
    return_type = 'object'

class cell_distance(Integer):
    """
    'cell_distance' child.
    """
    _version = '241'
    fluent_name = 'cell-distance'
    _python_name = 'cell_distance'
    return_type = 'object'

class boundary_volume(Real):
    """
    'boundary_volume' child.
    """
    _version = '241'
    fluent_name = 'boundary-volume'
    _python_name = 'boundary_volume'
    return_type = 'object'

class volume_growth(Real):
    """
    'volume_growth' child.
    """
    _version = '241'
    fluent_name = 'volume-growth'
    _python_name = 'volume_growth'
    return_type = 'object'

class volume_distance(Group):
    """
    'volume_distance' child.
    """
    _version = '241'
    fluent_name = 'volume-distance'
    _python_name = 'volume_distance'
    child_names = ['boundary_volume', 'volume_growth']
    _child_classes = dict(
        boundary_volume=boundary_volume,
        volume_growth=volume_growth,
    )
    return_type = 'object'

class distance_option(Group):
    """
    'distance_option' child.
    """
    _version = '241'
    fluent_name = 'distance-option'
    _python_name = 'distance_option'
    child_names = ['option', 'cell_distance', 'normal_distance', 'volume_distance']
    _child_classes = dict(
        option=option,
        cell_distance=cell_distance,
        normal_distance=normal_distance,
        volume_distance=volume_distance,
    )
    return_type = 'object'

class boundary_3(Group):
    """
    'boundary' child.
    """
    _version = '241'
    fluent_name = 'boundary'
    _python_name = 'boundary'
    child_names = ['distance_option', 'boundary_list', 'create_volume_surface']
    _child_classes = dict(
        distance_option=distance_option,
        boundary_list=boundary_list,
        create_volume_surface=create_volume_surface,
    )
    return_type = 'object'

class limiters(String, AllowedValuesMixin):
    """
    'limiters' child.
    """
    _version = '241'
    fluent_name = 'limiters'
    _python_name = 'limiters'
    return_type = 'object'

class min_max(Boolean):
    """
    'min_max' child.
    """
    _version = '241'
    fluent_name = 'min-max'
    _python_name = 'min_max'
    return_type = 'object'

class value1(Real):
    """
    'value1' child.
    """
    _version = '241'
    fluent_name = 'value1'
    _python_name = 'value1'
    return_type = 'object'

class value2(Real):
    """
    'value2' child.
    """
    _version = '241'
    fluent_name = 'value2'
    _python_name = 'value2'
    return_type = 'object'

class in_range(Group):
    """
    'in_range' child.
    """
    _version = '241'
    fluent_name = 'in-range'
    _python_name = 'in_range'
    child_names = ['value1', 'value2']
    _child_classes = dict(
        value1=value1,
        value2=value2,
    )
    return_type = 'object'

class except_in_range(Group):
    """
    'except_in_range' child.
    """
    _version = '241'
    fluent_name = 'except-in-range'
    _python_name = 'except_in_range'
    child_names = ['value1', 'value2']
    _child_classes = dict(
        value1=value1,
        value2=value2,
    )
    return_type = 'object'

class top_value_cells(Real):
    """
    'top_value_cells' child.
    """
    _version = '241'
    fluent_name = 'top-value-cells'
    _python_name = 'top_value_cells'
    return_type = 'object'

class low_value_cells(Real):
    """
    'low_value_cells' child.
    """
    _version = '241'
    fluent_name = 'low-value-cells'
    _python_name = 'low_value_cells'
    return_type = 'object'

class less_than(Real):
    """
    'less_than' child.
    """
    _version = '241'
    fluent_name = 'less-than'
    _python_name = 'less_than'
    return_type = 'object'

class more_than(Real):
    """
    'more_than' child.
    """
    _version = '241'
    fluent_name = 'more-than'
    _python_name = 'more_than'
    return_type = 'object'

class lower(Real):
    """
    'lower' child.
    """
    _version = '241'
    fluent_name = 'lower'
    _python_name = 'lower'
    return_type = 'object'

class upper(Real):
    """
    'upper' child.
    """
    _version = '241'
    fluent_name = 'upper'
    _python_name = 'upper'
    return_type = 'object'

class between_std_dev(Group):
    """
    'between_std_dev' child.
    """
    _version = '241'
    fluent_name = 'between-std-dev'
    _python_name = 'between_std_dev'
    child_names = ['lower', 'upper']
    _child_classes = dict(
        lower=lower,
        upper=upper,
    )
    return_type = 'object'

class outside_std_dev(Group):
    """
    'outside_std_dev' child.
    """
    _version = '241'
    fluent_name = 'outside-std-dev'
    _python_name = 'outside_std_dev'
    child_names = ['lower', 'upper']
    _child_classes = dict(
        lower=lower,
        upper=upper,
    )
    return_type = 'object'

class less_than_std_dev(Real):
    """
    'less_than_std_dev' child.
    """
    _version = '241'
    fluent_name = 'less-than-std-dev'
    _python_name = 'less_than_std_dev'
    return_type = 'object'

class more_than_std_dev(Real):
    """
    'more_than_std_dev' child.
    """
    _version = '241'
    fluent_name = 'more-than-std-dev'
    _python_name = 'more_than_std_dev'
    return_type = 'object'

class option_10(Group):
    """
    'option' child.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    child_names = ['option', 'min_max', 'in_range', 'except_in_range', 'top_value_cells', 'low_value_cells', 'less_than', 'more_than', 'between_std_dev', 'outside_std_dev', 'less_than_std_dev', 'more_than_std_dev']
    _child_classes = dict(
        option=option,
        min_max=min_max,
        in_range=in_range,
        except_in_range=except_in_range,
        top_value_cells=top_value_cells,
        low_value_cells=low_value_cells,
        less_than=less_than,
        more_than=more_than,
        between_std_dev=between_std_dev,
        outside_std_dev=outside_std_dev,
        less_than_std_dev=less_than_std_dev,
        more_than_std_dev=more_than_std_dev,
    )
    return_type = 'object'

class none_1(Boolean):
    """
    'none' child.
    """
    _version = '241'
    fluent_name = 'none'
    _python_name = 'none'
    return_type = 'object'

class scale_by_global_average(Boolean):
    """
    'scale_by_global_average' child.
    """
    _version = '241'
    fluent_name = 'scale-by-global-average'
    _python_name = 'scale_by_global_average'
    return_type = 'object'

class scale_by_zone_average(Boolean):
    """
    'scale_by_zone_average' child.
    """
    _version = '241'
    fluent_name = 'scale-by-zone-average'
    _python_name = 'scale_by_zone_average'
    return_type = 'object'

class scale_by_global_maximum(Boolean):
    """
    'scale_by_global_maximum' child.
    """
    _version = '241'
    fluent_name = 'scale-by-global-maximum'
    _python_name = 'scale_by_global_maximum'
    return_type = 'object'

class scale_by_zone_maximum(Boolean):
    """
    'scale_by_zone_maximum' child.
    """
    _version = '241'
    fluent_name = 'scale-by-zone-maximum'
    _python_name = 'scale_by_zone_maximum'
    return_type = 'object'

class scaling(Group):
    """
    'scaling' child.
    """
    _version = '241'
    fluent_name = 'scaling'
    _python_name = 'scaling'
    child_names = ['option', 'none', 'scale_by_global_average', 'scale_by_zone_average', 'scale_by_global_maximum', 'scale_by_zone_maximum']
    _child_classes = dict(
        option=option,
        none=none_1,
        scale_by_global_average=scale_by_global_average,
        scale_by_zone_average=scale_by_zone_average,
        scale_by_global_maximum=scale_by_global_maximum,
        scale_by_zone_maximum=scale_by_zone_maximum,
    )
    return_type = 'object'

class gradient_1(Boolean):
    """
    'gradient' child.
    """
    _version = '241'
    fluent_name = 'gradient'
    _python_name = 'gradient'
    return_type = 'object'

class curvature(Boolean):
    """
    'curvature' child.
    """
    _version = '241'
    fluent_name = 'curvature'
    _python_name = 'curvature'
    return_type = 'object'

class hessian(Boolean):
    """
    'hessian' child.
    """
    _version = '241'
    fluent_name = 'hessian'
    _python_name = 'hessian'
    return_type = 'object'

class derivative(Group):
    """
    'derivative' child.
    """
    _version = '241'
    fluent_name = 'derivative'
    _python_name = 'derivative'
    child_names = ['option', 'none', 'gradient', 'curvature', 'hessian']
    _child_classes = dict(
        option=option,
        none=none_1,
        gradient=gradient_1,
        curvature=curvature,
        hessian=hessian,
    )
    return_type = 'object'

class size_ratio(Real):
    """
    'size_ratio' child.
    """
    _version = '241'
    fluent_name = 'size-ratio'
    _python_name = 'size_ratio'
    return_type = 'object'

class field_value(Group):
    """
    'field_value' child.
    """
    _version = '241'
    fluent_name = 'field-value'
    _python_name = 'field_value'
    child_names = ['field', 'option', 'scaling', 'derivative', 'size_ratio', 'create_volume_surface']
    _child_classes = dict(
        field=field,
        option=option_10,
        scaling=scaling,
        derivative=derivative,
        size_ratio=size_ratio,
        create_volume_surface=create_volume_surface,
    )
    return_type = 'object'

class equation_for_residual(String, AllowedValuesMixin):
    """
    'equation_for_residual' child.
    """
    _version = '241'
    fluent_name = 'equation-for-residual'
    _python_name = 'equation_for_residual'
    return_type = 'object'

class threshold(Real):
    """
    'threshold' child.
    """
    _version = '241'
    fluent_name = 'threshold'
    _python_name = 'threshold'
    return_type = 'object'

class residual_1(Group):
    """
    'residual' child.
    """
    _version = '241'
    fluent_name = 'residual'
    _python_name = 'residual'
    child_names = ['equation_for_residual', 'threshold']
    _child_classes = dict(
        equation_for_residual=equation_for_residual,
        threshold=threshold,
    )
    return_type = 'object'

class volume_magnitude(Real):
    """
    'volume_magnitude' child.
    """
    _version = '241'
    fluent_name = 'volume-magnitude'
    _python_name = 'volume_magnitude'
    return_type = 'object'

class volume_change(Real):
    """
    'volume_change' child.
    """
    _version = '241'
    fluent_name = 'volume-change'
    _python_name = 'volume_change'
    return_type = 'object'

class volume_1(Group):
    """
    'volume' child.
    """
    _version = '241'
    fluent_name = 'volume'
    _python_name = 'volume'
    child_names = ['option', 'volume_magnitude', 'volume_change']
    _child_classes = dict(
        option=option,
        volume_magnitude=volume_magnitude,
        volume_change=volume_change,
    )
    return_type = 'object'

class yplus_1(Boolean):
    """
    'yplus' child.
    """
    _version = '241'
    fluent_name = 'yplus'
    _python_name = 'yplus'
    return_type = 'object'

class ystar(Boolean):
    """
    'ystar' child.
    """
    _version = '241'
    fluent_name = 'ystar'
    _python_name = 'ystar'
    return_type = 'object'

class option_11(Group):
    """
    'option' child.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    child_names = ['option', 'yplus', 'ystar']
    _child_classes = dict(
        option=option,
        yplus=yplus_1,
        ystar=ystar,
    )
    return_type = 'object'

class min_allowed(Real):
    """
    'min_allowed' child.
    """
    _version = '241'
    fluent_name = 'min-allowed'
    _python_name = 'min_allowed'
    return_type = 'object'

class max_allowed(Real):
    """
    'max_allowed' child.
    """
    _version = '241'
    fluent_name = 'max-allowed'
    _python_name = 'max_allowed'
    return_type = 'object'

class wall_zones(StringList, AllowedValuesMixin):
    """
    'wall_zones' child.
    """
    _version = '241'
    fluent_name = 'wall-zones'
    _python_name = 'wall_zones'
    return_type = 'object'

class phase_28(Integer):
    """
    'phase' child.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    return_type = 'object'

class yplus_star(Group):
    """
    'yplus_star' child.
    """
    _version = '241'
    fluent_name = 'yplus-star'
    _python_name = 'yplus_star'
    child_names = ['option', 'min_allowed', 'max_allowed', 'wall_zones', 'phase']
    _child_classes = dict(
        option=option_11,
        min_allowed=min_allowed,
        max_allowed=max_allowed,
        wall_zones=wall_zones,
        phase=phase_28,
    )
    return_type = 'object'

class yplus_ystar(Group):
    """
    'yplus_ystar' child.
    """
    _version = '241'
    fluent_name = 'yplus-ystar'
    _python_name = 'yplus_ystar'
    child_names = ['option', 'min_allowed', 'max_allowed', 'wall_zones', 'phase']
    _child_classes = dict(
        option=option_11,
        min_allowed=min_allowed,
        max_allowed=max_allowed,
        wall_zones=wall_zones,
        phase=phase_28,
    )
    return_type = 'object'

class type_8(Group):
    """
    'type' child.
    """
    _version = '241'
    fluent_name = 'type'
    _python_name = 'type'
    child_names = ['option', 'hexahedron', 'sphere', 'cylinder', 'boundary', 'limiters', 'field_value', 'residual', 'volume', 'yplus_star', 'yplus_ystar']
    _child_classes = dict(
        option=option,
        hexahedron=hexahedron,
        sphere=sphere,
        cylinder=cylinder,
        boundary=boundary_3,
        limiters=limiters,
        field_value=field_value,
        residual=residual_1,
        volume=volume_1,
        yplus_star=yplus_star,
        yplus_ystar=yplus_ystar,
    )
    return_type = 'object'

class draw_mesh(Boolean):
    """
    'draw_mesh' child.
    """
    _version = '241'
    fluent_name = 'draw-mesh?'
    _python_name = 'draw_mesh'
    return_type = 'object'

class filled(Boolean):
    """
    'filled' child.
    """
    _version = '241'
    fluent_name = 'filled?'
    _python_name = 'filled'
    return_type = 'object'

class marker_1(Boolean):
    """
    'marker' child.
    """
    _version = '241'
    fluent_name = 'marker?'
    _python_name = 'marker'
    return_type = 'object'

class marker_symbol(String, AllowedValuesMixin):
    """
    'marker_symbol' child.
    """
    _version = '241'
    fluent_name = 'marker-symbol'
    _python_name = 'marker_symbol'
    return_type = 'object'

class marker_size(Real):
    """
    Symbol Size.
    """
    _version = '241'
    fluent_name = 'marker-size'
    _python_name = 'marker_size'
    return_type = 'object'

class wireframe(Boolean):
    """
    'wireframe' child.
    """
    _version = '241'
    fluent_name = 'wireframe?'
    _python_name = 'wireframe'
    return_type = 'object'

class display_options(Group):
    """
    'display_options' child.
    """
    _version = '241'
    fluent_name = 'display-options'
    _python_name = 'display_options'
    child_names = ['draw_mesh', 'filled', 'marker', 'marker_symbol', 'marker_size', 'wireframe', 'color']
    _child_classes = dict(
        draw_mesh=draw_mesh,
        filled=filled,
        marker=marker_1,
        marker_symbol=marker_symbol,
        marker_size=marker_size,
        wireframe=wireframe,
        color=color_1,
    )
    return_type = 'object'

class cell_registers_child(Group):
    """
    'child_object_type' of cell_registers.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'cell_registers_child'
    child_names = ['name', 'python_name_1', 'type', 'display_options']
    _child_classes = dict(
        name=name_1,
        python_name_1=python_name_1,
        type=type_8,
        display_options=display_options,
    )
    return_type = 'object'

class cell_registers(NamedObject[cell_registers_child], CreatableNamedObjectMixinOld[cell_registers_child]):
    """
    'cell_registers' child.
    """
    _version = '241'
    fluent_name = 'cell-registers'
    _python_name = 'cell_registers'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = cell_registers_child
    return_type = 'object'

class initialization_type(String, AllowedValuesMixin):
    """
    Initialization type.
    """
    _version = '241'
    fluent_name = 'initialization-type'
    _python_name = 'initialization_type'
    return_type = 'object'

class reference_frame_3(String, AllowedValuesMixin):
    """
    Reference frame absolute or relative.
    """
    _version = '241'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'
    return_type = 'object'

class defaults_child(Real):
    """
    'child_object_type' of defaults.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'defaults_child'
    return_type = 'object'

class defaults(NamedObject[defaults_child], _NonCreatableNamedObjectMixin[defaults_child]):
    """
    Defaults object.
    """
    _version = '241'
    fluent_name = 'defaults'
    _python_name = 'defaults'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = defaults_child
    return_type = 'object'

class enabled_16(Boolean):
    """
    Enable/disable localized initialization of turbulent flow variables.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class turbulent_intensity_2(Real):
    """
    Turbulent intensity.
    """
    _version = '241'
    fluent_name = 'turbulent-intensity'
    _python_name = 'turbulent_intensity'
    return_type = 'object'

class turbulent_viscosity_ratio_2(Real):
    """
    Turbulent viscosity ratio.
    """
    _version = '241'
    fluent_name = 'turbulent-viscosity-ratio'
    _python_name = 'turbulent_viscosity_ratio'
    return_type = 'object'

class localized_turb_init(Group):
    """
    Localized initialization of turbulent flow variables for VOF/Mixture multiphase flow models.
    """
    _version = '241'
    fluent_name = 'localized-turb-init'
    _python_name = 'localized_turb_init'
    child_names = ['enabled', 'turbulent_intensity', 'turbulent_viscosity_ratio']
    _child_classes = dict(
        enabled=enabled_16,
        turbulent_intensity=turbulent_intensity_2,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio_2,
    )
    return_type = 'object'

class iter_count_1(Integer):
    """
    The number of iterations.
    """
    _version = '241'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'
    return_type = 'object'

class explicit_urf(RealList):
    """
    Explicit URF for scalar equations.
    """
    _version = '241'
    fluent_name = 'explicit-urf'
    _python_name = 'explicit_urf'
    return_type = 'object'

class initial_pressure(Boolean):
    """
    Enable/Disable specified initial pressure on inlets.
    """
    _version = '241'
    fluent_name = 'initial-pressure?'
    _python_name = 'initial_pressure'
    return_type = 'object'

class external_aero(Boolean):
    """
    Enable/Disable external-aero favorable settings.
    """
    _version = '241'
    fluent_name = 'external-aero?'
    _python_name = 'external_aero'
    return_type = 'object'

class const_velocity(Boolean):
    """
    Enable/Disable constant velocity magnitude.
    """
    _version = '241'
    fluent_name = 'const-velocity?'
    _python_name = 'const_velocity'
    return_type = 'object'

class general_settings_1(Group):
    """
    The general settings object.
    """
    _version = '241'
    fluent_name = 'general-settings'
    _python_name = 'general_settings'
    child_names = ['iter_count', 'explicit_urf', 'initial_pressure', 'external_aero', 'const_velocity']
    _child_classes = dict(
        iter_count=iter_count_1,
        explicit_urf=explicit_urf,
        initial_pressure=initial_pressure,
        external_aero=external_aero,
        const_velocity=const_velocity,
    )
    return_type = 'object'

class averaged_turbulent_parameters(Boolean):
    """
    Enable/Disable averaged turbulent parameters.
    """
    _version = '241'
    fluent_name = 'averaged-turbulent-parameters?'
    _python_name = 'averaged_turbulent_parameters'
    return_type = 'object'

class viscosity_ratio(Real):
    """
    Viscosity ratio.
    """
    _version = '241'
    fluent_name = 'viscosity-ratio'
    _python_name = 'viscosity_ratio'
    return_type = 'object'

class turbulent_setting(Group):
    """
    The turbulent settings object.
    """
    _version = '241'
    fluent_name = 'turbulent-setting'
    _python_name = 'turbulent_setting'
    child_names = ['averaged_turbulent_parameters', 'turbulent_intensity', 'viscosity_ratio']
    _child_classes = dict(
        averaged_turbulent_parameters=averaged_turbulent_parameters,
        turbulent_intensity=turbulent_intensity_2,
        viscosity_ratio=viscosity_ratio,
    )
    return_type = 'object'

class user_specified_species(Boolean):
    """
    Enable/Disable species parameters.
    """
    _version = '241'
    fluent_name = 'user-specified-species?'
    _python_name = 'user_specified_species'
    return_type = 'object'

class species_11_child_child(Real):
    """
    'child_object_type' of child_object_type.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'species_child_child'
    return_type = 'object'

class species_11_child(NamedObject[species_11_child_child], _NonCreatableNamedObjectMixin[species_11_child_child]):
    """
    'child_object_type' of species.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'species_child'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_11_child_child
    return_type = 'object'

class species_11(NamedObject[species_11_child], _NonCreatableNamedObjectMixin[species_11_child]):
    """
    Configure species settings.
    """
    _version = '241'
    fluent_name = 'species'
    _python_name = 'species'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_11_child
    return_type = 'object'

class species_setting(Group):
    """
    The species settings object.
    """
    _version = '241'
    fluent_name = 'species-setting'
    _python_name = 'species_setting'
    child_names = ['user_specified_species', 'species']
    _child_classes = dict(
        user_specified_species=user_specified_species,
        species=species_11,
    )
    return_type = 'object'

class hybrid_init_options(Group):
    """
    The settings for hybrid initialization method.
    """
    _version = '241'
    fluent_name = 'hybrid-init-options'
    _python_name = 'hybrid_init_options'
    child_names = ['general_settings', 'turbulent_setting', 'species_setting']
    _child_classes = dict(
        general_settings=general_settings_1,
        turbulent_setting=turbulent_setting,
        species_setting=species_setting,
    )
    return_type = 'object'

class patch_reconstructed_interface(Boolean):
    """
    Enable/Disable patch reconstructed interface.
    """
    _version = '241'
    fluent_name = 'patch-reconstructed-interface?'
    _python_name = 'patch_reconstructed_interface'
    return_type = 'object'

class use_volumetric_smoothing(Boolean):
    """
    Enable/Disable volumetric smoothing.
    """
    _version = '241'
    fluent_name = 'use-volumetric-smoothing?'
    _python_name = 'use_volumetric_smoothing'
    return_type = 'object'

class smoothing_relaxation_factor(Real):
    """
    Smoothing relaxation factor (min : 0, max : 1).
    """
    _version = '241'
    fluent_name = 'smoothing-relaxation-factor'
    _python_name = 'smoothing_relaxation_factor'
    return_type = 'object'

class execute_smoothing(Command):
    """
    Execute volumetric smoothing for volume fraction.
    """
    _version = '241'
    fluent_name = 'execute-smoothing'
    _python_name = 'execute_smoothing'
    return_type = 'object'

class vof_smooth_options(Group):
    """
    Patch and smoothing options for volume fraction.
    """
    _version = '241'
    fluent_name = 'vof-smooth-options'
    _python_name = 'vof_smooth_options'
    child_names = ['patch_reconstructed_interface', 'use_volumetric_smoothing', 'smoothing_relaxation_factor']
    command_names = ['execute_smoothing']
    _child_classes = dict(
        patch_reconstructed_interface=patch_reconstructed_interface,
        use_volumetric_smoothing=use_volumetric_smoothing,
        smoothing_relaxation_factor=smoothing_relaxation_factor,
        execute_smoothing=execute_smoothing,
    )
    return_type = 'object'

class domain_1(String, AllowedValuesMixin):
    """
    Domain.
    """
    _version = '241'
    fluent_name = 'domain'
    _python_name = 'domain'
    return_type = 'object'

class cell_zones_5(StringList, AllowedValuesMixin):
    """
    Cell zone.
    """
    _version = '241'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'
    return_type = 'object'

class registers(StringList, AllowedValuesMixin):
    """
    Register.
    """
    _version = '241'
    fluent_name = 'registers'
    _python_name = 'registers'
    return_type = 'object'

class variable(String, AllowedValuesMixin):
    """
    Variable.
    """
    _version = '241'
    fluent_name = 'variable'
    _python_name = 'variable'
    return_type = 'object'

class reference_frame_4(String, AllowedValuesMixin):
    """
    Velocity Reference Frame.
    """
    _version = '241'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'
    return_type = 'object'

class use_custom_field_function(Boolean):
    """
    Enable/disable custom field function for patching.
    """
    _version = '241'
    fluent_name = 'use-custom-field-function?'
    _python_name = 'use_custom_field_function'
    return_type = 'object'

class custom_field_function_name(String, AllowedValuesMixin):
    """
    Custom function.
    """
    _version = '241'
    fluent_name = 'custom-field-function-name'
    _python_name = 'custom_field_function_name'
    return_type = 'object'

class value_5(Real):
    """
    Patch value.
    """
    _version = '241'
    fluent_name = 'value'
    _python_name = 'value'
    return_type = 'object'

class calculate_patch(Command):
    """
    Patch a value for a flow variable in the domain.
    
    Parameters
    ----------
        domain : str
            Domain.
        cell_zones : List
            Cell zone.
        registers : List
            Register.
        variable : str
            Variable.
        reference_frame : str
            Velocity Reference Frame.
        use_custom_field_function : bool
            Enable/disable custom field function for patching.
        custom_field_function_name : str
            Custom function.
        value : real
            Patch value.
    """
    _version = '241'
    fluent_name = 'calculate-patch'
    _python_name = 'calculate_patch'
    argument_names = ['domain', 'cell_zones', 'registers', 'variable', 'reference_frame', 'use_custom_field_function', 'custom_field_function_name', 'value']
    _child_classes = dict(
        domain=domain_1,
        cell_zones=cell_zones_5,
        registers=registers,
        variable=variable,
        reference_frame=reference_frame_4,
        use_custom_field_function=use_custom_field_function,
        custom_field_function_name=custom_field_function_name,
        value=value_5,
    )
    return_type = 'object'

class patch(Group):
    """
    Patch object.
    """
    _version = '241'
    fluent_name = 'patch'
    _python_name = 'patch'
    child_names = ['vof_smooth_options']
    command_names = ['calculate_patch']
    _child_classes = dict(
        vof_smooth_options=vof_smooth_options,
        calculate_patch=calculate_patch,
    )
    return_type = 'object'

class boundary_zone(Integer):
    """
    Boundary thread id.
    """
    _version = '241'
    fluent_name = 'boundary-zone'
    _python_name = 'boundary_zone'
    return_type = 'object'

class flat_init(Boolean):
    """
    Enable/disable flat free surface initialization.
    """
    _version = '241'
    fluent_name = 'flat-init?'
    _python_name = 'flat_init'
    return_type = 'object'

class wavy_surface_init(Boolean):
    """
    Enable/disable wavy free surface initialization.
    """
    _version = '241'
    fluent_name = 'wavy-surface-init?'
    _python_name = 'wavy_surface_init'
    return_type = 'object'

class open_channel_auto_init(Group):
    """
    Open channel automatic initialization.
    """
    _version = '241'
    fluent_name = 'open-channel-auto-init'
    _python_name = 'open_channel_auto_init'
    child_names = ['boundary_zone', 'flat_init', 'wavy_surface_init']
    _child_classes = dict(
        boundary_zone=boundary_zone,
        flat_init=flat_init,
        wavy_surface_init=wavy_surface_init,
    )
    return_type = 'object'

class fmg_courant_number(Real):
    """
    FMG Courant number.
    """
    _version = '241'
    fluent_name = 'fmg-courant-number'
    _python_name = 'fmg_courant_number'
    return_type = 'object'

class enable_fmg_verbose(Boolean):
    """
    Enable/disable FMG verbose.
    """
    _version = '241'
    fluent_name = 'enable-fmg-verbose?'
    _python_name = 'enable_fmg_verbose'
    return_type = 'object'

class viscous_terms(Boolean):
    """
    Enable viscous terms during FMG initialization.
    """
    _version = '241'
    fluent_name = 'viscous-terms?'
    _python_name = 'viscous_terms'
    return_type = 'object'

class species_reactions(Boolean):
    """
    Enable species volumetric reactions during FMG initialization.
    """
    _version = '241'
    fluent_name = 'species-reactions?'
    _python_name = 'species_reactions'
    return_type = 'object'

class turbulent_viscosity_ratio_3(Real):
    """
    Turbulent viscosity ratio used during FMG initialization.
    """
    _version = '241'
    fluent_name = 'turbulent-viscosity-ratio'
    _python_name = 'turbulent_viscosity_ratio'
    return_type = 'object'

class fmg_initialize(Command):
    """
    Initialize using the full-multigrid initialization (FMG).
    """
    _version = '241'
    fluent_name = 'fmg-initialize'
    _python_name = 'fmg_initialize'
    return_type = 'object'

class multi_level_grid(Integer):
    """
    Number of multigrid levels.
    """
    _version = '241'
    fluent_name = 'multi-level-grid'
    _python_name = 'multi_level_grid'
    return_type = 'object'

class residual_reduction(RealList):
    """
    Number of residual reduction levels.
    """
    _version = '241'
    fluent_name = 'residual-reduction'
    _python_name = 'residual_reduction'
    return_type = 'object'

class cycle_count(RealList):
    """
    Number of cycles.
    """
    _version = '241'
    fluent_name = 'cycle-count'
    _python_name = 'cycle_count'
    return_type = 'object'

class customize(Command):
    """
    Enter FMG customization object.
    
    Parameters
    ----------
        multi_level_grid : int
            Number of multigrid levels.
        residual_reduction : List
            Number of residual reduction levels.
        cycle_count : List
            Number of cycles.
    """
    _version = '241'
    fluent_name = 'customize'
    _python_name = 'customize'
    argument_names = ['multi_level_grid', 'residual_reduction', 'cycle_count']
    _child_classes = dict(
        multi_level_grid=multi_level_grid,
        residual_reduction=residual_reduction,
        cycle_count=cycle_count,
    )
    return_type = 'object'

class reset_to_defaults(Command):
    """
    'reset_to_defaults' command.
    """
    _version = '241'
    fluent_name = 'reset-to-defaults'
    _python_name = 'reset_to_defaults'
    return_type = 'object'

class fmg(Group):
    """
    The set full-multigrid for initialization object.
    """
    _version = '241'
    fluent_name = 'fmg'
    _python_name = 'fmg'
    child_names = ['fmg_courant_number', 'enable_fmg_verbose', 'viscous_terms', 'species_reactions', 'turbulent_viscosity_ratio']
    command_names = ['fmg_initialize', 'customize', 'reset_to_defaults']
    _child_classes = dict(
        fmg_courant_number=fmg_courant_number,
        enable_fmg_verbose=enable_fmg_verbose,
        viscous_terms=viscous_terms,
        species_reactions=species_reactions,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio_3,
        fmg_initialize=fmg_initialize,
        customize=customize,
        reset_to_defaults=reset_to_defaults,
    )
    return_type = 'object'

class initialize_1(Command):
    """
    Start initialization with current initialization type.
    """
    _version = '241'
    fluent_name = 'initialize'
    _python_name = 'initialize'
    return_type = 'object'

class from_zone_type_1(String, AllowedValuesMixin):
    """
    Boundary/zone type.
    """
    _version = '241'
    fluent_name = 'from-zone-type'
    _python_name = 'from_zone_type'
    return_type = 'object'

class from_zone_name_1(String, AllowedValuesMixin):
    """
    Selecte zone name.
    """
    _version = '241'
    fluent_name = 'from-zone-name'
    _python_name = 'from_zone_name'
    return_type = 'object'

class phase_29(String):
    """
    Phase name.
    """
    _version = '241'
    fluent_name = 'phase'
    _python_name = 'phase'
    return_type = 'object'

class compute_defaults(Command):
    """
    Compute default values from selection.
    
    Parameters
    ----------
        from_zone_type : str
            Boundary/zone type.
        from_zone_name : str
            Selecte zone name.
        phase : str
            Phase name.
    """
    _version = '241'
    fluent_name = 'compute-defaults'
    _python_name = 'compute_defaults'
    argument_names = ['from_zone_type', 'from_zone_name', 'phase']
    _child_classes = dict(
        from_zone_type=from_zone_type_1,
        from_zone_name=from_zone_name_1,
        phase=phase_29,
    )
    return_type = 'object'

class standard_initialize(Command):
    """
    Initialize the flow field with the current default values.
    """
    _version = '241'
    fluent_name = 'standard-initialize'
    _python_name = 'standard_initialize'
    return_type = 'object'

class hybrid_initialize(Command):
    """
    Initialize using the hybrid initialization method.
    """
    _version = '241'
    fluent_name = 'hybrid-initialize'
    _python_name = 'hybrid_initialize'
    return_type = 'object'

class list_defaults(Command):
    """
    List default values.
    """
    _version = '241'
    fluent_name = 'list-defaults'
    _python_name = 'list_defaults'
    return_type = 'object'

class init_turb_vel_fluctuations(Command):
    """
    Initialize turbulent velocity fluctuations.
    """
    _version = '241'
    fluent_name = 'init-turb-vel-fluctuations'
    _python_name = 'init_turb_vel_fluctuations'
    return_type = 'object'

class init_flow_statistics(Command):
    """
    Initialize statistics.
    """
    _version = '241'
    fluent_name = 'init-flow-statistics'
    _python_name = 'init_flow_statistics'
    return_type = 'object'

class show_iterations_sampled(Command):
    """
    Display the amount of simulated iterations covered by the data sampled for steady statistics.
    """
    _version = '241'
    fluent_name = 'show-iterations-sampled'
    _python_name = 'show_iterations_sampled'
    return_type = 'object'

class show_time_sampled(Command):
    """
    Display the amount of simulated time covered by the data sampled for unsteady statistics.
    """
    _version = '241'
    fluent_name = 'show-time-sampled'
    _python_name = 'show_time_sampled'
    return_type = 'object'

class dpm_reset(Command):
    """
    Reset discrete phase source terms to zero.
    """
    _version = '241'
    fluent_name = 'dpm-reset'
    _python_name = 'dpm_reset'
    return_type = 'object'

class lwf_reset(Command):
    """
    Delete wall film particles and initialize wall film variables to zero.
    """
    _version = '241'
    fluent_name = 'lwf-reset'
    _python_name = 'lwf_reset'
    return_type = 'object'

class init_lwf(Command):
    """
    Initialize Lagrangian wall film on all wall zones for which corresponding settings have been made.
    """
    _version = '241'
    fluent_name = 'init-lwf'
    _python_name = 'init_lwf'
    return_type = 'object'

class set_ramping_length(Boolean):
    """
    Enable/Disable ramping length and initialize acoustics.
    """
    _version = '241'
    fluent_name = 'set-ramping-length?'
    _python_name = 'set_ramping_length'
    return_type = 'object'

class time_step_count(Integer):
    """
    Number of timesteps for ramping of sources.
    """
    _version = '241'
    fluent_name = 'time-step-count'
    _python_name = 'time_step_count'
    return_type = 'object'

class init_acoustics_options(Command):
    """
    Specify number of timesteps for ramping of sources
    and initialize acoustics model variables.
    During ramping the sound sources are multiplied by a factor smoothly growing from 0 to 1.
    
    Parameters
    ----------
        set_ramping_length : bool
            Enable/Disable ramping length and initialize acoustics.
        time_step_count : int
            Number of timesteps for ramping of sources.
    """
    _version = '241'
    fluent_name = 'init-acoustics-options'
    _python_name = 'init_acoustics_options'
    argument_names = ['set_ramping_length', 'time_step_count']
    _child_classes = dict(
        set_ramping_length=set_ramping_length,
        time_step_count=time_step_count,
    )
    return_type = 'object'

class levelset_auto_init(Command):
    """
    Levelset function automatic initialization.
    """
    _version = '241'
    fluent_name = 'levelset-auto-init'
    _python_name = 'levelset_auto_init'
    return_type = 'object'

class initialization(Group):
    """
    Solution initialization object.
    """
    _version = '241'
    fluent_name = 'initialization'
    _python_name = 'initialization'
    child_names = ['initialization_type', 'reference_frame', 'defaults', 'localized_turb_init', 'hybrid_init_options', 'patch', 'open_channel_auto_init', 'fmg']
    command_names = ['initialize', 'compute_defaults', 'standard_initialize', 'hybrid_initialize', 'list_defaults', 'init_turb_vel_fluctuations', 'init_flow_statistics', 'show_iterations_sampled', 'show_time_sampled', 'dpm_reset', 'lwf_reset', 'init_lwf', 'init_acoustics_options', 'levelset_auto_init']
    _child_classes = dict(
        initialization_type=initialization_type,
        reference_frame=reference_frame_3,
        defaults=defaults,
        localized_turb_init=localized_turb_init,
        hybrid_init_options=hybrid_init_options,
        patch=patch,
        open_channel_auto_init=open_channel_auto_init,
        fmg=fmg,
        initialize=initialize_1,
        compute_defaults=compute_defaults,
        standard_initialize=standard_initialize,
        hybrid_initialize=hybrid_initialize,
        list_defaults=list_defaults,
        init_turb_vel_fluctuations=init_turb_vel_fluctuations,
        init_flow_statistics=init_flow_statistics,
        show_iterations_sampled=show_iterations_sampled,
        show_time_sampled=show_time_sampled,
        dpm_reset=dpm_reset,
        lwf_reset=lwf_reset,
        init_lwf=init_lwf,
        init_acoustics_options=init_acoustics_options,
        levelset_auto_init=levelset_auto_init,
    )
    return_type = 'object'

class command_name(String):
    """
    'command_name' child.
    """
    _version = '241'
    fluent_name = 'command-name'
    _python_name = 'command_name'
    return_type = 'object'

class enable_16(Command):
    """
    Enable an execute-command.
    """
    _version = '241'
    fluent_name = 'enable'
    _python_name = 'enable'
    argument_names = ['command_name']
    _child_classes = dict(
        command_name=command_name,
    )
    return_type = 'object'

class disable_1(Command):
    """
    Disable an execute-command.
    """
    _version = '241'
    fluent_name = 'disable'
    _python_name = 'disable'
    argument_names = ['command_name']
    _child_classes = dict(
        command_name=command_name,
    )
    return_type = 'object'

class copy_3(Command):
    """
    Copy an execute-command.
    """
    _version = '241'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['command_name']
    _child_classes = dict(
        command_name=command_name,
    )
    return_type = 'object'

class delete_4(CommandWithPositionalArgs):
    """
    Delete an execute-command.
    """
    _version = '241'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['command_name']
    _child_classes = dict(
        command_name=command_name,
    )
    return_type = 'object'

class command_name_1(StringList):
    """
    'command_name' child.
    """
    _version = '241'
    fluent_name = 'command-name'
    _python_name = 'command_name'
    return_type = 'object'

class tsv_file_name(Filename):
    """
    'tsv_file_name' child.
    """
    _version = '241'
    fluent_name = 'tsv-file-name'
    _python_name = 'tsv_file_name'
    return_type = 'object'

class export_1(Command):
    """
    Export execute-commands to a TSV file.
    """
    _version = '241'
    fluent_name = 'export'
    _python_name = 'export'
    argument_names = ['command_name', 'tsv_file_name']
    _child_classes = dict(
        command_name=command_name_1,
        tsv_file_name=tsv_file_name,
    )
    return_type = 'object'

class import__1(Command):
    """
    Import execute-commands from a TSV file.
    """
    _version = '241'
    fluent_name = 'import_'
    _python_name = 'import_'
    argument_names = ['tsv_file_name']
    _child_classes = dict(
        tsv_file_name=tsv_file_name,
    )
    return_type = 'object'

class execute_commands(Group):
    """
    'execute_commands' child.
    """
    _version = '241'
    fluent_name = 'execute-commands'
    _python_name = 'execute_commands'
    command_names = ['enable', 'disable', 'copy', 'delete', 'export', 'import_']
    _child_classes = dict(
        enable=enable_16,
        disable=disable_1,
        copy=copy_3,
        delete=delete_4,
        export=export_1,
        import_=import__1,
    )
    return_type = 'object'

class object_name_1(String, AllowedValuesMixin):
    """
    'object_name' child.
    """
    _version = '241'
    fluent_name = 'object-name'
    _python_name = 'object_name'
    return_type = 'object'

class display_2(Command):
    """
    Display graphics object.
    
    Parameters
    ----------
        object_name : str
            'object_name' child.
    """
    _version = '241'
    fluent_name = 'display'
    _python_name = 'display'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name_1,
    )
    return_type = 'object'

class from_name(String, AllowedValuesMixin):
    """
    'from_name' child.
    """
    _version = '241'
    fluent_name = 'from-name'
    _python_name = 'from_name'
    return_type = 'object'

class copy_4(Command):
    """
    Copy graphics object.
    
    Parameters
    ----------
        from_name : str
            'from_name' child.
        new_name : str
            'new_name' child.
    """
    _version = '241'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['from_name', 'new_name']
    _child_classes = dict(
        from_name=from_name,
        new_name=new_name,
    )
    return_type = 'object'

class add_to_graphics(Command):
    """
    Add graphics object to existing graphics.
    
    Parameters
    ----------
        object_name : str
            'object_name' child.
    """
    _version = '241'
    fluent_name = 'add-to-graphics'
    _python_name = 'add_to_graphics'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name_1,
    )
    return_type = 'object'

class clear_history(Command):
    """
    Clear object history.
    
    Parameters
    ----------
        object_name : str
            'object_name' child.
    """
    _version = '241'
    fluent_name = 'clear-history'
    _python_name = 'clear_history'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name_1,
    )
    return_type = 'object'

class animate_on(String, AllowedValuesMixin):
    """
    'animate_on' child.
    """
    _version = '241'
    fluent_name = 'animate-on'
    _python_name = 'animate_on'
    return_type = 'object'

class flow_time_frequency(Real):
    """
    'flow_time_frequency' child.
    """
    _version = '241'
    fluent_name = 'flow-time-frequency'
    _python_name = 'flow_time_frequency'
    return_type = 'object'

class storage_type(Integer):
    """
    'storage_type' child.
    """
    _version = '241'
    fluent_name = 'storage-type'
    _python_name = 'storage_type'
    return_type = 'object'

class storage_dir(String, AllowedValuesMixin):
    """
    'storage_dir' child.
    """
    _version = '241'
    fluent_name = 'storage-dir'
    _python_name = 'storage_dir'
    return_type = 'object'

class window_id(Integer):
    """
    'window_id' child.
    """
    _version = '241'
    fluent_name = 'window-id'
    _python_name = 'window_id'
    return_type = 'object'

class view(String, AllowedValuesMixin):
    """
    'view' child.
    """
    _version = '241'
    fluent_name = 'view'
    _python_name = 'view'
    return_type = 'object'

class use_raytracing(Boolean):
    """
    'use_raytracing' child.
    """
    _version = '241'
    fluent_name = 'use-raytracing?'
    _python_name = 'use_raytracing'
    return_type = 'object'

class display_3(Command):
    """
    'display' command.
    """
    _version = '241'
    fluent_name = 'display'
    _python_name = 'display'
    return_type = 'object'

class solution_animations_child(Group):
    """
    'child_object_type' of solution_animations.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'solution_animations_child'
    child_names = ['name', 'animate_on', 'frequency', 'flow_time_frequency', 'frequency_of', 'storage_type', 'storage_dir', 'window_id', 'view', 'use_raytracing']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        animate_on=animate_on,
        frequency=frequency_1,
        flow_time_frequency=flow_time_frequency,
        frequency_of=frequency_of,
        storage_type=storage_type,
        storage_dir=storage_dir,
        window_id=window_id,
        view=view,
        use_raytracing=use_raytracing,
        display=display_3,
    )
    return_type = 'object'

class solution_animations(NamedObject[solution_animations_child], CreatableNamedObjectMixinOld[solution_animations_child]):
    """
    'solution_animations' child.
    """
    _version = '241'
    fluent_name = 'solution-animations'
    _python_name = 'solution_animations'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display=display_2,
        copy=copy_4,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = solution_animations_child
    return_type = 'object'

class enabled_17(Boolean):
    """
    Enable automatic initialization and modification of case.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class init_from_data_file(String, AllowedValuesMixin):
    """
    Data File.
    """
    _version = '241'
    fluent_name = 'init-from-data-file'
    _python_name = 'init_from_data_file'
    return_type = 'object'

class option_12(String, AllowedValuesMixin):
    """
    How to initialize the solution for first run.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class init_from_solution(Group):
    """
    How to initialize if no solution data exists.
    """
    _version = '241'
    fluent_name = 'init-from-solution'
    _python_name = 'init_from_solution'
    child_names = ['option', 'init_from_data_file']
    _child_classes = dict(
        option=option_12,
        init_from_data_file=init_from_data_file,
    )
    return_type = 'object'

class initialization_method(Group):
    """
    'initialization_method' child.
    """
    _version = '241'
    fluent_name = 'initialization-method'
    _python_name = 'initialization_method'
    child_names = ['init_from_data_file', 'init_from_solution']
    _child_classes = dict(
        init_from_data_file=init_from_data_file,
        init_from_solution=init_from_solution,
    )
    return_type = 'object'

class python_cmd(Boolean):
    """
    'python_cmd' child.
    """
    _version = '241'
    fluent_name = 'python-cmd?'
    _python_name = 'python_cmd'
    return_type = 'object'

class command(String, AllowedValuesMixin):
    """
    'command' child.
    """
    _version = '241'
    fluent_name = 'command'
    _python_name = 'command'
    return_type = 'object'

class count(Integer):
    """
    'count' child.
    """
    _version = '241'
    fluent_name = 'count'
    _python_name = 'count'
    return_type = 'object'

class ftselected(Boolean):
    """
    'ftselected' child.
    """
    _version = '241'
    fluent_name = 'ftselected'
    _python_name = 'ftselected'
    return_type = 'object'

class flowtime(Real):
    """
    'flowtime' child.
    """
    _version = '241'
    fluent_name = 'flowtime'
    _python_name = 'flowtime'
    return_type = 'object'

class before_init_modification(Group):
    """
    'before_init_modification' child.
    """
    _version = '241'
    fluent_name = 'before-init-modification'
    _python_name = 'before_init_modification'
    child_names = ['active', 'name', 'python_cmd', 'command', 'count', 'ftselected', 'flowtime']
    _child_classes = dict(
        active=active,
        name=name_1,
        python_cmd=python_cmd,
        command=command,
        count=count,
        ftselected=ftselected,
        flowtime=flowtime,
    )
    return_type = 'object'

class original_settings(Group):
    """
    'original_settings' child.
    """
    _version = '241'
    fluent_name = 'original-settings'
    _python_name = 'original_settings'
    child_names = ['active', 'name', 'python_cmd', 'command', 'count', 'ftselected', 'flowtime']
    _child_classes = dict(
        active=active,
        name=name_1,
        python_cmd=python_cmd,
        command=command,
        count=count,
        ftselected=ftselected,
        flowtime=flowtime,
    )
    return_type = 'object'

class modifications_child(Group):
    """
    'child_object_type' of modifications.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'modifications_child'
    child_names = ['active', 'name', 'python_cmd', 'command', 'count', 'ftselected', 'flowtime']
    _child_classes = dict(
        active=active,
        name=name_1,
        python_cmd=python_cmd,
        command=command,
        count=count,
        ftselected=ftselected,
        flowtime=flowtime,
    )
    return_type = 'object'

class modifications(ListObject[modifications_child]):
    """
    'modifications' child.
    """
    _version = '241'
    fluent_name = 'modifications'
    _python_name = 'modifications'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = modifications_child
    return_type = 'object'

class case_modification_1(Group):
    """
    'case_modification' child.
    """
    _version = '241'
    fluent_name = 'case-modification'
    _python_name = 'case_modification'
    child_names = ['before_init_modification', 'original_settings', 'modifications']
    _child_classes = dict(
        before_init_modification=before_init_modification,
        original_settings=original_settings,
        modifications=modifications,
    )
    return_type = 'object'

class initialization_type_1(String, AllowedValuesMixin):
    """
    'initialization_type' child.
    """
    _version = '241'
    fluent_name = 'initialization-type'
    _python_name = 'initialization_type'
    return_type = 'object'

class data_file_name(String):
    """
    'data_file_name' child.
    """
    _version = '241'
    fluent_name = 'data-file-name'
    _python_name = 'data_file_name'
    return_type = 'object'

class init_from_solution_1(String, AllowedValuesMixin):
    """
    'init_from_solution' child.
    """
    _version = '241'
    fluent_name = 'init-from-solution'
    _python_name = 'init_from_solution'
    return_type = 'object'

class data_file_name2(String):
    """
    'data_file_name2' child.
    """
    _version = '241'
    fluent_name = 'data-file-name2'
    _python_name = 'data_file_name2'
    return_type = 'object'

class automatic_initialization(Command):
    """
    Define how the case is to be initialized automatically.
    
    Parameters
    ----------
        initialization_type : str
            'initialization_type' child.
        data_file_name : str
            'data_file_name' child.
        init_from_solution : str
            'init_from_solution' child.
        data_file_name2 : str
            'data_file_name2' child.
    """
    _version = '241'
    fluent_name = 'automatic-initialization'
    _python_name = 'automatic_initialization'
    argument_names = ['initialization_type', 'data_file_name', 'init_from_solution', 'data_file_name2']
    _child_classes = dict(
        initialization_type=initialization_type_1,
        data_file_name=data_file_name,
        init_from_solution=init_from_solution_1,
        data_file_name2=data_file_name2,
    )
    return_type = 'object'

class save_mode(String, AllowedValuesMixin):
    """
    'save_mode' child.
    """
    _version = '241'
    fluent_name = 'save-mode'
    _python_name = 'save_mode'
    return_type = 'object'

class continue_with_current_mesh(Boolean):
    """
    Reloading of the upstream mesh data is desired. Is it needed to continue with currently loaded mesh?.
    """
    _version = '241'
    fluent_name = 'continue-with-current-mesh?'
    _python_name = 'continue_with_current_mesh'
    return_type = 'object'

class discard_all_data(Boolean):
    """
    'discard_all_data' child.
    """
    _version = '241'
    fluent_name = 'discard-all-data?'
    _python_name = 'discard_all_data'
    return_type = 'object'

class execute_strategy(Command):
    """
    Execute the automatic initialization and case modification strategy defined at present .
    
    Parameters
    ----------
        save_mode : str
            'save_mode' child.
        continue_with_current_mesh : bool
            Reloading of the upstream mesh data is desired. Is it needed to continue with currently loaded mesh?.
        discard_all_data : bool
            'discard_all_data' child.
    """
    _version = '241'
    fluent_name = 'execute-strategy'
    _python_name = 'execute_strategy'
    argument_names = ['save_mode', 'continue_with_current_mesh', 'discard_all_data']
    _child_classes = dict(
        save_mode=save_mode,
        continue_with_current_mesh=continue_with_current_mesh,
        discard_all_data=discard_all_data,
    )
    return_type = 'object'

class enable_strategy(Command):
    """
    Specify whether automatic initialization and case modification should be enabled.
    
    Parameters
    ----------
        enable : bool
            'enable' child.
    """
    _version = '241'
    fluent_name = 'enable-strategy?'
    _python_name = 'enable_strategy'
    argument_names = ['enable']
    _child_classes = dict(
        enable=enable,
    )
    return_type = 'object'

class mod_name(String):
    """
    'mod_name' child.
    """
    _version = '241'
    fluent_name = 'mod-name'
    _python_name = 'mod_name'
    return_type = 'object'

class copy_modification(Command):
    """
    Copy a single case modification.
    
    Parameters
    ----------
        mod_name : str
            'mod_name' child.
    """
    _version = '241'
    fluent_name = 'copy-modification'
    _python_name = 'copy_modification'
    argument_names = ['mod_name']
    _child_classes = dict(
        mod_name=mod_name,
    )
    return_type = 'object'

class delete_modification(Command):
    """
    Delete a single case modification.
    
    Parameters
    ----------
        mod_name : str
            'mod_name' child.
    """
    _version = '241'
    fluent_name = 'delete-modification'
    _python_name = 'delete_modification'
    argument_names = ['mod_name']
    _child_classes = dict(
        mod_name=mod_name,
    )
    return_type = 'object'

class enable_modification(Command):
    """
    Enable a single defined case modification.
    
    Parameters
    ----------
        mod_name : str
            'mod_name' child.
    """
    _version = '241'
    fluent_name = 'enable-modification'
    _python_name = 'enable_modification'
    argument_names = ['mod_name']
    _child_classes = dict(
        mod_name=mod_name,
    )
    return_type = 'object'

class disable_modification(Command):
    """
    Disable a single defined case modification.
    
    Parameters
    ----------
        mod_name : str
            'mod_name' child.
    """
    _version = '241'
    fluent_name = 'disable-modification'
    _python_name = 'disable_modification'
    argument_names = ['mod_name']
    _child_classes = dict(
        mod_name=mod_name,
    )
    return_type = 'object'

class import_modifications(Command):
    """
    Import a list of case modifications from a tsv file.
    
    Parameters
    ----------
        filename : str
            'filename' child.
    """
    _version = '241'
    fluent_name = 'import-modifications'
    _python_name = 'import_modifications'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_1,
    )
    return_type = 'object'

class command_list(StringList):
    """
    'command_list' child.
    """
    _version = '241'
    fluent_name = 'command-list'
    _python_name = 'command_list'
    return_type = 'object'

class export_modifications(Command):
    """
    Export all case modifications to a tsv file.
    """
    _version = '241'
    fluent_name = 'export-modifications'
    _python_name = 'export_modifications'
    argument_names = ['command_list', 'filename']
    _child_classes = dict(
        command_list=command_list,
        filename=filename_1,
    )
    return_type = 'object'

class continue_strategy_execution(Command):
    """
    Continue execution of the automatic initialization and case modification strategy defined at present.
    """
    _version = '241'
    fluent_name = 'continue-strategy-execution'
    _python_name = 'continue_strategy_execution'
    return_type = 'object'

class case_modification(Group):
    """
    'case_modification' child.
    """
    _version = '241'
    fluent_name = 'case-modification'
    _python_name = 'case_modification'
    child_names = ['enabled', 'initialization_method', 'case_modification']
    command_names = ['automatic_initialization', 'execute_strategy', 'enable_strategy', 'copy_modification', 'delete_modification', 'enable_modification', 'disable_modification', 'import_modifications', 'export_modifications', 'continue_strategy_execution']
    _child_classes = dict(
        enabled=enabled_17,
        initialization_method=initialization_method,
        case_modification=case_modification_1,
        automatic_initialization=automatic_initialization,
        execute_strategy=execute_strategy,
        enable_strategy=enable_strategy,
        copy_modification=copy_modification,
        delete_modification=delete_modification,
        enable_modification=enable_modification,
        disable_modification=disable_modification,
        import_modifications=import_modifications,
        export_modifications=export_modifications,
        continue_strategy_execution=continue_strategy_execution,
    )
    return_type = 'object'

class list_2(Command):
    """
    List the names of the definitions for poor mesh numerics.
    """
    _version = '241'
    fluent_name = 'list'
    _python_name = 'list'
    return_type = 'object'

class register_name_1(String, AllowedValuesMixin):
    """
    'register_name' child.
    """
    _version = '241'
    fluent_name = 'register-name'
    _python_name = 'register_name'
    return_type = 'object'

class list_properties_5(Command):
    """
    List the properties of a definition for poor mesh numerics.
    
    Parameters
    ----------
        register_name : str
            'register_name' child.
    """
    _version = '241'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    argument_names = ['register_name']
    _child_classes = dict(
        register_name=register_name_1,
    )
    return_type = 'object'

class set_1(Command):
    """
    'set' command.
    """
    _version = '241'
    fluent_name = 'set'
    _python_name = 'set'
    return_type = 'object'

class name_2(String, AllowedValuesMixin):
    """
    The name of the dynamic poor mesh register.
    """
    _version = '241'
    fluent_name = 'name'
    _python_name = 'name'
    return_type = 'object'

class register_1(String, AllowedValuesMixin):
    """
    The register to which poor mesh numerics is applied.
    """
    _version = '241'
    fluent_name = 'register'
    _python_name = 'register'
    return_type = 'object'

class option_13(String, AllowedValuesMixin):
    """
    The frequency mode used for marking of cells in a register for poor mesh numerics treatment.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class iterations_1(Integer):
    """
    The frequency (in iterations) at which cells in the register are marked for poor mesh numerics treatment.
    """
    _version = '241'
    fluent_name = 'iterations'
    _python_name = 'iterations'
    return_type = 'object'

class time_steps(Integer):
    """
    The frequency (in time steps) at which cells in the register are automatically marked for poor mesh numerics treatment.
    """
    _version = '241'
    fluent_name = 'time-steps'
    _python_name = 'time_steps'
    return_type = 'object'

class frequency_2(Group):
    """
    Define the frequency at which cells in the register are marked for poor mesh numerics treatment.
    """
    _version = '241'
    fluent_name = 'frequency'
    _python_name = 'frequency'
    child_names = ['option', 'iterations', 'time_steps']
    _child_classes = dict(
        option=option_13,
        iterations=iterations_1,
        time_steps=time_steps,
    )
    return_type = 'object'

class active_1(Boolean):
    """
    Enable the application of this definition for poor mesh numerics.
    """
    _version = '241'
    fluent_name = 'active?'
    _python_name = 'active'
    return_type = 'object'

class verbosity_12(Integer):
    """
    The verbosity of the console messages printed about this definition for poor mesh numerics.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class monitor_2(String, AllowedValuesMixin):
    """
    'monitor' child.
    """
    _version = '241'
    fluent_name = 'monitor'
    _python_name = 'monitor'
    return_type = 'object'

class register_based_child(Group):
    """
    'child_object_type' of register_based.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'register_based_child'
    child_names = ['name', 'register', 'frequency', 'active', 'verbosity', 'monitor']
    _child_classes = dict(
        name=name_2,
        register=register_1,
        frequency=frequency_2,
        active=active_1,
        verbosity=verbosity_12,
        monitor=monitor_2,
    )
    return_type = 'object'

class register_based(NamedObject[register_based_child], CreatableNamedObjectMixinOld[register_based_child]):
    """
    Up the application of poor mesh numerics to cells in a register.
    """
    _version = '241'
    fluent_name = 'register-based'
    _python_name = 'register_based'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'set']
    _child_classes = dict(
        delete=delete_1,
        list=list_2,
        list_properties=list_properties_5,
        make_a_copy=make_a_copy,
        set=set_1,
    )
    child_object_type = register_based_child
    return_type = 'object'

class poor_mesh_numerics(Group):
    """
    'poor_mesh_numerics' child.
    """
    _version = '241'
    fluent_name = 'poor-mesh-numerics'
    _python_name = 'poor_mesh_numerics'
    child_names = ['register_based']
    _child_classes = dict(
        register_based=register_based,
    )
    return_type = 'object'

class calculation_activity(Group):
    """
    'calculation_activity' child.
    """
    _version = '241'
    fluent_name = 'calculation-activity'
    _python_name = 'calculation_activity'
    child_names = ['execute_commands', 'solution_animations', 'case_modification', 'poor_mesh_numerics']
    _child_classes = dict(
        execute_commands=execute_commands,
        solution_animations=solution_animations,
        case_modification=case_modification,
        poor_mesh_numerics=poor_mesh_numerics,
    )
    return_type = 'object'

class verbosity_13(Integer):
    """
    The verbosity for the pseudo time method.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class time_step_method_1(String, AllowedValuesMixin):
    """
    Enable/disable use of automatic time step size calculation.
    """
    _version = '241'
    fluent_name = 'time-step-method'
    _python_name = 'time_step_method'
    return_type = 'object'

class pseudo_time_step_size(Real):
    """
    Pseudo time step size.
    """
    _version = '241'
    fluent_name = 'pseudo-time-step-size'
    _python_name = 'pseudo_time_step_size'
    return_type = 'object'

class length_scale_methods(String, AllowedValuesMixin):
    """
    Length Scale Calculation Method.
    """
    _version = '241'
    fluent_name = 'length-scale-methods'
    _python_name = 'length_scale_methods'
    return_type = 'object'

class time_step_size_scale_factor_1(Real):
    """
    Auto Time Step Size Scaling Factor.
    """
    _version = '241'
    fluent_name = 'time-step-size-scale-factor'
    _python_name = 'time_step_size_scale_factor'
    return_type = 'object'

class length_scale_1(Real):
    """
    'length_scale' child.
    """
    _version = '241'
    fluent_name = 'length-scale'
    _python_name = 'length_scale'
    return_type = 'object'

class auto_time_size_calc_solid_zone(Boolean):
    """
    Enable/disable automatic time step size calculation for solid zone.
    """
    _version = '241'
    fluent_name = 'auto-time-size-calc-solid-zone?'
    _python_name = 'auto_time_size_calc_solid_zone'
    return_type = 'object'

class time_solid_scale_factor(Real):
    """
    Auto Time Step Size Scaling Factor for solid zones.
    """
    _version = '241'
    fluent_name = 'time-solid-scale-factor'
    _python_name = 'time_solid_scale_factor'
    return_type = 'object'

class time_step_size_for_solid_zone(Real):
    """
    Pseudo Time Step Size for solid zones.
    """
    _version = '241'
    fluent_name = 'time-step-size-for-solid-zone'
    _python_name = 'time_step_size_for_solid_zone'
    return_type = 'object'

class time_step_method(Group):
    """
    Adjust the settings for the global time step formulation.
    """
    _version = '241'
    fluent_name = 'time-step-method'
    _python_name = 'time_step_method'
    child_names = ['time_step_method', 'pseudo_time_step_size', 'length_scale_methods', 'time_step_size_scale_factor', 'length_scale', 'auto_time_size_calc_solid_zone', 'time_solid_scale_factor', 'time_step_size_for_solid_zone']
    _child_classes = dict(
        time_step_method=time_step_method_1,
        pseudo_time_step_size=pseudo_time_step_size,
        length_scale_methods=length_scale_methods,
        time_step_size_scale_factor=time_step_size_scale_factor_1,
        length_scale=length_scale_1,
        auto_time_size_calc_solid_zone=auto_time_size_calc_solid_zone,
        time_solid_scale_factor=time_solid_scale_factor,
        time_step_size_for_solid_zone=time_step_size_for_solid_zone,
    )
    return_type = 'object'

class pseudo_time_settings(Group):
    """
    The pseudo time method object.
    """
    _version = '241'
    fluent_name = 'pseudo-time-settings'
    _python_name = 'pseudo_time_settings'
    child_names = ['verbosity', 'time_step_method']
    _child_classes = dict(
        verbosity=verbosity_13,
        time_step_method=time_step_method,
    )
    return_type = 'object'

class iter_count_2(Integer):
    """
    Number of iterations.
    """
    _version = '241'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'
    return_type = 'object'

class enabled_18(Boolean):
    """
    Enable/disable adaptive time stepping.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class user_defined_timestep(String, AllowedValuesMixin):
    """
    User-defined time-step option.
    """
    _version = '241'
    fluent_name = 'user-defined-timestep'
    _python_name = 'user_defined_timestep'
    return_type = 'object'

class error_tolerance(Real):
    """
    Truncation Error Tolerance.
    """
    _version = '241'
    fluent_name = 'error-tolerance'
    _python_name = 'error_tolerance'
    return_type = 'object'

class time_end(Real):
    """
    Total Simulation Time.
    """
    _version = '241'
    fluent_name = 'time-end'
    _python_name = 'time_end'
    return_type = 'object'

class min_time_step(Real):
    """
    Minimum Time Step Size.
    """
    _version = '241'
    fluent_name = 'min-time-step'
    _python_name = 'min_time_step'
    return_type = 'object'

class max_time_step(Real):
    """
    Maximum Time Step Size.
    """
    _version = '241'
    fluent_name = 'max-time-step'
    _python_name = 'max_time_step'
    return_type = 'object'

class min_step_change_factor(Real):
    """
    Minimum Step Change Factor.
    """
    _version = '241'
    fluent_name = 'min-step-change-factor'
    _python_name = 'min_step_change_factor'
    return_type = 'object'

class max_step_change_factor(Real):
    """
    Maximum Step Change Factor.
    """
    _version = '241'
    fluent_name = 'max-step-change-factor'
    _python_name = 'max_step_change_factor'
    return_type = 'object'

class fixed_time_step_count(Integer):
    """
    Number of Fixed Time Steps.
    """
    _version = '241'
    fluent_name = 'fixed-time-step-count'
    _python_name = 'fixed_time_step_count'
    return_type = 'object'

class adaptive_time_stepping(Group):
    """
    Adaptive time stepping object.
    """
    _version = '241'
    fluent_name = 'adaptive-time-stepping'
    _python_name = 'adaptive_time_stepping'
    child_names = ['enabled', 'user_defined_timestep', 'error_tolerance', 'time_end', 'min_time_step', 'max_time_step', 'min_step_change_factor', 'max_step_change_factor', 'fixed_time_step_count']
    _child_classes = dict(
        enabled=enabled_18,
        user_defined_timestep=user_defined_timestep,
        error_tolerance=error_tolerance,
        time_end=time_end,
        min_time_step=min_time_step,
        max_time_step=max_time_step,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
        fixed_time_step_count=fixed_time_step_count,
    )
    return_type = 'object'

class enabled_19(Boolean):
    """
    Enable/disable CFL-based adaptive time stepping.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class desired_cfl(Real):
    """
    Courant Number.
    """
    _version = '241'
    fluent_name = 'desired-cfl'
    _python_name = 'desired_cfl'
    return_type = 'object'

class initial_time_step(Real):
    """
    Initial Time Step Size.
    """
    _version = '241'
    fluent_name = 'initial-time-step'
    _python_name = 'initial_time_step'
    return_type = 'object'

class max_fixed_time_step(Integer):
    """
    Number of Fixed Time Steps.
    """
    _version = '241'
    fluent_name = 'max-fixed-time-step'
    _python_name = 'max_fixed_time_step'
    return_type = 'object'

class update_interval_time_step_size(Integer):
    """
    Time Step Size Update Interval.
    """
    _version = '241'
    fluent_name = 'update-interval-time-step-size'
    _python_name = 'update_interval_time_step_size'
    return_type = 'object'

class cfl_based_adaptive_time_stepping(Group):
    """
    CFL-based adaptive time stepping object.
    """
    _version = '241'
    fluent_name = 'cfl-based-adaptive-time-stepping'
    _python_name = 'cfl_based_adaptive_time_stepping'
    child_names = ['enabled', 'user_defined_timestep', 'desired_cfl', 'time_end', 'initial_time_step', 'max_fixed_time_step', 'update_interval_time_step_size', 'min_time_step', 'max_time_step', 'min_step_change_factor', 'max_step_change_factor']
    _child_classes = dict(
        enabled=enabled_19,
        user_defined_timestep=user_defined_timestep,
        desired_cfl=desired_cfl,
        time_end=time_end,
        initial_time_step=initial_time_step,
        max_fixed_time_step=max_fixed_time_step,
        update_interval_time_step_size=update_interval_time_step_size,
        min_time_step=min_time_step,
        max_time_step=max_time_step,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
    )
    return_type = 'object'

class reporting_interval(Integer):
    """
    Number of solver iterations before returning to scheme.
    """
    _version = '241'
    fluent_name = 'reporting-interval'
    _python_name = 'reporting_interval'
    return_type = 'object'

class profile_update_interval(Integer):
    """
    Number of solver iterations after which profile is updated.
    """
    _version = '241'
    fluent_name = 'profile-update-interval'
    _python_name = 'profile_update_interval'
    return_type = 'object'

class time_step_count_1(Real):
    """
    The time step.
    """
    _version = '241'
    fluent_name = 'time-step-count'
    _python_name = 'time_step_count'
    return_type = 'object'

class type_9(String, AllowedValuesMixin):
    """
    Time advancement method type.
    """
    _version = '241'
    fluent_name = 'type'
    _python_name = 'type'
    return_type = 'object'

class method_9(String, AllowedValuesMixin):
    """
    Time advancement method.
    """
    _version = '241'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class duration_specification_method(String, AllowedValuesMixin):
    """
    Duration specification method.
    """
    _version = '241'
    fluent_name = 'duration-specification-method'
    _python_name = 'duration_specification_method'
    return_type = 'object'

class specified_time_step(Boolean):
    """
    Use specified time step or courant number.
    """
    _version = '241'
    fluent_name = 'specified-time-step'
    _python_name = 'specified_time_step'
    return_type = 'object'

class incremental_time(Real):
    """
    Incremental Time.
    """
    _version = '241'
    fluent_name = 'incremental-time'
    _python_name = 'incremental_time'
    return_type = 'object'

class time_step_count_2(Integer):
    """
    Inceremtal number of Time steps.
    """
    _version = '241'
    fluent_name = 'time-step-count'
    _python_name = 'time_step_count'
    return_type = 'object'

class total_time(Real):
    """
    Total Simulation Time.
    """
    _version = '241'
    fluent_name = 'total-time'
    _python_name = 'total_time'
    return_type = 'object'

class time_step_size(Real):
    """
    The physical time step size.
    """
    _version = '241'
    fluent_name = 'time-step-size'
    _python_name = 'time_step_size'
    return_type = 'object'

class max_iter_per_time_step(Integer):
    """
    Max Iterations/Time Step.
    """
    _version = '241'
    fluent_name = 'max-iter-per-time-step'
    _python_name = 'max_iter_per_time_step'
    return_type = 'object'

class total_time_step_count(Integer):
    """
    Total number of Time steps.
    """
    _version = '241'
    fluent_name = 'total-time-step-count'
    _python_name = 'total_time_step_count'
    return_type = 'object'

class solution_status(Boolean):
    """
    Activate the simulation status panel.
    """
    _version = '241'
    fluent_name = 'solution-status'
    _python_name = 'solution_status'
    return_type = 'object'

class extrapolate_variables(Boolean):
    """
    The extrapolation object.
    """
    _version = '241'
    fluent_name = 'extrapolate-variables'
    _python_name = 'extrapolate_variables'
    return_type = 'object'

class max_flow_time(Real):
    """
    Maximum flow time.
    """
    _version = '241'
    fluent_name = 'max-flow-time'
    _python_name = 'max_flow_time'
    return_type = 'object'

class courant_number_1(Real):
    """
    Courant Number.
    """
    _version = '241'
    fluent_name = 'courant-number'
    _python_name = 'courant_number'
    return_type = 'object'

class initial_time_step_size(Real):
    """
    Initial Time Step Size.
    """
    _version = '241'
    fluent_name = 'initial-time-step-size'
    _python_name = 'initial_time_step_size'
    return_type = 'object'

class fixed_time_step_size(Integer):
    """
    Number of Fixed Time Steps.
    """
    _version = '241'
    fluent_name = 'fixed-time-step-size'
    _python_name = 'fixed_time_step_size'
    return_type = 'object'

class min_time_step_size(Real):
    """
    Minimum Time Step Size.
    """
    _version = '241'
    fluent_name = 'min-time-step-size'
    _python_name = 'min_time_step_size'
    return_type = 'object'

class max_time_step_size(Real):
    """
    Maximum Time Step Size.
    """
    _version = '241'
    fluent_name = 'max-time-step-size'
    _python_name = 'max_time_step_size'
    return_type = 'object'

class update_interval(Integer):
    """
    Time Step Size Update Interval.
    """
    _version = '241'
    fluent_name = 'update-interval'
    _python_name = 'update_interval'
    return_type = 'object'

class cfl_based_time_stepping(Group):
    """
    CFL-based time stepping object.
    """
    _version = '241'
    fluent_name = 'cfl-based-time-stepping'
    _python_name = 'cfl_based_time_stepping'
    child_names = ['courant_number', 'initial_time_step_size', 'fixed_time_step_size', 'min_time_step_size', 'max_time_step_size', 'min_step_change_factor', 'max_step_change_factor', 'update_interval']
    _child_classes = dict(
        courant_number=courant_number_1,
        initial_time_step_size=initial_time_step_size,
        fixed_time_step_size=fixed_time_step_size,
        min_time_step_size=min_time_step_size,
        max_time_step_size=max_time_step_size,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
        update_interval=update_interval,
    )
    return_type = 'object'

class control_time_step_size_variation(Boolean):
    """
    Control time step size variation.
    """
    _version = '241'
    fluent_name = 'control-time-step-size-variation?'
    _python_name = 'control_time_step_size_variation'
    return_type = 'object'

class use_average_cfl(Boolean):
    """
    Use averaged CFL condition rather than minimum CFL condition.
    """
    _version = '241'
    fluent_name = 'use-average-cfl?'
    _python_name = 'use_average_cfl'
    return_type = 'object'

class cfl_type(Integer):
    """
    CFL type .
    """
    _version = '241'
    fluent_name = 'cfl-type'
    _python_name = 'cfl_type'
    return_type = 'object'

class cfl_based_time_stepping_advanced_options(Group):
    """
    Advanced settings for CFL-based time stepping.
    """
    _version = '241'
    fluent_name = 'cfl-based-time-stepping-advanced-options'
    _python_name = 'cfl_based_time_stepping_advanced_options'
    child_names = ['control_time_step_size_variation', 'use_average_cfl', 'cfl_type']
    _child_classes = dict(
        control_time_step_size_variation=control_time_step_size_variation,
        use_average_cfl=use_average_cfl,
        cfl_type=cfl_type,
    )
    return_type = 'object'

class error_tolerance_1(Real):
    """
    Error Tolerance.
    """
    _version = '241'
    fluent_name = 'error-tolerance'
    _python_name = 'error_tolerance'
    return_type = 'object'

class error_based_time_stepping(Group):
    """
    Error-based time stepping object.
    """
    _version = '241'
    fluent_name = 'error-based-time-stepping'
    _python_name = 'error_based_time_stepping'
    child_names = ['error_tolerance', 'initial_time_step_size', 'fixed_time_step_size', 'min_time_step_size', 'max_time_step_size', 'min_step_change_factor', 'max_step_change_factor', 'update_interval']
    _child_classes = dict(
        error_tolerance=error_tolerance_1,
        initial_time_step_size=initial_time_step_size,
        fixed_time_step_size=fixed_time_step_size,
        min_time_step_size=min_time_step_size,
        max_time_step_size=max_time_step_size,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
        update_interval=update_interval,
    )
    return_type = 'object'

class undo_timestep(Boolean):
    """
    Undo the previous time step.
    """
    _version = '241'
    fluent_name = 'undo-timestep?'
    _python_name = 'undo_timestep'
    return_type = 'object'

class predict_next(Boolean):
    """
    Applies a predictor algorithm for computing initial condition at time step n+1.
    """
    _version = '241'
    fluent_name = 'predict-next?'
    _python_name = 'predict_next'
    return_type = 'object'

class rotating_mesh_flow_predictor(Boolean):
    """
    Improve prediction of flow field at time step n+1 for rotating mesh.
    """
    _version = '241'
    fluent_name = 'rotating-mesh-flow-predictor?'
    _python_name = 'rotating_mesh_flow_predictor'
    return_type = 'object'

class enabled_20(Boolean):
    """
    Enable/disable multiphase-specific adaptive time stepping.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class global_courant_number(Real):
    """
    Global Courant Number.
    """
    _version = '241'
    fluent_name = 'global-courant-number'
    _python_name = 'global_courant_number'
    return_type = 'object'

class mp_specific_time_stepping(Group):
    """
    Multiphase-specific adaptive time stepping parameters.
    """
    _version = '241'
    fluent_name = 'mp-specific-time-stepping'
    _python_name = 'mp_specific_time_stepping'
    child_names = ['enabled', 'global_courant_number', 'initial_time_step_size', 'fixed_time_step_size', 'min_time_step_size', 'max_time_step_size', 'min_step_change_factor', 'max_step_change_factor', 'update_interval']
    _child_classes = dict(
        enabled=enabled_20,
        global_courant_number=global_courant_number,
        initial_time_step_size=initial_time_step_size,
        fixed_time_step_size=fixed_time_step_size,
        min_time_step_size=min_time_step_size,
        max_time_step_size=max_time_step_size,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
        update_interval=update_interval,
    )
    return_type = 'object'

class udf_hook(String, AllowedValuesMixin):
    """
    User-defined function name.
    """
    _version = '241'
    fluent_name = 'udf-hook'
    _python_name = 'udf_hook'
    return_type = 'object'

class enabled_21(Boolean):
    """
    Enable/disable period- or frequency-based fixed time stepping.
    """
    _version = '241'
    fluent_name = 'enabled'
    _python_name = 'enabled'
    return_type = 'object'

class fixed_periodic_type(String, AllowedValuesMixin):
    """
    Fixed periodic type.
    """
    _version = '241'
    fluent_name = 'fixed-periodic-type'
    _python_name = 'fixed_periodic_type'
    return_type = 'object'

class period(Real):
    """
    Fixed periodic type value.
    """
    _version = '241'
    fluent_name = 'period'
    _python_name = 'period'
    return_type = 'object'

class times_steps_per_period(Integer):
    """
    Number of time steps per period.
    """
    _version = '241'
    fluent_name = 'times-steps-per-period'
    _python_name = 'times_steps_per_period'
    return_type = 'object'

class total_periods(Integer):
    """
    Total number of periods.
    """
    _version = '241'
    fluent_name = 'total-periods'
    _python_name = 'total_periods'
    return_type = 'object'

class fixed_periodic(Group):
    """
    Period- or frequency-based fixed time-stepping parameters.
    """
    _version = '241'
    fluent_name = 'fixed-periodic'
    _python_name = 'fixed_periodic'
    child_names = ['enabled', 'fixed_periodic_type', 'period', 'times_steps_per_period', 'total_periods']
    _child_classes = dict(
        enabled=enabled_21,
        fixed_periodic_type=fixed_periodic_type,
        period=period,
        times_steps_per_period=times_steps_per_period,
        total_periods=total_periods,
    )
    return_type = 'object'

class moving_mesh_constraint(Boolean):
    """
    Enable Moving Mesh Constraint.
    """
    _version = '241'
    fluent_name = 'moving-mesh-constraint?'
    _python_name = 'moving_mesh_constraint'
    return_type = 'object'

class mesh_courant_number(Real):
    """
    Moving Mesh Courant Number.
    """
    _version = '241'
    fluent_name = 'mesh-courant-number'
    _python_name = 'mesh_courant_number'
    return_type = 'object'

class moving_mesh_cfl_constraint(Group):
    """
    Moving mesh CFL constraint object.
    """
    _version = '241'
    fluent_name = 'moving-mesh-cfl-constraint'
    _python_name = 'moving_mesh_cfl_constraint'
    child_names = ['moving_mesh_constraint', 'mesh_courant_number']
    _child_classes = dict(
        moving_mesh_constraint=moving_mesh_constraint,
        mesh_courant_number=mesh_courant_number,
    )
    return_type = 'object'

class physics_based_constraint(Boolean):
    """
    Include physics driven time-step constraints.
    """
    _version = '241'
    fluent_name = 'physics-based-constraint?'
    _python_name = 'physics_based_constraint'
    return_type = 'object'

class viscous_scale(Boolean):
    """
    Include viscous time scale.
    """
    _version = '241'
    fluent_name = 'viscous-scale?'
    _python_name = 'viscous_scale'
    return_type = 'object'

class gravity_scale(Boolean):
    """
    Include gravity based time scale.
    """
    _version = '241'
    fluent_name = 'gravity-scale?'
    _python_name = 'gravity_scale'
    return_type = 'object'

class surface_tension_scale(Boolean):
    """
    Include surface tension based time scale.
    """
    _version = '241'
    fluent_name = 'surface-tension-scale?'
    _python_name = 'surface_tension_scale'
    return_type = 'object'

class acoustic_scale(Boolean):
    """
    Include acoustic time scale.
    """
    _version = '241'
    fluent_name = 'acoustic-scale?'
    _python_name = 'acoustic_scale'
    return_type = 'object'

class time_scale_options(Group):
    """
    Physics based time scale options.
    """
    _version = '241'
    fluent_name = 'time-scale-options'
    _python_name = 'time_scale_options'
    child_names = ['viscous_scale', 'gravity_scale', 'surface_tension_scale', 'acoustic_scale']
    _child_classes = dict(
        viscous_scale=viscous_scale,
        gravity_scale=gravity_scale,
        surface_tension_scale=surface_tension_scale,
        acoustic_scale=acoustic_scale,
    )
    return_type = 'object'

class verbosity_14(Boolean):
    """
    Verbosity to print multiphase specific time scales.
    """
    _version = '241'
    fluent_name = 'verbosity?'
    _python_name = 'verbosity'
    return_type = 'object'

class multiphase_specific_time_constraints(Group):
    """
    Multiphase-specific time constraints object.
    """
    _version = '241'
    fluent_name = 'multiphase-specific-time-constraints'
    _python_name = 'multiphase_specific_time_constraints'
    child_names = ['moving_mesh_cfl_constraint', 'physics_based_constraint', 'time_scale_options', 'verbosity']
    _child_classes = dict(
        moving_mesh_cfl_constraint=moving_mesh_cfl_constraint,
        physics_based_constraint=physics_based_constraint,
        time_scale_options=time_scale_options,
        verbosity=verbosity_14,
    )
    return_type = 'object'

class enable_solid_time_step(Boolean):
    """
    Enable/Disable different time step size for solid zones?.
    """
    _version = '241'
    fluent_name = 'enable-solid-time-step?'
    _python_name = 'enable_solid_time_step'
    return_type = 'object'

class choose_auto_time_stepping(Boolean):
    """
    Enable/Disable Automatic time stepping?.
    """
    _version = '241'
    fluent_name = 'choose-auto-time-stepping?'
    _python_name = 'choose_auto_time_stepping'
    return_type = 'object'

class time_step_size_1(Real):
    """
    The time step size in seconds.
    """
    _version = '241'
    fluent_name = 'time-step-size'
    _python_name = 'time_step_size'
    return_type = 'object'

class solid_time_step_size(Group):
    """
    Time step size settings object.
    """
    _version = '241'
    fluent_name = 'solid-time-step-size'
    _python_name = 'solid_time_step_size'
    child_names = ['enable_solid_time_step', 'choose_auto_time_stepping', 'time_step_size']
    _child_classes = dict(
        enable_solid_time_step=enable_solid_time_step,
        choose_auto_time_stepping=choose_auto_time_stepping,
        time_step_size=time_step_size_1,
    )
    return_type = 'object'

class time_step_size_for_acoustic_export(Real):
    """
    Number of time step size for acoustic export.
    """
    _version = '241'
    fluent_name = 'time-step-size-for-acoustic-export'
    _python_name = 'time_step_size_for_acoustic_export'
    return_type = 'object'

class extrapolate_eqn_vars_child(Boolean):
    """
    'child_object_type' of extrapolate_eqn_vars.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'extrapolate_eqn_vars_child'
    return_type = 'object'

class extrapolate_eqn_vars(NamedObject[extrapolate_eqn_vars_child], _NonCreatableNamedObjectMixin[extrapolate_eqn_vars_child]):
    """
    The extrapolation object.
    """
    _version = '241'
    fluent_name = 'extrapolate-eqn-vars'
    _python_name = 'extrapolate_eqn_vars'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = extrapolate_eqn_vars_child
    return_type = 'object'

class transient_controls(Group):
    """
    Transient controls object.
    """
    _version = '241'
    fluent_name = 'transient-controls'
    _python_name = 'transient_controls'
    child_names = ['type', 'method', 'duration_specification_method', 'specified_time_step', 'incremental_time', 'time_step_count', 'total_time', 'time_step_size', 'max_iter_per_time_step', 'total_time_step_count', 'solution_status', 'extrapolate_variables', 'max_flow_time', 'cfl_based_time_stepping', 'cfl_based_time_stepping_advanced_options', 'error_based_time_stepping', 'undo_timestep', 'predict_next', 'rotating_mesh_flow_predictor', 'mp_specific_time_stepping', 'udf_hook', 'fixed_periodic', 'multiphase_specific_time_constraints', 'solid_time_step_size', 'time_step_size_for_acoustic_export', 'extrapolate_eqn_vars']
    _child_classes = dict(
        type=type_9,
        method=method_9,
        duration_specification_method=duration_specification_method,
        specified_time_step=specified_time_step,
        incremental_time=incremental_time,
        time_step_count=time_step_count_2,
        total_time=total_time,
        time_step_size=time_step_size,
        max_iter_per_time_step=max_iter_per_time_step,
        total_time_step_count=total_time_step_count,
        solution_status=solution_status,
        extrapolate_variables=extrapolate_variables,
        max_flow_time=max_flow_time,
        cfl_based_time_stepping=cfl_based_time_stepping,
        cfl_based_time_stepping_advanced_options=cfl_based_time_stepping_advanced_options,
        error_based_time_stepping=error_based_time_stepping,
        undo_timestep=undo_timestep,
        predict_next=predict_next,
        rotating_mesh_flow_predictor=rotating_mesh_flow_predictor,
        mp_specific_time_stepping=mp_specific_time_stepping,
        udf_hook=udf_hook,
        fixed_periodic=fixed_periodic,
        multiphase_specific_time_constraints=multiphase_specific_time_constraints,
        solid_time_step_size=solid_time_step_size,
        time_step_size_for_acoustic_export=time_step_size_for_acoustic_export,
        extrapolate_eqn_vars=extrapolate_eqn_vars,
    )
    return_type = 'object'

class enabled_22(Boolean):
    """
    Enable/disable data sampling.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class sampling_interval(Integer):
    """
    Sampling interval.
    """
    _version = '241'
    fluent_name = 'sampling-interval'
    _python_name = 'sampling_interval'
    return_type = 'object'

class flow_shear_stresses(Boolean):
    """
    Enable/Disable statistics for flow shear stresses.
    """
    _version = '241'
    fluent_name = 'flow-shear-stresses?'
    _python_name = 'flow_shear_stresses'
    return_type = 'object'

class flow_heat_fluxes(Boolean):
    """
    Enable/Disable statistics for flow heat fluxes.
    """
    _version = '241'
    fluent_name = 'flow-heat-fluxes?'
    _python_name = 'flow_heat_fluxes'
    return_type = 'object'

class wall_statistics(Boolean):
    """
    Enable/Disable wall statistics.
    """
    _version = '241'
    fluent_name = 'wall-statistics?'
    _python_name = 'wall_statistics'
    return_type = 'object'

class force_statistics(Boolean):
    """
    Enable/Disable force statistics.
    """
    _version = '241'
    fluent_name = 'force-statistics?'
    _python_name = 'force_statistics'
    return_type = 'object'

class dpm_variables(Boolean):
    """
    Enable/Disable statistics for DPM variables.
    """
    _version = '241'
    fluent_name = 'dpm-variables?'
    _python_name = 'dpm_variables'
    return_type = 'object'

class species_list(StringList, AllowedValuesMixin):
    """
    Enable/Disable statistics for sps.
    """
    _version = '241'
    fluent_name = 'species-list'
    _python_name = 'species_list'
    return_type = 'object'

class statistics_mixture_fraction(Boolean):
    """
    Enable/Disable statistics for mixture fraction.
    """
    _version = '241'
    fluent_name = 'statistics-mixture-fraction?'
    _python_name = 'statistics_mixture_fraction'
    return_type = 'object'

class statistics_reaction_progress(Boolean):
    """
    Enable/Disable statistics for reaction progress.
    """
    _version = '241'
    fluent_name = 'statistics-reaction-progress?'
    _python_name = 'statistics_reaction_progress'
    return_type = 'object'

class enable_custom_field_functions(Boolean):
    """
    Enable/Disable statistics for Custom Field Functions.
    """
    _version = '241'
    fluent_name = 'enable-custom-field-functions?'
    _python_name = 'enable_custom_field_functions'
    return_type = 'object'

class custom_field_functions(StringList, AllowedValuesMixin):
    """
    Calculate statistics for custom field functions.
    """
    _version = '241'
    fluent_name = 'custom-field-functions'
    _python_name = 'custom_field_functions'
    return_type = 'object'

class data_sampling(Group):
    """
    Data sampling object.
    """
    _version = '241'
    fluent_name = 'data-sampling'
    _python_name = 'data_sampling'
    child_names = ['enabled', 'sampling_interval', 'flow_shear_stresses', 'flow_heat_fluxes', 'wall_statistics', 'force_statistics', 'dpm_variables', 'species_list', 'statistics_mixture_fraction', 'statistics_reaction_progress', 'enable_custom_field_functions', 'custom_field_functions']
    _child_classes = dict(
        enabled=enabled_22,
        sampling_interval=sampling_interval,
        flow_shear_stresses=flow_shear_stresses,
        flow_heat_fluxes=flow_heat_fluxes,
        wall_statistics=wall_statistics,
        force_statistics=force_statistics,
        dpm_variables=dpm_variables,
        species_list=species_list,
        statistics_mixture_fraction=statistics_mixture_fraction,
        statistics_reaction_progress=statistics_reaction_progress,
        enable_custom_field_functions=enable_custom_field_functions,
        custom_field_functions=custom_field_functions,
    )
    return_type = 'object'

class min_1(Boolean):
    """
    Enable/disable computing minimum value.
    """
    _version = '241'
    fluent_name = 'min'
    _python_name = 'min'
    return_type = 'object'

class max_1(Boolean):
    """
    Enable/disable computing maximum value.
    """
    _version = '241'
    fluent_name = 'max'
    _python_name = 'max'
    return_type = 'object'

class mean(Boolean):
    """
    Enable/disable computing mean value.
    """
    _version = '241'
    fluent_name = 'mean'
    _python_name = 'mean'
    return_type = 'object'

class rmse(Boolean):
    """
    Enable/disable computing root mean square error.
    """
    _version = '241'
    fluent_name = 'rmse'
    _python_name = 'rmse'
    return_type = 'object'

class moving_average(Boolean):
    """
    Enable/disable computing moving average.
    """
    _version = '241'
    fluent_name = 'moving-average'
    _python_name = 'moving_average'
    return_type = 'object'

class average_over_1(Integer):
    """
    Number of data-points used in moving average.
    """
    _version = '241'
    fluent_name = 'average-over'
    _python_name = 'average_over'
    return_type = 'object'

class data_sets_child(Group):
    """
    'child_object_type' of data_sets.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'data_sets_child'
    child_names = ['zones', 'min', 'max', 'mean', 'rmse', 'moving_average', 'average_over']
    _child_classes = dict(
        zones=zones_1,
        min=min_1,
        max=max_1,
        mean=mean,
        rmse=rmse,
        moving_average=moving_average,
        average_over=average_over_1,
    )
    return_type = 'object'

class data_sets(NamedObject[data_sets_child], _NonCreatableNamedObjectMixin[data_sets_child]):
    """
    Data sampling datasets object.
    """
    _version = '241'
    fluent_name = 'data-sets'
    _python_name = 'data_sets'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = data_sets_child
    return_type = 'object'

class quantities(StringList, AllowedValuesMixin):
    """
    'quantities' child.
    """
    _version = '241'
    fluent_name = 'quantities'
    _python_name = 'quantities'
    return_type = 'object'

class min_2(Boolean):
    """
    'min' child.
    """
    _version = '241'
    fluent_name = 'min'
    _python_name = 'min'
    return_type = 'object'

class max_2(Boolean):
    """
    'max' child.
    """
    _version = '241'
    fluent_name = 'max'
    _python_name = 'max'
    return_type = 'object'

class mean_1(Boolean):
    """
    'mean' child.
    """
    _version = '241'
    fluent_name = 'mean'
    _python_name = 'mean'
    return_type = 'object'

class rmse_1(Boolean):
    """
    'rmse' child.
    """
    _version = '241'
    fluent_name = 'rmse'
    _python_name = 'rmse'
    return_type = 'object'

class moving_average_1(Boolean):
    """
    'moving_average' child.
    """
    _version = '241'
    fluent_name = 'moving-average'
    _python_name = 'moving_average'
    return_type = 'object'

class add_datasets(Command):
    """
    Add datasets.
    
    Parameters
    ----------
        zone_names : List
            Zone name list.
        domain : str
            'domain' child.
        quantities : List
            'quantities' child.
        min : bool
            'min' child.
        max : bool
            'max' child.
        mean : bool
            'mean' child.
        rmse : bool
            'rmse' child.
        moving_average : bool
            'moving_average' child.
        average_over : int
            'average_over' child.
    """
    _version = '241'
    fluent_name = 'add-datasets'
    _python_name = 'add_datasets'
    argument_names = ['zone_names', 'domain', 'quantities', 'min', 'max', 'mean', 'rmse', 'moving_average', 'average_over']
    _child_classes = dict(
        zone_names=zone_names_4,
        domain=domain,
        quantities=quantities,
        min=min_2,
        max=max_2,
        mean=mean_1,
        rmse=rmse_1,
        moving_average=moving_average_1,
        average_over=average_over,
    )
    return_type = 'object'

class list_datasets(Command):
    """
    List dataset.
    """
    _version = '241'
    fluent_name = 'list-datasets'
    _python_name = 'list_datasets'
    return_type = 'object'

class data_sampling_options(Group):
    """
    Data sampling options for statistics.
    """
    _version = '241'
    fluent_name = 'data-sampling-options'
    _python_name = 'data_sampling_options'
    child_names = ['data_sets']
    command_names = ['add_datasets', 'list_datasets']
    _child_classes = dict(
        data_sets=data_sets,
        add_datasets=add_datasets,
        list_datasets=list_datasets,
    )
    return_type = 'object'

class residual_verbosity(Integer):
    """
    The residual report verbosity.
    """
    _version = '241'
    fluent_name = 'residual-verbosity'
    _python_name = 'residual_verbosity'
    return_type = 'object'

class calculate(Command):
    """
    Start run calculation.
    """
    _version = '241'
    fluent_name = 'calculate'
    _python_name = 'calculate'
    return_type = 'object'

class interrupt_at(String, AllowedValuesMixin):
    """
    When should the solution be interrupted.
    """
    _version = '241'
    fluent_name = 'interrupt-at'
    _python_name = 'interrupt_at'
    return_type = 'object'

class interrupt(Command):
    """
    Interrupt the iterations.
    
    Parameters
    ----------
        interrupt_at : str
            When should the solution be interrupted.
    """
    _version = '241'
    fluent_name = 'interrupt'
    _python_name = 'interrupt'
    argument_names = ['interrupt_at']
    _child_classes = dict(
        interrupt_at=interrupt_at,
    )
    return_type = 'object'

class total_period_count(Integer):
    """
    Number of total periods.
    """
    _version = '241'
    fluent_name = 'total-period-count'
    _python_name = 'total_period_count'
    return_type = 'object'

class max_iter_per_step(Integer):
    """
    Maximum Number of iterations per time step.
    """
    _version = '241'
    fluent_name = 'max-iter-per-step'
    _python_name = 'max_iter_per_step'
    return_type = 'object'

class postprocess(Boolean):
    """
    Enable/Disable Postprocess pollutant solution?.
    """
    _version = '241'
    fluent_name = 'postprocess?'
    _python_name = 'postprocess'
    return_type = 'object'

class post_iter_per_time_step_count(Integer):
    """
    Number of post-processing iterations per time step.
    """
    _version = '241'
    fluent_name = 'post-iter-per-time-step-count'
    _python_name = 'post_iter_per_time_step_count'
    return_type = 'object'

class dual_time_iterate(Command):
    """
    Perform unsteady iterations.
    
    Parameters
    ----------
        total_period_count : int
            Number of total periods.
        time_step_count : int
            Inceremtal number of Time steps.
        total_time_step_count : int
            Total number of Time steps.
        total_time : real
            Total Simulation Time.
        incremental_time : real
            Incremental Time.
        max_iter_per_step : int
            Maximum Number of iterations per time step.
        postprocess : bool
            Enable/Disable Postprocess pollutant solution?.
        post_iter_per_time_step_count : int
            Number of post-processing iterations per time step.
    """
    _version = '241'
    fluent_name = 'dual-time-iterate'
    _python_name = 'dual_time_iterate'
    argument_names = ['total_period_count', 'time_step_count', 'total_time_step_count', 'total_time', 'incremental_time', 'max_iter_per_step', 'postprocess', 'post_iter_per_time_step_count']
    _child_classes = dict(
        total_period_count=total_period_count,
        time_step_count=time_step_count_2,
        total_time_step_count=total_time_step_count,
        total_time=total_time,
        incremental_time=incremental_time,
        max_iter_per_step=max_iter_per_step,
        postprocess=postprocess,
        post_iter_per_time_step_count=post_iter_per_time_step_count,
    )
    return_type = 'object'

class iter_count_3(Integer):
    """
    Incremental number of time steps.
    """
    _version = '241'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'
    return_type = 'object'

class iterate(Command):
    """
    Perform a specified number of iterations.
    
    Parameters
    ----------
        iter_count : int
            Incremental number of time steps.
    """
    _version = '241'
    fluent_name = 'iterate'
    _python_name = 'iterate'
    argument_names = ['iter_count']
    _child_classes = dict(
        iter_count=iter_count_3,
    )
    return_type = 'object'

class iterating(Query):
    """
    'iterating' query.
    """
    _version = '241'
    fluent_name = 'iterating?'
    _python_name = 'iterating'
    return_type = 'object'

class run_calculation(Group):
    """
    Run-calculation object.
    """
    _version = '241'
    fluent_name = 'run-calculation'
    _python_name = 'run_calculation'
    child_names = ['pseudo_time_settings', 'iter_count', 'adaptive_time_stepping', 'cfl_based_adaptive_time_stepping', 'reporting_interval', 'profile_update_interval', 'time_step_count', 'transient_controls', 'data_sampling', 'data_sampling_options', 'residual_verbosity']
    command_names = ['calculate', 'interrupt', 'dual_time_iterate', 'iterate']
    query_names = ['iterating']
    _child_classes = dict(
        pseudo_time_settings=pseudo_time_settings,
        iter_count=iter_count_2,
        adaptive_time_stepping=adaptive_time_stepping,
        cfl_based_adaptive_time_stepping=cfl_based_adaptive_time_stepping,
        reporting_interval=reporting_interval,
        profile_update_interval=profile_update_interval,
        time_step_count=time_step_count_1,
        transient_controls=transient_controls,
        data_sampling=data_sampling,
        data_sampling_options=data_sampling_options,
        residual_verbosity=residual_verbosity,
        calculate=calculate,
        interrupt=interrupt,
        dual_time_iterate=dual_time_iterate,
        iterate=iterate,
        iterating=iterating,
    )
    return_type = 'object'

class solution(Group):
    """
    'solution' child.
    """
    _version = '241'
    fluent_name = 'solution'
    _python_name = 'solution'
    child_names = ['methods', 'controls', 'report_definitions', 'monitor', 'cell_registers', 'initialization', 'calculation_activity', 'run_calculation']
    _child_classes = dict(
        methods=methods,
        controls=controls_1,
        report_definitions=report_definitions,
        monitor=monitor,
        cell_registers=cell_registers,
        initialization=initialization,
        calculation_activity=calculation_activity,
        run_calculation=run_calculation,
    )
    return_type = 'object'

class x_component(String, AllowedValuesMixin):
    """
    X Component of custom vector.
    """
    _version = '241'
    fluent_name = 'x-component'
    _python_name = 'x_component'
    return_type = 'object'

class y_component(String, AllowedValuesMixin):
    """
    Y Component of custom vector.
    """
    _version = '241'
    fluent_name = 'y-component'
    _python_name = 'y_component'
    return_type = 'object'

class z_component(String, AllowedValuesMixin):
    """
    Z Component of custom vector.
    """
    _version = '241'
    fluent_name = 'z-component'
    _python_name = 'z_component'
    return_type = 'object'

class custom_vectors_child(Group):
    """
    'child_object_type' of custom_vectors.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'custom_vectors_child'
    child_names = ['name', 'x_component', 'y_component', 'z_component']
    _child_classes = dict(
        name=name,
        x_component=x_component,
        y_component=y_component,
        z_component=z_component,
    )
    return_type = 'object'

class custom_vectors(NamedObject[custom_vectors_child], CreatableNamedObjectMixinOld[custom_vectors_child]):
    """
    'custom_vectors' child.
    """
    _version = '241'
    fluent_name = 'custom-vectors'
    _python_name = 'custom_vectors'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = custom_vectors_child
    return_type = 'object'

class snap_method(String, AllowedValuesMixin):
    """
    'snap_method' child.
    """
    _version = '241'
    fluent_name = 'snap-method'
    _python_name = 'snap_method'
    return_type = 'object'

class point_surface_child(Group):
    """
    'child_object_type' of point_surface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'point_surface_child'
    child_names = ['name', 'reference_frame', 'point', 'snap_method']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        reference_frame=reference_frame,
        point=point,
        snap_method=snap_method,
        display=display_3,
    )
    return_type = 'object'

class point_surface(NamedObject[point_surface_child], CreatableNamedObjectMixinOld[point_surface_child]):
    """
    'point_surface' child.
    """
    _version = '241'
    fluent_name = 'point-surface'
    _python_name = 'point_surface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = point_surface_child
    return_type = 'object'

class p0(RealList):
    """
    'p0' child.
    """
    _version = '241'
    fluent_name = 'p0'
    _python_name = 'p0'
    return_type = 'object'

class p1(RealList):
    """
    'p1' child.
    """
    _version = '241'
    fluent_name = 'p1'
    _python_name = 'p1'
    return_type = 'object'

class line_surface_child(Group):
    """
    'child_object_type' of line_surface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'line_surface_child'
    child_names = ['name', 'p0', 'p1']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        p0=p0,
        p1=p1,
        display=display_3,
    )
    return_type = 'object'

class line_surface(NamedObject[line_surface_child], CreatableNamedObjectMixinOld[line_surface_child]):
    """
    'line_surface' child.
    """
    _version = '241'
    fluent_name = 'line-surface'
    _python_name = 'line_surface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = line_surface_child
    return_type = 'object'

class number_of_points(Integer):
    """
    'number_of_points' child.
    """
    _version = '241'
    fluent_name = 'number-of-points'
    _python_name = 'number_of_points'
    return_type = 'object'

class rake_surface_child(Group):
    """
    'child_object_type' of rake_surface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'rake_surface_child'
    child_names = ['name', 'p0', 'p1', 'number_of_points']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        p0=p0,
        p1=p1,
        number_of_points=number_of_points,
        display=display_3,
    )
    return_type = 'object'

class rake_surface(NamedObject[rake_surface_child], CreatableNamedObjectMixinOld[rake_surface_child]):
    """
    'rake_surface' child.
    """
    _version = '241'
    fluent_name = 'rake-surface'
    _python_name = 'rake_surface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = rake_surface_child
    return_type = 'object'

class x_3(Real):
    """
    'x' child.
    """
    _version = '241'
    fluent_name = 'x'
    _python_name = 'x'
    return_type = 'object'

class y_3(Real):
    """
    'y' child.
    """
    _version = '241'
    fluent_name = 'y'
    _python_name = 'y'
    return_type = 'object'

class z_1(Real):
    """
    'z' child.
    """
    _version = '241'
    fluent_name = 'z'
    _python_name = 'z'
    return_type = 'object'

class point_vector(RealList):
    """
    'point_vector' child.
    """
    _version = '241'
    fluent_name = 'point-vector'
    _python_name = 'point_vector'
    return_type = 'object'

class point_normal(RealList):
    """
    'point_normal' child.
    """
    _version = '241'
    fluent_name = 'point-normal'
    _python_name = 'point_normal'
    return_type = 'object'

class surface_aligned_normal(String, AllowedValuesMixin):
    """
    'surface_aligned_normal' child.
    """
    _version = '241'
    fluent_name = 'surface-aligned-normal'
    _python_name = 'surface_aligned_normal'
    return_type = 'object'

class p2(RealList):
    """
    'p2' child.
    """
    _version = '241'
    fluent_name = 'p2'
    _python_name = 'p2'
    return_type = 'object'

class bounded(Boolean):
    """
    'bounded' child.
    """
    _version = '241'
    fluent_name = 'bounded?'
    _python_name = 'bounded'
    return_type = 'object'

class sample_point(Boolean):
    """
    'sample_point' child.
    """
    _version = '241'
    fluent_name = 'sample-point?'
    _python_name = 'sample_point'
    return_type = 'object'

class edges(IntegerList):
    """
    'edges' child.
    """
    _version = '241'
    fluent_name = 'edges'
    _python_name = 'edges'
    return_type = 'object'

class plane_surface_child(Group):
    """
    'child_object_type' of plane_surface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'plane_surface_child'
    child_names = ['name', 'method', 'x', 'y', 'z', 'point_vector', 'point_normal', 'surface_aligned_normal', 'p0', 'p1', 'p2', 'bounded', 'sample_point', 'edges']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        method=method_2,
        x=x_3,
        y=y_3,
        z=z_1,
        point_vector=point_vector,
        point_normal=point_normal,
        surface_aligned_normal=surface_aligned_normal,
        p0=p0,
        p1=p1,
        p2=p2,
        bounded=bounded,
        sample_point=sample_point,
        edges=edges,
        display=display_3,
    )
    return_type = 'object'

class plane_surface(NamedObject[plane_surface_child], CreatableNamedObjectMixinOld[plane_surface_child]):
    """
    'plane_surface' child.
    """
    _version = '241'
    fluent_name = 'plane-surface'
    _python_name = 'plane_surface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = plane_surface_child
    return_type = 'object'

class field_1(String, AllowedValuesMixin):
    """
    Field.
    """
    _version = '241'
    fluent_name = 'field'
    _python_name = 'field'
    return_type = 'object'

class surfaces_6(StringList, AllowedValuesMixin):
    """
    List of surfaces.
    """
    _version = '241'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    return_type = 'object'

class zones_3(StringList, AllowedValuesMixin):
    """
    Cell zone name list.
    """
    _version = '241'
    fluent_name = 'zones'
    _python_name = 'zones'
    return_type = 'object'

class min_3(Real):
    """
    'min' child.
    """
    _version = '241'
    fluent_name = 'min'
    _python_name = 'min'
    return_type = 'object'

class max_3(Real):
    """
    'max' child.
    """
    _version = '241'
    fluent_name = 'max'
    _python_name = 'max'
    return_type = 'object'

class iso_values(RealList):
    """
    'iso_values' child.
    """
    _version = '241'
    fluent_name = 'iso-values'
    _python_name = 'iso_values'
    return_type = 'object'

class iso_surface_child(Group):
    """
    'child_object_type' of iso_surface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'iso_surface_child'
    child_names = ['name', 'field', 'surfaces', 'zones', 'min', 'max', 'iso_values']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        field=field_1,
        surfaces=surfaces_6,
        zones=zones_3,
        min=min_3,
        max=max_3,
        iso_values=iso_values,
        display=display_3,
    )
    return_type = 'object'

class iso_surface(NamedObject[iso_surface_child], CreatableNamedObjectMixinOld[iso_surface_child]):
    """
    'iso_surface' child.
    """
    _version = '241'
    fluent_name = 'iso-surface'
    _python_name = 'iso_surface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = iso_surface_child
    return_type = 'object'

class iso_clip_child(Group):
    """
    'child_object_type' of iso_clip.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'iso_clip_child'
    child_names = ['name', 'field', 'surfaces', 'min', 'max']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        field=field_1,
        surfaces=surfaces_6,
        min=min_3,
        max=max_3,
        display=display_3,
    )
    return_type = 'object'

class iso_clip(NamedObject[iso_clip_child], CreatableNamedObjectMixinOld[iso_clip_child]):
    """
    'iso_clip' child.
    """
    _version = '241'
    fluent_name = 'iso-clip'
    _python_name = 'iso_clip'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = iso_clip_child
    return_type = 'object'

class zone_surface_child(Group):
    """
    'child_object_type' of zone_surface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'zone_surface_child'
    child_names = ['name', 'zone_name']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        zone_name=zone_name_2,
        display=display_3,
    )
    return_type = 'object'

class zone_surface(NamedObject[zone_surface_child], CreatableNamedObjectMixinOld[zone_surface_child]):
    """
    'zone_surface' child.
    """
    _version = '241'
    fluent_name = 'zone-surface'
    _python_name = 'zone_surface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = zone_surface_child
    return_type = 'object'

class partition_1(Integer):
    """
    'partition_1' child.
    """
    _version = '241'
    fluent_name = 'partition-1'
    _python_name = 'partition_1'
    return_type = 'object'

class partition_2(Integer):
    """
    'partition_2' child.
    """
    _version = '241'
    fluent_name = 'partition-2'
    _python_name = 'partition_2'
    return_type = 'object'

class interior_cell_faces(Boolean):
    """
    'interior_cell_faces' child.
    """
    _version = '241'
    fluent_name = 'interior-cell-faces?'
    _python_name = 'interior_cell_faces'
    return_type = 'object'

class partition_surface_child(Group):
    """
    'child_object_type' of partition_surface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'partition_surface_child'
    child_names = ['name', 'partition_1', 'partition_2', 'interior_cell_faces']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        partition_1=partition_1,
        partition_2=partition_2,
        interior_cell_faces=interior_cell_faces,
        display=display_3,
    )
    return_type = 'object'

class partition_surface(NamedObject[partition_surface_child], CreatableNamedObjectMixinOld[partition_surface_child]):
    """
    'partition_surface' child.
    """
    _version = '241'
    fluent_name = 'partition-surface'
    _python_name = 'partition_surface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = partition_surface_child
    return_type = 'object'

class surface_2(StringList, AllowedValuesMixin):
    """
    List of surfaces.
    """
    _version = '241'
    fluent_name = 'surface'
    _python_name = 'surface'
    return_type = 'object'

class center_of_rotation(RealList):
    """
    'center_of_rotation' child.
    """
    _version = '241'
    fluent_name = 'center-of-rotation'
    _python_name = 'center_of_rotation'
    return_type = 'object'

class angle_of_rotation(RealList):
    """
    'angle_of_rotation' child.
    """
    _version = '241'
    fluent_name = 'angle-of-rotation'
    _python_name = 'angle_of_rotation'
    return_type = 'object'

class translation_distance(RealList):
    """
    'translation_distance' child.
    """
    _version = '241'
    fluent_name = 'translation-distance'
    _python_name = 'translation_distance'
    return_type = 'object'

class iso_distance(Real):
    """
    'iso_distance' child.
    """
    _version = '241'
    fluent_name = 'iso-distance'
    _python_name = 'iso_distance'
    return_type = 'object'

class transform_surface_child(Group):
    """
    'child_object_type' of transform_surface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'transform_surface_child'
    child_names = ['name', 'surface', 'center_of_rotation', 'angle_of_rotation', 'translation_distance', 'iso_distance']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        surface=surface_2,
        center_of_rotation=center_of_rotation,
        angle_of_rotation=angle_of_rotation,
        translation_distance=translation_distance,
        iso_distance=iso_distance,
        display=display_3,
    )
    return_type = 'object'

class transform_surface(NamedObject[transform_surface_child], CreatableNamedObjectMixinOld[transform_surface_child]):
    """
    'transform_surface' child.
    """
    _version = '241'
    fluent_name = 'transform-surface'
    _python_name = 'transform_surface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = transform_surface_child
    return_type = 'object'

class imprint_surface_child(Group):
    """
    'child_object_type' of imprint_surface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'imprint_surface_child'
    child_names = ['name', 'surface', 'zones']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        surface=surface,
        zones=zones_3,
        display=display_3,
    )
    return_type = 'object'

class imprint_surface(NamedObject[imprint_surface_child], CreatableNamedObjectMixinOld[imprint_surface_child]):
    """
    'imprint_surface' child.
    """
    _version = '241'
    fluent_name = 'imprint-surface'
    _python_name = 'imprint_surface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = imprint_surface_child
    return_type = 'object'

class normal(RealList):
    """
    'normal' child.
    """
    _version = '241'
    fluent_name = 'normal'
    _python_name = 'normal'
    return_type = 'object'

class distance_from_origin(Real):
    """
    'distance_from_origin' child.
    """
    _version = '241'
    fluent_name = 'distance-from-origin'
    _python_name = 'distance_from_origin'
    return_type = 'object'

class plane_slice_child(Group):
    """
    'child_object_type' of plane_slice.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'plane_slice_child'
    child_names = ['name', 'normal', 'distance_from_origin']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        normal=normal,
        distance_from_origin=distance_from_origin,
        display=display_3,
    )
    return_type = 'object'

class plane_slice(NamedObject[plane_slice_child], CreatableNamedObjectMixinOld[plane_slice_child]):
    """
    'plane_slice' child.
    """
    _version = '241'
    fluent_name = 'plane-slice'
    _python_name = 'plane_slice'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = plane_slice_child
    return_type = 'object'

class sphere_slice_child(Group):
    """
    'child_object_type' of sphere_slice.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'sphere_slice_child'
    child_names = ['name', 'center', 'radius']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        center=center,
        radius=radius,
        display=display_3,
    )
    return_type = 'object'

class sphere_slice(NamedObject[sphere_slice_child], CreatableNamedObjectMixinOld[sphere_slice_child]):
    """
    'sphere_slice' child.
    """
    _version = '241'
    fluent_name = 'sphere-slice'
    _python_name = 'sphere_slice'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = sphere_slice_child
    return_type = 'object'

class attribute(RealList):
    """
    'attribute' child.
    """
    _version = '241'
    fluent_name = 'attribute'
    _python_name = 'attribute'
    return_type = 'object'

class quadric_surface_child(Group):
    """
    'child_object_type' of quadric_surface.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'quadric_surface_child'
    child_names = ['name', 'attribute', 'value']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        attribute=attribute,
        value=value_1,
        display=display_3,
    )
    return_type = 'object'

class quadric_surface(NamedObject[quadric_surface_child], CreatableNamedObjectMixinOld[quadric_surface_child]):
    """
    'quadric_surface' child.
    """
    _version = '241'
    fluent_name = 'quadric-surface'
    _python_name = 'quadric_surface'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = quadric_surface_child
    return_type = 'object'

class surface_3(String, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '241'
    fluent_name = 'surface'
    _python_name = 'surface'
    return_type = 'object'

class surface_cells_child(Group):
    """
    'child_object_type' of surface_cells.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'surface_cells_child'
    child_names = ['name', 'surface']
    command_names = ['display']
    _child_classes = dict(
        name=name,
        surface=surface_3,
        display=display_3,
    )
    return_type = 'object'

class surface_cells(NamedObject[surface_cells_child], CreatableNamedObjectMixinOld[surface_cells_child]):
    """
    'surface_cells' child.
    """
    _version = '241'
    fluent_name = 'surface-cells'
    _python_name = 'surface_cells'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = surface_cells_child
    return_type = 'object'

class create_multiple_zone_surfaces(Command):
    """
    'create_multiple_zone_surfaces' command.
    """
    _version = '241'
    fluent_name = 'create-multiple-zone-surfaces'
    _python_name = 'create_multiple_zone_surfaces'
    argument_names = ['zone_names']
    _child_classes = dict(
        zone_names=zone_names_4,
    )
    return_type = 'object'

class name_3(String):
    """
    'name' child.
    """
    _version = '241'
    fluent_name = 'name'
    _python_name = 'name'
    return_type = 'object'

class iso_value(Real):
    """
    'iso_value' child.
    """
    _version = '241'
    fluent_name = 'iso-value'
    _python_name = 'iso_value'
    return_type = 'object'

class no_of_surfaces(Integer):
    """
    'no_of_surfaces' child.
    """
    _version = '241'
    fluent_name = 'no-of-surfaces'
    _python_name = 'no_of_surfaces'
    return_type = 'object'

class spacing(Real):
    """
    'spacing' child.
    """
    _version = '241'
    fluent_name = 'spacing'
    _python_name = 'spacing'
    return_type = 'object'

class create_multiple_iso_surfaces(Command):
    """
    'create_multiple_iso_surfaces' command.
    """
    _version = '241'
    fluent_name = 'create-multiple-iso-surfaces'
    _python_name = 'create_multiple_iso_surfaces'
    argument_names = ['field', 'name', 'surfaces', 'zones', 'iso_value', 'no_of_surfaces', 'spacing']
    _child_classes = dict(
        field=field_1,
        name=name_3,
        surfaces=surfaces,
        zones=zones_3,
        iso_value=iso_value,
        no_of_surfaces=no_of_surfaces,
        spacing=spacing,
    )
    return_type = 'object'

class create_group_surfaces(Command):
    """
    'create_group_surfaces' command.
    """
    _version = '241'
    fluent_name = 'create-group-surfaces'
    _python_name = 'create_group_surfaces'
    argument_names = ['surfaces', 'name']
    _child_classes = dict(
        surfaces=surfaces_6,
        name=name_3,
    )
    return_type = 'object'

class ungroup_surfaces(Command):
    """
    'ungroup_surfaces' command.
    """
    _version = '241'
    fluent_name = 'ungroup-surfaces'
    _python_name = 'ungroup_surfaces'
    argument_names = ['surface']
    _child_classes = dict(
        surface=surface,
    )
    return_type = 'object'

class priority(String, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '241'
    fluent_name = 'priority'
    _python_name = 'priority'
    return_type = 'object'

class set_rendering_priority(Command):
    """
    'set_rendering_priority' command.
    """
    _version = '241'
    fluent_name = 'set-rendering-priority'
    _python_name = 'set_rendering_priority'
    argument_names = ['surface', 'priority']
    _child_classes = dict(
        surface=surface_3,
        priority=priority,
    )
    return_type = 'object'

class reset_zone_surfaces(Command):
    """
    'reset_zone_surfaces' command.
    """
    _version = '241'
    fluent_name = 'reset-zone-surfaces'
    _python_name = 'reset_zone_surfaces'
    return_type = 'object'

class surfaces_5(Group):
    """
    'surfaces' child.
    """
    _version = '241'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    child_names = ['point_surface', 'line_surface', 'rake_surface', 'plane_surface', 'iso_surface', 'iso_clip', 'zone_surface', 'partition_surface', 'transform_surface', 'imprint_surface', 'plane_slice', 'sphere_slice', 'quadric_surface', 'surface_cells']
    command_names = ['create_multiple_zone_surfaces', 'create_multiple_iso_surfaces', 'create_group_surfaces', 'ungroup_surfaces', 'set_rendering_priority', 'reset_zone_surfaces']
    _child_classes = dict(
        point_surface=point_surface,
        line_surface=line_surface,
        rake_surface=rake_surface,
        plane_surface=plane_surface,
        iso_surface=iso_surface,
        iso_clip=iso_clip,
        zone_surface=zone_surface,
        partition_surface=partition_surface,
        transform_surface=transform_surface,
        imprint_surface=imprint_surface,
        plane_slice=plane_slice,
        sphere_slice=sphere_slice,
        quadric_surface=quadric_surface,
        surface_cells=surface_cells,
        create_multiple_zone_surfaces=create_multiple_zone_surfaces,
        create_multiple_iso_surfaces=create_multiple_iso_surfaces,
        create_group_surfaces=create_group_surfaces,
        ungroup_surfaces=ungroup_surfaces,
        set_rendering_priority=set_rendering_priority,
        reset_zone_surfaces=reset_zone_surfaces,
    )
    return_type = 'object'

class nodes(Boolean):
    """
    'nodes' child.
    """
    _version = '241'
    fluent_name = 'nodes?'
    _python_name = 'nodes'
    return_type = 'object'

class edges_1(Boolean):
    """
    'edges' child.
    """
    _version = '241'
    fluent_name = 'edges?'
    _python_name = 'edges'
    return_type = 'object'

class faces_1(Boolean):
    """
    'faces' child.
    """
    _version = '241'
    fluent_name = 'faces?'
    _python_name = 'faces'
    return_type = 'object'

class partitions(Boolean):
    """
    'partitions' child.
    """
    _version = '241'
    fluent_name = 'partitions?'
    _python_name = 'partitions'
    return_type = 'object'

class overset_2(Boolean):
    """
    'overset' child.
    """
    _version = '241'
    fluent_name = 'overset?'
    _python_name = 'overset'
    return_type = 'object'

class gap(Boolean):
    """
    'gap' child.
    """
    _version = '241'
    fluent_name = 'gap?'
    _python_name = 'gap'
    return_type = 'object'

class options_10(Group):
    """
    'options' child.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['nodes', 'edges', 'faces', 'partitions', 'overset', 'gap']
    _child_classes = dict(
        nodes=nodes,
        edges=edges_1,
        faces=faces_1,
        partitions=partitions,
        overset=overset_2,
        gap=gap,
    )
    return_type = 'object'

class all_2(Boolean):
    """
    'all' child.
    """
    _version = '241'
    fluent_name = 'all'
    _python_name = 'all'
    return_type = 'object'

class feature_angle(Real):
    """
    'feature_angle' child.
    """
    _version = '241'
    fluent_name = 'feature-angle'
    _python_name = 'feature_angle'
    return_type = 'object'

class feature(Group):
    """
    'feature' child.
    """
    _version = '241'
    fluent_name = 'feature'
    _python_name = 'feature'
    child_names = ['feature_angle']
    _child_classes = dict(
        feature_angle=feature_angle,
    )
    return_type = 'object'

class outline(Boolean):
    """
    'outline' child.
    """
    _version = '241'
    fluent_name = 'outline'
    _python_name = 'outline'
    return_type = 'object'

class edge_type(Group):
    """
    'edge_type' child.
    """
    _version = '241'
    fluent_name = 'edge-type'
    _python_name = 'edge_type'
    child_names = ['option', 'all', 'feature', 'outline']
    _child_classes = dict(
        option=option,
        all=all_2,
        feature=feature,
        outline=outline,
    )
    return_type = 'object'

class shrink_factor(Real):
    """
    'shrink_factor' child.
    """
    _version = '241'
    fluent_name = 'shrink-factor'
    _python_name = 'shrink_factor'
    return_type = 'object'

class surfaces_list(StringList, AllowedValuesMixin):
    """
    'surfaces_list' child.
    """
    _version = '241'
    fluent_name = 'surfaces-list'
    _python_name = 'surfaces_list'
    return_type = 'object'

class type_10(Group):
    """
    'type' child.
    """
    _version = '241'
    fluent_name = 'type'
    _python_name = 'type'
    return_type = 'object'

class id(Boolean):
    """
    'id' child.
    """
    _version = '241'
    fluent_name = 'id'
    _python_name = 'id'
    return_type = 'object'

class normal_1(Boolean):
    """
    'normal' child.
    """
    _version = '241'
    fluent_name = 'normal'
    _python_name = 'normal'
    return_type = 'object'

class partition(Boolean):
    """
    'partition' child.
    """
    _version = '241'
    fluent_name = 'partition'
    _python_name = 'partition'
    return_type = 'object'

class automatic(Group):
    """
    'automatic' child.
    """
    _version = '241'
    fluent_name = 'automatic'
    _python_name = 'automatic'
    child_names = ['option', 'type', 'id', 'normal', 'partition']
    _child_classes = dict(
        option=option,
        type=type_10,
        id=id,
        normal=normal_1,
        partition=partition,
    )
    return_type = 'object'

class faces_2(String, AllowedValuesMixin):
    """
    'faces' child.
    """
    _version = '241'
    fluent_name = 'faces'
    _python_name = 'faces'
    return_type = 'object'

class edges_2(String, AllowedValuesMixin):
    """
    'edges' child.
    """
    _version = '241'
    fluent_name = 'edges'
    _python_name = 'edges'
    return_type = 'object'

class nodes_1(String, AllowedValuesMixin):
    """
    'nodes' child.
    """
    _version = '241'
    fluent_name = 'nodes'
    _python_name = 'nodes'
    return_type = 'object'

class material_color(String, AllowedValuesMixin):
    """
    'material_color' child.
    """
    _version = '241'
    fluent_name = 'material-color'
    _python_name = 'material_color'
    return_type = 'object'

class manual(Group):
    """
    'manual' child.
    """
    _version = '241'
    fluent_name = 'manual'
    _python_name = 'manual'
    child_names = ['faces', 'edges', 'nodes', 'material_color']
    _child_classes = dict(
        faces=faces_2,
        edges=edges_2,
        nodes=nodes_1,
        material_color=material_color,
    )
    return_type = 'object'

class coloring(Group):
    """
    'coloring' child.
    """
    _version = '241'
    fluent_name = 'coloring'
    _python_name = 'coloring'
    child_names = ['option', 'automatic', 'manual']
    _child_classes = dict(
        option=option,
        automatic=automatic,
        manual=manual,
    )
    return_type = 'object'

class display_state_name(String, AllowedValuesMixin):
    """
    'display_state_name' child.
    """
    _version = '241'
    fluent_name = 'display-state-name'
    _python_name = 'display_state_name'
    return_type = 'object'

class mesh_2_child(Group):
    """
    'child_object_type' of mesh.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'mesh_child'
    child_names = ['name', 'options', 'edge_type', 'shrink_factor', 'surfaces_list', 'coloring', 'display_state_name', 'physics', 'geometry', 'surfaces']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        options=options_10,
        edge_type=edge_type,
        shrink_factor=shrink_factor,
        surfaces_list=surfaces_list,
        coloring=coloring,
        display_state_name=display_state_name,
        physics=physics_1,
        geometry=geometry_5,
        surfaces=surfaces_4,
        display=display_3,
    )
    return_type = 'object'

class mesh_2(NamedObject[mesh_2_child], CreatableNamedObjectMixinOld[mesh_2_child]):
    """
    'mesh' child.
    """
    _version = '241'
    fluent_name = 'mesh'
    _python_name = 'mesh'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display=display_2,
        copy=copy_4,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = mesh_2_child
    return_type = 'object'

class boundary_values(Boolean):
    """
    'boundary_values' child.
    """
    _version = '241'
    fluent_name = 'boundary-values?'
    _python_name = 'boundary_values'
    return_type = 'object'

class contour_lines(Boolean):
    """
    'contour_lines' child.
    """
    _version = '241'
    fluent_name = 'contour-lines?'
    _python_name = 'contour_lines'
    return_type = 'object'

class node_values(Boolean):
    """
    'node_values' child.
    """
    _version = '241'
    fluent_name = 'node-values?'
    _python_name = 'node_values'
    return_type = 'object'

class global_range(Boolean):
    """
    'global_range' child.
    """
    _version = '241'
    fluent_name = 'global-range?'
    _python_name = 'global_range'
    return_type = 'object'

class auto_range_on(Group):
    """
    'auto_range_on' child.
    """
    _version = '241'
    fluent_name = 'auto-range-on'
    _python_name = 'auto_range_on'
    child_names = ['global_range']
    _child_classes = dict(
        global_range=global_range,
    )
    return_type = 'object'

class clip_to_range(Boolean):
    """
    'clip_to_range' child.
    """
    _version = '241'
    fluent_name = 'clip-to-range?'
    _python_name = 'clip_to_range'
    return_type = 'object'

class minimum_1(Real):
    """
    'minimum' child.
    """
    _version = '241'
    fluent_name = 'minimum'
    _python_name = 'minimum'
    return_type = 'object'

class maximum_1(Real):
    """
    'maximum' child.
    """
    _version = '241'
    fluent_name = 'maximum'
    _python_name = 'maximum'
    return_type = 'object'

class auto_range_off(Group):
    """
    'auto_range_off' child.
    """
    _version = '241'
    fluent_name = 'auto-range-off'
    _python_name = 'auto_range_off'
    child_names = ['clip_to_range', 'minimum', 'maximum']
    _child_classes = dict(
        clip_to_range=clip_to_range,
        minimum=minimum_1,
        maximum=maximum_1,
    )
    return_type = 'object'

class range_option(Group):
    """
    'range_option' child.
    """
    _version = '241'
    fluent_name = 'range-option'
    _python_name = 'range_option'
    child_names = ['option', 'auto_range_on', 'auto_range_off']
    _child_classes = dict(
        option=option,
        auto_range_on=auto_range_on,
        auto_range_off=auto_range_off,
    )
    return_type = 'object'

class smooth(Boolean):
    """
    'smooth' child.
    """
    _version = '241'
    fluent_name = 'smooth'
    _python_name = 'smooth'
    return_type = 'object'

class banded(Group):
    """
    'banded' child.
    """
    _version = '241'
    fluent_name = 'banded'
    _python_name = 'banded'
    return_type = 'object'

class coloring_1(Group):
    """
    'coloring' child.
    """
    _version = '241'
    fluent_name = 'coloring'
    _python_name = 'coloring'
    child_names = ['option', 'smooth', 'banded']
    _child_classes = dict(
        option=option,
        smooth=smooth,
        banded=banded,
    )
    return_type = 'object'

class visible(Boolean):
    """
    'visible' child.
    """
    _version = '241'
    fluent_name = 'visible?'
    _python_name = 'visible'
    return_type = 'object'

class size_1(Integer):
    """
    'size' child.
    """
    _version = '241'
    fluent_name = 'size'
    _python_name = 'size'
    return_type = 'object'

class log_scale_1(Boolean):
    """
    'log_scale' child.
    """
    _version = '241'
    fluent_name = 'log-scale?'
    _python_name = 'log_scale'
    return_type = 'object'

class format(String, AllowedValuesMixin):
    """
    'format' child.
    """
    _version = '241'
    fluent_name = 'format'
    _python_name = 'format'
    return_type = 'object'

class user_skip(Integer):
    """
    'user_skip' child.
    """
    _version = '241'
    fluent_name = 'user-skip'
    _python_name = 'user_skip'
    return_type = 'object'

class show_all(Boolean):
    """
    'show_all' child.
    """
    _version = '241'
    fluent_name = 'show-all'
    _python_name = 'show_all'
    return_type = 'object'

class position(Integer):
    """
    'position' child.
    """
    _version = '241'
    fluent_name = 'position'
    _python_name = 'position'
    return_type = 'object'

class font_name(String, AllowedValuesMixin):
    """
    'font_name' child.
    """
    _version = '241'
    fluent_name = 'font-name'
    _python_name = 'font_name'
    return_type = 'object'

class font_automatic(Boolean):
    """
    'font_automatic' child.
    """
    _version = '241'
    fluent_name = 'font-automatic'
    _python_name = 'font_automatic'
    return_type = 'object'

class font_size(Real):
    """
    'font_size' child.
    """
    _version = '241'
    fluent_name = 'font-size'
    _python_name = 'font_size'
    return_type = 'object'

class length_2(Real):
    """
    'length' child.
    """
    _version = '241'
    fluent_name = 'length'
    _python_name = 'length'
    return_type = 'object'

class width(Real):
    """
    'width' child.
    """
    _version = '241'
    fluent_name = 'width'
    _python_name = 'width'
    return_type = 'object'

class bground_transparent(Boolean):
    """
    'bground_transparent' child.
    """
    _version = '241'
    fluent_name = 'bground-transparent?'
    _python_name = 'bground_transparent'
    return_type = 'object'

class bground_color(String, AllowedValuesMixin):
    """
    'bground_color' child.
    """
    _version = '241'
    fluent_name = 'bground-color'
    _python_name = 'bground_color'
    return_type = 'object'

class title_elements(String, AllowedValuesMixin):
    """
    'title_elements' child.
    """
    _version = '241'
    fluent_name = 'title-elements'
    _python_name = 'title_elements'
    return_type = 'object'

class color_map(Group):
    """
    'color_map' child.
    """
    _version = '241'
    fluent_name = 'color-map'
    _python_name = 'color_map'
    child_names = ['visible', 'size', 'color', 'log_scale', 'format', 'user_skip', 'show_all', 'position', 'font_name', 'font_automatic', 'font_size', 'length', 'width', 'bground_transparent', 'bground_color', 'title_elements']
    _child_classes = dict(
        visible=visible,
        size=size_1,
        color=color_1,
        log_scale=log_scale_1,
        format=format,
        user_skip=user_skip,
        show_all=show_all,
        position=position,
        font_name=font_name,
        font_automatic=font_automatic,
        font_size=font_size,
        length=length_2,
        width=width,
        bground_transparent=bground_transparent,
        bground_color=bground_color,
        title_elements=title_elements,
    )
    return_type = 'object'

class mesh_object(String, AllowedValuesMixin):
    """
    'mesh_object' child.
    """
    _version = '241'
    fluent_name = 'mesh-object'
    _python_name = 'mesh_object'
    return_type = 'object'

class deformation(Boolean):
    """
    'deformation' child.
    """
    _version = '241'
    fluent_name = 'deformation?'
    _python_name = 'deformation'
    return_type = 'object'

class deformation_scale(Real):
    """
    'deformation_scale' child.
    """
    _version = '241'
    fluent_name = 'deformation-scale'
    _python_name = 'deformation_scale'
    return_type = 'object'

class update_min_max(Command):
    """
    'update_min_max' command.
    """
    _version = '241'
    fluent_name = 'update-min-max'
    _python_name = 'update_min_max'
    return_type = 'object'

class contour_child(Group):
    """
    'child_object_type' of contour.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'contour_child'
    child_names = ['name', 'field', 'filled', 'boundary_values', 'contour_lines', 'node_values', 'surfaces_list', 'range_option', 'coloring', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name', 'physics', 'geometry', 'surfaces', 'deformation', 'deformation_scale']
    command_names = ['display', 'update_min_max']
    _child_classes = dict(
        name=name_1,
        field=field,
        filled=filled,
        boundary_values=boundary_values,
        contour_lines=contour_lines,
        node_values=node_values,
        surfaces_list=surfaces_list,
        range_option=range_option,
        coloring=coloring_1,
        color_map=color_map,
        draw_mesh=draw_mesh,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        physics=physics_1,
        geometry=geometry_5,
        surfaces=surfaces_4,
        deformation=deformation,
        deformation_scale=deformation_scale,
        display=display_3,
        update_min_max=update_min_max,
    )
    return_type = 'object'

class contour(NamedObject[contour_child], CreatableNamedObjectMixinOld[contour_child]):
    """
    'contour' child.
    """
    _version = '241'
    fluent_name = 'contour'
    _python_name = 'contour'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display=display_2,
        copy=copy_4,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = contour_child
    return_type = 'object'

class vector_field(String, AllowedValuesMixin):
    """
    'vector_field' child.
    """
    _version = '241'
    fluent_name = 'vector-field'
    _python_name = 'vector_field'
    return_type = 'object'

class auto_scale(Boolean):
    """
    'auto_scale' child.
    """
    _version = '241'
    fluent_name = 'auto-scale?'
    _python_name = 'auto_scale'
    return_type = 'object'

class scale_f(Real):
    """
    'scale_f' child.
    """
    _version = '241'
    fluent_name = 'scale-f'
    _python_name = 'scale_f'
    return_type = 'object'

class scale_3(Group):
    """
    'scale' child.
    """
    _version = '241'
    fluent_name = 'scale'
    _python_name = 'scale'
    child_names = ['auto_scale', 'scale_f']
    _child_classes = dict(
        auto_scale=auto_scale,
        scale_f=scale_f,
    )
    return_type = 'object'

class style(String, AllowedValuesMixin):
    """
    'style' child.
    """
    _version = '241'
    fluent_name = 'style'
    _python_name = 'style'
    return_type = 'object'

class skip(Integer):
    """
    'skip' child.
    """
    _version = '241'
    fluent_name = 'skip'
    _python_name = 'skip'
    return_type = 'object'

class in_plane(Boolean):
    """
    'in_plane' child.
    """
    _version = '241'
    fluent_name = 'in-plane?'
    _python_name = 'in_plane'
    return_type = 'object'

class fixed_length(Boolean):
    """
    'fixed_length' child.
    """
    _version = '241'
    fluent_name = 'fixed-length?'
    _python_name = 'fixed_length'
    return_type = 'object'

class x_comp(Boolean):
    """
    'x_comp' child.
    """
    _version = '241'
    fluent_name = 'x-comp?'
    _python_name = 'x_comp'
    return_type = 'object'

class y_comp(Boolean):
    """
    'y_comp' child.
    """
    _version = '241'
    fluent_name = 'y-comp?'
    _python_name = 'y_comp'
    return_type = 'object'

class z_comp(Boolean):
    """
    'z_comp' child.
    """
    _version = '241'
    fluent_name = 'z-comp?'
    _python_name = 'z_comp'
    return_type = 'object'

class scale_head(Real):
    """
    'scale_head' child.
    """
    _version = '241'
    fluent_name = 'scale-head'
    _python_name = 'scale_head'
    return_type = 'object'

class vector_opt(Group):
    """
    'vector_opt' child.
    """
    _version = '241'
    fluent_name = 'vector-opt'
    _python_name = 'vector_opt'
    child_names = ['in_plane', 'fixed_length', 'x_comp', 'y_comp', 'z_comp', 'scale_head', 'color']
    _child_classes = dict(
        in_plane=in_plane,
        fixed_length=fixed_length,
        x_comp=x_comp,
        y_comp=y_comp,
        z_comp=z_comp,
        scale_head=scale_head,
        color=color_1,
    )
    return_type = 'object'

class vector_1_child(Group):
    """
    'child_object_type' of vector.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'vector_child'
    child_names = ['name', 'field', 'vector_field', 'surfaces_list', 'scale', 'style', 'skip', 'vector_opt', 'range_option', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name', 'physics', 'geometry', 'surfaces']
    command_names = ['display', 'update_min_max']
    _child_classes = dict(
        name=name_1,
        field=field,
        vector_field=vector_field,
        surfaces_list=surfaces_list,
        scale=scale_3,
        style=style,
        skip=skip,
        vector_opt=vector_opt,
        range_option=range_option,
        color_map=color_map,
        draw_mesh=draw_mesh,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        physics=physics_1,
        geometry=geometry_5,
        surfaces=surfaces_4,
        display=display_3,
        update_min_max=update_min_max,
    )
    return_type = 'object'

class vector_1(NamedObject[vector_1_child], CreatableNamedObjectMixinOld[vector_1_child]):
    """
    'vector' child.
    """
    _version = '241'
    fluent_name = 'vector'
    _python_name = 'vector'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display=display_2,
        copy=copy_4,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = vector_1_child
    return_type = 'object'

class uid(String, AllowedValuesMixin):
    """
    'uid' child.
    """
    _version = '241'
    fluent_name = 'uid'
    _python_name = 'uid'
    return_type = 'object'

class oil_flow(Boolean):
    """
    'oil_flow' child.
    """
    _version = '241'
    fluent_name = 'oil-flow'
    _python_name = 'oil_flow'
    return_type = 'object'

class reverse(Boolean):
    """
    'reverse' child.
    """
    _version = '241'
    fluent_name = 'reverse'
    _python_name = 'reverse'
    return_type = 'object'

class node_values_1(Boolean):
    """
    'node_values' child.
    """
    _version = '241'
    fluent_name = 'node-values'
    _python_name = 'node_values'
    return_type = 'object'

class relative_1(Boolean):
    """
    'relative' child.
    """
    _version = '241'
    fluent_name = 'relative'
    _python_name = 'relative'
    return_type = 'object'

class options_11(Group):
    """
    'options' child.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['oil_flow', 'reverse', 'node_values', 'relative']
    _child_classes = dict(
        oil_flow=oil_flow,
        reverse=reverse,
        node_values=node_values_1,
        relative=relative_1,
    )
    return_type = 'object'

class auto_range_1(Group):
    """
    'auto_range' child.
    """
    _version = '241'
    fluent_name = 'auto-range'
    _python_name = 'auto_range'
    return_type = 'object'

class min_value(Real):
    """
    'min_value' child.
    """
    _version = '241'
    fluent_name = 'min-value'
    _python_name = 'min_value'
    return_type = 'object'

class max_value(Real):
    """
    'max_value' child.
    """
    _version = '241'
    fluent_name = 'max-value'
    _python_name = 'max_value'
    return_type = 'object'

class clip_to_range_1(Group):
    """
    'clip_to_range' child.
    """
    _version = '241'
    fluent_name = 'clip-to-range'
    _python_name = 'clip_to_range'
    child_names = ['min_value', 'max_value']
    _child_classes = dict(
        min_value=min_value,
        max_value=max_value,
    )
    return_type = 'object'

class range(Group):
    """
    'range' child.
    """
    _version = '241'
    fluent_name = 'range'
    _python_name = 'range'
    child_names = ['option', 'auto_range', 'clip_to_range']
    _child_classes = dict(
        option=option,
        auto_range=auto_range_1,
        clip_to_range=clip_to_range_1,
    )
    return_type = 'object'

class line_width(Real):
    """
    'line_width' child.
    """
    _version = '241'
    fluent_name = 'line-width'
    _python_name = 'line_width'
    return_type = 'object'

class arrow_space(Real):
    """
    'arrow_space' child.
    """
    _version = '241'
    fluent_name = 'arrow-space'
    _python_name = 'arrow_space'
    return_type = 'object'

class arrow_scale(Real):
    """
    'arrow_scale' child.
    """
    _version = '241'
    fluent_name = 'arrow-scale'
    _python_name = 'arrow_scale'
    return_type = 'object'

class marker_size_1(Real):
    """
    'marker_size' child.
    """
    _version = '241'
    fluent_name = 'marker-size'
    _python_name = 'marker_size'
    return_type = 'object'

class sphere_size(Real):
    """
    'sphere_size' child.
    """
    _version = '241'
    fluent_name = 'sphere-size'
    _python_name = 'sphere_size'
    return_type = 'object'

class sphere_lod(Integer):
    """
    'sphere_lod' child.
    """
    _version = '241'
    fluent_name = 'sphere-lod'
    _python_name = 'sphere_lod'
    return_type = 'object'

class scalefactor(Real):
    """
    'scalefactor' child.
    """
    _version = '241'
    fluent_name = 'scalefactor'
    _python_name = 'scalefactor'
    return_type = 'object'

class ribbon(Group):
    """
    'ribbon' child.
    """
    _version = '241'
    fluent_name = 'ribbon'
    _python_name = 'ribbon'
    child_names = ['field', 'scalefactor']
    _child_classes = dict(
        field=field,
        scalefactor=scalefactor,
    )
    return_type = 'object'

class style_attribute(Group):
    """
    'style_attribute' child.
    """
    _version = '241'
    fluent_name = 'style-attribute'
    _python_name = 'style_attribute'
    child_names = ['style', 'line_width', 'arrow_space', 'arrow_scale', 'marker_size', 'sphere_size', 'sphere_lod', 'radius', 'ribbon']
    _child_classes = dict(
        style=style,
        line_width=line_width,
        arrow_space=arrow_space,
        arrow_scale=arrow_scale,
        marker_size=marker_size_1,
        sphere_size=sphere_size,
        sphere_lod=sphere_lod,
        radius=radius,
        ribbon=ribbon,
    )
    return_type = 'object'

class step_size(Real):
    """
    'step_size' child.
    """
    _version = '241'
    fluent_name = 'step-size'
    _python_name = 'step_size'
    return_type = 'object'

class tolerance_2(Real):
    """
    'tolerance' child.
    """
    _version = '241'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'
    return_type = 'object'

class accuracy_control_1(Group):
    """
    'accuracy_control' child.
    """
    _version = '241'
    fluent_name = 'accuracy-control'
    _python_name = 'accuracy_control'
    child_names = ['option', 'step_size', 'tolerance']
    _child_classes = dict(
        option=option,
        step_size=step_size,
        tolerance=tolerance_2,
    )
    return_type = 'object'

class x_axis_function(String, AllowedValuesMixin):
    """
    'x_axis_function' child.
    """
    _version = '241'
    fluent_name = 'x-axis-function'
    _python_name = 'x_axis_function'
    return_type = 'object'

class plot_5(Group):
    """
    'plot' child.
    """
    _version = '241'
    fluent_name = 'plot'
    _python_name = 'plot'
    child_names = ['x_axis_function', 'enabled']
    _child_classes = dict(
        x_axis_function=x_axis_function,
        enabled=enabled_15,
    )
    return_type = 'object'

class step(Integer):
    """
    'step' child.
    """
    _version = '241'
    fluent_name = 'step'
    _python_name = 'step'
    return_type = 'object'

class coarsen_1(Integer):
    """
    'coarsen' child.
    """
    _version = '241'
    fluent_name = 'coarsen'
    _python_name = 'coarsen'
    return_type = 'object'

class onzone(StringList, AllowedValuesMixin):
    """
    'onzone' child.
    """
    _version = '241'
    fluent_name = 'onzone'
    _python_name = 'onzone'
    return_type = 'object'

class onphysics(StringList, AllowedValuesMixin):
    """
    'onphysics' child.
    """
    _version = '241'
    fluent_name = 'onphysics'
    _python_name = 'onphysics'
    return_type = 'object'

class release_from_surfaces(StringList, AllowedValuesMixin):
    """
    'release_from_surfaces' child.
    """
    _version = '241'
    fluent_name = 'release-from-surfaces'
    _python_name = 'release_from_surfaces'
    return_type = 'object'

class velocity_domain(String, AllowedValuesMixin):
    """
    'velocity_domain' child.
    """
    _version = '241'
    fluent_name = 'velocity-domain'
    _python_name = 'velocity_domain'
    return_type = 'object'

class x_format(String, AllowedValuesMixin):
    """
    X-axis format.
    """
    _version = '241'
    fluent_name = 'x-format'
    _python_name = 'x_format'
    return_type = 'object'

class x_axis_precision(Integer):
    """
    Digits of precision for X-axis.
    """
    _version = '241'
    fluent_name = 'x-axis-precision'
    _python_name = 'x_axis_precision'
    return_type = 'object'

class y_format(String, AllowedValuesMixin):
    """
    Y-axis format.
    """
    _version = '241'
    fluent_name = 'y-format'
    _python_name = 'y_format'
    return_type = 'object'

class y_axis_precision(Integer):
    """
    Digits of precision for Y-axis.
    """
    _version = '241'
    fluent_name = 'y-axis-precision'
    _python_name = 'y_axis_precision'
    return_type = 'object'

class numbers(Group):
    """
    'numbers' child.
    """
    _version = '241'
    fluent_name = 'numbers'
    _python_name = 'numbers'
    child_names = ['x_format', 'x_axis_precision', 'y_format', 'y_axis_precision']
    _child_classes = dict(
        x_format=x_format,
        x_axis_precision=x_axis_precision,
        y_format=y_format,
        y_axis_precision=y_axis_precision,
    )
    return_type = 'object'

class draw_major_rules(Boolean):
    """
    'draw_major_rules' child.
    """
    _version = '241'
    fluent_name = 'draw-major-rules?'
    _python_name = 'draw_major_rules'
    return_type = 'object'

class major_rule_weight(Real):
    """
    'major_rule_weight' child.
    """
    _version = '241'
    fluent_name = 'major-rule-weight'
    _python_name = 'major_rule_weight'
    return_type = 'object'

class major_rule_line_color(String, AllowedValuesMixin):
    """
    'major_rule_line_color' child.
    """
    _version = '241'
    fluent_name = 'major-rule-line-color'
    _python_name = 'major_rule_line_color'
    return_type = 'object'

class draw_minor_rules(Boolean):
    """
    'draw_minor_rules' child.
    """
    _version = '241'
    fluent_name = 'draw-minor-rules?'
    _python_name = 'draw_minor_rules'
    return_type = 'object'

class minor_rule_weight(Real):
    """
    'minor_rule_weight' child.
    """
    _version = '241'
    fluent_name = 'minor-rule-weight'
    _python_name = 'minor_rule_weight'
    return_type = 'object'

class minor_rule_line_color(String, AllowedValuesMixin):
    """
    'minor_rule_line_color' child.
    """
    _version = '241'
    fluent_name = 'minor-rule-line-color'
    _python_name = 'minor_rule_line_color'
    return_type = 'object'

class x_axis_1(Group):
    """
    'x_axis' child.
    """
    _version = '241'
    fluent_name = 'x-axis'
    _python_name = 'x_axis'
    child_names = ['draw_major_rules', 'major_rule_weight', 'major_rule_line_color', 'draw_minor_rules', 'minor_rule_weight', 'minor_rule_line_color']
    _child_classes = dict(
        draw_major_rules=draw_major_rules,
        major_rule_weight=major_rule_weight,
        major_rule_line_color=major_rule_line_color,
        draw_minor_rules=draw_minor_rules,
        minor_rule_weight=minor_rule_weight,
        minor_rule_line_color=minor_rule_line_color,
    )
    return_type = 'object'

class y_axis_1(Group):
    """
    'y_axis' child.
    """
    _version = '241'
    fluent_name = 'y-axis'
    _python_name = 'y_axis'
    child_names = ['draw_major_rules', 'major_rule_weight', 'major_rule_line_color', 'draw_minor_rules', 'minor_rule_weight', 'minor_rule_line_color']
    _child_classes = dict(
        draw_major_rules=draw_major_rules,
        major_rule_weight=major_rule_weight,
        major_rule_line_color=major_rule_line_color,
        draw_minor_rules=draw_minor_rules,
        minor_rule_weight=minor_rule_weight,
        minor_rule_line_color=minor_rule_line_color,
    )
    return_type = 'object'

class rules(Group):
    """
    'rules' child.
    """
    _version = '241'
    fluent_name = 'rules'
    _python_name = 'rules'
    child_names = ['x_axis', 'y_axis']
    _child_classes = dict(
        x_axis=x_axis_1,
        y_axis=y_axis_1,
    )
    return_type = 'object'

class x_axis_2(Boolean):
    """
    Use log scale for X-axis?.
    """
    _version = '241'
    fluent_name = 'x-axis?'
    _python_name = 'x_axis'
    return_type = 'object'

class y_axis_2(Boolean):
    """
    Use log scale for Y-axis?.
    """
    _version = '241'
    fluent_name = 'y-axis?'
    _python_name = 'y_axis'
    return_type = 'object'

class log_scale_2(Group):
    """
    'log_scale' child.
    """
    _version = '241'
    fluent_name = 'log-scale'
    _python_name = 'log_scale'
    child_names = ['x_axis', 'y_axis']
    _child_classes = dict(
        x_axis=x_axis_2,
        y_axis=y_axis_2,
    )
    return_type = 'object'

class x_axis_3(Boolean):
    """
    Auto-scale X-axis?.
    """
    _version = '241'
    fluent_name = 'x-axis?'
    _python_name = 'x_axis'
    return_type = 'object'

class x_axis_min(Real):
    """
    Minimum X-axis value.
    """
    _version = '241'
    fluent_name = 'x-axis-min'
    _python_name = 'x_axis_min'
    return_type = 'object'

class x_axis_max(Real):
    """
    Maximum X-axis value.
    """
    _version = '241'
    fluent_name = 'x-axis-max'
    _python_name = 'x_axis_max'
    return_type = 'object'

class y_axis_3(Boolean):
    """
    Auto-scale Y-axis?.
    """
    _version = '241'
    fluent_name = 'y-axis?'
    _python_name = 'y_axis'
    return_type = 'object'

class y_axis_min(Real):
    """
    Minimum Y-axis value.
    """
    _version = '241'
    fluent_name = 'y-axis-min'
    _python_name = 'y_axis_min'
    return_type = 'object'

class y_axis_max(Real):
    """
    Maximum Y-axis value.
    """
    _version = '241'
    fluent_name = 'y-axis-max'
    _python_name = 'y_axis_max'
    return_type = 'object'

class auto_scale_1(Group):
    """
    'auto_scale' child.
    """
    _version = '241'
    fluent_name = 'auto-scale'
    _python_name = 'auto_scale'
    child_names = ['x_axis', 'x_axis_min', 'x_axis_max', 'y_axis', 'y_axis_min', 'y_axis_max']
    _child_classes = dict(
        x_axis=x_axis_3,
        x_axis_min=x_axis_min,
        x_axis_max=x_axis_max,
        y_axis=y_axis_3,
        y_axis_min=y_axis_min,
        y_axis_max=y_axis_max,
    )
    return_type = 'object'

class x_axis_4(String, AllowedValuesMixin):
    """
    X-axis label.
    """
    _version = '241'
    fluent_name = 'x-axis'
    _python_name = 'x_axis'
    return_type = 'object'

class y_axis_4(String, AllowedValuesMixin):
    """
    Y-axis label.
    """
    _version = '241'
    fluent_name = 'y-axis'
    _python_name = 'y_axis'
    return_type = 'object'

class labels(Group):
    """
    'labels' child.
    """
    _version = '241'
    fluent_name = 'labels'
    _python_name = 'labels'
    child_names = ['x_axis', 'y_axis']
    _child_classes = dict(
        x_axis=x_axis_4,
        y_axis=y_axis_4,
    )
    return_type = 'object'

class axes_1(Group):
    """
    'axes' child.
    """
    _version = '241'
    fluent_name = 'axes'
    _python_name = 'axes'
    child_names = ['numbers', 'rules', 'log_scale', 'auto_scale', 'labels']
    _child_classes = dict(
        numbers=numbers,
        rules=rules,
        log_scale=log_scale_2,
        auto_scale=auto_scale_1,
        labels=labels,
    )
    return_type = 'object'

class lines_child(Group):
    """
    'child_object_type' of lines.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'lines_child'
    child_names = ['pattern', 'weight', 'color']
    _child_classes = dict(
        pattern=pattern,
        weight=weight_1,
        color=color_1,
    )
    return_type = 'object'

class lines(ListObject[lines_child]):
    """
    'lines' child.
    """
    _version = '241'
    fluent_name = 'lines'
    _python_name = 'lines'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = lines_child
    return_type = 'object'

class markers_child(Group):
    """
    'child_object_type' of markers.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'markers_child'
    child_names = ['symbol', 'size', 'color']
    _child_classes = dict(
        symbol=symbol,
        size=size,
        color=color_1,
    )
    return_type = 'object'

class markers(ListObject[markers_child]):
    """
    'markers' child.
    """
    _version = '241'
    fluent_name = 'markers'
    _python_name = 'markers'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = markers_child
    return_type = 'object'

class curves_1(Group):
    """
    'curves' child.
    """
    _version = '241'
    fluent_name = 'curves'
    _python_name = 'curves'
    child_names = ['lines', 'markers']
    _child_classes = dict(
        lines=lines,
        markers=markers,
    )
    return_type = 'object'

class pathline_child(Group):
    """
    'child_object_type' of pathline.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'pathline_child'
    child_names = ['name', 'uid', 'options', 'range', 'style_attribute', 'accuracy_control', 'plot', 'step', 'skip', 'coarsen', 'onzone', 'onphysics', 'field', 'release_from_surfaces', 'velocity_domain', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name', 'physics', 'geometry', 'surfaces', 'axes', 'curves']
    command_names = ['display', 'update_min_max']
    _child_classes = dict(
        name=name_1,
        uid=uid,
        options=options_11,
        range=range,
        style_attribute=style_attribute,
        accuracy_control=accuracy_control_1,
        plot=plot_5,
        step=step,
        skip=skip,
        coarsen=coarsen_1,
        onzone=onzone,
        onphysics=onphysics,
        field=field,
        release_from_surfaces=release_from_surfaces,
        velocity_domain=velocity_domain,
        color_map=color_map,
        draw_mesh=draw_mesh,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        physics=physics_1,
        geometry=geometry_5,
        surfaces=surfaces_4,
        axes=axes_1,
        curves=curves_1,
        display=display_3,
        update_min_max=update_min_max,
    )
    return_type = 'object'

class pathline(NamedObject[pathline_child], CreatableNamedObjectMixinOld[pathline_child]):
    """
    'pathline' child.
    """
    _version = '241'
    fluent_name = 'pathline'
    _python_name = 'pathline'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display=display_2,
        copy=copy_4,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = pathline_child
    return_type = 'object'

class options_12(Group):
    """
    'options' child.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['node_values']
    _child_classes = dict(
        node_values=node_values_1,
    )
    return_type = 'object'

class inside_1(Boolean):
    """
    'inside' child.
    """
    _version = '241'
    fluent_name = 'inside'
    _python_name = 'inside'
    return_type = 'object'

class outside(Boolean):
    """
    'outside' child.
    """
    _version = '241'
    fluent_name = 'outside'
    _python_name = 'outside'
    return_type = 'object'

class options_13(Group):
    """
    'options' child.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['option', 'inside', 'outside']
    _child_classes = dict(
        option=option,
        inside=inside_1,
        outside=outside,
    )
    return_type = 'object'

class filter_minimum(Real):
    """
    'filter_minimum' child.
    """
    _version = '241'
    fluent_name = 'filter-minimum'
    _python_name = 'filter_minimum'
    return_type = 'object'

class filter_maximum(Real):
    """
    'filter_maximum' child.
    """
    _version = '241'
    fluent_name = 'filter-maximum'
    _python_name = 'filter_maximum'
    return_type = 'object'

class filter_settings(Group):
    """
    'filter_settings' child.
    """
    _version = '241'
    fluent_name = 'filter-settings'
    _python_name = 'filter_settings'
    child_names = ['field', 'options', 'enabled', 'filter_minimum', 'filter_maximum']
    _child_classes = dict(
        field=field,
        options=options_13,
        enabled=enabled_15,
        filter_minimum=filter_minimum,
        filter_maximum=filter_maximum,
    )
    return_type = 'object'

class ribbon_settings(Group):
    """
    'ribbon_settings' child.
    """
    _version = '241'
    fluent_name = 'ribbon-settings'
    _python_name = 'ribbon_settings'
    child_names = ['field', 'scalefactor']
    _child_classes = dict(
        field=field,
        scalefactor=scalefactor,
    )
    return_type = 'object'

class scale_4(Real):
    """
    'scale' child.
    """
    _version = '241'
    fluent_name = 'scale'
    _python_name = 'scale'
    return_type = 'object'

class diameter_3(Real):
    """
    'diameter' child.
    """
    _version = '241'
    fluent_name = 'diameter'
    _python_name = 'diameter'
    return_type = 'object'

class constant_1(Group):
    """
    'constant' child.
    """
    _version = '241'
    fluent_name = 'constant'
    _python_name = 'constant'
    child_names = ['diameter']
    _child_classes = dict(
        diameter=diameter_3,
    )
    return_type = 'object'

class size_by(String, AllowedValuesMixin):
    """
    'size_by' child.
    """
    _version = '241'
    fluent_name = 'size-by'
    _python_name = 'size_by'
    return_type = 'object'

class variable_1(Group):
    """
    'variable' child.
    """
    _version = '241'
    fluent_name = 'variable'
    _python_name = 'variable'
    child_names = ['size_by', 'range']
    _child_classes = dict(
        size_by=size_by,
        range=range,
    )
    return_type = 'object'

class options_14(Group):
    """
    'options' child.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['option', 'constant', 'variable']
    _child_classes = dict(
        option=option,
        constant=constant_1,
        variable=variable_1,
    )
    return_type = 'object'

class sphere_settings(Group):
    """
    'sphere_settings' child.
    """
    _version = '241'
    fluent_name = 'sphere-settings'
    _python_name = 'sphere_settings'
    child_names = ['scale', 'sphere_lod', 'options']
    _child_classes = dict(
        scale=scale_4,
        sphere_lod=sphere_lod,
        options=options_14,
    )
    return_type = 'object'

class style_attribute_1(Group):
    """
    'style_attribute' child.
    """
    _version = '241'
    fluent_name = 'style-attribute'
    _python_name = 'style_attribute'
    child_names = ['style', 'line_width', 'arrow_space', 'arrow_scale', 'marker_size', 'sphere_size', 'sphere_lod', 'radius', 'ribbon_settings', 'sphere_settings']
    _child_classes = dict(
        style=style,
        line_width=line_width,
        arrow_space=arrow_space,
        arrow_scale=arrow_scale,
        marker_size=marker_size_1,
        sphere_size=sphere_size,
        sphere_lod=sphere_lod,
        radius=radius,
        ribbon_settings=ribbon_settings,
        sphere_settings=sphere_settings,
    )
    return_type = 'object'

class constant_length(Real):
    """
    'constant_length' child.
    """
    _version = '241'
    fluent_name = 'constant-length'
    _python_name = 'constant_length'
    return_type = 'object'

class variable_length(String, AllowedValuesMixin):
    """
    'variable_length' child.
    """
    _version = '241'
    fluent_name = 'variable-length'
    _python_name = 'variable_length'
    return_type = 'object'

class vector_length(Group):
    """
    'vector_length' child.
    """
    _version = '241'
    fluent_name = 'vector-length'
    _python_name = 'vector_length'
    child_names = ['option', 'constant_length', 'variable_length']
    _child_classes = dict(
        option=option,
        constant_length=constant_length,
        variable_length=variable_length,
    )
    return_type = 'object'

class constant_color(Group):
    """
    'constant_color' child.
    """
    _version = '241'
    fluent_name = 'constant-color'
    _python_name = 'constant_color'
    child_names = ['enabled', 'color']
    _child_classes = dict(
        enabled=enabled_15,
        color=color_1,
    )
    return_type = 'object'

class vector_of(String, AllowedValuesMixin):
    """
    'vector_of' child.
    """
    _version = '241'
    fluent_name = 'vector-of'
    _python_name = 'vector_of'
    return_type = 'object'

class length_to_head_ratio(Real):
    """
    'length_to_head_ratio' child.
    """
    _version = '241'
    fluent_name = 'length-to-head-ratio'
    _python_name = 'length_to_head_ratio'
    return_type = 'object'

class vector_settings(Group):
    """
    'vector_settings' child.
    """
    _version = '241'
    fluent_name = 'vector-settings'
    _python_name = 'vector_settings'
    child_names = ['style', 'vector_length', 'constant_color', 'vector_of', 'scale', 'length_to_head_ratio']
    _child_classes = dict(
        style=style,
        vector_length=vector_length,
        constant_color=constant_color,
        vector_of=vector_of,
        scale=scale_4,
        length_to_head_ratio=length_to_head_ratio,
    )
    return_type = 'object'

class stream_id(Integer):
    """
    'stream_id' child.
    """
    _version = '241'
    fluent_name = 'stream-id'
    _python_name = 'stream_id'
    return_type = 'object'

class track_single_particle_stream(Group):
    """
    'track_single_particle_stream' child.
    """
    _version = '241'
    fluent_name = 'track-single-particle-stream'
    _python_name = 'track_single_particle_stream'
    child_names = ['enabled', 'stream_id']
    _child_classes = dict(
        enabled=enabled_15,
        stream_id=stream_id,
    )
    return_type = 'object'

class injections_list(StringList, AllowedValuesMixin):
    """
    'injections_list' child.
    """
    _version = '241'
    fluent_name = 'injections-list'
    _python_name = 'injections_list'
    return_type = 'object'

class free_stream_particles(Boolean):
    """
    'free_stream_particles' child.
    """
    _version = '241'
    fluent_name = 'free-stream-particles?'
    _python_name = 'free_stream_particles'
    return_type = 'object'

class wall_film_particles(Boolean):
    """
    'wall_film_particles' child.
    """
    _version = '241'
    fluent_name = 'wall-film-particles?'
    _python_name = 'wall_film_particles'
    return_type = 'object'

class track_pdf_particles(Boolean):
    """
    'track_pdf_particles' child.
    """
    _version = '241'
    fluent_name = 'track-pdf-particles?'
    _python_name = 'track_pdf_particles'
    return_type = 'object'

class particle_track_child(Group):
    """
    'child_object_type' of particle_track.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'particle_track_child'
    child_names = ['name', 'uid', 'options', 'filter_settings', 'range', 'style_attribute', 'vector_settings', 'plot', 'track_single_particle_stream', 'skip', 'coarsen', 'field', 'injections_list', 'free_stream_particles', 'wall_film_particles', 'track_pdf_particles', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name', 'axes', 'curves']
    command_names = ['display', 'update_min_max']
    _child_classes = dict(
        name=name_1,
        uid=uid,
        options=options_12,
        filter_settings=filter_settings,
        range=range,
        style_attribute=style_attribute_1,
        vector_settings=vector_settings,
        plot=plot_5,
        track_single_particle_stream=track_single_particle_stream,
        skip=skip,
        coarsen=coarsen_1,
        field=field,
        injections_list=injections_list,
        free_stream_particles=free_stream_particles,
        wall_film_particles=wall_film_particles,
        track_pdf_particles=track_pdf_particles,
        color_map=color_map,
        draw_mesh=draw_mesh,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        axes=axes_1,
        curves=curves_1,
        display=display_3,
        update_min_max=update_min_max,
    )
    return_type = 'object'

class particle_track(NamedObject[particle_track_child], CreatableNamedObjectMixinOld[particle_track_child]):
    """
    'particle_track' child.
    """
    _version = '241'
    fluent_name = 'particle-track'
    _python_name = 'particle_track'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display=display_2,
        copy=copy_4,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = particle_track_child
    return_type = 'object'

class vector_phase(String, AllowedValuesMixin):
    """
    'vector_phase' child.
    """
    _version = '241'
    fluent_name = 'vector-phase'
    _python_name = 'vector_phase'
    return_type = 'object'

class lic_color_by_field(Boolean):
    """
    'lic_color_by_field' child.
    """
    _version = '241'
    fluent_name = 'lic-color-by-field?'
    _python_name = 'lic_color_by_field'
    return_type = 'object'

class lic_color(String, AllowedValuesMixin):
    """
    'lic_color' child.
    """
    _version = '241'
    fluent_name = 'lic-color'
    _python_name = 'lic_color'
    return_type = 'object'

class lic_oriented(Boolean):
    """
    'lic_oriented' child.
    """
    _version = '241'
    fluent_name = 'lic-oriented?'
    _python_name = 'lic_oriented'
    return_type = 'object'

class lic_normalize(Boolean):
    """
    'lic_normalize' child.
    """
    _version = '241'
    fluent_name = 'lic-normalize?'
    _python_name = 'lic_normalize'
    return_type = 'object'

class lic_pixel_interpolation(Boolean):
    """
    'lic_pixel_interpolation' child.
    """
    _version = '241'
    fluent_name = 'lic-pixel-interpolation?'
    _python_name = 'lic_pixel_interpolation'
    return_type = 'object'

class lic_max_steps(Integer):
    """
    'lic_max_steps' child.
    """
    _version = '241'
    fluent_name = 'lic-max-steps'
    _python_name = 'lic_max_steps'
    return_type = 'object'

class texture_spacing(Integer):
    """
    'texture_spacing' child.
    """
    _version = '241'
    fluent_name = 'texture-spacing'
    _python_name = 'texture_spacing'
    return_type = 'object'

class texture_size(Integer):
    """
    'texture_size' child.
    """
    _version = '241'
    fluent_name = 'texture-size'
    _python_name = 'texture_size'
    return_type = 'object'

class lic_intensity_factor(Integer):
    """
    'lic_intensity_factor' child.
    """
    _version = '241'
    fluent_name = 'lic-intensity-factor'
    _python_name = 'lic_intensity_factor'
    return_type = 'object'

class lic_image_filter(String, AllowedValuesMixin):
    """
    'lic_image_filter' child.
    """
    _version = '241'
    fluent_name = 'lic-image-filter'
    _python_name = 'lic_image_filter'
    return_type = 'object'

class lic_intensity_alpha(Boolean):
    """
    'lic_intensity_alpha' child.
    """
    _version = '241'
    fluent_name = 'lic-intensity-alpha?'
    _python_name = 'lic_intensity_alpha'
    return_type = 'object'

class lic_fast(Boolean):
    """
    'lic_fast' child.
    """
    _version = '241'
    fluent_name = 'lic-fast?'
    _python_name = 'lic_fast'
    return_type = 'object'

class gray_scale(Boolean):
    """
    'gray_scale' child.
    """
    _version = '241'
    fluent_name = 'gray-scale?'
    _python_name = 'gray_scale'
    return_type = 'object'

class image_to_display(String, AllowedValuesMixin):
    """
    'image_to_display' child.
    """
    _version = '241'
    fluent_name = 'image-to-display'
    _python_name = 'image_to_display'
    return_type = 'object'

class lic_child(Group):
    """
    'child_object_type' of lic.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'lic_child'
    child_names = ['name', 'field', 'vector_field', 'vector_phase', 'surfaces_list', 'surfaces', 'lic_color_by_field', 'lic_color', 'lic_oriented', 'lic_normalize', 'lic_pixel_interpolation', 'lic_max_steps', 'texture_spacing', 'texture_size', 'lic_intensity_factor', 'lic_image_filter', 'lic_intensity_alpha', 'lic_fast', 'gray_scale', 'image_to_display', 'range_option', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name']
    command_names = ['display', 'update_min_max']
    _child_classes = dict(
        name=name_1,
        field=field,
        vector_field=vector_field,
        vector_phase=vector_phase,
        surfaces_list=surfaces_list,
        surfaces=surfaces_4,
        lic_color_by_field=lic_color_by_field,
        lic_color=lic_color,
        lic_oriented=lic_oriented,
        lic_normalize=lic_normalize,
        lic_pixel_interpolation=lic_pixel_interpolation,
        lic_max_steps=lic_max_steps,
        texture_spacing=texture_spacing,
        texture_size=texture_size,
        lic_intensity_factor=lic_intensity_factor,
        lic_image_filter=lic_image_filter,
        lic_intensity_alpha=lic_intensity_alpha,
        lic_fast=lic_fast,
        gray_scale=gray_scale,
        image_to_display=image_to_display,
        range_option=range_option,
        color_map=color_map,
        draw_mesh=draw_mesh,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        display=display_3,
        update_min_max=update_min_max,
    )
    return_type = 'object'

class lic(NamedObject[lic_child], CreatableNamedObjectMixinOld[lic_child]):
    """
    'lic' child.
    """
    _version = '241'
    fluent_name = 'lic'
    _python_name = 'lic'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display=display_2,
        copy=copy_4,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = lic_child
    return_type = 'object'

class olic_child(Group):
    """
    'child_object_type' of olic.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'olic_child'
    child_names = ['name', 'field', 'vector_field', 'vector_phase', 'surfaces_list', 'surfaces', 'lic_color_by_field', 'lic_color', 'lic_oriented', 'lic_normalize', 'lic_pixel_interpolation', 'lic_max_steps', 'texture_spacing', 'texture_size', 'lic_intensity_factor', 'lic_image_filter', 'lic_intensity_alpha', 'lic_fast', 'gray_scale', 'image_to_display', 'range_option', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        field=field,
        vector_field=vector_field,
        vector_phase=vector_phase,
        surfaces_list=surfaces_list,
        surfaces=surfaces_4,
        lic_color_by_field=lic_color_by_field,
        lic_color=lic_color,
        lic_oriented=lic_oriented,
        lic_normalize=lic_normalize,
        lic_pixel_interpolation=lic_pixel_interpolation,
        lic_max_steps=lic_max_steps,
        texture_spacing=texture_spacing,
        texture_size=texture_size,
        lic_intensity_factor=lic_intensity_factor,
        lic_image_filter=lic_image_filter,
        lic_intensity_alpha=lic_intensity_alpha,
        lic_fast=lic_fast,
        gray_scale=gray_scale,
        image_to_display=image_to_display,
        range_option=range_option,
        color_map=color_map,
        draw_mesh=draw_mesh,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        display=display_3,
    )
    return_type = 'object'

class olic(NamedObject[olic_child], CreatableNamedObjectMixinOld[olic_child]):
    """
    'olic' child.
    """
    _version = '241'
    fluent_name = 'olic'
    _python_name = 'olic'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display=display_2,
        copy=copy_4,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = olic_child
    return_type = 'object'

class field_name_1(String, AllowedValuesMixin):
    """
    'field_name' child.
    """
    _version = '241'
    fluent_name = 'field-name'
    _python_name = 'field_name'
    return_type = 'object'

class data_source(String, AllowedValuesMixin):
    """
    'data_source' child.
    """
    _version = '241'
    fluent_name = 'data-source'
    _python_name = 'data_source'
    return_type = 'object'

class range_options(Group):
    """
    'range_options' child.
    """
    _version = '241'
    fluent_name = 'range-options'
    _python_name = 'range_options'
    child_names = ['type', 'minimum', 'maximum']
    _child_classes = dict(
        type=type_2,
        minimum=minimum_1,
        maximum=maximum_1,
    )
    return_type = 'object'

class rendering_quality(String, AllowedValuesMixin):
    """
    'rendering_quality' child.
    """
    _version = '241'
    fluent_name = 'rendering-quality'
    _python_name = 'rendering_quality'
    return_type = 'object'

class color_density(Real):
    """
    'color_density' child.
    """
    _version = '241'
    fluent_name = 'color-density'
    _python_name = 'color_density'
    return_type = 'object'

class colormap_options(Group):
    """
    'colormap_options' child.
    """
    _version = '241'
    fluent_name = 'colormap-options'
    _python_name = 'colormap_options'
    child_names = ['visible', 'size', 'color', 'log_scale', 'format', 'user_skip', 'show_all', 'position', 'font_name', 'font_automatic', 'font_size', 'length', 'width', 'bground_transparent', 'bground_color', 'title_elements']
    _child_classes = dict(
        visible=visible,
        size=size_1,
        color=color_1,
        log_scale=log_scale_1,
        format=format,
        user_skip=user_skip,
        show_all=show_all,
        position=position,
        font_name=font_name,
        font_automatic=font_automatic,
        font_size=font_size,
        length=length_2,
        width=width,
        bground_transparent=bground_transparent,
        bground_color=bground_color,
        title_elements=title_elements,
    )
    return_type = 'object'

class home_options(Group):
    """
    'home_options' child.
    """
    _version = '241'
    fluent_name = 'home-options'
    _python_name = 'home_options'
    child_names = ['field_name', 'data_source', 'range_options', 'rendering_quality', 'color_density', 'colormap_options', 'cell_zones']
    _child_classes = dict(
        field_name=field_name_1,
        data_source=data_source,
        range_options=range_options,
        rendering_quality=rendering_quality,
        color_density=color_density,
        colormap_options=colormap_options,
        cell_zones=cell_zones_3,
    )
    return_type = 'object'

class min_transparency_value(Real):
    """
    'min_transparency_value' child.
    """
    _version = '241'
    fluent_name = 'min-transparency-value'
    _python_name = 'min_transparency_value'
    return_type = 'object'

class max_transparency_value(Real):
    """
    'max_transparency_value' child.
    """
    _version = '241'
    fluent_name = 'max-transparency-value'
    _python_name = 'max_transparency_value'
    return_type = 'object'

class settings_2_child(Group):
    """
    'child_object_type' of settings.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'settings_child'
    child_names = ['active', 'min_value', 'max_value', 'min_transparency_value', 'max_transparency_value']
    _child_classes = dict(
        active=active,
        min_value=min_value,
        max_value=max_value,
        min_transparency_value=min_transparency_value,
        max_transparency_value=max_transparency_value,
    )
    return_type = 'object'

class settings_2(ListObject[settings_2_child]):
    """
    'settings' child.
    """
    _version = '241'
    fluent_name = 'settings'
    _python_name = 'settings'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = settings_2_child
    return_type = 'object'

class reset_1(Command):
    """
    'reset' command.
    """
    _version = '241'
    fluent_name = 'reset'
    _python_name = 'reset'
    return_type = 'object'

class invert(Command):
    """
    'invert' command.
    """
    _version = '241'
    fluent_name = 'invert'
    _python_name = 'invert'
    return_type = 'object'

class transparency_options(Group):
    """
    'transparency_options' child.
    """
    _version = '241'
    fluent_name = 'transparency-options'
    _python_name = 'transparency_options'
    child_names = ['settings']
    command_names = ['reset', 'invert']
    _child_classes = dict(
        settings=settings_2,
        reset=reset_1,
        invert=invert,
    )
    return_type = 'object'

class hide_volume(Boolean):
    """
    'hide_volume' child.
    """
    _version = '241'
    fluent_name = 'hide-volume?'
    _python_name = 'hide_volume'
    return_type = 'object'

class transparency(Real):
    """
    'transparency' child.
    """
    _version = '241'
    fluent_name = 'transparency'
    _python_name = 'transparency'
    return_type = 'object'

class color_2(IntegerList):
    """
    'color' child.
    """
    _version = '241'
    fluent_name = 'color'
    _python_name = 'color'
    return_type = 'object'

class settings_3_child(Group):
    """
    'child_object_type' of settings.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'settings_child'
    child_names = ['active', 'value', 'transparency', 'color']
    _child_classes = dict(
        active=active,
        value=value_1,
        transparency=transparency,
        color=color_2,
    )
    return_type = 'object'

class settings_3(ListObject[settings_3_child]):
    """
    'settings' child.
    """
    _version = '241'
    fluent_name = 'settings'
    _python_name = 'settings'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = settings_3_child
    return_type = 'object'

class isovalue_options(Group):
    """
    'isovalue_options' child.
    """
    _version = '241'
    fluent_name = 'isovalue-options'
    _python_name = 'isovalue_options'
    child_names = ['hide_volume', 'settings']
    command_names = ['reset']
    _child_classes = dict(
        hide_volume=hide_volume,
        settings=settings_3,
        reset=reset_1,
    )
    return_type = 'object'

class selection_type(String, AllowedValuesMixin):
    """
    'selection_type' child.
    """
    _version = '241'
    fluent_name = 'selection-type'
    _python_name = 'selection_type'
    return_type = 'object'

class x_min(Real):
    """
    'x_min' child.
    """
    _version = '241'
    fluent_name = 'x-min'
    _python_name = 'x_min'
    return_type = 'object'

class y_min(Real):
    """
    'y_min' child.
    """
    _version = '241'
    fluent_name = 'y-min'
    _python_name = 'y_min'
    return_type = 'object'

class z_min(Real):
    """
    'z_min' child.
    """
    _version = '241'
    fluent_name = 'z-min'
    _python_name = 'z_min'
    return_type = 'object'

class x_max(Real):
    """
    'x_max' child.
    """
    _version = '241'
    fluent_name = 'x-max'
    _python_name = 'x_max'
    return_type = 'object'

class y_max(Real):
    """
    'y_max' child.
    """
    _version = '241'
    fluent_name = 'y-max'
    _python_name = 'y_max'
    return_type = 'object'

class z_max(Real):
    """
    'z_max' child.
    """
    _version = '241'
    fluent_name = 'z-max'
    _python_name = 'z_max'
    return_type = 'object'

class settings_4_child(Group):
    """
    'child_object_type' of settings.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'settings_child'
    child_names = ['active', 'x_min', 'y_min', 'z_min', 'x_max', 'y_max', 'z_max']
    _child_classes = dict(
        active=active,
        x_min=x_min,
        y_min=y_min,
        z_min=z_min,
        x_max=x_max,
        y_max=y_max,
        z_max=z_max,
    )
    return_type = 'object'

class settings_4(ListObject[settings_4_child]):
    """
    'settings' child.
    """
    _version = '241'
    fluent_name = 'settings'
    _python_name = 'settings'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = settings_4_child
    return_type = 'object'

class clip_box_options(Group):
    """
    'clip_box_options' child.
    """
    _version = '241'
    fluent_name = 'clip-box-options'
    _python_name = 'clip_box_options'
    child_names = ['selection_type', 'settings']
    command_names = ['reset']
    _child_classes = dict(
        selection_type=selection_type,
        settings=settings_4,
        reset=reset_1,
    )
    return_type = 'object'

class x_center(Real):
    """
    'x_center' child.
    """
    _version = '241'
    fluent_name = 'x-center'
    _python_name = 'x_center'
    return_type = 'object'

class y_center(Real):
    """
    'y_center' child.
    """
    _version = '241'
    fluent_name = 'y-center'
    _python_name = 'y_center'
    return_type = 'object'

class z_center(Real):
    """
    'z_center' child.
    """
    _version = '241'
    fluent_name = 'z-center'
    _python_name = 'z_center'
    return_type = 'object'

class settings_5_child(Group):
    """
    'child_object_type' of settings.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'settings_child'
    child_names = ['active', 'x_center', 'y_center', 'z_center', 'radius']
    _child_classes = dict(
        active=active,
        x_center=x_center,
        y_center=y_center,
        z_center=z_center,
        radius=radius,
    )
    return_type = 'object'

class settings_5(ListObject[settings_5_child]):
    """
    'settings' child.
    """
    _version = '241'
    fluent_name = 'settings'
    _python_name = 'settings'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = settings_5_child
    return_type = 'object'

class clip_sphere_options(Group):
    """
    'clip_sphere_options' child.
    """
    _version = '241'
    fluent_name = 'clip-sphere-options'
    _python_name = 'clip_sphere_options'
    child_names = ['selection_type', 'settings']
    command_names = ['reset']
    _child_classes = dict(
        selection_type=selection_type,
        settings=settings_5,
        reset=reset_1,
    )
    return_type = 'object'

class iso_values_colors_list(RealList):
    """
    'iso_values_colors_list' child.
    """
    _version = '241'
    fluent_name = 'iso-values-colors-list'
    _python_name = 'iso_values_colors_list'
    return_type = 'object'

class local_values_range_list(RealList):
    """
    'local_values_range_list' child.
    """
    _version = '241'
    fluent_name = 'local-values-range-list'
    _python_name = 'local_values_range_list'
    return_type = 'object'

class opacities_range_list(RealList):
    """
    'opacities_range_list' child.
    """
    _version = '241'
    fluent_name = 'opacities-range-list'
    _python_name = 'opacities_range_list'
    return_type = 'object'

class transfer_functions_list(RealList):
    """
    'transfer_functions_list' child.
    """
    _version = '241'
    fluent_name = 'transfer-functions-list'
    _python_name = 'transfer_functions_list'
    return_type = 'object'

class clip_bound_values_list(RealList):
    """
    'clip_bound_values_list' child.
    """
    _version = '241'
    fluent_name = 'clip-bound-values-list'
    _python_name = 'clip_bound_values_list'
    return_type = 'object'

class volume_data_list(RealList):
    """
    'volume_data_list' child.
    """
    _version = '241'
    fluent_name = 'volume-data-list'
    _python_name = 'volume_data_list'
    return_type = 'object'

class custom_update_attribute_list(RealList):
    """
    'custom_update_attribute_list' child.
    """
    _version = '241'
    fluent_name = 'custom-update-attribute-list'
    _python_name = 'custom_update_attribute_list'
    return_type = 'object'

class compute_node_count(Integer):
    """
    'compute_node_count' child.
    """
    _version = '241'
    fluent_name = 'compute-node-count'
    _python_name = 'compute_node_count'
    return_type = 'object'

class volumes_1_child(Group):
    """
    'child_object_type' of volumes.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'volumes_child'
    child_names = ['name', 'home_options', 'transparency_options', 'isovalue_options', 'clip_box_options', 'clip_sphere_options', 'iso_values_colors_list', 'local_values_range_list', 'opacities_range_list', 'transfer_functions_list', 'clip_bound_values_list', 'volume_data_list', 'custom_update_attribute_list', 'compute_node_count']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        home_options=home_options,
        transparency_options=transparency_options,
        isovalue_options=isovalue_options,
        clip_box_options=clip_box_options,
        clip_sphere_options=clip_sphere_options,
        iso_values_colors_list=iso_values_colors_list,
        local_values_range_list=local_values_range_list,
        opacities_range_list=opacities_range_list,
        transfer_functions_list=transfer_functions_list,
        clip_bound_values_list=clip_bound_values_list,
        volume_data_list=volume_data_list,
        custom_update_attribute_list=custom_update_attribute_list,
        compute_node_count=compute_node_count,
        display=display_3,
    )
    return_type = 'object'

class volumes_1(NamedObject[volumes_1_child], CreatableNamedObjectMixinOld[volumes_1_child]):
    """
    'volumes' child.
    """
    _version = '241'
    fluent_name = 'volumes'
    _python_name = 'volumes'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display=display_2,
        copy=copy_4,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = volumes_1_child
    return_type = 'object'

class auto_scale_2(Boolean):
    """
    Enable/disable auto-computation of range for contours.
    """
    _version = '241'
    fluent_name = 'auto-scale?'
    _python_name = 'auto_scale'
    return_type = 'object'

class clip_to_range_2(Boolean):
    """
    Enable/disable the clip to range option for filled contours.
    """
    _version = '241'
    fluent_name = 'clip-to-range?'
    _python_name = 'clip_to_range'
    return_type = 'object'

class surfaces_7(StringList, AllowedValuesMixin):
    """
    Surfaces to be contoured.
    """
    _version = '241'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    return_type = 'object'

class filled_contours(Boolean):
    """
    Enable/disable the filled contour option.
    """
    _version = '241'
    fluent_name = 'filled-contours?'
    _python_name = 'filled_contours'
    return_type = 'object'

class global_range_1(Boolean):
    """
    Enable/disable the global range for contours option.
    """
    _version = '241'
    fluent_name = 'global-range?'
    _python_name = 'global_range'
    return_type = 'object'

class line_contours(Boolean):
    """
    Enable/disable the filled contour option.
    """
    _version = '241'
    fluent_name = 'line-contours?'
    _python_name = 'line_contours'
    return_type = 'object'

class log_scale_3(Boolean):
    """
    Enable/disable the use of a log scale.
    """
    _version = '241'
    fluent_name = 'log-scale?'
    _python_name = 'log_scale'
    return_type = 'object'

class n_contour(Integer):
    """
    The number of contour levels.
    """
    _version = '241'
    fluent_name = 'n-contour'
    _python_name = 'n_contour'
    return_type = 'object'

class node_values_2(Boolean):
    """
    Enable/disable the plot of node values.
    """
    _version = '241'
    fluent_name = 'node-values?'
    _python_name = 'node_values'
    return_type = 'object'

class render_mesh(Boolean):
    """
    Determine whether or not to render the mesh on top of contours, vectors, etc.
    """
    _version = '241'
    fluent_name = 'render-mesh?'
    _python_name = 'render_mesh'
    return_type = 'object'

class banded_coloring(Boolean):
    """
    Specifies whether contours should be colored in bands.
    """
    _version = '241'
    fluent_name = 'banded-coloring'
    _python_name = 'banded_coloring'
    return_type = 'object'

class number_of_bands_1(Integer):
    """
    The number of bands to be used for contours.
    """
    _version = '241'
    fluent_name = 'number-of-bands'
    _python_name = 'number_of_bands'
    return_type = 'object'

class coloring_2(Group):
    """
    Coloring option.
    """
    _version = '241'
    fluent_name = 'coloring'
    _python_name = 'coloring'
    child_names = ['banded_coloring', 'number_of_bands']
    _child_classes = dict(
        banded_coloring=banded_coloring,
        number_of_bands=number_of_bands_1,
    )
    return_type = 'object'

class contours(Group):
    """
    'contours' child.
    """
    _version = '241'
    fluent_name = 'contours'
    _python_name = 'contours'
    child_names = ['auto_scale', 'clip_to_range', 'surfaces', 'filled_contours', 'global_range', 'line_contours', 'log_scale', 'n_contour', 'node_values', 'render_mesh', 'coloring']
    _child_classes = dict(
        auto_scale=auto_scale_2,
        clip_to_range=clip_to_range_2,
        surfaces=surfaces_7,
        filled_contours=filled_contours,
        global_range=global_range_1,
        line_contours=line_contours,
        log_scale=log_scale_3,
        n_contour=n_contour,
        node_values=node_values_2,
        render_mesh=render_mesh,
        coloring=coloring_2,
    )
    return_type = 'object'

class display_4(Boolean):
    """
    Determine whether particle tracks will be displayed or only tracked.
    """
    _version = '241'
    fluent_name = 'display?'
    _python_name = 'display'
    return_type = 'object'

class history_filename(Filename):
    """
    The name of the particle history file.
    """
    _version = '241'
    fluent_name = 'history-filename'
    _python_name = 'history_filename'
    return_type = 'object'

class report_default_variables(String):
    """
    The report variables to default.
    """
    _version = '241'
    fluent_name = 'report-default-variables'
    _python_name = 'report_default_variables'
    return_type = 'object'

class track_single_particle_stream_1(Integer):
    """
    The stream ID to be tracked.
    """
    _version = '241'
    fluent_name = 'track-single-particle-stream?'
    _python_name = 'track_single_particle_stream'
    return_type = 'object'

class arrow_scale_1(Real):
    """
    The scale factor for arrows drawn on particle tracks.
    """
    _version = '241'
    fluent_name = 'arrow-scale'
    _python_name = 'arrow_scale'
    return_type = 'object'

class arrow_space_1(Real):
    """
    The spacing factor for arrows drawn on particle tracks.
    """
    _version = '241'
    fluent_name = 'arrow-space'
    _python_name = 'arrow_space'
    return_type = 'object'

class coarsen_factor(Integer):
    """
    The particle tracks coarsening factor.
    """
    _version = '241'
    fluent_name = 'coarsen-factor'
    _python_name = 'coarsen_factor'
    return_type = 'object'

class line_width_1(Real):
    """
    The width for particle track.
    """
    _version = '241'
    fluent_name = 'line-width'
    _python_name = 'line_width'
    return_type = 'object'

class particle_tracks(Group):
    """
    'particle_tracks' child.
    """
    _version = '241'
    fluent_name = 'particle-tracks'
    _python_name = 'particle_tracks'
    child_names = ['display', 'history_filename', 'report_default_variables', 'track_single_particle_stream', 'arrow_scale', 'arrow_space', 'coarsen_factor', 'line_width']
    _child_classes = dict(
        display=display_4,
        history_filename=history_filename,
        report_default_variables=report_default_variables,
        track_single_particle_stream=track_single_particle_stream_1,
        arrow_scale=arrow_scale_1,
        arrow_space=arrow_space_1,
        coarsen_factor=coarsen_factor,
        line_width=line_width_1,
    )
    return_type = 'object'

class background(String):
    """
    The background (window) color.
    """
    _version = '241'
    fluent_name = 'background'
    _python_name = 'background'
    return_type = 'object'

class color_by_type(Boolean):
    """
    Determine whether to color meshes by type or by surface (ID).
    """
    _version = '241'
    fluent_name = 'color-by-type?'
    _python_name = 'color_by_type'
    return_type = 'object'

class foreground(String):
    """
    The foreground (text and window frame) color.
    """
    _version = '241'
    fluent_name = 'foreground'
    _python_name = 'foreground'
    return_type = 'object'

class only_list_case_boundaries(Boolean):
    """
    Only list the boundary types that are assigned in this case.
    """
    _version = '241'
    fluent_name = 'only-list-case-boundaries?'
    _python_name = 'only_list_case_boundaries'
    return_type = 'object'

class use_inherent_material_color(Boolean):
    """
    Use inherent material color for boundary zones.
    """
    _version = '241'
    fluent_name = 'use-inherent-material-color?'
    _python_name = 'use_inherent_material_color'
    return_type = 'object'

class type_name_child(Group):
    """
    'child_object_type' of type_name.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'type_name_child'
    child_names = ['color', 'material']
    _child_classes = dict(
        color=color_1,
        material=material,
    )
    return_type = 'object'

class type_name(NamedObject[type_name_child], _NonCreatableNamedObjectMixin[type_name_child]):
    """
    'type_name' child.
    """
    _version = '241'
    fluent_name = 'type-name'
    _python_name = 'type_name'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = type_name_child
    return_type = 'object'

class reset_2(Command):
    """
    Reset colors and/or materials to the defaults.
    """
    _version = '241'
    fluent_name = 'reset?'
    _python_name = 'reset'
    return_type = 'object'

class by_type(Group):
    """
    'by_type' child.
    """
    _version = '241'
    fluent_name = 'by-type'
    _python_name = 'by_type'
    child_names = ['only_list_case_boundaries', 'use_inherent_material_color', 'type_name']
    command_names = ['reset']
    _child_classes = dict(
        only_list_case_boundaries=only_list_case_boundaries,
        use_inherent_material_color=use_inherent_material_color,
        type_name=type_name,
        reset=reset_2,
    )
    return_type = 'object'

class use_inherent_material_color_1(Boolean):
    """
    Use inherent material color for surfaces.
    """
    _version = '241'
    fluent_name = 'use-inherent-material-color?'
    _python_name = 'use_inherent_material_color'
    return_type = 'object'

class list_surfaces_by_color(Command):
    """
    List the surfaces by its color.
    """
    _version = '241'
    fluent_name = 'list-surfaces-by-color'
    _python_name = 'list_surfaces_by_color'
    return_type = 'object'

class list_surfaces_by_material(Command):
    """
    List the surfaces by its material.
    """
    _version = '241'
    fluent_name = 'list-surfaces-by-material'
    _python_name = 'list_surfaces_by_material'
    return_type = 'object'

class surface_names_1(StringList, AllowedValuesMixin):
    """
    The list of surfaces to set color and material.
    """
    _version = '241'
    fluent_name = 'surface-names'
    _python_name = 'surface_names'
    return_type = 'object'

class surfaces_8(Command):
    """
    Select the surface(s) to specify colors and/or materials.
    
    Parameters
    ----------
        surface_names : List
            The list of surfaces to set color and material.
        color : str
            'color' child.
        material : str
            'material' child.
    """
    _version = '241'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    argument_names = ['surface_names', 'color', 'material']
    _child_classes = dict(
        surface_names=surface_names_1,
        color=color_1,
        material=material,
    )
    return_type = 'object'

class by_surface(Group):
    """
    'by_surface' child.
    """
    _version = '241'
    fluent_name = 'by-surface'
    _python_name = 'by_surface'
    child_names = ['use_inherent_material_color']
    command_names = ['reset', 'list_surfaces_by_color', 'list_surfaces_by_material', 'surfaces']
    _child_classes = dict(
        use_inherent_material_color=use_inherent_material_color_1,
        reset=reset_2,
        list_surfaces_by_color=list_surfaces_by_color,
        list_surfaces_by_material=list_surfaces_by_material,
        surfaces=surfaces_8,
    )
    return_type = 'object'

class far_field_faces(String):
    """
    The color of far field faces.
    """
    _version = '241'
    fluent_name = 'far-field-faces'
    _python_name = 'far_field_faces'
    return_type = 'object'

class inlet_faces(String):
    """
    The color of inlet faces.
    """
    _version = '241'
    fluent_name = 'inlet-faces'
    _python_name = 'inlet_faces'
    return_type = 'object'

class interior_faces(String):
    """
    The color of interior faces.
    """
    _version = '241'
    fluent_name = 'interior-faces'
    _python_name = 'interior_faces'
    return_type = 'object'

class internal_faces(String):
    """
    The color of internal interface faces.
    """
    _version = '241'
    fluent_name = 'internal-faces'
    _python_name = 'internal_faces'
    return_type = 'object'

class outlet_faces(String):
    """
    The color of outlet faces.
    """
    _version = '241'
    fluent_name = 'outlet-faces'
    _python_name = 'outlet_faces'
    return_type = 'object'

class overset_faces(String):
    """
    The color of overset faces.
    """
    _version = '241'
    fluent_name = 'overset-faces'
    _python_name = 'overset_faces'
    return_type = 'object'

class periodic_faces(String):
    """
    The color of periodic faces.
    """
    _version = '241'
    fluent_name = 'periodic-faces'
    _python_name = 'periodic_faces'
    return_type = 'object'

class rans_les_interface_faces(String):
    """
    The color of RANS/LES interface faces.
    """
    _version = '241'
    fluent_name = 'rans-les-interface-faces'
    _python_name = 'rans_les_interface_faces'
    return_type = 'object'

class symmetry_faces(String):
    """
    The color of symmetric faces.
    """
    _version = '241'
    fluent_name = 'symmetry-faces'
    _python_name = 'symmetry_faces'
    return_type = 'object'

class axis_faces(String):
    """
    The color of axisymmetric faces.
    """
    _version = '241'
    fluent_name = 'axis-faces'
    _python_name = 'axis_faces'
    return_type = 'object'

class free_surface_faces(String):
    """
    The color of free-surface faces.
    """
    _version = '241'
    fluent_name = 'free-surface-faces'
    _python_name = 'free_surface_faces'
    return_type = 'object'

class traction_faces(String):
    """
    The color of traction faces.
    """
    _version = '241'
    fluent_name = 'traction-faces'
    _python_name = 'traction_faces'
    return_type = 'object'

class wall_faces(String):
    """
    The color of wall faces.
    """
    _version = '241'
    fluent_name = 'wall-faces'
    _python_name = 'wall_faces'
    return_type = 'object'

class interface_faces(String):
    """
    The color of mesh interfaces.
    """
    _version = '241'
    fluent_name = 'interface-faces'
    _python_name = 'interface_faces'
    return_type = 'object'

class surface_4(String):
    """
    The color of surfaces.
    """
    _version = '241'
    fluent_name = 'surface'
    _python_name = 'surface'
    return_type = 'object'

class skip_label(Integer):
    """
    The number of labels to be skipped in the colopmap scale.
    """
    _version = '241'
    fluent_name = 'skip-label'
    _python_name = 'skip_label'
    return_type = 'object'

class automatic_skip(Boolean):
    """
    Determine whether to skip labels in the colopmap scale automatically.
    """
    _version = '241'
    fluent_name = 'automatic-skip?'
    _python_name = 'automatic_skip'
    return_type = 'object'

class reset_colors(Command):
    """
    Reset individual mesh surface colors to the defaults.
    """
    _version = '241'
    fluent_name = 'reset-colors'
    _python_name = 'reset_colors'
    return_type = 'object'

class list_colors(Command):
    """
    List available colors.
    """
    _version = '241'
    fluent_name = 'list-colors'
    _python_name = 'list_colors'
    return_type = 'object'

class colors(Group):
    """
    'colors' child.
    """
    _version = '241'
    fluent_name = 'colors'
    _python_name = 'colors'
    child_names = ['background', 'color_by_type', 'foreground', 'by_type', 'by_surface', 'far_field_faces', 'inlet_faces', 'interior_faces', 'internal_faces', 'outlet_faces', 'overset_faces', 'periodic_faces', 'rans_les_interface_faces', 'symmetry_faces', 'axis_faces', 'free_surface_faces', 'traction_faces', 'wall_faces', 'interface_faces', 'surface', 'skip_label', 'automatic_skip']
    command_names = ['reset_colors', 'list_colors']
    _child_classes = dict(
        background=background,
        color_by_type=color_by_type,
        foreground=foreground,
        by_type=by_type,
        by_surface=by_surface,
        far_field_faces=far_field_faces,
        inlet_faces=inlet_faces,
        interior_faces=interior_faces,
        internal_faces=internal_faces,
        outlet_faces=outlet_faces,
        overset_faces=overset_faces,
        periodic_faces=periodic_faces,
        rans_les_interface_faces=rans_les_interface_faces,
        symmetry_faces=symmetry_faces,
        axis_faces=axis_faces,
        free_surface_faces=free_surface_faces,
        traction_faces=traction_faces,
        wall_faces=wall_faces,
        interface_faces=interface_faces,
        surface=surface_4,
        skip_label=skip_label,
        automatic_skip=automatic_skip,
        reset_colors=reset_colors,
        list_colors=list_colors,
    )
    return_type = 'object'

class ambient_color(RealList):
    """
    The ambient light color for the scene.
    """
    _version = '241'
    fluent_name = 'ambient-color'
    _python_name = 'ambient_color'
    return_type = 'object'

class headlight_setting(String, AllowedValuesMixin):
    """
    'headlight_setting' child.
    """
    _version = '241'
    fluent_name = 'headlight-setting'
    _python_name = 'headlight_setting'
    return_type = 'object'

class lights_on(Boolean):
    """
    Turn all active lighting on/off.
    """
    _version = '241'
    fluent_name = 'lights-on?'
    _python_name = 'lights_on'
    return_type = 'object'

class lighting_interpolation(String, AllowedValuesMixin):
    """
    Lighting interpolation method.
    """
    _version = '241'
    fluent_name = 'lighting-interpolation'
    _python_name = 'lighting_interpolation'
    return_type = 'object'

class on(Boolean):
    """
    Turn the light on/off.
    """
    _version = '241'
    fluent_name = 'on?'
    _python_name = 'on'
    return_type = 'object'

class rgb(RealList):
    """
    Color (RGB components) of the light.
    """
    _version = '241'
    fluent_name = 'rgb'
    _python_name = 'rgb'
    return_type = 'object'

class direction_3(RealList):
    """
    Direction of the light.
    """
    _version = '241'
    fluent_name = 'direction'
    _python_name = 'direction'
    return_type = 'object'

class set_direction_from_view_vector(Command):
    """
    'set_direction_from_view_vector' command.
    """
    _version = '241'
    fluent_name = 'set-direction-from-view-vector'
    _python_name = 'set_direction_from_view_vector'
    return_type = 'object'

class lights_child(Group):
    """
    'child_object_type' of lights.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'lights_child'
    child_names = ['on', 'rgb', 'direction']
    command_names = ['set_direction_from_view_vector']
    _child_classes = dict(
        on=on,
        rgb=rgb,
        direction=direction_3,
        set_direction_from_view_vector=set_direction_from_view_vector,
    )
    return_type = 'object'

class lights(ListObject[lights_child]):
    """
    'lights' child.
    """
    _version = '241'
    fluent_name = 'lights'
    _python_name = 'lights'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = lights_child
    return_type = 'object'

class lighting(Group):
    """
    'lighting' child.
    """
    _version = '241'
    fluent_name = 'lighting'
    _python_name = 'lighting'
    child_names = ['ambient_color', 'headlight_setting', 'lights_on', 'lighting_interpolation', 'lights']
    _child_classes = dict(
        ambient_color=ambient_color,
        headlight_setting=headlight_setting,
        lights_on=lights_on,
        lighting_interpolation=lighting_interpolation,
        lights=lights,
    )
    return_type = 'object'

class raytracer_image(Boolean):
    """
    Enable advanced raytracing for hardcopy and preview.
    """
    _version = '241'
    fluent_name = 'raytracer-image?'
    _python_name = 'raytracer_image'
    return_type = 'object'

class color_mode(String, AllowedValuesMixin):
    """
    'color_mode' child.
    """
    _version = '241'
    fluent_name = 'color-mode'
    _python_name = 'color_mode'
    return_type = 'object'

class hardcopy_format(String, AllowedValuesMixin):
    """
    Hardcopy file format.
    """
    _version = '241'
    fluent_name = 'hardcopy-format'
    _python_name = 'hardcopy_format'
    return_type = 'object'

class hardcopy_options(String):
    """
    'hardcopy_options' child.
    """
    _version = '241'
    fluent_name = 'hardcopy-options'
    _python_name = 'hardcopy_options'
    return_type = 'object'

class window_dump_cmd(String):
    """
    'window_dump_cmd' child.
    """
    _version = '241'
    fluent_name = 'window-dump-cmd'
    _python_name = 'window_dump_cmd'
    return_type = 'object'

class post_format(String, AllowedValuesMixin):
    """
    Produce PostScript output for hardcopies.
    """
    _version = '241'
    fluent_name = 'post-format'
    _python_name = 'post_format'
    return_type = 'object'

class current_driver(Command):
    """
    'current_driver' command.
    """
    _version = '241'
    fluent_name = 'current-driver'
    _python_name = 'current_driver'
    return_type = 'object'

class driver_options(Group):
    """
    'driver_options' child.
    """
    _version = '241'
    fluent_name = 'driver-options'
    _python_name = 'driver_options'
    child_names = ['hardcopy_format', 'hardcopy_options', 'window_dump_cmd', 'post_format']
    command_names = ['current_driver']
    _child_classes = dict(
        hardcopy_format=hardcopy_format,
        hardcopy_options=hardcopy_options,
        window_dump_cmd=window_dump_cmd,
        post_format=post_format,
        current_driver=current_driver,
    )
    return_type = 'object'

class invert_background(Boolean):
    """
    'invert_background' child.
    """
    _version = '241'
    fluent_name = 'invert-background?'
    _python_name = 'invert_background'
    return_type = 'object'

class landscape(Boolean):
    """
    'landscape' child.
    """
    _version = '241'
    fluent_name = 'landscape?'
    _python_name = 'landscape'
    return_type = 'object'

class x_resolution(Integer):
    """
    'x_resolution' child.
    """
    _version = '241'
    fluent_name = 'x-resolution'
    _python_name = 'x_resolution'
    return_type = 'object'

class y_resolution(Integer):
    """
    'y_resolution' child.
    """
    _version = '241'
    fluent_name = 'y-resolution'
    _python_name = 'y_resolution'
    return_type = 'object'

class dpi(Integer):
    """
    'dpi' child.
    """
    _version = '241'
    fluent_name = 'dpi'
    _python_name = 'dpi'
    return_type = 'object'

class use_window_resolution(Boolean):
    """
    Use the currently active window's resolution for hardcopy (ignores the x-resolution and y-resolution in this case).
    """
    _version = '241'
    fluent_name = 'use-window-resolution?'
    _python_name = 'use_window_resolution'
    return_type = 'object'

class standard_resolution(String, AllowedValuesMixin):
    """
    From pre-defined resolution list.
    """
    _version = '241'
    fluent_name = 'standard-resolution'
    _python_name = 'standard_resolution'
    return_type = 'object'

class jpeg_hardcopy_quality(Integer):
    """
    0  : Saves lowest quality jpeg image, but with the least file size.
    100: Saves highest quality jpeg image, but with the maximum file size.
    """
    _version = '241'
    fluent_name = 'jpeg-hardcopy-quality'
    _python_name = 'jpeg_hardcopy_quality'
    return_type = 'object'

class preview(Command):
    """
    Display a preview image of a hardcopy.
    """
    _version = '241'
    fluent_name = 'preview'
    _python_name = 'preview'
    return_type = 'object'

class save_picture(Command):
    """
    'save_picture' command.
    """
    _version = '241'
    fluent_name = 'save-picture'
    _python_name = 'save_picture'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class list_color_mode(Command):
    """
    'list_color_mode' command.
    """
    _version = '241'
    fluent_name = 'list-color-mode'
    _python_name = 'list_color_mode'
    return_type = 'object'

class picture(Group):
    """
    The hardcopy/save-picture options object.
    """
    _version = '241'
    fluent_name = 'picture'
    _python_name = 'picture'
    child_names = ['raytracer_image', 'color_mode', 'driver_options', 'invert_background', 'landscape', 'x_resolution', 'y_resolution', 'dpi', 'use_window_resolution', 'standard_resolution', 'jpeg_hardcopy_quality']
    command_names = ['preview', 'save_picture', 'list_color_mode']
    _child_classes = dict(
        raytracer_image=raytracer_image,
        color_mode=color_mode,
        driver_options=driver_options,
        invert_background=invert_background,
        landscape=landscape,
        x_resolution=x_resolution,
        y_resolution=y_resolution,
        dpi=dpi,
        use_window_resolution=use_window_resolution,
        standard_resolution=standard_resolution,
        jpeg_hardcopy_quality=jpeg_hardcopy_quality,
        preview=preview,
        save_picture=save_picture,
        list_color_mode=list_color_mode,
    )
    return_type = 'object'

class right(Real):
    """
    'right' child.
    """
    _version = '241'
    fluent_name = 'right'
    _python_name = 'right'
    return_type = 'object'

class up(Real):
    """
    'up' child.
    """
    _version = '241'
    fluent_name = 'up'
    _python_name = 'up'
    return_type = 'object'

class in_(Real):
    """
    'in' child.
    """
    _version = '241'
    fluent_name = 'in'
    _python_name = 'in_'
    return_type = 'object'

class dolly(Command):
    """
    Adjust the camera position and target.
    
    Parameters
    ----------
        right : real
            'right' child.
        up : real
            'up' child.
        in_ : real
            'in' child.
    """
    _version = '241'
    fluent_name = 'dolly'
    _python_name = 'dolly'
    argument_names = ['right', 'up', 'in_']
    _child_classes = dict(
        right=right,
        up=up,
        in_=in_,
    )
    return_type = 'object'

class height(Real):
    """
    'height' child.
    """
    _version = '241'
    fluent_name = 'height'
    _python_name = 'height'
    return_type = 'object'

class field_2(Command):
    """
    Set the field of view (width and height).
    
    Parameters
    ----------
        width : real
            'width' child.
        height : real
            'height' child.
    """
    _version = '241'
    fluent_name = 'field'
    _python_name = 'field'
    argument_names = ['width', 'height']
    _child_classes = dict(
        width=width,
        height=height,
    )
    return_type = 'object'

class orbit(Command):
    """
    Adjust the camera position without modifying the target.
    
    Parameters
    ----------
        right : real
            'right' child.
        up : real
            'up' child.
    """
    _version = '241'
    fluent_name = 'orbit'
    _python_name = 'orbit'
    argument_names = ['right', 'up']
    _child_classes = dict(
        right=right,
        up=up,
    )
    return_type = 'object'

class pan(Command):
    """
    Adjust the camera position without modifying the position.
    
    Parameters
    ----------
        right : real
            'right' child.
        up : real
            'up' child.
    """
    _version = '241'
    fluent_name = 'pan'
    _python_name = 'pan'
    argument_names = ['right', 'up']
    _child_classes = dict(
        right=right,
        up=up,
    )
    return_type = 'object'

class xyz(RealList):
    """
    'xyz' child.
    """
    _version = '241'
    fluent_name = 'xyz'
    _python_name = 'xyz'
    return_type = 'object'

class position_1(Command):
    """
    Set the camera position.
    
    Parameters
    ----------
        xyz : List
            'xyz' child.
    """
    _version = '241'
    fluent_name = 'position'
    _python_name = 'position'
    argument_names = ['xyz']
    _child_classes = dict(
        xyz=xyz,
    )
    return_type = 'object'

class projection(Command):
    """
    Set the camera projection.
    
    Parameters
    ----------
        type : str
            'type' child.
    """
    _version = '241'
    fluent_name = 'projection'
    _python_name = 'projection'
    argument_names = ['type']
    _child_classes = dict(
        type=type_2,
    )
    return_type = 'object'

class counter_clockwise(Real):
    """
    'counter_clockwise' child.
    """
    _version = '241'
    fluent_name = 'counter-clockwise'
    _python_name = 'counter_clockwise'
    return_type = 'object'

class roll(Command):
    """
    Adjust the camera up-vector.
    
    Parameters
    ----------
        counter_clockwise : real
            'counter_clockwise' child.
    """
    _version = '241'
    fluent_name = 'roll'
    _python_name = 'roll'
    argument_names = ['counter_clockwise']
    _child_classes = dict(
        counter_clockwise=counter_clockwise,
    )
    return_type = 'object'

class target_1(Command):
    """
    Set the point to be the center of the camera view.
    
    Parameters
    ----------
        xyz : List
            'xyz' child.
    """
    _version = '241'
    fluent_name = 'target'
    _python_name = 'target'
    argument_names = ['xyz']
    _child_classes = dict(
        xyz=xyz,
    )
    return_type = 'object'

class up_vector(Command):
    """
    Set the camera up-vector.
    
    Parameters
    ----------
        xyz : List
            'xyz' child.
    """
    _version = '241'
    fluent_name = 'up-vector'
    _python_name = 'up_vector'
    argument_names = ['xyz']
    _child_classes = dict(
        xyz=xyz,
    )
    return_type = 'object'

class factor(Real):
    """
    'factor' child.
    """
    _version = '241'
    fluent_name = 'factor'
    _python_name = 'factor'
    return_type = 'object'

class zoom(Command):
    """
    Adjust the camera field of view.
    
    Parameters
    ----------
        factor : real
            'factor' child.
    """
    _version = '241'
    fluent_name = 'zoom'
    _python_name = 'zoom'
    argument_names = ['factor']
    _child_classes = dict(
        factor=factor,
    )
    return_type = 'object'

class camera(Group):
    """
    'camera' child.
    """
    _version = '241'
    fluent_name = 'camera'
    _python_name = 'camera'
    command_names = ['dolly', 'field', 'orbit', 'pan', 'position', 'projection', 'roll', 'target', 'up_vector', 'zoom']
    _child_classes = dict(
        dolly=dolly,
        field=field_2,
        orbit=orbit,
        pan=pan,
        position=position_1,
        projection=projection,
        roll=roll,
        target=target_1,
        up_vector=up_vector,
        zoom=zoom,
    )
    return_type = 'object'

class list_3(Command):
    """
    'list' command.
    """
    _version = '241'
    fluent_name = 'list'
    _python_name = 'list'
    return_type = 'object'

class state_name(String, AllowedValuesMixin):
    """
    'state_name' child.
    """
    _version = '241'
    fluent_name = 'state-name'
    _python_name = 'state_name'
    return_type = 'object'

class use_active(Command):
    """
    'use_active' command.
    """
    _version = '241'
    fluent_name = 'use-active'
    _python_name = 'use_active'
    argument_names = ['state_name']
    _child_classes = dict(
        state_name=state_name,
    )
    return_type = 'object'

class restore_state(Command):
    """
    Apply a display state to the active window.
    
    Parameters
    ----------
        state_name : str
            'state_name' child.
    """
    _version = '241'
    fluent_name = 'restore-state'
    _python_name = 'restore_state'
    argument_names = ['state_name']
    _child_classes = dict(
        state_name=state_name,
    )
    return_type = 'object'

class copy_5(Command):
    """
    Create a new display state with settings copied from an existing display state.
    
    Parameters
    ----------
        state_name : str
            'state_name' child.
    """
    _version = '241'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['state_name']
    _child_classes = dict(
        state_name=state_name,
    )
    return_type = 'object'

class read_3(Command):
    """
    Read display states from a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'read'
    _python_name = 'read'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class state_name_1(StringList, AllowedValuesMixin):
    """
    'state_name' child.
    """
    _version = '241'
    fluent_name = 'state-name'
    _python_name = 'state_name'
    return_type = 'object'

class write_1(Command):
    """
    Write display states to a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        state_name : List
            'state_name' child.
    """
    _version = '241'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['file_name', 'state_name']
    _child_classes = dict(
        file_name=file_name_1,
        state_name=state_name_1,
    )
    return_type = 'object'

class front_faces_transparent(String, AllowedValuesMixin):
    """
    'front_faces_transparent' child.
    """
    _version = '241'
    fluent_name = 'front-faces-transparent'
    _python_name = 'front_faces_transparent'
    return_type = 'object'

class projection_1(String, AllowedValuesMixin):
    """
    'projection' child.
    """
    _version = '241'
    fluent_name = 'projection'
    _python_name = 'projection'
    return_type = 'object'

class axes_2(String, AllowedValuesMixin):
    """
    'axes' child.
    """
    _version = '241'
    fluent_name = 'axes'
    _python_name = 'axes'
    return_type = 'object'

class ruler(String, AllowedValuesMixin):
    """
    'ruler' child.
    """
    _version = '241'
    fluent_name = 'ruler'
    _python_name = 'ruler'
    return_type = 'object'

class boundary_marker(String, AllowedValuesMixin):
    """
    'boundary_marker' child.
    """
    _version = '241'
    fluent_name = 'boundary-marker'
    _python_name = 'boundary_marker'
    return_type = 'object'

class anti_aliasing(String, AllowedValuesMixin):
    """
    'anti_aliasing' child.
    """
    _version = '241'
    fluent_name = 'anti-aliasing'
    _python_name = 'anti_aliasing'
    return_type = 'object'

class reflections(String, AllowedValuesMixin):
    """
    'reflections' child.
    """
    _version = '241'
    fluent_name = 'reflections'
    _python_name = 'reflections'
    return_type = 'object'

class static_shadows(String, AllowedValuesMixin):
    """
    'static_shadows' child.
    """
    _version = '241'
    fluent_name = 'static-shadows'
    _python_name = 'static_shadows'
    return_type = 'object'

class dynamic_shadows(String, AllowedValuesMixin):
    """
    'dynamic_shadows' child.
    """
    _version = '241'
    fluent_name = 'dynamic-shadows'
    _python_name = 'dynamic_shadows'
    return_type = 'object'

class grid_plane(String, AllowedValuesMixin):
    """
    'grid_plane' child.
    """
    _version = '241'
    fluent_name = 'grid-plane'
    _python_name = 'grid_plane'
    return_type = 'object'

class headlights(String, AllowedValuesMixin):
    """
    'headlights' child.
    """
    _version = '241'
    fluent_name = 'headlights'
    _python_name = 'headlights'
    return_type = 'object'

class lighting_1(String, AllowedValuesMixin):
    """
    'lighting' child.
    """
    _version = '241'
    fluent_name = 'lighting'
    _python_name = 'lighting'
    return_type = 'object'

class view_name(String, AllowedValuesMixin):
    """
    'view_name' child.
    """
    _version = '241'
    fluent_name = 'view-name'
    _python_name = 'view_name'
    return_type = 'object'

class display_states_child(Group):
    """
    'child_object_type' of display_states.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'display_states_child'
    child_names = ['name', 'front_faces_transparent', 'projection', 'axes', 'ruler', 'title', 'boundary_marker', 'anti_aliasing', 'reflections', 'static_shadows', 'dynamic_shadows', 'grid_plane', 'headlights', 'lighting', 'view_name']
    _child_classes = dict(
        name=name,
        front_faces_transparent=front_faces_transparent,
        projection=projection_1,
        axes=axes_2,
        ruler=ruler,
        title=title,
        boundary_marker=boundary_marker,
        anti_aliasing=anti_aliasing,
        reflections=reflections,
        static_shadows=static_shadows,
        dynamic_shadows=dynamic_shadows,
        grid_plane=grid_plane,
        headlights=headlights,
        lighting=lighting_1,
        view_name=view_name,
    )
    return_type = 'object'

class display_states(NamedObject[display_states_child], CreatableNamedObjectMixinOld[display_states_child]):
    """
    'display_states' child.
    """
    _version = '241'
    fluent_name = 'display-states'
    _python_name = 'display_states'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'use_active', 'restore_state', 'copy', 'read', 'write']
    _child_classes = dict(
        delete=delete_1,
        list=list_3,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        use_active=use_active,
        restore_state=restore_state,
        copy=copy_5,
        read=read_3,
        write=write_1,
    )
    child_object_type = display_states_child
    return_type = 'object'

class animation_option(String, AllowedValuesMixin):
    """
    Using Wireframe / All option during animation.
    """
    _version = '241'
    fluent_name = 'animation-option'
    _python_name = 'animation_option'
    return_type = 'object'

class auto_spin(Boolean):
    """
    Enable/disable mouse view rotations to continue to spin the display after the button is released.
    """
    _version = '241'
    fluent_name = 'auto-spin?'
    _python_name = 'auto_spin'
    return_type = 'object'

class color_map_alignment(String, AllowedValuesMixin):
    """
    The color bar alignment.
    """
    _version = '241'
    fluent_name = 'color-map-alignment'
    _python_name = 'color_map_alignment'
    return_type = 'object'

class double_buffering(Boolean):
    """
    Enable/disable double-buffering.
    """
    _version = '241'
    fluent_name = 'double-buffering?'
    _python_name = 'double_buffering'
    return_type = 'object'

class face_displacement(Real):
    """
    Face displacement value in Z-buffer units along the Camera Z-axis.
    """
    _version = '241'
    fluent_name = 'face-displacement'
    _python_name = 'face_displacement'
    return_type = 'object'

class hidden_surface_method(String, AllowedValuesMixin):
    """
    The method to perform hidden line and hidden surface rendering.
    """
    _version = '241'
    fluent_name = 'hidden-surface-method'
    _python_name = 'hidden_surface_method'
    return_type = 'object'

class hidden_surfaces(Boolean):
    """
    Enable/disable hidden surface removal.
    """
    _version = '241'
    fluent_name = 'hidden-surfaces?'
    _python_name = 'hidden_surfaces'
    return_type = 'object'

class front_faces_transparent_1(Boolean):
    """
    Make the front faces transparent.
    """
    _version = '241'
    fluent_name = 'front-faces-transparent?'
    _python_name = 'front_faces_transparent'
    return_type = 'object'

class show_colormap(Boolean):
    """
    Enable/Disable colormap.
    """
    _version = '241'
    fluent_name = 'show-colormap?'
    _python_name = 'show_colormap'
    return_type = 'object'

class device_info(Command):
    """
    List information for the graphics device.
    """
    _version = '241'
    fluent_name = 'device-info'
    _python_name = 'device_info'
    return_type = 'object'

class driver_name(String, AllowedValuesMixin):
    """
    'driver_name' child.
    """
    _version = '241'
    fluent_name = 'driver-name'
    _python_name = 'driver_name'
    return_type = 'object'

class driver(Command):
    """
    Change the current graphics driver.
    
    Parameters
    ----------
        driver_name : str
            'driver_name' child.
    """
    _version = '241'
    fluent_name = 'driver'
    _python_name = 'driver'
    argument_names = ['driver_name']
    _child_classes = dict(
        driver_name=driver_name,
    )
    return_type = 'object'

class set_rendering_options(Command):
    """
    Set the rendering options.
    """
    _version = '241'
    fluent_name = 'set-rendering-options'
    _python_name = 'set_rendering_options'
    return_type = 'object'

class rendering_options(Group):
    """
    'rendering_options' child.
    """
    _version = '241'
    fluent_name = 'rendering-options'
    _python_name = 'rendering_options'
    child_names = ['animation_option', 'auto_spin', 'color_map_alignment', 'double_buffering', 'face_displacement', 'hidden_surface_method', 'hidden_surfaces', 'front_faces_transparent', 'show_colormap']
    command_names = ['device_info', 'driver', 'set_rendering_options']
    _child_classes = dict(
        animation_option=animation_option,
        auto_spin=auto_spin,
        color_map_alignment=color_map_alignment,
        double_buffering=double_buffering,
        face_displacement=face_displacement,
        hidden_surface_method=hidden_surface_method,
        hidden_surfaces=hidden_surfaces,
        front_faces_transparent=front_faces_transparent_1,
        show_colormap=show_colormap,
        device_info=device_info,
        driver=driver,
        set_rendering_options=set_rendering_options,
    )
    return_type = 'object'

class auto_scale_3(Command):
    """
    'auto_scale' command.
    """
    _version = '241'
    fluent_name = 'auto-scale'
    _python_name = 'auto_scale'
    return_type = 'object'

class reset_to_default_view(Command):
    """
    Reset view to front and center.
    """
    _version = '241'
    fluent_name = 'reset-to-default-view'
    _python_name = 'reset_to_default_view'
    return_type = 'object'

class delete_view(Command):
    """
    Remove a view from the list.
    
    Parameters
    ----------
        view_name : str
            'view_name' child.
    """
    _version = '241'
    fluent_name = 'delete-view'
    _python_name = 'delete_view'
    argument_names = ['view_name']
    _child_classes = dict(
        view_name=view_name,
    )
    return_type = 'object'

class last_view(Command):
    """
    Return to the camera position before the last manipulation.
    """
    _version = '241'
    fluent_name = 'last-view'
    _python_name = 'last_view'
    return_type = 'object'

class next_view(Command):
    """
    Return to the camera position after the current position in the stack.
    """
    _version = '241'
    fluent_name = 'next-view'
    _python_name = 'next_view'
    return_type = 'object'

class list_views(Command):
    """
    List predefined and saved views.
    """
    _version = '241'
    fluent_name = 'list-views'
    _python_name = 'list_views'
    return_type = 'object'

class restore_view(Command):
    """
    Use a saved view.
    
    Parameters
    ----------
        view_name : str
            'view_name' child.
    """
    _version = '241'
    fluent_name = 'restore-view'
    _python_name = 'restore_view'
    argument_names = ['view_name']
    _child_classes = dict(
        view_name=view_name,
    )
    return_type = 'object'

class read_views(Command):
    """
    Read views from a view file.
    
    Parameters
    ----------
        filename : str
            'filename' child.
    """
    _version = '241'
    fluent_name = 'read-views'
    _python_name = 'read_views'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_1,
    )
    return_type = 'object'

class view_name_1(String):
    """
    'view_name' child.
    """
    _version = '241'
    fluent_name = 'view-name'
    _python_name = 'view_name'
    return_type = 'object'

class save_view(Command):
    """
    Save the current view to the view list.
    
    Parameters
    ----------
        view_name : str
            'view_name' child.
    """
    _version = '241'
    fluent_name = 'save-view'
    _python_name = 'save_view'
    argument_names = ['view_name']
    _child_classes = dict(
        view_name=view_name_1,
    )
    return_type = 'object'

class view_list(StringList, AllowedValuesMixin):
    """
    'view_list' child.
    """
    _version = '241'
    fluent_name = 'view-list'
    _python_name = 'view_list'
    return_type = 'object'

class write_views(Command):
    """
    Write selected views to a view file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        view_list : List
            'view_list' child.
    """
    _version = '241'
    fluent_name = 'write-views'
    _python_name = 'write_views'
    argument_names = ['file_name', 'view_list']
    _child_classes = dict(
        file_name=file_name_1,
        view_list=view_list,
    )
    return_type = 'object'

class views(Group):
    """
    'views' child.
    """
    _version = '241'
    fluent_name = 'views'
    _python_name = 'views'
    child_names = ['camera', 'display_states', 'rendering_options']
    command_names = ['auto_scale', 'reset_to_default_view', 'delete_view', 'last_view', 'next_view', 'list_views', 'restore_view', 'read_views', 'save_view', 'write_views']
    _child_classes = dict(
        camera=camera,
        display_states=display_states,
        rendering_options=rendering_options,
        auto_scale=auto_scale_3,
        reset_to_default_view=reset_to_default_view,
        delete_view=delete_view,
        last_view=last_view,
        next_view=next_view,
        list_views=list_views,
        restore_view=restore_view,
        read_views=read_views,
        save_view=save_view,
        write_views=write_views,
    )
    return_type = 'object'

class border(Boolean):
    """
    Enable/disable drawing of a border around the axes window.
    """
    _version = '241'
    fluent_name = 'border?'
    _python_name = 'border'
    return_type = 'object'

class bottom(Real):
    """
    The bottom boundary of the axes window.
    """
    _version = '241'
    fluent_name = 'bottom'
    _python_name = 'bottom'
    return_type = 'object'

class clear_1(Boolean):
    """
    The transparency of the axes window.
    """
    _version = '241'
    fluent_name = 'clear?'
    _python_name = 'clear'
    return_type = 'object'

class left(Real):
    """
    The left boundary of the axes window.
    """
    _version = '241'
    fluent_name = 'left'
    _python_name = 'left'
    return_type = 'object'

class right_1(Real):
    """
    The right boundary of the axes window.
    """
    _version = '241'
    fluent_name = 'right'
    _python_name = 'right'
    return_type = 'object'

class top(Real):
    """
    The top boundary of the axes window.
    """
    _version = '241'
    fluent_name = 'top'
    _python_name = 'top'
    return_type = 'object'

class visible_1(Boolean):
    """
    Enable/disable axes visibility.
    """
    _version = '241'
    fluent_name = 'visible?'
    _python_name = 'visible'
    return_type = 'object'

class axes_3(Group):
    """
    The axes window options object.
    """
    _version = '241'
    fluent_name = 'axes'
    _python_name = 'axes'
    child_names = ['border', 'bottom', 'clear', 'left', 'right', 'top', 'visible']
    _child_classes = dict(
        border=border,
        bottom=bottom,
        clear=clear_1,
        left=left,
        right=right_1,
        top=top,
        visible=visible_1,
    )
    return_type = 'object'

class border_1(Boolean):
    """
    Enable/disable drawing of borders around the main viewing window.
    """
    _version = '241'
    fluent_name = 'border?'
    _python_name = 'border'
    return_type = 'object'

class bottom_1(Real):
    """
    The bottom boundary of the main viewing window.
    """
    _version = '241'
    fluent_name = 'bottom'
    _python_name = 'bottom'
    return_type = 'object'

class left_1(Real):
    """
    The left boundary of the main viewing window.
    """
    _version = '241'
    fluent_name = 'left'
    _python_name = 'left'
    return_type = 'object'

class right_2(Real):
    """
    The right boundary of the main viewing window.
    """
    _version = '241'
    fluent_name = 'right'
    _python_name = 'right'
    return_type = 'object'

class top_1(Real):
    """
    The top boundary of the main viewing window.
    """
    _version = '241'
    fluent_name = 'top'
    _python_name = 'top'
    return_type = 'object'

class visible_2(Boolean):
    """
    Enable/disable visibility of the main viewing window.
    """
    _version = '241'
    fluent_name = 'visible?'
    _python_name = 'visible'
    return_type = 'object'

class main(Group):
    """
    The main view window options object.
    """
    _version = '241'
    fluent_name = 'main'
    _python_name = 'main'
    child_names = ['border', 'bottom', 'left', 'right', 'top', 'visible']
    _child_classes = dict(
        border=border_1,
        bottom=bottom_1,
        left=left_1,
        right=right_2,
        top=top_1,
        visible=visible_2,
    )
    return_type = 'object'

class border_2(Boolean):
    """
    Enable/disable drawing of a border around the color scale window.
    """
    _version = '241'
    fluent_name = 'border?'
    _python_name = 'border'
    return_type = 'object'

class bottom_2(Real):
    """
    The bottom boundary of the color scale window.
    """
    _version = '241'
    fluent_name = 'bottom'
    _python_name = 'bottom'
    return_type = 'object'

class clear_2(Boolean):
    """
    The transparency of the scale window.
    """
    _version = '241'
    fluent_name = 'clear?'
    _python_name = 'clear'
    return_type = 'object'

class format_1(String):
    """
    The number format of the color scale window (e.g. %0.2e).
    """
    _version = '241'
    fluent_name = 'format'
    _python_name = 'format'
    return_type = 'object'

class font_size_1(Real):
    """
    The font size of the color scale window.
    """
    _version = '241'
    fluent_name = 'font-size'
    _python_name = 'font_size'
    return_type = 'object'

class left_2(Real):
    """
    The left boundary of the color scale window.
    """
    _version = '241'
    fluent_name = 'left'
    _python_name = 'left'
    return_type = 'object'

class margin(Real):
    """
    The margin of the color scale window.
    """
    _version = '241'
    fluent_name = 'margin'
    _python_name = 'margin'
    return_type = 'object'

class right_3(Real):
    """
    The right boundary of the color scale window.
    """
    _version = '241'
    fluent_name = 'right'
    _python_name = 'right'
    return_type = 'object'

class top_2(Real):
    """
    The top boundary of the color scale window.
    """
    _version = '241'
    fluent_name = 'top'
    _python_name = 'top'
    return_type = 'object'

class visible_3(Boolean):
    """
    Enable/disable visibility of the color scale window.
    """
    _version = '241'
    fluent_name = 'visible?'
    _python_name = 'visible'
    return_type = 'object'

class scale_5(Group):
    """
    The color scale window options object.
    """
    _version = '241'
    fluent_name = 'scale'
    _python_name = 'scale'
    child_names = ['border', 'bottom', 'clear', 'format', 'font_size', 'left', 'margin', 'right', 'top', 'visible']
    _child_classes = dict(
        border=border_2,
        bottom=bottom_2,
        clear=clear_2,
        format=format_1,
        font_size=font_size_1,
        left=left_2,
        margin=margin,
        right=right_3,
        top=top_2,
        visible=visible_3,
    )
    return_type = 'object'

class application(Boolean):
    """
    Show/hide the application name in the picture.
    """
    _version = '241'
    fluent_name = 'application?'
    _python_name = 'application'
    return_type = 'object'

class border_3(Boolean):
    """
    Enable/disable drawing of borders around text window.
    """
    _version = '241'
    fluent_name = 'border?'
    _python_name = 'border'
    return_type = 'object'

class bottom_3(Real):
    """
    The bottom boundary of the text window.
    """
    _version = '241'
    fluent_name = 'bottom'
    _python_name = 'bottom'
    return_type = 'object'

class clear_3(Boolean):
    """
    Enable/disable text window transparency.
    """
    _version = '241'
    fluent_name = 'clear?'
    _python_name = 'clear'
    return_type = 'object'

class company(Boolean):
    """
    Enable/disable the company name in the picture.
    """
    _version = '241'
    fluent_name = 'company?'
    _python_name = 'company'
    return_type = 'object'

class date(Boolean):
    """
    Enable/disable the date in the picture.
    """
    _version = '241'
    fluent_name = 'date?'
    _python_name = 'date'
    return_type = 'object'

class left_3(Real):
    """
    The left boundary of the text window.
    """
    _version = '241'
    fluent_name = 'left'
    _python_name = 'left'
    return_type = 'object'

class right_4(Real):
    """
    The right boundary of the text window.
    """
    _version = '241'
    fluent_name = 'right'
    _python_name = 'right'
    return_type = 'object'

class top_3(Real):
    """
    The top boundary of the text window.
    """
    _version = '241'
    fluent_name = 'top'
    _python_name = 'top'
    return_type = 'object'

class visible_4(Boolean):
    """
    Enable/disable text window transparency.
    """
    _version = '241'
    fluent_name = 'visible?'
    _python_name = 'visible'
    return_type = 'object'

class alignment(String, AllowedValuesMixin):
    """
    Align colormap with bottom/left/top/right.
    """
    _version = '241'
    fluent_name = 'alignment'
    _python_name = 'alignment'
    return_type = 'object'

class text_1(Group):
    """
    The text window options object.
    """
    _version = '241'
    fluent_name = 'text'
    _python_name = 'text'
    child_names = ['application', 'border', 'bottom', 'clear', 'company', 'date', 'left', 'right', 'top', 'visible', 'alignment']
    _child_classes = dict(
        application=application,
        border=border_3,
        bottom=bottom_3,
        clear=clear_3,
        company=company,
        date=date,
        left=left_3,
        right=right_4,
        top=top_3,
        visible=visible_4,
        alignment=alignment,
    )
    return_type = 'object'

class background_1(String):
    """
    The background color in the video picture.
    """
    _version = '241'
    fluent_name = 'background'
    _python_name = 'background'
    return_type = 'object'

class color_filter(String):
    """
    The color filter options for the picture.
    """
    _version = '241'
    fluent_name = 'color-filter'
    _python_name = 'color_filter'
    return_type = 'object'

class foreground_1(String):
    """
    The foreground color in the video picture.
    """
    _version = '241'
    fluent_name = 'foreground'
    _python_name = 'foreground'
    return_type = 'object'

class on_1(Boolean):
    """
    Enable/disable video picture settings.
    """
    _version = '241'
    fluent_name = 'on?'
    _python_name = 'on'
    return_type = 'object'

class width_1(Integer):
    """
    'width' child.
    """
    _version = '241'
    fluent_name = 'width'
    _python_name = 'width'
    return_type = 'object'

class height_1(Integer):
    """
    'height' child.
    """
    _version = '241'
    fluent_name = 'height'
    _python_name = 'height'
    return_type = 'object'

class margin_1(Integer):
    """
    'margin' child.
    """
    _version = '241'
    fluent_name = 'margin'
    _python_name = 'margin'
    return_type = 'object'

class pixel_size(Group):
    """
    'pixel_size' child.
    """
    _version = '241'
    fluent_name = 'pixel-size'
    _python_name = 'pixel_size'
    child_names = ['width', 'height', 'margin']
    _child_classes = dict(
        width=width_1,
        height=height_1,
        margin=margin_1,
    )
    return_type = 'object'

class video(Group):
    """
    The video window options object.
    """
    _version = '241'
    fluent_name = 'video'
    _python_name = 'video'
    child_names = ['background', 'color_filter', 'foreground', 'on', 'pixel_size']
    _child_classes = dict(
        background=background_1,
        color_filter=color_filter,
        foreground=foreground_1,
        on=on_1,
        pixel_size=pixel_size,
    )
    return_type = 'object'

class border_4(Boolean):
    """
    Enable/disable drawing of borders around the X-Y plotter window.
    """
    _version = '241'
    fluent_name = 'border?'
    _python_name = 'border'
    return_type = 'object'

class bottom_4(Real):
    """
    The bottom boundary of the X-Y plotter window.
    """
    _version = '241'
    fluent_name = 'bottom'
    _python_name = 'bottom'
    return_type = 'object'

class left_4(Real):
    """
    The left boundary of the X-Y plotter window.
    """
    _version = '241'
    fluent_name = 'left'
    _python_name = 'left'
    return_type = 'object'

class right_5(Real):
    """
    The right boundary of the X-Y plotter window.
    """
    _version = '241'
    fluent_name = 'right'
    _python_name = 'right'
    return_type = 'object'

class top_4(Real):
    """
    The top boundary of the X-Y plotter window.
    """
    _version = '241'
    fluent_name = 'top'
    _python_name = 'top'
    return_type = 'object'

class visible_5(Boolean):
    """
    Enable/disable X-Y plotter window visibility.
    """
    _version = '241'
    fluent_name = 'visible?'
    _python_name = 'visible'
    return_type = 'object'

class xy(Group):
    """
    The X-Y plot window options object.
    """
    _version = '241'
    fluent_name = 'xy'
    _python_name = 'xy'
    child_names = ['border', 'bottom', 'left', 'right', 'top', 'visible']
    _child_classes = dict(
        border=border_4,
        bottom=bottom_4,
        left=left_4,
        right=right_5,
        top=top_4,
        visible=visible_5,
    )
    return_type = 'object'

class logo(Boolean):
    """
    Enable/disable visibility of the logo in graphics window.
    """
    _version = '241'
    fluent_name = 'logo?'
    _python_name = 'logo'
    return_type = 'object'

class ruler_1(Boolean):
    """
    Enable/disable ruler visibility.
    """
    _version = '241'
    fluent_name = 'ruler?'
    _python_name = 'ruler'
    return_type = 'object'

class logo_color(String, AllowedValuesMixin):
    """
    Logo color to white/black.
    """
    _version = '241'
    fluent_name = 'logo-color'
    _python_name = 'logo_color'
    return_type = 'object'

class aspect_ratio(Command):
    """
    Set the aspect ratio of the active window.
    
    Parameters
    ----------
        width : real
            'width' child.
        height : real
            'height' child.
    """
    _version = '241'
    fluent_name = 'aspect-ratio'
    _python_name = 'aspect_ratio'
    argument_names = ['width', 'height']
    _child_classes = dict(
        width=width,
        height=height,
    )
    return_type = 'object'

class open_window(Command):
    """
    Open a user graphics window.
    
    Parameters
    ----------
        window_id : int
            'window_id' child.
    """
    _version = '241'
    fluent_name = 'open-window'
    _python_name = 'open_window'
    argument_names = ['window_id']
    _child_classes = dict(
        window_id=window_id,
    )
    return_type = 'object'

class set_window(Command):
    """
    Set a user graphics window to be the active window.
    
    Parameters
    ----------
        window_id : int
            'window_id' child.
    """
    _version = '241'
    fluent_name = 'set-window'
    _python_name = 'set_window'
    argument_names = ['window_id']
    _child_classes = dict(
        window_id=window_id,
    )
    return_type = 'object'

class window_name(String, AllowedValuesMixin):
    """
    'window_name' child.
    """
    _version = '241'
    fluent_name = 'window-name'
    _python_name = 'window_name'
    return_type = 'object'

class set_window_by_name(Command):
    """
    Set a reserved graphics window to be the active window by its name.
    
    Parameters
    ----------
        window_name : str
            'window_name' child.
    """
    _version = '241'
    fluent_name = 'set-window-by-name'
    _python_name = 'set_window_by_name'
    argument_names = ['window_name']
    _child_classes = dict(
        window_name=window_name,
    )
    return_type = 'object'

class close_window(Command):
    """
    Close a user graphics window.
    
    Parameters
    ----------
        window_id : int
            'window_id' child.
    """
    _version = '241'
    fluent_name = 'close-window'
    _python_name = 'close_window'
    argument_names = ['window_id']
    _child_classes = dict(
        window_id=window_id,
    )
    return_type = 'object'

class close_window_by_name(Command):
    """
    Close a reserved graphics window by its name.
    
    Parameters
    ----------
        window_name : str
            'window_name' child.
    """
    _version = '241'
    fluent_name = 'close-window-by-name'
    _python_name = 'close_window_by_name'
    argument_names = ['window_name']
    _child_classes = dict(
        window_name=window_name,
    )
    return_type = 'object'

class windows(Group):
    """
    'windows' child.
    """
    _version = '241'
    fluent_name = 'windows'
    _python_name = 'windows'
    child_names = ['axes', 'main', 'scale', 'text', 'video', 'xy', 'logo', 'ruler', 'logo_color']
    command_names = ['aspect_ratio', 'open_window', 'set_window', 'set_window_by_name', 'close_window', 'close_window_by_name']
    _child_classes = dict(
        axes=axes_3,
        main=main,
        scale=scale_5,
        text=text_1,
        video=video,
        xy=xy,
        logo=logo,
        ruler=ruler_1,
        logo_color=logo_color,
        aspect_ratio=aspect_ratio,
        open_window=open_window,
        set_window=set_window,
        set_window_by_name=set_window_by_name,
        close_window=close_window,
        close_window_by_name=close_window_by_name,
    )
    return_type = 'object'

class hide_environment_keep_effects(Boolean):
    """
    Hide 3D HDRI environment texture but keep its effect for rendering.
    """
    _version = '241'
    fluent_name = 'hide-environment-keep-effects?'
    _python_name = 'hide_environment_keep_effects'
    return_type = 'object'

class environment_image(String, AllowedValuesMixin):
    """
    Sets a 3D environment for the raytracing display.
    """
    _version = '241'
    fluent_name = 'environment-image'
    _python_name = 'environment_image'
    return_type = 'object'

class vertical(Integer):
    """
    Rotate the environment vertically by entering degrees of rotation.
    """
    _version = '241'
    fluent_name = 'vertical'
    _python_name = 'vertical'
    return_type = 'object'

class horizontal(Integer):
    """
    Rotate the environment horizontally by entering degrees of rotation.
    """
    _version = '241'
    fluent_name = 'horizontal'
    _python_name = 'horizontal'
    return_type = 'object'

class spin(Integer):
    """
    Spin/Rotate the environment along its view direction by entering degrees of rotation.
    """
    _version = '241'
    fluent_name = 'spin'
    _python_name = 'spin'
    return_type = 'object'

class env_color(IntegerList):
    """
    The environment color.
    """
    _version = '241'
    fluent_name = 'env-color'
    _python_name = 'env_color'
    return_type = 'object'

class env_intensity(Integer):
    """
    Change intensity of the environment.
    """
    _version = '241'
    fluent_name = 'env-intensity'
    _python_name = 'env_intensity'
    return_type = 'object'

class view_zoom(Integer):
    """
    View zoom factor which sets field of view.
    """
    _version = '241'
    fluent_name = 'view-zoom'
    _python_name = 'view_zoom'
    return_type = 'object'

class show_backplate(Boolean):
    """
    Controls whether a backplate color or image is shown on top of the environment.
    """
    _version = '241'
    fluent_name = 'show-backplate?'
    _python_name = 'show_backplate'
    return_type = 'object'

class backplate_color(IntegerList):
    """
    The backplate color.
    """
    _version = '241'
    fluent_name = 'backplate-color'
    _python_name = 'backplate_color'
    return_type = 'object'

class backplate_image(String, AllowedValuesMixin):
    """
    The backplate image. This will override the backplate color unless the image is set to 'none'.
    """
    _version = '241'
    fluent_name = 'backplate-image'
    _python_name = 'backplate_image'
    return_type = 'object'

class env_light_upvec(RealList):
    """
    'env_light_upvec' child.
    """
    _version = '241'
    fluent_name = 'env-light-upvec'
    _python_name = 'env_light_upvec'
    return_type = 'object'

class env_light_dirvec(RealList):
    """
    'env_light_dirvec' child.
    """
    _version = '241'
    fluent_name = 'env-light-dirvec'
    _python_name = 'env_light_dirvec'
    return_type = 'object'

class background_2(Group):
    """
    The object.
    """
    _version = '241'
    fluent_name = 'background'
    _python_name = 'background'
    child_names = ['hide_environment_keep_effects', 'environment_image', 'vertical', 'horizontal', 'spin', 'env_color', 'env_intensity', 'view_zoom', 'show_backplate', 'backplate_color', 'backplate_image', 'env_light_upvec', 'env_light_dirvec']
    _child_classes = dict(
        hide_environment_keep_effects=hide_environment_keep_effects,
        environment_image=environment_image,
        vertical=vertical,
        horizontal=horizontal,
        spin=spin,
        env_color=env_color,
        env_intensity=env_intensity,
        view_zoom=view_zoom,
        show_backplate=show_backplate,
        backplate_color=backplate_color,
        backplate_image=backplate_image,
        env_light_upvec=env_light_upvec,
        env_light_dirvec=env_light_dirvec,
    )
    return_type = 'object'

class quality_1(String, AllowedValuesMixin):
    """
    The quality for raytracing. Higher quality leads to more refining of the raytraced image, which results in more time and memory consumption.
    """
    _version = '241'
    fluent_name = 'quality'
    _python_name = 'quality'
    return_type = 'object'

class denoiser(Boolean):
    """
    Denoiser is smart AI tech, where noise from rendering to get clear image at earler. It may lead to higher memory usage.
    """
    _version = '241'
    fluent_name = 'denoiser?'
    _python_name = 'denoiser'
    return_type = 'object'

class thread_count(Integer):
    """
    Number of raytracing cpu thread cores.
    """
    _version = '241'
    fluent_name = 'thread-count'
    _python_name = 'thread_count'
    return_type = 'object'

class max_rendering_timeout(Integer):
    """
    Controls the maximum time [s] spent rendering before the image is captured.
    """
    _version = '241'
    fluent_name = 'max-rendering-timeout'
    _python_name = 'max_rendering_timeout'
    return_type = 'object'

class rendering(Group):
    """
    The object.
    """
    _version = '241'
    fluent_name = 'rendering'
    _python_name = 'rendering'
    child_names = ['quality', 'denoiser', 'thread_count', 'max_rendering_timeout']
    _child_classes = dict(
        quality=quality_1,
        denoiser=denoiser,
        thread_count=thread_count,
        max_rendering_timeout=max_rendering_timeout,
    )
    return_type = 'object'

class display_live_preview(Command):
    """
    Display the raytracing rendering for the active window.
    """
    _version = '241'
    fluent_name = 'display-live-preview'
    _python_name = 'display_live_preview'
    return_type = 'object'

class raytracing_options(Group):
    """
    'raytracing_options' child.
    """
    _version = '241'
    fluent_name = 'raytracing-options'
    _python_name = 'raytracing_options'
    child_names = ['background', 'rendering']
    command_names = ['display_live_preview']
    _child_classes = dict(
        background=background_2,
        rendering=rendering,
        display_live_preview=display_live_preview,
    )
    return_type = 'object'

class pulse_mode(String, AllowedValuesMixin):
    """
    Pulse mode.
    """
    _version = '241'
    fluent_name = 'pulse-mode'
    _python_name = 'pulse_mode'
    return_type = 'object'

class write_format(String, AllowedValuesMixin):
    """
    'write_format' child.
    """
    _version = '241'
    fluent_name = 'write-format'
    _python_name = 'write_format'
    return_type = 'object'

class write_2(Command):
    """
    'write' command.
    """
    _version = '241'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['object_name', 'write_format', 'file_name']
    _child_classes = dict(
        object_name=object_name_1,
        write_format=write_format,
        file_name=file_name,
    )
    return_type = 'object'

class pulse(Group):
    """
    Save pathline/particle tracks pulse object.
    """
    _version = '241'
    fluent_name = 'pulse'
    _python_name = 'pulse'
    child_names = ['pulse_mode']
    command_names = ['write']
    _child_classes = dict(
        pulse_mode=pulse_mode,
        write=write_2,
    )
    return_type = 'object'

class graphics(Group, _ChildNamedObjectAccessorMixin):
    """
    'graphics' child.
    """
    _version = '241'
    fluent_name = 'graphics'
    _python_name = 'graphics'
    child_names = ['mesh', 'contour', 'vector', 'pathline', 'particle_track', 'lic', 'olic', 'volumes', 'contours', 'particle_tracks', 'colors', 'lighting', 'picture', 'views', 'windows', 'raytracing_options', 'pulse']
    _child_classes = dict(
        mesh=mesh_2,
        contour=contour,
        vector=vector_1,
        pathline=pathline,
        particle_track=particle_track,
        lic=lic,
        olic=olic,
        volumes=volumes_1,
        contours=contours,
        particle_tracks=particle_tracks,
        colors=colors,
        lighting=lighting,
        picture=picture,
        views=views,
        windows=windows,
        raytracing_options=raytracing_options,
        pulse=pulse,
    )
    return_type = 'object'

class position_on_x_axis(Boolean):
    """
    'position_on_x_axis' child.
    """
    _version = '241'
    fluent_name = 'position-on-x-axis?'
    _python_name = 'position_on_x_axis'
    return_type = 'object'

class position_on_y_axis(Boolean):
    """
    'position_on_y_axis' child.
    """
    _version = '241'
    fluent_name = 'position-on-y-axis?'
    _python_name = 'position_on_y_axis'
    return_type = 'object'

class options_15(Group):
    """
    'options' child.
    """
    _version = '241'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['node_values', 'position_on_x_axis', 'position_on_y_axis']
    _child_classes = dict(
        node_values=node_values,
        position_on_x_axis=position_on_x_axis,
        position_on_y_axis=position_on_y_axis,
    )
    return_type = 'object'

class x_component_1(Integer):
    """
    'x_component' child.
    """
    _version = '241'
    fluent_name = 'x-component'
    _python_name = 'x_component'
    return_type = 'object'

class y_component_1(Integer):
    """
    'y_component' child.
    """
    _version = '241'
    fluent_name = 'y-component'
    _python_name = 'y_component'
    return_type = 'object'

class z_component_1(Integer):
    """
    'z_component' child.
    """
    _version = '241'
    fluent_name = 'z-component'
    _python_name = 'z_component'
    return_type = 'object'

class direction_vector_1(Group):
    """
    'direction_vector' child.
    """
    _version = '241'
    fluent_name = 'direction-vector'
    _python_name = 'direction_vector'
    child_names = ['x_component', 'y_component', 'z_component']
    _child_classes = dict(
        x_component=x_component_1,
        y_component=y_component_1,
        z_component=z_component_1,
    )
    return_type = 'object'

class default(Boolean):
    """
    'default' child.
    """
    _version = '241'
    fluent_name = 'default'
    _python_name = 'default'
    return_type = 'object'

class curve_length(Group):
    """
    'curve_length' child.
    """
    _version = '241'
    fluent_name = 'curve-length'
    _python_name = 'curve_length'
    child_names = ['option', 'default', 'reverse']
    _child_classes = dict(
        option=option,
        default=default,
        reverse=reverse,
    )
    return_type = 'object'

class plot_direction(Group):
    """
    'plot_direction' child.
    """
    _version = '241'
    fluent_name = 'plot-direction'
    _python_name = 'plot_direction'
    child_names = ['option', 'direction_vector', 'curve_length']
    _child_classes = dict(
        option=option,
        direction_vector=direction_vector_1,
        curve_length=curve_length,
    )
    return_type = 'object'

class y_axis_function(String, AllowedValuesMixin):
    """
    'y_axis_function' child.
    """
    _version = '241'
    fluent_name = 'y-axis-function'
    _python_name = 'y_axis_function'
    return_type = 'object'

class filename_3(Filename):
    """
    File name.
    """
    _version = '241'
    fluent_name = 'filename'
    _python_name = 'filename'
    return_type = 'object'

class write_to_file(Command):
    """
    Write data to file.
    
    Parameters
    ----------
        filename : str
            File name.
    """
    _version = '241'
    fluent_name = 'write-to-file'
    _python_name = 'write_to_file'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_3,
    )
    return_type = 'object'

class read_from_file(Command):
    """
    Read data from file.
    
    Parameters
    ----------
        filename : str
            File name.
    """
    _version = '241'
    fluent_name = 'read-from-file'
    _python_name = 'read_from_file'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_3,
    )
    return_type = 'object'

class file_data_list(StringList, AllowedValuesMixin):
    """
    File-data to delete.
    """
    _version = '241'
    fluent_name = 'file-data-list'
    _python_name = 'file_data_list'
    return_type = 'object'

class free_file_data(Command):
    """
    Free file-data.
    
    Parameters
    ----------
        file_data_list : List
            File-data to delete.
    """
    _version = '241'
    fluent_name = 'free-file-data'
    _python_name = 'free_file_data'
    argument_names = ['file_data_list']
    _child_classes = dict(
        file_data_list=file_data_list,
    )
    return_type = 'object'

class xy_plot_child(Group):
    """
    'child_object_type' of xy_plot.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'xy_plot_child'
    child_names = ['name', 'uid', 'options', 'plot_direction', 'x_axis_function', 'y_axis_function', 'surfaces_list', 'physics', 'geometry', 'surfaces', 'axes', 'curves']
    command_names = ['display', 'write_to_file', 'read_from_file', 'free_file_data']
    _child_classes = dict(
        name=name_1,
        uid=uid,
        options=options_15,
        plot_direction=plot_direction,
        x_axis_function=x_axis_function,
        y_axis_function=y_axis_function,
        surfaces_list=surfaces_list,
        physics=physics_1,
        geometry=geometry_5,
        surfaces=surfaces_4,
        axes=axes_1,
        curves=curves_1,
        display=display_3,
        write_to_file=write_to_file,
        read_from_file=read_from_file,
        free_file_data=free_file_data,
    )
    return_type = 'object'

class xy_plot(NamedObject[xy_plot_child], CreatableNamedObjectMixinOld[xy_plot_child]):
    """
    'xy_plot' child.
    """
    _version = '241'
    fluent_name = 'xy-plot'
    _python_name = 'xy_plot'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display=display_2,
        copy=copy_4,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = xy_plot_child
    return_type = 'object'

class cell_function_1(String, AllowedValuesMixin):
    """
    Field.
    """
    _version = '241'
    fluent_name = 'cell-function'
    _python_name = 'cell_function'
    return_type = 'object'

class auto_range_2(Boolean):
    """
    'auto_range' child.
    """
    _version = '241'
    fluent_name = 'auto-range?'
    _python_name = 'auto_range'
    return_type = 'object'

class num_divisions(Integer):
    """
    'num_divisions' child.
    """
    _version = '241'
    fluent_name = 'num-divisions'
    _python_name = 'num_divisions'
    return_type = 'object'

class all_zones(Boolean):
    """
    'all_zones' child.
    """
    _version = '241'
    fluent_name = 'all-zones?'
    _python_name = 'all_zones'
    return_type = 'object'

class print_4(Command):
    """
    Print a histogram of a scalar quantity.
    """
    _version = '241'
    fluent_name = 'print'
    _python_name = 'print'
    return_type = 'object'

class plot_6(Command):
    """
    Plot a histogram of a scalar quantity.
    """
    _version = '241'
    fluent_name = 'plot'
    _python_name = 'plot'
    return_type = 'object'

class write_3(Command):
    """
    Write a histogram of a scalar quantity to a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class histogram(Group):
    """
    'histogram' child.
    """
    _version = '241'
    fluent_name = 'histogram'
    _python_name = 'histogram'
    child_names = ['cell_function', 'auto_range', 'minimum', 'maximum', 'num_divisions', 'all_zones', 'zones', 'axes', 'curves']
    command_names = ['print', 'plot', 'write']
    _child_classes = dict(
        cell_function=cell_function_1,
        auto_range=auto_range_2,
        minimum=minimum_1,
        maximum=maximum_1,
        num_divisions=num_divisions,
        all_zones=all_zones,
        zones=zones_1,
        axes=axes,
        curves=curves,
        print=print_4,
        plot=plot_6,
        write=write_3,
    )
    return_type = 'object'

class object_name_2(String, AllowedValuesMixin):
    """
    Object name.
    """
    _version = '241'
    fluent_name = 'object-name'
    _python_name = 'object_name'
    return_type = 'object'

class display_5(Command):
    """
    Display cumulative-plot object.
    
    Parameters
    ----------
        object_name : str
            Object name.
    """
    _version = '241'
    fluent_name = 'display'
    _python_name = 'display'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name_2,
    )
    return_type = 'object'

class cumulative_force(Boolean):
    """
    'cumulative_force' child.
    """
    _version = '241'
    fluent_name = 'cumulative-force'
    _python_name = 'cumulative_force'
    return_type = 'object'

class cumulative_force_coefficient(Boolean):
    """
    'cumulative_force_coefficient' child.
    """
    _version = '241'
    fluent_name = 'cumulative-force-coefficient'
    _python_name = 'cumulative_force_coefficient'
    return_type = 'object'

class cumulative_moment(Boolean):
    """
    'cumulative_moment' child.
    """
    _version = '241'
    fluent_name = 'cumulative-moment'
    _python_name = 'cumulative_moment'
    return_type = 'object'

class cumulative_moment_coefficient(Boolean):
    """
    'cumulative_moment_coefficient' child.
    """
    _version = '241'
    fluent_name = 'cumulative-moment-coefficient'
    _python_name = 'cumulative_moment_coefficient'
    return_type = 'object'

class option_14(Group):
    """
    'option' child.
    """
    _version = '241'
    fluent_name = 'option'
    _python_name = 'option'
    child_names = ['option', 'cumulative_force', 'cumulative_force_coefficient', 'cumulative_moment', 'cumulative_moment_coefficient']
    _child_classes = dict(
        option=option,
        cumulative_force=cumulative_force,
        cumulative_force_coefficient=cumulative_force_coefficient,
        cumulative_moment=cumulative_moment,
        cumulative_moment_coefficient=cumulative_moment_coefficient,
    )
    return_type = 'object'

class split_direction(RealList):
    """
    'split_direction' child.
    """
    _version = '241'
    fluent_name = 'split-direction'
    _python_name = 'split_direction'
    return_type = 'object'

class number_of_divisions(Integer):
    """
    'number_of_divisions' child.
    """
    _version = '241'
    fluent_name = 'number-of-divisions'
    _python_name = 'number_of_divisions'
    return_type = 'object'

class force_direction(RealList):
    """
    'force_direction' child.
    """
    _version = '241'
    fluent_name = 'force-direction'
    _python_name = 'force_direction'
    return_type = 'object'

class moment_center(RealList):
    """
    'moment_center' child.
    """
    _version = '241'
    fluent_name = 'moment-center'
    _python_name = 'moment_center'
    return_type = 'object'

class moment_axis(RealList):
    """
    'moment_axis' child.
    """
    _version = '241'
    fluent_name = 'moment-axis'
    _python_name = 'moment_axis'
    return_type = 'object'

class distance(Boolean):
    """
    'distance' child.
    """
    _version = '241'
    fluent_name = 'distance'
    _python_name = 'distance'
    return_type = 'object'

class x_coordinates(Boolean):
    """
    'x_coordinates' child.
    """
    _version = '241'
    fluent_name = 'x-coordinates'
    _python_name = 'x_coordinates'
    return_type = 'object'

class y_coordinates(Boolean):
    """
    'y_coordinates' child.
    """
    _version = '241'
    fluent_name = 'y-coordinates'
    _python_name = 'y_coordinates'
    return_type = 'object'

class z_coordinates(Boolean):
    """
    'z_coordinates' child.
    """
    _version = '241'
    fluent_name = 'z-coordinates'
    _python_name = 'z_coordinates'
    return_type = 'object'

class x_axis_quantity(Group):
    """
    'x_axis_quantity' child.
    """
    _version = '241'
    fluent_name = 'x-axis-quantity'
    _python_name = 'x_axis_quantity'
    child_names = ['option', 'distance', 'x_coordinates', 'y_coordinates', 'z_coordinates']
    _child_classes = dict(
        option=option,
        distance=distance,
        x_coordinates=x_coordinates,
        y_coordinates=y_coordinates,
        z_coordinates=z_coordinates,
    )
    return_type = 'object'

class compute_from_stats(Boolean):
    """
    'compute_from_stats' child.
    """
    _version = '241'
    fluent_name = 'compute-from-stats'
    _python_name = 'compute_from_stats'
    return_type = 'object'

class cumulative_plot_child(Group):
    """
    'child_object_type' of cumulative_plot.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'cumulative_plot_child'
    child_names = ['option', 'zones', 'split_direction', 'number_of_divisions', 'force_direction', 'moment_center', 'moment_axis', 'x_axis_quantity', 'compute_from_stats', 'name', 'axes', 'curves']
    command_names = ['display']
    _child_classes = dict(
        option=option_14,
        zones=zones_2,
        split_direction=split_direction,
        number_of_divisions=number_of_divisions,
        force_direction=force_direction,
        moment_center=moment_center,
        moment_axis=moment_axis,
        x_axis_quantity=x_axis_quantity,
        compute_from_stats=compute_from_stats,
        name=name_1,
        axes=axes,
        curves=curves,
        display=display_3,
    )
    return_type = 'object'

class cumulative_plot(NamedObject[cumulative_plot_child], CreatableNamedObjectMixinOld[cumulative_plot_child]):
    """
    Cumulative plots.
    """
    _version = '241'
    fluent_name = 'cumulative-plot'
    _python_name = 'cumulative_plot'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display=display_5,
    )
    child_object_type = cumulative_plot_child
    return_type = 'object'

class plot_4(Group):
    """
    'plot' child.
    """
    _version = '241'
    fluent_name = 'plot'
    _python_name = 'plot'
    child_names = ['xy_plot', 'histogram', 'cumulative_plot']
    _child_classes = dict(
        xy_plot=xy_plot,
        histogram=histogram,
        cumulative_plot=cumulative_plot,
    )
    return_type = 'object'

class temporary(Boolean):
    """
    'temporary' child.
    """
    _version = '241'
    fluent_name = 'temporary?'
    _python_name = 'temporary'
    return_type = 'object'

class transparency_1(Integer):
    """
    'transparency' child.
    """
    _version = '241'
    fluent_name = 'transparency'
    _python_name = 'transparency'
    return_type = 'object'

class colormap_position(Integer):
    """
    'colormap_position' child.
    """
    _version = '241'
    fluent_name = 'colormap-position'
    _python_name = 'colormap_position'
    return_type = 'object'

class colormap_left(Real):
    """
    'colormap_left' child.
    """
    _version = '241'
    fluent_name = 'colormap-left'
    _python_name = 'colormap_left'
    return_type = 'object'

class colormap_bottom(Real):
    """
    'colormap_bottom' child.
    """
    _version = '241'
    fluent_name = 'colormap-bottom'
    _python_name = 'colormap_bottom'
    return_type = 'object'

class colormap_width(Real):
    """
    'colormap_width' child.
    """
    _version = '241'
    fluent_name = 'colormap-width'
    _python_name = 'colormap_width'
    return_type = 'object'

class colormap_height(Real):
    """
    'colormap_height' child.
    """
    _version = '241'
    fluent_name = 'colormap-height'
    _python_name = 'colormap_height'
    return_type = 'object'

class graphics_objects_child(Group):
    """
    'child_object_type' of graphics_objects.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'graphics_objects_child'
    child_names = ['name', 'transparency', 'colormap_position', 'colormap_left', 'colormap_bottom', 'colormap_width', 'colormap_height']
    _child_classes = dict(
        name=name_1,
        transparency=transparency_1,
        colormap_position=colormap_position,
        colormap_left=colormap_left,
        colormap_bottom=colormap_bottom,
        colormap_width=colormap_width,
        colormap_height=colormap_height,
    )
    return_type = 'object'

class graphics_objects(NamedObject[graphics_objects_child], CreatableNamedObjectMixinOld[graphics_objects_child]):
    """
    'graphics_objects' child.
    """
    _version = '241'
    fluent_name = 'graphics-objects'
    _python_name = 'graphics_objects'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list_3,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = graphics_objects_child
    return_type = 'object'

class scene_child(Group):
    """
    'child_object_type' of scene.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'scene_child'
    child_names = ['name', 'title', 'temporary', 'graphics_objects', 'display_state_name']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        title=title,
        temporary=temporary,
        graphics_objects=graphics_objects,
        display_state_name=display_state_name,
        display=display_3,
    )
    return_type = 'object'

class scene(NamedObject[scene_child], CreatableNamedObjectMixinOld[scene_child]):
    """
    'scene' child.
    """
    _version = '241'
    fluent_name = 'scene'
    _python_name = 'scene'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        display=display_2,
        copy=copy_4,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = scene_child
    return_type = 'object'

class start_frame(Integer):
    """
    'start_frame' child.
    """
    _version = '241'
    fluent_name = 'start-frame'
    _python_name = 'start_frame'
    return_type = 'object'

class end_frame(Integer):
    """
    'end_frame' child.
    """
    _version = '241'
    fluent_name = 'end-frame'
    _python_name = 'end_frame'
    return_type = 'object'

class increment(Integer):
    """
    'increment' child.
    """
    _version = '241'
    fluent_name = 'increment'
    _python_name = 'increment'
    return_type = 'object'

class set_custom_frames(Group):
    """
    Custom frames start, end, skip frames for video export.
    """
    _version = '241'
    fluent_name = 'set-custom-frames'
    _python_name = 'set_custom_frames'
    child_names = ['start_frame', 'end_frame', 'increment']
    _child_classes = dict(
        start_frame=start_frame,
        end_frame=end_frame,
        increment=increment,
    )
    return_type = 'object'

class fps(Integer):
    """
    The Frame Per Sec(FPS) for exporting video file.
    """
    _version = '241'
    fluent_name = 'fps'
    _python_name = 'fps'
    return_type = 'object'

class format_2(String, AllowedValuesMixin):
    """
    Format for exporting video file.
    """
    _version = '241'
    fluent_name = 'format'
    _python_name = 'format'
    return_type = 'object'

class quality_2(String, AllowedValuesMixin):
    """
    Quality for exporting video file.
    """
    _version = '241'
    fluent_name = 'quality'
    _python_name = 'quality'
    return_type = 'object'

class name_4(String):
    """
    Exporting video file name.
    """
    _version = '241'
    fluent_name = 'name'
    _python_name = 'name'
    return_type = 'object'

class use_original_resolution(Boolean):
    """
    Enable original resolution.
    """
    _version = '241'
    fluent_name = 'use-original-resolution'
    _python_name = 'use_original_resolution'
    return_type = 'object'

class scale_6(String, AllowedValuesMixin):
    """
    Scale by which video resolution will expand.
    """
    _version = '241'
    fluent_name = 'scale'
    _python_name = 'scale'
    return_type = 'object'

class set_standard_resolution(String, AllowedValuesMixin):
    """
    From pre-defined resolution list.
    """
    _version = '241'
    fluent_name = 'set-standard-resolution'
    _python_name = 'set_standard_resolution'
    return_type = 'object'

class width_2(Integer):
    """
    The width for exporting video file.
    """
    _version = '241'
    fluent_name = 'width'
    _python_name = 'width'
    return_type = 'object'

class height_2(Integer):
    """
    The height for exporting video file.
    """
    _version = '241'
    fluent_name = 'height'
    _python_name = 'height'
    return_type = 'object'

class bitrate_scale(String, AllowedValuesMixin):
    """
    Mp4 bitrate scale - Best-64000 High-32000 Medium-16000 Low-8000.
    """
    _version = '241'
    fluent_name = 'bitrate-scale'
    _python_name = 'bitrate_scale'
    return_type = 'object'

class enable_h264(Boolean):
    """
    H264 encoding flag.
    """
    _version = '241'
    fluent_name = 'enable-h264'
    _python_name = 'enable_h264'
    return_type = 'object'

class bitrate(Integer):
    """
    Video bitrate(kbits/sec) for exporting video file.
    """
    _version = '241'
    fluent_name = 'bitrate'
    _python_name = 'bitrate'
    return_type = 'object'

class compression_method(String, AllowedValuesMixin):
    """
    Compression methode for Microsoft AVI movie.
    """
    _version = '241'
    fluent_name = 'compression-method'
    _python_name = 'compression_method'
    return_type = 'object'

class keyframe(Integer):
    """
    Video keyframe rate for exporting video file.
    """
    _version = '241'
    fluent_name = 'keyframe'
    _python_name = 'keyframe'
    return_type = 'object'

class advance_quality(Group):
    """
    Advance Quality setting.
    """
    _version = '241'
    fluent_name = 'advance-quality'
    _python_name = 'advance_quality'
    child_names = ['bitrate_scale', 'enable_h264', 'bitrate', 'compression_method', 'keyframe']
    _child_classes = dict(
        bitrate_scale=bitrate_scale,
        enable_h264=enable_h264,
        bitrate=bitrate,
        compression_method=compression_method,
        keyframe=keyframe,
    )
    return_type = 'object'

class video_1(Group):
    """
    'video' child.
    """
    _version = '241'
    fluent_name = 'video'
    _python_name = 'video'
    child_names = ['fps', 'format', 'quality', 'name', 'use_original_resolution', 'scale', 'set_standard_resolution', 'width', 'height', 'advance_quality']
    _child_classes = dict(
        fps=fps,
        format=format_2,
        quality=quality_2,
        name=name_4,
        use_original_resolution=use_original_resolution,
        scale=scale_6,
        set_standard_resolution=set_standard_resolution,
        width=width_2,
        height=height_2,
        advance_quality=advance_quality,
    )
    return_type = 'object'

class current_animation(String, AllowedValuesMixin):
    """
    Animation sequence to play.
    """
    _version = '241'
    fluent_name = 'current-animation'
    _python_name = 'current_animation'
    return_type = 'object'

class animation_file_name(Filename):
    """
    'animation_file_name' child.
    """
    _version = '241'
    fluent_name = 'animation-file-name'
    _python_name = 'animation_file_name'
    return_type = 'object'

class read_animation_file(Command):
    """
    Read new animation from file or already-defined animations.
    
    Parameters
    ----------
        animation_file_name : str
            'animation_file_name' child.
    """
    _version = '241'
    fluent_name = 'read-animation-file'
    _python_name = 'read_animation_file'
    argument_names = ['animation_file_name']
    _child_classes = dict(
        animation_file_name=animation_file_name,
    )
    return_type = 'object'

class format_name(String, AllowedValuesMixin):
    """
    'format_name' child.
    """
    _version = '241'
    fluent_name = 'format-name'
    _python_name = 'format_name'
    return_type = 'object'

class write_animation(Command):
    """
    Write animation sequence to the file.
    
    Parameters
    ----------
        format_name : str
            'format_name' child.
    """
    _version = '241'
    fluent_name = 'write-animation'
    _python_name = 'write_animation'
    argument_names = ['format_name']
    _child_classes = dict(
        format_name=format_name,
    )
    return_type = 'object'

class view_1(Boolean):
    """
    Yes: "Stored View", no: "Different View".
    """
    _version = '241'
    fluent_name = 'view?'
    _python_name = 'view'
    return_type = 'object'

class stored_view(Command):
    """
    Play the 3D animation sequence using the view stored in the sequence.
    
    Parameters
    ----------
        view : bool
            Yes: "Stored View", no: "Different View".
    """
    _version = '241'
    fluent_name = 'stored-view?'
    _python_name = 'stored_view'
    argument_names = ['view']
    _child_classes = dict(
        view=view_1,
    )
    return_type = 'object'

class delete_all_1(Boolean):
    """
    Yes: "Delete all animations", no: "Delete single animation.".
    """
    _version = '241'
    fluent_name = 'delete-all'
    _python_name = 'delete_all'
    return_type = 'object'

class name_5(String, AllowedValuesMixin):
    """
    Animation to delete.
    """
    _version = '241'
    fluent_name = 'name'
    _python_name = 'name'
    return_type = 'object'

class delete_5(CommandWithPositionalArgs):
    """
    Delete animation sequence.
    
    Parameters
    ----------
        delete_all : bool
            Yes: "Delete all animations", no: "Delete single animation.".
        name : str
            Animation to delete.
    """
    _version = '241'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['delete_all', 'name']
    _child_classes = dict(
        delete_all=delete_all_1,
        name=name_5,
    )
    return_type = 'object'

class player(String, AllowedValuesMixin):
    """
    The Player Operation.
    """
    _version = '241'
    fluent_name = 'player'
    _python_name = 'player'
    return_type = 'object'

class start_frame_1(Integer):
    """
    Start Frame Number.
    """
    _version = '241'
    fluent_name = 'start-frame'
    _python_name = 'start_frame'
    return_type = 'object'

class end_frame_1(Integer):
    """
    Start Frame Number.
    """
    _version = '241'
    fluent_name = 'end-frame'
    _python_name = 'end_frame'
    return_type = 'object'

class increment_1(Integer):
    """
    Skip frame while playing.
    """
    _version = '241'
    fluent_name = 'increment'
    _python_name = 'increment'
    return_type = 'object'

class playback_mode(String, AllowedValuesMixin):
    """
    The playback mode.
    """
    _version = '241'
    fluent_name = 'playback-mode'
    _python_name = 'playback_mode'
    return_type = 'object'

class speed_1(Integer):
    """
    Animation play speed.
    """
    _version = '241'
    fluent_name = 'speed'
    _python_name = 'speed'
    return_type = 'object'

class play(Command):
    """
    Play the selected animation.
    
    Parameters
    ----------
        player : str
            The Player Operation.
        start_frame : int
            Start Frame Number.
        end_frame : int
            Start Frame Number.
        increment : int
            Skip frame while playing.
        playback_mode : str
            The playback mode.
        speed : int
            Animation play speed.
    """
    _version = '241'
    fluent_name = 'play'
    _python_name = 'play'
    argument_names = ['player', 'start_frame', 'end_frame', 'increment', 'playback_mode', 'speed']
    _child_classes = dict(
        player=player,
        start_frame=start_frame_1,
        end_frame=end_frame_1,
        increment=increment_1,
        playback_mode=playback_mode,
        speed=speed_1,
    )
    return_type = 'object'

class playback(Group):
    """
    'playback' child.
    """
    _version = '241'
    fluent_name = 'playback'
    _python_name = 'playback'
    child_names = ['set_custom_frames', 'video', 'current_animation']
    command_names = ['read_animation_file', 'write_animation', 'stored_view', 'delete', 'play']
    _child_classes = dict(
        set_custom_frames=set_custom_frames,
        video=video_1,
        current_animation=current_animation,
        read_animation_file=read_animation_file,
        write_animation=write_animation,
        stored_view=stored_view,
        delete=delete_5,
        play=play,
    )
    return_type = 'object'

class start_keyframe(Integer):
    """
    Start keyframe.
    """
    _version = '241'
    fluent_name = 'start-keyframe'
    _python_name = 'start_keyframe'
    return_type = 'object'

class end_keyframe(Integer):
    """
    End keyframe.
    """
    _version = '241'
    fluent_name = 'end-keyframe'
    _python_name = 'end_keyframe'
    return_type = 'object'

class increment_2(Integer):
    """
    Increment.
    """
    _version = '241'
    fluent_name = 'increment'
    _python_name = 'increment'
    return_type = 'object'

class set_custom_frames_1(Group):
    """
    Custom frames start, end, skip frames for video export.
    """
    _version = '241'
    fluent_name = 'set-custom-frames'
    _python_name = 'set_custom_frames'
    child_names = ['start_keyframe', 'end_keyframe', 'increment']
    _child_classes = dict(
        start_keyframe=start_keyframe,
        end_keyframe=end_keyframe,
        increment=increment_2,
    )
    return_type = 'object'

class read_animation(Command):
    """
    'read_animation' command.
    """
    _version = '241'
    fluent_name = 'read-animation'
    _python_name = 'read_animation'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class write_animation_1(Command):
    """
    Write keyframe Animation file.
    
    Parameters
    ----------
        format_name : str
            'format_name' child.
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'write-animation'
    _python_name = 'write_animation'
    argument_names = ['format_name', 'file_name']
    _child_classes = dict(
        format_name=format_name,
        file_name=file_name,
    )
    return_type = 'object'

class key(Integer):
    """
    'key' child.
    """
    _version = '241'
    fluent_name = 'key'
    _python_name = 'key'
    return_type = 'object'

class add_keyframe(Command):
    """
    Add keyframe.
    
    Parameters
    ----------
        key : int
            'key' child.
    """
    _version = '241'
    fluent_name = 'add-keyframe'
    _python_name = 'add_keyframe'
    argument_names = ['key']
    _child_classes = dict(
        key=key,
    )
    return_type = 'object'

class key_1(Integer, AllowedValuesMixin):
    """
    'key' child.
    """
    _version = '241'
    fluent_name = 'key'
    _python_name = 'key'
    return_type = 'object'

class delete_keyframe(Command):
    """
    Delete a keyframe.
    
    Parameters
    ----------
        key : int
            'key' child.
    """
    _version = '241'
    fluent_name = 'delete-keyframe'
    _python_name = 'delete_keyframe'
    argument_names = ['key']
    _child_classes = dict(
        key=key_1,
    )
    return_type = 'object'

class delete_all_keyframes(Command):
    """
    Delete all keyframes.
    """
    _version = '241'
    fluent_name = 'delete-all-keyframes'
    _python_name = 'delete_all_keyframes'
    return_type = 'object'

class play_1(Command):
    """
    Play keyframe animation.
    
    Parameters
    ----------
        start_keyframe : int
            Start keyframe.
        end_keyframe : int
            End keyframe.
        increment : int
            Increment.
    """
    _version = '241'
    fluent_name = 'play'
    _python_name = 'play'
    argument_names = ['start_keyframe', 'end_keyframe', 'increment']
    _child_classes = dict(
        start_keyframe=start_keyframe,
        end_keyframe=end_keyframe,
        increment=increment_2,
    )
    return_type = 'object'

class scene_animation(Group):
    """
    Keyframe animation option object.
    """
    _version = '241'
    fluent_name = 'scene-animation'
    _python_name = 'scene_animation'
    child_names = ['set_custom_frames']
    command_names = ['read_animation', 'write_animation', 'add_keyframe', 'delete_keyframe', 'delete_all_keyframes', 'play']
    _child_classes = dict(
        set_custom_frames=set_custom_frames_1,
        read_animation=read_animation,
        write_animation=write_animation_1,
        add_keyframe=add_keyframe,
        delete_keyframe=delete_keyframe,
        delete_all_keyframes=delete_all_keyframes,
        play=play_1,
    )
    return_type = 'object'

class animations(Group):
    """
    'animations' child.
    """
    _version = '241'
    fluent_name = 'animations'
    _python_name = 'animations'
    child_names = ['playback', 'scene_animation']
    _child_classes = dict(
        playback=playback,
        scene_animation=scene_animation,
    )
    return_type = 'object'

class list_simulation_reports(Command):
    """
    List all report names.
    """
    _version = '241'
    fluent_name = 'list-simulation-reports'
    _python_name = 'list_simulation_reports'
    return_type = 'object'

class add_histogram_to_report(Command):
    """
    Add a histogram to the current simulation report.
    """
    _version = '241'
    fluent_name = 'add-histogram-to-report'
    _python_name = 'add_histogram_to_report'
    return_type = 'object'

class report_name(String):
    """
    'report_name' child.
    """
    _version = '241'
    fluent_name = 'report-name'
    _python_name = 'report_name'
    return_type = 'object'

class generate_simulation_report(Command):
    """
    Generate a new simulation report or regenerate an existing simulation report with the provided name.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '241'
    fluent_name = 'generate-simulation-report'
    _python_name = 'generate_simulation_report'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )
    return_type = 'object'

class view_simulation_report(Command):
    """
    View a simulation report that has already been generated. In batch mode this will print the report's URL.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '241'
    fluent_name = 'view-simulation-report'
    _python_name = 'view_simulation_report'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )
    return_type = 'object'

class export_simulation_report_as_pdf(Command):
    """
    Export the provided simulation report as a PDF file.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'export-simulation-report-as-pdf'
    _python_name = 'export_simulation_report_as_pdf'
    argument_names = ['report_name', 'file_name']
    _child_classes = dict(
        report_name=report_name,
        file_name=file_name_1,
    )
    return_type = 'object'

class output_dir(Filename):
    """
    'output_dir' child.
    """
    _version = '241'
    fluent_name = 'output-dir'
    _python_name = 'output_dir'
    return_type = 'object'

class export_simulation_report_as_html(Command):
    """
    Export the provided simulation report as HTML.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
        output_dir : str
            'output_dir' child.
    """
    _version = '241'
    fluent_name = 'export-simulation-report-as-html'
    _python_name = 'export_simulation_report_as_html'
    argument_names = ['report_name', 'output_dir']
    _child_classes = dict(
        report_name=report_name,
        output_dir=output_dir,
    )
    return_type = 'object'

class export_simulation_report_as_pptx(Command):
    """
    Export the provided simulation report as a PPT file.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'export-simulation-report-as-pptx'
    _python_name = 'export_simulation_report_as_pptx'
    argument_names = ['report_name', 'file_name']
    _child_classes = dict(
        report_name=report_name,
        file_name=file_name_1,
    )
    return_type = 'object'

class write_simulation_report_names_to_file(Command):
    """
    Write the list of currently generated report names to a txt file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'write-simulation-report-names-to-file'
    _python_name = 'write_simulation_report_names_to_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class new_report_name(String):
    """
    'new_report_name' child.
    """
    _version = '241'
    fluent_name = 'new-report-name'
    _python_name = 'new_report_name'
    return_type = 'object'

class rename_simulation_report(Command):
    """
    Rename a report which has already been generated.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
        new_report_name : str
            'new_report_name' child.
    """
    _version = '241'
    fluent_name = 'rename-simulation-report'
    _python_name = 'rename_simulation_report'
    argument_names = ['report_name', 'new_report_name']
    _child_classes = dict(
        report_name=report_name,
        new_report_name=new_report_name,
    )
    return_type = 'object'

class duplicate_simulation_report(Command):
    """
    Duplicate a report and all of its settings to a new report.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '241'
    fluent_name = 'duplicate-simulation-report'
    _python_name = 'duplicate_simulation_report'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )
    return_type = 'object'

class reset_report_to_defaults(Command):
    """
    Reset all report settings to default for the provided simulation report.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '241'
    fluent_name = 'reset-report-to-defaults'
    _python_name = 'reset_report_to_defaults'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )
    return_type = 'object'

class delete_simulation_report(Command):
    """
    Delete the provided simulation report.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '241'
    fluent_name = 'delete-simulation-report'
    _python_name = 'delete_simulation_report'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )
    return_type = 'object'

class write_simulation_report_template_file(Command):
    """
    Write a JSON template file with this case's Simulation Report settings.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'write-simulation-report-template-file'
    _python_name = 'write_simulation_report_template_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class read_simulation_report_template_file(Command):
    """
    Read a JSON template file with existing Simulation Report settings.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'read-simulation-report-template-file'
    _python_name = 'read_simulation_report_template_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class simulation_reports(Group):
    """
    'simulation_reports' child.
    """
    _version = '241'
    fluent_name = 'simulation-reports'
    _python_name = 'simulation_reports'
    command_names = ['list_simulation_reports', 'add_histogram_to_report', 'generate_simulation_report', 'view_simulation_report', 'export_simulation_report_as_pdf', 'export_simulation_report_as_html', 'export_simulation_report_as_pptx', 'write_simulation_report_names_to_file', 'rename_simulation_report', 'duplicate_simulation_report', 'reset_report_to_defaults', 'delete_simulation_report', 'write_simulation_report_template_file', 'read_simulation_report_template_file']
    _child_classes = dict(
        list_simulation_reports=list_simulation_reports,
        add_histogram_to_report=add_histogram_to_report,
        generate_simulation_report=generate_simulation_report,
        view_simulation_report=view_simulation_report,
        export_simulation_report_as_pdf=export_simulation_report_as_pdf,
        export_simulation_report_as_html=export_simulation_report_as_html,
        export_simulation_report_as_pptx=export_simulation_report_as_pptx,
        write_simulation_report_names_to_file=write_simulation_report_names_to_file,
        rename_simulation_report=rename_simulation_report,
        duplicate_simulation_report=duplicate_simulation_report,
        reset_report_to_defaults=reset_report_to_defaults,
        delete_simulation_report=delete_simulation_report,
        write_simulation_report_template_file=write_simulation_report_template_file,
        read_simulation_report_template_file=read_simulation_report_template_file,
    )
    return_type = 'object'

class auto_range_3(Boolean):
    """
    Automatically compute range of sampling variable for histogram plots.
    """
    _version = '241'
    fluent_name = 'auto-range?'
    _python_name = 'auto_range'
    return_type = 'object'

class correlation(Boolean):
    """
    Compute correlation of sampling variable with other variable.
    """
    _version = '241'
    fluent_name = 'correlation?'
    _python_name = 'correlation'
    return_type = 'object'

class cumulation_curve(Boolean):
    """
    Compute a cumulative curve for sampling variable or correlation variable when correlation? was specified.
    """
    _version = '241'
    fluent_name = 'cumulation-curve?'
    _python_name = 'cumulation_curve'
    return_type = 'object'

class diameter_statistics(Boolean):
    """
    Compute Rosin Rammler parameters, Sauter and other mean diameters.
    Requires specification of diameter as sampling variable.
    """
    _version = '241'
    fluent_name = 'diameter-statistics?'
    _python_name = 'diameter_statistics'
    return_type = 'object'

class histogram_mode(Boolean):
    """
    Use bars for histogram plot or xy-style.
    """
    _version = '241'
    fluent_name = 'histogram-mode?'
    _python_name = 'histogram_mode'
    return_type = 'object'

class percentage(Boolean):
    """
    Use percentages of bins to be computed.
    """
    _version = '241'
    fluent_name = 'percentage?'
    _python_name = 'percentage'
    return_type = 'object'

class variable_cubed(Boolean):
    """
    Use the cubic of the cumulation variable during computation of the cumulative curve.
    When the particle mass was not sampled, the diameter can be used instead.
    """
    _version = '241'
    fluent_name = 'variable-cubed?'
    _python_name = 'variable_cubed'
    return_type = 'object'

class logarithmic(Boolean):
    """
    Use logarithmic scaling on the abscissa (variable axis)? -- Will not work unless all values are positive.
    """
    _version = '241'
    fluent_name = 'logarithmic?'
    _python_name = 'logarithmic'
    return_type = 'object'

class weighting(Boolean):
    """
    Use weighting with additional variable when sorting data into samples.
    """
    _version = '241'
    fluent_name = 'weighting?'
    _python_name = 'weighting'
    return_type = 'object'

class histogram_options(Group):
    """
    The settings object.
    """
    _version = '241'
    fluent_name = 'histogram-options'
    _python_name = 'histogram_options'
    child_names = ['auto_range', 'correlation', 'cumulation_curve', 'diameter_statistics', 'histogram_mode', 'percentage', 'variable_cubed', 'logarithmic', 'weighting']
    _child_classes = dict(
        auto_range=auto_range_3,
        correlation=correlation,
        cumulation_curve=cumulation_curve,
        diameter_statistics=diameter_statistics,
        histogram_mode=histogram_mode,
        percentage=percentage,
        variable_cubed=variable_cubed,
        logarithmic=logarithmic,
        weighting=weighting,
    )
    return_type = 'object'

class minimum_val(Real):
    """
    Mimimum value of x-axis variable for histogram plots.
    """
    _version = '241'
    fluent_name = 'minimum-val'
    _python_name = 'minimum_val'
    return_type = 'object'

class maximum_val(Real):
    """
    Maximum value of x-axis variable for histogram plots.
    """
    _version = '241'
    fluent_name = 'maximum-val'
    _python_name = 'maximum_val'
    return_type = 'object'

class number_of_bins(Integer):
    """
    The number of bins.
    """
    _version = '241'
    fluent_name = 'number-of-bins'
    _python_name = 'number_of_bins'
    return_type = 'object'

class histogram_parameters(Group):
    """
    The parameter object.
    """
    _version = '241'
    fluent_name = 'histogram-parameters'
    _python_name = 'histogram_parameters'
    child_names = ['minimum_val', 'maximum_val', 'number_of_bins']
    _child_classes = dict(
        minimum_val=minimum_val,
        maximum_val=maximum_val,
        number_of_bins=number_of_bins,
    )
    return_type = 'object'

class sample(String, AllowedValuesMixin):
    """
    'sample' child.
    """
    _version = '241'
    fluent_name = 'sample'
    _python_name = 'sample'
    return_type = 'object'

class variable_to_sample(String, AllowedValuesMixin):
    """
    'variable_to_sample' child.
    """
    _version = '241'
    fluent_name = 'variable-to-sample'
    _python_name = 'variable_to_sample'
    return_type = 'object'

class weighting_variable(String, AllowedValuesMixin):
    """
    'weighting_variable' child.
    """
    _version = '241'
    fluent_name = 'weighting-variable'
    _python_name = 'weighting_variable'
    return_type = 'object'

class correlation_variable(String, AllowedValuesMixin):
    """
    'correlation_variable' child.
    """
    _version = '241'
    fluent_name = 'correlation-variable'
    _python_name = 'correlation_variable'
    return_type = 'object'

class plot_sample(Command):
    """
    'plot_sample' command.
    """
    _version = '241'
    fluent_name = 'plot-sample'
    _python_name = 'plot_sample'
    argument_names = ['sample', 'variable_to_sample', 'weighting_variable', 'correlation_variable', 'file_name']
    _child_classes = dict(
        sample=sample,
        variable_to_sample=variable_to_sample,
        weighting_variable=weighting_variable,
        correlation_variable=correlation_variable,
        file_name=file_name_1,
    )
    return_type = 'object'

class write_sample(Command):
    """
    'write_sample' command.
    """
    _version = '241'
    fluent_name = 'write-sample'
    _python_name = 'write_sample'
    argument_names = ['sample', 'variable_to_sample', 'weighting_variable', 'correlation_variable', 'file_name']
    _child_classes = dict(
        sample=sample,
        variable_to_sample=variable_to_sample,
        weighting_variable=weighting_variable,
        correlation_variable=correlation_variable,
        file_name=file_name_1,
    )
    return_type = 'object'

class plot_write_sample(Group):
    """
    'plot_write_sample' child.
    """
    _version = '241'
    fluent_name = 'plot-write-sample'
    _python_name = 'plot_write_sample'
    command_names = ['plot_sample', 'write_sample']
    _child_classes = dict(
        plot_sample=plot_sample,
        write_sample=write_sample,
    )
    return_type = 'object'

class use_weighting(Boolean):
    """
    'use_weighting' child.
    """
    _version = '241'
    fluent_name = 'use-weighting?'
    _python_name = 'use_weighting'
    return_type = 'object'

class make_steady_from_unsteady_file(Boolean):
    """
    Specifies whether the unsteady sample is to be reduced into a steady-state injection file.
    """
    _version = '241'
    fluent_name = 'make-steady-from-unsteady-file?'
    _python_name = 'make_steady_from_unsteady_file'
    return_type = 'object'

class change_curr_sample(Boolean):
    """
    'change_curr_sample' child.
    """
    _version = '241'
    fluent_name = 'change-curr-sample?'
    _python_name = 'change_curr_sample'
    return_type = 'object'

class weighting_variable_1(Command):
    """
    Choose the weighting variable for the averaging in each bin in the data reduction.
    
    Parameters
    ----------
        change_curr_sample : bool
            'change_curr_sample' child.
        sample : str
            'sample' child.
    """
    _version = '241'
    fluent_name = 'weighting-variable'
    _python_name = 'weighting_variable'
    argument_names = ['change_curr_sample', 'sample']
    _child_classes = dict(
        change_curr_sample=change_curr_sample,
        sample=sample,
    )
    return_type = 'object'

class sample_var(String, AllowedValuesMixin):
    """
    'sample_var' child.
    """
    _version = '241'
    fluent_name = 'sample-var'
    _python_name = 'sample_var'
    return_type = 'object'

class reset_range(Boolean):
    """
    'reset_range' child.
    """
    _version = '241'
    fluent_name = 'reset-range?'
    _python_name = 'reset_range'
    return_type = 'object'

class reset_min_and_max(Command):
    """
    Reset the min and max values of the range to be considered for a specific variable in the data reduction.
    
    Parameters
    ----------
        sample_var : str
            'sample_var' child.
        reset_range : bool
            'reset_range' child.
    """
    _version = '241'
    fluent_name = 'reset-min-and-max'
    _python_name = 'reset_min_and_max'
    argument_names = ['sample_var', 'reset_range']
    _child_classes = dict(
        sample_var=sample_var,
        reset_range=reset_range,
    )
    return_type = 'object'

class min_val(Real):
    """
    'min_val' child.
    """
    _version = '241'
    fluent_name = 'min-val'
    _python_name = 'min_val'
    return_type = 'object'

class set_minimum(Command):
    """
    Set the minimum value of the range to be considered for a specific variable in the data reduction.
    
    Parameters
    ----------
        sample_var : str
            'sample_var' child.
        min_val : real
            'min_val' child.
    """
    _version = '241'
    fluent_name = 'set-minimum'
    _python_name = 'set_minimum'
    argument_names = ['sample_var', 'min_val']
    _child_classes = dict(
        sample_var=sample_var,
        min_val=min_val,
    )
    return_type = 'object'

class max_val(Real):
    """
    'max_val' child.
    """
    _version = '241'
    fluent_name = 'max-val'
    _python_name = 'max_val'
    return_type = 'object'

class set_maximum(Command):
    """
    'set_maximum' command.
    """
    _version = '241'
    fluent_name = 'set-maximum'
    _python_name = 'set_maximum'
    argument_names = ['sample_var', 'max_val']
    _child_classes = dict(
        sample_var=sample_var,
        max_val=max_val,
    )
    return_type = 'object'

class enable_log(Boolean):
    """
    'enable_log' child.
    """
    _version = '241'
    fluent_name = 'enable-log?'
    _python_name = 'enable_log'
    return_type = 'object'

class use_logarithmic(Command):
    """
    Switch on or off logarithmic scaling to be used for a specific variable in the data reduction.
    
    Parameters
    ----------
        sample_var : str
            'sample_var' child.
        enable_log : bool
            'enable_log' child.
    """
    _version = '241'
    fluent_name = 'use-logarithmic?'
    _python_name = 'use_logarithmic'
    argument_names = ['sample_var', 'enable_log']
    _child_classes = dict(
        sample_var=sample_var,
        enable_log=enable_log,
    )
    return_type = 'object'

class num_bins(Integer):
    """
    'num_bins' child.
    """
    _version = '241'
    fluent_name = 'num-bins'
    _python_name = 'num_bins'
    return_type = 'object'

class number_of_bins_1(Command):
    """
    Set the number of bins to be used for a specific variable in the data reduction.
    
    Parameters
    ----------
        sample_var : str
            'sample_var' child.
        num_bins : int
            'num_bins' child.
    """
    _version = '241'
    fluent_name = 'number-of-bins'
    _python_name = 'number_of_bins'
    argument_names = ['sample_var', 'num_bins']
    _child_classes = dict(
        sample_var=sample_var,
        num_bins=num_bins,
    )
    return_type = 'object'

class all_var_num_of_bins(Integer):
    """
    'all_var_num_of_bins' child.
    """
    _version = '241'
    fluent_name = 'all-var-num-of-bins'
    _python_name = 'all_var_num_of_bins'
    return_type = 'object'

class all_variables_number_of_bins(Command):
    """
    Set the number of bins to be used for ALL variables in the data reduction.
    
    Parameters
    ----------
        all_var_num_of_bins : int
            'all_var_num_of_bins' child.
    """
    _version = '241'
    fluent_name = 'all-variables-number-of-bins'
    _python_name = 'all_variables_number_of_bins'
    argument_names = ['all_var_num_of_bins']
    _child_classes = dict(
        all_var_num_of_bins=all_var_num_of_bins,
    )
    return_type = 'object'

class list_settings(Command):
    """
    List all user inputs for the sample picked for data reduction.
    """
    _version = '241'
    fluent_name = 'list-settings?'
    _python_name = 'list_settings'
    return_type = 'object'

class setup_reduction(Group):
    """
    Up the sample data reduction by specifying all relevant options and setting parameters as desired.
    """
    _version = '241'
    fluent_name = 'setup-reduction'
    _python_name = 'setup_reduction'
    child_names = ['use_weighting', 'make_steady_from_unsteady_file']
    command_names = ['weighting_variable', 'reset_min_and_max', 'set_minimum', 'set_maximum', 'use_logarithmic', 'number_of_bins', 'all_variables_number_of_bins', 'list_settings']
    _child_classes = dict(
        use_weighting=use_weighting,
        make_steady_from_unsteady_file=make_steady_from_unsteady_file,
        weighting_variable=weighting_variable_1,
        reset_min_and_max=reset_min_and_max,
        set_minimum=set_minimum,
        set_maximum=set_maximum,
        use_logarithmic=use_logarithmic,
        number_of_bins=number_of_bins_1,
        all_variables_number_of_bins=all_variables_number_of_bins,
        list_settings=list_settings,
    )
    return_type = 'object'

class pick_sample_to_reduce(Command):
    """
    Pick a sample for which to first set-up and then perform the data reduction.
    
    Parameters
    ----------
        change_curr_sample : bool
            'change_curr_sample' child.
        sample : str
            'sample' child.
    """
    _version = '241'
    fluent_name = 'pick-sample-to-reduce'
    _python_name = 'pick_sample_to_reduce'
    argument_names = ['change_curr_sample', 'sample']
    _child_classes = dict(
        change_curr_sample=change_curr_sample,
        sample=sample,
    )
    return_type = 'object'

class check_reduction_wt(Boolean):
    """
    'check_reduction_wt' child.
    """
    _version = '241'
    fluent_name = 'check-reduction-wt?'
    _python_name = 'check_reduction_wt'
    return_type = 'object'

class reduce_picked_sample(Command):
    """
    Reduce a sample after first picking it and setting up all data-reduction options and parameters.
    
    Parameters
    ----------
        check_reduction_wt : bool
            'check_reduction_wt' child.
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'reduce-picked-sample'
    _python_name = 'reduce_picked_sample'
    argument_names = ['check_reduction_wt', 'file_name']
    _child_classes = dict(
        check_reduction_wt=check_reduction_wt,
        file_name=file_name_1,
    )
    return_type = 'object'

class reduction(Group):
    """
    'reduction' child.
    """
    _version = '241'
    fluent_name = 'reduction'
    _python_name = 'reduction'
    child_names = ['setup_reduction']
    command_names = ['pick_sample_to_reduce', 'reduce_picked_sample']
    _child_classes = dict(
        setup_reduction=setup_reduction,
        pick_sample_to_reduce=pick_sample_to_reduce,
        reduce_picked_sample=reduce_picked_sample,
    )
    return_type = 'object'

class variable_2(String, AllowedValuesMixin):
    """
    'variable' child.
    """
    _version = '241'
    fluent_name = 'variable'
    _python_name = 'variable'
    return_type = 'object'

class compute_sample(Command):
    """
    Compute minimum/maximum of a sample variable.
    
    Parameters
    ----------
        sample : str
            'sample' child.
        variable : str
            'variable' child.
    """
    _version = '241'
    fluent_name = 'compute-sample'
    _python_name = 'compute_sample'
    argument_names = ['sample', 'variable']
    _child_classes = dict(
        sample=sample,
        variable=variable_2,
    )
    return_type = 'object'

class delete_sample(Command):
    """
    'delete_sample' command.
    """
    _version = '241'
    fluent_name = 'delete-sample'
    _python_name = 'delete_sample'
    argument_names = ['sample']
    _child_classes = dict(
        sample=sample,
    )
    return_type = 'object'

class list_samples(Command):
    """
    Show all samples in loaded sample list.
    """
    _version = '241'
    fluent_name = 'list-samples'
    _python_name = 'list_samples'
    return_type = 'object'

class sample_file(Filename):
    """
    The name of a sample file to be loaded.
    """
    _version = '241'
    fluent_name = 'sample-file'
    _python_name = 'sample_file'
    return_type = 'object'

class read_sample_file(Command):
    """
    Read a sample file and add it to the sample list.
    
    Parameters
    ----------
        sample_file : str
            The name of a sample file to be loaded.
    """
    _version = '241'
    fluent_name = 'read-sample-file'
    _python_name = 'read_sample_file'
    argument_names = ['sample_file']
    _child_classes = dict(
        sample_file=sample_file,
    )
    return_type = 'object'

class sample_name(String, AllowedValuesMixin):
    """
    'sample_name' child.
    """
    _version = '241'
    fluent_name = 'sample-name'
    _python_name = 'sample_name'
    return_type = 'object'

class interval_size(Real):
    """
    'interval_size' child.
    """
    _version = '241'
    fluent_name = 'interval-size'
    _python_name = 'interval_size'
    return_type = 'object'

class dpm_sample_contour_plots(Command):
    """
    Prepare named expressions from data in a DPM sample file (collected at a cut plane surface) for contour plotting.
    
    Parameters
    ----------
        sample_name : str
            'sample_name' child.
        interval_size : real
            'interval_size' child.
    """
    _version = '241'
    fluent_name = 'dpm-sample-contour-plots'
    _python_name = 'dpm_sample_contour_plots'
    argument_names = ['sample_name', 'interval_size']
    _child_classes = dict(
        sample_name=sample_name,
        interval_size=interval_size,
    )
    return_type = 'object'

class histogram_1(Group):
    """
    'histogram' child.
    """
    _version = '241'
    fluent_name = 'histogram'
    _python_name = 'histogram'
    child_names = ['histogram_options', 'histogram_parameters', 'plot_write_sample', 'reduction']
    command_names = ['compute_sample', 'delete_sample', 'list_samples', 'read_sample_file', 'dpm_sample_contour_plots']
    _child_classes = dict(
        histogram_options=histogram_options,
        histogram_parameters=histogram_parameters,
        plot_write_sample=plot_write_sample,
        reduction=reduction,
        compute_sample=compute_sample,
        delete_sample=delete_sample,
        list_samples=list_samples,
        read_sample_file=read_sample_file,
        dpm_sample_contour_plots=dpm_sample_contour_plots,
    )
    return_type = 'object'

class user_defined_functions(String):
    """
    The DPM sampling output UDF.
    """
    _version = '241'
    fluent_name = 'user-defined-functions'
    _python_name = 'user_defined_functions'
    return_type = 'object'

class sort_sample_files(Boolean):
    """
    Enable writing of sorted DPM sample files.
    """
    _version = '241'
    fluent_name = 'sort-sample-files'
    _python_name = 'sort_sample_files'
    return_type = 'object'

class injections_1(StringList, AllowedValuesMixin):
    """
    'injections' child.
    """
    _version = '241'
    fluent_name = 'injections'
    _python_name = 'injections'
    return_type = 'object'

class lines_1(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '241'
    fluent_name = 'lines'
    _python_name = 'lines'
    return_type = 'object'

class planes(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '241'
    fluent_name = 'planes'
    _python_name = 'planes'
    return_type = 'object'

class op_udf(String):
    """
    'op_udf' child.
    """
    _version = '241'
    fluent_name = 'op-udf'
    _python_name = 'op_udf'
    return_type = 'object'

class append_sample(Boolean):
    """
    'append_sample' child.
    """
    _version = '241'
    fluent_name = 'append-sample?'
    _python_name = 'append_sample'
    return_type = 'object'

class accumulate_rates(Boolean):
    """
    'accumulate_rates' child.
    """
    _version = '241'
    fluent_name = 'accumulate-rates?'
    _python_name = 'accumulate_rates'
    return_type = 'object'

class compute_3(Command):
    """
    'compute' command.
    """
    _version = '241'
    fluent_name = 'compute'
    _python_name = 'compute'
    argument_names = ['injections', 'boundaries', 'lines', 'planes', 'op_udf', 'append_sample', 'accumulate_rates']
    _child_classes = dict(
        injections=injections_1,
        boundaries=boundaries_1,
        lines=lines_1,
        planes=planes,
        op_udf=op_udf,
        append_sample=append_sample,
        accumulate_rates=accumulate_rates,
    )
    return_type = 'object'

class start_file_write(Command):
    """
    'start_file_write' command.
    """
    _version = '241'
    fluent_name = 'start-file-write'
    _python_name = 'start_file_write'
    argument_names = ['injections', 'boundaries', 'lines', 'planes', 'op_udf', 'append_sample', 'accumulate_rates']
    _child_classes = dict(
        injections=injections_1,
        boundaries=boundaries_1,
        lines=lines_1,
        planes=planes,
        op_udf=op_udf,
        append_sample=append_sample,
        accumulate_rates=accumulate_rates,
    )
    return_type = 'object'

class stop_file_write(Command):
    """
    'stop_file_write' command.
    """
    _version = '241'
    fluent_name = 'stop-file-write'
    _python_name = 'stop_file_write'
    return_type = 'object'

class sample_trajectories(Group):
    """
    'sample_trajectories' child.
    """
    _version = '241'
    fluent_name = 'sample-trajectories'
    _python_name = 'sample_trajectories'
    child_names = ['user_defined_functions', 'sort_sample_files']
    command_names = ['compute', 'start_file_write', 'stop_file_write']
    _child_classes = dict(
        user_defined_functions=user_defined_functions,
        sort_sample_files=sort_sample_files,
        compute=compute_3,
        start_file_write=start_file_write,
        stop_file_write=stop_file_write,
    )
    return_type = 'object'

class evap_mass_details_in_dpm_summ_rep(String, AllowedValuesMixin):
    """
    Whether, and for which zone types (Lagr. wall film or cell zones [for free-stream particles]),.
    """
    _version = '241'
    fluent_name = 'evap-mass-details-in-dpm-summ-rep'
    _python_name = 'evap_mass_details_in_dpm_summ_rep'
    return_type = 'object'

class summary_1(Command):
    """
    Print discrete phase summary report of particle fates.
    """
    _version = '241'
    fluent_name = 'summary'
    _python_name = 'summary'
    return_type = 'object'

class write_to_file_1(Boolean):
    """
    'write_to_file' child.
    """
    _version = '241'
    fluent_name = 'write-to-file?'
    _python_name = 'write_to_file'
    return_type = 'object'

class include_in_domains_particles(Boolean):
    """
    'include_in_domains_particles' child.
    """
    _version = '241'
    fluent_name = 'include-in-domains-particles?'
    _python_name = 'include_in_domains_particles'
    return_type = 'object'

class pick_injection(Boolean):
    """
    'pick_injection' child.
    """
    _version = '241'
    fluent_name = 'pick-injection?'
    _python_name = 'pick_injection'
    return_type = 'object'

class injection_2(String, AllowedValuesMixin):
    """
    'injection' child.
    """
    _version = '241'
    fluent_name = 'injection'
    _python_name = 'injection'
    return_type = 'object'

class extended_summary(Command):
    """
    Print extended discrete phase summary report of particle fates, with options.
    
    Parameters
    ----------
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        include_in_domains_particles : bool
            'include_in_domains_particles' child.
        pick_injection : bool
            'pick_injection' child.
        injection : str
            'injection' child.
    """
    _version = '241'
    fluent_name = 'extended-summary'
    _python_name = 'extended_summary'
    argument_names = ['write_to_file', 'file_name', 'include_in_domains_particles', 'pick_injection', 'injection']
    _child_classes = dict(
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        include_in_domains_particles=include_in_domains_particles,
        pick_injection=pick_injection,
        injection=injection_2,
    )
    return_type = 'object'

class summary_state(Boolean):
    """
    'summary_state' child.
    """
    _version = '241'
    fluent_name = 'summary-state'
    _python_name = 'summary_state'
    return_type = 'object'

class reset_dpm_summaries(Boolean):
    """
    'reset_dpm_summaries' child.
    """
    _version = '241'
    fluent_name = 'reset-dpm-summaries'
    _python_name = 'reset_dpm_summaries'
    return_type = 'object'

class zone_summaries_per_injection(Command):
    """
    Enable per-injection per-zone DPM summary reports.
    
    Parameters
    ----------
        summary_state : bool
            'summary_state' child.
        reset_dpm_summaries : bool
            'reset_dpm_summaries' child.
    """
    _version = '241'
    fluent_name = 'zone-summaries-per-injection?'
    _python_name = 'zone_summaries_per_injection'
    argument_names = ['summary_state', 'reset_dpm_summaries']
    _child_classes = dict(
        summary_state=summary_state,
        reset_dpm_summaries=reset_dpm_summaries,
    )
    return_type = 'object'

class discrete_phase_1(Group):
    """
    'discrete_phase' child.
    """
    _version = '241'
    fluent_name = 'discrete-phase'
    _python_name = 'discrete_phase'
    child_names = ['histogram', 'sample_trajectories', 'evap_mass_details_in_dpm_summ_rep']
    command_names = ['summary', 'extended_summary', 'zone_summaries_per_injection']
    _child_classes = dict(
        histogram=histogram_1,
        sample_trajectories=sample_trajectories,
        evap_mass_details_in_dpm_summ_rep=evap_mass_details_in_dpm_summ_rep,
        summary=summary_1,
        extended_summary=extended_summary,
        zone_summaries_per_injection=zone_summaries_per_injection,
    )
    return_type = 'object'

class all_boundary_zones(Boolean):
    """
    All the boundary/interior zones.
    """
    _version = '241'
    fluent_name = 'all-boundary-zones?'
    _python_name = 'all_boundary_zones'
    return_type = 'object'

class append_data(Boolean):
    """
    'append_data' child.
    """
    _version = '241'
    fluent_name = 'append-data?'
    _python_name = 'append_data'
    return_type = 'object'

class mass_flow_1(Command):
    """
    Print mass flow rate at inlets and outlets.
    
    Parameters
    ----------
        domain : str
            'domain' child.
        all_boundary_zones : bool
            All the boundary/interior zones.
        zones : List
            Zone name list.
        physics : List
            'physics' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'mass-flow'
    _python_name = 'mass_flow'
    argument_names = ['domain', 'all_boundary_zones', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain,
        all_boundary_zones=all_boundary_zones,
        zones=zones_1,
        physics=physics_1,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class heat_transfer(Command):
    """
    Print heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain : str
            'domain' child.
        all_boundary_zones : bool
            All the boundary/interior zones.
        zones : List
            Zone name list.
        physics : List
            'physics' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'heat-transfer'
    _python_name = 'heat_transfer'
    argument_names = ['domain', 'all_boundary_zones', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain,
        all_boundary_zones=all_boundary_zones,
        zones=zones_1,
        physics=physics_1,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class heat_transfer_sensible(Command):
    """
    Print sensible heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain : str
            'domain' child.
        all_boundary_zones : bool
            All the boundary/interior zones.
        zones : List
            Zone name list.
        physics : List
            'physics' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'heat-transfer-sensible'
    _python_name = 'heat_transfer_sensible'
    argument_names = ['domain', 'all_boundary_zones', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain,
        all_boundary_zones=all_boundary_zones,
        zones=zones_1,
        physics=physics_1,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class radiation_heat_transfer(Command):
    """
    Print radiation heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain : str
            'domain' child.
        all_boundary_zones : bool
            All the boundary/interior zones.
        zones : List
            Zone name list.
        physics : List
            'physics' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'radiation-heat-transfer'
    _python_name = 'radiation_heat_transfer'
    argument_names = ['domain', 'all_boundary_zones', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain,
        all_boundary_zones=all_boundary_zones,
        zones=zones_1,
        physics=physics_1,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class film_mass_flow(Command):
    """
    Print film mass flow rate at boundaries.
    
    Parameters
    ----------
        domain : str
            'domain' child.
        all_boundary_zones : bool
            All the boundary/interior zones.
        zones : List
            Zone name list.
        physics : List
            'physics' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'film-mass-flow'
    _python_name = 'film_mass_flow'
    argument_names = ['domain', 'all_boundary_zones', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain,
        all_boundary_zones=all_boundary_zones,
        zones=zones_1,
        physics=physics_1,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class film_heat_transfer(Command):
    """
    Print film heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain : str
            'domain' child.
        all_boundary_zones : bool
            All the boundary/interior zones.
        zones : List
            Zone name list.
        physics : List
            'physics' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'film-heat-transfer'
    _python_name = 'film_heat_transfer'
    argument_names = ['domain', 'all_boundary_zones', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain,
        all_boundary_zones=all_boundary_zones,
        zones=zones_1,
        physics=physics_1,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class electric_current(Command):
    """
    Print electric current rate at boundaries.
    
    Parameters
    ----------
        domain : str
            'domain' child.
        all_boundary_zones : bool
            All the boundary/interior zones.
        zones : List
            Zone name list.
        physics : List
            'physics' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'electric-current'
    _python_name = 'electric_current'
    argument_names = ['domain', 'all_boundary_zones', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain,
        all_boundary_zones=all_boundary_zones,
        zones=zones_1,
        physics=physics_1,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class pressure_work_1(Command):
    """
    Print pressure work rate at moving boundaries.
    
    Parameters
    ----------
        domain : str
            'domain' child.
        all_boundary_zones : bool
            All the boundary/interior zones.
        zones : List
            Zone name list.
        physics : List
            'physics' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'pressure-work'
    _python_name = 'pressure_work'
    argument_names = ['domain', 'all_boundary_zones', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain,
        all_boundary_zones=all_boundary_zones,
        zones=zones_1,
        physics=physics_1,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class viscous_work(Command):
    """
    Print viscous work rate at boundaries.
    
    Parameters
    ----------
        domain : str
            'domain' child.
        all_boundary_zones : bool
            All the boundary/interior zones.
        zones : List
            Zone name list.
        physics : List
            'physics' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'viscous-work'
    _python_name = 'viscous_work'
    argument_names = ['domain', 'all_boundary_zones', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain,
        all_boundary_zones=all_boundary_zones,
        zones=zones_1,
        physics=physics_1,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class fluxes(Group):
    """
    'fluxes' child.
    """
    _version = '241'
    fluent_name = 'fluxes'
    _python_name = 'fluxes'
    command_names = ['mass_flow', 'heat_transfer', 'heat_transfer_sensible', 'radiation_heat_transfer', 'film_mass_flow', 'film_heat_transfer', 'electric_current', 'pressure_work', 'viscous_work']
    _child_classes = dict(
        mass_flow=mass_flow_1,
        heat_transfer=heat_transfer,
        heat_transfer_sensible=heat_transfer_sensible,
        radiation_heat_transfer=radiation_heat_transfer,
        film_mass_flow=film_mass_flow,
        film_heat_transfer=film_heat_transfer,
        electric_current=electric_current,
        pressure_work=pressure_work_1,
        viscous_work=viscous_work,
    )
    return_type = 'object'

class species_mass_flow(Command):
    """
    'species_mass_flow' command.
    """
    _version = '241'
    fluent_name = 'species-mass-flow'
    _python_name = 'species_mass_flow'
    argument_names = ['domain']
    _child_classes = dict(
        domain=domain,
    )
    return_type = 'object'

class element_mass_flow(Command):
    """
    'element_mass_flow' command.
    """
    _version = '241'
    fluent_name = 'element-mass-flow'
    _python_name = 'element_mass_flow'
    argument_names = ['domain']
    _child_classes = dict(
        domain=domain,
    )
    return_type = 'object'

class uds_flow(Command):
    """
    'uds_flow' command.
    """
    _version = '241'
    fluent_name = 'uds-flow'
    _python_name = 'uds_flow'
    argument_names = ['domain']
    _child_classes = dict(
        domain=domain,
    )
    return_type = 'object'

class flow(Group):
    """
    'flow' child.
    """
    _version = '241'
    fluent_name = 'flow'
    _python_name = 'flow'
    command_names = ['species_mass_flow', 'element_mass_flow', 'uds_flow']
    _child_classes = dict(
        species_mass_flow=species_mass_flow,
        element_mass_flow=element_mass_flow,
        uds_flow=uds_flow,
    )
    return_type = 'object'

class setting_type(StringList, AllowedValuesMixin):
    """
    'setting_type' child.
    """
    _version = '241'
    fluent_name = 'setting-type'
    _python_name = 'setting_type'
    return_type = 'object'

class modified_setting(Command):
    """
    Specify which settings will be checked for non-default status for generating the Modified Settings Summary table.
    
    Parameters
    ----------
        setting_type : List
            'setting_type' child.
    """
    _version = '241'
    fluent_name = 'modified-setting'
    _python_name = 'modified_setting'
    argument_names = ['setting_type']
    _child_classes = dict(
        setting_type=setting_type,
    )
    return_type = 'object'

class write_user_setting(Command):
    """
    Write the contents of the Modified Settings Summary table to a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'write-user-setting'
    _python_name = 'write_user_setting'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class modified_setting_options(Group):
    """
    'modified_setting_options' child.
    """
    _version = '241'
    fluent_name = 'modified-setting-options'
    _python_name = 'modified_setting_options'
    command_names = ['modified_setting', 'write_user_setting']
    _child_classes = dict(
        modified_setting=modified_setting,
        write_user_setting=write_user_setting,
    )
    return_type = 'object'

class surface_list(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '241'
    fluent_name = 'surface-list'
    _python_name = 'surface_list'
    return_type = 'object'

class volume_list(StringList, AllowedValuesMixin):
    """
    Cell zone name list.
    """
    _version = '241'
    fluent_name = 'volume-list'
    _python_name = 'volume_list'
    return_type = 'object'

class num_of_moments(Integer):
    """
    'num_of_moments' child.
    """
    _version = '241'
    fluent_name = 'num-of-moments'
    _python_name = 'num_of_moments'
    return_type = 'object'

class moments(Command):
    """
    Set moments for population balance.
    
    Parameters
    ----------
        surface_list : List
            Surface.
        volume_list : List
            Cell zone name list.
        num_of_moments : int
            'num_of_moments' child.
        write_to_file : bool
            'write_to_file' child.
        filename : str
            'filename' child.
    """
    _version = '241'
    fluent_name = 'moments'
    _python_name = 'moments'
    argument_names = ['surface_list', 'volume_list', 'num_of_moments', 'write_to_file', 'filename']
    _child_classes = dict(
        surface_list=surface_list,
        volume_list=volume_list,
        num_of_moments=num_of_moments,
        write_to_file=write_to_file_1,
        filename=filename_1,
    )
    return_type = 'object'

class disc_output_type(String, AllowedValuesMixin):
    """
    'disc_output_type' child.
    """
    _version = '241'
    fluent_name = 'disc-output-type'
    _python_name = 'disc_output_type'
    return_type = 'object'

class qmom_output_type(String, AllowedValuesMixin):
    """
    'qmom_output_type' child.
    """
    _version = '241'
    fluent_name = 'qmom-output-type'
    _python_name = 'qmom_output_type'
    return_type = 'object'

class smm_output_type(String, AllowedValuesMixin):
    """
    'smm_output_type' child.
    """
    _version = '241'
    fluent_name = 'smm-output-type'
    _python_name = 'smm_output_type'
    return_type = 'object'

class num_dens_func(String, AllowedValuesMixin):
    """
    'num_dens_func' child.
    """
    _version = '241'
    fluent_name = 'num-dens-func'
    _python_name = 'num_dens_func'
    return_type = 'object'

class dia_upper_limit(Real):
    """
    'dia_upper_limit' child.
    """
    _version = '241'
    fluent_name = 'dia-upper-limit'
    _python_name = 'dia_upper_limit'
    return_type = 'object'

class number_density(Command):
    """
    'number_density' command.
    """
    _version = '241'
    fluent_name = 'number-density'
    _python_name = 'number_density'
    argument_names = ['report_type', 'disc_output_type', 'qmom_output_type', 'smm_output_type', 'surface_list', 'volume_list', 'num_dens_func', 'dia_upper_limit', 'file_name']
    _child_classes = dict(
        report_type=report_type,
        disc_output_type=disc_output_type,
        qmom_output_type=qmom_output_type,
        smm_output_type=smm_output_type,
        surface_list=surface_list,
        volume_list=volume_list,
        num_dens_func=num_dens_func,
        dia_upper_limit=dia_upper_limit,
        file_name=file_name_1,
    )
    return_type = 'object'

class population_balance(Group):
    """
    'population_balance' child.
    """
    _version = '241'
    fluent_name = 'population-balance'
    _python_name = 'population_balance'
    command_names = ['moments', 'number_density']
    _child_classes = dict(
        moments=moments,
        number_density=number_density,
    )
    return_type = 'object'

class heat_exchanger_1(String, AllowedValuesMixin):
    """
    'heat_exchanger' child.
    """
    _version = '241'
    fluent_name = 'heat-exchanger'
    _python_name = 'heat_exchanger'
    return_type = 'object'

class fluid_zone(String, AllowedValuesMixin):
    """
    'fluid_zone' child.
    """
    _version = '241'
    fluent_name = 'fluid-zone'
    _python_name = 'fluid_zone'
    return_type = 'object'

class boundary_zone_1(String, AllowedValuesMixin):
    """
    Face zone name.
    """
    _version = '241'
    fluent_name = 'boundary-zone'
    _python_name = 'boundary_zone'
    return_type = 'object'

class append_file(Boolean):
    """
    'append_file' child.
    """
    _version = '241'
    fluent_name = 'append-file?'
    _python_name = 'append_file'
    return_type = 'object'

class computed_heat_rejection(Command):
    """
    Print total heat rejection.
    
    Parameters
    ----------
        heat_exchanger : str
            'heat_exchanger' child.
        fluid_zone : str
            'fluid_zone' child.
        boundary_zone : str
            Face zone name.
        report_type : str
            'report_type' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_file : bool
            'append_file' child.
    """
    _version = '241'
    fluent_name = 'computed-heat-rejection'
    _python_name = 'computed_heat_rejection'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file']
    _child_classes = dict(
        heat_exchanger=heat_exchanger_1,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone_1,
        report_type=report_type,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_file=append_file,
    )
    return_type = 'object'

class inlet_temperature(Command):
    """
    Print inlet temperature.
    
    Parameters
    ----------
        heat_exchanger : str
            'heat_exchanger' child.
        fluid_zone : str
            'fluid_zone' child.
        boundary_zone : str
            Face zone name.
        report_type : str
            'report_type' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_file : bool
            'append_file' child.
    """
    _version = '241'
    fluent_name = 'inlet-temperature'
    _python_name = 'inlet_temperature'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file']
    _child_classes = dict(
        heat_exchanger=heat_exchanger_1,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone_1,
        report_type=report_type,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_file=append_file,
    )
    return_type = 'object'

class outlet_temperature(Command):
    """
    Print outlet temperature.
    
    Parameters
    ----------
        heat_exchanger : str
            'heat_exchanger' child.
        fluid_zone : str
            'fluid_zone' child.
        boundary_zone : str
            Face zone name.
        report_type : str
            'report_type' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_file : bool
            'append_file' child.
    """
    _version = '241'
    fluent_name = 'outlet-temperature'
    _python_name = 'outlet_temperature'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file']
    _child_classes = dict(
        heat_exchanger=heat_exchanger_1,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone_1,
        report_type=report_type,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_file=append_file,
    )
    return_type = 'object'

class mass_flow_rate_3(Command):
    """
    Print mass flow rate.
    
    Parameters
    ----------
        heat_exchanger : str
            'heat_exchanger' child.
        fluid_zone : str
            'fluid_zone' child.
        boundary_zone : str
            Face zone name.
        report_type : str
            'report_type' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_file : bool
            'append_file' child.
    """
    _version = '241'
    fluent_name = 'mass-flow-rate'
    _python_name = 'mass_flow_rate'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file']
    _child_classes = dict(
        heat_exchanger=heat_exchanger_1,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone_1,
        report_type=report_type,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_file=append_file,
    )
    return_type = 'object'

class specific_heat_5(Command):
    """
    Print fluid's specific heat.
    
    Parameters
    ----------
        heat_exchanger : str
            'heat_exchanger' child.
        fluid_zone : str
            'fluid_zone' child.
        boundary_zone : str
            Face zone name.
        report_type : str
            'report_type' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_file : bool
            'append_file' child.
    """
    _version = '241'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file']
    _child_classes = dict(
        heat_exchanger=heat_exchanger_1,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone_1,
        report_type=report_type,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_file=append_file,
    )
    return_type = 'object'

class heat_exchanger(Group):
    """
    The heat exchanger object.
    """
    _version = '241'
    fluent_name = 'heat-exchanger'
    _python_name = 'heat_exchanger'
    command_names = ['computed_heat_rejection', 'inlet_temperature', 'outlet_temperature', 'mass_flow_rate', 'specific_heat']
    _child_classes = dict(
        computed_heat_rejection=computed_heat_rejection,
        inlet_temperature=inlet_temperature,
        outlet_temperature=outlet_temperature,
        mass_flow_rate=mass_flow_rate_3,
        specific_heat=specific_heat_5,
    )
    return_type = 'object'

class print_process_statistics(Command):
    """
    Fluent process information.
    """
    _version = '241'
    fluent_name = 'print-process-statistics'
    _python_name = 'print_process_statistics'
    return_type = 'object'

class print_system_statistics(Command):
    """
    System information.
    """
    _version = '241'
    fluent_name = 'print-system-statistics'
    _python_name = 'print_system_statistics'
    return_type = 'object'

class print_gpgpu_statistics(Command):
    """
    GPGPU information.
    """
    _version = '241'
    fluent_name = 'print-gpgpu-statistics'
    _python_name = 'print_gpgpu_statistics'
    return_type = 'object'

class print_time_statistics(Command):
    """
    Time usage information.
    """
    _version = '241'
    fluent_name = 'print-time-statistics'
    _python_name = 'print_time_statistics'
    return_type = 'object'

class system(Group):
    """
    System object.
    """
    _version = '241'
    fluent_name = 'system'
    _python_name = 'system'
    command_names = ['print_process_statistics', 'print_system_statistics', 'print_gpgpu_statistics', 'print_time_statistics']
    _child_classes = dict(
        print_process_statistics=print_process_statistics,
        print_system_statistics=print_system_statistics,
        print_gpgpu_statistics=print_gpgpu_statistics,
        print_time_statistics=print_time_statistics,
    )
    return_type = 'object'

class surface_names_2(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '241'
    fluent_name = 'surface-names'
    _python_name = 'surface_names'
    return_type = 'object'

class geometry_names(StringList, AllowedValuesMixin):
    """
    UTL Geometry.
    """
    _version = '241'
    fluent_name = 'geometry-names'
    _python_name = 'geometry_names'
    return_type = 'object'

class cust_vec_func(String, AllowedValuesMixin):
    """
    'cust_vec_func' child.
    """
    _version = '241'
    fluent_name = 'cust-vec-func'
    _python_name = 'cust_vec_func'
    return_type = 'object'

class report_of(String, AllowedValuesMixin):
    """
    Field.
    """
    _version = '241'
    fluent_name = 'report-of'
    _python_name = 'report_of'
    return_type = 'object'

class current_domain(String, AllowedValuesMixin):
    """
    'current_domain' child.
    """
    _version = '241'
    fluent_name = 'current-domain'
    _python_name = 'current_domain'
    return_type = 'object'

class area_1(Command):
    """
    Print total area of surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'area'
    _python_name = 'area'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class area_weighted_avg(Command):
    """
    Print area-weighted average of scalar on surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'area-weighted-avg'
    _python_name = 'area_weighted_avg'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class vector_based_flux(Command):
    """
    Print custom vector based flux.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'vector-based-flux'
    _python_name = 'vector_based_flux'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class vector_flux(Command):
    """
    Print custom vector flux.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'vector-flux'
    _python_name = 'vector_flux'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class vector_weighted_average(Command):
    """
    Print custom vector weighted average.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'vector-weighted-average'
    _python_name = 'vector_weighted_average'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class facet_avg(Command):
    """
    Print average of scalar at facet centroids of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'facet-avg'
    _python_name = 'facet_avg'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class facet_min(Command):
    """
    Print minimum of scalar at facet centroids of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'facet-min'
    _python_name = 'facet_min'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class facet_max(Command):
    """
    Print maximum of scalar at facet centroids of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'facet-max'
    _python_name = 'facet_max'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class flow_rate_1(Command):
    """
    Print flow rate of scalar through surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'flow-rate'
    _python_name = 'flow_rate'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class integral(Command):
    """
    Print integral of scalar over surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'integral'
    _python_name = 'integral'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class mass_flow_rate_4(Command):
    """
    Print mass flow rate through surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'mass-flow-rate'
    _python_name = 'mass_flow_rate'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class mass_weighted_avg(Command):
    """
    Print mass-average of scalar over surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'mass-weighted-avg'
    _python_name = 'mass_weighted_avg'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class standard_deviation(Command):
    """
    Print standard deviation of scalar.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'standard-deviation'
    _python_name = 'standard_deviation'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class sum(Command):
    """
    Print sum of scalar at facet centroids of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'sum'
    _python_name = 'sum'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class uniformity_index_area_weighted(Command):
    """
    Print uniformity index of scalar over surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'uniformity-index-area-weighted'
    _python_name = 'uniformity_index_area_weighted'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class uniformity_index_mass_weighted(Command):
    """
    Print uniformity index of scalar over surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'uniformity-index-mass-weighted'
    _python_name = 'uniformity_index_mass_weighted'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class vertex_avg(Command):
    """
    Print average of scalar at vertices of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'vertex-avg'
    _python_name = 'vertex_avg'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class vertex_min(Command):
    """
    Print minimum of scalar at vertices of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'vertex-min'
    _python_name = 'vertex_min'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class vertex_max(Command):
    """
    Print maximkum of scalar at vertices of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'vertex-max'
    _python_name = 'vertex_max'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class volume_flow_rate(Command):
    """
    Print volume flow rate through surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            'cust_vec_func' child.
        report_of : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'volume-flow-rate'
    _python_name = 'volume_flow_rate'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_2,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class surface_integrals(Group):
    """
    'surface_integrals' child.
    """
    _version = '241'
    fluent_name = 'surface-integrals'
    _python_name = 'surface_integrals'
    command_names = ['area', 'area_weighted_avg', 'vector_based_flux', 'vector_flux', 'vector_weighted_average', 'facet_avg', 'facet_min', 'facet_max', 'flow_rate', 'integral', 'mass_flow_rate', 'mass_weighted_avg', 'standard_deviation', 'sum', 'uniformity_index_area_weighted', 'uniformity_index_mass_weighted', 'vertex_avg', 'vertex_min', 'vertex_max', 'volume_flow_rate']
    _child_classes = dict(
        area=area_1,
        area_weighted_avg=area_weighted_avg,
        vector_based_flux=vector_based_flux,
        vector_flux=vector_flux,
        vector_weighted_average=vector_weighted_average,
        facet_avg=facet_avg,
        facet_min=facet_min,
        facet_max=facet_max,
        flow_rate=flow_rate_1,
        integral=integral,
        mass_flow_rate=mass_flow_rate_4,
        mass_weighted_avg=mass_weighted_avg,
        standard_deviation=standard_deviation,
        sum=sum,
        uniformity_index_area_weighted=uniformity_index_area_weighted,
        uniformity_index_mass_weighted=uniformity_index_mass_weighted,
        vertex_avg=vertex_avg,
        vertex_min=vertex_min,
        vertex_max=vertex_max,
        volume_flow_rate=volume_flow_rate,
    )
    return_type = 'object'

class cell_zones_6(StringList, AllowedValuesMixin):
    """
    Volume id/name.
    """
    _version = '241'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'
    return_type = 'object'

class mass_average(Command):
    """
    Print mass-average of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        cell_function : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'mass-average'
    _python_name = 'mass_average'
    argument_names = ['cell_zones', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_6,
        cell_function=cell_function_1,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class mass_integral(Command):
    """
    Print mass-weighted integral of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        cell_function : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'mass-integral'
    _python_name = 'mass_integral'
    argument_names = ['cell_zones', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_6,
        cell_function=cell_function_1,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class mass(Command):
    """
    Print total mass of specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        cell_function : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'mass'
    _python_name = 'mass'
    argument_names = ['cell_zones', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_6,
        cell_function=cell_function_1,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class sum_1(Command):
    """
    Print sum of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        cell_function : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'sum'
    _python_name = 'sum'
    argument_names = ['cell_zones', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_6,
        cell_function=cell_function_1,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class twopisum(Command):
    """
    Print sum of scalar over specified cell zones multiplied by 2\\*Pi.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        cell_function : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'twopisum'
    _python_name = 'twopisum'
    argument_names = ['cell_zones', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_6,
        cell_function=cell_function_1,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class minimum_2(Command):
    """
    Print minimum of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        cell_function : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'minimum'
    _python_name = 'minimum'
    argument_names = ['cell_zones', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_6,
        cell_function=cell_function_1,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class maximum_2(Command):
    """
    Print maximum of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        cell_function : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'maximum'
    _python_name = 'maximum'
    argument_names = ['cell_zones', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_6,
        cell_function=cell_function_1,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class volume_2(Command):
    """
    Print total volume of specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        cell_function : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'volume'
    _python_name = 'volume'
    argument_names = ['cell_zones', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_6,
        cell_function=cell_function_1,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class volume_average(Command):
    """
    Print volume-weighted average of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        cell_function : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'volume-average'
    _python_name = 'volume_average'
    argument_names = ['cell_zones', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_6,
        cell_function=cell_function_1,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class volume_integral(Command):
    """
    Print volume integral of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        cell_function : str
            Field.
        current_domain : str
            'current_domain' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'volume-integral'
    _python_name = 'volume_integral'
    argument_names = ['cell_zones', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_6,
        cell_function=cell_function_1,
        current_domain=current_domain,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class volume_integrals(Group):
    """
    'volume_integrals' child.
    """
    _version = '241'
    fluent_name = 'volume-integrals'
    _python_name = 'volume_integrals'
    command_names = ['mass_average', 'mass_integral', 'mass', 'sum', 'twopisum', 'minimum', 'maximum', 'volume', 'volume_average', 'volume_integral']
    _child_classes = dict(
        mass_average=mass_average,
        mass_integral=mass_integral,
        mass=mass,
        sum=sum_1,
        twopisum=twopisum,
        minimum=minimum_2,
        maximum=maximum_2,
        volume=volume_2,
        volume_average=volume_average,
        volume_integral=volume_integral,
    )
    return_type = 'object'

class aero_optical_distortions(Command):
    """
    Optics report object.
    """
    _version = '241'
    fluent_name = 'aero-optical-distortions'
    _python_name = 'aero_optical_distortions'
    return_type = 'object'

class all_wall_zones(Boolean):
    """
    All wall zones available.
    """
    _version = '241'
    fluent_name = 'all-wall-zones?'
    _python_name = 'all_wall_zones'
    return_type = 'object'

class wall_zones_1(StringList, AllowedValuesMixin):
    """
    Wall zone name list.
    """
    _version = '241'
    fluent_name = 'wall-zones'
    _python_name = 'wall_zones'
    return_type = 'object'

class direction_vector_2(RealList):
    """
    'direction_vector' child.
    """
    _version = '241'
    fluent_name = 'direction-vector'
    _python_name = 'direction_vector'
    return_type = 'object'

class momentum_center(RealList):
    """
    'momentum_center' child.
    """
    _version = '241'
    fluent_name = 'momentum-center'
    _python_name = 'momentum_center'
    return_type = 'object'

class momentum_axis(RealList):
    """
    'momentum_axis' child.
    """
    _version = '241'
    fluent_name = 'momentum-axis'
    _python_name = 'momentum_axis'
    return_type = 'object'

class pressure_coordinate(String, AllowedValuesMixin):
    """
    'pressure_coordinate' child.
    """
    _version = '241'
    fluent_name = 'pressure-coordinate'
    _python_name = 'pressure_coordinate'
    return_type = 'object'

class coordinate_value(Real):
    """
    'coordinate_value' child.
    """
    _version = '241'
    fluent_name = 'coordinate-value'
    _python_name = 'coordinate_value'
    return_type = 'object'

class forces(Command):
    """
    'forces' command.
    """
    _version = '241'
    fluent_name = 'forces'
    _python_name = 'forces'
    argument_names = ['option', 'domain', 'all_wall_zones', 'wall_zones', 'direction_vector', 'momentum_center', 'momentum_axis', 'pressure_coordinate', 'coordinate_value', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        option=option,
        domain=domain,
        all_wall_zones=all_wall_zones,
        wall_zones=wall_zones_1,
        direction_vector=direction_vector_2,
        momentum_center=momentum_center,
        momentum_axis=momentum_axis,
        pressure_coordinate=pressure_coordinate,
        coordinate_value=coordinate_value,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class verbosity_option(String, AllowedValuesMixin):
    """
    'verbosity_option' child.
    """
    _version = '241'
    fluent_name = 'verbosity-option'
    _python_name = 'verbosity_option'
    return_type = 'object'

class multiphase_summary(Command):
    """
    Multiphase Summary and Recommendations.
    
    Parameters
    ----------
        verbosity_option : str
            'verbosity_option' child.
    """
    _version = '241'
    fluent_name = 'multiphase-summary'
    _python_name = 'multiphase_summary'
    argument_names = ['verbosity_option']
    _child_classes = dict(
        verbosity_option=verbosity_option,
    )
    return_type = 'object'

class injection_names(StringList, AllowedValuesMixin):
    """
    'injection_names' child.
    """
    _version = '241'
    fluent_name = 'injection-names'
    _python_name = 'injection_names'
    return_type = 'object'

class particle_summary(Command):
    """
    Print summary report for all current particles.
    
    Parameters
    ----------
        injection_names : List
            'injection_names' child.
    """
    _version = '241'
    fluent_name = 'particle-summary'
    _python_name = 'particle_summary'
    argument_names = ['injection_names']
    _child_classes = dict(
        injection_names=injection_names,
    )
    return_type = 'object'

class pathline_summary(Command):
    """
    Print path-line-summary report.
    """
    _version = '241'
    fluent_name = 'pathline-summary'
    _python_name = 'pathline_summary'
    return_type = 'object'

class min_feature_size(Real):
    """
    'min_feature_size' child.
    """
    _version = '241'
    fluent_name = 'min-feature-size'
    _python_name = 'min_feature_size'
    return_type = 'object'

class proj_plane_norm_comp(RealList):
    """
    'proj_plane_norm_comp' child.
    """
    _version = '241'
    fluent_name = 'proj-plane-norm-comp'
    _python_name = 'proj_plane_norm_comp'
    return_type = 'object'

class projected_surface_area(Command):
    """
    Print total area of the projection of a group of surfaces to a plane.
    
    Parameters
    ----------
        surfaces : List
            Surface.
        min_feature_size : real
            'min_feature_size' child.
        proj_plane_norm_comp : List
            'proj_plane_norm_comp' child.
    """
    _version = '241'
    fluent_name = 'projected-surface-area'
    _python_name = 'projected_surface_area'
    argument_names = ['surfaces', 'min_feature_size', 'proj_plane_norm_comp']
    _child_classes = dict(
        surfaces=surfaces,
        min_feature_size=min_feature_size,
        proj_plane_norm_comp=proj_plane_norm_comp,
    )
    return_type = 'object'

class summary(Command):
    """
    Print report summary.
    
    Parameters
    ----------
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
    """
    _version = '241'
    fluent_name = 'summary'
    _python_name = 'summary'
    argument_names = ['write_to_file', 'file_name']
    _child_classes = dict(
        write_to_file=write_to_file_1,
        file_name=file_name_1,
    )
    return_type = 'object'

class output_quantity(String, AllowedValuesMixin):
    """
    'output_quantity' child.
    """
    _version = '241'
    fluent_name = 'output-quantity'
    _python_name = 'output_quantity'
    return_type = 'object'

class rotor_name(String, AllowedValuesMixin):
    """
    'rotor_name' child.
    """
    _version = '241'
    fluent_name = 'rotor-name'
    _python_name = 'rotor_name'
    return_type = 'object'

class scale_output(Boolean):
    """
    'scale_output' child.
    """
    _version = '241'
    fluent_name = 'scale-output?'
    _python_name = 'scale_output'
    return_type = 'object'

class vbm(Command):
    """
    'vbm' command.
    """
    _version = '241'
    fluent_name = 'vbm'
    _python_name = 'vbm'
    argument_names = ['output_quantity', 'rotor_name', 'scale_output', 'write_to_file', 'file_name', 'append']
    _child_classes = dict(
        output_quantity=output_quantity,
        rotor_name=rotor_name,
        scale_output=scale_output,
        write_to_file=write_to_file_1,
        file_name=file_name_1,
        append=append,
    )
    return_type = 'object'

class report_1(Group):
    """
    'report' child.
    """
    _version = '241'
    fluent_name = 'report'
    _python_name = 'report'
    child_names = ['simulation_reports', 'discrete_phase', 'fluxes', 'flow', 'modified_setting_options', 'population_balance', 'heat_exchanger', 'system', 'surface_integrals', 'volume_integrals']
    command_names = ['aero_optical_distortions', 'forces', 'multiphase_summary', 'particle_summary', 'pathline_summary', 'projected_surface_area', 'summary', 'vbm']
    _child_classes = dict(
        simulation_reports=simulation_reports,
        discrete_phase=discrete_phase_1,
        fluxes=fluxes,
        flow=flow,
        modified_setting_options=modified_setting_options,
        population_balance=population_balance,
        heat_exchanger=heat_exchanger,
        system=system,
        surface_integrals=surface_integrals,
        volume_integrals=volume_integrals,
        aero_optical_distortions=aero_optical_distortions,
        forces=forces,
        multiphase_summary=multiphase_summary,
        particle_summary=particle_summary,
        pathline_summary=pathline_summary,
        projected_surface_area=projected_surface_area,
        summary=summary,
        vbm=vbm,
    )
    return_type = 'object'

class results(Group):
    """
    'results' child.
    """
    _version = '241'
    fluent_name = 'results'
    _python_name = 'results'
    child_names = ['custom_vectors', 'surfaces', 'graphics', 'plot', 'scene', 'animations', 'report']
    _child_classes = dict(
        custom_vectors=custom_vectors,
        surfaces=surfaces_5,
        graphics=graphics,
        plot=plot_4,
        scene=scene,
        animations=animations,
        report=report_1,
    )
    return_type = 'object'

class project_filename_1(String):
    """
    'project_filename' child.
    """
    _version = '241'
    fluent_name = 'project-filename'
    _python_name = 'project_filename'
    return_type = 'object'

class initialize_2(Command):
    """
    Start Parametric Study.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
    """
    _version = '241'
    fluent_name = 'initialize'
    _python_name = 'initialize'
    argument_names = ['project_filename']
    _child_classes = dict(
        project_filename=project_filename_1,
    )
    return_type = 'object'

class copy_design_points(Boolean):
    """
    'copy_design_points' child.
    """
    _version = '241'
    fluent_name = 'copy-design-points'
    _python_name = 'copy_design_points'
    return_type = 'object'

class duplicate(Command):
    """
    Duplicate Parametric Study.
    
    Parameters
    ----------
        copy_design_points : bool
            'copy_design_points' child.
    """
    _version = '241'
    fluent_name = 'duplicate'
    _python_name = 'duplicate'
    argument_names = ['copy_design_points']
    _child_classes = dict(
        copy_design_points=copy_design_points,
    )
    return_type = 'object'

class study_name(String):
    """
    'study_name' child.
    """
    _version = '241'
    fluent_name = 'study-name'
    _python_name = 'study_name'
    return_type = 'object'

class set_as_current(Command):
    """
    Set As Current Study.
    
    Parameters
    ----------
        study_name : str
            'study_name' child.
    """
    _version = '241'
    fluent_name = 'set-as-current'
    _python_name = 'set_as_current'
    argument_names = ['study_name']
    _child_classes = dict(
        study_name=study_name,
    )
    return_type = 'object'

class use_base_data(Command):
    """
    Use Base Data.
    """
    _version = '241'
    fluent_name = 'use-base-data'
    _python_name = 'use_base_data'
    return_type = 'object'

class filepath(String):
    """
    'filepath' child.
    """
    _version = '241'
    fluent_name = 'filepath'
    _python_name = 'filepath'
    return_type = 'object'

class export_design_table(Command):
    """
    Export Design Point Table.
    
    Parameters
    ----------
        filepath : str
            'filepath' child.
    """
    _version = '241'
    fluent_name = 'export-design-table'
    _python_name = 'export_design_table'
    argument_names = ['filepath']
    _child_classes = dict(
        filepath=filepath,
    )
    return_type = 'object'

class delete_existing(Boolean):
    """
    'delete_existing' child.
    """
    _version = '241'
    fluent_name = 'delete-existing'
    _python_name = 'delete_existing'
    return_type = 'object'

class import_design_table(Command):
    """
    Import Design Point Table.
    
    Parameters
    ----------
        filepath : str
            'filepath' child.
        delete_existing : bool
            'delete_existing' child.
    """
    _version = '241'
    fluent_name = 'import-design-table'
    _python_name = 'import_design_table'
    argument_names = ['filepath', 'delete_existing']
    _child_classes = dict(
        filepath=filepath,
        delete_existing=delete_existing,
    )
    return_type = 'object'

class write_data_1(Boolean):
    """
    'write_data' child.
    """
    _version = '241'
    fluent_name = 'write-data'
    _python_name = 'write_data'
    return_type = 'object'

class capture_simulation_report_data(Boolean):
    """
    'capture_simulation_report_data' child.
    """
    _version = '241'
    fluent_name = 'capture-simulation-report-data'
    _python_name = 'capture_simulation_report_data'
    return_type = 'object'

class create_1(CommandWithPositionalArgs):
    """
    Add new Design Point.
    
    Parameters
    ----------
        write_data : bool
            'write_data' child.
        capture_simulation_report_data : bool
            'capture_simulation_report_data' child.
    """
    _version = '241'
    fluent_name = 'create'
    _python_name = 'create'
    argument_names = ['write_data', 'capture_simulation_report_data']
    _child_classes = dict(
        write_data=write_data_1,
        capture_simulation_report_data=capture_simulation_report_data,
    )
    return_type = 'object'

class design_point(String):
    """
    'design_point' child.
    """
    _version = '241'
    fluent_name = 'design-point'
    _python_name = 'design_point'
    return_type = 'object'

class duplicate_1(Command):
    """
    Duplicate Design Point.
    
    Parameters
    ----------
        design_point : str
            'design_point' child.
    """
    _version = '241'
    fluent_name = 'duplicate'
    _python_name = 'duplicate'
    argument_names = ['design_point']
    _child_classes = dict(
        design_point=design_point,
    )
    return_type = 'object'

class load_case_data(Command):
    """
    Loads relevant case/data file for current design point.
    """
    _version = '241'
    fluent_name = 'load-case-data'
    _python_name = 'load_case_data'
    return_type = 'object'

class set_as_current_1(Command):
    """
    Set current design point.
    
    Parameters
    ----------
        design_point : str
            'design_point' child.
    """
    _version = '241'
    fluent_name = 'set-as-current'
    _python_name = 'set_as_current'
    argument_names = ['design_point']
    _child_classes = dict(
        design_point=design_point,
    )
    return_type = 'object'

class design_points_1(StringList):
    """
    'design_points' child.
    """
    _version = '241'
    fluent_name = 'design-points'
    _python_name = 'design_points'
    return_type = 'object'

class delete_design_points(Command):
    """
    Delete Design Points.
    
    Parameters
    ----------
        design_points : List
            'design_points' child.
    """
    _version = '241'
    fluent_name = 'delete-design-points'
    _python_name = 'delete_design_points'
    argument_names = ['design_points']
    _child_classes = dict(
        design_points=design_points_1,
    )
    return_type = 'object'

class separate_journals(Boolean):
    """
    'separate_journals' child.
    """
    _version = '241'
    fluent_name = 'separate-journals'
    _python_name = 'separate_journals'
    return_type = 'object'

class save_journals(Command):
    """
    Save Journals.
    
    Parameters
    ----------
        separate_journals : bool
            'separate_journals' child.
    """
    _version = '241'
    fluent_name = 'save-journals'
    _python_name = 'save_journals'
    argument_names = ['separate_journals']
    _child_classes = dict(
        separate_journals=separate_journals,
    )
    return_type = 'object'

class clear_generated_data(Command):
    """
    Clear Generated Data.
    
    Parameters
    ----------
        design_points : List
            'design_points' child.
    """
    _version = '241'
    fluent_name = 'clear-generated-data'
    _python_name = 'clear_generated_data'
    argument_names = ['design_points']
    _child_classes = dict(
        design_points=design_points_1,
    )
    return_type = 'object'

class update_current(Command):
    """
    Update Current Design Point.
    """
    _version = '241'
    fluent_name = 'update-current'
    _python_name = 'update_current'
    return_type = 'object'

class update_all(Command):
    """
    Update All Design Point.
    """
    _version = '241'
    fluent_name = 'update-all'
    _python_name = 'update_all'
    return_type = 'object'

class update_selected(Command):
    """
    Update Selected Design Points.
    
    Parameters
    ----------
        design_points : List
            'design_points' child.
    """
    _version = '241'
    fluent_name = 'update-selected'
    _python_name = 'update_selected'
    argument_names = ['design_points']
    _child_classes = dict(
        design_points=design_points_1,
    )
    return_type = 'object'

class input_parameters_child(Real):
    """
    'child_object_type' of input_parameters.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'input_parameters_child'
    return_type = 'object'

class input_parameters(NamedObject[input_parameters_child], _NonCreatableNamedObjectMixin[input_parameters_child]):
    """
    Input Parameter Values of Design Point.
    """
    _version = '241'
    fluent_name = 'input-parameters'
    _python_name = 'input_parameters'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = input_parameters_child
    return_type = 'object'

class output_parameters_child(Real):
    """
    'child_object_type' of output_parameters.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'output_parameters_child'
    return_type = 'object'

class output_parameters(NamedObject[output_parameters_child], _NonCreatableNamedObjectMixin[output_parameters_child]):
    """
    Output Parameter Values of Design Point.
    """
    _version = '241'
    fluent_name = 'output-parameters'
    _python_name = 'output_parameters'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = output_parameters_child
    return_type = 'object'

class write_data_2(Boolean):
    """
    WriteData option for Design Point.
    """
    _version = '241'
    fluent_name = 'write-data'
    _python_name = 'write_data'
    return_type = 'object'

class capture_simulation_report_data_1(Boolean):
    """
    Capture Simulation Report Data option for Design Point.
    """
    _version = '241'
    fluent_name = 'capture-simulation-report-data'
    _python_name = 'capture_simulation_report_data'
    return_type = 'object'

class design_points_child(Group):
    """
    'child_object_type' of design_points.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'design_points_child'
    child_names = ['name', 'input_parameters', 'output_parameters', 'write_data', 'capture_simulation_report_data']
    _child_classes = dict(
        name=name,
        input_parameters=input_parameters,
        output_parameters=output_parameters,
        write_data=write_data_2,
        capture_simulation_report_data=capture_simulation_report_data_1,
    )
    return_type = 'object'

class design_points(NamedObject[design_points_child], CreatableNamedObjectMixinOld[design_points_child]):
    """
    'design_points' child.
    """
    _version = '241'
    fluent_name = 'design-points'
    _python_name = 'design_points'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'create_1', 'duplicate', 'load_case_data', 'set_as_current', 'delete_design_points', 'save_journals', 'clear_generated_data', 'update_current', 'update_all', 'update_selected']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        create_1=create_1,
        duplicate=duplicate_1,
        load_case_data=load_case_data,
        set_as_current=set_as_current_1,
        delete_design_points=delete_design_points,
        save_journals=save_journals,
        clear_generated_data=clear_generated_data,
        update_current=update_current,
        update_all=update_all,
        update_selected=update_selected,
    )
    child_object_type = design_points_child
    return_type = 'object'

class current_design_point(String):
    """
    Name of Current Design Point.
    """
    _version = '241'
    fluent_name = 'current-design-point'
    _python_name = 'current_design_point'
    return_type = 'object'

class parametric_studies_child(Group):
    """
    'child_object_type' of parametric_studies.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'parametric_studies_child'
    child_names = ['name', 'design_points', 'current_design_point']
    _child_classes = dict(
        name=name,
        design_points=design_points,
        current_design_point=current_design_point,
    )
    return_type = 'object'

class parametric_studies(NamedObject[parametric_studies_child], CreatableNamedObjectMixinOld[parametric_studies_child]):
    """
    'parametric_studies' child.
    """
    _version = '241'
    fluent_name = 'parametric-studies'
    _python_name = 'parametric_studies'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'initialize', 'duplicate', 'set_as_current', 'use_base_data', 'export_design_table', 'import_design_table']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        initialize=initialize_2,
        duplicate=duplicate,
        set_as_current=set_as_current,
        use_base_data=use_base_data,
        export_design_table=export_design_table,
        import_design_table=import_design_table,
    )
    child_object_type = parametric_studies_child
    return_type = 'object'

class current_parametric_study(String):
    """
    Name of Current Parametric Study.
    """
    _version = '241'
    fluent_name = 'current-parametric-study'
    _python_name = 'current_parametric_study'
    return_type = 'object'

class enable_in_tui(Boolean):
    """
    Enable/disable parameters in the text user interface.
    """
    _version = '241'
    fluent_name = 'enable-in-tui?'
    _python_name = 'enable_in_tui'
    return_type = 'object'

class apply_function(String):
    """
    'apply_function' child.
    """
    _version = '241'
    fluent_name = 'apply-function'
    _python_name = 'apply_function'
    return_type = 'object'

class scheme_proc_child(Group):
    """
    'child_object_type' of scheme_proc.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'scheme_proc_child'
    child_names = ['name', 'value', 'apply_function']
    _child_classes = dict(
        name=name,
        value=value_1,
        apply_function=apply_function,
    )
    return_type = 'object'

class scheme_proc(NamedObject[scheme_proc_child], CreatableNamedObjectMixinOld[scheme_proc_child]):
    """
    Use input parameter in scheme-procedure.
    """
    _version = '241'
    fluent_name = 'scheme-proc'
    _python_name = 'scheme_proc'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = scheme_proc_child
    return_type = 'object'

class udf_side_child(Group):
    """
    'child_object_type' of udf_side.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'udf_side_child'
    child_names = ['name', 'value']
    _child_classes = dict(
        name=name,
        value=value_1,
    )
    return_type = 'object'

class udf_side(NamedObject[udf_side_child], CreatableNamedObjectMixinOld[udf_side_child]):
    """
    Use input parameter in solver-udf.
    """
    _version = '241'
    fluent_name = 'udf-side'
    _python_name = 'udf_side'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = udf_side_child
    return_type = 'object'

class expression_2_child(Group):
    """
    'child_object_type' of expression.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'expression_child'
    child_names = ['name', 'value']
    _child_classes = dict(
        name=name,
        value=value_1,
    )
    return_type = 'object'

class expression_2(NamedObject[expression_2_child], _NonCreatableNamedObjectMixin[expression_2_child]):
    """
    'expression' child.
    """
    _version = '241'
    fluent_name = 'expression'
    _python_name = 'expression'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
    )
    child_object_type = expression_2_child
    return_type = 'object'

class list_4(Command):
    """
    List all input parameters.
    """
    _version = '241'
    fluent_name = 'list'
    _python_name = 'list'
    return_type = 'object'

class input_parameters_1(Group):
    """
    The input-parameters object.
    """
    _version = '241'
    fluent_name = 'input-parameters'
    _python_name = 'input_parameters'
    child_names = ['scheme_proc', 'udf_side', 'expression']
    command_names = ['list']
    _child_classes = dict(
        scheme_proc=scheme_proc,
        udf_side=udf_side,
        expression=expression_2,
        list=list_4,
    )
    return_type = 'object'

class print_to_console(Command):
    """
    Print parameter value to console.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '241'
    fluent_name = 'print-to-console'
    _python_name = 'print_to_console'
    argument_names = ['name']
    _child_classes = dict(
        name=name_1,
    )
    return_type = 'object'

class param_name(String, AllowedValuesMixin):
    """
    'param_name' child.
    """
    _version = '241'
    fluent_name = 'param-name'
    _python_name = 'param_name'
    return_type = 'object'

class write_to_file_2(Command):
    """
    Write parameter value to file.
    
    Parameters
    ----------
        param_name : str
            'param_name' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'write-to-file'
    _python_name = 'write_to_file'
    argument_names = ['param_name', 'file_name', 'append_data']
    _child_classes = dict(
        param_name=param_name,
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class report_definition(String, AllowedValuesMixin):
    """
    'report_definition' child.
    """
    _version = '241'
    fluent_name = 'report-definition'
    _python_name = 'report_definition'
    return_type = 'object'

class report_definitions_1_child(Group):
    """
    'child_object_type' of report_definitions.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'report_definitions_child'
    child_names = ['name', 'report_definition']
    _child_classes = dict(
        name=name,
        report_definition=report_definition,
    )
    return_type = 'object'

class report_definitions_1(NamedObject[report_definitions_1_child], CreatableNamedObjectMixinOld[report_definitions_1_child]):
    """
    'report_definitions' child.
    """
    _version = '241'
    fluent_name = 'report-definitions'
    _python_name = 'report_definitions'
    command_names = ['delete', 'list', 'list_properties', 'make_a_copy', 'print_to_console', 'write_to_file']
    _child_classes = dict(
        delete=delete_1,
        list=list,
        list_properties=list_properties_1,
        make_a_copy=make_a_copy,
        print_to_console=print_to_console,
        write_to_file=write_to_file_2,
    )
    child_object_type = report_definitions_1_child
    return_type = 'object'

class list_5(Command):
    """
    List all output parameters.
    """
    _version = '241'
    fluent_name = 'list'
    _python_name = 'list'
    return_type = 'object'

class print_all_to_console(Command):
    """
    Print all parameters value to console.
    """
    _version = '241'
    fluent_name = 'print-all-to-console'
    _python_name = 'print_all_to_console'
    return_type = 'object'

class write_all_to_file(Command):
    """
    Write all parameters value to file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '241'
    fluent_name = 'write-all-to-file'
    _python_name = 'write_all_to_file'
    argument_names = ['file_name', 'append_data']
    _child_classes = dict(
        file_name=file_name_1,
        append_data=append_data,
    )
    return_type = 'object'

class output_parameters_1(Group):
    """
    The output-parameters object.
    """
    _version = '241'
    fluent_name = 'output-parameters'
    _python_name = 'output_parameters'
    child_names = ['report_definitions']
    command_names = ['list', 'print_all_to_console', 'write_all_to_file']
    _child_classes = dict(
        report_definitions=report_definitions_1,
        list=list_5,
        print_all_to_console=print_all_to_console,
        write_all_to_file=write_all_to_file,
    )
    return_type = 'object'

class parameters(Group):
    """
    'parameters' child.
    """
    _version = '241'
    fluent_name = 'parameters'
    _python_name = 'parameters'
    child_names = ['enable_in_tui', 'input_parameters', 'output_parameters']
    _child_classes = dict(
        enable_in_tui=enable_in_tui,
        input_parameters=input_parameters_1,
        output_parameters=output_parameters_1,
    )
    return_type = 'object'

class thread_number_method(String, AllowedValuesMixin):
    """
    'thread_number_method' child.
    """
    _version = '241'
    fluent_name = 'thread-number-method'
    _python_name = 'thread_number_method'
    return_type = 'object'

class fixed_thread_number(Integer):
    """
    'fixed_thread_number' child.
    """
    _version = '241'
    fluent_name = 'fixed-thread-number'
    _python_name = 'fixed_thread_number'
    return_type = 'object'

class thread_number_control(Group):
    """
    Thread number control.
    """
    _version = '241'
    fluent_name = 'thread-number-control'
    _python_name = 'thread_number_control'
    child_names = ['thread_number_method', 'fixed_thread_number']
    _child_classes = dict(
        thread_number_method=thread_number_method,
        fixed_thread_number=fixed_thread_number,
    )
    return_type = 'object'

class check_verbosity_1(Integer):
    """
    Verbosity output of parallel check. Higher verbosity corresponds to more detailed information.
    """
    _version = '241'
    fluent_name = 'check-verbosity'
    _python_name = 'check_verbosity'
    return_type = 'object'

class case_file(Boolean):
    """
    Enable the use-case-file method for auto partitioning.
    """
    _version = '241'
    fluent_name = 'case-file'
    _python_name = 'case_file'
    return_type = 'object'

class across_zones(Boolean):
    """
    Enable auto partitioning by zone or by domain.
    """
    _version = '241'
    fluent_name = 'across-zones'
    _python_name = 'across_zones'
    return_type = 'object'

class load_vector(RealList):
    """
    Auto the partition load vector.
    """
    _version = '241'
    fluent_name = 'load-vector'
    _python_name = 'load_vector'
    return_type = 'object'

class pre_test(Boolean):
    """
    Auto partition pre-testing optimization.
    """
    _version = '241'
    fluent_name = 'pre-test'
    _python_name = 'pre_test'
    return_type = 'object'

class auto_1(Group):
    """
    The object.
    """
    _version = '241'
    fluent_name = 'auto'
    _python_name = 'auto'
    child_names = ['case_file', 'across_zones', 'method', 'load_vector', 'pre_test']
    _child_classes = dict(
        case_file=case_file,
        across_zones=across_zones,
        method=method_2,
        load_vector=load_vector,
        pre_test=pre_test,
    )
    return_type = 'object'

class across_zone_boundaries(Boolean):
    """
    'across_zone_boundaries' child.
    """
    _version = '241'
    fluent_name = 'across-zone-boundaries?'
    _python_name = 'across_zone_boundaries'
    return_type = 'object'

class cell_function_2(String, AllowedValuesMixin):
    """
    Cell function.
    """
    _version = '241'
    fluent_name = 'cell-function'
    _python_name = 'cell_function'
    return_type = 'object'

class load_distribution(RealList):
    """
    Partition load vector.
    """
    _version = '241'
    fluent_name = 'load-distribution'
    _python_name = 'load_distribution'
    return_type = 'object'

class merge_small_regions(Boolean):
    """
    'merge_small_regions' child.
    """
    _version = '241'
    fluent_name = 'merge-small-regions?'
    _python_name = 'merge_small_regions'
    return_type = 'object'

class max_merge_iterations(Integer):
    """
    'max_merge_iterations' child.
    """
    _version = '241'
    fluent_name = 'max-merge-iterations'
    _python_name = 'max_merge_iterations'
    return_type = 'object'

class merge(Group):
    """
    Partition merging optimization.
    """
    _version = '241'
    fluent_name = 'merge'
    _python_name = 'merge'
    child_names = ['merge_small_regions', 'max_merge_iterations']
    _child_classes = dict(
        merge_small_regions=merge_small_regions,
        max_merge_iterations=max_merge_iterations,
    )
    return_type = 'object'

class partition_origin_vector_child(Real):
    """
    'child_object_type' of partition_origin_vector.
    """
    _version = '241'
    fluent_name = 'child-object-type'
    _python_name = 'partition_origin_vector_child'
    return_type = 'object'

class partition_origin_vector(ListObject[partition_origin_vector_child]):
    """
    'partition_origin_vector' child.
    """
    _version = '241'
    fluent_name = 'partition-origin-vector'
    _python_name = 'partition_origin_vector'
    command_names = ['list_properties']
    _child_classes = dict(
        list_properties=list_properties,
    )
    child_object_type = partition_origin_vector_child
    return_type = 'object'

class pre_test_1(Boolean):
    """
    Partition pre-testing optimization.
    """
    _version = '241'
    fluent_name = 'pre-test?'
    _python_name = 'pre_test'
    return_type = 'object'

class smooth_partitioning(Boolean):
    """
    'smooth_partitioning' child.
    """
    _version = '241'
    fluent_name = 'smooth-partitioning?'
    _python_name = 'smooth_partitioning'
    return_type = 'object'

class max_smoothing_iterations(Integer):
    """
    'max_smoothing_iterations' child.
    """
    _version = '241'
    fluent_name = 'max-smoothing-iterations'
    _python_name = 'max_smoothing_iterations'
    return_type = 'object'

class smooth_1(Group):
    """
    Partition smoothing optimization.
    """
    _version = '241'
    fluent_name = 'smooth'
    _python_name = 'smooth'
    child_names = ['smooth_partitioning', 'max_smoothing_iterations']
    _child_classes = dict(
        smooth_partitioning=smooth_partitioning,
        max_smoothing_iterations=max_smoothing_iterations,
    )
    return_type = 'object'

class print_verbosity(Integer):
    """
    Partition print verbosity.
    """
    _version = '241'
    fluent_name = 'print-verbosity'
    _python_name = 'print_verbosity'
    return_type = 'object'

class origin_1(RealList):
    """
    Partition merging optimization.
    """
    _version = '241'
    fluent_name = 'origin'
    _python_name = 'origin'
    return_type = 'object'

class set_4(Real):
    """
    Laplace smoothing for mesh with stretched cells.
    """
    _version = '241'
    fluent_name = 'set'
    _python_name = 'set'
    return_type = 'object'

class laplace_smoothing(Group):
    """
    'laplace_smoothing' child.
    """
    _version = '241'
    fluent_name = 'laplace-smoothing'
    _python_name = 'laplace_smoothing'
    child_names = ['enabled', 'set']
    _child_classes = dict(
        enabled=enabled_15,
        set=set_4,
    )
    return_type = 'object'

class nfaces_as_weights_1(Boolean):
    """
    'nfaces_as_weights' child.
    """
    _version = '241'
    fluent_name = 'nfaces-as-weights?'
    _python_name = 'nfaces_as_weights'
    return_type = 'object'

class user_defined_value(Boolean):
    """
    'user_defined_value' child.
    """
    _version = '241'
    fluent_name = 'user-defined-value?'
    _python_name = 'user_defined_value'
    return_type = 'object'

class nfaces_as_weights(Group):
    """
    Use number of faces as weights.
    """
    _version = '241'
    fluent_name = 'nfaces-as-weights'
    _python_name = 'nfaces_as_weights'
    child_names = ['nfaces_as_weights', 'user_defined_value', 'value']
    _child_classes = dict(
        nfaces_as_weights=nfaces_as_weights_1,
        user_defined_value=user_defined_value,
        value=value_1,
    )
    return_type = 'object'

class face_area_as_weights(Boolean):
    """
    Use face area as connection weights.
    """
    _version = '241'
    fluent_name = 'face-area-as-weights?'
    _python_name = 'face_area_as_weights'
    return_type = 'object'

class use_layering(Boolean):
    """
    'use_layering' child.
    """
    _version = '241'
    fluent_name = 'use-layering'
    _python_name = 'use_layering'
    return_type = 'object'

class base_face_zone_for_partitioning(IntegerList):
    """
    'base_face_zone_for_partitioning' child.
    """
    _version = '241'
    fluent_name = 'base-face-zone-for-partitioning'
    _python_name = 'base_face_zone_for_partitioning'
    return_type = 'object'

class layering(Group):
    """
    Use layering for partitioning.
    """
    _version = '241'
    fluent_name = 'layering'
    _python_name = 'layering'
    child_names = ['use_layering', 'base_face_zone_for_partitioning']
    _child_classes = dict(
        use_layering=use_layering,
        base_face_zone_for_partitioning=base_face_zone_for_partitioning,
    )
    return_type = 'object'

class use(Boolean):
    """
    'use' child.
    """
    _version = '241'
    fluent_name = 'use?'
    _python_name = 'use'
    return_type = 'object'

class use_user_define_value(Boolean):
    """
    'use_user_define_value' child.
    """
    _version = '241'
    fluent_name = 'use-user-define-value?'
    _python_name = 'use_user_define_value'
    return_type = 'object'

class solid_thread_weight(Group):
    """
    Use solid thread weights.
    """
    _version = '241'
    fluent_name = 'solid-thread-weight'
    _python_name = 'solid_thread_weight'
    child_names = ['use', 'use_user_define_value', 'value']
    _child_classes = dict(
        use=use,
        use_user_define_value=use_user_define_value,
        value=value_1,
    )
    return_type = 'object'

class use_enhancement(Boolean):
    """
    Enhancement for mesh with stretched cells.
    """
    _version = '241'
    fluent_name = 'use-enhancement?'
    _python_name = 'use_enhancement'
    return_type = 'object'

class aspect_ratio_1(Real):
    """
    Enhancement for mesh with stretched cells.
    """
    _version = '241'
    fluent_name = 'aspect-ratio'
    _python_name = 'aspect_ratio'
    return_type = 'object'

class stretched_mesh_enhancement(Group):
    """
    Enhancement for mesh with stretched cells.
    """
    _version = '241'
    fluent_name = 'stretched-mesh-enhancement'
    _python_name = 'stretched_mesh_enhancement'
    child_names = ['use_enhancement', 'aspect_ratio']
    _child_classes = dict(
        use_enhancement=use_enhancement,
        aspect_ratio=aspect_ratio_1,
    )
    return_type = 'object'

class user_defined_6(Boolean):
    """
    'user_defined' child.
    """
    _version = '241'
    fluent_name = 'user-defined?'
    _python_name = 'user_defined'
    return_type = 'object'

class hybrid_optimization(Boolean):
    """
    'hybrid_optimization' child.
    """
    _version = '241'
    fluent_name = 'hybrid-optimization?'
    _python_name = 'hybrid_optimization'
    return_type = 'object'

class particle_weight(Group):
    """
    DPM particle weight.
    """
    _version = '241'
    fluent_name = 'particle-weight'
    _python_name = 'particle_weight'
    child_names = ['use', 'user_defined', 'value', 'hybrid_optimization']
    _child_classes = dict(
        use=use,
        user_defined=user_defined_6,
        value=value_1,
        hybrid_optimization=hybrid_optimization,
    )
    return_type = 'object'

class vof_free_surface_weight(Group):
    """
    VOF free surface weight.
    """
    _version = '241'
    fluent_name = 'vof-free-surface-weight'
    _python_name = 'vof_free_surface_weight'
    child_names = ['use', 'user_defined', 'value']
    _child_classes = dict(
        use=use,
        user_defined=user_defined_6,
        value=value_1,
    )
    return_type = 'object'

class isat_weight(Group):
    """
    ISAT weight.
    """
    _version = '241'
    fluent_name = 'isat-weight'
    _python_name = 'isat_weight'
    child_names = ['use', 'user_defined', 'value']
    _child_classes = dict(
        use=use,
        user_defined=user_defined_6,
        value=value_1,
    )
    return_type = 'object'

class fluid_solid_rebalance_after_read_case(Boolean):
    """
    Use optimal repartitioning after reading case file with significant solid and fluid zones.
    """
    _version = '241'
    fluent_name = 'fluid-solid-rebalance-after-read-case?'
    _python_name = 'fluid_solid_rebalance_after_read_case'
    return_type = 'object'

class model_weighted_partition(Boolean):
    """
    Model weighted partition.
    """
    _version = '241'
    fluent_name = 'model-weighted-partition'
    _python_name = 'model_weighted_partition'
    return_type = 'object'

class load_balancing(Boolean):
    """
    'load_balancing' child.
    """
    _version = '241'
    fluent_name = 'load-balancing?'
    _python_name = 'load_balancing'
    return_type = 'object'

class interval(Integer):
    """
    'interval' child.
    """
    _version = '241'
    fluent_name = 'interval'
    _python_name = 'interval'
    return_type = 'object'

class dpm_load_balancing(Group):
    """
    Enable automatic load balancing for DPM.
    """
    _version = '241'
    fluent_name = 'dpm-load-balancing'
    _python_name = 'dpm_load_balancing'
    child_names = ['load_balancing', 'threshold', 'interval']
    _child_classes = dict(
        load_balancing=load_balancing,
        threshold=threshold,
        interval=interval,
    )
    return_type = 'object'

class across_zones_1(Command):
    """
    Enable partitioning by zone or by domain.
    
    Parameters
    ----------
        across_zone_boundaries : bool
            'across_zone_boundaries' child.
    """
    _version = '241'
    fluent_name = 'across-zones'
    _python_name = 'across_zones'
    argument_names = ['across_zone_boundaries']
    _child_classes = dict(
        across_zone_boundaries=across_zone_boundaries,
    )
    return_type = 'object'

class all_off(Command):
    """
    Disable all optimization.
    """
    _version = '241'
    fluent_name = 'all-off'
    _python_name = 'all_off'
    return_type = 'object'

class all_on(Command):
    """
    Enable all optimization.
    """
    _version = '241'
    fluent_name = 'all-on'
    _python_name = 'all_on'
    return_type = 'object'

class set_3(Group):
    """
    The object.
    """
    _version = '241'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['across_zone_boundaries', 'cell_function', 'load_distribution', 'merge', 'partition_origin_vector', 'pre_test', 'smooth', 'print_verbosity', 'origin', 'laplace_smoothing', 'nfaces_as_weights', 'face_area_as_weights', 'layering', 'solid_thread_weight', 'stretched_mesh_enhancement', 'particle_weight', 'vof_free_surface_weight', 'isat_weight', 'fluid_solid_rebalance_after_read_case', 'model_weighted_partition', 'dpm_load_balancing']
    command_names = ['across_zones', 'all_off', 'all_on']
    _child_classes = dict(
        across_zone_boundaries=across_zone_boundaries,
        cell_function=cell_function_2,
        load_distribution=load_distribution,
        merge=merge,
        partition_origin_vector=partition_origin_vector,
        pre_test=pre_test_1,
        smooth=smooth_1,
        print_verbosity=print_verbosity,
        origin=origin_1,
        laplace_smoothing=laplace_smoothing,
        nfaces_as_weights=nfaces_as_weights,
        face_area_as_weights=face_area_as_weights,
        layering=layering,
        solid_thread_weight=solid_thread_weight,
        stretched_mesh_enhancement=stretched_mesh_enhancement,
        particle_weight=particle_weight,
        vof_free_surface_weight=vof_free_surface_weight,
        isat_weight=isat_weight,
        fluid_solid_rebalance_after_read_case=fluid_solid_rebalance_after_read_case,
        model_weighted_partition=model_weighted_partition,
        dpm_load_balancing=dpm_load_balancing,
        across_zones=across_zones_1,
        all_off=all_off,
        all_on=all_on,
    )
    return_type = 'object'

class number_of_partitions(Integer):
    """
    'number_of_partitions' child.
    """
    _version = '241'
    fluent_name = 'number-of-partitions'
    _python_name = 'number_of_partitions'
    return_type = 'object'

class combine_partition(Command):
    """
    Merge every N partitions.
    
    Parameters
    ----------
        number_of_partitions : int
            'number_of_partitions' child.
    """
    _version = '241'
    fluent_name = 'combine-partition'
    _python_name = 'combine_partition'
    argument_names = ['number_of_partitions']
    _child_classes = dict(
        number_of_partitions=number_of_partitions,
    )
    return_type = 'object'

class merge_iterations(Integer):
    """
    'merge_iterations' child.
    """
    _version = '241'
    fluent_name = 'merge-iterations'
    _python_name = 'merge_iterations'
    return_type = 'object'

class merge_clusters(Command):
    """
    Merge partition clusters.
    
    Parameters
    ----------
        merge_iterations : int
            'merge_iterations' child.
    """
    _version = '241'
    fluent_name = 'merge-clusters'
    _python_name = 'merge_clusters'
    argument_names = ['merge_iterations']
    _child_classes = dict(
        merge_iterations=merge_iterations,
    )
    return_type = 'object'

class partition_method(String, AllowedValuesMixin):
    """
    'partition_method' child.
    """
    _version = '241'
    fluent_name = 'partition-method'
    _python_name = 'partition_method'
    return_type = 'object'

class method_10(Command):
    """
    Partition the domain.
    
    Parameters
    ----------
        partition_method : str
            'partition_method' child.
        count : int
            'count' child.
    """
    _version = '241'
    fluent_name = 'method'
    _python_name = 'method'
    argument_names = ['partition_method', 'count']
    _child_classes = dict(
        partition_method=partition_method,
        count=count,
    )
    return_type = 'object'

class print_partitions(Command):
    """
    Print partition information.
    """
    _version = '241'
    fluent_name = 'print-partitions'
    _python_name = 'print_partitions'
    return_type = 'object'

class print_active_partitions(Command):
    """
    Print active partition information.
    """
    _version = '241'
    fluent_name = 'print-active-partitions'
    _python_name = 'print_active_partitions'
    return_type = 'object'

class print_stored_partitions(Command):
    """
    Print stored partition information.
    """
    _version = '241'
    fluent_name = 'print-stored-partitions'
    _python_name = 'print_stored_partitions'
    return_type = 'object'

class reorder_partitions(Command):
    """
    Reorder partitions.
    """
    _version = '241'
    fluent_name = 'reorder-partitions'
    _python_name = 'reorder_partitions'
    return_type = 'object'

class reorder_partitions_to_architecture(Command):
    """
    Reorder partitions to architecture.
    """
    _version = '241'
    fluent_name = 'reorder-partitions-to-architecture'
    _python_name = 'reorder_partitions_to_architecture'
    return_type = 'object'

class smoothing_iteration(Integer):
    """
    Maximum number of smoothing iterations.
    """
    _version = '241'
    fluent_name = 'smoothing-iteration'
    _python_name = 'smoothing_iteration'
    return_type = 'object'

class smooth_partition(Command):
    """
    Smooth partition interface.
    
    Parameters
    ----------
        smoothing_iteration : int
            Maximum number of smoothing iterations.
    """
    _version = '241'
    fluent_name = 'smooth-partition'
    _python_name = 'smooth_partition'
    argument_names = ['smoothing_iteration']
    _child_classes = dict(
        smoothing_iteration=smoothing_iteration,
    )
    return_type = 'object'

class use_stored_partitions(Command):
    """
    Use stored partitioning.
    """
    _version = '241'
    fluent_name = 'use-stored-partitions'
    _python_name = 'use_stored_partitions'
    return_type = 'object'

class partition_3(Group):
    """
    The partition domain object.
    """
    _version = '241'
    fluent_name = 'partition'
    _python_name = 'partition'
    child_names = ['auto', 'set']
    command_names = ['combine_partition', 'merge_clusters', 'method', 'print_partitions', 'print_active_partitions', 'print_stored_partitions', 'reorder_partitions', 'reorder_partitions_to_architecture', 'smooth_partition', 'use_stored_partitions']
    _child_classes = dict(
        auto=auto_1,
        set=set_3,
        combine_partition=combine_partition,
        merge_clusters=merge_clusters,
        method=method_10,
        print_partitions=print_partitions,
        print_active_partitions=print_active_partitions,
        print_stored_partitions=print_stored_partitions,
        reorder_partitions=reorder_partitions,
        reorder_partitions_to_architecture=reorder_partitions_to_architecture,
        smooth_partition=smooth_partition,
        use_stored_partitions=use_stored_partitions,
    )
    return_type = 'object'

class partition_mask(IntegerList):
    """
    Partition mask.
    """
    _version = '241'
    fluent_name = 'partition-mask'
    _python_name = 'partition_mask'
    return_type = 'object'

class verbosity_15(Integer):
    """
    The parallel verbosity.
    """
    _version = '241'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class time_out(Real):
    """
    Spawn timeout seconds.
    """
    _version = '241'
    fluent_name = 'time-out'
    _python_name = 'time_out'
    return_type = 'object'

class fast_io(Boolean):
    """
    Use fast I/O option.
    """
    _version = '241'
    fluent_name = 'fast-io?'
    _python_name = 'fast_io'
    return_type = 'object'

class set_2(Group):
    """
    'set' child.
    """
    _version = '241'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['partition_mask', 'verbosity', 'time_out', 'fast_io']
    _child_classes = dict(
        partition_mask=partition_mask,
        verbosity=verbosity_15,
        time_out=time_out,
        fast_io=fast_io,
    )
    return_type = 'object'

class use_multi_physics(Boolean):
    """
    'use_multi_physics' child.
    """
    _version = '241'
    fluent_name = 'use-multi-physics?'
    _python_name = 'use_multi_physics'
    return_type = 'object'

class physical_models_2(Group):
    """
    Use physical-models load balancing?.
    """
    _version = '241'
    fluent_name = 'physical-models'
    _python_name = 'physical_models'
    child_names = ['use_multi_physics', 'threshold', 'interval']
    _child_classes = dict(
        use_multi_physics=use_multi_physics,
        threshold=threshold,
        interval=interval,
    )
    return_type = 'object'

class auto_2(Boolean):
    """
    'auto' child.
    """
    _version = '241'
    fluent_name = 'auto?'
    _python_name = 'auto'
    return_type = 'object'

class dynamic_mesh(Group):
    """
    Use load balancing for dynamic mesh?.
    """
    _version = '241'
    fluent_name = 'dynamic-mesh'
    _python_name = 'dynamic_mesh'
    child_names = ['use', 'auto', 'threshold', 'interval']
    _child_classes = dict(
        use=use,
        auto=auto_2,
        threshold=threshold,
        interval=interval,
    )
    return_type = 'object'

class mesh_adaption(Group):
    """
    Use load balancing for mesh adaption?.
    """
    _version = '241'
    fluent_name = 'mesh-adaption'
    _python_name = 'mesh_adaption'
    child_names = ['use', 'threshold']
    _child_classes = dict(
        use=use,
        threshold=threshold,
    )
    return_type = 'object'

class load_balance(Group):
    """
    'load_balance' child.
    """
    _version = '241'
    fluent_name = 'load-balance'
    _python_name = 'load_balance'
    child_names = ['physical_models', 'dynamic_mesh', 'mesh_adaption']
    _child_classes = dict(
        physical_models=physical_models_2,
        dynamic_mesh=dynamic_mesh,
        mesh_adaption=mesh_adaption,
    )
    return_type = 'object'

class enabled_23(Boolean):
    """
    Enable/disable loosely coupled conjugate heat transfer.
    """
    _version = '241'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class iter_per_coupling_count(Integer):
    """
    'iter_per_coupling_count' child.
    """
    _version = '241'
    fluent_name = 'iter-per-coupling-count'
    _python_name = 'iter_per_coupling_count'
    return_type = 'object'

class method_11(String, AllowedValuesMixin):
    """
    The method for fluid and solid zone coupling.
    """
    _version = '241'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class interval_1(Real):
    """
    'interval' child.
    """
    _version = '241'
    fluent_name = 'interval'
    _python_name = 'interval'
    return_type = 'object'

class iteration(Integer):
    """
    'iteration' child.
    """
    _version = '241'
    fluent_name = 'iteration'
    _python_name = 'iteration'
    return_type = 'object'

class single_session_coupling(Group):
    """
    'single_session_coupling' child.
    """
    _version = '241'
    fluent_name = 'single-session-coupling'
    _python_name = 'single_session_coupling'
    child_names = ['method', 'type', 'interval', 'frequency', 'iteration']
    _child_classes = dict(
        method=method_11,
        type=type_2,
        interval=interval_1,
        frequency=frequency_1,
        iteration=iteration,
    )
    return_type = 'object'

class two_session_coupling(Group):
    """
    'two_session_coupling' child.
    """
    _version = '241'
    fluent_name = 'two-session-coupling'
    _python_name = 'two_session_coupling'
    child_names = ['method', 'type', 'frequency']
    _child_classes = dict(
        method=method_11,
        type=type_2,
        frequency=frequency_1,
    )
    return_type = 'object'

class coupling(Group):
    """
    The coupling method and when coupling takes place.
    """
    _version = '241'
    fluent_name = 'coupling'
    _python_name = 'coupling'
    child_names = ['iter_per_coupling_count', 'single_session_coupling', 'two_session_coupling']
    _child_classes = dict(
        iter_per_coupling_count=iter_per_coupling_count,
        single_session_coupling=single_session_coupling,
        two_session_coupling=two_session_coupling,
    )
    return_type = 'object'

class process_count(Integer):
    """
    'process_count' child.
    """
    _version = '241'
    fluent_name = 'process-count'
    _python_name = 'process_count'
    return_type = 'object'

class host_name(String):
    """
    'host_name' child.
    """
    _version = '241'
    fluent_name = 'host-name'
    _python_name = 'host_name'
    return_type = 'object'

class helper_session_setup(Group):
    """
    Setup helper session for multidomain conjugate heat transfer.
    """
    _version = '241'
    fluent_name = 'helper-session-setup'
    _python_name = 'helper_session_setup'
    child_names = ['process_count', 'host_name']
    _child_classes = dict(
        process_count=process_count,
        host_name=host_name,
    )
    return_type = 'object'

class helper_session(Boolean):
    """
    Setup session mode (single/multiple) for multidomain conjugate heat transfer.
    """
    _version = '241'
    fluent_name = 'helper-session?'
    _python_name = 'helper_session'
    return_type = 'object'

class set_5(Group):
    """
    The set object.
    """
    _version = '241'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['coupling', 'helper_session_setup', 'helper_session']
    _child_classes = dict(
        coupling=coupling,
        helper_session_setup=helper_session_setup,
        helper_session=helper_session,
    )
    return_type = 'object'

class conjugate_heat_transfer(Group):
    """
    The conjugate heat transfer object.
    """
    _version = '241'
    fluent_name = 'conjugate-heat-transfer'
    _python_name = 'conjugate_heat_transfer'
    child_names = ['enabled', 'set']
    _child_classes = dict(
        enabled=enabled_23,
        set=set_5,
    )
    return_type = 'object'

class iter_count_4(Integer):
    """
    'iter_count' child.
    """
    _version = '241'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'
    return_type = 'object'

class time_steps_count(Integer):
    """
    'time_steps_count' child.
    """
    _version = '241'
    fluent_name = 'time-steps-count'
    _python_name = 'time_steps_count'
    return_type = 'object'

class iter_per_time_step_count(Integer):
    """
    'iter_per_time_step_count' child.
    """
    _version = '241'
    fluent_name = 'iter-per-time-step-count'
    _python_name = 'iter_per_time_step_count'
    return_type = 'object'

class iterate_1(Command):
    """
    Iteration the multidomain conjugate heat transfer.
    
    Parameters
    ----------
        iter_count : int
            'iter_count' child.
        time_steps_count : int
            'time_steps_count' child.
        iter_per_time_step_count : int
            'iter_per_time_step_count' child.
    """
    _version = '241'
    fluent_name = 'iterate'
    _python_name = 'iterate'
    argument_names = ['iter_count', 'time_steps_count', 'iter_per_time_step_count']
    _child_classes = dict(
        iter_count=iter_count_4,
        time_steps_count=time_steps_count,
        iter_per_time_step_count=iter_per_time_step_count,
    )
    return_type = 'object'

class dual_time_iterate_1(Command):
    """
    Dual-time iterate the multidomain conjugate heat transfer.
    
    Parameters
    ----------
        iter_count : int
            'iter_count' child.
        time_steps_count : int
            'time_steps_count' child.
        iter_per_time_step_count : int
            'iter_per_time_step_count' child.
    """
    _version = '241'
    fluent_name = 'dual-time-iterate'
    _python_name = 'dual_time_iterate'
    argument_names = ['iter_count', 'time_steps_count', 'iter_per_time_step_count']
    _child_classes = dict(
        iter_count=iter_count_4,
        time_steps_count=time_steps_count,
        iter_per_time_step_count=iter_per_time_step_count,
    )
    return_type = 'object'

class solve_1(Group):
    """
    'solve' child.
    """
    _version = '241'
    fluent_name = 'solve'
    _python_name = 'solve'
    command_names = ['iterate', 'dual_time_iterate']
    _child_classes = dict(
        iterate=iterate_1,
        dual_time_iterate=dual_time_iterate_1,
    )
    return_type = 'object'

class multidomain(Group):
    """
    The multidomain architecture object.
    """
    _version = '241'
    fluent_name = 'multidomain'
    _python_name = 'multidomain'
    child_names = ['conjugate_heat_transfer', 'solve']
    _child_classes = dict(
        conjugate_heat_transfer=conjugate_heat_transfer,
        solve=solve_1,
    )
    return_type = 'object'

class shell_script_path(String):
    """
    The Fluent shell script path.
    """
    _version = '241'
    fluent_name = 'shell-script-path'
    _python_name = 'shell_script_path'
    return_type = 'object'

class delete_all_compute_nodes(Boolean):
    """
    'delete_all_compute_nodes' child.
    """
    _version = '241'
    fluent_name = 'delete-all-compute-nodes?'
    _python_name = 'delete_all_compute_nodes'
    return_type = 'object'

class kill_all_nodes(Command):
    """
    Delete all compute nodes from virtual machine.
    
    Parameters
    ----------
        delete_all_compute_nodes : bool
            'delete_all_compute_nodes' child.
    """
    _version = '241'
    fluent_name = 'kill-all-nodes'
    _python_name = 'kill_all_nodes'
    argument_names = ['delete_all_compute_nodes']
    _child_classes = dict(
        delete_all_compute_nodes=delete_all_compute_nodes,
    )
    return_type = 'object'

class compute_node(Integer):
    """
    'compute_node' child.
    """
    _version = '241'
    fluent_name = 'compute-node'
    _python_name = 'compute_node'
    return_type = 'object'

class invalidate_case(Boolean):
    """
    'invalidate_case' child.
    """
    _version = '241'
    fluent_name = 'invalidate-case?'
    _python_name = 'invalidate_case'
    return_type = 'object'

class kill_node(Command):
    """
    'kill_node' command.
    """
    _version = '241'
    fluent_name = 'kill-node'
    _python_name = 'kill_node'
    argument_names = ['compute_node', 'invalidate_case']
    _child_classes = dict(
        compute_node=compute_node,
        invalidate_case=invalidate_case,
    )
    return_type = 'object'

class hostname(String):
    """
    'hostname' child.
    """
    _version = '241'
    fluent_name = 'hostname'
    _python_name = 'hostname'
    return_type = 'object'

class username(String):
    """
    'username' child.
    """
    _version = '241'
    fluent_name = 'username'
    _python_name = 'username'
    return_type = 'object'

class spawn_node(Command):
    """
    Spawn a compute node process on a specified machine.
    
    Parameters
    ----------
        hostname : str
            'hostname' child.
        username : str
            'username' child.
    """
    _version = '241'
    fluent_name = 'spawn-node'
    _python_name = 'spawn_node'
    argument_names = ['hostname', 'username']
    _child_classes = dict(
        hostname=hostname,
        username=username,
    )
    return_type = 'object'

class host_file(Filename):
    """
    'host_file' child.
    """
    _version = '241'
    fluent_name = 'host-file'
    _python_name = 'host_file'
    return_type = 'object'

class load_hosts(Command):
    """
    Read a hosts file.
    
    Parameters
    ----------
        host_file : str
            'host_file' child.
    """
    _version = '241'
    fluent_name = 'load-hosts'
    _python_name = 'load_hosts'
    argument_names = ['host_file']
    _child_classes = dict(
        host_file=host_file,
    )
    return_type = 'object'

class save_hosts(Command):
    """
    Write a hosts file.
    
    Parameters
    ----------
        host_file : str
            'host_file' child.
    """
    _version = '241'
    fluent_name = 'save-hosts'
    _python_name = 'save_hosts'
    argument_names = ['host_file']
    _child_classes = dict(
        host_file=host_file,
    )
    return_type = 'object'

class network_1(Group):
    """
    The network configuration object.
    """
    _version = '241'
    fluent_name = 'network'
    _python_name = 'network'
    child_names = ['shell_script_path']
    command_names = ['kill_all_nodes', 'kill_node', 'spawn_node', 'load_hosts', 'save_hosts']
    _child_classes = dict(
        shell_script_path=shell_script_path,
        kill_all_nodes=kill_all_nodes,
        kill_node=kill_node,
        spawn_node=spawn_node,
        load_hosts=load_hosts,
        save_hosts=save_hosts,
    )
    return_type = 'object'

class usage(Command):
    """
    Print solver timer.
    """
    _version = '241'
    fluent_name = 'usage'
    _python_name = 'usage'
    return_type = 'object'

class reset_3(Command):
    """
    Reset domain timers.
    """
    _version = '241'
    fluent_name = 'reset'
    _python_name = 'reset'
    return_type = 'object'

class timer(Group):
    """
    'timer' child.
    """
    _version = '241'
    fluent_name = 'timer'
    _python_name = 'timer'
    command_names = ['usage', 'reset']
    _child_classes = dict(
        usage=usage,
        reset=reset_3,
    )
    return_type = 'object'

class check_1(Command):
    """
    Parallel check.
    """
    _version = '241'
    fluent_name = 'check'
    _python_name = 'check'
    return_type = 'object'

class show_connectivity(Command):
    """
    Show machine connectivity.
    
    Parameters
    ----------
        compute_node : int
            'compute_node' child.
    """
    _version = '241'
    fluent_name = 'show-connectivity'
    _python_name = 'show_connectivity'
    argument_names = ['compute_node']
    _child_classes = dict(
        compute_node=compute_node,
    )
    return_type = 'object'

class latency(Command):
    """
    Show network latency.
    """
    _version = '241'
    fluent_name = 'latency'
    _python_name = 'latency'
    return_type = 'object'

class bandwidth(Command):
    """
    Show network bandwidth.
    """
    _version = '241'
    fluent_name = 'bandwidth'
    _python_name = 'bandwidth'
    return_type = 'object'

class parallel(Group):
    """
    'parallel' child.
    """
    _version = '241'
    fluent_name = 'parallel'
    _python_name = 'parallel'
    child_names = ['thread_number_control', 'check_verbosity', 'partition', 'set', 'load_balance', 'multidomain', 'network', 'timer']
    command_names = ['check', 'show_connectivity', 'latency', 'bandwidth']
    _child_classes = dict(
        thread_number_control=thread_number_control,
        check_verbosity=check_verbosity_1,
        partition=partition_3,
        set=set_2,
        load_balance=load_balance,
        multidomain=multidomain,
        network=network_1,
        timer=timer,
        check=check_1,
        show_connectivity=show_connectivity,
        latency=latency,
        bandwidth=bandwidth,
    )
    return_type = 'object'

class root(Group):
    """
    'root' object.
    """
    _version = '241'
    fluent_name = ''
    _python_name = 'root'
    child_names = ['file', 'mesh', 'server', 'setup', 'solution', 'results', 'parametric_studies', 'current_parametric_study', 'parameters', 'parallel']
    _child_classes = dict(
        file=file,
        mesh=mesh,
        server=server,
        setup=setup,
        solution=solution,
        results=results,
        parametric_studies=parametric_studies,
        current_parametric_study=current_parametric_study,
        parameters=parameters,
        parallel=parallel,
    )
    return_type = 'object'

