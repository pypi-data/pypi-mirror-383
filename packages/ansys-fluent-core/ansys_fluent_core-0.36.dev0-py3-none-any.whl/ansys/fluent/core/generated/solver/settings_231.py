#
# This is an auto-generated file.  DO NOT EDIT!
#

from ansys.fluent.core.solver.flobject import *

from ansys.fluent.core.solver.flobject import (
    _ChildNamedObjectAccessorMixin,
    _NonCreatableNamedObjectMixin,
    _InputFile,
    _OutputFile,
    _InOutFile,
    _FlStringConstant,
)

SHASH = "765e2322465ad0dce0f3a485fecd7758579360f595e5794ec0bbd90ed82ae94e"

class single_precision_coordinates(Boolean):
    """
    Specifies whether to write nodal coordinates in single precision.
    """
    _version = '231'
    fluent_name = 'single-precision-coordinates?'
    _python_name = 'single_precision_coordinates'
    return_type = 'object'

class binary_legacy_files(Boolean):
    """
    Specifies whether to write binary or text format case and data files.
    """
    _version = '231'
    fluent_name = 'binary-legacy-files?'
    _python_name = 'binary_legacy_files'
    return_type = 'object'

class cff_files(Boolean):
    """
    Specifies whether to write ANSYS common fluids format (CFF) files or legacy case and data files.
    """
    _version = '231'
    fluent_name = 'cff-files?'
    _python_name = 'cff_files'
    return_type = 'object'

class async_optimize(Boolean):
    """
    Specifies whether to optimize file IO using scratch disks and asynchronous operations.
    """
    _version = '231'
    fluent_name = 'async-optimize?'
    _python_name = 'async_optimize'
    return_type = 'object'

class write_pdat(Boolean):
    """
    Specifies whether to attempt to save pdat files.
    """
    _version = '231'
    fluent_name = 'write-pdat?'
    _python_name = 'write_pdat'
    return_type = 'object'

class confirm_overwrite(Boolean):
    """
    Specifies whether to confirm attempts to overwrite existing files.
    """
    _version = '231'
    fluent_name = 'confirm-overwrite?'
    _python_name = 'confirm_overwrite'
    return_type = 'object'

class enable_auto_creation_of_scp_file(Boolean):
    """
    Enable/disable automatic creation of scp file during case write.
    """
    _version = '231'
    fluent_name = 'enable-auto-creation-of-scp-file?'
    _python_name = 'enable_auto_creation_of_scp_file'
    return_type = 'object'

class file_name(String):
    """
    'file_name' child.
    """
    _version = '231'
    fluent_name = 'file-name'
    _python_name = 'file_name'
    return_type = 'object'

class overwrite(Boolean):
    """
    'overwrite' child.
    """
    _version = '231'
    fluent_name = 'overwrite?'
    _python_name = 'overwrite'
    return_type = 'object'

class write_sc_file(Command):
    """
    Write a Fluent Input File for System Coupling.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'write-sc-file'
    _python_name = 'write_sc_file'
    argument_names = ['file_name', 'overwrite']
    _child_classes = dict(
        file_name=file_name,
        overwrite=overwrite,
    )
    return_type = 'object'

class sc_def_file_settings(Group):
    """
    File object.
    """
    _version = '231'
    fluent_name = 'sc-def-file-settings'
    _python_name = 'sc_def_file_settings'
    child_names = ['enable_auto_creation_of_scp_file']
    command_names = ['write_sc_file']
    _child_classes = dict(
        enable_auto_creation_of_scp_file=enable_auto_creation_of_scp_file,
        write_sc_file=write_sc_file,
    )
    return_type = 'object'

class set_filetype(Boolean):
    """
    'set_filetype' child.
    """
    _version = '231'
    fluent_name = 'set-filetype?'
    _python_name = 'set_filetype'
    return_type = 'object'

class set_cgns_export_filetype(Command):
    """
    Select HDF5 or ADF as file format for CGNS.
    
    Parameters
    ----------
        set_filetype : bool
            'set_filetype' child.
    """
    _version = '231'
    fluent_name = 'set-cgns-export-filetype'
    _python_name = 'set_cgns_export_filetype'
    argument_names = ['set_filetype']
    _child_classes = dict(
        set_filetype=set_filetype,
    )
    return_type = 'object'

class settings(Group):
    """
    The export settings object.
    """
    _version = '231'
    fluent_name = 'settings'
    _python_name = 'settings'
    command_names = ['set_cgns_export_filetype']
    _child_classes = dict(
        set_cgns_export_filetype=set_cgns_export_filetype,
    )
    return_type = 'object'

class name(Filename):
    """
    'name' child.
    """
    _version = '231'
    fluent_name = 'name'
    _python_name = 'name'
    return_type = 'object'

class surface_name_list(StringList):
    """
    'surface_name_list' child.
    """
    _version = '231'
    fluent_name = 'surface-name-list'
    _python_name = 'surface_name_list'
    return_type = 'object'

class structural_analysis(Boolean):
    """
    'structural_analysis' child.
    """
    _version = '231'
    fluent_name = 'structural-analysis?'
    _python_name = 'structural_analysis'
    return_type = 'object'

class write_loads(Boolean):
    """
    'write_loads' child.
    """
    _version = '231'
    fluent_name = 'write-loads?'
    _python_name = 'write_loads'
    return_type = 'object'

class loads(StringList, AllowedValuesMixin):
    """
    'loads' child.
    """
    _version = '231'
    fluent_name = 'loads'
    _python_name = 'loads'
    return_type = 'object'

class abaqus(Command):
    """
    Write an ABAQUS file.
    
    Parameters
    ----------
        name : str
            'name' child.
        surface_name_list : List
            'surface_name_list' child.
        structural_analysis : bool
            'structural_analysis' child.
        write_loads : bool
            'write_loads' child.
        loads : List
            'loads' child.
    """
    _version = '231'
    fluent_name = 'abaqus'
    _python_name = 'abaqus'
    argument_names = ['name', 'surface_name_list', 'structural_analysis', 'write_loads', 'loads']
    _child_classes = dict(
        name=name,
        surface_name_list=surface_name_list,
        structural_analysis=structural_analysis,
        write_loads=write_loads,
        loads=loads,
    )
    return_type = 'object'

class thread_name_list(StringList):
    """
    'thread_name_list' child.
    """
    _version = '231'
    fluent_name = 'thread-name-list'
    _python_name = 'thread_name_list'
    return_type = 'object'

class mechanical_apdl(Command):
    """
    Write an Mechanical APDL file.
    
    Parameters
    ----------
        name : str
            'name' child.
        thread_name_list : List
            'thread_name_list' child.
    """
    _version = '231'
    fluent_name = 'mechanical-apdl'
    _python_name = 'mechanical_apdl'
    argument_names = ['name', 'thread_name_list']
    _child_classes = dict(
        name=name,
        thread_name_list=thread_name_list,
    )
    return_type = 'object'

class mechanical_apdl_input(Command):
    """
    Write an Mechanical APDL Input file.
    
    Parameters
    ----------
        name : str
            'name' child.
        surface_name_list : List
            'surface_name_list' child.
        structural_analysis : bool
            'structural_analysis' child.
        write_loads : bool
            'write_loads' child.
        loads : List
            'loads' child.
    """
    _version = '231'
    fluent_name = 'mechanical-apdl-input'
    _python_name = 'mechanical_apdl_input'
    argument_names = ['name', 'surface_name_list', 'structural_analysis', 'write_loads', 'loads']
    _child_classes = dict(
        name=name,
        surface_name_list=surface_name_list,
        structural_analysis=structural_analysis,
        write_loads=write_loads,
        loads=loads,
    )
    return_type = 'object'

class wall_function(Boolean):
    """
    'wall_function' child.
    """
    _version = '231'
    fluent_name = 'wall-function?'
    _python_name = 'wall_function'
    return_type = 'object'

class custom_heat_flux(Command):
    """
    Write a generic file for heat transfer.
    
    Parameters
    ----------
        name : str
            'name' child.
        wall_function : bool
            'wall_function' child.
        surface_name_list : List
            'surface_name_list' child.
    """
    _version = '231'
    fluent_name = 'custom-heat-flux'
    _python_name = 'custom_heat_flux'
    argument_names = ['name', 'wall_function', 'surface_name_list']
    _child_classes = dict(
        name=name,
        wall_function=wall_function,
        surface_name_list=surface_name_list,
    )
    return_type = 'object'

class icemcfd_for_icepak(Command):
    """
    Write a binary ICEMCFD domain file.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '231'
    fluent_name = 'icemcfd-for-icepak'
    _python_name = 'icemcfd_for_icepak'
    argument_names = ['name']
    _child_classes = dict(
        name=name,
    )
    return_type = 'object'

class fast_mesh(Command):
    """
    Write a FAST/Plot3D unstructured mesh file.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '231'
    fluent_name = 'fast-mesh'
    _python_name = 'fast_mesh'
    argument_names = ['name']
    _child_classes = dict(
        name=name,
    )
    return_type = 'object'

class fast_solution(Command):
    """
    Write a FAST/Plot3D unstructured solution file.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '231'
    fluent_name = 'fast-solution'
    _python_name = 'fast_solution'
    argument_names = ['name']
    _child_classes = dict(
        name=name,
    )
    return_type = 'object'

class fast_velocity(Command):
    """
    Write a FAST/Plot3D unstructured vector function file.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '231'
    fluent_name = 'fast-velocity'
    _python_name = 'fast_velocity'
    argument_names = ['name']
    _child_classes = dict(
        name=name,
    )
    return_type = 'object'

class htc_on_walls(Boolean):
    """
    'htc_on_walls' child.
    """
    _version = '231'
    fluent_name = 'htc-on-walls?'
    _python_name = 'htc_on_walls'
    return_type = 'object'

class taitherm(Command):
    """
    Write a TAITherm file.
    
    Parameters
    ----------
        name : str
            'name' child.
        surface_name_list : List
            'surface_name_list' child.
        wall_function : bool
            'wall_function' child.
        htc_on_walls : bool
            'htc_on_walls' child.
    """
    _version = '231'
    fluent_name = 'taitherm'
    _python_name = 'taitherm'
    argument_names = ['name', 'surface_name_list', 'wall_function', 'htc_on_walls']
    _child_classes = dict(
        name=name,
        surface_name_list=surface_name_list,
        wall_function=wall_function,
        htc_on_walls=htc_on_walls,
    )
    return_type = 'object'

class export(Group):
    """
    'export' child.
    """
    _version = '231'
    fluent_name = 'export'
    _python_name = 'export'
    child_names = ['sc_def_file_settings', 'settings']
    command_names = ['abaqus', 'mechanical_apdl', 'mechanical_apdl_input', 'custom_heat_flux', 'icemcfd_for_icepak', 'fast_mesh', 'fast_solution', 'fast_velocity', 'taitherm']
    _child_classes = dict(
        sc_def_file_settings=sc_def_file_settings,
        settings=settings,
        abaqus=abaqus,
        mechanical_apdl=mechanical_apdl,
        mechanical_apdl_input=mechanical_apdl_input,
        custom_heat_flux=custom_heat_flux,
        icemcfd_for_icepak=icemcfd_for_icepak,
        fast_mesh=fast_mesh,
        fast_solution=fast_solution,
        fast_velocity=fast_velocity,
        taitherm=taitherm,
    )
    return_type = 'object'

class create_zones_from_ccl(Boolean):
    """
    'create_zones_from_ccl' child.
    """
    _version = '231'
    fluent_name = 'create-zones-from-ccl?'
    _python_name = 'create_zones_from_ccl'
    return_type = 'object'

class file_type(String, AllowedValuesMixin):
    """
    'file_type' child.
    """
    _version = '231'
    fluent_name = 'file-type'
    _python_name = 'file_type'
    return_type = 'object'

class file_name_1(Filename):
    """
    'file_name' child.
    """
    _version = '231'
    fluent_name = 'file-name'
    _python_name = 'file_name'
    return_type = 'object'

class read_1(Command):
    """
    'read' command.
    """
    _version = '231'
    fluent_name = 'read'
    _python_name = 'read'
    argument_names = ['file_type', 'file_name']
    _child_classes = dict(
        file_type=file_type,
        file_name=file_name_1,
    )
    return_type = 'object'

class report_each_line(Boolean):
    """
    Enable/disable reporting after reading each line.
    """
    _version = '231'
    fluent_name = 'report-each-line?'
    _python_name = 'report_each_line'
    return_type = 'object'

class chemkin_report_each_line(Command):
    """
    'chemkin_report_each_line' command.
    """
    _version = '231'
    fluent_name = 'chemkin-report-each-line?'
    _python_name = 'chemkin_report_each_line'
    argument_names = ['report_each_line']
    _child_classes = dict(
        report_each_line=report_each_line,
    )
    return_type = 'object'

class import_fmu(Command):
    """
    Import a FMU file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '231'
    fluent_name = 'import-fmu'
    _python_name = 'import_fmu'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class import_(Group):
    """
    'import' child.
    """
    _version = '231'
    fluent_name = 'import'
    _python_name = 'import_'
    child_names = ['create_zones_from_ccl']
    command_names = ['read', 'chemkin_report_each_line', 'import_fmu']
    _child_classes = dict(
        create_zones_from_ccl=create_zones_from_ccl,
        read=read_1,
        chemkin_report_each_line=chemkin_report_each_line,
        import_fmu=import_fmu,
    )
    return_type = 'object'

class project_filename(String):
    """
    'project_filename' child.
    """
    _version = '231'
    fluent_name = 'project-filename'
    _python_name = 'project_filename'
    return_type = 'object'

class new(Command):
    """
    Create New Project.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
    """
    _version = '231'
    fluent_name = 'new'
    _python_name = 'new'
    argument_names = ['project_filename']
    _child_classes = dict(
        project_filename=project_filename,
    )
    return_type = 'object'

class load_case(Boolean):
    """
    'load_case' child.
    """
    _version = '231'
    fluent_name = 'load-case'
    _python_name = 'load_case'
    return_type = 'object'

class open(Command):
    """
    Open project.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
        load_case : bool
            'load_case' child.
    """
    _version = '231'
    fluent_name = 'open'
    _python_name = 'open'
    argument_names = ['project_filename', 'load_case']
    _child_classes = dict(
        project_filename=project_filename,
        load_case=load_case,
    )
    return_type = 'object'

class save(Command):
    """
    Save Project.
    """
    _version = '231'
    fluent_name = 'save'
    _python_name = 'save'
    return_type = 'object'

class save_as(Command):
    """
    Save As Project.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
    """
    _version = '231'
    fluent_name = 'save-as'
    _python_name = 'save_as'
    argument_names = ['project_filename']
    _child_classes = dict(
        project_filename=project_filename,
    )
    return_type = 'object'

class convert_to_managed(Boolean):
    """
    'convert_to_managed' child.
    """
    _version = '231'
    fluent_name = 'convert-to-managed'
    _python_name = 'convert_to_managed'
    return_type = 'object'

class save_as_copy(Command):
    """
    Save As Project.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
        convert_to_managed : bool
            'convert_to_managed' child.
    """
    _version = '231'
    fluent_name = 'save-as-copy'
    _python_name = 'save_as_copy'
    argument_names = ['project_filename', 'convert_to_managed']
    _child_classes = dict(
        project_filename=project_filename,
        convert_to_managed=convert_to_managed,
    )
    return_type = 'object'

class archive_name(String):
    """
    'archive_name' child.
    """
    _version = '231'
    fluent_name = 'archive-name'
    _python_name = 'archive_name'
    return_type = 'object'

class archive(Command):
    """
    Archive Project.
    
    Parameters
    ----------
        archive_name : str
            'archive_name' child.
    """
    _version = '231'
    fluent_name = 'archive'
    _python_name = 'archive'
    argument_names = ['archive_name']
    _child_classes = dict(
        archive_name=archive_name,
    )
    return_type = 'object'

class parametric_project(Group):
    """
    'parametric_project' child.
    """
    _version = '231'
    fluent_name = 'parametric-project'
    _python_name = 'parametric_project'
    command_names = ['new', 'open', 'save', 'save_as', 'save_as_copy', 'archive']
    _child_classes = dict(
        new=new,
        open=open,
        save=save,
        save_as=save_as,
        save_as_copy=save_as_copy,
        archive=archive,
    )
    return_type = 'object'

class case_frequency(String, AllowedValuesMixin):
    """
    The preference for saving case files.
    """
    _version = '231'
    fluent_name = 'case-frequency'
    _python_name = 'case_frequency'
    return_type = 'object'

class data_frequency(Real):
    """
    The iteration or time step increment for saving data files.
    """
    _version = '231'
    fluent_name = 'data-frequency'
    _python_name = 'data_frequency'
    return_type = 'object'

class root_name(String):
    """
    The root name for auto-saved files. The number of iterations or time steps will be appended to this root name.
    """
    _version = '231'
    fluent_name = 'root-name'
    _python_name = 'root_name'
    return_type = 'object'

class retain_most_recent_files(Boolean):
    """
    After the maximum (as in max-files) is reached, a file will be deleted for each file saved.
    """
    _version = '231'
    fluent_name = 'retain-most-recent-files?'
    _python_name = 'retain_most_recent_files'
    return_type = 'object'

class max_files(Integer):
    """
    The maximum number of data files to save. After the maximum is reached, a file will be deleted for each file saved.
    """
    _version = '231'
    fluent_name = 'max-files'
    _python_name = 'max_files'
    return_type = 'object'

class file_suffix_type(String, AllowedValuesMixin):
    """
    'file_suffix_type' child.
    """
    _version = '231'
    fluent_name = 'file-suffix-type'
    _python_name = 'file_suffix_type'
    return_type = 'object'

class file_decimal_digit(Integer):
    """
    'file_decimal_digit' child.
    """
    _version = '231'
    fluent_name = 'file-decimal-digit'
    _python_name = 'file_decimal_digit'
    return_type = 'object'

class append_file_name_with(Group):
    """
    The suffix for auto-saved files. The file name can be appended by flow-time, time-step value or by user specified flags in file name.
    """
    _version = '231'
    fluent_name = 'append-file-name-with'
    _python_name = 'append_file_name_with'
    child_names = ['file_suffix_type', 'file_decimal_digit']
    _child_classes = dict(
        file_suffix_type=file_suffix_type,
        file_decimal_digit=file_decimal_digit,
    )
    return_type = 'object'

class frequency_type(String, AllowedValuesMixin):
    """
    The auto save frequency type to either time-step or crank-angle and set the corresponding frequency.
    """
    _version = '231'
    fluent_name = 'frequency-type'
    _python_name = 'frequency_type'
    return_type = 'object'

class save_frequency(Real):
    """
    'save_frequency' child.
    """
    _version = '231'
    fluent_name = 'save-frequency'
    _python_name = 'save_frequency'
    return_type = 'object'

class save_data_file_every(Group):
    """
    The auto save frequency type to either time-step or crank-angle and set the corresponding frequency.
    """
    _version = '231'
    fluent_name = 'save-data-file-every'
    _python_name = 'save_data_file_every'
    child_names = ['frequency_type', 'save_frequency']
    _child_classes = dict(
        frequency_type=frequency_type,
        save_frequency=save_frequency,
    )
    return_type = 'object'

class auto_save(Group):
    """
    'auto_save' child.
    """
    _version = '231'
    fluent_name = 'auto-save'
    _python_name = 'auto_save'
    child_names = ['case_frequency', 'data_frequency', 'root_name', 'retain_most_recent_files', 'max_files', 'append_file_name_with', 'save_data_file_every']
    _child_classes = dict(
        case_frequency=case_frequency,
        data_frequency=data_frequency,
        root_name=root_name,
        retain_most_recent_files=retain_most_recent_files,
        max_files=max_files,
        append_file_name_with=append_file_name_with,
        save_data_file_every=save_data_file_every,
    )
    return_type = 'object'

class filename(Filename):
    """
    'filename' child.
    """
    _version = '231'
    fluent_name = 'filename'
    _python_name = 'filename'
    return_type = 'object'

class define_macro(Command):
    """
    Save input to a named macro.
    
    Parameters
    ----------
        filename : str
            'filename' child.
    """
    _version = '231'
    fluent_name = 'define-macro'
    _python_name = 'define_macro'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename,
    )
    return_type = 'object'

class pdf_file_name(Filename):
    """
    'pdf_file_name' child.
    """
    _version = '231'
    fluent_name = 'pdf-file-name'
    _python_name = 'pdf_file_name'
    return_type = 'object'

class lightweight_setup(Boolean):
    """
    'lightweight_setup' child.
    """
    _version = '231'
    fluent_name = 'lightweight-setup?'
    _python_name = 'lightweight_setup'
    return_type = 'object'

class read(Command):
    """
    'read' command.
    """
    _version = '231'
    fluent_name = 'read'
    _python_name = 'read'
    argument_names = ['file_type', 'file_name', 'pdf_file_name', 'lightweight_setup']
    _child_classes = dict(
        file_type=file_type,
        file_name=file_name_1,
        pdf_file_name=pdf_file_name,
        lightweight_setup=lightweight_setup,
    )
    return_type = 'object'

class read_case(Command):
    """
    'read_case' command.
    """
    _version = '231'
    fluent_name = 'read-case'
    _python_name = 'read_case'
    argument_names = ['file_type', 'file_name', 'pdf_file_name', 'lightweight_setup']
    _child_classes = dict(
        file_type=file_type,
        file_name=file_name_1,
        pdf_file_name=pdf_file_name,
        lightweight_setup=lightweight_setup,
    )
    return_type = 'object'

class read_case_data(Command):
    """
    'read_case_data' command.
    """
    _version = '231'
    fluent_name = 'read-case-data'
    _python_name = 'read_case_data'
    argument_names = ['file_type', 'file_name', 'pdf_file_name', 'lightweight_setup']
    _child_classes = dict(
        file_type=file_type,
        file_name=file_name_1,
        pdf_file_name=pdf_file_name,
        lightweight_setup=lightweight_setup,
    )
    return_type = 'object'

class read_case_setting(Command):
    """
    'read_case_setting' command.
    """
    _version = '231'
    fluent_name = 'read-case-setting'
    _python_name = 'read_case_setting'
    argument_names = ['file_type', 'file_name', 'pdf_file_name', 'lightweight_setup']
    _child_classes = dict(
        file_type=file_type,
        file_name=file_name_1,
        pdf_file_name=pdf_file_name,
        lightweight_setup=lightweight_setup,
    )
    return_type = 'object'

class read_data(Command):
    """
    'read_data' command.
    """
    _version = '231'
    fluent_name = 'read-data'
    _python_name = 'read_data'
    argument_names = ['file_type', 'file_name', 'pdf_file_name', 'lightweight_setup']
    _child_classes = dict(
        file_type=file_type,
        file_name=file_name_1,
        pdf_file_name=pdf_file_name,
        lightweight_setup=lightweight_setup,
    )
    return_type = 'object'

class read_mesh(Command):
    """
    'read_mesh' command.
    """
    _version = '231'
    fluent_name = 'read-mesh'
    _python_name = 'read_mesh'
    argument_names = ['file_type', 'file_name', 'pdf_file_name', 'lightweight_setup']
    _child_classes = dict(
        file_type=file_type,
        file_name=file_name_1,
        pdf_file_name=pdf_file_name,
        lightweight_setup=lightweight_setup,
    )
    return_type = 'object'

class file_name_list(FilenameList):
    """
    'file_name_list' child.
    """
    _version = '231'
    fluent_name = 'file-name-list'
    _python_name = 'file_name_list'
    return_type = 'object'

class read_journal(Command):
    """
    Read a journal file.
    
    Parameters
    ----------
        file_name_list : List
            'file_name_list' child.
    """
    _version = '231'
    fluent_name = 'read-journal'
    _python_name = 'read_journal'
    argument_names = ['file_name_list']
    _child_classes = dict(
        file_name_list=file_name_list,
    )
    return_type = 'object'

class start_journal(Command):
    """
    Start recording all input in a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '231'
    fluent_name = 'start-journal'
    _python_name = 'start_journal'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class stop_journal(Command):
    """
    Stop recording input and close the journal file.
    """
    _version = '231'
    fluent_name = 'stop-journal'
    _python_name = 'stop_journal'
    return_type = 'object'

class replace_mesh(Command):
    """
    'replace_mesh' command.
    """
    _version = '231'
    fluent_name = 'replace-mesh'
    _python_name = 'replace_mesh'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class write(Command):
    """
    'write' command.
    """
    _version = '231'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['file_type', 'file_name']
    _child_classes = dict(
        file_type=file_type,
        file_name=file_name_1,
    )
    return_type = 'object'

class file(Group):
    """
    'file' child.
    """
    _version = '231'
    fluent_name = 'file'
    _python_name = 'file'
    child_names = ['single_precision_coordinates', 'binary_legacy_files', 'cff_files', 'async_optimize', 'write_pdat', 'confirm_overwrite', 'export', 'import_', 'parametric_project']
    command_names = ['auto_save', 'define_macro', 'read', 'read_case', 'read_case_data', 'read_case_setting', 'read_data', 'read_mesh', 'read_journal', 'start_journal', 'stop_journal', 'replace_mesh', 'write']
    _child_classes = dict(
        single_precision_coordinates=single_precision_coordinates,
        binary_legacy_files=binary_legacy_files,
        cff_files=cff_files,
        async_optimize=async_optimize,
        write_pdat=write_pdat,
        confirm_overwrite=confirm_overwrite,
        export=export,
        import_=import_,
        parametric_project=parametric_project,
        auto_save=auto_save,
        define_macro=define_macro,
        read=read,
        read_case=read_case,
        read_case_data=read_case_data,
        read_case_setting=read_case_setting,
        read_data=read_data,
        read_mesh=read_mesh,
        read_journal=read_journal,
        start_journal=start_journal,
        stop_journal=stop_journal,
        replace_mesh=replace_mesh,
        write=write,
    )
    return_type = 'object'

class refinement_criteria(String):
    """
    'refinement_criteria' child.
    """
    _version = '231'
    fluent_name = 'refinement-criteria'
    _python_name = 'refinement_criteria'
    return_type = 'object'

class coarsening_criteria(String):
    """
    Expression for coarsening criterion.
    """
    _version = '231'
    fluent_name = 'coarsening-criteria'
    _python_name = 'coarsening_criteria'
    return_type = 'object'

class manual_refinement_criteria(String):
    """
    Expression for manual refinement criterion.
    """
    _version = '231'
    fluent_name = 'manual-refinement-criteria'
    _python_name = 'manual_refinement_criteria'
    return_type = 'object'

class manual_coarsening_criteria(String):
    """
    Expression for manual coarsening criterion.
    """
    _version = '231'
    fluent_name = 'manual-coarsening-criteria'
    _python_name = 'manual_coarsening_criteria'
    return_type = 'object'

class anisotropic_boundary_zones(StringList):
    """
    The boundary zones to specify directions for anisotropic refinement.
    """
    _version = '231'
    fluent_name = 'anisotropic-boundary-zones'
    _python_name = 'anisotropic_boundary_zones'
    return_type = 'object'

class cell_zones(StringList):
    """
    Cell zones to be used for marking adaption. An empty list implies that all zones are considered for adaption.
    """
    _version = '231'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'
    return_type = 'object'

class dynamic_adaption_frequency(Integer):
    """
    Frequency for dynamic adaption.
    """
    _version = '231'
    fluent_name = 'dynamic-adaption-frequency'
    _python_name = 'dynamic_adaption_frequency'
    return_type = 'object'

class verbosity(Integer):
    """
    The adaption verbosity.
    """
    _version = '231'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class encapsulate_children(Boolean):
    """
    Encapsulate all children of parent cells on the same partition.
    """
    _version = '231'
    fluent_name = 'encapsulate-children?'
    _python_name = 'encapsulate_children'
    return_type = 'object'

class maximum_refinement_level(Integer):
    """
    Maximum level of refinement in the mesh.
    """
    _version = '231'
    fluent_name = 'maximum-refinement-level'
    _python_name = 'maximum_refinement_level'
    return_type = 'object'

class minimum_cell_quality(Real):
    """
    Limit on the minimum cell orthogonal quality during adaption.
    """
    _version = '231'
    fluent_name = 'minimum-cell-quality'
    _python_name = 'minimum_cell_quality'
    return_type = 'object'

class maximum_cell_count(Integer):
    """
    Limit on the maximum number of cells during adaption.
    """
    _version = '231'
    fluent_name = 'maximum-cell-count'
    _python_name = 'maximum_cell_count'
    return_type = 'object'

class additional_refinement_layers(Integer):
    """
    The number of additional cell layers for refinement.
    """
    _version = '231'
    fluent_name = 'additional-refinement-layers'
    _python_name = 'additional_refinement_layers'
    return_type = 'object'

class anisotropic_adaption(Boolean):
    """
    Enable/Disable anisotropic adaption for prismatic cells.
    """
    _version = '231'
    fluent_name = 'anisotropic-adaption?'
    _python_name = 'anisotropic_adaption'
    return_type = 'object'

class minimum_edge_length(Real):
    """
    Limit on the minimum effective edge-length of cells in the mesh.
    """
    _version = '231'
    fluent_name = 'minimum-edge-length'
    _python_name = 'minimum_edge_length'
    return_type = 'object'

class anisotropic_split_ratio(Real):
    """
    The split ratio for anisotropic refinement of prismatic cells.
    """
    _version = '231'
    fluent_name = 'anisotropic-split-ratio'
    _python_name = 'anisotropic_split_ratio'
    return_type = 'object'

class overset_adapt_dead_cells(Boolean):
    """
    Enables adaption of dead cells in overset meshes.
    """
    _version = '231'
    fluent_name = 'overset-adapt-dead-cells?'
    _python_name = 'overset_adapt_dead_cells'
    return_type = 'object'

class enable(Boolean):
    """
    'enable' child.
    """
    _version = '231'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class dynamic_adaption(Command):
    """
    Adapt the mesh during solution.
    
    Parameters
    ----------
        enable : bool
            'enable' child.
    """
    _version = '231'
    fluent_name = 'dynamic-adaption?'
    _python_name = 'dynamic_adaption'
    argument_names = ['enable']
    _child_classes = dict(
        enable=enable,
    )
    return_type = 'object'

class set(Group):
    """
    The adaption set object.
    """
    _version = '231'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['anisotropic_boundary_zones', 'cell_zones', 'dynamic_adaption_frequency', 'verbosity', 'encapsulate_children', 'maximum_refinement_level', 'minimum_cell_quality', 'maximum_cell_count', 'additional_refinement_layers', 'anisotropic_adaption', 'minimum_edge_length', 'anisotropic_split_ratio', 'overset_adapt_dead_cells']
    command_names = ['dynamic_adaption']
    _child_classes = dict(
        anisotropic_boundary_zones=anisotropic_boundary_zones,
        cell_zones=cell_zones,
        dynamic_adaption_frequency=dynamic_adaption_frequency,
        verbosity=verbosity,
        encapsulate_children=encapsulate_children,
        maximum_refinement_level=maximum_refinement_level,
        minimum_cell_quality=minimum_cell_quality,
        maximum_cell_count=maximum_cell_count,
        additional_refinement_layers=additional_refinement_layers,
        anisotropic_adaption=anisotropic_adaption,
        minimum_edge_length=minimum_edge_length,
        anisotropic_split_ratio=anisotropic_split_ratio,
        overset_adapt_dead_cells=overset_adapt_dead_cells,
        dynamic_adaption=dynamic_adaption,
    )
    return_type = 'object'

class enable_1(Command):
    """
    Enable adaption profiling.
    """
    _version = '231'
    fluent_name = 'enable'
    _python_name = 'enable'
    return_type = 'object'

class disable(Command):
    """
    Disable adaption profiling.
    """
    _version = '231'
    fluent_name = 'disable'
    _python_name = 'disable'
    return_type = 'object'

class print(Command):
    """
    Print adaption profiling results.
    """
    _version = '231'
    fluent_name = 'print'
    _python_name = 'print'
    return_type = 'object'

class clear(Command):
    """
    Clear adaption profiling counters.
    """
    _version = '231'
    fluent_name = 'clear'
    _python_name = 'clear'
    return_type = 'object'

class profile(Group):
    """
    The adaption profile object.
    """
    _version = '231'
    fluent_name = 'profile'
    _python_name = 'profile'
    command_names = ['enable', 'disable', 'print', 'clear']
    _child_classes = dict(
        enable=enable_1,
        disable=disable,
        print=print,
        clear=clear,
    )
    return_type = 'object'

class free_hierarchy(Boolean):
    """
    Delete the adaption hierarchy.
    """
    _version = '231'
    fluent_name = 'free-hierarchy'
    _python_name = 'free_hierarchy'
    return_type = 'object'

class refine_mesh(Command):
    """
    Refine the mesh for multiple boundary layers.
    """
    _version = '231'
    fluent_name = 'refine-mesh'
    _python_name = 'refine_mesh'
    return_type = 'object'

class boundary_zones(Command):
    """
    Specify boundary zones for refinement.
    """
    _version = '231'
    fluent_name = 'boundary-zones'
    _python_name = 'boundary_zones'
    return_type = 'object'

class layer_count(Command):
    """
    Specify the layer count for refinement.
    """
    _version = '231'
    fluent_name = 'layer-count'
    _python_name = 'layer_count'
    return_type = 'object'

class parameters(Command):
    """
    Specify parameters for multiple boundary layer refinement.
    """
    _version = '231'
    fluent_name = 'parameters'
    _python_name = 'parameters'
    return_type = 'object'

class multi_layer_refinement(Group):
    """
    The multiple boundary layer refinement object.
    """
    _version = '231'
    fluent_name = 'multi-layer-refinement'
    _python_name = 'multi_layer_refinement'
    command_names = ['refine_mesh', 'boundary_zones', 'layer_count', 'parameters']
    _child_classes = dict(
        refine_mesh=refine_mesh,
        boundary_zones=boundary_zones,
        layer_count=layer_count,
        parameters=parameters,
    )
    return_type = 'object'

class reconstruct_geometry(Boolean):
    """
    Enable/Disable geometry based adaption.
    """
    _version = '231'
    fluent_name = 'reconstruct-geometry'
    _python_name = 'reconstruct_geometry'
    return_type = 'object'

class geometry(Group):
    """
    The adaption geometry object.
    """
    _version = '231'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    child_names = ['reconstruct_geometry']
    _child_classes = dict(
        reconstruct_geometry=reconstruct_geometry,
    )
    return_type = 'object'

class adapt_mesh(Command):
    """
    Adapt the mesh based on set refinement/coarsening criterion.
    """
    _version = '231'
    fluent_name = 'adapt-mesh'
    _python_name = 'adapt_mesh'
    return_type = 'object'

class display_adaption_cells(Command):
    """
    Display cells marked for refinement/coarsening.
    """
    _version = '231'
    fluent_name = 'display-adaption-cells'
    _python_name = 'display_adaption_cells'
    return_type = 'object'

class list_adaption_cells(Command):
    """
    List the number of cells marked for refinement/coarsening.
    """
    _version = '231'
    fluent_name = 'list-adaption-cells'
    _python_name = 'list_adaption_cells'
    return_type = 'object'

class adapt(Group):
    """
    'adapt' child.
    """
    _version = '231'
    fluent_name = 'adapt'
    _python_name = 'adapt'
    child_names = ['refinement_criteria', 'coarsening_criteria', 'manual_refinement_criteria', 'manual_coarsening_criteria', 'set', 'profile', 'free_hierarchy', 'multi_layer_refinement', 'geometry']
    command_names = ['adapt_mesh', 'display_adaption_cells', 'list_adaption_cells']
    _child_classes = dict(
        refinement_criteria=refinement_criteria,
        coarsening_criteria=coarsening_criteria,
        manual_refinement_criteria=manual_refinement_criteria,
        manual_coarsening_criteria=manual_coarsening_criteria,
        set=set,
        profile=profile,
        free_hierarchy=free_hierarchy,
        multi_layer_refinement=multi_layer_refinement,
        geometry=geometry,
        adapt_mesh=adapt_mesh,
        display_adaption_cells=display_adaption_cells,
        list_adaption_cells=list_adaption_cells,
    )
    return_type = 'object'

class check_before_solve(Boolean):
    """
    Specifies whether to perform various mesh consistency checks before solve.
    """
    _version = '231'
    fluent_name = 'check-before-solve?'
    _python_name = 'check_before_solve'
    return_type = 'object'

class check_verbosity(Integer):
    """
    Verbosity output of mesh check and mesh quality. Higher verbosity corresponds to more detailed information.
    """
    _version = '231'
    fluent_name = 'check-verbosity'
    _python_name = 'check_verbosity'
    return_type = 'object'

class enhanced_orthogonal_quality(Boolean):
    """
    Enable enhanced orthogonal quality method.
    """
    _version = '231'
    fluent_name = 'enhanced-orthogonal-quality?'
    _python_name = 'enhanced_orthogonal_quality'
    return_type = 'object'

class matching_tolerance(Real):
    """
    The normalized tolerance used for finding coincident nodes.
    """
    _version = '231'
    fluent_name = 'matching-tolerance'
    _python_name = 'matching_tolerance'
    return_type = 'object'

class show_periodic_shadow_zones(Boolean):
    """
    Option to show periodic shadow zones in user interface.
    """
    _version = '231'
    fluent_name = 'show-periodic-shadow-zones?'
    _python_name = 'show_periodic_shadow_zones'
    return_type = 'object'

class band_width(Command):
    """
    Print cell bandwidth.
    """
    _version = '231'
    fluent_name = 'band-width'
    _python_name = 'band_width'
    return_type = 'object'

class reorder_domain(Command):
    """
    Reorder cells and faces by reverse Cuthill-McKee.
    """
    _version = '231'
    fluent_name = 'reorder-domain'
    _python_name = 'reorder_domain'
    return_type = 'object'

class reorder_zones(Command):
    """
    Reorder zones by partition, type, and id.
    """
    _version = '231'
    fluent_name = 'reorder-zones'
    _python_name = 'reorder_zones'
    return_type = 'object'

class reorder(Group):
    """
    The reorder domain object.
    """
    _version = '231'
    fluent_name = 'reorder'
    _python_name = 'reorder'
    command_names = ['band_width', 'reorder_domain', 'reorder_zones']
    _child_classes = dict(
        band_width=band_width,
        reorder_domain=reorder_domain,
        reorder_zones=reorder_zones,
    )
    return_type = 'object'

class allow_repair_at_boundaries(Boolean):
    """
    Enable/disable adjustment of boundary nodes during mesh repair.
    """
    _version = '231'
    fluent_name = 'allow-repair-at-boundaries?'
    _python_name = 'allow_repair_at_boundaries'
    return_type = 'object'

class include_local_polyhedra_conversion_in_repair(Boolean):
    """
    Enable/disable local conversion to polyhedra during mesh repair.
    """
    _version = '231'
    fluent_name = 'include-local-polyhedra-conversion-in-repair?'
    _python_name = 'include_local_polyhedra_conversion_in_repair'
    return_type = 'object'

class repair_poor_elements(Command):
    """
    Report invalid and poor quality elements.
    """
    _version = '231'
    fluent_name = 'repair-poor-elements'
    _python_name = 'repair_poor_elements'
    return_type = 'object'

class improve_quality(Command):
    """
    Tries to improve the mesh quality.
    """
    _version = '231'
    fluent_name = 'improve-quality'
    _python_name = 'improve_quality'
    return_type = 'object'

class repair(Command):
    """
    Tries to repair mesh problems identified by mesh check.
    """
    _version = '231'
    fluent_name = 'repair'
    _python_name = 'repair'
    return_type = 'object'

class repair_1(Boolean):
    """
    'repair' child.
    """
    _version = '231'
    fluent_name = 'repair?'
    _python_name = 'repair'
    return_type = 'object'

class disable_repair(Boolean):
    """
    'disable_repair' child.
    """
    _version = '231'
    fluent_name = 'disable-repair?'
    _python_name = 'disable_repair'
    return_type = 'object'

class repair_face_handedness(Command):
    """
    Correct face handedness at left handed faces if possible.
    
    Parameters
    ----------
        repair : bool
            'repair' child.
        disable_repair : bool
            'disable_repair' child.
    """
    _version = '231'
    fluent_name = 'repair-face-handedness'
    _python_name = 'repair_face_handedness'
    argument_names = ['repair', 'disable_repair']
    _child_classes = dict(
        repair=repair_1,
        disable_repair=disable_repair,
    )
    return_type = 'object'

class repair_face_node_order(Command):
    """
    Reverse order of face nodes if needed.
    """
    _version = '231'
    fluent_name = 'repair-face-node-order'
    _python_name = 'repair_face_node_order'
    return_type = 'object'

class repair_wall_distance(Command):
    """
    Correct wall distance at very high aspect ratio hexahedral/polyhedral cells.
    
    Parameters
    ----------
        repair : bool
            'repair' child.
    """
    _version = '231'
    fluent_name = 'repair-wall-distance'
    _python_name = 'repair_wall_distance'
    argument_names = ['repair']
    _child_classes = dict(
        repair=repair_1,
    )
    return_type = 'object'

class repair_improve(Group):
    """
    The repair and improve quality object.
    """
    _version = '231'
    fluent_name = 'repair-improve'
    _python_name = 'repair_improve'
    child_names = ['allow_repair_at_boundaries', 'include_local_polyhedra_conversion_in_repair']
    command_names = ['repair_poor_elements', 'improve_quality', 'repair', 'repair_face_handedness', 'repair_face_node_order', 'repair_wall_distance']
    _child_classes = dict(
        allow_repair_at_boundaries=allow_repair_at_boundaries,
        include_local_polyhedra_conversion_in_repair=include_local_polyhedra_conversion_in_repair,
        repair_poor_elements=repair_poor_elements,
        improve_quality=improve_quality,
        repair=repair,
        repair_face_handedness=repair_face_handedness,
        repair_face_node_order=repair_face_node_order,
        repair_wall_distance=repair_wall_distance,
    )
    return_type = 'object'

class surface(String, AllowedValuesMixin):
    """
    'surface' child.
    """
    _version = '231'
    fluent_name = 'surface'
    _python_name = 'surface'
    return_type = 'object'

class delete(CommandWithPositionalArgs):
    """
    Delete surface mesh.
    
    Parameters
    ----------
        surface : str
            'surface' child.
    """
    _version = '231'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['surface']
    _child_classes = dict(
        surface=surface,
    )
    return_type = 'object'

class display(Command):
    """
    Display surface meshes.
    """
    _version = '231'
    fluent_name = 'display'
    _python_name = 'display'
    return_type = 'object'

class unit(String):
    """
    'unit' child.
    """
    _version = '231'
    fluent_name = 'unit'
    _python_name = 'unit'
    return_type = 'object'

class read_2(Command):
    """
    Read surface meshes.
    
    Parameters
    ----------
        filename : str
            'filename' child.
        unit : str
            'unit' child.
    """
    _version = '231'
    fluent_name = 'read'
    _python_name = 'read'
    argument_names = ['filename', 'unit']
    _child_classes = dict(
        filename=filename,
        unit=unit,
    )
    return_type = 'object'

class surface_mesh(Group):
    """
    The surface mesh object.
    """
    _version = '231'
    fluent_name = 'surface-mesh'
    _python_name = 'surface_mesh'
    command_names = ['delete', 'display', 'read']
    _child_classes = dict(
        delete=delete,
        display=display,
        read=read_2,
    )
    return_type = 'object'

class migrate_and_reorder(Boolean):
    """
    Specifies whether to perform migration and reordering at the end of the polyhedra conversion.
    """
    _version = '231'
    fluent_name = 'migrate-and-reorder?'
    _python_name = 'migrate_and_reorder'
    return_type = 'object'

class preserve_boundary_layer(Integer):
    """
    0 = Decide at runtime.
    1 = Never preserve.
    2 = Always preserve.
    """
    _version = '231'
    fluent_name = 'preserve-boundary-layer'
    _python_name = 'preserve_boundary_layer'
    return_type = 'object'

class preserve_interior_zones(String):
    """
    'preserve_interior_zones' child.
    """
    _version = '231'
    fluent_name = 'preserve-interior-zones'
    _python_name = 'preserve_interior_zones'
    return_type = 'object'

class options(Group):
    """
    Options object.
    """
    _version = '231'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['migrate_and_reorder', 'preserve_boundary_layer', 'preserve_interior_zones']
    _child_classes = dict(
        migrate_and_reorder=migrate_and_reorder,
        preserve_boundary_layer=preserve_boundary_layer,
        preserve_interior_zones=preserve_interior_zones,
    )
    return_type = 'object'

class convert_domain(Command):
    """
    Convert entire domain to polyhedra cells.
    """
    _version = '231'
    fluent_name = 'convert-domain'
    _python_name = 'convert_domain'
    return_type = 'object'

class convert_hanging_nodes(Command):
    """
    Convert cells with hanging nodes and faces to polyhedra.
    """
    _version = '231'
    fluent_name = 'convert-hanging-nodes'
    _python_name = 'convert_hanging_nodes'
    return_type = 'object'

class convert_hanging_node_zones(Command):
    """
    Convert selected cell zones with hanging nodes and faces to polyhedra. 
    The selected cell zones cannot be connected to other zones.
    """
    _version = '231'
    fluent_name = 'convert-hanging-node-zones'
    _python_name = 'convert_hanging_node_zones'
    return_type = 'object'

class cell_thread_list(StringList):
    """
    Zones where cells should be converted.
    """
    _version = '231'
    fluent_name = 'cell-thread-list'
    _python_name = 'cell_thread_list'
    return_type = 'object'

class max_cell_skewness(Real):
    """
    Target maximum cell skewness.
    """
    _version = '231'
    fluent_name = 'max-cell-skewness'
    _python_name = 'max_cell_skewness'
    return_type = 'object'

class convert_skewed_cells_1(Boolean):
    """
    'convert_skewed_cells' child.
    """
    _version = '231'
    fluent_name = 'convert-skewed-cells?'
    _python_name = 'convert_skewed_cells'
    return_type = 'object'

class convert_skewed_cells(Command):
    """
    'convert_skewed_cells' command.
    """
    _version = '231'
    fluent_name = 'convert-skewed-cells'
    _python_name = 'convert_skewed_cells'
    argument_names = ['cell_thread_list', 'max_cell_skewness', 'convert_skewed_cells']
    _child_classes = dict(
        cell_thread_list=cell_thread_list,
        max_cell_skewness=max_cell_skewness,
        convert_skewed_cells=convert_skewed_cells_1,
    )
    return_type = 'object'

class polyhedra(Group):
    """
    The polyhedra object.
    """
    _version = '231'
    fluent_name = 'polyhedra'
    _python_name = 'polyhedra'
    child_names = ['options']
    command_names = ['convert_domain', 'convert_hanging_nodes', 'convert_hanging_node_zones', 'convert_skewed_cells']
    _child_classes = dict(
        options=options,
        convert_domain=convert_domain,
        convert_hanging_nodes=convert_hanging_nodes,
        convert_hanging_node_zones=convert_hanging_node_zones,
        convert_skewed_cells=convert_skewed_cells,
    )
    return_type = 'object'

class adjacency(Command):
    """
    View and rename face zones adjacent to selected cell zones.
    """
    _version = '231'
    fluent_name = 'adjacency'
    _python_name = 'adjacency'
    return_type = 'object'

class check(Command):
    """
    Perform various mesh consistency checks.
    """
    _version = '231'
    fluent_name = 'check'
    _python_name = 'check'
    return_type = 'object'

class memory_usage(Command):
    """
    Report solver memory use.
    """
    _version = '231'
    fluent_name = 'memory-usage'
    _python_name = 'memory_usage'
    return_type = 'object'

class print_level(Integer):
    """
    Print zone information size.
    """
    _version = '231'
    fluent_name = 'print-level'
    _python_name = 'print_level'
    return_type = 'object'

class mesh_info(Command):
    """
    'mesh_info' command.
    """
    _version = '231'
    fluent_name = 'mesh-info'
    _python_name = 'mesh_info'
    argument_names = ['print_level']
    _child_classes = dict(
        print_level=print_level,
    )
    return_type = 'object'

class quality(Command):
    """
    Perform analysis of mesh quality.
    """
    _version = '231'
    fluent_name = 'quality'
    _python_name = 'quality'
    return_type = 'object'

class angle(Real):
    """
    'angle' child.
    """
    _version = '231'
    fluent_name = 'angle'
    _python_name = 'angle'
    return_type = 'object'

class origin(RealVector):
    """
    'origin' child.
    """
    _version = '231'
    fluent_name = 'origin'
    _python_name = 'origin'
    return_type = 'object'

class axis_components(RealVector):
    """
    'axis_components' child.
    """
    _version = '231'
    fluent_name = 'axis-components'
    _python_name = 'axis_components'
    return_type = 'object'

class rotate(Command):
    """
    Rotate the mesh.
    
    Parameters
    ----------
        angle : real
            'angle' child.
        origin : Tuple
            'origin' child.
        axis_components : Tuple
            'axis_components' child.
    """
    _version = '231'
    fluent_name = 'rotate'
    _python_name = 'rotate'
    argument_names = ['angle', 'origin', 'axis_components']
    _child_classes = dict(
        angle=angle,
        origin=origin,
        axis_components=axis_components,
    )
    return_type = 'object'

class x_scale(Real):
    """
    'x_scale' child.
    """
    _version = '231'
    fluent_name = 'x-scale'
    _python_name = 'x_scale'
    return_type = 'object'

class y_scale(Real):
    """
    'y_scale' child.
    """
    _version = '231'
    fluent_name = 'y-scale'
    _python_name = 'y_scale'
    return_type = 'object'

class z_scale(Real):
    """
    'z_scale' child.
    """
    _version = '231'
    fluent_name = 'z-scale'
    _python_name = 'z_scale'
    return_type = 'object'

class scale(Command):
    """
    'scale' command.
    """
    _version = '231'
    fluent_name = 'scale'
    _python_name = 'scale'
    argument_names = ['x_scale', 'y_scale', 'z_scale']
    _child_classes = dict(
        x_scale=x_scale,
        y_scale=y_scale,
        z_scale=z_scale,
    )
    return_type = 'object'

class size_info(Command):
    """
    Print mesh size.
    """
    _version = '231'
    fluent_name = 'size-info'
    _python_name = 'size_info'
    return_type = 'object'

class thread_id(Integer):
    """
    'thread_id' child.
    """
    _version = '231'
    fluent_name = 'thread-id'
    _python_name = 'thread_id'
    return_type = 'object'

class growth_rate(Real):
    """
    'growth_rate' child.
    """
    _version = '231'
    fluent_name = 'growth-rate'
    _python_name = 'growth_rate'
    return_type = 'object'

class redistribute_boundary_layer(Command):
    """
    Enforce growth rate in boundary layer.
    
    Parameters
    ----------
        thread_id : int
            'thread_id' child.
        growth_rate : real
            'growth_rate' child.
    """
    _version = '231'
    fluent_name = 'redistribute-boundary-layer'
    _python_name = 'redistribute_boundary_layer'
    argument_names = ['thread_id', 'growth_rate']
    _child_classes = dict(
        thread_id=thread_id,
        growth_rate=growth_rate,
    )
    return_type = 'object'

class swap_mesh_faces(Command):
    """
    Swap mesh faces.
    """
    _version = '231'
    fluent_name = 'swap-mesh-faces'
    _python_name = 'swap_mesh_faces'
    return_type = 'object'

class type_of_smoothing(String, AllowedValuesMixin):
    """
    'type_of_smoothing' child.
    """
    _version = '231'
    fluent_name = 'type-of-smoothing'
    _python_name = 'type_of_smoothing'
    return_type = 'object'

class number_of_iterations(Integer):
    """
    'number_of_iterations' child.
    """
    _version = '231'
    fluent_name = 'number-of-iterations'
    _python_name = 'number_of_iterations'
    return_type = 'object'

class relaxtion_factor(Real):
    """
    'relaxtion_factor' child.
    """
    _version = '231'
    fluent_name = 'relaxtion-factor'
    _python_name = 'relaxtion_factor'
    return_type = 'object'

class percentage_of_cells(Real):
    """
    'percentage_of_cells' child.
    """
    _version = '231'
    fluent_name = 'percentage-of-cells'
    _python_name = 'percentage_of_cells'
    return_type = 'object'

class skewness_threshold(Real):
    """
    'skewness_threshold' child.
    """
    _version = '231'
    fluent_name = 'skewness-threshold'
    _python_name = 'skewness_threshold'
    return_type = 'object'

class smooth_mesh(Command):
    """
    Smooth the mesh using quality-based, Laplace or skewness methods.
    
    Parameters
    ----------
        type_of_smoothing : str
            'type_of_smoothing' child.
        number_of_iterations : int
            'number_of_iterations' child.
        relaxtion_factor : real
            'relaxtion_factor' child.
        percentage_of_cells : real
            'percentage_of_cells' child.
        skewness_threshold : real
            'skewness_threshold' child.
    """
    _version = '231'
    fluent_name = 'smooth-mesh'
    _python_name = 'smooth_mesh'
    argument_names = ['type_of_smoothing', 'number_of_iterations', 'relaxtion_factor', 'percentage_of_cells', 'skewness_threshold']
    _child_classes = dict(
        type_of_smoothing=type_of_smoothing,
        number_of_iterations=number_of_iterations,
        relaxtion_factor=relaxtion_factor,
        percentage_of_cells=percentage_of_cells,
        skewness_threshold=skewness_threshold,
    )
    return_type = 'object'

class zones(Boolean):
    """
    'zones' child.
    """
    _version = '231'
    fluent_name = 'zones?'
    _python_name = 'zones'
    return_type = 'object'

class replace(Command):
    """
    Replace mesh and interpolate data.
    
    Parameters
    ----------
        name : str
            'name' child.
        zones : bool
            'zones' child.
    """
    _version = '231'
    fluent_name = 'replace'
    _python_name = 'replace'
    argument_names = ['name', 'zones']
    _child_classes = dict(
        name=name,
        zones=zones,
    )
    return_type = 'object'

class offset(RealVector):
    """
    'offset' child.
    """
    _version = '231'
    fluent_name = 'offset'
    _python_name = 'offset'
    return_type = 'object'

class translate(Command):
    """
    Translate the mesh.
    
    Parameters
    ----------
        offset : Tuple
            'offset' child.
    """
    _version = '231'
    fluent_name = 'translate'
    _python_name = 'translate'
    argument_names = ['offset']
    _child_classes = dict(
        offset=offset,
    )
    return_type = 'object'

class mesh(Group):
    """
    'mesh' child.
    """
    _version = '231'
    fluent_name = 'mesh'
    _python_name = 'mesh'
    child_names = ['adapt', 'check_before_solve', 'check_verbosity', 'enhanced_orthogonal_quality', 'matching_tolerance', 'show_periodic_shadow_zones', 'reorder', 'repair_improve', 'surface_mesh', 'polyhedra']
    command_names = ['adjacency', 'check', 'memory_usage', 'mesh_info', 'quality', 'rotate', 'scale', 'size_info', 'redistribute_boundary_layer', 'swap_mesh_faces', 'smooth_mesh', 'replace', 'translate']
    _child_classes = dict(
        adapt=adapt,
        check_before_solve=check_before_solve,
        check_verbosity=check_verbosity,
        enhanced_orthogonal_quality=enhanced_orthogonal_quality,
        matching_tolerance=matching_tolerance,
        show_periodic_shadow_zones=show_periodic_shadow_zones,
        reorder=reorder,
        repair_improve=repair_improve,
        surface_mesh=surface_mesh,
        polyhedra=polyhedra,
        adjacency=adjacency,
        check=check,
        memory_usage=memory_usage,
        mesh_info=mesh_info,
        quality=quality,
        rotate=rotate,
        scale=scale,
        size_info=size_info,
        redistribute_boundary_layer=redistribute_boundary_layer,
        swap_mesh_faces=swap_mesh_faces,
        smooth_mesh=smooth_mesh,
        replace=replace,
        translate=translate,
    )
    return_type = 'object'

class address(String):
    """
    'address' child.
    """
    _version = '231'
    fluent_name = 'address'
    _python_name = 'address'
    return_type = 'object'

class port(Integer):
    """
    'port' child.
    """
    _version = '231'
    fluent_name = 'port'
    _python_name = 'port'
    return_type = 'object'

class start(Command):
    """
    'start' command.
    """
    _version = '231'
    fluent_name = 'start'
    _python_name = 'start'
    argument_names = ['address', 'port']
    _child_classes = dict(
        address=address,
        port=port,
    )
    return_type = 'object'

class stop(Command):
    """
    'stop' command.
    """
    _version = '231'
    fluent_name = 'stop'
    _python_name = 'stop'
    return_type = 'object'

class web_server(Group):
    """
    'web_server' child.
    """
    _version = '231'
    fluent_name = 'web-server'
    _python_name = 'web_server'
    command_names = ['start', 'stop']
    _child_classes = dict(
        start=start,
        stop=stop,
    )
    return_type = 'object'

class server(Group):
    """
    'server' child.
    """
    _version = '231'
    fluent_name = 'server'
    _python_name = 'server'
    child_names = ['web_server']
    _child_classes = dict(
        web_server=web_server,
    )
    return_type = 'object'

class type(String, AllowedValuesMixin):
    """
    Solver type.
    """
    _version = '231'
    fluent_name = 'type'
    _python_name = 'type'
    return_type = 'object'

class two_dim_space(String, AllowedValuesMixin):
    """
    'two_dim_space' child.
    """
    _version = '231'
    fluent_name = 'two-dim-space'
    _python_name = 'two_dim_space'
    return_type = 'object'

class velocity_formulation(String, AllowedValuesMixin):
    """
    Velocity formulation.
    """
    _version = '231'
    fluent_name = 'velocity-formulation'
    _python_name = 'velocity_formulation'
    return_type = 'object'

class time(String, AllowedValuesMixin):
    """
    'time' child.
    """
    _version = '231'
    fluent_name = 'time'
    _python_name = 'time'
    return_type = 'object'

class solver(Group):
    """
    'solver' child.
    """
    _version = '231'
    fluent_name = 'solver'
    _python_name = 'solver'
    child_names = ['type', 'two_dim_space', 'velocity_formulation', 'time']
    _child_classes = dict(
        type=type,
        two_dim_space=two_dim_space,
        velocity_formulation=velocity_formulation,
        time=time,
    )
    return_type = 'object'

class adjust_solver_defaults_based_on_setup(Boolean):
    """
    Enable/disable adjustment of solver defaults based on setup.
    """
    _version = '231'
    fluent_name = 'adjust-solver-defaults-based-on-setup'
    _python_name = 'adjust_solver_defaults_based_on_setup'
    return_type = 'object'

class enable_2(Boolean):
    """
    Gravitational acceleration.
    """
    _version = '231'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class components(RealVector):
    """
    'components' child.
    """
    _version = '231'
    fluent_name = 'components'
    _python_name = 'components'
    return_type = 'object'

class gravity(Group):
    """
    'gravity' child.
    """
    _version = '231'
    fluent_name = 'gravity'
    _python_name = 'gravity'
    child_names = ['enable', 'components']
    _child_classes = dict(
        enable=enable_2,
        components=components,
    )
    return_type = 'object'

class general(Group):
    """
    'general' child.
    """
    _version = '231'
    fluent_name = 'general'
    _python_name = 'general'
    child_names = ['solver', 'adjust_solver_defaults_based_on_setup', 'gravity']
    _child_classes = dict(
        solver=solver,
        adjust_solver_defaults_based_on_setup=adjust_solver_defaults_based_on_setup,
        gravity=gravity,
    )
    return_type = 'object'

class enable_expert_view(Boolean):
    """
    Enable/disable the display of non-standard ("expert-level") DPM TUI options.
    """
    _version = '231'
    fluent_name = 'enable-expert-view?'
    _python_name = 'enable_expert_view'
    return_type = 'object'

class contour_plotting_option(String, AllowedValuesMixin):
    """
    Enable/disable contour and vector plots of mean and rms particle data.
    """
    _version = '231'
    fluent_name = 'contour-plotting-option'
    _python_name = 'contour_plotting_option'
    return_type = 'object'

class option(String, AllowedValuesMixin):
    """
    The interphase coupling option.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class update_sources_every_flow_iteration(Boolean):
    """
    'update_sources_every_flow_iteration' child.
    """
    _version = '231'
    fluent_name = 'update-sources-every-flow-iteration?'
    _python_name = 'update_sources_every_flow_iteration'
    return_type = 'object'

class iteration_interval(Integer):
    """
    'iteration_interval' child.
    """
    _version = '231'
    fluent_name = 'iteration-interval'
    _python_name = 'iteration_interval'
    return_type = 'object'

class interaction(Group):
    """
    'interaction' child.
    """
    _version = '231'
    fluent_name = 'interaction'
    _python_name = 'interaction'
    child_names = ['option', 'update_sources_every_flow_iteration', 'iteration_interval']
    _child_classes = dict(
        option=option,
        update_sources_every_flow_iteration=update_sources_every_flow_iteration,
        iteration_interval=iteration_interval,
    )
    return_type = 'object'

class option_1(String, AllowedValuesMixin):
    """
    The unsteady particle tracking option.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class create_particles_every_particle_step(Boolean):
    """
    Create particles every particle time step (else every fluid time step)?.
    """
    _version = '231'
    fluent_name = 'create-particles-every-particle-step?'
    _python_name = 'create_particles_every_particle_step'
    return_type = 'object'

class dpm_time_step(Real):
    """
    The particle time step.
    """
    _version = '231'
    fluent_name = 'dpm-time-step'
    _python_name = 'dpm_time_step'
    return_type = 'object'

class n_time_steps(Integer):
    """
    Number of steps particles are advanced in time.
    """
    _version = '231'
    fluent_name = 'n-time-steps'
    _python_name = 'n_time_steps'
    return_type = 'object'

class clear_particles_from_domain(Command):
    """
    Clear all particles currently in the domain.
    """
    _version = '231'
    fluent_name = 'clear-particles-from-domain'
    _python_name = 'clear_particles_from_domain'
    return_type = 'object'

class unsteady_tracking(Group):
    """
    'unsteady_tracking' child.
    """
    _version = '231'
    fluent_name = 'unsteady-tracking'
    _python_name = 'unsteady_tracking'
    child_names = ['option', 'create_particles_every_particle_step', 'dpm_time_step', 'n_time_steps', 'clear_particles_from_domain']
    _child_classes = dict(
        option=option_1,
        create_particles_every_particle_step=create_particles_every_particle_step,
        dpm_time_step=dpm_time_step,
        n_time_steps=n_time_steps,
        clear_particles_from_domain=clear_particles_from_domain,
    )
    return_type = 'object'

class general_settings(Group):
    """
    Main object.
    """
    _version = '231'
    fluent_name = 'general-settings'
    _python_name = 'general_settings'
    child_names = ['contour_plotting_option', 'interaction', 'unsteady_tracking']
    _child_classes = dict(
        contour_plotting_option=contour_plotting_option,
        interaction=interaction,
        unsteady_tracking=unsteady_tracking,
    )
    return_type = 'object'

class particle_type(String, AllowedValuesMixin):
    """
    'particle_type' child.
    """
    _version = '231'
    fluent_name = 'particle-type'
    _python_name = 'particle_type'
    return_type = 'object'

class material(String):
    """
    'material' child.
    """
    _version = '231'
    fluent_name = 'material'
    _python_name = 'material'
    return_type = 'object'

class reference_frame(String):
    """
    'reference_frame' child.
    """
    _version = '231'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'
    return_type = 'object'

class number_of_streams(Integer):
    """
    'number_of_streams' child.
    """
    _version = '231'
    fluent_name = 'number-of-streams'
    _python_name = 'number_of_streams'
    return_type = 'object'

class option_2(String):
    """
    'option' child.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class cone_type(String):
    """
    'cone_type' child.
    """
    _version = '231'
    fluent_name = 'cone-type'
    _python_name = 'cone_type'
    return_type = 'object'

class inject_as_film(Boolean):
    """
    'inject_as_film' child.
    """
    _version = '231'
    fluent_name = 'inject-as-film?'
    _python_name = 'inject_as_film'
    return_type = 'object'

class injection_type(Group):
    """
    'injection_type' child.
    """
    _version = '231'
    fluent_name = 'injection-type'
    _python_name = 'injection_type'
    child_names = ['option', 'cone_type', 'inject_as_film']
    _child_classes = dict(
        option=option_2,
        cone_type=cone_type,
        inject_as_film=inject_as_film,
    )
    return_type = 'object'

class continuous_phase(String):
    """
    'continuous_phase' child.
    """
    _version = '231'
    fluent_name = 'continuous-phase'
    _python_name = 'continuous_phase'
    return_type = 'object'

class enable_rough_wall_treatment(Boolean):
    """
    'enable_rough_wall_treatment' child.
    """
    _version = '231'
    fluent_name = 'enable-rough-wall-treatment?'
    _python_name = 'enable_rough_wall_treatment'
    return_type = 'object'

class option_3(String, AllowedValuesMixin):
    """
    'option' child.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class ddpm_phase(String):
    """
    'ddpm_phase' child.
    """
    _version = '231'
    fluent_name = 'ddpm-phase'
    _python_name = 'ddpm_phase'
    return_type = 'object'

class volume_displacement(Group):
    """
    'volume_displacement' child.
    """
    _version = '231'
    fluent_name = 'volume-displacement'
    _python_name = 'volume_displacement'
    child_names = ['option', 'ddpm_phase']
    _child_classes = dict(
        option=option_3,
        ddpm_phase=ddpm_phase,
    )
    return_type = 'object'

class interaction_1(Group):
    """
    'interaction' child.
    """
    _version = '231'
    fluent_name = 'interaction'
    _python_name = 'interaction'
    child_names = ['continuous_phase', 'enable_rough_wall_treatment', 'volume_displacement']
    _child_classes = dict(
        continuous_phase=continuous_phase,
        enable_rough_wall_treatment=enable_rough_wall_treatment,
        volume_displacement=volume_displacement,
    )
    return_type = 'object'

class const_number_in_parcel(Real):
    """
    'const_number_in_parcel' child.
    """
    _version = '231'
    fluent_name = 'const-number-in-parcel'
    _python_name = 'const_number_in_parcel'
    return_type = 'object'

class const_parcel_mass(Real):
    """
    'const_parcel_mass' child.
    """
    _version = '231'
    fluent_name = 'const-parcel-mass'
    _python_name = 'const_parcel_mass'
    return_type = 'object'

class const_parcel_diameter(Real):
    """
    'const_parcel_diameter' child.
    """
    _version = '231'
    fluent_name = 'const-parcel-diameter'
    _python_name = 'const_parcel_diameter'
    return_type = 'object'

class parcel_method(Group):
    """
    'parcel_method' child.
    """
    _version = '231'
    fluent_name = 'parcel-method'
    _python_name = 'parcel_method'
    child_names = ['option', 'const_number_in_parcel', 'const_parcel_mass', 'const_parcel_diameter']
    _child_classes = dict(
        option=option_3,
        const_number_in_parcel=const_number_in_parcel,
        const_parcel_mass=const_parcel_mass,
        const_parcel_diameter=const_parcel_diameter,
    )
    return_type = 'object'

class time_delay(Real):
    """
    'time_delay' child.
    """
    _version = '231'
    fluent_name = 'time-delay'
    _python_name = 'time_delay'
    return_type = 'object'

class particle_reinjector(Group):
    """
    'particle_reinjector' child.
    """
    _version = '231'
    fluent_name = 'particle-reinjector'
    _python_name = 'particle_reinjector'
    child_names = ['enable', 'time_delay']
    _child_classes = dict(
        enable=enable,
        time_delay=time_delay,
    )
    return_type = 'object'

class shape_factor(Real):
    """
    'shape_factor' child.
    """
    _version = '231'
    fluent_name = 'shape-factor'
    _python_name = 'shape_factor'
    return_type = 'object'

class cunningham_factor(Real):
    """
    'cunningham_factor' child.
    """
    _version = '231'
    fluent_name = 'cunningham-factor'
    _python_name = 'cunningham_factor'
    return_type = 'object'

class particle_drag(Group):
    """
    'particle_drag' child.
    """
    _version = '231'
    fluent_name = 'particle-drag'
    _python_name = 'particle_drag'
    child_names = ['option', 'shape_factor', 'cunningham_factor']
    _child_classes = dict(
        option=option_3,
        shape_factor=shape_factor,
        cunningham_factor=cunningham_factor,
    )
    return_type = 'object'

class drag_law(String, AllowedValuesMixin):
    """
    'drag_law' child.
    """
    _version = '231'
    fluent_name = 'drag-law'
    _python_name = 'drag_law'
    return_type = 'object'

class lift_law(String, AllowedValuesMixin):
    """
    'lift_law' child.
    """
    _version = '231'
    fluent_name = 'lift-law'
    _python_name = 'lift_law'
    return_type = 'object'

class particle_rotation(Group):
    """
    'particle_rotation' child.
    """
    _version = '231'
    fluent_name = 'particle-rotation'
    _python_name = 'particle_rotation'
    child_names = ['enable', 'drag_law', 'lift_law']
    _child_classes = dict(
        enable=enable,
        drag_law=drag_law,
        lift_law=lift_law,
    )
    return_type = 'object'

class const_htc(Real):
    """
    'const_htc' child.
    """
    _version = '231'
    fluent_name = 'const-htc'
    _python_name = 'const_htc'
    return_type = 'object'

class const_nu(Real):
    """
    'const_nu' child.
    """
    _version = '231'
    fluent_name = 'const-nu'
    _python_name = 'const_nu'
    return_type = 'object'

class heat_transfer(Group):
    """
    'heat_transfer' child.
    """
    _version = '231'
    fluent_name = 'heat-transfer'
    _python_name = 'heat_transfer'
    child_names = ['option', 'const_htc', 'const_nu']
    _child_classes = dict(
        option=option_3,
        const_htc=const_htc,
        const_nu=const_nu,
    )
    return_type = 'object'

class law_1(String):
    """
    'law_1' child.
    """
    _version = '231'
    fluent_name = 'law-1'
    _python_name = 'law_1'
    return_type = 'object'

class law_2(String):
    """
    'law_2' child.
    """
    _version = '231'
    fluent_name = 'law-2'
    _python_name = 'law_2'
    return_type = 'object'

class law_3(String):
    """
    'law_3' child.
    """
    _version = '231'
    fluent_name = 'law-3'
    _python_name = 'law_3'
    return_type = 'object'

class law_4(String):
    """
    'law_4' child.
    """
    _version = '231'
    fluent_name = 'law-4'
    _python_name = 'law_4'
    return_type = 'object'

class law_5(String):
    """
    'law_5' child.
    """
    _version = '231'
    fluent_name = 'law-5'
    _python_name = 'law_5'
    return_type = 'object'

class law_6(String):
    """
    'law_6' child.
    """
    _version = '231'
    fluent_name = 'law-6'
    _python_name = 'law_6'
    return_type = 'object'

class law_7(String):
    """
    'law_7' child.
    """
    _version = '231'
    fluent_name = 'law-7'
    _python_name = 'law_7'
    return_type = 'object'

class law_8(String):
    """
    'law_8' child.
    """
    _version = '231'
    fluent_name = 'law-8'
    _python_name = 'law_8'
    return_type = 'object'

class law_9(String):
    """
    'law_9' child.
    """
    _version = '231'
    fluent_name = 'law-9'
    _python_name = 'law_9'
    return_type = 'object'

class law_10(String):
    """
    'law_10' child.
    """
    _version = '231'
    fluent_name = 'law-10'
    _python_name = 'law_10'
    return_type = 'object'

class switch(String):
    """
    'switch' child.
    """
    _version = '231'
    fluent_name = 'switch'
    _python_name = 'switch'
    return_type = 'object'

class custom_laws(Group):
    """
    'custom_laws' child.
    """
    _version = '231'
    fluent_name = 'custom-laws'
    _python_name = 'custom_laws'
    child_names = ['law_1', 'law_2', 'law_3', 'law_4', 'law_5', 'law_6', 'law_7', 'law_8', 'law_9', 'law_10', 'switch']
    _child_classes = dict(
        law_1=law_1,
        law_2=law_2,
        law_3=law_3,
        law_4=law_4,
        law_5=law_5,
        law_6=law_6,
        law_7=law_7,
        law_8=law_8,
        law_9=law_9,
        law_10=law_10,
        switch=switch,
    )
    return_type = 'object'

class random_eddy_lifetime(Boolean):
    """
    'random_eddy_lifetime' child.
    """
    _version = '231'
    fluent_name = 'random-eddy-lifetime?'
    _python_name = 'random_eddy_lifetime'
    return_type = 'object'

class number_of_tries(Integer):
    """
    'number_of_tries' child.
    """
    _version = '231'
    fluent_name = 'number-of-tries'
    _python_name = 'number_of_tries'
    return_type = 'object'

class time_scale_constant(Real):
    """
    'time_scale_constant' child.
    """
    _version = '231'
    fluent_name = 'time-scale-constant'
    _python_name = 'time_scale_constant'
    return_type = 'object'

class turbulent_dispersion(Group):
    """
    'turbulent_dispersion' child.
    """
    _version = '231'
    fluent_name = 'turbulent-dispersion'
    _python_name = 'turbulent_dispersion'
    child_names = ['option', 'random_eddy_lifetime', 'number_of_tries', 'time_scale_constant']
    _child_classes = dict(
        option=option_3,
        random_eddy_lifetime=random_eddy_lifetime,
        number_of_tries=number_of_tries,
        time_scale_constant=time_scale_constant,
    )
    return_type = 'object'

class constant_y0(Real):
    """
    'constant_y0' child.
    """
    _version = '231'
    fluent_name = 'constant-y0'
    _python_name = 'constant_y0'
    return_type = 'object'

class number_of_child_droplets(Integer):
    """
    'number_of_child_droplets' child.
    """
    _version = '231'
    fluent_name = 'number-of-child-droplets'
    _python_name = 'number_of_child_droplets'
    return_type = 'object'

class constant_b1(Real):
    """
    'constant_b1' child.
    """
    _version = '231'
    fluent_name = 'constant-b1'
    _python_name = 'constant_b1'
    return_type = 'object'

class constant_b0(Real):
    """
    'constant_b0' child.
    """
    _version = '231'
    fluent_name = 'constant-b0'
    _python_name = 'constant_b0'
    return_type = 'object'

class constant_cl(Real):
    """
    'constant_cl' child.
    """
    _version = '231'
    fluent_name = 'constant-cl'
    _python_name = 'constant_cl'
    return_type = 'object'

class constant_ctau(Real):
    """
    'constant_ctau' child.
    """
    _version = '231'
    fluent_name = 'constant-ctau'
    _python_name = 'constant_ctau'
    return_type = 'object'

class constant_crt(Real):
    """
    'constant_crt' child.
    """
    _version = '231'
    fluent_name = 'constant-crt'
    _python_name = 'constant_crt'
    return_type = 'object'

class critical_weber_number(Real):
    """
    'critical_weber_number' child.
    """
    _version = '231'
    fluent_name = 'critical-weber-number'
    _python_name = 'critical_weber_number'
    return_type = 'object'

class core_b1(Real):
    """
    'core_b1' child.
    """
    _version = '231'
    fluent_name = 'core-b1'
    _python_name = 'core_b1'
    return_type = 'object'

class constant_xi(Real):
    """
    'constant_xi' child.
    """
    _version = '231'
    fluent_name = 'constant-xi'
    _python_name = 'constant_xi'
    return_type = 'object'

class target_number_in_parcel(Real):
    """
    'target_number_in_parcel' child.
    """
    _version = '231'
    fluent_name = 'target-number-in-parcel'
    _python_name = 'target_number_in_parcel'
    return_type = 'object'

class constant_c0(Real):
    """
    'constant_c0' child.
    """
    _version = '231'
    fluent_name = 'constant-c0'
    _python_name = 'constant_c0'
    return_type = 'object'

class column_drag_coeff(Real):
    """
    'column_drag_coeff' child.
    """
    _version = '231'
    fluent_name = 'column-drag-coeff'
    _python_name = 'column_drag_coeff'
    return_type = 'object'

class ligament_factor(Real):
    """
    'ligament_factor' child.
    """
    _version = '231'
    fluent_name = 'ligament-factor'
    _python_name = 'ligament_factor'
    return_type = 'object'

class jet_diameter(Real):
    """
    'jet_diameter' child.
    """
    _version = '231'
    fluent_name = 'jet-diameter'
    _python_name = 'jet_diameter'
    return_type = 'object'

class constant_k1(Real):
    """
    'constant_k1' child.
    """
    _version = '231'
    fluent_name = 'constant-k1'
    _python_name = 'constant_k1'
    return_type = 'object'

class constant_k2(Real):
    """
    'constant_k2' child.
    """
    _version = '231'
    fluent_name = 'constant-k2'
    _python_name = 'constant_k2'
    return_type = 'object'

class constant_tb(Real):
    """
    'constant_tb' child.
    """
    _version = '231'
    fluent_name = 'constant-tb'
    _python_name = 'constant_tb'
    return_type = 'object'

class droplet_breakup(Group):
    """
    'droplet_breakup' child.
    """
    _version = '231'
    fluent_name = 'droplet-breakup'
    _python_name = 'droplet_breakup'
    child_names = ['option', 'constant_y0', 'number_of_child_droplets', 'constant_b1', 'constant_b0', 'constant_cl', 'constant_ctau', 'constant_crt', 'critical_weber_number', 'core_b1', 'constant_xi', 'target_number_in_parcel', 'constant_c0', 'column_drag_coeff', 'ligament_factor', 'jet_diameter', 'constant_k1', 'constant_k2', 'constant_tb']
    _child_classes = dict(
        option=option_3,
        constant_y0=constant_y0,
        number_of_child_droplets=number_of_child_droplets,
        constant_b1=constant_b1,
        constant_b0=constant_b0,
        constant_cl=constant_cl,
        constant_ctau=constant_ctau,
        constant_crt=constant_crt,
        critical_weber_number=critical_weber_number,
        core_b1=core_b1,
        constant_xi=constant_xi,
        target_number_in_parcel=target_number_in_parcel,
        constant_c0=constant_c0,
        column_drag_coeff=column_drag_coeff,
        ligament_factor=ligament_factor,
        jet_diameter=jet_diameter,
        constant_k1=constant_k1,
        constant_k2=constant_k2,
        constant_tb=constant_tb,
    )
    return_type = 'object'

class physical_models_1(Group):
    """
    'physical_models' child.
    """
    _version = '231'
    fluent_name = 'physical-models'
    _python_name = 'physical_models'
    child_names = ['particle_drag', 'particle_rotation', 'heat_transfer', 'custom_laws', 'turbulent_dispersion', 'droplet_breakup']
    _child_classes = dict(
        particle_drag=particle_drag,
        particle_rotation=particle_rotation,
        heat_transfer=heat_transfer,
        custom_laws=custom_laws,
        turbulent_dispersion=turbulent_dispersion,
        droplet_breakup=droplet_breakup,
    )
    return_type = 'object'

class x(Real):
    """
    'x' child.
    """
    _version = '231'
    fluent_name = 'x'
    _python_name = 'x'
    return_type = 'object'

class x_2(Real):
    """
    'x_2' child.
    """
    _version = '231'
    fluent_name = 'x-2'
    _python_name = 'x_2'
    return_type = 'object'

class y(Real):
    """
    'y' child.
    """
    _version = '231'
    fluent_name = 'y'
    _python_name = 'y'
    return_type = 'object'

class y_2(Real):
    """
    'y_2' child.
    """
    _version = '231'
    fluent_name = 'y-2'
    _python_name = 'y_2'
    return_type = 'object'

class z(Real):
    """
    'z' child.
    """
    _version = '231'
    fluent_name = 'z'
    _python_name = 'z'
    return_type = 'object'

class z_2(Real):
    """
    'z_2' child.
    """
    _version = '231'
    fluent_name = 'z-2'
    _python_name = 'z_2'
    return_type = 'object'

class azimuthal_start_angle(Real):
    """
    'azimuthal_start_angle' child.
    """
    _version = '231'
    fluent_name = 'azimuthal-start-angle'
    _python_name = 'azimuthal_start_angle'
    return_type = 'object'

class azimuthal_stop_angle(Real):
    """
    'azimuthal_stop_angle' child.
    """
    _version = '231'
    fluent_name = 'azimuthal-stop-angle'
    _python_name = 'azimuthal_stop_angle'
    return_type = 'object'

class injection_surfaces(StringList, AllowedValuesMixin):
    """
    'injection_surfaces' child.
    """
    _version = '231'
    fluent_name = 'injection-surfaces'
    _python_name = 'injection_surfaces'
    return_type = 'object'

class random_surface_inj(Boolean):
    """
    'random_surface_inj' child.
    """
    _version = '231'
    fluent_name = 'random-surface-inj?'
    _python_name = 'random_surface_inj'
    return_type = 'object'

class location(Group):
    """
    'location' child.
    """
    _version = '231'
    fluent_name = 'location'
    _python_name = 'location'
    child_names = ['x', 'x_2', 'y', 'y_2', 'z', 'z_2', 'azimuthal_start_angle', 'azimuthal_stop_angle', 'injection_surfaces', 'random_surface_inj']
    _child_classes = dict(
        x=x,
        x_2=x_2,
        y=y,
        y_2=y_2,
        z=z,
        z_2=z_2,
        azimuthal_start_angle=azimuthal_start_angle,
        azimuthal_stop_angle=azimuthal_stop_angle,
        injection_surfaces=injection_surfaces,
        random_surface_inj=random_surface_inj,
    )
    return_type = 'object'

class r(Group):
    """
    'r' child.
    """
    _version = '231'
    fluent_name = 'r'
    _python_name = 'r'
    child_names = ['x', 'y', 'z']
    _child_classes = dict(
        x=x,
        y=y,
        z=z,
    )
    return_type = 'object'

class u(Group):
    """
    'u' child.
    """
    _version = '231'
    fluent_name = 'u'
    _python_name = 'u'
    child_names = ['x', 'y', 'z']
    _child_classes = dict(
        x=x,
        y=y,
        z=z,
    )
    return_type = 'object'

class matrix(Group):
    """
    'matrix' child.
    """
    _version = '231'
    fluent_name = 'matrix'
    _python_name = 'matrix'
    child_names = ['r', 'u']
    _child_classes = dict(
        r=r,
        u=u,
    )
    return_type = 'object'

class half_angle(Real):
    """
    'half_angle' child.
    """
    _version = '231'
    fluent_name = 'half-angle'
    _python_name = 'half_angle'
    return_type = 'object'

class dispersion_angle(Real):
    """
    'dispersion_angle' child.
    """
    _version = '231'
    fluent_name = 'dispersion-angle'
    _python_name = 'dispersion_angle'
    return_type = 'object'

class inner_radius(Real):
    """
    'inner_radius' child.
    """
    _version = '231'
    fluent_name = 'inner-radius'
    _python_name = 'inner_radius'
    return_type = 'object'

class outer_radius(Real):
    """
    'outer_radius' child.
    """
    _version = '231'
    fluent_name = 'outer-radius'
    _python_name = 'outer_radius'
    return_type = 'object'

class x_axis(Real):
    """
    'x_axis' child.
    """
    _version = '231'
    fluent_name = 'x-axis'
    _python_name = 'x_axis'
    return_type = 'object'

class y_axis(Real):
    """
    'y_axis' child.
    """
    _version = '231'
    fluent_name = 'y-axis'
    _python_name = 'y_axis'
    return_type = 'object'

class z_axis(Real):
    """
    'z_axis' child.
    """
    _version = '231'
    fluent_name = 'z-axis'
    _python_name = 'z_axis'
    return_type = 'object'

class cone_settings(Group):
    """
    'cone_settings' child.
    """
    _version = '231'
    fluent_name = 'cone-settings'
    _python_name = 'cone_settings'
    child_names = ['half_angle', 'dispersion_angle', 'inner_radius', 'outer_radius', 'x_axis', 'y_axis', 'z_axis']
    _child_classes = dict(
        half_angle=half_angle,
        dispersion_angle=dispersion_angle,
        inner_radius=inner_radius,
        outer_radius=outer_radius,
        x_axis=x_axis,
        y_axis=y_axis,
        z_axis=z_axis,
    )
    return_type = 'object'

class x_velocity(Real):
    """
    'x_velocity' child.
    """
    _version = '231'
    fluent_name = 'x-velocity'
    _python_name = 'x_velocity'
    return_type = 'object'

class x_velocity_2(Real):
    """
    'x_velocity_2' child.
    """
    _version = '231'
    fluent_name = 'x-velocity-2'
    _python_name = 'x_velocity_2'
    return_type = 'object'

class y_velocity(Real):
    """
    'y_velocity' child.
    """
    _version = '231'
    fluent_name = 'y-velocity'
    _python_name = 'y_velocity'
    return_type = 'object'

class y_velocity_2(Real):
    """
    'y_velocity_2' child.
    """
    _version = '231'
    fluent_name = 'y-velocity-2'
    _python_name = 'y_velocity_2'
    return_type = 'object'

class z_velocity(Real):
    """
    'z_velocity' child.
    """
    _version = '231'
    fluent_name = 'z-velocity'
    _python_name = 'z_velocity'
    return_type = 'object'

class z_velocity_2(Real):
    """
    'z_velocity_2' child.
    """
    _version = '231'
    fluent_name = 'z-velocity-2'
    _python_name = 'z_velocity_2'
    return_type = 'object'

class magnitude(Real):
    """
    'magnitude' child.
    """
    _version = '231'
    fluent_name = 'magnitude'
    _python_name = 'magnitude'
    return_type = 'object'

class swirl_fraction(Real):
    """
    'swirl_fraction' child.
    """
    _version = '231'
    fluent_name = 'swirl-fraction'
    _python_name = 'swirl_fraction'
    return_type = 'object'

class use_face_normal_direction(Boolean):
    """
    'use_face_normal_direction' child.
    """
    _version = '231'
    fluent_name = 'use-face-normal-direction?'
    _python_name = 'use_face_normal_direction'
    return_type = 'object'

class velocity(Group):
    """
    'velocity' child.
    """
    _version = '231'
    fluent_name = 'velocity'
    _python_name = 'velocity'
    child_names = ['x_velocity', 'x_velocity_2', 'y_velocity', 'y_velocity_2', 'z_velocity', 'z_velocity_2', 'magnitude', 'swirl_fraction', 'use_face_normal_direction']
    _child_classes = dict(
        x_velocity=x_velocity,
        x_velocity_2=x_velocity_2,
        y_velocity=y_velocity,
        y_velocity_2=y_velocity_2,
        z_velocity=z_velocity,
        z_velocity_2=z_velocity_2,
        magnitude=magnitude,
        swirl_fraction=swirl_fraction,
        use_face_normal_direction=use_face_normal_direction,
    )
    return_type = 'object'

class angular_velocity(Group):
    """
    'angular_velocity' child.
    """
    _version = '231'
    fluent_name = 'angular-velocity'
    _python_name = 'angular_velocity'
    child_names = ['x', 'x_2', 'y', 'y_2', 'z', 'z_2', 'magnitude']
    _child_classes = dict(
        x=x,
        x_2=x_2,
        y=y,
        y_2=y_2,
        z=z,
        z_2=z_2,
        magnitude=magnitude,
    )
    return_type = 'object'

class flow_rate_1(Real):
    """
    'flow_rate' child.
    """
    _version = '231'
    fluent_name = 'flow-rate'
    _python_name = 'flow_rate'
    return_type = 'object'

class flow_rate_2(Real):
    """
    'flow_rate_2' child.
    """
    _version = '231'
    fluent_name = 'flow-rate-2'
    _python_name = 'flow_rate_2'
    return_type = 'object'

class total_flow_rate(Real):
    """
    'total_flow_rate' child.
    """
    _version = '231'
    fluent_name = 'total-flow-rate'
    _python_name = 'total_flow_rate'
    return_type = 'object'

class scale_by_area(Boolean):
    """
    'scale_by_area' child.
    """
    _version = '231'
    fluent_name = 'scale-by-area?'
    _python_name = 'scale_by_area'
    return_type = 'object'

class flow_rate(Group):
    """
    'flow_rate' child.
    """
    _version = '231'
    fluent_name = 'flow-rate'
    _python_name = 'flow_rate'
    child_names = ['flow_rate', 'flow_rate_2', 'total_flow_rate', 'scale_by_area']
    _child_classes = dict(
        flow_rate=flow_rate_1,
        flow_rate_2=flow_rate_2,
        total_flow_rate=total_flow_rate,
        scale_by_area=scale_by_area,
    )
    return_type = 'object'

class start_time(Real):
    """
    'start_time' child.
    """
    _version = '231'
    fluent_name = 'start-time'
    _python_name = 'start_time'
    return_type = 'object'

class stop_time(Real):
    """
    'stop_time' child.
    """
    _version = '231'
    fluent_name = 'stop-time'
    _python_name = 'stop_time'
    return_type = 'object'

class times(Group):
    """
    'times' child.
    """
    _version = '231'
    fluent_name = 'times'
    _python_name = 'times'
    child_names = ['start_time', 'stop_time']
    _child_classes = dict(
        start_time=start_time,
        stop_time=stop_time,
    )
    return_type = 'object'

class diameter_1(Real):
    """
    'diameter' child.
    """
    _version = '231'
    fluent_name = 'diameter'
    _python_name = 'diameter'
    return_type = 'object'

class diameter_2(Real):
    """
    'diameter_2' child.
    """
    _version = '231'
    fluent_name = 'diameter-2'
    _python_name = 'diameter_2'
    return_type = 'object'

class min_diam(Real):
    """
    'min_diam' child.
    """
    _version = '231'
    fluent_name = 'min-diam'
    _python_name = 'min_diam'
    return_type = 'object'

class max_diam(Real):
    """
    'max_diam' child.
    """
    _version = '231'
    fluent_name = 'max-diam'
    _python_name = 'max_diam'
    return_type = 'object'

class mean_diam(Real):
    """
    'mean_diam' child.
    """
    _version = '231'
    fluent_name = 'mean-diam'
    _python_name = 'mean_diam'
    return_type = 'object'

class spread(Real):
    """
    'spread' child.
    """
    _version = '231'
    fluent_name = 'spread'
    _python_name = 'spread'
    return_type = 'object'

class number_of_diameters(Real):
    """
    'number_of_diameters' child.
    """
    _version = '231'
    fluent_name = 'number-of-diameters'
    _python_name = 'number_of_diameters'
    return_type = 'object'

class rosin_rammler_settings(Group):
    """
    'rosin_rammler_settings' child.
    """
    _version = '231'
    fluent_name = 'rosin-rammler-settings'
    _python_name = 'rosin_rammler_settings'
    child_names = ['min_diam', 'max_diam', 'mean_diam', 'spread', 'number_of_diameters']
    _child_classes = dict(
        min_diam=min_diam,
        max_diam=max_diam,
        mean_diam=mean_diam,
        spread=spread,
        number_of_diameters=number_of_diameters,
    )
    return_type = 'object'

class table_name(String):
    """
    'table_name' child.
    """
    _version = '231'
    fluent_name = 'table-name'
    _python_name = 'table_name'
    return_type = 'object'

class column_with_diameters(String, AllowedValuesMixin):
    """
    'column_with_diameters' child.
    """
    _version = '231'
    fluent_name = 'column-with-diameters'
    _python_name = 'column_with_diameters'
    return_type = 'object'

class column_with_number_fractions(String, AllowedValuesMixin):
    """
    'column_with_number_fractions' child.
    """
    _version = '231'
    fluent_name = 'column-with-number-fractions'
    _python_name = 'column_with_number_fractions'
    return_type = 'object'

class column_with_mass_fractions(String, AllowedValuesMixin):
    """
    'column_with_mass_fractions' child.
    """
    _version = '231'
    fluent_name = 'column-with-mass-fractions'
    _python_name = 'column_with_mass_fractions'
    return_type = 'object'

class accumulated_number_fraction(Boolean):
    """
    'accumulated_number_fraction' child.
    """
    _version = '231'
    fluent_name = 'accumulated-number-fraction?'
    _python_name = 'accumulated_number_fraction'
    return_type = 'object'

class accumulated_mass_fraction(Boolean):
    """
    'accumulated_mass_fraction' child.
    """
    _version = '231'
    fluent_name = 'accumulated-mass-fraction?'
    _python_name = 'accumulated_mass_fraction'
    return_type = 'object'

class tabulated_size_settings(Group):
    """
    'tabulated_size_settings' child.
    """
    _version = '231'
    fluent_name = 'tabulated-size-settings'
    _python_name = 'tabulated_size_settings'
    child_names = ['table_name', 'column_with_diameters', 'column_with_number_fractions', 'column_with_mass_fractions', 'accumulated_number_fraction', 'accumulated_mass_fraction']
    _child_classes = dict(
        table_name=table_name,
        column_with_diameters=column_with_diameters,
        column_with_number_fractions=column_with_number_fractions,
        column_with_mass_fractions=column_with_mass_fractions,
        accumulated_number_fraction=accumulated_number_fraction,
        accumulated_mass_fraction=accumulated_mass_fraction,
    )
    return_type = 'object'

class diameter(Group):
    """
    'diameter' child.
    """
    _version = '231'
    fluent_name = 'diameter'
    _python_name = 'diameter'
    child_names = ['diameter', 'diameter_2', 'option', 'rosin_rammler_settings', 'tabulated_size_settings']
    _child_classes = dict(
        diameter=diameter_1,
        diameter_2=diameter_2,
        option=option_3,
        rosin_rammler_settings=rosin_rammler_settings,
        tabulated_size_settings=tabulated_size_settings,
    )
    return_type = 'object'

class temperature(Real):
    """
    'temperature' child.
    """
    _version = '231'
    fluent_name = 'temperature'
    _python_name = 'temperature'
    return_type = 'object'

class temperature_2(Real):
    """
    'temperature_2' child.
    """
    _version = '231'
    fluent_name = 'temperature-2'
    _python_name = 'temperature_2'
    return_type = 'object'

class initial_props(Group):
    """
    'initial_props' child.
    """
    _version = '231'
    fluent_name = 'initial-props'
    _python_name = 'initial_props'
    child_names = ['location', 'matrix', 'cone_settings', 'velocity', 'angular_velocity', 'flow_rate', 'times', 'diameter', 'temperature', 'temperature_2']
    _child_classes = dict(
        location=location,
        matrix=matrix,
        cone_settings=cone_settings,
        velocity=velocity,
        angular_velocity=angular_velocity,
        flow_rate=flow_rate,
        times=times,
        diameter=diameter,
        temperature=temperature,
        temperature_2=temperature_2,
    )
    return_type = 'object'

class injections_child(Group):
    """
    'child_object_type' of injections.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'injections_child'
    child_names = ['particle_type', 'material', 'reference_frame', 'number_of_streams', 'injection_type', 'interaction', 'parcel_method', 'particle_reinjector', 'physical_models', 'initial_props']
    _child_classes = dict(
        particle_type=particle_type,
        material=material,
        reference_frame=reference_frame,
        number_of_streams=number_of_streams,
        injection_type=injection_type,
        interaction=interaction_1,
        parcel_method=parcel_method,
        particle_reinjector=particle_reinjector,
        physical_models=physical_models_1,
        initial_props=initial_props,
    )
    return_type = 'object'

class injections(NamedObject[injections_child], CreatableNamedObjectMixinOld[injections_child]):
    """
    'injections' child.
    """
    _version = '231'
    fluent_name = 'injections'
    _python_name = 'injections'
    child_object_type = injections_child
    return_type = 'object'

class enable_node_based_averaging(Boolean):
    """
    Enable/disable node-based averaging of DPM variables.
    """
    _version = '231'
    fluent_name = 'enable-node-based-averaging?'
    _python_name = 'enable_node_based_averaging'
    return_type = 'object'

class average_source_terms(Boolean):
    """
    Enable/disable averaging of DPM source terms to nodes.
    """
    _version = '231'
    fluent_name = 'average-source-terms?'
    _python_name = 'average_source_terms'
    return_type = 'object'

class average_every_step(Boolean):
    """
    Do the averaging after each integration step for higher accuracy at a higher cost.
    """
    _version = '231'
    fluent_name = 'average-every-step?'
    _python_name = 'average_every_step'
    return_type = 'object'

class kernel(String, AllowedValuesMixin):
    """
    A kernel for the averaging.
    """
    _version = '231'
    fluent_name = 'kernel'
    _python_name = 'kernel'
    return_type = 'object'

class gaussian_factor(Real):
    """
    A factor for the gaussian kernel for node-based averaging.~%Large values give small size, small values give large size of kernel.
    """
    _version = '231'
    fluent_name = 'gaussian-factor'
    _python_name = 'gaussian_factor'
    return_type = 'object'

class averaging_kernel(Group):
    """
    'averaging_kernel' child.
    """
    _version = '231'
    fluent_name = 'averaging-kernel'
    _python_name = 'averaging_kernel'
    child_names = ['kernel', 'gaussian_factor']
    _child_classes = dict(
        kernel=kernel,
        gaussian_factor=gaussian_factor,
    )
    return_type = 'object'

class averaging(Group):
    """
    Menu containing options to enable/disable node-based averaging of DPM variables and DPM source terms. 
    Please note that node-based averaging functionality is only available if source term linearization is not active.
    """
    _version = '231'
    fluent_name = 'averaging'
    _python_name = 'averaging'
    child_names = ['enable_node_based_averaging', 'average_source_terms', 'average_every_step', 'averaging_kernel']
    _child_classes = dict(
        enable_node_based_averaging=enable_node_based_averaging,
        average_source_terms=average_source_terms,
        average_every_step=average_every_step,
        averaging_kernel=averaging_kernel,
    )
    return_type = 'object'

class keep_linearized_source_terms_constant(Boolean):
    """
    Enable/disable keeping linearized DPM source terms constant until the next DPM Update.
    """
    _version = '231'
    fluent_name = 'keep-linearized-source-terms-constant?'
    _python_name = 'keep_linearized_source_terms_constant'
    return_type = 'object'

class linearize_source_terms(Boolean):
    """
    Enable/disable linearization of DPM source terms.
    """
    _version = '231'
    fluent_name = 'linearize-source-terms?'
    _python_name = 'linearize_source_terms'
    return_type = 'object'

class linearized_source_terms_limiter(Real):
    """
    Relative limit for DPM source linear coefficient with respect to fluid linear Ap coefficient.
    """
    _version = '231'
    fluent_name = 'linearized-source-terms-limiter'
    _python_name = 'linearized_source_terms_limiter'
    return_type = 'object'

class linearization(Group):
    """
    Menu containing options to enable/disable linearization of DPM source terms. 
    Please note that source term linearization is only available if the node-based averaging option is not active.
    """
    _version = '231'
    fluent_name = 'linearization'
    _python_name = 'linearization'
    child_names = ['keep_linearized_source_terms_constant', 'linearize_source_terms', 'linearized_source_terms_limiter']
    _child_classes = dict(
        keep_linearized_source_terms_constant=keep_linearized_source_terms_constant,
        linearize_source_terms=linearize_source_terms,
        linearized_source_terms_limiter=linearized_source_terms_limiter,
    )
    return_type = 'object'

class implicit_momentum_coupling(Boolean):
    """
    Enable/disable implicit treatment for the DPM momentum source terms.
    """
    _version = '231'
    fluent_name = 'implicit-momentum-coupling?'
    _python_name = 'implicit_momentum_coupling'
    return_type = 'object'

class implicit_source_term_coupling(Boolean):
    """
    Enable/disable implicit treatment for all DPM source terms.
    """
    _version = '231'
    fluent_name = 'implicit-source-term-coupling?'
    _python_name = 'implicit_source_term_coupling'
    return_type = 'object'

class linear_growth_of_dpm_source_terms(Boolean):
    """
    Enable/disable the linear growth of DPM source terms every DPM iteration.
    """
    _version = '231'
    fluent_name = 'linear-growth-of-dpm-source-terms?'
    _python_name = 'linear_growth_of_dpm_source_terms'
    return_type = 'object'

class reset_sources_at_timestep(Boolean):
    """
    Enable/disable flushing of DPM source terms at beginning of every time step.
    """
    _version = '231'
    fluent_name = 'reset-sources-at-timestep?'
    _python_name = 'reset_sources_at_timestep'
    return_type = 'object'

class source_terms(Group):
    """
    'source_terms' child.
    """
    _version = '231'
    fluent_name = 'source-terms'
    _python_name = 'source_terms'
    child_names = ['linearization', 'implicit_momentum_coupling', 'implicit_source_term_coupling', 'linear_growth_of_dpm_source_terms', 'reset_sources_at_timestep']
    _child_classes = dict(
        linearization=linearization,
        implicit_momentum_coupling=implicit_momentum_coupling,
        implicit_source_term_coupling=implicit_source_term_coupling,
        linear_growth_of_dpm_source_terms=linear_growth_of_dpm_source_terms,
        reset_sources_at_timestep=reset_sources_at_timestep,
    )
    return_type = 'object'

class scheme(String, AllowedValuesMixin):
    """
    A tracking scheme used for DPM.
    """
    _version = '231'
    fluent_name = 'scheme'
    _python_name = 'scheme'
    return_type = 'object'

class low_order_scheme(String, AllowedValuesMixin):
    """
    A low-order tracking scheme used for automated tracking scheme selection.
    """
    _version = '231'
    fluent_name = 'low-order-scheme'
    _python_name = 'low_order_scheme'
    return_type = 'object'

class high_order_scheme(String, AllowedValuesMixin):
    """
    A high-order tracking scheme used for automated tracking scheme selection.
    """
    _version = '231'
    fluent_name = 'high-order-scheme'
    _python_name = 'high_order_scheme'
    return_type = 'object'

class option_4(Boolean):
    """
    Enable/disable error control during tracking.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class max_number_of_refinements(Integer):
    """
    The maximum number of step size refinements if error control is active.
    """
    _version = '231'
    fluent_name = 'max-number-of-refinements'
    _python_name = 'max_number_of_refinements'
    return_type = 'object'

class tolerance(Real):
    """
    The maximum number of step size refinements if error control is active.
    """
    _version = '231'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'
    return_type = 'object'

class accuracy_control(Group):
    """
    'accuracy_control' child.
    """
    _version = '231'
    fluent_name = 'accuracy-control'
    _python_name = 'accuracy_control'
    child_names = ['option', 'max_number_of_refinements', 'tolerance']
    _child_classes = dict(
        option=option_4,
        max_number_of_refinements=max_number_of_refinements,
        tolerance=tolerance,
    )
    return_type = 'object'

class tracking_1(Group):
    """
    'tracking' child.
    """
    _version = '231'
    fluent_name = 'tracking'
    _python_name = 'tracking'
    child_names = ['scheme', 'low_order_scheme', 'high_order_scheme', 'accuracy_control']
    _child_classes = dict(
        scheme=scheme,
        low_order_scheme=low_order_scheme,
        high_order_scheme=high_order_scheme,
        accuracy_control=accuracy_control,
    )
    return_type = 'object'

class numerics(Group):
    """
    Main object.
    """
    _version = '231'
    fluent_name = 'numerics'
    _python_name = 'numerics'
    child_names = ['averaging', 'source_terms', 'tracking']
    _child_classes = dict(
        averaging=averaging,
        source_terms=source_terms,
        tracking=tracking_1,
    )
    return_type = 'object'

class option_5(String, AllowedValuesMixin):
    """
    A parallel scheme used for DPM.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class parallel_verbosity_level(Integer):
    """
    The parallel verbosity level [0]: none.
    """
    _version = '231'
    fluent_name = 'parallel-verbosity-level'
    _python_name = 'parallel_verbosity_level'
    return_type = 'object'

class crossover_tolerance(Real):
    """
    The fraction a particle is moved towards the cell center (0: not moved, 1: moved to cell center).
    """
    _version = '231'
    fluent_name = 'crossover-tolerance'
    _python_name = 'crossover_tolerance'
    return_type = 'object'

class expert_options(Group):
    """
    'expert_options' child.
    """
    _version = '231'
    fluent_name = 'expert-options'
    _python_name = 'expert_options'
    child_names = ['parallel_verbosity_level', 'crossover_tolerance']
    _child_classes = dict(
        parallel_verbosity_level=parallel_verbosity_level,
        crossover_tolerance=crossover_tolerance,
    )
    return_type = 'object'

class option_6(Boolean):
    """
    Enable/disable DPM domain for hybrid tracking.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class partitioning_method_for_dpm_domain(String, AllowedValuesMixin):
    """
    The DPM domain partitioning method.
    """
    _version = '231'
    fluent_name = 'partitioning-method-for-dpm-domain'
    _python_name = 'partitioning_method_for_dpm_domain'
    return_type = 'object'

class dpm_domain(Group):
    """
    'dpm_domain' child.
    """
    _version = '231'
    fluent_name = 'dpm-domain'
    _python_name = 'dpm_domain'
    child_names = ['option', 'partitioning_method_for_dpm_domain']
    _child_classes = dict(
        option=option_6,
        partitioning_method_for_dpm_domain=partitioning_method_for_dpm_domain,
    )
    return_type = 'object'

class ordered_accumulation(Boolean):
    """
    Enable/disable deterministic accumulation order of DPM source terms.
    """
    _version = '231'
    fluent_name = 'ordered-accumulation?'
    _python_name = 'ordered_accumulation'
    return_type = 'object'

class hybrid_options(Group):
    """
    'hybrid_options' child.
    """
    _version = '231'
    fluent_name = 'hybrid-options'
    _python_name = 'hybrid_options'
    child_names = ['dpm_domain', 'ordered_accumulation']
    _child_classes = dict(
        dpm_domain=dpm_domain,
        ordered_accumulation=ordered_accumulation,
    )
    return_type = 'object'

class parallel_1(Group):
    """
    Main object.
    """
    _version = '231'
    fluent_name = 'parallel'
    _python_name = 'parallel'
    child_names = ['option', 'expert_options', 'hybrid_options']
    _child_classes = dict(
        option=option_5,
        expert_options=expert_options,
        hybrid_options=hybrid_options,
    )
    return_type = 'object'

class option_7(Boolean):
    """
    Enable/disable pressure gradient force acting on particles in non-uniform flow.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class pressure_gradient_force(Group):
    """
    'pressure_gradient_force' child.
    """
    _version = '231'
    fluent_name = 'pressure-gradient-force'
    _python_name = 'pressure_gradient_force'
    child_names = ['option']
    _child_classes = dict(
        option=option_7,
    )
    return_type = 'object'

class option_8(Boolean):
    """
    Enable/disable virtual mass force acting on particles. This force term may be important if the particle density is equal to or less than the local fluid density.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class virtual_mass_factor(Real):
    """
    The virtual mass factor.
    """
    _version = '231'
    fluent_name = 'virtual-mass-factor'
    _python_name = 'virtual_mass_factor'
    return_type = 'object'

class virtual_mass_force(Group):
    """
    'virtual_mass_force' child.
    """
    _version = '231'
    fluent_name = 'virtual-mass-force'
    _python_name = 'virtual_mass_force'
    child_names = ['option', 'virtual_mass_factor']
    _child_classes = dict(
        option=option_8,
        virtual_mass_factor=virtual_mass_factor,
    )
    return_type = 'object'

class option_9(Boolean):
    """
    Enable/disable displacement of the continuous phase due to particles.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class max_vf_allowed_for_blocking(Real):
    """
    The maximum value for the DPM volume fraction used in the continuous flow when the volume displacement option is active.
    """
    _version = '231'
    fluent_name = 'max-vf-allowed-for-blocking'
    _python_name = 'max_vf_allowed_for_blocking'
    return_type = 'object'

class enable_drag_scaling(Boolean):
    """
    Enable/disable scaling of DPM drag coefficient due to inclusion of DPM volume fraction in continuous flow.
    """
    _version = '231'
    fluent_name = 'enable-drag-scaling?'
    _python_name = 'enable_drag_scaling'
    return_type = 'object'

class enable_source_term_scaling(Boolean):
    """
    Enable/disable scaling of DPM source terms due to inclusion of DPM volume fraction in continuous flow.
    """
    _version = '231'
    fluent_name = 'enable-source-term-scaling?'
    _python_name = 'enable_source_term_scaling'
    return_type = 'object'

class volume_displacement_1(Group):
    """
    In many Lagrangian-Eulerian simulations, the volume fraction of the local particle phase may not be small,
    and the blocking effect of the particulate phase on the carrier phase may need to be taken into account.
    To enable the volume displacement effect of particles, select "option = #t".
    """
    _version = '231'
    fluent_name = 'volume-displacement'
    _python_name = 'volume_displacement'
    child_names = ['option', 'max_vf_allowed_for_blocking', 'enable_drag_scaling', 'enable_source_term_scaling']
    _child_classes = dict(
        option=option_9,
        max_vf_allowed_for_blocking=max_vf_allowed_for_blocking,
        enable_drag_scaling=enable_drag_scaling,
        enable_source_term_scaling=enable_source_term_scaling,
    )
    return_type = 'object'

class include_convective_heat_transfer(Boolean):
    """
    Enable/disable convection/conduction in the film-to-wall heat transfer model.
    """
    _version = '231'
    fluent_name = 'include-convective-heat-transfer?'
    _python_name = 'include_convective_heat_transfer'
    return_type = 'object'

class include_lwf_particles_in_dpm_concentration(Boolean):
    """
    Include/exclude LWF particle mass in the calculation of DPM Concentration.
    """
    _version = '231'
    fluent_name = 'include-lwf-particles-in-dpm-concentration?'
    _python_name = 'include_lwf_particles_in_dpm_concentration'
    return_type = 'object'

class remove_limiter(Boolean):
    """
    Enable/disable the Leidenfrost wall film temperature limiter.
    """
    _version = '231'
    fluent_name = 'remove-limiter?'
    _python_name = 'remove_limiter'
    return_type = 'object'

class report_leidenfrost_temperature(Boolean):
    """
    Enable/disable the reporting of wall film faces above the Leidenfrost point.
    """
    _version = '231'
    fluent_name = 'report-leidenfrost-temperature?'
    _python_name = 'report_leidenfrost_temperature'
    return_type = 'object'

class set_offset_above_film_boiling_temperature(Real):
    """
    The temperature difference above the film boiling point.
    """
    _version = '231'
    fluent_name = 'set-offset-above-film-boiling-temperature'
    _python_name = 'set_offset_above_film_boiling_temperature'
    return_type = 'object'

class wall_film_temperature_limiter(Group):
    """
    'wall_film_temperature_limiter' child.
    """
    _version = '231'
    fluent_name = 'wall-film-temperature-limiter'
    _python_name = 'wall_film_temperature_limiter'
    child_names = ['remove_limiter', 'report_leidenfrost_temperature', 'set_offset_above_film_boiling_temperature']
    _child_classes = dict(
        remove_limiter=remove_limiter,
        report_leidenfrost_temperature=report_leidenfrost_temperature,
        set_offset_above_film_boiling_temperature=set_offset_above_film_boiling_temperature,
    )
    return_type = 'object'

class wall_film(Group):
    """
    'wall_film' child.
    """
    _version = '231'
    fluent_name = 'wall-film'
    _python_name = 'wall_film'
    child_names = ['include_convective_heat_transfer', 'include_lwf_particles_in_dpm_concentration', 'wall_film_temperature_limiter']
    _child_classes = dict(
        include_convective_heat_transfer=include_convective_heat_transfer,
        include_lwf_particles_in_dpm_concentration=include_lwf_particles_in_dpm_concentration,
        wall_film_temperature_limiter=wall_film_temperature_limiter,
    )
    return_type = 'object'

class physical_models(Group):
    """
    Main object.
    """
    _version = '231'
    fluent_name = 'physical-models'
    _python_name = 'physical_models'
    child_names = ['pressure_gradient_force', 'virtual_mass_force', 'volume_displacement', 'wall_film']
    _child_classes = dict(
        pressure_gradient_force=pressure_gradient_force,
        virtual_mass_force=virtual_mass_force,
        volume_displacement=volume_displacement_1,
        wall_film=wall_film,
    )
    return_type = 'object'

class enable_high_res_tracking(Boolean):
    """
    Enable/disable high resolution tracking. Please note that high-resolution tracking is the recommended default for highest tracking robustness, accuracy and performance.
    """
    _version = '231'
    fluent_name = 'enable-high-res-tracking?'
    _python_name = 'enable_high_res_tracking'
    return_type = 'object'

class re_randomize_every_iteration(Boolean):
    """
    Enable/disable changing the pseudo-random number sequences from iteration to iteration.
    """
    _version = '231'
    fluent_name = 're-randomize-every-iteration?'
    _python_name = 're_randomize_every_iteration'
    return_type = 'object'

class re_randomize_every_timestep(Boolean):
    """
    Enable/disable changing the pseudo-random number sequences from timestep to timestep.
    """
    _version = '231'
    fluent_name = 're-randomize-every-timestep?'
    _python_name = 're_randomize_every_timestep'
    return_type = 'object'

class tracking_statistics_format(Integer):
    """
    Control the format of the one-line tracking statistics printed after every DPM tracking pass.
    """
    _version = '231'
    fluent_name = 'tracking-statistics-format'
    _python_name = 'tracking_statistics_format'
    return_type = 'object'

class verbosity_1(Integer):
    """
    The DPM tracker's verbosity level.
    """
    _version = '231'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class expert_options_1(Group):
    """
    Menu containing not frequently used (expert level) settings.
    """
    _version = '231'
    fluent_name = 'expert-options'
    _python_name = 'expert_options'
    child_names = ['re_randomize_every_iteration', 're_randomize_every_timestep', 'tracking_statistics_format', 'verbosity']
    _child_classes = dict(
        re_randomize_every_iteration=re_randomize_every_iteration,
        re_randomize_every_timestep=re_randomize_every_timestep,
        tracking_statistics_format=tracking_statistics_format,
        verbosity=verbosity_1,
    )
    return_type = 'object'

class always_use_face_centroid_with_periodics(Boolean):
    """
    Enable/disable using quad face centroids when creating subtets if the case contains periodic boundaries.
    """
    _version = '231'
    fluent_name = 'always-use-face-centroid-with-periodics?'
    _python_name = 'always_use_face_centroid_with_periodics'
    return_type = 'object'

class interpolate_flow_cp(Boolean):
    """
    Enable/disable interpolation of flow specific heat to the particle position.
    """
    _version = '231'
    fluent_name = 'interpolate-flow-cp?'
    _python_name = 'interpolate_flow_cp'
    return_type = 'object'

class interpolate_flow_density(Boolean):
    """
    Enable/disable interpolation of flow density to the particle position.
    """
    _version = '231'
    fluent_name = 'interpolate-flow-density?'
    _python_name = 'interpolate_flow_density'
    return_type = 'object'

class interpolate_flow_solution_gradients(Boolean):
    """
    Enable/disable interpolation of flow solution gradients to the particle position.
    """
    _version = '231'
    fluent_name = 'interpolate-flow-solution-gradients?'
    _python_name = 'interpolate_flow_solution_gradients'
    return_type = 'object'

class interpolate_flow_viscosity(Boolean):
    """
    Enable/disable interpolation of flow laminar viscosity to the particle position.
    """
    _version = '231'
    fluent_name = 'interpolate-flow-viscosity?'
    _python_name = 'interpolate_flow_viscosity'
    return_type = 'object'

class interpolate_temperature(Boolean):
    """
    Enable/disable interpolation of flow temperature to the particle position.
    """
    _version = '231'
    fluent_name = 'interpolate-temperature?'
    _python_name = 'interpolate_temperature'
    return_type = 'object'

class zero_nodal_velocities_on_walls(Boolean):
    """
    Enable/disable setting the nodal velocity on all walls to zero.
    """
    _version = '231'
    fluent_name = 'zero-nodal-velocities-on-walls?'
    _python_name = 'zero_nodal_velocities_on_walls'
    return_type = 'object'

class interpolation(Group):
    """
    Main object.
    """
    _version = '231'
    fluent_name = 'interpolation'
    _python_name = 'interpolation'
    child_names = ['interpolate_flow_cp', 'interpolate_flow_density', 'interpolate_flow_solution_gradients', 'interpolate_flow_viscosity', 'interpolate_temperature', 'zero_nodal_velocities_on_walls']
    _child_classes = dict(
        interpolate_flow_cp=interpolate_flow_cp,
        interpolate_flow_density=interpolate_flow_density,
        interpolate_flow_solution_gradients=interpolate_flow_solution_gradients,
        interpolate_flow_viscosity=interpolate_flow_viscosity,
        interpolate_temperature=interpolate_temperature,
        zero_nodal_velocities_on_walls=zero_nodal_velocities_on_walls,
    )
    return_type = 'object'

class boundary_layer_tracking(Boolean):
    """
    Enable/disable adjusting the particle timestep to account for high aspect ratio cells.
    """
    _version = '231'
    fluent_name = 'boundary-layer-tracking?'
    _python_name = 'boundary_layer_tracking'
    return_type = 'object'

class check_subtet_validity(Boolean):
    """
    Enable/disable testing for inverted subtets due to warped cells.
    """
    _version = '231'
    fluent_name = 'check-subtet-validity?'
    _python_name = 'check_subtet_validity'
    return_type = 'object'

class use_automatic_intersection_tolerance(Boolean):
    """
    Enable/disable using an automatic scaling of subtet intersection tolerance.
    """
    _version = '231'
    fluent_name = 'use-automatic-intersection-tolerance?'
    _python_name = 'use_automatic_intersection_tolerance'
    return_type = 'object'

class use_barycentric_intersection(Boolean):
    """
    Enable/disable using barycentric coordinates for intersection calculations.
    """
    _version = '231'
    fluent_name = 'use-barycentric-intersection?'
    _python_name = 'use_barycentric_intersection'
    return_type = 'object'

class enhanced_cell_relocation_method(Boolean):
    """
    Enable/disable enhanced method of locating particles in cells.
    """
    _version = '231'
    fluent_name = 'enhanced-cell-relocation-method?'
    _python_name = 'enhanced_cell_relocation_method'
    return_type = 'object'

class load_legacy_particles(Boolean):
    """
    Enable/disable loading of particles that were tracked without high-resolution tracking enabled.
    """
    _version = '231'
    fluent_name = 'load-legacy-particles?'
    _python_name = 'load_legacy_particles'
    return_type = 'object'

class overset_relocation_robustness_level(Integer):
    """
    The robustness level for particle relocation in overset meshes.
    """
    _version = '231'
    fluent_name = 'overset-relocation-robustness-level'
    _python_name = 'overset_relocation_robustness_level'
    return_type = 'object'

class use_legacy_particle_location_method(Boolean):
    """
    Enable/disable legacy method of locating particles in cells.
    """
    _version = '231'
    fluent_name = 'use-legacy-particle-location-method?'
    _python_name = 'use_legacy_particle_location_method'
    return_type = 'object'

class particle_relocation(Group):
    """
    Main object.
    """
    _version = '231'
    fluent_name = 'particle-relocation'
    _python_name = 'particle_relocation'
    child_names = ['enhanced_cell_relocation_method', 'load_legacy_particles', 'overset_relocation_robustness_level', 'use_legacy_particle_location_method']
    _child_classes = dict(
        enhanced_cell_relocation_method=enhanced_cell_relocation_method,
        load_legacy_particles=load_legacy_particles,
        overset_relocation_robustness_level=overset_relocation_robustness_level,
        use_legacy_particle_location_method=use_legacy_particle_location_method,
    )
    return_type = 'object'

class remove_stuck_particles(Boolean):
    """
    Enable/disable removal of particles that are stuck at edges or faces.
    """
    _version = '231'
    fluent_name = 'remove-stuck-particles?'
    _python_name = 'remove_stuck_particles'
    return_type = 'object'

class use_barycentric_sampling(Boolean):
    """
    Enable/disable using of barycentric coordinates when sampling particles at planes.
    """
    _version = '231'
    fluent_name = 'use-barycentric-sampling?'
    _python_name = 'use_barycentric_sampling'
    return_type = 'object'

class use_quad_face_centroid(Boolean):
    """
    Enable/disable using of quad face centroids when creating subtets.
    """
    _version = '231'
    fluent_name = 'use-quad-face-centroid?'
    _python_name = 'use_quad_face_centroid'
    return_type = 'object'

class high_res_tracking_options(Group):
    """
    Main object.
    """
    _version = '231'
    fluent_name = 'high-res-tracking-options'
    _python_name = 'high_res_tracking_options'
    child_names = ['always_use_face_centroid_with_periodics', 'interpolation', 'boundary_layer_tracking', 'check_subtet_validity', 'use_automatic_intersection_tolerance', 'use_barycentric_intersection', 'particle_relocation', 'remove_stuck_particles', 'use_barycentric_sampling', 'use_quad_face_centroid']
    _child_classes = dict(
        always_use_face_centroid_with_periodics=always_use_face_centroid_with_periodics,
        interpolation=interpolation,
        boundary_layer_tracking=boundary_layer_tracking,
        check_subtet_validity=check_subtet_validity,
        use_automatic_intersection_tolerance=use_automatic_intersection_tolerance,
        use_barycentric_intersection=use_barycentric_intersection,
        particle_relocation=particle_relocation,
        remove_stuck_particles=remove_stuck_particles,
        use_barycentric_sampling=use_barycentric_sampling,
        use_quad_face_centroid=use_quad_face_centroid,
    )
    return_type = 'object'

class control_by(String, AllowedValuesMixin):
    """
    The option to determine the initial tracking step length.
    """
    _version = '231'
    fluent_name = 'control-by'
    _python_name = 'control_by'
    return_type = 'object'

class max_number_of_steps(Integer):
    """
    The maximum number of integration steps per particle.
    """
    _version = '231'
    fluent_name = 'max-number-of-steps'
    _python_name = 'max_number_of_steps'
    return_type = 'object'

class length_scale(Real):
    """
    The tracking step length scale.
    """
    _version = '231'
    fluent_name = 'length-scale'
    _python_name = 'length_scale'
    return_type = 'object'

class step_length_factor(Integer):
    """
    The tracking step length factor.
    """
    _version = '231'
    fluent_name = 'step-length-factor'
    _python_name = 'step_length_factor'
    return_type = 'object'

class tracking_parameters(Group):
    """
    Main object.
    """
    _version = '231'
    fluent_name = 'tracking-parameters'
    _python_name = 'tracking_parameters'
    child_names = ['control_by', 'max_number_of_steps', 'length_scale', 'step_length_factor']
    _child_classes = dict(
        control_by=control_by,
        max_number_of_steps=max_number_of_steps,
        length_scale=length_scale,
        step_length_factor=step_length_factor,
    )
    return_type = 'object'

class track_in_absolute_frame(Boolean):
    """
    Enable/disable tracking of particles in the absolute frame. Please note that tracking in the relative frame is the recommended default.
    """
    _version = '231'
    fluent_name = 'track-in-absolute-frame?'
    _python_name = 'track_in_absolute_frame'
    return_type = 'object'

class tracking(Group):
    """
    Main object.
    """
    _version = '231'
    fluent_name = 'tracking'
    _python_name = 'tracking'
    child_names = ['enable_high_res_tracking', 'expert_options', 'high_res_tracking_options', 'tracking_parameters', 'track_in_absolute_frame']
    _child_classes = dict(
        enable_high_res_tracking=enable_high_res_tracking,
        expert_options=expert_options_1,
        high_res_tracking_options=high_res_tracking_options,
        tracking_parameters=tracking_parameters,
        track_in_absolute_frame=track_in_absolute_frame,
    )
    return_type = 'object'

class body_force_function(String, AllowedValuesMixin):
    """
    The name of the DPM body force function.
    """
    _version = '231'
    fluent_name = 'body-force-function'
    _python_name = 'body_force_function'
    return_type = 'object'

class collision_function(String, AllowedValuesMixin):
    """
    The name of the DPM collision function.
    """
    _version = '231'
    fluent_name = 'collision-function'
    _python_name = 'collision_function'
    return_type = 'object'

class dpm_time_step_function(String, AllowedValuesMixin):
    """
    The name of the DPM timestep function.
    """
    _version = '231'
    fluent_name = 'dpm-time-step-function'
    _python_name = 'dpm_time_step_function'
    return_type = 'object'

class erosion_accretion_function(String, AllowedValuesMixin):
    """
    The name of the DPM erosion/accretion function.
    """
    _version = '231'
    fluent_name = 'erosion-accretion-function'
    _python_name = 'erosion_accretion_function'
    return_type = 'object'

class film_regime_function(String, AllowedValuesMixin):
    """
    The name of the film regime function.
    """
    _version = '231'
    fluent_name = 'film-regime-function'
    _python_name = 'film_regime_function'
    return_type = 'object'

class interpolation_function(String, AllowedValuesMixin):
    """
    The name of the interpolation function.
    """
    _version = '231'
    fluent_name = 'interpolation-function'
    _python_name = 'interpolation_function'
    return_type = 'object'

class impingement_model_function(String, AllowedValuesMixin):
    """
    The name of the impingement model function.
    """
    _version = '231'
    fluent_name = 'impingement-model-function'
    _python_name = 'impingement_model_function'
    return_type = 'object'

class output_function(String, AllowedValuesMixin):
    """
    The name of the DPM output function.
    """
    _version = '231'
    fluent_name = 'output-function'
    _python_name = 'output_function'
    return_type = 'object'

class scalar_update_function(String, AllowedValuesMixin):
    """
    The name of the DPM scalar update function.
    """
    _version = '231'
    fluent_name = 'scalar-update-function'
    _python_name = 'scalar_update_function'
    return_type = 'object'

class source_function(String, AllowedValuesMixin):
    """
    The name of the DPM source function.
    """
    _version = '231'
    fluent_name = 'source-function'
    _python_name = 'source_function'
    return_type = 'object'

class splashing_distribution_function(String, AllowedValuesMixin):
    """
    The name of the splashing distribution function.
    """
    _version = '231'
    fluent_name = 'splashing-distribution-function'
    _python_name = 'splashing_distribution_function'
    return_type = 'object'

class number_of_scalars(Integer):
    """
    The number of user reals stored on a particle.
    """
    _version = '231'
    fluent_name = 'number-of-scalars'
    _python_name = 'number_of_scalars'
    return_type = 'object'

class maximum_udf_species(Integer):
    """
    The maximum number of species that can be used in DPM UDFs.
    """
    _version = '231'
    fluent_name = 'maximum-udf-species'
    _python_name = 'maximum_udf_species'
    return_type = 'object'

class user_defined_functions(Group):
    """
    Main object.
    """
    _version = '231'
    fluent_name = 'user-defined-functions'
    _python_name = 'user_defined_functions'
    child_names = ['body_force_function', 'collision_function', 'dpm_time_step_function', 'erosion_accretion_function', 'film_regime_function', 'interpolation_function', 'impingement_model_function', 'output_function', 'scalar_update_function', 'source_function', 'splashing_distribution_function', 'number_of_scalars', 'maximum_udf_species']
    _child_classes = dict(
        body_force_function=body_force_function,
        collision_function=collision_function,
        dpm_time_step_function=dpm_time_step_function,
        erosion_accretion_function=erosion_accretion_function,
        film_regime_function=film_regime_function,
        interpolation_function=interpolation_function,
        impingement_model_function=impingement_model_function,
        output_function=output_function,
        scalar_update_function=scalar_update_function,
        source_function=source_function,
        splashing_distribution_function=splashing_distribution_function,
        number_of_scalars=number_of_scalars,
        maximum_udf_species=maximum_udf_species,
    )
    return_type = 'object'

class discrete_phase(Group):
    """
    Toplevel object.
    """
    _version = '231'
    fluent_name = 'discrete-phase'
    _python_name = 'discrete_phase'
    child_names = ['enable_expert_view', 'general_settings', 'injections', 'numerics', 'parallel', 'physical_models', 'tracking', 'user_defined_functions']
    _child_classes = dict(
        enable_expert_view=enable_expert_view,
        general_settings=general_settings,
        injections=injections,
        numerics=numerics,
        parallel=parallel_1,
        physical_models=physical_models,
        tracking=tracking,
        user_defined_functions=user_defined_functions,
    )
    return_type = 'object'

class enabled(Boolean):
    """
    'enabled' child.
    """
    _version = '231'
    fluent_name = 'enabled'
    _python_name = 'enabled'
    return_type = 'object'

class viscous_dissipation(Boolean):
    """
    'viscous_dissipation' child.
    """
    _version = '231'
    fluent_name = 'viscous-dissipation'
    _python_name = 'viscous_dissipation'
    return_type = 'object'

class pressure_work(Boolean):
    """
    'pressure_work' child.
    """
    _version = '231'
    fluent_name = 'pressure-work'
    _python_name = 'pressure_work'
    return_type = 'object'

class kinetic_energy(Boolean):
    """
    'kinetic_energy' child.
    """
    _version = '231'
    fluent_name = 'kinetic-energy'
    _python_name = 'kinetic_energy'
    return_type = 'object'

class inlet_diffusion(Boolean):
    """
    'inlet_diffusion' child.
    """
    _version = '231'
    fluent_name = 'inlet-diffusion'
    _python_name = 'inlet_diffusion'
    return_type = 'object'

class energy(Group):
    """
    'energy' child.
    """
    _version = '231'
    fluent_name = 'energy'
    _python_name = 'energy'
    child_names = ['enabled', 'viscous_dissipation', 'pressure_work', 'kinetic_energy', 'inlet_diffusion']
    _child_classes = dict(
        enabled=enabled,
        viscous_dissipation=viscous_dissipation,
        pressure_work=pressure_work,
        kinetic_energy=kinetic_energy,
        inlet_diffusion=inlet_diffusion,
    )
    return_type = 'object'

class models_1(String, AllowedValuesMixin):
    """
    Multiphase model.
    """
    _version = '231'
    fluent_name = 'models'
    _python_name = 'models'
    return_type = 'object'

class vaporization_pressure(Real):
    """
    Vaporization pressure.
    """
    _version = '231'
    fluent_name = 'vaporization-pressure'
    _python_name = 'vaporization_pressure'
    return_type = 'object'

class non_condensable_gas(Real):
    """
    Non condensable gas.
    """
    _version = '231'
    fluent_name = 'non-condensable-gas'
    _python_name = 'non_condensable_gas'
    return_type = 'object'

class liquid_surface_tension(Real):
    """
    Liquid surface tension.
    """
    _version = '231'
    fluent_name = 'liquid-surface-tension'
    _python_name = 'liquid_surface_tension'
    return_type = 'object'

class bubble_number_density(Real):
    """
    Bubble number density.
    """
    _version = '231'
    fluent_name = 'bubble-number-density'
    _python_name = 'bubble_number_density'
    return_type = 'object'

class number_of_phases(Integer):
    """
    >= 2 and <= 20.
    """
    _version = '231'
    fluent_name = 'number-of-phases'
    _python_name = 'number_of_phases'
    return_type = 'object'

class number_of_eulerian_discrete_phases(IntegerList):
    """
    Sets the number of phases, calculated with the Discrete Phase model.
    The sum of Eulerian and Discrete phases has to be in the range (2,20).
    """
    _version = '231'
    fluent_name = 'number-of-eulerian-discrete-phases'
    _python_name = 'number_of_eulerian_discrete_phases'
    return_type = 'object'

class multiphase(Group):
    """
    'multiphase' child.
    """
    _version = '231'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['models', 'vaporization_pressure', 'non_condensable_gas', 'liquid_surface_tension', 'bubble_number_density', 'number_of_phases', 'number_of_eulerian_discrete_phases']
    _child_classes = dict(
        models=models_1,
        vaporization_pressure=vaporization_pressure,
        non_condensable_gas=non_condensable_gas,
        liquid_surface_tension=liquid_surface_tension,
        bubble_number_density=bubble_number_density,
        number_of_phases=number_of_phases,
        number_of_eulerian_discrete_phases=number_of_eulerian_discrete_phases,
    )
    return_type = 'object'

class model(String, AllowedValuesMixin):
    """
    'model' child.
    """
    _version = '231'
    fluent_name = 'model'
    _python_name = 'model'
    return_type = 'object'

class viscous_heating(Boolean):
    """
    Compute viscous energy dissipation.
    """
    _version = '231'
    fluent_name = 'viscous-heating'
    _python_name = 'viscous_heating'
    return_type = 'object'

class low_pressure_boundary_slip(Boolean):
    """
    Enable/disable the slip boundary formulation for low-pressure gas systems.
    """
    _version = '231'
    fluent_name = 'low-pressure-boundary-slip?'
    _python_name = 'low_pressure_boundary_slip'
    return_type = 'object'

class curvature_correction(Boolean):
    """
    Enable/disable the curvature correction.
    """
    _version = '231'
    fluent_name = 'curvature-correction'
    _python_name = 'curvature_correction'
    return_type = 'object'

class corner_flow_correction(Boolean):
    """
    Enable/disable the corner flow correction.
    """
    _version = '231'
    fluent_name = 'corner-flow-correction'
    _python_name = 'corner_flow_correction'
    return_type = 'object'

class production_kato_launder(Boolean):
    """
    'production_kato_launder' child.
    """
    _version = '231'
    fluent_name = 'production-kato-launder'
    _python_name = 'production_kato_launder'
    return_type = 'object'

class turb_buoyancy_effects(String, AllowedValuesMixin):
    """
    Buoyancy effects on turbulence.
    """
    _version = '231'
    fluent_name = 'turb-buoyancy-effects'
    _python_name = 'turb_buoyancy_effects'
    return_type = 'object'

class kw_buoyancy_effects(Boolean):
    """
    Enable/disable effects of buoyancy on k-omega turbulence model.
    """
    _version = '231'
    fluent_name = 'kw-buoyancy-effects?'
    _python_name = 'kw_buoyancy_effects'
    return_type = 'object'

class enable_geko(Boolean):
    """
    Enable/disable the GEKO option for RSM or EARSM.
    """
    _version = '231'
    fluent_name = 'enable-geko?'
    _python_name = 'enable_geko'
    return_type = 'object'

class options_1(Group):
    """
    'options' child.
    """
    _version = '231'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['viscous_heating', 'low_pressure_boundary_slip', 'curvature_correction', 'corner_flow_correction', 'production_kato_launder', 'turb_buoyancy_effects', 'kw_buoyancy_effects', 'enable_geko']
    _child_classes = dict(
        viscous_heating=viscous_heating,
        low_pressure_boundary_slip=low_pressure_boundary_slip,
        curvature_correction=curvature_correction,
        corner_flow_correction=corner_flow_correction,
        production_kato_launder=production_kato_launder,
        turb_buoyancy_effects=turb_buoyancy_effects,
        kw_buoyancy_effects=kw_buoyancy_effects,
        enable_geko=enable_geko,
    )
    return_type = 'object'

class spalart_allmaras_production(String, AllowedValuesMixin):
    """
    Enable/disable strain/vorticity production in Spalart-Allmaras model.
    """
    _version = '231'
    fluent_name = 'spalart-allmaras-production'
    _python_name = 'spalart_allmaras_production'
    return_type = 'object'

class k_epsilon_model(String, AllowedValuesMixin):
    """
    'k_epsilon_model' child.
    """
    _version = '231'
    fluent_name = 'k-epsilon-model'
    _python_name = 'k_epsilon_model'
    return_type = 'object'

class k_omega_model(String, AllowedValuesMixin):
    """
    'k_omega_model' child.
    """
    _version = '231'
    fluent_name = 'k-omega-model'
    _python_name = 'k_omega_model'
    return_type = 'object'

class kw_low_re_correction(Boolean):
    """
    Enable/disable the k-omega low Re option.
    """
    _version = '231'
    fluent_name = 'kw-low-re-correction'
    _python_name = 'kw_low_re_correction'
    return_type = 'object'

class kw_shear_correction(Boolean):
    """
    Enable/disable the k-omega shear-flow correction option.
    """
    _version = '231'
    fluent_name = 'kw-shear-correction'
    _python_name = 'kw_shear_correction'
    return_type = 'object'

class turb_compressibility(Boolean):
    """
    Enable/disable the compressibility correction option.
    """
    _version = '231'
    fluent_name = 'turb-compressibility'
    _python_name = 'turb_compressibility'
    return_type = 'object'

class k_omega_options(Group):
    """
    'k_omega_options' child.
    """
    _version = '231'
    fluent_name = 'k-omega-options'
    _python_name = 'k_omega_options'
    child_names = ['kw_low_re_correction', 'kw_shear_correction', 'turb_compressibility']
    _child_classes = dict(
        kw_low_re_correction=kw_low_re_correction,
        kw_shear_correction=kw_shear_correction,
        turb_compressibility=turb_compressibility,
    )
    return_type = 'object'

class differential_viscosity_model(Boolean):
    """
    Enable/disable the differential-viscosity model.
    """
    _version = '231'
    fluent_name = 'differential-viscosity-model'
    _python_name = 'differential_viscosity_model'
    return_type = 'object'

class swirl_dominated_flow(Boolean):
    """
    Enable/disable swirl corrections for rng-model.
    """
    _version = '231'
    fluent_name = 'swirl-dominated-flow'
    _python_name = 'swirl_dominated_flow'
    return_type = 'object'

class rng_options(Group):
    """
    'rng_options' child.
    """
    _version = '231'
    fluent_name = 'rng-options'
    _python_name = 'rng_options'
    child_names = ['differential_viscosity_model', 'swirl_dominated_flow']
    _child_classes = dict(
        differential_viscosity_model=differential_viscosity_model,
        swirl_dominated_flow=swirl_dominated_flow,
    )
    return_type = 'object'

class wall_function_1(String, AllowedValuesMixin):
    """
    'wall_function' child.
    """
    _version = '231'
    fluent_name = 'wall-function'
    _python_name = 'wall_function'
    return_type = 'object'

class law_of_the_wall(String, AllowedValuesMixin):
    """
    'law_of_the_wall' child.
    """
    _version = '231'
    fluent_name = 'law-of-the-wall'
    _python_name = 'law_of_the_wall'
    return_type = 'object'

class pressure_gradient_effects(Boolean):
    """
    Enable/disable wall function pressure-gradient effects.
    """
    _version = '231'
    fluent_name = 'pressure-gradient-effects'
    _python_name = 'pressure_gradient_effects'
    return_type = 'object'

class thermal_effects(Boolean):
    """
    Enable/disable wall function thermal effects.
    """
    _version = '231'
    fluent_name = 'thermal-effects'
    _python_name = 'thermal_effects'
    return_type = 'object'

class enhanced_wall_treatment_options(Group):
    """
    'enhanced_wall_treatment_options' child.
    """
    _version = '231'
    fluent_name = 'enhanced-wall-treatment-options'
    _python_name = 'enhanced_wall_treatment_options'
    child_names = ['pressure_gradient_effects', 'thermal_effects']
    _child_classes = dict(
        pressure_gradient_effects=pressure_gradient_effects,
        thermal_effects=thermal_effects,
    )
    return_type = 'object'

class wall_omega_treatment(String, AllowedValuesMixin):
    """
    A wall omega treatment.
    """
    _version = '231'
    fluent_name = 'wall-omega-treatment'
    _python_name = 'wall_omega_treatment'
    return_type = 'object'

class near_wall_treatment(Group):
    """
    'near_wall_treatment' child.
    """
    _version = '231'
    fluent_name = 'near-wall-treatment'
    _python_name = 'near_wall_treatment'
    child_names = ['wall_function', 'law_of_the_wall', 'enhanced_wall_treatment_options', 'wall_omega_treatment']
    _child_classes = dict(
        wall_function=wall_function_1,
        law_of_the_wall=law_of_the_wall,
        enhanced_wall_treatment_options=enhanced_wall_treatment_options,
        wall_omega_treatment=wall_omega_treatment,
    )
    return_type = 'object'

class reynolds_stress_model(String, AllowedValuesMixin):
    """
    'reynolds_stress_model' child.
    """
    _version = '231'
    fluent_name = 'reynolds-stress-model'
    _python_name = 'reynolds_stress_model'
    return_type = 'object'

class subgrid_scale_model(String, AllowedValuesMixin):
    """
    'subgrid_scale_model' child.
    """
    _version = '231'
    fluent_name = 'subgrid-scale-model'
    _python_name = 'subgrid_scale_model'
    return_type = 'object'

class dynamic_stress(Boolean):
    """
    Enable/Disable Dynamic model option.
    """
    _version = '231'
    fluent_name = 'dynamic-stress'
    _python_name = 'dynamic_stress'
    return_type = 'object'

class dynamic_energy_flux(Boolean):
    """
    Enable/disable the dynamic sub-grid scale turbulent Prandtl Number.
    """
    _version = '231'
    fluent_name = 'dynamic-energy-flux'
    _python_name = 'dynamic_energy_flux'
    return_type = 'object'

class dynamic_scalar_flux(Boolean):
    """
    Enable/Disable dynamic Schmidt Number.
    """
    _version = '231'
    fluent_name = 'dynamic-scalar-flux'
    _python_name = 'dynamic_scalar_flux'
    return_type = 'object'

class subgrid_dynamic_fvar(Boolean):
    """
    Enable/Disable the dynamic mixture fraction variance model.
    """
    _version = '231'
    fluent_name = 'subgrid-dynamic-fvar'
    _python_name = 'subgrid_dynamic_fvar'
    return_type = 'object'

class les_model_options(Group):
    """
    'les_model_options' child.
    """
    _version = '231'
    fluent_name = 'les-model-options'
    _python_name = 'les_model_options'
    child_names = ['dynamic_stress', 'dynamic_energy_flux', 'dynamic_scalar_flux', 'subgrid_dynamic_fvar']
    _child_classes = dict(
        dynamic_stress=dynamic_stress,
        dynamic_energy_flux=dynamic_energy_flux,
        dynamic_scalar_flux=dynamic_scalar_flux,
        subgrid_dynamic_fvar=subgrid_dynamic_fvar,
    )
    return_type = 'object'

class solve_tke(Boolean):
    """
    Enable/disable the solution of T.K.E. in RSM model.
    """
    _version = '231'
    fluent_name = 'solve-tke'
    _python_name = 'solve_tke'
    return_type = 'object'

class wall_echo(Boolean):
    """
    Enable/disable wall-echo effects in RSM model.
    """
    _version = '231'
    fluent_name = 'wall-echo'
    _python_name = 'wall_echo'
    return_type = 'object'

class reynolds_stress_options(Group):
    """
    'reynolds_stress_options' child.
    """
    _version = '231'
    fluent_name = 'reynolds-stress-options'
    _python_name = 'reynolds_stress_options'
    child_names = ['solve_tke', 'wall_echo']
    _child_classes = dict(
        solve_tke=solve_tke,
        wall_echo=wall_echo,
    )
    return_type = 'object'

class rans_model(String, AllowedValuesMixin):
    """
    'rans_model' child.
    """
    _version = '231'
    fluent_name = 'rans-model'
    _python_name = 'rans_model'
    return_type = 'object'

class all_len_modified(Boolean):
    """
    Modify all length scales in nut equation? (if no, destruction term only).
    """
    _version = '231'
    fluent_name = 'all-len-modified?'
    _python_name = 'all_len_modified'
    return_type = 'object'

class des_limiter_option(String, AllowedValuesMixin):
    """
    DES limiter option.
    """
    _version = '231'
    fluent_name = 'des-limiter-option'
    _python_name = 'des_limiter_option'
    return_type = 'object'

class des_options(Group):
    """
    'des_options' child.
    """
    _version = '231'
    fluent_name = 'des-options'
    _python_name = 'des_options'
    child_names = ['all_len_modified', 'des_limiter_option']
    _child_classes = dict(
        all_len_modified=all_len_modified,
        des_limiter_option=des_limiter_option,
    )
    return_type = 'object'

class transition_module(String, AllowedValuesMixin):
    """
    Enable/disable a transition model to account for transitional effects.
    """
    _version = '231'
    fluent_name = 'transition-module'
    _python_name = 'transition_module'
    return_type = 'object'

class f_length(String):
    """
    User-defined transition correlations.
    """
    _version = '231'
    fluent_name = 'f_length'
    _python_name = 'f_length'
    return_type = 'object'

class re_theta_c(String):
    """
    User-defined transition correlations.
    """
    _version = '231'
    fluent_name = 're_theta_c'
    _python_name = 're_theta_c'
    return_type = 'object'

class re_theta_t(String):
    """
    User-defined transition correlations.
    """
    _version = '231'
    fluent_name = 're_theta_t'
    _python_name = 're_theta_t'
    return_type = 'object'

class user_defined_transition(Group):
    """
    User-defined transition correlations.
    """
    _version = '231'
    fluent_name = 'user-defined-transition'
    _python_name = 'user_defined_transition'
    child_names = ['f_length', 're_theta_c', 're_theta_t']
    _child_classes = dict(
        f_length=f_length,
        re_theta_c=re_theta_c,
        re_theta_t=re_theta_t,
    )
    return_type = 'object'

class dispersion_force_in_momentum(Boolean):
    """
    Enable/Disable dispersion force in momentum?.
    """
    _version = '231'
    fluent_name = 'dispersion-force-in-momentum?'
    _python_name = 'dispersion_force_in_momentum'
    return_type = 'object'

class dispersion_in_relative_velocity(Boolean):
    """
    Enable/Disable dispersion in relative velocity?.
    """
    _version = '231'
    fluent_name = 'dispersion-in-relative-velocity?'
    _python_name = 'dispersion_in_relative_velocity'
    return_type = 'object'

class multiphase_options(Group):
    """
    'multiphase_options' child.
    """
    _version = '231'
    fluent_name = 'multiphase-options'
    _python_name = 'multiphase_options'
    child_names = ['dispersion_force_in_momentum', 'dispersion_in_relative_velocity']
    _child_classes = dict(
        dispersion_force_in_momentum=dispersion_force_in_momentum,
        dispersion_in_relative_velocity=dispersion_in_relative_velocity,
    )
    return_type = 'object'

class turbulence_multiphase_models(String, AllowedValuesMixin):
    """
    'turbulence_multiphase_models' child.
    """
    _version = '231'
    fluent_name = 'turbulence-multiphase-models'
    _python_name = 'turbulence_multiphase_models'
    return_type = 'object'

class rsm_multiphase_models(String, AllowedValuesMixin):
    """
    'rsm_multiphase_models' child.
    """
    _version = '231'
    fluent_name = 'rsm-multiphase-models'
    _python_name = 'rsm_multiphase_models'
    return_type = 'object'

class subgrid_turbulence_contribution_aiad(Boolean):
    """
    Enable/disable the Subgrid Turbulence Contribution for the AIAD model.
    """
    _version = '231'
    fluent_name = 'subgrid-turbulence-contribution-aiad?'
    _python_name = 'subgrid_turbulence_contribution_aiad'
    return_type = 'object'

class multiphase_turbulence(Group):
    """
    'multiphase_turbulence' child.
    """
    _version = '231'
    fluent_name = 'multiphase-turbulence'
    _python_name = 'multiphase_turbulence'
    child_names = ['multiphase_options', 'turbulence_multiphase_models', 'rsm_multiphase_models', 'subgrid_turbulence_contribution_aiad']
    _child_classes = dict(
        multiphase_options=multiphase_options,
        turbulence_multiphase_models=turbulence_multiphase_models,
        rsm_multiphase_models=rsm_multiphase_models,
        subgrid_turbulence_contribution_aiad=subgrid_turbulence_contribution_aiad,
    )
    return_type = 'object'

class low_re_ke(Boolean):
    """
    Enable/disable the low-Re k-epsilon turbulence model.
    """
    _version = '231'
    fluent_name = 'low-re-ke?'
    _python_name = 'low_re_ke'
    return_type = 'object'

class low_re_ke_index(Integer):
    """
    'low_re_ke_index' child.
    """
    _version = '231'
    fluent_name = 'low-re-ke-index'
    _python_name = 'low_re_ke_index'
    return_type = 'object'

class kato_launder_model(Boolean):
    """
    'kato_launder_model' child.
    """
    _version = '231'
    fluent_name = 'kato-launder-model?'
    _python_name = 'kato_launder_model'
    return_type = 'object'

class enable_prod_limiter(Boolean):
    """
    Enable/disable the Production Limiter.
    """
    _version = '231'
    fluent_name = 'enable-prod-limiter?'
    _python_name = 'enable_prod_limiter'
    return_type = 'object'

class clip_factor(Real):
    """
    Clip Factor for Production Limiter.
    """
    _version = '231'
    fluent_name = 'clip-factor'
    _python_name = 'clip_factor'
    return_type = 'object'

class production_limiter(Group):
    """
    'production_limiter' child.
    """
    _version = '231'
    fluent_name = 'production-limiter'
    _python_name = 'production_limiter'
    child_names = ['enable_prod_limiter', 'clip_factor']
    _child_classes = dict(
        enable_prod_limiter=enable_prod_limiter,
        clip_factor=clip_factor,
    )
    return_type = 'object'

class kw_vorticity_based_production(Boolean):
    """
    Enable/disable vorticity based production.
    """
    _version = '231'
    fluent_name = 'kw-vorticity-based-production?'
    _python_name = 'kw_vorticity_based_production'
    return_type = 'object'

class kw_add_sas(Boolean):
    """
    Enable/disable the SAS-mode with the current turbulence model.
    """
    _version = '231'
    fluent_name = 'kw-add-sas?'
    _python_name = 'kw_add_sas'
    return_type = 'object'

class kw_add_des(Boolean):
    """
    Enable/disable DES-mode with the current turbulence model.
    """
    _version = '231'
    fluent_name = 'kw-add-des?'
    _python_name = 'kw_add_des'
    return_type = 'object'

class turb_add_sbes_sdes(Boolean):
    """
    Enable/disable SBES / SDES with the current turbulence model.
    """
    _version = '231'
    fluent_name = 'turb-add-sbes-sdes?'
    _python_name = 'turb_add_sbes_sdes'
    return_type = 'object'

class sbes_sdes_hybrid_model_optn(String, AllowedValuesMixin):
    """
    The SBES / SDES hybrid model.
    """
    _version = '231'
    fluent_name = 'sbes-sdes-hybrid-model-optn'
    _python_name = 'sbes_sdes_hybrid_model_optn'
    return_type = 'object'

class user_defined_fcn_for_sbes(String, AllowedValuesMixin):
    """
    User-Defined Function for SBES.
    """
    _version = '231'
    fluent_name = 'user-defined-fcn-for-sbes'
    _python_name = 'user_defined_fcn_for_sbes'
    return_type = 'object'

class sbes_sdes_hybrid_model(Group):
    """
    'sbes_sdes_hybrid_model' child.
    """
    _version = '231'
    fluent_name = 'sbes-sdes-hybrid-model'
    _python_name = 'sbes_sdes_hybrid_model'
    child_names = ['sbes_sdes_hybrid_model_optn', 'user_defined_fcn_for_sbes']
    _child_classes = dict(
        sbes_sdes_hybrid_model_optn=sbes_sdes_hybrid_model_optn,
        user_defined_fcn_for_sbes=user_defined_fcn_for_sbes,
    )
    return_type = 'object'

class sbes_update_interval_k_omega(Integer):
    """
    An integer value how often the k and omega equations are updated in a transient SBES run.
    """
    _version = '231'
    fluent_name = 'sbes-update-interval-k-omega'
    _python_name = 'sbes_update_interval_k_omega'
    return_type = 'object'

class sbes_sgs_option(String, AllowedValuesMixin):
    """
    SBES subgrid-scale model.
    """
    _version = '231'
    fluent_name = 'sbes-sgs-option'
    _python_name = 'sbes_sgs_option'
    return_type = 'object'

class sbes_les_subgrid_dynamic_fvar(Boolean):
    """
    Enable/disable the dynamic subgrid-scale mixture fraction variance model.
    """
    _version = '231'
    fluent_name = 'sbes-les-subgrid-dynamic-fvar?'
    _python_name = 'sbes_les_subgrid_dynamic_fvar'
    return_type = 'object'

class enable_turb_damping(Boolean):
    """
    Enable/Disable Turbulence Damping.
    """
    _version = '231'
    fluent_name = 'enable-turb-damping?'
    _python_name = 'enable_turb_damping'
    return_type = 'object'

class turb_damping_factor(Real):
    """
    Damping Factor.
    """
    _version = '231'
    fluent_name = 'turb-damping-factor'
    _python_name = 'turb_damping_factor'
    return_type = 'object'

class turbulence_damping(Group):
    """
    'turbulence_damping' child.
    """
    _version = '231'
    fluent_name = 'turbulence-damping'
    _python_name = 'turbulence_damping'
    child_names = ['enable_turb_damping', 'turb_damping_factor']
    _child_classes = dict(
        enable_turb_damping=enable_turb_damping,
        turb_damping_factor=turb_damping_factor,
    )
    return_type = 'object'

class rke_cmu_rotation_term(Boolean):
    """
    Enable/disable inclusion of omega in the Cmu definition.
    """
    _version = '231'
    fluent_name = 'rke-cmu-rotation-term?'
    _python_name = 'rke_cmu_rotation_term'
    return_type = 'object'

class turb_non_newtonian(Boolean):
    """
    Enable/disable turbulence for non-Newtonian fluids.
    """
    _version = '231'
    fluent_name = 'turb-non-newtonian?'
    _python_name = 'turb_non_newtonian'
    return_type = 'object'

class non_newtonian_modification(Boolean):
    """
    Enable/disable non-Newtonian modification for Lam-Bremhorst model.
    """
    _version = '231'
    fluent_name = 'non-newtonian-modification?'
    _python_name = 'non_newtonian_modification'
    return_type = 'object'

class turb_pk_compressible(Boolean):
    """
    Enable/disable turbulent production due to compressible divergence.
    """
    _version = '231'
    fluent_name = 'turb-pk-compressible?'
    _python_name = 'turb_pk_compressible'
    return_type = 'object'

class thermal_p_function(Boolean):
    """
    Enable/disable the Jayatilleke P function.
    """
    _version = '231'
    fluent_name = 'thermal-p-function?'
    _python_name = 'thermal_p_function'
    return_type = 'object'

class restore_sst_v61(Boolean):
    """
    Enable/disable SST formulation of v6.1.
    """
    _version = '231'
    fluent_name = 'restore-sst-v61?'
    _python_name = 'restore_sst_v61'
    return_type = 'object'

class turbulence_expert(Group):
    """
    'turbulence_expert' child.
    """
    _version = '231'
    fluent_name = 'turbulence-expert'
    _python_name = 'turbulence_expert'
    child_names = ['low_re_ke', 'low_re_ke_index', 'kato_launder_model', 'production_limiter', 'kw_vorticity_based_production', 'kw_add_sas', 'kw_add_des', 'turb_add_sbes_sdes', 'sbes_sdes_hybrid_model', 'sbes_update_interval_k_omega', 'sbes_sgs_option', 'sbes_les_subgrid_dynamic_fvar', 'turbulence_damping', 'rke_cmu_rotation_term', 'turb_non_newtonian', 'non_newtonian_modification', 'turb_pk_compressible', 'thermal_p_function', 'restore_sst_v61']
    _child_classes = dict(
        low_re_ke=low_re_ke,
        low_re_ke_index=low_re_ke_index,
        kato_launder_model=kato_launder_model,
        production_limiter=production_limiter,
        kw_vorticity_based_production=kw_vorticity_based_production,
        kw_add_sas=kw_add_sas,
        kw_add_des=kw_add_des,
        turb_add_sbes_sdes=turb_add_sbes_sdes,
        sbes_sdes_hybrid_model=sbes_sdes_hybrid_model,
        sbes_update_interval_k_omega=sbes_update_interval_k_omega,
        sbes_sgs_option=sbes_sgs_option,
        sbes_les_subgrid_dynamic_fvar=sbes_les_subgrid_dynamic_fvar,
        turbulence_damping=turbulence_damping,
        rke_cmu_rotation_term=rke_cmu_rotation_term,
        turb_non_newtonian=turb_non_newtonian,
        non_newtonian_modification=non_newtonian_modification,
        turb_pk_compressible=turb_pk_compressible,
        thermal_p_function=thermal_p_function,
        restore_sst_v61=restore_sst_v61,
    )
    return_type = 'object'

class wall_distance_free(Boolean):
    """
    Enable/disable wall-distance-free version of GEKO model.
    """
    _version = '231'
    fluent_name = 'wall-distance-free?'
    _python_name = 'wall_distance_free'
    return_type = 'object'

class cjet(Real):
    """
    The GEKO model coefficient CJET.
    """
    _version = '231'
    fluent_name = 'cjet'
    _python_name = 'cjet'
    return_type = 'object'

class creal(Real):
    """
    The GEKO model coefficient CREAL.
    """
    _version = '231'
    fluent_name = 'creal'
    _python_name = 'creal'
    return_type = 'object'

class cnw_sub(Real):
    """
    The GEKO model coefficient CNW-SUB.
    """
    _version = '231'
    fluent_name = 'cnw-sub'
    _python_name = 'cnw_sub'
    return_type = 'object'

class cjet_aux(Real):
    """
    The GEKO model coefficient CJET_AUX.
    """
    _version = '231'
    fluent_name = 'cjet-aux'
    _python_name = 'cjet_aux'
    return_type = 'object'

class cbf_lam(Real):
    """
    The GEKO model coefficient CBF_LAM.
    """
    _version = '231'
    fluent_name = 'cbf-lam'
    _python_name = 'cbf_lam'
    return_type = 'object'

class cbf_tur(Real):
    """
    The GEKO model coefficient CBF_TUR.
    """
    _version = '231'
    fluent_name = 'cbf-tur'
    _python_name = 'cbf_tur'
    return_type = 'object'

class geko_defaults(Command):
    """
    Set GEKO options to default.
    """
    _version = '231'
    fluent_name = 'geko-defaults'
    _python_name = 'geko_defaults'
    return_type = 'object'

class geko_options(Group):
    """
    'geko_options' child.
    """
    _version = '231'
    fluent_name = 'geko-options'
    _python_name = 'geko_options'
    child_names = ['wall_distance_free', 'cjet', 'creal', 'cnw_sub', 'cjet_aux', 'cbf_lam', 'cbf_tur']
    command_names = ['geko_defaults']
    _child_classes = dict(
        wall_distance_free=wall_distance_free,
        cjet=cjet,
        creal=creal,
        cnw_sub=cnw_sub,
        cjet_aux=cjet_aux,
        cbf_lam=cbf_lam,
        cbf_tur=cbf_tur,
        geko_defaults=geko_defaults,
    )
    return_type = 'object'

class crossflow_transition(Boolean):
    """
    Enable/disable crossflow transition for the intermittency transition model.
    """
    _version = '231'
    fluent_name = 'crossflow-transition?'
    _python_name = 'crossflow_transition'
    return_type = 'object'

class critical_reynolds_number_correlation(String):
    """
    The critical Reynolds number correlation.
    """
    _version = '231'
    fluent_name = 'critical-reynolds-number-correlation'
    _python_name = 'critical_reynolds_number_correlation'
    return_type = 'object'

class clambda_scale(Real):
    """
    The algebraic transition model coefficient CLAMBDA_SCALE.
    """
    _version = '231'
    fluent_name = 'clambda-scale'
    _python_name = 'clambda_scale'
    return_type = 'object'

class capg_hightu(Real):
    """
    The algebraic transition model coefficient CAPG_HIGHTU.
    """
    _version = '231'
    fluent_name = 'capg-hightu'
    _python_name = 'capg_hightu'
    return_type = 'object'

class cfpg_hightu(Real):
    """
    The algebraic transition model coefficient CFPG_HIGHTU.
    """
    _version = '231'
    fluent_name = 'cfpg-hightu'
    _python_name = 'cfpg_hightu'
    return_type = 'object'

class capg_lowtu(Real):
    """
    The algebraic transition model coefficient CAPG_LOWTU.
    """
    _version = '231'
    fluent_name = 'capg-lowtu'
    _python_name = 'capg_lowtu'
    return_type = 'object'

class cfpg_lowtu(Real):
    """
    The algebraic transition model coefficient CFPG_LOWTU.
    """
    _version = '231'
    fluent_name = 'cfpg-lowtu'
    _python_name = 'cfpg_lowtu'
    return_type = 'object'

class ctu_hightu(Real):
    """
    The algebraic transition model coefficient CTU_HIGHTU.
    """
    _version = '231'
    fluent_name = 'ctu-hightu'
    _python_name = 'ctu_hightu'
    return_type = 'object'

class ctu_lowtu(Real):
    """
    The algebraic transition model coefficient CTU_LOWTU.
    """
    _version = '231'
    fluent_name = 'ctu-lowtu'
    _python_name = 'ctu_lowtu'
    return_type = 'object'

class rec_max(Real):
    """
    The algebraic transition model coefficient REC_MAX.
    """
    _version = '231'
    fluent_name = 'rec-max'
    _python_name = 'rec_max'
    return_type = 'object'

class rec_c1(Real):
    """
    The algebraic transition model coefficient REC_C1.
    """
    _version = '231'
    fluent_name = 'rec-c1'
    _python_name = 'rec_c1'
    return_type = 'object'

class rec_c2(Real):
    """
    The algebraic transition model coefficient REC_C2.
    """
    _version = '231'
    fluent_name = 'rec-c2'
    _python_name = 'rec_c2'
    return_type = 'object'

class cbubble_c1(Real):
    """
    The algebraic transition model coefficient CBUBBLE_C1.
    """
    _version = '231'
    fluent_name = 'cbubble-c1'
    _python_name = 'cbubble_c1'
    return_type = 'object'

class cbubble_c2(Real):
    """
    The algebraic transition model coefficient CBUBBLE_C2.
    """
    _version = '231'
    fluent_name = 'cbubble-c2'
    _python_name = 'cbubble_c2'
    return_type = 'object'

class rv1_switch(Real):
    """
    The algebraic transition model coefficient RV1_SWITCH.
    """
    _version = '231'
    fluent_name = 'rv1-switch'
    _python_name = 'rv1_switch'
    return_type = 'object'

class transition_model_options(Group):
    """
    'transition_model_options' child.
    """
    _version = '231'
    fluent_name = 'transition-model-options'
    _python_name = 'transition_model_options'
    child_names = ['crossflow_transition', 'critical_reynolds_number_correlation', 'clambda_scale', 'capg_hightu', 'cfpg_hightu', 'capg_lowtu', 'cfpg_lowtu', 'ctu_hightu', 'ctu_lowtu', 'rec_max', 'rec_c1', 'rec_c2', 'cbubble_c1', 'cbubble_c2', 'rv1_switch']
    _child_classes = dict(
        crossflow_transition=crossflow_transition,
        critical_reynolds_number_correlation=critical_reynolds_number_correlation,
        clambda_scale=clambda_scale,
        capg_hightu=capg_hightu,
        cfpg_hightu=cfpg_hightu,
        capg_lowtu=capg_lowtu,
        cfpg_lowtu=cfpg_lowtu,
        ctu_hightu=ctu_hightu,
        ctu_lowtu=ctu_lowtu,
        rec_max=rec_max,
        rec_c1=rec_c1,
        rec_c2=rec_c2,
        cbubble_c1=cbubble_c1,
        cbubble_c2=cbubble_c2,
        rv1_switch=rv1_switch,
    )
    return_type = 'object'

class enable_roughness_correlation(Boolean):
    """
    Enable/Disable Transition-SST roughness correlation?.
    """
    _version = '231'
    fluent_name = 'enable-roughness-correlation?'
    _python_name = 'enable_roughness_correlation'
    return_type = 'object'

class roughness_correlation_fcn(String, AllowedValuesMixin):
    """
    'roughness_correlation_fcn' child.
    """
    _version = '231'
    fluent_name = 'roughness-correlation-fcn'
    _python_name = 'roughness_correlation_fcn'
    return_type = 'object'

class geometric_roughness_ht_val(Real):
    """
    Geometric Roughness Height.
    """
    _version = '231'
    fluent_name = 'geometric-roughness-ht-val'
    _python_name = 'geometric_roughness_ht_val'
    return_type = 'object'

class transition_sst_option(Group):
    """
    'transition_sst_option' child.
    """
    _version = '231'
    fluent_name = 'transition-sst-option'
    _python_name = 'transition_sst_option'
    child_names = ['enable_roughness_correlation', 'roughness_correlation_fcn', 'geometric_roughness_ht_val']
    _child_classes = dict(
        enable_roughness_correlation=enable_roughness_correlation,
        roughness_correlation_fcn=roughness_correlation_fcn,
        geometric_roughness_ht_val=geometric_roughness_ht_val,
    )
    return_type = 'object'

class subgrid_scale_turb_visc(String, AllowedValuesMixin):
    """
    'subgrid_scale_turb_visc' child.
    """
    _version = '231'
    fluent_name = 'subgrid-scale-turb-visc'
    _python_name = 'subgrid_scale_turb_visc'
    return_type = 'object'

class turb_visc_func_mf_child(String, AllowedValuesMixin):
    """
    'child_object_type' of turb_visc_func_mf.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'turb_visc_func_mf_child'
    return_type = 'object'

class turb_visc_func_mf(NamedObject[turb_visc_func_mf_child], _NonCreatableNamedObjectMixin[turb_visc_func_mf_child]):
    """
    'turb_visc_func_mf' child.
    """
    _version = '231'
    fluent_name = 'turb-visc-func-mf'
    _python_name = 'turb_visc_func_mf'
    child_object_type = turb_visc_func_mf_child
    return_type = 'object'

class turb_visc_func(String, AllowedValuesMixin):
    """
    'turb_visc_func' child.
    """
    _version = '231'
    fluent_name = 'turb-visc-func'
    _python_name = 'turb_visc_func'
    return_type = 'object'

class tke_prandtl(String, AllowedValuesMixin):
    """
    TKE prandtl number function.
    """
    _version = '231'
    fluent_name = 'tke-prandtl'
    _python_name = 'tke_prandtl'
    return_type = 'object'

class tdr_prandtl(String, AllowedValuesMixin):
    """
    TDR prandtl number function.
    """
    _version = '231'
    fluent_name = 'tdr-prandtl'
    _python_name = 'tdr_prandtl'
    return_type = 'object'

class sdr_prandtl(String, AllowedValuesMixin):
    """
    SDR prandtl number function.
    """
    _version = '231'
    fluent_name = 'sdr-prandtl'
    _python_name = 'sdr_prandtl'
    return_type = 'object'

class energy_prandtl(String, AllowedValuesMixin):
    """
    Energy Prandtl number function.
    """
    _version = '231'
    fluent_name = 'energy-prandtl'
    _python_name = 'energy_prandtl'
    return_type = 'object'

class wall_prandtl(String, AllowedValuesMixin):
    """
    Wall Prandtl number function.
    """
    _version = '231'
    fluent_name = 'wall-prandtl'
    _python_name = 'wall_prandtl'
    return_type = 'object'

class turbulent_schmidt(String, AllowedValuesMixin):
    """
    Turbulent Schmidt number function.
    """
    _version = '231'
    fluent_name = 'turbulent-schmidt'
    _python_name = 'turbulent_schmidt'
    return_type = 'object'

class user_defined(Group):
    """
    'user_defined' child.
    """
    _version = '231'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'
    child_names = ['subgrid_scale_turb_visc', 'turb_visc_func_mf', 'turb_visc_func', 'tke_prandtl', 'tdr_prandtl', 'sdr_prandtl', 'energy_prandtl', 'wall_prandtl', 'turbulent_schmidt']
    _child_classes = dict(
        subgrid_scale_turb_visc=subgrid_scale_turb_visc,
        turb_visc_func_mf=turb_visc_func_mf,
        turb_visc_func=turb_visc_func,
        tke_prandtl=tke_prandtl,
        tdr_prandtl=tdr_prandtl,
        sdr_prandtl=sdr_prandtl,
        energy_prandtl=energy_prandtl,
        wall_prandtl=wall_prandtl,
        turbulent_schmidt=turbulent_schmidt,
    )
    return_type = 'object'

class sa_enhanced_wall_treatment(Boolean):
    """
    'sa_enhanced_wall_treatment' child.
    """
    _version = '231'
    fluent_name = 'sa-enhanced-wall-treatment?'
    _python_name = 'sa_enhanced_wall_treatment'
    return_type = 'object'

class sa_damping(Boolean):
    """
    'sa_damping' child.
    """
    _version = '231'
    fluent_name = 'sa-damping?'
    _python_name = 'sa_damping'
    return_type = 'object'

class viscous(Group):
    """
    'viscous' child.
    """
    _version = '231'
    fluent_name = 'viscous'
    _python_name = 'viscous'
    child_names = ['model', 'options', 'spalart_allmaras_production', 'k_epsilon_model', 'k_omega_model', 'k_omega_options', 'rng_options', 'near_wall_treatment', 'reynolds_stress_model', 'subgrid_scale_model', 'les_model_options', 'reynolds_stress_options', 'rans_model', 'des_options', 'transition_module', 'user_defined_transition', 'multiphase_turbulence', 'turbulence_expert', 'geko_options', 'transition_model_options', 'transition_sst_option', 'user_defined', 'sa_enhanced_wall_treatment', 'sa_damping']
    _child_classes = dict(
        model=model,
        options=options_1,
        spalart_allmaras_production=spalart_allmaras_production,
        k_epsilon_model=k_epsilon_model,
        k_omega_model=k_omega_model,
        k_omega_options=k_omega_options,
        rng_options=rng_options,
        near_wall_treatment=near_wall_treatment,
        reynolds_stress_model=reynolds_stress_model,
        subgrid_scale_model=subgrid_scale_model,
        les_model_options=les_model_options,
        reynolds_stress_options=reynolds_stress_options,
        rans_model=rans_model,
        des_options=des_options,
        transition_module=transition_module,
        user_defined_transition=user_defined_transition,
        multiphase_turbulence=multiphase_turbulence,
        turbulence_expert=turbulence_expert,
        geko_options=geko_options,
        transition_model_options=transition_model_options,
        transition_sst_option=transition_sst_option,
        user_defined=user_defined,
        sa_enhanced_wall_treatment=sa_enhanced_wall_treatment,
        sa_damping=sa_damping,
    )
    return_type = 'object'

class enable_3(Boolean):
    """
    Enable/disable aero-optical model.
    """
    _version = '231'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class orig_beam_name(String, AllowedValuesMixin):
    """
    The name for the optical beam to be copied.
    """
    _version = '231'
    fluent_name = 'orig-beam-name'
    _python_name = 'orig_beam_name'
    return_type = 'object'

class beam_name(String):
    """
    A unique name for each optical beam.
    """
    _version = '231'
    fluent_name = 'beam-name'
    _python_name = 'beam_name'
    return_type = 'object'

class ap_face_zone(String, AllowedValuesMixin):
    """
    The wall face zones to specify the optical aperture surface.
    """
    _version = '231'
    fluent_name = 'ap-face-zone'
    _python_name = 'ap_face_zone'
    return_type = 'object'

class beam_length(Real):
    """
    The length of optical beam propagation.
    """
    _version = '231'
    fluent_name = 'beam-length'
    _python_name = 'beam_length'
    return_type = 'object'

class ray_npoints(Integer):
    """
    The number of grid point in each ray of the optical beam.
    """
    _version = '231'
    fluent_name = 'ray-npoints'
    _python_name = 'ray_npoints'
    return_type = 'object'

class x_beam_vector(Real):
    """
    The x-component of the beam propagation vector.
    """
    _version = '231'
    fluent_name = 'x-beam-vector'
    _python_name = 'x_beam_vector'
    return_type = 'object'

class y_beam_vector(Real):
    """
    The y-component of the beam propagation vector.
    """
    _version = '231'
    fluent_name = 'y-beam-vector'
    _python_name = 'y_beam_vector'
    return_type = 'object'

class z_beam_vector(Real):
    """
    The z-component of the beam propagation vector.
    """
    _version = '231'
    fluent_name = 'z-beam-vector'
    _python_name = 'z_beam_vector'
    return_type = 'object'

class copy(Command):
    """
    Copy optical beam grid.
    
    Parameters
    ----------
        orig_beam_name : str
            The name for the optical beam to be copied.
        beam_name : str
            A unique name for each optical beam.
        ap_face_zone : str
            The wall face zones to specify the optical aperture surface.
        beam_length : real
            The length of optical beam propagation.
        ray_npoints : int
            The number of grid point in each ray of the optical beam.
        x_beam_vector : real
            The x-component of the beam propagation vector.
        y_beam_vector : real
            The y-component of the beam propagation vector.
        z_beam_vector : real
            The z-component of the beam propagation vector.
    """
    _version = '231'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['orig_beam_name', 'beam_name', 'ap_face_zone', 'beam_length', 'ray_npoints', 'x_beam_vector', 'y_beam_vector', 'z_beam_vector']
    _child_classes = dict(
        orig_beam_name=orig_beam_name,
        beam_name=beam_name,
        ap_face_zone=ap_face_zone,
        beam_length=beam_length,
        ray_npoints=ray_npoints,
        x_beam_vector=x_beam_vector,
        y_beam_vector=y_beam_vector,
        z_beam_vector=z_beam_vector,
    )
    return_type = 'object'

class beam_name_1(String, AllowedValuesMixin):
    """
    The name for the optical beam to be listed.
    """
    _version = '231'
    fluent_name = 'beam-name'
    _python_name = 'beam_name'
    return_type = 'object'

class list_beam_parameters(Command):
    """
    List parameters of optical beam grid.
    
    Parameters
    ----------
        beam_name : str
            The name for the optical beam to be listed.
    """
    _version = '231'
    fluent_name = 'list-beam-parameters'
    _python_name = 'list_beam_parameters'
    argument_names = ['beam_name']
    _child_classes = dict(
        beam_name=beam_name_1,
    )
    return_type = 'object'

class ray_points_count(Integer):
    """
    The number of grid point in each ray of the optical beam.
    """
    _version = '231'
    fluent_name = 'ray-points-count'
    _python_name = 'ray_points_count'
    return_type = 'object'

class beam_vector(RealList):
    """
    The components of the beam propagation vector.
    """
    _version = '231'
    fluent_name = 'beam-vector'
    _python_name = 'beam_vector'
    return_type = 'object'

class beams_child(Group):
    """
    'child_object_type' of beams.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'beams_child'
    child_names = ['ap_face_zone', 'beam_length', 'ray_points_count', 'beam_vector']
    _child_classes = dict(
        ap_face_zone=ap_face_zone,
        beam_length=beam_length,
        ray_points_count=ray_points_count,
        beam_vector=beam_vector,
    )
    return_type = 'object'

class beams(NamedObject[beams_child], CreatableNamedObjectMixinOld[beams_child]):
    """
    The optical beams object.
    """
    _version = '231'
    fluent_name = 'beams'
    _python_name = 'beams'
    command_names = ['copy', 'list_beam_parameters']
    _child_classes = dict(
        copy=copy,
        list_beam_parameters=list_beam_parameters,
    )
    child_object_type = beams_child
    return_type = 'object'

class reset_statistics(Boolean):
    """
    Reset the statistics of averaging of flow and optical quantities.
    """
    _version = '231'
    fluent_name = 'reset-statistics'
    _python_name = 'reset_statistics'
    return_type = 'object'

class method(Integer):
    """
    'method' child.
    """
    _version = '231'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class samp_time_period(Real):
    """
    'samp_time_period' child.
    """
    _version = '231'
    fluent_name = 'samp-time-period'
    _python_name = 'samp_time_period'
    return_type = 'object'

class samp_time_steps(Integer):
    """
    'samp_time_steps' child.
    """
    _version = '231'
    fluent_name = 'samp-time-steps'
    _python_name = 'samp_time_steps'
    return_type = 'object'

class avg_time_period(Real):
    """
    'avg_time_period' child.
    """
    _version = '231'
    fluent_name = 'avg-time-period'
    _python_name = 'avg_time_period'
    return_type = 'object'

class avg_time_steps(Integer):
    """
    'avg_time_steps' child.
    """
    _version = '231'
    fluent_name = 'avg-time-steps'
    _python_name = 'avg_time_steps'
    return_type = 'object'

class statistics_controls(Command):
    """
    'statistics_controls' command.
    """
    _version = '231'
    fluent_name = 'statistics-controls'
    _python_name = 'statistics_controls'
    argument_names = ['method', 'samp_time_period', 'samp_time_steps', 'avg_time_period', 'avg_time_steps']
    _child_classes = dict(
        method=method,
        samp_time_period=samp_time_period,
        samp_time_steps=samp_time_steps,
        avg_time_period=avg_time_period,
        avg_time_steps=avg_time_steps,
    )
    return_type = 'object'

class statistics(Group):
    """
    Statistics parameter of sampling and averaging of flow and optical quantiies.
    """
    _version = '231'
    fluent_name = 'statistics'
    _python_name = 'statistics'
    child_names = ['reset_statistics']
    command_names = ['statistics_controls']
    _child_classes = dict(
        reset_statistics=reset_statistics,
        statistics_controls=statistics_controls,
    )
    return_type = 'object'

class sampling_iterations(Integer):
    """
    The sampling iterations of flow quantites.
    """
    _version = '231'
    fluent_name = 'sampling-iterations'
    _python_name = 'sampling_iterations'
    return_type = 'object'

class index_of_refraction(Real):
    """
    The model parameters of index of refraction.
    """
    _version = '231'
    fluent_name = 'index-of-refraction'
    _python_name = 'index_of_refraction'
    return_type = 'object'

class report_1(Boolean):
    """
    Write aero-optical reports for optical beams.
    """
    _version = '231'
    fluent_name = 'report'
    _python_name = 'report'
    return_type = 'object'

class verbosity_2(Integer):
    """
    The verbosity of the model messages.
    """
    _version = '231'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class optics(Group):
    """
    The optics model object.
    """
    _version = '231'
    fluent_name = 'optics'
    _python_name = 'optics'
    child_names = ['enable', 'beams', 'statistics', 'sampling_iterations', 'index_of_refraction', 'report', 'verbosity']
    _child_classes = dict(
        enable=enable_3,
        beams=beams,
        statistics=statistics,
        sampling_iterations=sampling_iterations,
        index_of_refraction=index_of_refraction,
        report=report_1,
        verbosity=verbosity_2,
    )
    return_type = 'object'

class enable_4(Boolean):
    """
    Enable/disable vbm model.
    """
    _version = '231'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class mode(String, AllowedValuesMixin):
    """
    VBM mode non/edm/fdm.
    """
    _version = '231'
    fluent_name = 'mode'
    _python_name = 'mode'
    return_type = 'object'

class number_of_blades(Integer):
    """
    The number of blades.
    """
    _version = '231'
    fluent_name = 'number-of-blades'
    _python_name = 'number_of_blades'
    return_type = 'object'

class tip_radius(Real):
    """
    Rotor tip radius.
    """
    _version = '231'
    fluent_name = 'tip-radius'
    _python_name = 'tip_radius'
    return_type = 'object'

class root_radius(Real):
    """
    Rotor root cutout radius.
    """
    _version = '231'
    fluent_name = 'root-radius'
    _python_name = 'root_radius'
    return_type = 'object'

class rotor_speed(Real):
    """
    Rotor speed.
    """
    _version = '231'
    fluent_name = 'rotor-speed'
    _python_name = 'rotor_speed'
    return_type = 'object'

class basic_info(Group):
    """
    Menu to define the rotor basic informations:
     - Number of Blades 
     - Tip Radius 
     - Root Radius , 
     - Rotor Speed  , 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '231'
    fluent_name = 'basic-info'
    _python_name = 'basic_info'
    child_names = ['number_of_blades', 'tip_radius', 'root_radius', 'rotor_speed']
    _child_classes = dict(
        number_of_blades=number_of_blades,
        tip_radius=tip_radius,
        root_radius=root_radius,
        rotor_speed=rotor_speed,
    )
    return_type = 'object'

class disk_origin_x(Real):
    """
    Rotor origin x-coordinate.
    """
    _version = '231'
    fluent_name = 'disk-origin-x'
    _python_name = 'disk_origin_x'
    return_type = 'object'

class disk_origin_y(Real):
    """
    Rotor origin y-coordinate.
    """
    _version = '231'
    fluent_name = 'disk-origin-y'
    _python_name = 'disk_origin_y'
    return_type = 'object'

class disk_origin_z(Real):
    """
    Rotor origin z-coordinate.
    """
    _version = '231'
    fluent_name = 'disk-origin-z'
    _python_name = 'disk_origin_z'
    return_type = 'object'

class disk_origin(Group):
    """
    Menu to define the disk center coordinates.
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '231'
    fluent_name = 'disk-origin'
    _python_name = 'disk_origin'
    child_names = ['disk_origin_x', 'disk_origin_y', 'disk_origin_z']
    _child_classes = dict(
        disk_origin_x=disk_origin_x,
        disk_origin_y=disk_origin_y,
        disk_origin_z=disk_origin_z,
    )
    return_type = 'object'

class terminology(Integer):
    """
    Rotor Disk Orientation Terminology:.
    """
    _version = '231'
    fluent_name = 'terminology'
    _python_name = 'terminology'
    return_type = 'object'

class disk_normal_x(Real):
    """
    X-component of disk normal vector:.
    """
    _version = '231'
    fluent_name = 'disk-normal-x'
    _python_name = 'disk_normal_x'
    return_type = 'object'

class disk_normal_y(Real):
    """
    Y-component of disk normal vector:.
    """
    _version = '231'
    fluent_name = 'disk-normal-y'
    _python_name = 'disk_normal_y'
    return_type = 'object'

class disk_normal_z(Real):
    """
    X-component of disk normal vector:.
    """
    _version = '231'
    fluent_name = 'disk-normal-z'
    _python_name = 'disk_normal_z'
    return_type = 'object'

class disk_pitch_angle(Real):
    """
    Disk pitch angle:.
    """
    _version = '231'
    fluent_name = 'disk-pitch-angle'
    _python_name = 'disk_pitch_angle'
    return_type = 'object'

class disk_bank_angle(Real):
    """
    Disk bank angle:.
    """
    _version = '231'
    fluent_name = 'disk-bank-angle'
    _python_name = 'disk_bank_angle'
    return_type = 'object'

class disk_orientation(Group):
    """
    Menu to define the rotor disk orientation.
     - terminology      : the terminology to specify the rotor disk orientation: rotor-disk-angles / rotor-disk-normal, 
     - disk-normal-x/yz : rotor-disk-normal components, 
     - disk-pitch-angle : , 
     - disk-bank-angle : , 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '231'
    fluent_name = 'disk-orientation'
    _python_name = 'disk_orientation'
    child_names = ['terminology', 'disk_normal_x', 'disk_normal_y', 'disk_normal_z', 'disk_pitch_angle', 'disk_bank_angle']
    _child_classes = dict(
        terminology=terminology,
        disk_normal_x=disk_normal_x,
        disk_normal_y=disk_normal_y,
        disk_normal_z=disk_normal_z,
        disk_pitch_angle=disk_pitch_angle,
        disk_bank_angle=disk_bank_angle,
    )
    return_type = 'object'

class embedded_face_zone(String, AllowedValuesMixin):
    """
    Embedded face zone:.
    """
    _version = '231'
    fluent_name = 'embedded-face-zone'
    _python_name = 'embedded_face_zone'
    return_type = 'object'

class floating_surface(String, AllowedValuesMixin):
    """
    Floating surface name:.
    """
    _version = '231'
    fluent_name = 'floating-surface'
    _python_name = 'floating_surface'
    return_type = 'object'

class disk_id(Group):
    """
    Menu to define the disk face/surface name:
     - embedded-face-zone: select embedded-face-zone name, 
     - floating-disk	: select floating-surface name, 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '231'
    fluent_name = 'disk-id'
    _python_name = 'disk_id'
    child_names = ['embedded_face_zone', 'floating_surface']
    _child_classes = dict(
        embedded_face_zone=embedded_face_zone,
        floating_surface=floating_surface,
    )
    return_type = 'object'

class blade_pitch_collective(Real):
    """
    Blade collective pitch angle:.
    """
    _version = '231'
    fluent_name = 'blade-pitch-collective'
    _python_name = 'blade_pitch_collective'
    return_type = 'object'

class blade_pitch_cyclic_sin(Real):
    """
    Magnitude of sin component of blade's cyclic pitch angle:.
    """
    _version = '231'
    fluent_name = 'blade-pitch-cyclic-sin'
    _python_name = 'blade_pitch_cyclic_sin'
    return_type = 'object'

class blade_pitch_cyclic_cos(Real):
    """
    Magnitude of cos component of blade's cyclic pitch angle:.
    """
    _version = '231'
    fluent_name = 'blade-pitch-cyclic-cos'
    _python_name = 'blade_pitch_cyclic_cos'
    return_type = 'object'

class blade_pitch_angles(Group):
    """
    Menu to define the rotor pitch and flapping angles.
     - blade-pitch-collective    : , 
     - blade-pitch-cyclic-sin    : , 
     - blade-pitch-cyclic-cos    : , 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '231'
    fluent_name = 'blade-pitch-angles'
    _python_name = 'blade_pitch_angles'
    child_names = ['blade_pitch_collective', 'blade_pitch_cyclic_sin', 'blade_pitch_cyclic_cos']
    _child_classes = dict(
        blade_pitch_collective=blade_pitch_collective,
        blade_pitch_cyclic_sin=blade_pitch_cyclic_sin,
        blade_pitch_cyclic_cos=blade_pitch_cyclic_cos,
    )
    return_type = 'object'

class blade_flapping_cone(Real):
    """
    Blade flapping cone angle:.
    """
    _version = '231'
    fluent_name = 'blade-flapping-cone'
    _python_name = 'blade_flapping_cone'
    return_type = 'object'

class blade_flapping_cyclic_sin(Real):
    """
    Magnitude of sin component of blade's cyclic flapping angle:.
    """
    _version = '231'
    fluent_name = 'blade-flapping-cyclic-sin'
    _python_name = 'blade_flapping_cyclic_sin'
    return_type = 'object'

class blade_flapping_cyclic_cos(Real):
    """
    Magnitude of cos component of blade's cyclic flapping angle:.
    """
    _version = '231'
    fluent_name = 'blade-flapping-cyclic-cos'
    _python_name = 'blade_flapping_cyclic_cos'
    return_type = 'object'

class blade_flap_angles(Group):
    """
    Menu to define the rotor pitch angles.
     - blade-flapping-cone       : , 
     - blade-flapping-cyclic-sin : , 
     - blade-flapping-cyclic-cos : , 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '231'
    fluent_name = 'blade-flap-angles'
    _python_name = 'blade_flap_angles'
    child_names = ['blade_flapping_cone', 'blade_flapping_cyclic_sin', 'blade_flapping_cyclic_cos']
    _child_classes = dict(
        blade_flapping_cone=blade_flapping_cone,
        blade_flapping_cyclic_sin=blade_flapping_cyclic_sin,
        blade_flapping_cyclic_cos=blade_flapping_cyclic_cos,
    )
    return_type = 'object'

class model_tip_loss(Integer):
    """
    Tip Loss Model:.
    """
    _version = '231'
    fluent_name = 'model-tip-loss'
    _python_name = 'model_tip_loss'
    return_type = 'object'

class tip_loss_limit(Real):
    """
    Tip Loss Limit (%R) if using Quadratic tip loss model:.
    """
    _version = '231'
    fluent_name = 'tip-loss-limit'
    _python_name = 'tip_loss_limit'
    return_type = 'object'

class prandtl_tuning_coefficient(Real):
    """
    The tuning coefficient in modified prandtl tip loss model:.
    """
    _version = '231'
    fluent_name = 'prandtl-tuning-coefficient'
    _python_name = 'prandtl_tuning_coefficient'
    return_type = 'object'

class tip_loss(Group):
    """
    Menu to define the rotor tip loss model.
     - method  : define the method to model rotor tip loss, quadratic-tip-loss, prandtl-tip-loss
     - tip-loss-limit : tip-loss-limit, 
     - prandtl-tuning-coefficient: prandtl-tuning-coefficient, 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '231'
    fluent_name = 'tip-loss'
    _python_name = 'tip_loss'
    child_names = ['model_tip_loss', 'tip_loss_limit', 'prandtl_tuning_coefficient']
    _child_classes = dict(
        model_tip_loss=model_tip_loss,
        tip_loss_limit=tip_loss_limit,
        prandtl_tuning_coefficient=prandtl_tuning_coefficient,
    )
    return_type = 'object'

class general_1(Group):
    """
    Menu to define the rotor general information.
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '231'
    fluent_name = 'general'
    _python_name = 'general'
    child_names = ['basic_info', 'disk_origin', 'disk_orientation', 'disk_id', 'blade_pitch_angles', 'blade_flap_angles', 'tip_loss']
    _child_classes = dict(
        basic_info=basic_info,
        disk_origin=disk_origin,
        disk_orientation=disk_orientation,
        disk_id=disk_id,
        blade_pitch_angles=blade_pitch_angles,
        blade_flap_angles=blade_flap_angles,
        tip_loss=tip_loss,
    )
    return_type = 'object'

class radius_ratio(Real):
    """
    The span-wise distance of blade section from rotor origin over rotor tip radius (r/R).
    """
    _version = '231'
    fluent_name = 'radius-ratio'
    _python_name = 'radius_ratio'
    return_type = 'object'

class chord(Real):
    """
    The chord lenght of blade section.
    """
    _version = '231'
    fluent_name = 'chord'
    _python_name = 'chord'
    return_type = 'object'

class twist(Real):
    """
    The blade twist at blade section.
    """
    _version = '231'
    fluent_name = 'twist'
    _python_name = 'twist'
    return_type = 'object'

class airfoil_data_file(String):
    """
    Airfoil data file (cl/cd) at blade section.
    """
    _version = '231'
    fluent_name = 'airfoil-data-file'
    _python_name = 'airfoil_data_file'
    return_type = 'object'

class geometry_1_child(Group):
    """
    'child_object_type' of geometry.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'geometry_child'
    child_names = ['radius_ratio', 'chord', 'twist', 'airfoil_data_file']
    _child_classes = dict(
        radius_ratio=radius_ratio,
        chord=chord,
        twist=twist,
        airfoil_data_file=airfoil_data_file,
    )
    return_type = 'object'

class geometry_1(NamedObject[geometry_1_child], CreatableNamedObjectMixinOld[geometry_1_child]):
    """
    Main object.
    """
    _version = '231'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    child_object_type = geometry_1_child
    return_type = 'object'

class trim_option(Integer):
    """
    Trimming Option:.
    """
    _version = '231'
    fluent_name = 'trim-option'
    _python_name = 'trim_option'
    return_type = 'object'

class update_frequency(Integer):
    """
    Trimming Update Frequency N (trim after each N iterations):.
    """
    _version = '231'
    fluent_name = 'update-frequency'
    _python_name = 'update_frequency'
    return_type = 'object'

class damping_factor(Real):
    """
    Trimming damping factor (relaxation factor):.
    """
    _version = '231'
    fluent_name = 'damping-factor'
    _python_name = 'damping_factor'
    return_type = 'object'

class thrust_coefficient(Real):
    """
    Desired thrust coefficient:.
    """
    _version = '231'
    fluent_name = 'thrust-coefficient'
    _python_name = 'thrust_coefficient'
    return_type = 'object'

class x_moment_coefficient(Real):
    """
    Desired x-momentum coefficient:.
    """
    _version = '231'
    fluent_name = 'x-moment-coefficient'
    _python_name = 'x_moment_coefficient'
    return_type = 'object'

class y_moment_coefficient(Real):
    """
    Desired y-momentum coefficient:.
    """
    _version = '231'
    fluent_name = 'y-moment-coefficient'
    _python_name = 'y_moment_coefficient'
    return_type = 'object'

class trimming(Group):
    """
    Menu to define rotor trimming set-up.
     - trim-option       : to define collective and cyclic pitches to trim, 
     - update-frequency  : the number of solver iterations that pitch angle will be updated each time, 
     - damping-factor    : relaxation factor for pitch angles, 
     - thrust-coef       : desired thrust coefficient to set pitch for
     - moment-coef-x     : desired x-moment coefficient to set pitch for, 
     - moment-coef-y     : desired y-moment coefficient to set pitch for, 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '231'
    fluent_name = 'trimming'
    _python_name = 'trimming'
    child_names = ['trim_option', 'update_frequency', 'damping_factor', 'thrust_coefficient', 'x_moment_coefficient', 'y_moment_coefficient']
    _child_classes = dict(
        trim_option=trim_option,
        update_frequency=update_frequency,
        damping_factor=damping_factor,
        thrust_coefficient=thrust_coefficient,
        x_moment_coefficient=x_moment_coefficient,
        y_moment_coefficient=y_moment_coefficient,
    )
    return_type = 'object'

class disk_child(Group):
    """
    'child_object_type' of disk.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'disk_child'
    child_names = ['general', 'geometry', 'trimming']
    _child_classes = dict(
        general=general_1,
        geometry=geometry_1,
        trimming=trimming,
    )
    return_type = 'object'

class disk(NamedObject[disk_child], CreatableNamedObjectMixinOld[disk_child]):
    """
    Main object.
    """
    _version = '231'
    fluent_name = 'disk'
    _python_name = 'disk'
    child_object_type = disk_child
    return_type = 'object'

class virtual_blade_model(Group):
    """
    The vbm model object.
    """
    _version = '231'
    fluent_name = 'virtual-blade-model'
    _python_name = 'virtual_blade_model'
    child_names = ['enable', 'mode', 'disk']
    _child_classes = dict(
        enable=enable_4,
        mode=mode,
        disk=disk,
    )
    return_type = 'object'

class models(Group):
    """
    'models' child.
    """
    _version = '231'
    fluent_name = 'models'
    _python_name = 'models'
    child_names = ['discrete_phase', 'energy', 'multiphase', 'viscous', 'optics', 'virtual_blade_model']
    _child_classes = dict(
        discrete_phase=discrete_phase,
        energy=energy,
        multiphase=multiphase,
        viscous=viscous,
        optics=optics,
        virtual_blade_model=virtual_blade_model,
    )
    return_type = 'object'

class database_type(String, AllowedValuesMixin):
    """
    The database type.
    """
    _version = '231'
    fluent_name = 'database-type'
    _python_name = 'database_type'
    return_type = 'object'

class type_1(String, AllowedValuesMixin):
    """
    'type' child.
    """
    _version = '231'
    fluent_name = 'type'
    _python_name = 'type'
    return_type = 'object'

class formula(String, AllowedValuesMixin):
    """
    'formula' child.
    """
    _version = '231'
    fluent_name = 'formula'
    _python_name = 'formula'
    return_type = 'object'

class copy_by_formula(Command):
    """
    Copy a material from the database (pick by formula).
    
    Parameters
    ----------
        type : str
            'type' child.
        formula : str
            'formula' child.
    """
    _version = '231'
    fluent_name = 'copy-by-formula'
    _python_name = 'copy_by_formula'
    argument_names = ['type', 'formula']
    _child_classes = dict(
        type=type_1,
        formula=formula,
    )
    return_type = 'object'

class name_1(String, AllowedValuesMixin):
    """
    'name' child.
    """
    _version = '231'
    fluent_name = 'name'
    _python_name = 'name'
    return_type = 'object'

class copy_by_name(Command):
    """
    Copy a material from the database (pick by name).
    
    Parameters
    ----------
        type : str
            'type' child.
        name : str
            'name' child.
    """
    _version = '231'
    fluent_name = 'copy-by-name'
    _python_name = 'copy_by_name'
    argument_names = ['type', 'name']
    _child_classes = dict(
        type=type_1,
        name=name_1,
    )
    return_type = 'object'

class list_materials_1(Command):
    """
    List all materials in the database.
    """
    _version = '231'
    fluent_name = 'list-materials'
    _python_name = 'list_materials'
    return_type = 'object'

class list_properties_1(Command):
    """
    List the properties of a material in the database.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '231'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    argument_names = ['name']
    _child_classes = dict(
        name=name_1,
    )
    return_type = 'object'

class database(Group):
    """
    'database' child.
    """
    _version = '231'
    fluent_name = 'database'
    _python_name = 'database'
    child_names = ['database_type']
    command_names = ['copy_by_formula', 'copy_by_name', 'list_materials', 'list_properties']
    _child_classes = dict(
        database_type=database_type,
        copy_by_formula=copy_by_formula,
        copy_by_name=copy_by_name,
        list_materials=list_materials_1,
        list_properties=list_properties_1,
    )
    return_type = 'object'

class option_10(String, AllowedValuesMixin):
    """
    Method for calculating material property.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class nist_fluid(String, AllowedValuesMixin):
    """
    NIST fluid data.
    """
    _version = '231'
    fluent_name = 'nist-fluid'
    _python_name = 'nist_fluid'
    return_type = 'object'

class lookup_table(Boolean):
    """
    Whether to use a lookup table for accelerating NIST calls.
    """
    _version = '231'
    fluent_name = 'lookup-table?'
    _python_name = 'lookup_table'
    return_type = 'object'

class pressure_points(Integer):
    """
    Number of table points for pressure.
    """
    _version = '231'
    fluent_name = 'pressure-points'
    _python_name = 'pressure_points'
    return_type = 'object'

class pressure_minimum(Real):
    """
    Lower table bound for pressure.
    """
    _version = '231'
    fluent_name = 'pressure-minimum'
    _python_name = 'pressure_minimum'
    return_type = 'object'

class pressure_maximum(Real):
    """
    Upper table bound for pressure.
    """
    _version = '231'
    fluent_name = 'pressure-maximum'
    _python_name = 'pressure_maximum'
    return_type = 'object'

class temperature_points(Integer):
    """
    Number of table points for temperature.
    """
    _version = '231'
    fluent_name = 'temperature-points'
    _python_name = 'temperature_points'
    return_type = 'object'

class temperature_minimum(Real):
    """
    Lower table bound for temperature.
    """
    _version = '231'
    fluent_name = 'temperature-minimum'
    _python_name = 'temperature_minimum'
    return_type = 'object'

class temperature_maximum(Real):
    """
    Upper table bound for temperature.
    """
    _version = '231'
    fluent_name = 'temperature-maximum'
    _python_name = 'temperature_maximum'
    return_type = 'object'

class saturation_points(Integer):
    """
    Number of table points for saturation.
    """
    _version = '231'
    fluent_name = 'saturation-points'
    _python_name = 'saturation_points'
    return_type = 'object'

class real_gas_nist(Group):
    """
    'real_gas_nist' child.
    """
    _version = '231'
    fluent_name = 'real-gas-nist'
    _python_name = 'real_gas_nist'
    child_names = ['nist_fluid', 'lookup_table', 'pressure_points', 'pressure_minimum', 'pressure_maximum', 'temperature_points', 'temperature_minimum', 'temperature_maximum', 'saturation_points']
    _child_classes = dict(
        nist_fluid=nist_fluid,
        lookup_table=lookup_table,
        pressure_points=pressure_points,
        pressure_minimum=pressure_minimum,
        pressure_maximum=pressure_maximum,
        temperature_points=temperature_points,
        temperature_minimum=temperature_minimum,
        temperature_maximum=temperature_maximum,
        saturation_points=saturation_points,
    )
    return_type = 'object'

class value(Real):
    """
    'value' child.
    """
    _version = '231'
    fluent_name = 'value'
    _python_name = 'value'
    return_type = 'object'

class reference_pressure(Real):
    """
    'reference_pressure' child.
    """
    _version = '231'
    fluent_name = 'reference-pressure'
    _python_name = 'reference_pressure'
    return_type = 'object'

class reference_density(Real):
    """
    'reference_density' child.
    """
    _version = '231'
    fluent_name = 'reference-density'
    _python_name = 'reference_density'
    return_type = 'object'

class reference_bulk_modulus(Real):
    """
    'reference_bulk_modulus' child.
    """
    _version = '231'
    fluent_name = 'reference-bulk-modulus'
    _python_name = 'reference_bulk_modulus'
    return_type = 'object'

class density_exponent(Real):
    """
    'density_exponent' child.
    """
    _version = '231'
    fluent_name = 'density-exponent'
    _python_name = 'density_exponent'
    return_type = 'object'

class maximum_density_ratio(Real):
    """
    'maximum_density_ratio' child.
    """
    _version = '231'
    fluent_name = 'maximum-density-ratio'
    _python_name = 'maximum_density_ratio'
    return_type = 'object'

class minimum_density_ratio(Real):
    """
    'minimum_density_ratio' child.
    """
    _version = '231'
    fluent_name = 'minimum-density-ratio'
    _python_name = 'minimum_density_ratio'
    return_type = 'object'

class compressible_liquid(Group):
    """
    'compressible_liquid' child.
    """
    _version = '231'
    fluent_name = 'compressible-liquid'
    _python_name = 'compressible_liquid'
    child_names = ['reference_pressure', 'reference_density', 'reference_bulk_modulus', 'density_exponent', 'maximum_density_ratio', 'minimum_density_ratio']
    _child_classes = dict(
        reference_pressure=reference_pressure,
        reference_density=reference_density,
        reference_bulk_modulus=reference_bulk_modulus,
        density_exponent=density_exponent,
        maximum_density_ratio=maximum_density_ratio,
        minimum_density_ratio=minimum_density_ratio,
    )
    return_type = 'object'

class piecewise_linear_child(RealList):
    """
    'child_object_type' of piecewise_linear.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'piecewise_linear_child'
    return_type = 'object'

class piecewise_linear(ListObject[piecewise_linear_child]):
    """
    'piecewise_linear' child.
    """
    _version = '231'
    fluent_name = 'piecewise-linear'
    _python_name = 'piecewise_linear'
    child_object_type = piecewise_linear_child
    return_type = 'object'

class minimum(Real):
    """
    Minimum argument range for this polynomial segment.
    """
    _version = '231'
    fluent_name = 'minimum'
    _python_name = 'minimum'
    return_type = 'object'

class maximum(Real):
    """
    Maximum argument range for this polynomial segment.
    """
    _version = '231'
    fluent_name = 'maximum'
    _python_name = 'maximum'
    return_type = 'object'

class number_of_coefficients(Integer):
    """
    Number of polynomial coefficients (polynomial order plus one).
    """
    _version = '231'
    fluent_name = 'number-of-coefficients'
    _python_name = 'number_of_coefficients'
    return_type = 'object'

class coefficients(RealList):
    """
    Polynomial coefficients.
    """
    _version = '231'
    fluent_name = 'coefficients'
    _python_name = 'coefficients'
    return_type = 'object'

class piecewise_polynomial_child(Group):
    """
    'child_object_type' of piecewise_polynomial.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'piecewise_polynomial_child'
    child_names = ['minimum', 'maximum', 'number_of_coefficients', 'coefficients']
    _child_classes = dict(
        minimum=minimum,
        maximum=maximum,
        number_of_coefficients=number_of_coefficients,
        coefficients=coefficients,
    )
    return_type = 'object'

class piecewise_polynomial(ListObject[piecewise_polynomial_child]):
    """
    'piecewise_polynomial' child.
    """
    _version = '231'
    fluent_name = 'piecewise-polynomial'
    _python_name = 'piecewise_polynomial'
    child_object_type = piecewise_polynomial_child
    return_type = 'object'

class polynomial(Group):
    """
    'polynomial' child.
    """
    _version = '231'
    fluent_name = 'polynomial'
    _python_name = 'polynomial'
    child_names = ['number_of_coefficients', 'coefficients']
    _child_classes = dict(
        number_of_coefficients=number_of_coefficients,
        coefficients=coefficients,
    )
    return_type = 'object'

class expression(Real):
    """
    'expression' child.
    """
    _version = '231'
    fluent_name = 'expression'
    _python_name = 'expression'
    return_type = 'object'

class user_defined_function(String, AllowedValuesMixin):
    """
    'user_defined_function' child.
    """
    _version = '231'
    fluent_name = 'user-defined-function'
    _python_name = 'user_defined_function'
    return_type = 'object'

class rgp_table(String, AllowedValuesMixin):
    """
    RGP Table Data Set.
    """
    _version = '231'
    fluent_name = 'rgp-table'
    _python_name = 'rgp_table'
    return_type = 'object'

class density(Group):
    """
    'density' child.
    """
    _version = '231'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'real_gas_nist', 'value', 'compressible_liquid', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function', 'rgp_table']
    _child_classes = dict(
        option=option_10,
        real_gas_nist=real_gas_nist,
        value=value,
        compressible_liquid=compressible_liquid,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        user_defined_function=user_defined_function,
        rgp_table=rgp_table,
    )
    return_type = 'object'

class b(Real):
    """
    'b' child.
    """
    _version = '231'
    fluent_name = 'b'
    _python_name = 'b'
    return_type = 'object'

class reference_viscosity(Real):
    """
    'reference_viscosity' child.
    """
    _version = '231'
    fluent_name = 'reference-viscosity'
    _python_name = 'reference_viscosity'
    return_type = 'object'

class reference_temperature_1(Real):
    """
    'reference_temperature' child.
    """
    _version = '231'
    fluent_name = 'reference-temperature'
    _python_name = 'reference_temperature'
    return_type = 'object'

class temperature_exponent(Real):
    """
    'temperature_exponent' child.
    """
    _version = '231'
    fluent_name = 'temperature-exponent'
    _python_name = 'temperature_exponent'
    return_type = 'object'

class power_law(Group):
    """
    'power_law' child.
    """
    _version = '231'
    fluent_name = 'power-law'
    _python_name = 'power_law'
    child_names = ['option', 'b', 'reference_viscosity', 'reference_temperature', 'temperature_exponent']
    _child_classes = dict(
        option=option_3,
        b=b,
        reference_viscosity=reference_viscosity,
        reference_temperature=reference_temperature_1,
        temperature_exponent=temperature_exponent,
    )
    return_type = 'object'

class a(Real):
    """
    'a' child.
    """
    _version = '231'
    fluent_name = 'a'
    _python_name = 'a'
    return_type = 'object'

class c(Real):
    """
    'c' child.
    """
    _version = '231'
    fluent_name = 'c'
    _python_name = 'c'
    return_type = 'object'

class blottner_curve_fit(Group):
    """
    'blottner_curve_fit' child.
    """
    _version = '231'
    fluent_name = 'blottner-curve-fit'
    _python_name = 'blottner_curve_fit'
    child_names = ['a', 'b', 'c']
    _child_classes = dict(
        a=a,
        b=b,
        c=c,
    )
    return_type = 'object'

class c1(Real):
    """
    'c1' child.
    """
    _version = '231'
    fluent_name = 'c1'
    _python_name = 'c1'
    return_type = 'object'

class c2(Real):
    """
    'c2' child.
    """
    _version = '231'
    fluent_name = 'c2'
    _python_name = 'c2'
    return_type = 'object'

class effective_temperature(Real):
    """
    'effective_temperature' child.
    """
    _version = '231'
    fluent_name = 'effective-temperature'
    _python_name = 'effective_temperature'
    return_type = 'object'

class sutherland(Group):
    """
    'sutherland' child.
    """
    _version = '231'
    fluent_name = 'sutherland'
    _python_name = 'sutherland'
    child_names = ['option', 'c1', 'c2', 'reference_viscosity', 'reference_temperature', 'effective_temperature']
    _child_classes = dict(
        option=option_3,
        c1=c1,
        c2=c2,
        reference_viscosity=reference_viscosity,
        reference_temperature=reference_temperature_1,
        effective_temperature=effective_temperature,
    )
    return_type = 'object'

class zero_shear_viscosity(Real):
    """
    'zero_shear_viscosity' child.
    """
    _version = '231'
    fluent_name = 'zero-shear-viscosity'
    _python_name = 'zero_shear_viscosity'
    return_type = 'object'

class power_law_index(Real):
    """
    'power_law_index' child.
    """
    _version = '231'
    fluent_name = 'power-law-index'
    _python_name = 'power_law_index'
    return_type = 'object'

class time_constant(Real):
    """
    'time_constant' child.
    """
    _version = '231'
    fluent_name = 'time-constant'
    _python_name = 'time_constant'
    return_type = 'object'

class activation_energy(Real):
    """
    'activation_energy' child.
    """
    _version = '231'
    fluent_name = 'activation-energy'
    _python_name = 'activation_energy'
    return_type = 'object'

class cross(Group):
    """
    'cross' child.
    """
    _version = '231'
    fluent_name = 'cross'
    _python_name = 'cross'
    child_names = ['option', 'zero_shear_viscosity', 'power_law_index', 'time_constant', 'reference_temperature', 'activation_energy']
    _child_classes = dict(
        option=option_3,
        zero_shear_viscosity=zero_shear_viscosity,
        power_law_index=power_law_index,
        time_constant=time_constant,
        reference_temperature=reference_temperature_1,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class consistency_index(Real):
    """
    'consistency_index' child.
    """
    _version = '231'
    fluent_name = 'consistency-index'
    _python_name = 'consistency_index'
    return_type = 'object'

class yield_stress_threshold(Real):
    """
    'yield_stress_threshold' child.
    """
    _version = '231'
    fluent_name = 'yield-stress-threshold'
    _python_name = 'yield_stress_threshold'
    return_type = 'object'

class critical_shear_rate(Real):
    """
    'critical_shear_rate' child.
    """
    _version = '231'
    fluent_name = 'critical-shear-rate'
    _python_name = 'critical_shear_rate'
    return_type = 'object'

class herschel_bulkley(Group):
    """
    'herschel_bulkley' child.
    """
    _version = '231'
    fluent_name = 'herschel-bulkley'
    _python_name = 'herschel_bulkley'
    child_names = ['option', 'consistency_index', 'power_law_index', 'yield_stress_threshold', 'critical_shear_rate', 'reference_temperature', 'activation_energy']
    _child_classes = dict(
        option=option_3,
        consistency_index=consistency_index,
        power_law_index=power_law_index,
        yield_stress_threshold=yield_stress_threshold,
        critical_shear_rate=critical_shear_rate,
        reference_temperature=reference_temperature_1,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class infinite_shear_viscosity(Real):
    """
    'infinite_shear_viscosity' child.
    """
    _version = '231'
    fluent_name = 'infinite-shear-viscosity'
    _python_name = 'infinite_shear_viscosity'
    return_type = 'object'

class carreau(Group):
    """
    'carreau' child.
    """
    _version = '231'
    fluent_name = 'carreau'
    _python_name = 'carreau'
    child_names = ['option', 'time_constant', 'power_law_index', 'zero_shear_viscosity', 'infinite_shear_viscosity', 'reference_temperature', 'activation_energy']
    _child_classes = dict(
        option=option_3,
        time_constant=time_constant,
        power_law_index=power_law_index,
        zero_shear_viscosity=zero_shear_viscosity,
        infinite_shear_viscosity=infinite_shear_viscosity,
        reference_temperature=reference_temperature_1,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class minimum_viscosity(Real):
    """
    'minimum_viscosity' child.
    """
    _version = '231'
    fluent_name = 'minimum-viscosity'
    _python_name = 'minimum_viscosity'
    return_type = 'object'

class maximum_viscosity(Real):
    """
    'maximum_viscosity' child.
    """
    _version = '231'
    fluent_name = 'maximum-viscosity'
    _python_name = 'maximum_viscosity'
    return_type = 'object'

class non_newtonian_power_law(Group):
    """
    'non_newtonian_power_law' child.
    """
    _version = '231'
    fluent_name = 'non-newtonian-power-law'
    _python_name = 'non_newtonian_power_law'
    child_names = ['option', 'consistency_index', 'power_law_index', 'minimum_viscosity', 'maximum_viscosity', 'reference_temperature', 'activation_energy']
    _child_classes = dict(
        option=option_3,
        consistency_index=consistency_index,
        power_law_index=power_law_index,
        minimum_viscosity=minimum_viscosity,
        maximum_viscosity=maximum_viscosity,
        reference_temperature=reference_temperature_1,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class viscosity(Group):
    """
    'viscosity' child.
    """
    _version = '231'
    fluent_name = 'viscosity'
    _python_name = 'viscosity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'power_law', 'blottner_curve_fit', 'sutherland', 'cross', 'herschel_bulkley', 'carreau', 'non_newtonian_power_law', 'user_defined_function', 'rgp_table', 'real_gas_nist']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        power_law=power_law,
        blottner_curve_fit=blottner_curve_fit,
        sutherland=sutherland,
        cross=cross,
        herschel_bulkley=herschel_bulkley,
        carreau=carreau,
        non_newtonian_power_law=non_newtonian_power_law,
        user_defined_function=user_defined_function,
        rgp_table=rgp_table,
        real_gas_nist=real_gas_nist,
    )
    return_type = 'object'

class nasa_9_piecewise_polynomial_child(Group):
    """
    'child_object_type' of nasa_9_piecewise_polynomial.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'nasa_9_piecewise_polynomial_child'
    child_names = ['minimum', 'maximum', 'number_of_coefficients', 'coefficients']
    _child_classes = dict(
        minimum=minimum,
        maximum=maximum,
        number_of_coefficients=number_of_coefficients,
        coefficients=coefficients,
    )
    return_type = 'object'

class nasa_9_piecewise_polynomial(ListObject[nasa_9_piecewise_polynomial_child]):
    """
    'nasa_9_piecewise_polynomial' child.
    """
    _version = '231'
    fluent_name = 'nasa-9-piecewise-polynomial'
    _python_name = 'nasa_9_piecewise_polynomial'
    child_object_type = nasa_9_piecewise_polynomial_child
    return_type = 'object'

class specific_heat(Group):
    """
    'specific_heat' child.
    """
    _version = '231'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'nasa_9_piecewise_polynomial', 'user_defined_function', 'rgp_table', 'real_gas_nist']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        nasa_9_piecewise_polynomial=nasa_9_piecewise_polynomial,
        user_defined_function=user_defined_function,
        rgp_table=rgp_table,
        real_gas_nist=real_gas_nist,
    )
    return_type = 'object'

class thermal_conductivity(Group):
    """
    'thermal_conductivity' child.
    """
    _version = '231'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function', 'rgp_table', 'real_gas_nist']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        user_defined_function=user_defined_function,
        rgp_table=rgp_table,
        real_gas_nist=real_gas_nist,
    )
    return_type = 'object'

class molecular_weight(Group):
    """
    'molecular_weight' child.
    """
    _version = '231'
    fluent_name = 'molecular-weight'
    _python_name = 'molecular_weight'
    child_names = ['option', 'value', 'rgp_table']
    _child_classes = dict(
        option=option_10,
        value=value,
        rgp_table=rgp_table,
    )
    return_type = 'object'

class combustion_mixture(String, AllowedValuesMixin):
    """
    'combustion_mixture' child.
    """
    _version = '231'
    fluent_name = 'combustion-mixture'
    _python_name = 'combustion_mixture'
    return_type = 'object'

class premix_laminar_speed(Group):
    """
    'premix_laminar_speed' child.
    """
    _version = '231'
    fluent_name = 'premix-laminar-speed'
    _python_name = 'premix_laminar_speed'
    child_names = ['option', 'value', 'user_defined_function', 'combustion_mixture']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
        combustion_mixture=combustion_mixture,
    )
    return_type = 'object'

class premix_critical_strain(Group):
    """
    'premix_critical_strain' child.
    """
    _version = '231'
    fluent_name = 'premix-critical-strain'
    _python_name = 'premix_critical_strain'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class premix_unburnt_temp(Group):
    """
    'premix_unburnt_temp' child.
    """
    _version = '231'
    fluent_name = 'premix-unburnt-temp'
    _python_name = 'premix_unburnt_temp'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class premix_unburnt_density(Group):
    """
    'premix_unburnt_density' child.
    """
    _version = '231'
    fluent_name = 'premix-unburnt-density'
    _python_name = 'premix_unburnt_density'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class premix_heat_trans_coeff(Group):
    """
    'premix_heat_trans_coeff' child.
    """
    _version = '231'
    fluent_name = 'premix-heat-trans-coeff'
    _python_name = 'premix_heat_trans_coeff'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class premix_heat_of_comb(Group):
    """
    'premix_heat_of_comb' child.
    """
    _version = '231'
    fluent_name = 'premix-heat-of-comb'
    _python_name = 'premix_heat_of_comb'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class premix_unburnt_fuel_mf(Group):
    """
    'premix_unburnt_fuel_mf' child.
    """
    _version = '231'
    fluent_name = 'premix-unburnt-fuel-mf'
    _python_name = 'premix_unburnt_fuel_mf'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class premix_adiabatic_temp(Group):
    """
    'premix_adiabatic_temp' child.
    """
    _version = '231'
    fluent_name = 'premix-adiabatic-temp'
    _python_name = 'premix_adiabatic_temp'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class therm_exp_coeff(Group):
    """
    'therm_exp_coeff' child.
    """
    _version = '231'
    fluent_name = 'therm-exp-coeff'
    _python_name = 'therm_exp_coeff'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class vibrational_temperature_mode_1(Real):
    """
    'vibrational_temperature_mode_1' child.
    """
    _version = '231'
    fluent_name = 'vibrational-temperature-mode-1'
    _python_name = 'vibrational_temperature_mode_1'
    return_type = 'object'

class vibrational_degeneracy_mode_1(Real):
    """
    'vibrational_degeneracy_mode_1' child.
    """
    _version = '231'
    fluent_name = 'vibrational-degeneracy-mode-1'
    _python_name = 'vibrational_degeneracy_mode_1'
    return_type = 'object'

class vibrational_temperature_mode_2(Real):
    """
    'vibrational_temperature_mode_2' child.
    """
    _version = '231'
    fluent_name = 'vibrational-temperature-mode-2'
    _python_name = 'vibrational_temperature_mode_2'
    return_type = 'object'

class vibrational_degeneracy_mode_2(Real):
    """
    'vibrational_degeneracy_mode_2' child.
    """
    _version = '231'
    fluent_name = 'vibrational-degeneracy-mode-2'
    _python_name = 'vibrational_degeneracy_mode_2'
    return_type = 'object'

class vibrational_temperature_mode_3(Real):
    """
    'vibrational_temperature_mode_3' child.
    """
    _version = '231'
    fluent_name = 'vibrational-temperature-mode-3'
    _python_name = 'vibrational_temperature_mode_3'
    return_type = 'object'

class vibrational_degeneracy_mode_3(Real):
    """
    'vibrational_degeneracy_mode_3' child.
    """
    _version = '231'
    fluent_name = 'vibrational-degeneracy-mode-3'
    _python_name = 'vibrational_degeneracy_mode_3'
    return_type = 'object'

class vibrational_modes(Group):
    """
    'vibrational_modes' child.
    """
    _version = '231'
    fluent_name = 'vibrational-modes'
    _python_name = 'vibrational_modes'
    child_names = ['vibrational_temperature_mode_1', 'vibrational_degeneracy_mode_1', 'vibrational_temperature_mode_2', 'vibrational_degeneracy_mode_2', 'vibrational_temperature_mode_3', 'vibrational_degeneracy_mode_3']
    _child_classes = dict(
        vibrational_temperature_mode_1=vibrational_temperature_mode_1,
        vibrational_degeneracy_mode_1=vibrational_degeneracy_mode_1,
        vibrational_temperature_mode_2=vibrational_temperature_mode_2,
        vibrational_degeneracy_mode_2=vibrational_degeneracy_mode_2,
        vibrational_temperature_mode_3=vibrational_temperature_mode_3,
        vibrational_degeneracy_mode_3=vibrational_degeneracy_mode_3,
    )
    return_type = 'object'

class characteristic_vibrational_temperature(Group):
    """
    'characteristic_vibrational_temperature' child.
    """
    _version = '231'
    fluent_name = 'characteristic-vibrational-temperature'
    _python_name = 'characteristic_vibrational_temperature'
    child_names = ['option', 'vibrational_modes', 'value']
    _child_classes = dict(
        option=option_10,
        vibrational_modes=vibrational_modes,
        value=value,
    )
    return_type = 'object'

class gray_band_coefficients(RealList):
    """
    'gray_band_coefficients' child.
    """
    _version = '231'
    fluent_name = 'gray-band-coefficients'
    _python_name = 'gray_band_coefficients'
    return_type = 'object'

class absorption_coefficient(Group):
    """
    'absorption_coefficient' child.
    """
    _version = '231'
    fluent_name = 'absorption-coefficient'
    _python_name = 'absorption_coefficient'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'gray_band_coefficients', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        gray_band_coefficients=gray_band_coefficients,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class melting_heat(Group):
    """
    'melting_heat' child.
    """
    _version = '231'
    fluent_name = 'melting-heat'
    _python_name = 'melting_heat'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class tsolidus(Group):
    """
    'tsolidus' child.
    """
    _version = '231'
    fluent_name = 'tsolidus'
    _python_name = 'tsolidus'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class tliqidus(Group):
    """
    'tliqidus' child.
    """
    _version = '231'
    fluent_name = 'tliqidus'
    _python_name = 'tliqidus'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class liquidus_slope(Group):
    """
    'liquidus_slope' child.
    """
    _version = '231'
    fluent_name = 'liquidus-slope'
    _python_name = 'liquidus_slope'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class partition_coeff(Group):
    """
    'partition_coeff' child.
    """
    _version = '231'
    fluent_name = 'partition-coeff'
    _python_name = 'partition_coeff'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class eutectic_mf(Group):
    """
    'eutectic_mf' child.
    """
    _version = '231'
    fluent_name = 'eutectic-mf'
    _python_name = 'eutectic_mf'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class solid_diffusion(Group):
    """
    'solid_diffusion' child.
    """
    _version = '231'
    fluent_name = 'solid-diffusion'
    _python_name = 'solid_diffusion'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class solut_exp_coeff(Group):
    """
    'solut_exp_coeff' child.
    """
    _version = '231'
    fluent_name = 'solut-exp-coeff'
    _python_name = 'solut_exp_coeff'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class scattering_coefficient(Group):
    """
    'scattering_coefficient' child.
    """
    _version = '231'
    fluent_name = 'scattering-coefficient'
    _python_name = 'scattering_coefficient'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class forward_scattering_factor(Real):
    """
    'forward_scattering_factor' child.
    """
    _version = '231'
    fluent_name = 'forward-scattering-factor'
    _python_name = 'forward_scattering_factor'
    return_type = 'object'

class asymmetry_factor(Real):
    """
    'asymmetry_factor' child.
    """
    _version = '231'
    fluent_name = 'asymmetry-factor'
    _python_name = 'asymmetry_factor'
    return_type = 'object'

class delta_eddington(Group):
    """
    'delta_eddington' child.
    """
    _version = '231'
    fluent_name = 'delta-eddington'
    _python_name = 'delta_eddington'
    child_names = ['forward_scattering_factor', 'asymmetry_factor']
    _child_classes = dict(
        forward_scattering_factor=forward_scattering_factor,
        asymmetry_factor=asymmetry_factor,
    )
    return_type = 'object'

class scattering_phase_function(Group):
    """
    'scattering_phase_function' child.
    """
    _version = '231'
    fluent_name = 'scattering-phase-function'
    _python_name = 'scattering_phase_function'
    child_names = ['option', 'value', 'delta_eddington', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        delta_eddington=delta_eddington,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class refractive_index(Group):
    """
    'refractive_index' child.
    """
    _version = '231'
    fluent_name = 'refractive-index'
    _python_name = 'refractive_index'
    child_names = ['option', 'value', 'gray_band_coefficients']
    _child_classes = dict(
        option=option_10,
        value=value,
        gray_band_coefficients=gray_band_coefficients,
    )
    return_type = 'object'

class formation_entropy(Group):
    """
    'formation_entropy' child.
    """
    _version = '231'
    fluent_name = 'formation-entropy'
    _python_name = 'formation_entropy'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class formation_enthalpy(Group):
    """
    'formation_enthalpy' child.
    """
    _version = '231'
    fluent_name = 'formation-enthalpy'
    _python_name = 'formation_enthalpy'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class reference_temperature(Group):
    """
    'reference_temperature' child.
    """
    _version = '231'
    fluent_name = 'reference-temperature'
    _python_name = 'reference_temperature'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class lennard_jones_length(Group):
    """
    'lennard_jones_length' child.
    """
    _version = '231'
    fluent_name = 'lennard-jones-length'
    _python_name = 'lennard_jones_length'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class lennard_jones_energy(Group):
    """
    'lennard_jones_energy' child.
    """
    _version = '231'
    fluent_name = 'lennard-jones-energy'
    _python_name = 'lennard_jones_energy'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class thermal_accom_coefficient(Group):
    """
    'thermal_accom_coefficient' child.
    """
    _version = '231'
    fluent_name = 'thermal-accom-coefficient'
    _python_name = 'thermal_accom_coefficient'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class velocity_accom_coefficient(Group):
    """
    'velocity_accom_coefficient' child.
    """
    _version = '231'
    fluent_name = 'velocity-accom-coefficient'
    _python_name = 'velocity_accom_coefficient'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class degrees_of_freedom(Group):
    """
    'degrees_of_freedom' child.
    """
    _version = '231'
    fluent_name = 'degrees-of-freedom'
    _python_name = 'degrees_of_freedom'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class matrix_component(RealList):
    """
    'matrix_component' child.
    """
    _version = '231'
    fluent_name = 'matrix-component'
    _python_name = 'matrix_component'
    return_type = 'object'

class diffusivity(Group):
    """
    'diffusivity' child.
    """
    _version = '231'
    fluent_name = 'diffusivity'
    _python_name = 'diffusivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class anisotropic(Group):
    """
    'anisotropic' child.
    """
    _version = '231'
    fluent_name = 'anisotropic'
    _python_name = 'anisotropic'
    child_names = ['matrix_component', 'diffusivity']
    _child_classes = dict(
        matrix_component=matrix_component,
        diffusivity=diffusivity,
    )
    return_type = 'object'

class direction_0(RealList):
    """
    'direction_0' child.
    """
    _version = '231'
    fluent_name = 'direction-0'
    _python_name = 'direction_0'
    return_type = 'object'

class direction_1(RealList):
    """
    'direction_1' child.
    """
    _version = '231'
    fluent_name = 'direction-1'
    _python_name = 'direction_1'
    return_type = 'object'

class diffusivity_0(Group):
    """
    'diffusivity_0' child.
    """
    _version = '231'
    fluent_name = 'diffusivity-0'
    _python_name = 'diffusivity_0'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class diffusivity_1(Group):
    """
    'diffusivity_1' child.
    """
    _version = '231'
    fluent_name = 'diffusivity-1'
    _python_name = 'diffusivity_1'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class diffusivity_2(Group):
    """
    'diffusivity_2' child.
    """
    _version = '231'
    fluent_name = 'diffusivity-2'
    _python_name = 'diffusivity_2'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class orthotropic(Group):
    """
    'orthotropic' child.
    """
    _version = '231'
    fluent_name = 'orthotropic'
    _python_name = 'orthotropic'
    child_names = ['direction_0', 'direction_1', 'diffusivity_0', 'diffusivity_1', 'diffusivity_2']
    _child_classes = dict(
        direction_0=direction_0,
        direction_1=direction_1,
        diffusivity_0=diffusivity_0,
        diffusivity_1=diffusivity_1,
        diffusivity_2=diffusivity_2,
    )
    return_type = 'object'

class axis_origin(RealList):
    """
    'axis_origin' child.
    """
    _version = '231'
    fluent_name = 'axis-origin'
    _python_name = 'axis_origin'
    return_type = 'object'

class axis_direction(RealList):
    """
    'axis_direction' child.
    """
    _version = '231'
    fluent_name = 'axis-direction'
    _python_name = 'axis_direction'
    return_type = 'object'

class radial_diffusivity(Group):
    """
    'radial_diffusivity' child.
    """
    _version = '231'
    fluent_name = 'radial-diffusivity'
    _python_name = 'radial_diffusivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class tangential_diffusivity(Group):
    """
    'tangential_diffusivity' child.
    """
    _version = '231'
    fluent_name = 'tangential-diffusivity'
    _python_name = 'tangential_diffusivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class axial_diffusivity(Group):
    """
    'axial_diffusivity' child.
    """
    _version = '231'
    fluent_name = 'axial-diffusivity'
    _python_name = 'axial_diffusivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class cyl_orthotropic(Group):
    """
    'cyl_orthotropic' child.
    """
    _version = '231'
    fluent_name = 'cyl-orthotropic'
    _python_name = 'cyl_orthotropic'
    child_names = ['axis_origin', 'axis_direction', 'radial_diffusivity', 'tangential_diffusivity', 'axial_diffusivity']
    _child_classes = dict(
        axis_origin=axis_origin,
        axis_direction=axis_direction,
        radial_diffusivity=radial_diffusivity,
        tangential_diffusivity=tangential_diffusivity,
        axial_diffusivity=axial_diffusivity,
    )
    return_type = 'object'

class uds_diffusivities_child(Group):
    """
    'child_object_type' of uds_diffusivities.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'uds_diffusivities_child'
    child_names = ['option', 'value', 'expression', 'polynomial', 'user_defined_function', 'anisotropic', 'orthotropic', 'cyl_orthotropic']
    _child_classes = dict(
        option=option_10,
        value=value,
        expression=expression,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
        anisotropic=anisotropic,
        orthotropic=orthotropic,
        cyl_orthotropic=cyl_orthotropic,
    )
    return_type = 'object'

class uds_diffusivities(NamedObject[uds_diffusivities_child], _NonCreatableNamedObjectMixin[uds_diffusivities_child]):
    """
    'uds_diffusivities' child.
    """
    _version = '231'
    fluent_name = 'uds-diffusivities'
    _python_name = 'uds_diffusivities'
    child_object_type = uds_diffusivities_child
    return_type = 'object'

class uds_diffusivity(Group):
    """
    'uds_diffusivity' child.
    """
    _version = '231'
    fluent_name = 'uds-diffusivity'
    _python_name = 'uds_diffusivity'
    child_names = ['option', 'uds_diffusivities', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        uds_diffusivities=uds_diffusivities,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class electric_conductivity(Group):
    """
    'electric_conductivity' child.
    """
    _version = '231'
    fluent_name = 'electric-conductivity'
    _python_name = 'electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class dual_electric_conductivity(Group):
    """
    'dual_electric_conductivity' child.
    """
    _version = '231'
    fluent_name = 'dual-electric-conductivity'
    _python_name = 'dual_electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class lithium_diffusivity(Group):
    """
    'lithium_diffusivity' child.
    """
    _version = '231'
    fluent_name = 'lithium-diffusivity'
    _python_name = 'lithium_diffusivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class magnetic_permeability(Group):
    """
    'magnetic_permeability' child.
    """
    _version = '231'
    fluent_name = 'magnetic-permeability'
    _python_name = 'magnetic_permeability'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class speed_of_sound(Group):
    """
    'speed_of_sound' child.
    """
    _version = '231'
    fluent_name = 'speed-of-sound'
    _python_name = 'speed_of_sound'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class critical_temperature(Group):
    """
    'critical_temperature' child.
    """
    _version = '231'
    fluent_name = 'critical-temperature'
    _python_name = 'critical_temperature'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class critical_pressure(Group):
    """
    'critical_pressure' child.
    """
    _version = '231'
    fluent_name = 'critical-pressure'
    _python_name = 'critical_pressure'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class critical_volume(Group):
    """
    'critical_volume' child.
    """
    _version = '231'
    fluent_name = 'critical-volume'
    _python_name = 'critical_volume'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class acentric_factor(Group):
    """
    'acentric_factor' child.
    """
    _version = '231'
    fluent_name = 'acentric-factor'
    _python_name = 'acentric_factor'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class latent_heat(Group):
    """
    'latent_heat' child.
    """
    _version = '231'
    fluent_name = 'latent-heat'
    _python_name = 'latent_heat'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class saturation_pressure(Group):
    """
    'saturation_pressure' child.
    """
    _version = '231'
    fluent_name = 'saturation-pressure'
    _python_name = 'saturation_pressure'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class vaporization_temperature(Group):
    """
    'vaporization_temperature' child.
    """
    _version = '231'
    fluent_name = 'vaporization-temperature'
    _python_name = 'vaporization_temperature'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class charge(Group):
    """
    'charge' child.
    """
    _version = '231'
    fluent_name = 'charge'
    _python_name = 'charge'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class fluid_child(Group):
    """
    'child_object_type' of fluid.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'fluid_child'
    child_names = ['density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'molecular_weight', 'premix_laminar_speed', 'premix_critical_strain', 'premix_unburnt_temp', 'premix_unburnt_density', 'premix_heat_trans_coeff', 'premix_heat_of_comb', 'premix_unburnt_fuel_mf', 'premix_adiabatic_temp', 'therm_exp_coeff', 'characteristic_vibrational_temperature', 'absorption_coefficient', 'melting_heat', 'tsolidus', 'tliqidus', 'liquidus_slope', 'partition_coeff', 'eutectic_mf', 'solid_diffusion', 'solut_exp_coeff', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'formation_entropy', 'formation_enthalpy', 'reference_temperature', 'lennard_jones_length', 'lennard_jones_energy', 'thermal_accom_coefficient', 'velocity_accom_coefficient', 'degrees_of_freedom', 'uds_diffusivity', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'magnetic_permeability', 'speed_of_sound', 'critical_temperature', 'critical_pressure', 'critical_volume', 'acentric_factor', 'latent_heat', 'saturation_pressure', 'vaporization_temperature', 'charge']
    _child_classes = dict(
        density=density,
        viscosity=viscosity,
        specific_heat=specific_heat,
        thermal_conductivity=thermal_conductivity,
        molecular_weight=molecular_weight,
        premix_laminar_speed=premix_laminar_speed,
        premix_critical_strain=premix_critical_strain,
        premix_unburnt_temp=premix_unburnt_temp,
        premix_unburnt_density=premix_unburnt_density,
        premix_heat_trans_coeff=premix_heat_trans_coeff,
        premix_heat_of_comb=premix_heat_of_comb,
        premix_unburnt_fuel_mf=premix_unburnt_fuel_mf,
        premix_adiabatic_temp=premix_adiabatic_temp,
        therm_exp_coeff=therm_exp_coeff,
        characteristic_vibrational_temperature=characteristic_vibrational_temperature,
        absorption_coefficient=absorption_coefficient,
        melting_heat=melting_heat,
        tsolidus=tsolidus,
        tliqidus=tliqidus,
        liquidus_slope=liquidus_slope,
        partition_coeff=partition_coeff,
        eutectic_mf=eutectic_mf,
        solid_diffusion=solid_diffusion,
        solut_exp_coeff=solut_exp_coeff,
        scattering_coefficient=scattering_coefficient,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        formation_entropy=formation_entropy,
        formation_enthalpy=formation_enthalpy,
        reference_temperature=reference_temperature,
        lennard_jones_length=lennard_jones_length,
        lennard_jones_energy=lennard_jones_energy,
        thermal_accom_coefficient=thermal_accom_coefficient,
        velocity_accom_coefficient=velocity_accom_coefficient,
        degrees_of_freedom=degrees_of_freedom,
        uds_diffusivity=uds_diffusivity,
        electric_conductivity=electric_conductivity,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        magnetic_permeability=magnetic_permeability,
        speed_of_sound=speed_of_sound,
        critical_temperature=critical_temperature,
        critical_pressure=critical_pressure,
        critical_volume=critical_volume,
        acentric_factor=acentric_factor,
        latent_heat=latent_heat,
        saturation_pressure=saturation_pressure,
        vaporization_temperature=vaporization_temperature,
        charge=charge,
    )
    return_type = 'object'

class fluid(NamedObject[fluid_child], CreatableNamedObjectMixinOld[fluid_child]):
    """
    'fluid' child.
    """
    _version = '231'
    fluent_name = 'fluid'
    _python_name = 'fluid'
    child_object_type = fluid_child
    return_type = 'object'

class density_1(Group):
    """
    'density' child.
    """
    _version = '231'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'user_defined_function', 'value']
    _child_classes = dict(
        option=option_10,
        user_defined_function=user_defined_function,
        value=value,
    )
    return_type = 'object'

class specific_heat_1(Group):
    """
    'specific_heat' child.
    """
    _version = '231'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'user_defined_function', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'nasa_9_piecewise_polynomial']
    _child_classes = dict(
        option=option_10,
        user_defined_function=user_defined_function,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        nasa_9_piecewise_polynomial=nasa_9_piecewise_polynomial,
    )
    return_type = 'object'

class planar_conductivity(Group):
    """
    'planar_conductivity' child.
    """
    _version = '231'
    fluent_name = 'planar-conductivity'
    _python_name = 'planar_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class transverse_conductivity(Group):
    """
    'transverse_conductivity' child.
    """
    _version = '231'
    fluent_name = 'transverse-conductivity'
    _python_name = 'transverse_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class biaxial(Group):
    """
    'biaxial' child.
    """
    _version = '231'
    fluent_name = 'biaxial'
    _python_name = 'biaxial'
    child_names = ['planar_conductivity', 'transverse_conductivity']
    _child_classes = dict(
        planar_conductivity=planar_conductivity,
        transverse_conductivity=transverse_conductivity,
    )
    return_type = 'object'

class radial_conductivity(Group):
    """
    'radial_conductivity' child.
    """
    _version = '231'
    fluent_name = 'radial-conductivity'
    _python_name = 'radial_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class tangential_conductivity(Group):
    """
    'tangential_conductivity' child.
    """
    _version = '231'
    fluent_name = 'tangential-conductivity'
    _python_name = 'tangential_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class axial_conductivity(Group):
    """
    'axial_conductivity' child.
    """
    _version = '231'
    fluent_name = 'axial-conductivity'
    _python_name = 'axial_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class cyl_orthotropic_1(Group):
    """
    'cyl_orthotropic' child.
    """
    _version = '231'
    fluent_name = 'cyl-orthotropic'
    _python_name = 'cyl_orthotropic'
    child_names = ['axis_origin', 'axis_direction', 'radial_conductivity', 'tangential_conductivity', 'axial_conductivity']
    _child_classes = dict(
        axis_origin=axis_origin,
        axis_direction=axis_direction,
        radial_conductivity=radial_conductivity,
        tangential_conductivity=tangential_conductivity,
        axial_conductivity=axial_conductivity,
    )
    return_type = 'object'

class conductivity_0(Group):
    """
    'conductivity_0' child.
    """
    _version = '231'
    fluent_name = 'conductivity-0'
    _python_name = 'conductivity_0'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class conductivity_1(Group):
    """
    'conductivity_1' child.
    """
    _version = '231'
    fluent_name = 'conductivity-1'
    _python_name = 'conductivity_1'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class conductivity_2(Group):
    """
    'conductivity_2' child.
    """
    _version = '231'
    fluent_name = 'conductivity-2'
    _python_name = 'conductivity_2'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class orthotropic_1(Group):
    """
    'orthotropic' child.
    """
    _version = '231'
    fluent_name = 'orthotropic'
    _python_name = 'orthotropic'
    child_names = ['direction_0', 'direction_1', 'conductivity_0', 'conductivity_1', 'conductivity_2']
    _child_classes = dict(
        direction_0=direction_0,
        direction_1=direction_1,
        conductivity_0=conductivity_0,
        conductivity_1=conductivity_1,
        conductivity_2=conductivity_2,
    )
    return_type = 'object'

class principal_axes(RealList):
    """
    'principal_axes' child.
    """
    _version = '231'
    fluent_name = 'principal-axes'
    _python_name = 'principal_axes'
    return_type = 'object'

class principal_values(RealList):
    """
    'principal_values' child.
    """
    _version = '231'
    fluent_name = 'principal-values'
    _python_name = 'principal_values'
    return_type = 'object'

class conductivity(Group):
    """
    'conductivity' child.
    """
    _version = '231'
    fluent_name = 'conductivity'
    _python_name = 'conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class principal_axes_values(Group):
    """
    'principal_axes_values' child.
    """
    _version = '231'
    fluent_name = 'principal-axes-values'
    _python_name = 'principal_axes_values'
    child_names = ['principal_axes', 'principal_values', 'conductivity']
    _child_classes = dict(
        principal_axes=principal_axes,
        principal_values=principal_values,
        conductivity=conductivity,
    )
    return_type = 'object'

class anisotropic_1(Group):
    """
    'anisotropic' child.
    """
    _version = '231'
    fluent_name = 'anisotropic'
    _python_name = 'anisotropic'
    child_names = ['matrix_component', 'conductivity']
    _child_classes = dict(
        matrix_component=matrix_component,
        conductivity=conductivity,
    )
    return_type = 'object'

class thermal_conductivity_1(Group):
    """
    'thermal_conductivity' child.
    """
    _version = '231'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'biaxial', 'cyl_orthotropic', 'orthotropic', 'principal_axes_values', 'anisotropic', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        biaxial=biaxial,
        cyl_orthotropic=cyl_orthotropic_1,
        orthotropic=orthotropic_1,
        principal_axes_values=principal_axes_values,
        anisotropic=anisotropic_1,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class atomic_number(Group):
    """
    'atomic_number' child.
    """
    _version = '231'
    fluent_name = 'atomic-number'
    _python_name = 'atomic_number'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class scattering_coefficient_1(Group):
    """
    'scattering_coefficient' child.
    """
    _version = '231'
    fluent_name = 'scattering-coefficient'
    _python_name = 'scattering_coefficient'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'gray_band_coefficients', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        gray_band_coefficients=gray_band_coefficients,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class uds_diffusivity_1(Group):
    """
    'uds_diffusivity' child.
    """
    _version = '231'
    fluent_name = 'uds-diffusivity'
    _python_name = 'uds_diffusivity'
    child_names = ['option', 'value', 'uds_diffusivities', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        uds_diffusivities=uds_diffusivities,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class youngs_modulus_0(Group):
    """
    'youngs_modulus_0' child.
    """
    _version = '231'
    fluent_name = 'youngs-modulus-0'
    _python_name = 'youngs_modulus_0'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class youngs_modulus_1(Group):
    """
    'youngs_modulus_1' child.
    """
    _version = '231'
    fluent_name = 'youngs-modulus-1'
    _python_name = 'youngs_modulus_1'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class youngs_modulus_2(Group):
    """
    'youngs_modulus_2' child.
    """
    _version = '231'
    fluent_name = 'youngs-modulus-2'
    _python_name = 'youngs_modulus_2'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class shear_modulus_01(Group):
    """
    'shear_modulus_01' child.
    """
    _version = '231'
    fluent_name = 'shear-modulus-01'
    _python_name = 'shear_modulus_01'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class shear_modulus_12(Group):
    """
    'shear_modulus_12' child.
    """
    _version = '231'
    fluent_name = 'shear-modulus-12'
    _python_name = 'shear_modulus_12'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class shear_modulus_02(Group):
    """
    'shear_modulus_02' child.
    """
    _version = '231'
    fluent_name = 'shear-modulus-02'
    _python_name = 'shear_modulus_02'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class orthotropic_structure_ym(Group):
    """
    'orthotropic_structure_ym' child.
    """
    _version = '231'
    fluent_name = 'orthotropic-structure-ym'
    _python_name = 'orthotropic_structure_ym'
    child_names = ['direction_0', 'direction_1', 'youngs_modulus_0', 'youngs_modulus_1', 'youngs_modulus_2', 'shear_modulus_01', 'shear_modulus_12', 'shear_modulus_02']
    _child_classes = dict(
        direction_0=direction_0,
        direction_1=direction_1,
        youngs_modulus_0=youngs_modulus_0,
        youngs_modulus_1=youngs_modulus_1,
        youngs_modulus_2=youngs_modulus_2,
        shear_modulus_01=shear_modulus_01,
        shear_modulus_12=shear_modulus_12,
        shear_modulus_02=shear_modulus_02,
    )
    return_type = 'object'

class struct_youngs_modulus(Group):
    """
    'struct_youngs_modulus' child.
    """
    _version = '231'
    fluent_name = 'struct-youngs-modulus'
    _python_name = 'struct_youngs_modulus'
    child_names = ['option', 'value', 'orthotropic_structure_ym']
    _child_classes = dict(
        option=option_10,
        value=value,
        orthotropic_structure_ym=orthotropic_structure_ym,
    )
    return_type = 'object'

class poisson_ratio_01(Group):
    """
    'poisson_ratio_01' child.
    """
    _version = '231'
    fluent_name = 'poisson-ratio-01'
    _python_name = 'poisson_ratio_01'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class poisson_ratio_12(Group):
    """
    'poisson_ratio_12' child.
    """
    _version = '231'
    fluent_name = 'poisson-ratio-12'
    _python_name = 'poisson_ratio_12'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class poisson_ratio_02(Group):
    """
    'poisson_ratio_02' child.
    """
    _version = '231'
    fluent_name = 'poisson-ratio-02'
    _python_name = 'poisson_ratio_02'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class orthotropic_structure_nu(Group):
    """
    'orthotropic_structure_nu' child.
    """
    _version = '231'
    fluent_name = 'orthotropic-structure-nu'
    _python_name = 'orthotropic_structure_nu'
    child_names = ['poisson_ratio_01', 'poisson_ratio_12', 'poisson_ratio_02']
    _child_classes = dict(
        poisson_ratio_01=poisson_ratio_01,
        poisson_ratio_12=poisson_ratio_12,
        poisson_ratio_02=poisson_ratio_02,
    )
    return_type = 'object'

class struct_poisson_ratio(Group):
    """
    'struct_poisson_ratio' child.
    """
    _version = '231'
    fluent_name = 'struct-poisson-ratio'
    _python_name = 'struct_poisson_ratio'
    child_names = ['option', 'value', 'orthotropic_structure_nu']
    _child_classes = dict(
        option=option_10,
        value=value,
        orthotropic_structure_nu=orthotropic_structure_nu,
    )
    return_type = 'object'

class struct_start_temperature(Group):
    """
    'struct_start_temperature' child.
    """
    _version = '231'
    fluent_name = 'struct-start-temperature'
    _python_name = 'struct_start_temperature'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class thermal_expansion_0(Group):
    """
    'thermal_expansion_0' child.
    """
    _version = '231'
    fluent_name = 'thermal-expansion-0'
    _python_name = 'thermal_expansion_0'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class thermal_expansion_1(Group):
    """
    'thermal_expansion_1' child.
    """
    _version = '231'
    fluent_name = 'thermal-expansion-1'
    _python_name = 'thermal_expansion_1'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class thermal_expansion_2(Group):
    """
    'thermal_expansion_2' child.
    """
    _version = '231'
    fluent_name = 'thermal-expansion-2'
    _python_name = 'thermal_expansion_2'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class orthotropic_structure_te(Group):
    """
    'orthotropic_structure_te' child.
    """
    _version = '231'
    fluent_name = 'orthotropic-structure-te'
    _python_name = 'orthotropic_structure_te'
    child_names = ['thermal_expansion_0', 'thermal_expansion_1', 'thermal_expansion_2']
    _child_classes = dict(
        thermal_expansion_0=thermal_expansion_0,
        thermal_expansion_1=thermal_expansion_1,
        thermal_expansion_2=thermal_expansion_2,
    )
    return_type = 'object'

class struct_thermal_expansion(Group):
    """
    'struct_thermal_expansion' child.
    """
    _version = '231'
    fluent_name = 'struct-thermal-expansion'
    _python_name = 'struct_thermal_expansion'
    child_names = ['option', 'value', 'orthotropic_structure_te']
    _child_classes = dict(
        option=option_10,
        value=value,
        orthotropic_structure_te=orthotropic_structure_te,
    )
    return_type = 'object'

class struct_damping_alpha(Group):
    """
    'struct_damping_alpha' child.
    """
    _version = '231'
    fluent_name = 'struct-damping-alpha'
    _python_name = 'struct_damping_alpha'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class struct_damping_beta(Group):
    """
    'struct_damping_beta' child.
    """
    _version = '231'
    fluent_name = 'struct-damping-beta'
    _python_name = 'struct_damping_beta'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class solid_child(Group):
    """
    'child_object_type' of solid.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'solid_child'
    child_names = ['density', 'specific_heat', 'thermal_conductivity', 'atomic_number', 'absorption_coefficient', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'uds_diffusivity', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'magnetic_permeability', 'struct_youngs_modulus', 'struct_poisson_ratio', 'struct_start_temperature', 'struct_thermal_expansion', 'struct_damping_alpha', 'struct_damping_beta']
    _child_classes = dict(
        density=density_1,
        specific_heat=specific_heat_1,
        thermal_conductivity=thermal_conductivity_1,
        atomic_number=atomic_number,
        absorption_coefficient=absorption_coefficient,
        scattering_coefficient=scattering_coefficient_1,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        uds_diffusivity=uds_diffusivity_1,
        electric_conductivity=electric_conductivity,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        magnetic_permeability=magnetic_permeability,
        struct_youngs_modulus=struct_youngs_modulus,
        struct_poisson_ratio=struct_poisson_ratio,
        struct_start_temperature=struct_start_temperature,
        struct_thermal_expansion=struct_thermal_expansion,
        struct_damping_alpha=struct_damping_alpha,
        struct_damping_beta=struct_damping_beta,
    )
    return_type = 'object'

class solid(NamedObject[solid_child], CreatableNamedObjectMixinOld[solid_child]):
    """
    'solid' child.
    """
    _version = '231'
    fluent_name = 'solid'
    _python_name = 'solid'
    child_object_type = solid_child
    return_type = 'object'

class composition_type(String, AllowedValuesMixin):
    """
    'composition_type' child.
    """
    _version = '231'
    fluent_name = 'composition-type'
    _python_name = 'composition_type'
    return_type = 'object'

class species_fractions(RealList):
    """
    'species_fractions' child.
    """
    _version = '231'
    fluent_name = 'species-fractions'
    _python_name = 'species_fractions'
    return_type = 'object'

class real_gas_nist_mixture(Group):
    """
    'real_gas_nist_mixture' child.
    """
    _version = '231'
    fluent_name = 'real-gas-nist-mixture'
    _python_name = 'real_gas_nist_mixture'
    child_names = ['lookup_table', 'composition_type', 'species_fractions', 'pressure_points', 'pressure_minimum', 'pressure_maximum', 'temperature_points', 'temperature_minimum', 'temperature_maximum']
    _child_classes = dict(
        lookup_table=lookup_table,
        composition_type=composition_type,
        species_fractions=species_fractions,
        pressure_points=pressure_points,
        pressure_minimum=pressure_minimum,
        pressure_maximum=pressure_maximum,
        temperature_points=temperature_points,
        temperature_minimum=temperature_minimum,
        temperature_maximum=temperature_maximum,
    )
    return_type = 'object'

class density_2(Group):
    """
    'density' child.
    """
    _version = '231'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'real_gas_nist_mixture', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        real_gas_nist_mixture=real_gas_nist_mixture,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class viscosity_1(Group):
    """
    'viscosity' child.
    """
    _version = '231'
    fluent_name = 'viscosity'
    _python_name = 'viscosity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'power_law', 'sutherland', 'user_defined_function', 'real_gas_nist_mixture']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        power_law=power_law,
        sutherland=sutherland,
        user_defined_function=user_defined_function,
        real_gas_nist_mixture=real_gas_nist_mixture,
    )
    return_type = 'object'

class specific_heat_2(Group):
    """
    'specific_heat' child.
    """
    _version = '231'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'nasa_9_piecewise_polynomial', 'real_gas_nist_mixture', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        nasa_9_piecewise_polynomial=nasa_9_piecewise_polynomial,
        real_gas_nist_mixture=real_gas_nist_mixture,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class thermal_conductivity_2(Group):
    """
    'thermal_conductivity' child.
    """
    _version = '231'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function', 'real_gas_nist_mixture']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        user_defined_function=user_defined_function,
        real_gas_nist_mixture=real_gas_nist_mixture,
    )
    return_type = 'object'

class premix_laminar_thickness(Group):
    """
    'premix_laminar_thickness' child.
    """
    _version = '231'
    fluent_name = 'premix-laminar-thickness'
    _python_name = 'premix_laminar_thickness'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class premix_unburnt_temp_1(Group):
    """
    'premix_unburnt_temp' child.
    """
    _version = '231'
    fluent_name = 'premix-unburnt-temp'
    _python_name = 'premix_unburnt_temp'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class premix_unburnt_cp(Group):
    """
    'premix_unburnt_cp' child.
    """
    _version = '231'
    fluent_name = 'premix-unburnt-cp'
    _python_name = 'premix_unburnt_cp'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class premix_unburnt_density_1(Group):
    """
    'premix_unburnt_density' child.
    """
    _version = '231'
    fluent_name = 'premix-unburnt-density'
    _python_name = 'premix_unburnt_density'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class premix_heat_trans_coeff_1(Group):
    """
    'premix_heat_trans_coeff' child.
    """
    _version = '231'
    fluent_name = 'premix-heat-trans-coeff'
    _python_name = 'premix_heat_trans_coeff'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class path_length(Real):
    """
    'path_length' child.
    """
    _version = '231'
    fluent_name = 'path-length'
    _python_name = 'path_length'
    return_type = 'object'

class absorption_coefficient_1(Group):
    """
    'absorption_coefficient' child.
    """
    _version = '231'
    fluent_name = 'absorption-coefficient'
    _python_name = 'absorption_coefficient'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'path_length', 'gray_band_coefficients', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        expression=expression,
        path_length=path_length,
        gray_band_coefficients=gray_band_coefficients,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class lewis_number(Real):
    """
    'lewis_number' child.
    """
    _version = '231'
    fluent_name = 'lewis-number'
    _python_name = 'lewis_number'
    return_type = 'object'

class mass_diffusivity_1(Real):
    """
    'mass_diffusivity' child.
    """
    _version = '231'
    fluent_name = 'mass-diffusivity'
    _python_name = 'mass_diffusivity'
    return_type = 'object'

class species_diffusivity_child(Group):
    """
    'child_object_type' of species_diffusivity.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'species_diffusivity_child'
    child_names = ['option', 'value', 'polynomial']
    _child_classes = dict(
        option=option_10,
        value=value,
        polynomial=polynomial,
    )
    return_type = 'object'

class species_diffusivity(NamedObject[species_diffusivity_child], _NonCreatableNamedObjectMixin[species_diffusivity_child]):
    """
    'species_diffusivity' child.
    """
    _version = '231'
    fluent_name = 'species-diffusivity'
    _python_name = 'species_diffusivity'
    child_object_type = species_diffusivity_child
    return_type = 'object'

class multicomponent_child_child(Group):
    """
    'child_object_type' of child_object_type.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'multicomponent_child_child'
    child_names = ['option', 'value', 'polynomial']
    _child_classes = dict(
        option=option_10,
        value=value,
        polynomial=polynomial,
    )
    return_type = 'object'

class multicomponent_child(NamedObject[multicomponent_child_child], _NonCreatableNamedObjectMixin[multicomponent_child_child]):
    """
    'child_object_type' of multicomponent.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'multicomponent_child'
    child_object_type = multicomponent_child_child
    return_type = 'object'

class multicomponent(NamedObject[multicomponent_child], _NonCreatableNamedObjectMixin[multicomponent_child]):
    """
    'multicomponent' child.
    """
    _version = '231'
    fluent_name = 'multicomponent'
    _python_name = 'multicomponent'
    child_object_type = multicomponent_child
    return_type = 'object'

class mass_diffusivity(Group):
    """
    'mass_diffusivity' child.
    """
    _version = '231'
    fluent_name = 'mass-diffusivity'
    _python_name = 'mass_diffusivity'
    child_names = ['option', 'lewis_number', 'mass_diffusivity', 'species_diffusivity', 'multicomponent', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        lewis_number=lewis_number,
        mass_diffusivity=mass_diffusivity_1,
        species_diffusivity=species_diffusivity,
        multicomponent=multicomponent,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class species(Group):
    """
    'species' child.
    """
    _version = '231'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['option']
    _child_classes = dict(
        option=option_10,
    )
    return_type = 'object'

class reactions(Group):
    """
    'reactions' child.
    """
    _version = '231'
    fluent_name = 'reactions'
    _python_name = 'reactions'
    child_names = ['option']
    _child_classes = dict(
        option=option_10,
    )
    return_type = 'object'

class reaction_mechs(Group):
    """
    'reaction_mechs' child.
    """
    _version = '231'
    fluent_name = 'reaction-mechs'
    _python_name = 'reaction_mechs'
    child_names = ['option']
    _child_classes = dict(
        option=option_10,
    )
    return_type = 'object'

class thermal_diffusivity(Group):
    """
    'thermal_diffusivity' child.
    """
    _version = '231'
    fluent_name = 'thermal-diffusivity'
    _python_name = 'thermal_diffusivity'
    child_names = ['option', 'species_diffusivity', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        species_diffusivity=species_diffusivity,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class tmelt(Group):
    """
    'tmelt' child.
    """
    _version = '231'
    fluent_name = 'tmelt'
    _python_name = 'tmelt'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class eutectic_temp(Group):
    """
    'eutectic_temp' child.
    """
    _version = '231'
    fluent_name = 'eutectic-temp'
    _python_name = 'eutectic_temp'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class diffusion_collision_integral(RealList):
    """
    'diffusion_collision_integral' child.
    """
    _version = '231'
    fluent_name = 'diffusion-collision-integral'
    _python_name = 'diffusion_collision_integral'
    return_type = 'object'

class viscosity_collision_integral(RealList):
    """
    'viscosity_collision_integral' child.
    """
    _version = '231'
    fluent_name = 'viscosity-collision-integral'
    _python_name = 'viscosity_collision_integral'
    return_type = 'object'

class neutral_involved_interaction(Group):
    """
    'neutral_involved_interaction' child.
    """
    _version = '231'
    fluent_name = 'neutral-involved-interaction'
    _python_name = 'neutral_involved_interaction'
    child_names = ['diffusion_collision_integral', 'viscosity_collision_integral']
    _child_classes = dict(
        diffusion_collision_integral=diffusion_collision_integral,
        viscosity_collision_integral=viscosity_collision_integral,
    )
    return_type = 'object'

class charged_particle_interaction(String, AllowedValuesMixin):
    """
    'charged_particle_interaction' child.
    """
    _version = '231'
    fluent_name = 'charged-particle-interaction'
    _python_name = 'charged_particle_interaction'
    return_type = 'object'

class cross_section_multicomponent_child_child(Group):
    """
    'child_object_type' of child_object_type.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'cross_section_multicomponent_child_child'
    child_names = ['option', 'neutral_involved_interaction', 'charged_particle_interaction']
    _child_classes = dict(
        option=option_10,
        neutral_involved_interaction=neutral_involved_interaction,
        charged_particle_interaction=charged_particle_interaction,
    )
    return_type = 'object'

class cross_section_multicomponent_child(NamedObject[cross_section_multicomponent_child_child], _NonCreatableNamedObjectMixin[cross_section_multicomponent_child_child]):
    """
    'child_object_type' of cross_section_multicomponent.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'cross_section_multicomponent_child'
    child_object_type = cross_section_multicomponent_child_child
    return_type = 'object'

class cross_section_multicomponent(NamedObject[cross_section_multicomponent_child], _NonCreatableNamedObjectMixin[cross_section_multicomponent_child]):
    """
    'cross_section_multicomponent' child.
    """
    _version = '231'
    fluent_name = 'cross-section-multicomponent'
    _python_name = 'cross_section_multicomponent'
    child_object_type = cross_section_multicomponent_child
    return_type = 'object'

class collision_cross_section(Group):
    """
    'collision_cross_section' child.
    """
    _version = '231'
    fluent_name = 'collision-cross-section'
    _python_name = 'collision_cross_section'
    child_names = ['option', 'cross_section_multicomponent']
    _child_classes = dict(
        option=option_10,
        cross_section_multicomponent=cross_section_multicomponent,
    )
    return_type = 'object'

class mixture_species_child(Group):
    """
    'child_object_type' of mixture_species.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'mixture_species_child'
    child_names = ['density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'molecular_weight', 'premix_laminar_speed', 'premix_critical_strain', 'premix_unburnt_temp', 'premix_unburnt_density', 'premix_heat_trans_coeff', 'premix_heat_of_comb', 'premix_unburnt_fuel_mf', 'premix_adiabatic_temp', 'therm_exp_coeff', 'characteristic_vibrational_temperature', 'absorption_coefficient', 'melting_heat', 'tsolidus', 'tliqidus', 'liquidus_slope', 'partition_coeff', 'eutectic_mf', 'solid_diffusion', 'solut_exp_coeff', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'formation_entropy', 'formation_enthalpy', 'reference_temperature', 'lennard_jones_length', 'lennard_jones_energy', 'thermal_accom_coefficient', 'velocity_accom_coefficient', 'degrees_of_freedom', 'uds_diffusivity', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'magnetic_permeability', 'speed_of_sound', 'critical_temperature', 'critical_pressure', 'critical_volume', 'acentric_factor', 'latent_heat', 'saturation_pressure', 'vaporization_temperature', 'charge']
    _child_classes = dict(
        density=density,
        viscosity=viscosity,
        specific_heat=specific_heat,
        thermal_conductivity=thermal_conductivity,
        molecular_weight=molecular_weight,
        premix_laminar_speed=premix_laminar_speed,
        premix_critical_strain=premix_critical_strain,
        premix_unburnt_temp=premix_unburnt_temp,
        premix_unburnt_density=premix_unburnt_density,
        premix_heat_trans_coeff=premix_heat_trans_coeff,
        premix_heat_of_comb=premix_heat_of_comb,
        premix_unburnt_fuel_mf=premix_unburnt_fuel_mf,
        premix_adiabatic_temp=premix_adiabatic_temp,
        therm_exp_coeff=therm_exp_coeff,
        characteristic_vibrational_temperature=characteristic_vibrational_temperature,
        absorption_coefficient=absorption_coefficient,
        melting_heat=melting_heat,
        tsolidus=tsolidus,
        tliqidus=tliqidus,
        liquidus_slope=liquidus_slope,
        partition_coeff=partition_coeff,
        eutectic_mf=eutectic_mf,
        solid_diffusion=solid_diffusion,
        solut_exp_coeff=solut_exp_coeff,
        scattering_coefficient=scattering_coefficient,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        formation_entropy=formation_entropy,
        formation_enthalpy=formation_enthalpy,
        reference_temperature=reference_temperature,
        lennard_jones_length=lennard_jones_length,
        lennard_jones_energy=lennard_jones_energy,
        thermal_accom_coefficient=thermal_accom_coefficient,
        velocity_accom_coefficient=velocity_accom_coefficient,
        degrees_of_freedom=degrees_of_freedom,
        uds_diffusivity=uds_diffusivity,
        electric_conductivity=electric_conductivity,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        magnetic_permeability=magnetic_permeability,
        speed_of_sound=speed_of_sound,
        critical_temperature=critical_temperature,
        critical_pressure=critical_pressure,
        critical_volume=critical_volume,
        acentric_factor=acentric_factor,
        latent_heat=latent_heat,
        saturation_pressure=saturation_pressure,
        vaporization_temperature=vaporization_temperature,
        charge=charge,
    )
    return_type = 'object'

class mixture_species(NamedObject[mixture_species_child], _NonCreatableNamedObjectMixin[mixture_species_child]):
    """
    'mixture_species' child.
    """
    _version = '231'
    fluent_name = 'mixture-species'
    _python_name = 'mixture_species'
    child_object_type = mixture_species_child
    return_type = 'object'

class mixture_child(Group):
    """
    'child_object_type' of mixture.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'mixture_child'
    child_names = ['density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'premix_laminar_speed', 'premix_laminar_thickness', 'premix_unburnt_temp', 'premix_unburnt_cp', 'premix_unburnt_density', 'premix_heat_trans_coeff', 'premix_critical_strain', 'therm_exp_coeff', 'absorption_coefficient', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'mass_diffusivity', 'species', 'reactions', 'reaction_mechs', 'uds_diffusivity', 'thermal_diffusivity', 'tmelt', 'melting_heat', 'eutectic_temp', 'speed_of_sound', 'critical_temperature', 'critical_pressure', 'critical_volume', 'acentric_factor', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'collision_cross_section', 'mixture_species']
    _child_classes = dict(
        density=density_2,
        viscosity=viscosity_1,
        specific_heat=specific_heat_2,
        thermal_conductivity=thermal_conductivity_2,
        premix_laminar_speed=premix_laminar_speed,
        premix_laminar_thickness=premix_laminar_thickness,
        premix_unburnt_temp=premix_unburnt_temp_1,
        premix_unburnt_cp=premix_unburnt_cp,
        premix_unburnt_density=premix_unburnt_density_1,
        premix_heat_trans_coeff=premix_heat_trans_coeff_1,
        premix_critical_strain=premix_critical_strain,
        therm_exp_coeff=therm_exp_coeff,
        absorption_coefficient=absorption_coefficient_1,
        scattering_coefficient=scattering_coefficient,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        mass_diffusivity=mass_diffusivity,
        species=species,
        reactions=reactions,
        reaction_mechs=reaction_mechs,
        uds_diffusivity=uds_diffusivity,
        thermal_diffusivity=thermal_diffusivity,
        tmelt=tmelt,
        melting_heat=melting_heat,
        eutectic_temp=eutectic_temp,
        speed_of_sound=speed_of_sound,
        critical_temperature=critical_temperature,
        critical_pressure=critical_pressure,
        critical_volume=critical_volume,
        acentric_factor=acentric_factor,
        electric_conductivity=electric_conductivity,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        collision_cross_section=collision_cross_section,
        mixture_species=mixture_species,
    )
    return_type = 'object'

class mixture(NamedObject[mixture_child], CreatableNamedObjectMixinOld[mixture_child]):
    """
    'mixture' child.
    """
    _version = '231'
    fluent_name = 'mixture'
    _python_name = 'mixture'
    child_object_type = mixture_child
    return_type = 'object'

class density_3(Group):
    """
    'density' child.
    """
    _version = '231'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'compressible_liquid', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        compressible_liquid=compressible_liquid,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class specific_heat_3(Group):
    """
    'specific_heat' child.
    """
    _version = '231'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'nasa_9_piecewise_polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        nasa_9_piecewise_polynomial=nasa_9_piecewise_polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class thermal_conductivity_3(Group):
    """
    'thermal_conductivity' child.
    """
    _version = '231'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class thermophoretic_co(Group):
    """
    'thermophoretic_co' child.
    """
    _version = '231'
    fluent_name = 'thermophoretic-co'
    _python_name = 'thermophoretic_co'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class scattering_factor(Group):
    """
    'scattering_factor' child.
    """
    _version = '231'
    fluent_name = 'scattering-factor'
    _python_name = 'scattering_factor'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class emissivity(Group):
    """
    'emissivity' child.
    """
    _version = '231'
    fluent_name = 'emissivity'
    _python_name = 'emissivity'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class viscosity_2(Group):
    """
    'viscosity' child.
    """
    _version = '231'
    fluent_name = 'viscosity'
    _python_name = 'viscosity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class dpm_surften(Group):
    """
    'dpm_surften' child.
    """
    _version = '231'
    fluent_name = 'dpm-surften'
    _python_name = 'dpm_surften'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class electric_conductivity_1(Group):
    """
    'electric_conductivity' child.
    """
    _version = '231'
    fluent_name = 'electric-conductivity'
    _python_name = 'electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class dual_electric_conductivity_1(Group):
    """
    'dual_electric_conductivity' child.
    """
    _version = '231'
    fluent_name = 'dual-electric-conductivity'
    _python_name = 'dual_electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class charge_density(Group):
    """
    'charge_density' child.
    """
    _version = '231'
    fluent_name = 'charge-density'
    _python_name = 'charge_density'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class inert_particle_child(Group):
    """
    'child_object_type' of inert_particle.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'inert_particle_child'
    child_names = ['density', 'specific_heat', 'thermal_conductivity', 'thermophoretic_co', 'scattering_factor', 'emissivity', 'viscosity', 'dpm_surften', 'electric_conductivity', 'dual_electric_conductivity', 'magnetic_permeability', 'charge_density']
    _child_classes = dict(
        density=density_3,
        specific_heat=specific_heat_3,
        thermal_conductivity=thermal_conductivity_3,
        thermophoretic_co=thermophoretic_co,
        scattering_factor=scattering_factor,
        emissivity=emissivity,
        viscosity=viscosity_2,
        dpm_surften=dpm_surften,
        electric_conductivity=electric_conductivity_1,
        dual_electric_conductivity=dual_electric_conductivity_1,
        magnetic_permeability=magnetic_permeability,
        charge_density=charge_density,
    )
    return_type = 'object'

class inert_particle(NamedObject[inert_particle_child], CreatableNamedObjectMixinOld[inert_particle_child]):
    """
    'inert_particle' child.
    """
    _version = '231'
    fluent_name = 'inert-particle'
    _python_name = 'inert_particle'
    child_object_type = inert_particle_child
    return_type = 'object'

class use_vapor_species_heat_capacity(Boolean):
    """
    'use_vapor_species_heat_capacity' child.
    """
    _version = '231'
    fluent_name = 'use-vapor-species-heat-capacity?'
    _python_name = 'use_vapor_species_heat_capacity'
    return_type = 'object'

class diffusion_controlled(Group):
    """
    'diffusion_controlled' child.
    """
    _version = '231'
    fluent_name = 'diffusion-controlled'
    _python_name = 'diffusion_controlled'
    child_names = ['use_vapor_species_heat_capacity']
    _child_classes = dict(
        use_vapor_species_heat_capacity=use_vapor_species_heat_capacity,
    )
    return_type = 'object'

class variable_lewis_number(Boolean):
    """
    'variable_lewis_number' child.
    """
    _version = '231'
    fluent_name = 'variable-lewis-number?'
    _python_name = 'variable_lewis_number'
    return_type = 'object'

class convection_diffusion_controlled(Group):
    """
    'convection_diffusion_controlled' child.
    """
    _version = '231'
    fluent_name = 'convection-diffusion-controlled'
    _python_name = 'convection_diffusion_controlled'
    child_names = ['variable_lewis_number', 'use_vapor_species_heat_capacity']
    _child_classes = dict(
        variable_lewis_number=variable_lewis_number,
        use_vapor_species_heat_capacity=use_vapor_species_heat_capacity,
    )
    return_type = 'object'

class vaporization_model(Group):
    """
    'vaporization_model' child.
    """
    _version = '231'
    fluent_name = 'vaporization-model'
    _python_name = 'vaporization_model'
    child_names = ['option', 'diffusion_controlled', 'convection_diffusion_controlled']
    _child_classes = dict(
        option=option_10,
        diffusion_controlled=diffusion_controlled,
        convection_diffusion_controlled=convection_diffusion_controlled,
    )
    return_type = 'object'

class pre_exponential_factor(Real):
    """
    'pre_exponential_factor' child.
    """
    _version = '231'
    fluent_name = 'pre-exponential-factor'
    _python_name = 'pre_exponential_factor'
    return_type = 'object'

class single_rate(Group):
    """
    'single_rate' child.
    """
    _version = '231'
    fluent_name = 'single-rate'
    _python_name = 'single_rate'
    child_names = ['pre_exponential_factor', 'activation_energy']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class particle_thermolysis_rate(Group):
    """
    'particle_thermolysis_rate' child.
    """
    _version = '231'
    fluent_name = 'particle-thermolysis-rate'
    _python_name = 'particle_thermolysis_rate'
    child_names = ['pre_exponential_factor', 'activation_energy']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class film_thermolysis_rate(Group):
    """
    'film_thermolysis_rate' child.
    """
    _version = '231'
    fluent_name = 'film-thermolysis-rate'
    _python_name = 'film_thermolysis_rate'
    child_names = ['pre_exponential_factor', 'activation_energy']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class secondary_rate(Group):
    """
    'secondary_rate' child.
    """
    _version = '231'
    fluent_name = 'secondary-rate'
    _python_name = 'secondary_rate'
    child_names = ['particle_thermolysis_rate', 'film_thermolysis_rate']
    _child_classes = dict(
        particle_thermolysis_rate=particle_thermolysis_rate,
        film_thermolysis_rate=film_thermolysis_rate,
    )
    return_type = 'object'

class thermolysis_model(Group):
    """
    'thermolysis_model' child.
    """
    _version = '231'
    fluent_name = 'thermolysis-model'
    _python_name = 'thermolysis_model'
    child_names = ['option', 'single_rate', 'secondary_rate', 'value']
    _child_classes = dict(
        option=option_10,
        single_rate=single_rate,
        secondary_rate=secondary_rate,
        value=value,
    )
    return_type = 'object'

class latent_heat_1(Group):
    """
    'latent_heat' child.
    """
    _version = '231'
    fluent_name = 'latent-heat'
    _python_name = 'latent_heat'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class volatile_fraction(Group):
    """
    'volatile_fraction' child.
    """
    _version = '231'
    fluent_name = 'volatile-fraction'
    _python_name = 'volatile_fraction'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class heat_of_pyrolysis(Group):
    """
    'heat_of_pyrolysis' child.
    """
    _version = '231'
    fluent_name = 'heat-of-pyrolysis'
    _python_name = 'heat_of_pyrolysis'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class averaging_coefficient(Real):
    """
    'averaging_coefficient' child.
    """
    _version = '231'
    fluent_name = 'averaging-coefficient'
    _python_name = 'averaging_coefficient'
    return_type = 'object'

class binary_diffusivity_1(Group):
    """
    'binary_diffusivity' child.
    """
    _version = '231'
    fluent_name = 'binary-diffusivity'
    _python_name = 'binary_diffusivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class film_averaged(Group):
    """
    'film_averaged' child.
    """
    _version = '231'
    fluent_name = 'film-averaged'
    _python_name = 'film_averaged'
    child_names = ['averaging_coefficient', 'binary_diffusivity']
    _child_classes = dict(
        averaging_coefficient=averaging_coefficient,
        binary_diffusivity=binary_diffusivity_1,
    )
    return_type = 'object'

class binary_diffusivity(Group):
    """
    'binary_diffusivity' child.
    """
    _version = '231'
    fluent_name = 'binary-diffusivity'
    _python_name = 'binary_diffusivity'
    child_names = ['option', 'value', 'film_averaged', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        film_averaged=film_averaged,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class diffusivity_reference_pressure(Group):
    """
    'diffusivity_reference_pressure' child.
    """
    _version = '231'
    fluent_name = 'diffusivity-reference-pressure'
    _python_name = 'diffusivity_reference_pressure'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class averaging_coefficient_t(Group):
    """
    'averaging_coefficient_t' child.
    """
    _version = '231'
    fluent_name = 'averaging-coefficient-t'
    _python_name = 'averaging_coefficient_t'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class averaging_coefficient_y(Group):
    """
    'averaging_coefficient_y' child.
    """
    _version = '231'
    fluent_name = 'averaging-coefficient-y'
    _python_name = 'averaging_coefficient_y'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class vapor_pressure(Group):
    """
    'vapor_pressure' child.
    """
    _version = '231'
    fluent_name = 'vapor-pressure'
    _python_name = 'vapor_pressure'
    child_names = ['option', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'value', 'rgp_table', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        value=value,
        rgp_table=rgp_table,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class molecular_weight_1(Group):
    """
    'molecular_weight' child.
    """
    _version = '231'
    fluent_name = 'molecular-weight'
    _python_name = 'molecular_weight'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class boiling_point(Group):
    """
    'boiling_point' child.
    """
    _version = '231'
    fluent_name = 'boiling-point'
    _python_name = 'boiling_point'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class scattering_factor_1(Group):
    """
    'scattering_factor' child.
    """
    _version = '231'
    fluent_name = 'scattering-factor'
    _python_name = 'scattering_factor'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class emissivity_1(Group):
    """
    'emissivity' child.
    """
    _version = '231'
    fluent_name = 'emissivity'
    _python_name = 'emissivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class dpm_surften_1(Group):
    """
    'dpm_surften' child.
    """
    _version = '231'
    fluent_name = 'dpm-surften'
    _python_name = 'dpm_surften'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'rgp_table', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        rgp_table=rgp_table,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class droplet_particle_child(Group):
    """
    'child_object_type' of droplet_particle.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'droplet_particle_child'
    child_names = ['density', 'thermal_conductivity', 'vaporization_model', 'thermolysis_model', 'latent_heat', 'volatile_fraction', 'heat_of_pyrolysis', 'specific_heat', 'binary_diffusivity', 'diffusivity_reference_pressure', 'averaging_coefficient_t', 'averaging_coefficient_y', 'vapor_pressure', 'molecular_weight', 'vaporization_temperature', 'boiling_point', 'thermophoretic_co', 'scattering_factor', 'emissivity', 'viscosity', 'dpm_surften', 'electric_conductivity', 'dual_electric_conductivity', 'magnetic_permeability', 'charge_density']
    _child_classes = dict(
        density=density_3,
        thermal_conductivity=thermal_conductivity_3,
        vaporization_model=vaporization_model,
        thermolysis_model=thermolysis_model,
        latent_heat=latent_heat_1,
        volatile_fraction=volatile_fraction,
        heat_of_pyrolysis=heat_of_pyrolysis,
        specific_heat=specific_heat_3,
        binary_diffusivity=binary_diffusivity,
        diffusivity_reference_pressure=diffusivity_reference_pressure,
        averaging_coefficient_t=averaging_coefficient_t,
        averaging_coefficient_y=averaging_coefficient_y,
        vapor_pressure=vapor_pressure,
        molecular_weight=molecular_weight_1,
        vaporization_temperature=vaporization_temperature,
        boiling_point=boiling_point,
        thermophoretic_co=thermophoretic_co,
        scattering_factor=scattering_factor_1,
        emissivity=emissivity_1,
        viscosity=viscosity_2,
        dpm_surften=dpm_surften_1,
        electric_conductivity=electric_conductivity_1,
        dual_electric_conductivity=dual_electric_conductivity_1,
        magnetic_permeability=magnetic_permeability,
        charge_density=charge_density,
    )
    return_type = 'object'

class droplet_particle(NamedObject[droplet_particle_child], CreatableNamedObjectMixinOld[droplet_particle_child]):
    """
    'droplet_particle' child.
    """
    _version = '231'
    fluent_name = 'droplet-particle'
    _python_name = 'droplet_particle'
    child_object_type = droplet_particle_child
    return_type = 'object'

class density_4(Group):
    """
    'density' child.
    """
    _version = '231'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        piecewise_linear=piecewise_linear,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class combustible_fraction(Group):
    """
    'combustible_fraction' child.
    """
    _version = '231'
    fluent_name = 'combustible-fraction'
    _python_name = 'combustible_fraction'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class swelling_coefficient(Group):
    """
    'swelling_coefficient' child.
    """
    _version = '231'
    fluent_name = 'swelling-coefficient'
    _python_name = 'swelling_coefficient'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        value=value,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class burn_stoichiometry(Group):
    """
    'burn_stoichiometry' child.
    """
    _version = '231'
    fluent_name = 'burn-stoichiometry'
    _python_name = 'burn_stoichiometry'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class burn_hreact(Group):
    """
    'burn_hreact' child.
    """
    _version = '231'
    fluent_name = 'burn-hreact'
    _python_name = 'burn_hreact'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class burn_hreact_fraction(Group):
    """
    'burn_hreact_fraction' child.
    """
    _version = '231'
    fluent_name = 'burn-hreact-fraction'
    _python_name = 'burn_hreact_fraction'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_10,
        value=value,
    )
    return_type = 'object'

class weighting_factor(Real):
    """
    'weighting_factor' child.
    """
    _version = '231'
    fluent_name = 'weighting-factor'
    _python_name = 'weighting_factor'
    return_type = 'object'

class first_rate(Group):
    """
    'first_rate' child.
    """
    _version = '231'
    fluent_name = 'first-rate'
    _python_name = 'first_rate'
    child_names = ['pre_exponential_factor', 'activation_energy', 'weighting_factor']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
        weighting_factor=weighting_factor,
    )
    return_type = 'object'

class second_rate(Group):
    """
    'second_rate' child.
    """
    _version = '231'
    fluent_name = 'second-rate'
    _python_name = 'second_rate'
    child_names = ['pre_exponential_factor', 'activation_energy', 'weighting_factor']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
        weighting_factor=weighting_factor,
    )
    return_type = 'object'

class two_competing_rates(Group):
    """
    'two_competing_rates' child.
    """
    _version = '231'
    fluent_name = 'two-competing-rates'
    _python_name = 'two_competing_rates'
    child_names = ['first_rate', 'second_rate']
    _child_classes = dict(
        first_rate=first_rate,
        second_rate=second_rate,
    )
    return_type = 'object'

class initial_fraction_of_bridges_in_coal_lattice(Real):
    """
    'initial_fraction_of_bridges_in_coal_lattice' child.
    """
    _version = '231'
    fluent_name = 'initial-fraction-of-bridges-in-coal-lattice'
    _python_name = 'initial_fraction_of_bridges_in_coal_lattice'
    return_type = 'object'

class initial_fraction_of_char_bridges(Real):
    """
    'initial_fraction_of_char_bridges' child.
    """
    _version = '231'
    fluent_name = 'initial-fraction-of-char-bridges'
    _python_name = 'initial_fraction_of_char_bridges'
    return_type = 'object'

class lattice_coordination_number(Real):
    """
    'lattice_coordination_number' child.
    """
    _version = '231'
    fluent_name = 'lattice-coordination-number'
    _python_name = 'lattice_coordination_number'
    return_type = 'object'

class cluster_molecular_weight(Real):
    """
    'cluster_molecular_weight' child.
    """
    _version = '231'
    fluent_name = 'cluster-molecular-weight'
    _python_name = 'cluster_molecular_weight'
    return_type = 'object'

class side_chain_molecular_weight(Real):
    """
    'side_chain_molecular_weight' child.
    """
    _version = '231'
    fluent_name = 'side-chain-molecular-weight'
    _python_name = 'side_chain_molecular_weight'
    return_type = 'object'

class cpd_model(Group):
    """
    'cpd_model' child.
    """
    _version = '231'
    fluent_name = 'cpd-model'
    _python_name = 'cpd_model'
    child_names = ['initial_fraction_of_bridges_in_coal_lattice', 'initial_fraction_of_char_bridges', 'lattice_coordination_number', 'cluster_molecular_weight', 'side_chain_molecular_weight']
    _child_classes = dict(
        initial_fraction_of_bridges_in_coal_lattice=initial_fraction_of_bridges_in_coal_lattice,
        initial_fraction_of_char_bridges=initial_fraction_of_char_bridges,
        lattice_coordination_number=lattice_coordination_number,
        cluster_molecular_weight=cluster_molecular_weight,
        side_chain_molecular_weight=side_chain_molecular_weight,
    )
    return_type = 'object'

class devolatilization_model(Group):
    """
    'devolatilization_model' child.
    """
    _version = '231'
    fluent_name = 'devolatilization-model'
    _python_name = 'devolatilization_model'
    child_names = ['option', 'value', 'single_rate', 'two_competing_rates', 'cpd_model']
    _child_classes = dict(
        option=option_10,
        value=value,
        single_rate=single_rate,
        two_competing_rates=two_competing_rates,
        cpd_model=cpd_model,
    )
    return_type = 'object'

class char_intrinsic_reactivity(Real):
    """
    'char_intrinsic_reactivity' child.
    """
    _version = '231'
    fluent_name = 'char-intrinsic-reactivity'
    _python_name = 'char_intrinsic_reactivity'
    return_type = 'object'

class carbon_content_percentage(Real):
    """
    'carbon_content_percentage' child.
    """
    _version = '231'
    fluent_name = 'carbon-content-percentage'
    _python_name = 'carbon_content_percentage'
    return_type = 'object'

class cbk(Group):
    """
    'cbk' child.
    """
    _version = '231'
    fluent_name = 'cbk'
    _python_name = 'cbk'
    child_names = ['option', 'char_intrinsic_reactivity', 'carbon_content_percentage']
    _child_classes = dict(
        option=option_3,
        char_intrinsic_reactivity=char_intrinsic_reactivity,
        carbon_content_percentage=carbon_content_percentage,
    )
    return_type = 'object'

class diffusion_rate_constant(Real):
    """
    'diffusion_rate_constant' child.
    """
    _version = '231'
    fluent_name = 'diffusion-rate-constant'
    _python_name = 'diffusion_rate_constant'
    return_type = 'object'

class kinetics_diffusion_limited(Group):
    """
    'kinetics_diffusion_limited' child.
    """
    _version = '231'
    fluent_name = 'kinetics-diffusion-limited'
    _python_name = 'kinetics_diffusion_limited'
    child_names = ['diffusion_rate_constant', 'pre_exponential_factor', 'activation_energy']
    _child_classes = dict(
        diffusion_rate_constant=diffusion_rate_constant,
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
    )
    return_type = 'object'

class char_porosity(Real):
    """
    'char_porosity' child.
    """
    _version = '231'
    fluent_name = 'char-porosity'
    _python_name = 'char_porosity'
    return_type = 'object'

class mean_pore_radius(Real):
    """
    'mean_pore_radius' child.
    """
    _version = '231'
    fluent_name = 'mean-pore-radius'
    _python_name = 'mean_pore_radius'
    return_type = 'object'

class specific_internal_surface_area(Real):
    """
    'specific_internal_surface_area' child.
    """
    _version = '231'
    fluent_name = 'specific-internal-surface-area'
    _python_name = 'specific_internal_surface_area'
    return_type = 'object'

class tortuosity(Real):
    """
    'tortuosity' child.
    """
    _version = '231'
    fluent_name = 'tortuosity'
    _python_name = 'tortuosity'
    return_type = 'object'

class burning_mode(Real):
    """
    'burning_mode' child.
    """
    _version = '231'
    fluent_name = 'burning-mode'
    _python_name = 'burning_mode'
    return_type = 'object'

class intrinsic_model(Group):
    """
    'intrinsic_model' child.
    """
    _version = '231'
    fluent_name = 'intrinsic-model'
    _python_name = 'intrinsic_model'
    child_names = ['diffusion_rate_constant', 'pre_exponential_factor', 'activation_energy', 'char_porosity', 'mean_pore_radius', 'specific_internal_surface_area', 'tortuosity', 'burning_mode']
    _child_classes = dict(
        diffusion_rate_constant=diffusion_rate_constant,
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy,
        char_porosity=char_porosity,
        mean_pore_radius=mean_pore_radius,
        specific_internal_surface_area=specific_internal_surface_area,
        tortuosity=tortuosity,
        burning_mode=burning_mode,
    )
    return_type = 'object'

class composition_dependent_specific_heat(Boolean):
    """
    'composition_dependent_specific_heat' child.
    """
    _version = '231'
    fluent_name = 'composition-dependent-specific-heat?'
    _python_name = 'composition_dependent_specific_heat'
    return_type = 'object'

class composition_dependent_density(Boolean):
    """
    'composition_dependent_density' child.
    """
    _version = '231'
    fluent_name = 'composition-dependent-density?'
    _python_name = 'composition_dependent_density'
    return_type = 'object'

class multiple_surface_reactions(Group):
    """
    'multiple_surface_reactions' child.
    """
    _version = '231'
    fluent_name = 'multiple-surface-reactions'
    _python_name = 'multiple_surface_reactions'
    child_names = ['composition_dependent_specific_heat', 'composition_dependent_density']
    _child_classes = dict(
        composition_dependent_specific_heat=composition_dependent_specific_heat,
        composition_dependent_density=composition_dependent_density,
    )
    return_type = 'object'

class combustion_model(Group):
    """
    'combustion_model' child.
    """
    _version = '231'
    fluent_name = 'combustion-model'
    _python_name = 'combustion_model'
    child_names = ['option', 'cbk', 'kinetics_diffusion_limited', 'intrinsic_model', 'multiple_surface_reactions']
    _child_classes = dict(
        option=option_10,
        cbk=cbk,
        kinetics_diffusion_limited=kinetics_diffusion_limited,
        intrinsic_model=intrinsic_model,
        multiple_surface_reactions=multiple_surface_reactions,
    )
    return_type = 'object'

class combusting_particle_child(Group):
    """
    'child_object_type' of combusting_particle.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'combusting_particle_child'
    child_names = ['density', 'thermal_conductivity', 'latent_heat', 'volatile_fraction', 'combustible_fraction', 'swelling_coefficient', 'burn_stoichiometry', 'specific_heat', 'binary_diffusivity', 'diffusivity_reference_pressure', 'vaporization_temperature', 'thermophoretic_co', 'burn_hreact', 'burn_hreact_fraction', 'devolatilization_model', 'combustion_model', 'scattering_factor', 'emissivity']
    _child_classes = dict(
        density=density_4,
        thermal_conductivity=thermal_conductivity_3,
        latent_heat=latent_heat_1,
        volatile_fraction=volatile_fraction,
        combustible_fraction=combustible_fraction,
        swelling_coefficient=swelling_coefficient,
        burn_stoichiometry=burn_stoichiometry,
        specific_heat=specific_heat_3,
        binary_diffusivity=binary_diffusivity_1,
        diffusivity_reference_pressure=diffusivity_reference_pressure,
        vaporization_temperature=vaporization_temperature,
        thermophoretic_co=thermophoretic_co,
        burn_hreact=burn_hreact,
        burn_hreact_fraction=burn_hreact_fraction,
        devolatilization_model=devolatilization_model,
        combustion_model=combustion_model,
        scattering_factor=scattering_factor_1,
        emissivity=emissivity_1,
    )
    return_type = 'object'

class combusting_particle(NamedObject[combusting_particle_child], CreatableNamedObjectMixinOld[combusting_particle_child]):
    """
    'combusting_particle' child.
    """
    _version = '231'
    fluent_name = 'combusting-particle'
    _python_name = 'combusting_particle'
    child_object_type = combusting_particle_child
    return_type = 'object'

class density_5(Group):
    """
    'density' child.
    """
    _version = '231'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'compressible_liquid', 'user_defined_function', 'value']
    _child_classes = dict(
        option=option_10,
        compressible_liquid=compressible_liquid,
        user_defined_function=user_defined_function,
        value=value,
    )
    return_type = 'object'

class specific_heat_4(Group):
    """
    'specific_heat' child.
    """
    _version = '231'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'user_defined_function', 'value']
    _child_classes = dict(
        option=option_10,
        user_defined_function=user_defined_function,
        value=value,
    )
    return_type = 'object'

class vp_equilib(Group):
    """
    'vp_equilib' child.
    """
    _version = '231'
    fluent_name = 'vp-equilib'
    _python_name = 'vp_equilib'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_10,
        user_defined_function=user_defined_function,
    )
    return_type = 'object'

class emissivity_2(Group):
    """
    'emissivity' child.
    """
    _version = '231'
    fluent_name = 'emissivity'
    _python_name = 'emissivity'
    child_names = ['option']
    _child_classes = dict(
        option=option_10,
    )
    return_type = 'object'

class scattering_factor_2(Group):
    """
    'scattering_factor' child.
    """
    _version = '231'
    fluent_name = 'scattering-factor'
    _python_name = 'scattering_factor'
    child_names = ['option']
    _child_classes = dict(
        option=option_10,
    )
    return_type = 'object'

class reaction_model(Group):
    """
    'reaction_model' child.
    """
    _version = '231'
    fluent_name = 'reaction-model'
    _python_name = 'reaction_model'
    child_names = ['option']
    _child_classes = dict(
        option=option_10,
    )
    return_type = 'object'

class mixture_species_1_child(Group):
    """
    'child_object_type' of mixture_species.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'mixture_species_child'
    child_names = ['density', 'thermal_conductivity', 'vaporization_model', 'thermolysis_model', 'latent_heat', 'volatile_fraction', 'heat_of_pyrolysis', 'specific_heat', 'binary_diffusivity', 'diffusivity_reference_pressure', 'averaging_coefficient_t', 'averaging_coefficient_y', 'vapor_pressure', 'molecular_weight', 'vaporization_temperature', 'boiling_point', 'thermophoretic_co', 'scattering_factor', 'emissivity', 'viscosity', 'dpm_surften', 'electric_conductivity', 'dual_electric_conductivity', 'magnetic_permeability', 'charge_density']
    _child_classes = dict(
        density=density_3,
        thermal_conductivity=thermal_conductivity_3,
        vaporization_model=vaporization_model,
        thermolysis_model=thermolysis_model,
        latent_heat=latent_heat_1,
        volatile_fraction=volatile_fraction,
        heat_of_pyrolysis=heat_of_pyrolysis,
        specific_heat=specific_heat_3,
        binary_diffusivity=binary_diffusivity,
        diffusivity_reference_pressure=diffusivity_reference_pressure,
        averaging_coefficient_t=averaging_coefficient_t,
        averaging_coefficient_y=averaging_coefficient_y,
        vapor_pressure=vapor_pressure,
        molecular_weight=molecular_weight_1,
        vaporization_temperature=vaporization_temperature,
        boiling_point=boiling_point,
        thermophoretic_co=thermophoretic_co,
        scattering_factor=scattering_factor_1,
        emissivity=emissivity_1,
        viscosity=viscosity_2,
        dpm_surften=dpm_surften_1,
        electric_conductivity=electric_conductivity_1,
        dual_electric_conductivity=dual_electric_conductivity_1,
        magnetic_permeability=magnetic_permeability,
        charge_density=charge_density,
    )
    return_type = 'object'

class mixture_species_1(NamedObject[mixture_species_1_child], _NonCreatableNamedObjectMixin[mixture_species_1_child]):
    """
    'mixture_species' child.
    """
    _version = '231'
    fluent_name = 'mixture-species'
    _python_name = 'mixture_species'
    child_object_type = mixture_species_1_child
    return_type = 'object'

class particle_mixture_child(Group):
    """
    'child_object_type' of particle_mixture.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'particle_mixture_child'
    child_names = ['density', 'specific_heat', 'species', 'vp_equilib', 'thermal_conductivity', 'viscosity', 'dpm_surften', 'emissivity', 'scattering_factor', 'vaporization_model', 'averaging_coefficient_t', 'averaging_coefficient_y', 'thermophoretic_co', 'reaction_model', 'mixture_species']
    _child_classes = dict(
        density=density_5,
        specific_heat=specific_heat_4,
        species=species,
        vp_equilib=vp_equilib,
        thermal_conductivity=thermal_conductivity_3,
        viscosity=viscosity_2,
        dpm_surften=dpm_surften,
        emissivity=emissivity_2,
        scattering_factor=scattering_factor_2,
        vaporization_model=vaporization_model,
        averaging_coefficient_t=averaging_coefficient_t,
        averaging_coefficient_y=averaging_coefficient_y,
        thermophoretic_co=thermophoretic_co,
        reaction_model=reaction_model,
        mixture_species=mixture_species_1,
    )
    return_type = 'object'

class particle_mixture(NamedObject[particle_mixture_child], CreatableNamedObjectMixinOld[particle_mixture_child]):
    """
    'particle_mixture' child.
    """
    _version = '231'
    fluent_name = 'particle-mixture'
    _python_name = 'particle_mixture'
    child_object_type = particle_mixture_child
    return_type = 'object'

class list_materials(Command):
    """
    List all locally-stored materials.
    """
    _version = '231'
    fluent_name = 'list-materials'
    _python_name = 'list_materials'
    return_type = 'object'

class list_properties(Command):
    """
    List the properties of a locally-stored material.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '231'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    argument_names = ['name']
    _child_classes = dict(
        name=name_1,
    )
    return_type = 'object'

class materials(Group):
    """
    'materials' child.
    """
    _version = '231'
    fluent_name = 'materials'
    _python_name = 'materials'
    child_names = ['database', 'fluid', 'solid', 'mixture', 'inert_particle', 'droplet_particle', 'combusting_particle', 'particle_mixture']
    command_names = ['list_materials', 'list_properties']
    _child_classes = dict(
        database=database,
        fluid=fluid,
        solid=solid,
        mixture=mixture,
        inert_particle=inert_particle,
        droplet_particle=droplet_particle,
        combusting_particle=combusting_particle,
        particle_mixture=particle_mixture,
        list_materials=list_materials,
        list_properties=list_properties,
    )
    return_type = 'object'

class material_1(String, AllowedValuesMixin):
    """
    'material' child.
    """
    _version = '231'
    fluent_name = 'material'
    _python_name = 'material'
    return_type = 'object'

class sources(Boolean, AllowedValuesMixin):
    """
    'sources' child.
    """
    _version = '231'
    fluent_name = 'sources?'
    _python_name = 'sources'
    return_type = 'object'

class profile_name(String, AllowedValuesMixin):
    """
    'profile_name' child.
    """
    _version = '231'
    fluent_name = 'profile-name'
    _python_name = 'profile_name'
    return_type = 'object'

class field_name(String, AllowedValuesMixin):
    """
    'field_name' child.
    """
    _version = '231'
    fluent_name = 'field-name'
    _python_name = 'field_name'
    return_type = 'object'

class udf(String, AllowedValuesMixin):
    """
    'udf' child.
    """
    _version = '231'
    fluent_name = 'udf'
    _python_name = 'udf'
    return_type = 'object'

class source_terms_1_child_child(Group):
    """
    'child_object_type' of child_object_type.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'source_terms_child_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class source_terms_1_child(ListObject[source_terms_1_child_child]):
    """
    'child_object_type' of source_terms.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'source_terms_child'
    child_object_type = source_terms_1_child_child
    return_type = 'object'

class source_terms_1(NamedObject[source_terms_1_child], _NonCreatableNamedObjectMixin[source_terms_1_child]):
    """
    'source_terms' child.
    """
    _version = '231'
    fluent_name = 'source-terms'
    _python_name = 'source_terms'
    child_object_type = source_terms_1_child
    return_type = 'object'

class fixed(Boolean, AllowedValuesMixin):
    """
    'fixed' child.
    """
    _version = '231'
    fluent_name = 'fixed?'
    _python_name = 'fixed'
    return_type = 'object'

class cylindrical_fixed_var(Boolean, AllowedValuesMixin):
    """
    'cylindrical_fixed_var' child.
    """
    _version = '231'
    fluent_name = 'cylindrical-fixed-var?'
    _python_name = 'cylindrical_fixed_var'
    return_type = 'object'

class fixes_child(Group):
    """
    'child_object_type' of fixes.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'fixes_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class fixes(NamedObject[fixes_child], _NonCreatableNamedObjectMixin[fixes_child]):
    """
    'fixes' child.
    """
    _version = '231'
    fluent_name = 'fixes'
    _python_name = 'fixes'
    child_object_type = fixes_child
    return_type = 'object'

class motion_spec(String, AllowedValuesMixin):
    """
    'motion_spec' child.
    """
    _version = '231'
    fluent_name = 'motion-spec'
    _python_name = 'motion_spec'
    return_type = 'object'

class relative_to_thread(String, AllowedValuesMixin):
    """
    'relative_to_thread' child.
    """
    _version = '231'
    fluent_name = 'relative-to-thread'
    _python_name = 'relative_to_thread'
    return_type = 'object'

class omega(Group):
    """
    'omega' child.
    """
    _version = '231'
    fluent_name = 'omega'
    _python_name = 'omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class axis_origin_1_child(Group):
    """
    'child_object_type' of axis_origin.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'axis_origin_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class axis_origin_1(ListObject[axis_origin_1_child]):
    """
    'axis_origin' child.
    """
    _version = '231'
    fluent_name = 'axis-origin'
    _python_name = 'axis_origin'
    child_object_type = axis_origin_1_child
    return_type = 'object'

class axis_direction_1_child(Group):
    """
    'child_object_type' of axis_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'axis_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class axis_direction_1(ListObject[axis_direction_1_child]):
    """
    'axis_direction' child.
    """
    _version = '231'
    fluent_name = 'axis-direction'
    _python_name = 'axis_direction'
    child_object_type = axis_direction_1_child
    return_type = 'object'

class udf_zmotion_name(String, AllowedValuesMixin):
    """
    'udf_zmotion_name' child.
    """
    _version = '231'
    fluent_name = 'udf-zmotion-name'
    _python_name = 'udf_zmotion_name'
    return_type = 'object'

class mrf_motion(Boolean, AllowedValuesMixin):
    """
    'mrf_motion' child.
    """
    _version = '231'
    fluent_name = 'mrf-motion?'
    _python_name = 'mrf_motion'
    return_type = 'object'

class mrf_relative_to_thread(String, AllowedValuesMixin):
    """
    'mrf_relative_to_thread' child.
    """
    _version = '231'
    fluent_name = 'mrf-relative-to-thread'
    _python_name = 'mrf_relative_to_thread'
    return_type = 'object'

class mrf_omega(Group):
    """
    'mrf_omega' child.
    """
    _version = '231'
    fluent_name = 'mrf-omega'
    _python_name = 'mrf_omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class reference_frame_velocity_child(Group):
    """
    'child_object_type' of reference_frame_velocity.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'reference_frame_velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class reference_frame_velocity(ListObject[reference_frame_velocity_child]):
    """
    'reference_frame_velocity' child.
    """
    _version = '231'
    fluent_name = 'reference-frame-velocity'
    _python_name = 'reference_frame_velocity'
    child_object_type = reference_frame_velocity_child
    return_type = 'object'

class reference_frame_axis_origin_child(Group):
    """
    'child_object_type' of reference_frame_axis_origin.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'reference_frame_axis_origin_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class reference_frame_axis_origin(ListObject[reference_frame_axis_origin_child]):
    """
    'reference_frame_axis_origin' child.
    """
    _version = '231'
    fluent_name = 'reference-frame-axis-origin'
    _python_name = 'reference_frame_axis_origin'
    child_object_type = reference_frame_axis_origin_child
    return_type = 'object'

class reference_frame_axis_direction_child(Group):
    """
    'child_object_type' of reference_frame_axis_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'reference_frame_axis_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class reference_frame_axis_direction(ListObject[reference_frame_axis_direction_child]):
    """
    'reference_frame_axis_direction' child.
    """
    _version = '231'
    fluent_name = 'reference-frame-axis-direction'
    _python_name = 'reference_frame_axis_direction'
    child_object_type = reference_frame_axis_direction_child
    return_type = 'object'

class mrf_udf_zmotion_name(String, AllowedValuesMixin):
    """
    'mrf_udf_zmotion_name' child.
    """
    _version = '231'
    fluent_name = 'mrf-udf-zmotion-name'
    _python_name = 'mrf_udf_zmotion_name'
    return_type = 'object'

class mgrid_enable_transient(Boolean, AllowedValuesMixin):
    """
    'mgrid_enable_transient' child.
    """
    _version = '231'
    fluent_name = 'mgrid-enable-transient?'
    _python_name = 'mgrid_enable_transient'
    return_type = 'object'

class mgrid_motion(Boolean, AllowedValuesMixin):
    """
    'mgrid_motion' child.
    """
    _version = '231'
    fluent_name = 'mgrid-motion?'
    _python_name = 'mgrid_motion'
    return_type = 'object'

class mgrid_relative_to_thread(String, AllowedValuesMixin):
    """
    'mgrid_relative_to_thread' child.
    """
    _version = '231'
    fluent_name = 'mgrid-relative-to-thread'
    _python_name = 'mgrid_relative_to_thread'
    return_type = 'object'

class mgrid_omega(Group):
    """
    'mgrid_omega' child.
    """
    _version = '231'
    fluent_name = 'mgrid-omega'
    _python_name = 'mgrid_omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class moving_mesh_velocity_child(Group):
    """
    'child_object_type' of moving_mesh_velocity.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'moving_mesh_velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class moving_mesh_velocity(ListObject[moving_mesh_velocity_child]):
    """
    'moving_mesh_velocity' child.
    """
    _version = '231'
    fluent_name = 'moving-mesh-velocity'
    _python_name = 'moving_mesh_velocity'
    child_object_type = moving_mesh_velocity_child
    return_type = 'object'

class moving_mesh_axis_origin_child(Group):
    """
    'child_object_type' of moving_mesh_axis_origin.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'moving_mesh_axis_origin_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class moving_mesh_axis_origin(ListObject[moving_mesh_axis_origin_child]):
    """
    'moving_mesh_axis_origin' child.
    """
    _version = '231'
    fluent_name = 'moving-mesh-axis-origin'
    _python_name = 'moving_mesh_axis_origin'
    child_object_type = moving_mesh_axis_origin_child
    return_type = 'object'

class moving_mesh_axis_direction_child(Group):
    """
    'child_object_type' of moving_mesh_axis_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'moving_mesh_axis_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class moving_mesh_axis_direction(ListObject[moving_mesh_axis_direction_child]):
    """
    'moving_mesh_axis_direction' child.
    """
    _version = '231'
    fluent_name = 'moving-mesh-axis-direction'
    _python_name = 'moving_mesh_axis_direction'
    child_object_type = moving_mesh_axis_direction_child
    return_type = 'object'

class mgrid_udf_zmotion_name(String, AllowedValuesMixin):
    """
    'mgrid_udf_zmotion_name' child.
    """
    _version = '231'
    fluent_name = 'mgrid-udf-zmotion-name'
    _python_name = 'mgrid_udf_zmotion_name'
    return_type = 'object'

class solid_motion(Boolean, AllowedValuesMixin):
    """
    'solid_motion' child.
    """
    _version = '231'
    fluent_name = 'solid-motion?'
    _python_name = 'solid_motion'
    return_type = 'object'

class solid_relative_to_thread(String, AllowedValuesMixin):
    """
    'solid_relative_to_thread' child.
    """
    _version = '231'
    fluent_name = 'solid-relative-to-thread'
    _python_name = 'solid_relative_to_thread'
    return_type = 'object'

class solid_omega(Group):
    """
    'solid_omega' child.
    """
    _version = '231'
    fluent_name = 'solid-omega'
    _python_name = 'solid_omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class solid_motion_velocity_child(Group):
    """
    'child_object_type' of solid_motion_velocity.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'solid_motion_velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class solid_motion_velocity(ListObject[solid_motion_velocity_child]):
    """
    'solid_motion_velocity' child.
    """
    _version = '231'
    fluent_name = 'solid-motion-velocity'
    _python_name = 'solid_motion_velocity'
    child_object_type = solid_motion_velocity_child
    return_type = 'object'

class solid_motion_axis_origin_child(Group):
    """
    'child_object_type' of solid_motion_axis_origin.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'solid_motion_axis_origin_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class solid_motion_axis_origin(ListObject[solid_motion_axis_origin_child]):
    """
    'solid_motion_axis_origin' child.
    """
    _version = '231'
    fluent_name = 'solid-motion-axis-origin'
    _python_name = 'solid_motion_axis_origin'
    child_object_type = solid_motion_axis_origin_child
    return_type = 'object'

class solid_motion_axis_direction_child(Group):
    """
    'child_object_type' of solid_motion_axis_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'solid_motion_axis_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class solid_motion_axis_direction(ListObject[solid_motion_axis_direction_child]):
    """
    'solid_motion_axis_direction' child.
    """
    _version = '231'
    fluent_name = 'solid-motion-axis-direction'
    _python_name = 'solid_motion_axis_direction'
    child_object_type = solid_motion_axis_direction_child
    return_type = 'object'

class solid_udf_zmotion_name(String, AllowedValuesMixin):
    """
    'solid_udf_zmotion_name' child.
    """
    _version = '231'
    fluent_name = 'solid-udf-zmotion-name'
    _python_name = 'solid_udf_zmotion_name'
    return_type = 'object'

class radiating(Boolean, AllowedValuesMixin):
    """
    'radiating' child.
    """
    _version = '231'
    fluent_name = 'radiating?'
    _python_name = 'radiating'
    return_type = 'object'

class les_embedded(Boolean, AllowedValuesMixin):
    """
    'les_embedded' child.
    """
    _version = '231'
    fluent_name = 'les-embedded?'
    _python_name = 'les_embedded'
    return_type = 'object'

class contact_property(Boolean, AllowedValuesMixin):
    """
    'contact_property' child.
    """
    _version = '231'
    fluent_name = 'contact-property?'
    _python_name = 'contact_property'
    return_type = 'object'

class active_wetsteam_zone(Boolean, AllowedValuesMixin):
    """
    'active_wetsteam_zone' child.
    """
    _version = '231'
    fluent_name = 'active-wetsteam-zone?'
    _python_name = 'active_wetsteam_zone'
    return_type = 'object'

class vapor_phase_realgas(Integer, AllowedValuesMixin):
    """
    'vapor_phase_realgas' child.
    """
    _version = '231'
    fluent_name = 'vapor-phase-realgas'
    _python_name = 'vapor_phase_realgas'
    return_type = 'object'

class laminar(Boolean, AllowedValuesMixin):
    """
    'laminar' child.
    """
    _version = '231'
    fluent_name = 'laminar?'
    _python_name = 'laminar'
    return_type = 'object'

class laminar_mut_zero(Boolean, AllowedValuesMixin):
    """
    'laminar_mut_zero' child.
    """
    _version = '231'
    fluent_name = 'laminar-mut-zero?'
    _python_name = 'laminar_mut_zero'
    return_type = 'object'

class les_embedded_spec(String, AllowedValuesMixin):
    """
    'les_embedded_spec' child.
    """
    _version = '231'
    fluent_name = 'les-embedded-spec'
    _python_name = 'les_embedded_spec'
    return_type = 'object'

class les_embedded_mom_scheme(String, AllowedValuesMixin):
    """
    'les_embedded_mom_scheme' child.
    """
    _version = '231'
    fluent_name = 'les-embedded-mom-scheme'
    _python_name = 'les_embedded_mom_scheme'
    return_type = 'object'

class les_embedded_c_wale(Real, AllowedValuesMixin):
    """
    'les_embedded_c_wale' child.
    """
    _version = '231'
    fluent_name = 'les-embedded-c-wale'
    _python_name = 'les_embedded_c_wale'
    return_type = 'object'

class les_embedded_c_smag(Real, AllowedValuesMixin):
    """
    'les_embedded_c_smag' child.
    """
    _version = '231'
    fluent_name = 'les-embedded-c-smag'
    _python_name = 'les_embedded_c_smag'
    return_type = 'object'

class glass(Boolean, AllowedValuesMixin):
    """
    'glass' child.
    """
    _version = '231'
    fluent_name = 'glass?'
    _python_name = 'glass'
    return_type = 'object'

class porous(Boolean, AllowedValuesMixin):
    """
    'porous' child.
    """
    _version = '231'
    fluent_name = 'porous?'
    _python_name = 'porous'
    return_type = 'object'

class conical(Boolean, AllowedValuesMixin):
    """
    'conical' child.
    """
    _version = '231'
    fluent_name = 'conical?'
    _python_name = 'conical'
    return_type = 'object'

class dir_spec_cond(String, AllowedValuesMixin):
    """
    'dir_spec_cond' child.
    """
    _version = '231'
    fluent_name = 'dir-spec-cond'
    _python_name = 'dir_spec_cond'
    return_type = 'object'

class cursys(Boolean, AllowedValuesMixin):
    """
    'cursys' child.
    """
    _version = '231'
    fluent_name = 'cursys?'
    _python_name = 'cursys'
    return_type = 'object'

class cursys_name(String, AllowedValuesMixin):
    """
    'cursys_name' child.
    """
    _version = '231'
    fluent_name = 'cursys-name'
    _python_name = 'cursys_name'
    return_type = 'object'

class direction_1_x(Group):
    """
    'direction_1_x' child.
    """
    _version = '231'
    fluent_name = 'direction-1-x'
    _python_name = 'direction_1_x'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_1_y(Group):
    """
    'direction_1_y' child.
    """
    _version = '231'
    fluent_name = 'direction-1-y'
    _python_name = 'direction_1_y'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_1_z(Group):
    """
    'direction_1_z' child.
    """
    _version = '231'
    fluent_name = 'direction-1-z'
    _python_name = 'direction_1_z'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_2_x(Group):
    """
    'direction_2_x' child.
    """
    _version = '231'
    fluent_name = 'direction-2-x'
    _python_name = 'direction_2_x'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_2_y(Group):
    """
    'direction_2_y' child.
    """
    _version = '231'
    fluent_name = 'direction-2-y'
    _python_name = 'direction_2_y'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_2_z(Group):
    """
    'direction_2_z' child.
    """
    _version = '231'
    fluent_name = 'direction-2-z'
    _python_name = 'direction_2_z'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class cone_axis_x(Real, AllowedValuesMixin):
    """
    'cone_axis_x' child.
    """
    _version = '231'
    fluent_name = 'cone-axis-x'
    _python_name = 'cone_axis_x'
    return_type = 'object'

class cone_axis_y(Real, AllowedValuesMixin):
    """
    'cone_axis_y' child.
    """
    _version = '231'
    fluent_name = 'cone-axis-y'
    _python_name = 'cone_axis_y'
    return_type = 'object'

class cone_axis_z(Real, AllowedValuesMixin):
    """
    'cone_axis_z' child.
    """
    _version = '231'
    fluent_name = 'cone-axis-z'
    _python_name = 'cone_axis_z'
    return_type = 'object'

class cone_axis_pt_x(Real, AllowedValuesMixin):
    """
    'cone_axis_pt_x' child.
    """
    _version = '231'
    fluent_name = 'cone-axis-pt-x'
    _python_name = 'cone_axis_pt_x'
    return_type = 'object'

class cone_axis_pt_y(Real, AllowedValuesMixin):
    """
    'cone_axis_pt_y' child.
    """
    _version = '231'
    fluent_name = 'cone-axis-pt-y'
    _python_name = 'cone_axis_pt_y'
    return_type = 'object'

class cone_axis_pt_z(Real, AllowedValuesMixin):
    """
    'cone_axis_pt_z' child.
    """
    _version = '231'
    fluent_name = 'cone-axis-pt-z'
    _python_name = 'cone_axis_pt_z'
    return_type = 'object'

class cone_angle(Real, AllowedValuesMixin):
    """
    'cone_angle' child.
    """
    _version = '231'
    fluent_name = 'cone-angle'
    _python_name = 'cone_angle'
    return_type = 'object'

class rel_vel_resistance(Boolean, AllowedValuesMixin):
    """
    'rel_vel_resistance' child.
    """
    _version = '231'
    fluent_name = 'rel-vel-resistance?'
    _python_name = 'rel_vel_resistance'
    return_type = 'object'

class porous_r_1(Group):
    """
    'porous_r_1' child.
    """
    _version = '231'
    fluent_name = 'porous-r-1'
    _python_name = 'porous_r_1'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class porous_r_2(Group):
    """
    'porous_r_2' child.
    """
    _version = '231'
    fluent_name = 'porous-r-2'
    _python_name = 'porous_r_2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class porous_r_3(Group):
    """
    'porous_r_3' child.
    """
    _version = '231'
    fluent_name = 'porous-r-3'
    _python_name = 'porous_r_3'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class alt_inertial_form(Boolean, AllowedValuesMixin):
    """
    'alt_inertial_form' child.
    """
    _version = '231'
    fluent_name = 'alt-inertial-form?'
    _python_name = 'alt_inertial_form'
    return_type = 'object'

class porous_c_1(Group):
    """
    'porous_c_1' child.
    """
    _version = '231'
    fluent_name = 'porous-c-1'
    _python_name = 'porous_c_1'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class porous_c_2(Group):
    """
    'porous_c_2' child.
    """
    _version = '231'
    fluent_name = 'porous-c-2'
    _python_name = 'porous_c_2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class porous_c_3(Group):
    """
    'porous_c_3' child.
    """
    _version = '231'
    fluent_name = 'porous-c-3'
    _python_name = 'porous_c_3'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class c0(Real, AllowedValuesMixin):
    """
    'c0' child.
    """
    _version = '231'
    fluent_name = 'c0'
    _python_name = 'c0'
    return_type = 'object'

class c1_1(Real, AllowedValuesMixin):
    """
    'c1' child.
    """
    _version = '231'
    fluent_name = 'c1'
    _python_name = 'c1'
    return_type = 'object'

class porosity(Group):
    """
    'porosity' child.
    """
    _version = '231'
    fluent_name = 'porosity'
    _python_name = 'porosity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class method_1(String, AllowedValuesMixin):
    """
    'method' child.
    """
    _version = '231'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class number_of_coeff(Integer):
    """
    'number_of_coeff' child.
    """
    _version = '231'
    fluent_name = 'number-of-coeff'
    _python_name = 'number_of_coeff'
    return_type = 'object'

class function_of(String, AllowedValuesMixin):
    """
    'function_of' child.
    """
    _version = '231'
    fluent_name = 'function-of'
    _python_name = 'function_of'
    return_type = 'object'

class coefficients_1(RealList):
    """
    'coefficients' child.
    """
    _version = '231'
    fluent_name = 'coefficients'
    _python_name = 'coefficients'
    return_type = 'object'

class constant(Real):
    """
    'constant' child.
    """
    _version = '231'
    fluent_name = 'constant'
    _python_name = 'constant'
    return_type = 'object'

class minimum_1(Real):
    """
    'minimum' child.
    """
    _version = '231'
    fluent_name = 'minimum'
    _python_name = 'minimum'
    return_type = 'object'

class maximum_1(Real):
    """
    'maximum' child.
    """
    _version = '231'
    fluent_name = 'maximum'
    _python_name = 'maximum'
    return_type = 'object'

class piecewise_polynomial_1_child(Group):
    """
    'child_object_type' of piecewise_polynomial.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'piecewise_polynomial_child'
    child_names = ['minimum', 'maximum', 'number_of_coeff', 'coefficients']
    _child_classes = dict(
        minimum=minimum_1,
        maximum=maximum_1,
        number_of_coeff=number_of_coeff,
        coefficients=coefficients_1,
    )
    return_type = 'object'

class piecewise_polynomial_1(ListObject[piecewise_polynomial_1_child]):
    """
    'piecewise_polynomial' child.
    """
    _version = '231'
    fluent_name = 'piecewise-polynomial'
    _python_name = 'piecewise_polynomial'
    child_object_type = piecewise_polynomial_1_child
    return_type = 'object'

class viscosity_ratio(Group):
    """
    'viscosity_ratio' child.
    """
    _version = '231'
    fluent_name = 'viscosity-ratio'
    _python_name = 'viscosity_ratio'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class none(Boolean, AllowedValuesMixin):
    """
    'none' child.
    """
    _version = '231'
    fluent_name = 'none?'
    _python_name = 'none'
    return_type = 'object'

class corey(Boolean, AllowedValuesMixin):
    """
    'corey' child.
    """
    _version = '231'
    fluent_name = 'corey?'
    _python_name = 'corey'
    return_type = 'object'

class stone_1(Boolean, AllowedValuesMixin):
    """
    'stone_1' child.
    """
    _version = '231'
    fluent_name = 'stone-1?'
    _python_name = 'stone_1'
    return_type = 'object'

class stone_2(Boolean, AllowedValuesMixin):
    """
    'stone_2' child.
    """
    _version = '231'
    fluent_name = 'stone-2?'
    _python_name = 'stone_2'
    return_type = 'object'

class rel_perm_limit_p1(Real, AllowedValuesMixin):
    """
    'rel_perm_limit_p1' child.
    """
    _version = '231'
    fluent_name = 'rel-perm-limit-p1'
    _python_name = 'rel_perm_limit_p1'
    return_type = 'object'

class rel_perm_limit_p2(Real, AllowedValuesMixin):
    """
    'rel_perm_limit_p2' child.
    """
    _version = '231'
    fluent_name = 'rel-perm-limit-p2'
    _python_name = 'rel_perm_limit_p2'
    return_type = 'object'

class ref_perm_p1(Real, AllowedValuesMixin):
    """
    'ref_perm_p1' child.
    """
    _version = '231'
    fluent_name = 'ref-perm-p1'
    _python_name = 'ref_perm_p1'
    return_type = 'object'

class exp_p1(Real, AllowedValuesMixin):
    """
    'exp_p1' child.
    """
    _version = '231'
    fluent_name = 'exp-p1'
    _python_name = 'exp_p1'
    return_type = 'object'

class res_sat_p1(Real, AllowedValuesMixin):
    """
    'res_sat_p1' child.
    """
    _version = '231'
    fluent_name = 'res-sat-p1'
    _python_name = 'res_sat_p1'
    return_type = 'object'

class ref_perm_p2(Real, AllowedValuesMixin):
    """
    'ref_perm_p2' child.
    """
    _version = '231'
    fluent_name = 'ref-perm-p2'
    _python_name = 'ref_perm_p2'
    return_type = 'object'

class exp_p2(Real, AllowedValuesMixin):
    """
    'exp_p2' child.
    """
    _version = '231'
    fluent_name = 'exp-p2'
    _python_name = 'exp_p2'
    return_type = 'object'

class res_sat_p2(Real, AllowedValuesMixin):
    """
    'res_sat_p2' child.
    """
    _version = '231'
    fluent_name = 'res-sat-p2'
    _python_name = 'res_sat_p2'
    return_type = 'object'

class ref_perm_p3(Real, AllowedValuesMixin):
    """
    'ref_perm_p3' child.
    """
    _version = '231'
    fluent_name = 'ref-perm-p3'
    _python_name = 'ref_perm_p3'
    return_type = 'object'

class exp_p3(Real, AllowedValuesMixin):
    """
    'exp_p3' child.
    """
    _version = '231'
    fluent_name = 'exp-p3'
    _python_name = 'exp_p3'
    return_type = 'object'

class res_sat_p3(Real, AllowedValuesMixin):
    """
    'res_sat_p3' child.
    """
    _version = '231'
    fluent_name = 'res-sat-p3'
    _python_name = 'res_sat_p3'
    return_type = 'object'

class capillary_pressure(Group):
    """
    'capillary_pressure' child.
    """
    _version = '231'
    fluent_name = 'capillary-pressure'
    _python_name = 'capillary_pressure'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class max_capillary_pressure(Real, AllowedValuesMixin):
    """
    'max_capillary_pressure' child.
    """
    _version = '231'
    fluent_name = 'max-capillary-pressure'
    _python_name = 'max_capillary_pressure'
    return_type = 'object'

class van_genuchten_pg(Real, AllowedValuesMixin):
    """
    'van_genuchten_pg' child.
    """
    _version = '231'
    fluent_name = 'van-genuchten-pg'
    _python_name = 'van_genuchten_pg'
    return_type = 'object'

class van_genuchten_ng(Real, AllowedValuesMixin):
    """
    'van_genuchten_ng' child.
    """
    _version = '231'
    fluent_name = 'van-genuchten-ng'
    _python_name = 'van_genuchten_ng'
    return_type = 'object'

class skjaeveland_nw_pc_coef(Real, AllowedValuesMixin):
    """
    'skjaeveland_nw_pc_coef' child.
    """
    _version = '231'
    fluent_name = 'skjaeveland-nw-pc-coef'
    _python_name = 'skjaeveland_nw_pc_coef'
    return_type = 'object'

class skjaeveland_nw_pc_pwr(Real, AllowedValuesMixin):
    """
    'skjaeveland_nw_pc_pwr' child.
    """
    _version = '231'
    fluent_name = 'skjaeveland-nw-pc-pwr'
    _python_name = 'skjaeveland_nw_pc_pwr'
    return_type = 'object'

class skjaeveland_wet_pc_coef(Real, AllowedValuesMixin):
    """
    'skjaeveland_wet_pc_coef' child.
    """
    _version = '231'
    fluent_name = 'skjaeveland-wet-pc-coef'
    _python_name = 'skjaeveland_wet_pc_coef'
    return_type = 'object'

class skjaeveland_wet_pc_pwr(Real, AllowedValuesMixin):
    """
    'skjaeveland_wet_pc_pwr' child.
    """
    _version = '231'
    fluent_name = 'skjaeveland-wet-pc-pwr'
    _python_name = 'skjaeveland_wet_pc_pwr'
    return_type = 'object'

class brooks_corey_pe(Real, AllowedValuesMixin):
    """
    'brooks_corey_pe' child.
    """
    _version = '231'
    fluent_name = 'brooks-corey-pe'
    _python_name = 'brooks_corey_pe'
    return_type = 'object'

class brooks_corey_ng(Real, AllowedValuesMixin):
    """
    'brooks_corey_ng' child.
    """
    _version = '231'
    fluent_name = 'brooks-corey-ng'
    _python_name = 'brooks_corey_ng'
    return_type = 'object'

class leverett_con_ang(Real, AllowedValuesMixin):
    """
    'leverett_con_ang' child.
    """
    _version = '231'
    fluent_name = 'leverett-con-ang'
    _python_name = 'leverett_con_ang'
    return_type = 'object'

class rel_perm_tabular_p1(Boolean, AllowedValuesMixin):
    """
    'rel_perm_tabular_p1' child.
    """
    _version = '231'
    fluent_name = 'rel-perm-tabular-p1?'
    _python_name = 'rel_perm_tabular_p1'
    return_type = 'object'

class rel_perm_table_p1(String, AllowedValuesMixin):
    """
    'rel_perm_table_p1' child.
    """
    _version = '231'
    fluent_name = 'rel-perm-table-p1'
    _python_name = 'rel_perm_table_p1'
    return_type = 'object'

class rel_perm_satw_p1(String, AllowedValuesMixin):
    """
    'rel_perm_satw_p1' child.
    """
    _version = '231'
    fluent_name = 'rel-perm-satw-p1'
    _python_name = 'rel_perm_satw_p1'
    return_type = 'object'

class rel_perm_rp_p1(String, AllowedValuesMixin):
    """
    'rel_perm_rp_p1' child.
    """
    _version = '231'
    fluent_name = 'rel-perm-rp-p1'
    _python_name = 'rel_perm_rp_p1'
    return_type = 'object'

class rel_perm_tabular_p2(Boolean, AllowedValuesMixin):
    """
    'rel_perm_tabular_p2' child.
    """
    _version = '231'
    fluent_name = 'rel-perm-tabular-p2?'
    _python_name = 'rel_perm_tabular_p2'
    return_type = 'object'

class rel_perm_table_p2(String, AllowedValuesMixin):
    """
    'rel_perm_table_p2' child.
    """
    _version = '231'
    fluent_name = 'rel-perm-table-p2'
    _python_name = 'rel_perm_table_p2'
    return_type = 'object'

class rel_perm_satw_p2(String, AllowedValuesMixin):
    """
    'rel_perm_satw_p2' child.
    """
    _version = '231'
    fluent_name = 'rel-perm-satw-p2'
    _python_name = 'rel_perm_satw_p2'
    return_type = 'object'

class rel_perm_rp_p2(String, AllowedValuesMixin):
    """
    'rel_perm_rp_p2' child.
    """
    _version = '231'
    fluent_name = 'rel-perm-rp-p2'
    _python_name = 'rel_perm_rp_p2'
    return_type = 'object'

class wetting_phase(String, AllowedValuesMixin):
    """
    'wetting_phase' child.
    """
    _version = '231'
    fluent_name = 'wetting-phase'
    _python_name = 'wetting_phase'
    return_type = 'object'

class non_wetting_phase(String, AllowedValuesMixin):
    """
    'non_wetting_phase' child.
    """
    _version = '231'
    fluent_name = 'non-wetting-phase'
    _python_name = 'non_wetting_phase'
    return_type = 'object'

class equib_thermal(Boolean, AllowedValuesMixin):
    """
    'equib_thermal' child.
    """
    _version = '231'
    fluent_name = 'equib-thermal?'
    _python_name = 'equib_thermal'
    return_type = 'object'

class non_equib_thermal(Boolean, AllowedValuesMixin):
    """
    'non_equib_thermal' child.
    """
    _version = '231'
    fluent_name = 'non-equib-thermal?'
    _python_name = 'non_equib_thermal'
    return_type = 'object'

class solid_material(String, AllowedValuesMixin):
    """
    'solid_material' child.
    """
    _version = '231'
    fluent_name = 'solid-material'
    _python_name = 'solid_material'
    return_type = 'object'

class area_density(Group):
    """
    'area_density' child.
    """
    _version = '231'
    fluent_name = 'area-density'
    _python_name = 'area_density'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class heat_transfer_coeff(Group):
    """
    'heat_transfer_coeff' child.
    """
    _version = '231'
    fluent_name = 'heat-transfer-coeff'
    _python_name = 'heat_transfer_coeff'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class fanzone(Boolean, AllowedValuesMixin):
    """
    'fanzone' child.
    """
    _version = '231'
    fluent_name = 'fanzone?'
    _python_name = 'fanzone'
    return_type = 'object'

class fan_zone_list(String, AllowedValuesMixin):
    """
    'fan_zone_list' child.
    """
    _version = '231'
    fluent_name = 'fan-zone-list'
    _python_name = 'fan_zone_list'
    return_type = 'object'

class fan_thickness(Real, AllowedValuesMixin):
    """
    'fan_thickness' child.
    """
    _version = '231'
    fluent_name = 'fan-thickness'
    _python_name = 'fan_thickness'
    return_type = 'object'

class fan_hub_rad(Real, AllowedValuesMixin):
    """
    'fan_hub_rad' child.
    """
    _version = '231'
    fluent_name = 'fan-hub-rad'
    _python_name = 'fan_hub_rad'
    return_type = 'object'

class fan_tip_rad(Real, AllowedValuesMixin):
    """
    'fan_tip_rad' child.
    """
    _version = '231'
    fluent_name = 'fan-tip-rad'
    _python_name = 'fan_tip_rad'
    return_type = 'object'

class fan_x_origin(Real, AllowedValuesMixin):
    """
    'fan_x_origin' child.
    """
    _version = '231'
    fluent_name = 'fan-x-origin'
    _python_name = 'fan_x_origin'
    return_type = 'object'

class fan_y_origin(Real, AllowedValuesMixin):
    """
    'fan_y_origin' child.
    """
    _version = '231'
    fluent_name = 'fan-y-origin'
    _python_name = 'fan_y_origin'
    return_type = 'object'

class fan_z_origin(Real, AllowedValuesMixin):
    """
    'fan_z_origin' child.
    """
    _version = '231'
    fluent_name = 'fan-z-origin'
    _python_name = 'fan_z_origin'
    return_type = 'object'

class fan_rot_dir(String, AllowedValuesMixin):
    """
    'fan_rot_dir' child.
    """
    _version = '231'
    fluent_name = 'fan-rot-dir'
    _python_name = 'fan_rot_dir'
    return_type = 'object'

class fan_opert_angvel(Real, AllowedValuesMixin):
    """
    'fan_opert_angvel' child.
    """
    _version = '231'
    fluent_name = 'fan-opert-angvel'
    _python_name = 'fan_opert_angvel'
    return_type = 'object'

class fan_inflection_point(Real, AllowedValuesMixin):
    """
    'fan_inflection_point' child.
    """
    _version = '231'
    fluent_name = 'fan-inflection-point'
    _python_name = 'fan_inflection_point'
    return_type = 'object'

class limit_flow_fan(Boolean, AllowedValuesMixin):
    """
    'limit_flow_fan' child.
    """
    _version = '231'
    fluent_name = 'limit-flow-fan'
    _python_name = 'limit_flow_fan'
    return_type = 'object'

class max_flow_rate(Real, AllowedValuesMixin):
    """
    'max_flow_rate' child.
    """
    _version = '231'
    fluent_name = 'max-flow-rate'
    _python_name = 'max_flow_rate'
    return_type = 'object'

class min_flow_rate(Real, AllowedValuesMixin):
    """
    'min_flow_rate' child.
    """
    _version = '231'
    fluent_name = 'min-flow-rate'
    _python_name = 'min_flow_rate'
    return_type = 'object'

class tan_source_term(Boolean, AllowedValuesMixin):
    """
    'tan_source_term' child.
    """
    _version = '231'
    fluent_name = 'tan-source-term'
    _python_name = 'tan_source_term'
    return_type = 'object'

class rad_source_term(Boolean, AllowedValuesMixin):
    """
    'rad_source_term' child.
    """
    _version = '231'
    fluent_name = 'rad-source-term'
    _python_name = 'rad_source_term'
    return_type = 'object'

class axial_source_term(Boolean, AllowedValuesMixin):
    """
    'axial_source_term' child.
    """
    _version = '231'
    fluent_name = 'axial-source-term'
    _python_name = 'axial_source_term'
    return_type = 'object'

class fan_axial_source_method(String, AllowedValuesMixin):
    """
    'fan_axial_source_method' child.
    """
    _version = '231'
    fluent_name = 'fan-axial-source-method'
    _python_name = 'fan_axial_source_method'
    return_type = 'object'

class fan_pre_jump(Real, AllowedValuesMixin):
    """
    'fan_pre_jump' child.
    """
    _version = '231'
    fluent_name = 'fan-pre-jump'
    _python_name = 'fan_pre_jump'
    return_type = 'object'

class fan_curve_fit(String, AllowedValuesMixin):
    """
    'fan_curve_fit' child.
    """
    _version = '231'
    fluent_name = 'fan-curve-fit'
    _python_name = 'fan_curve_fit'
    return_type = 'object'

class fan_poly_order(Real, AllowedValuesMixin):
    """
    'fan_poly_order' child.
    """
    _version = '231'
    fluent_name = 'fan-poly-order'
    _python_name = 'fan_poly_order'
    return_type = 'object'

class fan_ini_flow(Real, AllowedValuesMixin):
    """
    'fan_ini_flow' child.
    """
    _version = '231'
    fluent_name = 'fan-ini-flow'
    _python_name = 'fan_ini_flow'
    return_type = 'object'

class fan_test_angvel(Real, AllowedValuesMixin):
    """
    'fan_test_angvel' child.
    """
    _version = '231'
    fluent_name = 'fan-test-angvel'
    _python_name = 'fan_test_angvel'
    return_type = 'object'

class fan_test_temp(Real, AllowedValuesMixin):
    """
    'fan_test_temp' child.
    """
    _version = '231'
    fluent_name = 'fan-test-temp'
    _python_name = 'fan_test_temp'
    return_type = 'object'

class reaction_mechs_1(String, AllowedValuesMixin):
    """
    'reaction_mechs' child.
    """
    _version = '231'
    fluent_name = 'reaction-mechs'
    _python_name = 'reaction_mechs'
    return_type = 'object'

class react(Boolean, AllowedValuesMixin):
    """
    'react' child.
    """
    _version = '231'
    fluent_name = 'react?'
    _python_name = 'react'
    return_type = 'object'

class surface_volume_ratio(Real, AllowedValuesMixin):
    """
    'surface_volume_ratio' child.
    """
    _version = '231'
    fluent_name = 'surface-volume-ratio'
    _python_name = 'surface_volume_ratio'
    return_type = 'object'

class electrolyte(Boolean, AllowedValuesMixin):
    """
    'electrolyte' child.
    """
    _version = '231'
    fluent_name = 'electrolyte?'
    _python_name = 'electrolyte'
    return_type = 'object'

class mp_compressive_beta_max(Real, AllowedValuesMixin):
    """
    'mp_compressive_beta_max' child.
    """
    _version = '231'
    fluent_name = 'mp-compressive-beta-max'
    _python_name = 'mp_compressive_beta_max'
    return_type = 'object'

class mp_boiling_zone(Boolean, AllowedValuesMixin):
    """
    'mp_boiling_zone' child.
    """
    _version = '231'
    fluent_name = 'mp-boiling-zone?'
    _python_name = 'mp_boiling_zone'
    return_type = 'object'

class numerical_beach(Boolean, AllowedValuesMixin):
    """
    'numerical_beach' child.
    """
    _version = '231'
    fluent_name = 'numerical-beach?'
    _python_name = 'numerical_beach'
    return_type = 'object'

class beach_id(Integer, AllowedValuesMixin):
    """
    'beach_id' child.
    """
    _version = '231'
    fluent_name = 'beach-id'
    _python_name = 'beach_id'
    return_type = 'object'

class beach_multi_dir(Boolean, AllowedValuesMixin):
    """
    'beach_multi_dir' child.
    """
    _version = '231'
    fluent_name = 'beach-multi-dir?'
    _python_name = 'beach_multi_dir'
    return_type = 'object'

class beach_damp_type(String, AllowedValuesMixin):
    """
    'beach_damp_type' child.
    """
    _version = '231'
    fluent_name = 'beach-damp-type'
    _python_name = 'beach_damp_type'
    return_type = 'object'

class beach_inlet_bndr(String, AllowedValuesMixin):
    """
    'beach_inlet_bndr' child.
    """
    _version = '231'
    fluent_name = 'beach-inlet-bndr'
    _python_name = 'beach_inlet_bndr'
    return_type = 'object'

class beach_fs_level(Real, AllowedValuesMixin):
    """
    'beach_fs_level' child.
    """
    _version = '231'
    fluent_name = 'beach-fs-level'
    _python_name = 'beach_fs_level'
    return_type = 'object'

class beach_bottom_level(Real, AllowedValuesMixin):
    """
    'beach_bottom_level' child.
    """
    _version = '231'
    fluent_name = 'beach-bottom-level'
    _python_name = 'beach_bottom_level'
    return_type = 'object'

class beach_dir_ni(Real, AllowedValuesMixin):
    """
    'beach_dir_ni' child.
    """
    _version = '231'
    fluent_name = 'beach-dir-ni'
    _python_name = 'beach_dir_ni'
    return_type = 'object'

class beach_dir_nj(Real, AllowedValuesMixin):
    """
    'beach_dir_nj' child.
    """
    _version = '231'
    fluent_name = 'beach-dir-nj'
    _python_name = 'beach_dir_nj'
    return_type = 'object'

class beach_dir_nk(Real, AllowedValuesMixin):
    """
    'beach_dir_nk' child.
    """
    _version = '231'
    fluent_name = 'beach-dir-nk'
    _python_name = 'beach_dir_nk'
    return_type = 'object'

class beach_damp_len_spec(String, AllowedValuesMixin):
    """
    'beach_damp_len_spec' child.
    """
    _version = '231'
    fluent_name = 'beach-damp-len-spec'
    _python_name = 'beach_damp_len_spec'
    return_type = 'object'

class beach_wave_len(Real, AllowedValuesMixin):
    """
    'beach_wave_len' child.
    """
    _version = '231'
    fluent_name = 'beach-wave-len'
    _python_name = 'beach_wave_len'
    return_type = 'object'

class beach_len_factor(Real, AllowedValuesMixin):
    """
    'beach_len_factor' child.
    """
    _version = '231'
    fluent_name = 'beach-len-factor'
    _python_name = 'beach_len_factor'
    return_type = 'object'

class beach_start_point(Real, AllowedValuesMixin):
    """
    'beach_start_point' child.
    """
    _version = '231'
    fluent_name = 'beach-start-point'
    _python_name = 'beach_start_point'
    return_type = 'object'

class beach_end_point(Real, AllowedValuesMixin):
    """
    'beach_end_point' child.
    """
    _version = '231'
    fluent_name = 'beach-end-point'
    _python_name = 'beach_end_point'
    return_type = 'object'

class ni(Real, AllowedValuesMixin):
    """
    'ni' child.
    """
    _version = '231'
    fluent_name = 'ni'
    _python_name = 'ni'
    return_type = 'object'

class nj(Real, AllowedValuesMixin):
    """
    'nj' child.
    """
    _version = '231'
    fluent_name = 'nj'
    _python_name = 'nj'
    return_type = 'object'

class nk(Real, AllowedValuesMixin):
    """
    'nk' child.
    """
    _version = '231'
    fluent_name = 'nk'
    _python_name = 'nk'
    return_type = 'object'

class xe(Real, AllowedValuesMixin):
    """
    'xe' child.
    """
    _version = '231'
    fluent_name = 'xe'
    _python_name = 'xe'
    return_type = 'object'

class len(Real, AllowedValuesMixin):
    """
    'len' child.
    """
    _version = '231'
    fluent_name = 'len'
    _python_name = 'len'
    return_type = 'object'

class beach_dir_list_child(Group):
    """
    'child_object_type' of beach_dir_list.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'beach_dir_list_child'
    child_names = ['ni', 'nj', 'nk', 'xe', 'len']
    _child_classes = dict(
        ni=ni,
        nj=nj,
        nk=nk,
        xe=xe,
        len=len,
    )
    return_type = 'object'

class beach_dir_list(ListObject[beach_dir_list_child]):
    """
    'beach_dir_list' child.
    """
    _version = '231'
    fluent_name = 'beach-dir-list'
    _python_name = 'beach_dir_list'
    child_object_type = beach_dir_list_child
    return_type = 'object'

class beach_damp_relative(Boolean, AllowedValuesMixin):
    """
    'beach_damp_relative' child.
    """
    _version = '231'
    fluent_name = 'beach-damp-relative?'
    _python_name = 'beach_damp_relative'
    return_type = 'object'

class beach_damp_resist_lin(Real, AllowedValuesMixin):
    """
    'beach_damp_resist_lin' child.
    """
    _version = '231'
    fluent_name = 'beach-damp-resist-lin'
    _python_name = 'beach_damp_resist_lin'
    return_type = 'object'

class beach_damp_resist(Real, AllowedValuesMixin):
    """
    'beach_damp_resist' child.
    """
    _version = '231'
    fluent_name = 'beach-damp-resist'
    _python_name = 'beach_damp_resist'
    return_type = 'object'

class porous_structure(Boolean, AllowedValuesMixin):
    """
    'porous_structure' child.
    """
    _version = '231'
    fluent_name = 'porous-structure?'
    _python_name = 'porous_structure'
    return_type = 'object'

class structure_material(String, AllowedValuesMixin):
    """
    'structure_material' child.
    """
    _version = '231'
    fluent_name = 'structure-material'
    _python_name = 'structure_material'
    return_type = 'object'

class anisotropic_spe_diff(Boolean, AllowedValuesMixin):
    """
    'anisotropic_spe_diff' child.
    """
    _version = '231'
    fluent_name = 'anisotropic-spe-diff?'
    _python_name = 'anisotropic_spe_diff'
    return_type = 'object'

class spe_diff_xx(Real, AllowedValuesMixin):
    """
    'spe_diff_xx' child.
    """
    _version = '231'
    fluent_name = 'spe-diff-xx'
    _python_name = 'spe_diff_xx'
    return_type = 'object'

class spe_diff_xy(Real, AllowedValuesMixin):
    """
    'spe_diff_xy' child.
    """
    _version = '231'
    fluent_name = 'spe-diff-xy'
    _python_name = 'spe_diff_xy'
    return_type = 'object'

class spe_diff_xz(Real, AllowedValuesMixin):
    """
    'spe_diff_xz' child.
    """
    _version = '231'
    fluent_name = 'spe-diff-xz'
    _python_name = 'spe_diff_xz'
    return_type = 'object'

class spe_diff_yx(Real, AllowedValuesMixin):
    """
    'spe_diff_yx' child.
    """
    _version = '231'
    fluent_name = 'spe-diff-yx'
    _python_name = 'spe_diff_yx'
    return_type = 'object'

class spe_diff_yy(Real, AllowedValuesMixin):
    """
    'spe_diff_yy' child.
    """
    _version = '231'
    fluent_name = 'spe-diff-yy'
    _python_name = 'spe_diff_yy'
    return_type = 'object'

class spe_diff_yz(Real, AllowedValuesMixin):
    """
    'spe_diff_yz' child.
    """
    _version = '231'
    fluent_name = 'spe-diff-yz'
    _python_name = 'spe_diff_yz'
    return_type = 'object'

class spe_diff_zx(Real, AllowedValuesMixin):
    """
    'spe_diff_zx' child.
    """
    _version = '231'
    fluent_name = 'spe-diff-zx'
    _python_name = 'spe_diff_zx'
    return_type = 'object'

class spe_diff_zy(Real, AllowedValuesMixin):
    """
    'spe_diff_zy' child.
    """
    _version = '231'
    fluent_name = 'spe-diff-zy'
    _python_name = 'spe_diff_zy'
    return_type = 'object'

class spe_diff_zz(Real, AllowedValuesMixin):
    """
    'spe_diff_zz' child.
    """
    _version = '231'
    fluent_name = 'spe-diff-zz'
    _python_name = 'spe_diff_zz'
    return_type = 'object'

class phase_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['material', 'sources', 'source_terms', 'fixed', 'cylindrical_fixed_var', 'fixes', 'motion_spec', 'relative_to_thread', 'omega', 'axis_origin', 'axis_direction', 'udf_zmotion_name', 'mrf_motion', 'mrf_relative_to_thread', 'mrf_omega', 'reference_frame_velocity', 'reference_frame_axis_origin', 'reference_frame_axis_direction', 'mrf_udf_zmotion_name', 'mgrid_enable_transient', 'mgrid_motion', 'mgrid_relative_to_thread', 'mgrid_omega', 'moving_mesh_velocity', 'moving_mesh_axis_origin', 'moving_mesh_axis_direction', 'mgrid_udf_zmotion_name', 'solid_motion', 'solid_relative_to_thread', 'solid_omega', 'solid_motion_velocity', 'solid_motion_axis_origin', 'solid_motion_axis_direction', 'solid_udf_zmotion_name', 'radiating', 'les_embedded', 'contact_property', 'active_wetsteam_zone', 'vapor_phase_realgas', 'laminar', 'laminar_mut_zero', 'les_embedded_spec', 'les_embedded_mom_scheme', 'les_embedded_c_wale', 'les_embedded_c_smag', 'glass', 'porous', 'conical', 'dir_spec_cond', 'cursys', 'cursys_name', 'direction_1_x', 'direction_1_y', 'direction_1_z', 'direction_2_x', 'direction_2_y', 'direction_2_z', 'cone_axis_x', 'cone_axis_y', 'cone_axis_z', 'cone_axis_pt_x', 'cone_axis_pt_y', 'cone_axis_pt_z', 'cone_angle', 'rel_vel_resistance', 'porous_r_1', 'porous_r_2', 'porous_r_3', 'alt_inertial_form', 'porous_c_1', 'porous_c_2', 'porous_c_3', 'c0', 'c1', 'porosity', 'viscosity_ratio', 'none', 'corey', 'stone_1', 'stone_2', 'rel_perm_limit_p1', 'rel_perm_limit_p2', 'ref_perm_p1', 'exp_p1', 'res_sat_p1', 'ref_perm_p2', 'exp_p2', 'res_sat_p2', 'ref_perm_p3', 'exp_p3', 'res_sat_p3', 'capillary_pressure', 'max_capillary_pressure', 'van_genuchten_pg', 'van_genuchten_ng', 'skjaeveland_nw_pc_coef', 'skjaeveland_nw_pc_pwr', 'skjaeveland_wet_pc_coef', 'skjaeveland_wet_pc_pwr', 'brooks_corey_pe', 'brooks_corey_ng', 'leverett_con_ang', 'rel_perm_tabular_p1', 'rel_perm_table_p1', 'rel_perm_satw_p1', 'rel_perm_rp_p1', 'rel_perm_tabular_p2', 'rel_perm_table_p2', 'rel_perm_satw_p2', 'rel_perm_rp_p2', 'wetting_phase', 'non_wetting_phase', 'equib_thermal', 'non_equib_thermal', 'solid_material', 'area_density', 'heat_transfer_coeff', 'fanzone', 'fan_zone_list', 'fan_thickness', 'fan_hub_rad', 'fan_tip_rad', 'fan_x_origin', 'fan_y_origin', 'fan_z_origin', 'fan_rot_dir', 'fan_opert_angvel', 'fan_inflection_point', 'limit_flow_fan', 'max_flow_rate', 'min_flow_rate', 'tan_source_term', 'rad_source_term', 'axial_source_term', 'fan_axial_source_method', 'fan_pre_jump', 'fan_curve_fit', 'fan_poly_order', 'fan_ini_flow', 'fan_test_angvel', 'fan_test_temp', 'reaction_mechs', 'react', 'surface_volume_ratio', 'electrolyte', 'mp_compressive_beta_max', 'mp_boiling_zone', 'numerical_beach', 'beach_id', 'beach_multi_dir', 'beach_damp_type', 'beach_inlet_bndr', 'beach_fs_level', 'beach_bottom_level', 'beach_dir_ni', 'beach_dir_nj', 'beach_dir_nk', 'beach_damp_len_spec', 'beach_wave_len', 'beach_len_factor', 'beach_start_point', 'beach_end_point', 'beach_dir_list', 'beach_damp_relative', 'beach_damp_resist_lin', 'beach_damp_resist', 'porous_structure', 'structure_material', 'anisotropic_spe_diff', 'spe_diff_xx', 'spe_diff_xy', 'spe_diff_xz', 'spe_diff_yx', 'spe_diff_yy', 'spe_diff_yz', 'spe_diff_zx', 'spe_diff_zy', 'spe_diff_zz']
    _child_classes = dict(
        material=material_1,
        sources=sources,
        source_terms=source_terms_1,
        fixed=fixed,
        cylindrical_fixed_var=cylindrical_fixed_var,
        fixes=fixes,
        motion_spec=motion_spec,
        relative_to_thread=relative_to_thread,
        omega=omega,
        axis_origin=axis_origin_1,
        axis_direction=axis_direction_1,
        udf_zmotion_name=udf_zmotion_name,
        mrf_motion=mrf_motion,
        mrf_relative_to_thread=mrf_relative_to_thread,
        mrf_omega=mrf_omega,
        reference_frame_velocity=reference_frame_velocity,
        reference_frame_axis_origin=reference_frame_axis_origin,
        reference_frame_axis_direction=reference_frame_axis_direction,
        mrf_udf_zmotion_name=mrf_udf_zmotion_name,
        mgrid_enable_transient=mgrid_enable_transient,
        mgrid_motion=mgrid_motion,
        mgrid_relative_to_thread=mgrid_relative_to_thread,
        mgrid_omega=mgrid_omega,
        moving_mesh_velocity=moving_mesh_velocity,
        moving_mesh_axis_origin=moving_mesh_axis_origin,
        moving_mesh_axis_direction=moving_mesh_axis_direction,
        mgrid_udf_zmotion_name=mgrid_udf_zmotion_name,
        solid_motion=solid_motion,
        solid_relative_to_thread=solid_relative_to_thread,
        solid_omega=solid_omega,
        solid_motion_velocity=solid_motion_velocity,
        solid_motion_axis_origin=solid_motion_axis_origin,
        solid_motion_axis_direction=solid_motion_axis_direction,
        solid_udf_zmotion_name=solid_udf_zmotion_name,
        radiating=radiating,
        les_embedded=les_embedded,
        contact_property=contact_property,
        active_wetsteam_zone=active_wetsteam_zone,
        vapor_phase_realgas=vapor_phase_realgas,
        laminar=laminar,
        laminar_mut_zero=laminar_mut_zero,
        les_embedded_spec=les_embedded_spec,
        les_embedded_mom_scheme=les_embedded_mom_scheme,
        les_embedded_c_wale=les_embedded_c_wale,
        les_embedded_c_smag=les_embedded_c_smag,
        glass=glass,
        porous=porous,
        conical=conical,
        dir_spec_cond=dir_spec_cond,
        cursys=cursys,
        cursys_name=cursys_name,
        direction_1_x=direction_1_x,
        direction_1_y=direction_1_y,
        direction_1_z=direction_1_z,
        direction_2_x=direction_2_x,
        direction_2_y=direction_2_y,
        direction_2_z=direction_2_z,
        cone_axis_x=cone_axis_x,
        cone_axis_y=cone_axis_y,
        cone_axis_z=cone_axis_z,
        cone_axis_pt_x=cone_axis_pt_x,
        cone_axis_pt_y=cone_axis_pt_y,
        cone_axis_pt_z=cone_axis_pt_z,
        cone_angle=cone_angle,
        rel_vel_resistance=rel_vel_resistance,
        porous_r_1=porous_r_1,
        porous_r_2=porous_r_2,
        porous_r_3=porous_r_3,
        alt_inertial_form=alt_inertial_form,
        porous_c_1=porous_c_1,
        porous_c_2=porous_c_2,
        porous_c_3=porous_c_3,
        c0=c0,
        c1=c1_1,
        porosity=porosity,
        viscosity_ratio=viscosity_ratio,
        none=none,
        corey=corey,
        stone_1=stone_1,
        stone_2=stone_2,
        rel_perm_limit_p1=rel_perm_limit_p1,
        rel_perm_limit_p2=rel_perm_limit_p2,
        ref_perm_p1=ref_perm_p1,
        exp_p1=exp_p1,
        res_sat_p1=res_sat_p1,
        ref_perm_p2=ref_perm_p2,
        exp_p2=exp_p2,
        res_sat_p2=res_sat_p2,
        ref_perm_p3=ref_perm_p3,
        exp_p3=exp_p3,
        res_sat_p3=res_sat_p3,
        capillary_pressure=capillary_pressure,
        max_capillary_pressure=max_capillary_pressure,
        van_genuchten_pg=van_genuchten_pg,
        van_genuchten_ng=van_genuchten_ng,
        skjaeveland_nw_pc_coef=skjaeveland_nw_pc_coef,
        skjaeveland_nw_pc_pwr=skjaeveland_nw_pc_pwr,
        skjaeveland_wet_pc_coef=skjaeveland_wet_pc_coef,
        skjaeveland_wet_pc_pwr=skjaeveland_wet_pc_pwr,
        brooks_corey_pe=brooks_corey_pe,
        brooks_corey_ng=brooks_corey_ng,
        leverett_con_ang=leverett_con_ang,
        rel_perm_tabular_p1=rel_perm_tabular_p1,
        rel_perm_table_p1=rel_perm_table_p1,
        rel_perm_satw_p1=rel_perm_satw_p1,
        rel_perm_rp_p1=rel_perm_rp_p1,
        rel_perm_tabular_p2=rel_perm_tabular_p2,
        rel_perm_table_p2=rel_perm_table_p2,
        rel_perm_satw_p2=rel_perm_satw_p2,
        rel_perm_rp_p2=rel_perm_rp_p2,
        wetting_phase=wetting_phase,
        non_wetting_phase=non_wetting_phase,
        equib_thermal=equib_thermal,
        non_equib_thermal=non_equib_thermal,
        solid_material=solid_material,
        area_density=area_density,
        heat_transfer_coeff=heat_transfer_coeff,
        fanzone=fanzone,
        fan_zone_list=fan_zone_list,
        fan_thickness=fan_thickness,
        fan_hub_rad=fan_hub_rad,
        fan_tip_rad=fan_tip_rad,
        fan_x_origin=fan_x_origin,
        fan_y_origin=fan_y_origin,
        fan_z_origin=fan_z_origin,
        fan_rot_dir=fan_rot_dir,
        fan_opert_angvel=fan_opert_angvel,
        fan_inflection_point=fan_inflection_point,
        limit_flow_fan=limit_flow_fan,
        max_flow_rate=max_flow_rate,
        min_flow_rate=min_flow_rate,
        tan_source_term=tan_source_term,
        rad_source_term=rad_source_term,
        axial_source_term=axial_source_term,
        fan_axial_source_method=fan_axial_source_method,
        fan_pre_jump=fan_pre_jump,
        fan_curve_fit=fan_curve_fit,
        fan_poly_order=fan_poly_order,
        fan_ini_flow=fan_ini_flow,
        fan_test_angvel=fan_test_angvel,
        fan_test_temp=fan_test_temp,
        reaction_mechs=reaction_mechs_1,
        react=react,
        surface_volume_ratio=surface_volume_ratio,
        electrolyte=electrolyte,
        mp_compressive_beta_max=mp_compressive_beta_max,
        mp_boiling_zone=mp_boiling_zone,
        numerical_beach=numerical_beach,
        beach_id=beach_id,
        beach_multi_dir=beach_multi_dir,
        beach_damp_type=beach_damp_type,
        beach_inlet_bndr=beach_inlet_bndr,
        beach_fs_level=beach_fs_level,
        beach_bottom_level=beach_bottom_level,
        beach_dir_ni=beach_dir_ni,
        beach_dir_nj=beach_dir_nj,
        beach_dir_nk=beach_dir_nk,
        beach_damp_len_spec=beach_damp_len_spec,
        beach_wave_len=beach_wave_len,
        beach_len_factor=beach_len_factor,
        beach_start_point=beach_start_point,
        beach_end_point=beach_end_point,
        beach_dir_list=beach_dir_list,
        beach_damp_relative=beach_damp_relative,
        beach_damp_resist_lin=beach_damp_resist_lin,
        beach_damp_resist=beach_damp_resist,
        porous_structure=porous_structure,
        structure_material=structure_material,
        anisotropic_spe_diff=anisotropic_spe_diff,
        spe_diff_xx=spe_diff_xx,
        spe_diff_xy=spe_diff_xy,
        spe_diff_xz=spe_diff_xz,
        spe_diff_yx=spe_diff_yx,
        spe_diff_yy=spe_diff_yy,
        spe_diff_yz=spe_diff_yz,
        spe_diff_zx=spe_diff_zx,
        spe_diff_zy=spe_diff_zy,
        spe_diff_zz=spe_diff_zz,
    )
    return_type = 'object'

class phase(NamedObject[phase_child], _NonCreatableNamedObjectMixin[phase_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_child
    return_type = 'object'

class fluid_1_child(Group):
    """
    'child_object_type' of fluid.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'fluid_child'
    child_names = ['phase', 'material', 'sources', 'source_terms', 'fixed', 'cylindrical_fixed_var', 'fixes', 'motion_spec', 'relative_to_thread', 'omega', 'axis_origin', 'axis_direction', 'udf_zmotion_name', 'mrf_motion', 'mrf_relative_to_thread', 'mrf_omega', 'reference_frame_velocity', 'reference_frame_axis_origin', 'reference_frame_axis_direction', 'mrf_udf_zmotion_name', 'mgrid_enable_transient', 'mgrid_motion', 'mgrid_relative_to_thread', 'mgrid_omega', 'moving_mesh_velocity', 'moving_mesh_axis_origin', 'moving_mesh_axis_direction', 'mgrid_udf_zmotion_name', 'solid_motion', 'solid_relative_to_thread', 'solid_omega', 'solid_motion_velocity', 'solid_motion_axis_origin', 'solid_motion_axis_direction', 'solid_udf_zmotion_name', 'radiating', 'les_embedded', 'contact_property', 'active_wetsteam_zone', 'vapor_phase_realgas', 'laminar', 'laminar_mut_zero', 'les_embedded_spec', 'les_embedded_mom_scheme', 'les_embedded_c_wale', 'les_embedded_c_smag', 'glass', 'porous', 'conical', 'dir_spec_cond', 'cursys', 'cursys_name', 'direction_1_x', 'direction_1_y', 'direction_1_z', 'direction_2_x', 'direction_2_y', 'direction_2_z', 'cone_axis_x', 'cone_axis_y', 'cone_axis_z', 'cone_axis_pt_x', 'cone_axis_pt_y', 'cone_axis_pt_z', 'cone_angle', 'rel_vel_resistance', 'porous_r_1', 'porous_r_2', 'porous_r_3', 'alt_inertial_form', 'porous_c_1', 'porous_c_2', 'porous_c_3', 'c0', 'c1', 'porosity', 'viscosity_ratio', 'none', 'corey', 'stone_1', 'stone_2', 'rel_perm_limit_p1', 'rel_perm_limit_p2', 'ref_perm_p1', 'exp_p1', 'res_sat_p1', 'ref_perm_p2', 'exp_p2', 'res_sat_p2', 'ref_perm_p3', 'exp_p3', 'res_sat_p3', 'capillary_pressure', 'max_capillary_pressure', 'van_genuchten_pg', 'van_genuchten_ng', 'skjaeveland_nw_pc_coef', 'skjaeveland_nw_pc_pwr', 'skjaeveland_wet_pc_coef', 'skjaeveland_wet_pc_pwr', 'brooks_corey_pe', 'brooks_corey_ng', 'leverett_con_ang', 'rel_perm_tabular_p1', 'rel_perm_table_p1', 'rel_perm_satw_p1', 'rel_perm_rp_p1', 'rel_perm_tabular_p2', 'rel_perm_table_p2', 'rel_perm_satw_p2', 'rel_perm_rp_p2', 'wetting_phase', 'non_wetting_phase', 'equib_thermal', 'non_equib_thermal', 'solid_material', 'area_density', 'heat_transfer_coeff', 'fanzone', 'fan_zone_list', 'fan_thickness', 'fan_hub_rad', 'fan_tip_rad', 'fan_x_origin', 'fan_y_origin', 'fan_z_origin', 'fan_rot_dir', 'fan_opert_angvel', 'fan_inflection_point', 'limit_flow_fan', 'max_flow_rate', 'min_flow_rate', 'tan_source_term', 'rad_source_term', 'axial_source_term', 'fan_axial_source_method', 'fan_pre_jump', 'fan_curve_fit', 'fan_poly_order', 'fan_ini_flow', 'fan_test_angvel', 'fan_test_temp', 'reaction_mechs', 'react', 'surface_volume_ratio', 'electrolyte', 'mp_compressive_beta_max', 'mp_boiling_zone', 'numerical_beach', 'beach_id', 'beach_multi_dir', 'beach_damp_type', 'beach_inlet_bndr', 'beach_fs_level', 'beach_bottom_level', 'beach_dir_ni', 'beach_dir_nj', 'beach_dir_nk', 'beach_damp_len_spec', 'beach_wave_len', 'beach_len_factor', 'beach_start_point', 'beach_end_point', 'beach_dir_list', 'beach_damp_relative', 'beach_damp_resist_lin', 'beach_damp_resist', 'porous_structure', 'structure_material', 'anisotropic_spe_diff', 'spe_diff_xx', 'spe_diff_xy', 'spe_diff_xz', 'spe_diff_yx', 'spe_diff_yy', 'spe_diff_yz', 'spe_diff_zx', 'spe_diff_zy', 'spe_diff_zz']
    _child_classes = dict(
        phase=phase,
        material=material_1,
        sources=sources,
        source_terms=source_terms_1,
        fixed=fixed,
        cylindrical_fixed_var=cylindrical_fixed_var,
        fixes=fixes,
        motion_spec=motion_spec,
        relative_to_thread=relative_to_thread,
        omega=omega,
        axis_origin=axis_origin_1,
        axis_direction=axis_direction_1,
        udf_zmotion_name=udf_zmotion_name,
        mrf_motion=mrf_motion,
        mrf_relative_to_thread=mrf_relative_to_thread,
        mrf_omega=mrf_omega,
        reference_frame_velocity=reference_frame_velocity,
        reference_frame_axis_origin=reference_frame_axis_origin,
        reference_frame_axis_direction=reference_frame_axis_direction,
        mrf_udf_zmotion_name=mrf_udf_zmotion_name,
        mgrid_enable_transient=mgrid_enable_transient,
        mgrid_motion=mgrid_motion,
        mgrid_relative_to_thread=mgrid_relative_to_thread,
        mgrid_omega=mgrid_omega,
        moving_mesh_velocity=moving_mesh_velocity,
        moving_mesh_axis_origin=moving_mesh_axis_origin,
        moving_mesh_axis_direction=moving_mesh_axis_direction,
        mgrid_udf_zmotion_name=mgrid_udf_zmotion_name,
        solid_motion=solid_motion,
        solid_relative_to_thread=solid_relative_to_thread,
        solid_omega=solid_omega,
        solid_motion_velocity=solid_motion_velocity,
        solid_motion_axis_origin=solid_motion_axis_origin,
        solid_motion_axis_direction=solid_motion_axis_direction,
        solid_udf_zmotion_name=solid_udf_zmotion_name,
        radiating=radiating,
        les_embedded=les_embedded,
        contact_property=contact_property,
        active_wetsteam_zone=active_wetsteam_zone,
        vapor_phase_realgas=vapor_phase_realgas,
        laminar=laminar,
        laminar_mut_zero=laminar_mut_zero,
        les_embedded_spec=les_embedded_spec,
        les_embedded_mom_scheme=les_embedded_mom_scheme,
        les_embedded_c_wale=les_embedded_c_wale,
        les_embedded_c_smag=les_embedded_c_smag,
        glass=glass,
        porous=porous,
        conical=conical,
        dir_spec_cond=dir_spec_cond,
        cursys=cursys,
        cursys_name=cursys_name,
        direction_1_x=direction_1_x,
        direction_1_y=direction_1_y,
        direction_1_z=direction_1_z,
        direction_2_x=direction_2_x,
        direction_2_y=direction_2_y,
        direction_2_z=direction_2_z,
        cone_axis_x=cone_axis_x,
        cone_axis_y=cone_axis_y,
        cone_axis_z=cone_axis_z,
        cone_axis_pt_x=cone_axis_pt_x,
        cone_axis_pt_y=cone_axis_pt_y,
        cone_axis_pt_z=cone_axis_pt_z,
        cone_angle=cone_angle,
        rel_vel_resistance=rel_vel_resistance,
        porous_r_1=porous_r_1,
        porous_r_2=porous_r_2,
        porous_r_3=porous_r_3,
        alt_inertial_form=alt_inertial_form,
        porous_c_1=porous_c_1,
        porous_c_2=porous_c_2,
        porous_c_3=porous_c_3,
        c0=c0,
        c1=c1_1,
        porosity=porosity,
        viscosity_ratio=viscosity_ratio,
        none=none,
        corey=corey,
        stone_1=stone_1,
        stone_2=stone_2,
        rel_perm_limit_p1=rel_perm_limit_p1,
        rel_perm_limit_p2=rel_perm_limit_p2,
        ref_perm_p1=ref_perm_p1,
        exp_p1=exp_p1,
        res_sat_p1=res_sat_p1,
        ref_perm_p2=ref_perm_p2,
        exp_p2=exp_p2,
        res_sat_p2=res_sat_p2,
        ref_perm_p3=ref_perm_p3,
        exp_p3=exp_p3,
        res_sat_p3=res_sat_p3,
        capillary_pressure=capillary_pressure,
        max_capillary_pressure=max_capillary_pressure,
        van_genuchten_pg=van_genuchten_pg,
        van_genuchten_ng=van_genuchten_ng,
        skjaeveland_nw_pc_coef=skjaeveland_nw_pc_coef,
        skjaeveland_nw_pc_pwr=skjaeveland_nw_pc_pwr,
        skjaeveland_wet_pc_coef=skjaeveland_wet_pc_coef,
        skjaeveland_wet_pc_pwr=skjaeveland_wet_pc_pwr,
        brooks_corey_pe=brooks_corey_pe,
        brooks_corey_ng=brooks_corey_ng,
        leverett_con_ang=leverett_con_ang,
        rel_perm_tabular_p1=rel_perm_tabular_p1,
        rel_perm_table_p1=rel_perm_table_p1,
        rel_perm_satw_p1=rel_perm_satw_p1,
        rel_perm_rp_p1=rel_perm_rp_p1,
        rel_perm_tabular_p2=rel_perm_tabular_p2,
        rel_perm_table_p2=rel_perm_table_p2,
        rel_perm_satw_p2=rel_perm_satw_p2,
        rel_perm_rp_p2=rel_perm_rp_p2,
        wetting_phase=wetting_phase,
        non_wetting_phase=non_wetting_phase,
        equib_thermal=equib_thermal,
        non_equib_thermal=non_equib_thermal,
        solid_material=solid_material,
        area_density=area_density,
        heat_transfer_coeff=heat_transfer_coeff,
        fanzone=fanzone,
        fan_zone_list=fan_zone_list,
        fan_thickness=fan_thickness,
        fan_hub_rad=fan_hub_rad,
        fan_tip_rad=fan_tip_rad,
        fan_x_origin=fan_x_origin,
        fan_y_origin=fan_y_origin,
        fan_z_origin=fan_z_origin,
        fan_rot_dir=fan_rot_dir,
        fan_opert_angvel=fan_opert_angvel,
        fan_inflection_point=fan_inflection_point,
        limit_flow_fan=limit_flow_fan,
        max_flow_rate=max_flow_rate,
        min_flow_rate=min_flow_rate,
        tan_source_term=tan_source_term,
        rad_source_term=rad_source_term,
        axial_source_term=axial_source_term,
        fan_axial_source_method=fan_axial_source_method,
        fan_pre_jump=fan_pre_jump,
        fan_curve_fit=fan_curve_fit,
        fan_poly_order=fan_poly_order,
        fan_ini_flow=fan_ini_flow,
        fan_test_angvel=fan_test_angvel,
        fan_test_temp=fan_test_temp,
        reaction_mechs=reaction_mechs_1,
        react=react,
        surface_volume_ratio=surface_volume_ratio,
        electrolyte=electrolyte,
        mp_compressive_beta_max=mp_compressive_beta_max,
        mp_boiling_zone=mp_boiling_zone,
        numerical_beach=numerical_beach,
        beach_id=beach_id,
        beach_multi_dir=beach_multi_dir,
        beach_damp_type=beach_damp_type,
        beach_inlet_bndr=beach_inlet_bndr,
        beach_fs_level=beach_fs_level,
        beach_bottom_level=beach_bottom_level,
        beach_dir_ni=beach_dir_ni,
        beach_dir_nj=beach_dir_nj,
        beach_dir_nk=beach_dir_nk,
        beach_damp_len_spec=beach_damp_len_spec,
        beach_wave_len=beach_wave_len,
        beach_len_factor=beach_len_factor,
        beach_start_point=beach_start_point,
        beach_end_point=beach_end_point,
        beach_dir_list=beach_dir_list,
        beach_damp_relative=beach_damp_relative,
        beach_damp_resist_lin=beach_damp_resist_lin,
        beach_damp_resist=beach_damp_resist,
        porous_structure=porous_structure,
        structure_material=structure_material,
        anisotropic_spe_diff=anisotropic_spe_diff,
        spe_diff_xx=spe_diff_xx,
        spe_diff_xy=spe_diff_xy,
        spe_diff_xz=spe_diff_xz,
        spe_diff_yx=spe_diff_yx,
        spe_diff_yy=spe_diff_yy,
        spe_diff_yz=spe_diff_yz,
        spe_diff_zx=spe_diff_zx,
        spe_diff_zy=spe_diff_zy,
        spe_diff_zz=spe_diff_zz,
    )
    return_type = 'object'

class fluid_1(NamedObject[fluid_1_child], _NonCreatableNamedObjectMixin[fluid_1_child]):
    """
    'fluid' child.
    """
    _version = '231'
    fluent_name = 'fluid'
    _python_name = 'fluid'
    child_object_type = fluid_1_child
    return_type = 'object'

class pcb_model(Boolean, AllowedValuesMixin):
    """
    'pcb_model' child.
    """
    _version = '231'
    fluent_name = 'pcb-model?'
    _python_name = 'pcb_model'
    return_type = 'object'

class ecad_name(String, AllowedValuesMixin):
    """
    'ecad_name' child.
    """
    _version = '231'
    fluent_name = 'ecad-name'
    _python_name = 'ecad_name'
    return_type = 'object'

class choice(String, AllowedValuesMixin):
    """
    'choice' child.
    """
    _version = '231'
    fluent_name = 'choice'
    _python_name = 'choice'
    return_type = 'object'

class rows(Real, AllowedValuesMixin):
    """
    'rows' child.
    """
    _version = '231'
    fluent_name = 'rows'
    _python_name = 'rows'
    return_type = 'object'

class columns(Real, AllowedValuesMixin):
    """
    'columns' child.
    """
    _version = '231'
    fluent_name = 'columns'
    _python_name = 'columns'
    return_type = 'object'

class ref_frame(String, AllowedValuesMixin):
    """
    'ref_frame' child.
    """
    _version = '231'
    fluent_name = 'ref-frame'
    _python_name = 'ref_frame'
    return_type = 'object'

class pwr_names(StringList, AllowedValuesMixin):
    """
    'pwr_names' child.
    """
    _version = '231'
    fluent_name = 'pwr-names'
    _python_name = 'pwr_names'
    return_type = 'object'

class pcb_zone_info(Group):
    """
    'pcb_zone_info' child.
    """
    _version = '231'
    fluent_name = 'pcb-zone-info'
    _python_name = 'pcb_zone_info'
    child_names = ['ecad_name', 'choice', 'rows', 'columns', 'ref_frame', 'pwr_names']
    _child_classes = dict(
        ecad_name=ecad_name,
        choice=choice,
        rows=rows,
        columns=columns,
        ref_frame=ref_frame,
        pwr_names=pwr_names,
    )
    return_type = 'object'

class phase_1_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['material', 'sources', 'source_terms', 'fixed', 'cylindrical_fixed_var', 'fixes', 'motion_spec', 'relative_to_thread', 'omega', 'axis_origin', 'axis_direction', 'udf_zmotion_name', 'mrf_motion', 'mrf_relative_to_thread', 'mrf_omega', 'reference_frame_velocity', 'reference_frame_axis_origin', 'reference_frame_axis_direction', 'mrf_udf_zmotion_name', 'mgrid_enable_transient', 'mgrid_motion', 'mgrid_relative_to_thread', 'mgrid_omega', 'moving_mesh_velocity', 'moving_mesh_axis_origin', 'moving_mesh_axis_direction', 'mgrid_udf_zmotion_name', 'solid_motion', 'solid_relative_to_thread', 'solid_omega', 'solid_motion_velocity', 'solid_motion_axis_origin', 'solid_motion_axis_direction', 'solid_udf_zmotion_name', 'radiating', 'les_embedded', 'contact_property', 'active_wetsteam_zone', 'vapor_phase_realgas', 'cursys', 'cursys_name', 'pcb_model', 'pcb_zone_info']
    _child_classes = dict(
        material=material_1,
        sources=sources,
        source_terms=source_terms_1,
        fixed=fixed,
        cylindrical_fixed_var=cylindrical_fixed_var,
        fixes=fixes,
        motion_spec=motion_spec,
        relative_to_thread=relative_to_thread,
        omega=omega,
        axis_origin=axis_origin_1,
        axis_direction=axis_direction_1,
        udf_zmotion_name=udf_zmotion_name,
        mrf_motion=mrf_motion,
        mrf_relative_to_thread=mrf_relative_to_thread,
        mrf_omega=mrf_omega,
        reference_frame_velocity=reference_frame_velocity,
        reference_frame_axis_origin=reference_frame_axis_origin,
        reference_frame_axis_direction=reference_frame_axis_direction,
        mrf_udf_zmotion_name=mrf_udf_zmotion_name,
        mgrid_enable_transient=mgrid_enable_transient,
        mgrid_motion=mgrid_motion,
        mgrid_relative_to_thread=mgrid_relative_to_thread,
        mgrid_omega=mgrid_omega,
        moving_mesh_velocity=moving_mesh_velocity,
        moving_mesh_axis_origin=moving_mesh_axis_origin,
        moving_mesh_axis_direction=moving_mesh_axis_direction,
        mgrid_udf_zmotion_name=mgrid_udf_zmotion_name,
        solid_motion=solid_motion,
        solid_relative_to_thread=solid_relative_to_thread,
        solid_omega=solid_omega,
        solid_motion_velocity=solid_motion_velocity,
        solid_motion_axis_origin=solid_motion_axis_origin,
        solid_motion_axis_direction=solid_motion_axis_direction,
        solid_udf_zmotion_name=solid_udf_zmotion_name,
        radiating=radiating,
        les_embedded=les_embedded,
        contact_property=contact_property,
        active_wetsteam_zone=active_wetsteam_zone,
        vapor_phase_realgas=vapor_phase_realgas,
        cursys=cursys,
        cursys_name=cursys_name,
        pcb_model=pcb_model,
        pcb_zone_info=pcb_zone_info,
    )
    return_type = 'object'

class phase_1(NamedObject[phase_1_child], _NonCreatableNamedObjectMixin[phase_1_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_1_child
    return_type = 'object'

class solid_1_child(Group):
    """
    'child_object_type' of solid.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'solid_child'
    child_names = ['phase', 'material', 'sources', 'source_terms', 'fixed', 'cylindrical_fixed_var', 'fixes', 'motion_spec', 'relative_to_thread', 'omega', 'axis_origin', 'axis_direction', 'udf_zmotion_name', 'mrf_motion', 'mrf_relative_to_thread', 'mrf_omega', 'reference_frame_velocity', 'reference_frame_axis_origin', 'reference_frame_axis_direction', 'mrf_udf_zmotion_name', 'mgrid_enable_transient', 'mgrid_motion', 'mgrid_relative_to_thread', 'mgrid_omega', 'moving_mesh_velocity', 'moving_mesh_axis_origin', 'moving_mesh_axis_direction', 'mgrid_udf_zmotion_name', 'solid_motion', 'solid_relative_to_thread', 'solid_omega', 'solid_motion_velocity', 'solid_motion_axis_origin', 'solid_motion_axis_direction', 'solid_udf_zmotion_name', 'radiating', 'les_embedded', 'contact_property', 'active_wetsteam_zone', 'vapor_phase_realgas', 'cursys', 'cursys_name', 'pcb_model', 'pcb_zone_info']
    _child_classes = dict(
        phase=phase_1,
        material=material_1,
        sources=sources,
        source_terms=source_terms_1,
        fixed=fixed,
        cylindrical_fixed_var=cylindrical_fixed_var,
        fixes=fixes,
        motion_spec=motion_spec,
        relative_to_thread=relative_to_thread,
        omega=omega,
        axis_origin=axis_origin_1,
        axis_direction=axis_direction_1,
        udf_zmotion_name=udf_zmotion_name,
        mrf_motion=mrf_motion,
        mrf_relative_to_thread=mrf_relative_to_thread,
        mrf_omega=mrf_omega,
        reference_frame_velocity=reference_frame_velocity,
        reference_frame_axis_origin=reference_frame_axis_origin,
        reference_frame_axis_direction=reference_frame_axis_direction,
        mrf_udf_zmotion_name=mrf_udf_zmotion_name,
        mgrid_enable_transient=mgrid_enable_transient,
        mgrid_motion=mgrid_motion,
        mgrid_relative_to_thread=mgrid_relative_to_thread,
        mgrid_omega=mgrid_omega,
        moving_mesh_velocity=moving_mesh_velocity,
        moving_mesh_axis_origin=moving_mesh_axis_origin,
        moving_mesh_axis_direction=moving_mesh_axis_direction,
        mgrid_udf_zmotion_name=mgrid_udf_zmotion_name,
        solid_motion=solid_motion,
        solid_relative_to_thread=solid_relative_to_thread,
        solid_omega=solid_omega,
        solid_motion_velocity=solid_motion_velocity,
        solid_motion_axis_origin=solid_motion_axis_origin,
        solid_motion_axis_direction=solid_motion_axis_direction,
        solid_udf_zmotion_name=solid_udf_zmotion_name,
        radiating=radiating,
        les_embedded=les_embedded,
        contact_property=contact_property,
        active_wetsteam_zone=active_wetsteam_zone,
        vapor_phase_realgas=vapor_phase_realgas,
        cursys=cursys,
        cursys_name=cursys_name,
        pcb_model=pcb_model,
        pcb_zone_info=pcb_zone_info,
    )
    return_type = 'object'

class solid_1(NamedObject[solid_1_child], _NonCreatableNamedObjectMixin[solid_1_child]):
    """
    'solid' child.
    """
    _version = '231'
    fluent_name = 'solid'
    _python_name = 'solid'
    child_object_type = solid_1_child
    return_type = 'object'

class zone_list(StringList, AllowedValuesMixin):
    """
    'zone_list' child.
    """
    _version = '231'
    fluent_name = 'zone-list'
    _python_name = 'zone_list'
    return_type = 'object'

class new_type(String, AllowedValuesMixin):
    """
    'new_type' child.
    """
    _version = '231'
    fluent_name = 'new-type'
    _python_name = 'new_type'
    return_type = 'object'

class change_type(Command):
    """
    'change_type' command.
    """
    _version = '231'
    fluent_name = 'change-type'
    _python_name = 'change_type'
    argument_names = ['zone_list', 'new_type']
    _child_classes = dict(
        zone_list=zone_list,
        new_type=new_type,
    )
    return_type = 'object'

class cell_zone_list(StringList, AllowedValuesMixin):
    """
    'cell_zone_list' child.
    """
    _version = '231'
    fluent_name = 'cell-zone-list'
    _python_name = 'cell_zone_list'
    return_type = 'object'

class activate_cell_zone(Command):
    """
    'activate_cell_zone' command.
    """
    _version = '231'
    fluent_name = 'activate-cell-zone'
    _python_name = 'activate_cell_zone'
    argument_names = ['cell_zone_list']
    _child_classes = dict(
        cell_zone_list=cell_zone_list,
    )
    return_type = 'object'

class zone_id(Integer):
    """
    'zone_id' child.
    """
    _version = '231'
    fluent_name = 'zone-id'
    _python_name = 'zone_id'
    return_type = 'object'

class mrf_to_sliding_mesh(Command):
    """
    Change motion specification from MRF to moving mesh.
    
    Parameters
    ----------
        zone_id : int
            'zone_id' child.
    """
    _version = '231'
    fluent_name = 'mrf-to-sliding-mesh'
    _python_name = 'mrf_to_sliding_mesh'
    argument_names = ['zone_id']
    _child_classes = dict(
        zone_id=zone_id,
    )
    return_type = 'object'

class convert_all_solid_mrf_to_solid_motion(Command):
    """
    Change all solid zones motion specification from MRF to solid motion.
    """
    _version = '231'
    fluent_name = 'convert-all-solid-mrf-to-solid-motion'
    _python_name = 'convert_all_solid_mrf_to_solid_motion'
    return_type = 'object'

class zone_name(String, AllowedValuesMixin):
    """
    'zone_name' child.
    """
    _version = '231'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'
    return_type = 'object'

class copy_mrf_to_mesh_motion(Command):
    """
    Copy motion variable values for origin, axis and velocities from Frame Motion to Mesh Motion.
    
    Parameters
    ----------
        zone_name : str
            'zone_name' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'copy-mrf-to-mesh-motion'
    _python_name = 'copy_mrf_to_mesh_motion'
    argument_names = ['zone_name', 'overwrite']
    _child_classes = dict(
        zone_name=zone_name,
        overwrite=overwrite,
    )
    return_type = 'object'

class copy_mesh_to_mrf_motion(Command):
    """
    Copy motion variable values for origin, axis and velocities from Mesh Motion to Frame Motion.
    
    Parameters
    ----------
        zone_name : str
            'zone_name' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'copy-mesh-to-mrf-motion'
    _python_name = 'copy_mesh_to_mrf_motion'
    argument_names = ['zone_name', 'overwrite']
    _child_classes = dict(
        zone_name=zone_name,
        overwrite=overwrite,
    )
    return_type = 'object'

class cell_zone_conditions(Group, _ChildNamedObjectAccessorMixin):
    """
    'cell_zone_conditions' child.
    """
    _version = '231'
    fluent_name = 'cell-zone-conditions'
    _python_name = 'cell_zone_conditions'
    child_names = ['fluid', 'solid']
    command_names = ['change_type', 'activate_cell_zone', 'mrf_to_sliding_mesh', 'convert_all_solid_mrf_to_solid_motion', 'copy_mrf_to_mesh_motion', 'copy_mesh_to_mrf_motion']
    _child_classes = dict(
        fluid=fluid_1,
        solid=solid_1,
        change_type=change_type,
        activate_cell_zone=activate_cell_zone,
        mrf_to_sliding_mesh=mrf_to_sliding_mesh,
        convert_all_solid_mrf_to_solid_motion=convert_all_solid_mrf_to_solid_motion,
        copy_mrf_to_mesh_motion=copy_mrf_to_mesh_motion,
        copy_mesh_to_mrf_motion=copy_mesh_to_mrf_motion,
    )
    return_type = 'object'

class geom_disable(Boolean, AllowedValuesMixin):
    """
    'geom_disable' child.
    """
    _version = '231'
    fluent_name = 'geom-disable?'
    _python_name = 'geom_disable'
    return_type = 'object'

class geom_dir_spec(Boolean, AllowedValuesMixin):
    """
    'geom_dir_spec' child.
    """
    _version = '231'
    fluent_name = 'geom-dir-spec'
    _python_name = 'geom_dir_spec'
    return_type = 'object'

class geom_dir_x(Real, AllowedValuesMixin):
    """
    'geom_dir_x' child.
    """
    _version = '231'
    fluent_name = 'geom-dir-x'
    _python_name = 'geom_dir_x'
    return_type = 'object'

class geom_dir_y(Real, AllowedValuesMixin):
    """
    'geom_dir_y' child.
    """
    _version = '231'
    fluent_name = 'geom-dir-y'
    _python_name = 'geom_dir_y'
    return_type = 'object'

class geom_dir_z(Real, AllowedValuesMixin):
    """
    'geom_dir_z' child.
    """
    _version = '231'
    fluent_name = 'geom-dir-z'
    _python_name = 'geom_dir_z'
    return_type = 'object'

class geom_levels(Integer, AllowedValuesMixin):
    """
    'geom_levels' child.
    """
    _version = '231'
    fluent_name = 'geom-levels'
    _python_name = 'geom_levels'
    return_type = 'object'

class geom_bgthread(Integer, AllowedValuesMixin):
    """
    'geom_bgthread' child.
    """
    _version = '231'
    fluent_name = 'geom-bgthread'
    _python_name = 'geom_bgthread'
    return_type = 'object'

class phase_2_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class phase_2(NamedObject[phase_2_child], _NonCreatableNamedObjectMixin[phase_2_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_2_child
    return_type = 'object'

class axis_child(Group):
    """
    'child_object_type' of axis.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'axis_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        phase=phase_2,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class axis(NamedObject[axis_child], _NonCreatableNamedObjectMixin[axis_child]):
    """
    'axis' child.
    """
    _version = '231'
    fluent_name = 'axis'
    _python_name = 'axis'
    child_object_type = axis_child
    return_type = 'object'

class degassing_child(Group):
    """
    'child_object_type' of degassing.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'degassing_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        phase=phase_2,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class degassing(NamedObject[degassing_child], _NonCreatableNamedObjectMixin[degassing_child]):
    """
    'degassing' child.
    """
    _version = '231'
    fluent_name = 'degassing'
    _python_name = 'degassing'
    child_object_type = degassing_child
    return_type = 'object'

class open_channel(Boolean, AllowedValuesMixin):
    """
    'open_channel' child.
    """
    _version = '231'
    fluent_name = 'open-channel?'
    _python_name = 'open_channel'
    return_type = 'object'

class outlet_number(Integer, AllowedValuesMixin):
    """
    'outlet_number' child.
    """
    _version = '231'
    fluent_name = 'outlet-number'
    _python_name = 'outlet_number'
    return_type = 'object'

class pressure_spec_method(String, AllowedValuesMixin):
    """
    'pressure_spec_method' child.
    """
    _version = '231'
    fluent_name = 'pressure-spec-method'
    _python_name = 'pressure_spec_method'
    return_type = 'object'

class press_spec(String, AllowedValuesMixin):
    """
    'press_spec' child.
    """
    _version = '231'
    fluent_name = 'press-spec'
    _python_name = 'press_spec'
    return_type = 'object'

class frame_of_reference(String, AllowedValuesMixin):
    """
    'frame_of_reference' child.
    """
    _version = '231'
    fluent_name = 'frame-of-reference'
    _python_name = 'frame_of_reference'
    return_type = 'object'

class phase_spec(String, AllowedValuesMixin):
    """
    'phase_spec' child.
    """
    _version = '231'
    fluent_name = 'phase-spec'
    _python_name = 'phase_spec'
    return_type = 'object'

class ht_local(Group):
    """
    'ht_local' child.
    """
    _version = '231'
    fluent_name = 'ht-local'
    _python_name = 'ht_local'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class gauge_pressure(Group):
    """
    'gauge_pressure' child.
    """
    _version = '231'
    fluent_name = 'gauge-pressure'
    _python_name = 'gauge_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class p_profile_multiplier(Real, AllowedValuesMixin):
    """
    'p_profile_multiplier' child.
    """
    _version = '231'
    fluent_name = 'p-profile-multiplier'
    _python_name = 'p_profile_multiplier'
    return_type = 'object'

class ht_bottom(Group):
    """
    'ht_bottom' child.
    """
    _version = '231'
    fluent_name = 'ht-bottom'
    _python_name = 'ht_bottom'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class den_spec(String, AllowedValuesMixin):
    """
    'den_spec' child.
    """
    _version = '231'
    fluent_name = 'den-spec'
    _python_name = 'den_spec'
    return_type = 'object'

class t0(Group):
    """
    't0' child.
    """
    _version = '231'
    fluent_name = 't0'
    _python_name = 't0'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_spec(String, AllowedValuesMixin):
    """
    'direction_spec' child.
    """
    _version = '231'
    fluent_name = 'direction-spec'
    _python_name = 'direction_spec'
    return_type = 'object'

class coordinate_system(String, AllowedValuesMixin):
    """
    'coordinate_system' child.
    """
    _version = '231'
    fluent_name = 'coordinate-system'
    _python_name = 'coordinate_system'
    return_type = 'object'

class flow_direction_child(Group):
    """
    'child_object_type' of flow_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'flow_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class flow_direction(ListObject[flow_direction_child]):
    """
    'flow_direction' child.
    """
    _version = '231'
    fluent_name = 'flow-direction'
    _python_name = 'flow_direction'
    child_object_type = flow_direction_child
    return_type = 'object'

class axis_direction_2_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of axis_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'axis_direction_child'
    return_type = 'object'

class axis_direction_2(ListObject[axis_direction_2_child]):
    """
    'axis_direction' child.
    """
    _version = '231'
    fluent_name = 'axis-direction'
    _python_name = 'axis_direction'
    child_object_type = axis_direction_2_child
    return_type = 'object'

class axis_origin_2_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of axis_origin.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'axis_origin_child'
    return_type = 'object'

class axis_origin_2(ListObject[axis_origin_2_child]):
    """
    'axis_origin' child.
    """
    _version = '231'
    fluent_name = 'axis-origin'
    _python_name = 'axis_origin'
    child_object_type = axis_origin_2_child
    return_type = 'object'

class ke_spec(String, AllowedValuesMixin):
    """
    'ke_spec' child.
    """
    _version = '231'
    fluent_name = 'ke-spec'
    _python_name = 'ke_spec'
    return_type = 'object'

class nut(Group):
    """
    'nut' child.
    """
    _version = '231'
    fluent_name = 'nut'
    _python_name = 'nut'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class kl(Group):
    """
    'kl' child.
    """
    _version = '231'
    fluent_name = 'kl'
    _python_name = 'kl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class intermit(Group):
    """
    'intermit' child.
    """
    _version = '231'
    fluent_name = 'intermit'
    _python_name = 'intermit'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class k(Group):
    """
    'k' child.
    """
    _version = '231'
    fluent_name = 'k'
    _python_name = 'k'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class e(Group):
    """
    'e' child.
    """
    _version = '231'
    fluent_name = 'e'
    _python_name = 'e'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class o(Group):
    """
    'o' child.
    """
    _version = '231'
    fluent_name = 'o'
    _python_name = 'o'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class v2(Group):
    """
    'v2' child.
    """
    _version = '231'
    fluent_name = 'v2'
    _python_name = 'v2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class turb_intensity(Real, AllowedValuesMixin):
    """
    'turb_intensity' child.
    """
    _version = '231'
    fluent_name = 'turb-intensity'
    _python_name = 'turb_intensity'
    return_type = 'object'

class turb_length_scale(Real, AllowedValuesMixin):
    """
    'turb_length_scale' child.
    """
    _version = '231'
    fluent_name = 'turb-length-scale'
    _python_name = 'turb_length_scale'
    return_type = 'object'

class turb_hydraulic_diam(Real, AllowedValuesMixin):
    """
    'turb_hydraulic_diam' child.
    """
    _version = '231'
    fluent_name = 'turb-hydraulic-diam'
    _python_name = 'turb_hydraulic_diam'
    return_type = 'object'

class turb_viscosity_ratio(Real, AllowedValuesMixin):
    """
    'turb_viscosity_ratio' child.
    """
    _version = '231'
    fluent_name = 'turb-viscosity-ratio'
    _python_name = 'turb_viscosity_ratio'
    return_type = 'object'

class turb_viscosity_ratio_profile(Group):
    """
    'turb_viscosity_ratio_profile' child.
    """
    _version = '231'
    fluent_name = 'turb-viscosity-ratio-profile'
    _python_name = 'turb_viscosity_ratio_profile'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class rst_spec(String, AllowedValuesMixin):
    """
    'rst_spec' child.
    """
    _version = '231'
    fluent_name = 'rst-spec'
    _python_name = 'rst_spec'
    return_type = 'object'

class uu(Group):
    """
    'uu' child.
    """
    _version = '231'
    fluent_name = 'uu'
    _python_name = 'uu'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class vv(Group):
    """
    'vv' child.
    """
    _version = '231'
    fluent_name = 'vv'
    _python_name = 'vv'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ww(Group):
    """
    'ww' child.
    """
    _version = '231'
    fluent_name = 'ww'
    _python_name = 'ww'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class uv(Group):
    """
    'uv' child.
    """
    _version = '231'
    fluent_name = 'uv'
    _python_name = 'uv'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class vw(Group):
    """
    'vw' child.
    """
    _version = '231'
    fluent_name = 'vw'
    _python_name = 'vw'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class uw(Group):
    """
    'uw' child.
    """
    _version = '231'
    fluent_name = 'uw'
    _python_name = 'uw'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ksgs_spec(String, AllowedValuesMixin):
    """
    'ksgs_spec' child.
    """
    _version = '231'
    fluent_name = 'ksgs-spec'
    _python_name = 'ksgs_spec'
    return_type = 'object'

class ksgs(Group):
    """
    'ksgs' child.
    """
    _version = '231'
    fluent_name = 'ksgs'
    _python_name = 'ksgs'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class sgs_turb_intensity(Real, AllowedValuesMixin):
    """
    'sgs_turb_intensity' child.
    """
    _version = '231'
    fluent_name = 'sgs-turb-intensity'
    _python_name = 'sgs_turb_intensity'
    return_type = 'object'

class radiation_bc(String, AllowedValuesMixin):
    """
    'radiation_bc' child.
    """
    _version = '231'
    fluent_name = 'radiation-bc'
    _python_name = 'radiation_bc'
    return_type = 'object'

class radial_direction_child(Group):
    """
    'child_object_type' of radial_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'radial_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class radial_direction(ListObject[radial_direction_child]):
    """
    'radial_direction' child.
    """
    _version = '231'
    fluent_name = 'radial-direction'
    _python_name = 'radial_direction'
    child_object_type = radial_direction_child
    return_type = 'object'

class coll_dtheta(Real, AllowedValuesMixin):
    """
    'coll_dtheta' child.
    """
    _version = '231'
    fluent_name = 'coll-dtheta'
    _python_name = 'coll_dtheta'
    return_type = 'object'

class coll_dphi(Real, AllowedValuesMixin):
    """
    'coll_dphi' child.
    """
    _version = '231'
    fluent_name = 'coll-dphi'
    _python_name = 'coll_dphi'
    return_type = 'object'

class band_q_irrad_child(Group):
    """
    'child_object_type' of band_q_irrad.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'band_q_irrad_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class band_q_irrad(NamedObject[band_q_irrad_child], _NonCreatableNamedObjectMixin[band_q_irrad_child]):
    """
    'band_q_irrad' child.
    """
    _version = '231'
    fluent_name = 'band-q-irrad'
    _python_name = 'band_q_irrad'
    child_object_type = band_q_irrad_child
    return_type = 'object'

class band_q_irrad_diffuse_child(Group):
    """
    'child_object_type' of band_q_irrad_diffuse.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'band_q_irrad_diffuse_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class band_q_irrad_diffuse(NamedObject[band_q_irrad_diffuse_child], _NonCreatableNamedObjectMixin[band_q_irrad_diffuse_child]):
    """
    'band_q_irrad_diffuse' child.
    """
    _version = '231'
    fluent_name = 'band-q-irrad-diffuse'
    _python_name = 'band_q_irrad_diffuse'
    child_object_type = band_q_irrad_diffuse_child
    return_type = 'object'

class parallel_collimated_beam(Boolean, AllowedValuesMixin):
    """
    'parallel_collimated_beam' child.
    """
    _version = '231'
    fluent_name = 'parallel-collimated-beam?'
    _python_name = 'parallel_collimated_beam'
    return_type = 'object'

class solar_direction(Boolean, AllowedValuesMixin):
    """
    'solar_direction' child.
    """
    _version = '231'
    fluent_name = 'solar-direction?'
    _python_name = 'solar_direction'
    return_type = 'object'

class solar_irradiation(Boolean, AllowedValuesMixin):
    """
    'solar_irradiation' child.
    """
    _version = '231'
    fluent_name = 'solar-irradiation?'
    _python_name = 'solar_irradiation'
    return_type = 'object'

class t_b_b_spec(String, AllowedValuesMixin):
    """
    't_b_b_spec' child.
    """
    _version = '231'
    fluent_name = 't-b-b-spec'
    _python_name = 't_b_b_spec'
    return_type = 'object'

class t_b_b(Real, AllowedValuesMixin):
    """
    't_b_b' child.
    """
    _version = '231'
    fluent_name = 't-b-b'
    _python_name = 't_b_b'
    return_type = 'object'

class in_emiss(Group):
    """
    'in_emiss' child.
    """
    _version = '231'
    fluent_name = 'in-emiss'
    _python_name = 'in_emiss'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class fmean(Group):
    """
    'fmean' child.
    """
    _version = '231'
    fluent_name = 'fmean'
    _python_name = 'fmean'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class fmean2(Group):
    """
    'fmean2' child.
    """
    _version = '231'
    fluent_name = 'fmean2'
    _python_name = 'fmean2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class fvar(Group):
    """
    'fvar' child.
    """
    _version = '231'
    fluent_name = 'fvar'
    _python_name = 'fvar'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class fvar2(Group):
    """
    'fvar2' child.
    """
    _version = '231'
    fluent_name = 'fvar2'
    _python_name = 'fvar2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class granular_temperature(Group):
    """
    'granular_temperature' child.
    """
    _version = '231'
    fluent_name = 'granular-temperature'
    _python_name = 'granular_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class iac(Group):
    """
    'iac' child.
    """
    _version = '231'
    fluent_name = 'iac'
    _python_name = 'iac'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class lsfun(Group):
    """
    'lsfun' child.
    """
    _version = '231'
    fluent_name = 'lsfun'
    _python_name = 'lsfun'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class vof_spec(String, AllowedValuesMixin):
    """
    'vof_spec' child.
    """
    _version = '231'
    fluent_name = 'vof-spec'
    _python_name = 'vof_spec'
    return_type = 'object'

class volume_fraction(Group):
    """
    'volume_fraction' child.
    """
    _version = '231'
    fluent_name = 'volume-fraction'
    _python_name = 'volume_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class species_in_mole_fractions(Boolean, AllowedValuesMixin):
    """
    'species_in_mole_fractions' child.
    """
    _version = '231'
    fluent_name = 'species-in-mole-fractions?'
    _python_name = 'species_in_mole_fractions'
    return_type = 'object'

class mf_child(Group):
    """
    'child_object_type' of mf.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'mf_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class mf(NamedObject[mf_child], _NonCreatableNamedObjectMixin[mf_child]):
    """
    'mf' child.
    """
    _version = '231'
    fluent_name = 'mf'
    _python_name = 'mf'
    child_object_type = mf_child
    return_type = 'object'

class elec_potential_type(String, AllowedValuesMixin):
    """
    'elec_potential_type' child.
    """
    _version = '231'
    fluent_name = 'elec-potential-type'
    _python_name = 'elec_potential_type'
    return_type = 'object'

class potential_value(Group):
    """
    'potential_value' child.
    """
    _version = '231'
    fluent_name = 'potential-value'
    _python_name = 'potential_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class dual_potential_type(String, AllowedValuesMixin):
    """
    'dual_potential_type' child.
    """
    _version = '231'
    fluent_name = 'dual-potential-type'
    _python_name = 'dual_potential_type'
    return_type = 'object'

class dual_potential_value(Group):
    """
    'dual_potential_value' child.
    """
    _version = '231'
    fluent_name = 'dual-potential-value'
    _python_name = 'dual_potential_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class x_displacement_type(String, AllowedValuesMixin):
    """
    'x_displacement_type' child.
    """
    _version = '231'
    fluent_name = 'x-displacement-type'
    _python_name = 'x_displacement_type'
    return_type = 'object'

class x_displacement_value(Group):
    """
    'x_displacement_value' child.
    """
    _version = '231'
    fluent_name = 'x-displacement-value'
    _python_name = 'x_displacement_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class y_displacement_type(String, AllowedValuesMixin):
    """
    'y_displacement_type' child.
    """
    _version = '231'
    fluent_name = 'y-displacement-type'
    _python_name = 'y_displacement_type'
    return_type = 'object'

class y_displacement_value(Group):
    """
    'y_displacement_value' child.
    """
    _version = '231'
    fluent_name = 'y-displacement-value'
    _python_name = 'y_displacement_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class z_displacement_type(String, AllowedValuesMixin):
    """
    'z_displacement_type' child.
    """
    _version = '231'
    fluent_name = 'z-displacement-type'
    _python_name = 'z_displacement_type'
    return_type = 'object'

class z_displacement_value(Group):
    """
    'z_displacement_value' child.
    """
    _version = '231'
    fluent_name = 'z-displacement-value'
    _python_name = 'z_displacement_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class prob_mode_1(Group):
    """
    'prob_mode_1' child.
    """
    _version = '231'
    fluent_name = 'prob-mode-1'
    _python_name = 'prob_mode_1'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class prob_mode_2(Group):
    """
    'prob_mode_2' child.
    """
    _version = '231'
    fluent_name = 'prob-mode-2'
    _python_name = 'prob_mode_2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class prob_mode_3(Group):
    """
    'prob_mode_3' child.
    """
    _version = '231'
    fluent_name = 'prob-mode-3'
    _python_name = 'prob_mode_3'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class premixc(Group):
    """
    'premixc' child.
    """
    _version = '231'
    fluent_name = 'premixc'
    _python_name = 'premixc'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class premixc_var(Group):
    """
    'premixc_var' child.
    """
    _version = '231'
    fluent_name = 'premixc-var'
    _python_name = 'premixc_var'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ecfm_sigma(Group):
    """
    'ecfm_sigma' child.
    """
    _version = '231'
    fluent_name = 'ecfm-sigma'
    _python_name = 'ecfm_sigma'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class inert(Group):
    """
    'inert' child.
    """
    _version = '231'
    fluent_name = 'inert'
    _python_name = 'inert'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_no(Group):
    """
    'pollut_no' child.
    """
    _version = '231'
    fluent_name = 'pollut-no'
    _python_name = 'pollut_no'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hcn(Group):
    """
    'pollut_hcn' child.
    """
    _version = '231'
    fluent_name = 'pollut-hcn'
    _python_name = 'pollut_hcn'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_nh3(Group):
    """
    'pollut_nh3' child.
    """
    _version = '231'
    fluent_name = 'pollut-nh3'
    _python_name = 'pollut_nh3'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_n2o(Group):
    """
    'pollut_n2o' child.
    """
    _version = '231'
    fluent_name = 'pollut-n2o'
    _python_name = 'pollut_n2o'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_urea(Group):
    """
    'pollut_urea' child.
    """
    _version = '231'
    fluent_name = 'pollut-urea'
    _python_name = 'pollut_urea'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hnco(Group):
    """
    'pollut_hnco' child.
    """
    _version = '231'
    fluent_name = 'pollut-hnco'
    _python_name = 'pollut_hnco'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_nco(Group):
    """
    'pollut_nco' child.
    """
    _version = '231'
    fluent_name = 'pollut-nco'
    _python_name = 'pollut_nco'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_so2(Group):
    """
    'pollut_so2' child.
    """
    _version = '231'
    fluent_name = 'pollut-so2'
    _python_name = 'pollut_so2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_h2s(Group):
    """
    'pollut_h2s' child.
    """
    _version = '231'
    fluent_name = 'pollut-h2s'
    _python_name = 'pollut_h2s'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_so3(Group):
    """
    'pollut_so3' child.
    """
    _version = '231'
    fluent_name = 'pollut-so3'
    _python_name = 'pollut_so3'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_sh(Group):
    """
    'pollut_sh' child.
    """
    _version = '231'
    fluent_name = 'pollut-sh'
    _python_name = 'pollut_sh'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_so(Group):
    """
    'pollut_so' child.
    """
    _version = '231'
    fluent_name = 'pollut-so'
    _python_name = 'pollut_so'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_soot(Group):
    """
    'pollut_soot' child.
    """
    _version = '231'
    fluent_name = 'pollut-soot'
    _python_name = 'pollut_soot'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_nuclei(Group):
    """
    'pollut_nuclei' child.
    """
    _version = '231'
    fluent_name = 'pollut-nuclei'
    _python_name = 'pollut_nuclei'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_ctar(Group):
    """
    'pollut_ctar' child.
    """
    _version = '231'
    fluent_name = 'pollut-ctar'
    _python_name = 'pollut_ctar'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hg(Group):
    """
    'pollut_hg' child.
    """
    _version = '231'
    fluent_name = 'pollut-hg'
    _python_name = 'pollut_hg'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hgcl2(Group):
    """
    'pollut_hgcl2' child.
    """
    _version = '231'
    fluent_name = 'pollut-hgcl2'
    _python_name = 'pollut_hgcl2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hcl(Group):
    """
    'pollut_hcl' child.
    """
    _version = '231'
    fluent_name = 'pollut-hcl'
    _python_name = 'pollut_hcl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hgo(Group):
    """
    'pollut_hgo' child.
    """
    _version = '231'
    fluent_name = 'pollut-hgo'
    _python_name = 'pollut_hgo'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_cl(Group):
    """
    'pollut_cl' child.
    """
    _version = '231'
    fluent_name = 'pollut-cl'
    _python_name = 'pollut_cl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_cl2(Group):
    """
    'pollut_cl2' child.
    """
    _version = '231'
    fluent_name = 'pollut-cl2'
    _python_name = 'pollut_cl2'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hgcl(Group):
    """
    'pollut_hgcl' child.
    """
    _version = '231'
    fluent_name = 'pollut-hgcl'
    _python_name = 'pollut_hgcl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pollut_hocl(Group):
    """
    'pollut_hocl' child.
    """
    _version = '231'
    fluent_name = 'pollut-hocl'
    _python_name = 'pollut_hocl'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class tss_scalar_child(Group):
    """
    'child_object_type' of tss_scalar.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'tss_scalar_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class tss_scalar(NamedObject[tss_scalar_child], _NonCreatableNamedObjectMixin[tss_scalar_child]):
    """
    'tss_scalar' child.
    """
    _version = '231'
    fluent_name = 'tss-scalar'
    _python_name = 'tss_scalar'
    child_object_type = tss_scalar_child
    return_type = 'object'

class fensapice_flow_bc_subtype(Integer, AllowedValuesMixin):
    """
    'fensapice_flow_bc_subtype' child.
    """
    _version = '231'
    fluent_name = 'fensapice-flow-bc-subtype'
    _python_name = 'fensapice_flow_bc_subtype'
    return_type = 'object'

class uds_bc_child(String, AllowedValuesMixin):
    """
    'child_object_type' of uds_bc.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'uds_bc_child'
    return_type = 'object'

class uds_bc(NamedObject[uds_bc_child], _NonCreatableNamedObjectMixin[uds_bc_child]):
    """
    'uds_bc' child.
    """
    _version = '231'
    fluent_name = 'uds-bc'
    _python_name = 'uds_bc'
    child_object_type = uds_bc_child
    return_type = 'object'

class uds_child(Group):
    """
    'child_object_type' of uds.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'uds_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class uds(NamedObject[uds_child], _NonCreatableNamedObjectMixin[uds_child]):
    """
    'uds' child.
    """
    _version = '231'
    fluent_name = 'uds'
    _python_name = 'uds'
    child_object_type = uds_child
    return_type = 'object'

class pb_disc_bc_child(String, AllowedValuesMixin):
    """
    'child_object_type' of pb_disc_bc.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pb_disc_bc_child'
    return_type = 'object'

class pb_disc_bc(NamedObject[pb_disc_bc_child], _NonCreatableNamedObjectMixin[pb_disc_bc_child]):
    """
    'pb_disc_bc' child.
    """
    _version = '231'
    fluent_name = 'pb-disc-bc'
    _python_name = 'pb_disc_bc'
    child_object_type = pb_disc_bc_child
    return_type = 'object'

class pb_disc_child(Group):
    """
    'child_object_type' of pb_disc.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pb_disc_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pb_disc(NamedObject[pb_disc_child], _NonCreatableNamedObjectMixin[pb_disc_child]):
    """
    'pb_disc' child.
    """
    _version = '231'
    fluent_name = 'pb-disc'
    _python_name = 'pb_disc'
    child_object_type = pb_disc_child
    return_type = 'object'

class pb_qmom_bc_child(String, AllowedValuesMixin):
    """
    'child_object_type' of pb_qmom_bc.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pb_qmom_bc_child'
    return_type = 'object'

class pb_qmom_bc(NamedObject[pb_qmom_bc_child], _NonCreatableNamedObjectMixin[pb_qmom_bc_child]):
    """
    'pb_qmom_bc' child.
    """
    _version = '231'
    fluent_name = 'pb-qmom-bc'
    _python_name = 'pb_qmom_bc'
    child_object_type = pb_qmom_bc_child
    return_type = 'object'

class pb_qmom_child(Group):
    """
    'child_object_type' of pb_qmom.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pb_qmom_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pb_qmom(NamedObject[pb_qmom_child], _NonCreatableNamedObjectMixin[pb_qmom_child]):
    """
    'pb_qmom' child.
    """
    _version = '231'
    fluent_name = 'pb-qmom'
    _python_name = 'pb_qmom'
    child_object_type = pb_qmom_child
    return_type = 'object'

class pb_smm_bc_child(String, AllowedValuesMixin):
    """
    'child_object_type' of pb_smm_bc.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pb_smm_bc_child'
    return_type = 'object'

class pb_smm_bc(NamedObject[pb_smm_bc_child], _NonCreatableNamedObjectMixin[pb_smm_bc_child]):
    """
    'pb_smm_bc' child.
    """
    _version = '231'
    fluent_name = 'pb-smm-bc'
    _python_name = 'pb_smm_bc'
    child_object_type = pb_smm_bc_child
    return_type = 'object'

class pb_smm_child(Group):
    """
    'child_object_type' of pb_smm.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pb_smm_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pb_smm(NamedObject[pb_smm_child], _NonCreatableNamedObjectMixin[pb_smm_child]):
    """
    'pb_smm' child.
    """
    _version = '231'
    fluent_name = 'pb-smm'
    _python_name = 'pb_smm'
    child_object_type = pb_smm_child
    return_type = 'object'

class pb_dqmom_bc_child(String, AllowedValuesMixin):
    """
    'child_object_type' of pb_dqmom_bc.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pb_dqmom_bc_child'
    return_type = 'object'

class pb_dqmom_bc(NamedObject[pb_dqmom_bc_child], _NonCreatableNamedObjectMixin[pb_dqmom_bc_child]):
    """
    'pb_dqmom_bc' child.
    """
    _version = '231'
    fluent_name = 'pb-dqmom-bc'
    _python_name = 'pb_dqmom_bc'
    child_object_type = pb_dqmom_bc_child
    return_type = 'object'

class pb_dqmom_child(Group):
    """
    'child_object_type' of pb_dqmom.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pb_dqmom_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pb_dqmom(NamedObject[pb_dqmom_child], _NonCreatableNamedObjectMixin[pb_dqmom_child]):
    """
    'pb_dqmom' child.
    """
    _version = '231'
    fluent_name = 'pb-dqmom'
    _python_name = 'pb_dqmom'
    child_object_type = pb_dqmom_child
    return_type = 'object'

class dpm_bc_type(String, AllowedValuesMixin):
    """
    'dpm_bc_type' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-type'
    _python_name = 'dpm_bc_type'
    return_type = 'object'

class dpm_bc_collision_partner(String, AllowedValuesMixin):
    """
    'dpm_bc_collision_partner' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-collision-partner'
    _python_name = 'dpm_bc_collision_partner'
    return_type = 'object'

class reinj_inj(String, AllowedValuesMixin):
    """
    'reinj_inj' child.
    """
    _version = '231'
    fluent_name = 'reinj-inj'
    _python_name = 'reinj_inj'
    return_type = 'object'

class dpm_bc_udf(String, AllowedValuesMixin):
    """
    'dpm_bc_udf' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-udf'
    _python_name = 'dpm_bc_udf'
    return_type = 'object'

class mixing_plane_thread(Boolean, AllowedValuesMixin):
    """
    'mixing_plane_thread' child.
    """
    _version = '231'
    fluent_name = 'mixing-plane-thread?'
    _python_name = 'mixing_plane_thread'
    return_type = 'object'

class ac_options(String, AllowedValuesMixin):
    """
    'ac_options' child.
    """
    _version = '231'
    fluent_name = 'ac-options'
    _python_name = 'ac_options'
    return_type = 'object'

class p_backflow_spec(String, AllowedValuesMixin):
    """
    'p_backflow_spec' child.
    """
    _version = '231'
    fluent_name = 'p-backflow-spec'
    _python_name = 'p_backflow_spec'
    return_type = 'object'

class p_backflow_spec_gen(String, AllowedValuesMixin):
    """
    'p_backflow_spec_gen' child.
    """
    _version = '231'
    fluent_name = 'p-backflow-spec-gen'
    _python_name = 'p_backflow_spec_gen'
    return_type = 'object'

class impedance_0(Real, AllowedValuesMixin):
    """
    'impedance_0' child.
    """
    _version = '231'
    fluent_name = 'impedance-0'
    _python_name = 'impedance_0'
    return_type = 'object'

class pole(Real, AllowedValuesMixin):
    """
    'pole' child.
    """
    _version = '231'
    fluent_name = 'pole'
    _python_name = 'pole'
    return_type = 'object'

class amplitude(Real, AllowedValuesMixin):
    """
    'amplitude' child.
    """
    _version = '231'
    fluent_name = 'amplitude'
    _python_name = 'amplitude'
    return_type = 'object'

class impedance_1_child(Group):
    """
    'child_object_type' of impedance_1.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'impedance_1_child'
    child_names = ['pole', 'amplitude']
    _child_classes = dict(
        pole=pole,
        amplitude=amplitude,
    )
    return_type = 'object'

class impedance_1(ListObject[impedance_1_child]):
    """
    'impedance_1' child.
    """
    _version = '231'
    fluent_name = 'impedance-1'
    _python_name = 'impedance_1'
    child_object_type = impedance_1_child
    return_type = 'object'

class pole_real(Real, AllowedValuesMixin):
    """
    'pole_real' child.
    """
    _version = '231'
    fluent_name = 'pole-real'
    _python_name = 'pole_real'
    return_type = 'object'

class pole_imag(Real, AllowedValuesMixin):
    """
    'pole_imag' child.
    """
    _version = '231'
    fluent_name = 'pole-imag'
    _python_name = 'pole_imag'
    return_type = 'object'

class amplitude_real(Real, AllowedValuesMixin):
    """
    'amplitude_real' child.
    """
    _version = '231'
    fluent_name = 'amplitude-real'
    _python_name = 'amplitude_real'
    return_type = 'object'

class amplitude_imag(Real, AllowedValuesMixin):
    """
    'amplitude_imag' child.
    """
    _version = '231'
    fluent_name = 'amplitude-imag'
    _python_name = 'amplitude_imag'
    return_type = 'object'

class impedance_2_child(Group):
    """
    'child_object_type' of impedance_2.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'impedance_2_child'
    child_names = ['pole_real', 'pole_imag', 'amplitude_real', 'amplitude_imag']
    _child_classes = dict(
        pole_real=pole_real,
        pole_imag=pole_imag,
        amplitude_real=amplitude_real,
        amplitude_imag=amplitude_imag,
    )
    return_type = 'object'

class impedance_2(ListObject[impedance_2_child]):
    """
    'impedance_2' child.
    """
    _version = '231'
    fluent_name = 'impedance-2'
    _python_name = 'impedance_2'
    child_object_type = impedance_2_child
    return_type = 'object'

class ac_wave(Group):
    """
    'ac_wave' child.
    """
    _version = '231'
    fluent_name = 'ac-wave'
    _python_name = 'ac_wave'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class prevent_reverse_flow(Boolean, AllowedValuesMixin):
    """
    'prevent_reverse_flow' child.
    """
    _version = '231'
    fluent_name = 'prevent-reverse-flow?'
    _python_name = 'prevent_reverse_flow'
    return_type = 'object'

class radial(Boolean, AllowedValuesMixin):
    """
    'radial' child.
    """
    _version = '231'
    fluent_name = 'radial?'
    _python_name = 'radial'
    return_type = 'object'

class avg_press_spec(Boolean, AllowedValuesMixin):
    """
    'avg_press_spec' child.
    """
    _version = '231'
    fluent_name = 'avg-press-spec?'
    _python_name = 'avg_press_spec'
    return_type = 'object'

class press_averaging_method(Integer, AllowedValuesMixin):
    """
    'press_averaging_method' child.
    """
    _version = '231'
    fluent_name = 'press-averaging-method'
    _python_name = 'press_averaging_method'
    return_type = 'object'

class targeted_mf_boundary(Boolean, AllowedValuesMixin):
    """
    'targeted_mf_boundary' child.
    """
    _version = '231'
    fluent_name = 'targeted-mf-boundary?'
    _python_name = 'targeted_mf_boundary'
    return_type = 'object'

class targeted_mf(Group):
    """
    'targeted_mf' child.
    """
    _version = '231'
    fluent_name = 'targeted-mf'
    _python_name = 'targeted_mf'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class targeted_mf_pmax(Group):
    """
    'targeted_mf_pmax' child.
    """
    _version = '231'
    fluent_name = 'targeted-mf-pmax'
    _python_name = 'targeted_mf_pmax'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class targeted_mf_pmin(Group):
    """
    'targeted_mf_pmin' child.
    """
    _version = '231'
    fluent_name = 'targeted-mf-pmin'
    _python_name = 'targeted_mf_pmin'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class gen_nrbc_spec(String, AllowedValuesMixin):
    """
    'gen_nrbc_spec' child.
    """
    _version = '231'
    fluent_name = 'gen-nrbc-spec'
    _python_name = 'gen_nrbc_spec'
    return_type = 'object'

class wsf(Group):
    """
    'wsf' child.
    """
    _version = '231'
    fluent_name = 'wsf'
    _python_name = 'wsf'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wsb(Group):
    """
    'wsb' child.
    """
    _version = '231'
    fluent_name = 'wsb'
    _python_name = 'wsb'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wsn(Group):
    """
    'wsn' child.
    """
    _version = '231'
    fluent_name = 'wsn'
    _python_name = 'wsn'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class solar_fluxes(Boolean, AllowedValuesMixin):
    """
    'solar_fluxes' child.
    """
    _version = '231'
    fluent_name = 'solar-fluxes?'
    _python_name = 'solar_fluxes'
    return_type = 'object'

class solar_shining_factor(Real, AllowedValuesMixin):
    """
    'solar_shining_factor' child.
    """
    _version = '231'
    fluent_name = 'solar-shining-factor'
    _python_name = 'solar_shining_factor'
    return_type = 'object'

class radiating_s2s_surface(Boolean, AllowedValuesMixin):
    """
    'radiating_s2s_surface' child.
    """
    _version = '231'
    fluent_name = 'radiating-s2s-surface?'
    _python_name = 'radiating_s2s_surface'
    return_type = 'object'

class a_1(Group):
    """
    'a' child.
    """
    _version = '231'
    fluent_name = 'a'
    _python_name = 'a'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class strength(Group):
    """
    'strength' child.
    """
    _version = '231'
    fluent_name = 'strength'
    _python_name = 'strength'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class new_fan_definition(Boolean, AllowedValuesMixin):
    """
    'new_fan_definition' child.
    """
    _version = '231'
    fluent_name = 'new-fan-definition?'
    _python_name = 'new_fan_definition'
    return_type = 'object'

class phase_3_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'outlet_number', 'pressure_spec_method', 'press_spec', 'frame_of_reference', 'phase_spec', 'ht_local', 'gauge_pressure', 'p_profile_multiplier', 'ht_bottom', 'den_spec', 't0', 'direction_spec', 'coordinate_system', 'flow_direction', 'axis_direction', 'axis_origin', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fmean2', 'fvar', 'fvar2', 'granular_temperature', 'iac', 'lsfun', 'vof_spec', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar', 'fensapice_flow_bc_subtype', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'mixing_plane_thread', 'ac_options', 'p_backflow_spec', 'p_backflow_spec_gen', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'prevent_reverse_flow', 'radial', 'avg_press_spec', 'press_averaging_method', 'targeted_mf_boundary', 'targeted_mf', 'targeted_mf_pmax', 'targeted_mf_pmin', 'gen_nrbc_spec', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'a', 'strength', 'new_fan_definition']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        outlet_number=outlet_number,
        pressure_spec_method=pressure_spec_method,
        press_spec=press_spec,
        frame_of_reference=frame_of_reference,
        phase_spec=phase_spec,
        ht_local=ht_local,
        gauge_pressure=gauge_pressure,
        p_profile_multiplier=p_profile_multiplier,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        t0=t0,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fmean2=fmean2,
        fvar=fvar,
        fvar2=fvar2,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        vof_spec=vof_spec,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        mixing_plane_thread=mixing_plane_thread,
        ac_options=ac_options,
        p_backflow_spec=p_backflow_spec,
        p_backflow_spec_gen=p_backflow_spec_gen,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        prevent_reverse_flow=prevent_reverse_flow,
        radial=radial,
        avg_press_spec=avg_press_spec,
        press_averaging_method=press_averaging_method,
        targeted_mf_boundary=targeted_mf_boundary,
        targeted_mf=targeted_mf,
        targeted_mf_pmax=targeted_mf_pmax,
        targeted_mf_pmin=targeted_mf_pmin,
        gen_nrbc_spec=gen_nrbc_spec,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        a=a_1,
        strength=strength,
        new_fan_definition=new_fan_definition,
    )
    return_type = 'object'

class phase_3(NamedObject[phase_3_child], _NonCreatableNamedObjectMixin[phase_3_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_3_child
    return_type = 'object'

class exhaust_fan_child(Group):
    """
    'child_object_type' of exhaust_fan.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'exhaust_fan_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'outlet_number', 'pressure_spec_method', 'press_spec', 'frame_of_reference', 'phase_spec', 'ht_local', 'gauge_pressure', 'p_profile_multiplier', 'ht_bottom', 'den_spec', 't0', 'direction_spec', 'coordinate_system', 'flow_direction', 'axis_direction', 'axis_origin', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fmean2', 'fvar', 'fvar2', 'granular_temperature', 'iac', 'lsfun', 'vof_spec', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar', 'fensapice_flow_bc_subtype', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'mixing_plane_thread', 'ac_options', 'p_backflow_spec', 'p_backflow_spec_gen', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'prevent_reverse_flow', 'radial', 'avg_press_spec', 'press_averaging_method', 'targeted_mf_boundary', 'targeted_mf', 'targeted_mf_pmax', 'targeted_mf_pmin', 'gen_nrbc_spec', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'a', 'strength', 'new_fan_definition']
    _child_classes = dict(
        phase=phase_3,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        outlet_number=outlet_number,
        pressure_spec_method=pressure_spec_method,
        press_spec=press_spec,
        frame_of_reference=frame_of_reference,
        phase_spec=phase_spec,
        ht_local=ht_local,
        gauge_pressure=gauge_pressure,
        p_profile_multiplier=p_profile_multiplier,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        t0=t0,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fmean2=fmean2,
        fvar=fvar,
        fvar2=fvar2,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        vof_spec=vof_spec,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        mixing_plane_thread=mixing_plane_thread,
        ac_options=ac_options,
        p_backflow_spec=p_backflow_spec,
        p_backflow_spec_gen=p_backflow_spec_gen,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        prevent_reverse_flow=prevent_reverse_flow,
        radial=radial,
        avg_press_spec=avg_press_spec,
        press_averaging_method=press_averaging_method,
        targeted_mf_boundary=targeted_mf_boundary,
        targeted_mf=targeted_mf,
        targeted_mf_pmax=targeted_mf_pmax,
        targeted_mf_pmin=targeted_mf_pmin,
        gen_nrbc_spec=gen_nrbc_spec,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        a=a_1,
        strength=strength,
        new_fan_definition=new_fan_definition,
    )
    return_type = 'object'

class exhaust_fan(NamedObject[exhaust_fan_child], _NonCreatableNamedObjectMixin[exhaust_fan_child]):
    """
    'exhaust_fan' child.
    """
    _version = '231'
    fluent_name = 'exhaust-fan'
    _python_name = 'exhaust_fan'
    child_object_type = exhaust_fan_child
    return_type = 'object'

class porous_jump_turb_wall_treatment(Boolean, AllowedValuesMixin):
    """
    'porous_jump_turb_wall_treatment' child.
    """
    _version = '231'
    fluent_name = 'porous-jump-turb-wall-treatment?'
    _python_name = 'porous_jump_turb_wall_treatment'
    return_type = 'object'

class dir(Integer, AllowedValuesMixin):
    """
    'dir' child.
    """
    _version = '231'
    fluent_name = 'dir'
    _python_name = 'dir'
    return_type = 'object'

class average_dp(Boolean, AllowedValuesMixin):
    """
    'average_dp' child.
    """
    _version = '231'
    fluent_name = 'average-dp?'
    _python_name = 'average_dp'
    return_type = 'object'

class c_1(Group):
    """
    'c' child.
    """
    _version = '231'
    fluent_name = 'c'
    _python_name = 'c'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class limit_range(Boolean, AllowedValuesMixin):
    """
    'limit_range' child.
    """
    _version = '231'
    fluent_name = 'limit-range?'
    _python_name = 'limit_range'
    return_type = 'object'

class v_min(Real, AllowedValuesMixin):
    """
    'v_min' child.
    """
    _version = '231'
    fluent_name = 'v-min'
    _python_name = 'v_min'
    return_type = 'object'

class v_max(Real, AllowedValuesMixin):
    """
    'v_max' child.
    """
    _version = '231'
    fluent_name = 'v-max'
    _python_name = 'v_max'
    return_type = 'object'

class profile_dp(Boolean, AllowedValuesMixin):
    """
    'profile_dp' child.
    """
    _version = '231'
    fluent_name = 'profile-dp?'
    _python_name = 'profile_dp'
    return_type = 'object'

class dp_profile(Group):
    """
    'dp_profile' child.
    """
    _version = '231'
    fluent_name = 'dp-profile'
    _python_name = 'dp_profile'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class swirl_model(Boolean, AllowedValuesMixin):
    """
    'swirl_model' child.
    """
    _version = '231'
    fluent_name = 'swirl-model?'
    _python_name = 'swirl_model'
    return_type = 'object'

class fan_vr(RealList, AllowedValuesMixin):
    """
    'fan_vr' child.
    """
    _version = '231'
    fluent_name = 'fan-vr'
    _python_name = 'fan_vr'
    return_type = 'object'

class fr(RealList, AllowedValuesMixin):
    """
    'fr' child.
    """
    _version = '231'
    fluent_name = 'fr'
    _python_name = 'fr'
    return_type = 'object'

class hub(Real, AllowedValuesMixin):
    """
    'hub' child.
    """
    _version = '231'
    fluent_name = 'hub'
    _python_name = 'hub'
    return_type = 'object'

class profile_vt(Boolean, AllowedValuesMixin):
    """
    'profile_vt' child.
    """
    _version = '231'
    fluent_name = 'profile-vt?'
    _python_name = 'profile_vt'
    return_type = 'object'

class vt_profile(Group):
    """
    'vt_profile' child.
    """
    _version = '231'
    fluent_name = 'vt-profile'
    _python_name = 'vt_profile'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class profile_vr(Boolean, AllowedValuesMixin):
    """
    'profile_vr' child.
    """
    _version = '231'
    fluent_name = 'profile-vr?'
    _python_name = 'profile_vr'
    return_type = 'object'

class vr_profile(Group):
    """
    'vr_profile' child.
    """
    _version = '231'
    fluent_name = 'vr-profile'
    _python_name = 'vr_profile'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class swirl_factor(Real, AllowedValuesMixin):
    """
    'swirl_factor' child.
    """
    _version = '231'
    fluent_name = 'swirl-factor'
    _python_name = 'swirl_factor'
    return_type = 'object'

class phase_4_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'porous_jump_turb_wall_treatment', 'dir', 'average_dp', 'c', 'limit_range', 'v_min', 'v_max', 'strength', 'profile_dp', 'dp_profile', 'swirl_model', 'fan_vr', 'fr', 'hub', 'axis_origin', 'axis_direction', 'profile_vt', 'vt_profile', 'profile_vr', 'vr_profile', 'swirl_factor', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'new_fan_definition']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        dir=dir,
        average_dp=average_dp,
        c=c_1,
        limit_range=limit_range,
        v_min=v_min,
        v_max=v_max,
        strength=strength,
        profile_dp=profile_dp,
        dp_profile=dp_profile,
        swirl_model=swirl_model,
        fan_vr=fan_vr,
        fr=fr,
        hub=hub,
        axis_origin=axis_origin_2,
        axis_direction=axis_direction_2,
        profile_vt=profile_vt,
        vt_profile=vt_profile,
        profile_vr=profile_vr,
        vr_profile=vr_profile,
        swirl_factor=swirl_factor,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        new_fan_definition=new_fan_definition,
    )
    return_type = 'object'

class phase_4(NamedObject[phase_4_child], _NonCreatableNamedObjectMixin[phase_4_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_4_child
    return_type = 'object'

class fan_child(Group):
    """
    'child_object_type' of fan.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'fan_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'porous_jump_turb_wall_treatment', 'dir', 'average_dp', 'c', 'limit_range', 'v_min', 'v_max', 'strength', 'profile_dp', 'dp_profile', 'swirl_model', 'fan_vr', 'fr', 'hub', 'axis_origin', 'axis_direction', 'profile_vt', 'vt_profile', 'profile_vr', 'vr_profile', 'swirl_factor', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'new_fan_definition']
    _child_classes = dict(
        phase=phase_4,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        dir=dir,
        average_dp=average_dp,
        c=c_1,
        limit_range=limit_range,
        v_min=v_min,
        v_max=v_max,
        strength=strength,
        profile_dp=profile_dp,
        dp_profile=dp_profile,
        swirl_model=swirl_model,
        fan_vr=fan_vr,
        fr=fr,
        hub=hub,
        axis_origin=axis_origin_2,
        axis_direction=axis_direction_2,
        profile_vt=profile_vt,
        vt_profile=vt_profile,
        profile_vr=profile_vr,
        vr_profile=vr_profile,
        swirl_factor=swirl_factor,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        new_fan_definition=new_fan_definition,
    )
    return_type = 'object'

class fan(NamedObject[fan_child], _NonCreatableNamedObjectMixin[fan_child]):
    """
    'fan' child.
    """
    _version = '231'
    fluent_name = 'fan'
    _python_name = 'fan'
    child_object_type = fan_child
    return_type = 'object'

class geometry_2_child(Group):
    """
    'child_object_type' of geometry.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'geometry_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        phase=phase_2,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class geometry_2(NamedObject[geometry_2_child], _NonCreatableNamedObjectMixin[geometry_2_child]):
    """
    'geometry' child.
    """
    _version = '231'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    child_object_type = geometry_2_child
    return_type = 'object'

class inlet_number(Integer, AllowedValuesMixin):
    """
    'inlet_number' child.
    """
    _version = '231'
    fluent_name = 'inlet-number'
    _python_name = 'inlet_number'
    return_type = 'object'

class gauge_total_pressure(Group):
    """
    'gauge_total_pressure' child.
    """
    _version = '231'
    fluent_name = 'gauge-total-pressure'
    _python_name = 'gauge_total_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class flow_spec(String, AllowedValuesMixin):
    """
    'flow_spec' child.
    """
    _version = '231'
    fluent_name = 'flow-spec'
    _python_name = 'flow_spec'
    return_type = 'object'

class ht_total(Group):
    """
    'ht_total' child.
    """
    _version = '231'
    fluent_name = 'ht-total'
    _python_name = 'ht_total'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class vmag(Group):
    """
    'vmag' child.
    """
    _version = '231'
    fluent_name = 'vmag'
    _python_name = 'vmag'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_vector_child(Group):
    """
    'child_object_type' of direction_vector.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'direction_vector_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class direction_vector(ListObject[direction_vector_child]):
    """
    'direction_vector' child.
    """
    _version = '231'
    fluent_name = 'direction-vector'
    _python_name = 'direction_vector'
    child_object_type = direction_vector_child
    return_type = 'object'

class les_spec_name(String, AllowedValuesMixin):
    """
    'les_spec_name' child.
    """
    _version = '231'
    fluent_name = 'les-spec-name'
    _python_name = 'les_spec_name'
    return_type = 'object'

class rfg_number_of_modes(Integer, AllowedValuesMixin):
    """
    'rfg_number_of_modes' child.
    """
    _version = '231'
    fluent_name = 'rfg-number-of-modes'
    _python_name = 'rfg_number_of_modes'
    return_type = 'object'

class vm_number_of_vortices(Integer, AllowedValuesMixin):
    """
    'vm_number_of_vortices' child.
    """
    _version = '231'
    fluent_name = 'vm-number-of-vortices'
    _python_name = 'vm_number_of_vortices'
    return_type = 'object'

class vm_streamwise_fluct(Boolean, AllowedValuesMixin):
    """
    'vm_streamwise_fluct' child.
    """
    _version = '231'
    fluent_name = 'vm-streamwise-fluct?'
    _python_name = 'vm_streamwise_fluct'
    return_type = 'object'

class vm_mass_conservation(Boolean, AllowedValuesMixin):
    """
    'vm_mass_conservation' child.
    """
    _version = '231'
    fluent_name = 'vm-mass-conservation?'
    _python_name = 'vm_mass_conservation'
    return_type = 'object'

class stg_scale_limiter_type(String, AllowedValuesMixin):
    """
    'stg_scale_limiter_type' child.
    """
    _version = '231'
    fluent_name = 'stg-scale-limiter-type'
    _python_name = 'stg_scale_limiter_type'
    return_type = 'object'

class stg_ti_limiter(Real, AllowedValuesMixin):
    """
    'stg_ti_limiter' child.
    """
    _version = '231'
    fluent_name = 'stg-ti-limiter'
    _python_name = 'stg_ti_limiter'
    return_type = 'object'

class stg_tvr_limiter(Real, AllowedValuesMixin):
    """
    'stg_tvr_limiter' child.
    """
    _version = '231'
    fluent_name = 'stg-tvr-limiter'
    _python_name = 'stg_tvr_limiter'
    return_type = 'object'

class stg_dw_limiter(Real, AllowedValuesMixin):
    """
    'stg_dw_limiter' child.
    """
    _version = '231'
    fluent_name = 'stg-dw-limiter'
    _python_name = 'stg_dw_limiter'
    return_type = 'object'

class volumetric_synthetic_turbulence_generator(Boolean, AllowedValuesMixin):
    """
    'volumetric_synthetic_turbulence_generator' child.
    """
    _version = '231'
    fluent_name = 'volumetric-synthetic-turbulence-generator?'
    _python_name = 'volumetric_synthetic_turbulence_generator'
    return_type = 'object'

class volumetric_synthetic_turbulence_generator_option(String, AllowedValuesMixin):
    """
    'volumetric_synthetic_turbulence_generator_option' child.
    """
    _version = '231'
    fluent_name = 'volumetric-synthetic-turbulence-generator-option'
    _python_name = 'volumetric_synthetic_turbulence_generator_option'
    return_type = 'object'

class volumetric_synthetic_turbulence_generator_option_thickness(Real, AllowedValuesMixin):
    """
    'volumetric_synthetic_turbulence_generator_option_thickness' child.
    """
    _version = '231'
    fluent_name = 'volumetric-synthetic-turbulence-generator-option-thickness'
    _python_name = 'volumetric_synthetic_turbulence_generator_option_thickness'
    return_type = 'object'

class equ_required(Boolean, AllowedValuesMixin):
    """
    'equ_required' child.
    """
    _version = '231'
    fluent_name = 'equ-required?'
    _python_name = 'equ_required'
    return_type = 'object'

class fensapice_drop_bccustom(Boolean, AllowedValuesMixin):
    """
    'fensapice_drop_bccustom' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-bccustom?'
    _python_name = 'fensapice_drop_bccustom'
    return_type = 'object'

class fensapice_drop_lwc(Real, AllowedValuesMixin):
    """
    'fensapice_drop_lwc' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-lwc'
    _python_name = 'fensapice_drop_lwc'
    return_type = 'object'

class fensapice_drop_dtemp(Real, AllowedValuesMixin):
    """
    'fensapice_drop_dtemp' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-dtemp'
    _python_name = 'fensapice_drop_dtemp'
    return_type = 'object'

class fensapice_drop_ddiam(Real, AllowedValuesMixin):
    """
    'fensapice_drop_ddiam' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-ddiam'
    _python_name = 'fensapice_drop_ddiam'
    return_type = 'object'

class fensapice_drop_dv(Boolean, AllowedValuesMixin):
    """
    'fensapice_drop_dv' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-dv?'
    _python_name = 'fensapice_drop_dv'
    return_type = 'object'

class fensapice_drop_dx(Real, AllowedValuesMixin):
    """
    'fensapice_drop_dx' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-dx'
    _python_name = 'fensapice_drop_dx'
    return_type = 'object'

class fensapice_drop_dy(Real, AllowedValuesMixin):
    """
    'fensapice_drop_dy' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-dy'
    _python_name = 'fensapice_drop_dy'
    return_type = 'object'

class fensapice_drop_dz(Real, AllowedValuesMixin):
    """
    'fensapice_drop_dz' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-dz'
    _python_name = 'fensapice_drop_dz'
    return_type = 'object'

class fensapice_dpm_surface_injection(Boolean, AllowedValuesMixin):
    """
    'fensapice_dpm_surface_injection' child.
    """
    _version = '231'
    fluent_name = 'fensapice-dpm-surface-injection?'
    _python_name = 'fensapice_dpm_surface_injection'
    return_type = 'object'

class fensapice_dpm_inj_nstream(Integer, AllowedValuesMixin):
    """
    'fensapice_dpm_inj_nstream' child.
    """
    _version = '231'
    fluent_name = 'fensapice-dpm-inj-nstream'
    _python_name = 'fensapice_dpm_inj_nstream'
    return_type = 'object'

class fensapice_drop_icc(Real, AllowedValuesMixin):
    """
    'fensapice_drop_icc' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-icc'
    _python_name = 'fensapice_drop_icc'
    return_type = 'object'

class fensapice_drop_ctemp(Real, AllowedValuesMixin):
    """
    'fensapice_drop_ctemp' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-ctemp'
    _python_name = 'fensapice_drop_ctemp'
    return_type = 'object'

class fensapice_drop_cdiam(Real, AllowedValuesMixin):
    """
    'fensapice_drop_cdiam' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-cdiam'
    _python_name = 'fensapice_drop_cdiam'
    return_type = 'object'

class fensapice_drop_cv(Boolean, AllowedValuesMixin):
    """
    'fensapice_drop_cv' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-cv?'
    _python_name = 'fensapice_drop_cv'
    return_type = 'object'

class fensapice_drop_cx(Real, AllowedValuesMixin):
    """
    'fensapice_drop_cx' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-cx'
    _python_name = 'fensapice_drop_cx'
    return_type = 'object'

class fensapice_drop_cy(Real, AllowedValuesMixin):
    """
    'fensapice_drop_cy' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-cy'
    _python_name = 'fensapice_drop_cy'
    return_type = 'object'

class fensapice_drop_cz(Real, AllowedValuesMixin):
    """
    'fensapice_drop_cz' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-cz'
    _python_name = 'fensapice_drop_cz'
    return_type = 'object'

class fensapice_drop_vrh(Boolean, AllowedValuesMixin):
    """
    'fensapice_drop_vrh' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-vrh?'
    _python_name = 'fensapice_drop_vrh'
    return_type = 'object'

class fensapice_drop_vrh_1(Real, AllowedValuesMixin):
    """
    'fensapice_drop_vrh' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-vrh'
    _python_name = 'fensapice_drop_vrh'
    return_type = 'object'

class fensapice_drop_vc(Real, AllowedValuesMixin):
    """
    'fensapice_drop_vc' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-vc'
    _python_name = 'fensapice_drop_vc'
    return_type = 'object'

class les_spec(String, AllowedValuesMixin):
    """
    'les_spec' child.
    """
    _version = '231'
    fluent_name = 'les-spec'
    _python_name = 'les_spec'
    return_type = 'object'

class b_1(Group):
    """
    'b' child.
    """
    _version = '231'
    fluent_name = 'b'
    _python_name = 'b'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class phase_5_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'inlet_number', 'phase_spec', 'frame_of_reference', 'gauge_total_pressure', 'gauge_pressure', 't0', 'direction_spec', 'flow_spec', 'ht_local', 'ht_total', 'vmag', 'ht_bottom', 'den_spec', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'les_spec_name', 'rfg_number_of_modes', 'vm_number_of_vortices', 'vm_streamwise_fluct', 'vm_mass_conservation', 'stg_scale_limiter_type', 'stg_ti_limiter', 'stg_tvr_limiter', 'stg_dw_limiter', 'volumetric_synthetic_turbulence_generator', 'volumetric_synthetic_turbulence_generator_option', 'volumetric_synthetic_turbulence_generator_option_thickness', 'prevent_reverse_flow', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'granular_temperature', 'iac', 'lsfun', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'equ_required', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'mixing_plane_thread', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'les_spec', 'b', 'strength']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        inlet_number=inlet_number,
        phase_spec=phase_spec,
        frame_of_reference=frame_of_reference,
        gauge_total_pressure=gauge_total_pressure,
        gauge_pressure=gauge_pressure,
        t0=t0,
        direction_spec=direction_spec,
        flow_spec=flow_spec,
        ht_local=ht_local,
        ht_total=ht_total,
        vmag=vmag,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_number_of_vortices=vm_number_of_vortices,
        vm_streamwise_fluct=vm_streamwise_fluct,
        vm_mass_conservation=vm_mass_conservation,
        stg_scale_limiter_type=stg_scale_limiter_type,
        stg_ti_limiter=stg_ti_limiter,
        stg_tvr_limiter=stg_tvr_limiter,
        stg_dw_limiter=stg_dw_limiter,
        volumetric_synthetic_turbulence_generator=volumetric_synthetic_turbulence_generator,
        volumetric_synthetic_turbulence_generator_option=volumetric_synthetic_turbulence_generator_option,
        volumetric_synthetic_turbulence_generator_option_thickness=volumetric_synthetic_turbulence_generator_option_thickness,
        prevent_reverse_flow=prevent_reverse_flow,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        equ_required=equ_required,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        mixing_plane_thread=mixing_plane_thread,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        les_spec=les_spec,
        b=b_1,
        strength=strength,
    )
    return_type = 'object'

class phase_5(NamedObject[phase_5_child], _NonCreatableNamedObjectMixin[phase_5_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_5_child
    return_type = 'object'

class inlet_vent_child(Group):
    """
    'child_object_type' of inlet_vent.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'inlet_vent_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'inlet_number', 'phase_spec', 'frame_of_reference', 'gauge_total_pressure', 'gauge_pressure', 't0', 'direction_spec', 'flow_spec', 'ht_local', 'ht_total', 'vmag', 'ht_bottom', 'den_spec', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'les_spec_name', 'rfg_number_of_modes', 'vm_number_of_vortices', 'vm_streamwise_fluct', 'vm_mass_conservation', 'stg_scale_limiter_type', 'stg_ti_limiter', 'stg_tvr_limiter', 'stg_dw_limiter', 'volumetric_synthetic_turbulence_generator', 'volumetric_synthetic_turbulence_generator_option', 'volumetric_synthetic_turbulence_generator_option_thickness', 'prevent_reverse_flow', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'granular_temperature', 'iac', 'lsfun', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'equ_required', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'mixing_plane_thread', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'les_spec', 'b', 'strength']
    _child_classes = dict(
        phase=phase_5,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        inlet_number=inlet_number,
        phase_spec=phase_spec,
        frame_of_reference=frame_of_reference,
        gauge_total_pressure=gauge_total_pressure,
        gauge_pressure=gauge_pressure,
        t0=t0,
        direction_spec=direction_spec,
        flow_spec=flow_spec,
        ht_local=ht_local,
        ht_total=ht_total,
        vmag=vmag,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_number_of_vortices=vm_number_of_vortices,
        vm_streamwise_fluct=vm_streamwise_fluct,
        vm_mass_conservation=vm_mass_conservation,
        stg_scale_limiter_type=stg_scale_limiter_type,
        stg_ti_limiter=stg_ti_limiter,
        stg_tvr_limiter=stg_tvr_limiter,
        stg_dw_limiter=stg_dw_limiter,
        volumetric_synthetic_turbulence_generator=volumetric_synthetic_turbulence_generator,
        volumetric_synthetic_turbulence_generator_option=volumetric_synthetic_turbulence_generator_option,
        volumetric_synthetic_turbulence_generator_option_thickness=volumetric_synthetic_turbulence_generator_option_thickness,
        prevent_reverse_flow=prevent_reverse_flow,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        equ_required=equ_required,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        mixing_plane_thread=mixing_plane_thread,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        les_spec=les_spec,
        b=b_1,
        strength=strength,
    )
    return_type = 'object'

class inlet_vent(NamedObject[inlet_vent_child], _NonCreatableNamedObjectMixin[inlet_vent_child]):
    """
    'inlet_vent' child.
    """
    _version = '231'
    fluent_name = 'inlet-vent'
    _python_name = 'inlet_vent'
    child_object_type = inlet_vent_child
    return_type = 'object'

class fan_omega(Real, AllowedValuesMixin):
    """
    'fan_omega' child.
    """
    _version = '231'
    fluent_name = 'fan-omega'
    _python_name = 'fan_omega'
    return_type = 'object'

class fan_origin_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of fan_origin.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'fan_origin_child'
    return_type = 'object'

class fan_origin(ListObject[fan_origin_child]):
    """
    'fan_origin' child.
    """
    _version = '231'
    fluent_name = 'fan-origin'
    _python_name = 'fan_origin'
    child_object_type = fan_origin_child
    return_type = 'object'

class phase_6_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'inlet_number', 'phase_spec', 'frame_of_reference', 'gauge_total_pressure', 'gauge_pressure', 't0', 'direction_spec', 'flow_spec', 'ht_local', 'ht_total', 'vmag', 'ht_bottom', 'den_spec', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'les_spec_name', 'rfg_number_of_modes', 'vm_number_of_vortices', 'vm_streamwise_fluct', 'vm_mass_conservation', 'stg_scale_limiter_type', 'stg_ti_limiter', 'stg_tvr_limiter', 'stg_dw_limiter', 'volumetric_synthetic_turbulence_generator', 'volumetric_synthetic_turbulence_generator_option', 'volumetric_synthetic_turbulence_generator_option_thickness', 'prevent_reverse_flow', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'granular_temperature', 'iac', 'lsfun', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'equ_required', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'mixing_plane_thread', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'les_spec', 'a', 'swirl_model', 'swirl_factor', 'fan_omega', 'fan_origin', 'strength', 'new_fan_definition']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        inlet_number=inlet_number,
        phase_spec=phase_spec,
        frame_of_reference=frame_of_reference,
        gauge_total_pressure=gauge_total_pressure,
        gauge_pressure=gauge_pressure,
        t0=t0,
        direction_spec=direction_spec,
        flow_spec=flow_spec,
        ht_local=ht_local,
        ht_total=ht_total,
        vmag=vmag,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_number_of_vortices=vm_number_of_vortices,
        vm_streamwise_fluct=vm_streamwise_fluct,
        vm_mass_conservation=vm_mass_conservation,
        stg_scale_limiter_type=stg_scale_limiter_type,
        stg_ti_limiter=stg_ti_limiter,
        stg_tvr_limiter=stg_tvr_limiter,
        stg_dw_limiter=stg_dw_limiter,
        volumetric_synthetic_turbulence_generator=volumetric_synthetic_turbulence_generator,
        volumetric_synthetic_turbulence_generator_option=volumetric_synthetic_turbulence_generator_option,
        volumetric_synthetic_turbulence_generator_option_thickness=volumetric_synthetic_turbulence_generator_option_thickness,
        prevent_reverse_flow=prevent_reverse_flow,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        equ_required=equ_required,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        mixing_plane_thread=mixing_plane_thread,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        les_spec=les_spec,
        a=a_1,
        swirl_model=swirl_model,
        swirl_factor=swirl_factor,
        fan_omega=fan_omega,
        fan_origin=fan_origin,
        strength=strength,
        new_fan_definition=new_fan_definition,
    )
    return_type = 'object'

class phase_6(NamedObject[phase_6_child], _NonCreatableNamedObjectMixin[phase_6_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_6_child
    return_type = 'object'

class intake_fan_child(Group):
    """
    'child_object_type' of intake_fan.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'intake_fan_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'inlet_number', 'phase_spec', 'frame_of_reference', 'gauge_total_pressure', 'gauge_pressure', 't0', 'direction_spec', 'flow_spec', 'ht_local', 'ht_total', 'vmag', 'ht_bottom', 'den_spec', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'les_spec_name', 'rfg_number_of_modes', 'vm_number_of_vortices', 'vm_streamwise_fluct', 'vm_mass_conservation', 'stg_scale_limiter_type', 'stg_ti_limiter', 'stg_tvr_limiter', 'stg_dw_limiter', 'volumetric_synthetic_turbulence_generator', 'volumetric_synthetic_turbulence_generator_option', 'volumetric_synthetic_turbulence_generator_option_thickness', 'prevent_reverse_flow', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'granular_temperature', 'iac', 'lsfun', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'equ_required', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'mixing_plane_thread', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'les_spec', 'a', 'swirl_model', 'swirl_factor', 'fan_omega', 'fan_origin', 'strength', 'new_fan_definition']
    _child_classes = dict(
        phase=phase_6,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        inlet_number=inlet_number,
        phase_spec=phase_spec,
        frame_of_reference=frame_of_reference,
        gauge_total_pressure=gauge_total_pressure,
        gauge_pressure=gauge_pressure,
        t0=t0,
        direction_spec=direction_spec,
        flow_spec=flow_spec,
        ht_local=ht_local,
        ht_total=ht_total,
        vmag=vmag,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_number_of_vortices=vm_number_of_vortices,
        vm_streamwise_fluct=vm_streamwise_fluct,
        vm_mass_conservation=vm_mass_conservation,
        stg_scale_limiter_type=stg_scale_limiter_type,
        stg_ti_limiter=stg_ti_limiter,
        stg_tvr_limiter=stg_tvr_limiter,
        stg_dw_limiter=stg_dw_limiter,
        volumetric_synthetic_turbulence_generator=volumetric_synthetic_turbulence_generator,
        volumetric_synthetic_turbulence_generator_option=volumetric_synthetic_turbulence_generator_option,
        volumetric_synthetic_turbulence_generator_option_thickness=volumetric_synthetic_turbulence_generator_option_thickness,
        prevent_reverse_flow=prevent_reverse_flow,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        equ_required=equ_required,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        mixing_plane_thread=mixing_plane_thread,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        les_spec=les_spec,
        a=a_1,
        swirl_model=swirl_model,
        swirl_factor=swirl_factor,
        fan_omega=fan_omega,
        fan_origin=fan_origin,
        strength=strength,
        new_fan_definition=new_fan_definition,
    )
    return_type = 'object'

class intake_fan(NamedObject[intake_fan_child], _NonCreatableNamedObjectMixin[intake_fan_child]):
    """
    'intake_fan' child.
    """
    _version = '231'
    fluent_name = 'intake-fan'
    _python_name = 'intake_fan'
    child_object_type = intake_fan_child
    return_type = 'object'

class non_overlap_zone_name(String, AllowedValuesMixin):
    """
    'non_overlap_zone_name' child.
    """
    _version = '231'
    fluent_name = 'non-overlap-zone-name'
    _python_name = 'non_overlap_zone_name'
    return_type = 'object'

class phase_7_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'non_overlap_zone_name']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        non_overlap_zone_name=non_overlap_zone_name,
    )
    return_type = 'object'

class phase_7(NamedObject[phase_7_child], _NonCreatableNamedObjectMixin[phase_7_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_7_child
    return_type = 'object'

class interface_child(Group):
    """
    'child_object_type' of interface.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'interface_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'non_overlap_zone_name']
    _child_classes = dict(
        phase=phase_7,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        non_overlap_zone_name=non_overlap_zone_name,
    )
    return_type = 'object'

class interface(NamedObject[interface_child], _NonCreatableNamedObjectMixin[interface_child]):
    """
    'interface' child.
    """
    _version = '231'
    fluent_name = 'interface'
    _python_name = 'interface'
    child_object_type = interface_child
    return_type = 'object'

class is_not_a_rans_les_interface(Boolean, AllowedValuesMixin):
    """
    'is_not_a_rans_les_interface' child.
    """
    _version = '231'
    fluent_name = 'is-not-a-rans-les-interface'
    _python_name = 'is_not_a_rans_les_interface'
    return_type = 'object'

class phase_8_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['is_not_a_rans_les_interface']
    _child_classes = dict(
        is_not_a_rans_les_interface=is_not_a_rans_les_interface,
    )
    return_type = 'object'

class phase_8(NamedObject[phase_8_child], _NonCreatableNamedObjectMixin[phase_8_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_8_child
    return_type = 'object'

class interior_child(Group):
    """
    'child_object_type' of interior.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'interior_child'
    child_names = ['phase', 'is_not_a_rans_les_interface']
    _child_classes = dict(
        phase=phase_8,
        is_not_a_rans_les_interface=is_not_a_rans_les_interface,
    )
    return_type = 'object'

class interior(NamedObject[interior_child], _NonCreatableNamedObjectMixin[interior_child]):
    """
    'interior' child.
    """
    _version = '231'
    fluent_name = 'interior'
    _python_name = 'interior'
    child_object_type = interior_child
    return_type = 'object'

class mass_flow(Group):
    """
    'mass_flow' child.
    """
    _version = '231'
    fluent_name = 'mass-flow'
    _python_name = 'mass_flow'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ec_mass_flow(Group):
    """
    'ec_mass_flow' child.
    """
    _version = '231'
    fluent_name = 'ec-mass-flow'
    _python_name = 'ec_mass_flow'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class mass_flux(Group):
    """
    'mass_flux' child.
    """
    _version = '231'
    fluent_name = 'mass-flux'
    _python_name = 'mass_flux'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class mass_flux_ave(Real, AllowedValuesMixin):
    """
    'mass_flux_ave' child.
    """
    _version = '231'
    fluent_name = 'mass-flux-ave'
    _python_name = 'mass_flux_ave'
    return_type = 'object'

class tref(Real, AllowedValuesMixin):
    """
    'tref' child.
    """
    _version = '231'
    fluent_name = 'tref'
    _python_name = 'tref'
    return_type = 'object'

class pref(Real, AllowedValuesMixin):
    """
    'pref' child.
    """
    _version = '231'
    fluent_name = 'pref'
    _python_name = 'pref'
    return_type = 'object'

class upstream_torque(Real, AllowedValuesMixin):
    """
    'upstream_torque' child.
    """
    _version = '231'
    fluent_name = 'upstream-torque'
    _python_name = 'upstream_torque'
    return_type = 'object'

class upstream_t_enthalpy(Real, AllowedValuesMixin):
    """
    'upstream_t_enthalpy' child.
    """
    _version = '231'
    fluent_name = 'upstream-t-enthalpy'
    _python_name = 'upstream_t_enthalpy'
    return_type = 'object'

class slip_velocity(String, AllowedValuesMixin):
    """
    'slip_velocity' child.
    """
    _version = '231'
    fluent_name = 'slip-velocity'
    _python_name = 'slip_velocity'
    return_type = 'object'

class velocity_ratio(Group):
    """
    'velocity_ratio' child.
    """
    _version = '231'
    fluent_name = 'velocity-ratio'
    _python_name = 'velocity_ratio'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class volume_frac(Group):
    """
    'volume_frac' child.
    """
    _version = '231'
    fluent_name = 'volume-frac'
    _python_name = 'volume_frac'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class phase_9_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'inlet_number', 'phase_spec', 'ht_local', 'ht_bottom', 'den_spec', 'frame_of_reference', 'flow_spec', 'mass_flow', 'ec_mass_flow', 'mass_flux', 'mass_flux_ave', 'tref', 'pref', 'upstream_torque', 'upstream_t_enthalpy', 't0', 'gauge_pressure', 'direction_spec', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'equ_required', 'swirl_model', 'swirl_factor', 'fan_origin', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'tss_scalar', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'mixing_plane_thread', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'slip_velocity', 'velocity_ratio', 'volume_frac', 'granular_temperature', 'iac', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        inlet_number=inlet_number,
        phase_spec=phase_spec,
        ht_local=ht_local,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        frame_of_reference=frame_of_reference,
        flow_spec=flow_spec,
        mass_flow=mass_flow,
        ec_mass_flow=ec_mass_flow,
        mass_flux=mass_flux,
        mass_flux_ave=mass_flux_ave,
        tref=tref,
        pref=pref,
        upstream_torque=upstream_torque,
        upstream_t_enthalpy=upstream_t_enthalpy,
        t0=t0,
        gauge_pressure=gauge_pressure,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        equ_required=equ_required,
        swirl_model=swirl_model,
        swirl_factor=swirl_factor,
        fan_origin=fan_origin,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        tss_scalar=tss_scalar,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        mixing_plane_thread=mixing_plane_thread,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        slip_velocity=slip_velocity,
        velocity_ratio=velocity_ratio,
        volume_frac=volume_frac,
        granular_temperature=granular_temperature,
        iac=iac,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
    )
    return_type = 'object'

class phase_9(NamedObject[phase_9_child], _NonCreatableNamedObjectMixin[phase_9_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_9_child
    return_type = 'object'

class mass_flow_inlet_child(Group):
    """
    'child_object_type' of mass_flow_inlet.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'mass_flow_inlet_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'inlet_number', 'phase_spec', 'ht_local', 'ht_bottom', 'den_spec', 'frame_of_reference', 'flow_spec', 'mass_flow', 'ec_mass_flow', 'mass_flux', 'mass_flux_ave', 'tref', 'pref', 'upstream_torque', 'upstream_t_enthalpy', 't0', 'gauge_pressure', 'direction_spec', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'equ_required', 'swirl_model', 'swirl_factor', 'fan_origin', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'tss_scalar', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'mixing_plane_thread', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'slip_velocity', 'velocity_ratio', 'volume_frac', 'granular_temperature', 'iac', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave']
    _child_classes = dict(
        phase=phase_9,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        inlet_number=inlet_number,
        phase_spec=phase_spec,
        ht_local=ht_local,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        frame_of_reference=frame_of_reference,
        flow_spec=flow_spec,
        mass_flow=mass_flow,
        ec_mass_flow=ec_mass_flow,
        mass_flux=mass_flux,
        mass_flux_ave=mass_flux_ave,
        tref=tref,
        pref=pref,
        upstream_torque=upstream_torque,
        upstream_t_enthalpy=upstream_t_enthalpy,
        t0=t0,
        gauge_pressure=gauge_pressure,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        equ_required=equ_required,
        swirl_model=swirl_model,
        swirl_factor=swirl_factor,
        fan_origin=fan_origin,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        tss_scalar=tss_scalar,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        mixing_plane_thread=mixing_plane_thread,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        slip_velocity=slip_velocity,
        velocity_ratio=velocity_ratio,
        volume_frac=volume_frac,
        granular_temperature=granular_temperature,
        iac=iac,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
    )
    return_type = 'object'

class mass_flow_inlet(NamedObject[mass_flow_inlet_child], _NonCreatableNamedObjectMixin[mass_flow_inlet_child]):
    """
    'mass_flow_inlet' child.
    """
    _version = '231'
    fluent_name = 'mass-flow-inlet'
    _python_name = 'mass_flow_inlet'
    child_object_type = mass_flow_inlet_child
    return_type = 'object'

class mass_flow_outlet_child(Group):
    """
    'child_object_type' of mass_flow_outlet.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'mass_flow_outlet_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'inlet_number', 'phase_spec', 'ht_local', 'ht_bottom', 'den_spec', 'frame_of_reference', 'flow_spec', 'mass_flow', 'ec_mass_flow', 'mass_flux', 'mass_flux_ave', 'tref', 'pref', 'upstream_torque', 'upstream_t_enthalpy', 't0', 'gauge_pressure', 'direction_spec', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'equ_required', 'swirl_model', 'swirl_factor', 'fan_origin', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'tss_scalar', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'mixing_plane_thread', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'slip_velocity', 'velocity_ratio', 'volume_frac', 'granular_temperature', 'iac', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave']
    _child_classes = dict(
        phase=phase_9,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        inlet_number=inlet_number,
        phase_spec=phase_spec,
        ht_local=ht_local,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        frame_of_reference=frame_of_reference,
        flow_spec=flow_spec,
        mass_flow=mass_flow,
        ec_mass_flow=ec_mass_flow,
        mass_flux=mass_flux,
        mass_flux_ave=mass_flux_ave,
        tref=tref,
        pref=pref,
        upstream_torque=upstream_torque,
        upstream_t_enthalpy=upstream_t_enthalpy,
        t0=t0,
        gauge_pressure=gauge_pressure,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        equ_required=equ_required,
        swirl_model=swirl_model,
        swirl_factor=swirl_factor,
        fan_origin=fan_origin,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        tss_scalar=tss_scalar,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        mixing_plane_thread=mixing_plane_thread,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        slip_velocity=slip_velocity,
        velocity_ratio=velocity_ratio,
        volume_frac=volume_frac,
        granular_temperature=granular_temperature,
        iac=iac,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
    )
    return_type = 'object'

class mass_flow_outlet(NamedObject[mass_flow_outlet_child], _NonCreatableNamedObjectMixin[mass_flow_outlet_child]):
    """
    'mass_flow_outlet' child.
    """
    _version = '231'
    fluent_name = 'mass-flow-outlet'
    _python_name = 'mass_flow_outlet'
    child_object_type = mass_flow_outlet_child
    return_type = 'object'

class phase_10_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    return_type = 'object'

class phase_10(NamedObject[phase_10_child], _NonCreatableNamedObjectMixin[phase_10_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_10_child
    return_type = 'object'

class network_child(Group):
    """
    'child_object_type' of network.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'network_child'
    child_names = ['phase']
    _child_classes = dict(
        phase=phase_10,
    )
    return_type = 'object'

class network(NamedObject[network_child], _NonCreatableNamedObjectMixin[network_child]):
    """
    'network' child.
    """
    _version = '231'
    fluent_name = 'network'
    _python_name = 'network'
    child_object_type = network_child
    return_type = 'object'

class thermal_bc(String, AllowedValuesMixin):
    """
    'thermal_bc' child.
    """
    _version = '231'
    fluent_name = 'thermal-bc'
    _python_name = 'thermal_bc'
    return_type = 'object'

class temperature_1(Group):
    """
    'temperature' child.
    """
    _version = '231'
    fluent_name = 'temperature'
    _python_name = 'temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class q(Group):
    """
    'q' child.
    """
    _version = '231'
    fluent_name = 'q'
    _python_name = 'q'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class phase_11_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['thermal_bc', 'temperature', 'q']
    _child_classes = dict(
        thermal_bc=thermal_bc,
        temperature=temperature_1,
        q=q,
    )
    return_type = 'object'

class phase_11(NamedObject[phase_11_child], _NonCreatableNamedObjectMixin[phase_11_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_11_child
    return_type = 'object'

class network_end_child(Group):
    """
    'child_object_type' of network_end.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'network_end_child'
    child_names = ['phase', 'thermal_bc', 'temperature', 'q']
    _child_classes = dict(
        phase=phase_11,
        thermal_bc=thermal_bc,
        temperature=temperature_1,
        q=q,
    )
    return_type = 'object'

class network_end(NamedObject[network_end_child], _NonCreatableNamedObjectMixin[network_end_child]):
    """
    'network_end' child.
    """
    _version = '231'
    fluent_name = 'network-end'
    _python_name = 'network_end'
    child_object_type = network_end_child
    return_type = 'object'

class flowrate_frac(Real, AllowedValuesMixin):
    """
    'flowrate_frac' child.
    """
    _version = '231'
    fluent_name = 'flowrate-frac'
    _python_name = 'flowrate_frac'
    return_type = 'object'

class phase_12_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'flowrate_frac', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'uds_bc', 'uds', 'radiation_bc', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        flowrate_frac=flowrate_frac,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        uds_bc=uds_bc,
        uds=uds,
        radiation_bc=radiation_bc,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    return_type = 'object'

class phase_12(NamedObject[phase_12_child], _NonCreatableNamedObjectMixin[phase_12_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_12_child
    return_type = 'object'

class outflow_child(Group):
    """
    'child_object_type' of outflow.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'outflow_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'flowrate_frac', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'uds_bc', 'uds', 'radiation_bc', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        phase=phase_12,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        flowrate_frac=flowrate_frac,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        uds_bc=uds_bc,
        uds=uds,
        radiation_bc=radiation_bc,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    return_type = 'object'

class outflow(NamedObject[outflow_child], _NonCreatableNamedObjectMixin[outflow_child]):
    """
    'outflow' child.
    """
    _version = '231'
    fluent_name = 'outflow'
    _python_name = 'outflow'
    child_object_type = outflow_child
    return_type = 'object'

class phase_13_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'outlet_number', 'pressure_spec_method', 'press_spec', 'frame_of_reference', 'phase_spec', 'ht_local', 'gauge_pressure', 'p_profile_multiplier', 'ht_bottom', 'den_spec', 't0', 'direction_spec', 'coordinate_system', 'flow_direction', 'axis_direction', 'axis_origin', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fmean2', 'fvar', 'fvar2', 'granular_temperature', 'iac', 'lsfun', 'vof_spec', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar', 'fensapice_flow_bc_subtype', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'mixing_plane_thread', 'ac_options', 'p_backflow_spec', 'p_backflow_spec_gen', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'prevent_reverse_flow', 'radial', 'avg_press_spec', 'press_averaging_method', 'targeted_mf_boundary', 'targeted_mf', 'targeted_mf_pmax', 'targeted_mf_pmin', 'gen_nrbc_spec', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'b', 'strength']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        outlet_number=outlet_number,
        pressure_spec_method=pressure_spec_method,
        press_spec=press_spec,
        frame_of_reference=frame_of_reference,
        phase_spec=phase_spec,
        ht_local=ht_local,
        gauge_pressure=gauge_pressure,
        p_profile_multiplier=p_profile_multiplier,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        t0=t0,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fmean2=fmean2,
        fvar=fvar,
        fvar2=fvar2,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        vof_spec=vof_spec,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        mixing_plane_thread=mixing_plane_thread,
        ac_options=ac_options,
        p_backflow_spec=p_backflow_spec,
        p_backflow_spec_gen=p_backflow_spec_gen,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        prevent_reverse_flow=prevent_reverse_flow,
        radial=radial,
        avg_press_spec=avg_press_spec,
        press_averaging_method=press_averaging_method,
        targeted_mf_boundary=targeted_mf_boundary,
        targeted_mf=targeted_mf,
        targeted_mf_pmax=targeted_mf_pmax,
        targeted_mf_pmin=targeted_mf_pmin,
        gen_nrbc_spec=gen_nrbc_spec,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        b=b_1,
        strength=strength,
    )
    return_type = 'object'

class phase_13(NamedObject[phase_13_child], _NonCreatableNamedObjectMixin[phase_13_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_13_child
    return_type = 'object'

class outlet_vent_child(Group):
    """
    'child_object_type' of outlet_vent.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'outlet_vent_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'outlet_number', 'pressure_spec_method', 'press_spec', 'frame_of_reference', 'phase_spec', 'ht_local', 'gauge_pressure', 'p_profile_multiplier', 'ht_bottom', 'den_spec', 't0', 'direction_spec', 'coordinate_system', 'flow_direction', 'axis_direction', 'axis_origin', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fmean2', 'fvar', 'fvar2', 'granular_temperature', 'iac', 'lsfun', 'vof_spec', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar', 'fensapice_flow_bc_subtype', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'mixing_plane_thread', 'ac_options', 'p_backflow_spec', 'p_backflow_spec_gen', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'prevent_reverse_flow', 'radial', 'avg_press_spec', 'press_averaging_method', 'targeted_mf_boundary', 'targeted_mf', 'targeted_mf_pmax', 'targeted_mf_pmin', 'gen_nrbc_spec', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'b', 'strength']
    _child_classes = dict(
        phase=phase_13,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        outlet_number=outlet_number,
        pressure_spec_method=pressure_spec_method,
        press_spec=press_spec,
        frame_of_reference=frame_of_reference,
        phase_spec=phase_spec,
        ht_local=ht_local,
        gauge_pressure=gauge_pressure,
        p_profile_multiplier=p_profile_multiplier,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        t0=t0,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fmean2=fmean2,
        fvar=fvar,
        fvar2=fvar2,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        vof_spec=vof_spec,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        mixing_plane_thread=mixing_plane_thread,
        ac_options=ac_options,
        p_backflow_spec=p_backflow_spec,
        p_backflow_spec_gen=p_backflow_spec_gen,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        prevent_reverse_flow=prevent_reverse_flow,
        radial=radial,
        avg_press_spec=avg_press_spec,
        press_averaging_method=press_averaging_method,
        targeted_mf_boundary=targeted_mf_boundary,
        targeted_mf=targeted_mf,
        targeted_mf_pmax=targeted_mf_pmax,
        targeted_mf_pmin=targeted_mf_pmin,
        gen_nrbc_spec=gen_nrbc_spec,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        b=b_1,
        strength=strength,
    )
    return_type = 'object'

class outlet_vent(NamedObject[outlet_vent_child], _NonCreatableNamedObjectMixin[outlet_vent_child]):
    """
    'outlet_vent' child.
    """
    _version = '231'
    fluent_name = 'outlet-vent'
    _python_name = 'outlet_vent'
    child_object_type = outlet_vent_child
    return_type = 'object'

class overset_child(Group):
    """
    'child_object_type' of overset.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'overset_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        phase=phase_2,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class overset(NamedObject[overset_child], _NonCreatableNamedObjectMixin[overset_child]):
    """
    'overset' child.
    """
    _version = '231'
    fluent_name = 'overset'
    _python_name = 'overset'
    child_object_type = overset_child
    return_type = 'object'

class angular(Boolean, AllowedValuesMixin):
    """
    'angular' child.
    """
    _version = '231'
    fluent_name = 'angular?'
    _python_name = 'angular'
    return_type = 'object'

class p_jump(Real, AllowedValuesMixin):
    """
    'p_jump' child.
    """
    _version = '231'
    fluent_name = 'p-jump'
    _python_name = 'p_jump'
    return_type = 'object'

class ai(Real, AllowedValuesMixin):
    """
    'ai' child.
    """
    _version = '231'
    fluent_name = 'ai'
    _python_name = 'ai'
    return_type = 'object'

class aj(Real, AllowedValuesMixin):
    """
    'aj' child.
    """
    _version = '231'
    fluent_name = 'aj'
    _python_name = 'aj'
    return_type = 'object'

class ak(Real, AllowedValuesMixin):
    """
    'ak' child.
    """
    _version = '231'
    fluent_name = 'ak'
    _python_name = 'ak'
    return_type = 'object'

class x_origin(Real, AllowedValuesMixin):
    """
    'x_origin' child.
    """
    _version = '231'
    fluent_name = 'x-origin'
    _python_name = 'x_origin'
    return_type = 'object'

class y_origin(Real, AllowedValuesMixin):
    """
    'y_origin' child.
    """
    _version = '231'
    fluent_name = 'y-origin'
    _python_name = 'y_origin'
    return_type = 'object'

class z_origin(Real, AllowedValuesMixin):
    """
    'z_origin' child.
    """
    _version = '231'
    fluent_name = 'z-origin'
    _python_name = 'z_origin'
    return_type = 'object'

class shift_x(Real, AllowedValuesMixin):
    """
    'shift_x' child.
    """
    _version = '231'
    fluent_name = 'shift-x'
    _python_name = 'shift_x'
    return_type = 'object'

class shift_y(Real, AllowedValuesMixin):
    """
    'shift_y' child.
    """
    _version = '231'
    fluent_name = 'shift-y'
    _python_name = 'shift_y'
    return_type = 'object'

class shift_z(Real, AllowedValuesMixin):
    """
    'shift_z' child.
    """
    _version = '231'
    fluent_name = 'shift-z'
    _python_name = 'shift_z'
    return_type = 'object'

class per_angle(Real, AllowedValuesMixin):
    """
    'per_angle' child.
    """
    _version = '231'
    fluent_name = 'per-angle'
    _python_name = 'per_angle'
    return_type = 'object'

class phase_14_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'angular', 'p_jump', 'ai', 'aj', 'ak', 'x_origin', 'y_origin', 'z_origin', 'shift_x', 'shift_y', 'shift_z', 'per_angle']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        angular=angular,
        p_jump=p_jump,
        ai=ai,
        aj=aj,
        ak=ak,
        x_origin=x_origin,
        y_origin=y_origin,
        z_origin=z_origin,
        shift_x=shift_x,
        shift_y=shift_y,
        shift_z=shift_z,
        per_angle=per_angle,
    )
    return_type = 'object'

class phase_14(NamedObject[phase_14_child], _NonCreatableNamedObjectMixin[phase_14_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_14_child
    return_type = 'object'

class periodic_child(Group):
    """
    'child_object_type' of periodic.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'periodic_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'angular', 'p_jump', 'ai', 'aj', 'ak', 'x_origin', 'y_origin', 'z_origin', 'shift_x', 'shift_y', 'shift_z', 'per_angle']
    _child_classes = dict(
        phase=phase_14,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        angular=angular,
        p_jump=p_jump,
        ai=ai,
        aj=aj,
        ak=ak,
        x_origin=x_origin,
        y_origin=y_origin,
        z_origin=z_origin,
        shift_x=shift_x,
        shift_y=shift_y,
        shift_z=shift_z,
        per_angle=per_angle,
    )
    return_type = 'object'

class periodic(NamedObject[periodic_child], _NonCreatableNamedObjectMixin[periodic_child]):
    """
    'periodic' child.
    """
    _version = '231'
    fluent_name = 'periodic'
    _python_name = 'periodic'
    child_object_type = periodic_child
    return_type = 'object'

class alpha(Real, AllowedValuesMixin):
    """
    'alpha' child.
    """
    _version = '231'
    fluent_name = 'alpha'
    _python_name = 'alpha'
    return_type = 'object'

class dm(Real, AllowedValuesMixin):
    """
    'dm' child.
    """
    _version = '231'
    fluent_name = 'dm'
    _python_name = 'dm'
    return_type = 'object'

class c2_1(Real, AllowedValuesMixin):
    """
    'c2' child.
    """
    _version = '231'
    fluent_name = 'c2'
    _python_name = 'c2'
    return_type = 'object'

class thermal_ctk(Real, AllowedValuesMixin):
    """
    'thermal_ctk' child.
    """
    _version = '231'
    fluent_name = 'thermal-ctk'
    _python_name = 'thermal_ctk'
    return_type = 'object'

class v_absp(Group):
    """
    'v_absp' child.
    """
    _version = '231'
    fluent_name = 'v-absp'
    _python_name = 'v_absp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ir_absp(Group):
    """
    'ir_absp' child.
    """
    _version = '231'
    fluent_name = 'ir-absp'
    _python_name = 'ir_absp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ir_trans(Group):
    """
    'ir_trans' child.
    """
    _version = '231'
    fluent_name = 'ir-trans'
    _python_name = 'ir_trans'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class v_trans(Group):
    """
    'v_trans' child.
    """
    _version = '231'
    fluent_name = 'v-trans'
    _python_name = 'v_trans'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class jump_adhesion(Boolean, AllowedValuesMixin):
    """
    'jump_adhesion' child.
    """
    _version = '231'
    fluent_name = 'jump-adhesion?'
    _python_name = 'jump_adhesion'
    return_type = 'object'

class adhesion_constrained(Boolean, AllowedValuesMixin):
    """
    'adhesion_constrained' child.
    """
    _version = '231'
    fluent_name = 'adhesion-constrained?'
    _python_name = 'adhesion_constrained'
    return_type = 'object'

class adhesion_angle_child(Group):
    """
    'child_object_type' of adhesion_angle.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'adhesion_angle_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class adhesion_angle(NamedObject[adhesion_angle_child], _NonCreatableNamedObjectMixin[adhesion_angle_child]):
    """
    'adhesion_angle' child.
    """
    _version = '231'
    fluent_name = 'adhesion-angle'
    _python_name = 'adhesion_angle'
    child_object_type = adhesion_angle_child
    return_type = 'object'

class phase_15_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'porous_jump_turb_wall_treatment', 'alpha', 'dm', 'c2', 'thermal_ctk', 'solar_fluxes', 'v_absp', 'ir_absp', 'ir_trans', 'v_trans', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'strength', 'jump_adhesion', 'adhesion_constrained', 'adhesion_angle', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        alpha=alpha,
        dm=dm,
        c2=c2_1,
        thermal_ctk=thermal_ctk,
        solar_fluxes=solar_fluxes,
        v_absp=v_absp,
        ir_absp=ir_absp,
        ir_trans=ir_trans,
        v_trans=v_trans,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        strength=strength,
        jump_adhesion=jump_adhesion,
        adhesion_constrained=adhesion_constrained,
        adhesion_angle=adhesion_angle,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
    )
    return_type = 'object'

class phase_15(NamedObject[phase_15_child], _NonCreatableNamedObjectMixin[phase_15_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_15_child
    return_type = 'object'

class porous_jump_child(Group):
    """
    'child_object_type' of porous_jump.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'porous_jump_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'porous_jump_turb_wall_treatment', 'alpha', 'dm', 'c2', 'thermal_ctk', 'solar_fluxes', 'v_absp', 'ir_absp', 'ir_trans', 'v_trans', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'strength', 'jump_adhesion', 'adhesion_constrained', 'adhesion_angle', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value']
    _child_classes = dict(
        phase=phase_15,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        alpha=alpha,
        dm=dm,
        c2=c2_1,
        thermal_ctk=thermal_ctk,
        solar_fluxes=solar_fluxes,
        v_absp=v_absp,
        ir_absp=ir_absp,
        ir_trans=ir_trans,
        v_trans=v_trans,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        strength=strength,
        jump_adhesion=jump_adhesion,
        adhesion_constrained=adhesion_constrained,
        adhesion_angle=adhesion_angle,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
    )
    return_type = 'object'

class porous_jump(NamedObject[porous_jump_child], _NonCreatableNamedObjectMixin[porous_jump_child]):
    """
    'porous_jump' child.
    """
    _version = '231'
    fluent_name = 'porous-jump'
    _python_name = 'porous_jump'
    child_object_type = porous_jump_child
    return_type = 'object'

class m(Group):
    """
    'm' child.
    """
    _version = '231'
    fluent_name = 'm'
    _python_name = 'm'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class t(Group):
    """
    't' child.
    """
    _version = '231'
    fluent_name = 't'
    _python_name = 't'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class non_equil_boundary(Boolean, AllowedValuesMixin):
    """
    'non_equil_boundary' child.
    """
    _version = '231'
    fluent_name = 'non-equil-boundary?'
    _python_name = 'non_equil_boundary'
    return_type = 'object'

class tve(Group):
    """
    'tve' child.
    """
    _version = '231'
    fluent_name = 'tve'
    _python_name = 'tve'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ni_1(Group):
    """
    'ni' child.
    """
    _version = '231'
    fluent_name = 'ni'
    _python_name = 'ni'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class nj_1(Group):
    """
    'nj' child.
    """
    _version = '231'
    fluent_name = 'nj'
    _python_name = 'nj'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class nk_1(Group):
    """
    'nk' child.
    """
    _version = '231'
    fluent_name = 'nk'
    _python_name = 'nk'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class phase_16_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'gauge_pressure', 'm', 't', 'non_equil_boundary', 'tve', 'coordinate_system', 'ni', 'nj', 'nk', 'flow_direction', 'axis_direction', 'axis_origin', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'uds_bc', 'uds', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        gauge_pressure=gauge_pressure,
        m=m,
        t=t,
        non_equil_boundary=non_equil_boundary,
        tve=tve,
        coordinate_system=coordinate_system,
        ni=ni_1,
        nj=nj_1,
        nk=nk_1,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        uds_bc=uds_bc,
        uds=uds,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    return_type = 'object'

class phase_16(NamedObject[phase_16_child], _NonCreatableNamedObjectMixin[phase_16_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_16_child
    return_type = 'object'

class pressure_far_field_child(Group):
    """
    'child_object_type' of pressure_far_field.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pressure_far_field_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'gauge_pressure', 'm', 't', 'non_equil_boundary', 'tve', 'coordinate_system', 'ni', 'nj', 'nk', 'flow_direction', 'axis_direction', 'axis_origin', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'uds_bc', 'uds', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        phase=phase_16,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        gauge_pressure=gauge_pressure,
        m=m,
        t=t,
        non_equil_boundary=non_equil_boundary,
        tve=tve,
        coordinate_system=coordinate_system,
        ni=ni_1,
        nj=nj_1,
        nk=nk_1,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        uds_bc=uds_bc,
        uds=uds,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    return_type = 'object'

class pressure_far_field(NamedObject[pressure_far_field_child], _NonCreatableNamedObjectMixin[pressure_far_field_child]):
    """
    'pressure_far_field' child.
    """
    _version = '231'
    fluent_name = 'pressure-far-field'
    _python_name = 'pressure_far_field'
    child_object_type = pressure_far_field_child
    return_type = 'object'

class phase_17_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'inlet_number', 'phase_spec', 'frame_of_reference', 'gauge_total_pressure', 'gauge_pressure', 't0', 'direction_spec', 'flow_spec', 'ht_local', 'ht_total', 'vmag', 'ht_bottom', 'den_spec', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'les_spec_name', 'rfg_number_of_modes', 'vm_number_of_vortices', 'vm_streamwise_fluct', 'vm_mass_conservation', 'stg_scale_limiter_type', 'stg_ti_limiter', 'stg_tvr_limiter', 'stg_dw_limiter', 'volumetric_synthetic_turbulence_generator', 'volumetric_synthetic_turbulence_generator_option', 'volumetric_synthetic_turbulence_generator_option_thickness', 'prevent_reverse_flow', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'granular_temperature', 'iac', 'lsfun', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'equ_required', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'mixing_plane_thread', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'les_spec']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        inlet_number=inlet_number,
        phase_spec=phase_spec,
        frame_of_reference=frame_of_reference,
        gauge_total_pressure=gauge_total_pressure,
        gauge_pressure=gauge_pressure,
        t0=t0,
        direction_spec=direction_spec,
        flow_spec=flow_spec,
        ht_local=ht_local,
        ht_total=ht_total,
        vmag=vmag,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_number_of_vortices=vm_number_of_vortices,
        vm_streamwise_fluct=vm_streamwise_fluct,
        vm_mass_conservation=vm_mass_conservation,
        stg_scale_limiter_type=stg_scale_limiter_type,
        stg_ti_limiter=stg_ti_limiter,
        stg_tvr_limiter=stg_tvr_limiter,
        stg_dw_limiter=stg_dw_limiter,
        volumetric_synthetic_turbulence_generator=volumetric_synthetic_turbulence_generator,
        volumetric_synthetic_turbulence_generator_option=volumetric_synthetic_turbulence_generator_option,
        volumetric_synthetic_turbulence_generator_option_thickness=volumetric_synthetic_turbulence_generator_option_thickness,
        prevent_reverse_flow=prevent_reverse_flow,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        equ_required=equ_required,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        mixing_plane_thread=mixing_plane_thread,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        les_spec=les_spec,
    )
    return_type = 'object'

class phase_17(NamedObject[phase_17_child], _NonCreatableNamedObjectMixin[phase_17_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_17_child
    return_type = 'object'

class pressure_inlet_child(Group):
    """
    'child_object_type' of pressure_inlet.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pressure_inlet_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'inlet_number', 'phase_spec', 'frame_of_reference', 'gauge_total_pressure', 'gauge_pressure', 't0', 'direction_spec', 'flow_spec', 'ht_local', 'ht_total', 'vmag', 'ht_bottom', 'den_spec', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'les_spec_name', 'rfg_number_of_modes', 'vm_number_of_vortices', 'vm_streamwise_fluct', 'vm_mass_conservation', 'stg_scale_limiter_type', 'stg_ti_limiter', 'stg_tvr_limiter', 'stg_dw_limiter', 'volumetric_synthetic_turbulence_generator', 'volumetric_synthetic_turbulence_generator_option', 'volumetric_synthetic_turbulence_generator_option_thickness', 'prevent_reverse_flow', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'granular_temperature', 'iac', 'lsfun', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'equ_required', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'mixing_plane_thread', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'les_spec']
    _child_classes = dict(
        phase=phase_17,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        inlet_number=inlet_number,
        phase_spec=phase_spec,
        frame_of_reference=frame_of_reference,
        gauge_total_pressure=gauge_total_pressure,
        gauge_pressure=gauge_pressure,
        t0=t0,
        direction_spec=direction_spec,
        flow_spec=flow_spec,
        ht_local=ht_local,
        ht_total=ht_total,
        vmag=vmag,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_number_of_vortices=vm_number_of_vortices,
        vm_streamwise_fluct=vm_streamwise_fluct,
        vm_mass_conservation=vm_mass_conservation,
        stg_scale_limiter_type=stg_scale_limiter_type,
        stg_ti_limiter=stg_ti_limiter,
        stg_tvr_limiter=stg_tvr_limiter,
        stg_dw_limiter=stg_dw_limiter,
        volumetric_synthetic_turbulence_generator=volumetric_synthetic_turbulence_generator,
        volumetric_synthetic_turbulence_generator_option=volumetric_synthetic_turbulence_generator_option,
        volumetric_synthetic_turbulence_generator_option_thickness=volumetric_synthetic_turbulence_generator_option_thickness,
        prevent_reverse_flow=prevent_reverse_flow,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        equ_required=equ_required,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        mixing_plane_thread=mixing_plane_thread,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        les_spec=les_spec,
    )
    return_type = 'object'

class pressure_inlet(NamedObject[pressure_inlet_child], _NonCreatableNamedObjectMixin[pressure_inlet_child]):
    """
    'pressure_inlet' child.
    """
    _version = '231'
    fluent_name = 'pressure-inlet'
    _python_name = 'pressure_inlet'
    child_object_type = pressure_inlet_child
    return_type = 'object'

class phase_18_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'outlet_number', 'pressure_spec_method', 'press_spec', 'frame_of_reference', 'phase_spec', 'ht_local', 'gauge_pressure', 'p_profile_multiplier', 'ht_bottom', 'den_spec', 't0', 'direction_spec', 'coordinate_system', 'flow_direction', 'axis_direction', 'axis_origin', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fmean2', 'fvar', 'fvar2', 'granular_temperature', 'iac', 'lsfun', 'vof_spec', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar', 'fensapice_flow_bc_subtype', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'mixing_plane_thread', 'ac_options', 'p_backflow_spec', 'p_backflow_spec_gen', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'prevent_reverse_flow', 'radial', 'avg_press_spec', 'press_averaging_method', 'targeted_mf_boundary', 'targeted_mf', 'targeted_mf_pmax', 'targeted_mf_pmin', 'gen_nrbc_spec', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        outlet_number=outlet_number,
        pressure_spec_method=pressure_spec_method,
        press_spec=press_spec,
        frame_of_reference=frame_of_reference,
        phase_spec=phase_spec,
        ht_local=ht_local,
        gauge_pressure=gauge_pressure,
        p_profile_multiplier=p_profile_multiplier,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        t0=t0,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fmean2=fmean2,
        fvar=fvar,
        fvar2=fvar2,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        vof_spec=vof_spec,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        mixing_plane_thread=mixing_plane_thread,
        ac_options=ac_options,
        p_backflow_spec=p_backflow_spec,
        p_backflow_spec_gen=p_backflow_spec_gen,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        prevent_reverse_flow=prevent_reverse_flow,
        radial=radial,
        avg_press_spec=avg_press_spec,
        press_averaging_method=press_averaging_method,
        targeted_mf_boundary=targeted_mf_boundary,
        targeted_mf=targeted_mf,
        targeted_mf_pmax=targeted_mf_pmax,
        targeted_mf_pmin=targeted_mf_pmin,
        gen_nrbc_spec=gen_nrbc_spec,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    return_type = 'object'

class phase_18(NamedObject[phase_18_child], _NonCreatableNamedObjectMixin[phase_18_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_18_child
    return_type = 'object'

class pressure_outlet_child(Group):
    """
    'child_object_type' of pressure_outlet.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pressure_outlet_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel', 'outlet_number', 'pressure_spec_method', 'press_spec', 'frame_of_reference', 'phase_spec', 'ht_local', 'gauge_pressure', 'p_profile_multiplier', 'ht_bottom', 'den_spec', 't0', 'direction_spec', 'coordinate_system', 'flow_direction', 'axis_direction', 'axis_origin', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fmean2', 'fvar', 'fvar2', 'granular_temperature', 'iac', 'lsfun', 'vof_spec', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'tss_scalar', 'fensapice_flow_bc_subtype', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'mixing_plane_thread', 'ac_options', 'p_backflow_spec', 'p_backflow_spec_gen', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'prevent_reverse_flow', 'radial', 'avg_press_spec', 'press_averaging_method', 'targeted_mf_boundary', 'targeted_mf', 'targeted_mf_pmax', 'targeted_mf_pmin', 'gen_nrbc_spec', 'wsf', 'wsb', 'wsn', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        phase=phase_18,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel=open_channel,
        outlet_number=outlet_number,
        pressure_spec_method=pressure_spec_method,
        press_spec=press_spec,
        frame_of_reference=frame_of_reference,
        phase_spec=phase_spec,
        ht_local=ht_local,
        gauge_pressure=gauge_pressure,
        p_profile_multiplier=p_profile_multiplier,
        ht_bottom=ht_bottom,
        den_spec=den_spec,
        t0=t0,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fmean2=fmean2,
        fvar=fvar,
        fvar2=fvar2,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        vof_spec=vof_spec,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        tss_scalar=tss_scalar,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        mixing_plane_thread=mixing_plane_thread,
        ac_options=ac_options,
        p_backflow_spec=p_backflow_spec,
        p_backflow_spec_gen=p_backflow_spec_gen,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        prevent_reverse_flow=prevent_reverse_flow,
        radial=radial,
        avg_press_spec=avg_press_spec,
        press_averaging_method=press_averaging_method,
        targeted_mf_boundary=targeted_mf_boundary,
        targeted_mf=targeted_mf,
        targeted_mf_pmax=targeted_mf_pmax,
        targeted_mf_pmin=targeted_mf_pmin,
        gen_nrbc_spec=gen_nrbc_spec,
        wsf=wsf,
        wsb=wsb,
        wsn=wsn,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    return_type = 'object'

class pressure_outlet(NamedObject[pressure_outlet_child], _NonCreatableNamedObjectMixin[pressure_outlet_child]):
    """
    'pressure_outlet' child.
    """
    _version = '231'
    fluent_name = 'pressure-outlet'
    _python_name = 'pressure_outlet'
    child_object_type = pressure_outlet_child
    return_type = 'object'

class kc(Group):
    """
    'kc' child.
    """
    _version = '231'
    fluent_name = 'kc'
    _python_name = 'kc'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class hc(Group):
    """
    'hc' child.
    """
    _version = '231'
    fluent_name = 'hc'
    _python_name = 'hc'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class t_1(Real, AllowedValuesMixin):
    """
    't' child.
    """
    _version = '231'
    fluent_name = 't'
    _python_name = 't'
    return_type = 'object'

class q_1(Real, AllowedValuesMixin):
    """
    'q' child.
    """
    _version = '231'
    fluent_name = 'q'
    _python_name = 'q'
    return_type = 'object'

class phase_19_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'porous_jump_turb_wall_treatment', 'kc', 'hc', 't', 'q', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'strength']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        kc=kc,
        hc=hc,
        t=t_1,
        q=q_1,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        strength=strength,
    )
    return_type = 'object'

class phase_19(NamedObject[phase_19_child], _NonCreatableNamedObjectMixin[phase_19_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_19_child
    return_type = 'object'

class radiator_child(Group):
    """
    'child_object_type' of radiator.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'radiator_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'porous_jump_turb_wall_treatment', 'kc', 'hc', 't', 'q', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'strength']
    _child_classes = dict(
        phase=phase_19,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        kc=kc,
        hc=hc,
        t=t_1,
        q=q_1,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        strength=strength,
    )
    return_type = 'object'

class radiator(NamedObject[radiator_child], _NonCreatableNamedObjectMixin[radiator_child]):
    """
    'radiator' child.
    """
    _version = '231'
    fluent_name = 'radiator'
    _python_name = 'radiator'
    child_object_type = radiator_child
    return_type = 'object'

class vm_nvortices(Integer, AllowedValuesMixin):
    """
    'vm_nvortices' child.
    """
    _version = '231'
    fluent_name = 'vm-nvortices'
    _python_name = 'vm_nvortices'
    return_type = 'object'

class les_embedded_fluctuations(String, AllowedValuesMixin):
    """
    'les_embedded_fluctuations' child.
    """
    _version = '231'
    fluent_name = 'les-embedded-fluctuations'
    _python_name = 'les_embedded_fluctuations'
    return_type = 'object'

class phase_20_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'les_spec_name', 'rfg_number_of_modes', 'vm_nvortices', 'les_embedded_fluctuations']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_nvortices=vm_nvortices,
        les_embedded_fluctuations=les_embedded_fluctuations,
    )
    return_type = 'object'

class phase_20(NamedObject[phase_20_child], _NonCreatableNamedObjectMixin[phase_20_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_20_child
    return_type = 'object'

class rans_les_interface_child(Group):
    """
    'child_object_type' of rans_les_interface.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'rans_les_interface_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'les_spec_name', 'rfg_number_of_modes', 'vm_nvortices', 'les_embedded_fluctuations']
    _child_classes = dict(
        phase=phase_20,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_nvortices=vm_nvortices,
        les_embedded_fluctuations=les_embedded_fluctuations,
    )
    return_type = 'object'

class rans_les_interface(NamedObject[rans_les_interface_child], _NonCreatableNamedObjectMixin[rans_les_interface_child]):
    """
    'rans_les_interface' child.
    """
    _version = '231'
    fluent_name = 'rans-les-interface'
    _python_name = 'rans_les_interface'
    child_object_type = rans_les_interface_child
    return_type = 'object'

class pid(Group):
    """
    'pid' child.
    """
    _version = '231'
    fluent_name = 'pid'
    _python_name = 'pid'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class temperature_spec(String, AllowedValuesMixin):
    """
    'temperature_spec' child.
    """
    _version = '231'
    fluent_name = 'temperature-spec'
    _python_name = 'temperature_spec'
    return_type = 'object'

class temperature_rise(Group):
    """
    'temperature_rise' child.
    """
    _version = '231'
    fluent_name = 'temperature-rise'
    _python_name = 'temperature_rise'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class heat_source(Group):
    """
    'heat_source' child.
    """
    _version = '231'
    fluent_name = 'heat-source'
    _python_name = 'heat_source'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class tinf(Real, AllowedValuesMixin):
    """
    'tinf' child.
    """
    _version = '231'
    fluent_name = 'tinf'
    _python_name = 'tinf'
    return_type = 'object'

class mass_flow_multiplier_child(Group):
    """
    'child_object_type' of mass_flow_multiplier.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'mass_flow_multiplier_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class mass_flow_multiplier(NamedObject[mass_flow_multiplier_child], _NonCreatableNamedObjectMixin[mass_flow_multiplier_child]):
    """
    'mass_flow_multiplier' child.
    """
    _version = '231'
    fluent_name = 'mass-flow-multiplier'
    _python_name = 'mass_flow_multiplier'
    child_object_type = mass_flow_multiplier_child
    return_type = 'object'

class phase_21_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'pid', 'temperature_spec', 'temperature_rise', 'heat_source', 'tinf', 'hc', 'direction_spec', 'coordinate_system', 'flow_direction', 'direction_vector', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'mass_flow_multiplier', 'solar_fluxes', 'solar_shining_factor']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        pid=pid,
        temperature_spec=temperature_spec,
        temperature_rise=temperature_rise,
        heat_source=heat_source,
        tinf=tinf,
        hc=hc,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        mass_flow_multiplier=mass_flow_multiplier,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
    )
    return_type = 'object'

class phase_21(NamedObject[phase_21_child], _NonCreatableNamedObjectMixin[phase_21_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_21_child
    return_type = 'object'

class recirculation_inlet_child(Group):
    """
    'child_object_type' of recirculation_inlet.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'recirculation_inlet_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'pid', 'temperature_spec', 'temperature_rise', 'heat_source', 'tinf', 'hc', 'direction_spec', 'coordinate_system', 'flow_direction', 'direction_vector', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'mass_flow_multiplier', 'solar_fluxes', 'solar_shining_factor']
    _child_classes = dict(
        phase=phase_21,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        pid=pid,
        temperature_spec=temperature_spec,
        temperature_rise=temperature_rise,
        heat_source=heat_source,
        tinf=tinf,
        hc=hc,
        direction_spec=direction_spec,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        mass_flow_multiplier=mass_flow_multiplier,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
    )
    return_type = 'object'

class recirculation_inlet(NamedObject[recirculation_inlet_child], _NonCreatableNamedObjectMixin[recirculation_inlet_child]):
    """
    'recirculation_inlet' child.
    """
    _version = '231'
    fluent_name = 'recirculation-inlet'
    _python_name = 'recirculation_inlet'
    child_object_type = recirculation_inlet_child
    return_type = 'object'

class phase_22_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'flow_spec', 'mass_flow', 'mass_flux', 'solar_fluxes', 'solar_shining_factor']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        flow_spec=flow_spec,
        mass_flow=mass_flow,
        mass_flux=mass_flux,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
    )
    return_type = 'object'

class phase_22(NamedObject[phase_22_child], _NonCreatableNamedObjectMixin[phase_22_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_22_child
    return_type = 'object'

class recirculation_outlet_child(Group):
    """
    'child_object_type' of recirculation_outlet.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'recirculation_outlet_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'flow_spec', 'mass_flow', 'mass_flux', 'solar_fluxes', 'solar_shining_factor']
    _child_classes = dict(
        phase=phase_22,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        flow_spec=flow_spec,
        mass_flow=mass_flow,
        mass_flux=mass_flux,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
    )
    return_type = 'object'

class recirculation_outlet(NamedObject[recirculation_outlet_child], _NonCreatableNamedObjectMixin[recirculation_outlet_child]):
    """
    'recirculation_outlet' child.
    """
    _version = '231'
    fluent_name = 'recirculation-outlet'
    _python_name = 'recirculation_outlet'
    child_object_type = recirculation_outlet_child
    return_type = 'object'

class shadow_child(Group):
    """
    'child_object_type' of shadow.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'shadow_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        phase=phase_2,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class shadow(NamedObject[shadow_child], _NonCreatableNamedObjectMixin[shadow_child]):
    """
    'shadow' child.
    """
    _version = '231'
    fluent_name = 'shadow'
    _python_name = 'shadow'
    child_object_type = shadow_child
    return_type = 'object'

class symmetry_child(Group):
    """
    'child_object_type' of symmetry.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'symmetry_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        phase=phase_2,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )
    return_type = 'object'

class symmetry(NamedObject[symmetry_child], _NonCreatableNamedObjectMixin[symmetry_child]):
    """
    'symmetry' child.
    """
    _version = '231'
    fluent_name = 'symmetry'
    _python_name = 'symmetry'
    child_object_type = symmetry_child
    return_type = 'object'

class open_channel_wave_bc(Boolean, AllowedValuesMixin):
    """
    'open_channel_wave_bc' child.
    """
    _version = '231'
    fluent_name = 'open-channel-wave-bc?'
    _python_name = 'open_channel_wave_bc'
    return_type = 'object'

class ocw_vel_segregated(Boolean, AllowedValuesMixin):
    """
    'ocw_vel_segregated' child.
    """
    _version = '231'
    fluent_name = 'ocw-vel-segregated?'
    _python_name = 'ocw_vel_segregated'
    return_type = 'object'

class velocity_spec(String, AllowedValuesMixin):
    """
    'velocity_spec' child.
    """
    _version = '231'
    fluent_name = 'velocity-spec'
    _python_name = 'velocity_spec'
    return_type = 'object'

class wave_velocity_spec(String, AllowedValuesMixin):
    """
    'wave_velocity_spec' child.
    """
    _version = '231'
    fluent_name = 'wave-velocity-spec'
    _python_name = 'wave_velocity_spec'
    return_type = 'object'

class avg_flow_velocity(Group):
    """
    'avg_flow_velocity' child.
    """
    _version = '231'
    fluent_name = 'avg-flow-velocity'
    _python_name = 'avg_flow_velocity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ocw_ship_vel_spec(String, AllowedValuesMixin):
    """
    'ocw_ship_vel_spec' child.
    """
    _version = '231'
    fluent_name = 'ocw-ship-vel-spec'
    _python_name = 'ocw_ship_vel_spec'
    return_type = 'object'

class ocw_ship_vmag(Group):
    """
    'ocw_ship_vmag' child.
    """
    _version = '231'
    fluent_name = 'ocw-ship-vmag'
    _python_name = 'ocw_ship_vmag'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class moving_object_direction_child(Group):
    """
    'child_object_type' of moving_object_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'moving_object_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class moving_object_direction(ListObject[moving_object_direction_child]):
    """
    'moving_object_direction' child.
    """
    _version = '231'
    fluent_name = 'moving-object-direction'
    _python_name = 'moving_object_direction'
    child_object_type = moving_object_direction_child
    return_type = 'object'

class ocw_sp_vel_spec(String, AllowedValuesMixin):
    """
    'ocw_sp_vel_spec' child.
    """
    _version = '231'
    fluent_name = 'ocw-sp-vel-spec'
    _python_name = 'ocw_sp_vel_spec'
    return_type = 'object'

class ocw_sp_vmag(Group):
    """
    'ocw_sp_vmag' child.
    """
    _version = '231'
    fluent_name = 'ocw-sp-vmag'
    _python_name = 'ocw_sp_vmag'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class secondary_phase_direction_child(Group):
    """
    'child_object_type' of secondary_phase_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'secondary_phase_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class secondary_phase_direction(ListObject[secondary_phase_direction_child]):
    """
    'secondary_phase_direction' child.
    """
    _version = '231'
    fluent_name = 'secondary-phase-direction'
    _python_name = 'secondary_phase_direction'
    child_object_type = secondary_phase_direction_child
    return_type = 'object'

class ocw_pp_vel_spec(String, AllowedValuesMixin):
    """
    'ocw_pp_vel_spec' child.
    """
    _version = '231'
    fluent_name = 'ocw-pp-vel-spec'
    _python_name = 'ocw_pp_vel_spec'
    return_type = 'object'

class ocw_pp_ref_ht(Real, AllowedValuesMixin):
    """
    'ocw_pp_ref_ht' child.
    """
    _version = '231'
    fluent_name = 'ocw-pp-ref-ht'
    _python_name = 'ocw_pp_ref_ht'
    return_type = 'object'

class ocw_pp_power_coeff(Real, AllowedValuesMixin):
    """
    'ocw_pp_power_coeff' child.
    """
    _version = '231'
    fluent_name = 'ocw-pp-power-coeff'
    _python_name = 'ocw_pp_power_coeff'
    return_type = 'object'

class ocw_pp_vmag(Group):
    """
    'ocw_pp_vmag' child.
    """
    _version = '231'
    fluent_name = 'ocw-pp-vmag'
    _python_name = 'ocw_pp_vmag'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ocw_pp_vmag_ref(Group):
    """
    'ocw_pp_vmag_ref' child.
    """
    _version = '231'
    fluent_name = 'ocw-pp-vmag-ref'
    _python_name = 'ocw_pp_vmag_ref'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class primary_phase_direction_child(Group):
    """
    'child_object_type' of primary_phase_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'primary_phase_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class primary_phase_direction(ListObject[primary_phase_direction_child]):
    """
    'primary_phase_direction' child.
    """
    _version = '231'
    fluent_name = 'primary-phase-direction'
    _python_name = 'primary_phase_direction'
    child_object_type = primary_phase_direction_child
    return_type = 'object'

class initial_gauge_pressure(Group):
    """
    'initial_gauge_pressure' child.
    """
    _version = '231'
    fluent_name = 'initial-gauge-pressure'
    _python_name = 'initial_gauge_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class velocity_1_child(Group):
    """
    'child_object_type' of velocity.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class velocity_1(ListObject[velocity_1_child]):
    """
    'velocity' child.
    """
    _version = '231'
    fluent_name = 'velocity'
    _python_name = 'velocity'
    child_object_type = velocity_1_child
    return_type = 'object'

class omega_swirl(Real, AllowedValuesMixin):
    """
    'omega_swirl' child.
    """
    _version = '231'
    fluent_name = 'omega-swirl'
    _python_name = 'omega_swirl'
    return_type = 'object'

class wave_bc_type(String, AllowedValuesMixin):
    """
    'wave_bc_type' child.
    """
    _version = '231'
    fluent_name = 'wave-bc-type'
    _python_name = 'wave_bc_type'
    return_type = 'object'

class wave_dir_spec(String, AllowedValuesMixin):
    """
    'wave_dir_spec' child.
    """
    _version = '231'
    fluent_name = 'wave-dir-spec'
    _python_name = 'wave_dir_spec'
    return_type = 'object'

class reference_direction_child(Group):
    """
    'child_object_type' of reference_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'reference_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class reference_direction(ListObject[reference_direction_child]):
    """
    'reference_direction' child.
    """
    _version = '231'
    fluent_name = 'reference-direction'
    _python_name = 'reference_direction'
    child_object_type = reference_direction_child
    return_type = 'object'

class wave_modeling_type(String, AllowedValuesMixin):
    """
    'wave_modeling_type' child.
    """
    _version = '231'
    fluent_name = 'wave-modeling-type'
    _python_name = 'wave_modeling_type'
    return_type = 'object'

class theory(String, AllowedValuesMixin):
    """
    'theory' child.
    """
    _version = '231'
    fluent_name = 'theory'
    _python_name = 'theory'
    return_type = 'object'

class wave_ht(Group):
    """
    'wave_ht' child.
    """
    _version = '231'
    fluent_name = 'wave-ht'
    _python_name = 'wave_ht'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_len(Group):
    """
    'wave_len' child.
    """
    _version = '231'
    fluent_name = 'wave-len'
    _python_name = 'wave_len'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class phase_diff(Group):
    """
    'phase_diff' child.
    """
    _version = '231'
    fluent_name = 'phase-diff'
    _python_name = 'phase_diff'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class heading_angle(Group):
    """
    'heading_angle' child.
    """
    _version = '231'
    fluent_name = 'heading-angle'
    _python_name = 'heading_angle'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_list_child(Group):
    """
    'child_object_type' of wave_list.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'wave_list_child'
    child_names = ['theory', 'wave_ht', 'wave_len', 'phase_diff', 'heading_angle']
    _child_classes = dict(
        theory=theory,
        wave_ht=wave_ht,
        wave_len=wave_len,
        phase_diff=phase_diff,
        heading_angle=heading_angle,
    )
    return_type = 'object'

class wave_list(ListObject[wave_list_child]):
    """
    'wave_list' child.
    """
    _version = '231'
    fluent_name = 'wave-list'
    _python_name = 'wave_list'
    child_object_type = wave_list_child
    return_type = 'object'

class offset_1(Group):
    """
    'offset' child.
    """
    _version = '231'
    fluent_name = 'offset'
    _python_name = 'offset'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_list_shallow_child(Group):
    """
    'child_object_type' of wave_list_shallow.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'wave_list_shallow_child'
    child_names = ['theory', 'wave_ht', 'wave_len', 'offset', 'heading_angle']
    _child_classes = dict(
        theory=theory,
        wave_ht=wave_ht,
        wave_len=wave_len,
        offset=offset_1,
        heading_angle=heading_angle,
    )
    return_type = 'object'

class wave_list_shallow(ListObject[wave_list_shallow_child]):
    """
    'wave_list_shallow' child.
    """
    _version = '231'
    fluent_name = 'wave-list-shallow'
    _python_name = 'wave_list_shallow'
    child_object_type = wave_list_shallow_child
    return_type = 'object'

class wave_spect_method_freq(String, AllowedValuesMixin):
    """
    'wave_spect_method_freq' child.
    """
    _version = '231'
    fluent_name = 'wave-spect-method-freq'
    _python_name = 'wave_spect_method_freq'
    return_type = 'object'

class wave_spect_factor(Real, AllowedValuesMixin):
    """
    'wave_spect_factor' child.
    """
    _version = '231'
    fluent_name = 'wave-spect-factor'
    _python_name = 'wave_spect_factor'
    return_type = 'object'

class wave_spect_sig_wave_ht(Group):
    """
    'wave_spect_sig_wave_ht' child.
    """
    _version = '231'
    fluent_name = 'wave-spect-sig-wave-ht'
    _python_name = 'wave_spect_sig_wave_ht'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_spect_peak_freq(Group):
    """
    'wave_spect_peak_freq' child.
    """
    _version = '231'
    fluent_name = 'wave-spect-peak-freq'
    _python_name = 'wave_spect_peak_freq'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_spect_min_freq(Group):
    """
    'wave_spect_min_freq' child.
    """
    _version = '231'
    fluent_name = 'wave-spect-min-freq'
    _python_name = 'wave_spect_min_freq'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_spect_max_freq(Group):
    """
    'wave_spect_max_freq' child.
    """
    _version = '231'
    fluent_name = 'wave-spect-max-freq'
    _python_name = 'wave_spect_max_freq'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_spect_freq_components(Integer, AllowedValuesMixin):
    """
    'wave_spect_freq_components' child.
    """
    _version = '231'
    fluent_name = 'wave-spect-freq-components'
    _python_name = 'wave_spect_freq_components'
    return_type = 'object'

class wave_spect_method_dir(String, AllowedValuesMixin):
    """
    'wave_spect_method_dir' child.
    """
    _version = '231'
    fluent_name = 'wave-spect-method-dir'
    _python_name = 'wave_spect_method_dir'
    return_type = 'object'

class wave_spect_s(Integer, AllowedValuesMixin):
    """
    'wave_spect_s' child.
    """
    _version = '231'
    fluent_name = 'wave-spect-s'
    _python_name = 'wave_spect_s'
    return_type = 'object'

class wave_spect_mean_angle(Group):
    """
    'wave_spect_mean_angle' child.
    """
    _version = '231'
    fluent_name = 'wave-spect-mean-angle'
    _python_name = 'wave_spect_mean_angle'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_spect_deviation(Group):
    """
    'wave_spect_deviation' child.
    """
    _version = '231'
    fluent_name = 'wave-spect-deviation'
    _python_name = 'wave_spect_deviation'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wave_spect_dir_components(Integer, AllowedValuesMixin):
    """
    'wave_spect_dir_components' child.
    """
    _version = '231'
    fluent_name = 'wave-spect-dir-components'
    _python_name = 'wave_spect_dir_components'
    return_type = 'object'

class mean_and_std_deviation(RealList):
    """
    Mean and standard deviation.
    """
    _version = '231'
    fluent_name = 'mean-and-std-deviation'
    _python_name = 'mean_and_std_deviation'
    return_type = 'object'

class pb_disc_components_child(Group):
    """
    'child_object_type' of pb_disc_components.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pb_disc_components_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class pb_disc_components(ListObject[pb_disc_components_child]):
    """
    'pb_disc_components' child.
    """
    _version = '231'
    fluent_name = 'pb-disc-components'
    _python_name = 'pb_disc_components'
    child_object_type = pb_disc_components_child
    return_type = 'object'

class pb_disc_1(Group):
    """
    'pb_disc' child.
    """
    _version = '231'
    fluent_name = 'pb-disc'
    _python_name = 'pb_disc'
    child_names = ['mean_and_std_deviation', 'pb_disc_components']
    _child_classes = dict(
        mean_and_std_deviation=mean_and_std_deviation,
        pb_disc_components=pb_disc_components,
    )
    return_type = 'object'

class phase_23_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel_wave_bc', 'ocw_vel_segregated', 'velocity_spec', 'frame_of_reference', 'vmag', 'wave_velocity_spec', 'avg_flow_velocity', 'ocw_ship_vel_spec', 'ocw_ship_vmag', 'moving_object_direction', 'ocw_sp_vel_spec', 'ocw_sp_vmag', 'secondary_phase_direction', 'ocw_pp_vel_spec', 'ocw_pp_ref_ht', 'ocw_pp_power_coeff', 'ocw_pp_vmag', 'ocw_pp_vmag_ref', 'primary_phase_direction', 'initial_gauge_pressure', 'coordinate_system', 'velocity', 'flow_direction', 'axis_direction', 'axis_origin', 'omega_swirl', 'phase_spec', 'wave_bc_type', 'ht_local', 'ht_bottom', 'wave_dir_spec', 'reference_direction', 'wave_modeling_type', 'wave_list', 'wave_list_shallow', 'wave_spect_method_freq', 'wave_spect_factor', 'wave_spect_sig_wave_ht', 'wave_spect_peak_freq', 'wave_spect_min_freq', 'wave_spect_max_freq', 'wave_spect_freq_components', 'wave_spect_method_dir', 'wave_spect_s', 'wave_spect_mean_angle', 'wave_spect_deviation', 'wave_spect_dir_components', 't', 'non_equil_boundary', 'tve', 'les_spec_name', 'rfg_number_of_modes', 'vm_number_of_vortices', 'vm_streamwise_fluct', 'vm_mass_conservation', 'stg_scale_limiter_type', 'stg_ti_limiter', 'stg_tvr_limiter', 'stg_dw_limiter', 'volumetric_synthetic_turbulence_generator', 'volumetric_synthetic_turbulence_generator_option', 'volumetric_synthetic_turbulence_generator_option_thickness', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'granular_temperature', 'iac', 'lsfun', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'equ_required', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'gauge_pressure', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'tss_scalar', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'mixing_plane_thread', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'les_spec']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel_wave_bc=open_channel_wave_bc,
        ocw_vel_segregated=ocw_vel_segregated,
        velocity_spec=velocity_spec,
        frame_of_reference=frame_of_reference,
        vmag=vmag,
        wave_velocity_spec=wave_velocity_spec,
        avg_flow_velocity=avg_flow_velocity,
        ocw_ship_vel_spec=ocw_ship_vel_spec,
        ocw_ship_vmag=ocw_ship_vmag,
        moving_object_direction=moving_object_direction,
        ocw_sp_vel_spec=ocw_sp_vel_spec,
        ocw_sp_vmag=ocw_sp_vmag,
        secondary_phase_direction=secondary_phase_direction,
        ocw_pp_vel_spec=ocw_pp_vel_spec,
        ocw_pp_ref_ht=ocw_pp_ref_ht,
        ocw_pp_power_coeff=ocw_pp_power_coeff,
        ocw_pp_vmag=ocw_pp_vmag,
        ocw_pp_vmag_ref=ocw_pp_vmag_ref,
        primary_phase_direction=primary_phase_direction,
        initial_gauge_pressure=initial_gauge_pressure,
        coordinate_system=coordinate_system,
        velocity=velocity_1,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        omega_swirl=omega_swirl,
        phase_spec=phase_spec,
        wave_bc_type=wave_bc_type,
        ht_local=ht_local,
        ht_bottom=ht_bottom,
        wave_dir_spec=wave_dir_spec,
        reference_direction=reference_direction,
        wave_modeling_type=wave_modeling_type,
        wave_list=wave_list,
        wave_list_shallow=wave_list_shallow,
        wave_spect_method_freq=wave_spect_method_freq,
        wave_spect_factor=wave_spect_factor,
        wave_spect_sig_wave_ht=wave_spect_sig_wave_ht,
        wave_spect_peak_freq=wave_spect_peak_freq,
        wave_spect_min_freq=wave_spect_min_freq,
        wave_spect_max_freq=wave_spect_max_freq,
        wave_spect_freq_components=wave_spect_freq_components,
        wave_spect_method_dir=wave_spect_method_dir,
        wave_spect_s=wave_spect_s,
        wave_spect_mean_angle=wave_spect_mean_angle,
        wave_spect_deviation=wave_spect_deviation,
        wave_spect_dir_components=wave_spect_dir_components,
        t=t,
        non_equil_boundary=non_equil_boundary,
        tve=tve,
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_number_of_vortices=vm_number_of_vortices,
        vm_streamwise_fluct=vm_streamwise_fluct,
        vm_mass_conservation=vm_mass_conservation,
        stg_scale_limiter_type=stg_scale_limiter_type,
        stg_ti_limiter=stg_ti_limiter,
        stg_tvr_limiter=stg_tvr_limiter,
        stg_dw_limiter=stg_dw_limiter,
        volumetric_synthetic_turbulence_generator=volumetric_synthetic_turbulence_generator,
        volumetric_synthetic_turbulence_generator_option=volumetric_synthetic_turbulence_generator_option,
        volumetric_synthetic_turbulence_generator_option_thickness=volumetric_synthetic_turbulence_generator_option_thickness,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        equ_required=equ_required,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc_1,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        gauge_pressure=gauge_pressure,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        tss_scalar=tss_scalar,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        mixing_plane_thread=mixing_plane_thread,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        les_spec=les_spec,
    )
    return_type = 'object'

class phase_23(NamedObject[phase_23_child], _NonCreatableNamedObjectMixin[phase_23_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_23_child
    return_type = 'object'

class velocity_inlet_child(Group):
    """
    'child_object_type' of velocity_inlet.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'velocity_inlet_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'open_channel_wave_bc', 'ocw_vel_segregated', 'velocity_spec', 'frame_of_reference', 'vmag', 'wave_velocity_spec', 'avg_flow_velocity', 'ocw_ship_vel_spec', 'ocw_ship_vmag', 'moving_object_direction', 'ocw_sp_vel_spec', 'ocw_sp_vmag', 'secondary_phase_direction', 'ocw_pp_vel_spec', 'ocw_pp_ref_ht', 'ocw_pp_power_coeff', 'ocw_pp_vmag', 'ocw_pp_vmag_ref', 'primary_phase_direction', 'initial_gauge_pressure', 'coordinate_system', 'velocity', 'flow_direction', 'axis_direction', 'axis_origin', 'omega_swirl', 'phase_spec', 'wave_bc_type', 'ht_local', 'ht_bottom', 'wave_dir_spec', 'reference_direction', 'wave_modeling_type', 'wave_list', 'wave_list_shallow', 'wave_spect_method_freq', 'wave_spect_factor', 'wave_spect_sig_wave_ht', 'wave_spect_peak_freq', 'wave_spect_min_freq', 'wave_spect_max_freq', 'wave_spect_freq_components', 'wave_spect_method_dir', 'wave_spect_s', 'wave_spect_mean_angle', 'wave_spect_deviation', 'wave_spect_dir_components', 't', 'non_equil_boundary', 'tve', 'les_spec_name', 'rfg_number_of_modes', 'vm_number_of_vortices', 'vm_streamwise_fluct', 'vm_mass_conservation', 'stg_scale_limiter_type', 'stg_ti_limiter', 'stg_tvr_limiter', 'stg_dw_limiter', 'volumetric_synthetic_turbulence_generator', 'volumetric_synthetic_turbulence_generator_option', 'volumetric_synthetic_turbulence_generator_option_thickness', 'ke_spec', 'nut', 'kl', 'intermit', 'k', 'e', 'o', 'v2', 'turb_intensity', 'turb_length_scale', 'turb_hydraulic_diam', 'turb_viscosity_ratio', 'turb_viscosity_ratio_profile', 'rst_spec', 'uu', 'vv', 'ww', 'uv', 'vw', 'uw', 'ksgs_spec', 'ksgs', 'sgs_turb_intensity', 'granular_temperature', 'iac', 'lsfun', 'volume_fraction', 'species_in_mole_fractions', 'mf', 'elec_potential_type', 'potential_value', 'dual_potential_type', 'dual_potential_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'prob_mode_1', 'prob_mode_2', 'prob_mode_3', 'equ_required', 'uds_bc', 'uds', 'pb_disc_bc', 'pb_disc', 'pb_qmom_bc', 'pb_qmom', 'pb_smm_bc', 'pb_smm', 'pb_dqmom_bc', 'pb_dqmom', 'gauge_pressure', 'premixc', 'premixc_var', 'ecfm_sigma', 'inert', 'pollut_no', 'pollut_hcn', 'pollut_nh3', 'pollut_n2o', 'pollut_urea', 'pollut_hnco', 'pollut_nco', 'pollut_so2', 'pollut_h2s', 'pollut_so3', 'pollut_sh', 'pollut_so', 'pollut_soot', 'pollut_nuclei', 'pollut_ctar', 'pollut_hg', 'pollut_hgcl2', 'pollut_hcl', 'pollut_hgo', 'pollut_cl', 'pollut_cl2', 'pollut_hgcl', 'pollut_hocl', 'radiation_bc', 'radial_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'parallel_collimated_beam', 'solar_direction', 'solar_irradiation', 't_b_b_spec', 't_b_b', 'in_emiss', 'fmean', 'fvar', 'fmean2', 'fvar2', 'tss_scalar', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_udf', 'fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc', 'mixing_plane_thread', 'solar_fluxes', 'solar_shining_factor', 'radiating_s2s_surface', 'ac_options', 'impedance_0', 'impedance_1', 'impedance_2', 'ac_wave', 'les_spec']
    _child_classes = dict(
        phase=phase_23,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        open_channel_wave_bc=open_channel_wave_bc,
        ocw_vel_segregated=ocw_vel_segregated,
        velocity_spec=velocity_spec,
        frame_of_reference=frame_of_reference,
        vmag=vmag,
        wave_velocity_spec=wave_velocity_spec,
        avg_flow_velocity=avg_flow_velocity,
        ocw_ship_vel_spec=ocw_ship_vel_spec,
        ocw_ship_vmag=ocw_ship_vmag,
        moving_object_direction=moving_object_direction,
        ocw_sp_vel_spec=ocw_sp_vel_spec,
        ocw_sp_vmag=ocw_sp_vmag,
        secondary_phase_direction=secondary_phase_direction,
        ocw_pp_vel_spec=ocw_pp_vel_spec,
        ocw_pp_ref_ht=ocw_pp_ref_ht,
        ocw_pp_power_coeff=ocw_pp_power_coeff,
        ocw_pp_vmag=ocw_pp_vmag,
        ocw_pp_vmag_ref=ocw_pp_vmag_ref,
        primary_phase_direction=primary_phase_direction,
        initial_gauge_pressure=initial_gauge_pressure,
        coordinate_system=coordinate_system,
        velocity=velocity_1,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        omega_swirl=omega_swirl,
        phase_spec=phase_spec,
        wave_bc_type=wave_bc_type,
        ht_local=ht_local,
        ht_bottom=ht_bottom,
        wave_dir_spec=wave_dir_spec,
        reference_direction=reference_direction,
        wave_modeling_type=wave_modeling_type,
        wave_list=wave_list,
        wave_list_shallow=wave_list_shallow,
        wave_spect_method_freq=wave_spect_method_freq,
        wave_spect_factor=wave_spect_factor,
        wave_spect_sig_wave_ht=wave_spect_sig_wave_ht,
        wave_spect_peak_freq=wave_spect_peak_freq,
        wave_spect_min_freq=wave_spect_min_freq,
        wave_spect_max_freq=wave_spect_max_freq,
        wave_spect_freq_components=wave_spect_freq_components,
        wave_spect_method_dir=wave_spect_method_dir,
        wave_spect_s=wave_spect_s,
        wave_spect_mean_angle=wave_spect_mean_angle,
        wave_spect_deviation=wave_spect_deviation,
        wave_spect_dir_components=wave_spect_dir_components,
        t=t,
        non_equil_boundary=non_equil_boundary,
        tve=tve,
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_number_of_vortices=vm_number_of_vortices,
        vm_streamwise_fluct=vm_streamwise_fluct,
        vm_mass_conservation=vm_mass_conservation,
        stg_scale_limiter_type=stg_scale_limiter_type,
        stg_ti_limiter=stg_ti_limiter,
        stg_tvr_limiter=stg_tvr_limiter,
        stg_dw_limiter=stg_dw_limiter,
        volumetric_synthetic_turbulence_generator=volumetric_synthetic_turbulence_generator,
        volumetric_synthetic_turbulence_generator_option=volumetric_synthetic_turbulence_generator_option,
        volumetric_synthetic_turbulence_generator_option_thickness=volumetric_synthetic_turbulence_generator_option_thickness,
        ke_spec=ke_spec,
        nut=nut,
        kl=kl,
        intermit=intermit,
        k=k,
        e=e,
        o=o,
        v2=v2,
        turb_intensity=turb_intensity,
        turb_length_scale=turb_length_scale,
        turb_hydraulic_diam=turb_hydraulic_diam,
        turb_viscosity_ratio=turb_viscosity_ratio,
        turb_viscosity_ratio_profile=turb_viscosity_ratio_profile,
        rst_spec=rst_spec,
        uu=uu,
        vv=vv,
        ww=ww,
        uv=uv,
        vw=vw,
        uw=uw,
        ksgs_spec=ksgs_spec,
        ksgs=ksgs,
        sgs_turb_intensity=sgs_turb_intensity,
        granular_temperature=granular_temperature,
        iac=iac,
        lsfun=lsfun,
        volume_fraction=volume_fraction,
        species_in_mole_fractions=species_in_mole_fractions,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        prob_mode_1=prob_mode_1,
        prob_mode_2=prob_mode_2,
        prob_mode_3=prob_mode_3,
        equ_required=equ_required,
        uds_bc=uds_bc,
        uds=uds,
        pb_disc_bc=pb_disc_bc,
        pb_disc=pb_disc_1,
        pb_qmom_bc=pb_qmom_bc,
        pb_qmom=pb_qmom,
        pb_smm_bc=pb_smm_bc,
        pb_smm=pb_smm,
        pb_dqmom_bc=pb_dqmom_bc,
        pb_dqmom=pb_dqmom,
        gauge_pressure=gauge_pressure,
        premixc=premixc,
        premixc_var=premixc_var,
        ecfm_sigma=ecfm_sigma,
        inert=inert,
        pollut_no=pollut_no,
        pollut_hcn=pollut_hcn,
        pollut_nh3=pollut_nh3,
        pollut_n2o=pollut_n2o,
        pollut_urea=pollut_urea,
        pollut_hnco=pollut_hnco,
        pollut_nco=pollut_nco,
        pollut_so2=pollut_so2,
        pollut_h2s=pollut_h2s,
        pollut_so3=pollut_so3,
        pollut_sh=pollut_sh,
        pollut_so=pollut_so,
        pollut_soot=pollut_soot,
        pollut_nuclei=pollut_nuclei,
        pollut_ctar=pollut_ctar,
        pollut_hg=pollut_hg,
        pollut_hgcl2=pollut_hgcl2,
        pollut_hcl=pollut_hcl,
        pollut_hgo=pollut_hgo,
        pollut_cl=pollut_cl,
        pollut_cl2=pollut_cl2,
        pollut_hgcl=pollut_hgcl,
        pollut_hocl=pollut_hocl,
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        t_b_b_spec=t_b_b_spec,
        t_b_b=t_b_b,
        in_emiss=in_emiss,
        fmean=fmean,
        fvar=fvar,
        fmean2=fmean2,
        fvar2=fvar2,
        tss_scalar=tss_scalar,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_udf=dpm_bc_udf,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1,
        fensapice_drop_vc=fensapice_drop_vc,
        mixing_plane_thread=mixing_plane_thread,
        solar_fluxes=solar_fluxes,
        solar_shining_factor=solar_shining_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        ac_options=ac_options,
        impedance_0=impedance_0,
        impedance_1=impedance_1,
        impedance_2=impedance_2,
        ac_wave=ac_wave,
        les_spec=les_spec,
    )
    return_type = 'object'

class velocity_inlet(NamedObject[velocity_inlet_child], _NonCreatableNamedObjectMixin[velocity_inlet_child]):
    """
    'velocity_inlet' child.
    """
    _version = '231'
    fluent_name = 'velocity-inlet'
    _python_name = 'velocity_inlet'
    child_object_type = velocity_inlet_child
    return_type = 'object'

class d(Real, AllowedValuesMixin):
    """
    'd' child.
    """
    _version = '231'
    fluent_name = 'd'
    _python_name = 'd'
    return_type = 'object'

class q_dot(Group):
    """
    'q_dot' child.
    """
    _version = '231'
    fluent_name = 'q-dot'
    _python_name = 'q_dot'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class h(Group):
    """
    'h' child.
    """
    _version = '231'
    fluent_name = 'h'
    _python_name = 'h'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class tinf_1(Group):
    """
    'tinf' child.
    """
    _version = '231'
    fluent_name = 'tinf'
    _python_name = 'tinf'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class planar_conduction(Boolean, AllowedValuesMixin):
    """
    'planar_conduction' child.
    """
    _version = '231'
    fluent_name = 'planar-conduction?'
    _python_name = 'planar_conduction'
    return_type = 'object'

class thickness(Real, AllowedValuesMixin):
    """
    'thickness' child.
    """
    _version = '231'
    fluent_name = 'thickness'
    _python_name = 'thickness'
    return_type = 'object'

class qdot(Group):
    """
    'qdot' child.
    """
    _version = '231'
    fluent_name = 'qdot'
    _python_name = 'qdot'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class shell_conduction_child(Group):
    """
    'child_object_type' of shell_conduction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'shell_conduction_child'
    child_names = ['thickness', 'material', 'qdot']
    _child_classes = dict(
        thickness=thickness,
        material=material_1,
        qdot=qdot,
    )
    return_type = 'object'

class shell_conduction(ListObject[shell_conduction_child]):
    """
    'shell_conduction' child.
    """
    _version = '231'
    fluent_name = 'shell-conduction'
    _python_name = 'shell_conduction'
    child_object_type = shell_conduction_child
    return_type = 'object'

class thin_wall_child(Group):
    """
    'child_object_type' of thin_wall.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'thin_wall_child'
    child_names = ['thickness', 'material', 'qdot']
    _child_classes = dict(
        thickness=thickness,
        material=material_1,
        qdot=qdot,
    )
    return_type = 'object'

class thin_wall(ListObject[thin_wall_child]):
    """
    'thin_wall' child.
    """
    _version = '231'
    fluent_name = 'thin-wall'
    _python_name = 'thin_wall'
    child_object_type = thin_wall_child
    return_type = 'object'

class motion_bc(String, AllowedValuesMixin):
    """
    'motion_bc' child.
    """
    _version = '231'
    fluent_name = 'motion-bc'
    _python_name = 'motion_bc'
    return_type = 'object'

class shear_bc(String, AllowedValuesMixin):
    """
    'shear_bc' child.
    """
    _version = '231'
    fluent_name = 'shear-bc'
    _python_name = 'shear_bc'
    return_type = 'object'

class rough_bc(String, AllowedValuesMixin):
    """
    'rough_bc' child.
    """
    _version = '231'
    fluent_name = 'rough-bc'
    _python_name = 'rough_bc'
    return_type = 'object'

class moving(Boolean, AllowedValuesMixin):
    """
    'moving' child.
    """
    _version = '231'
    fluent_name = 'moving?'
    _python_name = 'moving'
    return_type = 'object'

class relative(Boolean, AllowedValuesMixin):
    """
    'relative' child.
    """
    _version = '231'
    fluent_name = 'relative?'
    _python_name = 'relative'
    return_type = 'object'

class rotating(Boolean, AllowedValuesMixin):
    """
    'rotating' child.
    """
    _version = '231'
    fluent_name = 'rotating?'
    _python_name = 'rotating'
    return_type = 'object'

class wall_translation_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of wall_translation.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'wall_translation_child'
    return_type = 'object'

class wall_translation(ListObject[wall_translation_child]):
    """
    'wall_translation' child.
    """
    _version = '231'
    fluent_name = 'wall-translation'
    _python_name = 'wall_translation'
    child_object_type = wall_translation_child
    return_type = 'object'

class components_1(Boolean, AllowedValuesMixin):
    """
    'components' child.
    """
    _version = '231'
    fluent_name = 'components?'
    _python_name = 'components'
    return_type = 'object'

class ex_emiss(Group):
    """
    'ex_emiss' child.
    """
    _version = '231'
    fluent_name = 'ex-emiss'
    _python_name = 'ex_emiss'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class trad(Group):
    """
    'trad' child.
    """
    _version = '231'
    fluent_name = 'trad'
    _python_name = 'trad'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class int_rad(Boolean, AllowedValuesMixin):
    """
    'int_rad' child.
    """
    _version = '231'
    fluent_name = 'int-rad?'
    _python_name = 'int_rad'
    return_type = 'object'

class trad_internal(Real, AllowedValuesMixin):
    """
    'trad_internal' child.
    """
    _version = '231'
    fluent_name = 'trad-internal'
    _python_name = 'trad_internal'
    return_type = 'object'

class area_enhancement_factor(Group):
    """
    'area_enhancement_factor' child.
    """
    _version = '231'
    fluent_name = 'area-enhancement-factor'
    _python_name = 'area_enhancement_factor'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class rough_option(Boolean, AllowedValuesMixin):
    """
    'rough_option' child.
    """
    _version = '231'
    fluent_name = 'rough-option?'
    _python_name = 'rough_option'
    return_type = 'object'

class rough_nasa(Boolean, AllowedValuesMixin):
    """
    'rough_nasa' child.
    """
    _version = '231'
    fluent_name = 'rough-nasa?'
    _python_name = 'rough_nasa'
    return_type = 'object'

class rough_shin_et_al(Boolean, AllowedValuesMixin):
    """
    'rough_shin_et_al' child.
    """
    _version = '231'
    fluent_name = 'rough-shin-et-al?'
    _python_name = 'rough_shin_et_al'
    return_type = 'object'

class rough_data(Boolean, AllowedValuesMixin):
    """
    'rough_data' child.
    """
    _version = '231'
    fluent_name = 'rough-data?'
    _python_name = 'rough_data'
    return_type = 'object'

class roughness_height(Group):
    """
    'roughness_height' child.
    """
    _version = '231'
    fluent_name = 'roughness-height'
    _python_name = 'roughness_height'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class roughness_const(Group):
    """
    'roughness_const' child.
    """
    _version = '231'
    fluent_name = 'roughness-const'
    _python_name = 'roughness_const'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class roughness_height_cp(Group):
    """
    'roughness_height_cp' child.
    """
    _version = '231'
    fluent_name = 'roughness-height-cp'
    _python_name = 'roughness_height_cp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class roughness_const_cp(Group):
    """
    'roughness_const_cp' child.
    """
    _version = '231'
    fluent_name = 'roughness-const-cp'
    _python_name = 'roughness_const_cp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class roughness_const_nasa(Group):
    """
    'roughness_const_nasa' child.
    """
    _version = '231'
    fluent_name = 'roughness-const-nasa'
    _python_name = 'roughness_const_nasa'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class roughness_const_shin(Group):
    """
    'roughness_const_shin' child.
    """
    _version = '231'
    fluent_name = 'roughness-const-shin'
    _python_name = 'roughness_const_shin'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class roughness_const_data(Group):
    """
    'roughness_const_data' child.
    """
    _version = '231'
    fluent_name = 'roughness-const-data'
    _python_name = 'roughness_const_data'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class variable_roughness(Group):
    """
    'variable_roughness' child.
    """
    _version = '231'
    fluent_name = 'variable-roughness'
    _python_name = 'variable_roughness'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class free_stream_velocity(Real, AllowedValuesMixin):
    """
    'free_stream_velocity' child.
    """
    _version = '231'
    fluent_name = 'free-stream-velocity'
    _python_name = 'free_stream_velocity'
    return_type = 'object'

class free_stream_temp(Real, AllowedValuesMixin):
    """
    'free_stream_temp' child.
    """
    _version = '231'
    fluent_name = 'free-stream-temp'
    _python_name = 'free_stream_temp'
    return_type = 'object'

class characteristic_length(Real, AllowedValuesMixin):
    """
    'characteristic_length' child.
    """
    _version = '231'
    fluent_name = 'characteristic-length'
    _python_name = 'characteristic_length'
    return_type = 'object'

class free_stream_temp_cp(Real, AllowedValuesMixin):
    """
    'free_stream_temp_cp' child.
    """
    _version = '231'
    fluent_name = 'free-stream-temp-cp'
    _python_name = 'free_stream_temp_cp'
    return_type = 'object'

class characteristic_length_cp(Real, AllowedValuesMixin):
    """
    'characteristic_length_cp' child.
    """
    _version = '231'
    fluent_name = 'characteristic-length-cp'
    _python_name = 'characteristic_length_cp'
    return_type = 'object'

class liquid_content(Group):
    """
    'liquid_content' child.
    """
    _version = '231'
    fluent_name = 'liquid-content'
    _python_name = 'liquid_content'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class liquid_content_cp(Group):
    """
    'liquid_content_cp' child.
    """
    _version = '231'
    fluent_name = 'liquid-content-cp'
    _python_name = 'liquid_content_cp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class droplet_diameter(Group):
    """
    'droplet_diameter' child.
    """
    _version = '231'
    fluent_name = 'droplet-diameter'
    _python_name = 'droplet_diameter'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class dpm_bc_norm_coeff(Group):
    """
    'dpm_bc_norm_coeff' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-norm-coeff'
    _python_name = 'dpm_bc_norm_coeff'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class dpm_bc_tang_coeff(Group):
    """
    'dpm_bc_tang_coeff' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-tang-coeff'
    _python_name = 'dpm_bc_tang_coeff'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class dpm_bc_frictn_coeff(Group):
    """
    'dpm_bc_frictn_coeff' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-frictn-coeff'
    _python_name = 'dpm_bc_frictn_coeff'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class dpm_film_splash_nsamp(Integer, AllowedValuesMixin):
    """
    'dpm_film_splash_nsamp' child.
    """
    _version = '231'
    fluent_name = 'dpm-film-splash-nsamp'
    _python_name = 'dpm_film_splash_nsamp'
    return_type = 'object'

class dpm_crit_temp_option(String, AllowedValuesMixin):
    """
    'dpm_crit_temp_option' child.
    """
    _version = '231'
    fluent_name = 'dpm-crit-temp-option'
    _python_name = 'dpm_crit_temp_option'
    return_type = 'object'

class dpm_critical_temp_factor(Real, AllowedValuesMixin):
    """
    'dpm_critical_temp_factor' child.
    """
    _version = '231'
    fluent_name = 'dpm-critical-temp-factor'
    _python_name = 'dpm_critical_temp_factor'
    return_type = 'object'

class dpm_calibratable_temp(Real, AllowedValuesMixin):
    """
    'dpm_calibratable_temp' child.
    """
    _version = '231'
    fluent_name = 'dpm-calibratable-temp'
    _python_name = 'dpm_calibratable_temp'
    return_type = 'object'

class dpm_impingement_splashing_model(String, AllowedValuesMixin):
    """
    'dpm_impingement_splashing_model' child.
    """
    _version = '231'
    fluent_name = 'dpm-impingement-splashing-model'
    _python_name = 'dpm_impingement_splashing_model'
    return_type = 'object'

class dpm_upper_deposition_limit_offset(Real, AllowedValuesMixin):
    """
    'dpm_upper_deposition_limit_offset' child.
    """
    _version = '231'
    fluent_name = 'dpm-upper-deposition-limit-offset'
    _python_name = 'dpm_upper_deposition_limit_offset'
    return_type = 'object'

class dpm_deposition_delta_t(Real, AllowedValuesMixin):
    """
    'dpm_deposition_delta_t' child.
    """
    _version = '231'
    fluent_name = 'dpm-deposition-delta-t'
    _python_name = 'dpm_deposition_delta_t'
    return_type = 'object'

class dpm_laplace_number_constant(Real, AllowedValuesMixin):
    """
    'dpm_laplace_number_constant' child.
    """
    _version = '231'
    fluent_name = 'dpm-laplace-number-constant'
    _python_name = 'dpm_laplace_number_constant'
    return_type = 'object'

class dpm_partial_evaporation_ratio(Real, AllowedValuesMixin):
    """
    'dpm_partial_evaporation_ratio' child.
    """
    _version = '231'
    fluent_name = 'dpm-partial-evaporation-ratio'
    _python_name = 'dpm_partial_evaporation_ratio'
    return_type = 'object'

class ra_roughness(Real, AllowedValuesMixin):
    """
    'ra_roughness' child.
    """
    _version = '231'
    fluent_name = 'ra-roughness'
    _python_name = 'ra_roughness'
    return_type = 'object'

class rz_roughness(Real, AllowedValuesMixin):
    """
    'rz_roughness' child.
    """
    _version = '231'
    fluent_name = 'rz-roughness'
    _python_name = 'rz_roughness'
    return_type = 'object'

class rq_roughness(Real, AllowedValuesMixin):
    """
    'rq_roughness' child.
    """
    _version = '231'
    fluent_name = 'rq-roughness'
    _python_name = 'rq_roughness'
    return_type = 'object'

class rsm_roughness(Real, AllowedValuesMixin):
    """
    'rsm_roughness' child.
    """
    _version = '231'
    fluent_name = 'rsm-roughness'
    _python_name = 'rsm_roughness'
    return_type = 'object'

class dpm_bc_erosion_generic(Boolean, AllowedValuesMixin):
    """
    'dpm_bc_erosion_generic' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-generic?'
    _python_name = 'dpm_bc_erosion_generic'
    return_type = 'object'

class dpm_bc_erosion(Group):
    """
    'dpm_bc_erosion' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion'
    _python_name = 'dpm_bc_erosion'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class dpm_bc_erosion_c(Group):
    """
    'dpm_bc_erosion_c' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-c'
    _python_name = 'dpm_bc_erosion_c'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class dpm_bc_erosion_n(Group):
    """
    'dpm_bc_erosion_n' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-n'
    _python_name = 'dpm_bc_erosion_n'
    child_names = ['method', 'number_of_coeff', 'function_of', 'coefficients', 'constant', 'piecewise_polynomial', 'piecewise_linear']
    _child_classes = dict(
        method=method_1,
        number_of_coeff=number_of_coeff,
        function_of=function_of,
        coefficients=coefficients_1,
        constant=constant,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear,
    )
    return_type = 'object'

class dpm_bc_erosion_finnie(Boolean, AllowedValuesMixin):
    """
    'dpm_bc_erosion_finnie' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-finnie?'
    _python_name = 'dpm_bc_erosion_finnie'
    return_type = 'object'

class dpm_bc_erosion_finnie_k(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_finnie_k' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-finnie-k'
    _python_name = 'dpm_bc_erosion_finnie_k'
    return_type = 'object'

class dpm_bc_erosion_finnie_vel_exp(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_finnie_vel_exp' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-finnie-vel-exp'
    _python_name = 'dpm_bc_erosion_finnie_vel_exp'
    return_type = 'object'

class dpm_bc_erosion_finnie_max_erosion_angle(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_finnie_max_erosion_angle' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-finnie-max-erosion-angle'
    _python_name = 'dpm_bc_erosion_finnie_max_erosion_angle'
    return_type = 'object'

class dpm_bc_erosion_mclaury(Boolean, AllowedValuesMixin):
    """
    'dpm_bc_erosion_mclaury' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-mclaury?'
    _python_name = 'dpm_bc_erosion_mclaury'
    return_type = 'object'

class dpm_bc_erosion_mclaury_a(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_mclaury_a' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-mclaury-a'
    _python_name = 'dpm_bc_erosion_mclaury_a'
    return_type = 'object'

class dpm_bc_erosion_mclaury_vel_exp(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_mclaury_vel_exp' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-mclaury-vel-exp'
    _python_name = 'dpm_bc_erosion_mclaury_vel_exp'
    return_type = 'object'

class dpm_bc_erosion_mclaury_transition_angle(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_mclaury_transition_angle' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-mclaury-transition-angle'
    _python_name = 'dpm_bc_erosion_mclaury_transition_angle'
    return_type = 'object'

class dpm_bc_erosion_mclaury_b(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_mclaury_b' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-mclaury-b'
    _python_name = 'dpm_bc_erosion_mclaury_b'
    return_type = 'object'

class dpm_bc_erosion_mclaury_c(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_mclaury_c' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-mclaury-c'
    _python_name = 'dpm_bc_erosion_mclaury_c'
    return_type = 'object'

class dpm_bc_erosion_mclaury_w(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_mclaury_w' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-mclaury-w'
    _python_name = 'dpm_bc_erosion_mclaury_w'
    return_type = 'object'

class dpm_bc_erosion_mclaury_x(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_mclaury_x' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-mclaury-x'
    _python_name = 'dpm_bc_erosion_mclaury_x'
    return_type = 'object'

class dpm_bc_erosion_mclaury_y(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_mclaury_y' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-mclaury-y'
    _python_name = 'dpm_bc_erosion_mclaury_y'
    return_type = 'object'

class dpm_bc_erosion_oka(Boolean, AllowedValuesMixin):
    """
    'dpm_bc_erosion_oka' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-oka?'
    _python_name = 'dpm_bc_erosion_oka'
    return_type = 'object'

class dpm_bc_erosion_oka_e90(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_oka_e90' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-oka-e90'
    _python_name = 'dpm_bc_erosion_oka_e90'
    return_type = 'object'

class dpm_bc_erosion_oka_hv(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_oka_hv' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-oka-hv'
    _python_name = 'dpm_bc_erosion_oka_hv'
    return_type = 'object'

class dpm_bc_erosion_oka_n1(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_oka_n1' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-oka-n1'
    _python_name = 'dpm_bc_erosion_oka_n1'
    return_type = 'object'

class dpm_bc_erosion_oka_n2(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_oka_n2' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-oka-n2'
    _python_name = 'dpm_bc_erosion_oka_n2'
    return_type = 'object'

class dpm_bc_erosion_oka_k2(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_oka_k2' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-oka-k2'
    _python_name = 'dpm_bc_erosion_oka_k2'
    return_type = 'object'

class dpm_bc_erosion_oka_k3(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_oka_k3' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-oka-k3'
    _python_name = 'dpm_bc_erosion_oka_k3'
    return_type = 'object'

class dpm_bc_erosion_oka_dref(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_oka_dref' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-oka-dref'
    _python_name = 'dpm_bc_erosion_oka_dref'
    return_type = 'object'

class dpm_bc_erosion_oka_vref(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_oka_vref' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-oka-vref'
    _python_name = 'dpm_bc_erosion_oka_vref'
    return_type = 'object'

class dpm_bc_erosion_dnv(Boolean, AllowedValuesMixin):
    """
    'dpm_bc_erosion_dnv' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-dnv?'
    _python_name = 'dpm_bc_erosion_dnv'
    return_type = 'object'

class dpm_bc_erosion_dnv_k(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_dnv_k' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-dnv-k'
    _python_name = 'dpm_bc_erosion_dnv_k'
    return_type = 'object'

class dpm_bc_erosion_dnv_n(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_dnv_n' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-dnv-n'
    _python_name = 'dpm_bc_erosion_dnv_n'
    return_type = 'object'

class dpm_bc_erosion_dnv_ductile(Boolean, AllowedValuesMixin):
    """
    'dpm_bc_erosion_dnv_ductile' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-dnv-ductile?'
    _python_name = 'dpm_bc_erosion_dnv_ductile'
    return_type = 'object'

class dpm_bc_erosion_shear(Boolean, AllowedValuesMixin):
    """
    'dpm_bc_erosion_shear' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-shear?'
    _python_name = 'dpm_bc_erosion_shear'
    return_type = 'object'

class dpm_bc_erosion_shear_v(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_shear_v' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-shear-v'
    _python_name = 'dpm_bc_erosion_shear_v'
    return_type = 'object'

class dpm_bc_erosion_shear_c(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_shear_c' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-shear-c'
    _python_name = 'dpm_bc_erosion_shear_c'
    return_type = 'object'

class dpm_bc_erosion_shear_packing_limit(Real, AllowedValuesMixin):
    """
    'dpm_bc_erosion_shear_packing_limit' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-shear-packing-limit'
    _python_name = 'dpm_bc_erosion_shear_packing_limit'
    return_type = 'object'

class dpm_bc_erosion_shielding(Boolean, AllowedValuesMixin):
    """
    'dpm_bc_erosion_shielding' child.
    """
    _version = '231'
    fluent_name = 'dpm-bc-erosion-shielding?'
    _python_name = 'dpm_bc_erosion_shielding'
    return_type = 'object'

class dpm_wall_heat_exchange(Boolean, AllowedValuesMixin):
    """
    'dpm_wall_heat_exchange' child.
    """
    _version = '231'
    fluent_name = 'dpm-wall-heat-exchange?'
    _python_name = 'dpm_wall_heat_exchange'
    return_type = 'object'

class dpm_film_condensation(Boolean, AllowedValuesMixin):
    """
    'dpm_film_condensation' child.
    """
    _version = '231'
    fluent_name = 'dpm-film-condensation?'
    _python_name = 'dpm_film_condensation'
    return_type = 'object'

class dpm_film_bl_model(Boolean, AllowedValuesMixin):
    """
    'dpm_film_bl_model' child.
    """
    _version = '231'
    fluent_name = 'dpm-film-bl-model?'
    _python_name = 'dpm_film_bl_model'
    return_type = 'object'

class dpm_particle_stripping(Boolean, AllowedValuesMixin):
    """
    'dpm_particle_stripping' child.
    """
    _version = '231'
    fluent_name = 'dpm-particle-stripping?'
    _python_name = 'dpm_particle_stripping'
    return_type = 'object'

class dpm_critical_shear_stress(Real, AllowedValuesMixin):
    """
    'dpm_critical_shear_stress' child.
    """
    _version = '231'
    fluent_name = 'dpm-critical-shear-stress'
    _python_name = 'dpm_critical_shear_stress'
    return_type = 'object'

class dpm_film_separation_model(String, AllowedValuesMixin):
    """
    'dpm_film_separation_model' child.
    """
    _version = '231'
    fluent_name = 'dpm-film-separation-model'
    _python_name = 'dpm_film_separation_model'
    return_type = 'object'

class dpm_critical_we_number(Real, AllowedValuesMixin):
    """
    'dpm_critical_we_number' child.
    """
    _version = '231'
    fluent_name = 'dpm-critical-we-number'
    _python_name = 'dpm_critical_we_number'
    return_type = 'object'

class dpm_film_separation_angle(Real, AllowedValuesMixin):
    """
    'dpm_film_separation_angle' child.
    """
    _version = '231'
    fluent_name = 'dpm-film-separation-angle'
    _python_name = 'dpm_film_separation_angle'
    return_type = 'object'

class dpm_allow_lwf_to_vof(Boolean, AllowedValuesMixin):
    """
    'dpm_allow_lwf_to_vof' child.
    """
    _version = '231'
    fluent_name = 'dpm-allow-lwf-to-vof?'
    _python_name = 'dpm_allow_lwf_to_vof'
    return_type = 'object'

class dpm_allow_vof_to_lwf(Boolean, AllowedValuesMixin):
    """
    'dpm_allow_vof_to_lwf' child.
    """
    _version = '231'
    fluent_name = 'dpm-allow-vof-to-lwf?'
    _python_name = 'dpm_allow_vof_to_lwf'
    return_type = 'object'

class dpm_initialize_lwf(Boolean, AllowedValuesMixin):
    """
    'dpm_initialize_lwf' child.
    """
    _version = '231'
    fluent_name = 'dpm-initialize-lwf?'
    _python_name = 'dpm_initialize_lwf'
    return_type = 'object'

class dpm_initial_height(Real, AllowedValuesMixin):
    """
    'dpm_initial_height' child.
    """
    _version = '231'
    fluent_name = 'dpm-initial-height'
    _python_name = 'dpm_initial_height'
    return_type = 'object'

class film_velocity_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of film_velocity.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'film_velocity_child'
    return_type = 'object'

class film_velocity(ListObject[film_velocity_child]):
    """
    'film_velocity' child.
    """
    _version = '231'
    fluent_name = 'film-velocity'
    _python_name = 'film_velocity'
    child_object_type = film_velocity_child
    return_type = 'object'

class dpm_initial_temperature(Real, AllowedValuesMixin):
    """
    'dpm_initial_temperature' child.
    """
    _version = '231'
    fluent_name = 'dpm-initial-temperature'
    _python_name = 'dpm_initial_temperature'
    return_type = 'object'

class dpm_initial_injection(String, AllowedValuesMixin):
    """
    'dpm_initial_injection' child.
    """
    _version = '231'
    fluent_name = 'dpm-initial-injection'
    _python_name = 'dpm_initial_injection'
    return_type = 'object'

class film_parcel_surface_area_density(Real, AllowedValuesMixin):
    """
    'film_parcel_surface_area_density' child.
    """
    _version = '231'
    fluent_name = 'film-parcel-surface-area-density'
    _python_name = 'film_parcel_surface_area_density'
    return_type = 'object'

class minimum_number_of_parcels_per_face(Integer, AllowedValuesMixin):
    """
    'minimum_number_of_parcels_per_face' child.
    """
    _version = '231'
    fluent_name = 'minimum-number-of-parcels-per-face'
    _python_name = 'minimum_number_of_parcels_per_face'
    return_type = 'object'

class band_in_emiss_child(Group):
    """
    'child_object_type' of band_in_emiss.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'band_in_emiss_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class band_in_emiss(NamedObject[band_in_emiss_child], _NonCreatableNamedObjectMixin[band_in_emiss_child]):
    """
    'band_in_emiss' child.
    """
    _version = '231'
    fluent_name = 'band-in-emiss'
    _python_name = 'band_in_emiss'
    child_object_type = band_in_emiss_child
    return_type = 'object'

class mc_bsource_p(Boolean, AllowedValuesMixin):
    """
    'mc_bsource_p' child.
    """
    _version = '231'
    fluent_name = 'mc-bsource-p?'
    _python_name = 'mc_bsource_p'
    return_type = 'object'

class mc_poldfun_p(Boolean, AllowedValuesMixin):
    """
    'mc_poldfun_p' child.
    """
    _version = '231'
    fluent_name = 'mc-poldfun-p?'
    _python_name = 'mc_poldfun_p'
    return_type = 'object'

class polar_func_type(String, AllowedValuesMixin):
    """
    'polar_func_type' child.
    """
    _version = '231'
    fluent_name = 'polar-func-type'
    _python_name = 'polar_func_type'
    return_type = 'object'

class mc_polar_expr(Real, AllowedValuesMixin):
    """
    'mc_polar_expr' child.
    """
    _version = '231'
    fluent_name = 'mc-polar-expr'
    _python_name = 'mc_polar_expr'
    return_type = 'object'

class polar_real_angle(Real, AllowedValuesMixin):
    """
    'polar_real_angle' child.
    """
    _version = '231'
    fluent_name = 'polar-real-angle'
    _python_name = 'polar_real_angle'
    return_type = 'object'

class polar_real_intensity(Real, AllowedValuesMixin):
    """
    'polar_real_intensity' child.
    """
    _version = '231'
    fluent_name = 'polar-real-intensity'
    _python_name = 'polar_real_intensity'
    return_type = 'object'

class polar_pair_list_child(Group):
    """
    'child_object_type' of polar_pair_list.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'polar_pair_list_child'
    child_names = ['polar_real_angle', 'polar_real_intensity']
    _child_classes = dict(
        polar_real_angle=polar_real_angle,
        polar_real_intensity=polar_real_intensity,
    )
    return_type = 'object'

class polar_pair_list(ListObject[polar_pair_list_child]):
    """
    'polar_pair_list' child.
    """
    _version = '231'
    fluent_name = 'polar-pair-list'
    _python_name = 'polar_pair_list'
    child_object_type = polar_pair_list_child
    return_type = 'object'

class pold_pair_list_rad(RealList, AllowedValuesMixin):
    """
    'pold_pair_list_rad' child.
    """
    _version = '231'
    fluent_name = 'pold-pair-list-rad'
    _python_name = 'pold_pair_list_rad'
    return_type = 'object'

class radiation_direction_child(Group):
    """
    'child_object_type' of radiation_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'radiation_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class radiation_direction(ListObject[radiation_direction_child]):
    """
    'radiation_direction' child.
    """
    _version = '231'
    fluent_name = 'radiation-direction'
    _python_name = 'radiation_direction'
    child_object_type = radiation_direction_child
    return_type = 'object'

class band_diffuse_frac_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of band_diffuse_frac.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'band_diffuse_frac_child'
    return_type = 'object'

class band_diffuse_frac(NamedObject[band_diffuse_frac_child], _NonCreatableNamedObjectMixin[band_diffuse_frac_child]):
    """
    'band_diffuse_frac' child.
    """
    _version = '231'
    fluent_name = 'band-diffuse-frac'
    _python_name = 'band_diffuse_frac'
    child_object_type = band_diffuse_frac_child
    return_type = 'object'

class critical_zone(Boolean, AllowedValuesMixin):
    """
    'critical_zone' child.
    """
    _version = '231'
    fluent_name = 'critical-zone?'
    _python_name = 'critical_zone'
    return_type = 'object'

class fpsc(Integer, AllowedValuesMixin):
    """
    'fpsc' child.
    """
    _version = '231'
    fluent_name = 'fpsc'
    _python_name = 'fpsc'
    return_type = 'object'

class v_transmissivity(Group):
    """
    'v_transmissivity' child.
    """
    _version = '231'
    fluent_name = 'v-transmissivity'
    _python_name = 'v_transmissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ir_transmissivity(Group):
    """
    'ir_transmissivity' child.
    """
    _version = '231'
    fluent_name = 'ir-transmissivity'
    _python_name = 'ir_transmissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class v_opq_absorbtivity(Group):
    """
    'v_opq_absorbtivity' child.
    """
    _version = '231'
    fluent_name = 'v-opq-absorbtivity'
    _python_name = 'v_opq_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ir_opq_absorbtivity(Group):
    """
    'ir_opq_absorbtivity' child.
    """
    _version = '231'
    fluent_name = 'ir-opq-absorbtivity'
    _python_name = 'ir_opq_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class v_st_absorbtivity(Group):
    """
    'v_st_absorbtivity' child.
    """
    _version = '231'
    fluent_name = 'v-st-absorbtivity'
    _python_name = 'v_st_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ir_st_absorbtivity(Group):
    """
    'ir_st_absorbtivity' child.
    """
    _version = '231'
    fluent_name = 'ir-st-absorbtivity'
    _python_name = 'ir_st_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class d_st_absorbtivity(Group):
    """
    'd_st_absorbtivity' child.
    """
    _version = '231'
    fluent_name = 'd-st-absorbtivity'
    _python_name = 'd_st_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class d_transmissivity(Group):
    """
    'd_transmissivity' child.
    """
    _version = '231'
    fluent_name = 'd-transmissivity'
    _python_name = 'd_transmissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class fsi_interface(Boolean, AllowedValuesMixin):
    """
    'fsi_interface' child.
    """
    _version = '231'
    fluent_name = 'fsi-interface?'
    _python_name = 'fsi_interface'
    return_type = 'object'

class partially_catalytic(Boolean, AllowedValuesMixin):
    """
    'partially_catalytic' child.
    """
    _version = '231'
    fluent_name = 'partially-catalytic?'
    _python_name = 'partially_catalytic'
    return_type = 'object'

class partially_catalytic_material(String, AllowedValuesMixin):
    """
    'partially_catalytic_material' child.
    """
    _version = '231'
    fluent_name = 'partially-catalytic-material'
    _python_name = 'partially_catalytic_material'
    return_type = 'object'

class partially_catalytic_recombination_coefficient_o(Group):
    """
    'partially_catalytic_recombination_coefficient_o' child.
    """
    _version = '231'
    fluent_name = 'partially-catalytic-recombination-coefficient-o'
    _python_name = 'partially_catalytic_recombination_coefficient_o'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class partially_catalytic_recombination_coefficient_n(Group):
    """
    'partially_catalytic_recombination_coefficient_n' child.
    """
    _version = '231'
    fluent_name = 'partially-catalytic-recombination-coefficient-n'
    _python_name = 'partially_catalytic_recombination_coefficient_n'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class partially_catalytic_recombination_model(String, AllowedValuesMixin):
    """
    'partially_catalytic_recombination_model' child.
    """
    _version = '231'
    fluent_name = 'partially-catalytic-recombination-model'
    _python_name = 'partially_catalytic_recombination_model'
    return_type = 'object'

class species_spec_child(String, AllowedValuesMixin):
    """
    'child_object_type' of species_spec.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'species_spec_child'
    return_type = 'object'

class species_spec(NamedObject[species_spec_child], _NonCreatableNamedObjectMixin[species_spec_child]):
    """
    'species_spec' child.
    """
    _version = '231'
    fluent_name = 'species-spec'
    _python_name = 'species_spec'
    child_object_type = species_spec_child
    return_type = 'object'

class elec_potential_jump(Group):
    """
    'elec_potential_jump' child.
    """
    _version = '231'
    fluent_name = 'elec-potential-jump'
    _python_name = 'elec_potential_jump'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class elec_potential_resistance(Group):
    """
    'elec_potential_resistance' child.
    """
    _version = '231'
    fluent_name = 'elec-potential-resistance'
    _python_name = 'elec_potential_resistance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class echem_reaction(Boolean, AllowedValuesMixin):
    """
    'echem_reaction' child.
    """
    _version = '231'
    fluent_name = 'echem-reaction?'
    _python_name = 'echem_reaction'
    return_type = 'object'

class elec_potential_mechs(String, AllowedValuesMixin):
    """
    'elec_potential_mechs' child.
    """
    _version = '231'
    fluent_name = 'elec-potential-mechs'
    _python_name = 'elec_potential_mechs'
    return_type = 'object'

class faradaic_heat(Boolean, AllowedValuesMixin):
    """
    'faradaic_heat' child.
    """
    _version = '231'
    fluent_name = 'faradaic-heat?'
    _python_name = 'faradaic_heat'
    return_type = 'object'

class li_ion_type(String, AllowedValuesMixin):
    """
    'li_ion_type' child.
    """
    _version = '231'
    fluent_name = 'li-ion-type'
    _python_name = 'li_ion_type'
    return_type = 'object'

class li_ion_value(Group):
    """
    'li_ion_value' child.
    """
    _version = '231'
    fluent_name = 'li-ion-value'
    _python_name = 'li_ion_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class per_dispx(Group):
    """
    'per_dispx' child.
    """
    _version = '231'
    fluent_name = 'per-dispx'
    _python_name = 'per_dispx'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class per_dispy(Group):
    """
    'per_dispy' child.
    """
    _version = '231'
    fluent_name = 'per-dispy'
    _python_name = 'per_dispy'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class per_dispz(Group):
    """
    'per_dispz' child.
    """
    _version = '231'
    fluent_name = 'per-dispz'
    _python_name = 'per_dispz'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class per_imagx(Group):
    """
    'per_imagx' child.
    """
    _version = '231'
    fluent_name = 'per-imagx'
    _python_name = 'per_imagx'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class per_imagy(Group):
    """
    'per_imagy' child.
    """
    _version = '231'
    fluent_name = 'per-imagy'
    _python_name = 'per_imagy'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class per_imagz(Group):
    """
    'per_imagz' child.
    """
    _version = '231'
    fluent_name = 'per-imagz'
    _python_name = 'per_imagz'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class freq(Group):
    """
    'freq' child.
    """
    _version = '231'
    fluent_name = 'freq'
    _python_name = 'freq'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class amp(Group):
    """
    'amp' child.
    """
    _version = '231'
    fluent_name = 'amp'
    _python_name = 'amp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class nodal_diam(Integer, AllowedValuesMixin):
    """
    'nodal_diam' child.
    """
    _version = '231'
    fluent_name = 'nodal-diam'
    _python_name = 'nodal_diam'
    return_type = 'object'

class pass_number(Group):
    """
    'pass_number' child.
    """
    _version = '231'
    fluent_name = 'pass-number'
    _python_name = 'pass_number'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class fwd(Boolean, AllowedValuesMixin):
    """
    'fwd' child.
    """
    _version = '231'
    fluent_name = 'fwd?'
    _python_name = 'fwd'
    return_type = 'object'

class aero(Boolean, AllowedValuesMixin):
    """
    'aero' child.
    """
    _version = '231'
    fluent_name = 'aero?'
    _python_name = 'aero'
    return_type = 'object'

class cmplx(Boolean, AllowedValuesMixin):
    """
    'cmplx' child.
    """
    _version = '231'
    fluent_name = 'cmplx?'
    _python_name = 'cmplx'
    return_type = 'object'

class norm(Boolean, AllowedValuesMixin):
    """
    'norm' child.
    """
    _version = '231'
    fluent_name = 'norm?'
    _python_name = 'norm'
    return_type = 'object'

class method_2(Integer, AllowedValuesMixin):
    """
    'method' child.
    """
    _version = '231'
    fluent_name = 'method?'
    _python_name = 'method'
    return_type = 'object'

class gtemp_bc(String, AllowedValuesMixin):
    """
    'gtemp_bc' child.
    """
    _version = '231'
    fluent_name = 'gtemp-bc'
    _python_name = 'gtemp_bc'
    return_type = 'object'

class g_temperature(Group):
    """
    'g_temperature' child.
    """
    _version = '231'
    fluent_name = 'g-temperature'
    _python_name = 'g_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class g_qflux(Group):
    """
    'g_qflux' child.
    """
    _version = '231'
    fluent_name = 'g-qflux'
    _python_name = 'g_qflux'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class wall_restitution_coeff(Real, AllowedValuesMixin):
    """
    'wall_restitution_coeff' child.
    """
    _version = '231'
    fluent_name = 'wall-restitution-coeff'
    _python_name = 'wall_restitution_coeff'
    return_type = 'object'

class rotation_axis_origin_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of rotation_axis_origin.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'rotation_axis_origin_child'
    return_type = 'object'

class rotation_axis_origin(ListObject[rotation_axis_origin_child]):
    """
    'rotation_axis_origin' child.
    """
    _version = '231'
    fluent_name = 'rotation-axis-origin'
    _python_name = 'rotation_axis_origin'
    child_object_type = rotation_axis_origin_child
    return_type = 'object'

class rotation_axis_direction_child(Real, AllowedValuesMixin):
    """
    'child_object_type' of rotation_axis_direction.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'rotation_axis_direction_child'
    return_type = 'object'

class rotation_axis_direction(ListObject[rotation_axis_direction_child]):
    """
    'rotation_axis_direction' child.
    """
    _version = '231'
    fluent_name = 'rotation-axis-direction'
    _python_name = 'rotation_axis_direction'
    child_object_type = rotation_axis_direction_child
    return_type = 'object'

class specified_shear(Boolean, AllowedValuesMixin):
    """
    'specified_shear' child.
    """
    _version = '231'
    fluent_name = 'specified-shear?'
    _python_name = 'specified_shear'
    return_type = 'object'

class shear_stress_child(Group):
    """
    'child_object_type' of shear_stress.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'shear_stress_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class shear_stress(ListObject[shear_stress_child]):
    """
    'shear_stress' child.
    """
    _version = '231'
    fluent_name = 'shear-stress'
    _python_name = 'shear_stress'
    child_object_type = shear_stress_child
    return_type = 'object'

class fslip(Real, AllowedValuesMixin):
    """
    'fslip' child.
    """
    _version = '231'
    fluent_name = 'fslip'
    _python_name = 'fslip'
    return_type = 'object'

class eslip(Real, AllowedValuesMixin):
    """
    'eslip' child.
    """
    _version = '231'
    fluent_name = 'eslip'
    _python_name = 'eslip'
    return_type = 'object'

class surf_tens_grad(Real, AllowedValuesMixin):
    """
    'surf_tens_grad' child.
    """
    _version = '231'
    fluent_name = 'surf-tens-grad'
    _python_name = 'surf_tens_grad'
    return_type = 'object'

class contact_resistance(Group):
    """
    'contact_resistance' child.
    """
    _version = '231'
    fluent_name = 'contact-resistance'
    _python_name = 'contact_resistance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class surf_washcoat_factor(Real, AllowedValuesMixin):
    """
    'surf_washcoat_factor' child.
    """
    _version = '231'
    fluent_name = 'surf-washcoat-factor'
    _python_name = 'surf_washcoat_factor'
    return_type = 'object'

class initial_deposition_height(Real, AllowedValuesMixin):
    """
    'initial_deposition_height' child.
    """
    _version = '231'
    fluent_name = 'initial-deposition-height'
    _python_name = 'initial_deposition_height'
    return_type = 'object'

class solid_species_density(Real, AllowedValuesMixin):
    """
    'solid_species_density' child.
    """
    _version = '231'
    fluent_name = 'solid-species-density'
    _python_name = 'solid_species_density'
    return_type = 'object'

class ablation_select_model(String, AllowedValuesMixin):
    """
    'ablation_select_model' child.
    """
    _version = '231'
    fluent_name = 'ablation-select-model'
    _python_name = 'ablation_select_model'
    return_type = 'object'

class ablation_vielle_a(Real, AllowedValuesMixin):
    """
    'ablation_vielle_a' child.
    """
    _version = '231'
    fluent_name = 'ablation-vielle-a'
    _python_name = 'ablation_vielle_a'
    return_type = 'object'

class ablation_vielle_n(Real, AllowedValuesMixin):
    """
    'ablation_vielle_n' child.
    """
    _version = '231'
    fluent_name = 'ablation-vielle-n'
    _python_name = 'ablation_vielle_n'
    return_type = 'object'

class ablation_flux(Boolean, AllowedValuesMixin):
    """
    'ablation_flux' child.
    """
    _version = '231'
    fluent_name = 'ablation-flux?'
    _python_name = 'ablation_flux'
    return_type = 'object'

class ablation_surfacerxn_density(Real, AllowedValuesMixin):
    """
    'ablation_surfacerxn_density' child.
    """
    _version = '231'
    fluent_name = 'ablation-surfacerxn-density'
    _python_name = 'ablation_surfacerxn_density'
    return_type = 'object'

class ablation_species_mf_child(Group):
    """
    'child_object_type' of ablation_species_mf.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'ablation_species_mf_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class ablation_species_mf(NamedObject[ablation_species_mf_child], _NonCreatableNamedObjectMixin[ablation_species_mf_child]):
    """
    'ablation_species_mf' child.
    """
    _version = '231'
    fluent_name = 'ablation-species-mf'
    _python_name = 'ablation_species_mf'
    child_object_type = ablation_species_mf_child
    return_type = 'object'

class specular_coeff(Real, AllowedValuesMixin):
    """
    'specular_coeff' child.
    """
    _version = '231'
    fluent_name = 'specular-coeff'
    _python_name = 'specular_coeff'
    return_type = 'object'

class mom_accom_coef(Real, AllowedValuesMixin):
    """
    'mom_accom_coef' child.
    """
    _version = '231'
    fluent_name = 'mom-accom-coef'
    _python_name = 'mom_accom_coef'
    return_type = 'object'

class therm_accom_coef(Real, AllowedValuesMixin):
    """
    'therm_accom_coef' child.
    """
    _version = '231'
    fluent_name = 'therm-accom-coef'
    _python_name = 'therm_accom_coef'
    return_type = 'object'

class eve_accom_coef(Real, AllowedValuesMixin):
    """
    'eve_accom_coef' child.
    """
    _version = '231'
    fluent_name = 'eve-accom-coef'
    _python_name = 'eve_accom_coef'
    return_type = 'object'

class film_wall(Boolean, AllowedValuesMixin):
    """
    'film_wall' child.
    """
    _version = '231'
    fluent_name = 'film-wall?'
    _python_name = 'film_wall'
    return_type = 'object'

class film_wall_bc(String, AllowedValuesMixin):
    """
    'film_wall_bc' child.
    """
    _version = '231'
    fluent_name = 'film-wall-bc'
    _python_name = 'film_wall_bc'
    return_type = 'object'

class film_height(Group):
    """
    'film_height' child.
    """
    _version = '231'
    fluent_name = 'film-height'
    _python_name = 'film_height'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class flux_momentum_child(Group):
    """
    'child_object_type' of flux_momentum.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'flux_momentum_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class flux_momentum(ListObject[flux_momentum_child]):
    """
    'flux_momentum' child.
    """
    _version = '231'
    fluent_name = 'flux-momentum'
    _python_name = 'flux_momentum'
    child_object_type = flux_momentum_child
    return_type = 'object'

class film_relative_vel(Boolean, AllowedValuesMixin):
    """
    'film_relative_vel' child.
    """
    _version = '231'
    fluent_name = 'film-relative-vel?'
    _python_name = 'film_relative_vel'
    return_type = 'object'

class film_bc_imp_press(Boolean, AllowedValuesMixin):
    """
    'film_bc_imp_press' child.
    """
    _version = '231'
    fluent_name = 'film-bc-imp-press?'
    _python_name = 'film_bc_imp_press'
    return_type = 'object'

class film_temperature(Group):
    """
    'film_temperature' child.
    """
    _version = '231'
    fluent_name = 'film-temperature'
    _python_name = 'film_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class film_scalar(Group):
    """
    'film_scalar' child.
    """
    _version = '231'
    fluent_name = 'film-scalar'
    _python_name = 'film_scalar'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class film_source(Boolean, AllowedValuesMixin):
    """
    'film_source' child.
    """
    _version = '231'
    fluent_name = 'film-source?'
    _python_name = 'film_source'
    return_type = 'object'

class film_h_src(Group):
    """
    'film_h_src' child.
    """
    _version = '231'
    fluent_name = 'film-h-src'
    _python_name = 'film_h_src'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class momentum_source_child(Group):
    """
    'child_object_type' of momentum_source.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'momentum_source_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class momentum_source(ListObject[momentum_source_child]):
    """
    'momentum_source' child.
    """
    _version = '231'
    fluent_name = 'momentum-source'
    _python_name = 'momentum_source'
    child_object_type = momentum_source_child
    return_type = 'object'

class film_t_src(Group):
    """
    'film_t_src' child.
    """
    _version = '231'
    fluent_name = 'film-t-src'
    _python_name = 'film_t_src'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class film_s_src(Group):
    """
    'film_s_src' child.
    """
    _version = '231'
    fluent_name = 'film-s-src'
    _python_name = 'film_s_src'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class film_phase_change(Boolean, AllowedValuesMixin):
    """
    'film_phase_change' child.
    """
    _version = '231'
    fluent_name = 'film-phase-change?'
    _python_name = 'film_phase_change'
    return_type = 'object'

class film_phase_change_model(String, AllowedValuesMixin):
    """
    'film_phase_change_model' child.
    """
    _version = '231'
    fluent_name = 'film-phase-change-model'
    _python_name = 'film_phase_change_model'
    return_type = 'object'

class film_cond_const(Real, AllowedValuesMixin):
    """
    'film_cond_const' child.
    """
    _version = '231'
    fluent_name = 'film-cond-const'
    _python_name = 'film_cond_const'
    return_type = 'object'

class film_vapo_const(Real, AllowedValuesMixin):
    """
    'film_vapo_const' child.
    """
    _version = '231'
    fluent_name = 'film-vapo-const'
    _python_name = 'film_vapo_const'
    return_type = 'object'

class film_cond_rate(Group):
    """
    'film_cond_rate' child.
    """
    _version = '231'
    fluent_name = 'film-cond-rate'
    _python_name = 'film_cond_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class film_vapo_rate(Group):
    """
    'film_vapo_rate' child.
    """
    _version = '231'
    fluent_name = 'film-vapo-rate'
    _python_name = 'film_vapo_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class film_momentum_coupling(Boolean, AllowedValuesMixin):
    """
    'film_momentum_coupling' child.
    """
    _version = '231'
    fluent_name = 'film-momentum-coupling?'
    _python_name = 'film_momentum_coupling'
    return_type = 'object'

class film_splash_wall(Boolean, AllowedValuesMixin):
    """
    'film_splash_wall' child.
    """
    _version = '231'
    fluent_name = 'film-splash-wall?'
    _python_name = 'film_splash_wall'
    return_type = 'object'

class film_boundary_separation(Boolean, AllowedValuesMixin):
    """
    'film_boundary_separation' child.
    """
    _version = '231'
    fluent_name = 'film-boundary-separation?'
    _python_name = 'film_boundary_separation'
    return_type = 'object'

class film_impinge_model(String, AllowedValuesMixin):
    """
    'film_impinge_model' child.
    """
    _version = '231'
    fluent_name = 'film-impinge-model'
    _python_name = 'film_impinge_model'
    return_type = 'object'

class film_splash_nparc(Integer, AllowedValuesMixin):
    """
    'film_splash_nparc' child.
    """
    _version = '231'
    fluent_name = 'film-splash-nparc'
    _python_name = 'film_splash_nparc'
    return_type = 'object'

class film_crit_temp_factor(Real, AllowedValuesMixin):
    """
    'film_crit_temp_factor' child.
    """
    _version = '231'
    fluent_name = 'film-crit-temp-factor'
    _python_name = 'film_crit_temp_factor'
    return_type = 'object'

class film_roughness_ra(Real, AllowedValuesMixin):
    """
    'film_roughness_ra' child.
    """
    _version = '231'
    fluent_name = 'film-roughness-ra'
    _python_name = 'film_roughness_ra'
    return_type = 'object'

class film_roughness_rz(Real, AllowedValuesMixin):
    """
    'film_roughness_rz' child.
    """
    _version = '231'
    fluent_name = 'film-roughness-rz'
    _python_name = 'film_roughness_rz'
    return_type = 'object'

class film_upper_deposition_limit_offset(Real, AllowedValuesMixin):
    """
    'film_upper_deposition_limit_offset' child.
    """
    _version = '231'
    fluent_name = 'film-upper-deposition-limit-offset'
    _python_name = 'film_upper_deposition_limit_offset'
    return_type = 'object'

class film_deposition_delta_t(Real, AllowedValuesMixin):
    """
    'film_deposition_delta_t' child.
    """
    _version = '231'
    fluent_name = 'film-deposition-delta-t'
    _python_name = 'film_deposition_delta_t'
    return_type = 'object'

class film_laplace_number_constant(Real, AllowedValuesMixin):
    """
    'film_laplace_number_constant' child.
    """
    _version = '231'
    fluent_name = 'film-laplace-number-constant'
    _python_name = 'film_laplace_number_constant'
    return_type = 'object'

class film_partial_evap_ratio(Real, AllowedValuesMixin):
    """
    'film_partial_evap_ratio' child.
    """
    _version = '231'
    fluent_name = 'film-partial-evap-ratio'
    _python_name = 'film_partial_evap_ratio'
    return_type = 'object'

class film_contact_angle(Boolean, AllowedValuesMixin):
    """
    'film_contact_angle' child.
    """
    _version = '231'
    fluent_name = 'film-contact-angle?'
    _python_name = 'film_contact_angle'
    return_type = 'object'

class film_contact_angle_mean(Group):
    """
    'film_contact_angle_mean' child.
    """
    _version = '231'
    fluent_name = 'film-contact-angle-mean'
    _python_name = 'film_contact_angle_mean'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class film_contact_angle_rstd(Real, AllowedValuesMixin):
    """
    'film_contact_angle_rstd' child.
    """
    _version = '231'
    fluent_name = 'film-contact-angle-rstd'
    _python_name = 'film_contact_angle_rstd'
    return_type = 'object'

class film_contact_angle_beta(Real, AllowedValuesMixin):
    """
    'film_contact_angle_beta' child.
    """
    _version = '231'
    fluent_name = 'film-contact-angle-beta'
    _python_name = 'film_contact_angle_beta'
    return_type = 'object'

class film_vof_coupling_high(Boolean, AllowedValuesMixin):
    """
    'film_vof_coupling_high' child.
    """
    _version = '231'
    fluent_name = 'film-vof-coupling-high?'
    _python_name = 'film_vof_coupling_high'
    return_type = 'object'

class film_vof_trans_high(Real, AllowedValuesMixin):
    """
    'film_vof_trans_high' child.
    """
    _version = '231'
    fluent_name = 'film-vof-trans-high'
    _python_name = 'film_vof_trans_high'
    return_type = 'object'

class film_vof_trans_high_relax(Real, AllowedValuesMixin):
    """
    'film_vof_trans_high_relax' child.
    """
    _version = '231'
    fluent_name = 'film-vof-trans-high-relax'
    _python_name = 'film_vof_trans_high_relax'
    return_type = 'object'

class film_vof_coupling_low(Boolean, AllowedValuesMixin):
    """
    'film_vof_coupling_low' child.
    """
    _version = '231'
    fluent_name = 'film-vof-coupling-low?'
    _python_name = 'film_vof_coupling_low'
    return_type = 'object'

class film_vof_trans_low(Real, AllowedValuesMixin):
    """
    'film_vof_trans_low' child.
    """
    _version = '231'
    fluent_name = 'film-vof-trans-low'
    _python_name = 'film_vof_trans_low'
    return_type = 'object'

class film_vof_trans_low_relax(Real, AllowedValuesMixin):
    """
    'film_vof_trans_low_relax' child.
    """
    _version = '231'
    fluent_name = 'film-vof-trans-low-relax'
    _python_name = 'film_vof_trans_low_relax'
    return_type = 'object'

class caf(Group):
    """
    'caf' child.
    """
    _version = '231'
    fluent_name = 'caf'
    _python_name = 'caf'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_3,
        value=value,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    return_type = 'object'

class thermal_stabilization(Boolean, AllowedValuesMixin):
    """
    'thermal_stabilization' child.
    """
    _version = '231'
    fluent_name = 'thermal-stabilization?'
    _python_name = 'thermal_stabilization'
    return_type = 'object'

class scale_factor(Real, AllowedValuesMixin):
    """
    'scale_factor' child.
    """
    _version = '231'
    fluent_name = 'scale-factor'
    _python_name = 'scale_factor'
    return_type = 'object'

class stab_method(String, AllowedValuesMixin):
    """
    'stab_method' child.
    """
    _version = '231'
    fluent_name = 'stab-method'
    _python_name = 'stab_method'
    return_type = 'object'

class fensapice_ice_icing_mode(Integer, AllowedValuesMixin):
    """
    'fensapice_ice_icing_mode' child.
    """
    _version = '231'
    fluent_name = 'fensapice-ice-icing-mode'
    _python_name = 'fensapice_ice_icing_mode'
    return_type = 'object'

class fensapice_ice_hflux(Boolean, AllowedValuesMixin):
    """
    'fensapice_ice_hflux' child.
    """
    _version = '231'
    fluent_name = 'fensapice-ice-hflux?'
    _python_name = 'fensapice_ice_hflux'
    return_type = 'object'

class fensapice_ice_hflux_1(Real, AllowedValuesMixin):
    """
    'fensapice_ice_hflux' child.
    """
    _version = '231'
    fluent_name = 'fensapice-ice-hflux'
    _python_name = 'fensapice_ice_hflux'
    return_type = 'object'

class fensapice_drop_vwet(Boolean, AllowedValuesMixin):
    """
    'fensapice_drop_vwet' child.
    """
    _version = '231'
    fluent_name = 'fensapice-drop-vwet?'
    _python_name = 'fensapice_drop_vwet'
    return_type = 'object'

class phase_24_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'd', 'q_dot', 'material', 'thermal_bc', 't', 'q', 'h', 'tinf', 'planar_conduction', 'shell_conduction', 'thin_wall', 'motion_bc', 'shear_bc', 'rough_bc', 'moving', 'relative', 'rotating', 'vmag', 'wall_translation', 'components', 'velocity', 'in_emiss', 'ex_emiss', 'trad', 'int_rad', 'trad_internal', 'area_enhancement_factor', 'rough_option', 'rough_nasa', 'rough_shin_et_al', 'rough_data', 'roughness_height', 'roughness_const', 'roughness_height_cp', 'roughness_const_cp', 'roughness_const_nasa', 'roughness_const_shin', 'roughness_const_data', 'variable_roughness', 'free_stream_velocity', 'free_stream_temp', 'characteristic_length', 'free_stream_temp_cp', 'characteristic_length_cp', 'liquid_content', 'liquid_content_cp', 'droplet_diameter', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_norm_coeff', 'dpm_bc_tang_coeff', 'dpm_bc_frictn_coeff', 'dpm_bc_udf', 'dpm_film_splash_nsamp', 'dpm_crit_temp_option', 'dpm_critical_temp_factor', 'dpm_calibratable_temp', 'dpm_impingement_splashing_model', 'dpm_upper_deposition_limit_offset', 'dpm_deposition_delta_t', 'dpm_laplace_number_constant', 'dpm_partial_evaporation_ratio', 'ra_roughness', 'rz_roughness', 'rq_roughness', 'rsm_roughness', 'dpm_bc_erosion_generic', 'dpm_bc_erosion', 'dpm_bc_erosion_c', 'dpm_bc_erosion_n', 'dpm_bc_erosion_finnie', 'dpm_bc_erosion_finnie_k', 'dpm_bc_erosion_finnie_vel_exp', 'dpm_bc_erosion_finnie_max_erosion_angle', 'dpm_bc_erosion_mclaury', 'dpm_bc_erosion_mclaury_a', 'dpm_bc_erosion_mclaury_vel_exp', 'dpm_bc_erosion_mclaury_transition_angle', 'dpm_bc_erosion_mclaury_b', 'dpm_bc_erosion_mclaury_c', 'dpm_bc_erosion_mclaury_w', 'dpm_bc_erosion_mclaury_x', 'dpm_bc_erosion_mclaury_y', 'dpm_bc_erosion_oka', 'dpm_bc_erosion_oka_e90', 'dpm_bc_erosion_oka_hv', 'dpm_bc_erosion_oka_n1', 'dpm_bc_erosion_oka_n2', 'dpm_bc_erosion_oka_k2', 'dpm_bc_erosion_oka_k3', 'dpm_bc_erosion_oka_dref', 'dpm_bc_erosion_oka_vref', 'dpm_bc_erosion_dnv', 'dpm_bc_erosion_dnv_k', 'dpm_bc_erosion_dnv_n', 'dpm_bc_erosion_dnv_ductile', 'dpm_bc_erosion_shear', 'dpm_bc_erosion_shear_v', 'dpm_bc_erosion_shear_c', 'dpm_bc_erosion_shear_packing_limit', 'dpm_bc_erosion_shielding', 'dpm_wall_heat_exchange', 'dpm_film_condensation', 'dpm_film_bl_model', 'dpm_particle_stripping', 'dpm_critical_shear_stress', 'dpm_film_separation_model', 'dpm_critical_we_number', 'dpm_film_separation_angle', 'dpm_allow_lwf_to_vof', 'dpm_allow_vof_to_lwf', 'dpm_initialize_lwf', 'dpm_initial_height', 'film_velocity', 'dpm_initial_temperature', 'dpm_initial_injection', 'film_parcel_surface_area_density', 'minimum_number_of_parcels_per_face', 'band_in_emiss', 'radiation_bc', 'mc_bsource_p', 'mc_poldfun_p', 'polar_func_type', 'mc_polar_expr', 'polar_pair_list', 'pold_pair_list_rad', 'radiation_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'band_diffuse_frac', 'radiating_s2s_surface', 'critical_zone', 'fpsc', 'parallel_collimated_beam', 'solar_fluxes', 'solar_direction', 'solar_irradiation', 'v_transmissivity', 'ir_transmissivity', 'v_opq_absorbtivity', 'ir_opq_absorbtivity', 'v_st_absorbtivity', 'ir_st_absorbtivity', 'd_st_absorbtivity', 'd_transmissivity', 'fsi_interface', 'react', 'partially_catalytic', 'partially_catalytic_material', 'partially_catalytic_recombination_coefficient_o', 'partially_catalytic_recombination_coefficient_n', 'partially_catalytic_recombination_model', 'species_spec', 'mf', 'elec_potential_type', 'potential_value', 'elec_potential_jump', 'elec_potential_resistance', 'dual_potential_type', 'dual_potential_value', 'echem_reaction', 'elec_potential_mechs', 'faradaic_heat', 'li_ion_type', 'li_ion_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'per_dispx', 'per_dispy', 'per_dispz', 'per_imagx', 'per_imagy', 'per_imagz', 'freq', 'amp', 'nodal_diam', 'pass_number', 'fwd', 'aero', 'cmplx', 'norm', 'method', 'uds_bc', 'uds', 'gtemp_bc', 'g_temperature', 'g_qflux', 'wall_restitution_coeff', 'omega', 'rotation_axis_origin', 'rotation_axis_direction', 'adhesion_angle', 'specified_shear', 'shear_stress', 'fslip', 'eslip', 'surf_tens_grad', 'contact_resistance', 'reaction_mechs', 'surf_washcoat_factor', 'initial_deposition_height', 'solid_species_density', 'ablation_select_model', 'ablation_vielle_a', 'ablation_vielle_n', 'ablation_flux', 'ablation_surfacerxn_density', 'ablation_species_mf', 'specular_coeff', 'mom_accom_coef', 'therm_accom_coef', 'eve_accom_coef', 'film_wall', 'film_wall_bc', 'film_height', 'flux_momentum', 'film_relative_vel', 'film_bc_imp_press', 'film_temperature', 'film_scalar', 'film_source', 'film_h_src', 'momentum_source', 'film_t_src', 'film_s_src', 'film_phase_change', 'film_phase_change_model', 'film_cond_const', 'film_vapo_const', 'film_cond_rate', 'film_vapo_rate', 'film_momentum_coupling', 'film_splash_wall', 'film_boundary_separation', 'film_impinge_model', 'film_splash_nparc', 'film_crit_temp_factor', 'film_roughness_ra', 'film_roughness_rz', 'film_upper_deposition_limit_offset', 'film_deposition_delta_t', 'film_laplace_number_constant', 'film_partial_evap_ratio', 'film_contact_angle', 'film_contact_angle_mean', 'film_contact_angle_rstd', 'film_contact_angle_beta', 'film_vof_coupling_high', 'film_vof_trans_high', 'film_vof_trans_high_relax', 'film_vof_coupling_low', 'film_vof_trans_low', 'film_vof_trans_low_relax', 'caf', 'thermal_stabilization', 'scale_factor', 'stab_method', 'fensapice_flow_bc_subtype', 'fensapice_ice_icing_mode', 'fensapice_ice_hflux', 'fensapice_ice_hflux_1', 'fensapice_drop_vwet']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        d=d,
        q_dot=q_dot,
        material=material_1,
        thermal_bc=thermal_bc,
        t=t,
        q=q,
        h=h,
        tinf=tinf_1,
        planar_conduction=planar_conduction,
        shell_conduction=shell_conduction,
        thin_wall=thin_wall,
        motion_bc=motion_bc,
        shear_bc=shear_bc,
        rough_bc=rough_bc,
        moving=moving,
        relative=relative,
        rotating=rotating,
        vmag=vmag,
        wall_translation=wall_translation,
        components=components_1,
        velocity=velocity_1,
        in_emiss=in_emiss,
        ex_emiss=ex_emiss,
        trad=trad,
        int_rad=int_rad,
        trad_internal=trad_internal,
        area_enhancement_factor=area_enhancement_factor,
        rough_option=rough_option,
        rough_nasa=rough_nasa,
        rough_shin_et_al=rough_shin_et_al,
        rough_data=rough_data,
        roughness_height=roughness_height,
        roughness_const=roughness_const,
        roughness_height_cp=roughness_height_cp,
        roughness_const_cp=roughness_const_cp,
        roughness_const_nasa=roughness_const_nasa,
        roughness_const_shin=roughness_const_shin,
        roughness_const_data=roughness_const_data,
        variable_roughness=variable_roughness,
        free_stream_velocity=free_stream_velocity,
        free_stream_temp=free_stream_temp,
        characteristic_length=characteristic_length,
        free_stream_temp_cp=free_stream_temp_cp,
        characteristic_length_cp=characteristic_length_cp,
        liquid_content=liquid_content,
        liquid_content_cp=liquid_content_cp,
        droplet_diameter=droplet_diameter,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_norm_coeff=dpm_bc_norm_coeff,
        dpm_bc_tang_coeff=dpm_bc_tang_coeff,
        dpm_bc_frictn_coeff=dpm_bc_frictn_coeff,
        dpm_bc_udf=dpm_bc_udf,
        dpm_film_splash_nsamp=dpm_film_splash_nsamp,
        dpm_crit_temp_option=dpm_crit_temp_option,
        dpm_critical_temp_factor=dpm_critical_temp_factor,
        dpm_calibratable_temp=dpm_calibratable_temp,
        dpm_impingement_splashing_model=dpm_impingement_splashing_model,
        dpm_upper_deposition_limit_offset=dpm_upper_deposition_limit_offset,
        dpm_deposition_delta_t=dpm_deposition_delta_t,
        dpm_laplace_number_constant=dpm_laplace_number_constant,
        dpm_partial_evaporation_ratio=dpm_partial_evaporation_ratio,
        ra_roughness=ra_roughness,
        rz_roughness=rz_roughness,
        rq_roughness=rq_roughness,
        rsm_roughness=rsm_roughness,
        dpm_bc_erosion_generic=dpm_bc_erosion_generic,
        dpm_bc_erosion=dpm_bc_erosion,
        dpm_bc_erosion_c=dpm_bc_erosion_c,
        dpm_bc_erosion_n=dpm_bc_erosion_n,
        dpm_bc_erosion_finnie=dpm_bc_erosion_finnie,
        dpm_bc_erosion_finnie_k=dpm_bc_erosion_finnie_k,
        dpm_bc_erosion_finnie_vel_exp=dpm_bc_erosion_finnie_vel_exp,
        dpm_bc_erosion_finnie_max_erosion_angle=dpm_bc_erosion_finnie_max_erosion_angle,
        dpm_bc_erosion_mclaury=dpm_bc_erosion_mclaury,
        dpm_bc_erosion_mclaury_a=dpm_bc_erosion_mclaury_a,
        dpm_bc_erosion_mclaury_vel_exp=dpm_bc_erosion_mclaury_vel_exp,
        dpm_bc_erosion_mclaury_transition_angle=dpm_bc_erosion_mclaury_transition_angle,
        dpm_bc_erosion_mclaury_b=dpm_bc_erosion_mclaury_b,
        dpm_bc_erosion_mclaury_c=dpm_bc_erosion_mclaury_c,
        dpm_bc_erosion_mclaury_w=dpm_bc_erosion_mclaury_w,
        dpm_bc_erosion_mclaury_x=dpm_bc_erosion_mclaury_x,
        dpm_bc_erosion_mclaury_y=dpm_bc_erosion_mclaury_y,
        dpm_bc_erosion_oka=dpm_bc_erosion_oka,
        dpm_bc_erosion_oka_e90=dpm_bc_erosion_oka_e90,
        dpm_bc_erosion_oka_hv=dpm_bc_erosion_oka_hv,
        dpm_bc_erosion_oka_n1=dpm_bc_erosion_oka_n1,
        dpm_bc_erosion_oka_n2=dpm_bc_erosion_oka_n2,
        dpm_bc_erosion_oka_k2=dpm_bc_erosion_oka_k2,
        dpm_bc_erosion_oka_k3=dpm_bc_erosion_oka_k3,
        dpm_bc_erosion_oka_dref=dpm_bc_erosion_oka_dref,
        dpm_bc_erosion_oka_vref=dpm_bc_erosion_oka_vref,
        dpm_bc_erosion_dnv=dpm_bc_erosion_dnv,
        dpm_bc_erosion_dnv_k=dpm_bc_erosion_dnv_k,
        dpm_bc_erosion_dnv_n=dpm_bc_erosion_dnv_n,
        dpm_bc_erosion_dnv_ductile=dpm_bc_erosion_dnv_ductile,
        dpm_bc_erosion_shear=dpm_bc_erosion_shear,
        dpm_bc_erosion_shear_v=dpm_bc_erosion_shear_v,
        dpm_bc_erosion_shear_c=dpm_bc_erosion_shear_c,
        dpm_bc_erosion_shear_packing_limit=dpm_bc_erosion_shear_packing_limit,
        dpm_bc_erosion_shielding=dpm_bc_erosion_shielding,
        dpm_wall_heat_exchange=dpm_wall_heat_exchange,
        dpm_film_condensation=dpm_film_condensation,
        dpm_film_bl_model=dpm_film_bl_model,
        dpm_particle_stripping=dpm_particle_stripping,
        dpm_critical_shear_stress=dpm_critical_shear_stress,
        dpm_film_separation_model=dpm_film_separation_model,
        dpm_critical_we_number=dpm_critical_we_number,
        dpm_film_separation_angle=dpm_film_separation_angle,
        dpm_allow_lwf_to_vof=dpm_allow_lwf_to_vof,
        dpm_allow_vof_to_lwf=dpm_allow_vof_to_lwf,
        dpm_initialize_lwf=dpm_initialize_lwf,
        dpm_initial_height=dpm_initial_height,
        film_velocity=film_velocity,
        dpm_initial_temperature=dpm_initial_temperature,
        dpm_initial_injection=dpm_initial_injection,
        film_parcel_surface_area_density=film_parcel_surface_area_density,
        minimum_number_of_parcels_per_face=minimum_number_of_parcels_per_face,
        band_in_emiss=band_in_emiss,
        radiation_bc=radiation_bc,
        mc_bsource_p=mc_bsource_p,
        mc_poldfun_p=mc_poldfun_p,
        polar_func_type=polar_func_type,
        mc_polar_expr=mc_polar_expr,
        polar_pair_list=polar_pair_list,
        pold_pair_list_rad=pold_pair_list_rad,
        radiation_direction=radiation_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        band_diffuse_frac=band_diffuse_frac,
        radiating_s2s_surface=radiating_s2s_surface,
        critical_zone=critical_zone,
        fpsc=fpsc,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_fluxes=solar_fluxes,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        v_transmissivity=v_transmissivity,
        ir_transmissivity=ir_transmissivity,
        v_opq_absorbtivity=v_opq_absorbtivity,
        ir_opq_absorbtivity=ir_opq_absorbtivity,
        v_st_absorbtivity=v_st_absorbtivity,
        ir_st_absorbtivity=ir_st_absorbtivity,
        d_st_absorbtivity=d_st_absorbtivity,
        d_transmissivity=d_transmissivity,
        fsi_interface=fsi_interface,
        react=react,
        partially_catalytic=partially_catalytic,
        partially_catalytic_material=partially_catalytic_material,
        partially_catalytic_recombination_coefficient_o=partially_catalytic_recombination_coefficient_o,
        partially_catalytic_recombination_coefficient_n=partially_catalytic_recombination_coefficient_n,
        partially_catalytic_recombination_model=partially_catalytic_recombination_model,
        species_spec=species_spec,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        elec_potential_jump=elec_potential_jump,
        elec_potential_resistance=elec_potential_resistance,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        echem_reaction=echem_reaction,
        elec_potential_mechs=elec_potential_mechs,
        faradaic_heat=faradaic_heat,
        li_ion_type=li_ion_type,
        li_ion_value=li_ion_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        per_dispx=per_dispx,
        per_dispy=per_dispy,
        per_dispz=per_dispz,
        per_imagx=per_imagx,
        per_imagy=per_imagy,
        per_imagz=per_imagz,
        freq=freq,
        amp=amp,
        nodal_diam=nodal_diam,
        pass_number=pass_number,
        fwd=fwd,
        aero=aero,
        cmplx=cmplx,
        norm=norm,
        method=method_2,
        uds_bc=uds_bc,
        uds=uds,
        gtemp_bc=gtemp_bc,
        g_temperature=g_temperature,
        g_qflux=g_qflux,
        wall_restitution_coeff=wall_restitution_coeff,
        omega=omega,
        rotation_axis_origin=rotation_axis_origin,
        rotation_axis_direction=rotation_axis_direction,
        adhesion_angle=adhesion_angle,
        specified_shear=specified_shear,
        shear_stress=shear_stress,
        fslip=fslip,
        eslip=eslip,
        surf_tens_grad=surf_tens_grad,
        contact_resistance=contact_resistance,
        reaction_mechs=reaction_mechs_1,
        surf_washcoat_factor=surf_washcoat_factor,
        initial_deposition_height=initial_deposition_height,
        solid_species_density=solid_species_density,
        ablation_select_model=ablation_select_model,
        ablation_vielle_a=ablation_vielle_a,
        ablation_vielle_n=ablation_vielle_n,
        ablation_flux=ablation_flux,
        ablation_surfacerxn_density=ablation_surfacerxn_density,
        ablation_species_mf=ablation_species_mf,
        specular_coeff=specular_coeff,
        mom_accom_coef=mom_accom_coef,
        therm_accom_coef=therm_accom_coef,
        eve_accom_coef=eve_accom_coef,
        film_wall=film_wall,
        film_wall_bc=film_wall_bc,
        film_height=film_height,
        flux_momentum=flux_momentum,
        film_relative_vel=film_relative_vel,
        film_bc_imp_press=film_bc_imp_press,
        film_temperature=film_temperature,
        film_scalar=film_scalar,
        film_source=film_source,
        film_h_src=film_h_src,
        momentum_source=momentum_source,
        film_t_src=film_t_src,
        film_s_src=film_s_src,
        film_phase_change=film_phase_change,
        film_phase_change_model=film_phase_change_model,
        film_cond_const=film_cond_const,
        film_vapo_const=film_vapo_const,
        film_cond_rate=film_cond_rate,
        film_vapo_rate=film_vapo_rate,
        film_momentum_coupling=film_momentum_coupling,
        film_splash_wall=film_splash_wall,
        film_boundary_separation=film_boundary_separation,
        film_impinge_model=film_impinge_model,
        film_splash_nparc=film_splash_nparc,
        film_crit_temp_factor=film_crit_temp_factor,
        film_roughness_ra=film_roughness_ra,
        film_roughness_rz=film_roughness_rz,
        film_upper_deposition_limit_offset=film_upper_deposition_limit_offset,
        film_deposition_delta_t=film_deposition_delta_t,
        film_laplace_number_constant=film_laplace_number_constant,
        film_partial_evap_ratio=film_partial_evap_ratio,
        film_contact_angle=film_contact_angle,
        film_contact_angle_mean=film_contact_angle_mean,
        film_contact_angle_rstd=film_contact_angle_rstd,
        film_contact_angle_beta=film_contact_angle_beta,
        film_vof_coupling_high=film_vof_coupling_high,
        film_vof_trans_high=film_vof_trans_high,
        film_vof_trans_high_relax=film_vof_trans_high_relax,
        film_vof_coupling_low=film_vof_coupling_low,
        film_vof_trans_low=film_vof_trans_low,
        film_vof_trans_low_relax=film_vof_trans_low_relax,
        caf=caf,
        thermal_stabilization=thermal_stabilization,
        scale_factor=scale_factor,
        stab_method=stab_method,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_ice_icing_mode=fensapice_ice_icing_mode,
        fensapice_ice_hflux=fensapice_ice_hflux,
        fensapice_ice_hflux_1=fensapice_ice_hflux_1,
        fensapice_drop_vwet=fensapice_drop_vwet,
    )
    return_type = 'object'

class phase_24(NamedObject[phase_24_child], _NonCreatableNamedObjectMixin[phase_24_child]):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    child_object_type = phase_24_child
    return_type = 'object'

class wall_child(Group):
    """
    'child_object_type' of wall.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'wall_child'
    child_names = ['phase', 'geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread', 'd', 'q_dot', 'material', 'thermal_bc', 't', 'q', 'h', 'tinf', 'planar_conduction', 'shell_conduction', 'thin_wall', 'motion_bc', 'shear_bc', 'rough_bc', 'moving', 'relative', 'rotating', 'vmag', 'wall_translation', 'components', 'velocity', 'in_emiss', 'ex_emiss', 'trad', 'int_rad', 'trad_internal', 'area_enhancement_factor', 'rough_option', 'rough_nasa', 'rough_shin_et_al', 'rough_data', 'roughness_height', 'roughness_const', 'roughness_height_cp', 'roughness_const_cp', 'roughness_const_nasa', 'roughness_const_shin', 'roughness_const_data', 'variable_roughness', 'free_stream_velocity', 'free_stream_temp', 'characteristic_length', 'free_stream_temp_cp', 'characteristic_length_cp', 'liquid_content', 'liquid_content_cp', 'droplet_diameter', 'dpm_bc_type', 'dpm_bc_collision_partner', 'reinj_inj', 'dpm_bc_norm_coeff', 'dpm_bc_tang_coeff', 'dpm_bc_frictn_coeff', 'dpm_bc_udf', 'dpm_film_splash_nsamp', 'dpm_crit_temp_option', 'dpm_critical_temp_factor', 'dpm_calibratable_temp', 'dpm_impingement_splashing_model', 'dpm_upper_deposition_limit_offset', 'dpm_deposition_delta_t', 'dpm_laplace_number_constant', 'dpm_partial_evaporation_ratio', 'ra_roughness', 'rz_roughness', 'rq_roughness', 'rsm_roughness', 'dpm_bc_erosion_generic', 'dpm_bc_erosion', 'dpm_bc_erosion_c', 'dpm_bc_erosion_n', 'dpm_bc_erosion_finnie', 'dpm_bc_erosion_finnie_k', 'dpm_bc_erosion_finnie_vel_exp', 'dpm_bc_erosion_finnie_max_erosion_angle', 'dpm_bc_erosion_mclaury', 'dpm_bc_erosion_mclaury_a', 'dpm_bc_erosion_mclaury_vel_exp', 'dpm_bc_erosion_mclaury_transition_angle', 'dpm_bc_erosion_mclaury_b', 'dpm_bc_erosion_mclaury_c', 'dpm_bc_erosion_mclaury_w', 'dpm_bc_erosion_mclaury_x', 'dpm_bc_erosion_mclaury_y', 'dpm_bc_erosion_oka', 'dpm_bc_erosion_oka_e90', 'dpm_bc_erosion_oka_hv', 'dpm_bc_erosion_oka_n1', 'dpm_bc_erosion_oka_n2', 'dpm_bc_erosion_oka_k2', 'dpm_bc_erosion_oka_k3', 'dpm_bc_erosion_oka_dref', 'dpm_bc_erosion_oka_vref', 'dpm_bc_erosion_dnv', 'dpm_bc_erosion_dnv_k', 'dpm_bc_erosion_dnv_n', 'dpm_bc_erosion_dnv_ductile', 'dpm_bc_erosion_shear', 'dpm_bc_erosion_shear_v', 'dpm_bc_erosion_shear_c', 'dpm_bc_erosion_shear_packing_limit', 'dpm_bc_erosion_shielding', 'dpm_wall_heat_exchange', 'dpm_film_condensation', 'dpm_film_bl_model', 'dpm_particle_stripping', 'dpm_critical_shear_stress', 'dpm_film_separation_model', 'dpm_critical_we_number', 'dpm_film_separation_angle', 'dpm_allow_lwf_to_vof', 'dpm_allow_vof_to_lwf', 'dpm_initialize_lwf', 'dpm_initial_height', 'film_velocity', 'dpm_initial_temperature', 'dpm_initial_injection', 'film_parcel_surface_area_density', 'minimum_number_of_parcels_per_face', 'band_in_emiss', 'radiation_bc', 'mc_bsource_p', 'mc_poldfun_p', 'polar_func_type', 'mc_polar_expr', 'polar_pair_list', 'pold_pair_list_rad', 'radiation_direction', 'coll_dtheta', 'coll_dphi', 'band_q_irrad', 'band_q_irrad_diffuse', 'band_diffuse_frac', 'radiating_s2s_surface', 'critical_zone', 'fpsc', 'parallel_collimated_beam', 'solar_fluxes', 'solar_direction', 'solar_irradiation', 'v_transmissivity', 'ir_transmissivity', 'v_opq_absorbtivity', 'ir_opq_absorbtivity', 'v_st_absorbtivity', 'ir_st_absorbtivity', 'd_st_absorbtivity', 'd_transmissivity', 'fsi_interface', 'react', 'partially_catalytic', 'partially_catalytic_material', 'partially_catalytic_recombination_coefficient_o', 'partially_catalytic_recombination_coefficient_n', 'partially_catalytic_recombination_model', 'species_spec', 'mf', 'elec_potential_type', 'potential_value', 'elec_potential_jump', 'elec_potential_resistance', 'dual_potential_type', 'dual_potential_value', 'echem_reaction', 'elec_potential_mechs', 'faradaic_heat', 'li_ion_type', 'li_ion_value', 'x_displacement_type', 'x_displacement_value', 'y_displacement_type', 'y_displacement_value', 'z_displacement_type', 'z_displacement_value', 'per_dispx', 'per_dispy', 'per_dispz', 'per_imagx', 'per_imagy', 'per_imagz', 'freq', 'amp', 'nodal_diam', 'pass_number', 'fwd', 'aero', 'cmplx', 'norm', 'method', 'uds_bc', 'uds', 'gtemp_bc', 'g_temperature', 'g_qflux', 'wall_restitution_coeff', 'omega', 'rotation_axis_origin', 'rotation_axis_direction', 'adhesion_angle', 'specified_shear', 'shear_stress', 'fslip', 'eslip', 'surf_tens_grad', 'contact_resistance', 'reaction_mechs', 'surf_washcoat_factor', 'initial_deposition_height', 'solid_species_density', 'ablation_select_model', 'ablation_vielle_a', 'ablation_vielle_n', 'ablation_flux', 'ablation_surfacerxn_density', 'ablation_species_mf', 'specular_coeff', 'mom_accom_coef', 'therm_accom_coef', 'eve_accom_coef', 'film_wall', 'film_wall_bc', 'film_height', 'flux_momentum', 'film_relative_vel', 'film_bc_imp_press', 'film_temperature', 'film_scalar', 'film_source', 'film_h_src', 'momentum_source', 'film_t_src', 'film_s_src', 'film_phase_change', 'film_phase_change_model', 'film_cond_const', 'film_vapo_const', 'film_cond_rate', 'film_vapo_rate', 'film_momentum_coupling', 'film_splash_wall', 'film_boundary_separation', 'film_impinge_model', 'film_splash_nparc', 'film_crit_temp_factor', 'film_roughness_ra', 'film_roughness_rz', 'film_upper_deposition_limit_offset', 'film_deposition_delta_t', 'film_laplace_number_constant', 'film_partial_evap_ratio', 'film_contact_angle', 'film_contact_angle_mean', 'film_contact_angle_rstd', 'film_contact_angle_beta', 'film_vof_coupling_high', 'film_vof_trans_high', 'film_vof_trans_high_relax', 'film_vof_coupling_low', 'film_vof_trans_low', 'film_vof_trans_low_relax', 'caf', 'thermal_stabilization', 'scale_factor', 'stab_method', 'fensapice_flow_bc_subtype', 'fensapice_ice_icing_mode', 'fensapice_ice_hflux', 'fensapice_ice_hflux_1', 'fensapice_drop_vwet']
    _child_classes = dict(
        phase=phase_24,
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
        d=d,
        q_dot=q_dot,
        material=material_1,
        thermal_bc=thermal_bc,
        t=t,
        q=q,
        h=h,
        tinf=tinf_1,
        planar_conduction=planar_conduction,
        shell_conduction=shell_conduction,
        thin_wall=thin_wall,
        motion_bc=motion_bc,
        shear_bc=shear_bc,
        rough_bc=rough_bc,
        moving=moving,
        relative=relative,
        rotating=rotating,
        vmag=vmag,
        wall_translation=wall_translation,
        components=components_1,
        velocity=velocity_1,
        in_emiss=in_emiss,
        ex_emiss=ex_emiss,
        trad=trad,
        int_rad=int_rad,
        trad_internal=trad_internal,
        area_enhancement_factor=area_enhancement_factor,
        rough_option=rough_option,
        rough_nasa=rough_nasa,
        rough_shin_et_al=rough_shin_et_al,
        rough_data=rough_data,
        roughness_height=roughness_height,
        roughness_const=roughness_const,
        roughness_height_cp=roughness_height_cp,
        roughness_const_cp=roughness_const_cp,
        roughness_const_nasa=roughness_const_nasa,
        roughness_const_shin=roughness_const_shin,
        roughness_const_data=roughness_const_data,
        variable_roughness=variable_roughness,
        free_stream_velocity=free_stream_velocity,
        free_stream_temp=free_stream_temp,
        characteristic_length=characteristic_length,
        free_stream_temp_cp=free_stream_temp_cp,
        characteristic_length_cp=characteristic_length_cp,
        liquid_content=liquid_content,
        liquid_content_cp=liquid_content_cp,
        droplet_diameter=droplet_diameter,
        dpm_bc_type=dpm_bc_type,
        dpm_bc_collision_partner=dpm_bc_collision_partner,
        reinj_inj=reinj_inj,
        dpm_bc_norm_coeff=dpm_bc_norm_coeff,
        dpm_bc_tang_coeff=dpm_bc_tang_coeff,
        dpm_bc_frictn_coeff=dpm_bc_frictn_coeff,
        dpm_bc_udf=dpm_bc_udf,
        dpm_film_splash_nsamp=dpm_film_splash_nsamp,
        dpm_crit_temp_option=dpm_crit_temp_option,
        dpm_critical_temp_factor=dpm_critical_temp_factor,
        dpm_calibratable_temp=dpm_calibratable_temp,
        dpm_impingement_splashing_model=dpm_impingement_splashing_model,
        dpm_upper_deposition_limit_offset=dpm_upper_deposition_limit_offset,
        dpm_deposition_delta_t=dpm_deposition_delta_t,
        dpm_laplace_number_constant=dpm_laplace_number_constant,
        dpm_partial_evaporation_ratio=dpm_partial_evaporation_ratio,
        ra_roughness=ra_roughness,
        rz_roughness=rz_roughness,
        rq_roughness=rq_roughness,
        rsm_roughness=rsm_roughness,
        dpm_bc_erosion_generic=dpm_bc_erosion_generic,
        dpm_bc_erosion=dpm_bc_erosion,
        dpm_bc_erosion_c=dpm_bc_erosion_c,
        dpm_bc_erosion_n=dpm_bc_erosion_n,
        dpm_bc_erosion_finnie=dpm_bc_erosion_finnie,
        dpm_bc_erosion_finnie_k=dpm_bc_erosion_finnie_k,
        dpm_bc_erosion_finnie_vel_exp=dpm_bc_erosion_finnie_vel_exp,
        dpm_bc_erosion_finnie_max_erosion_angle=dpm_bc_erosion_finnie_max_erosion_angle,
        dpm_bc_erosion_mclaury=dpm_bc_erosion_mclaury,
        dpm_bc_erosion_mclaury_a=dpm_bc_erosion_mclaury_a,
        dpm_bc_erosion_mclaury_vel_exp=dpm_bc_erosion_mclaury_vel_exp,
        dpm_bc_erosion_mclaury_transition_angle=dpm_bc_erosion_mclaury_transition_angle,
        dpm_bc_erosion_mclaury_b=dpm_bc_erosion_mclaury_b,
        dpm_bc_erosion_mclaury_c=dpm_bc_erosion_mclaury_c,
        dpm_bc_erosion_mclaury_w=dpm_bc_erosion_mclaury_w,
        dpm_bc_erosion_mclaury_x=dpm_bc_erosion_mclaury_x,
        dpm_bc_erosion_mclaury_y=dpm_bc_erosion_mclaury_y,
        dpm_bc_erosion_oka=dpm_bc_erosion_oka,
        dpm_bc_erosion_oka_e90=dpm_bc_erosion_oka_e90,
        dpm_bc_erosion_oka_hv=dpm_bc_erosion_oka_hv,
        dpm_bc_erosion_oka_n1=dpm_bc_erosion_oka_n1,
        dpm_bc_erosion_oka_n2=dpm_bc_erosion_oka_n2,
        dpm_bc_erosion_oka_k2=dpm_bc_erosion_oka_k2,
        dpm_bc_erosion_oka_k3=dpm_bc_erosion_oka_k3,
        dpm_bc_erosion_oka_dref=dpm_bc_erosion_oka_dref,
        dpm_bc_erosion_oka_vref=dpm_bc_erosion_oka_vref,
        dpm_bc_erosion_dnv=dpm_bc_erosion_dnv,
        dpm_bc_erosion_dnv_k=dpm_bc_erosion_dnv_k,
        dpm_bc_erosion_dnv_n=dpm_bc_erosion_dnv_n,
        dpm_bc_erosion_dnv_ductile=dpm_bc_erosion_dnv_ductile,
        dpm_bc_erosion_shear=dpm_bc_erosion_shear,
        dpm_bc_erosion_shear_v=dpm_bc_erosion_shear_v,
        dpm_bc_erosion_shear_c=dpm_bc_erosion_shear_c,
        dpm_bc_erosion_shear_packing_limit=dpm_bc_erosion_shear_packing_limit,
        dpm_bc_erosion_shielding=dpm_bc_erosion_shielding,
        dpm_wall_heat_exchange=dpm_wall_heat_exchange,
        dpm_film_condensation=dpm_film_condensation,
        dpm_film_bl_model=dpm_film_bl_model,
        dpm_particle_stripping=dpm_particle_stripping,
        dpm_critical_shear_stress=dpm_critical_shear_stress,
        dpm_film_separation_model=dpm_film_separation_model,
        dpm_critical_we_number=dpm_critical_we_number,
        dpm_film_separation_angle=dpm_film_separation_angle,
        dpm_allow_lwf_to_vof=dpm_allow_lwf_to_vof,
        dpm_allow_vof_to_lwf=dpm_allow_vof_to_lwf,
        dpm_initialize_lwf=dpm_initialize_lwf,
        dpm_initial_height=dpm_initial_height,
        film_velocity=film_velocity,
        dpm_initial_temperature=dpm_initial_temperature,
        dpm_initial_injection=dpm_initial_injection,
        film_parcel_surface_area_density=film_parcel_surface_area_density,
        minimum_number_of_parcels_per_face=minimum_number_of_parcels_per_face,
        band_in_emiss=band_in_emiss,
        radiation_bc=radiation_bc,
        mc_bsource_p=mc_bsource_p,
        mc_poldfun_p=mc_poldfun_p,
        polar_func_type=polar_func_type,
        mc_polar_expr=mc_polar_expr,
        polar_pair_list=polar_pair_list,
        pold_pair_list_rad=pold_pair_list_rad,
        radiation_direction=radiation_direction,
        coll_dtheta=coll_dtheta,
        coll_dphi=coll_dphi,
        band_q_irrad=band_q_irrad,
        band_q_irrad_diffuse=band_q_irrad_diffuse,
        band_diffuse_frac=band_diffuse_frac,
        radiating_s2s_surface=radiating_s2s_surface,
        critical_zone=critical_zone,
        fpsc=fpsc,
        parallel_collimated_beam=parallel_collimated_beam,
        solar_fluxes=solar_fluxes,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        v_transmissivity=v_transmissivity,
        ir_transmissivity=ir_transmissivity,
        v_opq_absorbtivity=v_opq_absorbtivity,
        ir_opq_absorbtivity=ir_opq_absorbtivity,
        v_st_absorbtivity=v_st_absorbtivity,
        ir_st_absorbtivity=ir_st_absorbtivity,
        d_st_absorbtivity=d_st_absorbtivity,
        d_transmissivity=d_transmissivity,
        fsi_interface=fsi_interface,
        react=react,
        partially_catalytic=partially_catalytic,
        partially_catalytic_material=partially_catalytic_material,
        partially_catalytic_recombination_coefficient_o=partially_catalytic_recombination_coefficient_o,
        partially_catalytic_recombination_coefficient_n=partially_catalytic_recombination_coefficient_n,
        partially_catalytic_recombination_model=partially_catalytic_recombination_model,
        species_spec=species_spec,
        mf=mf,
        elec_potential_type=elec_potential_type,
        potential_value=potential_value,
        elec_potential_jump=elec_potential_jump,
        elec_potential_resistance=elec_potential_resistance,
        dual_potential_type=dual_potential_type,
        dual_potential_value=dual_potential_value,
        echem_reaction=echem_reaction,
        elec_potential_mechs=elec_potential_mechs,
        faradaic_heat=faradaic_heat,
        li_ion_type=li_ion_type,
        li_ion_value=li_ion_value,
        x_displacement_type=x_displacement_type,
        x_displacement_value=x_displacement_value,
        y_displacement_type=y_displacement_type,
        y_displacement_value=y_displacement_value,
        z_displacement_type=z_displacement_type,
        z_displacement_value=z_displacement_value,
        per_dispx=per_dispx,
        per_dispy=per_dispy,
        per_dispz=per_dispz,
        per_imagx=per_imagx,
        per_imagy=per_imagy,
        per_imagz=per_imagz,
        freq=freq,
        amp=amp,
        nodal_diam=nodal_diam,
        pass_number=pass_number,
        fwd=fwd,
        aero=aero,
        cmplx=cmplx,
        norm=norm,
        method=method_2,
        uds_bc=uds_bc,
        uds=uds,
        gtemp_bc=gtemp_bc,
        g_temperature=g_temperature,
        g_qflux=g_qflux,
        wall_restitution_coeff=wall_restitution_coeff,
        omega=omega,
        rotation_axis_origin=rotation_axis_origin,
        rotation_axis_direction=rotation_axis_direction,
        adhesion_angle=adhesion_angle,
        specified_shear=specified_shear,
        shear_stress=shear_stress,
        fslip=fslip,
        eslip=eslip,
        surf_tens_grad=surf_tens_grad,
        contact_resistance=contact_resistance,
        reaction_mechs=reaction_mechs_1,
        surf_washcoat_factor=surf_washcoat_factor,
        initial_deposition_height=initial_deposition_height,
        solid_species_density=solid_species_density,
        ablation_select_model=ablation_select_model,
        ablation_vielle_a=ablation_vielle_a,
        ablation_vielle_n=ablation_vielle_n,
        ablation_flux=ablation_flux,
        ablation_surfacerxn_density=ablation_surfacerxn_density,
        ablation_species_mf=ablation_species_mf,
        specular_coeff=specular_coeff,
        mom_accom_coef=mom_accom_coef,
        therm_accom_coef=therm_accom_coef,
        eve_accom_coef=eve_accom_coef,
        film_wall=film_wall,
        film_wall_bc=film_wall_bc,
        film_height=film_height,
        flux_momentum=flux_momentum,
        film_relative_vel=film_relative_vel,
        film_bc_imp_press=film_bc_imp_press,
        film_temperature=film_temperature,
        film_scalar=film_scalar,
        film_source=film_source,
        film_h_src=film_h_src,
        momentum_source=momentum_source,
        film_t_src=film_t_src,
        film_s_src=film_s_src,
        film_phase_change=film_phase_change,
        film_phase_change_model=film_phase_change_model,
        film_cond_const=film_cond_const,
        film_vapo_const=film_vapo_const,
        film_cond_rate=film_cond_rate,
        film_vapo_rate=film_vapo_rate,
        film_momentum_coupling=film_momentum_coupling,
        film_splash_wall=film_splash_wall,
        film_boundary_separation=film_boundary_separation,
        film_impinge_model=film_impinge_model,
        film_splash_nparc=film_splash_nparc,
        film_crit_temp_factor=film_crit_temp_factor,
        film_roughness_ra=film_roughness_ra,
        film_roughness_rz=film_roughness_rz,
        film_upper_deposition_limit_offset=film_upper_deposition_limit_offset,
        film_deposition_delta_t=film_deposition_delta_t,
        film_laplace_number_constant=film_laplace_number_constant,
        film_partial_evap_ratio=film_partial_evap_ratio,
        film_contact_angle=film_contact_angle,
        film_contact_angle_mean=film_contact_angle_mean,
        film_contact_angle_rstd=film_contact_angle_rstd,
        film_contact_angle_beta=film_contact_angle_beta,
        film_vof_coupling_high=film_vof_coupling_high,
        film_vof_trans_high=film_vof_trans_high,
        film_vof_trans_high_relax=film_vof_trans_high_relax,
        film_vof_coupling_low=film_vof_coupling_low,
        film_vof_trans_low=film_vof_trans_low,
        film_vof_trans_low_relax=film_vof_trans_low_relax,
        caf=caf,
        thermal_stabilization=thermal_stabilization,
        scale_factor=scale_factor,
        stab_method=stab_method,
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_ice_icing_mode=fensapice_ice_icing_mode,
        fensapice_ice_hflux=fensapice_ice_hflux,
        fensapice_ice_hflux_1=fensapice_ice_hflux_1,
        fensapice_drop_vwet=fensapice_drop_vwet,
    )
    return_type = 'object'

class wall(NamedObject[wall_child], _NonCreatableNamedObjectMixin[wall_child]):
    """
    'wall' child.
    """
    _version = '231'
    fluent_name = 'wall'
    _python_name = 'wall'
    child_object_type = wall_child
    return_type = 'object'

class slit_face_zone(Command):
    """
    Slit a two-sided wall into two connected wall zones.
    
    Parameters
    ----------
        zone_id : int
            'zone_id' child.
    """
    _version = '231'
    fluent_name = 'slit-face-zone'
    _python_name = 'slit_face_zone'
    argument_names = ['zone_id']
    _child_classes = dict(
        zone_id=zone_id,
    )
    return_type = 'object'

class slit_interior_between_diff_solids(Command):
    """
    Slit interior created between different solids into coupled walls.
    """
    _version = '231'
    fluent_name = 'slit-interior-between-diff-solids'
    _python_name = 'slit_interior_between_diff_solids'
    return_type = 'object'

class create_all_shell_threads(Command):
    """
    Mark all finite thickness wall for shell creation. Shell zones will be created at the start of iterations.
    """
    _version = '231'
    fluent_name = 'create-all-shell-threads'
    _python_name = 'create_all_shell_threads'
    return_type = 'object'

class recreate_all_shells(Command):
    """
    Create shell on all the walls where which were deleted using the command delete-all-shells.
    """
    _version = '231'
    fluent_name = 'recreate-all-shells'
    _python_name = 'recreate_all_shells'
    return_type = 'object'

class delete_all_shells(Command):
    """
    'delete_all_shells' command.
    """
    _version = '231'
    fluent_name = 'delete-all-shells'
    _python_name = 'delete_all_shells'
    return_type = 'object'

class face_zone_id(Integer):
    """
    'face_zone_id' child.
    """
    _version = '231'
    fluent_name = 'face-zone-id'
    _python_name = 'face_zone_id'
    return_type = 'object'

class orient_face_zone(Command):
    """
    Orient the face zone.
    
    Parameters
    ----------
        face_zone_id : int
            'face_zone_id' child.
    """
    _version = '231'
    fluent_name = 'orient-face-zone'
    _python_name = 'orient_face_zone'
    argument_names = ['face_zone_id']
    _child_classes = dict(
        face_zone_id=face_zone_id,
    )
    return_type = 'object'

class boundary_conditions(Group, _ChildNamedObjectAccessorMixin):
    """
    'boundary_conditions' child.
    """
    _version = '231'
    fluent_name = 'boundary-conditions'
    _python_name = 'boundary_conditions'
    child_names = ['axis', 'degassing', 'exhaust_fan', 'fan', 'geometry', 'inlet_vent', 'intake_fan', 'interface', 'interior', 'mass_flow_inlet', 'mass_flow_outlet', 'network', 'network_end', 'outflow', 'outlet_vent', 'overset', 'periodic', 'porous_jump', 'pressure_far_field', 'pressure_inlet', 'pressure_outlet', 'radiator', 'rans_les_interface', 'recirculation_inlet', 'recirculation_outlet', 'shadow', 'symmetry', 'velocity_inlet', 'wall']
    command_names = ['change_type', 'slit_face_zone', 'slit_interior_between_diff_solids', 'create_all_shell_threads', 'recreate_all_shells', 'delete_all_shells', 'orient_face_zone']
    _child_classes = dict(
        axis=axis,
        degassing=degassing,
        exhaust_fan=exhaust_fan,
        fan=fan,
        geometry=geometry_2,
        inlet_vent=inlet_vent,
        intake_fan=intake_fan,
        interface=interface,
        interior=interior,
        mass_flow_inlet=mass_flow_inlet,
        mass_flow_outlet=mass_flow_outlet,
        network=network,
        network_end=network_end,
        outflow=outflow,
        outlet_vent=outlet_vent,
        overset=overset,
        periodic=periodic,
        porous_jump=porous_jump,
        pressure_far_field=pressure_far_field,
        pressure_inlet=pressure_inlet,
        pressure_outlet=pressure_outlet,
        radiator=radiator,
        rans_les_interface=rans_les_interface,
        recirculation_inlet=recirculation_inlet,
        recirculation_outlet=recirculation_outlet,
        shadow=shadow,
        symmetry=symmetry,
        velocity_inlet=velocity_inlet,
        wall=wall,
        change_type=change_type,
        slit_face_zone=slit_face_zone,
        slit_interior_between_diff_solids=slit_interior_between_diff_solids,
        create_all_shell_threads=create_all_shell_threads,
        recreate_all_shells=recreate_all_shells,
        delete_all_shells=delete_all_shells,
        orient_face_zone=orient_face_zone,
    )
    return_type = 'object'

class area(Real):
    """
    Reference area for normalization.
    """
    _version = '231'
    fluent_name = 'area'
    _python_name = 'area'
    return_type = 'object'

class depth(Real):
    """
    Reference depth for volume calculation.
    """
    _version = '231'
    fluent_name = 'depth'
    _python_name = 'depth'
    return_type = 'object'

class density_6(Real):
    """
    Reference density for normalization.
    """
    _version = '231'
    fluent_name = 'density'
    _python_name = 'density'
    return_type = 'object'

class enthalpy(Real):
    """
    Reference enthalpy for enthalpy damping and normalization.
    """
    _version = '231'
    fluent_name = 'enthalpy'
    _python_name = 'enthalpy'
    return_type = 'object'

class length(Real):
    """
    Reference length for normalization.
    """
    _version = '231'
    fluent_name = 'length'
    _python_name = 'length'
    return_type = 'object'

class pressure(Real):
    """
    Reference pressure for normalization.
    """
    _version = '231'
    fluent_name = 'pressure'
    _python_name = 'pressure'
    return_type = 'object'

class temperature_3(Real):
    """
    Reference temperature for normalization.
    """
    _version = '231'
    fluent_name = 'temperature'
    _python_name = 'temperature'
    return_type = 'object'

class yplus(Real):
    """
    Reference yplus for normalization.
    """
    _version = '231'
    fluent_name = 'yplus'
    _python_name = 'yplus'
    return_type = 'object'

class velocity_2(Real):
    """
    Reference velocity for normalization.
    """
    _version = '231'
    fluent_name = 'velocity'
    _python_name = 'velocity'
    return_type = 'object'

class viscosity_3(Real):
    """
    Reference viscosity for normalization.
    """
    _version = '231'
    fluent_name = 'viscosity'
    _python_name = 'viscosity'
    return_type = 'object'

class zone(String):
    """
    Reference zone.
    """
    _version = '231'
    fluent_name = 'zone'
    _python_name = 'zone'
    return_type = 'object'

class from_zone_type(String, AllowedValuesMixin):
    """
    'from_zone_type' child.
    """
    _version = '231'
    fluent_name = 'from-zone-type'
    _python_name = 'from_zone_type'
    return_type = 'object'

class from_zone_name(String, AllowedValuesMixin):
    """
    'from_zone_name' child.
    """
    _version = '231'
    fluent_name = 'from-zone-name'
    _python_name = 'from_zone_name'
    return_type = 'object'

class phase_25(String):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    return_type = 'object'

class compute(Command):
    """
    'compute' command.
    """
    _version = '231'
    fluent_name = 'compute'
    _python_name = 'compute'
    argument_names = ['from_zone_type', 'from_zone_name', 'phase']
    _child_classes = dict(
        from_zone_type=from_zone_type,
        from_zone_name=from_zone_name,
        phase=phase_25,
    )
    return_type = 'object'

class list_val(Command):
    """
    'list_val' command.
    """
    _version = '231'
    fluent_name = 'list-val'
    _python_name = 'list_val'
    return_type = 'object'

class reference_values(Group):
    """
    'reference_values' child.
    """
    _version = '231'
    fluent_name = 'reference-values'
    _python_name = 'reference_values'
    child_names = ['area', 'depth', 'density', 'enthalpy', 'length', 'pressure', 'temperature', 'yplus', 'velocity', 'viscosity', 'zone']
    command_names = ['compute', 'list_val']
    _child_classes = dict(
        area=area,
        depth=depth,
        density=density_6,
        enthalpy=enthalpy,
        length=length,
        pressure=pressure,
        temperature=temperature_3,
        yplus=yplus,
        velocity=velocity_2,
        viscosity=viscosity_3,
        zone=zone,
        compute=compute,
        list_val=list_val,
    )
    return_type = 'object'

class definition(String, AllowedValuesMixin):
    """
    'definition' child.
    """
    _version = '231'
    fluent_name = 'definition'
    _python_name = 'definition'
    return_type = 'object'

class description(String, AllowedValuesMixin):
    """
    'description' child.
    """
    _version = '231'
    fluent_name = 'description'
    _python_name = 'description'
    return_type = 'object'

class parameterid(String, AllowedValuesMixin):
    """
    'parameterid' child.
    """
    _version = '231'
    fluent_name = 'parameterid'
    _python_name = 'parameterid'
    return_type = 'object'

class parametername(String, AllowedValuesMixin):
    """
    'parametername' child.
    """
    _version = '231'
    fluent_name = 'parametername'
    _python_name = 'parametername'
    return_type = 'object'

class unit_1(String, AllowedValuesMixin):
    """
    'unit' child.
    """
    _version = '231'
    fluent_name = 'unit'
    _python_name = 'unit'
    return_type = 'object'

class input_parameter(Boolean):
    """
    'input_parameter' child.
    """
    _version = '231'
    fluent_name = 'input-parameter'
    _python_name = 'input_parameter'
    return_type = 'object'

class output_parameter(Boolean):
    """
    'output_parameter' child.
    """
    _version = '231'
    fluent_name = 'output-parameter'
    _python_name = 'output_parameter'
    return_type = 'object'

class get_value(Query):
    """
    'get_value' query.
    """
    _version = '231'
    fluent_name = 'get-value'
    _python_name = 'get_value'
    return_type = 'object'

class named_expressions_child(Group):
    """
    'child_object_type' of named_expressions.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'named_expressions_child'
    child_names = ['name', 'definition', 'description', 'parameterid', 'parametername', 'unit', 'input_parameter', 'output_parameter']
    query_names = ['get_value']
    _child_classes = dict(
        name=name_1,
        definition=definition,
        description=description,
        parameterid=parameterid,
        parametername=parametername,
        unit=unit_1,
        input_parameter=input_parameter,
        output_parameter=output_parameter,
        get_value=get_value,
    )
    return_type = 'object'

class named_expressions(NamedObject[named_expressions_child], CreatableNamedObjectMixinOld[named_expressions_child]):
    """
    'named_expressions' child.
    """
    _version = '231'
    fluent_name = 'named-expressions'
    _python_name = 'named_expressions'
    child_object_type = named_expressions_child
    return_type = 'object'

class setup(Group):
    """
    'setup' child.
    """
    _version = '231'
    fluent_name = 'setup'
    _python_name = 'setup'
    child_names = ['general', 'models', 'materials', 'cell_zone_conditions', 'boundary_conditions', 'reference_values', 'named_expressions']
    _child_classes = dict(
        general=general,
        models=models,
        materials=materials,
        cell_zone_conditions=cell_zone_conditions,
        boundary_conditions=boundary_conditions,
        reference_values=reference_values,
        named_expressions=named_expressions,
    )
    return_type = 'object'

class under_relaxation_factor(Real):
    """
    Under-relaxation factor to be used in .
    """
    _version = '231'
    fluent_name = 'under-relaxation-factor'
    _python_name = 'under_relaxation_factor'
    return_type = 'object'

class explicit_relaxation_factor(Real):
    """
    Explicit relaxation factor to be applied to.
    """
    _version = '231'
    fluent_name = 'explicit-relaxation-factor'
    _python_name = 'explicit_relaxation_factor'
    return_type = 'object'

class expert(Group):
    """
    Object.
    """
    _version = '231'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['under_relaxation_factor', 'explicit_relaxation_factor']
    _child_classes = dict(
        under_relaxation_factor=under_relaxation_factor,
        explicit_relaxation_factor=explicit_relaxation_factor,
    )
    return_type = 'object'

class relative_convergence_criterion(Real):
    """
    Convergence tolerance for the timestep iterations.
    """
    _version = '231'
    fluent_name = 'relative-convergence-criterion'
    _python_name = 'relative_convergence_criterion'
    return_type = 'object'

class max_iter_per_timestep_count(Integer):
    """
    Maximum number of iterations per timestep.
    """
    _version = '231'
    fluent_name = 'max-iter-per-timestep-count'
    _python_name = 'max_iter_per_timestep_count'
    return_type = 'object'

class acoustics_wave_eqn_controls(Group):
    """
    Object.
    """
    _version = '231'
    fluent_name = 'acoustics-wave-eqn-controls'
    _python_name = 'acoustics_wave_eqn_controls'
    child_names = ['expert', 'relative_convergence_criterion', 'max_iter_per_timestep_count']
    _child_classes = dict(
        expert=expert,
        relative_convergence_criterion=relative_convergence_criterion,
        max_iter_per_timestep_count=max_iter_per_timestep_count,
    )
    return_type = 'object'

class cycle_type(String, AllowedValuesMixin):
    """
    'cycle_type' child.
    """
    _version = '231'
    fluent_name = 'cycle-type'
    _python_name = 'cycle_type'
    return_type = 'object'

class termination_criteria(Real):
    """
    'termination_criteria' child.
    """
    _version = '231'
    fluent_name = 'termination-criteria'
    _python_name = 'termination_criteria'
    return_type = 'object'

class residual_reduction_tolerance(Real):
    """
    'residual_reduction_tolerance' child.
    """
    _version = '231'
    fluent_name = 'residual-reduction-tolerance'
    _python_name = 'residual_reduction_tolerance'
    return_type = 'object'

class stabilization(String, AllowedValuesMixin):
    """
    'stabilization' child.
    """
    _version = '231'
    fluent_name = 'stabilization'
    _python_name = 'stabilization'
    return_type = 'object'

class mg_controls_child(Group):
    """
    'child_object_type' of mg_controls.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'mg_controls_child'
    child_names = ['cycle_type', 'termination_criteria', 'residual_reduction_tolerance', 'method', 'stabilization']
    _child_classes = dict(
        cycle_type=cycle_type,
        termination_criteria=termination_criteria,
        residual_reduction_tolerance=residual_reduction_tolerance,
        method=method_1,
        stabilization=stabilization,
    )
    return_type = 'object'

class mg_controls(NamedObject[mg_controls_child], _NonCreatableNamedObjectMixin[mg_controls_child]):
    """
    'mg_controls' child.
    """
    _version = '231'
    fluent_name = 'mg-controls'
    _python_name = 'mg_controls'
    child_object_type = mg_controls_child
    return_type = 'object'

class pre_sweeps(Integer):
    """
    Number of pre-relaxations for fixed cycles.
    """
    _version = '231'
    fluent_name = 'pre-sweeps'
    _python_name = 'pre_sweeps'
    return_type = 'object'

class post_sweeps(Integer):
    """
    Number of post-relaxations for fixed cycles.
    """
    _version = '231'
    fluent_name = 'post-sweeps'
    _python_name = 'post_sweeps'
    return_type = 'object'

class max_cycle(Integer):
    """
    Maximum number of cycles.
    """
    _version = '231'
    fluent_name = 'max-cycle'
    _python_name = 'max_cycle'
    return_type = 'object'

class fixed_cycle_parameters(Group):
    """
    'fixed_cycle_parameters' child.
    """
    _version = '231'
    fluent_name = 'fixed-cycle-parameters'
    _python_name = 'fixed_cycle_parameters'
    child_names = ['pre_sweeps', 'post_sweeps', 'max_cycle']
    _child_classes = dict(
        pre_sweeps=pre_sweeps,
        post_sweeps=post_sweeps,
        max_cycle=max_cycle,
    )
    return_type = 'object'

class max_coarse_levels(Integer):
    """
    Maximum number of coarse grid levels.
    """
    _version = '231'
    fluent_name = 'max-coarse-levels'
    _python_name = 'max_coarse_levels'
    return_type = 'object'

class coarsen_by_interval(Integer):
    """
    Coarsen by interval.
    """
    _version = '231'
    fluent_name = 'coarsen-by-interval'
    _python_name = 'coarsen_by_interval'
    return_type = 'object'

class conservative_coarsening(Boolean):
    """
    Use conservative AMG coarsening?.
    """
    _version = '231'
    fluent_name = 'conservative-coarsening?'
    _python_name = 'conservative_coarsening'
    return_type = 'object'

class aggressive_coarsening(Boolean):
    """
    Enable aggressive AMG coarsening for scalar equation systems.
    """
    _version = '231'
    fluent_name = 'aggressive-coarsening?'
    _python_name = 'aggressive_coarsening'
    return_type = 'object'

class laplace_coarsening(Boolean):
    """
    AMG laplace coarsening options.
    """
    _version = '231'
    fluent_name = 'laplace-coarsening?'
    _python_name = 'laplace_coarsening'
    return_type = 'object'

class coarsening_parameters(Group):
    """
    'coarsening_parameters' child.
    """
    _version = '231'
    fluent_name = 'coarsening-parameters'
    _python_name = 'coarsening_parameters'
    child_names = ['max_coarse_levels', 'coarsen_by_interval', 'conservative_coarsening', 'aggressive_coarsening', 'laplace_coarsening']
    _child_classes = dict(
        max_coarse_levels=max_coarse_levels,
        coarsen_by_interval=coarsen_by_interval,
        conservative_coarsening=conservative_coarsening,
        aggressive_coarsening=aggressive_coarsening,
        laplace_coarsening=laplace_coarsening,
    )
    return_type = 'object'

class smoother_type(String, AllowedValuesMixin):
    """
    Smoother type.
    """
    _version = '231'
    fluent_name = 'smoother-type'
    _python_name = 'smoother_type'
    return_type = 'object'

class scalar_parameters(Group):
    """
    'scalar_parameters' child.
    """
    _version = '231'
    fluent_name = 'scalar-parameters'
    _python_name = 'scalar_parameters'
    child_names = ['fixed_cycle_parameters', 'coarsening_parameters', 'smoother_type']
    _child_classes = dict(
        fixed_cycle_parameters=fixed_cycle_parameters,
        coarsening_parameters=coarsening_parameters,
        smoother_type=smoother_type,
    )
    return_type = 'object'

class pre_sweeps_1(Integer):
    """
    Coupled:number of pre-relaxations for fixed cycles.
    """
    _version = '231'
    fluent_name = 'pre-sweeps'
    _python_name = 'pre_sweeps'
    return_type = 'object'

class post_sweeps_1(Integer):
    """
    Coupled:number of post-relaxations for fixed cycles.
    """
    _version = '231'
    fluent_name = 'post-sweeps'
    _python_name = 'post_sweeps'
    return_type = 'object'

class max_cycle_1(Integer):
    """
    Coupled:maximum number of cycles.
    """
    _version = '231'
    fluent_name = 'max-cycle'
    _python_name = 'max_cycle'
    return_type = 'object'

class fixed_cycle_parameters_1(Group):
    """
    'fixed_cycle_parameters' child.
    """
    _version = '231'
    fluent_name = 'fixed-cycle-parameters'
    _python_name = 'fixed_cycle_parameters'
    child_names = ['pre_sweeps', 'post_sweeps', 'max_cycle']
    _child_classes = dict(
        pre_sweeps=pre_sweeps_1,
        post_sweeps=post_sweeps_1,
        max_cycle=max_cycle_1,
    )
    return_type = 'object'

class max_coarse_levels_1(Integer):
    """
    Coupled:maximum number of coarse grid levels.
    """
    _version = '231'
    fluent_name = 'max-coarse-levels'
    _python_name = 'max_coarse_levels'
    return_type = 'object'

class coarsen_by_interval_1(Integer):
    """
    Coupled:coarsen by interval.
    """
    _version = '231'
    fluent_name = 'coarsen-by-interval'
    _python_name = 'coarsen_by_interval'
    return_type = 'object'

class aggressive_coarsening_1(Boolean):
    """
    Enable aggressive AMG coarsening for coupled equation systems.
    """
    _version = '231'
    fluent_name = 'aggressive-coarsening?'
    _python_name = 'aggressive_coarsening'
    return_type = 'object'

class coarsening_parameters_1(Group):
    """
    'coarsening_parameters' child.
    """
    _version = '231'
    fluent_name = 'coarsening-parameters'
    _python_name = 'coarsening_parameters'
    child_names = ['max_coarse_levels', 'coarsen_by_interval', 'conservative_coarsening', 'aggressive_coarsening', 'laplace_coarsening']
    _child_classes = dict(
        max_coarse_levels=max_coarse_levels_1,
        coarsen_by_interval=coarsen_by_interval_1,
        conservative_coarsening=conservative_coarsening,
        aggressive_coarsening=aggressive_coarsening_1,
        laplace_coarsening=laplace_coarsening,
    )
    return_type = 'object'

class smoother_type_1(String, AllowedValuesMixin):
    """
    Coupled:smoother type.
    """
    _version = '231'
    fluent_name = 'smoother-type'
    _python_name = 'smoother_type'
    return_type = 'object'

class coupled_parameters(Group):
    """
    'coupled_parameters' child.
    """
    _version = '231'
    fluent_name = 'coupled-parameters'
    _python_name = 'coupled_parameters'
    child_names = ['fixed_cycle_parameters', 'coarsening_parameters', 'smoother_type']
    _child_classes = dict(
        fixed_cycle_parameters=fixed_cycle_parameters_1,
        coarsening_parameters=coarsening_parameters_1,
        smoother_type=smoother_type_1,
    )
    return_type = 'object'

class max_fine_relaxations(Integer):
    """
    Maximum number of fine level relaxations for flexible cycle.
    """
    _version = '231'
    fluent_name = 'max-fine-relaxations'
    _python_name = 'max_fine_relaxations'
    return_type = 'object'

class max_coarse_relaxations(Integer):
    """
    Maximum number of coarse level relaxations for flexible cycle.
    """
    _version = '231'
    fluent_name = 'max-coarse-relaxations'
    _python_name = 'max_coarse_relaxations'
    return_type = 'object'

class flexible_cycle_parameters(Group):
    """
    'flexible_cycle_parameters' child.
    """
    _version = '231'
    fluent_name = 'flexible-cycle-parameters'
    _python_name = 'flexible_cycle_parameters'
    child_names = ['max_fine_relaxations', 'max_coarse_relaxations']
    _child_classes = dict(
        max_fine_relaxations=max_fine_relaxations,
        max_coarse_relaxations=max_coarse_relaxations,
    )
    return_type = 'object'

class verbosity_3(Integer):
    """
    Multigrid verbosity.
    """
    _version = '231'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class options_2(Group):
    """
    'options' child.
    """
    _version = '231'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['verbosity']
    _child_classes = dict(
        verbosity=verbosity_3,
    )
    return_type = 'object'

class amg_controls(Group):
    """
    'amg_controls' child.
    """
    _version = '231'
    fluent_name = 'amg-controls'
    _python_name = 'amg_controls'
    child_names = ['scalar_parameters', 'coupled_parameters', 'flexible_cycle_parameters', 'options']
    _child_classes = dict(
        scalar_parameters=scalar_parameters,
        coupled_parameters=coupled_parameters,
        flexible_cycle_parameters=flexible_cycle_parameters,
        options=options_2,
    )
    return_type = 'object'

class pre_sweeps_2(Integer):
    """
    Number of fine grid relaxations.
    """
    _version = '231'
    fluent_name = 'pre-sweeps'
    _python_name = 'pre_sweeps'
    return_type = 'object'

class post_sweeps_2(Integer):
    """
    Number of relaxations after interpolation.
    """
    _version = '231'
    fluent_name = 'post-sweeps'
    _python_name = 'post_sweeps'
    return_type = 'object'

class fixed_cycle_parameters_2(Group):
    """
    'fixed_cycle_parameters' child.
    """
    _version = '231'
    fluent_name = 'fixed-cycle-parameters'
    _python_name = 'fixed_cycle_parameters'
    child_names = ['pre_sweeps', 'post_sweeps']
    _child_classes = dict(
        pre_sweeps=pre_sweeps_2,
        post_sweeps=post_sweeps_2,
    )
    return_type = 'object'

class max_coarse_levels_2(Integer):
    """
    Number of coarse grid levels.
    """
    _version = '231'
    fluent_name = 'max-coarse-levels'
    _python_name = 'max_coarse_levels'
    return_type = 'object'

class coarsen_by_interval_2(Integer):
    """
    Coarsen-by interval.
    """
    _version = '231'
    fluent_name = 'coarsen-by-interval'
    _python_name = 'coarsen_by_interval'
    return_type = 'object'

class coarsening_parameters_2(Group):
    """
    'coarsening_parameters' child.
    """
    _version = '231'
    fluent_name = 'coarsening-parameters'
    _python_name = 'coarsening_parameters'
    child_names = ['max_coarse_levels', 'coarsen_by_interval']
    _child_classes = dict(
        max_coarse_levels=max_coarse_levels_2,
        coarsen_by_interval=coarsen_by_interval_2,
    )
    return_type = 'object'

class courant_number_reduction(Real):
    """
    Coarse-grid Courant number reduction factor.
    """
    _version = '231'
    fluent_name = 'courant-number-reduction'
    _python_name = 'courant_number_reduction'
    return_type = 'object'

class correction_reduction(Real):
    """
    Correction relaxation factor.
    """
    _version = '231'
    fluent_name = 'correction-reduction'
    _python_name = 'correction_reduction'
    return_type = 'object'

class correction_smoothing(Real):
    """
    Correction smoothing factor.
    """
    _version = '231'
    fluent_name = 'correction-smoothing'
    _python_name = 'correction_smoothing'
    return_type = 'object'

class species_correction_reduction(Real):
    """
    Species relaxation factor.
    """
    _version = '231'
    fluent_name = 'species-correction-reduction'
    _python_name = 'species_correction_reduction'
    return_type = 'object'

class relaxation_factor_1(Group):
    """
    'relaxation_factor' child.
    """
    _version = '231'
    fluent_name = 'relaxation-factor'
    _python_name = 'relaxation_factor'
    child_names = ['courant_number_reduction', 'correction_reduction', 'correction_smoothing', 'species_correction_reduction']
    _child_classes = dict(
        courant_number_reduction=courant_number_reduction,
        correction_reduction=correction_reduction,
        correction_smoothing=correction_smoothing,
        species_correction_reduction=species_correction_reduction,
    )
    return_type = 'object'

class fas_mg_controls(Group):
    """
    'fas_mg_controls' child.
    """
    _version = '231'
    fluent_name = 'fas-mg-controls'
    _python_name = 'fas_mg_controls'
    child_names = ['fixed_cycle_parameters', 'coarsening_parameters', 'relaxation_factor', 'options']
    _child_classes = dict(
        fixed_cycle_parameters=fixed_cycle_parameters_2,
        coarsening_parameters=coarsening_parameters_2,
        relaxation_factor=relaxation_factor_1,
        options=options_2,
    )
    return_type = 'object'

class enable_gpu(Boolean):
    """
    'enable_gpu' child.
    """
    _version = '231'
    fluent_name = 'enable-gpu?'
    _python_name = 'enable_gpu'
    return_type = 'object'

class term_criterion(Real):
    """
    'term_criterion' child.
    """
    _version = '231'
    fluent_name = 'term-criterion'
    _python_name = 'term_criterion'
    return_type = 'object'

class solver_1(String, AllowedValuesMixin):
    """
    'solver' child.
    """
    _version = '231'
    fluent_name = 'solver'
    _python_name = 'solver'
    return_type = 'object'

class max_num_cycle(Integer):
    """
    'max_num_cycle' child.
    """
    _version = '231'
    fluent_name = 'max-num-cycle'
    _python_name = 'max_num_cycle'
    return_type = 'object'

class coarsen_by_size(Integer):
    """
    'coarsen_by_size' child.
    """
    _version = '231'
    fluent_name = 'coarsen-by-size'
    _python_name = 'coarsen_by_size'
    return_type = 'object'

class pre_sweep(Integer):
    """
    'pre_sweep' child.
    """
    _version = '231'
    fluent_name = 'pre-sweep'
    _python_name = 'pre_sweep'
    return_type = 'object'

class post_sweep(Integer):
    """
    'post_sweep' child.
    """
    _version = '231'
    fluent_name = 'post-sweep'
    _python_name = 'post_sweep'
    return_type = 'object'

class smoother(String):
    """
    'smoother' child.
    """
    _version = '231'
    fluent_name = 'smoother'
    _python_name = 'smoother'
    return_type = 'object'

class amg_gpgpu_options_child(Group):
    """
    'child_object_type' of amg_gpgpu_options.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'amg_gpgpu_options_child'
    child_names = ['enable_gpu', 'term_criterion', 'solver', 'max_num_cycle', 'coarsen_by_size', 'pre_sweep', 'post_sweep', 'smoother']
    _child_classes = dict(
        enable_gpu=enable_gpu,
        term_criterion=term_criterion,
        solver=solver_1,
        max_num_cycle=max_num_cycle,
        coarsen_by_size=coarsen_by_size,
        pre_sweep=pre_sweep,
        post_sweep=post_sweep,
        smoother=smoother,
    )
    return_type = 'object'

class amg_gpgpu_options(NamedObject[amg_gpgpu_options_child], _NonCreatableNamedObjectMixin[amg_gpgpu_options_child]):
    """
    'amg_gpgpu_options' child.
    """
    _version = '231'
    fluent_name = 'amg-gpgpu-options'
    _python_name = 'amg_gpgpu_options'
    child_object_type = amg_gpgpu_options_child
    return_type = 'object'

class multi_grid(Group):
    """
    'multi_grid' child.
    """
    _version = '231'
    fluent_name = 'multi-grid'
    _python_name = 'multi_grid'
    child_names = ['mg_controls', 'amg_controls', 'fas_mg_controls', 'amg_gpgpu_options']
    _child_classes = dict(
        mg_controls=mg_controls,
        amg_controls=amg_controls,
        fas_mg_controls=fas_mg_controls,
        amg_gpgpu_options=amg_gpgpu_options,
    )
    return_type = 'object'

class coefficient(Real):
    """
    Multi-stage coefficient.
    """
    _version = '231'
    fluent_name = 'coefficient'
    _python_name = 'coefficient'
    return_type = 'object'

class update_dissipation(Boolean):
    """
    Update artificial dissipation at stage.
    """
    _version = '231'
    fluent_name = 'update-dissipation?'
    _python_name = 'update_dissipation'
    return_type = 'object'

class update_viscous(Boolean):
    """
    Update viscous stresses at stage.
    """
    _version = '231'
    fluent_name = 'update-viscous?'
    _python_name = 'update_viscous'
    return_type = 'object'

class multi_stage_child(Group):
    """
    'child_object_type' of multi_stage.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'multi_stage_child'
    child_names = ['coefficient', 'update_dissipation', 'update_viscous']
    _child_classes = dict(
        coefficient=coefficient,
        update_dissipation=update_dissipation,
        update_viscous=update_viscous,
    )
    return_type = 'object'

class multi_stage(ListObject[multi_stage_child]):
    """
    'multi_stage' child.
    """
    _version = '231'
    fluent_name = 'multi-stage'
    _python_name = 'multi_stage'
    child_object_type = multi_stage_child
    return_type = 'object'

class limiter_type(String, AllowedValuesMixin):
    """
    New slope limiter.
    """
    _version = '231'
    fluent_name = 'limiter-type'
    _python_name = 'limiter_type'
    return_type = 'object'

class cell_to_limiting(String, AllowedValuesMixin):
    """
    Cell to face limiting ([no] for cell to cell limiting) .
    """
    _version = '231'
    fluent_name = 'cell-to-limiting'
    _python_name = 'cell_to_limiting'
    return_type = 'object'

class limiter_filter(Boolean):
    """
    Enable limiter filter?.
    """
    _version = '231'
    fluent_name = 'limiter-filter?'
    _python_name = 'limiter_filter'
    return_type = 'object'

class spatial_discretization_limiter(Group):
    """
    'spatial_discretization_limiter' child.
    """
    _version = '231'
    fluent_name = 'spatial-discretization-limiter'
    _python_name = 'spatial_discretization_limiter'
    child_names = ['limiter_type', 'cell_to_limiting', 'limiter_filter']
    _child_classes = dict(
        limiter_type=limiter_type,
        cell_to_limiting=cell_to_limiting,
        limiter_filter=limiter_filter,
    )
    return_type = 'object'

class enable_pseudo_time_method(Boolean):
    """
    'enable_pseudo_time_method' child.
    """
    _version = '231'
    fluent_name = 'enable-pseudo-time-method?'
    _python_name = 'enable_pseudo_time_method'
    return_type = 'object'

class pseudo_time_scale_factor(Real):
    """
    'pseudo_time_scale_factor' child.
    """
    _version = '231'
    fluent_name = 'pseudo-time-scale-factor'
    _python_name = 'pseudo_time_scale_factor'
    return_type = 'object'

class implicit_under_relaxation_factor(Real):
    """
    'implicit_under_relaxation_factor' child.
    """
    _version = '231'
    fluent_name = 'implicit-under-relaxation-factor'
    _python_name = 'implicit_under_relaxation_factor'
    return_type = 'object'

class local_dt_child(Group):
    """
    'child_object_type' of local_dt.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'local_dt_child'
    child_names = ['enable_pseudo_time_method', 'pseudo_time_scale_factor', 'implicit_under_relaxation_factor']
    _child_classes = dict(
        enable_pseudo_time_method=enable_pseudo_time_method,
        pseudo_time_scale_factor=pseudo_time_scale_factor,
        implicit_under_relaxation_factor=implicit_under_relaxation_factor,
    )
    return_type = 'object'

class local_dt(NamedObject[local_dt_child], _NonCreatableNamedObjectMixin[local_dt_child]):
    """
    'local_dt' child.
    """
    _version = '231'
    fluent_name = 'local-dt'
    _python_name = 'local_dt'
    child_object_type = local_dt_child
    return_type = 'object'

class global_dt_child(Group):
    """
    'child_object_type' of global_dt.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'global_dt_child'
    child_names = ['enable_pseudo_time_method', 'pseudo_time_scale_factor', 'implicit_under_relaxation_factor']
    _child_classes = dict(
        enable_pseudo_time_method=enable_pseudo_time_method,
        pseudo_time_scale_factor=pseudo_time_scale_factor,
        implicit_under_relaxation_factor=implicit_under_relaxation_factor,
    )
    return_type = 'object'

class global_dt(NamedObject[global_dt_child], _NonCreatableNamedObjectMixin[global_dt_child]):
    """
    'global_dt' child.
    """
    _version = '231'
    fluent_name = 'global-dt'
    _python_name = 'global_dt'
    child_object_type = global_dt_child
    return_type = 'object'

class pseudo_time_method_usage(Group):
    """
    'pseudo_time_method_usage' child.
    """
    _version = '231'
    fluent_name = 'pseudo-time-method-usage'
    _python_name = 'pseudo_time_method_usage'
    child_names = ['local_dt', 'global_dt']
    _child_classes = dict(
        local_dt=local_dt,
        global_dt=global_dt,
    )
    return_type = 'object'

class expert_1(Group):
    """
    'expert' child.
    """
    _version = '231'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['spatial_discretization_limiter', 'pseudo_time_method_usage']
    _child_classes = dict(
        spatial_discretization_limiter=spatial_discretization_limiter,
        pseudo_time_method_usage=pseudo_time_method_usage,
    )
    return_type = 'object'

class two_stage(Boolean):
    """
    'two_stage' child.
    """
    _version = '231'
    fluent_name = 'two-stage?'
    _python_name = 'two_stage'
    return_type = 'object'

class default_multi_stage(Boolean):
    """
    'default_multi_stage' child.
    """
    _version = '231'
    fluent_name = 'default-multi-stage?'
    _python_name = 'default_multi_stage'
    return_type = 'object'

class runge_kutta(Group):
    """
    'runge_kutta' child.
    """
    _version = '231'
    fluent_name = 'runge-kutta'
    _python_name = 'runge_kutta'
    child_names = ['two_stage', 'default_multi_stage']
    _child_classes = dict(
        two_stage=two_stage,
        default_multi_stage=default_multi_stage,
    )
    return_type = 'object'

class fast_transient_settings(Group):
    """
    The fast transient settings object.
    """
    _version = '231'
    fluent_name = 'fast-transient-settings'
    _python_name = 'fast_transient_settings'
    child_names = ['runge_kutta']
    _child_classes = dict(
        runge_kutta=runge_kutta,
    )
    return_type = 'object'

class relaxation_method(String):
    """
    The solver relaxation method.
    """
    _version = '231'
    fluent_name = 'relaxation-method'
    _python_name = 'relaxation_method'
    return_type = 'object'

class correction_tolerance_child(Real):
    """
    'child_object_type' of correction_tolerance.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'correction_tolerance_child'
    return_type = 'object'

class correction_tolerance(NamedObject[correction_tolerance_child], _NonCreatableNamedObjectMixin[correction_tolerance_child]):
    """
    'correction_tolerance' child.
    """
    _version = '231'
    fluent_name = 'correction-tolerance'
    _python_name = 'correction_tolerance'
    child_object_type = correction_tolerance_child
    return_type = 'object'

class flux(String, AllowedValuesMixin):
    """
    The heat flux calculation method for solid zones.
    """
    _version = '231'
    fluent_name = 'flux'
    _python_name = 'flux'
    return_type = 'object'

class gradient(String, AllowedValuesMixin):
    """
    The temperature gradient calculation method for solid zones.
    """
    _version = '231'
    fluent_name = 'gradient'
    _python_name = 'gradient'
    return_type = 'object'

class anisotropic_solid_heat_transfer(Group):
    """
    'anisotropic_solid_heat_transfer' child.
    """
    _version = '231'
    fluent_name = 'anisotropic-solid-heat-transfer'
    _python_name = 'anisotropic_solid_heat_transfer'
    child_names = ['flux', 'gradient']
    _child_classes = dict(
        flux=flux,
        gradient=gradient,
    )
    return_type = 'object'

class advanced(Group):
    """
    'advanced' child.
    """
    _version = '231'
    fluent_name = 'advanced'
    _python_name = 'advanced'
    child_names = ['multi_grid', 'multi_stage', 'expert', 'fast_transient_settings', 'relaxation_method', 'correction_tolerance', 'anisotropic_solid_heat_transfer']
    _child_classes = dict(
        multi_grid=multi_grid,
        multi_stage=multi_stage,
        expert=expert_1,
        fast_transient_settings=fast_transient_settings,
        relaxation_method=relaxation_method,
        correction_tolerance=correction_tolerance,
        anisotropic_solid_heat_transfer=anisotropic_solid_heat_transfer,
    )
    return_type = 'object'

class solution_stabilization(Boolean):
    """
    Automatic solver settings adjustment for solution stabilization during contact process.
    """
    _version = '231'
    fluent_name = 'solution-stabilization?'
    _python_name = 'solution_stabilization'
    return_type = 'object'

class verbosity_4(Integer):
    """
    Verbosity level for contact solution controls.
    """
    _version = '231'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class iter_count(Integer):
    """
    Additional iterations to accomodate contact solution stabilization.
    """
    _version = '231'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'
    return_type = 'object'

class solution_stabilization_persistence(Integer):
    """
    Persistence of the solution stabilization based on events [0-contact based, 1-always on].
    """
    _version = '231'
    fluent_name = 'solution-stabilization-persistence'
    _python_name = 'solution_stabilization_persistence'
    return_type = 'object'

class persistence_fixed_time_steps(Integer):
    """
    Fixed time-steps for solution stabilization persistence after trigger.
    """
    _version = '231'
    fluent_name = 'persistence-fixed-time-steps'
    _python_name = 'persistence_fixed_time_steps'
    return_type = 'object'

class persistence_fixed_duration(Real):
    """
    Fixed time for solution stabilization persistence after trigger.
    """
    _version = '231'
    fluent_name = 'persistence-fixed-duration'
    _python_name = 'persistence_fixed_duration'
    return_type = 'object'

class extrapolation_method(String, AllowedValuesMixin):
    """
    Solution extrapolation method for cells changing status from contact to non-contact.
    """
    _version = '231'
    fluent_name = 'extrapolation-method'
    _python_name = 'extrapolation_method'
    return_type = 'object'

class parameters_1(Group):
    """
    'parameters' child.
    """
    _version = '231'
    fluent_name = 'parameters'
    _python_name = 'parameters'
    child_names = ['iter_count', 'solution_stabilization_persistence', 'persistence_fixed_time_steps', 'persistence_fixed_duration', 'extrapolation_method']
    _child_classes = dict(
        iter_count=iter_count,
        solution_stabilization_persistence=solution_stabilization_persistence,
        persistence_fixed_time_steps=persistence_fixed_time_steps,
        persistence_fixed_duration=persistence_fixed_duration,
        extrapolation_method=extrapolation_method,
    )
    return_type = 'object'

class first_to_second_order_blending(Real):
    """
    Factor to control first order to second order blending.
    """
    _version = '231'
    fluent_name = 'first-to-second-order-blending'
    _python_name = 'first_to_second_order_blending'
    return_type = 'object'

class first_to_second_order_blending_list(RealList):
    """
    List set factor to control first order to second order blending.
    """
    _version = '231'
    fluent_name = 'first-to-second-order-blending-list'
    _python_name = 'first_to_second_order_blending_list'
    return_type = 'object'

class scheme_1(Integer):
    """
    Advection scheme for contact event stability.
    """
    _version = '231'
    fluent_name = 'scheme'
    _python_name = 'scheme'
    return_type = 'object'

class flow_skew_diffusion_exclude(Boolean):
    """
    Exclude skew diffusion discretization contribution for momentum.
    """
    _version = '231'
    fluent_name = 'flow-skew-diffusion-exclude?'
    _python_name = 'flow_skew_diffusion_exclude'
    return_type = 'object'

class scalars_skew_diffusion_exclude(Boolean):
    """
    Exclude skew diffusion discretization contribution for scalars.
    """
    _version = '231'
    fluent_name = 'scalars-skew-diffusion-exclude?'
    _python_name = 'scalars_skew_diffusion_exclude'
    return_type = 'object'

class rhie_chow_flux_specify(Boolean):
    """
    Allow specification of the the rhie-chow flux method.
    """
    _version = '231'
    fluent_name = 'rhie-chow-flux-specify?'
    _python_name = 'rhie_chow_flux_specify'
    return_type = 'object'

class rhie_chow_method(Integer):
    """
    The rhie-chow flux method.
    """
    _version = '231'
    fluent_name = 'rhie-chow-method'
    _python_name = 'rhie_chow_method'
    return_type = 'object'

class spatial(Group):
    """
    'spatial' child.
    """
    _version = '231'
    fluent_name = 'spatial'
    _python_name = 'spatial'
    child_names = ['first_to_second_order_blending', 'first_to_second_order_blending_list', 'scheme', 'flow_skew_diffusion_exclude', 'scalars_skew_diffusion_exclude', 'rhie_chow_flux_specify', 'rhie_chow_method']
    _child_classes = dict(
        first_to_second_order_blending=first_to_second_order_blending,
        first_to_second_order_blending_list=first_to_second_order_blending_list,
        scheme=scheme_1,
        flow_skew_diffusion_exclude=flow_skew_diffusion_exclude,
        scalars_skew_diffusion_exclude=scalars_skew_diffusion_exclude,
        rhie_chow_flux_specify=rhie_chow_flux_specify,
        rhie_chow_method=rhie_chow_method,
    )
    return_type = 'object'

class transient_parameters_specify(Boolean):
    """
    Enable/Disable transient parameter specification.
    """
    _version = '231'
    fluent_name = 'transient-parameters-specify?'
    _python_name = 'transient_parameters_specify'
    return_type = 'object'

class transient_scheme(Integer):
    """
    Temporal scheme to be used.
    """
    _version = '231'
    fluent_name = 'transient-scheme'
    _python_name = 'transient_scheme'
    return_type = 'object'

class time_scale_modification_method(Integer):
    """
    Time scale modification method [0-time-step, 1-cfl].
    """
    _version = '231'
    fluent_name = 'time-scale-modification-method'
    _python_name = 'time_scale_modification_method'
    return_type = 'object'

class time_scale_modification_factor(Real):
    """
    Time-scale modification factor.
    """
    _version = '231'
    fluent_name = 'time-scale-modification-factor'
    _python_name = 'time_scale_modification_factor'
    return_type = 'object'

class transient(Group):
    """
    'transient' child.
    """
    _version = '231'
    fluent_name = 'transient'
    _python_name = 'transient'
    child_names = ['transient_parameters_specify', 'transient_scheme', 'time_scale_modification_method', 'time_scale_modification_factor']
    _child_classes = dict(
        transient_parameters_specify=transient_parameters_specify,
        transient_scheme=transient_scheme,
        time_scale_modification_method=time_scale_modification_method,
        time_scale_modification_factor=time_scale_modification_factor,
    )
    return_type = 'object'

class enforce_laplace_coarsening(Boolean):
    """
    Enable/disable the use of laplace coarsening in AMG.
    """
    _version = '231'
    fluent_name = 'enforce-laplace-coarsening?'
    _python_name = 'enforce_laplace_coarsening'
    return_type = 'object'

class increase_pre_sweeps(Boolean):
    """
    Enable/disable increase in AMG pre-sweeps.
    """
    _version = '231'
    fluent_name = 'increase-pre-sweeps?'
    _python_name = 'increase_pre_sweeps'
    return_type = 'object'

class pre_sweeps_3(Integer):
    """
    The number of AMG pre-sweeps.
    """
    _version = '231'
    fluent_name = 'pre-sweeps'
    _python_name = 'pre_sweeps'
    return_type = 'object'

class specify_coarsening_rate(Boolean):
    """
    Enable/disable AMG coarsening rate.
    """
    _version = '231'
    fluent_name = 'specify-coarsening-rate?'
    _python_name = 'specify_coarsening_rate'
    return_type = 'object'

class coarsen_rate(Integer):
    """
    AMG coarsening rate.
    """
    _version = '231'
    fluent_name = 'coarsen-rate'
    _python_name = 'coarsen_rate'
    return_type = 'object'

class amg(Group):
    """
    'amg' child.
    """
    _version = '231'
    fluent_name = 'amg'
    _python_name = 'amg'
    child_names = ['enforce_laplace_coarsening', 'increase_pre_sweeps', 'pre_sweeps', 'specify_coarsening_rate', 'coarsen_rate']
    _child_classes = dict(
        enforce_laplace_coarsening=enforce_laplace_coarsening,
        increase_pre_sweeps=increase_pre_sweeps,
        pre_sweeps=pre_sweeps_3,
        specify_coarsening_rate=specify_coarsening_rate,
        coarsen_rate=coarsen_rate,
    )
    return_type = 'object'

class model_ramping(Boolean):
    """
    Enable/disable model ramping for solver stability and accuracy.
    """
    _version = '231'
    fluent_name = 'model-ramping?'
    _python_name = 'model_ramping'
    return_type = 'object'

class ramp_flow(Boolean):
    """
    Enable/disable ramp flow for solver stability and accuracy.
    """
    _version = '231'
    fluent_name = 'ramp-flow?'
    _python_name = 'ramp_flow'
    return_type = 'object'

class ramp_turbulence(Boolean):
    """
    Enable/disable ramp turbulence for solver stability and accuracy.
    """
    _version = '231'
    fluent_name = 'ramp-turbulence?'
    _python_name = 'ramp_turbulence'
    return_type = 'object'

class ramp_scalars(Boolean):
    """
    Enable/disable ramp all scalar transport equations for solver stability and accuracy.
    """
    _version = '231'
    fluent_name = 'ramp-scalars?'
    _python_name = 'ramp_scalars'
    return_type = 'object'

class models_2(Group):
    """
    'models' child.
    """
    _version = '231'
    fluent_name = 'models'
    _python_name = 'models'
    child_names = ['model_ramping', 'ramp_flow', 'ramp_turbulence', 'ramp_scalars']
    _child_classes = dict(
        model_ramping=model_ramping,
        ramp_flow=ramp_flow,
        ramp_turbulence=ramp_turbulence,
        ramp_scalars=ramp_scalars,
    )
    return_type = 'object'

class pv_coupling_controls(Boolean):
    """
    Enable/disable pressure-velocity coupling method change for solver stability and accuracy.
    """
    _version = '231'
    fluent_name = 'pv-coupling-controls?'
    _python_name = 'pv_coupling_controls'
    return_type = 'object'

class pv_coupling_method(Integer):
    """
    Pressure-velocity coupling method change for solver stability and accuracy.
    """
    _version = '231'
    fluent_name = 'pv-coupling-method'
    _python_name = 'pv_coupling_method'
    return_type = 'object'

class gradient_controls(Boolean):
    """
    Enable/disable gradient method for solver stability and accuracy.
    """
    _version = '231'
    fluent_name = 'gradient-controls?'
    _python_name = 'gradient_controls'
    return_type = 'object'

class specify_gradient_method(Integer):
    """
    Gradient method for solver stability and accuracy.
    """
    _version = '231'
    fluent_name = 'specify-gradient-method'
    _python_name = 'specify_gradient_method'
    return_type = 'object'

class methods_1(Group):
    """
    'methods' child.
    """
    _version = '231'
    fluent_name = 'methods'
    _python_name = 'methods'
    child_names = ['pv_coupling_controls', 'pv_coupling_method', 'gradient_controls', 'specify_gradient_method']
    _child_classes = dict(
        pv_coupling_controls=pv_coupling_controls,
        pv_coupling_method=pv_coupling_method,
        gradient_controls=gradient_controls,
        specify_gradient_method=specify_gradient_method,
    )
    return_type = 'object'

class compute_statistics(Boolean):
    """
    Enable/disable solution statistics for contact updates.
    """
    _version = '231'
    fluent_name = 'compute-statistics?'
    _python_name = 'compute_statistics'
    return_type = 'object'

class statistics_level(Integer):
    """
    Level of detail for solution statistics.
    """
    _version = '231'
    fluent_name = 'statistics-level'
    _python_name = 'statistics_level'
    return_type = 'object'

class miscellaneous(Group):
    """
    'miscellaneous' child.
    """
    _version = '231'
    fluent_name = 'miscellaneous'
    _python_name = 'miscellaneous'
    child_names = ['compute_statistics', 'statistics_level']
    _child_classes = dict(
        compute_statistics=compute_statistics,
        statistics_level=statistics_level,
    )
    return_type = 'object'

class set_settings_to_default(Command):
    """
    Set contact solution stabilization to default.
    """
    _version = '231'
    fluent_name = 'set-settings-to-default'
    _python_name = 'set_settings_to_default'
    return_type = 'object'

class contact_solution_controls(Group):
    """
    Solver controls for contact marks method.
    """
    _version = '231'
    fluent_name = 'contact-solution-controls'
    _python_name = 'contact_solution_controls'
    child_names = ['solution_stabilization', 'verbosity', 'parameters', 'spatial', 'transient', 'amg', 'models', 'methods', 'miscellaneous']
    command_names = ['set_settings_to_default']
    _child_classes = dict(
        solution_stabilization=solution_stabilization,
        verbosity=verbosity_4,
        parameters=parameters_1,
        spatial=spatial,
        transient=transient,
        amg=amg,
        models=models_2,
        methods=methods_1,
        miscellaneous=miscellaneous,
        set_settings_to_default=set_settings_to_default,
    )
    return_type = 'object'

class courant_number(Real):
    """
    Courant number.
    """
    _version = '231'
    fluent_name = 'courant-number'
    _python_name = 'courant_number'
    return_type = 'object'

class equations_child(Boolean):
    """
    'child_object_type' of equations.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'equations_child'
    return_type = 'object'

class equations(NamedObject[equations_child], _NonCreatableNamedObjectMixin[equations_child]):
    """
    'equations' child.
    """
    _version = '231'
    fluent_name = 'equations'
    _python_name = 'equations'
    child_object_type = equations_child
    return_type = 'object'

class min_pressure(Real):
    """
    Minimum vapor pressure limit for cavitation model.
    """
    _version = '231'
    fluent_name = 'min-pressure'
    _python_name = 'min_pressure'
    return_type = 'object'

class max_pressure(Real):
    """
    Maximum allowable absolute pressure.
    """
    _version = '231'
    fluent_name = 'max-pressure'
    _python_name = 'max_pressure'
    return_type = 'object'

class min_temperature(Real):
    """
    Minimum allowable temperature.
    """
    _version = '231'
    fluent_name = 'min-temperature'
    _python_name = 'min_temperature'
    return_type = 'object'

class max_temperature(Real):
    """
    Maximum allowable temperature.
    """
    _version = '231'
    fluent_name = 'max-temperature'
    _python_name = 'max_temperature'
    return_type = 'object'

class min_tke(Real):
    """
    Minimum allowable k.
    """
    _version = '231'
    fluent_name = 'min-tke'
    _python_name = 'min_tke'
    return_type = 'object'

class min_lam_tke(Real):
    """
    Minimum allowable k1.
    """
    _version = '231'
    fluent_name = 'min-lam-tke'
    _python_name = 'min_lam_tke'
    return_type = 'object'

class min_des_tke(Real):
    """
    Minimum allowable k.
    """
    _version = '231'
    fluent_name = 'min-des-tke'
    _python_name = 'min_des_tke'
    return_type = 'object'

class min_epsilon(Real):
    """
    Minimum allowable epsilon.
    """
    _version = '231'
    fluent_name = 'min-epsilon'
    _python_name = 'min_epsilon'
    return_type = 'object'

class min_des_epsilon(Real):
    """
    Minimum allowable epsilon.
    """
    _version = '231'
    fluent_name = 'min-des-epsilon'
    _python_name = 'min_des_epsilon'
    return_type = 'object'

class min_v2f_tke(Real):
    """
    Minimum allowable k.
    """
    _version = '231'
    fluent_name = 'min-v2f-tke'
    _python_name = 'min_v2f_tke'
    return_type = 'object'

class min_v2f_epsilon(Real):
    """
    Minimum allowable epsilon.
    """
    _version = '231'
    fluent_name = 'min-v2f-epsilon'
    _python_name = 'min_v2f_epsilon'
    return_type = 'object'

class min_vel_var_scale(Real):
    """
    Minimum allowable v2.
    """
    _version = '231'
    fluent_name = 'min-vel-var-scale'
    _python_name = 'min_vel_var_scale'
    return_type = 'object'

class min_elliptic_relax_func(Real):
    """
    Minimum allowable f.
    """
    _version = '231'
    fluent_name = 'min-elliptic-relax-func'
    _python_name = 'min_elliptic_relax_func'
    return_type = 'object'

class min_omega(Real):
    """
    Minimum allowable omega.
    """
    _version = '231'
    fluent_name = 'min-omega'
    _python_name = 'min_omega'
    return_type = 'object'

class min_des_omega(Real):
    """
    Minimum allowable omega.
    """
    _version = '231'
    fluent_name = 'min-des-omega'
    _python_name = 'min_des_omega'
    return_type = 'object'

class max_turb_visc_ratio(Real):
    """
    Maximum allowable turbulent/laminar viscosity ratio.
    """
    _version = '231'
    fluent_name = 'max-turb-visc-ratio'
    _python_name = 'max_turb_visc_ratio'
    return_type = 'object'

class positivity_rate(Real):
    """
    Positivity Rate Limit.
    """
    _version = '231'
    fluent_name = 'positivity-rate'
    _python_name = 'positivity_rate'
    return_type = 'object'

class min_vol_frac_for_matrix_sol(Real):
    """
    Minimum Vol. Frac. for Matrix Solution.
    """
    _version = '231'
    fluent_name = 'min-vol-frac-for-matrix-sol'
    _python_name = 'min_vol_frac_for_matrix_sol'
    return_type = 'object'

class limits(Group):
    """
    'limits' child.
    """
    _version = '231'
    fluent_name = 'limits'
    _python_name = 'limits'
    child_names = ['min_pressure', 'max_pressure', 'min_temperature', 'max_temperature', 'min_tke', 'min_lam_tke', 'min_des_tke', 'min_epsilon', 'min_des_epsilon', 'min_v2f_tke', 'min_v2f_epsilon', 'min_vel_var_scale', 'min_elliptic_relax_func', 'min_omega', 'min_des_omega', 'max_turb_visc_ratio', 'positivity_rate', 'min_vol_frac_for_matrix_sol']
    _child_classes = dict(
        min_pressure=min_pressure,
        max_pressure=max_pressure,
        min_temperature=min_temperature,
        max_temperature=max_temperature,
        min_tke=min_tke,
        min_lam_tke=min_lam_tke,
        min_des_tke=min_des_tke,
        min_epsilon=min_epsilon,
        min_des_epsilon=min_des_epsilon,
        min_v2f_tke=min_v2f_tke,
        min_v2f_epsilon=min_v2f_epsilon,
        min_vel_var_scale=min_vel_var_scale,
        min_elliptic_relax_func=min_elliptic_relax_func,
        min_omega=min_omega,
        min_des_omega=min_des_omega,
        max_turb_visc_ratio=max_turb_visc_ratio,
        positivity_rate=positivity_rate,
        min_vol_frac_for_matrix_sol=min_vol_frac_for_matrix_sol,
    )
    return_type = 'object'

class skewness_correction_itr_count(Integer):
    """
    Iterations for skewness correction.
    """
    _version = '231'
    fluent_name = 'skewness-correction-itr-count'
    _python_name = 'skewness_correction_itr_count'
    return_type = 'object'

class neighbor_correction_itr_count(Integer):
    """
    Iterations for neighbor correction.
    """
    _version = '231'
    fluent_name = 'neighbor-correction-itr-count'
    _python_name = 'neighbor_correction_itr_count'
    return_type = 'object'

class skewness_neighbor_coupling(Boolean):
    """
    Skewness-Neighbor Coupling?.
    """
    _version = '231'
    fluent_name = 'skewness-neighbor-coupling'
    _python_name = 'skewness_neighbor_coupling'
    return_type = 'object'

class vof_correction_itr_count(Integer):
    """
    Iterations for vof correction.
    """
    _version = '231'
    fluent_name = 'vof-correction-itr-count'
    _python_name = 'vof_correction_itr_count'
    return_type = 'object'

class explicit_momentum_under_relaxation(Real):
    """
    Explicit momentum under-relaxation.
    """
    _version = '231'
    fluent_name = 'explicit-momentum-under-relaxation'
    _python_name = 'explicit_momentum_under_relaxation'
    return_type = 'object'

class explicit_pressure_under_relaxation(Real):
    """
    Explicit pressure under-relaxation.
    """
    _version = '231'
    fluent_name = 'explicit-pressure-under-relaxation'
    _python_name = 'explicit_pressure_under_relaxation'
    return_type = 'object'

class flow_courant_number(Real):
    """
    'flow_courant_number' child.
    """
    _version = '231'
    fluent_name = 'flow-courant-number'
    _python_name = 'flow_courant_number'
    return_type = 'object'

class volume_fraction_courant_number(Real):
    """
    'volume_fraction_courant_number' child.
    """
    _version = '231'
    fluent_name = 'volume-fraction-courant-number'
    _python_name = 'volume_fraction_courant_number'
    return_type = 'object'

class explicit_volume_fraction_under_relaxation(Real):
    """
    Explicit volume fraction under-relaxation.
    """
    _version = '231'
    fluent_name = 'explicit-volume-fraction-under-relaxation'
    _python_name = 'explicit_volume_fraction_under_relaxation'
    return_type = 'object'

class p_v_controls(Group):
    """
    'p_v_controls' child.
    """
    _version = '231'
    fluent_name = 'p-v-controls'
    _python_name = 'p_v_controls'
    child_names = ['skewness_correction_itr_count', 'neighbor_correction_itr_count', 'skewness_neighbor_coupling', 'vof_correction_itr_count', 'explicit_momentum_under_relaxation', 'explicit_pressure_under_relaxation', 'flow_courant_number', 'volume_fraction_courant_number', 'explicit_volume_fraction_under_relaxation']
    _child_classes = dict(
        skewness_correction_itr_count=skewness_correction_itr_count,
        neighbor_correction_itr_count=neighbor_correction_itr_count,
        skewness_neighbor_coupling=skewness_neighbor_coupling,
        vof_correction_itr_count=vof_correction_itr_count,
        explicit_momentum_under_relaxation=explicit_momentum_under_relaxation,
        explicit_pressure_under_relaxation=explicit_pressure_under_relaxation,
        flow_courant_number=flow_courant_number,
        volume_fraction_courant_number=volume_fraction_courant_number,
        explicit_volume_fraction_under_relaxation=explicit_volume_fraction_under_relaxation,
    )
    return_type = 'object'

class relaxation_factor_child(Real):
    """
    'child_object_type' of relaxation_factor.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'relaxation_factor_child'
    return_type = 'object'

class relaxation_factor(NamedObject[relaxation_factor_child], _NonCreatableNamedObjectMixin[relaxation_factor_child]):
    """
    'relaxation_factor' child.
    """
    _version = '231'
    fluent_name = 'relaxation-factor'
    _python_name = 'relaxation_factor'
    child_object_type = relaxation_factor_child
    return_type = 'object'

class solution_controls(Command):
    """
    'solution_controls' command.
    """
    _version = '231'
    fluent_name = 'solution-controls'
    _python_name = 'solution_controls'
    return_type = 'object'

class amg_controls_1(Command):
    """
    'amg_controls' command.
    """
    _version = '231'
    fluent_name = 'amg-controls'
    _python_name = 'amg_controls'
    return_type = 'object'

class multi_stage_parameter(Command):
    """
    'multi_stage_parameter' command.
    """
    _version = '231'
    fluent_name = 'multi-stage-parameter'
    _python_name = 'multi_stage_parameter'
    return_type = 'object'

class limits_1(Command):
    """
    'limits' command.
    """
    _version = '231'
    fluent_name = 'limits'
    _python_name = 'limits'
    return_type = 'object'

class reset_pseudo_time_method_generic(Command):
    """
    'reset_pseudo_time_method_generic' command.
    """
    _version = '231'
    fluent_name = 'reset-pseudo-time-method-generic'
    _python_name = 'reset_pseudo_time_method_generic'
    return_type = 'object'

class reset_pseudo_time_method_equations(Command):
    """
    'reset_pseudo_time_method_equations' command.
    """
    _version = '231'
    fluent_name = 'reset-pseudo-time-method-equations'
    _python_name = 'reset_pseudo_time_method_equations'
    return_type = 'object'

class reset_pseudo_time_method_relaxations(Command):
    """
    'reset_pseudo_time_method_relaxations' command.
    """
    _version = '231'
    fluent_name = 'reset-pseudo-time-method-relaxations'
    _python_name = 'reset_pseudo_time_method_relaxations'
    return_type = 'object'

class reset_pseudo_time_method_scale_factors(Command):
    """
    'reset_pseudo_time_method_scale_factors' command.
    """
    _version = '231'
    fluent_name = 'reset-pseudo-time-method-scale-factors'
    _python_name = 'reset_pseudo_time_method_scale_factors'
    return_type = 'object'

class set_controls_to_default(Group):
    """
    'set_controls_to_default' child.
    """
    _version = '231'
    fluent_name = 'set-controls-to-default'
    _python_name = 'set_controls_to_default'
    command_names = ['solution_controls', 'amg_controls', 'multi_stage_parameter', 'limits', 'reset_pseudo_time_method_generic', 'reset_pseudo_time_method_equations', 'reset_pseudo_time_method_relaxations', 'reset_pseudo_time_method_scale_factors']
    _child_classes = dict(
        solution_controls=solution_controls,
        amg_controls=amg_controls_1,
        multi_stage_parameter=multi_stage_parameter,
        limits=limits_1,
        reset_pseudo_time_method_generic=reset_pseudo_time_method_generic,
        reset_pseudo_time_method_equations=reset_pseudo_time_method_equations,
        reset_pseudo_time_method_relaxations=reset_pseudo_time_method_relaxations,
        reset_pseudo_time_method_scale_factors=reset_pseudo_time_method_scale_factors,
    )
    return_type = 'object'

class under_relaxation_child(Real):
    """
    'child_object_type' of under_relaxation.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'under_relaxation_child'
    return_type = 'object'

class under_relaxation(NamedObject[under_relaxation_child], _NonCreatableNamedObjectMixin[under_relaxation_child]):
    """
    Under Relaxation Menu.
    """
    _version = '231'
    fluent_name = 'under-relaxation'
    _python_name = 'under_relaxation'
    child_object_type = under_relaxation_child
    return_type = 'object'

class local_dt_dualts_relax_child(Real):
    """
    'child_object_type' of local_dt_dualts_relax.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'local_dt_dualts_relax_child'
    return_type = 'object'

class local_dt_dualts_relax(NamedObject[local_dt_dualts_relax_child], _NonCreatableNamedObjectMixin[local_dt_dualts_relax_child]):
    """
    'local_dt_dualts_relax' child.
    """
    _version = '231'
    fluent_name = 'local-dt-dualts-relax'
    _python_name = 'local_dt_dualts_relax'
    child_object_type = local_dt_dualts_relax_child
    return_type = 'object'

class global_dt_pseudo_relax_child(Real):
    """
    'child_object_type' of global_dt_pseudo_relax.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'global_dt_pseudo_relax_child'
    return_type = 'object'

class global_dt_pseudo_relax(NamedObject[global_dt_pseudo_relax_child], _NonCreatableNamedObjectMixin[global_dt_pseudo_relax_child]):
    """
    'global_dt_pseudo_relax' child.
    """
    _version = '231'
    fluent_name = 'global-dt-pseudo-relax'
    _python_name = 'global_dt_pseudo_relax'
    child_object_type = global_dt_pseudo_relax_child
    return_type = 'object'

class pseudo_time_explicit_relaxation_factor(Group):
    """
    'pseudo_time_explicit_relaxation_factor' child.
    """
    _version = '231'
    fluent_name = 'pseudo-time-explicit-relaxation-factor'
    _python_name = 'pseudo_time_explicit_relaxation_factor'
    child_names = ['local_dt_dualts_relax', 'global_dt_pseudo_relax']
    _child_classes = dict(
        local_dt_dualts_relax=local_dt_dualts_relax,
        global_dt_pseudo_relax=global_dt_pseudo_relax,
    )
    return_type = 'object'

class pseudo_time_courant_number(Real):
    """
    Courant number for the local pseudo time method.
    """
    _version = '231'
    fluent_name = 'pseudo-time-courant-number'
    _python_name = 'pseudo_time_courant_number'
    return_type = 'object'

class pseudo_time_step_method_solid_zone(Boolean):
    """
    Enable/disable pseudo time step method for solid zones.
    """
    _version = '231'
    fluent_name = 'pseudo-time-step-method-solid-zone?'
    _python_name = 'pseudo_time_step_method_solid_zone'
    return_type = 'object'

class time_step_size_scale_factor(Real):
    """
    Time step size scale factor for solid zones.
    """
    _version = '231'
    fluent_name = 'time-step-size-scale-factor'
    _python_name = 'time_step_size_scale_factor'
    return_type = 'object'

class pseudo_time_method_local_time_step(Group):
    """
    'pseudo_time_method_local_time_step' child.
    """
    _version = '231'
    fluent_name = 'pseudo-time-method-local-time-step'
    _python_name = 'pseudo_time_method_local_time_step'
    child_names = ['pseudo_time_courant_number', 'pseudo_time_step_method_solid_zone', 'time_step_size_scale_factor']
    _child_classes = dict(
        pseudo_time_courant_number=pseudo_time_courant_number,
        pseudo_time_step_method_solid_zone=pseudo_time_step_method_solid_zone,
        time_step_size_scale_factor=time_step_size_scale_factor,
    )
    return_type = 'object'

class controls(Group):
    """
    'controls' child.
    """
    _version = '231'
    fluent_name = 'controls'
    _python_name = 'controls'
    child_names = ['acoustics_wave_eqn_controls', 'advanced', 'contact_solution_controls', 'courant_number', 'equations', 'limits', 'p_v_controls', 'relaxation_factor', 'set_controls_to_default', 'under_relaxation', 'pseudo_time_explicit_relaxation_factor', 'pseudo_time_method_local_time_step']
    _child_classes = dict(
        acoustics_wave_eqn_controls=acoustics_wave_eqn_controls,
        advanced=advanced,
        contact_solution_controls=contact_solution_controls,
        courant_number=courant_number,
        equations=equations,
        limits=limits,
        p_v_controls=p_v_controls,
        relaxation_factor=relaxation_factor,
        set_controls_to_default=set_controls_to_default,
        under_relaxation=under_relaxation,
        pseudo_time_explicit_relaxation_factor=pseudo_time_explicit_relaxation_factor,
        pseudo_time_method_local_time_step=pseudo_time_method_local_time_step,
    )
    return_type = 'object'

class accelerated_non_iterative_time_marching(Boolean):
    """
    Enable/disable accelerated non-iterative time marching.
    """
    _version = '231'
    fluent_name = 'accelerated-non-iterative-time-marching?'
    _python_name = 'accelerated_non_iterative_time_marching'
    return_type = 'object'

class convergence_acceleration_type(String, AllowedValuesMixin):
    """
    'convergence_acceleration_type' child.
    """
    _version = '231'
    fluent_name = 'convergence-acceleration-type'
    _python_name = 'convergence_acceleration_type'
    return_type = 'object'

class casm_cutoff_multiplier(Real):
    """
    CASM cut-off multiplier :.
    """
    _version = '231'
    fluent_name = 'casm-cutoff-multiplier'
    _python_name = 'casm_cutoff_multiplier'
    return_type = 'object'

class convergence_acceleration_for_stretched_meshes(Group):
    """
    Enable convergence acceleration for stretched meshes to improve the convergence of the implicit density based solver on meshes with high cell stretching.
    """
    _version = '231'
    fluent_name = 'convergence-acceleration-for-stretched-meshes'
    _python_name = 'convergence_acceleration_for_stretched_meshes'
    child_names = ['convergence_acceleration_type', 'casm_cutoff_multiplier']
    _child_classes = dict(
        convergence_acceleration_type=convergence_acceleration_type,
        casm_cutoff_multiplier=casm_cutoff_multiplier,
    )
    return_type = 'object'

class discretization_scheme_child(String, AllowedValuesMixin):
    """
    'child_object_type' of discretization_scheme.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'discretization_scheme_child'
    return_type = 'object'

class discretization_scheme(NamedObject[discretization_scheme_child], _NonCreatableNamedObjectMixin[discretization_scheme_child]):
    """
    'discretization_scheme' child.
    """
    _version = '231'
    fluent_name = 'discretization-scheme'
    _python_name = 'discretization_scheme'
    child_object_type = discretization_scheme_child
    return_type = 'object'

class reactions_1(Boolean):
    """
    Enable/disable the species reaction sources and set relaxation factor.
    """
    _version = '231'
    fluent_name = 'reactions?'
    _python_name = 'reactions'
    return_type = 'object'

class reaction_source_term_relaxation_factor(Real):
    """
    Reaction source term relaxation factor.
    """
    _version = '231'
    fluent_name = 'reaction-source-term-relaxation-factor'
    _python_name = 'reaction_source_term_relaxation_factor'
    return_type = 'object'

class implicit_bodyforce_treatment(Boolean):
    """
    Enable/disable implicit body force treatment.
    """
    _version = '231'
    fluent_name = 'implicit-bodyforce-treatment?'
    _python_name = 'implicit_bodyforce_treatment'
    return_type = 'object'

class physical_velocity_formulation(Boolean):
    """
    Enable/disable use of physical velocity formulation for porous media.
    """
    _version = '231'
    fluent_name = 'physical-velocity-formulation?'
    _python_name = 'physical_velocity_formulation'
    return_type = 'object'

class disable_rhie_chow_flux(Boolean):
    """
    Use low order velocity interpolation in flux calculation.
    """
    _version = '231'
    fluent_name = 'disable-rhie-chow-flux?'
    _python_name = 'disable_rhie_chow_flux'
    return_type = 'object'

class presto_pressure_scheme(Boolean):
    """
    Limit high-order terms for PRESTO! pressure scheme.
    """
    _version = '231'
    fluent_name = 'presto-pressure-scheme?'
    _python_name = 'presto_pressure_scheme'
    return_type = 'object'

class first_to_second_order_blending_1(Real):
    """
    1st-order to higher-order blending factor [min=0.0 - max=1.0].
    """
    _version = '231'
    fluent_name = 'first-to-second-order-blending'
    _python_name = 'first_to_second_order_blending'
    return_type = 'object'

class alternate_diffusion_for_porous_region_solids(Boolean):
    """
    Enable/disable use of alternate diffusion for porous region solids.
    """
    _version = '231'
    fluent_name = 'alternate-diffusion-for-porous-region-solids?'
    _python_name = 'alternate_diffusion_for_porous_region_solids'
    return_type = 'object'

class numerics_pbns(Group):
    """
    Numeric options.
    """
    _version = '231'
    fluent_name = 'numerics-pbns'
    _python_name = 'numerics_pbns'
    child_names = ['implicit_bodyforce_treatment', 'velocity_formulation', 'physical_velocity_formulation', 'disable_rhie_chow_flux', 'presto_pressure_scheme', 'first_to_second_order_blending', 'alternate_diffusion_for_porous_region_solids']
    _child_classes = dict(
        implicit_bodyforce_treatment=implicit_bodyforce_treatment,
        velocity_formulation=velocity_formulation,
        physical_velocity_formulation=physical_velocity_formulation,
        disable_rhie_chow_flux=disable_rhie_chow_flux,
        presto_pressure_scheme=presto_pressure_scheme,
        first_to_second_order_blending=first_to_second_order_blending_1,
        alternate_diffusion_for_porous_region_solids=alternate_diffusion_for_porous_region_solids,
    )
    return_type = 'object'

class first_to_second_order_blending_dbns(Real):
    """
    1st-order to higher-order blending factor [min=0.0 - max=1.0]:.
    """
    _version = '231'
    fluent_name = 'first-to-second-order-blending-dbns'
    _python_name = 'first_to_second_order_blending_dbns'
    return_type = 'object'

class numerics_dbns(Group):
    """
    'numerics_dbns' child.
    """
    _version = '231'
    fluent_name = 'numerics-dbns'
    _python_name = 'numerics_dbns'
    child_names = ['first_to_second_order_blending_dbns']
    _child_classes = dict(
        first_to_second_order_blending_dbns=first_to_second_order_blending_dbns,
    )
    return_type = 'object'

class expert_2(Group):
    """
    Expert object.
    """
    _version = '231'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['reactions', 'reaction_source_term_relaxation_factor', 'numerics_pbns', 'numerics_dbns']
    _child_classes = dict(
        reactions=reactions_1,
        reaction_source_term_relaxation_factor=reaction_source_term_relaxation_factor,
        numerics_pbns=numerics_pbns,
        numerics_dbns=numerics_dbns,
    )
    return_type = 'object'

class flux_type_1(String, AllowedValuesMixin):
    """
    Flux Type.
    """
    _version = '231'
    fluent_name = 'flux-type'
    _python_name = 'flux_type'
    return_type = 'object'

class dbns_cases(Group):
    """
    'dbns_cases' child.
    """
    _version = '231'
    fluent_name = 'dbns_cases'
    _python_name = 'dbns_cases'
    child_names = ['flux_type']
    _child_classes = dict(
        flux_type=flux_type_1,
    )
    return_type = 'object'

class flux_auto_select(Boolean):
    """
    Enable/disable Auto Select .
    """
    _version = '231'
    fluent_name = 'flux-auto-select?'
    _python_name = 'flux_auto_select'
    return_type = 'object'

class flux_type_2(Integer):
    """
    'flux_type' child.
    """
    _version = '231'
    fluent_name = 'flux-type'
    _python_name = 'flux_type'
    return_type = 'object'

class pbns_cases(Group):
    """
    'pbns_cases' child.
    """
    _version = '231'
    fluent_name = 'pbns_cases'
    _python_name = 'pbns_cases'
    child_names = ['flux_auto_select', 'flux_type']
    _child_classes = dict(
        flux_auto_select=flux_auto_select,
        flux_type=flux_type_2,
    )
    return_type = 'object'

class flux_type(Group):
    """
    The flux type.
    """
    _version = '231'
    fluent_name = 'flux-type'
    _python_name = 'flux_type'
    child_names = ['dbns_cases', 'pbns_cases']
    _child_classes = dict(
        dbns_cases=dbns_cases,
        pbns_cases=pbns_cases,
    )
    return_type = 'object'

class frozen_flux(Boolean):
    """
    Enable/disable frozen flux formulation for transient flows.
    """
    _version = '231'
    fluent_name = 'frozen-flux?'
    _python_name = 'frozen_flux'
    return_type = 'object'

class gradient_scheme(String, AllowedValuesMixin):
    """
    Gradient scheme.
    """
    _version = '231'
    fluent_name = 'gradient-scheme'
    _python_name = 'gradient_scheme'
    return_type = 'object'

class enable_5(Boolean):
    """
    Enable/Disable High Order Term Relaxation.
    """
    _version = '231'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class relaxation_factor_2(Real):
    """
    Relaxation factor.
    """
    _version = '231'
    fluent_name = 'relaxation-factor'
    _python_name = 'relaxation_factor'
    return_type = 'object'

class select_variables(String, AllowedValuesMixin):
    """
    Variables for high order term relaxation.
    """
    _version = '231'
    fluent_name = 'select-variables'
    _python_name = 'select_variables'
    return_type = 'object'

class relaxation_options(String, AllowedValuesMixin):
    """
    High order relaxation option with respect to diffusion gradient.
    """
    _version = '231'
    fluent_name = 'relaxation-options'
    _python_name = 'relaxation_options'
    return_type = 'object'

class options_3(Group):
    """
    High Order Term Relaxation Options.
    """
    _version = '231'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['relaxation_factor', 'select_variables', 'relaxation_options']
    _child_classes = dict(
        relaxation_factor=relaxation_factor_2,
        select_variables=select_variables,
        relaxation_options=relaxation_options,
    )
    return_type = 'object'

class high_order_term_relaxation(Group):
    """
    High Order Relaxation Menu.
    """
    _version = '231'
    fluent_name = 'high-order-term-relaxation'
    _python_name = 'high_order_term_relaxation'
    child_names = ['enable', 'options']
    _child_classes = dict(
        enable=enable_5,
        options=options_3,
    )
    return_type = 'object'

class relative_permeability(Boolean):
    """
    Multiphase relative permeability fix option.
    """
    _version = '231'
    fluent_name = 'relative-permeability?'
    _python_name = 'relative_permeability'
    return_type = 'object'

class capillary_pressure_as_diffusion(Boolean):
    """
    Model capillary pressure as diffusion.
    """
    _version = '231'
    fluent_name = 'capillary-pressure-as-diffusion?'
    _python_name = 'capillary_pressure_as_diffusion'
    return_type = 'object'

class porous_media(Group):
    """
    Multiphase miscellaneous porous media numerics object.
    """
    _version = '231'
    fluent_name = 'porous-media'
    _python_name = 'porous_media'
    child_names = ['relative_permeability', 'capillary_pressure_as_diffusion']
    _child_classes = dict(
        relative_permeability=relative_permeability,
        capillary_pressure_as_diffusion=capillary_pressure_as_diffusion,
    )
    return_type = 'object'

class enhanced_numerics(Boolean):
    """
    Multiphase enhanced compressible flow numerics options.
    """
    _version = '231'
    fluent_name = 'enhanced-numerics?'
    _python_name = 'enhanced_numerics'
    return_type = 'object'

class alternate_bc_formulation(Boolean):
    """
    Enable/disable use of alternate compressible bc formulation.
    """
    _version = '231'
    fluent_name = 'alternate-bc-formulation?'
    _python_name = 'alternate_bc_formulation'
    return_type = 'object'

class analytical_thermodynamic_derivatives(Boolean):
    """
    Enable/disable use of analytical thermodynamic derivatives.
    """
    _version = '231'
    fluent_name = 'analytical-thermodynamic-derivatives?'
    _python_name = 'analytical_thermodynamic_derivatives'
    return_type = 'object'

class compressible_flow(Group):
    """
    Multiphase compressible numerics options object.
    """
    _version = '231'
    fluent_name = 'compressible-flow'
    _python_name = 'compressible_flow'
    child_names = ['enhanced_numerics', 'alternate_bc_formulation', 'analytical_thermodynamic_derivatives']
    _child_classes = dict(
        enhanced_numerics=enhanced_numerics,
        alternate_bc_formulation=alternate_bc_formulation,
        analytical_thermodynamic_derivatives=analytical_thermodynamic_derivatives,
    )
    return_type = 'object'

class thin_film(Boolean):
    """
    Multiphase boiling thin film effects.
    """
    _version = '231'
    fluent_name = 'thin-film?'
    _python_name = 'thin_film'
    return_type = 'object'

class liquid_vof_factor(Boolean):
    """
    Multiphase boiling liquid volume fraction effects.
    """
    _version = '231'
    fluent_name = 'liquid-vof-factor?'
    _python_name = 'liquid_vof_factor'
    return_type = 'object'

class boiling_parameters(Group):
    """
    Multiphase boiling parameters object.
    """
    _version = '231'
    fluent_name = 'boiling-parameters'
    _python_name = 'boiling_parameters'
    child_names = ['thin_film', 'liquid_vof_factor']
    _child_classes = dict(
        thin_film=thin_film,
        liquid_vof_factor=liquid_vof_factor,
    )
    return_type = 'object'

class viscosity_averaging(Boolean):
    """
    Enable/disable use of harmonic averaging for viscosity.
    """
    _version = '231'
    fluent_name = 'viscosity-averaging?'
    _python_name = 'viscosity_averaging'
    return_type = 'object'

class turb_visc_based_damping(Boolean):
    """
    Enable/disable turbulence damping based on turbulent viscosity.
    """
    _version = '231'
    fluent_name = 'turb-visc-based-damping?'
    _python_name = 'turb_visc_based_damping'
    return_type = 'object'

class density_func_expo(Real):
    """
    Density function exponent.
    """
    _version = '231'
    fluent_name = 'density-func-expo'
    _python_name = 'density_func_expo'
    return_type = 'object'

class density_ratio_cutoff(Real):
    """
    Density ratio cut-off.
    """
    _version = '231'
    fluent_name = 'density-ratio-cutoff'
    _python_name = 'density_ratio_cutoff'
    return_type = 'object'

class n_smooth_for_interfacial_regims(Integer):
    """
    Number of smoothings for interfacial regime.
    """
    _version = '231'
    fluent_name = 'n-smooth-for-interfacial-regims'
    _python_name = 'n_smooth_for_interfacial_regims'
    return_type = 'object'

class sm_relax_factor(Real):
    """
    Smoothing relaxation factor.
    """
    _version = '231'
    fluent_name = 'sm-relax-factor'
    _python_name = 'sm_relax_factor'
    return_type = 'object'

class viscous_func_options(Integer):
    """
    Viscous function option.
    """
    _version = '231'
    fluent_name = 'viscous-func-options'
    _python_name = 'viscous_func_options'
    return_type = 'object'

class density_func_options(Integer):
    """
    Density function option.
    """
    _version = '231'
    fluent_name = 'density-func-options'
    _python_name = 'density_func_options'
    return_type = 'object'

class exponent_smoothing_func(Real):
    """
    Exponent of smoothing function.
    """
    _version = '231'
    fluent_name = 'exponent-smoothing-func'
    _python_name = 'exponent_smoothing_func'
    return_type = 'object'

class exponent_density_func(Real):
    """
    Exponent of density function.
    """
    _version = '231'
    fluent_name = 'exponent-density-func'
    _python_name = 'exponent_density_func'
    return_type = 'object'

class boundry_treatment(Boolean):
    """
    Enable/disable boundary treatment.
    """
    _version = '231'
    fluent_name = 'boundry-treatment?'
    _python_name = 'boundry_treatment'
    return_type = 'object'

class near_wall_treatment_1(Boolean):
    """
    Enable/disable near wall treatment?.
    """
    _version = '231'
    fluent_name = 'near-wall-treatment?'
    _python_name = 'near_wall_treatment'
    return_type = 'object'

class interfacial_artificial_viscosity(Group):
    """
    Interfacial artifical viscosity controls.
    """
    _version = '231'
    fluent_name = 'interfacial-artificial-viscosity'
    _python_name = 'interfacial_artificial_viscosity'
    child_names = ['n_smooth_for_interfacial_regims', 'sm_relax_factor', 'viscous_func_options', 'density_func_options', 'exponent_smoothing_func', 'exponent_density_func', 'boundry_treatment', 'near_wall_treatment']
    _child_classes = dict(
        n_smooth_for_interfacial_regims=n_smooth_for_interfacial_regims,
        sm_relax_factor=sm_relax_factor,
        viscous_func_options=viscous_func_options,
        density_func_options=density_func_options,
        exponent_smoothing_func=exponent_smoothing_func,
        exponent_density_func=exponent_density_func,
        boundry_treatment=boundry_treatment,
        near_wall_treatment=near_wall_treatment_1,
    )
    return_type = 'object'

class viscous_flow(Group):
    """
    Multiphase viscous flow numerics options object.
    """
    _version = '231'
    fluent_name = 'viscous-flow'
    _python_name = 'viscous_flow'
    child_names = ['viscosity_averaging', 'turb_visc_based_damping', 'density_func_expo', 'density_ratio_cutoff', 'interfacial_artificial_viscosity']
    _child_classes = dict(
        viscosity_averaging=viscosity_averaging,
        turb_visc_based_damping=turb_visc_based_damping,
        density_func_expo=density_func_expo,
        density_ratio_cutoff=density_ratio_cutoff,
        interfacial_artificial_viscosity=interfacial_artificial_viscosity,
    )
    return_type = 'object'

class schnerr_evap_coeff(Real):
    """
    Evaporation coefficient for Schnerr-Sauer model.
    """
    _version = '231'
    fluent_name = 'schnerr-evap-coeff'
    _python_name = 'schnerr_evap_coeff'
    return_type = 'object'

class schnerr_cond_coeff(Real):
    """
    Condensation coefficient for Schnerr-Sauer model.
    """
    _version = '231'
    fluent_name = 'schnerr-cond-coeff'
    _python_name = 'schnerr_cond_coeff'
    return_type = 'object'

class max_vapor_pressure_ratio(Real):
    """
    Maximum limit on vapor pressure after turbulence and thermal correction.
    """
    _version = '231'
    fluent_name = 'max-vapor-pressure-ratio'
    _python_name = 'max_vapor_pressure_ratio'
    return_type = 'object'

class min_vapor_pressure(Real):
    """
    Minimum vapor pressure limit for cavitation model.
    """
    _version = '231'
    fluent_name = 'min-vapor-pressure'
    _python_name = 'min_vapor_pressure'
    return_type = 'object'

class display_clipped_pressure(Boolean):
    """
    Clipped pressure is just used for the properties evaluation. Mass Transfer Rate uses unclipped pressure.
    """
    _version = '231'
    fluent_name = 'display-clipped-pressure?'
    _python_name = 'display_clipped_pressure'
    return_type = 'object'

class turbulent_diffusion(Boolean):
    """
    New turbulent diffusion treatment is applicable to N-phase flow when one of the phases 
    participating in cavitation is selected as a primary phase.
    """
    _version = '231'
    fluent_name = 'turbulent-diffusion?'
    _python_name = 'turbulent_diffusion'
    return_type = 'object'

class old_treatment_for_turbulent_diffusion(Boolean):
    """
    Old turbulent diffusion treatment is applicable to two phase flow when vapor is selected as a secondary phase.
    """
    _version = '231'
    fluent_name = 'old-treatment-for-turbulent-diffusion?'
    _python_name = 'old_treatment_for_turbulent_diffusion'
    return_type = 'object'

class cavitation(Group):
    """
    Cavitation numerics options object.
    """
    _version = '231'
    fluent_name = 'cavitation'
    _python_name = 'cavitation'
    child_names = ['schnerr_evap_coeff', 'schnerr_cond_coeff', 'max_vapor_pressure_ratio', 'min_vapor_pressure', 'display_clipped_pressure', 'turbulent_diffusion', 'old_treatment_for_turbulent_diffusion']
    _child_classes = dict(
        schnerr_evap_coeff=schnerr_evap_coeff,
        schnerr_cond_coeff=schnerr_cond_coeff,
        max_vapor_pressure_ratio=max_vapor_pressure_ratio,
        min_vapor_pressure=min_vapor_pressure,
        display_clipped_pressure=display_clipped_pressure,
        turbulent_diffusion=turbulent_diffusion,
        old_treatment_for_turbulent_diffusion=old_treatment_for_turbulent_diffusion,
    )
    return_type = 'object'

class vof_from_min_limit(Real):
    """
    Minimum volume fraction below which mass transfer rate is set to zero.
    """
    _version = '231'
    fluent_name = 'vof-from-min-limit'
    _python_name = 'vof_from_min_limit'
    return_type = 'object'

class vof_from_max_limit(Real):
    """
    Maximum volume fraction above which mass transfer rate is set to zero.
    """
    _version = '231'
    fluent_name = 'vof-from-max-limit'
    _python_name = 'vof_from_max_limit'
    return_type = 'object'

class vof_to_min_limit(Real):
    """
    Minimum volume fraction below which mass transfer rate is set to zero.
    """
    _version = '231'
    fluent_name = 'vof-to-min-limit'
    _python_name = 'vof_to_min_limit'
    return_type = 'object'

class vof_to_max_limit(Real):
    """
    Maximum volume fraction above which mass transfer rate is set to zero.
    """
    _version = '231'
    fluent_name = 'vof-to-max-limit'
    _python_name = 'vof_to_max_limit'
    return_type = 'object'

class ia_norm_min_limit(Real):
    """
    Minimum normalized area density below which mass transfer rate is set to zero.
    """
    _version = '231'
    fluent_name = 'ia-norm-min-limit'
    _python_name = 'ia_norm_min_limit'
    return_type = 'object'

class max_rel_humidity(Real):
    """
    Maximum value of relative humidity to limit condensation rate.
    """
    _version = '231'
    fluent_name = 'max-rel-humidity'
    _python_name = 'max_rel_humidity'
    return_type = 'object'

class evaporation_condensation(Group):
    """
    Evaporation-condensation advanced options object.
    """
    _version = '231'
    fluent_name = 'evaporation-condensation'
    _python_name = 'evaporation_condensation'
    child_names = ['vof_from_min_limit', 'vof_from_max_limit', 'vof_to_min_limit', 'vof_to_max_limit', 'ia_norm_min_limit', 'max_rel_humidity']
    _child_classes = dict(
        vof_from_min_limit=vof_from_min_limit,
        vof_from_max_limit=vof_from_max_limit,
        vof_to_min_limit=vof_to_min_limit,
        vof_to_max_limit=vof_to_max_limit,
        ia_norm_min_limit=ia_norm_min_limit,
        max_rel_humidity=max_rel_humidity,
    )
    return_type = 'object'

class heat_flux_relaxation_factor(Real):
    """
    Under-relaxation factor for boiling heat flux.
    """
    _version = '231'
    fluent_name = 'heat-flux-relaxation-factor'
    _python_name = 'heat_flux_relaxation_factor'
    return_type = 'object'

class show_expert_options(Boolean):
    """
    Exposes expert options of min/max superheat along with wetting fraction controls.
    """
    _version = '231'
    fluent_name = 'show-expert-options?'
    _python_name = 'show_expert_options'
    return_type = 'object'

class two_resistance_boiling_framework(Boolean):
    """
    Allow generalized two-resistance framework for boiling model.
    """
    _version = '231'
    fluent_name = 'two-resistance-boiling-framework?'
    _python_name = 'two_resistance_boiling_framework'
    return_type = 'object'

class boiling(Group):
    """
    Boiling advanced options object.
    """
    _version = '231'
    fluent_name = 'boiling'
    _python_name = 'boiling'
    child_names = ['heat_flux_relaxation_factor', 'show_expert_options', 'two_resistance_boiling_framework']
    _child_classes = dict(
        heat_flux_relaxation_factor=heat_flux_relaxation_factor,
        show_expert_options=show_expert_options,
        two_resistance_boiling_framework=two_resistance_boiling_framework,
    )
    return_type = 'object'

class vof_min_seeding(Real):
    """
    Minimum vof seeding for non-zero area density in heat and mass transfer.
    """
    _version = '231'
    fluent_name = 'vof-min-seeding'
    _python_name = 'vof_min_seeding'
    return_type = 'object'

class ia_grad_sym(Boolean):
    """
    Interfacial area density gradient-symmetric mechanism.
    """
    _version = '231'
    fluent_name = 'ia-grad-sym?'
    _python_name = 'ia_grad_sym'
    return_type = 'object'

class area_density_1(Group):
    """
    Interfacial area density object.
    """
    _version = '231'
    fluent_name = 'area-density'
    _python_name = 'area_density'
    child_names = ['vof_min_seeding', 'ia_grad_sym']
    _child_classes = dict(
        vof_min_seeding=vof_min_seeding,
        ia_grad_sym=ia_grad_sym,
    )
    return_type = 'object'

class alternative_energy_treatment(Boolean):
    """
    Alternative treatment of latent heat source due to mass transfer.
    """
    _version = '231'
    fluent_name = 'alternative-energy-treatment?'
    _python_name = 'alternative_energy_treatment'
    return_type = 'object'

class heat_mass_transfer(Group):
    """
    Multiphase interphase heat and mass transfer numerics options object.
    """
    _version = '231'
    fluent_name = 'heat-mass-transfer'
    _python_name = 'heat_mass_transfer'
    child_names = ['cavitation', 'evaporation_condensation', 'boiling', 'area_density', 'alternative_energy_treatment']
    _child_classes = dict(
        cavitation=cavitation,
        evaporation_condensation=evaporation_condensation,
        boiling=boiling,
        area_density=area_density_1,
        alternative_energy_treatment=alternative_energy_treatment,
    )
    return_type = 'object'

class smoothed_density_stabilization_method(Boolean):
    """
    Enable/disable smoothed density for momentum stabilization.
    """
    _version = '231'
    fluent_name = 'smoothed-density-stabilization-method?'
    _python_name = 'smoothed_density_stabilization_method'
    return_type = 'object'

class num_of_density_smoothing(Integer):
    """
    Number of density smoothings.
    """
    _version = '231'
    fluent_name = 'num-of-density-smoothing'
    _python_name = 'num_of_density_smoothing'
    return_type = 'object'

class false_time_step_linearization(Boolean):
    """
    False time-step linearization for added stability.
    """
    _version = '231'
    fluent_name = 'false-time-step-linearization?'
    _python_name = 'false_time_step_linearization'
    return_type = 'object'

class enable_6(Boolean):
    """
    Enable advanced automatic time stepping for better stability.
    """
    _version = '231'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class dt_init_limit(Real):
    """
    Maximum value for pseudo time step size during first iteration.
    """
    _version = '231'
    fluent_name = 'dt-init-limit'
    _python_name = 'dt_init_limit'
    return_type = 'object'

class dt_max(Real):
    """
    Maximum pseudo time step size.
    """
    _version = '231'
    fluent_name = 'dt-max'
    _python_name = 'dt_max'
    return_type = 'object'

class dt_factor_min(Real):
    """
    Minimum limit for reduction in pseudo time step size.
    """
    _version = '231'
    fluent_name = 'dt-factor-min'
    _python_name = 'dt_factor_min'
    return_type = 'object'

class dt_factor_max(Real):
    """
    Maximum limit for increase in pseudo time step size.
    """
    _version = '231'
    fluent_name = 'dt-factor-max'
    _python_name = 'dt_factor_max'
    return_type = 'object'

class max_velocity_ratio(Real):
    """
    Velocity ratio to freeze the time step size for better solution stability.
    """
    _version = '231'
    fluent_name = 'max-velocity-ratio'
    _python_name = 'max_velocity_ratio'
    return_type = 'object'

class auto_dt_advanced_controls(Group):
    """
    Automatic time-stepping controls for better solution stability.
    """
    _version = '231'
    fluent_name = 'auto-dt-advanced-controls'
    _python_name = 'auto_dt_advanced_controls'
    child_names = ['enable', 'dt_init_limit', 'dt_max', 'dt_factor_min', 'dt_factor_max', 'max_velocity_ratio']
    _child_classes = dict(
        enable=enable_6,
        dt_init_limit=dt_init_limit,
        dt_max=dt_max,
        dt_factor_min=dt_factor_min,
        dt_factor_max=dt_factor_max,
        max_velocity_ratio=max_velocity_ratio,
    )
    return_type = 'object'

class pseudo_transient(Group):
    """
    Pseudo-Time stability controls for multiphase flow.
    """
    _version = '231'
    fluent_name = 'pseudo-transient'
    _python_name = 'pseudo_transient'
    child_names = ['smoothed_density_stabilization_method', 'num_of_density_smoothing', 'false_time_step_linearization', 'auto_dt_advanced_controls']
    _child_classes = dict(
        smoothed_density_stabilization_method=smoothed_density_stabilization_method,
        num_of_density_smoothing=num_of_density_smoothing,
        false_time_step_linearization=false_time_step_linearization,
        auto_dt_advanced_controls=auto_dt_advanced_controls,
    )
    return_type = 'object'

class buoyancy_force_linearization(Boolean):
    """
    Enable/disable linearized buoyancy force.
    """
    _version = '231'
    fluent_name = 'buoyancy-force-linearization?'
    _python_name = 'buoyancy_force_linearization'
    return_type = 'object'

class blended_treatment_for_buoyancy_forces(Boolean):
    """
    Enable/disable use of  blended treatment for buoyancy force.
    """
    _version = '231'
    fluent_name = 'blended-treatment-for-buoyancy-forces?'
    _python_name = 'blended_treatment_for_buoyancy_forces'
    return_type = 'object'

class coupled_vof(Group):
    """
    Coupled VOF stability controls.
    """
    _version = '231'
    fluent_name = 'coupled-vof'
    _python_name = 'coupled_vof'
    child_names = ['buoyancy_force_linearization', 'blended_treatment_for_buoyancy_forces']
    _child_classes = dict(
        buoyancy_force_linearization=buoyancy_force_linearization,
        blended_treatment_for_buoyancy_forces=blended_treatment_for_buoyancy_forces,
    )
    return_type = 'object'

class low_order_rhie_chow(Boolean):
    """
    Use low order velocity interpolation in flux calculation.
    """
    _version = '231'
    fluent_name = 'low-order-rhie-chow?'
    _python_name = 'low_order_rhie_chow'
    return_type = 'object'

class rhie_chow_flux(Group):
    """
    'rhie_chow_flux' child.
    """
    _version = '231'
    fluent_name = 'rhie-chow-flux'
    _python_name = 'rhie_chow_flux'
    child_names = ['low_order_rhie_chow']
    _child_classes = dict(
        low_order_rhie_chow=low_order_rhie_chow,
    )
    return_type = 'object'

class limit_pressure_correction_gradient(Boolean):
    """
    Use limited pressure correction gradient in skewness corrections for better stability.
    """
    _version = '231'
    fluent_name = 'limit-pressure-correction-gradient?'
    _python_name = 'limit_pressure_correction_gradient'
    return_type = 'object'

class skewness_correction(Group):
    """
    Skewness correction related stabiity controls for multiphase flow.
    """
    _version = '231'
    fluent_name = 'skewness-correction'
    _python_name = 'skewness_correction'
    child_names = ['limit_pressure_correction_gradient']
    _child_classes = dict(
        limit_pressure_correction_gradient=limit_pressure_correction_gradient,
    )
    return_type = 'object'

class p_v_coupling_1(Group):
    """
    Pressure velocity coupling controls for multiphase flow.
    """
    _version = '231'
    fluent_name = 'p-v-coupling'
    _python_name = 'p_v_coupling'
    child_names = ['coupled_vof', 'rhie_chow_flux', 'skewness_correction']
    _child_classes = dict(
        coupled_vof=coupled_vof,
        rhie_chow_flux=rhie_chow_flux,
        skewness_correction=skewness_correction,
    )
    return_type = 'object'

class outer_iterations(Integer):
    """
    Number of outer iterations in hybrid nita.
    """
    _version = '231'
    fluent_name = 'outer-iterations'
    _python_name = 'outer_iterations'
    return_type = 'object'

class initial_time_steps(Integer):
    """
    Number of initial time-steps.
    """
    _version = '231'
    fluent_name = 'initial-time-steps'
    _python_name = 'initial_time_steps'
    return_type = 'object'

class initial_outer_iter(Integer):
    """
    Number of initial outer iterations.
    """
    _version = '231'
    fluent_name = 'initial-outer-iter'
    _python_name = 'initial_outer_iter'
    return_type = 'object'

class initial_outer_iterations(Group):
    """
    Hybrid nita start-up controls.
    """
    _version = '231'
    fluent_name = 'initial-outer-iterations'
    _python_name = 'initial_outer_iterations'
    child_names = ['initial_time_steps', 'initial_outer_iter']
    _child_classes = dict(
        initial_time_steps=initial_time_steps,
        initial_outer_iter=initial_outer_iter,
    )
    return_type = 'object'

class enable_instability_detector(Boolean):
    """
    Enable instability detector for better stability.
    """
    _version = '231'
    fluent_name = 'enable-instability-detector?'
    _python_name = 'enable_instability_detector'
    return_type = 'object'

class set_cfl_limit(Real):
    """
    Courant Number limit for detection of unstable event.
    """
    _version = '231'
    fluent_name = 'set-cfl-limit'
    _python_name = 'set_cfl_limit'
    return_type = 'object'

class set_cfl_type(String, AllowedValuesMixin):
    """
    Courant Number type for detection of unstable event.
    """
    _version = '231'
    fluent_name = 'set-cfl-type'
    _python_name = 'set_cfl_type'
    return_type = 'object'

class set_velocity_limit(Real):
    """
    Velocity limit for detection of unstable event.
    """
    _version = '231'
    fluent_name = 'set-velocity-limit'
    _python_name = 'set_velocity_limit'
    return_type = 'object'

class unstable_event_outer_iterations(Integer):
    """
    Number of outer iterations for unstable event.
    """
    _version = '231'
    fluent_name = 'unstable-event-outer-iterations'
    _python_name = 'unstable_event_outer_iterations'
    return_type = 'object'

class instability_detector(Group):
    """
    Hybrid NITA instability detector controls.
    """
    _version = '231'
    fluent_name = 'instability-detector'
    _python_name = 'instability_detector'
    child_names = ['enable_instability_detector', 'set_cfl_limit', 'set_cfl_type', 'set_velocity_limit', 'unstable_event_outer_iterations']
    _child_classes = dict(
        enable_instability_detector=enable_instability_detector,
        set_cfl_limit=set_cfl_limit,
        set_cfl_type=set_cfl_type,
        set_velocity_limit=set_velocity_limit,
        unstable_event_outer_iterations=unstable_event_outer_iterations,
    )
    return_type = 'object'

class hybrid_nita(Group):
    """
    Hybrid NITA stability controls for multiphase flow.
    """
    _version = '231'
    fluent_name = 'hybrid-nita'
    _python_name = 'hybrid_nita'
    child_names = ['outer_iterations', 'initial_outer_iterations', 'instability_detector']
    _child_classes = dict(
        outer_iterations=outer_iterations,
        initial_outer_iterations=initial_outer_iterations,
        instability_detector=instability_detector,
    )
    return_type = 'object'

class solve_flow_last(Boolean):
    """
    Solve flow equation at the end of iteration as an alternative.
    """
    _version = '231'
    fluent_name = 'solve-flow-last?'
    _python_name = 'solve_flow_last'
    return_type = 'object'

class solve_exp_vof_at_end(Boolean):
    """
    Solve Explicit VOF at the end of time-step as an alternative.
    """
    _version = '231'
    fluent_name = 'solve-exp-vof-at-end?'
    _python_name = 'solve_exp_vof_at_end'
    return_type = 'object'

class equation_order(Group):
    """
    Equation Order Menu for Homogeneous Multiphase Flow Models.
    """
    _version = '231'
    fluent_name = 'equation-order'
    _python_name = 'equation_order'
    child_names = ['solve_flow_last', 'solve_exp_vof_at_end']
    _child_classes = dict(
        solve_flow_last=solve_flow_last,
        solve_exp_vof_at_end=solve_exp_vof_at_end,
    )
    return_type = 'object'

class enable_dynamic_strength(Boolean):
    """
    Enable dynamic strength to reduce compression in the tangential direction to the interface.
    """
    _version = '231'
    fluent_name = 'enable-dynamic-strength?'
    _python_name = 'enable_dynamic_strength'
    return_type = 'object'

class set_dynamic_strength_exponent(Real):
    """
    Cosine exponent in dynamic strength treatment.
    """
    _version = '231'
    fluent_name = 'set-dynamic-strength-exponent'
    _python_name = 'set_dynamic_strength_exponent'
    return_type = 'object'

class set_maximum_dynamic_strength(Real):
    """
    Maximum value of dynamic anti-diffusion strength.
    """
    _version = '231'
    fluent_name = 'set-maximum-dynamic-strength'
    _python_name = 'set_maximum_dynamic_strength'
    return_type = 'object'

class anti_diffusion(Group):
    """
    Anti Diffusion Menu for VOF/Multi-Fluid VOF Models.
    """
    _version = '231'
    fluent_name = 'anti-diffusion'
    _python_name = 'anti_diffusion'
    child_names = ['enable_dynamic_strength', 'set_dynamic_strength_exponent', 'set_maximum_dynamic_strength']
    _child_classes = dict(
        enable_dynamic_strength=enable_dynamic_strength,
        set_dynamic_strength_exponent=set_dynamic_strength_exponent,
        set_maximum_dynamic_strength=set_maximum_dynamic_strength,
    )
    return_type = 'object'

class advanced_stability_controls(Group):
    """
    Stability controls for multiphase flow.
    """
    _version = '231'
    fluent_name = 'advanced-stability-controls'
    _python_name = 'advanced_stability_controls'
    child_names = ['pseudo_transient', 'p_v_coupling', 'hybrid_nita', 'equation_order', 'anti_diffusion']
    _child_classes = dict(
        pseudo_transient=pseudo_transient,
        p_v_coupling=p_v_coupling_1,
        hybrid_nita=hybrid_nita,
        equation_order=equation_order,
        anti_diffusion=anti_diffusion,
    )
    return_type = 'object'

class recommended_defaults_for_existing_cases(Boolean):
    """
    Activate multiphase defaults for loaded case.
    """
    _version = '231'
    fluent_name = 'recommended-defaults-for-existing-cases'
    _python_name = 'recommended_defaults_for_existing_cases'
    return_type = 'object'

class old_default_of_operating_density_method(Boolean):
    """
    'old_default_of_operating_density_method' child.
    """
    _version = '231'
    fluent_name = 'old-default-of-operating-density-method'
    _python_name = 'old_default_of_operating_density_method'
    return_type = 'object'

class old_default_of_volume_fraction_smoothing(Boolean):
    """
    'old_default_of_volume_fraction_smoothing' child.
    """
    _version = '231'
    fluent_name = 'old-default-of-volume-fraction-smoothing'
    _python_name = 'old_default_of_volume_fraction_smoothing'
    return_type = 'object'

class old_variant_of_pesto_for_cases_using_structured_mesh(Boolean):
    """
    'old_variant_of_pesto_for_cases_using_structured_mesh' child.
    """
    _version = '231'
    fluent_name = 'old-variant-of-pesto-for-cases-using-structured-mesh'
    _python_name = 'old_variant_of_pesto_for_cases_using_structured_mesh'
    return_type = 'object'

class revert_to_pre_r20_1_default_settings(Group):
    """
    Revert to pre-R20.1 multiphase flow default settings.
    """
    _version = '231'
    fluent_name = 'revert-to-pre-r20.1-default-settings?'
    _python_name = 'revert_to_pre_r20_1_default_settings'
    child_names = ['old_default_of_operating_density_method', 'old_default_of_volume_fraction_smoothing', 'old_variant_of_pesto_for_cases_using_structured_mesh']
    _child_classes = dict(
        old_default_of_operating_density_method=old_default_of_operating_density_method,
        old_default_of_volume_fraction_smoothing=old_default_of_volume_fraction_smoothing,
        old_variant_of_pesto_for_cases_using_structured_mesh=old_variant_of_pesto_for_cases_using_structured_mesh,
    )
    return_type = 'object'

class default_controls(Group):
    """
    Multiphase default controls object.
    """
    _version = '231'
    fluent_name = 'default-controls'
    _python_name = 'default_controls'
    child_names = ['recommended_defaults_for_existing_cases', 'revert_to_pre_r20_1_default_settings']
    _child_classes = dict(
        recommended_defaults_for_existing_cases=recommended_defaults_for_existing_cases,
        revert_to_pre_r20_1_default_settings=revert_to_pre_r20_1_default_settings,
    )
    return_type = 'object'

class pressure_corr_grad(Boolean):
    """
    Enable/disable pressure correction gradient limiting in corrector step.
    """
    _version = '231'
    fluent_name = 'pressure-corr-grad?'
    _python_name = 'pressure_corr_grad'
    return_type = 'object'

class face_pressure_calculation_method(String):
    """
    Face pressure calculation method for corrector step .
    """
    _version = '231'
    fluent_name = 'face-pressure-calculation-method'
    _python_name = 'face_pressure_calculation_method'
    return_type = 'object'

class exclude_transient_term_in_face_pressure_calc(Boolean):
    """
    Enable/disale transient terms in face pressure calculation.
    """
    _version = '231'
    fluent_name = 'exclude-transient-term-in-face-pressure-calc'
    _python_name = 'exclude_transient_term_in_face_pressure_calc'
    return_type = 'object'

class face_pressure_options(Group):
    """
    Face pressure options.
    """
    _version = '231'
    fluent_name = 'face-pressure-options'
    _python_name = 'face_pressure_options'
    child_names = ['pressure_corr_grad', 'face_pressure_calculation_method', 'exclude_transient_term_in_face_pressure_calc']
    _child_classes = dict(
        pressure_corr_grad=pressure_corr_grad,
        face_pressure_calculation_method=face_pressure_calculation_method,
        exclude_transient_term_in_face_pressure_calc=exclude_transient_term_in_face_pressure_calc,
    )
    return_type = 'object'

class face_pressure_controls(Group):
    """
    The face pressure expert controls object.
    """
    _version = '231'
    fluent_name = 'face-pressure-controls'
    _python_name = 'face_pressure_controls'
    child_names = ['face_pressure_options']
    _child_classes = dict(
        face_pressure_options=face_pressure_options,
    )
    return_type = 'object'

class execute_settings_optimization(Boolean):
    """
    Execute optimized settings for VOF.
    """
    _version = '231'
    fluent_name = 'execute-settings-optimization?'
    _python_name = 'execute_settings_optimization'
    return_type = 'object'

class execute_advanced_stabilization(Boolean):
    """
    Execute advanced stabilization for VOF.
    """
    _version = '231'
    fluent_name = 'execute-advanced-stabilization?'
    _python_name = 'execute_advanced_stabilization'
    return_type = 'object'

class blended_compressive_scheme(Boolean):
    """
    Blended Compressive discretization scheme for VOF.
    """
    _version = '231'
    fluent_name = 'blended-compressive-scheme?'
    _python_name = 'blended_compressive_scheme'
    return_type = 'object'

class pseudo_time_stabilization(Boolean):
    """
    Pseudo-Time Momentum stabilization and False Time Step Linearization methods for VOF.
    """
    _version = '231'
    fluent_name = 'pseudo-time-stabilization?'
    _python_name = 'pseudo_time_stabilization'
    return_type = 'object'

class additional_stabilization_controls(Group):
    """
    Additional advanced stability controls for VOF.
    """
    _version = '231'
    fluent_name = 'additional-stabilization-controls'
    _python_name = 'additional_stabilization_controls'
    child_names = ['blended_compressive_scheme', 'pseudo_time_stabilization']
    _child_classes = dict(
        blended_compressive_scheme=blended_compressive_scheme,
        pseudo_time_stabilization=pseudo_time_stabilization,
    )
    return_type = 'object'

class execute_additional_stability_controls(Integer):
    """
    Execute additional stability controls for VOF.
    """
    _version = '231'
    fluent_name = 'execute-additional-stability-controls?'
    _python_name = 'execute_additional_stability_controls'
    return_type = 'object'

class enable_velocity_limiting(Boolean):
    """
    Enable velocity limiting treatment.
    """
    _version = '231'
    fluent_name = 'enable-velocity-limiting?'
    _python_name = 'enable_velocity_limiting'
    return_type = 'object'

class max_vol_mag(Real):
    """
    'max_vol_mag' child.
    """
    _version = '231'
    fluent_name = 'max-vol-mag'
    _python_name = 'max_vol_mag'
    return_type = 'object'

class vol_frac_cutoff(Real):
    """
    'vol_frac_cutoff' child.
    """
    _version = '231'
    fluent_name = 'vol-frac-cutoff'
    _python_name = 'vol_frac_cutoff'
    return_type = 'object'

class set_velocity_and_vof_cutoffs_child(Group):
    """
    'child_object_type' of set_velocity_and_vof_cutoffs.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'set_velocity_and_vof_cutoffs_child'
    child_names = ['max_vol_mag', 'vol_frac_cutoff']
    _child_classes = dict(
        max_vol_mag=max_vol_mag,
        vol_frac_cutoff=vol_frac_cutoff,
    )
    return_type = 'object'

class set_velocity_and_vof_cutoffs(NamedObject[set_velocity_and_vof_cutoffs_child], _NonCreatableNamedObjectMixin[set_velocity_and_vof_cutoffs_child]):
    """
    'set_velocity_and_vof_cutoffs' child.
    """
    _version = '231'
    fluent_name = 'set-velocity-and-vof-cutoffs'
    _python_name = 'set_velocity_and_vof_cutoffs'
    child_object_type = set_velocity_and_vof_cutoffs_child
    return_type = 'object'

class set_damping_strengths_child(Real):
    """
    'child_object_type' of set_damping_strengths.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'set_damping_strengths_child'
    return_type = 'object'

class set_damping_strengths(NamedObject[set_damping_strengths_child], _NonCreatableNamedObjectMixin[set_damping_strengths_child]):
    """
    'set_damping_strengths' child.
    """
    _version = '231'
    fluent_name = 'set-damping-strengths'
    _python_name = 'set_damping_strengths'
    child_object_type = set_damping_strengths_child
    return_type = 'object'

class set_velocity_cutoff(Real):
    """
    Max velocity magnitude.
    """
    _version = '231'
    fluent_name = 'set-velocity-cutoff'
    _python_name = 'set_velocity_cutoff'
    return_type = 'object'

class set_damping_strength(Real):
    """
    Damping Strength.
    """
    _version = '231'
    fluent_name = 'set-damping-strength'
    _python_name = 'set_damping_strength'
    return_type = 'object'

class verbosity_5(Boolean):
    """
    Enable verbosity to print number of velocity limited cells during iterations.
    """
    _version = '231'
    fluent_name = 'verbosity?'
    _python_name = 'verbosity'
    return_type = 'object'

class velocity_limiting_treatment(Group):
    """
    Velocity limiting related stabiity controls for VOF.
    """
    _version = '231'
    fluent_name = 'velocity-limiting-treatment'
    _python_name = 'velocity_limiting_treatment'
    child_names = ['enable_velocity_limiting', 'set_velocity_and_vof_cutoffs', 'set_damping_strengths', 'set_velocity_cutoff', 'set_damping_strength', 'verbosity']
    _child_classes = dict(
        enable_velocity_limiting=enable_velocity_limiting,
        set_velocity_and_vof_cutoffs=set_velocity_and_vof_cutoffs,
        set_damping_strengths=set_damping_strengths,
        set_velocity_cutoff=set_velocity_cutoff,
        set_damping_strength=set_damping_strength,
        verbosity=verbosity_5,
    )
    return_type = 'object'

class solution_stabilization_1(Group):
    """
    VOF solution stabilization object.
    """
    _version = '231'
    fluent_name = 'solution-stabilization'
    _python_name = 'solution_stabilization'
    child_names = ['execute_settings_optimization', 'execute_advanced_stabilization', 'additional_stabilization_controls', 'execute_additional_stability_controls', 'velocity_limiting_treatment']
    _child_classes = dict(
        execute_settings_optimization=execute_settings_optimization,
        execute_advanced_stabilization=execute_advanced_stabilization,
        additional_stabilization_controls=additional_stabilization_controls,
        execute_additional_stability_controls=execute_additional_stability_controls,
        velocity_limiting_treatment=velocity_limiting_treatment,
    )
    return_type = 'object'

class multiphase_numerics(Group):
    """
    The multiphase numerics options object.
    """
    _version = '231'
    fluent_name = 'multiphase-numerics'
    _python_name = 'multiphase_numerics'
    child_names = ['porous_media', 'compressible_flow', 'boiling_parameters', 'viscous_flow', 'heat_mass_transfer', 'advanced_stability_controls', 'default_controls', 'face_pressure_controls', 'solution_stabilization']
    _child_classes = dict(
        porous_media=porous_media,
        compressible_flow=compressible_flow,
        boiling_parameters=boiling_parameters,
        viscous_flow=viscous_flow,
        heat_mass_transfer=heat_mass_transfer,
        advanced_stability_controls=advanced_stability_controls,
        default_controls=default_controls,
        face_pressure_controls=face_pressure_controls,
        solution_stabilization=solution_stabilization_1,
    )
    return_type = 'object'

class nb_gradient(String, AllowedValuesMixin):
    """
    'nb_gradient' child.
    """
    _version = '231'
    fluent_name = 'nb-gradient'
    _python_name = 'nb_gradient'
    return_type = 'object'

class nb_gradient_dbns(String, AllowedValuesMixin):
    """
    'nb_gradient_dbns' child.
    """
    _version = '231'
    fluent_name = 'nb-gradient-dbns'
    _python_name = 'nb_gradient_dbns'
    return_type = 'object'

class nb_gradient_boundary_option(Group):
    """
    Ggnb options.
    """
    _version = '231'
    fluent_name = 'nb-gradient-boundary-option'
    _python_name = 'nb_gradient_boundary_option'
    child_names = ['nb_gradient', 'nb_gradient_dbns']
    _child_classes = dict(
        nb_gradient=nb_gradient,
        nb_gradient_dbns=nb_gradient_dbns,
    )
    return_type = 'object'

class set_verbosity(Integer):
    """
    Nita verbosity option.
    """
    _version = '231'
    fluent_name = 'set-verbosity'
    _python_name = 'set_verbosity'
    return_type = 'object'

class skewness_neighbor_coupling_1(Boolean):
    """
    Skewness neighbor coupling for nita.
    """
    _version = '231'
    fluent_name = 'skewness-neighbor-coupling?'
    _python_name = 'skewness_neighbor_coupling'
    return_type = 'object'

class enable_7(Boolean):
    """
    Enable/disable hybrid nita settings.
    """
    _version = '231'
    fluent_name = 'enable?'
    _python_name = 'enable'
    return_type = 'object'

class options_4(String, AllowedValuesMixin):
    """
    Hybrid nita option.
    """
    _version = '231'
    fluent_name = 'options'
    _python_name = 'options'
    return_type = 'object'

class multi_phase_setting(Group):
    """
    'multi_phase_setting' child.
    """
    _version = '231'
    fluent_name = 'multi-phase-setting'
    _python_name = 'multi_phase_setting'
    child_names = ['enable', 'options']
    _child_classes = dict(
        enable=enable_7,
        options=options_4,
    )
    return_type = 'object'

class single_phase_setting(String, AllowedValuesMixin):
    """
    Hybrid nita option.
    """
    _version = '231'
    fluent_name = 'single-phase-setting'
    _python_name = 'single_phase_setting'
    return_type = 'object'

class hybrid_nita_settings(Group):
    """
    A hybrid NITA settings option for faster performance and better robustness.
    """
    _version = '231'
    fluent_name = 'hybrid-nita-settings'
    _python_name = 'hybrid_nita_settings'
    child_names = ['multi_phase_setting', 'single_phase_setting']
    _child_classes = dict(
        multi_phase_setting=multi_phase_setting,
        single_phase_setting=single_phase_setting,
    )
    return_type = 'object'

class nita_expert_controls(Group):
    """
    The nita expert controls object.
    """
    _version = '231'
    fluent_name = 'nita-expert-controls'
    _python_name = 'nita_expert_controls'
    child_names = ['set_verbosity', 'skewness_neighbor_coupling', 'hybrid_nita_settings']
    _child_classes = dict(
        set_verbosity=set_verbosity,
        skewness_neighbor_coupling=skewness_neighbor_coupling_1,
        hybrid_nita_settings=hybrid_nita_settings,
    )
    return_type = 'object'

class nita(Boolean):
    """
    Enable/disable Use of Noniterative Time Advancement Scheme.
    """
    _version = '231'
    fluent_name = 'nita?'
    _python_name = 'nita'
    return_type = 'object'

class high_order_pressure(Boolean):
    """
    High order pressure extrapolation at overset interface.
    """
    _version = '231'
    fluent_name = 'high-order-pressure?'
    _python_name = 'high_order_pressure'
    return_type = 'object'

class interpolation_method(String, AllowedValuesMixin):
    """
    The interpolation method for overset interface(s).
    """
    _version = '231'
    fluent_name = 'interpolation-method'
    _python_name = 'interpolation_method'
    return_type = 'object'

class orphan_cell_treatment(Boolean):
    """
    Enable solver to run with orphans present.
    """
    _version = '231'
    fluent_name = 'orphan-cell-treatment?'
    _python_name = 'orphan_cell_treatment'
    return_type = 'object'

class mass_flux_correction_method(String, AllowedValuesMixin):
    """
    Mass flux correction option at overset interfaces.
    """
    _version = '231'
    fluent_name = 'mass-flux-correction-method'
    _python_name = 'mass_flux_correction_method'
    return_type = 'object'

class hybrid_mode_selection(String, AllowedValuesMixin):
    """
    Mode for hybrid interpolation.
    """
    _version = '231'
    fluent_name = 'hybrid-mode-selection'
    _python_name = 'hybrid_mode_selection'
    return_type = 'object'

class expert_3(Group):
    """
    'expert' child.
    """
    _version = '231'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['mass_flux_correction_method', 'hybrid_mode_selection']
    _child_classes = dict(
        mass_flux_correction_method=mass_flux_correction_method,
        hybrid_mode_selection=hybrid_mode_selection,
    )
    return_type = 'object'

class overset_1(Group):
    """
    Overset solver options object.
    """
    _version = '231'
    fluent_name = 'overset'
    _python_name = 'overset'
    child_names = ['high_order_pressure', 'interpolation_method', 'orphan_cell_treatment', 'expert']
    _child_classes = dict(
        high_order_pressure=high_order_pressure,
        interpolation_method=interpolation_method,
        orphan_cell_treatment=orphan_cell_treatment,
        expert=expert_3,
    )
    return_type = 'object'

class flow_scheme(String, AllowedValuesMixin):
    """
    'flow_scheme' child.
    """
    _version = '231'
    fluent_name = 'flow-scheme'
    _python_name = 'flow_scheme'
    return_type = 'object'

class coupled_form(Boolean):
    """
    'coupled_form' child.
    """
    _version = '231'
    fluent_name = 'coupled-form'
    _python_name = 'coupled_form'
    return_type = 'object'

class solve_n_phase(Boolean):
    """
    Enable/disable N-Phase Volume Fraction equations.
    """
    _version = '231'
    fluent_name = 'solve-n-phase?'
    _python_name = 'solve_n_phase'
    return_type = 'object'

class p_v_coupling(Group):
    """
    The pressure velocity coupling scheme.
    """
    _version = '231'
    fluent_name = 'p-v-coupling'
    _python_name = 'p_v_coupling'
    child_names = ['flow_scheme', 'coupled_form', 'solve_n_phase']
    _child_classes = dict(
        flow_scheme=flow_scheme,
        coupled_form=coupled_form,
        solve_n_phase=solve_n_phase,
    )
    return_type = 'object'

class phase_based_vof_discretization_child(Real):
    """
    'child_object_type' of phase_based_vof_discretization.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'phase_based_vof_discretization_child'
    return_type = 'object'

class phase_based_vof_discretization(NamedObject[phase_based_vof_discretization_child], _NonCreatableNamedObjectMixin[phase_based_vof_discretization_child]):
    """
    'phase_based_vof_discretization' child.
    """
    _version = '231'
    fluent_name = 'phase-based-vof-discretization'
    _python_name = 'phase_based_vof_discretization'
    child_object_type = phase_based_vof_discretization_child
    return_type = 'object'

class reduced_rank_extrapolation(Boolean):
    """
    Enable/disable Reduced Rank Extrapolation method to accelerate solution time.
    """
    _version = '231'
    fluent_name = 'reduced-rank-extrapolation'
    _python_name = 'reduced_rank_extrapolation'
    return_type = 'object'

class subspace_size(Integer):
    """
    Subspace size.
    """
    _version = '231'
    fluent_name = 'subspace-size'
    _python_name = 'subspace_size'
    return_type = 'object'

class skip_iter_count(Integer):
    """
    Skip every n iterations.
    """
    _version = '231'
    fluent_name = 'skip-iter-count'
    _python_name = 'skip_iter_count'
    return_type = 'object'

class reduced_rank_extrapolation_options(Group):
    """
    Reduced Rank Extrapolation options.
    """
    _version = '231'
    fluent_name = 'reduced-rank-extrapolation-options'
    _python_name = 'reduced_rank_extrapolation_options'
    child_names = ['subspace_size', 'skip_iter_count']
    _child_classes = dict(
        subspace_size=subspace_size,
        skip_iter_count=skip_iter_count,
    )
    return_type = 'object'

class residual_smoothing_factor(Real):
    """
    Residual smoothing factor.
    """
    _version = '231'
    fluent_name = 'residual-smoothing-factor'
    _python_name = 'residual_smoothing_factor'
    return_type = 'object'

class residual_smoothing_iter_count(Integer):
    """
    Number of implicit iterations.
    """
    _version = '231'
    fluent_name = 'residual-smoothing-iter-count'
    _python_name = 'residual_smoothing_iter_count'
    return_type = 'object'

class residual_smoothing(Group):
    """
    Residual smoothing factor and number of iterations.
    """
    _version = '231'
    fluent_name = 'residual-smoothing'
    _python_name = 'residual_smoothing'
    child_names = ['residual_smoothing_factor', 'residual_smoothing_iter_count']
    _child_classes = dict(
        residual_smoothing_factor=residual_smoothing_factor,
        residual_smoothing_iter_count=residual_smoothing_iter_count,
    )
    return_type = 'object'

class unsteady_1st_order(Boolean):
    """
    Enable/disable first-order unsteady solution model.
    """
    _version = '231'
    fluent_name = 'unsteady-1st-order?'
    _python_name = 'unsteady_1st_order'
    return_type = 'object'

class unsteady_2nd_order(Boolean):
    """
    Enable/disable second-order unsteady solution model.
    """
    _version = '231'
    fluent_name = 'unsteady-2nd-order?'
    _python_name = 'unsteady_2nd_order'
    return_type = 'object'

class unsteady_2nd_order_bounded(Boolean):
    """
    Enable/disable bounded second-order unsteady formulation.
    """
    _version = '231'
    fluent_name = 'unsteady-2nd-order-bounded?'
    _python_name = 'unsteady_2nd_order_bounded'
    return_type = 'object'

class unsteady_global_time(Boolean):
    """
    Enable/disable unsteady global-time-step solution model.
    """
    _version = '231'
    fluent_name = 'unsteady-global-time?'
    _python_name = 'unsteady_global_time'
    return_type = 'object'

class high_order_rc(Boolean):
    """
    Use low order velocity interpolation in flux calculation.
    """
    _version = '231'
    fluent_name = 'high-order-rc?'
    _python_name = 'high_order_rc'
    return_type = 'object'

class high_order_rc_hybrid_treatment(Boolean):
    """
    Enable/disable use of hybrid treatment for high order Rhie-Chow flux.
    """
    _version = '231'
    fluent_name = 'high-order-rc-hybrid-treatment?'
    _python_name = 'high_order_rc_hybrid_treatment'
    return_type = 'object'

class force_treatment_of_unsteady_rc(Boolean):
    """
    Enable/disable use of forced treatment of unsteady terms in Rhie-Chow flux.
    """
    _version = '231'
    fluent_name = 'force-treatment-of-unsteady-rc?'
    _python_name = 'force_treatment_of_unsteady_rc'
    return_type = 'object'

class unstructured_var_presto_scheme(Boolean):
    """
    Enable/disable use of unstructured variant of PRESTO pressure scheme.
    """
    _version = '231'
    fluent_name = 'unstructured-var-presto-scheme?'
    _python_name = 'unstructured_var_presto_scheme'
    return_type = 'object'

class new_framework_for_vof_specific_node_based_treatment(Boolean):
    """
    Enable/disable new framework for vof specific node based treatments.
    """
    _version = '231'
    fluent_name = 'new-framework-for-vof-specific-node-based-treatment?'
    _python_name = 'new_framework_for_vof_specific_node_based_treatment'
    return_type = 'object'

class vof_numerics(Group):
    """
    VOF numeric options.
    """
    _version = '231'
    fluent_name = 'vof-numerics'
    _python_name = 'vof_numerics'
    child_names = ['high_order_rc', 'high_order_rc_hybrid_treatment', 'force_treatment_of_unsteady_rc', 'unstructured_var_presto_scheme', 'new_framework_for_vof_specific_node_based_treatment']
    _child_classes = dict(
        high_order_rc=high_order_rc,
        high_order_rc_hybrid_treatment=high_order_rc_hybrid_treatment,
        force_treatment_of_unsteady_rc=force_treatment_of_unsteady_rc,
        unstructured_var_presto_scheme=unstructured_var_presto_scheme,
        new_framework_for_vof_specific_node_based_treatment=new_framework_for_vof_specific_node_based_treatment,
    )
    return_type = 'object'

class turbulence_options(String, AllowedValuesMixin):
    """
    Options:
     Legacy computations 
     New computations .
    """
    _version = '231'
    fluent_name = 'turbulence-options'
    _python_name = 'turbulence_options'
    return_type = 'object'

class gradient_correction_mode(String, AllowedValuesMixin):
    """
    'gradient_correction_mode' child.
    """
    _version = '231'
    fluent_name = 'gradient-correction-mode'
    _python_name = 'gradient_correction_mode'
    return_type = 'object'

class enable_8(Command):
    """
    Enable Warped-Face Gradient Correction.
    
    Parameters
    ----------
        enable : bool
            'enable' child.
        gradient_correction_mode : str
            'gradient_correction_mode' child.
    """
    _version = '231'
    fluent_name = 'enable?'
    _python_name = 'enable'
    argument_names = ['enable', 'gradient_correction_mode']
    _child_classes = dict(
        enable=enable,
        gradient_correction_mode=gradient_correction_mode,
    )
    return_type = 'object'

class warped_face_gradient_correction(Group):
    """
    Warped-face-gradient-correction object.
    """
    _version = '231'
    fluent_name = 'warped-face-gradient-correction'
    _python_name = 'warped_face_gradient_correction'
    child_names = ['turbulence_options']
    command_names = ['enable']
    _child_classes = dict(
        turbulence_options=turbulence_options,
        enable=enable_8,
    )
    return_type = 'object'

class coupled_solver(String, AllowedValuesMixin):
    """
    Pseudo time step size formulation for the pseudo time method.
    """
    _version = '231'
    fluent_name = 'coupled-solver'
    _python_name = 'coupled_solver'
    return_type = 'object'

class segregated_solver(String, AllowedValuesMixin):
    """
    Pseudo time step size formulation for the pseudo time method.
    """
    _version = '231'
    fluent_name = 'segregated-solver'
    _python_name = 'segregated_solver'
    return_type = 'object'

class density_based_solver(String, AllowedValuesMixin):
    """
    Pseudo time step size formulation for the pseudo time method.
    """
    _version = '231'
    fluent_name = 'density-based-solver'
    _python_name = 'density_based_solver'
    return_type = 'object'

class formulation(Group):
    """
    The pseudo time step size formulation for the pseudo time method.
    """
    _version = '231'
    fluent_name = 'formulation'
    _python_name = 'formulation'
    child_names = ['coupled_solver', 'segregated_solver', 'density_based_solver']
    _child_classes = dict(
        coupled_solver=coupled_solver,
        segregated_solver=segregated_solver,
        density_based_solver=density_based_solver,
    )
    return_type = 'object'

class relaxation_method_1(String, AllowedValuesMixin):
    """
    Relaxation definition for pseudo time method.
    """
    _version = '231'
    fluent_name = 'relaxation-method'
    _python_name = 'relaxation_method'
    return_type = 'object'

class casm_cutoff_multiplier_1(Real):
    """
    'casm_cutoff_multiplier' child.
    """
    _version = '231'
    fluent_name = 'casm-cutoff-multiplier'
    _python_name = 'casm_cutoff_multiplier'
    return_type = 'object'

class convergence_acceleration_for_stretched_meshes_1(Group):
    """
    Enable convergence acceleration for stretched meshes to improve the convergence of the implicit pressure based solver on meshes with high cell stretching.
    """
    _version = '231'
    fluent_name = 'convergence-acceleration-for-stretched-meshes'
    _python_name = 'convergence_acceleration_for_stretched_meshes'
    child_names = ['convergence_acceleration_type', 'casm_cutoff_multiplier']
    _child_classes = dict(
        convergence_acceleration_type=convergence_acceleration_type,
        casm_cutoff_multiplier=casm_cutoff_multiplier_1,
    )
    return_type = 'object'

class relaxation_bounding_method(String, AllowedValuesMixin):
    """
    'relaxation_bounding_method' child.
    """
    _version = '231'
    fluent_name = 'relaxation-bounding-method'
    _python_name = 'relaxation_bounding_method'
    return_type = 'object'

class default_min_max_relaxation_limits(Boolean):
    """
    'default_min_max_relaxation_limits' child.
    """
    _version = '231'
    fluent_name = 'default-min-max-relaxation-limits?'
    _python_name = 'default_min_max_relaxation_limits'
    return_type = 'object'

class minimum_allowed_effctive_relaxation(Real):
    """
    'minimum_allowed_effctive_relaxation' child.
    """
    _version = '231'
    fluent_name = 'minimum-allowed-effctive-relaxation'
    _python_name = 'minimum_allowed_effctive_relaxation'
    return_type = 'object'

class maximum_allowed_effctive_relaxation(Real):
    """
    'maximum_allowed_effctive_relaxation' child.
    """
    _version = '231'
    fluent_name = 'maximum-allowed-effctive-relaxation'
    _python_name = 'maximum_allowed_effctive_relaxation'
    return_type = 'object'

class relaxation_bounds(Command):
    """
    Select relaxation bounding scheme for pseudo time method.
    
    Parameters
    ----------
        relaxation_bounding_method : str
            'relaxation_bounding_method' child.
        default_min_max_relaxation_limits : bool
            'default_min_max_relaxation_limits' child.
        minimum_allowed_effctive_relaxation : real
            'minimum_allowed_effctive_relaxation' child.
        maximum_allowed_effctive_relaxation : real
            'maximum_allowed_effctive_relaxation' child.
    """
    _version = '231'
    fluent_name = 'relaxation-bounds'
    _python_name = 'relaxation_bounds'
    argument_names = ['relaxation_bounding_method', 'default_min_max_relaxation_limits', 'minimum_allowed_effctive_relaxation', 'maximum_allowed_effctive_relaxation']
    _child_classes = dict(
        relaxation_bounding_method=relaxation_bounding_method,
        default_min_max_relaxation_limits=default_min_max_relaxation_limits,
        minimum_allowed_effctive_relaxation=minimum_allowed_effctive_relaxation,
        maximum_allowed_effctive_relaxation=maximum_allowed_effctive_relaxation,
    )
    return_type = 'object'

class pseudo_time_method(Group):
    """
    The pseudo time method object.
    """
    _version = '231'
    fluent_name = 'pseudo-time-method'
    _python_name = 'pseudo_time_method'
    child_names = ['formulation', 'relaxation_method', 'convergence_acceleration_for_stretched_meshes']
    command_names = ['relaxation_bounds']
    _child_classes = dict(
        formulation=formulation,
        relaxation_method=relaxation_method_1,
        convergence_acceleration_for_stretched_meshes=convergence_acceleration_for_stretched_meshes_1,
        relaxation_bounds=relaxation_bounds,
    )
    return_type = 'object'

class set_solution_methods_to_default(Command):
    """
    Set solution methods to default values.
    """
    _version = '231'
    fluent_name = 'set-solution-methods-to-default'
    _python_name = 'set_solution_methods_to_default'
    return_type = 'object'

class methods(Group):
    """
    'methods' child.
    """
    _version = '231'
    fluent_name = 'methods'
    _python_name = 'methods'
    child_names = ['accelerated_non_iterative_time_marching', 'convergence_acceleration_for_stretched_meshes', 'discretization_scheme', 'expert', 'flux_type', 'frozen_flux', 'gradient_scheme', 'high_order_term_relaxation', 'multiphase_numerics', 'nb_gradient_boundary_option', 'nita_expert_controls', 'nita', 'overset', 'p_v_coupling', 'phase_based_vof_discretization', 'reduced_rank_extrapolation', 'reduced_rank_extrapolation_options', 'residual_smoothing', 'unsteady_1st_order', 'unsteady_2nd_order', 'unsteady_2nd_order_bounded', 'unsteady_global_time', 'vof_numerics', 'warped_face_gradient_correction', 'pseudo_time_method']
    command_names = ['set_solution_methods_to_default']
    _child_classes = dict(
        accelerated_non_iterative_time_marching=accelerated_non_iterative_time_marching,
        convergence_acceleration_for_stretched_meshes=convergence_acceleration_for_stretched_meshes,
        discretization_scheme=discretization_scheme,
        expert=expert_2,
        flux_type=flux_type,
        frozen_flux=frozen_flux,
        gradient_scheme=gradient_scheme,
        high_order_term_relaxation=high_order_term_relaxation,
        multiphase_numerics=multiphase_numerics,
        nb_gradient_boundary_option=nb_gradient_boundary_option,
        nita_expert_controls=nita_expert_controls,
        nita=nita,
        overset=overset_1,
        p_v_coupling=p_v_coupling,
        phase_based_vof_discretization=phase_based_vof_discretization,
        reduced_rank_extrapolation=reduced_rank_extrapolation,
        reduced_rank_extrapolation_options=reduced_rank_extrapolation_options,
        residual_smoothing=residual_smoothing,
        unsteady_1st_order=unsteady_1st_order,
        unsteady_2nd_order=unsteady_2nd_order,
        unsteady_2nd_order_bounded=unsteady_2nd_order_bounded,
        unsteady_global_time=unsteady_global_time,
        vof_numerics=vof_numerics,
        warped_face_gradient_correction=warped_face_gradient_correction,
        pseudo_time_method=pseudo_time_method,
        set_solution_methods_to_default=set_solution_methods_to_default,
    )
    return_type = 'object'

class zone_ids(StringList, AllowedValuesMixin):
    """
    'zone_ids' child.
    """
    _version = '231'
    fluent_name = 'zone-ids'
    _python_name = 'zone_ids'
    return_type = 'object'

class retain_instantaneous_values(Boolean):
    """
    'retain_instantaneous_values' child.
    """
    _version = '231'
    fluent_name = 'retain-instantaneous-values?'
    _python_name = 'retain_instantaneous_values'
    return_type = 'object'

class old_props(StringList, AllowedValuesMixin):
    """
    'old_props' child.
    """
    _version = '231'
    fluent_name = 'old-props'
    _python_name = 'old_props'
    return_type = 'object'

class zone_names(StringList, AllowedValuesMixin):
    """
    'zone_names' child.
    """
    _version = '231'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'
    return_type = 'object'

class average_over(Integer):
    """
    'average_over' child.
    """
    _version = '231'
    fluent_name = 'average-over'
    _python_name = 'average_over'
    return_type = 'object'

class per_zone(Boolean):
    """
    'per_zone' child.
    """
    _version = '231'
    fluent_name = 'per-zone?'
    _python_name = 'per_zone'
    return_type = 'object'

class mesh_1_child(Group):
    """
    'child_object_type' of mesh.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'mesh_child'
    child_names = ['zone_ids', 'retain_instantaneous_values', 'old_props', 'zone_names', 'zone_list', 'average_over', 'per_zone']
    _child_classes = dict(
        zone_ids=zone_ids,
        retain_instantaneous_values=retain_instantaneous_values,
        old_props=old_props,
        zone_names=zone_names,
        zone_list=zone_list,
        average_over=average_over,
        per_zone=per_zone,
    )
    return_type = 'object'

class mesh_1(NamedObject[mesh_1_child], CreatableNamedObjectMixinOld[mesh_1_child]):
    """
    'mesh' child.
    """
    _version = '231'
    fluent_name = 'mesh'
    _python_name = 'mesh'
    child_object_type = mesh_1_child
    return_type = 'object'

class report_type(String, AllowedValuesMixin):
    """
    'report_type' child.
    """
    _version = '231'
    fluent_name = 'report-type'
    _python_name = 'report_type'
    return_type = 'object'

class custom_vector(String, AllowedValuesMixin):
    """
    'custom_vector' child.
    """
    _version = '231'
    fluent_name = 'custom-vector'
    _python_name = 'custom_vector'
    return_type = 'object'

class field(String, AllowedValuesMixin):
    """
    'field' child.
    """
    _version = '231'
    fluent_name = 'field'
    _python_name = 'field'
    return_type = 'object'

class surfaces(StringList, AllowedValuesMixin):
    """
    'surfaces' child.
    """
    _version = '231'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    return_type = 'object'

class geometry_3(StringList, AllowedValuesMixin):
    """
    'geometry' child.
    """
    _version = '231'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    return_type = 'object'

class physics(StringList, AllowedValuesMixin):
    """
    'physics' child.
    """
    _version = '231'
    fluent_name = 'physics'
    _python_name = 'physics'
    return_type = 'object'

class phase_26(String, AllowedValuesMixin):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    return_type = 'object'

class per_surface(Boolean):
    """
    'per_surface' child.
    """
    _version = '231'
    fluent_name = 'per-surface?'
    _python_name = 'per_surface'
    return_type = 'object'

class surface_names(StringList, AllowedValuesMixin):
    """
    'surface_names' child.
    """
    _version = '231'
    fluent_name = 'surface-names'
    _python_name = 'surface_names'
    return_type = 'object'

class surface_ids(StringList, AllowedValuesMixin):
    """
    'surface_ids' child.
    """
    _version = '231'
    fluent_name = 'surface-ids'
    _python_name = 'surface_ids'
    return_type = 'object'

class surface_1_child(Group):
    """
    'child_object_type' of surface.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'surface_child'
    child_names = ['report_type', 'custom_vector', 'field', 'surfaces', 'geometry', 'physics', 'retain_instantaneous_values', 'phase', 'average_over', 'per_surface', 'old_props', 'surface_names', 'surface_ids']
    _child_classes = dict(
        report_type=report_type,
        custom_vector=custom_vector,
        field=field,
        surfaces=surfaces,
        geometry=geometry_3,
        physics=physics,
        retain_instantaneous_values=retain_instantaneous_values,
        phase=phase_26,
        average_over=average_over,
        per_surface=per_surface,
        old_props=old_props,
        surface_names=surface_names,
        surface_ids=surface_ids,
    )
    return_type = 'object'

class surface_1(NamedObject[surface_1_child], CreatableNamedObjectMixinOld[surface_1_child]):
    """
    'surface' child.
    """
    _version = '231'
    fluent_name = 'surface'
    _python_name = 'surface'
    child_object_type = surface_1_child
    return_type = 'object'

class expr_list(StringList, AllowedValuesMixin):
    """
    'expr_list' child.
    """
    _version = '231'
    fluent_name = 'expr-list'
    _python_name = 'expr_list'
    return_type = 'object'

class volume_child(Group):
    """
    'child_object_type' of volume.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'volume_child'
    child_names = ['report_type', 'geometry', 'physics', 'field', 'retain_instantaneous_values', 'phase', 'average_over', 'per_zone', 'old_props', 'zone_names', 'expr_list', 'zone_list']
    _child_classes = dict(
        report_type=report_type,
        geometry=geometry_3,
        physics=physics,
        field=field,
        retain_instantaneous_values=retain_instantaneous_values,
        phase=phase_26,
        average_over=average_over,
        per_zone=per_zone,
        old_props=old_props,
        zone_names=zone_names,
        expr_list=expr_list,
        zone_list=zone_list,
    )
    return_type = 'object'

class volume(NamedObject[volume_child], CreatableNamedObjectMixinOld[volume_child]):
    """
    'volume' child.
    """
    _version = '231'
    fluent_name = 'volume'
    _python_name = 'volume'
    child_object_type = volume_child
    return_type = 'object'

class scaled(Boolean):
    """
    'scaled' child.
    """
    _version = '231'
    fluent_name = 'scaled?'
    _python_name = 'scaled'
    return_type = 'object'

class thread_names(StringList, AllowedValuesMixin):
    """
    'thread_names' child.
    """
    _version = '231'
    fluent_name = 'thread-names'
    _python_name = 'thread_names'
    return_type = 'object'

class thread_ids(StringList, AllowedValuesMixin):
    """
    'thread_ids' child.
    """
    _version = '231'
    fluent_name = 'thread-ids'
    _python_name = 'thread_ids'
    return_type = 'object'

class reference_frame_1(String, AllowedValuesMixin):
    """
    'reference_frame' child.
    """
    _version = '231'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'
    return_type = 'object'

class force_vector(RealList):
    """
    'force_vector' child.
    """
    _version = '231'
    fluent_name = 'force-vector'
    _python_name = 'force_vector'
    return_type = 'object'

class force_child(Group):
    """
    'child_object_type' of force.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'force_child'
    child_names = ['report_type', 'geometry', 'physics', 'retain_instantaneous_values', 'scaled', 'average_over', 'per_zone', 'thread_names', 'thread_ids', 'old_props', 'reference_frame', 'force_vector']
    _child_classes = dict(
        report_type=report_type,
        geometry=geometry_3,
        physics=physics,
        retain_instantaneous_values=retain_instantaneous_values,
        scaled=scaled,
        average_over=average_over,
        per_zone=per_zone,
        thread_names=thread_names,
        thread_ids=thread_ids,
        old_props=old_props,
        reference_frame=reference_frame_1,
        force_vector=force_vector,
    )
    return_type = 'object'

class force(NamedObject[force_child], CreatableNamedObjectMixinOld[force_child]):
    """
    'force' child.
    """
    _version = '231'
    fluent_name = 'force'
    _python_name = 'force'
    child_object_type = force_child
    return_type = 'object'

class lift_child(Group):
    """
    'child_object_type' of lift.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'lift_child'
    child_names = ['report_type', 'geometry', 'physics', 'retain_instantaneous_values', 'scaled', 'average_over', 'per_zone', 'thread_names', 'thread_ids', 'old_props', 'reference_frame', 'force_vector']
    _child_classes = dict(
        report_type=report_type,
        geometry=geometry_3,
        physics=physics,
        retain_instantaneous_values=retain_instantaneous_values,
        scaled=scaled,
        average_over=average_over,
        per_zone=per_zone,
        thread_names=thread_names,
        thread_ids=thread_ids,
        old_props=old_props,
        reference_frame=reference_frame_1,
        force_vector=force_vector,
    )
    return_type = 'object'

class lift(NamedObject[lift_child], CreatableNamedObjectMixinOld[lift_child]):
    """
    'lift' child.
    """
    _version = '231'
    fluent_name = 'lift'
    _python_name = 'lift'
    child_object_type = lift_child
    return_type = 'object'

class drag_child(Group):
    """
    'child_object_type' of drag.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'drag_child'
    child_names = ['report_type', 'geometry', 'physics', 'retain_instantaneous_values', 'scaled', 'average_over', 'per_zone', 'thread_names', 'thread_ids', 'old_props', 'reference_frame', 'force_vector']
    _child_classes = dict(
        report_type=report_type,
        geometry=geometry_3,
        physics=physics,
        retain_instantaneous_values=retain_instantaneous_values,
        scaled=scaled,
        average_over=average_over,
        per_zone=per_zone,
        thread_names=thread_names,
        thread_ids=thread_ids,
        old_props=old_props,
        reference_frame=reference_frame_1,
        force_vector=force_vector,
    )
    return_type = 'object'

class drag(NamedObject[drag_child], CreatableNamedObjectMixinOld[drag_child]):
    """
    'drag' child.
    """
    _version = '231'
    fluent_name = 'drag'
    _python_name = 'drag'
    child_object_type = drag_child
    return_type = 'object'

class mom_axis(RealList):
    """
    'mom_axis' child.
    """
    _version = '231'
    fluent_name = 'mom-axis'
    _python_name = 'mom_axis'
    return_type = 'object'

class mom_center(RealList):
    """
    'mom_center' child.
    """
    _version = '231'
    fluent_name = 'mom-center'
    _python_name = 'mom_center'
    return_type = 'object'

class moment_child(Group):
    """
    'child_object_type' of moment.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'moment_child'
    child_names = ['report_type', 'retain_instantaneous_values', 'scaled', 'average_over', 'per_zone', 'thread_names', 'thread_ids', 'old_props', 'reference_frame', 'mom_axis', 'mom_center']
    _child_classes = dict(
        report_type=report_type,
        retain_instantaneous_values=retain_instantaneous_values,
        scaled=scaled,
        average_over=average_over,
        per_zone=per_zone,
        thread_names=thread_names,
        thread_ids=thread_ids,
        old_props=old_props,
        reference_frame=reference_frame_1,
        mom_axis=mom_axis,
        mom_center=mom_center,
    )
    return_type = 'object'

class moment(NamedObject[moment_child], CreatableNamedObjectMixinOld[moment_child]):
    """
    'moment' child.
    """
    _version = '231'
    fluent_name = 'moment'
    _python_name = 'moment'
    child_object_type = moment_child
    return_type = 'object'

class flux_1_child(Group):
    """
    'child_object_type' of flux.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'flux_child'
    child_names = ['report_type', 'geometry', 'physics', 'retain_instantaneous_values', 'phase', 'average_over', 'per_zone', 'old_props', 'zone_names', 'zone_ids']
    _child_classes = dict(
        report_type=report_type,
        geometry=geometry_3,
        physics=physics,
        retain_instantaneous_values=retain_instantaneous_values,
        phase=phase_26,
        average_over=average_over,
        per_zone=per_zone,
        old_props=old_props,
        zone_names=zone_names,
        zone_ids=zone_ids,
    )
    return_type = 'object'

class flux_1(NamedObject[flux_1_child], CreatableNamedObjectMixinOld[flux_1_child]):
    """
    'flux' child.
    """
    _version = '231'
    fluent_name = 'flux'
    _python_name = 'flux'
    child_object_type = flux_1_child
    return_type = 'object'

class user_specified_origin_and_axis(Boolean):
    """
    'user_specified_origin_and_axis' child.
    """
    _version = '231'
    fluent_name = 'user-specified-origin-and-axis?'
    _python_name = 'user_specified_origin_and_axis'
    return_type = 'object'

class origin_1(RealList):
    """
    'origin' child.
    """
    _version = '231'
    fluent_name = 'origin'
    _python_name = 'origin'
    return_type = 'object'

class axis_1(RealList):
    """
    'axis' child.
    """
    _version = '231'
    fluent_name = 'axis'
    _python_name = 'axis'
    return_type = 'object'

class mass_criterion(Real):
    """
    'mass_criterion' child.
    """
    _version = '231'
    fluent_name = 'mass-criterion'
    _python_name = 'mass_criterion'
    return_type = 'object'

class boundary_zones_names(StringList, AllowedValuesMixin):
    """
    'boundary_zones_names' child.
    """
    _version = '231'
    fluent_name = 'boundary-zones-names'
    _python_name = 'boundary_zones_names'
    return_type = 'object'

class boundary_zones_1(StringList, AllowedValuesMixin):
    """
    'boundary_zones' child.
    """
    _version = '231'
    fluent_name = 'boundary-zones'
    _python_name = 'boundary_zones'
    return_type = 'object'

class inj_mass_rate_last_tstp(Real):
    """
    'inj_mass_rate_last_tstp' child.
    """
    _version = '231'
    fluent_name = 'inj-mass-rate-last-tstp'
    _python_name = 'inj_mass_rate_last_tstp'
    return_type = 'object'

class inj_mass_rate_last_flow(Real):
    """
    'inj_mass_rate_last_flow' child.
    """
    _version = '231'
    fluent_name = 'inj-mass-rate-last-flow'
    _python_name = 'inj_mass_rate_last_flow'
    return_type = 'object'

class inj_mass_rate_prev_mass(Real):
    """
    'inj_mass_rate_prev_mass' child.
    """
    _version = '231'
    fluent_name = 'inj-mass-rate-prev-mass'
    _python_name = 'inj_mass_rate_prev_mass'
    return_type = 'object'

class inj_mass_rate_prev_time(Real):
    """
    'inj_mass_rate_prev_time' child.
    """
    _version = '231'
    fluent_name = 'inj-mass-rate-prev-time'
    _python_name = 'inj_mass_rate_prev_time'
    return_type = 'object'

class show_unsteady_rate(Boolean):
    """
    'show_unsteady_rate' child.
    """
    _version = '231'
    fluent_name = 'show-unsteady-rate?'
    _python_name = 'show_unsteady_rate'
    return_type = 'object'

class per_injection(Boolean):
    """
    'per_injection' child.
    """
    _version = '231'
    fluent_name = 'per-injection?'
    _python_name = 'per_injection'
    return_type = 'object'

class injection_list(StringList, AllowedValuesMixin):
    """
    'injection_list' child.
    """
    _version = '231'
    fluent_name = 'injection-list'
    _python_name = 'injection_list'
    return_type = 'object'

class injection_child(Group):
    """
    'child_object_type' of injection.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'injection_child'
    child_names = ['report_type', 'user_specified_origin_and_axis', 'origin', 'axis', 'mass_criterion', 'physics', 'boundary_zones_names', 'boundary_zones', 'retain_instantaneous_values', 'inj_mass_rate_last_tstp', 'inj_mass_rate_last_flow', 'inj_mass_rate_prev_mass', 'inj_mass_rate_prev_time', 'show_unsteady_rate', 'old_props', 'average_over', 'per_injection', 'injection_list']
    _child_classes = dict(
        report_type=report_type,
        user_specified_origin_and_axis=user_specified_origin_and_axis,
        origin=origin_1,
        axis=axis_1,
        mass_criterion=mass_criterion,
        physics=physics,
        boundary_zones_names=boundary_zones_names,
        boundary_zones=boundary_zones_1,
        retain_instantaneous_values=retain_instantaneous_values,
        inj_mass_rate_last_tstp=inj_mass_rate_last_tstp,
        inj_mass_rate_last_flow=inj_mass_rate_last_flow,
        inj_mass_rate_prev_mass=inj_mass_rate_prev_mass,
        inj_mass_rate_prev_time=inj_mass_rate_prev_time,
        show_unsteady_rate=show_unsteady_rate,
        old_props=old_props,
        average_over=average_over,
        per_injection=per_injection,
        injection_list=injection_list,
    )
    return_type = 'object'

class injection(NamedObject[injection_child], CreatableNamedObjectMixinOld[injection_child]):
    """
    'injection' child.
    """
    _version = '231'
    fluent_name = 'injection'
    _python_name = 'injection'
    child_object_type = injection_child
    return_type = 'object'

class input_params(StringList, AllowedValuesMixin):
    """
    'input_params' child.
    """
    _version = '231'
    fluent_name = 'input-params'
    _python_name = 'input_params'
    return_type = 'object'

class function_name(String, AllowedValuesMixin):
    """
    'function_name' child.
    """
    _version = '231'
    fluent_name = 'function-name'
    _python_name = 'function_name'
    return_type = 'object'

class user_defined_1_child(Group):
    """
    'child_object_type' of user_defined.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'user_defined_child'
    child_names = ['retain_instantaneous_values', 'input_params', 'function_name', 'average_over', 'old_props']
    _child_classes = dict(
        retain_instantaneous_values=retain_instantaneous_values,
        input_params=input_params,
        function_name=function_name,
        average_over=average_over,
        old_props=old_props,
    )
    return_type = 'object'

class user_defined_1(NamedObject[user_defined_1_child], CreatableNamedObjectMixinOld[user_defined_1_child]):
    """
    'user_defined' child.
    """
    _version = '231'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'
    child_object_type = user_defined_1_child
    return_type = 'object'

class realcomponent(Boolean):
    """
    'realcomponent' child.
    """
    _version = '231'
    fluent_name = 'realcomponent?'
    _python_name = 'realcomponent'
    return_type = 'object'

class nodal_diameters(StringList, AllowedValuesMixin):
    """
    'nodal_diameters' child.
    """
    _version = '231'
    fluent_name = 'nodal-diameters'
    _python_name = 'nodal_diameters'
    return_type = 'object'

class normalization(Real):
    """
    'normalization' child.
    """
    _version = '231'
    fluent_name = 'normalization'
    _python_name = 'normalization'
    return_type = 'object'

class integrate_over(Integer):
    """
    'integrate_over' child.
    """
    _version = '231'
    fluent_name = 'integrate-over'
    _python_name = 'integrate_over'
    return_type = 'object'

class aeromechanics_child(Group):
    """
    'child_object_type' of aeromechanics.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'aeromechanics_child'
    child_names = ['report_type', 'realcomponent', 'nodal_diameters', 'normalization', 'integrate_over', 'average_over', 'per_zone', 'old_props', 'thread_names', 'thread_ids']
    _child_classes = dict(
        report_type=report_type,
        realcomponent=realcomponent,
        nodal_diameters=nodal_diameters,
        normalization=normalization,
        integrate_over=integrate_over,
        average_over=average_over,
        per_zone=per_zone,
        old_props=old_props,
        thread_names=thread_names,
        thread_ids=thread_ids,
    )
    return_type = 'object'

class aeromechanics(NamedObject[aeromechanics_child], CreatableNamedObjectMixinOld[aeromechanics_child]):
    """
    'aeromechanics' child.
    """
    _version = '231'
    fluent_name = 'aeromechanics'
    _python_name = 'aeromechanics'
    child_object_type = aeromechanics_child
    return_type = 'object'

class icing_child(Group):
    """
    'child_object_type' of icing.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'icing_child'
    child_names = ['report_type', 'old_props']
    _child_classes = dict(
        report_type=report_type,
        old_props=old_props,
    )
    return_type = 'object'

class icing(NamedObject[icing_child], CreatableNamedObjectMixinOld[icing_child]):
    """
    'icing' child.
    """
    _version = '231'
    fluent_name = 'icing'
    _python_name = 'icing'
    child_object_type = icing_child
    return_type = 'object'

class list_valid_report_names(String, AllowedValuesMixin):
    """
    'list_valid_report_names' child.
    """
    _version = '231'
    fluent_name = 'list-valid-report-names'
    _python_name = 'list_valid_report_names'
    return_type = 'object'

class define(String, AllowedValuesMixin):
    """
    'define' child.
    """
    _version = '231'
    fluent_name = 'define'
    _python_name = 'define'
    return_type = 'object'

class expr_value(Real):
    """
    'expr_value' child.
    """
    _version = '231'
    fluent_name = 'expr-value'
    _python_name = 'expr_value'
    return_type = 'object'

class expression_1_child(Group):
    """
    'child_object_type' of expression.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'expression_child'
    child_names = ['list_valid_report_names', 'define', 'expr_value', 'average_over', 'old_props']
    _child_classes = dict(
        list_valid_report_names=list_valid_report_names,
        define=define,
        expr_value=expr_value,
        average_over=average_over,
        old_props=old_props,
    )
    return_type = 'object'

class expression_1(NamedObject[expression_1_child], CreatableNamedObjectMixinOld[expression_1_child]):
    """
    'expression' child.
    """
    _version = '231'
    fluent_name = 'expression'
    _python_name = 'expression'
    child_object_type = expression_1_child
    return_type = 'object'

class single_val_expression_child(Group):
    """
    'child_object_type' of single_val_expression.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'single_val_expression_child'
    child_names = ['retain_instantaneous_values', 'list_valid_report_names', 'define', 'average_over', 'old_props']
    _child_classes = dict(
        retain_instantaneous_values=retain_instantaneous_values,
        list_valid_report_names=list_valid_report_names,
        define=define,
        average_over=average_over,
        old_props=old_props,
    )
    return_type = 'object'

class single_val_expression(NamedObject[single_val_expression_child], CreatableNamedObjectMixinOld[single_val_expression_child]):
    """
    'single_val_expression' child.
    """
    _version = '231'
    fluent_name = 'single-val-expression'
    _python_name = 'single_val_expression'
    child_object_type = single_val_expression_child
    return_type = 'object'

class custom_child(Group):
    """
    'child_object_type' of custom.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'custom_child'
    return_type = 'object'

class custom(NamedObject[custom_child], CreatableNamedObjectMixinOld[custom_child]):
    """
    'custom' child.
    """
    _version = '231'
    fluent_name = 'custom'
    _python_name = 'custom'
    child_object_type = custom_child
    return_type = 'object'

class report_defs(StringList, AllowedValuesMixin):
    """
    'report_defs' child.
    """
    _version = '231'
    fluent_name = 'report-defs'
    _python_name = 'report_defs'
    return_type = 'object'

class compute_1(Command):
    """
    'compute' command.
    """
    _version = '231'
    fluent_name = 'compute'
    _python_name = 'compute'
    argument_names = ['report_defs']
    _child_classes = dict(
        report_defs=report_defs,
    )
    return_type = 'object'

class copy_from(String, AllowedValuesMixin):
    """
    'copy_from' child.
    """
    _version = '231'
    fluent_name = 'copy-from'
    _python_name = 'copy_from'
    return_type = 'object'

class copy_to(String):
    """
    'copy_to' child.
    """
    _version = '231'
    fluent_name = 'copy-to'
    _python_name = 'copy_to'
    return_type = 'object'

class copy_1(Command):
    """
    'copy' command.
    """
    _version = '231'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['copy_from', 'copy_to']
    _child_classes = dict(
        copy_from=copy_from,
        copy_to=copy_to,
    )
    return_type = 'object'

class list(Command):
    """
    'list' command.
    """
    _version = '231'
    fluent_name = 'list'
    _python_name = 'list'
    return_type = 'object'

class report_definitions(Group, _ChildNamedObjectAccessorMixin):
    """
    'report_definitions' child.
    """
    _version = '231'
    fluent_name = 'report-definitions'
    _python_name = 'report_definitions'
    child_names = ['mesh', 'surface', 'volume', 'force', 'lift', 'drag', 'moment', 'flux', 'injection', 'user_defined', 'aeromechanics', 'icing', 'expression', 'single_val_expression', 'custom']
    command_names = ['compute', 'copy', 'list']
    _child_classes = dict(
        mesh=mesh_1,
        surface=surface_1,
        volume=volume,
        force=force,
        lift=lift,
        drag=drag,
        moment=moment,
        flux=flux_1,
        injection=injection,
        user_defined=user_defined_1,
        aeromechanics=aeromechanics,
        icing=icing,
        expression=expression_1,
        single_val_expression=single_val_expression,
        custom=custom,
        compute=compute_1,
        copy=copy_1,
        list=list,
    )
    return_type = 'object'

class file_name_2(String, AllowedValuesMixin):
    """
    'file_name' child.
    """
    _version = '231'
    fluent_name = 'file-name'
    _python_name = 'file_name'
    return_type = 'object'

class frequency(Integer):
    """
    How often convergence checks are performed.
    """
    _version = '231'
    fluent_name = 'frequency'
    _python_name = 'frequency'
    return_type = 'object'

class flow_frequency(Real):
    """
    'flow_frequency' child.
    """
    _version = '231'
    fluent_name = 'flow-frequency'
    _python_name = 'flow_frequency'
    return_type = 'object'

class itr_index(String, AllowedValuesMixin):
    """
    'itr_index' child.
    """
    _version = '231'
    fluent_name = 'itr-index'
    _python_name = 'itr_index'
    return_type = 'object'

class run_index(String, AllowedValuesMixin):
    """
    'run_index' child.
    """
    _version = '231'
    fluent_name = 'run-index'
    _python_name = 'run_index'
    return_type = 'object'

class frequency_of(String, AllowedValuesMixin):
    """
    'frequency_of' child.
    """
    _version = '231'
    fluent_name = 'frequency-of'
    _python_name = 'frequency_of'
    return_type = 'object'

class print_1(Boolean):
    """
    'print' child.
    """
    _version = '231'
    fluent_name = 'print?'
    _python_name = 'print'
    return_type = 'object'

class active(Boolean):
    """
    'active' child.
    """
    _version = '231'
    fluent_name = 'active?'
    _python_name = 'active'
    return_type = 'object'

class write_instantaneous_values(Boolean):
    """
    'write_instantaneous_values' child.
    """
    _version = '231'
    fluent_name = 'write-instantaneous-values?'
    _python_name = 'write_instantaneous_values'
    return_type = 'object'

class report_files_child(Group):
    """
    'child_object_type' of report_files.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'report_files_child'
    child_names = ['name', 'old_props', 'file_name', 'frequency', 'flow_frequency', 'itr_index', 'run_index', 'frequency_of', 'report_defs', 'print', 'active', 'write_instantaneous_values']
    _child_classes = dict(
        name=name_1,
        old_props=old_props,
        file_name=file_name_2,
        frequency=frequency,
        flow_frequency=flow_frequency,
        itr_index=itr_index,
        run_index=run_index,
        frequency_of=frequency_of,
        report_defs=report_defs,
        print=print_1,
        active=active,
        write_instantaneous_values=write_instantaneous_values,
    )
    return_type = 'object'

class report_files(NamedObject[report_files_child], CreatableNamedObjectMixinOld[report_files_child]):
    """
    'report_files' child.
    """
    _version = '231'
    fluent_name = 'report-files'
    _python_name = 'report_files'
    child_object_type = report_files_child
    return_type = 'object'

class plot_window(Integer):
    """
    'plot_window' child.
    """
    _version = '231'
    fluent_name = 'plot-window'
    _python_name = 'plot_window'
    return_type = 'object'

class title(String, AllowedValuesMixin):
    """
    'title' child.
    """
    _version = '231'
    fluent_name = 'title'
    _python_name = 'title'
    return_type = 'object'

class x_label(String, AllowedValuesMixin):
    """
    'x_label' child.
    """
    _version = '231'
    fluent_name = 'x-label'
    _python_name = 'x_label'
    return_type = 'object'

class y_label(String, AllowedValuesMixin):
    """
    'y_label' child.
    """
    _version = '231'
    fluent_name = 'y-label'
    _python_name = 'y_label'
    return_type = 'object'

class plot_instantaneous_values(Boolean):
    """
    'plot_instantaneous_values' child.
    """
    _version = '231'
    fluent_name = 'plot-instantaneous-values?'
    _python_name = 'plot_instantaneous_values'
    return_type = 'object'

class report_plots_child(Group):
    """
    'child_object_type' of report_plots.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'report_plots_child'
    child_names = ['name', 'plot_window', 'old_props', 'frequency', 'flow_frequency', 'frequency_of', 'report_defs', 'print', 'title', 'x_label', 'y_label', 'active', 'plot_instantaneous_values']
    _child_classes = dict(
        name=name_1,
        plot_window=plot_window,
        old_props=old_props,
        frequency=frequency,
        flow_frequency=flow_frequency,
        frequency_of=frequency_of,
        report_defs=report_defs,
        print=print_1,
        title=title,
        x_label=x_label,
        y_label=y_label,
        active=active,
        plot_instantaneous_values=plot_instantaneous_values,
    )
    return_type = 'object'

class report_plots(NamedObject[report_plots_child], CreatableNamedObjectMixinOld[report_plots_child]):
    """
    'report_plots' child.
    """
    _version = '231'
    fluent_name = 'report-plots'
    _python_name = 'report_plots'
    child_object_type = report_plots_child
    return_type = 'object'

class previous_values_to_consider(Integer):
    """
    How often convergence checks are performed.
    """
    _version = '231'
    fluent_name = 'previous-values-to-consider'
    _python_name = 'previous_values_to_consider'
    return_type = 'object'

class initial_values_to_ignore(Integer):
    """
    'initial_values_to_ignore' child.
    """
    _version = '231'
    fluent_name = 'initial-values-to-ignore'
    _python_name = 'initial_values_to_ignore'
    return_type = 'object'

class iteration_at_creation_or_edit(Integer):
    """
    'iteration_at_creation_or_edit' child.
    """
    _version = '231'
    fluent_name = 'iteration-at-creation-or-edit'
    _python_name = 'iteration_at_creation_or_edit'
    return_type = 'object'

class stop_criterion(Real):
    """
    'stop_criterion' child.
    """
    _version = '231'
    fluent_name = 'stop-criterion'
    _python_name = 'stop_criterion'
    return_type = 'object'

class report_defs_1(String, AllowedValuesMixin):
    """
    'report_defs' child.
    """
    _version = '231'
    fluent_name = 'report-defs'
    _python_name = 'report_defs'
    return_type = 'object'

class plot(Boolean):
    """
    'plot' child.
    """
    _version = '231'
    fluent_name = 'plot?'
    _python_name = 'plot'
    return_type = 'object'

class cov(Boolean):
    """
    'cov' child.
    """
    _version = '231'
    fluent_name = 'cov?'
    _python_name = 'cov'
    return_type = 'object'

class previous_values(StringList, AllowedValuesMixin):
    """
    'previous_values' child.
    """
    _version = '231'
    fluent_name = 'previous-values'
    _python_name = 'previous_values'
    return_type = 'object'

class convergence_reports_child(Group):
    """
    'child_object_type' of convergence_reports.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'convergence_reports_child'
    child_names = ['name', 'old_props', 'previous_values_to_consider', 'initial_values_to_ignore', 'iteration_at_creation_or_edit', 'stop_criterion', 'report_defs', 'print', 'plot', 'cov', 'active', 'x_label', 'previous_values']
    _child_classes = dict(
        name=name_1,
        old_props=old_props,
        previous_values_to_consider=previous_values_to_consider,
        initial_values_to_ignore=initial_values_to_ignore,
        iteration_at_creation_or_edit=iteration_at_creation_or_edit,
        stop_criterion=stop_criterion,
        report_defs=report_defs_1,
        print=print_1,
        plot=plot,
        cov=cov,
        active=active,
        x_label=x_label,
        previous_values=previous_values,
    )
    return_type = 'object'

class convergence_reports(NamedObject[convergence_reports_child], CreatableNamedObjectMixinOld[convergence_reports_child]):
    """
    'convergence_reports' child.
    """
    _version = '231'
    fluent_name = 'convergence-reports'
    _python_name = 'convergence_reports'
    child_object_type = convergence_reports_child
    return_type = 'object'

class frequency_1(Integer):
    """
    'frequency' child.
    """
    _version = '231'
    fluent_name = 'frequency'
    _python_name = 'frequency'
    return_type = 'object'

class condition(String, AllowedValuesMixin):
    """
    'condition' child.
    """
    _version = '231'
    fluent_name = 'condition'
    _python_name = 'condition'
    return_type = 'object'

class check_for(String, AllowedValuesMixin):
    """
    'check_for' child.
    """
    _version = '231'
    fluent_name = 'check-for'
    _python_name = 'check_for'
    return_type = 'object'

class convergence_conditions(Group):
    """
    'convergence_conditions' child.
    """
    _version = '231'
    fluent_name = 'convergence-conditions'
    _python_name = 'convergence_conditions'
    child_names = ['convergence_reports', 'frequency', 'condition', 'check_for']
    _child_classes = dict(
        convergence_reports=convergence_reports,
        frequency=frequency_1,
        condition=condition,
        check_for=check_for,
    )
    return_type = 'object'

class monitor(Group):
    """
    'monitor' child.
    """
    _version = '231'
    fluent_name = 'monitor'
    _python_name = 'monitor'
    child_names = ['report_files', 'report_plots', 'convergence_conditions']
    _child_classes = dict(
        report_files=report_files,
        report_plots=report_plots,
        convergence_conditions=convergence_conditions,
    )
    return_type = 'object'

class python_name_1(String, AllowedValuesMixin):
    """
    'python_name' child.
    """
    _version = '231'
    fluent_name = 'python-name'
    _python_name = 'python_name'
    return_type = 'object'

class min_point(RealList):
    """
    'min_point' child.
    """
    _version = '231'
    fluent_name = 'min-point'
    _python_name = 'min_point'
    return_type = 'object'

class max_point(RealList):
    """
    'max_point' child.
    """
    _version = '231'
    fluent_name = 'max-point'
    _python_name = 'max_point'
    return_type = 'object'

class inside(Boolean):
    """
    'inside' child.
    """
    _version = '231'
    fluent_name = 'inside?'
    _python_name = 'inside'
    return_type = 'object'

class create_volume_surface(Boolean):
    """
    'create_volume_surface' child.
    """
    _version = '231'
    fluent_name = 'create-volume-surface'
    _python_name = 'create_volume_surface'
    return_type = 'object'

class hexahedron(Group):
    """
    'hexahedron' child.
    """
    _version = '231'
    fluent_name = 'hexahedron'
    _python_name = 'hexahedron'
    child_names = ['min_point', 'max_point', 'inside', 'create_volume_surface']
    _child_classes = dict(
        min_point=min_point,
        max_point=max_point,
        inside=inside,
        create_volume_surface=create_volume_surface,
    )
    return_type = 'object'

class center(RealList):
    """
    'center' child.
    """
    _version = '231'
    fluent_name = 'center'
    _python_name = 'center'
    return_type = 'object'

class radius(Real):
    """
    'radius' child.
    """
    _version = '231'
    fluent_name = 'radius'
    _python_name = 'radius'
    return_type = 'object'

class sphere(Group):
    """
    'sphere' child.
    """
    _version = '231'
    fluent_name = 'sphere'
    _python_name = 'sphere'
    child_names = ['center', 'radius', 'inside', 'create_volume_surface']
    _child_classes = dict(
        center=center,
        radius=radius,
        inside=inside,
        create_volume_surface=create_volume_surface,
    )
    return_type = 'object'

class axis_begin(RealList):
    """
    'axis_begin' child.
    """
    _version = '231'
    fluent_name = 'axis-begin'
    _python_name = 'axis_begin'
    return_type = 'object'

class axis_end(RealList):
    """
    'axis_end' child.
    """
    _version = '231'
    fluent_name = 'axis-end'
    _python_name = 'axis_end'
    return_type = 'object'

class cylinder(Group):
    """
    'cylinder' child.
    """
    _version = '231'
    fluent_name = 'cylinder'
    _python_name = 'cylinder'
    child_names = ['axis_begin', 'axis_end', 'radius', 'inside', 'create_volume_surface']
    _child_classes = dict(
        axis_begin=axis_begin,
        axis_end=axis_end,
        radius=radius,
        inside=inside,
        create_volume_surface=create_volume_surface,
    )
    return_type = 'object'

class cell_distance(Integer):
    """
    'cell_distance' child.
    """
    _version = '231'
    fluent_name = 'cell-distance'
    _python_name = 'cell_distance'
    return_type = 'object'

class normal_distance(Real):
    """
    'normal_distance' child.
    """
    _version = '231'
    fluent_name = 'normal-distance'
    _python_name = 'normal_distance'
    return_type = 'object'

class boundary_volume(Real):
    """
    'boundary_volume' child.
    """
    _version = '231'
    fluent_name = 'boundary-volume'
    _python_name = 'boundary_volume'
    return_type = 'object'

class volume_growth(Real):
    """
    'volume_growth' child.
    """
    _version = '231'
    fluent_name = 'volume-growth'
    _python_name = 'volume_growth'
    return_type = 'object'

class volume_distance(Group):
    """
    'volume_distance' child.
    """
    _version = '231'
    fluent_name = 'volume-distance'
    _python_name = 'volume_distance'
    child_names = ['boundary_volume', 'volume_growth']
    _child_classes = dict(
        boundary_volume=boundary_volume,
        volume_growth=volume_growth,
    )
    return_type = 'object'

class distance_option(Group):
    """
    'distance_option' child.
    """
    _version = '231'
    fluent_name = 'distance-option'
    _python_name = 'distance_option'
    child_names = ['option', 'cell_distance', 'normal_distance', 'volume_distance']
    _child_classes = dict(
        option=option_3,
        cell_distance=cell_distance,
        normal_distance=normal_distance,
        volume_distance=volume_distance,
    )
    return_type = 'object'

class boundary_list(StringList, AllowedValuesMixin):
    """
    'boundary_list' child.
    """
    _version = '231'
    fluent_name = 'boundary-list'
    _python_name = 'boundary_list'
    return_type = 'object'

class boundary(Group):
    """
    'boundary' child.
    """
    _version = '231'
    fluent_name = 'boundary'
    _python_name = 'boundary'
    child_names = ['distance_option', 'boundary_list', 'create_volume_surface']
    _child_classes = dict(
        distance_option=distance_option,
        boundary_list=boundary_list,
        create_volume_surface=create_volume_surface,
    )
    return_type = 'object'

class limiters(String, AllowedValuesMixin):
    """
    'limiters' child.
    """
    _version = '231'
    fluent_name = 'limiters'
    _python_name = 'limiters'
    return_type = 'object'

class min_max(Boolean):
    """
    'min_max' child.
    """
    _version = '231'
    fluent_name = 'min-max'
    _python_name = 'min_max'
    return_type = 'object'

class value1(Real):
    """
    'value1' child.
    """
    _version = '231'
    fluent_name = 'value1'
    _python_name = 'value1'
    return_type = 'object'

class value2(Real):
    """
    'value2' child.
    """
    _version = '231'
    fluent_name = 'value2'
    _python_name = 'value2'
    return_type = 'object'

class in_range(Group):
    """
    'in_range' child.
    """
    _version = '231'
    fluent_name = 'in-range'
    _python_name = 'in_range'
    child_names = ['value1', 'value2']
    _child_classes = dict(
        value1=value1,
        value2=value2,
    )
    return_type = 'object'

class except_in_range(Group):
    """
    'except_in_range' child.
    """
    _version = '231'
    fluent_name = 'except-in-range'
    _python_name = 'except_in_range'
    child_names = ['value1', 'value2']
    _child_classes = dict(
        value1=value1,
        value2=value2,
    )
    return_type = 'object'

class top_value_cells(Real):
    """
    'top_value_cells' child.
    """
    _version = '231'
    fluent_name = 'top-value-cells'
    _python_name = 'top_value_cells'
    return_type = 'object'

class low_value_cells(Real):
    """
    'low_value_cells' child.
    """
    _version = '231'
    fluent_name = 'low-value-cells'
    _python_name = 'low_value_cells'
    return_type = 'object'

class less_than(Real):
    """
    'less_than' child.
    """
    _version = '231'
    fluent_name = 'less-than'
    _python_name = 'less_than'
    return_type = 'object'

class more_than(Real):
    """
    'more_than' child.
    """
    _version = '231'
    fluent_name = 'more-than'
    _python_name = 'more_than'
    return_type = 'object'

class lower(Real):
    """
    'lower' child.
    """
    _version = '231'
    fluent_name = 'lower'
    _python_name = 'lower'
    return_type = 'object'

class upper(Real):
    """
    'upper' child.
    """
    _version = '231'
    fluent_name = 'upper'
    _python_name = 'upper'
    return_type = 'object'

class between_std_dev(Group):
    """
    'between_std_dev' child.
    """
    _version = '231'
    fluent_name = 'between-std-dev'
    _python_name = 'between_std_dev'
    child_names = ['lower', 'upper']
    _child_classes = dict(
        lower=lower,
        upper=upper,
    )
    return_type = 'object'

class outside_std_dev(Group):
    """
    'outside_std_dev' child.
    """
    _version = '231'
    fluent_name = 'outside-std-dev'
    _python_name = 'outside_std_dev'
    child_names = ['lower', 'upper']
    _child_classes = dict(
        lower=lower,
        upper=upper,
    )
    return_type = 'object'

class less_than_std_dev(Real):
    """
    'less_than_std_dev' child.
    """
    _version = '231'
    fluent_name = 'less-than-std-dev'
    _python_name = 'less_than_std_dev'
    return_type = 'object'

class more_than_std_dev(Real):
    """
    'more_than_std_dev' child.
    """
    _version = '231'
    fluent_name = 'more-than-std-dev'
    _python_name = 'more_than_std_dev'
    return_type = 'object'

class option_11(Group):
    """
    'option' child.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    child_names = ['option', 'min_max', 'in_range', 'except_in_range', 'top_value_cells', 'low_value_cells', 'less_than', 'more_than', 'between_std_dev', 'outside_std_dev', 'less_than_std_dev', 'more_than_std_dev']
    _child_classes = dict(
        option=option_3,
        min_max=min_max,
        in_range=in_range,
        except_in_range=except_in_range,
        top_value_cells=top_value_cells,
        low_value_cells=low_value_cells,
        less_than=less_than,
        more_than=more_than,
        between_std_dev=between_std_dev,
        outside_std_dev=outside_std_dev,
        less_than_std_dev=less_than_std_dev,
        more_than_std_dev=more_than_std_dev,
    )
    return_type = 'object'

class none_1(Boolean):
    """
    'none' child.
    """
    _version = '231'
    fluent_name = 'none'
    _python_name = 'none'
    return_type = 'object'

class scale_by_global_average(Boolean):
    """
    'scale_by_global_average' child.
    """
    _version = '231'
    fluent_name = 'scale-by-global-average'
    _python_name = 'scale_by_global_average'
    return_type = 'object'

class scale_by_zone_average(Boolean):
    """
    'scale_by_zone_average' child.
    """
    _version = '231'
    fluent_name = 'scale-by-zone-average'
    _python_name = 'scale_by_zone_average'
    return_type = 'object'

class scale_by_global_maximum(Boolean):
    """
    'scale_by_global_maximum' child.
    """
    _version = '231'
    fluent_name = 'scale-by-global-maximum'
    _python_name = 'scale_by_global_maximum'
    return_type = 'object'

class scale_by_zone_maximum(Boolean):
    """
    'scale_by_zone_maximum' child.
    """
    _version = '231'
    fluent_name = 'scale-by-zone-maximum'
    _python_name = 'scale_by_zone_maximum'
    return_type = 'object'

class scaling(Group):
    """
    'scaling' child.
    """
    _version = '231'
    fluent_name = 'scaling'
    _python_name = 'scaling'
    child_names = ['option', 'none', 'scale_by_global_average', 'scale_by_zone_average', 'scale_by_global_maximum', 'scale_by_zone_maximum']
    _child_classes = dict(
        option=option_3,
        none=none_1,
        scale_by_global_average=scale_by_global_average,
        scale_by_zone_average=scale_by_zone_average,
        scale_by_global_maximum=scale_by_global_maximum,
        scale_by_zone_maximum=scale_by_zone_maximum,
    )
    return_type = 'object'

class gradient_1(Boolean):
    """
    'gradient' child.
    """
    _version = '231'
    fluent_name = 'gradient'
    _python_name = 'gradient'
    return_type = 'object'

class curvature(Boolean):
    """
    'curvature' child.
    """
    _version = '231'
    fluent_name = 'curvature'
    _python_name = 'curvature'
    return_type = 'object'

class hessian(Boolean):
    """
    'hessian' child.
    """
    _version = '231'
    fluent_name = 'hessian'
    _python_name = 'hessian'
    return_type = 'object'

class derivative(Group):
    """
    'derivative' child.
    """
    _version = '231'
    fluent_name = 'derivative'
    _python_name = 'derivative'
    child_names = ['option', 'none', 'gradient', 'curvature', 'hessian']
    _child_classes = dict(
        option=option_3,
        none=none_1,
        gradient=gradient_1,
        curvature=curvature,
        hessian=hessian,
    )
    return_type = 'object'

class size_ratio(Real):
    """
    'size_ratio' child.
    """
    _version = '231'
    fluent_name = 'size-ratio'
    _python_name = 'size_ratio'
    return_type = 'object'

class field_value(Group):
    """
    'field_value' child.
    """
    _version = '231'
    fluent_name = 'field-value'
    _python_name = 'field_value'
    child_names = ['field', 'option', 'scaling', 'derivative', 'size_ratio', 'create_volume_surface']
    _child_classes = dict(
        field=field,
        option=option_11,
        scaling=scaling,
        derivative=derivative,
        size_ratio=size_ratio,
        create_volume_surface=create_volume_surface,
    )
    return_type = 'object'

class equation_for_residual(String, AllowedValuesMixin):
    """
    'equation_for_residual' child.
    """
    _version = '231'
    fluent_name = 'equation-for-residual'
    _python_name = 'equation_for_residual'
    return_type = 'object'

class threshold(Real):
    """
    'threshold' child.
    """
    _version = '231'
    fluent_name = 'threshold'
    _python_name = 'threshold'
    return_type = 'object'

class residual(Group):
    """
    'residual' child.
    """
    _version = '231'
    fluent_name = 'residual'
    _python_name = 'residual'
    child_names = ['equation_for_residual', 'threshold']
    _child_classes = dict(
        equation_for_residual=equation_for_residual,
        threshold=threshold,
    )
    return_type = 'object'

class volume_magnitude(Real):
    """
    'volume_magnitude' child.
    """
    _version = '231'
    fluent_name = 'volume-magnitude'
    _python_name = 'volume_magnitude'
    return_type = 'object'

class volume_change(Real):
    """
    'volume_change' child.
    """
    _version = '231'
    fluent_name = 'volume-change'
    _python_name = 'volume_change'
    return_type = 'object'

class volume_1(Group):
    """
    'volume' child.
    """
    _version = '231'
    fluent_name = 'volume'
    _python_name = 'volume'
    child_names = ['option', 'volume_magnitude', 'volume_change']
    _child_classes = dict(
        option=option_3,
        volume_magnitude=volume_magnitude,
        volume_change=volume_change,
    )
    return_type = 'object'

class yplus_1(Boolean):
    """
    'yplus' child.
    """
    _version = '231'
    fluent_name = 'yplus'
    _python_name = 'yplus'
    return_type = 'object'

class ystar(Boolean):
    """
    'ystar' child.
    """
    _version = '231'
    fluent_name = 'ystar'
    _python_name = 'ystar'
    return_type = 'object'

class option_12(Group):
    """
    'option' child.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    child_names = ['option', 'yplus', 'ystar']
    _child_classes = dict(
        option=option_3,
        yplus=yplus_1,
        ystar=ystar,
    )
    return_type = 'object'

class min_allowed(Real):
    """
    'min_allowed' child.
    """
    _version = '231'
    fluent_name = 'min-allowed'
    _python_name = 'min_allowed'
    return_type = 'object'

class max_allowed(Real):
    """
    'max_allowed' child.
    """
    _version = '231'
    fluent_name = 'max-allowed'
    _python_name = 'max_allowed'
    return_type = 'object'

class wall_zones(StringList, AllowedValuesMixin):
    """
    'wall_zones' child.
    """
    _version = '231'
    fluent_name = 'wall-zones'
    _python_name = 'wall_zones'
    return_type = 'object'

class phase_27(Integer):
    """
    'phase' child.
    """
    _version = '231'
    fluent_name = 'phase'
    _python_name = 'phase'
    return_type = 'object'

class yplus_star(Group):
    """
    'yplus_star' child.
    """
    _version = '231'
    fluent_name = 'yplus-star'
    _python_name = 'yplus_star'
    child_names = ['option', 'min_allowed', 'max_allowed', 'wall_zones', 'phase']
    _child_classes = dict(
        option=option_12,
        min_allowed=min_allowed,
        max_allowed=max_allowed,
        wall_zones=wall_zones,
        phase=phase_27,
    )
    return_type = 'object'

class yplus_ystar(Group):
    """
    'yplus_ystar' child.
    """
    _version = '231'
    fluent_name = 'yplus-ystar'
    _python_name = 'yplus_ystar'
    child_names = ['option', 'min_allowed', 'max_allowed', 'wall_zones', 'phase']
    _child_classes = dict(
        option=option_12,
        min_allowed=min_allowed,
        max_allowed=max_allowed,
        wall_zones=wall_zones,
        phase=phase_27,
    )
    return_type = 'object'

class type_2(Group):
    """
    'type' child.
    """
    _version = '231'
    fluent_name = 'type'
    _python_name = 'type'
    child_names = ['option', 'hexahedron', 'sphere', 'cylinder', 'boundary', 'limiters', 'field_value', 'residual', 'volume', 'yplus_star', 'yplus_ystar']
    _child_classes = dict(
        option=option_3,
        hexahedron=hexahedron,
        sphere=sphere,
        cylinder=cylinder,
        boundary=boundary,
        limiters=limiters,
        field_value=field_value,
        residual=residual,
        volume=volume_1,
        yplus_star=yplus_star,
        yplus_ystar=yplus_ystar,
    )
    return_type = 'object'

class draw_mesh(Boolean):
    """
    'draw_mesh' child.
    """
    _version = '231'
    fluent_name = 'draw-mesh?'
    _python_name = 'draw_mesh'
    return_type = 'object'

class filled(Boolean):
    """
    'filled' child.
    """
    _version = '231'
    fluent_name = 'filled?'
    _python_name = 'filled'
    return_type = 'object'

class marker(Boolean):
    """
    'marker' child.
    """
    _version = '231'
    fluent_name = 'marker?'
    _python_name = 'marker'
    return_type = 'object'

class marker_symbol(String, AllowedValuesMixin):
    """
    'marker_symbol' child.
    """
    _version = '231'
    fluent_name = 'marker-symbol'
    _python_name = 'marker_symbol'
    return_type = 'object'

class marker_size(Real):
    """
    'marker_size' child.
    """
    _version = '231'
    fluent_name = 'marker-size'
    _python_name = 'marker_size'
    return_type = 'object'

class wireframe(Boolean):
    """
    'wireframe' child.
    """
    _version = '231'
    fluent_name = 'wireframe?'
    _python_name = 'wireframe'
    return_type = 'object'

class color(String, AllowedValuesMixin):
    """
    'color' child.
    """
    _version = '231'
    fluent_name = 'color'
    _python_name = 'color'
    return_type = 'object'

class display_options(Group):
    """
    'display_options' child.
    """
    _version = '231'
    fluent_name = 'display-options'
    _python_name = 'display_options'
    child_names = ['draw_mesh', 'filled', 'marker', 'marker_symbol', 'marker_size', 'wireframe', 'color']
    _child_classes = dict(
        draw_mesh=draw_mesh,
        filled=filled,
        marker=marker,
        marker_symbol=marker_symbol,
        marker_size=marker_size,
        wireframe=wireframe,
        color=color,
    )
    return_type = 'object'

class cell_registers_child(Group):
    """
    'child_object_type' of cell_registers.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'cell_registers_child'
    child_names = ['name', 'python_name_1', 'type', 'display_options']
    _child_classes = dict(
        name=name_1,
        python_name_1=python_name_1,
        type=type_2,
        display_options=display_options,
    )
    return_type = 'object'

class cell_registers(NamedObject[cell_registers_child], CreatableNamedObjectMixinOld[cell_registers_child]):
    """
    'cell_registers' child.
    """
    _version = '231'
    fluent_name = 'cell-registers'
    _python_name = 'cell_registers'
    child_object_type = cell_registers_child
    return_type = 'object'

class fmg_initialize(Boolean):
    """
    Initialize using the full-multigrid initialization (FMG).
    """
    _version = '231'
    fluent_name = 'fmg-initialize'
    _python_name = 'fmg_initialize'
    return_type = 'object'

class enabled_1(Boolean):
    """
    Enable/disable localized initialization of turbulent flow variables.
    """
    _version = '231'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class turbulent_intensity(Real):
    """
    Turbulent intensity.
    """
    _version = '231'
    fluent_name = 'turbulent-intensity'
    _python_name = 'turbulent_intensity'
    return_type = 'object'

class turbulent_viscosity_ratio(Real):
    """
    Turbulent viscosity ratio.
    """
    _version = '231'
    fluent_name = 'turbulent-viscosity-ratio'
    _python_name = 'turbulent_viscosity_ratio'
    return_type = 'object'

class localized_turb_init(Group):
    """
    Localized initialization of turbulent flow variables for VOF/Mixture multiphase flow models.
    """
    _version = '231'
    fluent_name = 'localized-turb-init'
    _python_name = 'localized_turb_init'
    child_names = ['enabled', 'turbulent_intensity', 'turbulent_viscosity_ratio']
    _child_classes = dict(
        enabled=enabled_1,
        turbulent_intensity=turbulent_intensity,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio,
    )
    return_type = 'object'

class reference_frame_2(String, AllowedValuesMixin):
    """
    Reference frame absolute or relative.
    """
    _version = '231'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'
    return_type = 'object'

class viscous_terms(Boolean):
    """
    Enable viscous terms during FMG initialization.
    """
    _version = '231'
    fluent_name = 'viscous-terms?'
    _python_name = 'viscous_terms'
    return_type = 'object'

class species_reactions(Boolean):
    """
    Enable species volumetric reactions during FMG initialization.
    """
    _version = '231'
    fluent_name = 'species-reactions?'
    _python_name = 'species_reactions'
    return_type = 'object'

class set_turbulent_viscosity_ratio(Real):
    """
    Turbulent viscosity ratio used during FMG initialization.
    """
    _version = '231'
    fluent_name = 'set-turbulent-viscosity-ratio'
    _python_name = 'set_turbulent_viscosity_ratio'
    return_type = 'object'

class fmg_options(Group):
    """
    The full-multigrid option object.
    """
    _version = '231'
    fluent_name = 'fmg-options'
    _python_name = 'fmg_options'
    child_names = ['viscous_terms', 'species_reactions', 'set_turbulent_viscosity_ratio']
    _child_classes = dict(
        viscous_terms=viscous_terms,
        species_reactions=species_reactions,
        set_turbulent_viscosity_ratio=set_turbulent_viscosity_ratio,
    )
    return_type = 'object'

class iter_count_1(Integer):
    """
    The number of iterations.
    """
    _version = '231'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'
    return_type = 'object'

class explicit_urf(RealList):
    """
    Explicit URF for scalar equations.
    """
    _version = '231'
    fluent_name = 'explicit-urf'
    _python_name = 'explicit_urf'
    return_type = 'object'

class initial_pressure(Boolean):
    """
    Enable/Disable specified initial pressure on inlets.
    """
    _version = '231'
    fluent_name = 'initial-pressure?'
    _python_name = 'initial_pressure'
    return_type = 'object'

class external_aero(Boolean):
    """
    Enable/Disable external-aero favorable settings.
    """
    _version = '231'
    fluent_name = 'external-aero?'
    _python_name = 'external_aero'
    return_type = 'object'

class const_velocity(Boolean):
    """
    Enable/Disable constant velocity magnitude.
    """
    _version = '231'
    fluent_name = 'const-velocity?'
    _python_name = 'const_velocity'
    return_type = 'object'

class general_settings_1(Group):
    """
    The general settings object.
    """
    _version = '231'
    fluent_name = 'general-settings'
    _python_name = 'general_settings'
    child_names = ['iter_count', 'explicit_urf', 'reference_frame', 'initial_pressure', 'external_aero', 'const_velocity']
    _child_classes = dict(
        iter_count=iter_count_1,
        explicit_urf=explicit_urf,
        reference_frame=reference_frame_2,
        initial_pressure=initial_pressure,
        external_aero=external_aero,
        const_velocity=const_velocity,
    )
    return_type = 'object'

class averaged_turbulent_parameters(Boolean):
    """
    Enable/Disable averaged turbulent parameters.
    """
    _version = '231'
    fluent_name = 'averaged-turbulent-parameters?'
    _python_name = 'averaged_turbulent_parameters'
    return_type = 'object'

class viscosity_ratio_1(Real):
    """
    Viscosity ratio.
    """
    _version = '231'
    fluent_name = 'viscosity-ratio'
    _python_name = 'viscosity_ratio'
    return_type = 'object'

class turbulent_setting(Group):
    """
    The turbulent settings object.
    """
    _version = '231'
    fluent_name = 'turbulent-setting'
    _python_name = 'turbulent_setting'
    child_names = ['averaged_turbulent_parameters', 'turbulent_intensity', 'viscosity_ratio']
    _child_classes = dict(
        averaged_turbulent_parameters=averaged_turbulent_parameters,
        turbulent_intensity=turbulent_intensity,
        viscosity_ratio=viscosity_ratio_1,
    )
    return_type = 'object'

class user_specified_species(Boolean):
    """
    Enable/Disable species parameters.
    """
    _version = '231'
    fluent_name = 'user-specified-species?'
    _python_name = 'user_specified_species'
    return_type = 'object'

class species_1_child_child(Real):
    """
    'child_object_type' of child_object_type.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'species_child_child'
    return_type = 'object'

class species_1_child(NamedObject[species_1_child_child], _NonCreatableNamedObjectMixin[species_1_child_child]):
    """
    'child_object_type' of species.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'species_child'
    child_object_type = species_1_child_child
    return_type = 'object'

class species_1(NamedObject[species_1_child], _NonCreatableNamedObjectMixin[species_1_child]):
    """
    'species' child.
    """
    _version = '231'
    fluent_name = 'species'
    _python_name = 'species'
    child_object_type = species_1_child
    return_type = 'object'

class species_setting(Group):
    """
    The species settings object.
    """
    _version = '231'
    fluent_name = 'species-setting'
    _python_name = 'species_setting'
    child_names = ['user_specified_species', 'species']
    _child_classes = dict(
        user_specified_species=user_specified_species,
        species=species_1,
    )
    return_type = 'object'

class hybrid_init_options(Group):
    """
    The settings for hybrid initialization method.
    """
    _version = '231'
    fluent_name = 'hybrid-init-options'
    _python_name = 'hybrid_init_options'
    child_names = ['general_settings', 'turbulent_setting', 'species_setting']
    _child_classes = dict(
        general_settings=general_settings_1,
        turbulent_setting=turbulent_setting,
        species_setting=species_setting,
    )
    return_type = 'object'

class patch_reconstructed_interface(Boolean):
    """
    Enable/Disable patch reconstructed interface.
    """
    _version = '231'
    fluent_name = 'patch-reconstructed-interface?'
    _python_name = 'patch_reconstructed_interface'
    return_type = 'object'

class use_volumetric_smoothing(Boolean):
    """
    Enable/Disable volumetric smoothing.
    """
    _version = '231'
    fluent_name = 'use-volumetric-smoothing?'
    _python_name = 'use_volumetric_smoothing'
    return_type = 'object'

class smoothing_relaxation_factor(Real):
    """
    Smoothing relaxation factor (min : 0, max : 1).
    """
    _version = '231'
    fluent_name = 'smoothing-relaxation-factor'
    _python_name = 'smoothing_relaxation_factor'
    return_type = 'object'

class execute_smoothing(Command):
    """
    Execute volumetric smoothing for volume fraction.
    """
    _version = '231'
    fluent_name = 'execute-smoothing'
    _python_name = 'execute_smoothing'
    return_type = 'object'

class vof_smooth_options(Group):
    """
    The vof patch/smooth options object.
    """
    _version = '231'
    fluent_name = 'vof-smooth-options'
    _python_name = 'vof_smooth_options'
    child_names = ['patch_reconstructed_interface', 'use_volumetric_smoothing', 'smoothing_relaxation_factor']
    command_names = ['execute_smoothing']
    _child_classes = dict(
        patch_reconstructed_interface=patch_reconstructed_interface,
        use_volumetric_smoothing=use_volumetric_smoothing,
        smoothing_relaxation_factor=smoothing_relaxation_factor,
        execute_smoothing=execute_smoothing,
    )
    return_type = 'object'

class domain(String, AllowedValuesMixin):
    """
    'domain' child.
    """
    _version = '231'
    fluent_name = 'domain'
    _python_name = 'domain'
    return_type = 'object'

class cell_zones_1(StringList):
    """
    'cell_zones' child.
    """
    _version = '231'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'
    return_type = 'object'

class register_id(StringList):
    """
    'register_id' child.
    """
    _version = '231'
    fluent_name = 'register-id'
    _python_name = 'register_id'
    return_type = 'object'

class variable(String, AllowedValuesMixin):
    """
    'variable' child.
    """
    _version = '231'
    fluent_name = 'variable'
    _python_name = 'variable'
    return_type = 'object'

class patch_velocity(Boolean):
    """
    'patch_velocity' child.
    """
    _version = '231'
    fluent_name = 'patch-velocity?'
    _python_name = 'patch_velocity'
    return_type = 'object'

class use_custom_field_function(Boolean):
    """
    'use_custom_field_function' child.
    """
    _version = '231'
    fluent_name = 'use-custom-field-function?'
    _python_name = 'use_custom_field_function'
    return_type = 'object'

class custom_field_function_name(String, AllowedValuesMixin):
    """
    'custom_field_function_name' child.
    """
    _version = '231'
    fluent_name = 'custom-field-function-name'
    _python_name = 'custom_field_function_name'
    return_type = 'object'

class calculate_patch(Command):
    """
    Patch a value for a flow variable in the domain.
    
    Parameters
    ----------
        domain : str
            'domain' child.
        cell_zones : List
            'cell_zones' child.
        register_id : List
            'register_id' child.
        variable : str
            'variable' child.
        patch_velocity : bool
            'patch_velocity' child.
        use_custom_field_function : bool
            'use_custom_field_function' child.
        custom_field_function_name : str
            'custom_field_function_name' child.
        value : real
            'value' child.
    """
    _version = '231'
    fluent_name = 'calculate-patch'
    _python_name = 'calculate_patch'
    argument_names = ['domain', 'cell_zones', 'register_id', 'variable', 'patch_velocity', 'use_custom_field_function', 'custom_field_function_name', 'value']
    _child_classes = dict(
        domain=domain,
        cell_zones=cell_zones_1,
        register_id=register_id,
        variable=variable,
        patch_velocity=patch_velocity,
        use_custom_field_function=use_custom_field_function,
        custom_field_function_name=custom_field_function_name,
        value=value,
    )
    return_type = 'object'

class patch(Group):
    """
    'patch' child.
    """
    _version = '231'
    fluent_name = 'patch'
    _python_name = 'patch'
    child_names = ['vof_smooth_options']
    command_names = ['calculate_patch']
    _child_classes = dict(
        vof_smooth_options=vof_smooth_options,
        calculate_patch=calculate_patch,
    )
    return_type = 'object'

class set_defaults_child(Real):
    """
    'child_object_type' of set_defaults.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'set_defaults_child'
    return_type = 'object'

class set_defaults(NamedObject[set_defaults_child], _NonCreatableNamedObjectMixin[set_defaults_child]):
    """
    'set_defaults' child.
    """
    _version = '231'
    fluent_name = 'set-defaults'
    _python_name = 'set_defaults'
    child_object_type = set_defaults_child
    return_type = 'object'

class boundary_thread(Integer):
    """
    'boundary_thread' child.
    """
    _version = '231'
    fluent_name = 'boundary-thread'
    _python_name = 'boundary_thread'
    return_type = 'object'

class flat_init(Boolean):
    """
    'flat_init' child.
    """
    _version = '231'
    fluent_name = 'flat-init?'
    _python_name = 'flat_init'
    return_type = 'object'

class wavy_surface_init(Boolean):
    """
    'wavy_surface_init' child.
    """
    _version = '231'
    fluent_name = 'wavy-surface-init?'
    _python_name = 'wavy_surface_init'
    return_type = 'object'

class open_channel_auto_init(Group):
    """
    Open channel automatic initialization.
    """
    _version = '231'
    fluent_name = 'open-channel-auto-init'
    _python_name = 'open_channel_auto_init'
    child_names = ['boundary_thread', 'flat_init', 'wavy_surface_init']
    _child_classes = dict(
        boundary_thread=boundary_thread,
        flat_init=flat_init,
        wavy_surface_init=wavy_surface_init,
    )
    return_type = 'object'

class fmg_courant_number(Real):
    """
    'fmg_courant_number' child.
    """
    _version = '231'
    fluent_name = 'fmg-courant-number'
    _python_name = 'fmg_courant_number'
    return_type = 'object'

class enable_fmg_verbose(Boolean):
    """
    'enable_fmg_verbose' child.
    """
    _version = '231'
    fluent_name = 'enable-fmg-verbose?'
    _python_name = 'enable_fmg_verbose'
    return_type = 'object'

class multi_level_grid(Integer):
    """
    'multi_level_grid' child.
    """
    _version = '231'
    fluent_name = 'multi-level-grid'
    _python_name = 'multi_level_grid'
    return_type = 'object'

class residual_reduction_level(RealList):
    """
    'residual_reduction_level' child.
    """
    _version = '231'
    fluent_name = 'residual-reduction-level'
    _python_name = 'residual_reduction_level'
    return_type = 'object'

class cycle_count(RealList):
    """
    'cycle_count' child.
    """
    _version = '231'
    fluent_name = 'cycle-count'
    _python_name = 'cycle_count'
    return_type = 'object'

class customize_fmg_initialization(Command):
    """
    'customize_fmg_initialization' command.
    """
    _version = '231'
    fluent_name = 'customize-fmg-initialization'
    _python_name = 'customize_fmg_initialization'
    argument_names = ['multi_level_grid', 'residual_reduction_level', 'cycle_count']
    _child_classes = dict(
        multi_level_grid=multi_level_grid,
        residual_reduction_level=residual_reduction_level,
        cycle_count=cycle_count,
    )
    return_type = 'object'

class fmg_initialization(Group):
    """
    The set full-multigrid for initialization object.
    """
    _version = '231'
    fluent_name = 'fmg-initialization'
    _python_name = 'fmg_initialization'
    child_names = ['fmg_courant_number', 'enable_fmg_verbose']
    command_names = ['customize_fmg_initialization']
    _child_classes = dict(
        fmg_courant_number=fmg_courant_number,
        enable_fmg_verbose=enable_fmg_verbose,
        customize_fmg_initialization=customize_fmg_initialization,
    )
    return_type = 'object'

class initialization_type(String, AllowedValuesMixin):
    """
    'initialization_type' child.
    """
    _version = '231'
    fluent_name = 'initialization-type'
    _python_name = 'initialization_type'
    return_type = 'object'

class standard_initialize(Command):
    """
    Initialize the flow field with the current default values.
    """
    _version = '231'
    fluent_name = 'standard-initialize'
    _python_name = 'standard_initialize'
    return_type = 'object'

class hybrid_initialize(Command):
    """
    Initialize using the hybrid initialization method.
    """
    _version = '231'
    fluent_name = 'hybrid-initialize'
    _python_name = 'hybrid_initialize'
    return_type = 'object'

class init_type(String, AllowedValuesMixin):
    """
    'init_type' child.
    """
    _version = '231'
    fluent_name = 'init-type'
    _python_name = 'init_type'
    return_type = 'object'

class initialize(Command):
    """
    'initialize' command.
    """
    _version = '231'
    fluent_name = 'initialize'
    _python_name = 'initialize'
    argument_names = ['init_type']
    _child_classes = dict(
        init_type=init_type,
    )
    return_type = 'object'

class dpm_reset(Command):
    """
    Reset discrete phase source terms to zero.
    """
    _version = '231'
    fluent_name = 'dpm-reset'
    _python_name = 'dpm_reset'
    return_type = 'object'

class lwf_reset(Command):
    """
    Delete wall film particles and initialize wall film variables to zero.
    """
    _version = '231'
    fluent_name = 'lwf-reset'
    _python_name = 'lwf_reset'
    return_type = 'object'

class init_flow_statistics(Command):
    """
    Initialize statistics.
    """
    _version = '231'
    fluent_name = 'init-flow-statistics'
    _python_name = 'init_flow_statistics'
    return_type = 'object'

class set_ramping_length(Boolean):
    """
    Enable/Disable ramping length and initialize acoustics.
    """
    _version = '231'
    fluent_name = 'set-ramping-length?'
    _python_name = 'set_ramping_length'
    return_type = 'object'

class time_step_count(Integer):
    """
    Number of timesteps for ramping of sources.
    """
    _version = '231'
    fluent_name = 'time-step-count'
    _python_name = 'time_step_count'
    return_type = 'object'

class init_acoustics_options(Command):
    """
    'init_acoustics_options' command.
    """
    _version = '231'
    fluent_name = 'init-acoustics-options'
    _python_name = 'init_acoustics_options'
    argument_names = ['set_ramping_length', 'time_step_count']
    _child_classes = dict(
        set_ramping_length=set_ramping_length,
        time_step_count=time_step_count,
    )
    return_type = 'object'

class list_defaults(Command):
    """
    List default values.
    """
    _version = '231'
    fluent_name = 'list-defaults'
    _python_name = 'list_defaults'
    return_type = 'object'

class init_turb_vel_fluctuations(Command):
    """
    Initialize turbulent velocity fluctuations.
    """
    _version = '231'
    fluent_name = 'init-turb-vel-fluctuations'
    _python_name = 'init_turb_vel_fluctuations'
    return_type = 'object'

class show_iterations_sampled(Command):
    """
    'show_iterations_sampled' command.
    """
    _version = '231'
    fluent_name = 'show-iterations-sampled'
    _python_name = 'show_iterations_sampled'
    return_type = 'object'

class show_time_sampled(Command):
    """
    Display the amount of simulated time covered by the data sampled for unsteady statistics.
    """
    _version = '231'
    fluent_name = 'show-time-sampled'
    _python_name = 'show_time_sampled'
    return_type = 'object'

class levelset_auto_init(Command):
    """
    'levelset_auto_init' command.
    """
    _version = '231'
    fluent_name = 'levelset-auto-init'
    _python_name = 'levelset_auto_init'
    return_type = 'object'

class initialization(Group):
    """
    'initialization' child.
    """
    _version = '231'
    fluent_name = 'initialization'
    _python_name = 'initialization'
    child_names = ['fmg_initialize', 'localized_turb_init', 'reference_frame', 'fmg_options', 'hybrid_init_options', 'patch', 'set_defaults', 'open_channel_auto_init', 'fmg_initialization', 'initialization_type']
    command_names = ['standard_initialize', 'hybrid_initialize', 'initialize', 'dpm_reset', 'lwf_reset', 'init_flow_statistics', 'init_acoustics_options', 'list_defaults', 'init_turb_vel_fluctuations', 'show_iterations_sampled', 'show_time_sampled', 'levelset_auto_init']
    _child_classes = dict(
        fmg_initialize=fmg_initialize,
        localized_turb_init=localized_turb_init,
        reference_frame=reference_frame_2,
        fmg_options=fmg_options,
        hybrid_init_options=hybrid_init_options,
        patch=patch,
        set_defaults=set_defaults,
        open_channel_auto_init=open_channel_auto_init,
        fmg_initialization=fmg_initialization,
        initialization_type=initialization_type,
        standard_initialize=standard_initialize,
        hybrid_initialize=hybrid_initialize,
        initialize=initialize,
        dpm_reset=dpm_reset,
        lwf_reset=lwf_reset,
        init_flow_statistics=init_flow_statistics,
        init_acoustics_options=init_acoustics_options,
        list_defaults=list_defaults,
        init_turb_vel_fluctuations=init_turb_vel_fluctuations,
        show_iterations_sampled=show_iterations_sampled,
        show_time_sampled=show_time_sampled,
        levelset_auto_init=levelset_auto_init,
    )
    return_type = 'object'

class command_name(String):
    """
    'command_name' child.
    """
    _version = '231'
    fluent_name = 'command-name'
    _python_name = 'command_name'
    return_type = 'object'

class enable_9(Command):
    """
    Enable an execute-command.
    """
    _version = '231'
    fluent_name = 'enable'
    _python_name = 'enable'
    argument_names = ['command_name']
    _child_classes = dict(
        command_name=command_name,
    )
    return_type = 'object'

class disable_1(Command):
    """
    Disable an execute-command.
    """
    _version = '231'
    fluent_name = 'disable'
    _python_name = 'disable'
    argument_names = ['command_name']
    _child_classes = dict(
        command_name=command_name,
    )
    return_type = 'object'

class copy_2(Command):
    """
    Copy an execute-command.
    """
    _version = '231'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['command_name']
    _child_classes = dict(
        command_name=command_name,
    )
    return_type = 'object'

class delete_1(CommandWithPositionalArgs):
    """
    Delete an execute-command.
    """
    _version = '231'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['command_name']
    _child_classes = dict(
        command_name=command_name,
    )
    return_type = 'object'

class command_name_1(StringList):
    """
    'command_name' child.
    """
    _version = '231'
    fluent_name = 'command-name'
    _python_name = 'command_name'
    return_type = 'object'

class tsv_file_name(Filename):
    """
    'tsv_file_name' child.
    """
    _version = '231'
    fluent_name = 'tsv-file-name'
    _python_name = 'tsv_file_name'
    return_type = 'object'

class export_1(Command):
    """
    Export execute-commands to a TSV file.
    """
    _version = '231'
    fluent_name = 'export'
    _python_name = 'export'
    argument_names = ['command_name', 'tsv_file_name']
    _child_classes = dict(
        command_name=command_name_1,
        tsv_file_name=tsv_file_name,
    )
    return_type = 'object'

class import__1(Command):
    """
    Import execute-commands from a TSV file.
    """
    _version = '231'
    fluent_name = 'import'
    _python_name = 'import_'
    argument_names = ['tsv_file_name']
    _child_classes = dict(
        tsv_file_name=tsv_file_name,
    )
    return_type = 'object'

class execute_commands(Group):
    """
    'execute_commands' child.
    """
    _version = '231'
    fluent_name = 'execute-commands'
    _python_name = 'execute_commands'
    command_names = ['enable', 'disable', 'copy', 'delete', 'export', 'import_']
    _child_classes = dict(
        enable=enable_9,
        disable=disable_1,
        copy=copy_2,
        delete=delete_1,
        export=export_1,
        import_=import__1,
    )
    return_type = 'object'

class object_name(String, AllowedValuesMixin):
    """
    'object_name' child.
    """
    _version = '231'
    fluent_name = 'object-name'
    _python_name = 'object_name'
    return_type = 'object'

class display_1(Command):
    """
    Display graphics object.
    
    Parameters
    ----------
        object_name : str
            'object_name' child.
    """
    _version = '231'
    fluent_name = 'display'
    _python_name = 'display'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name,
    )
    return_type = 'object'

class from_name(String, AllowedValuesMixin):
    """
    'from_name' child.
    """
    _version = '231'
    fluent_name = 'from-name'
    _python_name = 'from_name'
    return_type = 'object'

class new_name(String):
    """
    'new_name' child.
    """
    _version = '231'
    fluent_name = 'new-name'
    _python_name = 'new_name'
    return_type = 'object'

class copy_3(Command):
    """
    Copy graphics object.
    
    Parameters
    ----------
        from_name : str
            'from_name' child.
        new_name : str
            'new_name' child.
    """
    _version = '231'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['from_name', 'new_name']
    _child_classes = dict(
        from_name=from_name,
        new_name=new_name,
    )
    return_type = 'object'

class add_to_graphics(Command):
    """
    Add graphics object to existing graphics.
    
    Parameters
    ----------
        object_name : str
            'object_name' child.
    """
    _version = '231'
    fluent_name = 'add-to-graphics'
    _python_name = 'add_to_graphics'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name,
    )
    return_type = 'object'

class clear_history(Command):
    """
    Clear object history.
    
    Parameters
    ----------
        object_name : str
            'object_name' child.
    """
    _version = '231'
    fluent_name = 'clear-history'
    _python_name = 'clear_history'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name,
    )
    return_type = 'object'

class animate_on(String, AllowedValuesMixin):
    """
    'animate_on' child.
    """
    _version = '231'
    fluent_name = 'animate-on'
    _python_name = 'animate_on'
    return_type = 'object'

class flow_time_frequency(Real):
    """
    'flow_time_frequency' child.
    """
    _version = '231'
    fluent_name = 'flow-time-frequency'
    _python_name = 'flow_time_frequency'
    return_type = 'object'

class storage_type(Integer):
    """
    'storage_type' child.
    """
    _version = '231'
    fluent_name = 'storage-type'
    _python_name = 'storage_type'
    return_type = 'object'

class storage_dir(String, AllowedValuesMixin):
    """
    'storage_dir' child.
    """
    _version = '231'
    fluent_name = 'storage-dir'
    _python_name = 'storage_dir'
    return_type = 'object'

class window_id(Integer):
    """
    'window_id' child.
    """
    _version = '231'
    fluent_name = 'window-id'
    _python_name = 'window_id'
    return_type = 'object'

class view(String, AllowedValuesMixin):
    """
    'view' child.
    """
    _version = '231'
    fluent_name = 'view'
    _python_name = 'view'
    return_type = 'object'

class use_raytracing(Boolean):
    """
    'use_raytracing' child.
    """
    _version = '231'
    fluent_name = 'use-raytracing?'
    _python_name = 'use_raytracing'
    return_type = 'object'

class display_2(Command):
    """
    'display' command.
    """
    _version = '231'
    fluent_name = 'display'
    _python_name = 'display'
    return_type = 'object'

class solution_animations_child(Group):
    """
    'child_object_type' of solution_animations.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'solution_animations_child'
    child_names = ['name', 'animate_on', 'frequency', 'flow_time_frequency', 'frequency_of', 'storage_type', 'storage_dir', 'window_id', 'view', 'use_raytracing']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        animate_on=animate_on,
        frequency=frequency_1,
        flow_time_frequency=flow_time_frequency,
        frequency_of=frequency_of,
        storage_type=storage_type,
        storage_dir=storage_dir,
        window_id=window_id,
        view=view,
        use_raytracing=use_raytracing,
        display=display_2,
    )
    return_type = 'object'

class solution_animations(NamedObject[solution_animations_child], CreatableNamedObjectMixinOld[solution_animations_child]):
    """
    'solution_animations' child.
    """
    _version = '231'
    fluent_name = 'solution-animations'
    _python_name = 'solution_animations'
    command_names = ['display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        display=display_1,
        copy=copy_3,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = solution_animations_child
    return_type = 'object'

class name_2(String, AllowedValuesMixin):
    """
    The name of the dynamic poor mesh register.
    """
    _version = '231'
    fluent_name = 'name'
    _python_name = 'name'
    return_type = 'object'

class register(String, AllowedValuesMixin):
    """
    The register to which poor mesh numerics is automatically applied.
    """
    _version = '231'
    fluent_name = 'register'
    _python_name = 'register'
    return_type = 'object'

class option_13(String, AllowedValuesMixin):
    """
    The frequency unit used for automatic marking of cells in a register for poor mesh numerics treatment.
    """
    _version = '231'
    fluent_name = 'option'
    _python_name = 'option'
    return_type = 'object'

class iterations(Integer):
    """
    The frequency (in iterations) at which cells in the register are automatically marked for poor mesh numerics treatment.
    """
    _version = '231'
    fluent_name = 'iterations'
    _python_name = 'iterations'
    return_type = 'object'

class time_steps(Integer):
    """
    The frequency (in time steps) at which cells in the register are automatically marked for poor mesh numerics treatment.
    """
    _version = '231'
    fluent_name = 'time-steps'
    _python_name = 'time_steps'
    return_type = 'object'

class frequency_2(Group):
    """
    Define the frequency at which cells in the register are automatically marked for poor mesh numerics treatment.
    """
    _version = '231'
    fluent_name = 'frequency'
    _python_name = 'frequency'
    child_names = ['option', 'iterations', 'time_steps']
    _child_classes = dict(
        option=option_13,
        iterations=iterations,
        time_steps=time_steps,
    )
    return_type = 'object'

class active_1(Boolean):
    """
    Enable the automatic application of poor mesh numerics to a register.
    """
    _version = '231'
    fluent_name = 'active?'
    _python_name = 'active'
    return_type = 'object'

class verbosity_6(Integer):
    """
    The verbosity of the console messages printed about the automatic application of poor mesh numerics.
    """
    _version = '231'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class set_1(Group):
    """
    Edit a definition for automatic poor mesh numerics.
    """
    _version = '231'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['name', 'register', 'frequency', 'active', 'verbosity']
    _child_classes = dict(
        name=name_2,
        register=register,
        frequency=frequency_2,
        active=active_1,
        verbosity=verbosity_6,
    )
    return_type = 'object'

class list_properties_2(Command):
    """
    List the properties of a definition for automatic poor mesh numerics.
    """
    _version = '231'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    return_type = 'object'

class poor_mesh_numerics(Group):
    """
    'poor_mesh_numerics' child.
    """
    _version = '231'
    fluent_name = 'poor-mesh-numerics'
    _python_name = 'poor_mesh_numerics'
    child_names = ['set']
    command_names = ['list_properties']
    _child_classes = dict(
        set=set_1,
        list_properties=list_properties_2,
    )
    return_type = 'object'

class enable_strategy(Command):
    """
    Specify whether automatic initialization and case modification should be enabled.
    
    Parameters
    ----------
        enable : bool
            'enable' child.
    """
    _version = '231'
    fluent_name = 'enable-strategy?'
    _python_name = 'enable_strategy'
    argument_names = ['enable']
    _child_classes = dict(
        enable=enable,
    )
    return_type = 'object'

class mod_name(String):
    """
    'mod_name' child.
    """
    _version = '231'
    fluent_name = 'mod-name'
    _python_name = 'mod_name'
    return_type = 'object'

class copy_modification(Command):
    """
    Copy a single case modification.
    
    Parameters
    ----------
        mod_name : str
            'mod_name' child.
    """
    _version = '231'
    fluent_name = 'copy-modification'
    _python_name = 'copy_modification'
    argument_names = ['mod_name']
    _child_classes = dict(
        mod_name=mod_name,
    )
    return_type = 'object'

class delete_modification(Command):
    """
    Delete a single case modification.
    
    Parameters
    ----------
        mod_name : str
            'mod_name' child.
    """
    _version = '231'
    fluent_name = 'delete-modification'
    _python_name = 'delete_modification'
    argument_names = ['mod_name']
    _child_classes = dict(
        mod_name=mod_name,
    )
    return_type = 'object'

class enable_modification(Command):
    """
    Enable a single defined case modification.
    
    Parameters
    ----------
        mod_name : str
            'mod_name' child.
    """
    _version = '231'
    fluent_name = 'enable-modification'
    _python_name = 'enable_modification'
    argument_names = ['mod_name']
    _child_classes = dict(
        mod_name=mod_name,
    )
    return_type = 'object'

class disable_modification(Command):
    """
    Disable a single defined case modification.
    
    Parameters
    ----------
        mod_name : str
            'mod_name' child.
    """
    _version = '231'
    fluent_name = 'disable-modification'
    _python_name = 'disable_modification'
    argument_names = ['mod_name']
    _child_classes = dict(
        mod_name=mod_name,
    )
    return_type = 'object'

class import_modifications(Command):
    """
    Import a list of case modifications from a tsv file.
    
    Parameters
    ----------
        filename : str
            'filename' child.
    """
    _version = '231'
    fluent_name = 'import-modifications'
    _python_name = 'import_modifications'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename,
    )
    return_type = 'object'

class command_list(StringList):
    """
    'command_list' child.
    """
    _version = '231'
    fluent_name = 'command-list'
    _python_name = 'command_list'
    return_type = 'object'

class export_modifications(Command):
    """
    Export all case modifications to a tsv file.
    """
    _version = '231'
    fluent_name = 'export-modifications'
    _python_name = 'export_modifications'
    argument_names = ['command_list', 'filename']
    _child_classes = dict(
        command_list=command_list,
        filename=filename,
    )
    return_type = 'object'

class continue_strategy_execution(Command):
    """
    Continue execution of the automatic initialization and case modification strategy defined at present.
    """
    _version = '231'
    fluent_name = 'continue-strategy-execution'
    _python_name = 'continue_strategy_execution'
    return_type = 'object'

class calculation_activity(Group):
    """
    'calculation_activity' child.
    """
    _version = '231'
    fluent_name = 'calculation-activity'
    _python_name = 'calculation_activity'
    child_names = ['execute_commands', 'solution_animations', 'poor_mesh_numerics']
    command_names = ['enable_strategy', 'copy_modification', 'delete_modification', 'enable_modification', 'disable_modification', 'import_modifications', 'export_modifications', 'continue_strategy_execution']
    _child_classes = dict(
        execute_commands=execute_commands,
        solution_animations=solution_animations,
        poor_mesh_numerics=poor_mesh_numerics,
        enable_strategy=enable_strategy,
        copy_modification=copy_modification,
        delete_modification=delete_modification,
        enable_modification=enable_modification,
        disable_modification=disable_modification,
        import_modifications=import_modifications,
        export_modifications=export_modifications,
        continue_strategy_execution=continue_strategy_execution,
    )
    return_type = 'object'

class enabled_2(Boolean):
    """
    'enabled' child.
    """
    _version = '231'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class user_defined_timestep(String, AllowedValuesMixin):
    """
    'user_defined_timestep' child.
    """
    _version = '231'
    fluent_name = 'user-defined-timestep'
    _python_name = 'user_defined_timestep'
    return_type = 'object'

class error_tolerance(Real):
    """
    Truncation Error Tolerance.
    """
    _version = '231'
    fluent_name = 'error-tolerance'
    _python_name = 'error_tolerance'
    return_type = 'object'

class time_end(Real):
    """
    Total Simulation Time.
    """
    _version = '231'
    fluent_name = 'time-end'
    _python_name = 'time_end'
    return_type = 'object'

class min_time_step(Real):
    """
    Minimum Time Step Size.
    """
    _version = '231'
    fluent_name = 'min-time-step'
    _python_name = 'min_time_step'
    return_type = 'object'

class max_time_step(Real):
    """
    Maximum Time Step Size.
    """
    _version = '231'
    fluent_name = 'max-time-step'
    _python_name = 'max_time_step'
    return_type = 'object'

class min_step_change_factor(Real):
    """
    Minimum Step Change Factor.
    """
    _version = '231'
    fluent_name = 'min-step-change-factor'
    _python_name = 'min_step_change_factor'
    return_type = 'object'

class max_step_change_factor(Real):
    """
    Maximum Step Change Factor.
    """
    _version = '231'
    fluent_name = 'max-step-change-factor'
    _python_name = 'max_step_change_factor'
    return_type = 'object'

class fixed_time_step_count(Integer):
    """
    Number of Fixed Time Steps.
    """
    _version = '231'
    fluent_name = 'fixed-time-step-count'
    _python_name = 'fixed_time_step_count'
    return_type = 'object'

class adaptive_time_stepping(Group):
    """
    'adaptive_time_stepping' child.
    """
    _version = '231'
    fluent_name = 'adaptive-time-stepping'
    _python_name = 'adaptive_time_stepping'
    child_names = ['enabled', 'user_defined_timestep', 'error_tolerance', 'time_end', 'min_time_step', 'max_time_step', 'min_step_change_factor', 'max_step_change_factor', 'fixed_time_step_count']
    _child_classes = dict(
        enabled=enabled_2,
        user_defined_timestep=user_defined_timestep,
        error_tolerance=error_tolerance,
        time_end=time_end,
        min_time_step=min_time_step,
        max_time_step=max_time_step,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
        fixed_time_step_count=fixed_time_step_count,
    )
    return_type = 'object'

class enalbled(Boolean):
    """
    'enalbled' child.
    """
    _version = '231'
    fluent_name = 'enalbled?'
    _python_name = 'enalbled'
    return_type = 'object'

class desired_cfl(Real):
    """
    Courant Number.
    """
    _version = '231'
    fluent_name = 'desired-cfl'
    _python_name = 'desired_cfl'
    return_type = 'object'

class initial_time_step(Real):
    """
    Initial Time Step Size.
    """
    _version = '231'
    fluent_name = 'initial-time-step'
    _python_name = 'initial_time_step'
    return_type = 'object'

class max_fixed_time_step(Integer):
    """
    Number of Fixed Time Steps.
    """
    _version = '231'
    fluent_name = 'max-fixed-time-step'
    _python_name = 'max_fixed_time_step'
    return_type = 'object'

class update_interval_time_step_size(Integer):
    """
    Time Step Size Update Interval.
    """
    _version = '231'
    fluent_name = 'update-interval-time-step-size'
    _python_name = 'update_interval_time_step_size'
    return_type = 'object'

class cfl_based_adaptive_time_stepping(Group):
    """
    'cfl_based_adaptive_time_stepping' child.
    """
    _version = '231'
    fluent_name = 'cfl-based-adaptive-time-stepping'
    _python_name = 'cfl_based_adaptive_time_stepping'
    child_names = ['enalbled', 'user_defined_timestep', 'desired_cfl', 'time_end', 'initial_time_step', 'max_fixed_time_step', 'update_interval_time_step_size', 'min_time_step', 'max_time_step', 'min_step_change_factor', 'max_step_change_factor']
    _child_classes = dict(
        enalbled=enalbled,
        user_defined_timestep=user_defined_timestep,
        desired_cfl=desired_cfl,
        time_end=time_end,
        initial_time_step=initial_time_step,
        max_fixed_time_step=max_fixed_time_step,
        update_interval_time_step_size=update_interval_time_step_size,
        min_time_step=min_time_step,
        max_time_step=max_time_step,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
    )
    return_type = 'object'

class data_sampling_1(Boolean):
    """
    'data_sampling' child.
    """
    _version = '231'
    fluent_name = 'data-sampling?'
    _python_name = 'data_sampling'
    return_type = 'object'

class sampling_interval(Integer):
    """
    Sampling interval.
    """
    _version = '231'
    fluent_name = 'sampling-interval'
    _python_name = 'sampling_interval'
    return_type = 'object'

class statistics_shear_stress(Boolean):
    """
    Enable/Disable statistics for flow shear stresses.
    """
    _version = '231'
    fluent_name = 'statistics-shear-stress?'
    _python_name = 'statistics_shear_stress'
    return_type = 'object'

class statistics_heat_flux(Boolean):
    """
    Enable/Disable statistics for flow heat fluxes.
    """
    _version = '231'
    fluent_name = 'statistics-heat-flux?'
    _python_name = 'statistics_heat_flux'
    return_type = 'object'

class wall_statistics(Boolean):
    """
    Enable/Disable wall statistics.
    """
    _version = '231'
    fluent_name = 'wall-statistics?'
    _python_name = 'wall_statistics'
    return_type = 'object'

class force_statistics(Boolean):
    """
    Enable/Disable force statistics.
    """
    _version = '231'
    fluent_name = 'force-statistics?'
    _python_name = 'force_statistics'
    return_type = 'object'

class time_statistics_dpm(Boolean):
    """
    Enable/Disable statistics for DPM variables.
    """
    _version = '231'
    fluent_name = 'time-statistics-dpm?'
    _python_name = 'time_statistics_dpm'
    return_type = 'object'

class species_list(StringList, AllowedValuesMixin):
    """
    Enable/Disable statistics for sps.
    """
    _version = '231'
    fluent_name = 'species-list'
    _python_name = 'species_list'
    return_type = 'object'

class statistics_mixture_fraction(Boolean):
    """
    Enable/Disable statistics for mixture fraction.
    """
    _version = '231'
    fluent_name = 'statistics-mixture-fraction?'
    _python_name = 'statistics_mixture_fraction'
    return_type = 'object'

class statistics_reaction_progress(Boolean):
    """
    Enable/Disable statistics for reaction progress.
    """
    _version = '231'
    fluent_name = 'statistics-reaction-progress?'
    _python_name = 'statistics_reaction_progress'
    return_type = 'object'

class save_cff_unsteady_statistics(Boolean):
    """
    Enable/Disable statistics for Custom Field Functions.
    """
    _version = '231'
    fluent_name = 'save-cff-unsteady-statistics?'
    _python_name = 'save_cff_unsteady_statistics'
    return_type = 'object'

class udf_cf_names(StringList, AllowedValuesMixin):
    """
    'udf_cf_names' child.
    """
    _version = '231'
    fluent_name = 'udf-cf-names'
    _python_name = 'udf_cf_names'
    return_type = 'object'

class setup_unsteady_statistics(Command):
    """
    'setup_unsteady_statistics' command.
    """
    _version = '231'
    fluent_name = 'setup-unsteady-statistics'
    _python_name = 'setup_unsteady_statistics'
    argument_names = ['udf_cf_names']
    _child_classes = dict(
        udf_cf_names=udf_cf_names,
    )
    return_type = 'object'

class data_sampling(Group):
    """
    'data_sampling' child.
    """
    _version = '231'
    fluent_name = 'data-sampling'
    _python_name = 'data_sampling'
    child_names = ['data_sampling', 'sampling_interval', 'statistics_shear_stress', 'statistics_heat_flux', 'wall_statistics', 'force_statistics', 'time_statistics_dpm', 'species_list', 'statistics_mixture_fraction', 'statistics_reaction_progress', 'save_cff_unsteady_statistics']
    command_names = ['setup_unsteady_statistics']
    _child_classes = dict(
        data_sampling=data_sampling_1,
        sampling_interval=sampling_interval,
        statistics_shear_stress=statistics_shear_stress,
        statistics_heat_flux=statistics_heat_flux,
        wall_statistics=wall_statistics,
        force_statistics=force_statistics,
        time_statistics_dpm=time_statistics_dpm,
        species_list=species_list,
        statistics_mixture_fraction=statistics_mixture_fraction,
        statistics_reaction_progress=statistics_reaction_progress,
        save_cff_unsteady_statistics=save_cff_unsteady_statistics,
        setup_unsteady_statistics=setup_unsteady_statistics,
    )
    return_type = 'object'

class specified_time_step(Boolean):
    """
    Use specified time step or courant number.
    """
    _version = '231'
    fluent_name = 'specified-time-step'
    _python_name = 'specified_time_step'
    return_type = 'object'

class incremental_time(Real):
    """
    Incremental Time.
    """
    _version = '231'
    fluent_name = 'incremental-time'
    _python_name = 'incremental_time'
    return_type = 'object'

class max_iter_per_time_step(Integer):
    """
    Max Iterations/Time Step.
    """
    _version = '231'
    fluent_name = 'max-iter-per-time-step'
    _python_name = 'max_iter_per_time_step'
    return_type = 'object'

class time_step_count_2(Integer):
    """
    Inceremtal number of Time steps.
    """
    _version = '231'
    fluent_name = 'time-step-count'
    _python_name = 'time_step_count'
    return_type = 'object'

class total_time_step_count(Integer):
    """
    Total number of Time steps.
    """
    _version = '231'
    fluent_name = 'total-time-step-count'
    _python_name = 'total_time_step_count'
    return_type = 'object'

class total_time(Real):
    """
    Total Simulation Time.
    """
    _version = '231'
    fluent_name = 'total-time'
    _python_name = 'total_time'
    return_type = 'object'

class time_step_size(Real):
    """
    The physical time step size.
    """
    _version = '231'
    fluent_name = 'time-step-size'
    _python_name = 'time_step_size'
    return_type = 'object'

class solution_status(Boolean):
    """
    Activate the simulation status panel.
    """
    _version = '231'
    fluent_name = 'solution-status'
    _python_name = 'solution_status'
    return_type = 'object'

class extrapolate_vars(Boolean):
    """
    The extrapolation object.
    """
    _version = '231'
    fluent_name = 'extrapolate-vars'
    _python_name = 'extrapolate_vars'
    return_type = 'object'

class max_flow_time(Real):
    """
    Maximum flow time.
    """
    _version = '231'
    fluent_name = 'max-flow-time'
    _python_name = 'max_flow_time'
    return_type = 'object'

class control_time_step_size_variation(Boolean):
    """
    Control time step size variation.
    """
    _version = '231'
    fluent_name = 'control-time-step-size-variation?'
    _python_name = 'control_time_step_size_variation'
    return_type = 'object'

class use_average_cfl(Boolean):
    """
    Use Averaged CFL condition rather than maximum CFL condition.
    """
    _version = '231'
    fluent_name = 'use-average-cfl?'
    _python_name = 'use_average_cfl'
    return_type = 'object'

class cfl_type(Integer):
    """
    CFL type .
    """
    _version = '231'
    fluent_name = 'cfl-type'
    _python_name = 'cfl_type'
    return_type = 'object'

class courant_number_1(Real):
    """
    Courant Number.
    """
    _version = '231'
    fluent_name = 'courant-number'
    _python_name = 'courant_number'
    return_type = 'object'

class initial_time_step_size(Real):
    """
    Initial Time Step Size.
    """
    _version = '231'
    fluent_name = 'initial-time-step-size'
    _python_name = 'initial_time_step_size'
    return_type = 'object'

class fixed_time_step_size(Integer):
    """
    Number of Fixed Time Steps.
    """
    _version = '231'
    fluent_name = 'fixed-time-step-size'
    _python_name = 'fixed_time_step_size'
    return_type = 'object'

class min_time_step_size(Real):
    """
    Minimum Time Step Size.
    """
    _version = '231'
    fluent_name = 'min-time-step-size'
    _python_name = 'min_time_step_size'
    return_type = 'object'

class max_time_step_size(Real):
    """
    Maximum Time Step Size.
    """
    _version = '231'
    fluent_name = 'max-time-step-size'
    _python_name = 'max_time_step_size'
    return_type = 'object'

class update_interval(Integer):
    """
    Time Step Size Update Interval.
    """
    _version = '231'
    fluent_name = 'update-interval'
    _python_name = 'update_interval'
    return_type = 'object'

class cfl_based_time_stepping(Group):
    """
    'cfl_based_time_stepping' child.
    """
    _version = '231'
    fluent_name = 'cfl-based-time-stepping'
    _python_name = 'cfl_based_time_stepping'
    child_names = ['courant_number', 'initial_time_step_size', 'fixed_time_step_size', 'min_time_step_size', 'max_time_step_size', 'min_step_change_factor', 'max_step_change_factor', 'update_interval']
    _child_classes = dict(
        courant_number=courant_number_1,
        initial_time_step_size=initial_time_step_size,
        fixed_time_step_size=fixed_time_step_size,
        min_time_step_size=min_time_step_size,
        max_time_step_size=max_time_step_size,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
        update_interval=update_interval,
    )
    return_type = 'object'

class error_tolerance_1(Real):
    """
    Error Tolerance.
    """
    _version = '231'
    fluent_name = 'error-tolerance'
    _python_name = 'error_tolerance'
    return_type = 'object'

class error_based_time_stepping(Group):
    """
    'error_based_time_stepping' child.
    """
    _version = '231'
    fluent_name = 'error-based-time-stepping'
    _python_name = 'error_based_time_stepping'
    child_names = ['error_tolerance', 'initial_time_step_size', 'fixed_time_step_size', 'min_time_step_size', 'max_time_step_size', 'min_step_change_factor', 'max_step_change_factor', 'update_interval']
    _child_classes = dict(
        error_tolerance=error_tolerance_1,
        initial_time_step_size=initial_time_step_size,
        fixed_time_step_size=fixed_time_step_size,
        min_time_step_size=min_time_step_size,
        max_time_step_size=max_time_step_size,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
        update_interval=update_interval,
    )
    return_type = 'object'

class undo_timestep(Boolean):
    """
    Undo the previous time step.
    """
    _version = '231'
    fluent_name = 'undo-timestep?'
    _python_name = 'undo_timestep'
    return_type = 'object'

class predict_next(Boolean):
    """
    Applies a predictor algorithm for computing initial condition at time step n+1.
    """
    _version = '231'
    fluent_name = 'predict-next?'
    _python_name = 'predict_next'
    return_type = 'object'

class rotating_mesh_flow_predictor(Boolean):
    """
    Improve prediction of flow field at time step n+1 for rotating mesh.
    """
    _version = '231'
    fluent_name = 'rotating-mesh-flow-predictor?'
    _python_name = 'rotating_mesh_flow_predictor'
    return_type = 'object'

class global_courant_number(Real):
    """
    Global Courant Number.
    """
    _version = '231'
    fluent_name = 'global-courant-number'
    _python_name = 'global_courant_number'
    return_type = 'object'

class mp_specific_time_stepping(Group):
    """
    'mp_specific_time_stepping' child.
    """
    _version = '231'
    fluent_name = 'mp-specific-time-stepping'
    _python_name = 'mp_specific_time_stepping'
    child_names = ['enabled', 'global_courant_number', 'initial_time_step_size', 'fixed_time_step_size', 'min_time_step_size', 'max_time_step_size', 'min_step_change_factor', 'max_step_change_factor', 'update_interval']
    _child_classes = dict(
        enabled=enabled_2,
        global_courant_number=global_courant_number,
        initial_time_step_size=initial_time_step_size,
        fixed_time_step_size=fixed_time_step_size,
        min_time_step_size=min_time_step_size,
        max_time_step_size=max_time_step_size,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
        update_interval=update_interval,
    )
    return_type = 'object'

class udf_hook(String, AllowedValuesMixin):
    """
    'udf_hook' child.
    """
    _version = '231'
    fluent_name = 'udf-hook'
    _python_name = 'udf_hook'
    return_type = 'object'

class fixed_periodic_1(Boolean):
    """
    'fixed_periodic' child.
    """
    _version = '231'
    fluent_name = 'fixed-periodic?'
    _python_name = 'fixed_periodic'
    return_type = 'object'

class fixed_periodic_type(String, AllowedValuesMixin):
    """
    'fixed_periodic_type' child.
    """
    _version = '231'
    fluent_name = 'fixed-periodic-type'
    _python_name = 'fixed_periodic_type'
    return_type = 'object'

class fixed_periodic_type_value(Real):
    """
    'fixed_periodic_type_value' child.
    """
    _version = '231'
    fluent_name = 'fixed-periodic-type-value'
    _python_name = 'fixed_periodic_type_value'
    return_type = 'object'

class times_step_periods(Integer):
    """
    'times_step_periods' child.
    """
    _version = '231'
    fluent_name = 'times-step-periods'
    _python_name = 'times_step_periods'
    return_type = 'object'

class total_period_run(Integer):
    """
    'total_period_run' child.
    """
    _version = '231'
    fluent_name = 'total-period-run'
    _python_name = 'total_period_run'
    return_type = 'object'

class fixed_periodic(Group):
    """
    'fixed_periodic' child.
    """
    _version = '231'
    fluent_name = 'fixed-periodic'
    _python_name = 'fixed_periodic'
    child_names = ['fixed_periodic', 'fixed_periodic_type', 'fixed_periodic_type_value', 'times_step_periods', 'total_period_run']
    _child_classes = dict(
        fixed_periodic=fixed_periodic_1,
        fixed_periodic_type=fixed_periodic_type,
        fixed_periodic_type_value=fixed_periodic_type_value,
        times_step_periods=times_step_periods,
        total_period_run=total_period_run,
    )
    return_type = 'object'

class duration_specification_method(String, AllowedValuesMixin):
    """
    'duration_specification_method' child.
    """
    _version = '231'
    fluent_name = 'duration-specification-method'
    _python_name = 'duration_specification_method'
    return_type = 'object'

class moving_mesh_constraint(Boolean):
    """
    Enable Moving Mesh Constraint.
    """
    _version = '231'
    fluent_name = 'moving-mesh-constraint?'
    _python_name = 'moving_mesh_constraint'
    return_type = 'object'

class mesh_courant_number(Real):
    """
    Moving Mesh Courant Number.
    """
    _version = '231'
    fluent_name = 'mesh-courant-number'
    _python_name = 'mesh_courant_number'
    return_type = 'object'

class moving_mesh_cfl_constraint(Group):
    """
    'moving_mesh_cfl_constraint' child.
    """
    _version = '231'
    fluent_name = 'moving-mesh-cfl-constraint'
    _python_name = 'moving_mesh_cfl_constraint'
    child_names = ['moving_mesh_constraint', 'mesh_courant_number']
    _child_classes = dict(
        moving_mesh_constraint=moving_mesh_constraint,
        mesh_courant_number=mesh_courant_number,
    )
    return_type = 'object'

class physics_based_constraint(Boolean):
    """
    Include physics driven time-step constraints.
    """
    _version = '231'
    fluent_name = 'physics-based-constraint?'
    _python_name = 'physics_based_constraint'
    return_type = 'object'

class viscous_scale(Boolean):
    """
    Include viscous time scale.
    """
    _version = '231'
    fluent_name = 'viscous-scale?'
    _python_name = 'viscous_scale'
    return_type = 'object'

class gravity_scale(Boolean):
    """
    Include gravity based time scale.
    """
    _version = '231'
    fluent_name = 'gravity-scale?'
    _python_name = 'gravity_scale'
    return_type = 'object'

class surface_tension_scale(Boolean):
    """
    Include surface tension based time scale.
    """
    _version = '231'
    fluent_name = 'surface-tension-scale?'
    _python_name = 'surface_tension_scale'
    return_type = 'object'

class acoustic_scale(Boolean):
    """
    Include acoustic time scale.
    """
    _version = '231'
    fluent_name = 'acoustic-scale?'
    _python_name = 'acoustic_scale'
    return_type = 'object'

class time_scale_options(Group):
    """
    'time_scale_options' child.
    """
    _version = '231'
    fluent_name = 'time-scale-options'
    _python_name = 'time_scale_options'
    child_names = ['viscous_scale', 'gravity_scale', 'surface_tension_scale', 'acoustic_scale']
    _child_classes = dict(
        viscous_scale=viscous_scale,
        gravity_scale=gravity_scale,
        surface_tension_scale=surface_tension_scale,
        acoustic_scale=acoustic_scale,
    )
    return_type = 'object'

class verbosity_7(Boolean):
    """
    Verbosity to print multiphase specific time scales.
    """
    _version = '231'
    fluent_name = 'verbosity?'
    _python_name = 'verbosity'
    return_type = 'object'

class multiphase_specific_time_constraints(Group):
    """
    'multiphase_specific_time_constraints' child.
    """
    _version = '231'
    fluent_name = 'multiphase-specific-time-constraints'
    _python_name = 'multiphase_specific_time_constraints'
    child_names = ['moving_mesh_cfl_constraint', 'physics_based_constraint', 'time_scale_options', 'verbosity']
    _child_classes = dict(
        moving_mesh_cfl_constraint=moving_mesh_cfl_constraint,
        physics_based_constraint=physics_based_constraint,
        time_scale_options=time_scale_options,
        verbosity=verbosity_7,
    )
    return_type = 'object'

class enable_solid_time_step(Boolean):
    """
    Enable/Disable different time step size for solid zones?.
    """
    _version = '231'
    fluent_name = 'enable-solid-time-step?'
    _python_name = 'enable_solid_time_step'
    return_type = 'object'

class choose_auto_time_stepping(Boolean):
    """
    Enable/Disable Automatic time stepping?.
    """
    _version = '231'
    fluent_name = 'choose-auto-time-stepping?'
    _python_name = 'choose_auto_time_stepping'
    return_type = 'object'

class time_step_size_1(Real):
    """
    The time step size in seconds.
    """
    _version = '231'
    fluent_name = 'time-step-size'
    _python_name = 'time_step_size'
    return_type = 'object'

class solid_time_step_size(Group):
    """
    'solid_time_step_size' child.
    """
    _version = '231'
    fluent_name = 'solid-time-step-size'
    _python_name = 'solid_time_step_size'
    child_names = ['enable_solid_time_step', 'choose_auto_time_stepping', 'time_step_size']
    _child_classes = dict(
        enable_solid_time_step=enable_solid_time_step,
        choose_auto_time_stepping=choose_auto_time_stepping,
        time_step_size=time_step_size_1,
    )
    return_type = 'object'

class time_step_size_for_acoustic_export(Real):
    """
    Number of time step size for acoustic export.
    """
    _version = '231'
    fluent_name = 'time-step-size-for-acoustic-export'
    _python_name = 'time_step_size_for_acoustic_export'
    return_type = 'object'

class extrapolate_eqn_vars_child(Boolean):
    """
    'child_object_type' of extrapolate_eqn_vars.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'extrapolate_eqn_vars_child'
    return_type = 'object'

class extrapolate_eqn_vars(NamedObject[extrapolate_eqn_vars_child], _NonCreatableNamedObjectMixin[extrapolate_eqn_vars_child]):
    """
    The extrapolation object.
    """
    _version = '231'
    fluent_name = 'extrapolate-eqn-vars'
    _python_name = 'extrapolate_eqn_vars'
    child_object_type = extrapolate_eqn_vars_child
    return_type = 'object'

class transient_controls(Group):
    """
    'transient_controls' child.
    """
    _version = '231'
    fluent_name = 'transient-controls'
    _python_name = 'transient_controls'
    child_names = ['type', 'method', 'specified_time_step', 'incremental_time', 'max_iter_per_time_step', 'time_step_count', 'total_time_step_count', 'total_time', 'time_step_size', 'solution_status', 'extrapolate_vars', 'max_flow_time', 'control_time_step_size_variation', 'use_average_cfl', 'cfl_type', 'cfl_based_time_stepping', 'error_based_time_stepping', 'undo_timestep', 'predict_next', 'rotating_mesh_flow_predictor', 'mp_specific_time_stepping', 'udf_hook', 'fixed_periodic', 'duration_specification_method', 'multiphase_specific_time_constraints', 'solid_time_step_size', 'time_step_size_for_acoustic_export', 'extrapolate_eqn_vars']
    _child_classes = dict(
        type=type_1,
        method=method_1,
        specified_time_step=specified_time_step,
        incremental_time=incremental_time,
        max_iter_per_time_step=max_iter_per_time_step,
        time_step_count=time_step_count_2,
        total_time_step_count=total_time_step_count,
        total_time=total_time,
        time_step_size=time_step_size,
        solution_status=solution_status,
        extrapolate_vars=extrapolate_vars,
        max_flow_time=max_flow_time,
        control_time_step_size_variation=control_time_step_size_variation,
        use_average_cfl=use_average_cfl,
        cfl_type=cfl_type,
        cfl_based_time_stepping=cfl_based_time_stepping,
        error_based_time_stepping=error_based_time_stepping,
        undo_timestep=undo_timestep,
        predict_next=predict_next,
        rotating_mesh_flow_predictor=rotating_mesh_flow_predictor,
        mp_specific_time_stepping=mp_specific_time_stepping,
        udf_hook=udf_hook,
        fixed_periodic=fixed_periodic,
        duration_specification_method=duration_specification_method,
        multiphase_specific_time_constraints=multiphase_specific_time_constraints,
        solid_time_step_size=solid_time_step_size,
        time_step_size_for_acoustic_export=time_step_size_for_acoustic_export,
        extrapolate_eqn_vars=extrapolate_eqn_vars,
    )
    return_type = 'object'

class verbosity_8(Integer):
    """
    'verbosity' child.
    """
    _version = '231'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class time_step_method_1(String, AllowedValuesMixin):
    """
    Enable/disable use of automatic time step size calculation.
    """
    _version = '231'
    fluent_name = 'time-step-method'
    _python_name = 'time_step_method'
    return_type = 'object'

class pseudo_time_step_size(Real):
    """
    Pseudo time step size.
    """
    _version = '231'
    fluent_name = 'pseudo-time-step-size'
    _python_name = 'pseudo_time_step_size'
    return_type = 'object'

class length_scale_methods(String, AllowedValuesMixin):
    """
    Length Scale Calculation Method.
    """
    _version = '231'
    fluent_name = 'length-scale-methods'
    _python_name = 'length_scale_methods'
    return_type = 'object'

class time_step_size_scale_factor_1(Real):
    """
    Auto Time Step Size Scaling Factor.
    """
    _version = '231'
    fluent_name = 'time-step-size-scale-factor'
    _python_name = 'time_step_size_scale_factor'
    return_type = 'object'

class length_scale_1(Real):
    """
    'length_scale' child.
    """
    _version = '231'
    fluent_name = 'length-scale'
    _python_name = 'length_scale'
    return_type = 'object'

class auto_time_size_calc_solid_zone(Boolean):
    """
    Enable/disable automatic time step size calculation for solid zone.
    """
    _version = '231'
    fluent_name = 'auto-time-size-calc-solid-zone?'
    _python_name = 'auto_time_size_calc_solid_zone'
    return_type = 'object'

class time_solid_scale_factor(Real):
    """
    Auto Time Step Size Scaling Factor for solid zones.
    """
    _version = '231'
    fluent_name = 'time-solid-scale-factor'
    _python_name = 'time_solid_scale_factor'
    return_type = 'object'

class time_step_size_for_solid_zone(Real):
    """
    Pseudo Time Step Size for solid zones.
    """
    _version = '231'
    fluent_name = 'time-step-size-for-solid-zone'
    _python_name = 'time_step_size_for_solid_zone'
    return_type = 'object'

class time_step_method(Group):
    """
    'time_step_method' child.
    """
    _version = '231'
    fluent_name = 'time-step-method'
    _python_name = 'time_step_method'
    child_names = ['time_step_method', 'pseudo_time_step_size', 'length_scale_methods', 'time_step_size_scale_factor', 'length_scale', 'auto_time_size_calc_solid_zone', 'time_solid_scale_factor', 'time_step_size_for_solid_zone']
    _child_classes = dict(
        time_step_method=time_step_method_1,
        pseudo_time_step_size=pseudo_time_step_size,
        length_scale_methods=length_scale_methods,
        time_step_size_scale_factor=time_step_size_scale_factor_1,
        length_scale=length_scale_1,
        auto_time_size_calc_solid_zone=auto_time_size_calc_solid_zone,
        time_solid_scale_factor=time_solid_scale_factor,
        time_step_size_for_solid_zone=time_step_size_for_solid_zone,
    )
    return_type = 'object'

class pseudo_time_settings(Group):
    """
    'pseudo_time_settings' child.
    """
    _version = '231'
    fluent_name = 'pseudo-time-settings'
    _python_name = 'pseudo_time_settings'
    child_names = ['verbosity', 'time_step_method']
    _child_classes = dict(
        verbosity=verbosity_8,
        time_step_method=time_step_method,
    )
    return_type = 'object'

class name_3(String):
    """
    'name' child.
    """
    _version = '231'
    fluent_name = 'name'
    _python_name = 'name'
    return_type = 'object'

class remove_dataset(Command):
    """
    Remove dataset.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '231'
    fluent_name = 'remove-dataset'
    _python_name = 'remove_dataset'
    argument_names = ['name']
    _child_classes = dict(
        name=name_3,
    )
    return_type = 'object'

class list_datasets(Command):
    """
    List dataset.
    """
    _version = '231'
    fluent_name = 'list-datasets'
    _python_name = 'list_datasets'
    return_type = 'object'

class data_sampling_options(Group):
    """
    Data sampling options for statistics.
    """
    _version = '231'
    fluent_name = 'data-sampling-options'
    _python_name = 'data_sampling_options'
    command_names = ['remove_dataset', 'list_datasets']
    _child_classes = dict(
        remove_dataset=remove_dataset,
        list_datasets=list_datasets,
    )
    return_type = 'object'

class iter_count_2(Integer):
    """
    Number of iterations.
    """
    _version = '231'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'
    return_type = 'object'

class reporting_interval(Integer):
    """
    Number of solver iterations before returning to scheme.
    """
    _version = '231'
    fluent_name = 'reporting-interval'
    _python_name = 'reporting_interval'
    return_type = 'object'

class residual_verbosity(Integer):
    """
    The residual report verbosity.
    """
    _version = '231'
    fluent_name = 'residual-verbosity'
    _python_name = 'residual_verbosity'
    return_type = 'object'

class time_step_count_1(Real):
    """
    The time step.
    """
    _version = '231'
    fluent_name = 'time-step-count'
    _python_name = 'time_step_count'
    return_type = 'object'

class total_period_count(Integer):
    """
    Number of total periods.
    """
    _version = '231'
    fluent_name = 'total-period-count'
    _python_name = 'total_period_count'
    return_type = 'object'

class max_iter_per_step(Integer):
    """
    Maximum Number of iterations per time step.
    """
    _version = '231'
    fluent_name = 'max-iter-per-step'
    _python_name = 'max_iter_per_step'
    return_type = 'object'

class postprocess(Boolean):
    """
    Enable/Disable Postprocess pollutant solution?.
    """
    _version = '231'
    fluent_name = 'postprocess?'
    _python_name = 'postprocess'
    return_type = 'object'

class post_iter_per_time_step_count(Integer):
    """
    Number of post-processing iterations per time step.
    """
    _version = '231'
    fluent_name = 'post-iter-per-time-step-count'
    _python_name = 'post_iter_per_time_step_count'
    return_type = 'object'

class dual_time_iterate(Command):
    """
    Perform unsteady iterations.
    
    Parameters
    ----------
        total_period_count : int
            Number of total periods.
        time_step_count : int
            Inceremtal number of Time steps.
        total_time_step_count : int
            Total number of Time steps.
        total_time : real
            Total Simulation Time.
        incremental_time : real
            Incremental Time.
        max_iter_per_step : int
            Maximum Number of iterations per time step.
        postprocess : bool
            Enable/Disable Postprocess pollutant solution?.
        post_iter_per_time_step_count : int
            Number of post-processing iterations per time step.
    """
    _version = '231'
    fluent_name = 'dual-time-iterate'
    _python_name = 'dual_time_iterate'
    argument_names = ['total_period_count', 'time_step_count', 'total_time_step_count', 'total_time', 'incremental_time', 'max_iter_per_step', 'postprocess', 'post_iter_per_time_step_count']
    _child_classes = dict(
        total_period_count=total_period_count,
        time_step_count=time_step_count_2,
        total_time_step_count=total_time_step_count,
        total_time=total_time,
        incremental_time=incremental_time,
        max_iter_per_step=max_iter_per_step,
        postprocess=postprocess,
        post_iter_per_time_step_count=post_iter_per_time_step_count,
    )
    return_type = 'object'

class iter_count_3(Integer):
    """
    Incremental number of time steps.
    """
    _version = '231'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'
    return_type = 'object'

class iterate(Command):
    """
    Perform a specified number of iterations.
    
    Parameters
    ----------
        iter_count : int
            Incremental number of time steps.
    """
    _version = '231'
    fluent_name = 'iterate'
    _python_name = 'iterate'
    argument_names = ['iter_count']
    _child_classes = dict(
        iter_count=iter_count_3,
    )
    return_type = 'object'

class calculate(Command):
    """
    'calculate' command.
    """
    _version = '231'
    fluent_name = 'calculate'
    _python_name = 'calculate'
    return_type = 'object'

class end_of_timestep(Boolean):
    """
    'end_of_timestep' child.
    """
    _version = '231'
    fluent_name = 'end-of-timestep?'
    _python_name = 'end_of_timestep'
    return_type = 'object'

class interrupt(Command):
    """
    Interrupt the iterations.
    
    Parameters
    ----------
        end_of_timestep : bool
            'end_of_timestep' child.
    """
    _version = '231'
    fluent_name = 'interrupt'
    _python_name = 'interrupt'
    argument_names = ['end_of_timestep']
    _child_classes = dict(
        end_of_timestep=end_of_timestep,
    )
    return_type = 'object'

class iterating(Query):
    """
    'iterating' query.
    """
    _version = '231'
    fluent_name = 'iterating?'
    _python_name = 'iterating'
    return_type = 'object'

class run_calculation(Group):
    """
    'run_calculation' child.
    """
    _version = '231'
    fluent_name = 'run-calculation'
    _python_name = 'run_calculation'
    child_names = ['adaptive_time_stepping', 'cfl_based_adaptive_time_stepping', 'data_sampling', 'transient_controls', 'pseudo_time_settings', 'data_sampling_options', 'iter_count', 'reporting_interval', 'residual_verbosity', 'time_step_count']
    command_names = ['dual_time_iterate', 'iterate', 'calculate', 'interrupt']
    query_names = ['iterating']
    _child_classes = dict(
        adaptive_time_stepping=adaptive_time_stepping,
        cfl_based_adaptive_time_stepping=cfl_based_adaptive_time_stepping,
        data_sampling=data_sampling,
        transient_controls=transient_controls,
        pseudo_time_settings=pseudo_time_settings,
        data_sampling_options=data_sampling_options,
        iter_count=iter_count_2,
        reporting_interval=reporting_interval,
        residual_verbosity=residual_verbosity,
        time_step_count=time_step_count_1,
        dual_time_iterate=dual_time_iterate,
        iterate=iterate,
        calculate=calculate,
        interrupt=interrupt,
        iterating=iterating,
    )
    return_type = 'object'

class solution(Group):
    """
    'solution' child.
    """
    _version = '231'
    fluent_name = 'solution'
    _python_name = 'solution'
    child_names = ['controls', 'methods', 'report_definitions', 'monitor', 'cell_registers', 'initialization', 'calculation_activity', 'run_calculation']
    _child_classes = dict(
        controls=controls,
        methods=methods,
        report_definitions=report_definitions,
        monitor=monitor,
        cell_registers=cell_registers,
        initialization=initialization,
        calculation_activity=calculation_activity,
        run_calculation=run_calculation,
    )
    return_type = 'object'

class boundary_values(Boolean):
    """
    'boundary_values' child.
    """
    _version = '231'
    fluent_name = 'boundary-values?'
    _python_name = 'boundary_values'
    return_type = 'object'

class contour_lines(Boolean):
    """
    'contour_lines' child.
    """
    _version = '231'
    fluent_name = 'contour-lines?'
    _python_name = 'contour_lines'
    return_type = 'object'

class node_values(Boolean):
    """
    'node_values' child.
    """
    _version = '231'
    fluent_name = 'node-values?'
    _python_name = 'node_values'
    return_type = 'object'

class surfaces_list(StringList, AllowedValuesMixin):
    """
    'surfaces_list' child.
    """
    _version = '231'
    fluent_name = 'surfaces-list'
    _python_name = 'surfaces_list'
    return_type = 'object'

class global_range(Boolean):
    """
    'global_range' child.
    """
    _version = '231'
    fluent_name = 'global-range?'
    _python_name = 'global_range'
    return_type = 'object'

class auto_range_on(Group):
    """
    'auto_range_on' child.
    """
    _version = '231'
    fluent_name = 'auto-range-on'
    _python_name = 'auto_range_on'
    child_names = ['global_range']
    _child_classes = dict(
        global_range=global_range,
    )
    return_type = 'object'

class clip_to_range(Boolean):
    """
    'clip_to_range' child.
    """
    _version = '231'
    fluent_name = 'clip-to-range?'
    _python_name = 'clip_to_range'
    return_type = 'object'

class auto_range_off(Group):
    """
    'auto_range_off' child.
    """
    _version = '231'
    fluent_name = 'auto-range-off'
    _python_name = 'auto_range_off'
    child_names = ['clip_to_range', 'minimum', 'maximum']
    _child_classes = dict(
        clip_to_range=clip_to_range,
        minimum=minimum_1,
        maximum=maximum_1,
    )
    return_type = 'object'

class range_option(Group):
    """
    'range_option' child.
    """
    _version = '231'
    fluent_name = 'range-option'
    _python_name = 'range_option'
    child_names = ['option', 'auto_range_on', 'auto_range_off']
    _child_classes = dict(
        option=option_3,
        auto_range_on=auto_range_on,
        auto_range_off=auto_range_off,
    )
    return_type = 'object'

class smooth(Boolean):
    """
    'smooth' child.
    """
    _version = '231'
    fluent_name = 'smooth'
    _python_name = 'smooth'
    return_type = 'object'

class banded(Group):
    """
    'banded' child.
    """
    _version = '231'
    fluent_name = 'banded'
    _python_name = 'banded'
    return_type = 'object'

class coloring(Group):
    """
    'coloring' child.
    """
    _version = '231'
    fluent_name = 'coloring'
    _python_name = 'coloring'
    child_names = ['option', 'smooth', 'banded']
    _child_classes = dict(
        option=option_3,
        smooth=smooth,
        banded=banded,
    )
    return_type = 'object'

class visible(Boolean):
    """
    'visible' child.
    """
    _version = '231'
    fluent_name = 'visible?'
    _python_name = 'visible'
    return_type = 'object'

class size(Integer):
    """
    'size' child.
    """
    _version = '231'
    fluent_name = 'size'
    _python_name = 'size'
    return_type = 'object'

class log_scale(Boolean):
    """
    'log_scale' child.
    """
    _version = '231'
    fluent_name = 'log-scale?'
    _python_name = 'log_scale'
    return_type = 'object'

class format(String, AllowedValuesMixin):
    """
    'format' child.
    """
    _version = '231'
    fluent_name = 'format'
    _python_name = 'format'
    return_type = 'object'

class user_skip(Integer):
    """
    'user_skip' child.
    """
    _version = '231'
    fluent_name = 'user-skip'
    _python_name = 'user_skip'
    return_type = 'object'

class show_all(Boolean):
    """
    'show_all' child.
    """
    _version = '231'
    fluent_name = 'show-all'
    _python_name = 'show_all'
    return_type = 'object'

class position(Integer):
    """
    'position' child.
    """
    _version = '231'
    fluent_name = 'position'
    _python_name = 'position'
    return_type = 'object'

class font_name(String, AllowedValuesMixin):
    """
    'font_name' child.
    """
    _version = '231'
    fluent_name = 'font-name'
    _python_name = 'font_name'
    return_type = 'object'

class font_automatic(Boolean):
    """
    'font_automatic' child.
    """
    _version = '231'
    fluent_name = 'font-automatic'
    _python_name = 'font_automatic'
    return_type = 'object'

class font_size(Real):
    """
    'font_size' child.
    """
    _version = '231'
    fluent_name = 'font-size'
    _python_name = 'font_size'
    return_type = 'object'

class length_1(Real):
    """
    'length' child.
    """
    _version = '231'
    fluent_name = 'length'
    _python_name = 'length'
    return_type = 'object'

class width(Real):
    """
    'width' child.
    """
    _version = '231'
    fluent_name = 'width'
    _python_name = 'width'
    return_type = 'object'

class color_map(Group):
    """
    'color_map' child.
    """
    _version = '231'
    fluent_name = 'color-map'
    _python_name = 'color_map'
    child_names = ['visible', 'size', 'color', 'log_scale', 'format', 'user_skip', 'show_all', 'position', 'font_name', 'font_automatic', 'font_size', 'length', 'width']
    _child_classes = dict(
        visible=visible,
        size=size,
        color=color,
        log_scale=log_scale,
        format=format,
        user_skip=user_skip,
        show_all=show_all,
        position=position,
        font_name=font_name,
        font_automatic=font_automatic,
        font_size=font_size,
        length=length_1,
        width=width,
    )
    return_type = 'object'

class mesh_object(String, AllowedValuesMixin):
    """
    'mesh_object' child.
    """
    _version = '231'
    fluent_name = 'mesh-object'
    _python_name = 'mesh_object'
    return_type = 'object'

class display_state_name(String, AllowedValuesMixin):
    """
    'display_state_name' child.
    """
    _version = '231'
    fluent_name = 'display-state-name'
    _python_name = 'display_state_name'
    return_type = 'object'

class deformation(Boolean):
    """
    'deformation' child.
    """
    _version = '231'
    fluent_name = 'deformation?'
    _python_name = 'deformation'
    return_type = 'object'

class deformation_scale(Real):
    """
    'deformation_scale' child.
    """
    _version = '231'
    fluent_name = 'deformation-scale'
    _python_name = 'deformation_scale'
    return_type = 'object'

class contour_child(Group):
    """
    'child_object_type' of contour.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'contour_child'
    child_names = ['name', 'field', 'filled', 'boundary_values', 'contour_lines', 'node_values', 'surfaces_list', 'range_option', 'coloring', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name', 'physics', 'geometry', 'surfaces', 'deformation', 'deformation_scale']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        field=field,
        filled=filled,
        boundary_values=boundary_values,
        contour_lines=contour_lines,
        node_values=node_values,
        surfaces_list=surfaces_list,
        range_option=range_option,
        coloring=coloring,
        color_map=color_map,
        draw_mesh=draw_mesh,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        physics=physics,
        geometry=geometry_3,
        surfaces=surfaces,
        deformation=deformation,
        deformation_scale=deformation_scale,
        display=display_2,
    )
    return_type = 'object'

class contour(NamedObject[contour_child], CreatableNamedObjectMixinOld[contour_child]):
    """
    'contour' child.
    """
    _version = '231'
    fluent_name = 'contour'
    _python_name = 'contour'
    command_names = ['display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        display=display_1,
        copy=copy_3,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = contour_child
    return_type = 'object'

class nodes(Boolean):
    """
    'nodes' child.
    """
    _version = '231'
    fluent_name = 'nodes?'
    _python_name = 'nodes'
    return_type = 'object'

class edges(Boolean):
    """
    'edges' child.
    """
    _version = '231'
    fluent_name = 'edges?'
    _python_name = 'edges'
    return_type = 'object'

class faces(Boolean):
    """
    'faces' child.
    """
    _version = '231'
    fluent_name = 'faces?'
    _python_name = 'faces'
    return_type = 'object'

class partitions(Boolean):
    """
    'partitions' child.
    """
    _version = '231'
    fluent_name = 'partitions?'
    _python_name = 'partitions'
    return_type = 'object'

class overset_2(Boolean):
    """
    'overset' child.
    """
    _version = '231'
    fluent_name = 'overset?'
    _python_name = 'overset'
    return_type = 'object'

class gap(Boolean):
    """
    'gap' child.
    """
    _version = '231'
    fluent_name = 'gap?'
    _python_name = 'gap'
    return_type = 'object'

class options_5(Group):
    """
    'options' child.
    """
    _version = '231'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['nodes', 'edges', 'faces', 'partitions', 'overset', 'gap']
    _child_classes = dict(
        nodes=nodes,
        edges=edges,
        faces=faces,
        partitions=partitions,
        overset=overset_2,
        gap=gap,
    )
    return_type = 'object'

class all(Boolean):
    """
    'all' child.
    """
    _version = '231'
    fluent_name = 'all'
    _python_name = 'all'
    return_type = 'object'

class feature_angle(Real):
    """
    'feature_angle' child.
    """
    _version = '231'
    fluent_name = 'feature-angle'
    _python_name = 'feature_angle'
    return_type = 'object'

class feature(Group):
    """
    'feature' child.
    """
    _version = '231'
    fluent_name = 'feature'
    _python_name = 'feature'
    child_names = ['feature_angle']
    _child_classes = dict(
        feature_angle=feature_angle,
    )
    return_type = 'object'

class outline(Boolean):
    """
    'outline' child.
    """
    _version = '231'
    fluent_name = 'outline'
    _python_name = 'outline'
    return_type = 'object'

class edge_type(Group):
    """
    'edge_type' child.
    """
    _version = '231'
    fluent_name = 'edge-type'
    _python_name = 'edge_type'
    child_names = ['option', 'all', 'feature', 'outline']
    _child_classes = dict(
        option=option_3,
        all=all,
        feature=feature,
        outline=outline,
    )
    return_type = 'object'

class shrink_factor(Real):
    """
    'shrink_factor' child.
    """
    _version = '231'
    fluent_name = 'shrink-factor'
    _python_name = 'shrink_factor'
    return_type = 'object'

class type_3(Group):
    """
    'type' child.
    """
    _version = '231'
    fluent_name = 'type'
    _python_name = 'type'
    return_type = 'object'

class id(Boolean):
    """
    'id' child.
    """
    _version = '231'
    fluent_name = 'id'
    _python_name = 'id'
    return_type = 'object'

class normal(Boolean):
    """
    'normal' child.
    """
    _version = '231'
    fluent_name = 'normal'
    _python_name = 'normal'
    return_type = 'object'

class partition(Boolean):
    """
    'partition' child.
    """
    _version = '231'
    fluent_name = 'partition'
    _python_name = 'partition'
    return_type = 'object'

class automatic(Group):
    """
    'automatic' child.
    """
    _version = '231'
    fluent_name = 'automatic'
    _python_name = 'automatic'
    child_names = ['option', 'type', 'id', 'normal', 'partition']
    _child_classes = dict(
        option=option_3,
        type=type_3,
        id=id,
        normal=normal,
        partition=partition,
    )
    return_type = 'object'

class faces_1(String, AllowedValuesMixin):
    """
    'faces' child.
    """
    _version = '231'
    fluent_name = 'faces'
    _python_name = 'faces'
    return_type = 'object'

class edges_1(String, AllowedValuesMixin):
    """
    'edges' child.
    """
    _version = '231'
    fluent_name = 'edges'
    _python_name = 'edges'
    return_type = 'object'

class nodes_1(String, AllowedValuesMixin):
    """
    'nodes' child.
    """
    _version = '231'
    fluent_name = 'nodes'
    _python_name = 'nodes'
    return_type = 'object'

class material_color(String, AllowedValuesMixin):
    """
    'material_color' child.
    """
    _version = '231'
    fluent_name = 'material-color'
    _python_name = 'material_color'
    return_type = 'object'

class manual(Group):
    """
    'manual' child.
    """
    _version = '231'
    fluent_name = 'manual'
    _python_name = 'manual'
    child_names = ['faces', 'edges', 'nodes', 'material_color']
    _child_classes = dict(
        faces=faces_1,
        edges=edges_1,
        nodes=nodes_1,
        material_color=material_color,
    )
    return_type = 'object'

class coloring_1(Group):
    """
    'coloring' child.
    """
    _version = '231'
    fluent_name = 'coloring'
    _python_name = 'coloring'
    child_names = ['option', 'automatic', 'manual']
    _child_classes = dict(
        option=option_3,
        automatic=automatic,
        manual=manual,
    )
    return_type = 'object'

class mesh_2_child(Group):
    """
    'child_object_type' of mesh.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'mesh_child'
    child_names = ['name', 'options', 'edge_type', 'shrink_factor', 'surfaces_list', 'coloring', 'display_state_name', 'physics', 'geometry', 'surfaces']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        options=options_5,
        edge_type=edge_type,
        shrink_factor=shrink_factor,
        surfaces_list=surfaces_list,
        coloring=coloring_1,
        display_state_name=display_state_name,
        physics=physics,
        geometry=geometry_3,
        surfaces=surfaces,
        display=display_2,
    )
    return_type = 'object'

class mesh_2(NamedObject[mesh_2_child], CreatableNamedObjectMixinOld[mesh_2_child]):
    """
    'mesh' child.
    """
    _version = '231'
    fluent_name = 'mesh'
    _python_name = 'mesh'
    command_names = ['display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        display=display_1,
        copy=copy_3,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = mesh_2_child
    return_type = 'object'

class vector_field(String, AllowedValuesMixin):
    """
    'vector_field' child.
    """
    _version = '231'
    fluent_name = 'vector-field'
    _python_name = 'vector_field'
    return_type = 'object'

class auto_scale(Boolean):
    """
    'auto_scale' child.
    """
    _version = '231'
    fluent_name = 'auto-scale?'
    _python_name = 'auto_scale'
    return_type = 'object'

class scale_f(Real):
    """
    'scale_f' child.
    """
    _version = '231'
    fluent_name = 'scale-f'
    _python_name = 'scale_f'
    return_type = 'object'

class scale_1(Group):
    """
    'scale' child.
    """
    _version = '231'
    fluent_name = 'scale'
    _python_name = 'scale'
    child_names = ['auto_scale', 'scale_f']
    _child_classes = dict(
        auto_scale=auto_scale,
        scale_f=scale_f,
    )
    return_type = 'object'

class style(String, AllowedValuesMixin):
    """
    'style' child.
    """
    _version = '231'
    fluent_name = 'style'
    _python_name = 'style'
    return_type = 'object'

class skip(Integer):
    """
    'skip' child.
    """
    _version = '231'
    fluent_name = 'skip'
    _python_name = 'skip'
    return_type = 'object'

class in_plane(Boolean):
    """
    'in_plane' child.
    """
    _version = '231'
    fluent_name = 'in-plane?'
    _python_name = 'in_plane'
    return_type = 'object'

class fixed_length(Boolean):
    """
    'fixed_length' child.
    """
    _version = '231'
    fluent_name = 'fixed-length?'
    _python_name = 'fixed_length'
    return_type = 'object'

class x_comp(Boolean):
    """
    'x_comp' child.
    """
    _version = '231'
    fluent_name = 'x-comp?'
    _python_name = 'x_comp'
    return_type = 'object'

class y_comp(Boolean):
    """
    'y_comp' child.
    """
    _version = '231'
    fluent_name = 'y-comp?'
    _python_name = 'y_comp'
    return_type = 'object'

class z_comp(Boolean):
    """
    'z_comp' child.
    """
    _version = '231'
    fluent_name = 'z-comp?'
    _python_name = 'z_comp'
    return_type = 'object'

class scale_head(Real):
    """
    'scale_head' child.
    """
    _version = '231'
    fluent_name = 'scale-head'
    _python_name = 'scale_head'
    return_type = 'object'

class vector_opt(Group):
    """
    'vector_opt' child.
    """
    _version = '231'
    fluent_name = 'vector-opt'
    _python_name = 'vector_opt'
    child_names = ['in_plane', 'fixed_length', 'x_comp', 'y_comp', 'z_comp', 'scale_head', 'color']
    _child_classes = dict(
        in_plane=in_plane,
        fixed_length=fixed_length,
        x_comp=x_comp,
        y_comp=y_comp,
        z_comp=z_comp,
        scale_head=scale_head,
        color=color,
    )
    return_type = 'object'

class vector_child(Group):
    """
    'child_object_type' of vector.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'vector_child'
    child_names = ['name', 'field', 'vector_field', 'surfaces_list', 'scale', 'style', 'skip', 'vector_opt', 'range_option', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name', 'physics', 'geometry', 'surfaces']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        field=field,
        vector_field=vector_field,
        surfaces_list=surfaces_list,
        scale=scale_1,
        style=style,
        skip=skip,
        vector_opt=vector_opt,
        range_option=range_option,
        color_map=color_map,
        draw_mesh=draw_mesh,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        physics=physics,
        geometry=geometry_3,
        surfaces=surfaces,
        display=display_2,
    )
    return_type = 'object'

class vector(NamedObject[vector_child], CreatableNamedObjectMixinOld[vector_child]):
    """
    'vector' child.
    """
    _version = '231'
    fluent_name = 'vector'
    _python_name = 'vector'
    command_names = ['display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        display=display_1,
        copy=copy_3,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = vector_child
    return_type = 'object'

class uid(String, AllowedValuesMixin):
    """
    'uid' child.
    """
    _version = '231'
    fluent_name = 'uid'
    _python_name = 'uid'
    return_type = 'object'

class oil_flow(Boolean):
    """
    'oil_flow' child.
    """
    _version = '231'
    fluent_name = 'oil-flow'
    _python_name = 'oil_flow'
    return_type = 'object'

class reverse(Boolean):
    """
    'reverse' child.
    """
    _version = '231'
    fluent_name = 'reverse'
    _python_name = 'reverse'
    return_type = 'object'

class node_values_1(Boolean):
    """
    'node_values' child.
    """
    _version = '231'
    fluent_name = 'node-values'
    _python_name = 'node_values'
    return_type = 'object'

class relative_1(Boolean):
    """
    'relative' child.
    """
    _version = '231'
    fluent_name = 'relative'
    _python_name = 'relative'
    return_type = 'object'

class options_6(Group):
    """
    'options' child.
    """
    _version = '231'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['oil_flow', 'reverse', 'node_values', 'relative']
    _child_classes = dict(
        oil_flow=oil_flow,
        reverse=reverse,
        node_values=node_values_1,
        relative=relative_1,
    )
    return_type = 'object'

class auto_range(Group):
    """
    'auto_range' child.
    """
    _version = '231'
    fluent_name = 'auto-range'
    _python_name = 'auto_range'
    return_type = 'object'

class min_value(Real):
    """
    'min_value' child.
    """
    _version = '231'
    fluent_name = 'min-value'
    _python_name = 'min_value'
    return_type = 'object'

class max_value(Real):
    """
    'max_value' child.
    """
    _version = '231'
    fluent_name = 'max-value'
    _python_name = 'max_value'
    return_type = 'object'

class clip_to_range_1(Group):
    """
    'clip_to_range' child.
    """
    _version = '231'
    fluent_name = 'clip-to-range'
    _python_name = 'clip_to_range'
    child_names = ['min_value', 'max_value']
    _child_classes = dict(
        min_value=min_value,
        max_value=max_value,
    )
    return_type = 'object'

class range(Group):
    """
    'range' child.
    """
    _version = '231'
    fluent_name = 'range'
    _python_name = 'range'
    child_names = ['option', 'auto_range', 'clip_to_range']
    _child_classes = dict(
        option=option_3,
        auto_range=auto_range,
        clip_to_range=clip_to_range_1,
    )
    return_type = 'object'

class line_width(Real):
    """
    'line_width' child.
    """
    _version = '231'
    fluent_name = 'line-width'
    _python_name = 'line_width'
    return_type = 'object'

class arrow_space(Real):
    """
    'arrow_space' child.
    """
    _version = '231'
    fluent_name = 'arrow-space'
    _python_name = 'arrow_space'
    return_type = 'object'

class arrow_scale(Real):
    """
    'arrow_scale' child.
    """
    _version = '231'
    fluent_name = 'arrow-scale'
    _python_name = 'arrow_scale'
    return_type = 'object'

class sphere_size(Real):
    """
    'sphere_size' child.
    """
    _version = '231'
    fluent_name = 'sphere-size'
    _python_name = 'sphere_size'
    return_type = 'object'

class sphere_lod(Integer):
    """
    'sphere_lod' child.
    """
    _version = '231'
    fluent_name = 'sphere-lod'
    _python_name = 'sphere_lod'
    return_type = 'object'

class scalefactor(Real):
    """
    'scalefactor' child.
    """
    _version = '231'
    fluent_name = 'scalefactor'
    _python_name = 'scalefactor'
    return_type = 'object'

class ribbon(Group):
    """
    'ribbon' child.
    """
    _version = '231'
    fluent_name = 'ribbon'
    _python_name = 'ribbon'
    child_names = ['field', 'scalefactor']
    _child_classes = dict(
        field=field,
        scalefactor=scalefactor,
    )
    return_type = 'object'

class style_attribute(Group):
    """
    'style_attribute' child.
    """
    _version = '231'
    fluent_name = 'style-attribute'
    _python_name = 'style_attribute'
    child_names = ['style', 'line_width', 'arrow_space', 'arrow_scale', 'marker_size', 'sphere_size', 'sphere_lod', 'radius', 'ribbon']
    _child_classes = dict(
        style=style,
        line_width=line_width,
        arrow_space=arrow_space,
        arrow_scale=arrow_scale,
        marker_size=marker_size,
        sphere_size=sphere_size,
        sphere_lod=sphere_lod,
        radius=radius,
        ribbon=ribbon,
    )
    return_type = 'object'

class step_size(Real):
    """
    'step_size' child.
    """
    _version = '231'
    fluent_name = 'step-size'
    _python_name = 'step_size'
    return_type = 'object'

class tolerance_1(Real):
    """
    'tolerance' child.
    """
    _version = '231'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'
    return_type = 'object'

class accuracy_control_1(Group):
    """
    'accuracy_control' child.
    """
    _version = '231'
    fluent_name = 'accuracy-control'
    _python_name = 'accuracy_control'
    child_names = ['option', 'step_size', 'tolerance']
    _child_classes = dict(
        option=option_3,
        step_size=step_size,
        tolerance=tolerance_1,
    )
    return_type = 'object'

class x_axis_function(String, AllowedValuesMixin):
    """
    'x_axis_function' child.
    """
    _version = '231'
    fluent_name = 'x-axis-function'
    _python_name = 'x_axis_function'
    return_type = 'object'

class plot_2(Group):
    """
    'plot' child.
    """
    _version = '231'
    fluent_name = 'plot'
    _python_name = 'plot'
    child_names = ['x_axis_function', 'enabled']
    _child_classes = dict(
        x_axis_function=x_axis_function,
        enabled=enabled_2,
    )
    return_type = 'object'

class step(Integer):
    """
    'step' child.
    """
    _version = '231'
    fluent_name = 'step'
    _python_name = 'step'
    return_type = 'object'

class coarsen(Integer):
    """
    'coarsen' child.
    """
    _version = '231'
    fluent_name = 'coarsen'
    _python_name = 'coarsen'
    return_type = 'object'

class onzone(StringList, AllowedValuesMixin):
    """
    'onzone' child.
    """
    _version = '231'
    fluent_name = 'onzone'
    _python_name = 'onzone'
    return_type = 'object'

class onphysics(StringList, AllowedValuesMixin):
    """
    'onphysics' child.
    """
    _version = '231'
    fluent_name = 'onphysics'
    _python_name = 'onphysics'
    return_type = 'object'

class velocity_domain(String, AllowedValuesMixin):
    """
    'velocity_domain' child.
    """
    _version = '231'
    fluent_name = 'velocity-domain'
    _python_name = 'velocity_domain'
    return_type = 'object'

class x_format(String, AllowedValuesMixin):
    """
    'x_format' child.
    """
    _version = '231'
    fluent_name = 'x-format'
    _python_name = 'x_format'
    return_type = 'object'

class x_axis_precision(Integer):
    """
    'x_axis_precision' child.
    """
    _version = '231'
    fluent_name = 'x-axis-precision'
    _python_name = 'x_axis_precision'
    return_type = 'object'

class y_format(String, AllowedValuesMixin):
    """
    'y_format' child.
    """
    _version = '231'
    fluent_name = 'y-format'
    _python_name = 'y_format'
    return_type = 'object'

class y_axis_precision(Integer):
    """
    'y_axis_precision' child.
    """
    _version = '231'
    fluent_name = 'y-axis-precision'
    _python_name = 'y_axis_precision'
    return_type = 'object'

class numbers(Group):
    """
    'numbers' child.
    """
    _version = '231'
    fluent_name = 'numbers'
    _python_name = 'numbers'
    child_names = ['x_format', 'x_axis_precision', 'y_format', 'y_axis_precision']
    _child_classes = dict(
        x_format=x_format,
        x_axis_precision=x_axis_precision,
        y_format=y_format,
        y_axis_precision=y_axis_precision,
    )
    return_type = 'object'

class draw_major_rules(Boolean):
    """
    'draw_major_rules' child.
    """
    _version = '231'
    fluent_name = 'draw-major-rules?'
    _python_name = 'draw_major_rules'
    return_type = 'object'

class major_rule_weight(Real):
    """
    'major_rule_weight' child.
    """
    _version = '231'
    fluent_name = 'major-rule-weight'
    _python_name = 'major_rule_weight'
    return_type = 'object'

class major_rule_line_color(String, AllowedValuesMixin):
    """
    'major_rule_line_color' child.
    """
    _version = '231'
    fluent_name = 'major-rule-line-color'
    _python_name = 'major_rule_line_color'
    return_type = 'object'

class draw_minor_rules(Boolean):
    """
    'draw_minor_rules' child.
    """
    _version = '231'
    fluent_name = 'draw-minor-rules?'
    _python_name = 'draw_minor_rules'
    return_type = 'object'

class minor_rule_weight(Real):
    """
    'minor_rule_weight' child.
    """
    _version = '231'
    fluent_name = 'minor-rule-weight'
    _python_name = 'minor_rule_weight'
    return_type = 'object'

class minor_rule_line_color(String, AllowedValuesMixin):
    """
    'minor_rule_line_color' child.
    """
    _version = '231'
    fluent_name = 'minor-rule-line-color'
    _python_name = 'minor_rule_line_color'
    return_type = 'object'

class x_axis_1(Group):
    """
    'x_axis' child.
    """
    _version = '231'
    fluent_name = 'x-axis'
    _python_name = 'x_axis'
    child_names = ['draw_major_rules', 'major_rule_weight', 'major_rule_line_color', 'draw_minor_rules', 'minor_rule_weight', 'minor_rule_line_color']
    _child_classes = dict(
        draw_major_rules=draw_major_rules,
        major_rule_weight=major_rule_weight,
        major_rule_line_color=major_rule_line_color,
        draw_minor_rules=draw_minor_rules,
        minor_rule_weight=minor_rule_weight,
        minor_rule_line_color=minor_rule_line_color,
    )
    return_type = 'object'

class y_axis_1(Group):
    """
    'y_axis' child.
    """
    _version = '231'
    fluent_name = 'y-axis'
    _python_name = 'y_axis'
    child_names = ['draw_major_rules', 'major_rule_weight', 'major_rule_line_color', 'draw_minor_rules', 'minor_rule_weight', 'minor_rule_line_color']
    _child_classes = dict(
        draw_major_rules=draw_major_rules,
        major_rule_weight=major_rule_weight,
        major_rule_line_color=major_rule_line_color,
        draw_minor_rules=draw_minor_rules,
        minor_rule_weight=minor_rule_weight,
        minor_rule_line_color=minor_rule_line_color,
    )
    return_type = 'object'

class rules(Group):
    """
    'rules' child.
    """
    _version = '231'
    fluent_name = 'rules'
    _python_name = 'rules'
    child_names = ['x_axis', 'y_axis']
    _child_classes = dict(
        x_axis=x_axis_1,
        y_axis=y_axis_1,
    )
    return_type = 'object'

class x_axis_2(Boolean):
    """
    'x_axis' child.
    """
    _version = '231'
    fluent_name = 'x-axis?'
    _python_name = 'x_axis'
    return_type = 'object'

class y_axis_2(Boolean):
    """
    'y_axis' child.
    """
    _version = '231'
    fluent_name = 'y-axis?'
    _python_name = 'y_axis'
    return_type = 'object'

class log_scale_1(Group):
    """
    'log_scale' child.
    """
    _version = '231'
    fluent_name = 'log-scale'
    _python_name = 'log_scale'
    child_names = ['x_axis', 'y_axis']
    _child_classes = dict(
        x_axis=x_axis_2,
        y_axis=y_axis_2,
    )
    return_type = 'object'

class x_axis_min(Real):
    """
    'x_axis_min' child.
    """
    _version = '231'
    fluent_name = 'x-axis-min'
    _python_name = 'x_axis_min'
    return_type = 'object'

class x_axis_max(Real):
    """
    'x_axis_max' child.
    """
    _version = '231'
    fluent_name = 'x-axis-max'
    _python_name = 'x_axis_max'
    return_type = 'object'

class y_axis_min(Real):
    """
    'y_axis_min' child.
    """
    _version = '231'
    fluent_name = 'y-axis-min'
    _python_name = 'y_axis_min'
    return_type = 'object'

class y_axis_max(Real):
    """
    'y_axis_max' child.
    """
    _version = '231'
    fluent_name = 'y-axis-max'
    _python_name = 'y_axis_max'
    return_type = 'object'

class auto_scale_1(Group):
    """
    'auto_scale' child.
    """
    _version = '231'
    fluent_name = 'auto-scale'
    _python_name = 'auto_scale'
    child_names = ['x_axis', 'x_axis_min', 'x_axis_max', 'y_axis', 'y_axis_min', 'y_axis_max']
    _child_classes = dict(
        x_axis=x_axis_2,
        x_axis_min=x_axis_min,
        x_axis_max=x_axis_max,
        y_axis=y_axis_2,
        y_axis_min=y_axis_min,
        y_axis_max=y_axis_max,
    )
    return_type = 'object'

class x_axis_3(String, AllowedValuesMixin):
    """
    'x_axis' child.
    """
    _version = '231'
    fluent_name = 'x-axis'
    _python_name = 'x_axis'
    return_type = 'object'

class y_axis_3(String, AllowedValuesMixin):
    """
    'y_axis' child.
    """
    _version = '231'
    fluent_name = 'y-axis'
    _python_name = 'y_axis'
    return_type = 'object'

class labels(Group):
    """
    'labels' child.
    """
    _version = '231'
    fluent_name = 'labels'
    _python_name = 'labels'
    child_names = ['x_axis', 'y_axis']
    _child_classes = dict(
        x_axis=x_axis_3,
        y_axis=y_axis_3,
    )
    return_type = 'object'

class axes(Group):
    """
    'axes' child.
    """
    _version = '231'
    fluent_name = 'axes'
    _python_name = 'axes'
    child_names = ['numbers', 'rules', 'log_scale', 'auto_scale', 'labels']
    _child_classes = dict(
        numbers=numbers,
        rules=rules,
        log_scale=log_scale_1,
        auto_scale=auto_scale_1,
        labels=labels,
    )
    return_type = 'object'

class pattern(String, AllowedValuesMixin):
    """
    'pattern' child.
    """
    _version = '231'
    fluent_name = 'pattern'
    _python_name = 'pattern'
    return_type = 'object'

class weight(Real):
    """
    'weight' child.
    """
    _version = '231'
    fluent_name = 'weight'
    _python_name = 'weight'
    return_type = 'object'

class lines_child(Group):
    """
    'child_object_type' of lines.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'lines_child'
    child_names = ['pattern', 'weight', 'color']
    _child_classes = dict(
        pattern=pattern,
        weight=weight,
        color=color,
    )
    return_type = 'object'

class lines(ListObject[lines_child]):
    """
    'lines' child.
    """
    _version = '231'
    fluent_name = 'lines'
    _python_name = 'lines'
    child_object_type = lines_child
    return_type = 'object'

class symbol(String, AllowedValuesMixin):
    """
    'symbol' child.
    """
    _version = '231'
    fluent_name = 'symbol'
    _python_name = 'symbol'
    return_type = 'object'

class size_1(String):
    """
    'size' child.
    """
    _version = '231'
    fluent_name = 'size'
    _python_name = 'size'
    return_type = 'object'

class markers_child(Group):
    """
    'child_object_type' of markers.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'markers_child'
    child_names = ['symbol', 'size', 'color']
    _child_classes = dict(
        symbol=symbol,
        size=size_1,
        color=color,
    )
    return_type = 'object'

class markers(ListObject[markers_child]):
    """
    'markers' child.
    """
    _version = '231'
    fluent_name = 'markers'
    _python_name = 'markers'
    child_object_type = markers_child
    return_type = 'object'

class curves(Group):
    """
    'curves' child.
    """
    _version = '231'
    fluent_name = 'curves'
    _python_name = 'curves'
    child_names = ['lines', 'markers']
    _child_classes = dict(
        lines=lines,
        markers=markers,
    )
    return_type = 'object'

class pathline_child(Group):
    """
    'child_object_type' of pathline.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'pathline_child'
    child_names = ['name', 'uid', 'options', 'range', 'style_attribute', 'accuracy_control', 'plot', 'step', 'skip', 'coarsen', 'onzone', 'onphysics', 'field', 'surfaces_list', 'velocity_domain', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name', 'physics', 'geometry', 'surfaces', 'axes', 'curves']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        uid=uid,
        options=options_6,
        range=range,
        style_attribute=style_attribute,
        accuracy_control=accuracy_control_1,
        plot=plot_2,
        step=step,
        skip=skip,
        coarsen=coarsen,
        onzone=onzone,
        onphysics=onphysics,
        field=field,
        surfaces_list=surfaces_list,
        velocity_domain=velocity_domain,
        color_map=color_map,
        draw_mesh=draw_mesh,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        physics=physics,
        geometry=geometry_3,
        surfaces=surfaces,
        axes=axes,
        curves=curves,
        display=display_2,
    )
    return_type = 'object'

class pathline(NamedObject[pathline_child], CreatableNamedObjectMixinOld[pathline_child]):
    """
    'pathline' child.
    """
    _version = '231'
    fluent_name = 'pathline'
    _python_name = 'pathline'
    command_names = ['display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        display=display_1,
        copy=copy_3,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = pathline_child
    return_type = 'object'

class options_7(Group):
    """
    'options' child.
    """
    _version = '231'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['node_values']
    _child_classes = dict(
        node_values=node_values_1,
    )
    return_type = 'object'

class inside_1(Boolean):
    """
    'inside' child.
    """
    _version = '231'
    fluent_name = 'inside'
    _python_name = 'inside'
    return_type = 'object'

class outside(Boolean):
    """
    'outside' child.
    """
    _version = '231'
    fluent_name = 'outside'
    _python_name = 'outside'
    return_type = 'object'

class options_8(Group):
    """
    'options' child.
    """
    _version = '231'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['option', 'inside', 'outside']
    _child_classes = dict(
        option=option_3,
        inside=inside_1,
        outside=outside,
    )
    return_type = 'object'

class filter_minimum(Real):
    """
    'filter_minimum' child.
    """
    _version = '231'
    fluent_name = 'filter-minimum'
    _python_name = 'filter_minimum'
    return_type = 'object'

class filter_maximum(Real):
    """
    'filter_maximum' child.
    """
    _version = '231'
    fluent_name = 'filter-maximum'
    _python_name = 'filter_maximum'
    return_type = 'object'

class filter_settings(Group):
    """
    'filter_settings' child.
    """
    _version = '231'
    fluent_name = 'filter-settings'
    _python_name = 'filter_settings'
    child_names = ['field', 'options', 'enabled', 'filter_minimum', 'filter_maximum']
    _child_classes = dict(
        field=field,
        options=options_8,
        enabled=enabled_2,
        filter_minimum=filter_minimum,
        filter_maximum=filter_maximum,
    )
    return_type = 'object'

class ribbon_settings(Group):
    """
    'ribbon_settings' child.
    """
    _version = '231'
    fluent_name = 'ribbon-settings'
    _python_name = 'ribbon_settings'
    child_names = ['field', 'scalefactor']
    _child_classes = dict(
        field=field,
        scalefactor=scalefactor,
    )
    return_type = 'object'

class scale_2(Real):
    """
    'scale' child.
    """
    _version = '231'
    fluent_name = 'scale'
    _python_name = 'scale'
    return_type = 'object'

class constant_1(Group):
    """
    'constant' child.
    """
    _version = '231'
    fluent_name = 'constant'
    _python_name = 'constant'
    child_names = ['diameter']
    _child_classes = dict(
        diameter=diameter_1,
    )
    return_type = 'object'

class size_by(String, AllowedValuesMixin):
    """
    'size_by' child.
    """
    _version = '231'
    fluent_name = 'size-by'
    _python_name = 'size_by'
    return_type = 'object'

class variable_1(Group):
    """
    'variable' child.
    """
    _version = '231'
    fluent_name = 'variable'
    _python_name = 'variable'
    child_names = ['size_by', 'range']
    _child_classes = dict(
        size_by=size_by,
        range=range,
    )
    return_type = 'object'

class options_9(Group):
    """
    'options' child.
    """
    _version = '231'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['option', 'constant', 'variable']
    _child_classes = dict(
        option=option_3,
        constant=constant_1,
        variable=variable_1,
    )
    return_type = 'object'

class sphere_settings(Group):
    """
    'sphere_settings' child.
    """
    _version = '231'
    fluent_name = 'sphere-settings'
    _python_name = 'sphere_settings'
    child_names = ['scale', 'sphere_lod', 'options']
    _child_classes = dict(
        scale=scale_2,
        sphere_lod=sphere_lod,
        options=options_9,
    )
    return_type = 'object'

class style_attribute_1(Group):
    """
    'style_attribute' child.
    """
    _version = '231'
    fluent_name = 'style-attribute'
    _python_name = 'style_attribute'
    child_names = ['style', 'line_width', 'arrow_space', 'arrow_scale', 'marker_size', 'sphere_size', 'sphere_lod', 'radius', 'ribbon_settings', 'sphere_settings']
    _child_classes = dict(
        style=style,
        line_width=line_width,
        arrow_space=arrow_space,
        arrow_scale=arrow_scale,
        marker_size=marker_size,
        sphere_size=sphere_size,
        sphere_lod=sphere_lod,
        radius=radius,
        ribbon_settings=ribbon_settings,
        sphere_settings=sphere_settings,
    )
    return_type = 'object'

class constant_length(Real):
    """
    'constant_length' child.
    """
    _version = '231'
    fluent_name = 'constant-length'
    _python_name = 'constant_length'
    return_type = 'object'

class variable_length(String, AllowedValuesMixin):
    """
    'variable_length' child.
    """
    _version = '231'
    fluent_name = 'variable-length'
    _python_name = 'variable_length'
    return_type = 'object'

class vector_length(Group):
    """
    'vector_length' child.
    """
    _version = '231'
    fluent_name = 'vector-length'
    _python_name = 'vector_length'
    child_names = ['option', 'constant_length', 'variable_length']
    _child_classes = dict(
        option=option_3,
        constant_length=constant_length,
        variable_length=variable_length,
    )
    return_type = 'object'

class constant_color(Group):
    """
    'constant_color' child.
    """
    _version = '231'
    fluent_name = 'constant-color'
    _python_name = 'constant_color'
    child_names = ['enabled', 'color']
    _child_classes = dict(
        enabled=enabled_2,
        color=color,
    )
    return_type = 'object'

class vector_of(String, AllowedValuesMixin):
    """
    'vector_of' child.
    """
    _version = '231'
    fluent_name = 'vector-of'
    _python_name = 'vector_of'
    return_type = 'object'

class length_to_head_ratio(Real):
    """
    'length_to_head_ratio' child.
    """
    _version = '231'
    fluent_name = 'length-to-head-ratio'
    _python_name = 'length_to_head_ratio'
    return_type = 'object'

class vector_settings(Group):
    """
    'vector_settings' child.
    """
    _version = '231'
    fluent_name = 'vector-settings'
    _python_name = 'vector_settings'
    child_names = ['style', 'vector_length', 'constant_color', 'vector_of', 'scale', 'length_to_head_ratio']
    _child_classes = dict(
        style=style,
        vector_length=vector_length,
        constant_color=constant_color,
        vector_of=vector_of,
        scale=scale_2,
        length_to_head_ratio=length_to_head_ratio,
    )
    return_type = 'object'

class stream_id(Integer):
    """
    'stream_id' child.
    """
    _version = '231'
    fluent_name = 'stream-id'
    _python_name = 'stream_id'
    return_type = 'object'

class track_single_particle_stream(Group):
    """
    'track_single_particle_stream' child.
    """
    _version = '231'
    fluent_name = 'track-single-particle-stream'
    _python_name = 'track_single_particle_stream'
    child_names = ['enabled', 'stream_id']
    _child_classes = dict(
        enabled=enabled_2,
        stream_id=stream_id,
    )
    return_type = 'object'

class injections_list(StringList, AllowedValuesMixin):
    """
    'injections_list' child.
    """
    _version = '231'
    fluent_name = 'injections-list'
    _python_name = 'injections_list'
    return_type = 'object'

class free_stream_particles(Boolean):
    """
    'free_stream_particles' child.
    """
    _version = '231'
    fluent_name = 'free-stream-particles?'
    _python_name = 'free_stream_particles'
    return_type = 'object'

class wall_film_particles(Boolean):
    """
    'wall_film_particles' child.
    """
    _version = '231'
    fluent_name = 'wall-film-particles?'
    _python_name = 'wall_film_particles'
    return_type = 'object'

class track_pdf_particles(Boolean):
    """
    'track_pdf_particles' child.
    """
    _version = '231'
    fluent_name = 'track-pdf-particles?'
    _python_name = 'track_pdf_particles'
    return_type = 'object'

class particle_track_child(Group):
    """
    'child_object_type' of particle_track.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'particle_track_child'
    child_names = ['name', 'uid', 'options', 'filter_settings', 'range', 'style_attribute', 'vector_settings', 'plot', 'track_single_particle_stream', 'skip', 'coarsen', 'field', 'injections_list', 'free_stream_particles', 'wall_film_particles', 'track_pdf_particles', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name', 'axes', 'curves']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        uid=uid,
        options=options_7,
        filter_settings=filter_settings,
        range=range,
        style_attribute=style_attribute_1,
        vector_settings=vector_settings,
        plot=plot_2,
        track_single_particle_stream=track_single_particle_stream,
        skip=skip,
        coarsen=coarsen,
        field=field,
        injections_list=injections_list,
        free_stream_particles=free_stream_particles,
        wall_film_particles=wall_film_particles,
        track_pdf_particles=track_pdf_particles,
        color_map=color_map,
        draw_mesh=draw_mesh,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        axes=axes,
        curves=curves,
        display=display_2,
    )
    return_type = 'object'

class particle_track(NamedObject[particle_track_child], CreatableNamedObjectMixinOld[particle_track_child]):
    """
    'particle_track' child.
    """
    _version = '231'
    fluent_name = 'particle-track'
    _python_name = 'particle_track'
    command_names = ['display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        display=display_1,
        copy=copy_3,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = particle_track_child
    return_type = 'object'

class lic_color_by_field(Boolean):
    """
    'lic_color_by_field' child.
    """
    _version = '231'
    fluent_name = 'lic-color-by-field?'
    _python_name = 'lic_color_by_field'
    return_type = 'object'

class lic_color(String, AllowedValuesMixin):
    """
    'lic_color' child.
    """
    _version = '231'
    fluent_name = 'lic-color'
    _python_name = 'lic_color'
    return_type = 'object'

class lic_oriented(Boolean):
    """
    'lic_oriented' child.
    """
    _version = '231'
    fluent_name = 'lic-oriented?'
    _python_name = 'lic_oriented'
    return_type = 'object'

class lic_normalize(Boolean):
    """
    'lic_normalize' child.
    """
    _version = '231'
    fluent_name = 'lic-normalize?'
    _python_name = 'lic_normalize'
    return_type = 'object'

class lic_pixel_interpolation(Boolean):
    """
    'lic_pixel_interpolation' child.
    """
    _version = '231'
    fluent_name = 'lic-pixel-interpolation?'
    _python_name = 'lic_pixel_interpolation'
    return_type = 'object'

class lic_max_steps(Integer):
    """
    'lic_max_steps' child.
    """
    _version = '231'
    fluent_name = 'lic-max-steps'
    _python_name = 'lic_max_steps'
    return_type = 'object'

class texture_spacing(Integer):
    """
    'texture_spacing' child.
    """
    _version = '231'
    fluent_name = 'texture-spacing'
    _python_name = 'texture_spacing'
    return_type = 'object'

class texture_size(Integer):
    """
    'texture_size' child.
    """
    _version = '231'
    fluent_name = 'texture-size'
    _python_name = 'texture_size'
    return_type = 'object'

class lic_intensity_factor(Integer):
    """
    'lic_intensity_factor' child.
    """
    _version = '231'
    fluent_name = 'lic-intensity-factor'
    _python_name = 'lic_intensity_factor'
    return_type = 'object'

class lic_image_filter(String, AllowedValuesMixin):
    """
    'lic_image_filter' child.
    """
    _version = '231'
    fluent_name = 'lic-image-filter'
    _python_name = 'lic_image_filter'
    return_type = 'object'

class lic_intensity_alpha(Boolean):
    """
    'lic_intensity_alpha' child.
    """
    _version = '231'
    fluent_name = 'lic-intensity-alpha?'
    _python_name = 'lic_intensity_alpha'
    return_type = 'object'

class lic_fast(Boolean):
    """
    'lic_fast' child.
    """
    _version = '231'
    fluent_name = 'lic-fast?'
    _python_name = 'lic_fast'
    return_type = 'object'

class gray_scale(Boolean):
    """
    'gray_scale' child.
    """
    _version = '231'
    fluent_name = 'gray-scale?'
    _python_name = 'gray_scale'
    return_type = 'object'

class image_to_display(String, AllowedValuesMixin):
    """
    'image_to_display' child.
    """
    _version = '231'
    fluent_name = 'image-to-display'
    _python_name = 'image_to_display'
    return_type = 'object'

class lic_child(Group):
    """
    'child_object_type' of lic.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'lic_child'
    child_names = ['name', 'field', 'vector_field', 'surfaces_list', 'surfaces', 'lic_color_by_field', 'lic_color', 'lic_oriented', 'lic_normalize', 'lic_pixel_interpolation', 'lic_max_steps', 'texture_spacing', 'texture_size', 'lic_intensity_factor', 'lic_image_filter', 'lic_intensity_alpha', 'lic_fast', 'gray_scale', 'image_to_display', 'range_option', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        field=field,
        vector_field=vector_field,
        surfaces_list=surfaces_list,
        surfaces=surfaces,
        lic_color_by_field=lic_color_by_field,
        lic_color=lic_color,
        lic_oriented=lic_oriented,
        lic_normalize=lic_normalize,
        lic_pixel_interpolation=lic_pixel_interpolation,
        lic_max_steps=lic_max_steps,
        texture_spacing=texture_spacing,
        texture_size=texture_size,
        lic_intensity_factor=lic_intensity_factor,
        lic_image_filter=lic_image_filter,
        lic_intensity_alpha=lic_intensity_alpha,
        lic_fast=lic_fast,
        gray_scale=gray_scale,
        image_to_display=image_to_display,
        range_option=range_option,
        color_map=color_map,
        draw_mesh=draw_mesh,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        display=display_2,
    )
    return_type = 'object'

class lic(NamedObject[lic_child], CreatableNamedObjectMixinOld[lic_child]):
    """
    'lic' child.
    """
    _version = '231'
    fluent_name = 'lic'
    _python_name = 'lic'
    command_names = ['display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        display=display_1,
        copy=copy_3,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = lic_child
    return_type = 'object'

class olic_child(Group):
    """
    'child_object_type' of olic.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'olic_child'
    child_names = ['name', 'field', 'vector_field', 'surfaces_list', 'surfaces', 'lic_color_by_field', 'lic_color', 'lic_oriented', 'lic_normalize', 'lic_pixel_interpolation', 'lic_max_steps', 'texture_spacing', 'texture_size', 'lic_intensity_factor', 'lic_image_filter', 'lic_intensity_alpha', 'lic_fast', 'gray_scale', 'image_to_display', 'range_option', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        field=field,
        vector_field=vector_field,
        surfaces_list=surfaces_list,
        surfaces=surfaces,
        lic_color_by_field=lic_color_by_field,
        lic_color=lic_color,
        lic_oriented=lic_oriented,
        lic_normalize=lic_normalize,
        lic_pixel_interpolation=lic_pixel_interpolation,
        lic_max_steps=lic_max_steps,
        texture_spacing=texture_spacing,
        texture_size=texture_size,
        lic_intensity_factor=lic_intensity_factor,
        lic_image_filter=lic_image_filter,
        lic_intensity_alpha=lic_intensity_alpha,
        lic_fast=lic_fast,
        gray_scale=gray_scale,
        image_to_display=image_to_display,
        range_option=range_option,
        color_map=color_map,
        draw_mesh=draw_mesh,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        display=display_2,
    )
    return_type = 'object'

class olic(NamedObject[olic_child], CreatableNamedObjectMixinOld[olic_child]):
    """
    'olic' child.
    """
    _version = '231'
    fluent_name = 'olic'
    _python_name = 'olic'
    command_names = ['display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        display=display_1,
        copy=copy_3,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = olic_child
    return_type = 'object'

class auto_scale_2(Boolean):
    """
    Enable/disable auto-computation of range for contours.
    """
    _version = '231'
    fluent_name = 'auto-scale?'
    _python_name = 'auto_scale'
    return_type = 'object'

class clip_to_range_2(Boolean):
    """
    Enable/disable the clip to range option for filled contours.
    """
    _version = '231'
    fluent_name = 'clip-to-range?'
    _python_name = 'clip_to_range'
    return_type = 'object'

class surfaces_2(StringList):
    """
    Surfaces to be contoured.
    """
    _version = '231'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    return_type = 'object'

class filled_contours(Boolean):
    """
    Enable/disable the filled contour option.
    """
    _version = '231'
    fluent_name = 'filled-contours?'
    _python_name = 'filled_contours'
    return_type = 'object'

class global_range_1(Boolean):
    """
    Enable/disable the global range for contours option.
    """
    _version = '231'
    fluent_name = 'global-range?'
    _python_name = 'global_range'
    return_type = 'object'

class line_contours(Boolean):
    """
    Enable/disable the filled contour option.
    """
    _version = '231'
    fluent_name = 'line-contours?'
    _python_name = 'line_contours'
    return_type = 'object'

class log_scale_2(Boolean):
    """
    Enable/disable the use of a log scale.
    """
    _version = '231'
    fluent_name = 'log-scale?'
    _python_name = 'log_scale'
    return_type = 'object'

class n_contour(Integer):
    """
    The number of contour levels.
    """
    _version = '231'
    fluent_name = 'n-contour'
    _python_name = 'n_contour'
    return_type = 'object'

class node_values_2(Boolean):
    """
    Enable/disable the plot of node values.
    """
    _version = '231'
    fluent_name = 'node-values?'
    _python_name = 'node_values'
    return_type = 'object'

class render_mesh(Boolean):
    """
    Determine whether or not to render the mesh on top of contours, vectors, etc.
    """
    _version = '231'
    fluent_name = 'render-mesh?'
    _python_name = 'render_mesh'
    return_type = 'object'

class banded_coloring(Boolean):
    """
    Specifies whether contours should be colored in bands.
    """
    _version = '231'
    fluent_name = 'banded-coloring'
    _python_name = 'banded_coloring'
    return_type = 'object'

class number_of_bands(Integer):
    """
    The number of bands to be used for contours.
    """
    _version = '231'
    fluent_name = 'number-of-bands'
    _python_name = 'number_of_bands'
    return_type = 'object'

class coloring_2(Group):
    """
    Coloring option.
    """
    _version = '231'
    fluent_name = 'coloring'
    _python_name = 'coloring'
    child_names = ['banded_coloring', 'number_of_bands']
    _child_classes = dict(
        banded_coloring=banded_coloring,
        number_of_bands=number_of_bands,
    )
    return_type = 'object'

class contours(Group):
    """
    'contours' child.
    """
    _version = '231'
    fluent_name = 'contours'
    _python_name = 'contours'
    child_names = ['auto_scale', 'clip_to_range', 'surfaces', 'filled_contours', 'global_range', 'line_contours', 'log_scale', 'n_contour', 'node_values', 'render_mesh', 'coloring']
    _child_classes = dict(
        auto_scale=auto_scale_2,
        clip_to_range=clip_to_range_2,
        surfaces=surfaces_2,
        filled_contours=filled_contours,
        global_range=global_range_1,
        line_contours=line_contours,
        log_scale=log_scale_2,
        n_contour=n_contour,
        node_values=node_values_2,
        render_mesh=render_mesh,
        coloring=coloring_2,
    )
    return_type = 'object'

class display_3(Boolean):
    """
    Determine whether particle tracks will be displayed or only tracked.
    """
    _version = '231'
    fluent_name = 'display?'
    _python_name = 'display'
    return_type = 'object'

class history_filename(Filename):
    """
    The name of the particle history file.
    """
    _version = '231'
    fluent_name = 'history-filename'
    _python_name = 'history_filename'
    return_type = 'object'

class report_default_variables(String):
    """
    The report variables to default.
    """
    _version = '231'
    fluent_name = 'report-default-variables'
    _python_name = 'report_default_variables'
    return_type = 'object'

class track_single_particle_stream_1(Integer):
    """
    The stream ID to be tracked.
    """
    _version = '231'
    fluent_name = 'track-single-particle-stream?'
    _python_name = 'track_single_particle_stream'
    return_type = 'object'

class arrow_scale_1(Real):
    """
    The scale factor for arrows drawn on particle tracks.
    """
    _version = '231'
    fluent_name = 'arrow-scale'
    _python_name = 'arrow_scale'
    return_type = 'object'

class arrow_space_1(Real):
    """
    The spacing factor for arrows drawn on particle tracks.
    """
    _version = '231'
    fluent_name = 'arrow-space'
    _python_name = 'arrow_space'
    return_type = 'object'

class coarsen_factor(Integer):
    """
    The particle tracks coarsening factor.
    """
    _version = '231'
    fluent_name = 'coarsen-factor'
    _python_name = 'coarsen_factor'
    return_type = 'object'

class line_width_1(Real):
    """
    The width for particle track.
    """
    _version = '231'
    fluent_name = 'line-width'
    _python_name = 'line_width'
    return_type = 'object'

class particle_tracks(Group):
    """
    'particle_tracks' child.
    """
    _version = '231'
    fluent_name = 'particle-tracks'
    _python_name = 'particle_tracks'
    child_names = ['display', 'history_filename', 'report_default_variables', 'track_single_particle_stream', 'arrow_scale', 'arrow_space', 'coarsen_factor', 'line_width']
    _child_classes = dict(
        display=display_3,
        history_filename=history_filename,
        report_default_variables=report_default_variables,
        track_single_particle_stream=track_single_particle_stream_1,
        arrow_scale=arrow_scale_1,
        arrow_space=arrow_space_1,
        coarsen_factor=coarsen_factor,
        line_width=line_width_1,
    )
    return_type = 'object'

class background(String):
    """
    The background (window) color.
    """
    _version = '231'
    fluent_name = 'background'
    _python_name = 'background'
    return_type = 'object'

class color_by_type(Boolean):
    """
    Determine whether to color meshes by type or by surface (ID).
    """
    _version = '231'
    fluent_name = 'color-by-type?'
    _python_name = 'color_by_type'
    return_type = 'object'

class foreground(String):
    """
    The foreground (text and window frame) color.
    """
    _version = '231'
    fluent_name = 'foreground'
    _python_name = 'foreground'
    return_type = 'object'

class only_list_case_boundaries(Boolean):
    """
    Only list the boundary types that are assigned in this case.
    """
    _version = '231'
    fluent_name = 'only-list-case-boundaries?'
    _python_name = 'only_list_case_boundaries'
    return_type = 'object'

class use_inherent_material_color(Boolean):
    """
    Use inherent material color for boundary zones.
    """
    _version = '231'
    fluent_name = 'use-inherent-material-color?'
    _python_name = 'use_inherent_material_color'
    return_type = 'object'

class reset_color(Boolean):
    """
    'reset_color' child.
    """
    _version = '231'
    fluent_name = 'reset-color?'
    _python_name = 'reset_color'
    return_type = 'object'

class reset(Command):
    """
    Reset colors and/or materials to the defaults.
    
    Parameters
    ----------
        reset_color : bool
            'reset_color' child.
    """
    _version = '231'
    fluent_name = 'reset?'
    _python_name = 'reset'
    argument_names = ['reset_color']
    _child_classes = dict(
        reset_color=reset_color,
    )
    return_type = 'object'

class by_type(Group):
    """
    'by_type' child.
    """
    _version = '231'
    fluent_name = 'by-type'
    _python_name = 'by_type'
    child_names = ['only_list_case_boundaries', 'use_inherent_material_color']
    command_names = ['reset']
    _child_classes = dict(
        only_list_case_boundaries=only_list_case_boundaries,
        use_inherent_material_color=use_inherent_material_color,
        reset=reset,
    )
    return_type = 'object'

class use_inherent_material_color_1(Boolean):
    """
    Use inherent material color for surfaces.
    """
    _version = '231'
    fluent_name = 'use-inherent-material-color?'
    _python_name = 'use_inherent_material_color'
    return_type = 'object'

class list_surfaces_by_color(Command):
    """
    List the surfaces by its color.
    """
    _version = '231'
    fluent_name = 'list-surfaces-by-color'
    _python_name = 'list_surfaces_by_color'
    return_type = 'object'

class list_surfaces_by_material(Command):
    """
    List the surfaces by its material.
    """
    _version = '231'
    fluent_name = 'list-surfaces-by-material'
    _python_name = 'list_surfaces_by_material'
    return_type = 'object'

class by_surface(Group):
    """
    'by_surface' child.
    """
    _version = '231'
    fluent_name = 'by-surface'
    _python_name = 'by_surface'
    child_names = ['use_inherent_material_color']
    command_names = ['reset', 'list_surfaces_by_color', 'list_surfaces_by_material']
    _child_classes = dict(
        use_inherent_material_color=use_inherent_material_color_1,
        reset=reset,
        list_surfaces_by_color=list_surfaces_by_color,
        list_surfaces_by_material=list_surfaces_by_material,
    )
    return_type = 'object'

class far_field_faces(String):
    """
    The color of far field faces.
    """
    _version = '231'
    fluent_name = 'far-field-faces'
    _python_name = 'far_field_faces'
    return_type = 'object'

class inlet_faces(String):
    """
    The color of inlet faces.
    """
    _version = '231'
    fluent_name = 'inlet-faces'
    _python_name = 'inlet_faces'
    return_type = 'object'

class interior_faces(String):
    """
    The color of interior faces.
    """
    _version = '231'
    fluent_name = 'interior-faces'
    _python_name = 'interior_faces'
    return_type = 'object'

class internal_faces(String):
    """
    The color of internal interface faces.
    """
    _version = '231'
    fluent_name = 'internal-faces'
    _python_name = 'internal_faces'
    return_type = 'object'

class outlet_faces(String):
    """
    The color of outlet faces.
    """
    _version = '231'
    fluent_name = 'outlet-faces'
    _python_name = 'outlet_faces'
    return_type = 'object'

class overset_faces(String):
    """
    The color of overset faces.
    """
    _version = '231'
    fluent_name = 'overset-faces'
    _python_name = 'overset_faces'
    return_type = 'object'

class periodic_faces(String):
    """
    The color of periodic faces.
    """
    _version = '231'
    fluent_name = 'periodic-faces'
    _python_name = 'periodic_faces'
    return_type = 'object'

class rans_les_interface_faces(String):
    """
    The color of RANS/LES interface faces.
    """
    _version = '231'
    fluent_name = 'rans-les-interface-faces'
    _python_name = 'rans_les_interface_faces'
    return_type = 'object'

class symmetry_faces(String):
    """
    The color of symmetric faces.
    """
    _version = '231'
    fluent_name = 'symmetry-faces'
    _python_name = 'symmetry_faces'
    return_type = 'object'

class axis_faces(String):
    """
    The color of axisymmetric faces.
    """
    _version = '231'
    fluent_name = 'axis-faces'
    _python_name = 'axis_faces'
    return_type = 'object'

class free_surface_faces(String):
    """
    The color of free-surface faces.
    """
    _version = '231'
    fluent_name = 'free-surface-faces'
    _python_name = 'free_surface_faces'
    return_type = 'object'

class traction_faces(String):
    """
    The color of traction faces.
    """
    _version = '231'
    fluent_name = 'traction-faces'
    _python_name = 'traction_faces'
    return_type = 'object'

class wall_faces(String):
    """
    The color of wall faces.
    """
    _version = '231'
    fluent_name = 'wall-faces'
    _python_name = 'wall_faces'
    return_type = 'object'

class interface_faces(String):
    """
    The color of mesh interfaces.
    """
    _version = '231'
    fluent_name = 'interface-faces'
    _python_name = 'interface_faces'
    return_type = 'object'

class surface_2(String):
    """
    The color of surfaces.
    """
    _version = '231'
    fluent_name = 'surface'
    _python_name = 'surface'
    return_type = 'object'

class skip_label(Integer):
    """
    The number of labels to be skipped in the colopmap scale.
    """
    _version = '231'
    fluent_name = 'skip-label'
    _python_name = 'skip_label'
    return_type = 'object'

class automatic_skip(Boolean):
    """
    Determine whether to skip labels in the colopmap scale automatically.
    """
    _version = '231'
    fluent_name = 'automatic-skip?'
    _python_name = 'automatic_skip'
    return_type = 'object'

class reset_colors(Command):
    """
    Reset individual mesh surface colors to the defaults.
    """
    _version = '231'
    fluent_name = 'reset-colors'
    _python_name = 'reset_colors'
    return_type = 'object'

class list_colors(Command):
    """
    List available colors.
    """
    _version = '231'
    fluent_name = 'list-colors'
    _python_name = 'list_colors'
    return_type = 'object'

class colors(Group):
    """
    'colors' child.
    """
    _version = '231'
    fluent_name = 'colors'
    _python_name = 'colors'
    child_names = ['background', 'color_by_type', 'foreground', 'by_type', 'by_surface', 'far_field_faces', 'inlet_faces', 'interior_faces', 'internal_faces', 'outlet_faces', 'overset_faces', 'periodic_faces', 'rans_les_interface_faces', 'symmetry_faces', 'axis_faces', 'free_surface_faces', 'traction_faces', 'wall_faces', 'interface_faces', 'surface', 'skip_label', 'automatic_skip']
    command_names = ['reset_colors', 'list_colors']
    _child_classes = dict(
        background=background,
        color_by_type=color_by_type,
        foreground=foreground,
        by_type=by_type,
        by_surface=by_surface,
        far_field_faces=far_field_faces,
        inlet_faces=inlet_faces,
        interior_faces=interior_faces,
        internal_faces=internal_faces,
        outlet_faces=outlet_faces,
        overset_faces=overset_faces,
        periodic_faces=periodic_faces,
        rans_les_interface_faces=rans_les_interface_faces,
        symmetry_faces=symmetry_faces,
        axis_faces=axis_faces,
        free_surface_faces=free_surface_faces,
        traction_faces=traction_faces,
        wall_faces=wall_faces,
        interface_faces=interface_faces,
        surface=surface_2,
        skip_label=skip_label,
        automatic_skip=automatic_skip,
        reset_colors=reset_colors,
        list_colors=list_colors,
    )
    return_type = 'object'

class headlight_setting(String, AllowedValuesMixin):
    """
    'headlight_setting' child.
    """
    _version = '231'
    fluent_name = 'headlight-setting'
    _python_name = 'headlight_setting'
    return_type = 'object'

class lights_on(Boolean):
    """
    Turn all active lighting on/off.
    """
    _version = '231'
    fluent_name = 'lights-on?'
    _python_name = 'lights_on'
    return_type = 'object'

class lighting_interpolation(String, AllowedValuesMixin):
    """
    Lighting interpolation method.
    """
    _version = '231'
    fluent_name = 'lighting-interpolation'
    _python_name = 'lighting_interpolation'
    return_type = 'object'

class rgb_vector(RealVector):
    """
    'rgb_vector' child.
    """
    _version = '231'
    fluent_name = 'rgb-vector'
    _python_name = 'rgb_vector'
    return_type = 'object'

class set_ambient_color(Command):
    """
    'set_ambient_color' command.
    """
    _version = '231'
    fluent_name = 'set-ambient-color'
    _python_name = 'set_ambient_color'
    argument_names = ['rgb_vector']
    _child_classes = dict(
        rgb_vector=rgb_vector,
    )
    return_type = 'object'

class light_number(Integer):
    """
    'light_number' child.
    """
    _version = '231'
    fluent_name = 'light-number'
    _python_name = 'light_number'
    return_type = 'object'

class light_on(Boolean):
    """
    'light_on' child.
    """
    _version = '231'
    fluent_name = 'light-on?'
    _python_name = 'light_on'
    return_type = 'object'

class use_view_factor(Boolean):
    """
    'use_view_factor' child.
    """
    _version = '231'
    fluent_name = 'use-view-factor?'
    _python_name = 'use_view_factor'
    return_type = 'object'

class change_light_direction(Boolean):
    """
    'change_light_direction' child.
    """
    _version = '231'
    fluent_name = 'change-light-direction?'
    _python_name = 'change_light_direction'
    return_type = 'object'

class direction_vector_1(RealVector):
    """
    'direction_vector' child.
    """
    _version = '231'
    fluent_name = 'direction-vector'
    _python_name = 'direction_vector'
    return_type = 'object'

class set_light(Command):
    """
    'set_light' command.
    """
    _version = '231'
    fluent_name = 'set-light'
    _python_name = 'set_light'
    argument_names = ['light_number', 'light_on', 'rgb_vector', 'use_view_factor', 'change_light_direction', 'direction_vector']
    _child_classes = dict(
        light_number=light_number,
        light_on=light_on,
        rgb_vector=rgb_vector,
        use_view_factor=use_view_factor,
        change_light_direction=change_light_direction,
        direction_vector=direction_vector_1,
    )
    return_type = 'object'

class lights(Group):
    """
    'lights' child.
    """
    _version = '231'
    fluent_name = 'lights'
    _python_name = 'lights'
    child_names = ['headlight_setting', 'lights_on', 'lighting_interpolation']
    command_names = ['set_ambient_color', 'set_light']
    _child_classes = dict(
        headlight_setting=headlight_setting,
        lights_on=lights_on,
        lighting_interpolation=lighting_interpolation,
        set_ambient_color=set_ambient_color,
        set_light=set_light,
    )
    return_type = 'object'

class color_mode(String, AllowedValuesMixin):
    """
    'color_mode' child.
    """
    _version = '231'
    fluent_name = 'color-mode'
    _python_name = 'color_mode'
    return_type = 'object'

class hardcopy_format(String, AllowedValuesMixin):
    """
    Hardcopy file format.
    """
    _version = '231'
    fluent_name = 'hardcopy-format'
    _python_name = 'hardcopy_format'
    return_type = 'object'

class hardcopy_options(String):
    """
    'hardcopy_options' child.
    """
    _version = '231'
    fluent_name = 'hardcopy-options'
    _python_name = 'hardcopy_options'
    return_type = 'object'

class window_dump_cmd(String):
    """
    'window_dump_cmd' child.
    """
    _version = '231'
    fluent_name = 'window-dump-cmd'
    _python_name = 'window_dump_cmd'
    return_type = 'object'

class post_format(String, AllowedValuesMixin):
    """
    Produce PostScript output for hardcopies.
    """
    _version = '231'
    fluent_name = 'post-format'
    _python_name = 'post_format'
    return_type = 'object'

class current_driver(Command):
    """
    'current_driver' command.
    """
    _version = '231'
    fluent_name = 'current-driver'
    _python_name = 'current_driver'
    return_type = 'object'

class driver_options(Group):
    """
    'driver_options' child.
    """
    _version = '231'
    fluent_name = 'driver-options'
    _python_name = 'driver_options'
    child_names = ['hardcopy_format', 'hardcopy_options', 'window_dump_cmd', 'post_format']
    command_names = ['current_driver']
    _child_classes = dict(
        hardcopy_format=hardcopy_format,
        hardcopy_options=hardcopy_options,
        window_dump_cmd=window_dump_cmd,
        post_format=post_format,
        current_driver=current_driver,
    )
    return_type = 'object'

class invert_background(Boolean):
    """
    'invert_background' child.
    """
    _version = '231'
    fluent_name = 'invert-background?'
    _python_name = 'invert_background'
    return_type = 'object'

class landscape(Boolean):
    """
    'landscape' child.
    """
    _version = '231'
    fluent_name = 'landscape?'
    _python_name = 'landscape'
    return_type = 'object'

class x_resolution(Integer):
    """
    'x_resolution' child.
    """
    _version = '231'
    fluent_name = 'x-resolution'
    _python_name = 'x_resolution'
    return_type = 'object'

class y_resolution(Integer):
    """
    'y_resolution' child.
    """
    _version = '231'
    fluent_name = 'y-resolution'
    _python_name = 'y_resolution'
    return_type = 'object'

class dpi(Integer):
    """
    'dpi' child.
    """
    _version = '231'
    fluent_name = 'dpi'
    _python_name = 'dpi'
    return_type = 'object'

class use_window_resolution(Boolean):
    """
    Use the currently active window's resolution for hardcopy (ignores the x-resolution and y-resolution in this case).
    """
    _version = '231'
    fluent_name = 'use-window-resolution?'
    _python_name = 'use_window_resolution'
    return_type = 'object'

class standard_resolution(String, AllowedValuesMixin):
    """
    From pre-defined resolution list.
    """
    _version = '231'
    fluent_name = 'standard-resolution'
    _python_name = 'standard_resolution'
    return_type = 'object'

class jpeg_hardcopy_quality(Integer):
    """
    0  : Saves lowest quality jpeg image, but with the least file size.
    100: Saves highest quality jpeg image, but with the maximum file size.
    """
    _version = '231'
    fluent_name = 'jpeg-hardcopy-quality'
    _python_name = 'jpeg_hardcopy_quality'
    return_type = 'object'

class preview(Command):
    """
    Display a preview image of a hardcopy.
    """
    _version = '231'
    fluent_name = 'preview'
    _python_name = 'preview'
    return_type = 'object'

class save_picture(Command):
    """
    'save_picture' command.
    """
    _version = '231'
    fluent_name = 'save-picture'
    _python_name = 'save_picture'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class list_color_mode(Command):
    """
    'list_color_mode' command.
    """
    _version = '231'
    fluent_name = 'list-color-mode'
    _python_name = 'list_color_mode'
    return_type = 'object'

class picture(Group):
    """
    The hardcopy/save-picture options object.
    """
    _version = '231'
    fluent_name = 'picture'
    _python_name = 'picture'
    child_names = ['color_mode', 'driver_options', 'invert_background', 'landscape', 'x_resolution', 'y_resolution', 'dpi', 'use_window_resolution', 'standard_resolution', 'jpeg_hardcopy_quality']
    command_names = ['preview', 'save_picture', 'list_color_mode']
    _child_classes = dict(
        color_mode=color_mode,
        driver_options=driver_options,
        invert_background=invert_background,
        landscape=landscape,
        x_resolution=x_resolution,
        y_resolution=y_resolution,
        dpi=dpi,
        use_window_resolution=use_window_resolution,
        standard_resolution=standard_resolution,
        jpeg_hardcopy_quality=jpeg_hardcopy_quality,
        preview=preview,
        save_picture=save_picture,
        list_color_mode=list_color_mode,
    )
    return_type = 'object'

class right(Real):
    """
    'right' child.
    """
    _version = '231'
    fluent_name = 'right'
    _python_name = 'right'
    return_type = 'object'

class up(Real):
    """
    'up' child.
    """
    _version = '231'
    fluent_name = 'up'
    _python_name = 'up'
    return_type = 'object'

class in_(Real):
    """
    'in' child.
    """
    _version = '231'
    fluent_name = 'in'
    _python_name = 'in_'
    return_type = 'object'

class dolly(Command):
    """
    Adjust the camera position and target.
    
    Parameters
    ----------
        right : real
            'right' child.
        up : real
            'up' child.
        in_ : real
            'in' child.
    """
    _version = '231'
    fluent_name = 'dolly'
    _python_name = 'dolly'
    argument_names = ['right', 'up', 'in_']
    _child_classes = dict(
        right=right,
        up=up,
        in_=in_,
    )
    return_type = 'object'

class height(Real):
    """
    'height' child.
    """
    _version = '231'
    fluent_name = 'height'
    _python_name = 'height'
    return_type = 'object'

class field_1(Command):
    """
    Set the field of view (width and height).
    
    Parameters
    ----------
        width : real
            'width' child.
        height : real
            'height' child.
    """
    _version = '231'
    fluent_name = 'field'
    _python_name = 'field'
    argument_names = ['width', 'height']
    _child_classes = dict(
        width=width,
        height=height,
    )
    return_type = 'object'

class orbit(Command):
    """
    Adjust the camera position without modifying the target.
    
    Parameters
    ----------
        right : real
            'right' child.
        up : real
            'up' child.
    """
    _version = '231'
    fluent_name = 'orbit'
    _python_name = 'orbit'
    argument_names = ['right', 'up']
    _child_classes = dict(
        right=right,
        up=up,
    )
    return_type = 'object'

class pan(Command):
    """
    Adjust the camera position without modifying the position.
    
    Parameters
    ----------
        right : real
            'right' child.
        up : real
            'up' child.
    """
    _version = '231'
    fluent_name = 'pan'
    _python_name = 'pan'
    argument_names = ['right', 'up']
    _child_classes = dict(
        right=right,
        up=up,
    )
    return_type = 'object'

class xyz(RealList):
    """
    'xyz' child.
    """
    _version = '231'
    fluent_name = 'xyz'
    _python_name = 'xyz'
    return_type = 'object'

class position_1(Command):
    """
    Set the camera position.
    
    Parameters
    ----------
        xyz : List
            'xyz' child.
    """
    _version = '231'
    fluent_name = 'position'
    _python_name = 'position'
    argument_names = ['xyz']
    _child_classes = dict(
        xyz=xyz,
    )
    return_type = 'object'

class projection(Command):
    """
    Set the camera projection.
    
    Parameters
    ----------
        type : str
            'type' child.
    """
    _version = '231'
    fluent_name = 'projection'
    _python_name = 'projection'
    argument_names = ['type']
    _child_classes = dict(
        type=type_1,
    )
    return_type = 'object'

class counter_clockwise(Real):
    """
    'counter_clockwise' child.
    """
    _version = '231'
    fluent_name = 'counter-clockwise'
    _python_name = 'counter_clockwise'
    return_type = 'object'

class roll(Command):
    """
    Adjust the camera up-vector.
    
    Parameters
    ----------
        counter_clockwise : real
            'counter_clockwise' child.
    """
    _version = '231'
    fluent_name = 'roll'
    _python_name = 'roll'
    argument_names = ['counter_clockwise']
    _child_classes = dict(
        counter_clockwise=counter_clockwise,
    )
    return_type = 'object'

class target(Command):
    """
    Set the point to be the center of the camera view.
    
    Parameters
    ----------
        xyz : List
            'xyz' child.
    """
    _version = '231'
    fluent_name = 'target'
    _python_name = 'target'
    argument_names = ['xyz']
    _child_classes = dict(
        xyz=xyz,
    )
    return_type = 'object'

class up_vector(Command):
    """
    Set the camera up-vector.
    
    Parameters
    ----------
        xyz : List
            'xyz' child.
    """
    _version = '231'
    fluent_name = 'up-vector'
    _python_name = 'up_vector'
    argument_names = ['xyz']
    _child_classes = dict(
        xyz=xyz,
    )
    return_type = 'object'

class factor(Real):
    """
    'factor' child.
    """
    _version = '231'
    fluent_name = 'factor'
    _python_name = 'factor'
    return_type = 'object'

class zoom(Command):
    """
    Adjust the camera field of view.
    
    Parameters
    ----------
        factor : real
            'factor' child.
    """
    _version = '231'
    fluent_name = 'zoom'
    _python_name = 'zoom'
    argument_names = ['factor']
    _child_classes = dict(
        factor=factor,
    )
    return_type = 'object'

class camera(Group):
    """
    'camera' child.
    """
    _version = '231'
    fluent_name = 'camera'
    _python_name = 'camera'
    command_names = ['dolly', 'field', 'orbit', 'pan', 'position', 'projection', 'roll', 'target', 'up_vector', 'zoom']
    _child_classes = dict(
        dolly=dolly,
        field=field_1,
        orbit=orbit,
        pan=pan,
        position=position_1,
        projection=projection,
        roll=roll,
        target=target,
        up_vector=up_vector,
        zoom=zoom,
    )
    return_type = 'object'

class state_name(String, AllowedValuesMixin):
    """
    'state_name' child.
    """
    _version = '231'
    fluent_name = 'state-name'
    _python_name = 'state_name'
    return_type = 'object'

class use_active(Command):
    """
    'use_active' command.
    """
    _version = '231'
    fluent_name = 'use-active'
    _python_name = 'use_active'
    argument_names = ['state_name']
    _child_classes = dict(
        state_name=state_name,
    )
    return_type = 'object'

class restore_state(Command):
    """
    Apply a display state to the active window.
    
    Parameters
    ----------
        state_name : str
            'state_name' child.
    """
    _version = '231'
    fluent_name = 'restore-state'
    _python_name = 'restore_state'
    argument_names = ['state_name']
    _child_classes = dict(
        state_name=state_name,
    )
    return_type = 'object'

class copy_4(Command):
    """
    Create a new display state with settings copied from an existing display state.
    
    Parameters
    ----------
        state_name : str
            'state_name' child.
    """
    _version = '231'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['state_name']
    _child_classes = dict(
        state_name=state_name,
    )
    return_type = 'object'

class read_3(Command):
    """
    Read display states from a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '231'
    fluent_name = 'read'
    _python_name = 'read'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )
    return_type = 'object'

class state_name_1(StringList, AllowedValuesMixin):
    """
    'state_name' child.
    """
    _version = '231'
    fluent_name = 'state-name'
    _python_name = 'state_name'
    return_type = 'object'

class write_1(Command):
    """
    Write display states to a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        state_name : List
            'state_name' child.
    """
    _version = '231'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['file_name', 'state_name']
    _child_classes = dict(
        file_name=file_name_1,
        state_name=state_name_1,
    )
    return_type = 'object'

class front_faces_transparent(String, AllowedValuesMixin):
    """
    'front_faces_transparent' child.
    """
    _version = '231'
    fluent_name = 'front-faces-transparent'
    _python_name = 'front_faces_transparent'
    return_type = 'object'

class projection_1(String, AllowedValuesMixin):
    """
    'projection' child.
    """
    _version = '231'
    fluent_name = 'projection'
    _python_name = 'projection'
    return_type = 'object'

class axes_1(String, AllowedValuesMixin):
    """
    'axes' child.
    """
    _version = '231'
    fluent_name = 'axes'
    _python_name = 'axes'
    return_type = 'object'

class ruler(String, AllowedValuesMixin):
    """
    'ruler' child.
    """
    _version = '231'
    fluent_name = 'ruler'
    _python_name = 'ruler'
    return_type = 'object'

class boundary_marker(String, AllowedValuesMixin):
    """
    'boundary_marker' child.
    """
    _version = '231'
    fluent_name = 'boundary-marker'
    _python_name = 'boundary_marker'
    return_type = 'object'

class anti_aliasing(String, AllowedValuesMixin):
    """
    'anti_aliasing' child.
    """
    _version = '231'
    fluent_name = 'anti-aliasing'
    _python_name = 'anti_aliasing'
    return_type = 'object'

class reflections(String, AllowedValuesMixin):
    """
    'reflections' child.
    """
    _version = '231'
    fluent_name = 'reflections'
    _python_name = 'reflections'
    return_type = 'object'

class static_shadows(String, AllowedValuesMixin):
    """
    'static_shadows' child.
    """
    _version = '231'
    fluent_name = 'static-shadows'
    _python_name = 'static_shadows'
    return_type = 'object'

class dynamic_shadows(String, AllowedValuesMixin):
    """
    'dynamic_shadows' child.
    """
    _version = '231'
    fluent_name = 'dynamic-shadows'
    _python_name = 'dynamic_shadows'
    return_type = 'object'

class grid_plane(String, AllowedValuesMixin):
    """
    'grid_plane' child.
    """
    _version = '231'
    fluent_name = 'grid-plane'
    _python_name = 'grid_plane'
    return_type = 'object'

class headlights(String, AllowedValuesMixin):
    """
    'headlights' child.
    """
    _version = '231'
    fluent_name = 'headlights'
    _python_name = 'headlights'
    return_type = 'object'

class lighting(String, AllowedValuesMixin):
    """
    'lighting' child.
    """
    _version = '231'
    fluent_name = 'lighting'
    _python_name = 'lighting'
    return_type = 'object'

class view_name(String, AllowedValuesMixin):
    """
    'view_name' child.
    """
    _version = '231'
    fluent_name = 'view-name'
    _python_name = 'view_name'
    return_type = 'object'

class display_states_child(Group):
    """
    'child_object_type' of display_states.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'display_states_child'
    child_names = ['front_faces_transparent', 'projection', 'axes', 'ruler', 'title', 'boundary_marker', 'anti_aliasing', 'reflections', 'static_shadows', 'dynamic_shadows', 'grid_plane', 'headlights', 'lighting', 'view_name']
    _child_classes = dict(
        front_faces_transparent=front_faces_transparent,
        projection=projection_1,
        axes=axes_1,
        ruler=ruler,
        title=title,
        boundary_marker=boundary_marker,
        anti_aliasing=anti_aliasing,
        reflections=reflections,
        static_shadows=static_shadows,
        dynamic_shadows=dynamic_shadows,
        grid_plane=grid_plane,
        headlights=headlights,
        lighting=lighting,
        view_name=view_name,
    )
    return_type = 'object'

class display_states(NamedObject[display_states_child], CreatableNamedObjectMixinOld[display_states_child]):
    """
    'display_states' child.
    """
    _version = '231'
    fluent_name = 'display-states'
    _python_name = 'display_states'
    command_names = ['list', 'use_active', 'restore_state', 'copy', 'read', 'write']
    _child_classes = dict(
        list=list,
        use_active=use_active,
        restore_state=restore_state,
        copy=copy_4,
        read=read_3,
        write=write_1,
    )
    child_object_type = display_states_child
    return_type = 'object'

class auto_scale_3(Command):
    """
    'auto_scale' command.
    """
    _version = '231'
    fluent_name = 'auto-scale'
    _python_name = 'auto_scale'
    return_type = 'object'

class reset_to_default_view(Command):
    """
    Reset view to front and center.
    """
    _version = '231'
    fluent_name = 'reset-to-default-view'
    _python_name = 'reset_to_default_view'
    return_type = 'object'

class delete_view(Command):
    """
    Remove a view from the list.
    
    Parameters
    ----------
        view_name : str
            'view_name' child.
    """
    _version = '231'
    fluent_name = 'delete-view'
    _python_name = 'delete_view'
    argument_names = ['view_name']
    _child_classes = dict(
        view_name=view_name,
    )
    return_type = 'object'

class last_view(Command):
    """
    Return to the camera position before the last manipulation.
    """
    _version = '231'
    fluent_name = 'last-view'
    _python_name = 'last_view'
    return_type = 'object'

class next_view(Command):
    """
    Return to the camera position after the current position in the stack.
    """
    _version = '231'
    fluent_name = 'next-view'
    _python_name = 'next_view'
    return_type = 'object'

class list_views(Command):
    """
    List predefined and saved views.
    """
    _version = '231'
    fluent_name = 'list-views'
    _python_name = 'list_views'
    return_type = 'object'

class restore_view(Command):
    """
    Use a saved view.
    
    Parameters
    ----------
        view_name : str
            'view_name' child.
    """
    _version = '231'
    fluent_name = 'restore-view'
    _python_name = 'restore_view'
    argument_names = ['view_name']
    _child_classes = dict(
        view_name=view_name,
    )
    return_type = 'object'

class read_views(Command):
    """
    Read views from a view file.
    
    Parameters
    ----------
        filename : str
            'filename' child.
    """
    _version = '231'
    fluent_name = 'read-views'
    _python_name = 'read_views'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename,
    )
    return_type = 'object'

class view_name_1(String):
    """
    'view_name' child.
    """
    _version = '231'
    fluent_name = 'view-name'
    _python_name = 'view_name'
    return_type = 'object'

class save_view(Command):
    """
    Save the current view to the view list.
    
    Parameters
    ----------
        view_name : str
            'view_name' child.
    """
    _version = '231'
    fluent_name = 'save-view'
    _python_name = 'save_view'
    argument_names = ['view_name']
    _child_classes = dict(
        view_name=view_name_1,
    )
    return_type = 'object'

class view_list(StringList, AllowedValuesMixin):
    """
    'view_list' child.
    """
    _version = '231'
    fluent_name = 'view-list'
    _python_name = 'view_list'
    return_type = 'object'

class write_views(Command):
    """
    Write selected views to a view file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        view_list : List
            'view_list' child.
    """
    _version = '231'
    fluent_name = 'write-views'
    _python_name = 'write_views'
    argument_names = ['file_name', 'view_list']
    _child_classes = dict(
        file_name=file_name_1,
        view_list=view_list,
    )
    return_type = 'object'

class views(Group):
    """
    'views' child.
    """
    _version = '231'
    fluent_name = 'views'
    _python_name = 'views'
    child_names = ['camera', 'display_states']
    command_names = ['auto_scale', 'reset_to_default_view', 'delete_view', 'last_view', 'next_view', 'list_views', 'restore_view', 'read_views', 'save_view', 'write_views']
    _child_classes = dict(
        camera=camera,
        display_states=display_states,
        auto_scale=auto_scale_3,
        reset_to_default_view=reset_to_default_view,
        delete_view=delete_view,
        last_view=last_view,
        next_view=next_view,
        list_views=list_views,
        restore_view=restore_view,
        read_views=read_views,
        save_view=save_view,
        write_views=write_views,
    )
    return_type = 'object'

class border(Boolean):
    """
    Enable/disable drawing of a border around the axes window.
    """
    _version = '231'
    fluent_name = 'border?'
    _python_name = 'border'
    return_type = 'object'

class bottom(Real):
    """
    The bottom boundary of the axes window.
    """
    _version = '231'
    fluent_name = 'bottom'
    _python_name = 'bottom'
    return_type = 'object'

class clear_1(Boolean):
    """
    The transparency of the axes window.
    """
    _version = '231'
    fluent_name = 'clear?'
    _python_name = 'clear'
    return_type = 'object'

class left(Real):
    """
    The left boundary of the axes window.
    """
    _version = '231'
    fluent_name = 'left'
    _python_name = 'left'
    return_type = 'object'

class right_1(Real):
    """
    The right boundary of the axes window.
    """
    _version = '231'
    fluent_name = 'right'
    _python_name = 'right'
    return_type = 'object'

class top(Real):
    """
    The top boundary of the axes window.
    """
    _version = '231'
    fluent_name = 'top'
    _python_name = 'top'
    return_type = 'object'

class visible_1(Boolean):
    """
    Enable/disable axes visibility.
    """
    _version = '231'
    fluent_name = 'visible?'
    _python_name = 'visible'
    return_type = 'object'

class axes_2(Group):
    """
    The axes window options object.
    """
    _version = '231'
    fluent_name = 'axes'
    _python_name = 'axes'
    child_names = ['border', 'bottom', 'clear', 'left', 'right', 'top', 'visible']
    _child_classes = dict(
        border=border,
        bottom=bottom,
        clear=clear_1,
        left=left,
        right=right_1,
        top=top,
        visible=visible_1,
    )
    return_type = 'object'

class border_1(Boolean):
    """
    Enable/disable drawing of borders around the main viewing window.
    """
    _version = '231'
    fluent_name = 'border?'
    _python_name = 'border'
    return_type = 'object'

class bottom_1(Real):
    """
    The bottom boundary of the main viewing window.
    """
    _version = '231'
    fluent_name = 'bottom'
    _python_name = 'bottom'
    return_type = 'object'

class left_1(Real):
    """
    The left boundary of the main viewing window.
    """
    _version = '231'
    fluent_name = 'left'
    _python_name = 'left'
    return_type = 'object'

class right_2(Real):
    """
    The right boundary of the main viewing window.
    """
    _version = '231'
    fluent_name = 'right'
    _python_name = 'right'
    return_type = 'object'

class top_1(Real):
    """
    The top boundary of the main viewing window.
    """
    _version = '231'
    fluent_name = 'top'
    _python_name = 'top'
    return_type = 'object'

class visible_2(Boolean):
    """
    Enable/disable visibility of the main viewing window.
    """
    _version = '231'
    fluent_name = 'visible?'
    _python_name = 'visible'
    return_type = 'object'

class main(Group):
    """
    The main view window options object.
    """
    _version = '231'
    fluent_name = 'main'
    _python_name = 'main'
    child_names = ['border', 'bottom', 'left', 'right', 'top', 'visible']
    _child_classes = dict(
        border=border_1,
        bottom=bottom_1,
        left=left_1,
        right=right_2,
        top=top_1,
        visible=visible_2,
    )
    return_type = 'object'

class border_2(Boolean):
    """
    Enable/disable drawing of a border around the color scale window.
    """
    _version = '231'
    fluent_name = 'border?'
    _python_name = 'border'
    return_type = 'object'

class bottom_2(Real):
    """
    The bottom boundary of the color scale window.
    """
    _version = '231'
    fluent_name = 'bottom'
    _python_name = 'bottom'
    return_type = 'object'

class clear_2(Boolean):
    """
    The transparency of the scale window.
    """
    _version = '231'
    fluent_name = 'clear?'
    _python_name = 'clear'
    return_type = 'object'

class format_1(String):
    """
    The number format of the color scale window (e.g. %0.2e).
    """
    _version = '231'
    fluent_name = 'format'
    _python_name = 'format'
    return_type = 'object'

class font_size_1(Real):
    """
    The font size of the color scale window.
    """
    _version = '231'
    fluent_name = 'font-size'
    _python_name = 'font_size'
    return_type = 'object'

class left_2(Real):
    """
    The left boundary of the color scale window.
    """
    _version = '231'
    fluent_name = 'left'
    _python_name = 'left'
    return_type = 'object'

class margin(Real):
    """
    The margin of the color scale window.
    """
    _version = '231'
    fluent_name = 'margin'
    _python_name = 'margin'
    return_type = 'object'

class right_3(Real):
    """
    The right boundary of the color scale window.
    """
    _version = '231'
    fluent_name = 'right'
    _python_name = 'right'
    return_type = 'object'

class top_2(Real):
    """
    The top boundary of the color scale window.
    """
    _version = '231'
    fluent_name = 'top'
    _python_name = 'top'
    return_type = 'object'

class visible_3(Boolean):
    """
    Enable/disable visibility of the color scale window.
    """
    _version = '231'
    fluent_name = 'visible?'
    _python_name = 'visible'
    return_type = 'object'

class scale_3(Group):
    """
    The color scale window options object.
    """
    _version = '231'
    fluent_name = 'scale'
    _python_name = 'scale'
    child_names = ['border', 'bottom', 'clear', 'format', 'font_size', 'left', 'margin', 'right', 'top', 'visible']
    _child_classes = dict(
        border=border_2,
        bottom=bottom_2,
        clear=clear_2,
        format=format_1,
        font_size=font_size_1,
        left=left_2,
        margin=margin,
        right=right_3,
        top=top_2,
        visible=visible_3,
    )
    return_type = 'object'

class application(Boolean):
    """
    Show/hide the application name in the picture.
    """
    _version = '231'
    fluent_name = 'application?'
    _python_name = 'application'
    return_type = 'object'

class border_3(Boolean):
    """
    Enable/disable drawing of borders around text window.
    """
    _version = '231'
    fluent_name = 'border?'
    _python_name = 'border'
    return_type = 'object'

class bottom_3(Real):
    """
    The bottom boundary of the text window.
    """
    _version = '231'
    fluent_name = 'bottom'
    _python_name = 'bottom'
    return_type = 'object'

class clear_3(Boolean):
    """
    Enable/disable text window transparency.
    """
    _version = '231'
    fluent_name = 'clear?'
    _python_name = 'clear'
    return_type = 'object'

class company(Boolean):
    """
    Enable/disable the company name in the picture.
    """
    _version = '231'
    fluent_name = 'company?'
    _python_name = 'company'
    return_type = 'object'

class date(Boolean):
    """
    Enable/disable the date in the picture.
    """
    _version = '231'
    fluent_name = 'date?'
    _python_name = 'date'
    return_type = 'object'

class left_3(Real):
    """
    The left boundary of the text window.
    """
    _version = '231'
    fluent_name = 'left'
    _python_name = 'left'
    return_type = 'object'

class right_4(Real):
    """
    The right boundary of the text window.
    """
    _version = '231'
    fluent_name = 'right'
    _python_name = 'right'
    return_type = 'object'

class top_3(Real):
    """
    The top boundary of the text window.
    """
    _version = '231'
    fluent_name = 'top'
    _python_name = 'top'
    return_type = 'object'

class visible_4(Boolean):
    """
    Enable/disable text window transparency.
    """
    _version = '231'
    fluent_name = 'visible?'
    _python_name = 'visible'
    return_type = 'object'

class alignment(String, AllowedValuesMixin):
    """
    Align colormap with bottom/left/top/right.
    """
    _version = '231'
    fluent_name = 'alignment'
    _python_name = 'alignment'
    return_type = 'object'

class text(Group):
    """
    The text window options object.
    """
    _version = '231'
    fluent_name = 'text'
    _python_name = 'text'
    child_names = ['application', 'border', 'bottom', 'clear', 'company', 'date', 'left', 'right', 'top', 'visible', 'alignment']
    _child_classes = dict(
        application=application,
        border=border_3,
        bottom=bottom_3,
        clear=clear_3,
        company=company,
        date=date,
        left=left_3,
        right=right_4,
        top=top_3,
        visible=visible_4,
        alignment=alignment,
    )
    return_type = 'object'

class background_1(String):
    """
    The background color in the video picture.
    """
    _version = '231'
    fluent_name = 'background'
    _python_name = 'background'
    return_type = 'object'

class color_filter(String):
    """
    The color filter options for the picture.
    """
    _version = '231'
    fluent_name = 'color-filter'
    _python_name = 'color_filter'
    return_type = 'object'

class foreground_1(String):
    """
    The foreground color in the video picture.
    """
    _version = '231'
    fluent_name = 'foreground'
    _python_name = 'foreground'
    return_type = 'object'

class on(Boolean):
    """
    Enable/disable video picture settings.
    """
    _version = '231'
    fluent_name = 'on?'
    _python_name = 'on'
    return_type = 'object'

class width_1(Integer):
    """
    'width' child.
    """
    _version = '231'
    fluent_name = 'width'
    _python_name = 'width'
    return_type = 'object'

class height_1(Integer):
    """
    'height' child.
    """
    _version = '231'
    fluent_name = 'height'
    _python_name = 'height'
    return_type = 'object'

class margin_1(Integer):
    """
    'margin' child.
    """
    _version = '231'
    fluent_name = 'margin'
    _python_name = 'margin'
    return_type = 'object'

class pixel_size(Group):
    """
    'pixel_size' child.
    """
    _version = '231'
    fluent_name = 'pixel-size'
    _python_name = 'pixel_size'
    child_names = ['width', 'height', 'margin']
    _child_classes = dict(
        width=width_1,
        height=height_1,
        margin=margin_1,
    )
    return_type = 'object'

class video(Group):
    """
    The video window options object.
    """
    _version = '231'
    fluent_name = 'video'
    _python_name = 'video'
    child_names = ['background', 'color_filter', 'foreground', 'on', 'pixel_size']
    _child_classes = dict(
        background=background_1,
        color_filter=color_filter,
        foreground=foreground_1,
        on=on,
        pixel_size=pixel_size,
    )
    return_type = 'object'

class border_4(Boolean):
    """
    Enable/disable drawing of borders around the X-Y plotter window.
    """
    _version = '231'
    fluent_name = 'border?'
    _python_name = 'border'
    return_type = 'object'

class bottom_4(Real):
    """
    The bottom boundary of the X-Y plotter window.
    """
    _version = '231'
    fluent_name = 'bottom'
    _python_name = 'bottom'
    return_type = 'object'

class left_4(Real):
    """
    The left boundary of the X-Y plotter window.
    """
    _version = '231'
    fluent_name = 'left'
    _python_name = 'left'
    return_type = 'object'

class right_5(Real):
    """
    The right boundary of the X-Y plotter window.
    """
    _version = '231'
    fluent_name = 'right'
    _python_name = 'right'
    return_type = 'object'

class top_4(Real):
    """
    The top boundary of the X-Y plotter window.
    """
    _version = '231'
    fluent_name = 'top'
    _python_name = 'top'
    return_type = 'object'

class visible_5(Boolean):
    """
    Enable/disable X-Y plotter window visibility.
    """
    _version = '231'
    fluent_name = 'visible?'
    _python_name = 'visible'
    return_type = 'object'

class xy(Group):
    """
    The X-Y plot window options object.
    """
    _version = '231'
    fluent_name = 'xy'
    _python_name = 'xy'
    child_names = ['border', 'bottom', 'left', 'right', 'top', 'visible']
    _child_classes = dict(
        border=border_4,
        bottom=bottom_4,
        left=left_4,
        right=right_5,
        top=top_4,
        visible=visible_5,
    )
    return_type = 'object'

class logo(Boolean):
    """
    Enable/disable visibility of the logo in graphics window.
    """
    _version = '231'
    fluent_name = 'logo?'
    _python_name = 'logo'
    return_type = 'object'

class ruler_1(Boolean):
    """
    Enable/disable ruler visibility.
    """
    _version = '231'
    fluent_name = 'ruler?'
    _python_name = 'ruler'
    return_type = 'object'

class logo_color(String, AllowedValuesMixin):
    """
    Logo color to white/black.
    """
    _version = '231'
    fluent_name = 'logo-color'
    _python_name = 'logo_color'
    return_type = 'object'

class aspect_ratio(Command):
    """
    Set the aspect ratio of the active window.
    
    Parameters
    ----------
        width : real
            'width' child.
        height : real
            'height' child.
    """
    _version = '231'
    fluent_name = 'aspect-ratio'
    _python_name = 'aspect_ratio'
    argument_names = ['width', 'height']
    _child_classes = dict(
        width=width,
        height=height,
    )
    return_type = 'object'

class windows(Group):
    """
    'windows' child.
    """
    _version = '231'
    fluent_name = 'windows'
    _python_name = 'windows'
    child_names = ['axes', 'main', 'scale', 'text', 'video', 'xy', 'logo', 'ruler', 'logo_color']
    command_names = ['aspect_ratio']
    _child_classes = dict(
        axes=axes_2,
        main=main,
        scale=scale_3,
        text=text,
        video=video,
        xy=xy,
        logo=logo,
        ruler=ruler_1,
        logo_color=logo_color,
        aspect_ratio=aspect_ratio,
    )
    return_type = 'object'

class graphics(Group, _ChildNamedObjectAccessorMixin):
    """
    'graphics' child.
    """
    _version = '231'
    fluent_name = 'graphics'
    _python_name = 'graphics'
    child_names = ['contour', 'mesh', 'vector', 'pathline', 'particle_track', 'lic', 'olic', 'contours', 'particle_tracks', 'colors', 'lights', 'picture', 'views', 'windows']
    _child_classes = dict(
        contour=contour,
        mesh=mesh_2,
        vector=vector,
        pathline=pathline,
        particle_track=particle_track,
        lic=lic,
        olic=olic,
        contours=contours,
        particle_tracks=particle_tracks,
        colors=colors,
        lights=lights,
        picture=picture,
        views=views,
        windows=windows,
    )
    return_type = 'object'

class temporary(Boolean):
    """
    'temporary' child.
    """
    _version = '231'
    fluent_name = 'temporary?'
    _python_name = 'temporary'
    return_type = 'object'

class transparency(Integer):
    """
    'transparency' child.
    """
    _version = '231'
    fluent_name = 'transparency'
    _python_name = 'transparency'
    return_type = 'object'

class colormap_position(Integer):
    """
    'colormap_position' child.
    """
    _version = '231'
    fluent_name = 'colormap-position'
    _python_name = 'colormap_position'
    return_type = 'object'

class colormap_left(Real):
    """
    'colormap_left' child.
    """
    _version = '231'
    fluent_name = 'colormap-left'
    _python_name = 'colormap_left'
    return_type = 'object'

class colormap_bottom(Real):
    """
    'colormap_bottom' child.
    """
    _version = '231'
    fluent_name = 'colormap-bottom'
    _python_name = 'colormap_bottom'
    return_type = 'object'

class colormap_width(Real):
    """
    'colormap_width' child.
    """
    _version = '231'
    fluent_name = 'colormap-width'
    _python_name = 'colormap_width'
    return_type = 'object'

class colormap_height(Real):
    """
    'colormap_height' child.
    """
    _version = '231'
    fluent_name = 'colormap-height'
    _python_name = 'colormap_height'
    return_type = 'object'

class graphics_objects_child(Group):
    """
    'child_object_type' of graphics_objects.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'graphics_objects_child'
    child_names = ['name', 'transparency', 'colormap_position', 'colormap_left', 'colormap_bottom', 'colormap_width', 'colormap_height']
    _child_classes = dict(
        name=name_1,
        transparency=transparency,
        colormap_position=colormap_position,
        colormap_left=colormap_left,
        colormap_bottom=colormap_bottom,
        colormap_width=colormap_width,
        colormap_height=colormap_height,
    )
    return_type = 'object'

class graphics_objects(NamedObject[graphics_objects_child], CreatableNamedObjectMixinOld[graphics_objects_child]):
    """
    'graphics_objects' child.
    """
    _version = '231'
    fluent_name = 'graphics-objects'
    _python_name = 'graphics_objects'
    command_names = ['list']
    _child_classes = dict(
        list=list,
    )
    child_object_type = graphics_objects_child
    return_type = 'object'

class scene_child(Group):
    """
    'child_object_type' of scene.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'scene_child'
    child_names = ['name', 'title', 'temporary', 'graphics_objects', 'display_state_name']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        title=title,
        temporary=temporary,
        graphics_objects=graphics_objects,
        display_state_name=display_state_name,
        display=display_2,
    )
    return_type = 'object'

class scene(NamedObject[scene_child], CreatableNamedObjectMixinOld[scene_child]):
    """
    'scene' child.
    """
    _version = '231'
    fluent_name = 'scene'
    _python_name = 'scene'
    command_names = ['display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        display=display_1,
        copy=copy_3,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = scene_child
    return_type = 'object'

class methods_2(String, AllowedValuesMixin):
    """
    'methods' child.
    """
    _version = '231'
    fluent_name = 'methods'
    _python_name = 'methods'
    return_type = 'object'

class point_vector(RealList):
    """
    'point_vector' child.
    """
    _version = '231'
    fluent_name = 'point-vector'
    _python_name = 'point_vector'
    return_type = 'object'

class point_normal(RealList):
    """
    'point_normal' child.
    """
    _version = '231'
    fluent_name = 'point-normal'
    _python_name = 'point_normal'
    return_type = 'object'

class compute_from_view_plane(Boolean):
    """
    'compute_from_view_plane' child.
    """
    _version = '231'
    fluent_name = 'compute-from-view-plane?'
    _python_name = 'compute_from_view_plane'
    return_type = 'object'

class surface_aligned_normal(String, AllowedValuesMixin):
    """
    'surface_aligned_normal' child.
    """
    _version = '231'
    fluent_name = 'surface-aligned-normal'
    _python_name = 'surface_aligned_normal'
    return_type = 'object'

class p0(RealList):
    """
    'p0' child.
    """
    _version = '231'
    fluent_name = 'p0'
    _python_name = 'p0'
    return_type = 'object'

class p1(RealList):
    """
    'p1' child.
    """
    _version = '231'
    fluent_name = 'p1'
    _python_name = 'p1'
    return_type = 'object'

class p2(RealList):
    """
    'p2' child.
    """
    _version = '231'
    fluent_name = 'p2'
    _python_name = 'p2'
    return_type = 'object'

class bounded(Boolean):
    """
    'bounded' child.
    """
    _version = '231'
    fluent_name = 'bounded?'
    _python_name = 'bounded'
    return_type = 'object'

class sample_point(Boolean):
    """
    'sample_point' child.
    """
    _version = '231'
    fluent_name = 'sample-point?'
    _python_name = 'sample_point'
    return_type = 'object'

class edges_2(IntegerList):
    """
    'edges' child.
    """
    _version = '231'
    fluent_name = 'edges'
    _python_name = 'edges'
    return_type = 'object'

class plane_surface_child(Group):
    """
    'child_object_type' of plane_surface.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'plane_surface_child'
    child_names = ['methods', 'x', 'y', 'z', 'point_vector', 'point_normal', 'compute_from_view_plane', 'surface_aligned_normal', 'p0', 'p1', 'p2', 'bounded', 'sample_point', 'edges']
    _child_classes = dict(
        methods=methods_2,
        x=x,
        y=y,
        z=z,
        point_vector=point_vector,
        point_normal=point_normal,
        compute_from_view_plane=compute_from_view_plane,
        surface_aligned_normal=surface_aligned_normal,
        p0=p0,
        p1=p1,
        p2=p2,
        bounded=bounded,
        sample_point=sample_point,
        edges=edges_2,
    )
    return_type = 'object'

class plane_surface(NamedObject[plane_surface_child], CreatableNamedObjectMixinOld[plane_surface_child]):
    """
    'plane_surface' child.
    """
    _version = '231'
    fluent_name = 'plane-surface'
    _python_name = 'plane_surface'
    child_object_type = plane_surface_child
    return_type = 'object'

class surfaces_1(Group):
    """
    'surfaces' child.
    """
    _version = '231'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    child_names = ['plane_surface']
    _child_classes = dict(
        plane_surface=plane_surface,
    )
    return_type = 'object'

class start_frame(Integer):
    """
    'start_frame' child.
    """
    _version = '231'
    fluent_name = 'start-frame'
    _python_name = 'start_frame'
    return_type = 'object'

class end_frame(Integer):
    """
    'end_frame' child.
    """
    _version = '231'
    fluent_name = 'end-frame'
    _python_name = 'end_frame'
    return_type = 'object'

class increment(Integer):
    """
    'increment' child.
    """
    _version = '231'
    fluent_name = 'increment'
    _python_name = 'increment'
    return_type = 'object'

class set_custom_frames(Group):
    """
    Custom frames start, end, skip frames for video export.
    """
    _version = '231'
    fluent_name = 'set-custom-frames'
    _python_name = 'set_custom_frames'
    child_names = ['start_frame', 'end_frame', 'increment']
    _child_classes = dict(
        start_frame=start_frame,
        end_frame=end_frame,
        increment=increment,
    )
    return_type = 'object'

class fps(Integer):
    """
    The Frame Per Sec(FPS) for exporting video file.
    """
    _version = '231'
    fluent_name = 'fps'
    _python_name = 'fps'
    return_type = 'object'

class format_2(String, AllowedValuesMixin):
    """
    Format for exporting video file.
    """
    _version = '231'
    fluent_name = 'format'
    _python_name = 'format'
    return_type = 'object'

class quality_1(String, AllowedValuesMixin):
    """
    Quality for exporting video file.
    """
    _version = '231'
    fluent_name = 'quality'
    _python_name = 'quality'
    return_type = 'object'

class name_4(String):
    """
    Exporting video file name.
    """
    _version = '231'
    fluent_name = 'name'
    _python_name = 'name'
    return_type = 'object'

class use_original_resolution(Boolean):
    """
    Enable original resolution.
    """
    _version = '231'
    fluent_name = 'use-original-resolution'
    _python_name = 'use_original_resolution'
    return_type = 'object'

class scale_4(String, AllowedValuesMixin):
    """
    Scale by which video resolution will expand.
    """
    _version = '231'
    fluent_name = 'scale'
    _python_name = 'scale'
    return_type = 'object'

class set_standard_resolution(String, AllowedValuesMixin):
    """
    From pre-defined resolution list.
    """
    _version = '231'
    fluent_name = 'set-standard-resolution'
    _python_name = 'set_standard_resolution'
    return_type = 'object'

class width_2(Integer):
    """
    The width for exporting video file.
    """
    _version = '231'
    fluent_name = 'width'
    _python_name = 'width'
    return_type = 'object'

class height_2(Integer):
    """
    The height for exporting video file.
    """
    _version = '231'
    fluent_name = 'height'
    _python_name = 'height'
    return_type = 'object'

class bitrate_scale(String, AllowedValuesMixin):
    """
    Mp4 bitrate scale - Best-64000 High-32000 Medium-16000 Low-8000.
    """
    _version = '231'
    fluent_name = 'bitrate-scale'
    _python_name = 'bitrate_scale'
    return_type = 'object'

class enable_h264(Boolean):
    """
    H264 encoding flag.
    """
    _version = '231'
    fluent_name = 'enable-h264'
    _python_name = 'enable_h264'
    return_type = 'object'

class bitrate(Integer):
    """
    Video bitrate(kbits/sec) for exporting video file.
    """
    _version = '231'
    fluent_name = 'bitrate'
    _python_name = 'bitrate'
    return_type = 'object'

class compression_method(String, AllowedValuesMixin):
    """
    Compression methode for Microsoft AVI movie.
    """
    _version = '231'
    fluent_name = 'compression-method'
    _python_name = 'compression_method'
    return_type = 'object'

class keyframe(Integer):
    """
    Video keyframe rate for exporting video file.
    """
    _version = '231'
    fluent_name = 'keyframe'
    _python_name = 'keyframe'
    return_type = 'object'

class advance_quality(Group):
    """
    Advance Quality setting.
    """
    _version = '231'
    fluent_name = 'advance-quality'
    _python_name = 'advance_quality'
    child_names = ['bitrate_scale', 'enable_h264', 'bitrate', 'compression_method', 'keyframe']
    _child_classes = dict(
        bitrate_scale=bitrate_scale,
        enable_h264=enable_h264,
        bitrate=bitrate,
        compression_method=compression_method,
        keyframe=keyframe,
    )
    return_type = 'object'

class video_1(Group):
    """
    'video' child.
    """
    _version = '231'
    fluent_name = 'video'
    _python_name = 'video'
    child_names = ['fps', 'format', 'quality', 'name', 'use_original_resolution', 'scale', 'set_standard_resolution', 'width', 'height', 'advance_quality']
    _child_classes = dict(
        fps=fps,
        format=format_2,
        quality=quality_1,
        name=name_4,
        use_original_resolution=use_original_resolution,
        scale=scale_4,
        set_standard_resolution=set_standard_resolution,
        width=width_2,
        height=height_2,
        advance_quality=advance_quality,
    )
    return_type = 'object'

class read_from_file(Boolean):
    """
    'read_from_file' child.
    """
    _version = '231'
    fluent_name = 'read-from-file?'
    _python_name = 'read_from_file'
    return_type = 'object'

class animation_file_name(Filename):
    """
    'animation_file_name' child.
    """
    _version = '231'
    fluent_name = 'animation-file-name'
    _python_name = 'animation_file_name'
    return_type = 'object'

class select_from_available(Boolean):
    """
    'select_from_available' child.
    """
    _version = '231'
    fluent_name = 'select-from-available?'
    _python_name = 'select_from_available'
    return_type = 'object'

class animation_name(String, AllowedValuesMixin):
    """
    'animation_name' child.
    """
    _version = '231'
    fluent_name = 'animation-name'
    _python_name = 'animation_name'
    return_type = 'object'

class read_animation(Command):
    """
    Read new animation from file or already-defined animations.
    
    Parameters
    ----------
        read_from_file : bool
            'read_from_file' child.
        animation_file_name : str
            'animation_file_name' child.
        select_from_available : bool
            'select_from_available' child.
        animation_name : str
            'animation_name' child.
    """
    _version = '231'
    fluent_name = 'read-animation'
    _python_name = 'read_animation'
    argument_names = ['read_from_file', 'animation_file_name', 'select_from_available', 'animation_name']
    _child_classes = dict(
        read_from_file=read_from_file,
        animation_file_name=animation_file_name,
        select_from_available=select_from_available,
        animation_name=animation_name,
    )
    return_type = 'object'

class format_name(String, AllowedValuesMixin):
    """
    'format_name' child.
    """
    _version = '231'
    fluent_name = 'format-name'
    _python_name = 'format_name'
    return_type = 'object'

class write_animation(Command):
    """
    Write animation sequence to the file.
    
    Parameters
    ----------
        format_name : str
            'format_name' child.
    """
    _version = '231'
    fluent_name = 'write-animation'
    _python_name = 'write_animation'
    argument_names = ['format_name']
    _child_classes = dict(
        format_name=format_name,
    )
    return_type = 'object'

class view_1(Boolean):
    """
    Yes: "Stored View", no: "Different View".
    """
    _version = '231'
    fluent_name = 'view?'
    _python_name = 'view'
    return_type = 'object'

class stored_view(Command):
    """
    Play the 3D animation sequence using the view stored in the sequence.
    
    Parameters
    ----------
        view : bool
            Yes: "Stored View", no: "Different View".
    """
    _version = '231'
    fluent_name = 'stored-view?'
    _python_name = 'stored_view'
    argument_names = ['view']
    _child_classes = dict(
        view=view_1,
    )
    return_type = 'object'

class playback(Group):
    """
    'playback' child.
    """
    _version = '231'
    fluent_name = 'playback'
    _python_name = 'playback'
    child_names = ['set_custom_frames', 'video']
    command_names = ['read_animation', 'write_animation', 'stored_view']
    _child_classes = dict(
        set_custom_frames=set_custom_frames,
        video=video_1,
        read_animation=read_animation,
        write_animation=write_animation,
        stored_view=stored_view,
    )
    return_type = 'object'

class animations(Group):
    """
    'animations' child.
    """
    _version = '231'
    fluent_name = 'animations'
    _python_name = 'animations'
    child_names = ['playback']
    _child_classes = dict(
        playback=playback,
    )
    return_type = 'object'

class position_on_x_axis(Boolean):
    """
    'position_on_x_axis' child.
    """
    _version = '231'
    fluent_name = 'position-on-x-axis?'
    _python_name = 'position_on_x_axis'
    return_type = 'object'

class position_on_y_axis(Boolean):
    """
    'position_on_y_axis' child.
    """
    _version = '231'
    fluent_name = 'position-on-y-axis?'
    _python_name = 'position_on_y_axis'
    return_type = 'object'

class options_10(Group):
    """
    'options' child.
    """
    _version = '231'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['node_values', 'position_on_x_axis', 'position_on_y_axis']
    _child_classes = dict(
        node_values=node_values,
        position_on_x_axis=position_on_x_axis,
        position_on_y_axis=position_on_y_axis,
    )
    return_type = 'object'

class x_component(Integer):
    """
    'x_component' child.
    """
    _version = '231'
    fluent_name = 'x-component'
    _python_name = 'x_component'
    return_type = 'object'

class y_component(Integer):
    """
    'y_component' child.
    """
    _version = '231'
    fluent_name = 'y-component'
    _python_name = 'y_component'
    return_type = 'object'

class z_component(Integer):
    """
    'z_component' child.
    """
    _version = '231'
    fluent_name = 'z-component'
    _python_name = 'z_component'
    return_type = 'object'

class direction_vector_2(Group):
    """
    'direction_vector' child.
    """
    _version = '231'
    fluent_name = 'direction-vector'
    _python_name = 'direction_vector'
    child_names = ['x_component', 'y_component', 'z_component']
    _child_classes = dict(
        x_component=x_component,
        y_component=y_component,
        z_component=z_component,
    )
    return_type = 'object'

class default(Boolean):
    """
    'default' child.
    """
    _version = '231'
    fluent_name = 'default'
    _python_name = 'default'
    return_type = 'object'

class curve_length(Group):
    """
    'curve_length' child.
    """
    _version = '231'
    fluent_name = 'curve-length'
    _python_name = 'curve_length'
    child_names = ['option', 'default', 'reverse']
    _child_classes = dict(
        option=option_3,
        default=default,
        reverse=reverse,
    )
    return_type = 'object'

class plot_direction(Group):
    """
    'plot_direction' child.
    """
    _version = '231'
    fluent_name = 'plot-direction'
    _python_name = 'plot_direction'
    child_names = ['option', 'direction_vector', 'curve_length']
    _child_classes = dict(
        option=option_3,
        direction_vector=direction_vector_2,
        curve_length=curve_length,
    )
    return_type = 'object'

class y_axis_function(String, AllowedValuesMixin):
    """
    'y_axis_function' child.
    """
    _version = '231'
    fluent_name = 'y-axis-function'
    _python_name = 'y_axis_function'
    return_type = 'object'

class xy_plot_child(Group):
    """
    'child_object_type' of xy_plot.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'xy_plot_child'
    child_names = ['name', 'uid', 'options', 'plot_direction', 'x_axis_function', 'y_axis_function', 'surfaces_list', 'physics', 'geometry', 'surfaces', 'axes', 'curves']
    command_names = ['display']
    _child_classes = dict(
        name=name_1,
        uid=uid,
        options=options_10,
        plot_direction=plot_direction,
        x_axis_function=x_axis_function,
        y_axis_function=y_axis_function,
        surfaces_list=surfaces_list,
        physics=physics,
        geometry=geometry_3,
        surfaces=surfaces,
        axes=axes,
        curves=curves,
        display=display_2,
    )
    return_type = 'object'

class xy_plot(NamedObject[xy_plot_child], CreatableNamedObjectMixinOld[xy_plot_child]):
    """
    'xy_plot' child.
    """
    _version = '231'
    fluent_name = 'xy-plot'
    _python_name = 'xy_plot'
    command_names = ['display', 'copy', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        display=display_1,
        copy=copy_3,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = xy_plot_child
    return_type = 'object'

class plot_1(Group):
    """
    'plot' child.
    """
    _version = '231'
    fluent_name = 'plot'
    _python_name = 'plot'
    child_names = ['xy_plot']
    _child_classes = dict(
        xy_plot=xy_plot,
    )
    return_type = 'object'

class list_simulation_reports(Command):
    """
    List all report names.
    """
    _version = '231'
    fluent_name = 'list-simulation-reports'
    _python_name = 'list_simulation_reports'
    return_type = 'object'

class report_name(String):
    """
    'report_name' child.
    """
    _version = '231'
    fluent_name = 'report-name'
    _python_name = 'report_name'
    return_type = 'object'

class generate_simulation_report(Command):
    """
    Generate a new simulation report or regenerate an existing simulation report with the provided name.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '231'
    fluent_name = 'generate-simulation-report'
    _python_name = 'generate_simulation_report'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )
    return_type = 'object'

class view_simulation_report(Command):
    """
    View a simulation report that has already been generated. In batch mode this will print the report's URL.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '231'
    fluent_name = 'view-simulation-report'
    _python_name = 'view_simulation_report'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )
    return_type = 'object'

class file_name_path(Filename):
    """
    'file_name_path' child.
    """
    _version = '231'
    fluent_name = 'file-name-path'
    _python_name = 'file_name_path'
    return_type = 'object'

class export_simulation_report_as_pdf(Command):
    """
    Export the provided simulation report as a PDF file.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
        file_name_path : str
            'file_name_path' child.
    """
    _version = '231'
    fluent_name = 'export-simulation-report-as-pdf'
    _python_name = 'export_simulation_report_as_pdf'
    argument_names = ['report_name', 'file_name_path']
    _child_classes = dict(
        report_name=report_name,
        file_name_path=file_name_path,
    )
    return_type = 'object'

class output_dir(Filename):
    """
    'output_dir' child.
    """
    _version = '231'
    fluent_name = 'output-dir'
    _python_name = 'output_dir'
    return_type = 'object'

class export_simulation_report_as_html(Command):
    """
    Export the provided simulation report as HTML.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
        output_dir : str
            'output_dir' child.
    """
    _version = '231'
    fluent_name = 'export-simulation-report-as-html'
    _python_name = 'export_simulation_report_as_html'
    argument_names = ['report_name', 'output_dir']
    _child_classes = dict(
        report_name=report_name,
        output_dir=output_dir,
    )
    return_type = 'object'

class export_simulation_report_as_pptx(Command):
    """
    Export the provided simulation report as a PPT file.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
        file_name_path : str
            'file_name_path' child.
    """
    _version = '231'
    fluent_name = 'export-simulation-report-as-pptx'
    _python_name = 'export_simulation_report_as_pptx'
    argument_names = ['report_name', 'file_name_path']
    _child_classes = dict(
        report_name=report_name,
        file_name_path=file_name_path,
    )
    return_type = 'object'

class file_path(String):
    """
    'file_path' child.
    """
    _version = '231'
    fluent_name = 'file-path'
    _python_name = 'file_path'
    return_type = 'object'

class write_simulation_report_names_to_file(Command):
    """
    Write the list of currently generated report names to a txt file.
    
    Parameters
    ----------
        file_path : str
            'file_path' child.
    """
    _version = '231'
    fluent_name = 'write-simulation-report-names-to-file'
    _python_name = 'write_simulation_report_names_to_file'
    argument_names = ['file_path']
    _child_classes = dict(
        file_path=file_path,
    )
    return_type = 'object'

class new_report_name(String):
    """
    'new_report_name' child.
    """
    _version = '231'
    fluent_name = 'new-report-name'
    _python_name = 'new_report_name'
    return_type = 'object'

class rename_simulation_report(Command):
    """
    Rename a report which has already been generated.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
        new_report_name : str
            'new_report_name' child.
    """
    _version = '231'
    fluent_name = 'rename-simulation-report'
    _python_name = 'rename_simulation_report'
    argument_names = ['report_name', 'new_report_name']
    _child_classes = dict(
        report_name=report_name,
        new_report_name=new_report_name,
    )
    return_type = 'object'

class duplicate_simulation_report(Command):
    """
    Duplicate the provided simulation report.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '231'
    fluent_name = 'duplicate-simulation-report'
    _python_name = 'duplicate_simulation_report'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )
    return_type = 'object'

class reset_report_to_defaults(Command):
    """
    Reset all report settings to default for the provided simulation report.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '231'
    fluent_name = 'reset-report-to-defaults'
    _python_name = 'reset_report_to_defaults'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )
    return_type = 'object'

class delete_simulation_report(Command):
    """
    Delete the provided simulation report.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '231'
    fluent_name = 'delete-simulation-report'
    _python_name = 'delete_simulation_report'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )
    return_type = 'object'

class file_name_path_1(String):
    """
    'file_name_path' child.
    """
    _version = '231'
    fluent_name = 'file-name-path'
    _python_name = 'file_name_path'
    return_type = 'object'

class write_simulation_report_template_file(Command):
    """
    'write_simulation_report_template_file' command.
    """
    _version = '231'
    fluent_name = 'write-simulation-report-template-file'
    _python_name = 'write_simulation_report_template_file'
    argument_names = ['file_name_path']
    _child_classes = dict(
        file_name_path=file_name_path_1,
    )
    return_type = 'object'

class read_simulation_report_template_file(Command):
    """
    Read a JSON template file with existing Simulation Report settings.
    
    Parameters
    ----------
        file_name_path : str
            'file_name_path' child.
    """
    _version = '231'
    fluent_name = 'read-simulation-report-template-file'
    _python_name = 'read_simulation_report_template_file'
    argument_names = ['file_name_path']
    _child_classes = dict(
        file_name_path=file_name_path_1,
    )
    return_type = 'object'

class simulation_reports(Group):
    """
    'simulation_reports' child.
    """
    _version = '231'
    fluent_name = 'simulation-reports'
    _python_name = 'simulation_reports'
    command_names = ['list_simulation_reports', 'generate_simulation_report', 'view_simulation_report', 'export_simulation_report_as_pdf', 'export_simulation_report_as_html', 'export_simulation_report_as_pptx', 'write_simulation_report_names_to_file', 'rename_simulation_report', 'duplicate_simulation_report', 'reset_report_to_defaults', 'delete_simulation_report', 'write_simulation_report_template_file', 'read_simulation_report_template_file']
    _child_classes = dict(
        list_simulation_reports=list_simulation_reports,
        generate_simulation_report=generate_simulation_report,
        view_simulation_report=view_simulation_report,
        export_simulation_report_as_pdf=export_simulation_report_as_pdf,
        export_simulation_report_as_html=export_simulation_report_as_html,
        export_simulation_report_as_pptx=export_simulation_report_as_pptx,
        write_simulation_report_names_to_file=write_simulation_report_names_to_file,
        rename_simulation_report=rename_simulation_report,
        duplicate_simulation_report=duplicate_simulation_report,
        reset_report_to_defaults=reset_report_to_defaults,
        delete_simulation_report=delete_simulation_report,
        write_simulation_report_template_file=write_simulation_report_template_file,
        read_simulation_report_template_file=read_simulation_report_template_file,
    )
    return_type = 'object'

class auto_range_1(Boolean):
    """
    Automatically compute range of sampling variable for histogram plots.
    """
    _version = '231'
    fluent_name = 'auto-range?'
    _python_name = 'auto_range'
    return_type = 'object'

class correlation(Boolean):
    """
    Compute correlation of sampling variable with other variable.
    """
    _version = '231'
    fluent_name = 'correlation?'
    _python_name = 'correlation'
    return_type = 'object'

class cumulation_curve(Boolean):
    """
    Compute a cumulative curve for sampling variable or correlation variable when correlation? was specified.
    """
    _version = '231'
    fluent_name = 'cumulation-curve?'
    _python_name = 'cumulation_curve'
    return_type = 'object'

class diameter_statistics(Boolean):
    """
    Compute Rosin Rammler parameters, Sauter and other mean diameters.
    Requires specification of diameter as sampling variable.
    """
    _version = '231'
    fluent_name = 'diameter-statistics?'
    _python_name = 'diameter_statistics'
    return_type = 'object'

class histogram_mode(Boolean):
    """
    Use bars for histogram plot or xy-style.
    """
    _version = '231'
    fluent_name = 'histogram-mode?'
    _python_name = 'histogram_mode'
    return_type = 'object'

class percentage(Boolean):
    """
    Use percentages of bins to be computed.
    """
    _version = '231'
    fluent_name = 'percentage?'
    _python_name = 'percentage'
    return_type = 'object'

class variable_3(Boolean):
    """
    Use the cubic of the cumulation variable during computation of the cumulative curve.
    When the particle mass was not sampled, the diameter can be used instead.
    """
    _version = '231'
    fluent_name = 'variable^3?'
    _python_name = 'variable_3'
    return_type = 'object'

class logarithmic(Boolean):
    """
    Use logarithmic scaling on the abscissa (variable axis)? -- Will not work unless all values are positive.
    """
    _version = '231'
    fluent_name = 'logarithmic?'
    _python_name = 'logarithmic'
    return_type = 'object'

class weighting(Boolean):
    """
    Use weighting with additional variable when sorting data into samples.
    """
    _version = '231'
    fluent_name = 'weighting?'
    _python_name = 'weighting'
    return_type = 'object'

class histogram_options(Group):
    """
    The settings object.
    """
    _version = '231'
    fluent_name = 'histogram-options'
    _python_name = 'histogram_options'
    child_names = ['auto_range', 'correlation', 'cumulation_curve', 'diameter_statistics', 'histogram_mode', 'percentage', 'variable_3', 'logarithmic', 'weighting']
    _child_classes = dict(
        auto_range=auto_range_1,
        correlation=correlation,
        cumulation_curve=cumulation_curve,
        diameter_statistics=diameter_statistics,
        histogram_mode=histogram_mode,
        percentage=percentage,
        variable_3=variable_3,
        logarithmic=logarithmic,
        weighting=weighting,
    )
    return_type = 'object'

class minimum_val(Real):
    """
    Mimimum value of x-axis variable for histogram plots.
    """
    _version = '231'
    fluent_name = 'minimum-val'
    _python_name = 'minimum_val'
    return_type = 'object'

class maximum_val(Real):
    """
    Maximum value of x-axis variable for histogram plots.
    """
    _version = '231'
    fluent_name = 'maximum-val'
    _python_name = 'maximum_val'
    return_type = 'object'

class division_val(Integer):
    """
    The number of bins.
    """
    _version = '231'
    fluent_name = 'division-val'
    _python_name = 'division_val'
    return_type = 'object'

class histogram_parameters(Group):
    """
    The parameter object.
    """
    _version = '231'
    fluent_name = 'histogram-parameters'
    _python_name = 'histogram_parameters'
    child_names = ['minimum_val', 'maximum_val', 'division_val']
    _child_classes = dict(
        minimum_val=minimum_val,
        maximum_val=maximum_val,
        division_val=division_val,
    )
    return_type = 'object'

class loaded_samples(String, AllowedValuesMixin):
    """
    'loaded_samples' child.
    """
    _version = '231'
    fluent_name = 'loaded-samples'
    _python_name = 'loaded_samples'
    return_type = 'object'

class variable_to_sampled(String, AllowedValuesMixin):
    """
    'variable_to_sampled' child.
    """
    _version = '231'
    fluent_name = 'variable-to-sampled'
    _python_name = 'variable_to_sampled'
    return_type = 'object'

class weighting_var(String, AllowedValuesMixin):
    """
    'weighting_var' child.
    """
    _version = '231'
    fluent_name = 'weighting-var'
    _python_name = 'weighting_var'
    return_type = 'object'

class correlation_var(String, AllowedValuesMixin):
    """
    'correlation_var' child.
    """
    _version = '231'
    fluent_name = 'correlation-var'
    _python_name = 'correlation_var'
    return_type = 'object'

class read_fn(Filename):
    """
    'read_fn' child.
    """
    _version = '231'
    fluent_name = 'read-fn'
    _python_name = 'read_fn'
    return_type = 'object'

class plot_sample(Command):
    """
    'plot_sample' command.
    """
    _version = '231'
    fluent_name = 'plot-sample'
    _python_name = 'plot_sample'
    argument_names = ['loaded_samples', 'variable_to_sampled', 'weighting_var', 'correlation_var', 'read_fn', 'overwrite']
    _child_classes = dict(
        loaded_samples=loaded_samples,
        variable_to_sampled=variable_to_sampled,
        weighting_var=weighting_var,
        correlation_var=correlation_var,
        read_fn=read_fn,
        overwrite=overwrite,
    )
    return_type = 'object'

class write_sample(Command):
    """
    'write_sample' command.
    """
    _version = '231'
    fluent_name = 'write-sample'
    _python_name = 'write_sample'
    argument_names = ['loaded_samples', 'variable_to_sampled', 'weighting_var', 'correlation_var', 'read_fn', 'overwrite']
    _child_classes = dict(
        loaded_samples=loaded_samples,
        variable_to_sampled=variable_to_sampled,
        weighting_var=weighting_var,
        correlation_var=correlation_var,
        read_fn=read_fn,
        overwrite=overwrite,
    )
    return_type = 'object'

class plot_write_sample(Group):
    """
    'plot_write_sample' child.
    """
    _version = '231'
    fluent_name = 'plot-write-sample'
    _python_name = 'plot_write_sample'
    command_names = ['plot_sample', 'write_sample']
    _child_classes = dict(
        plot_sample=plot_sample,
        write_sample=write_sample,
    )
    return_type = 'object'

class use_weighting(Boolean):
    """
    'use_weighting' child.
    """
    _version = '231'
    fluent_name = 'use-weighting?'
    _python_name = 'use_weighting'
    return_type = 'object'

class make_steady_from_unsteady_file(Boolean):
    """
    Specifies whether the unsteady sample is to be reduced into a steady-state injection file.
    """
    _version = '231'
    fluent_name = 'make-steady-from-unsteady-file?'
    _python_name = 'make_steady_from_unsteady_file'
    return_type = 'object'

class change_curr_sample(Boolean):
    """
    'change_curr_sample' child.
    """
    _version = '231'
    fluent_name = 'change-curr-sample?'
    _python_name = 'change_curr_sample'
    return_type = 'object'

class sample(String, AllowedValuesMixin):
    """
    'sample' child.
    """
    _version = '231'
    fluent_name = 'sample'
    _python_name = 'sample'
    return_type = 'object'

class weighting_variable(Command):
    """
    Choose the weighting variable for the averaging in each bin in the data reduction.
    
    Parameters
    ----------
        change_curr_sample : bool
            'change_curr_sample' child.
        sample : str
            'sample' child.
    """
    _version = '231'
    fluent_name = 'weighting-variable'
    _python_name = 'weighting_variable'
    argument_names = ['change_curr_sample', 'sample']
    _child_classes = dict(
        change_curr_sample=change_curr_sample,
        sample=sample,
    )
    return_type = 'object'

class sample_var(String, AllowedValuesMixin):
    """
    'sample_var' child.
    """
    _version = '231'
    fluent_name = 'sample-var'
    _python_name = 'sample_var'
    return_type = 'object'

class reset_range(Boolean):
    """
    'reset_range' child.
    """
    _version = '231'
    fluent_name = 'reset-range?'
    _python_name = 'reset_range'
    return_type = 'object'

class reset_min_and_max(Command):
    """
    Reset the min and max values of the range to be considered for a specific variable in the data reduction.
    
    Parameters
    ----------
        sample_var : str
            'sample_var' child.
        reset_range : bool
            'reset_range' child.
    """
    _version = '231'
    fluent_name = 'reset-min-and-max'
    _python_name = 'reset_min_and_max'
    argument_names = ['sample_var', 'reset_range']
    _child_classes = dict(
        sample_var=sample_var,
        reset_range=reset_range,
    )
    return_type = 'object'

class min_val(Real):
    """
    'min_val' child.
    """
    _version = '231'
    fluent_name = 'min-val'
    _python_name = 'min_val'
    return_type = 'object'

class set_minimum(Command):
    """
    Set the minimum value of the range to be considered for a specific variable in the data reduction.
    
    Parameters
    ----------
        sample_var : str
            'sample_var' child.
        min_val : real
            'min_val' child.
    """
    _version = '231'
    fluent_name = 'set-minimum'
    _python_name = 'set_minimum'
    argument_names = ['sample_var', 'min_val']
    _child_classes = dict(
        sample_var=sample_var,
        min_val=min_val,
    )
    return_type = 'object'

class max_val(Real):
    """
    'max_val' child.
    """
    _version = '231'
    fluent_name = 'max-val'
    _python_name = 'max_val'
    return_type = 'object'

class set_maximum(Command):
    """
    'set_maximum' command.
    """
    _version = '231'
    fluent_name = 'set-maximum'
    _python_name = 'set_maximum'
    argument_names = ['sample_var', 'max_val']
    _child_classes = dict(
        sample_var=sample_var,
        max_val=max_val,
    )
    return_type = 'object'

class enable_log(Boolean):
    """
    'enable_log' child.
    """
    _version = '231'
    fluent_name = 'enable-log?'
    _python_name = 'enable_log'
    return_type = 'object'

class use_logarithmic(Command):
    """
    Switch on or off logarithmic scaling to be used for a specific variable in the data reduction.
    
    Parameters
    ----------
        sample_var : str
            'sample_var' child.
        enable_log : bool
            'enable_log' child.
    """
    _version = '231'
    fluent_name = 'use-logarithmic?'
    _python_name = 'use_logarithmic'
    argument_names = ['sample_var', 'enable_log']
    _child_classes = dict(
        sample_var=sample_var,
        enable_log=enable_log,
    )
    return_type = 'object'

class num_bins(Integer):
    """
    'num_bins' child.
    """
    _version = '231'
    fluent_name = 'num-bins'
    _python_name = 'num_bins'
    return_type = 'object'

class number_of_bins(Command):
    """
    Set the number of bins to be used for a specific variable in the data reduction.
    
    Parameters
    ----------
        sample_var : str
            'sample_var' child.
        num_bins : int
            'num_bins' child.
    """
    _version = '231'
    fluent_name = 'number-of-bins'
    _python_name = 'number_of_bins'
    argument_names = ['sample_var', 'num_bins']
    _child_classes = dict(
        sample_var=sample_var,
        num_bins=num_bins,
    )
    return_type = 'object'

class all_var_num_of_bins(Integer):
    """
    'all_var_num_of_bins' child.
    """
    _version = '231'
    fluent_name = 'all-var-num-of-bins'
    _python_name = 'all_var_num_of_bins'
    return_type = 'object'

class all_variables_number_of_bins(Command):
    """
    Set the number of bins to be used for ALL variables in the data reduction.
    
    Parameters
    ----------
        all_var_num_of_bins : int
            'all_var_num_of_bins' child.
    """
    _version = '231'
    fluent_name = 'all-variables-number-of-bins'
    _python_name = 'all_variables_number_of_bins'
    argument_names = ['all_var_num_of_bins']
    _child_classes = dict(
        all_var_num_of_bins=all_var_num_of_bins,
    )
    return_type = 'object'

class list_settings(Command):
    """
    List all user inputs for the sample picked for data reduction.
    """
    _version = '231'
    fluent_name = 'list-settings?'
    _python_name = 'list_settings'
    return_type = 'object'

class setup_reduction(Group):
    """
    Up the sample data reduction by specifying all relevant options and setting parameters as desired.
    """
    _version = '231'
    fluent_name = 'setup-reduction'
    _python_name = 'setup_reduction'
    child_names = ['use_weighting', 'make_steady_from_unsteady_file']
    command_names = ['weighting_variable', 'reset_min_and_max', 'set_minimum', 'set_maximum', 'use_logarithmic', 'number_of_bins', 'all_variables_number_of_bins', 'list_settings']
    _child_classes = dict(
        use_weighting=use_weighting,
        make_steady_from_unsteady_file=make_steady_from_unsteady_file,
        weighting_variable=weighting_variable,
        reset_min_and_max=reset_min_and_max,
        set_minimum=set_minimum,
        set_maximum=set_maximum,
        use_logarithmic=use_logarithmic,
        number_of_bins=number_of_bins,
        all_variables_number_of_bins=all_variables_number_of_bins,
        list_settings=list_settings,
    )
    return_type = 'object'

class pick_sample_to_reduce(Command):
    """
    Pick a sample for which to first set-up and then perform the data reduction.
    
    Parameters
    ----------
        change_curr_sample : bool
            'change_curr_sample' child.
        sample : str
            'sample' child.
    """
    _version = '231'
    fluent_name = 'pick-sample-to-reduce'
    _python_name = 'pick_sample_to_reduce'
    argument_names = ['change_curr_sample', 'sample']
    _child_classes = dict(
        change_curr_sample=change_curr_sample,
        sample=sample,
    )
    return_type = 'object'

class check_reduction_wt(Boolean):
    """
    'check_reduction_wt' child.
    """
    _version = '231'
    fluent_name = 'check-reduction-wt?'
    _python_name = 'check_reduction_wt'
    return_type = 'object'

class reduce_picked_sample(Command):
    """
    Reduce a sample after first picking it and setting up all data-reduction options and parameters.
    
    Parameters
    ----------
        check_reduction_wt : bool
            'check_reduction_wt' child.
        file_name : str
            'file_name' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'reduce-picked-sample'
    _python_name = 'reduce_picked_sample'
    argument_names = ['check_reduction_wt', 'file_name', 'overwrite']
    _child_classes = dict(
        check_reduction_wt=check_reduction_wt,
        file_name=file_name_1,
        overwrite=overwrite,
    )
    return_type = 'object'

class reduction(Group):
    """
    'reduction' child.
    """
    _version = '231'
    fluent_name = 'reduction'
    _python_name = 'reduction'
    child_names = ['setup_reduction']
    command_names = ['pick_sample_to_reduce', 'reduce_picked_sample']
    _child_classes = dict(
        setup_reduction=setup_reduction,
        pick_sample_to_reduce=pick_sample_to_reduce,
        reduce_picked_sample=reduce_picked_sample,
    )
    return_type = 'object'

class select_sample(String, AllowedValuesMixin):
    """
    'select_sample' child.
    """
    _version = '231'
    fluent_name = 'select-sample'
    _python_name = 'select_sample'
    return_type = 'object'

class plotting_grid_interval_size(Real):
    """
    'plotting_grid_interval_size' child.
    """
    _version = '231'
    fluent_name = 'plotting-grid-interval-size'
    _python_name = 'plotting_grid_interval_size'
    return_type = 'object'

class prepare_expressions(Command):
    """
    'prepare_expressions' command.
    """
    _version = '231'
    fluent_name = 'prepare-expressions'
    _python_name = 'prepare_expressions'
    return_type = 'object'

class dpm_sample_contour_plots(Group):
    """
    'dpm_sample_contour_plots' child.
    """
    _version = '231'
    fluent_name = 'dpm-sample-contour-plots'
    _python_name = 'dpm_sample_contour_plots'
    child_names = ['select_sample', 'plotting_grid_interval_size']
    command_names = ['prepare_expressions']
    _child_classes = dict(
        select_sample=select_sample,
        plotting_grid_interval_size=plotting_grid_interval_size,
        prepare_expressions=prepare_expressions,
    )
    return_type = 'object'

class compute_sample(Command):
    """
    Compute minimum/maximum of a sample variable.
    
    Parameters
    ----------
        sample : str
            'sample' child.
        variable : str
            'variable' child.
    """
    _version = '231'
    fluent_name = 'compute-sample'
    _python_name = 'compute_sample'
    argument_names = ['sample', 'variable']
    _child_classes = dict(
        sample=sample,
        variable=variable,
    )
    return_type = 'object'

class delete_sample(Command):
    """
    'delete_sample' command.
    """
    _version = '231'
    fluent_name = 'delete-sample'
    _python_name = 'delete_sample'
    argument_names = ['sample']
    _child_classes = dict(
        sample=sample,
    )
    return_type = 'object'

class list_samples(Command):
    """
    Show all samples in loaded sample list.
    """
    _version = '231'
    fluent_name = 'list-samples'
    _python_name = 'list_samples'
    return_type = 'object'

class sample_file(Filename):
    """
    The name of a sample file to be loaded.
    """
    _version = '231'
    fluent_name = 'sample-file'
    _python_name = 'sample_file'
    return_type = 'object'

class read_sample_file(Command):
    """
    Read a sample file and add it to the sample list.
    
    Parameters
    ----------
        sample_file : str
            The name of a sample file to be loaded.
    """
    _version = '231'
    fluent_name = 'read-sample-file'
    _python_name = 'read_sample_file'
    argument_names = ['sample_file']
    _child_classes = dict(
        sample_file=sample_file,
    )
    return_type = 'object'

class histogram(Group):
    """
    'histogram' child.
    """
    _version = '231'
    fluent_name = 'histogram'
    _python_name = 'histogram'
    child_names = ['histogram_options', 'histogram_parameters', 'plot_write_sample', 'reduction', 'dpm_sample_contour_plots']
    command_names = ['compute_sample', 'delete_sample', 'list_samples', 'read_sample_file']
    _child_classes = dict(
        histogram_options=histogram_options,
        histogram_parameters=histogram_parameters,
        plot_write_sample=plot_write_sample,
        reduction=reduction,
        dpm_sample_contour_plots=dpm_sample_contour_plots,
        compute_sample=compute_sample,
        delete_sample=delete_sample,
        list_samples=list_samples,
        read_sample_file=read_sample_file,
    )
    return_type = 'object'

class user_defined_functions_1(String):
    """
    The DPM sampling output UDF.
    """
    _version = '231'
    fluent_name = 'user-defined-functions'
    _python_name = 'user_defined_functions'
    return_type = 'object'

class sort_sample_files(Boolean):
    """
    Enable writing of sorted DPM sample files.
    """
    _version = '231'
    fluent_name = 'sort-sample-files'
    _python_name = 'sort_sample_files'
    return_type = 'object'

class injections_1(StringList, AllowedValuesMixin):
    """
    'injections' child.
    """
    _version = '231'
    fluent_name = 'injections'
    _python_name = 'injections'
    return_type = 'object'

class boundaries(StringList, AllowedValuesMixin):
    """
    'boundaries' child.
    """
    _version = '231'
    fluent_name = 'boundaries'
    _python_name = 'boundaries'
    return_type = 'object'

class lines_1(StringList):
    """
    'lines' child.
    """
    _version = '231'
    fluent_name = 'lines'
    _python_name = 'lines'
    return_type = 'object'

class planes(StringList):
    """
    'planes' child.
    """
    _version = '231'
    fluent_name = 'planes'
    _python_name = 'planes'
    return_type = 'object'

class op_udf(String):
    """
    'op_udf' child.
    """
    _version = '231'
    fluent_name = 'op-udf'
    _python_name = 'op_udf'
    return_type = 'object'

class append_sample(Boolean):
    """
    'append_sample' child.
    """
    _version = '231'
    fluent_name = 'append-sample?'
    _python_name = 'append_sample'
    return_type = 'object'

class accumulate_rates(Boolean):
    """
    'accumulate_rates' child.
    """
    _version = '231'
    fluent_name = 'accumulate-rates?'
    _python_name = 'accumulate_rates'
    return_type = 'object'

class sample_1(Command):
    """
    'sample' command.
    """
    _version = '231'
    fluent_name = 'sample'
    _python_name = 'sample'
    argument_names = ['injections', 'boundaries', 'lines', 'planes', 'op_udf', 'append_sample', 'accumulate_rates']
    _child_classes = dict(
        injections=injections_1,
        boundaries=boundaries,
        lines=lines_1,
        planes=planes,
        op_udf=op_udf,
        append_sample=append_sample,
        accumulate_rates=accumulate_rates,
    )
    return_type = 'object'

class sample_trajectories(Group):
    """
    'sample_trajectories' child.
    """
    _version = '231'
    fluent_name = 'sample-trajectories'
    _python_name = 'sample_trajectories'
    child_names = ['user_defined_functions', 'sort_sample_files']
    command_names = ['sample']
    _child_classes = dict(
        user_defined_functions=user_defined_functions_1,
        sort_sample_files=sort_sample_files,
        sample=sample_1,
    )
    return_type = 'object'

class summary_1(Command):
    """
    Print discrete phase summary report of particle fates.
    """
    _version = '231'
    fluent_name = 'summary'
    _python_name = 'summary'
    return_type = 'object'

class write_summary_to_file(Boolean):
    """
    'write_summary_to_file' child.
    """
    _version = '231'
    fluent_name = 'write-summary-to-file?'
    _python_name = 'write_summary_to_file'
    return_type = 'object'

class include_in_domains_particles(Boolean):
    """
    'include_in_domains_particles' child.
    """
    _version = '231'
    fluent_name = 'include-in-domains-particles?'
    _python_name = 'include_in_domains_particles'
    return_type = 'object'

class pick_injection(Boolean):
    """
    'pick_injection' child.
    """
    _version = '231'
    fluent_name = 'pick-injection?'
    _python_name = 'pick_injection'
    return_type = 'object'

class injection_1(String, AllowedValuesMixin):
    """
    'injection' child.
    """
    _version = '231'
    fluent_name = 'injection'
    _python_name = 'injection'
    return_type = 'object'

class extended_summary(Command):
    """
    Print extended discrete phase summary report of particle fates, with options.
    
    Parameters
    ----------
        write_summary_to_file : bool
            'write_summary_to_file' child.
        file_name : str
            'file_name' child.
        include_in_domains_particles : bool
            'include_in_domains_particles' child.
        pick_injection : bool
            'pick_injection' child.
        injection : str
            'injection' child.
    """
    _version = '231'
    fluent_name = 'extended-summary'
    _python_name = 'extended_summary'
    argument_names = ['write_summary_to_file', 'file_name', 'include_in_domains_particles', 'pick_injection', 'injection']
    _child_classes = dict(
        write_summary_to_file=write_summary_to_file,
        file_name=file_name_1,
        include_in_domains_particles=include_in_domains_particles,
        pick_injection=pick_injection,
        injection=injection_1,
    )
    return_type = 'object'

class summary_state(Boolean):
    """
    'summary_state' child.
    """
    _version = '231'
    fluent_name = 'summary-state'
    _python_name = 'summary_state'
    return_type = 'object'

class reset_dpm_summaries(Boolean):
    """
    'reset_dpm_summaries' child.
    """
    _version = '231'
    fluent_name = 'reset-dpm-summaries'
    _python_name = 'reset_dpm_summaries'
    return_type = 'object'

class zone_summaries_per_injection(Command):
    """
    Enable per-injection zone DPM summaries.
    
    Parameters
    ----------
        summary_state : bool
            'summary_state' child.
        reset_dpm_summaries : bool
            'reset_dpm_summaries' child.
    """
    _version = '231'
    fluent_name = 'zone-summaries-per-injection?'
    _python_name = 'zone_summaries_per_injection'
    argument_names = ['summary_state', 'reset_dpm_summaries']
    _child_classes = dict(
        summary_state=summary_state,
        reset_dpm_summaries=reset_dpm_summaries,
    )
    return_type = 'object'

class discrete_phase_1(Group):
    """
    'discrete_phase' child.
    """
    _version = '231'
    fluent_name = 'discrete-phase'
    _python_name = 'discrete_phase'
    child_names = ['histogram', 'sample_trajectories']
    command_names = ['summary', 'extended_summary', 'zone_summaries_per_injection']
    _child_classes = dict(
        histogram=histogram,
        sample_trajectories=sample_trajectories,
        summary=summary_1,
        extended_summary=extended_summary,
        zone_summaries_per_injection=zone_summaries_per_injection,
    )
    return_type = 'object'

class domain_val(String, AllowedValuesMixin):
    """
    'domain_val' child.
    """
    _version = '231'
    fluent_name = 'domain-val'
    _python_name = 'domain_val'
    return_type = 'object'

class all_bndry_zones(Boolean):
    """
    All the boundary/interior zones.
    """
    _version = '231'
    fluent_name = 'all-bndry-zones?'
    _python_name = 'all_bndry_zones'
    return_type = 'object'

class zone_list_1(StringList):
    """
    'zone_list' child.
    """
    _version = '231'
    fluent_name = 'zone-list'
    _python_name = 'zone_list'
    return_type = 'object'

class write_to_file(Boolean):
    """
    'write_to_file' child.
    """
    _version = '231'
    fluent_name = 'write-to-file?'
    _python_name = 'write_to_file'
    return_type = 'object'

class append_data(Boolean):
    """
    'append_data' child.
    """
    _version = '231'
    fluent_name = 'append-data?'
    _python_name = 'append_data'
    return_type = 'object'

class mass_flow_1(Command):
    """
    Print mass flow rate at inlets and outlets.
    
    Parameters
    ----------
        domain_val : str
            'domain_val' child.
        all_bndry_zones : bool
            All the boundary/interior zones.
        zone_list : List
            'zone_list' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'mass-flow'
    _python_name = 'mass_flow'
    argument_names = ['domain_val', 'all_bndry_zones', 'zone_list', 'write_to_file', 'file_name', 'append_data', 'overwrite']
    _child_classes = dict(
        domain_val=domain_val,
        all_bndry_zones=all_bndry_zones,
        zone_list=zone_list_1,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_data=append_data,
        overwrite=overwrite,
    )
    return_type = 'object'

class heat_transfer_1(Command):
    """
    Print heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain_val : str
            'domain_val' child.
        all_bndry_zones : bool
            All the boundary/interior zones.
        zone_list : List
            'zone_list' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'heat-transfer'
    _python_name = 'heat_transfer'
    argument_names = ['domain_val', 'all_bndry_zones', 'zone_list', 'write_to_file', 'file_name', 'append_data', 'overwrite']
    _child_classes = dict(
        domain_val=domain_val,
        all_bndry_zones=all_bndry_zones,
        zone_list=zone_list_1,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_data=append_data,
        overwrite=overwrite,
    )
    return_type = 'object'

class heat_transfer_sensible(Command):
    """
    Print sensible heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain_val : str
            'domain_val' child.
        all_bndry_zones : bool
            All the boundary/interior zones.
        zone_list : List
            'zone_list' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'heat-transfer-sensible'
    _python_name = 'heat_transfer_sensible'
    argument_names = ['domain_val', 'all_bndry_zones', 'zone_list', 'write_to_file', 'file_name', 'append_data', 'overwrite']
    _child_classes = dict(
        domain_val=domain_val,
        all_bndry_zones=all_bndry_zones,
        zone_list=zone_list_1,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_data=append_data,
        overwrite=overwrite,
    )
    return_type = 'object'

class rad_heat_trans(Command):
    """
    Print radiation heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain_val : str
            'domain_val' child.
        all_bndry_zones : bool
            All the boundary/interior zones.
        zone_list : List
            'zone_list' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'rad-heat-trans'
    _python_name = 'rad_heat_trans'
    argument_names = ['domain_val', 'all_bndry_zones', 'zone_list', 'write_to_file', 'file_name', 'append_data', 'overwrite']
    _child_classes = dict(
        domain_val=domain_val,
        all_bndry_zones=all_bndry_zones,
        zone_list=zone_list_1,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_data=append_data,
        overwrite=overwrite,
    )
    return_type = 'object'

class film_mass_flow(Command):
    """
    Print film mass flow rate at boundaries.
    
    Parameters
    ----------
        domain_val : str
            'domain_val' child.
        all_bndry_zones : bool
            All the boundary/interior zones.
        zone_list : List
            'zone_list' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'film-mass-flow'
    _python_name = 'film_mass_flow'
    argument_names = ['domain_val', 'all_bndry_zones', 'zone_list', 'write_to_file', 'file_name', 'append_data', 'overwrite']
    _child_classes = dict(
        domain_val=domain_val,
        all_bndry_zones=all_bndry_zones,
        zone_list=zone_list_1,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_data=append_data,
        overwrite=overwrite,
    )
    return_type = 'object'

class film_heat_transfer(Command):
    """
    Print film heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain_val : str
            'domain_val' child.
        all_bndry_zones : bool
            All the boundary/interior zones.
        zone_list : List
            'zone_list' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'film-heat-transfer'
    _python_name = 'film_heat_transfer'
    argument_names = ['domain_val', 'all_bndry_zones', 'zone_list', 'write_to_file', 'file_name', 'append_data', 'overwrite']
    _child_classes = dict(
        domain_val=domain_val,
        all_bndry_zones=all_bndry_zones,
        zone_list=zone_list_1,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_data=append_data,
        overwrite=overwrite,
    )
    return_type = 'object'

class pressure_work_1(Command):
    """
    Print pressure work rate at moving boundaries.
    
    Parameters
    ----------
        domain_val : str
            'domain_val' child.
        all_bndry_zones : bool
            All the boundary/interior zones.
        zone_list : List
            'zone_list' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'pressure-work'
    _python_name = 'pressure_work'
    argument_names = ['domain_val', 'all_bndry_zones', 'zone_list', 'write_to_file', 'file_name', 'append_data', 'overwrite']
    _child_classes = dict(
        domain_val=domain_val,
        all_bndry_zones=all_bndry_zones,
        zone_list=zone_list_1,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_data=append_data,
        overwrite=overwrite,
    )
    return_type = 'object'

class viscous_work(Command):
    """
    Print viscous work rate at boundaries.
    
    Parameters
    ----------
        domain_val : str
            'domain_val' child.
        all_bndry_zones : bool
            All the boundary/interior zones.
        zone_list : List
            'zone_list' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'viscous-work'
    _python_name = 'viscous_work'
    argument_names = ['domain_val', 'all_bndry_zones', 'zone_list', 'write_to_file', 'file_name', 'append_data', 'overwrite']
    _child_classes = dict(
        domain_val=domain_val,
        all_bndry_zones=all_bndry_zones,
        zone_list=zone_list_1,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_data=append_data,
        overwrite=overwrite,
    )
    return_type = 'object'

class fluxes(Group):
    """
    'fluxes' child.
    """
    _version = '231'
    fluent_name = 'fluxes'
    _python_name = 'fluxes'
    command_names = ['mass_flow', 'heat_transfer', 'heat_transfer_sensible', 'rad_heat_trans', 'film_mass_flow', 'film_heat_transfer', 'pressure_work', 'viscous_work']
    _child_classes = dict(
        mass_flow=mass_flow_1,
        heat_transfer=heat_transfer_1,
        heat_transfer_sensible=heat_transfer_sensible,
        rad_heat_trans=rad_heat_trans,
        film_mass_flow=film_mass_flow,
        film_heat_transfer=film_heat_transfer,
        pressure_work=pressure_work_1,
        viscous_work=viscous_work,
    )
    return_type = 'object'

class species_mass_flow(Command):
    """
    'species_mass_flow' command.
    """
    _version = '231'
    fluent_name = 'species-mass-flow'
    _python_name = 'species_mass_flow'
    argument_names = ['domain_val']
    _child_classes = dict(
        domain_val=domain_val,
    )
    return_type = 'object'

class element_mass_flow(Command):
    """
    'element_mass_flow' command.
    """
    _version = '231'
    fluent_name = 'element-mass-flow'
    _python_name = 'element_mass_flow'
    argument_names = ['domain_val']
    _child_classes = dict(
        domain_val=domain_val,
    )
    return_type = 'object'

class uds_flow(Command):
    """
    'uds_flow' command.
    """
    _version = '231'
    fluent_name = 'uds-flow'
    _python_name = 'uds_flow'
    argument_names = ['domain_val']
    _child_classes = dict(
        domain_val=domain_val,
    )
    return_type = 'object'

class flow(Group):
    """
    'flow' child.
    """
    _version = '231'
    fluent_name = 'flow'
    _python_name = 'flow'
    command_names = ['species_mass_flow', 'element_mass_flow', 'uds_flow']
    _child_classes = dict(
        species_mass_flow=species_mass_flow,
        element_mass_flow=element_mass_flow,
        uds_flow=uds_flow,
    )
    return_type = 'object'

class setting_type(StringList, AllowedValuesMixin):
    """
    'setting_type' child.
    """
    _version = '231'
    fluent_name = 'setting-type'
    _python_name = 'setting_type'
    return_type = 'object'

class modified_setting(Command):
    """
    Specify which settings will be checked for non-default status for generating the Modified Settings Summary table.
    
    Parameters
    ----------
        setting_type : List
            'setting_type' child.
    """
    _version = '231'
    fluent_name = 'modified-setting'
    _python_name = 'modified_setting'
    argument_names = ['setting_type']
    _child_classes = dict(
        setting_type=setting_type,
    )
    return_type = 'object'

class write_user_setting(Command):
    """
    Write the contents of the Modified Settings Summary table to a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'write-user-setting'
    _python_name = 'write_user_setting'
    argument_names = ['file_name', 'overwrite']
    _child_classes = dict(
        file_name=file_name_1,
        overwrite=overwrite,
    )
    return_type = 'object'

class modified_setting_options(Group):
    """
    'modified_setting_options' child.
    """
    _version = '231'
    fluent_name = 'modified-setting-options'
    _python_name = 'modified_setting_options'
    command_names = ['modified_setting', 'write_user_setting']
    _child_classes = dict(
        modified_setting=modified_setting,
        write_user_setting=write_user_setting,
    )
    return_type = 'object'

class surface_list(StringList, AllowedValuesMixin):
    """
    'surface_list' child.
    """
    _version = '231'
    fluent_name = 'surface-list'
    _python_name = 'surface_list'
    return_type = 'object'

class volume_list(StringList, AllowedValuesMixin):
    """
    'volume_list' child.
    """
    _version = '231'
    fluent_name = 'volume-list'
    _python_name = 'volume_list'
    return_type = 'object'

class num_of_moments(Integer):
    """
    'num_of_moments' child.
    """
    _version = '231'
    fluent_name = 'num-of-moments'
    _python_name = 'num_of_moments'
    return_type = 'object'

class moments(Command):
    """
    Set moments for population balance.
    
    Parameters
    ----------
        surface_list : List
            'surface_list' child.
        volume_list : List
            'volume_list' child.
        num_of_moments : int
            'num_of_moments' child.
        write_to_file : bool
            'write_to_file' child.
        filename : str
            'filename' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'moments'
    _python_name = 'moments'
    argument_names = ['surface_list', 'volume_list', 'num_of_moments', 'write_to_file', 'filename', 'overwrite']
    _child_classes = dict(
        surface_list=surface_list,
        volume_list=volume_list,
        num_of_moments=num_of_moments,
        write_to_file=write_to_file,
        filename=filename,
        overwrite=overwrite,
    )
    return_type = 'object'

class disc_output_type(String, AllowedValuesMixin):
    """
    'disc_output_type' child.
    """
    _version = '231'
    fluent_name = 'disc-output-type'
    _python_name = 'disc_output_type'
    return_type = 'object'

class qmom_output_type(String, AllowedValuesMixin):
    """
    'qmom_output_type' child.
    """
    _version = '231'
    fluent_name = 'qmom-output-type'
    _python_name = 'qmom_output_type'
    return_type = 'object'

class smm_output_type(String, AllowedValuesMixin):
    """
    'smm_output_type' child.
    """
    _version = '231'
    fluent_name = 'smm-output-type'
    _python_name = 'smm_output_type'
    return_type = 'object'

class num_dens_func(String, AllowedValuesMixin):
    """
    'num_dens_func' child.
    """
    _version = '231'
    fluent_name = 'num-dens-func'
    _python_name = 'num_dens_func'
    return_type = 'object'

class dia_upper_limit(Real):
    """
    'dia_upper_limit' child.
    """
    _version = '231'
    fluent_name = 'dia-upper-limit'
    _python_name = 'dia_upper_limit'
    return_type = 'object'

class number_density(Command):
    """
    'number_density' command.
    """
    _version = '231'
    fluent_name = 'number-density'
    _python_name = 'number_density'
    argument_names = ['report_type', 'disc_output_type', 'qmom_output_type', 'smm_output_type', 'surface_list', 'volume_list', 'num_dens_func', 'dia_upper_limit', 'file_name', 'overwrite']
    _child_classes = dict(
        report_type=report_type,
        disc_output_type=disc_output_type,
        qmom_output_type=qmom_output_type,
        smm_output_type=smm_output_type,
        surface_list=surface_list,
        volume_list=volume_list,
        num_dens_func=num_dens_func,
        dia_upper_limit=dia_upper_limit,
        file_name=file_name_1,
        overwrite=overwrite,
    )
    return_type = 'object'

class population_balance(Group):
    """
    'population_balance' child.
    """
    _version = '231'
    fluent_name = 'population-balance'
    _python_name = 'population_balance'
    command_names = ['moments', 'number_density']
    _child_classes = dict(
        moments=moments,
        number_density=number_density,
    )
    return_type = 'object'

class heat_exchanger(String, AllowedValuesMixin):
    """
    'heat_exchanger' child.
    """
    _version = '231'
    fluent_name = 'heat-exchanger'
    _python_name = 'heat_exchanger'
    return_type = 'object'

class fluid_zone(String, AllowedValuesMixin):
    """
    'fluid_zone' child.
    """
    _version = '231'
    fluent_name = 'fluid-zone'
    _python_name = 'fluid_zone'
    return_type = 'object'

class boundary_zone(String):
    """
    'boundary_zone' child.
    """
    _version = '231'
    fluent_name = 'boundary-zone'
    _python_name = 'boundary_zone'
    return_type = 'object'

class append_file(Boolean):
    """
    'append_file' child.
    """
    _version = '231'
    fluent_name = 'append-file?'
    _python_name = 'append_file'
    return_type = 'object'

class computed_heat_rejection(Command):
    """
    'computed_heat_rejection' command.
    """
    _version = '231'
    fluent_name = 'computed-heat-rejection'
    _python_name = 'computed_heat_rejection'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file', 'overwrite']
    _child_classes = dict(
        heat_exchanger=heat_exchanger,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone,
        report_type=report_type,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_file=append_file,
        overwrite=overwrite,
    )
    return_type = 'object'

class inlet_temperature(Command):
    """
    'inlet_temperature' command.
    """
    _version = '231'
    fluent_name = 'inlet-temperature'
    _python_name = 'inlet_temperature'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file', 'overwrite']
    _child_classes = dict(
        heat_exchanger=heat_exchanger,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone,
        report_type=report_type,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_file=append_file,
        overwrite=overwrite,
    )
    return_type = 'object'

class outlet_temperature(Command):
    """
    'outlet_temperature' command.
    """
    _version = '231'
    fluent_name = 'outlet-temperature'
    _python_name = 'outlet_temperature'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file', 'overwrite']
    _child_classes = dict(
        heat_exchanger=heat_exchanger,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone,
        report_type=report_type,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_file=append_file,
        overwrite=overwrite,
    )
    return_type = 'object'

class mass_flow_rate(Command):
    """
    'mass_flow_rate' command.
    """
    _version = '231'
    fluent_name = 'mass-flow-rate'
    _python_name = 'mass_flow_rate'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file', 'overwrite']
    _child_classes = dict(
        heat_exchanger=heat_exchanger,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone,
        report_type=report_type,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_file=append_file,
        overwrite=overwrite,
    )
    return_type = 'object'

class specific_heat_5(Command):
    """
    'specific_heat' command.
    """
    _version = '231'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file', 'overwrite']
    _child_classes = dict(
        heat_exchanger=heat_exchanger,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone,
        report_type=report_type,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_file=append_file,
        overwrite=overwrite,
    )
    return_type = 'object'

class heat_exchange(Group):
    """
    'heat_exchange' child.
    """
    _version = '231'
    fluent_name = 'heat-exchange'
    _python_name = 'heat_exchange'
    command_names = ['computed_heat_rejection', 'inlet_temperature', 'outlet_temperature', 'mass_flow_rate', 'specific_heat']
    _child_classes = dict(
        computed_heat_rejection=computed_heat_rejection,
        inlet_temperature=inlet_temperature,
        outlet_temperature=outlet_temperature,
        mass_flow_rate=mass_flow_rate,
        specific_heat=specific_heat_5,
    )
    return_type = 'object'

class proc_statistics(Command):
    """
    Fluent process information.
    """
    _version = '231'
    fluent_name = 'proc-statistics'
    _python_name = 'proc_statistics'
    return_type = 'object'

class sys_statistics(Command):
    """
    System information.
    """
    _version = '231'
    fluent_name = 'sys-statistics'
    _python_name = 'sys_statistics'
    return_type = 'object'

class gpgpu_statistics(Command):
    """
    GPGPU information.
    """
    _version = '231'
    fluent_name = 'gpgpu-statistics'
    _python_name = 'gpgpu_statistics'
    return_type = 'object'

class time_statistics(Command):
    """
    Time usage information.
    """
    _version = '231'
    fluent_name = 'time-statistics'
    _python_name = 'time_statistics'
    return_type = 'object'

class system(Group):
    """
    'system' child.
    """
    _version = '231'
    fluent_name = 'system'
    _python_name = 'system'
    command_names = ['proc_statistics', 'sys_statistics', 'gpgpu_statistics', 'time_statistics']
    _child_classes = dict(
        proc_statistics=proc_statistics,
        sys_statistics=sys_statistics,
        gpgpu_statistics=gpgpu_statistics,
        time_statistics=time_statistics,
    )
    return_type = 'object'

class cell_function(String, AllowedValuesMixin):
    """
    'cell_function' child.
    """
    _version = '231'
    fluent_name = 'cell-function'
    _python_name = 'cell_function'
    return_type = 'object'

class num_division(Integer):
    """
    'num_division' child.
    """
    _version = '231'
    fluent_name = 'num-division'
    _python_name = 'num_division'
    return_type = 'object'

class set_all_zones(Boolean):
    """
    'set_all_zones' child.
    """
    _version = '231'
    fluent_name = 'set-all-zones?'
    _python_name = 'set_all_zones'
    return_type = 'object'

class threads_list(StringList):
    """
    'threads_list' child.
    """
    _version = '231'
    fluent_name = 'threads-list'
    _python_name = 'threads_list'
    return_type = 'object'

class print_histogram(Command):
    """
    Print a histogram of a scalar quantity.
    
    Parameters
    ----------
        domain : str
            'domain' child.
        cell_function : str
            'cell_function' child.
        min_val : real
            'min_val' child.
        max_val : real
            'max_val' child.
        num_division : int
            'num_division' child.
        set_all_zones : bool
            'set_all_zones' child.
        threads_list : List
            'threads_list' child.
        file_name : str
            'file_name' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'print-histogram'
    _python_name = 'print_histogram'
    argument_names = ['domain', 'cell_function', 'min_val', 'max_val', 'num_division', 'set_all_zones', 'threads_list', 'file_name', 'overwrite']
    _child_classes = dict(
        domain=domain,
        cell_function=cell_function,
        min_val=min_val,
        max_val=max_val,
        num_division=num_division,
        set_all_zones=set_all_zones,
        threads_list=threads_list,
        file_name=file_name_1,
        overwrite=overwrite,
    )
    return_type = 'object'

class write_histogram(Command):
    """
    Write a histogram of a scalar quantity to a file.
    
    Parameters
    ----------
        domain : str
            'domain' child.
        cell_function : str
            'cell_function' child.
        min_val : real
            'min_val' child.
        max_val : real
            'max_val' child.
        num_division : int
            'num_division' child.
        set_all_zones : bool
            'set_all_zones' child.
        threads_list : List
            'threads_list' child.
        file_name : str
            'file_name' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'write-histogram'
    _python_name = 'write_histogram'
    argument_names = ['domain', 'cell_function', 'min_val', 'max_val', 'num_division', 'set_all_zones', 'threads_list', 'file_name', 'overwrite']
    _child_classes = dict(
        domain=domain,
        cell_function=cell_function,
        min_val=min_val,
        max_val=max_val,
        num_division=num_division,
        set_all_zones=set_all_zones,
        threads_list=threads_list,
        file_name=file_name_1,
        overwrite=overwrite,
    )
    return_type = 'object'

class print_write_histogram(Group):
    """
    'print_write_histogram' child.
    """
    _version = '231'
    fluent_name = 'print-write-histogram'
    _python_name = 'print_write_histogram'
    command_names = ['print_histogram', 'write_histogram']
    _child_classes = dict(
        print_histogram=print_histogram,
        write_histogram=write_histogram,
    )
    return_type = 'object'

class aero_optical_distortions(Command):
    """
    Optics report object.
    """
    _version = '231'
    fluent_name = 'aero-optical-distortions'
    _python_name = 'aero_optical_distortions'
    return_type = 'object'

class options_11(String, AllowedValuesMixin):
    """
    'options' child.
    """
    _version = '231'
    fluent_name = 'options'
    _python_name = 'options'
    return_type = 'object'

class all_wall_zones(Boolean):
    """
    All wall zones available.
    """
    _version = '231'
    fluent_name = 'all-wall-zones?'
    _python_name = 'all_wall_zones'
    return_type = 'object'

class wall_thread_list(StringList):
    """
    'wall_thread_list' child.
    """
    _version = '231'
    fluent_name = 'wall-thread-list'
    _python_name = 'wall_thread_list'
    return_type = 'object'

class momentum_center(RealVector):
    """
    'momentum_center' child.
    """
    _version = '231'
    fluent_name = 'momentum-center'
    _python_name = 'momentum_center'
    return_type = 'object'

class momentum_axis(RealVector):
    """
    'momentum_axis' child.
    """
    _version = '231'
    fluent_name = 'momentum-axis'
    _python_name = 'momentum_axis'
    return_type = 'object'

class pressure_coordinate(String, AllowedValuesMixin):
    """
    'pressure_coordinate' child.
    """
    _version = '231'
    fluent_name = 'pressure-coordinate'
    _python_name = 'pressure_coordinate'
    return_type = 'object'

class coord_val(Real):
    """
    'coord_val' child.
    """
    _version = '231'
    fluent_name = 'coord-val'
    _python_name = 'coord_val'
    return_type = 'object'

class forces(Command):
    """
    'forces' command.
    """
    _version = '231'
    fluent_name = 'forces'
    _python_name = 'forces'
    argument_names = ['options', 'domain_val', 'all_wall_zones', 'wall_thread_list', 'direction_vector', 'momentum_center', 'momentum_axis', 'pressure_coordinate', 'coord_val', 'write_to_file', 'file_name', 'append_data', 'overwrite']
    _child_classes = dict(
        options=options_11,
        domain_val=domain_val,
        all_wall_zones=all_wall_zones,
        wall_thread_list=wall_thread_list,
        direction_vector=direction_vector_1,
        momentum_center=momentum_center,
        momentum_axis=momentum_axis,
        pressure_coordinate=pressure_coordinate,
        coord_val=coord_val,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_data=append_data,
        overwrite=overwrite,
    )
    return_type = 'object'

class verbosity_option(String, AllowedValuesMixin):
    """
    'verbosity_option' child.
    """
    _version = '231'
    fluent_name = 'verbosity-option'
    _python_name = 'verbosity_option'
    return_type = 'object'

class mphase_summary(Command):
    """
    Multiphase Summary and Recommendations.
    
    Parameters
    ----------
        verbosity_option : str
            'verbosity_option' child.
    """
    _version = '231'
    fluent_name = 'mphase-summary'
    _python_name = 'mphase_summary'
    argument_names = ['verbosity_option']
    _child_classes = dict(
        verbosity_option=verbosity_option,
    )
    return_type = 'object'

class injection_names(StringList, AllowedValuesMixin):
    """
    'injection_names' child.
    """
    _version = '231'
    fluent_name = 'injection-names'
    _python_name = 'injection_names'
    return_type = 'object'

class particle_summary(Command):
    """
    Print summary report for all current particles.
    
    Parameters
    ----------
        injection_names : List
            'injection_names' child.
    """
    _version = '231'
    fluent_name = 'particle-summary'
    _python_name = 'particle_summary'
    argument_names = ['injection_names']
    _child_classes = dict(
        injection_names=injection_names,
    )
    return_type = 'object'

class path_line_summary(Command):
    """
    Print path-line-summary report.
    """
    _version = '231'
    fluent_name = 'path-line-summary'
    _python_name = 'path_line_summary'
    return_type = 'object'

class surface_id_val(IntegerList):
    """
    'surface_id_val' child.
    """
    _version = '231'
    fluent_name = 'surface-id-val'
    _python_name = 'surface_id_val'
    return_type = 'object'

class min_feature_size(Real):
    """
    'min_feature_size' child.
    """
    _version = '231'
    fluent_name = 'min-feature-size'
    _python_name = 'min_feature_size'
    return_type = 'object'

class proj_plane_norm_comp(RealVector):
    """
    'proj_plane_norm_comp' child.
    """
    _version = '231'
    fluent_name = 'proj-plane-norm-comp'
    _python_name = 'proj_plane_norm_comp'
    return_type = 'object'

class projected_surface_area(Command):
    """
    Print total area of the projection of a group of surfaces to a plane.
    
    Parameters
    ----------
        surface_id_val : List
            'surface_id_val' child.
        min_feature_size : real
            'min_feature_size' child.
        proj_plane_norm_comp : Tuple
            'proj_plane_norm_comp' child.
    """
    _version = '231'
    fluent_name = 'projected-surface-area'
    _python_name = 'projected_surface_area'
    argument_names = ['surface_id_val', 'min_feature_size', 'proj_plane_norm_comp']
    _child_classes = dict(
        surface_id_val=surface_id_val,
        min_feature_size=min_feature_size,
        proj_plane_norm_comp=proj_plane_norm_comp,
    )
    return_type = 'object'

class summary(Command):
    """
    Print report summary.
    
    Parameters
    ----------
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        overwrite : bool
            'overwrite' child.
    """
    _version = '231'
    fluent_name = 'summary'
    _python_name = 'summary'
    argument_names = ['write_to_file', 'file_name', 'overwrite']
    _child_classes = dict(
        write_to_file=write_to_file,
        file_name=file_name_1,
        overwrite=overwrite,
    )
    return_type = 'object'

class surface_id(StringList):
    """
    'surface_id' child.
    """
    _version = '231'
    fluent_name = 'surface-id'
    _python_name = 'surface_id'
    return_type = 'object'

class add_custome_vector(Boolean):
    """
    'add_custome_vector' child.
    """
    _version = '231'
    fluent_name = 'add-custome-vector?'
    _python_name = 'add_custome_vector'
    return_type = 'object'

class cust_vec_name(String):
    """
    'cust_vec_name' child.
    """
    _version = '231'
    fluent_name = 'cust-vec-name'
    _python_name = 'cust_vec_name'
    return_type = 'object'

class domain_cx(String, AllowedValuesMixin):
    """
    'domain_cx' child.
    """
    _version = '231'
    fluent_name = 'domain-cx'
    _python_name = 'domain_cx'
    return_type = 'object'

class cell_cx(String, AllowedValuesMixin):
    """
    'cell_cx' child.
    """
    _version = '231'
    fluent_name = 'cell-cx'
    _python_name = 'cell_cx'
    return_type = 'object'

class domain_cy(String, AllowedValuesMixin):
    """
    'domain_cy' child.
    """
    _version = '231'
    fluent_name = 'domain-cy'
    _python_name = 'domain_cy'
    return_type = 'object'

class cell_cy(String, AllowedValuesMixin):
    """
    'cell_cy' child.
    """
    _version = '231'
    fluent_name = 'cell-cy'
    _python_name = 'cell_cy'
    return_type = 'object'

class domain_cz(String, AllowedValuesMixin):
    """
    'domain_cz' child.
    """
    _version = '231'
    fluent_name = 'domain-cz'
    _python_name = 'domain_cz'
    return_type = 'object'

class cell_cz(String, AllowedValuesMixin):
    """
    'cell_cz' child.
    """
    _version = '231'
    fluent_name = 'cell-cz'
    _python_name = 'cell_cz'
    return_type = 'object'

class cust_vec_func(String, AllowedValuesMixin):
    """
    'cust_vec_func' child.
    """
    _version = '231'
    fluent_name = 'cust-vec-func'
    _python_name = 'cust_vec_func'
    return_type = 'object'

class domain_report(String, AllowedValuesMixin):
    """
    'domain_report' child.
    """
    _version = '231'
    fluent_name = 'domain-report'
    _python_name = 'domain_report'
    return_type = 'object'

class cell_report(String, AllowedValuesMixin):
    """
    'cell_report' child.
    """
    _version = '231'
    fluent_name = 'cell-report'
    _python_name = 'cell_report'
    return_type = 'object'

class current_domain(String, AllowedValuesMixin):
    """
    'current_domain' child.
    """
    _version = '231'
    fluent_name = 'current-domain'
    _python_name = 'current_domain'
    return_type = 'object'

class surface_integrals(Command):
    """
    'surface_integrals' command.
    """
    _version = '231'
    fluent_name = 'surface-integrals'
    _python_name = 'surface_integrals'
    argument_names = ['report_type', 'surface_id', 'add_custome_vector', 'cust_vec_name', 'domain_cx', 'cell_cx', 'domain_cy', 'cell_cy', 'domain_cz', 'cell_cz', 'cust_vec_func', 'domain_report', 'cell_report', 'current_domain', 'write_to_file', 'file_name', 'append_data', 'overwrite']
    _child_classes = dict(
        report_type=report_type,
        surface_id=surface_id,
        add_custome_vector=add_custome_vector,
        cust_vec_name=cust_vec_name,
        domain_cx=domain_cx,
        cell_cx=cell_cx,
        domain_cy=domain_cy,
        cell_cy=cell_cy,
        domain_cz=domain_cz,
        cell_cz=cell_cz,
        cust_vec_func=cust_vec_func,
        domain_report=domain_report,
        cell_report=cell_report,
        current_domain=current_domain,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_data=append_data,
        overwrite=overwrite,
    )
    return_type = 'object'

class thread_id_list(StringList):
    """
    'thread_id_list' child.
    """
    _version = '231'
    fluent_name = 'thread-id-list'
    _python_name = 'thread_id_list'
    return_type = 'object'

class volume_integrals(Command):
    """
    'volume_integrals' command.
    """
    _version = '231'
    fluent_name = 'volume-integrals'
    _python_name = 'volume_integrals'
    argument_names = ['report_type', 'thread_id_list', 'domain', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data', 'overwrite']
    _child_classes = dict(
        report_type=report_type,
        thread_id_list=thread_id_list,
        domain=domain,
        cell_function=cell_function,
        current_domain=current_domain,
        write_to_file=write_to_file,
        file_name=file_name_1,
        append_data=append_data,
        overwrite=overwrite,
    )
    return_type = 'object'

class report(Group):
    """
    'report' child.
    """
    _version = '231'
    fluent_name = 'report'
    _python_name = 'report'
    child_names = ['simulation_reports', 'discrete_phase', 'fluxes', 'flow', 'modified_setting_options', 'population_balance', 'heat_exchange', 'system', 'print_write_histogram']
    command_names = ['aero_optical_distortions', 'forces', 'mphase_summary', 'particle_summary', 'path_line_summary', 'projected_surface_area', 'summary', 'surface_integrals', 'volume_integrals']
    _child_classes = dict(
        simulation_reports=simulation_reports,
        discrete_phase=discrete_phase_1,
        fluxes=fluxes,
        flow=flow,
        modified_setting_options=modified_setting_options,
        population_balance=population_balance,
        heat_exchange=heat_exchange,
        system=system,
        print_write_histogram=print_write_histogram,
        aero_optical_distortions=aero_optical_distortions,
        forces=forces,
        mphase_summary=mphase_summary,
        particle_summary=particle_summary,
        path_line_summary=path_line_summary,
        projected_surface_area=projected_surface_area,
        summary=summary,
        surface_integrals=surface_integrals,
        volume_integrals=volume_integrals,
    )
    return_type = 'object'

class results(Group):
    """
    'results' child.
    """
    _version = '231'
    fluent_name = 'results'
    _python_name = 'results'
    child_names = ['graphics', 'scene', 'surfaces', 'animations', 'plot', 'report']
    _child_classes = dict(
        graphics=graphics,
        scene=scene,
        surfaces=surfaces_1,
        animations=animations,
        plot=plot_1,
        report=report,
    )
    return_type = 'object'

class initialize_1(Command):
    """
    Start Parametric Study.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
    """
    _version = '231'
    fluent_name = 'initialize'
    _python_name = 'initialize'
    argument_names = ['project_filename']
    _child_classes = dict(
        project_filename=project_filename,
    )
    return_type = 'object'

class copy_design_points(Boolean):
    """
    'copy_design_points' child.
    """
    _version = '231'
    fluent_name = 'copy-design-points'
    _python_name = 'copy_design_points'
    return_type = 'object'

class duplicate(Command):
    """
    Duplicate Parametric Study.
    
    Parameters
    ----------
        copy_design_points : bool
            'copy_design_points' child.
    """
    _version = '231'
    fluent_name = 'duplicate'
    _python_name = 'duplicate'
    argument_names = ['copy_design_points']
    _child_classes = dict(
        copy_design_points=copy_design_points,
    )
    return_type = 'object'

class study_name(String):
    """
    'study_name' child.
    """
    _version = '231'
    fluent_name = 'study-name'
    _python_name = 'study_name'
    return_type = 'object'

class set_as_current(Command):
    """
    Set As Current Study.
    
    Parameters
    ----------
        study_name : str
            'study_name' child.
    """
    _version = '231'
    fluent_name = 'set-as-current'
    _python_name = 'set_as_current'
    argument_names = ['study_name']
    _child_classes = dict(
        study_name=study_name,
    )
    return_type = 'object'

class use_base_data(Command):
    """
    Use Base Data.
    """
    _version = '231'
    fluent_name = 'use-base-data'
    _python_name = 'use_base_data'
    return_type = 'object'

class filepath(String):
    """
    'filepath' child.
    """
    _version = '231'
    fluent_name = 'filepath'
    _python_name = 'filepath'
    return_type = 'object'

class export_design_table(Command):
    """
    Export Design Point Table.
    
    Parameters
    ----------
        filepath : str
            'filepath' child.
    """
    _version = '231'
    fluent_name = 'export-design-table'
    _python_name = 'export_design_table'
    argument_names = ['filepath']
    _child_classes = dict(
        filepath=filepath,
    )
    return_type = 'object'

class delete_existing(Boolean):
    """
    'delete_existing' child.
    """
    _version = '231'
    fluent_name = 'delete-existing'
    _python_name = 'delete_existing'
    return_type = 'object'

class import_design_table(Command):
    """
    Import Design Point Table.
    
    Parameters
    ----------
        filepath : str
            'filepath' child.
        delete_existing : bool
            'delete_existing' child.
    """
    _version = '231'
    fluent_name = 'import-design-table'
    _python_name = 'import_design_table'
    argument_names = ['filepath', 'delete_existing']
    _child_classes = dict(
        filepath=filepath,
        delete_existing=delete_existing,
    )
    return_type = 'object'

class write_data(Boolean):
    """
    'write_data' child.
    """
    _version = '231'
    fluent_name = 'write-data'
    _python_name = 'write_data'
    return_type = 'object'

class capture_simulation_report_data(Boolean):
    """
    'capture_simulation_report_data' child.
    """
    _version = '231'
    fluent_name = 'capture-simulation-report-data'
    _python_name = 'capture_simulation_report_data'
    return_type = 'object'

class create_1(CommandWithPositionalArgs):
    """
    Add new Design Point.
    
    Parameters
    ----------
        write_data : bool
            'write_data' child.
        capture_simulation_report_data : bool
            'capture_simulation_report_data' child.
    """
    _version = '231'
    fluent_name = 'create'
    _python_name = 'create'
    argument_names = ['write_data', 'capture_simulation_report_data']
    _child_classes = dict(
        write_data=write_data,
        capture_simulation_report_data=capture_simulation_report_data,
    )
    return_type = 'object'

class design_point(String):
    """
    'design_point' child.
    """
    _version = '231'
    fluent_name = 'design-point'
    _python_name = 'design_point'
    return_type = 'object'

class duplicate_1(Command):
    """
    Duplicate Design Point.
    
    Parameters
    ----------
        design_point : str
            'design_point' child.
    """
    _version = '231'
    fluent_name = 'duplicate'
    _python_name = 'duplicate'
    argument_names = ['design_point']
    _child_classes = dict(
        design_point=design_point,
    )
    return_type = 'object'

class load_case_data(Command):
    """
    Loads relevant case/data file for current design point.
    """
    _version = '231'
    fluent_name = 'load-case-data'
    _python_name = 'load_case_data'
    return_type = 'object'

class design_points_1(StringList):
    """
    'design_points' child.
    """
    _version = '231'
    fluent_name = 'design-points'
    _python_name = 'design_points'
    return_type = 'object'

class delete_design_points(Command):
    """
    Delete Design Points.
    
    Parameters
    ----------
        design_points : List
            'design_points' child.
    """
    _version = '231'
    fluent_name = 'delete-design-points'
    _python_name = 'delete_design_points'
    argument_names = ['design_points']
    _child_classes = dict(
        design_points=design_points_1,
    )
    return_type = 'object'

class separate_journals(Boolean):
    """
    'separate_journals' child.
    """
    _version = '231'
    fluent_name = 'separate-journals'
    _python_name = 'separate_journals'
    return_type = 'object'

class save_journals(Command):
    """
    Save Journals.
    
    Parameters
    ----------
        separate_journals : bool
            'separate_journals' child.
    """
    _version = '231'
    fluent_name = 'save-journals'
    _python_name = 'save_journals'
    argument_names = ['separate_journals']
    _child_classes = dict(
        separate_journals=separate_journals,
    )
    return_type = 'object'

class clear_generated_data(Command):
    """
    Clear Generated Data.
    
    Parameters
    ----------
        design_points : List
            'design_points' child.
    """
    _version = '231'
    fluent_name = 'clear-generated-data'
    _python_name = 'clear_generated_data'
    argument_names = ['design_points']
    _child_classes = dict(
        design_points=design_points_1,
    )
    return_type = 'object'

class update_current(Command):
    """
    Update Current Design Point.
    """
    _version = '231'
    fluent_name = 'update-current'
    _python_name = 'update_current'
    return_type = 'object'

class update_all(Command):
    """
    Update All Design Point.
    """
    _version = '231'
    fluent_name = 'update-all'
    _python_name = 'update_all'
    return_type = 'object'

class update_selected(Command):
    """
    Update Selected Design Points.
    
    Parameters
    ----------
        design_points : List
            'design_points' child.
    """
    _version = '231'
    fluent_name = 'update-selected'
    _python_name = 'update_selected'
    argument_names = ['design_points']
    _child_classes = dict(
        design_points=design_points_1,
    )
    return_type = 'object'

class input_parameters(Map):
    """
    Input Parameter Values of Design Point.
    """
    _version = '231'
    fluent_name = 'input-parameters'
    _python_name = 'input_parameters'
    return_type = 'object'

class output_parameters(Map):
    """
    Output Parameter Values of Design Point.
    """
    _version = '231'
    fluent_name = 'output-parameters'
    _python_name = 'output_parameters'
    return_type = 'object'

class write_data_1(Boolean):
    """
    WriteData option for Design Point.
    """
    _version = '231'
    fluent_name = 'write-data'
    _python_name = 'write_data'
    return_type = 'object'

class capture_simulation_report_data_1(Boolean):
    """
    Capture Simulation Report Data option for Design Point.
    """
    _version = '231'
    fluent_name = 'capture-simulation-report-data'
    _python_name = 'capture_simulation_report_data'
    return_type = 'object'

class design_points_child(Group):
    """
    'child_object_type' of design_points.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'design_points_child'
    child_names = ['input_parameters', 'output_parameters', 'write_data', 'capture_simulation_report_data']
    _child_classes = dict(
        input_parameters=input_parameters,
        output_parameters=output_parameters,
        write_data=write_data_1,
        capture_simulation_report_data=capture_simulation_report_data_1,
    )
    return_type = 'object'

class design_points(NamedObject[design_points_child], CreatableNamedObjectMixinOld[design_points_child]):
    """
    'design_points' child.
    """
    _version = '231'
    fluent_name = 'design-points'
    _python_name = 'design_points'
    command_names = ['create_1', 'duplicate', 'load_case_data', 'delete_design_points', 'save_journals', 'clear_generated_data', 'update_current', 'update_all', 'update_selected']
    _child_classes = dict(
        create_1=create_1,
        duplicate=duplicate_1,
        load_case_data=load_case_data,
        delete_design_points=delete_design_points,
        save_journals=save_journals,
        clear_generated_data=clear_generated_data,
        update_current=update_current,
        update_all=update_all,
        update_selected=update_selected,
    )
    child_object_type = design_points_child
    return_type = 'object'

class current_design_point(String):
    """
    Name of Current Design Point.
    """
    _version = '231'
    fluent_name = 'current-design-point'
    _python_name = 'current_design_point'
    return_type = 'object'

class parametric_studies_child(Group):
    """
    'child_object_type' of parametric_studies.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'parametric_studies_child'
    child_names = ['design_points', 'current_design_point']
    _child_classes = dict(
        design_points=design_points,
        current_design_point=current_design_point,
    )
    return_type = 'object'

class parametric_studies(NamedObject[parametric_studies_child], CreatableNamedObjectMixinOld[parametric_studies_child]):
    """
    'parametric_studies' child.
    """
    _version = '231'
    fluent_name = 'parametric-studies'
    _python_name = 'parametric_studies'
    command_names = ['initialize', 'duplicate', 'set_as_current', 'use_base_data', 'export_design_table', 'import_design_table']
    _child_classes = dict(
        initialize=initialize_1,
        duplicate=duplicate,
        set_as_current=set_as_current,
        use_base_data=use_base_data,
        export_design_table=export_design_table,
        import_design_table=import_design_table,
    )
    child_object_type = parametric_studies_child
    return_type = 'object'

class current_parametric_study(String):
    """
    Name of Current Parametric Study.
    """
    _version = '231'
    fluent_name = 'current-parametric-study'
    _python_name = 'current_parametric_study'
    return_type = 'object'

class thread_number_method(String, AllowedValuesMixin):
    """
    'thread_number_method' child.
    """
    _version = '231'
    fluent_name = 'thread-number-method'
    _python_name = 'thread_number_method'
    return_type = 'object'

class fixed_thread_number(Integer):
    """
    'fixed_thread_number' child.
    """
    _version = '231'
    fluent_name = 'fixed-thread-number'
    _python_name = 'fixed_thread_number'
    return_type = 'object'

class thread_number_control(Group):
    """
    Thread number control.
    """
    _version = '231'
    fluent_name = 'thread-number-control'
    _python_name = 'thread_number_control'
    child_names = ['thread_number_method', 'fixed_thread_number']
    _child_classes = dict(
        thread_number_method=thread_number_method,
        fixed_thread_number=fixed_thread_number,
    )
    return_type = 'object'

class check_verbosity_1(Integer):
    """
    Verbosity output of parallel check. Higher verbosity corresponds to more detailed information.
    """
    _version = '231'
    fluent_name = 'check-verbosity'
    _python_name = 'check_verbosity'
    return_type = 'object'

class across_zones(Boolean):
    """
    Enable auto partitioning by zone or by domain.
    """
    _version = '231'
    fluent_name = 'across-zones'
    _python_name = 'across_zones'
    return_type = 'object'

class load_vector(RealList):
    """
    Auto the partition load vector.
    """
    _version = '231'
    fluent_name = 'load-vector'
    _python_name = 'load_vector'
    return_type = 'object'

class pre_test(Boolean):
    """
    Auto partition pre-testing optimization.
    """
    _version = '231'
    fluent_name = 'pre-test'
    _python_name = 'pre_test'
    return_type = 'object'

class file_partition_method(Boolean):
    """
    'file_partition_method' child.
    """
    _version = '231'
    fluent_name = 'file-partition-method?'
    _python_name = 'file_partition_method'
    return_type = 'object'

class use_case_file_method(Command):
    """
    Enable the use-case-file method for auto partitioning.
    
    Parameters
    ----------
        file_partition_method : bool
            'file_partition_method' child.
    """
    _version = '231'
    fluent_name = 'use-case-file-method'
    _python_name = 'use_case_file_method'
    argument_names = ['file_partition_method']
    _child_classes = dict(
        file_partition_method=file_partition_method,
    )
    return_type = 'object'

class auto(Group):
    """
    The object.
    """
    _version = '231'
    fluent_name = 'auto'
    _python_name = 'auto'
    child_names = ['across_zones', 'method', 'load_vector', 'pre_test']
    command_names = ['use_case_file_method']
    _child_classes = dict(
        across_zones=across_zones,
        method=method_1,
        load_vector=load_vector,
        pre_test=pre_test,
        use_case_file_method=use_case_file_method,
    )
    return_type = 'object'

class cell_function_1(String, AllowedValuesMixin):
    """
    Cell function.
    """
    _version = '231'
    fluent_name = 'cell-function'
    _python_name = 'cell_function'
    return_type = 'object'

class load_distribution(RealList):
    """
    Partition load vector.
    """
    _version = '231'
    fluent_name = 'load-distribution'
    _python_name = 'load_distribution'
    return_type = 'object'

class merge_small_regions(Boolean):
    """
    'merge_small_regions' child.
    """
    _version = '231'
    fluent_name = 'merge-small-regions?'
    _python_name = 'merge_small_regions'
    return_type = 'object'

class max_merge_iterations(Integer):
    """
    'max_merge_iterations' child.
    """
    _version = '231'
    fluent_name = 'max-merge-iterations'
    _python_name = 'max_merge_iterations'
    return_type = 'object'

class merge(Group):
    """
    Partition merging optimization.
    """
    _version = '231'
    fluent_name = 'merge'
    _python_name = 'merge'
    child_names = ['merge_small_regions', 'max_merge_iterations']
    _child_classes = dict(
        merge_small_regions=merge_small_regions,
        max_merge_iterations=max_merge_iterations,
    )
    return_type = 'object'

class partition_origin_vector_child(Real):
    """
    'child_object_type' of partition_origin_vector.
    """
    _version = '231'
    fluent_name = 'child-object-type'
    _python_name = 'partition_origin_vector_child'
    return_type = 'object'

class partition_origin_vector(ListObject[partition_origin_vector_child]):
    """
    'partition_origin_vector' child.
    """
    _version = '231'
    fluent_name = 'partition-origin-vector'
    _python_name = 'partition_origin_vector'
    child_object_type = partition_origin_vector_child
    return_type = 'object'

class pre_test_1(Boolean):
    """
    Partition pre-testing optimization.
    """
    _version = '231'
    fluent_name = 'pre-test?'
    _python_name = 'pre_test'
    return_type = 'object'

class smooth_partitioning(Boolean):
    """
    'smooth_partitioning' child.
    """
    _version = '231'
    fluent_name = 'smooth-partitioning?'
    _python_name = 'smooth_partitioning'
    return_type = 'object'

class max_smoothing_iterations(Integer):
    """
    'max_smoothing_iterations' child.
    """
    _version = '231'
    fluent_name = 'max-smoothing-iterations'
    _python_name = 'max_smoothing_iterations'
    return_type = 'object'

class smooth_1(Group):
    """
    Partition smoothing optimization.
    """
    _version = '231'
    fluent_name = 'smooth'
    _python_name = 'smooth'
    child_names = ['smooth_partitioning', 'max_smoothing_iterations']
    _child_classes = dict(
        smooth_partitioning=smooth_partitioning,
        max_smoothing_iterations=max_smoothing_iterations,
    )
    return_type = 'object'

class print_verbosity(Integer):
    """
    Partition print verbosity.
    """
    _version = '231'
    fluent_name = 'print-verbosity'
    _python_name = 'print_verbosity'
    return_type = 'object'

class set_4(Real):
    """
    Laplace smoothing for mesh with stretched cells.
    """
    _version = '231'
    fluent_name = 'set'
    _python_name = 'set'
    return_type = 'object'

class laplace_smoothing(Group):
    """
    'laplace_smoothing' child.
    """
    _version = '231'
    fluent_name = 'laplace-smoothing'
    _python_name = 'laplace_smoothing'
    child_names = ['enabled', 'set']
    _child_classes = dict(
        enabled=enabled_2,
        set=set_4,
    )
    return_type = 'object'

class nfaces_as_weights_1(Boolean):
    """
    'nfaces_as_weights' child.
    """
    _version = '231'
    fluent_name = 'nfaces-as-weights?'
    _python_name = 'nfaces_as_weights'
    return_type = 'object'

class user_defined_value(Boolean):
    """
    'user_defined_value' child.
    """
    _version = '231'
    fluent_name = 'user-defined-value?'
    _python_name = 'user_defined_value'
    return_type = 'object'

class nfaces_as_weights(Group):
    """
    Use number of faces as weights.
    """
    _version = '231'
    fluent_name = 'nfaces-as-weights'
    _python_name = 'nfaces_as_weights'
    child_names = ['nfaces_as_weights', 'user_defined_value', 'value']
    _child_classes = dict(
        nfaces_as_weights=nfaces_as_weights_1,
        user_defined_value=user_defined_value,
        value=value,
    )
    return_type = 'object'

class face_area_as_weights(Boolean):
    """
    Use face area as connection weights.
    """
    _version = '231'
    fluent_name = 'face-area-as-weights?'
    _python_name = 'face_area_as_weights'
    return_type = 'object'

class use_layering(Boolean):
    """
    'use_layering' child.
    """
    _version = '231'
    fluent_name = 'use-layering'
    _python_name = 'use_layering'
    return_type = 'object'

class base_face_zone_for_partitioning(IntegerList):
    """
    'base_face_zone_for_partitioning' child.
    """
    _version = '231'
    fluent_name = 'base-face-zone-for-partitioning'
    _python_name = 'base_face_zone_for_partitioning'
    return_type = 'object'

class layering(Group):
    """
    Use layering for partitioning.
    """
    _version = '231'
    fluent_name = 'layering'
    _python_name = 'layering'
    child_names = ['use_layering', 'base_face_zone_for_partitioning']
    _child_classes = dict(
        use_layering=use_layering,
        base_face_zone_for_partitioning=base_face_zone_for_partitioning,
    )
    return_type = 'object'

class use(Boolean):
    """
    'use' child.
    """
    _version = '231'
    fluent_name = 'use?'
    _python_name = 'use'
    return_type = 'object'

class use_user_define_value(Boolean):
    """
    'use_user_define_value' child.
    """
    _version = '231'
    fluent_name = 'use-user-define-value?'
    _python_name = 'use_user_define_value'
    return_type = 'object'

class solid_thread_weight(Group):
    """
    Use solid thread weights.
    """
    _version = '231'
    fluent_name = 'solid-thread-weight'
    _python_name = 'solid_thread_weight'
    child_names = ['use', 'use_user_define_value', 'value']
    _child_classes = dict(
        use=use,
        use_user_define_value=use_user_define_value,
        value=value,
    )
    return_type = 'object'

class use_enhancement(Boolean):
    """
    Enhancement for mesh with stretched cells.
    """
    _version = '231'
    fluent_name = 'use-enhancement?'
    _python_name = 'use_enhancement'
    return_type = 'object'

class aspect_ratio_1(Real):
    """
    Enhancement for mesh with stretched cells.
    """
    _version = '231'
    fluent_name = 'aspect-ratio'
    _python_name = 'aspect_ratio'
    return_type = 'object'

class stretched_mesh_enhancement(Group):
    """
    Enhancement for mesh with stretched cells.
    """
    _version = '231'
    fluent_name = 'stretched-mesh-enhancement'
    _python_name = 'stretched_mesh_enhancement'
    child_names = ['use_enhancement', 'aspect_ratio']
    _child_classes = dict(
        use_enhancement=use_enhancement,
        aspect_ratio=aspect_ratio_1,
    )
    return_type = 'object'

class user_defined_2(Boolean):
    """
    'user_defined' child.
    """
    _version = '231'
    fluent_name = 'user-defined?'
    _python_name = 'user_defined'
    return_type = 'object'

class hybrid_optimization(Boolean):
    """
    'hybrid_optimization' child.
    """
    _version = '231'
    fluent_name = 'hybrid-optimization?'
    _python_name = 'hybrid_optimization'
    return_type = 'object'

class particle_weight(Group):
    """
    DPM particle weight.
    """
    _version = '231'
    fluent_name = 'particle-weight'
    _python_name = 'particle_weight'
    child_names = ['use', 'user_defined', 'value', 'hybrid_optimization']
    _child_classes = dict(
        use=use,
        user_defined=user_defined_2,
        value=value,
        hybrid_optimization=hybrid_optimization,
    )
    return_type = 'object'

class vof_free_surface_weight(Group):
    """
    VOF free surface weight.
    """
    _version = '231'
    fluent_name = 'vof-free-surface-weight'
    _python_name = 'vof_free_surface_weight'
    child_names = ['use', 'user_defined', 'value']
    _child_classes = dict(
        use=use,
        user_defined=user_defined_2,
        value=value,
    )
    return_type = 'object'

class isat_weight(Group):
    """
    ISAT weight.
    """
    _version = '231'
    fluent_name = 'isat-weight'
    _python_name = 'isat_weight'
    child_names = ['use', 'user_defined', 'value']
    _child_classes = dict(
        use=use,
        user_defined=user_defined_2,
        value=value,
    )
    return_type = 'object'

class fluid_solid_rebalance_after_read_case(Boolean):
    """
    Use optimal repartitioning after reading case file with significant solid and fluid zones.
    """
    _version = '231'
    fluent_name = 'fluid-solid-rebalance-after-read-case?'
    _python_name = 'fluid_solid_rebalance_after_read_case'
    return_type = 'object'

class model_weighted_partition(Boolean):
    """
    Model weighted partition.
    """
    _version = '231'
    fluent_name = 'model-weighted-partition'
    _python_name = 'model_weighted_partition'
    return_type = 'object'

class load_balancing(Boolean):
    """
    'load_balancing' child.
    """
    _version = '231'
    fluent_name = 'load-balancing?'
    _python_name = 'load_balancing'
    return_type = 'object'

class interval(Integer):
    """
    'interval' child.
    """
    _version = '231'
    fluent_name = 'interval'
    _python_name = 'interval'
    return_type = 'object'

class dpm_load_balancing(Group):
    """
    Enable automatic load balancing for DPM.
    """
    _version = '231'
    fluent_name = 'dpm-load-balancing'
    _python_name = 'dpm_load_balancing'
    child_names = ['load_balancing', 'threshold', 'interval']
    _child_classes = dict(
        load_balancing=load_balancing,
        threshold=threshold,
        interval=interval,
    )
    return_type = 'object'

class across_zone_boundaries(Boolean):
    """
    'across_zone_boundaries' child.
    """
    _version = '231'
    fluent_name = 'across-zone-boundaries?'
    _python_name = 'across_zone_boundaries'
    return_type = 'object'

class across_zones_1(Command):
    """
    Enable partitioning by zone or by domain.
    
    Parameters
    ----------
        across_zone_boundaries : bool
            'across_zone_boundaries' child.
    """
    _version = '231'
    fluent_name = 'across-zones'
    _python_name = 'across_zones'
    argument_names = ['across_zone_boundaries']
    _child_classes = dict(
        across_zone_boundaries=across_zone_boundaries,
    )
    return_type = 'object'

class all_off(Command):
    """
    Disable all optimization.
    """
    _version = '231'
    fluent_name = 'all-off'
    _python_name = 'all_off'
    return_type = 'object'

class all_on(Command):
    """
    Enable all optimization.
    """
    _version = '231'
    fluent_name = 'all-on'
    _python_name = 'all_on'
    return_type = 'object'

class set_3(Group):
    """
    The object.
    """
    _version = '231'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['cell_function', 'load_distribution', 'merge', 'partition_origin_vector', 'pre_test', 'smooth', 'print_verbosity', 'origin', 'laplace_smoothing', 'nfaces_as_weights', 'face_area_as_weights', 'layering', 'solid_thread_weight', 'stretched_mesh_enhancement', 'particle_weight', 'vof_free_surface_weight', 'isat_weight', 'fluid_solid_rebalance_after_read_case', 'model_weighted_partition', 'dpm_load_balancing']
    command_names = ['across_zones', 'all_off', 'all_on']
    _child_classes = dict(
        cell_function=cell_function_1,
        load_distribution=load_distribution,
        merge=merge,
        partition_origin_vector=partition_origin_vector,
        pre_test=pre_test_1,
        smooth=smooth_1,
        print_verbosity=print_verbosity,
        origin=origin,
        laplace_smoothing=laplace_smoothing,
        nfaces_as_weights=nfaces_as_weights,
        face_area_as_weights=face_area_as_weights,
        layering=layering,
        solid_thread_weight=solid_thread_weight,
        stretched_mesh_enhancement=stretched_mesh_enhancement,
        particle_weight=particle_weight,
        vof_free_surface_weight=vof_free_surface_weight,
        isat_weight=isat_weight,
        fluid_solid_rebalance_after_read_case=fluid_solid_rebalance_after_read_case,
        model_weighted_partition=model_weighted_partition,
        dpm_load_balancing=dpm_load_balancing,
        across_zones=across_zones_1,
        all_off=all_off,
        all_on=all_on,
    )
    return_type = 'object'

class number_of_partitions(Integer):
    """
    'number_of_partitions' child.
    """
    _version = '231'
    fluent_name = 'number-of-partitions'
    _python_name = 'number_of_partitions'
    return_type = 'object'

class combine_partition(Command):
    """
    Merge every N partitions.
    
    Parameters
    ----------
        number_of_partitions : int
            'number_of_partitions' child.
    """
    _version = '231'
    fluent_name = 'combine-partition'
    _python_name = 'combine_partition'
    argument_names = ['number_of_partitions']
    _child_classes = dict(
        number_of_partitions=number_of_partitions,
    )
    return_type = 'object'

class merge_iterations(Integer):
    """
    'merge_iterations' child.
    """
    _version = '231'
    fluent_name = 'merge-iterations'
    _python_name = 'merge_iterations'
    return_type = 'object'

class merge_clusters(Command):
    """
    Merge partition clusters.
    
    Parameters
    ----------
        merge_iterations : int
            'merge_iterations' child.
    """
    _version = '231'
    fluent_name = 'merge-clusters'
    _python_name = 'merge_clusters'
    argument_names = ['merge_iterations']
    _child_classes = dict(
        merge_iterations=merge_iterations,
    )
    return_type = 'object'

class partition_method(String, AllowedValuesMixin):
    """
    'partition_method' child.
    """
    _version = '231'
    fluent_name = 'partition-method'
    _python_name = 'partition_method'
    return_type = 'object'

class count(Integer):
    """
    'count' child.
    """
    _version = '231'
    fluent_name = 'count'
    _python_name = 'count'
    return_type = 'object'

class method_3(Command):
    """
    Partition the domain.
    
    Parameters
    ----------
        partition_method : str
            'partition_method' child.
        count : int
            'count' child.
    """
    _version = '231'
    fluent_name = 'method'
    _python_name = 'method'
    argument_names = ['partition_method', 'count']
    _child_classes = dict(
        partition_method=partition_method,
        count=count,
    )
    return_type = 'object'

class print_partitions(Command):
    """
    Print partition information.
    """
    _version = '231'
    fluent_name = 'print-partitions'
    _python_name = 'print_partitions'
    return_type = 'object'

class print_active_partitions(Command):
    """
    Print active partition information.
    """
    _version = '231'
    fluent_name = 'print-active-partitions'
    _python_name = 'print_active_partitions'
    return_type = 'object'

class print_stored_partitions(Command):
    """
    Print stored partition information.
    """
    _version = '231'
    fluent_name = 'print-stored-partitions'
    _python_name = 'print_stored_partitions'
    return_type = 'object'

class reorder_partitions(Command):
    """
    Reorder partitions.
    """
    _version = '231'
    fluent_name = 'reorder-partitions'
    _python_name = 'reorder_partitions'
    return_type = 'object'

class reorder_partitions_to_architecture(Command):
    """
    Reorder partitions to architecture.
    """
    _version = '231'
    fluent_name = 'reorder-partitions-to-architecture'
    _python_name = 'reorder_partitions_to_architecture'
    return_type = 'object'

class smoothing_iteration(Integer):
    """
    Maximum number of smoothing iterations.
    """
    _version = '231'
    fluent_name = 'smoothing-iteration'
    _python_name = 'smoothing_iteration'
    return_type = 'object'

class smooth_partition(Command):
    """
    Smooth partition interface.
    
    Parameters
    ----------
        smoothing_iteration : int
            Maximum number of smoothing iterations.
    """
    _version = '231'
    fluent_name = 'smooth-partition'
    _python_name = 'smooth_partition'
    argument_names = ['smoothing_iteration']
    _child_classes = dict(
        smoothing_iteration=smoothing_iteration,
    )
    return_type = 'object'

class use_stored_partitions(Command):
    """
    Use stored partitioning.
    """
    _version = '231'
    fluent_name = 'use-stored-partitions'
    _python_name = 'use_stored_partitions'
    return_type = 'object'

class partition_1(Group):
    """
    The partition domain object.
    """
    _version = '231'
    fluent_name = 'partition'
    _python_name = 'partition'
    child_names = ['auto', 'set']
    command_names = ['combine_partition', 'merge_clusters', 'method', 'print_partitions', 'print_active_partitions', 'print_stored_partitions', 'reorder_partitions', 'reorder_partitions_to_architecture', 'smooth_partition', 'use_stored_partitions']
    _child_classes = dict(
        auto=auto,
        set=set_3,
        combine_partition=combine_partition,
        merge_clusters=merge_clusters,
        method=method_3,
        print_partitions=print_partitions,
        print_active_partitions=print_active_partitions,
        print_stored_partitions=print_stored_partitions,
        reorder_partitions=reorder_partitions,
        reorder_partitions_to_architecture=reorder_partitions_to_architecture,
        smooth_partition=smooth_partition,
        use_stored_partitions=use_stored_partitions,
    )
    return_type = 'object'

class partition_mask(IntegerList):
    """
    Partition mask.
    """
    _version = '231'
    fluent_name = 'partition-mask'
    _python_name = 'partition_mask'
    return_type = 'object'

class verbosity_9(Integer):
    """
    The parallel verbosity.
    """
    _version = '231'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'
    return_type = 'object'

class time_out(Real):
    """
    Spawn timeout seconds.
    """
    _version = '231'
    fluent_name = 'time-out'
    _python_name = 'time_out'
    return_type = 'object'

class fast_io(Boolean):
    """
    Use fast I/O option.
    """
    _version = '231'
    fluent_name = 'fast-io?'
    _python_name = 'fast_io'
    return_type = 'object'

class set_2(Group):
    """
    'set' child.
    """
    _version = '231'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['partition_mask', 'verbosity', 'time_out', 'fast_io']
    _child_classes = dict(
        partition_mask=partition_mask,
        verbosity=verbosity_9,
        time_out=time_out,
        fast_io=fast_io,
    )
    return_type = 'object'

class use_multi_physics(Boolean):
    """
    'use_multi_physics' child.
    """
    _version = '231'
    fluent_name = 'use-multi-physics?'
    _python_name = 'use_multi_physics'
    return_type = 'object'

class physical_models_2(Group):
    """
    Use physical-models load balancing?.
    """
    _version = '231'
    fluent_name = 'physical-models'
    _python_name = 'physical_models'
    child_names = ['use_multi_physics', 'threshold', 'interval']
    _child_classes = dict(
        use_multi_physics=use_multi_physics,
        threshold=threshold,
        interval=interval,
    )
    return_type = 'object'

class auto_1(Boolean):
    """
    'auto' child.
    """
    _version = '231'
    fluent_name = 'auto?'
    _python_name = 'auto'
    return_type = 'object'

class dynamic_mesh(Group):
    """
    Use load balancing for dynamic mesh?.
    """
    _version = '231'
    fluent_name = 'dynamic-mesh'
    _python_name = 'dynamic_mesh'
    child_names = ['use', 'auto', 'threshold', 'interval']
    _child_classes = dict(
        use=use,
        auto=auto_1,
        threshold=threshold,
        interval=interval,
    )
    return_type = 'object'

class mesh_adaption(Group):
    """
    Use load balancing for mesh adaption?.
    """
    _version = '231'
    fluent_name = 'mesh-adaption'
    _python_name = 'mesh_adaption'
    child_names = ['use', 'threshold']
    _child_classes = dict(
        use=use,
        threshold=threshold,
    )
    return_type = 'object'

class load_balance(Group):
    """
    'load_balance' child.
    """
    _version = '231'
    fluent_name = 'load-balance'
    _python_name = 'load_balance'
    child_names = ['physical_models', 'dynamic_mesh', 'mesh_adaption']
    _child_classes = dict(
        physical_models=physical_models_2,
        dynamic_mesh=dynamic_mesh,
        mesh_adaption=mesh_adaption,
    )
    return_type = 'object'

class enabled_3(Boolean):
    """
    Enable/disable loosely coupled conjugate heat transfer.
    """
    _version = '231'
    fluent_name = 'enabled?'
    _python_name = 'enabled'
    return_type = 'object'

class iter_per_coupling_count(Integer):
    """
    'iter_per_coupling_count' child.
    """
    _version = '231'
    fluent_name = 'iter-per-coupling-count'
    _python_name = 'iter_per_coupling_count'
    return_type = 'object'

class method_4(String, AllowedValuesMixin):
    """
    The method for fluid and solid zone coupling.
    """
    _version = '231'
    fluent_name = 'method'
    _python_name = 'method'
    return_type = 'object'

class interval_1(Real):
    """
    'interval' child.
    """
    _version = '231'
    fluent_name = 'interval'
    _python_name = 'interval'
    return_type = 'object'

class single_session_coupling(Group):
    """
    'single_session_coupling' child.
    """
    _version = '231'
    fluent_name = 'single-session-coupling'
    _python_name = 'single_session_coupling'
    child_names = ['method', 'type', 'interval', 'frequency']
    _child_classes = dict(
        method=method_4,
        type=type_1,
        interval=interval_1,
        frequency=frequency_1,
    )
    return_type = 'object'

class two_session_coupling(Group):
    """
    'two_session_coupling' child.
    """
    _version = '231'
    fluent_name = 'two-session-coupling'
    _python_name = 'two_session_coupling'
    child_names = ['method', 'type', 'frequency']
    _child_classes = dict(
        method=method_4,
        type=type_1,
        frequency=frequency_1,
    )
    return_type = 'object'

class coupling(Group):
    """
    'coupling' child.
    """
    _version = '231'
    fluent_name = 'coupling'
    _python_name = 'coupling'
    child_names = ['iter_per_coupling_count', 'single_session_coupling', 'two_session_coupling']
    _child_classes = dict(
        iter_per_coupling_count=iter_per_coupling_count,
        single_session_coupling=single_session_coupling,
        two_session_coupling=two_session_coupling,
    )
    return_type = 'object'

class process_count(Integer):
    """
    'process_count' child.
    """
    _version = '231'
    fluent_name = 'process-count'
    _python_name = 'process_count'
    return_type = 'object'

class host_name(String):
    """
    'host_name' child.
    """
    _version = '231'
    fluent_name = 'host-name'
    _python_name = 'host_name'
    return_type = 'object'

class helper_session_setup(Group):
    """
    Setup helper session for multidomain conjugate heat transfer.
    """
    _version = '231'
    fluent_name = 'helper-session-setup'
    _python_name = 'helper_session_setup'
    child_names = ['process_count', 'host_name']
    _child_classes = dict(
        process_count=process_count,
        host_name=host_name,
    )
    return_type = 'object'

class helper_session(Boolean):
    """
    Setup session mode (single/multiple) for multidomain conjugate heat transfer.
    """
    _version = '231'
    fluent_name = 'helper-session?'
    _python_name = 'helper_session'
    return_type = 'object'

class set_5(Group):
    """
    'set' child.
    """
    _version = '231'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['coupling', 'helper_session_setup', 'helper_session']
    _child_classes = dict(
        coupling=coupling,
        helper_session_setup=helper_session_setup,
        helper_session=helper_session,
    )
    return_type = 'object'

class conjugate_heat_transfer(Group):
    """
    'conjugate_heat_transfer' child.
    """
    _version = '231'
    fluent_name = 'conjugate-heat-transfer'
    _python_name = 'conjugate_heat_transfer'
    child_names = ['enabled', 'set']
    _child_classes = dict(
        enabled=enabled_3,
        set=set_5,
    )
    return_type = 'object'

class iter_count_4(Integer):
    """
    'iter_count' child.
    """
    _version = '231'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'
    return_type = 'object'

class time_steps_count(Integer):
    """
    'time_steps_count' child.
    """
    _version = '231'
    fluent_name = 'time-steps-count'
    _python_name = 'time_steps_count'
    return_type = 'object'

class fluid_time_step_count(Integer):
    """
    'fluid_time_step_count' child.
    """
    _version = '231'
    fluent_name = 'fluid-time-step-count'
    _python_name = 'fluid_time_step_count'
    return_type = 'object'

class iter_per_time_step_count(Integer):
    """
    'iter_per_time_step_count' child.
    """
    _version = '231'
    fluent_name = 'iter-per-time-step-count'
    _python_name = 'iter_per_time_step_count'
    return_type = 'object'

class iterate_1(Command):
    """
    Iteration the multidomain conjugate heat transfer.
    
    Parameters
    ----------
        iter_count : int
            'iter_count' child.
        time_steps_count : int
            'time_steps_count' child.
        fluid_time_step_count : int
            'fluid_time_step_count' child.
        iter_per_time_step_count : int
            'iter_per_time_step_count' child.
    """
    _version = '231'
    fluent_name = 'iterate'
    _python_name = 'iterate'
    argument_names = ['iter_count', 'time_steps_count', 'fluid_time_step_count', 'iter_per_time_step_count']
    _child_classes = dict(
        iter_count=iter_count_4,
        time_steps_count=time_steps_count,
        fluid_time_step_count=fluid_time_step_count,
        iter_per_time_step_count=iter_per_time_step_count,
    )
    return_type = 'object'

class dual_time_iterate_1(Command):
    """
    Dual-time iterate the multidomain conjugate heat transfer.
    
    Parameters
    ----------
        iter_count : int
            'iter_count' child.
        time_steps_count : int
            'time_steps_count' child.
        fluid_time_step_count : int
            'fluid_time_step_count' child.
        iter_per_time_step_count : int
            'iter_per_time_step_count' child.
    """
    _version = '231'
    fluent_name = 'dual-time-iterate'
    _python_name = 'dual_time_iterate'
    argument_names = ['iter_count', 'time_steps_count', 'fluid_time_step_count', 'iter_per_time_step_count']
    _child_classes = dict(
        iter_count=iter_count_4,
        time_steps_count=time_steps_count,
        fluid_time_step_count=fluid_time_step_count,
        iter_per_time_step_count=iter_per_time_step_count,
    )
    return_type = 'object'

class solve(Group):
    """
    'solve' child.
    """
    _version = '231'
    fluent_name = 'solve'
    _python_name = 'solve'
    command_names = ['iterate', 'dual_time_iterate']
    _child_classes = dict(
        iterate=iterate_1,
        dual_time_iterate=dual_time_iterate_1,
    )
    return_type = 'object'

class multidomain(Group):
    """
    'multidomain' child.
    """
    _version = '231'
    fluent_name = 'multidomain'
    _python_name = 'multidomain'
    child_names = ['conjugate_heat_transfer', 'solve']
    _child_classes = dict(
        conjugate_heat_transfer=conjugate_heat_transfer,
        solve=solve,
    )
    return_type = 'object'

class shell_script_path(String):
    """
    The Fluent shell script path.
    """
    _version = '231'
    fluent_name = 'shell-script-path'
    _python_name = 'shell_script_path'
    return_type = 'object'

class invalidate_case(Boolean):
    """
    'invalidate_case' child.
    """
    _version = '231'
    fluent_name = 'invalidate-case?'
    _python_name = 'invalidate_case'
    return_type = 'object'

class delete_all_compute_nodes(Boolean):
    """
    'delete_all_compute_nodes' child.
    """
    _version = '231'
    fluent_name = 'delete-all-compute-nodes?'
    _python_name = 'delete_all_compute_nodes'
    return_type = 'object'

class kill_all_nodes(Command):
    """
    Delete all compute nodes from virtual machine.
    
    Parameters
    ----------
        invalidate_case : bool
            'invalidate_case' child.
        delete_all_compute_nodes : bool
            'delete_all_compute_nodes' child.
    """
    _version = '231'
    fluent_name = 'kill-all-nodes'
    _python_name = 'kill_all_nodes'
    argument_names = ['invalidate_case', 'delete_all_compute_nodes']
    _child_classes = dict(
        invalidate_case=invalidate_case,
        delete_all_compute_nodes=delete_all_compute_nodes,
    )
    return_type = 'object'

class compute_node(Integer):
    """
    'compute_node' child.
    """
    _version = '231'
    fluent_name = 'compute-node'
    _python_name = 'compute_node'
    return_type = 'object'

class kill_node(Command):
    """
    'kill_node' command.
    """
    _version = '231'
    fluent_name = 'kill-node'
    _python_name = 'kill_node'
    argument_names = ['compute_node', 'invalidate_case']
    _child_classes = dict(
        compute_node=compute_node,
        invalidate_case=invalidate_case,
    )
    return_type = 'object'

class hostname(String):
    """
    'hostname' child.
    """
    _version = '231'
    fluent_name = 'hostname'
    _python_name = 'hostname'
    return_type = 'object'

class username(String):
    """
    'username' child.
    """
    _version = '231'
    fluent_name = 'username'
    _python_name = 'username'
    return_type = 'object'

class spawn_node(Command):
    """
    Spawn a compute node process on a specified machine.
    
    Parameters
    ----------
        hostname : str
            'hostname' child.
        username : str
            'username' child.
    """
    _version = '231'
    fluent_name = 'spawn-node'
    _python_name = 'spawn_node'
    argument_names = ['hostname', 'username']
    _child_classes = dict(
        hostname=hostname,
        username=username,
    )
    return_type = 'object'

class host_file(Filename):
    """
    'host_file' child.
    """
    _version = '231'
    fluent_name = 'host-file'
    _python_name = 'host_file'
    return_type = 'object'

class load_hosts(Command):
    """
    Read a hosts file.
    
    Parameters
    ----------
        host_file : str
            'host_file' child.
    """
    _version = '231'
    fluent_name = 'load-hosts'
    _python_name = 'load_hosts'
    argument_names = ['host_file']
    _child_classes = dict(
        host_file=host_file,
    )
    return_type = 'object'

class save_hosts(Command):
    """
    Write a hosts file.
    
    Parameters
    ----------
        host_file : str
            'host_file' child.
    """
    _version = '231'
    fluent_name = 'save-hosts'
    _python_name = 'save_hosts'
    argument_names = ['host_file']
    _child_classes = dict(
        host_file=host_file,
    )
    return_type = 'object'

class network_1(Group):
    """
    The network configuration object.
    """
    _version = '231'
    fluent_name = 'network'
    _python_name = 'network'
    child_names = ['shell_script_path']
    command_names = ['kill_all_nodes', 'kill_node', 'spawn_node', 'load_hosts', 'save_hosts']
    _child_classes = dict(
        shell_script_path=shell_script_path,
        kill_all_nodes=kill_all_nodes,
        kill_node=kill_node,
        spawn_node=spawn_node,
        load_hosts=load_hosts,
        save_hosts=save_hosts,
    )
    return_type = 'object'

class usage(Command):
    """
    Print solver timer.
    """
    _version = '231'
    fluent_name = 'usage'
    _python_name = 'usage'
    return_type = 'object'

class reset_1(Command):
    """
    Reset domain timers.
    """
    _version = '231'
    fluent_name = 'reset'
    _python_name = 'reset'
    return_type = 'object'

class timer(Group):
    """
    'timer' child.
    """
    _version = '231'
    fluent_name = 'timer'
    _python_name = 'timer'
    command_names = ['usage', 'reset']
    _child_classes = dict(
        usage=usage,
        reset=reset_1,
    )
    return_type = 'object'

class check_1(Command):
    """
    Parallel check.
    """
    _version = '231'
    fluent_name = 'check'
    _python_name = 'check'
    return_type = 'object'

class show_connectivity(Command):
    """
    Show machine connectivity.
    
    Parameters
    ----------
        compute_node : int
            'compute_node' child.
    """
    _version = '231'
    fluent_name = 'show-connectivity'
    _python_name = 'show_connectivity'
    argument_names = ['compute_node']
    _child_classes = dict(
        compute_node=compute_node,
    )
    return_type = 'object'

class latency(Command):
    """
    Show network latency.
    """
    _version = '231'
    fluent_name = 'latency'
    _python_name = 'latency'
    return_type = 'object'

class bandwidth(Command):
    """
    Show network bandwidth.
    """
    _version = '231'
    fluent_name = 'bandwidth'
    _python_name = 'bandwidth'
    return_type = 'object'

class parallel(Group):
    """
    'parallel' child.
    """
    _version = '231'
    fluent_name = 'parallel'
    _python_name = 'parallel'
    child_names = ['thread_number_control', 'check_verbosity', 'partition', 'set', 'load_balance', 'multidomain', 'network', 'timer']
    command_names = ['check', 'show_connectivity', 'latency', 'bandwidth']
    _child_classes = dict(
        thread_number_control=thread_number_control,
        check_verbosity=check_verbosity_1,
        partition=partition_1,
        set=set_2,
        load_balance=load_balance,
        multidomain=multidomain,
        network=network_1,
        timer=timer,
        check=check_1,
        show_connectivity=show_connectivity,
        latency=latency,
        bandwidth=bandwidth,
    )
    return_type = 'object'

class root(Group):
    """
    'root' object.
    """
    _version = '231'
    fluent_name = ''
    _python_name = 'root'
    child_names = ['file', 'mesh', 'server', 'setup', 'solution', 'results', 'parametric_studies', 'current_parametric_study', 'parallel', 'report']
    _child_classes = dict(
        file=file,
        mesh=mesh,
        server=server,
        setup=setup,
        solution=solution,
        results=results,
        parametric_studies=parametric_studies,
        current_parametric_study=current_parametric_study,
        parallel=parallel,
        report=report,
    )
    return_type = 'object'

