#
# This is an auto-generated file.  DO NOT EDIT!
#

from ansys.fluent.core.solver.flobject import *

from ansys.fluent.core.solver.flobject import (
    _ChildNamedObjectAccessorMixin,
    _NonCreatableNamedObjectMixin,
    _InputFile,
    _OutputFile,
    _InOutFile,
    _FlStringConstant,
)

SHASH = "498056b05fb9bec5f6cb2c74f08103229db1ca4a65fbda88fd8d1fdca0be0cc7"

class single_precision_coordinates(Boolean):
    """
    Specifies whether to write nodal coordinates in single precision.
    """
    _version = '251'
    fluent_name = 'single-precision-coordinates?'
    _python_name = 'single_precision_coordinates'

class binary_legacy_files(Boolean):
    """
    Specifies whether to write binary or text format case and data files.
    """
    _version = '251'
    fluent_name = 'binary-legacy-files?'
    _python_name = 'binary_legacy_files'

class cff_files(Boolean):
    """
    Specifies whether to write ANSYS common fluids format (CFF) files or legacy case and data files.
    """
    _version = '251'
    fluent_name = 'cff-files?'
    _python_name = 'cff_files'

class auto_merge_zones(Boolean):
    """
    Specifies whether to merge cell/face zones automatically during case reading.
    """
    _version = '251'
    fluent_name = 'auto-merge-zones?'
    _python_name = 'auto_merge_zones'

class convert_hanging_nodes_during_read(Boolean):
    """
    Specifies whether meshes with hanging-nodes will be converted to polyhedra while reading.
    """
    _version = '251'
    fluent_name = 'convert-hanging-nodes-during-read?'
    _python_name = 'convert_hanging_nodes_during_read'

class async_optimize(Boolean):
    """
    Specifies whether to optimize file IO using scratch disks and asynchronous operations.
    """
    _version = '251'
    fluent_name = 'async-optimize?'
    _python_name = 'async_optimize'

class write_pdat(Boolean):
    """
    Specifies whether to attempt to save pdat files.
    """
    _version = '251'
    fluent_name = 'write-pdat?'
    _python_name = 'write_pdat'

class case_frequency(String, AllowedValuesMixin):
    """
    The preference for saving case files.
    """
    _version = '251'
    fluent_name = 'case-frequency'
    _python_name = 'case_frequency'

class data_frequency(Real):
    """
    The iteration or time step increment for saving data files.
    """
    _version = '251'
    fluent_name = 'data-frequency'
    _python_name = 'data_frequency'

class root_name(Filename, _OutputFile):
    """
    The root name for auto-saved files. The number of iterations or time steps will be appended to this root name.
    """
    _version = '251'
    fluent_name = 'root-name'
    _python_name = 'root_name'

class retain_most_recent_files(Boolean):
    """
    After the maximum (as in max-files) is reached, a file will be deleted for each file saved.
    """
    _version = '251'
    fluent_name = 'retain-most-recent-files?'
    _python_name = 'retain_most_recent_files'

class max_files(Integer):
    """
    The maximum number of data files to save. After the maximum is reached, a file will be deleted for each file saved.
    """
    _version = '251'
    fluent_name = 'max-files'
    _python_name = 'max_files'

class file_suffix_type(String, AllowedValuesMixin):
    """
    Flow-time, time-step, or crank-angle to be appended to the file name.
    """
    _version = '251'
    fluent_name = 'file-suffix-type'
    _python_name = 'file_suffix_type'

class file_decimal_digit(Integer):
    """
    The number of decimal digits in the file name.
    """
    _version = '251'
    fluent_name = 'file-decimal-digit'
    _python_name = 'file_decimal_digit'

class append_file_name_with(Group):
    """
    The suffix for auto-saved files. The file name can be appended by flow-time, time-step value or by user specified flags in file name.
    """
    _version = '251'
    fluent_name = 'append-file-name-with'
    _python_name = 'append_file_name_with'
    child_names = ['file_suffix_type', 'file_decimal_digit']
    _child_classes = dict(
        file_suffix_type=file_suffix_type,
        file_decimal_digit=file_decimal_digit,
    )

class frequency_type(String, AllowedValuesMixin):
    """
    The auto save frequency type. For steady flows you will specify the frequency in iterations, while for unsteady flows you will specify it in either time steps or flow time.
    """
    _version = '251'
    fluent_name = 'frequency-type'
    _python_name = 'frequency_type'

class save_frequency(Real):
    """
    The frequency at which data are saved.
    """
    _version = '251'
    fluent_name = 'save-frequency'
    _python_name = 'save_frequency'

class save_data_file_every(Group):
    """
    The auto save frequency type to either time-step or crank-angle and set the corresponding frequency.
    """
    _version = '251'
    fluent_name = 'save-data-file-every'
    _python_name = 'save_data_file_every'
    child_names = ['frequency_type', 'save_frequency']
    _child_classes = dict(
        frequency_type=frequency_type,
        save_frequency=save_frequency,
    )

class auto_save(Group):
    """
    Automatic saving of case and data files at specified intervals during a calculation.
    """
    _version = '251'
    fluent_name = 'auto-save'
    _python_name = 'auto_save'
    child_names = ['case_frequency', 'data_frequency', 'root_name', 'retain_most_recent_files', 'max_files', 'append_file_name_with', 'save_data_file_every']
    _child_classes = dict(
        case_frequency=case_frequency,
        data_frequency=data_frequency,
        root_name=root_name,
        retain_most_recent_files=retain_most_recent_files,
        max_files=max_files,
        append_file_name_with=append_file_name_with,
        save_data_file_every=save_data_file_every,
    )

class enable_auto_creation_of_scp_file(Boolean):
    """
    Enable/disable automatic creation of scp file during case write.
    """
    _version = '251'
    fluent_name = 'enable-auto-creation-of-scp-file?'
    _python_name = 'enable_auto_creation_of_scp_file'

class file_name(String):
    """
    The desired file name to export.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class write_sc_file(Command):
    """
    Write a Fluent Input File for System Coupling.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
    """
    _version = '251'
    fluent_name = 'write-sc-file'
    _python_name = 'write_sc_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name,
    )

class sc_def_file_settings(Group):
    """
    File object.
    """
    _version = '251'
    fluent_name = 'sc-def-file-settings'
    _python_name = 'sc_def_file_settings'
    child_names = ['enable_auto_creation_of_scp_file']
    command_names = ['write_sc_file']
    _child_classes = dict(
        enable_auto_creation_of_scp_file=enable_auto_creation_of_scp_file,
        write_sc_file=write_sc_file,
    )

class cgns_export_filetype(String, AllowedValuesMixin):
    """
    HDF5 or ADF as file format for CGNS.
    """
    _version = '251'
    fluent_name = 'cgns-export-filetype'
    _python_name = 'cgns_export_filetype'

class cgns_mesh_type(String, AllowedValuesMixin):
    """
    Specifies whether the mesh is mixed (default), its native format, or polyhedral.
    """
    _version = '251'
    fluent_name = 'cgns-mesh-type'
    _python_name = 'cgns_mesh_type'

class cgns_polyhedral_cpu_threads(Integer):
    """
    CPU threads for CGNS Poly export.
    """
    _version = '251'
    fluent_name = 'cgns-polyhedral-cpu-threads'
    _python_name = 'cgns_polyhedral_cpu_threads'

class cgns_merge_ngons_to_single_ngon(Boolean):
    """
    Merges multiple CGNS NGON_n s to single NGON_n.
    """
    _version = '251'
    fluent_name = 'cgns-merge-ngons-to-single-ngon'
    _python_name = 'cgns_merge_ngons_to_single_ngon'

class cgns_default_cellsize_changes(Boolean):
    """
    Enable/disable default CGNS cellsize correction.
    """
    _version = '251'
    fluent_name = 'cgns-default-cellsize-changes'
    _python_name = 'cgns_default_cellsize_changes'

class cgns_enhance_poly_export_performance(Boolean):
    """
    Disable NGON_n performance improvements if experiencing issues with exporting polyhedral elements to cgns.
    """
    _version = '251'
    fluent_name = 'cgns-enhance-poly-export-performance'
    _python_name = 'cgns_enhance_poly_export_performance'

class cgns_familyname(Boolean):
    """
    Specifies that boundary conditions are FamilySpecified in CGSN ZoneBC_t.
    """
    _version = '251'
    fluent_name = 'cgns-familyname'
    _python_name = 'cgns_familyname'

class cgns_separate_cellzones(Boolean):
    """
    Exports separate CGNS zone_t for individual cell zone.
    """
    _version = '251'
    fluent_name = 'cgns-separate-cellzones'
    _python_name = 'cgns_separate_cellzones'

class settings(Group):
    """
    The export settings object.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['cgns_export_filetype', 'cgns_mesh_type', 'cgns_polyhedral_cpu_threads', 'cgns_merge_ngons_to_single_ngon', 'cgns_default_cellsize_changes', 'cgns_enhance_poly_export_performance', 'cgns_familyname', 'cgns_separate_cellzones']
    _child_classes = dict(
        cgns_export_filetype=cgns_export_filetype,
        cgns_mesh_type=cgns_mesh_type,
        cgns_polyhedral_cpu_threads=cgns_polyhedral_cpu_threads,
        cgns_merge_ngons_to_single_ngon=cgns_merge_ngons_to_single_ngon,
        cgns_default_cellsize_changes=cgns_default_cellsize_changes,
        cgns_enhance_poly_export_performance=cgns_enhance_poly_export_performance,
        cgns_familyname=cgns_familyname,
        cgns_separate_cellzones=cgns_separate_cellzones,
    )

class file_name_1(Filename, _OutputFile):
    """
    The desired file name to export.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class surface_name_list(StringList, AllowedValuesMixin):
    """
    List of surfaces to export.
    """
    _version = '251'
    fluent_name = 'surface-name-list'
    _python_name = 'surface_name_list'

class structural_analysis(Boolean):
    """
    Specifies whether structural analysis or not.
    """
    _version = '251'
    fluent_name = 'structural-analysis?'
    _python_name = 'structural_analysis'

class write_loads(Boolean):
    """
    Specifies whether to write loads.
    """
    _version = '251'
    fluent_name = 'write-loads?'
    _python_name = 'write_loads'

class loads(StringList, AllowedValuesMixin):
    """
    The structural loads type to export.
    """
    _version = '251'
    fluent_name = 'loads'
    _python_name = 'loads'

class abaqus(Command):
    """
    Write an ABAQUS file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        surface_name_list : List
            List of surfaces to export.
        structural_analysis : bool
            Specifies whether structural analysis or not.
        write_loads : bool
            Specifies whether to write loads.
        loads : List
            The structural loads type to export.
    """
    _version = '251'
    fluent_name = 'abaqus'
    _python_name = 'abaqus'
    argument_names = ['file_name', 'surface_name_list', 'structural_analysis', 'write_loads', 'loads']
    _child_classes = dict(
        file_name=file_name_1,
        surface_name_list=surface_name_list,
        structural_analysis=structural_analysis,
        write_loads=write_loads,
        loads=loads,
    )

class thread_name_list(StringList, AllowedValuesMixin):
    """
    Cell zone name list.
    """
    _version = '251'
    fluent_name = 'thread-name-list'
    _python_name = 'thread_name_list'

class mechanical_apdl(Command):
    """
    Write an Mechanical APDL file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        thread_name_list : List
            Cell zone name list.
    """
    _version = '251'
    fluent_name = 'mechanical-apdl'
    _python_name = 'mechanical_apdl'
    argument_names = ['file_name', 'thread_name_list']
    _child_classes = dict(
        file_name=file_name_1,
        thread_name_list=thread_name_list,
    )

class surface_name_list_1(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '251'
    fluent_name = 'surface-name-list'
    _python_name = 'surface_name_list'

class mechanical_apdl_input(Command):
    """
    Write an Mechanical APDL Input file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        surface_name_list : List
            Surface.
        structural_analysis : bool
            Specifies whether structural analysis or not.
        write_loads : bool
            Specifies whether to write loads.
        loads : List
            The structural loads type to export.
    """
    _version = '251'
    fluent_name = 'mechanical-apdl-input'
    _python_name = 'mechanical_apdl_input'
    argument_names = ['file_name', 'surface_name_list', 'structural_analysis', 'write_loads', 'loads']
    _child_classes = dict(
        file_name=file_name_1,
        surface_name_list=surface_name_list_1,
        structural_analysis=structural_analysis,
        write_loads=write_loads,
        loads=loads,
    )

class delimiter(String, AllowedValuesMixin):
    """
    The delimiter separating the fields.
    """
    _version = '251'
    fluent_name = 'delimiter'
    _python_name = 'delimiter'

class cell_func_domain(StringList, AllowedValuesMixin):
    """
    The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'cell-func-domain'
    _python_name = 'cell_func_domain'

class location(String, AllowedValuesMixin):
    """
    The node or cell-center to export data values.
    """
    _version = '251'
    fluent_name = 'location'
    _python_name = 'location'

class ascii(Command):
    """
    Write an ASCII file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        surface_name_list : List
            List of surfaces to export.
        delimiter : str
            The delimiter separating the fields.
        cell_func_domain : List
            The list of quantities to export.
        location : str
            The node or cell-center to export data values.
    """
    _version = '251'
    fluent_name = 'ascii'
    _python_name = 'ascii'
    argument_names = ['file_name', 'surface_name_list', 'delimiter', 'cell_func_domain', 'location']
    _child_classes = dict(
        file_name=file_name_1,
        surface_name_list=surface_name_list,
        delimiter=delimiter,
        cell_func_domain=cell_func_domain,
        location=location,
    )

class cell_func_domain_export(StringList, AllowedValuesMixin):
    """
    The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'cell-func-domain-export'
    _python_name = 'cell_func_domain_export'

class avs(Command):
    """
    Write an AVS file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        cell_func_domain_export : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'avs'
    _python_name = 'avs'
    argument_names = ['file_name', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        cell_func_domain_export=cell_func_domain_export,
    )

class ensight(Command):
    """
    Write EnSight 6 geometry, velocity, and scalar files.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        cell_func_domain_export : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'ensight'
    _python_name = 'ensight'
    argument_names = ['file_name', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        cell_func_domain_export=cell_func_domain_export,
    )

class binary_format(Boolean):
    """
    Specifies whether to export in binary format.
    """
    _version = '251'
    fluent_name = 'binary-format?'
    _python_name = 'binary_format'

class cellzones(StringList, AllowedValuesMixin):
    """
    List of cell zones to export.
    """
    _version = '251'
    fluent_name = 'cellzones'
    _python_name = 'cellzones'

class interior_zone_surfaces(StringList):
    """
    List of surfaces to export.
    """
    _version = '251'
    fluent_name = 'interior-zone-surfaces'
    _python_name = 'interior_zone_surfaces'

class cell_centered(Boolean):
    """
    Specifies whether export the cell center data values.
    """
    _version = '251'
    fluent_name = 'cell-centered?'
    _python_name = 'cell_centered'

class ensight_gold(Command):
    """
    Write EnSight Gold geometry, velocity, and scalar files.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        cell_func_domain_export : List
            The list of quantities to export.
        binary_format : bool
            Specifies whether to export in binary format.
        cellzones : List
            List of cell zones to export.
        interior_zone_surfaces : List
            List of surfaces to export.
        cell_centered : bool
            Specifies whether export the cell center data values.
    """
    _version = '251'
    fluent_name = 'ensight-gold'
    _python_name = 'ensight_gold'
    argument_names = ['file_name', 'cell_func_domain_export', 'binary_format', 'cellzones', 'interior_zone_surfaces', 'cell_centered']
    _child_classes = dict(
        file_name=file_name_1,
        cell_func_domain_export=cell_func_domain_export,
        binary_format=binary_format,
        cellzones=cellzones,
        interior_zone_surfaces=interior_zone_surfaces,
        cell_centered=cell_centered,
    )

class fieldview(Command):
    """
    Write Fieldview case and data files.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        cell_func_domain_export : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'fieldview'
    _python_name = 'fieldview'
    argument_names = ['file_name', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        cell_func_domain_export=cell_func_domain_export,
    )

class fieldview_data(Command):
    """
    Write Fieldview case and data files.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        cell_func_domain_export : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'fieldview-data'
    _python_name = 'fieldview_data'
    argument_names = ['file_name', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        cell_func_domain_export=cell_func_domain_export,
    )

class gambit(Command):
    """
    Write a Gambit neutral file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        cell_func_domain_export : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'gambit'
    _python_name = 'gambit'
    argument_names = ['file_name', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        cell_func_domain_export=cell_func_domain_export,
    )

class scope(String, AllowedValuesMixin):
    """
    The scope of the export (volume, surface, full domain).
    """
    _version = '251'
    fluent_name = 'scope'
    _python_name = 'scope'

class cell_zones(StringList, AllowedValuesMixin):
    """
    Cell zone name list.
    """
    _version = '251'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'

class surfaces(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class format_class(String, AllowedValuesMixin):
    """
    The format to export.
    """
    _version = '251'
    fluent_name = 'format-class'
    _python_name = 'format_class'

class cgns_scalar(StringList, AllowedValuesMixin):
    """
    The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'cgns-scalar'
    _python_name = 'cgns_scalar'

class cgns(Command):
    """
    Write a CGNS file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        scope : str
            The scope of the export (volume, surface, full domain).
        cell_zones : List
            Cell zone name list.
        surfaces : List
            Surface.
        cell_centered : bool
            Specifies whether export the cell center data values.
        format_class : str
            The format to export.
        cgns_scalar : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'cgns'
    _python_name = 'cgns'
    argument_names = ['file_name', 'scope', 'cell_zones', 'surfaces', 'cell_centered', 'format_class', 'cgns_scalar']
    _child_classes = dict(
        file_name=file_name_1,
        scope=scope,
        cell_zones=cell_zones,
        surfaces=surfaces,
        cell_centered=cell_centered,
        format_class=format_class,
        cgns_scalar=cgns_scalar,
    )

class wall_function(Boolean):
    """
    Specifies whether to include the wall function.
    """
    _version = '251'
    fluent_name = 'wall-function?'
    _python_name = 'wall_function'

class surface_name_list_2(StringList, AllowedValuesMixin):
    """
    The list of surfaces to export.
    """
    _version = '251'
    fluent_name = 'surface-name-list'
    _python_name = 'surface_name_list'

class custom_heat_flux(Command):
    """
    Write a generic file for heat transfer.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        wall_function : bool
            Specifies whether to include the wall function.
        surface_name_list : List
            The list of surfaces to export.
    """
    _version = '251'
    fluent_name = 'custom-heat-flux'
    _python_name = 'custom_heat_flux'
    argument_names = ['file_name', 'wall_function', 'surface_name_list']
    _child_classes = dict(
        file_name=file_name_1,
        wall_function=wall_function,
        surface_name_list=surface_name_list_2,
    )

class techplot_scalars(StringList, AllowedValuesMixin):
    """
    The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'techplot-scalars'
    _python_name = 'techplot_scalars'

class dx(Command):
    """
    Write an IBM Data Explorer format file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        surfaces : List
            Surface.
        techplot_scalars : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'dx'
    _python_name = 'dx'
    argument_names = ['file_name', 'surfaces', 'techplot_scalars']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces,
        techplot_scalars=techplot_scalars,
    )

class cell_function(StringList, AllowedValuesMixin):
    """
    The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'cell-function'
    _python_name = 'cell_function'

class ensight_gold_parallel_surfaces(Command):
    """
    Write EnSight Gold geometry, velocity and scalar files for surfaces. Fluent will write files suitable for EnSight Parallel.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        binary_format : bool
            Specifies whether to export in binary format.
        surfaces : List
            Surface.
        cell_centered : bool
            Specifies whether export the cell center data values.
        cell_function : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'ensight-gold-parallel-surfaces'
    _python_name = 'ensight_gold_parallel_surfaces'
    argument_names = ['file_name', 'binary_format', 'surfaces', 'cell_centered', 'cell_function']
    _child_classes = dict(
        file_name=file_name_1,
        binary_format=binary_format,
        surfaces=surfaces,
        cell_centered=cell_centered,
        cell_function=cell_function,
    )

class cellzones_1(StringList, AllowedValuesMixin):
    """
    Cell zone name list.
    """
    _version = '251'
    fluent_name = 'cellzones'
    _python_name = 'cellzones'

class ensight_gold_parallel_volume(Command):
    """
    Write EnSight Gold geometry, velocity and scalar files for cell zones and boundaries attached to them. Fluent will write files suitable for EnSight Parallel.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        binary_format : bool
            Specifies whether to export in binary format.
        cellzones : List
            Cell zone name list.
        cell_centered : bool
            Specifies whether export the cell center data values.
        cell_function : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'ensight-gold-parallel-volume'
    _python_name = 'ensight_gold_parallel_volume'
    argument_names = ['file_name', 'binary_format', 'cellzones', 'cell_centered', 'cell_function']
    _child_classes = dict(
        file_name=file_name_1,
        binary_format=binary_format,
        cellzones=cellzones_1,
        cell_centered=cell_centered,
        cell_function=cell_function,
    )

class icemcfd_for_icepak(Command):
    """
    Write a binary ICEMCFD domain file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
    """
    _version = '251'
    fluent_name = 'icemcfd-for-icepak'
    _python_name = 'icemcfd_for_icepak'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )

class fast_mesh(Command):
    """
    Write a FAST/Plot3D unstructured mesh file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
    """
    _version = '251'
    fluent_name = 'fast-mesh'
    _python_name = 'fast_mesh'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )

class fast_solution(Command):
    """
    Write a FAST/Plot3D unstructured solution file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
    """
    _version = '251'
    fluent_name = 'fast-solution'
    _python_name = 'fast_solution'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )

class fast_velocity(Command):
    """
    Write a FAST/Plot3D unstructured vector function file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
    """
    _version = '251'
    fluent_name = 'fast-velocity'
    _python_name = 'fast_velocity'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1,
    )

class wall_function_1(Boolean):
    """
    Specifies whether to write the heat transfer coefficient from wall function.
    """
    _version = '251'
    fluent_name = 'wall-function?'
    _python_name = 'wall_function'

class htc_on_walls(Boolean):
    """
    Specifies whether to write heat transfer coefficient on all the walls.
    """
    _version = '251'
    fluent_name = 'htc-on-walls?'
    _python_name = 'htc_on_walls'

class taitherm(Command):
    """
    Write a TAITherm file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        surface_name_list : List
            Surface.
        wall_function : bool
            Specifies whether to write the heat transfer coefficient from wall function.
        htc_on_walls : bool
            Specifies whether to write heat transfer coefficient on all the walls.
    """
    _version = '251'
    fluent_name = 'taitherm'
    _python_name = 'taitherm'
    argument_names = ['file_name', 'surface_name_list', 'wall_function', 'htc_on_walls']
    _child_classes = dict(
        file_name=file_name_1,
        surface_name_list=surface_name_list_1,
        wall_function=wall_function_1,
        htc_on_walls=htc_on_walls,
    )

class surfaces_1(StringList, AllowedValuesMixin):
    """
    List of surfaces to export.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class fieldview_unstruct(Command):
    """
    Write a Fieldview unstructured combined file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        surfaces : List
            List of surfaces to export.
        cellzones : List
            List of cell zones to export.
        cell_func_domain : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'fieldview-unstruct'
    _python_name = 'fieldview_unstruct'
    argument_names = ['file_name', 'surfaces', 'cellzones', 'cell_func_domain']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces_1,
        cellzones=cellzones,
        cell_func_domain=cell_func_domain,
    )

class fieldview_unstruct_mesh(Command):
    """
    Write a Fieldview unstructured mesh only file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        surfaces : List
            List of surfaces to export.
        cellzones : List
            List of cell zones to export.
        cell_func_domain : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'fieldview-unstruct-mesh'
    _python_name = 'fieldview_unstruct_mesh'
    argument_names = ['file_name', 'surfaces', 'cellzones', 'cell_func_domain']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces_1,
        cellzones=cellzones,
        cell_func_domain=cell_func_domain,
    )

class fieldview_unstruct_data(Command):
    """
    Write a Fieldview unstructured results only file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        surfaces : List
            List of surfaces to export.
        cellzones : List
            List of cell zones to export.
        cell_func_domain : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'fieldview-unstruct-data'
    _python_name = 'fieldview_unstruct_data'
    argument_names = ['file_name', 'surfaces', 'cellzones', 'cell_func_domain']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces_1,
        cellzones=cellzones,
        cell_func_domain=cell_func_domain,
    )

class option(String, AllowedValuesMixin):
    """
    Specifies whether to export results, mesh or combined.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class fieldview_unstruct_surfaces(Command):
    """
    Write a Fieldview unstructured surface mesh, data.
    
    Parameters
    ----------
        option : str
            Specifies whether to export results, mesh or combined.
        file_name : str
            The desired file name to export.
        surfaces : List
            Surface.
        cell_func_domain : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'fieldview-unstruct-surfaces'
    _python_name = 'fieldview_unstruct_surfaces'
    argument_names = ['option', 'file_name', 'surfaces', 'cell_func_domain']
    _child_classes = dict(
        option=option,
        file_name=file_name_1,
        surfaces=surfaces,
        cell_func_domain=cell_func_domain,
    )

class ideas(Command):
    """
    Write an IDEAS universal file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        surfaces : List
            List of surfaces to export.
        structural_analysis : bool
            Specifies whether structural analysis or not.
        write_loads : bool
            Specifies whether to write loads.
        loads : List
            The structural loads type to export.
        cell_func_domain_export : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'ideas'
    _python_name = 'ideas'
    argument_names = ['file_name', 'surfaces', 'structural_analysis', 'write_loads', 'loads', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces_1,
        structural_analysis=structural_analysis,
        write_loads=write_loads,
        loads=loads,
        cell_func_domain_export=cell_func_domain_export,
    )

class bndry_threads(StringList, AllowedValuesMixin):
    """
    Boundary zone name list.
    """
    _version = '251'
    fluent_name = 'bndry-threads'
    _python_name = 'bndry_threads'

class nastran(Command):
    """
    Write a NASTRAN file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        bndry_threads : List
            Boundary zone name list.
        surfaces : List
            Surface.
        structural_analysis : bool
            Specifies whether structural analysis or not.
        write_loads : bool
            Specifies whether to write loads.
        loads : List
            The structural loads type to export.
        cell_func_domain_export : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'nastran'
    _python_name = 'nastran'
    argument_names = ['file_name', 'bndry_threads', 'surfaces', 'structural_analysis', 'write_loads', 'loads', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        bndry_threads=bndry_threads,
        surfaces=surfaces,
        structural_analysis=structural_analysis,
        write_loads=write_loads,
        loads=loads,
        cell_func_domain_export=cell_func_domain_export,
    )

class patran_neutral(Command):
    """
    Write a PATRAN neutral file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        surfaces : List
            Surface.
        structural_analysis : bool
            Specifies whether structural analysis or not.
        write_loads : bool
            Specifies whether to write loads.
        loads : List
            The structural loads type to export.
        cell_func_domain_export : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'patran-neutral'
    _python_name = 'patran_neutral'
    argument_names = ['file_name', 'surfaces', 'structural_analysis', 'write_loads', 'loads', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces,
        structural_analysis=structural_analysis,
        write_loads=write_loads,
        loads=loads,
        cell_func_domain_export=cell_func_domain_export,
    )

class surfaces_2(StringList):
    """
    The list of surfaces to export.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class patran_nodal(Command):
    """
    Write a PATRAN nodal results file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        surfaces : List
            The list of surfaces to export.
        cell_func_domain_export : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'patran-nodal'
    _python_name = 'patran_nodal'
    argument_names = ['file_name', 'surfaces', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces_2,
        cell_func_domain_export=cell_func_domain_export,
    )

class tecplot(Command):
    """
    Write a Tecplot+3DV format file.
    
    Parameters
    ----------
        file_name : str
            The desired file name to export.
        surfaces : List
            Surface.
        cell_func_domain_export : List
            The list of quantities to export.
    """
    _version = '251'
    fluent_name = 'tecplot'
    _python_name = 'tecplot'
    argument_names = ['file_name', 'surfaces', 'cell_func_domain_export']
    _child_classes = dict(
        file_name=file_name_1,
        surfaces=surfaces,
        cell_func_domain_export=cell_func_domain_export,
    )

class outline_view_path(String):
    """
    Export case settings by providing the location of those settings in the Outline View Tree.
     For example, "setup/models/viscous" will export the settings of the viscous turbulence model.
    """
    _version = '251'
    fluent_name = 'outline_view_path'
    _python_name = 'outline_view_path'

class filename(Filename, _InputFile):
    """
    Filename for exported file.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class extension(String, AllowedValuesMixin):
    """
    Extension to export the file.
    """
    _version = '251'
    fluent_name = 'extension'
    _python_name = 'extension'

class outline_view_settings(Command):
    """
    Export case settings by providing the location of those settings in the Outline View tree.
    
    Parameters
    ----------
        outline_view_path : str
            Export case settings by providing the location of those settings in the Outline View Tree.
     For example, "setup/models/viscous" will export the settings of the viscous turbulence model.
        filename : str
            Filename for exported file.
        extension : str
            Extension to export the file.
    """
    _version = '251'
    fluent_name = 'outline-view-settings'
    _python_name = 'outline_view_settings'
    argument_names = ['outline_view_path', 'filename', 'extension']
    _child_classes = dict(
        outline_view_path=outline_view_path,
        filename=filename,
        extension=extension,
    )

class export(Group):
    """
    Export files.
    """
    _version = '251'
    fluent_name = 'export'
    _python_name = 'export'
    child_names = ['sc_def_file_settings', 'settings']
    command_names = ['abaqus', 'mechanical_apdl', 'mechanical_apdl_input', 'ascii', 'avs', 'ensight', 'ensight_gold', 'fieldview', 'fieldview_data', 'gambit', 'cgns', 'custom_heat_flux', 'dx', 'ensight_gold_parallel_surfaces', 'ensight_gold_parallel_volume', 'icemcfd_for_icepak', 'fast_mesh', 'fast_solution', 'fast_velocity', 'taitherm', 'fieldview_unstruct', 'fieldview_unstruct_mesh', 'fieldview_unstruct_data', 'fieldview_unstruct_surfaces', 'ideas', 'nastran', 'patran_neutral', 'patran_nodal', 'tecplot', 'outline_view_settings']
    _child_classes = dict(
        sc_def_file_settings=sc_def_file_settings,
        settings=settings,
        abaqus=abaqus,
        mechanical_apdl=mechanical_apdl,
        mechanical_apdl_input=mechanical_apdl_input,
        ascii=ascii,
        avs=avs,
        ensight=ensight,
        ensight_gold=ensight_gold,
        fieldview=fieldview,
        fieldview_data=fieldview_data,
        gambit=gambit,
        cgns=cgns,
        custom_heat_flux=custom_heat_flux,
        dx=dx,
        ensight_gold_parallel_surfaces=ensight_gold_parallel_surfaces,
        ensight_gold_parallel_volume=ensight_gold_parallel_volume,
        icemcfd_for_icepak=icemcfd_for_icepak,
        fast_mesh=fast_mesh,
        fast_solution=fast_solution,
        fast_velocity=fast_velocity,
        taitherm=taitherm,
        fieldview_unstruct=fieldview_unstruct,
        fieldview_unstruct_mesh=fieldview_unstruct_mesh,
        fieldview_unstruct_data=fieldview_unstruct_data,
        fieldview_unstruct_surfaces=fieldview_unstruct_surfaces,
        ideas=ideas,
        nastran=nastran,
        patran_neutral=patran_neutral,
        patran_nodal=patran_nodal,
        tecplot=tecplot,
        outline_view_settings=outline_view_settings,
    )

class create_zones_from_ccl(Boolean):
    """
    Specifies whether to create zones from the physics data objects.
    """
    _version = '251'
    fluent_name = 'create-zones-from-ccl?'
    _python_name = 'create_zones_from_ccl'

class file_type(String, AllowedValuesMixin):
    """
    The file type.
    """
    _version = '251'
    fluent_name = 'file-type'
    _python_name = 'file_type'

class file_name_1_1(Filename, _InputFile):
    """
    The name of the file to be read.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class read_1(Command):
    """
    Select the file type and import the file.
    
    Parameters
    ----------
        file_type : str
            The file type.
        file_name_1 : str
            The name of the file to be read.
    """
    _version = '251'
    fluent_name = 'read'
    _python_name = 'read'
    argument_names = ['file_type', 'file_name']
    _child_classes = dict(
        file_type=file_type,
        file_name=file_name_1_1,
    )

class report_each_line(Boolean):
    """
    Enable/disable reporting after reading each line.
    """
    _version = '251'
    fluent_name = 'report-each-line?'
    _python_name = 'report_each_line'

class chemkin_report_each_line(Command):
    """
    Choose whether or not to report after reading each line.
    
    Parameters
    ----------
        report_each_line : bool
            Enable/disable reporting after reading each line.
    """
    _version = '251'
    fluent_name = 'chemkin-report-each-line?'
    _python_name = 'chemkin_report_each_line'
    argument_names = ['report_each_line']
    _child_classes = dict(
        report_each_line=report_each_line,
    )

class file_name_1_2(Filename, _InputFile):
    """
    Import FMU file.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class import_fmu(Command):
    """
    Import a FMU file.
    
    Parameters
    ----------
        file_name_1 : str
            Import FMU file.
    """
    _version = '251'
    fluent_name = 'import-fmu'
    _python_name = 'import_fmu'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_2,
    )

class import_(Group):
    """
    Import files.
    """
    _version = '251'
    fluent_name = 'import'
    _python_name = 'import_'
    child_names = ['create_zones_from_ccl']
    command_names = ['read', 'chemkin_report_each_line', 'import_fmu']
    _child_classes = dict(
        create_zones_from_ccl=create_zones_from_ccl,
        read=read_1,
        chemkin_report_each_line=chemkin_report_each_line,
        import_fmu=import_fmu,
    )

class project_filename(Filename, _OutputFile):
    """
    'project_filename' child.
    """
    _version = '251'
    fluent_name = 'project-filename'
    _python_name = 'project_filename'

class new(Command):
    """
    Create New Project.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
    """
    _version = '251'
    fluent_name = 'new'
    _python_name = 'new'
    argument_names = ['project_filename']
    _child_classes = dict(
        project_filename=project_filename,
    )

class project_filename_1(Filename, _InputFile):
    """
    'project_filename' child.
    """
    _version = '251'
    fluent_name = 'project-filename'
    _python_name = 'project_filename'

class load_case(Boolean):
    """
    'load_case' child.
    """
    _version = '251'
    fluent_name = 'load-case'
    _python_name = 'load_case'

class open(Command):
    """
    Open project.
    
    Parameters
    ----------
        project_filename_1 : str
            'project_filename' child.
        load_case : bool
            'load_case' child.
    """
    _version = '251'
    fluent_name = 'open'
    _python_name = 'open'
    argument_names = ['project_filename', 'load_case']
    _child_classes = dict(
        project_filename=project_filename_1,
        load_case=load_case,
    )

class save(Command):
    """
    Save Project.
    """
    _version = '251'
    fluent_name = 'save'
    _python_name = 'save'

class save_as(Command):
    """
    Save As Project.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
    """
    _version = '251'
    fluent_name = 'save-as'
    _python_name = 'save_as'
    argument_names = ['project_filename']
    _child_classes = dict(
        project_filename=project_filename,
    )

class convert_to_managed(Boolean):
    """
    'convert_to_managed' child.
    """
    _version = '251'
    fluent_name = 'convert-to-managed'
    _python_name = 'convert_to_managed'

class save_as_copy(Command):
    """
    Save As Project.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
        convert_to_managed : bool
            'convert_to_managed' child.
    """
    _version = '251'
    fluent_name = 'save-as-copy'
    _python_name = 'save_as_copy'
    argument_names = ['project_filename', 'convert_to_managed']
    _child_classes = dict(
        project_filename=project_filename,
        convert_to_managed=convert_to_managed,
    )

class archive_name(Filename, _OutputFile):
    """
    'archive_name' child.
    """
    _version = '251'
    fluent_name = 'archive-name'
    _python_name = 'archive_name'

class archive(Command):
    """
    Archive Project.
    
    Parameters
    ----------
        archive_name : str
            'archive_name' child.
    """
    _version = '251'
    fluent_name = 'archive'
    _python_name = 'archive'
    argument_names = ['archive_name']
    _child_classes = dict(
        archive_name=archive_name,
    )

class parametric_project(Group):
    """
    'parametric_project' child.
    """
    _version = '251'
    fluent_name = 'parametric-project'
    _python_name = 'parametric_project'
    command_names = ['new', 'open', 'save', 'save_as', 'save_as_copy', 'archive']
    _child_classes = dict(
        new=new,
        open=open,
        save=save,
        save_as=save_as,
        save_as_copy=save_as_copy,
        archive=archive,
    )

class io_mode(String, AllowedValuesMixin):
    """
    CFF I/O mode.
    """
    _version = '251'
    fluent_name = 'io-mode'
    _python_name = 'io_mode'

class compression_level(Integer):
    """
    0 => no compression, 1 => best compression speed; least compression, 9 => best compression ratio, slowetst speed.
    """
    _version = '251'
    fluent_name = 'compression-level'
    _python_name = 'compression_level'

class single_precision_data(Boolean):
    """
    Specifies whether the double-precision solver saves single-precision data when writing CFF data files.
    """
    _version = '251'
    fluent_name = 'single-precision-data?'
    _python_name = 'single_precision_data'

class cffio_options(Group):
    """
    CFF I/O options.
    """
    _version = '251'
    fluent_name = 'cffio-options'
    _python_name = 'cffio_options'
    child_names = ['io_mode', 'compression_level', 'single_precision_data']
    _child_classes = dict(
        io_mode=io_mode,
        compression_level=compression_level,
        single_precision_data=single_precision_data,
    )

class confirm_overwrite(Boolean):
    """
    Specifies whether to confirm attempts to overwrite existing files.
    """
    _version = '251'
    fluent_name = 'confirm-overwrite?'
    _python_name = 'confirm_overwrite'

class exit_on_error(Boolean):
    """
    Specifies whether to exit the when error occurs.
    """
    _version = '251'
    fluent_name = 'exit-on-error?'
    _python_name = 'exit_on_error'

class hide_answer(Boolean):
    """
    'hide_answer' child.
    """
    _version = '251'
    fluent_name = 'hide-answer?'
    _python_name = 'hide_answer'

class redisplay_question(Boolean):
    """
    'redisplay_question' child.
    """
    _version = '251'
    fluent_name = 'redisplay-question?'
    _python_name = 'redisplay_question'

class batch_options(Group):
    """
    The batch options.
    """
    _version = '251'
    fluent_name = 'batch-options'
    _python_name = 'batch_options'
    child_names = ['confirm_overwrite', 'exit_on_error', 'hide_answer', 'redisplay_question']
    _child_classes = dict(
        confirm_overwrite=confirm_overwrite,
        exit_on_error=exit_on_error,
        hide_answer=hide_answer,
        redisplay_question=redisplay_question,
    )

class filename_1(Filename, _InputFile):
    """
    Filename for interpolation.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class cell_zones_1(StringList, AllowedValuesMixin):
    """
    List of cell zones to import.
    """
    _version = '251'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'

class read_data_1(Command):
    """
    Read and interpolate data.
    
    Parameters
    ----------
        filename : str
            Filename for interpolation.
        cell_zones : List
            List of cell zones to import.
    """
    _version = '251'
    fluent_name = 'read-data'
    _python_name = 'read_data'
    argument_names = ['filename', 'cell_zones']
    _child_classes = dict(
        filename=filename_1,
        cell_zones=cell_zones_1,
    )

class filename_1_1(Filename, _OutputFile):
    """
    Filename for interpolation.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class cell_zones_2(StringList, AllowedValuesMixin):
    """
    List of cell zones to export.
    """
    _version = '251'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'

class fields(StringList, AllowedValuesMixin):
    """
    Field to interpolate.
    """
    _version = '251'
    fluent_name = 'fields'
    _python_name = 'fields'

class write_data_1(Command):
    """
    Write data for interpolation.
    
    Parameters
    ----------
        filename_1 : str
            Filename for interpolation.
        cell_zones : List
            List of cell zones to export.
        fields : List
            Field to interpolate.
        binary_format : bool
            Specifies whether to export in binary format.
    """
    _version = '251'
    fluent_name = 'write-data'
    _python_name = 'write_data'
    argument_names = ['filename', 'cell_zones', 'fields', 'binary_format']
    _child_classes = dict(
        filename=filename_1_1,
        cell_zones=cell_zones_2,
        fields=fields,
        binary_format=binary_format,
    )

class interpolate(Group):
    """
    The interpolate object.
    """
    _version = '251'
    fluent_name = 'interpolate'
    _python_name = 'interpolate'
    command_names = ['read_data', 'write_data']
    _child_classes = dict(
        read_data=read_data_1,
        write_data=write_data_1,
    )

class file_name_2(Filename, _OutputFile):
    """
    'file_name' child.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class define_macro(Command):
    """
    Save input to a named macro.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'define-macro'
    _python_name = 'define_macro'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_2,
    )

class macro_filename(Filename, _InputFile):
    """
    'macro_filename' child.
    """
    _version = '251'
    fluent_name = 'macro-filename'
    _python_name = 'macro_filename'

class execute_macro(Command):
    """
    Run a previously defined macro.
    
    Parameters
    ----------
        macro_filename : str
            'macro_filename' child.
    """
    _version = '251'
    fluent_name = 'execute-macro'
    _python_name = 'execute_macro'
    argument_names = ['macro_filename']
    _child_classes = dict(
        macro_filename=macro_filename,
    )

class file_name_1_3(Filename, _InputFile):
    """
    'file_name' child.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class read_macros(Command):
    """
    Read macro definitions from a file.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'read-macros'
    _python_name = 'read_macros'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class file_type_1(String, AllowedValuesMixin):
    """
    'file_type' child.
    """
    _version = '251'
    fluent_name = 'file-type'
    _python_name = 'file_type'

class pdf_file_name(Filename, _InputFile):
    """
    'pdf_file_name' child.
    """
    _version = '251'
    fluent_name = 'pdf-file-name'
    _python_name = 'pdf_file_name'

class lightweight_setup(Boolean):
    """
    'lightweight_setup' child.
    """
    _version = '251'
    fluent_name = 'lightweight-setup?'
    _python_name = 'lightweight_setup'

class read(Command):
    """
    'read' command.
    """
    _version = '251'
    fluent_name = 'read'
    _python_name = 'read'
    argument_names = ['file_type', 'file_name', 'pdf_file_name', 'lightweight_setup']
    _child_classes = dict(
        file_type=file_type_1,
        file_name=file_name_1_3,
        pdf_file_name=pdf_file_name,
        lightweight_setup=lightweight_setup,
    )

class read_case(Command):
    """
    'read_case' command.
    """
    _version = '251'
    fluent_name = 'read-case'
    _python_name = 'read_case'
    argument_names = ['file_name', 'pdf_file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
        pdf_file_name=pdf_file_name,
    )

class read_case_data(Command):
    """
    'read_case_data' command.
    """
    _version = '251'
    fluent_name = 'read-case-data'
    _python_name = 'read_case_data'
    argument_names = ['file_name', 'pdf_file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
        pdf_file_name=pdf_file_name,
    )

class read_case_setting(Command):
    """
    'read_case_setting' command.
    """
    _version = '251'
    fluent_name = 'read-case-setting'
    _python_name = 'read_case_setting'
    argument_names = ['file_name', 'pdf_file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
        pdf_file_name=pdf_file_name,
    )

class read_data(Command):
    """
    'read_data' command.
    """
    _version = '251'
    fluent_name = 'read-data'
    _python_name = 'read_data'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class read_mesh(Command):
    """
    'read_mesh' command.
    """
    _version = '251'
    fluent_name = 'read-mesh'
    _python_name = 'read_mesh'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class filename_2(Filename, _InputFile):
    """
    Path to surface mesh file.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class unit(String, AllowedValuesMixin):
    """
    Unit in which the mesh was created.
    """
    _version = '251'
    fluent_name = 'unit'
    _python_name = 'unit'

class read_surface_mesh(Command):
    """
    Read surface meshes.
    
    Parameters
    ----------
        filename : str
            Path to surface mesh file.
        unit : str
            Unit in which the mesh was created.
    """
    _version = '251'
    fluent_name = 'read-surface-mesh'
    _python_name = 'read_surface_mesh'
    argument_names = ['filename', 'unit']
    _child_classes = dict(
        filename=filename_2,
        unit=unit,
    )

class file_name_list(FilenameList, _InputFile):
    """
    'file_name_list' child.
    """
    _version = '251'
    fluent_name = 'file-name-list'
    _python_name = 'file_name_list'

class read_journal(Command):
    """
    Read a journal file.
    
    Parameters
    ----------
        file_name_list : List
            'file_name_list' child.
    """
    _version = '251'
    fluent_name = 'read-journal'
    _python_name = 'read_journal'
    argument_names = ['file_name_list']
    _child_classes = dict(
        file_name_list=file_name_list,
    )

class start_journal(Command):
    """
    Start recording all input in a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'start-journal'
    _python_name = 'start_journal'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_2,
    )

class file_name_3(Filename, _OutputFile):
    """
    Name of the Python journal file to write.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class start_python_journal(Command):
    """
    Start recording all input in a python file.
    
    Parameters
    ----------
        file_name : str
            Name of the Python journal file to write.
    """
    _version = '251'
    fluent_name = 'start-python-journal'
    _python_name = 'start_python_journal'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_3,
    )

class stop_journal(Command):
    """
    Stop recording input and close the journal file.
    """
    _version = '251'
    fluent_name = 'stop-journal'
    _python_name = 'stop_journal'

class replace_mesh(Command):
    """
    'replace_mesh' command.
    """
    _version = '251'
    fluent_name = 'replace-mesh'
    _python_name = 'replace_mesh'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class write(Command):
    """
    'write' command.
    """
    _version = '251'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['file_type', 'file_name']
    _child_classes = dict(
        file_type=file_type_1,
        file_name=file_name_2,
    )

class write_case(Command):
    """
    'write_case' command.
    """
    _version = '251'
    fluent_name = 'write-case'
    _python_name = 'write_case'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_2,
    )

class write_data(Command):
    """
    'write_data' command.
    """
    _version = '251'
    fluent_name = 'write-data'
    _python_name = 'write_data'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_2,
    )

class write_case_data(Command):
    """
    'write_case_data' command.
    """
    _version = '251'
    fluent_name = 'write-case-data'
    _python_name = 'write_case_data'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_2,
    )

class read_settings(Command):
    """
    Read and set boundary conditions from specified file.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'read-settings'
    _python_name = 'read_settings'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class read_field_functions(Command):
    """
    Read custom field-function definitions from a file.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'read-field-functions'
    _python_name = 'read_field_functions'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class read_injections(Command):
    """
    Read all DPM injections from a file.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'read-injections'
    _python_name = 'read_injections'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class read_profile(Command):
    """
    Read boundary profile data (\\*.prof, \\*.csv). Default is \\*.prof.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'read-profile'
    _python_name = 'read_profile'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class read_pdf(Command):
    """
    Read a PDF file.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'read-pdf'
    _python_name = 'read_pdf'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class read_isat_table(Command):
    """
    Read an ISAT table.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'read-isat-table'
    _python_name = 'read_isat_table'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class show_configuration(Command):
    """
    Display current release and version information.
    """
    _version = '251'
    fluent_name = 'show-configuration'
    _python_name = 'show_configuration'

class stop_macro(Command):
    """
    Stop recording input to a macro.
    """
    _version = '251'
    fluent_name = 'stop-macro'
    _python_name = 'stop_macro'

class start_transcript(Command):
    """
    Start recording input and output in a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'start-transcript'
    _python_name = 'start_transcript'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_2,
    )

class stop_transcript(Command):
    """
    Stop recording input and output and close the transcript file.
    """
    _version = '251'
    fluent_name = 'stop-transcript'
    _python_name = 'stop_transcript'

class reset_defined_derived_quantities(Boolean):
    """
    'reset_defined_derived_quantities' child.
    """
    _version = '251'
    fluent_name = 'reset-defined-derived-quantities?'
    _python_name = 'reset_defined_derived_quantities'

class derived_quantities(StringList, AllowedValuesMixin):
    """
    'derived_quantities' child.
    """
    _version = '251'
    fluent_name = 'derived-quantities'
    _python_name = 'derived_quantities'

class data_file_options(Command):
    """
    Set derived quantities to be written in data file.
    
    Parameters
    ----------
        reset_defined_derived_quantities : bool
            'reset_defined_derived_quantities' child.
        derived_quantities : List
            'derived_quantities' child.
    """
    _version = '251'
    fluent_name = 'data-file-options'
    _python_name = 'data_file_options'
    argument_names = ['reset_defined_derived_quantities', 'derived_quantities']
    _child_classes = dict(
        reset_defined_derived_quantities=reset_defined_derived_quantities,
        derived_quantities=derived_quantities,
    )

class enable(Boolean):
    """
    Enable or disable beta features.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class beta_settings(Command):
    """
    Enable access to beta features in the interface.
    
    Parameters
    ----------
        enable : bool
            Enable or disable beta features.
    """
    _version = '251'
    fluent_name = 'beta-settings'
    _python_name = 'beta_settings'
    argument_names = ['enable']
    _child_classes = dict(
        enable=enable,
    )

class file(Group):
    """
    Import and export several kinds of files. Files that are read include mesh, case, data, profile, Scheme, and journal files. Files that are written include case, data, profile, journal, and transcript files.
    """
    _version = '251'
    fluent_name = 'file'
    _python_name = 'file'
    child_names = ['single_precision_coordinates', 'binary_legacy_files', 'cff_files', 'auto_merge_zones', 'convert_hanging_nodes_during_read', 'async_optimize', 'write_pdat', 'auto_save', 'export', 'import_', 'parametric_project', 'cffio_options', 'batch_options', 'interpolate']
    command_names = ['define_macro', 'execute_macro', 'read_macros', 'read', 'read_case', 'read_case_data', 'read_case_setting', 'read_data', 'read_mesh', 'read_surface_mesh', 'read_journal', 'start_journal', 'start_python_journal', 'stop_journal', 'replace_mesh', 'write', 'write_case', 'write_data', 'write_case_data', 'read_settings', 'read_field_functions', 'read_injections', 'read_profile', 'read_pdf', 'read_isat_table', 'show_configuration', 'stop_macro', 'start_transcript', 'stop_transcript', 'data_file_options', 'beta_settings']
    _child_classes = dict(
        single_precision_coordinates=single_precision_coordinates,
        binary_legacy_files=binary_legacy_files,
        cff_files=cff_files,
        auto_merge_zones=auto_merge_zones,
        convert_hanging_nodes_during_read=convert_hanging_nodes_during_read,
        async_optimize=async_optimize,
        write_pdat=write_pdat,
        auto_save=auto_save,
        export=export,
        import_=import_,
        parametric_project=parametric_project,
        cffio_options=cffio_options,
        batch_options=batch_options,
        interpolate=interpolate,
        define_macro=define_macro,
        execute_macro=execute_macro,
        read_macros=read_macros,
        read=read,
        read_case=read_case,
        read_case_data=read_case_data,
        read_case_setting=read_case_setting,
        read_data=read_data,
        read_mesh=read_mesh,
        read_surface_mesh=read_surface_mesh,
        read_journal=read_journal,
        start_journal=start_journal,
        start_python_journal=start_python_journal,
        stop_journal=stop_journal,
        replace_mesh=replace_mesh,
        write=write,
        write_case=write_case,
        write_data=write_data,
        write_case_data=write_case_data,
        read_settings=read_settings,
        read_field_functions=read_field_functions,
        read_injections=read_injections,
        read_profile=read_profile,
        read_pdf=read_pdf,
        read_isat_table=read_isat_table,
        show_configuration=show_configuration,
        stop_macro=stop_macro,
        start_transcript=start_transcript,
        stop_transcript=stop_transcript,
        data_file_options=data_file_options,
        beta_settings=beta_settings,
    )

class refinement_criteria(String):
    """
    Expression for refinement criterion.
    """
    _version = '251'
    fluent_name = 'refinement-criteria'
    _python_name = 'refinement_criteria'

class coarsening_criteria(String):
    """
    Expression for coarsening criterion.
    """
    _version = '251'
    fluent_name = 'coarsening-criteria'
    _python_name = 'coarsening_criteria'

class manual_refinement_criteria(String):
    """
    Expression for manual refinement criterion.
    """
    _version = '251'
    fluent_name = 'manual-refinement-criteria'
    _python_name = 'manual_refinement_criteria'

class manual_coarsening_criteria(String):
    """
    Expression for manual coarsening criterion.
    """
    _version = '251'
    fluent_name = 'manual-coarsening-criteria'
    _python_name = 'manual_coarsening_criteria'

class adaption_method(String, AllowedValuesMixin):
    """
    The adaption method.
    """
    _version = '251'
    fluent_name = 'adaption-method'
    _python_name = 'adaption_method'

class prismatic_boundary_zones(StringList, AllowedValuesMixin):
    """
    The boundary zones to specify directions for prismatic refinement.
    """
    _version = '251'
    fluent_name = 'prismatic-boundary-zones'
    _python_name = 'prismatic_boundary_zones'

class cell_zones_3(StringList, AllowedValuesMixin):
    """
    Cell zones to be used for marking adaption. An empty list implies that all zones are considered for adaption.
    """
    _version = '251'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'

class dynamic_adaption_frequency(Integer):
    """
    Frequency for dynamic adaption.
    """
    _version = '251'
    fluent_name = 'dynamic-adaption-frequency'
    _python_name = 'dynamic_adaption_frequency'

class verbosity(Integer):
    """
    The adaption verbosity.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class encapsulate_children(Boolean):
    """
    Encapsulate all children of parent cells on the same partition.
    """
    _version = '251'
    fluent_name = 'encapsulate-children?'
    _python_name = 'encapsulate_children'

class maximum_refinement_level(Integer):
    """
    Maximum level of refinement in the mesh.
    """
    _version = '251'
    fluent_name = 'maximum-refinement-level'
    _python_name = 'maximum_refinement_level'

class minimum_edge_length(Real):
    """
    Limit on the minimum effective edge-length of cells in the mesh.
    """
    _version = '251'
    fluent_name = 'minimum-edge-length'
    _python_name = 'minimum_edge_length'

class minimum_cell_quality(Real):
    """
    Limit on the minimum cell orthogonal quality during adaption.
    """
    _version = '251'
    fluent_name = 'minimum-cell-quality'
    _python_name = 'minimum_cell_quality'

class maximum_cell_count(Integer):
    """
    Limit on the maximum number of cells during adaption.
    """
    _version = '251'
    fluent_name = 'maximum-cell-count'
    _python_name = 'maximum_cell_count'

class additional_refinement_layers(Integer):
    """
    The number of additional cell layers for refinement.
    """
    _version = '251'
    fluent_name = 'additional-refinement-layers'
    _python_name = 'additional_refinement_layers'

class prismatic_adaption(Boolean):
    """
    Enable/Disable anisotropic adaption for prismatic cells.
    """
    _version = '251'
    fluent_name = 'prismatic-adaption?'
    _python_name = 'prismatic_adaption'

class prismatic_split_ratio(Real):
    """
    The split ratio for anisotropic refinement of prismatic cells.
    """
    _version = '251'
    fluent_name = 'prismatic-split-ratio'
    _python_name = 'prismatic_split_ratio'

class overset_adapt_dead_cells(Boolean):
    """
    Enables adaption of dead cells in overset meshes.
    """
    _version = '251'
    fluent_name = 'overset-adapt-dead-cells?'
    _python_name = 'overset_adapt_dead_cells'

class enable_1(Boolean):
    """
    'enable' child.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class dynamic_adaption(Command):
    """
    Adapt the mesh during solution.
    
    Parameters
    ----------
        enable : bool
            'enable' child.
    """
    _version = '251'
    fluent_name = 'dynamic-adaption?'
    _python_name = 'dynamic_adaption'
    argument_names = ['enable']
    _child_classes = dict(
        enable=enable_1,
    )

class set(Group):
    """
    The adaption set object.
    """
    _version = '251'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['adaption_method', 'prismatic_boundary_zones', 'cell_zones', 'dynamic_adaption_frequency', 'verbosity', 'encapsulate_children', 'maximum_refinement_level', 'minimum_edge_length', 'minimum_cell_quality', 'maximum_cell_count', 'additional_refinement_layers', 'prismatic_adaption', 'prismatic_split_ratio', 'overset_adapt_dead_cells']
    command_names = ['dynamic_adaption']
    _child_classes = dict(
        adaption_method=adaption_method,
        prismatic_boundary_zones=prismatic_boundary_zones,
        cell_zones=cell_zones_3,
        dynamic_adaption_frequency=dynamic_adaption_frequency,
        verbosity=verbosity,
        encapsulate_children=encapsulate_children,
        maximum_refinement_level=maximum_refinement_level,
        minimum_edge_length=minimum_edge_length,
        minimum_cell_quality=minimum_cell_quality,
        maximum_cell_count=maximum_cell_count,
        additional_refinement_layers=additional_refinement_layers,
        prismatic_adaption=prismatic_adaption,
        prismatic_split_ratio=prismatic_split_ratio,
        overset_adapt_dead_cells=overset_adapt_dead_cells,
        dynamic_adaption=dynamic_adaption,
    )

class enable_2(Command):
    """
    Enable adaption profiling.
    """
    _version = '251'
    fluent_name = 'enable'
    _python_name = 'enable'

class disable(Command):
    """
    Disable adaption profiling.
    """
    _version = '251'
    fluent_name = 'disable'
    _python_name = 'disable'

class print(Command):
    """
    Print adaption profiling results.
    """
    _version = '251'
    fluent_name = 'print'
    _python_name = 'print'

class clear(Command):
    """
    Clear adaption profiling counters.
    """
    _version = '251'
    fluent_name = 'clear'
    _python_name = 'clear'

class profile(Group):
    """
    The adaption profile object.
    """
    _version = '251'
    fluent_name = 'profile'
    _python_name = 'profile'
    command_names = ['enable', 'disable', 'print', 'clear']
    _child_classes = dict(
        enable=enable_2,
        disable=disable,
        print=print,
        clear=clear,
    )

class free_hierarchy(Boolean):
    """
    Delete the adaption hierarchy.
    """
    _version = '251'
    fluent_name = 'free-hierarchy'
    _python_name = 'free_hierarchy'

class option_1(String, AllowedValuesMixin):
    """
    'option' child.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class growth_ratio(Real):
    """
    Growth Ratio.
    """
    _version = '251'
    fluent_name = 'growth-ratio'
    _python_name = 'growth_ratio'

class growth_ratio_refinement(Group):
    """
    'growth_ratio_refinement' child.
    """
    _version = '251'
    fluent_name = 'growth-ratio-refinement'
    _python_name = 'growth_ratio_refinement'
    child_names = ['growth_ratio']
    _child_classes = dict(
        growth_ratio=growth_ratio,
    )

class type(Group):
    """
    'type' child.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'
    child_names = ['option', 'growth_ratio_refinement']
    _child_classes = dict(
        option=option_1,
        growth_ratio_refinement=growth_ratio_refinement,
    )

class layer_count(Integer):
    """
    Layer Count.
    """
    _version = '251'
    fluent_name = 'layer-count'
    _python_name = 'layer_count'

class boundary_list(StringList, AllowedValuesMixin):
    """
    'boundary_list' child.
    """
    _version = '251'
    fluent_name = 'boundary-list'
    _python_name = 'boundary_list'

class refine_mesh(Command):
    """
    Refine the mesh for multiple boundary layers.
    """
    _version = '251'
    fluent_name = 'refine-mesh'
    _python_name = 'refine_mesh'

class multi_layer_refinement(Group):
    """
    The multiple boundary layer refinement object.
    """
    _version = '251'
    fluent_name = 'multi-layer-refinement'
    _python_name = 'multi_layer_refinement'
    child_names = ['type', 'layer_count', 'boundary_list']
    command_names = ['refine_mesh']
    _child_classes = dict(
        type=type,
        layer_count=layer_count,
        boundary_list=boundary_list,
        refine_mesh=refine_mesh,
    )

class reconstruct_geometry(Boolean):
    """
    Enable/Disable geometry based adaption.
    """
    _version = '251'
    fluent_name = 'reconstruct-geometry'
    _python_name = 'reconstruct_geometry'

class geometry(Group):
    """
    The adaption geometry object.
    """
    _version = '251'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    child_names = ['reconstruct_geometry']
    _child_classes = dict(
        reconstruct_geometry=reconstruct_geometry,
    )

class adapt_mesh(Command):
    """
    Adapt the mesh based on set refinement/coarsening criterion.
    """
    _version = '251'
    fluent_name = 'adapt-mesh'
    _python_name = 'adapt_mesh'

class display_adaption_cells(Command):
    """
    Display cells marked for refinement/coarsening.
    """
    _version = '251'
    fluent_name = 'display-adaption-cells'
    _python_name = 'display_adaption_cells'

class list_adaption_cells(Command):
    """
    List the number of cells marked for refinement/coarsening.
    """
    _version = '251'
    fluent_name = 'list-adaption-cells'
    _python_name = 'list_adaption_cells'

class adapt(Group):
    """
    The adaption object.
    """
    _version = '251'
    fluent_name = 'adapt'
    _python_name = 'adapt'
    child_names = ['refinement_criteria', 'coarsening_criteria', 'manual_refinement_criteria', 'manual_coarsening_criteria', 'set', 'profile', 'free_hierarchy', 'multi_layer_refinement', 'geometry']
    command_names = ['adapt_mesh', 'display_adaption_cells', 'list_adaption_cells']
    _child_classes = dict(
        refinement_criteria=refinement_criteria,
        coarsening_criteria=coarsening_criteria,
        manual_refinement_criteria=manual_refinement_criteria,
        manual_coarsening_criteria=manual_coarsening_criteria,
        set=set,
        profile=profile,
        free_hierarchy=free_hierarchy,
        multi_layer_refinement=multi_layer_refinement,
        geometry=geometry,
        adapt_mesh=adapt_mesh,
        display_adaption_cells=display_adaption_cells,
        list_adaption_cells=list_adaption_cells,
    )

class coarsen(Boolean):
    """
    Enable coarsen operations.
    """
    _version = '251'
    fluent_name = 'coarsen?'
    _python_name = 'coarsen'

class refine(Boolean):
    """
    Enable refine operations.
    """
    _version = '251'
    fluent_name = 'refine?'
    _python_name = 'refine'

class swap(Boolean):
    """
    Enable swap operations.
    """
    _version = '251'
    fluent_name = 'swap?'
    _python_name = 'swap'

class move(Boolean):
    """
    Enable move operations.
    """
    _version = '251'
    fluent_name = 'move?'
    _python_name = 'move'

class operations(Group):
    """
    The anisotropic adaption operations object.
    """
    _version = '251'
    fluent_name = 'operations'
    _python_name = 'operations'
    child_names = ['coarsen', 'refine', 'swap', 'move']
    _child_classes = dict(
        coarsen=coarsen,
        refine=refine,
        swap=swap,
        move=move,
    )

class iterations(Integer):
    """
    The number of adaption iterations.
    """
    _version = '251'
    fluent_name = 'iterations'
    _python_name = 'iterations'

class fixed_zones(StringList, AllowedValuesMixin):
    """
    The boundary zones to remain fixed during anisotropic adaption.
    """
    _version = '251'
    fluent_name = 'fixed-zones'
    _python_name = 'fixed_zones'

class indicator_type(String, AllowedValuesMixin):
    """
    'indicator_type' child.
    """
    _version = '251'
    fluent_name = 'indicator-type'
    _python_name = 'indicator_type'

class single_scalar_fn(String, AllowedValuesMixin):
    """
    'single_scalar_fn' child.
    """
    _version = '251'
    fluent_name = 'single-scalar-fn'
    _python_name = 'single_scalar_fn'

class multi_scalar_fn(StringList, AllowedValuesMixin):
    """
    'multi_scalar_fn' child.
    """
    _version = '251'
    fluent_name = 'multi-scalar-fn'
    _python_name = 'multi_scalar_fn'

class indicator(Group):
    """
    The indicator type and variable(s) for anisotropic adaption.
    """
    _version = '251'
    fluent_name = 'indicator'
    _python_name = 'indicator'
    child_names = ['indicator_type', 'single_scalar_fn', 'multi_scalar_fn']
    _child_classes = dict(
        indicator_type=indicator_type,
        single_scalar_fn=single_scalar_fn,
        multi_scalar_fn=multi_scalar_fn,
    )

class target_type(String, AllowedValuesMixin):
    """
    'target_type' child.
    """
    _version = '251'
    fluent_name = 'target-type'
    _python_name = 'target_type'

class number_of_cells(Real):
    """
    'number_of_cells' child.
    """
    _version = '251'
    fluent_name = 'number-of-cells'
    _python_name = 'number_of_cells'

class factor_of_cells(Real):
    """
    'factor_of_cells' child.
    """
    _version = '251'
    fluent_name = 'factor-of-cells'
    _python_name = 'factor_of_cells'

class target(Group):
    """
    The target type and value for anisotropic adaption.
    """
    _version = '251'
    fluent_name = 'target'
    _python_name = 'target'
    child_names = ['target_type', 'number_of_cells', 'factor_of_cells']
    _child_classes = dict(
        target_type=target_type,
        number_of_cells=number_of_cells,
        factor_of_cells=factor_of_cells,
    )

class maximum_anisotropic_ratio(Real):
    """
    The maximum anisotropic ratio for adapted cells.
    """
    _version = '251'
    fluent_name = 'maximum-anisotropic-ratio'
    _python_name = 'maximum_anisotropic_ratio'

class minimum_edge_length_1(Real):
    """
    The target minimum length scale.
    """
    _version = '251'
    fluent_name = 'minimum-edge-length'
    _python_name = 'minimum_edge_length'

class minimum_cell_quality_1(Real):
    """
    The minimum orthogonal quality bound for adapted cells.
    """
    _version = '251'
    fluent_name = 'minimum-cell-quality'
    _python_name = 'minimum_cell_quality'

class adapt_mesh_1(Command):
    """
    Adapt the mesh based on specified anisotropic adaption setup.
    """
    _version = '251'
    fluent_name = 'adapt-mesh'
    _python_name = 'adapt_mesh'

class anisotropic_adaption(Group):
    """
    The anisotropic adaption object.
    """
    _version = '251'
    fluent_name = 'anisotropic-adaption'
    _python_name = 'anisotropic_adaption'
    child_names = ['operations', 'iterations', 'fixed_zones', 'indicator', 'target', 'maximum_anisotropic_ratio', 'minimum_edge_length', 'minimum_cell_quality']
    command_names = ['adapt_mesh']
    _child_classes = dict(
        operations=operations,
        iterations=iterations,
        fixed_zones=fixed_zones,
        indicator=indicator,
        target=target,
        maximum_anisotropic_ratio=maximum_anisotropic_ratio,
        minimum_edge_length=minimum_edge_length_1,
        minimum_cell_quality=minimum_cell_quality_1,
        adapt_mesh=adapt_mesh_1,
    )

class check_before_solve(Boolean):
    """
    Specifies whether to perform various mesh consistency checks before solve.
    """
    _version = '251'
    fluent_name = 'check-before-solve?'
    _python_name = 'check_before_solve'

class check_verbosity(Integer):
    """
    Verbosity output of mesh check and mesh quality. Higher verbosity corresponds to more detailed information.
    """
    _version = '251'
    fluent_name = 'check-verbosity'
    _python_name = 'check_verbosity'

class enhanced_orthogonal_quality(Boolean):
    """
    Enable enhanced orthogonal quality method.
    """
    _version = '251'
    fluent_name = 'enhanced-orthogonal-quality?'
    _python_name = 'enhanced_orthogonal_quality'

class matching_tolerance(Real):
    """
    The normalized tolerance used for finding coincident nodes.
    """
    _version = '251'
    fluent_name = 'matching-tolerance'
    _python_name = 'matching_tolerance'

class cell_deactivate_list(StringList, AllowedValuesMixin):
    """
    Deactivate a cell zone.
    """
    _version = '251'
    fluent_name = 'cell-deactivate-list'
    _python_name = 'cell_deactivate_list'

class deactivate_cell_zone(Command):
    """
    Deactivate cell thread.
    
    Parameters
    ----------
        cell_deactivate_list : List
            Deactivate a cell zone.
    """
    _version = '251'
    fluent_name = 'deactivate-cell-zone'
    _python_name = 'deactivate_cell_zone'
    argument_names = ['cell_deactivate_list']
    _child_classes = dict(
        cell_deactivate_list=cell_deactivate_list,
    )

class cell_zones_4(StringList, AllowedValuesMixin):
    """
    Delete a cell zone.
    """
    _version = '251'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'

class delete_cell_zone(Command):
    """
    Delete a cell thread.
    
    Parameters
    ----------
        cell_zones : List
            Delete a cell zone.
    """
    _version = '251'
    fluent_name = 'delete-cell-zone'
    _python_name = 'delete_cell_zone'
    argument_names = ['cell_zones']
    _child_classes = dict(
        cell_zones=cell_zones_4,
    )

class cell_zone_name(String, AllowedValuesMixin):
    """
    The cell zone name.
    """
    _version = '251'
    fluent_name = 'cell-zone-name'
    _python_name = 'cell_zone_name'

class translate_1(Boolean):
    """
    Specifies whether copied zone should be translated (#t) or rotated (#f).
    """
    _version = '251'
    fluent_name = 'translate?'
    _python_name = 'translate'

class rotation_angle(Real):
    """
    'rotation_angle' child.
    """
    _version = '251'
    fluent_name = 'rotation-angle'
    _python_name = 'rotation_angle'

class offset(RealList):
    """
    'offset' child.
    """
    _version = '251'
    fluent_name = 'offset'
    _python_name = 'offset'

class axis(RealList):
    """
    'axis' child.
    """
    _version = '251'
    fluent_name = 'axis'
    _python_name = 'axis'

class copy_move_cell_zone(Command):
    """
    Copy and translate or rotate a cell zone.
    
    Parameters
    ----------
        cell_zone_name : str
            The cell zone name.
        translate : bool
            Specifies whether copied zone should be translated (#t) or rotated (#f).
        rotation_angle : real
            'rotation_angle' child.
        offset : List
            'offset' child.
        axis : List
            'axis' child.
    """
    _version = '251'
    fluent_name = 'copy-move-cell-zone'
    _python_name = 'copy_move_cell_zone'
    argument_names = ['cell_zone_name', 'translate', 'rotation_angle', 'offset', 'axis']
    _child_classes = dict(
        cell_zone_name=cell_zone_name,
        translate=translate_1,
        rotation_angle=rotation_angle,
        offset=offset,
        axis=axis,
    )

class cell_zones_5(StringList, AllowedValuesMixin):
    """
    Names or IDs of cell zones to be copied. If an empty list is given, all active cell zones will be copied.
    """
    _version = '251'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'

class translate_2(Boolean):
    """
    Specifies whether the copying is translational or rotational.
    """
    _version = '251'
    fluent_name = 'translate?'
    _python_name = 'translate'

class offsets(RealList):
    """
    The components of each offset vector for translational copying.
    """
    _version = '251'
    fluent_name = 'offsets'
    _python_name = 'offsets'

class origin(RealList):
    """
    The components of the origin vector for rotational copying.
    """
    _version = '251'
    fluent_name = 'origin'
    _python_name = 'origin'

class axis_1(RealList):
    """
    The components of the axis vector for rotational copying.
    """
    _version = '251'
    fluent_name = 'axis'
    _python_name = 'axis'

class angles(RealList):
    """
    The angular offsets for rotational copying.
    """
    _version = '251'
    fluent_name = 'angles'
    _python_name = 'angles'

class copy_cell_zones_by_offsets(Command):
    """
    Copy cell zones by specifying absolute translational or rotational offsets.
    
    Parameters
    ----------
        cell_zones : List
            Names or IDs of cell zones to be copied. If an empty list is given, all active cell zones will be copied.
        translate : bool
            Specifies whether the copying is translational or rotational.
        offsets : List
            The components of each offset vector for translational copying.
        origin : List
            The components of the origin vector for rotational copying.
        axis : List
            The components of the axis vector for rotational copying.
        angles : List
            The angular offsets for rotational copying.
    """
    _version = '251'
    fluent_name = 'copy-cell-zones-by-offsets'
    _python_name = 'copy_cell_zones_by_offsets'
    argument_names = ['cell_zones', 'translate', 'offsets', 'origin', 'axis', 'angles']
    _child_classes = dict(
        cell_zones=cell_zones_5,
        translate=translate_2,
        offsets=offsets,
        origin=origin,
        axis=axis_1,
        angles=angles,
    )

class ncopies(Integer):
    """
    How many copies to make.
    """
    _version = '251'
    fluent_name = 'ncopies'
    _python_name = 'ncopies'

class offset_1(RealList):
    """
    The components of the incremental offset vector for translational copying.
    """
    _version = '251'
    fluent_name = 'offset'
    _python_name = 'offset'

class angle(Real):
    """
    The incremental angular offset for rotational copying.
    """
    _version = '251'
    fluent_name = 'angle'
    _python_name = 'angle'

class copy_cell_zones_by_delta(Command):
    """
    Copy cell zones by specifying an incremental translational or rotational offset.
    
    Parameters
    ----------
        cell_zones : List
            Names or IDs of cell zones to be copied. If an empty list is given, all active cell zones will be copied.
        translate : bool
            Specifies whether the copying is translational or rotational.
        ncopies : int
            How many copies to make.
        offset : List
            The components of the incremental offset vector for translational copying.
        origin : List
            The components of the origin vector for rotational copying.
        axis : List
            The components of the axis vector for rotational copying.
        angle : real
            The incremental angular offset for rotational copying.
    """
    _version = '251'
    fluent_name = 'copy-cell-zones-by-delta'
    _python_name = 'copy_cell_zones_by_delta'
    argument_names = ['cell_zones', 'translate', 'ncopies', 'offset', 'origin', 'axis', 'angle']
    _child_classes = dict(
        cell_zones=cell_zones_5,
        translate=translate_2,
        ncopies=ncopies,
        offset=offset_1,
        origin=origin,
        axis=axis_1,
        angle=angle,
    )

class list_zones(Command):
    """
    List zone IDs, types, kinds, and names.
    """
    _version = '251'
    fluent_name = 'list-zones'
    _python_name = 'list_zones'

class face_zone(String, AllowedValuesMixin):
    """
    The zone name.
    """
    _version = '251'
    fluent_name = 'face-zone'
    _python_name = 'face_zone'

class distance_delta(RealList):
    """
    'distance_delta' child.
    """
    _version = '251'
    fluent_name = 'distance-delta'
    _python_name = 'distance_delta'

class extrude_face_zone_delta(Command):
    """
    Extrude a face thread a specified distance based on a list of deltas.
    
    Parameters
    ----------
        face_zone : str
            The zone name.
        distance_delta : List
            'distance_delta' child.
    """
    _version = '251'
    fluent_name = 'extrude-face-zone-delta'
    _python_name = 'extrude_face_zone_delta'
    argument_names = ['face_zone', 'distance_delta']
    _child_classes = dict(
        face_zone=face_zone,
        distance_delta=distance_delta,
    )

class normal_distance(Real):
    """
    'normal_distance' child.
    """
    _version = '251'
    fluent_name = 'normal-distance'
    _python_name = 'normal_distance'

class parametric_coordinates(RealList):
    """
    'parametric_coordinates' child.
    """
    _version = '251'
    fluent_name = 'parametric-coordinates'
    _python_name = 'parametric_coordinates'

class extrude_face_zone_para(Command):
    """
    Extrude a face thread a specified distance based on a distance and a list of parametric locations between 0 and 1 (eg. 0 0.2 0.4 0.8 1.0).
    
    Parameters
    ----------
        face_zone : str
            The zone name.
        normal_distance : real
            'normal_distance' child.
        parametric_coordinates : List
            'parametric_coordinates' child.
    """
    _version = '251'
    fluent_name = 'extrude-face-zone-para'
    _python_name = 'extrude_face_zone_para'
    argument_names = ['face_zone', 'normal_distance', 'parametric_coordinates']
    _child_classes = dict(
        face_zone=face_zone,
        normal_distance=normal_distance,
        parametric_coordinates=parametric_coordinates,
    )

class zone_names(StringList, AllowedValuesMixin):
    """
    Merge duplicate faces and nodes of zones in list.
    """
    _version = '251'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'

class zone_name_1(String):
    """
    'zone_name' child.
    """
    _version = '251'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'

class fuse_face_zones(Command):
    """
    Attempt to fuse zones by removing duplicate faces and nodes.
    
    Parameters
    ----------
        zone_names : List
            Merge duplicate faces and nodes of zones in list.
        zone_name : str
            'zone_name' child.
    """
    _version = '251'
    fluent_name = 'fuse-face-zones'
    _python_name = 'fuse_face_zones'
    argument_names = ['zone_names', 'zone_name']
    _child_classes = dict(
        zone_names=zone_names,
        zone_name=zone_name_1,
    )

class zone_names_1(StringList, AllowedValuesMixin):
    """
    Scale specified cell zones.
    """
    _version = '251'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'

class scale_1(RealList):
    """
    'scale' child.
    """
    _version = '251'
    fluent_name = 'scale'
    _python_name = 'scale'

class scale_zone(Command):
    """
    Scale nodal coordinates of input cell zones.
    
    Parameters
    ----------
        zone_names : List
            Scale specified cell zones.
        scale : List
            'scale' child.
    """
    _version = '251'
    fluent_name = 'scale-zone'
    _python_name = 'scale_zone'
    argument_names = ['zone_names', 'scale']
    _child_classes = dict(
        zone_names=zone_names_1,
        scale=scale_1,
    )

class zone_names_2(StringList, AllowedValuesMixin):
    """
    Rotate specified cell zones.
    """
    _version = '251'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'

class origin_1(RealList):
    """
    'origin' child.
    """
    _version = '251'
    fluent_name = 'origin'
    _python_name = 'origin'

class rotate_zone(Command):
    """
    Rotate nodal coordinates of input cell zones.
    
    Parameters
    ----------
        zone_names : List
            Rotate specified cell zones.
        rotation_angle : real
            'rotation_angle' child.
        origin : List
            'origin' child.
        axis : List
            'axis' child.
    """
    _version = '251'
    fluent_name = 'rotate-zone'
    _python_name = 'rotate_zone'
    argument_names = ['zone_names', 'rotation_angle', 'origin', 'axis']
    _child_classes = dict(
        zone_names=zone_names_2,
        rotation_angle=rotation_angle,
        origin=origin_1,
        axis=axis,
    )

class zone_names_3(StringList, AllowedValuesMixin):
    """
    Translate specified cell zones.
    """
    _version = '251'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'

class translate_zone(Command):
    """
    Translate nodal coordinates of input cell zones.
    
    Parameters
    ----------
        zone_names : List
            Translate specified cell zones.
        offset : List
            'offset' child.
    """
    _version = '251'
    fluent_name = 'translate-zone'
    _python_name = 'translate_zone'
    argument_names = ['zone_names', 'offset']
    _child_classes = dict(
        zone_names=zone_names_3,
        offset=offset,
    )

class zone_names_4(StringList, AllowedValuesMixin):
    """
    Zone name list.
    """
    _version = '251'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'

class merge_zones(Command):
    """
    Merge zones of the same type and condition into one.
    
    Parameters
    ----------
        zone_names : List
            Zone name list.
    """
    _version = '251'
    fluent_name = 'merge-zones'
    _python_name = 'merge_zones'
    argument_names = ['zone_names']
    _child_classes = dict(
        zone_names=zone_names_4,
    )

class zone_1_name(String, AllowedValuesMixin):
    """
    The zone name.
    """
    _version = '251'
    fluent_name = 'zone-1-name'
    _python_name = 'zone_1_name'

class zone_2_name(String):
    """
    'zone_2_name' child.
    """
    _version = '251'
    fluent_name = 'zone-2-name'
    _python_name = 'zone_2_name'

class interpolate_1(Boolean):
    """
    'interpolate' child.
    """
    _version = '251'
    fluent_name = 'interpolate?'
    _python_name = 'interpolate'

class replace_zone(Command):
    """
    Replace a cell zone.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
        zone_1_name : str
            The zone name.
        zone_2_name : str
            'zone_2_name' child.
        interpolate : bool
            'interpolate' child.
    """
    _version = '251'
    fluent_name = 'replace-zone'
    _python_name = 'replace_zone'
    argument_names = ['file_name', 'zone_1_name', 'zone_2_name', 'interpolate']
    _child_classes = dict(
        file_name=file_name_1_3,
        zone_1_name=zone_1_name,
        zone_2_name=zone_2_name,
        interpolate=interpolate_1,
    )

class append_mesh(Command):
    """
    Append new mesh.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'append-mesh'
    _python_name = 'append_mesh'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class append_mesh_data(Command):
    """
    Append new mesh with data.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'append-mesh-data'
    _python_name = 'append_mesh_data'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class cell_zone_name_1(String, AllowedValuesMixin):
    """
    The zone name.
    """
    _version = '251'
    fluent_name = 'cell-zone-name'
    _python_name = 'cell_zone_name'

class register(String):
    """
    'register' child.
    """
    _version = '251'
    fluent_name = 'register'
    _python_name = 'register'

class move_faces(Boolean):
    """
    'move_faces' child.
    """
    _version = '251'
    fluent_name = 'move-faces?'
    _python_name = 'move_faces'

class sep_cell_zone_mark(Command):
    """
    Separate a cell zone based on cell marking.
    
    Parameters
    ----------
        cell_zone_name : str
            The zone name.
        register : str
            'register' child.
        move_faces : bool
            'move_faces' child.
    """
    _version = '251'
    fluent_name = 'sep-cell-zone-mark'
    _python_name = 'sep_cell_zone_mark'
    argument_names = ['cell_zone_name', 'register', 'move_faces']
    _child_classes = dict(
        cell_zone_name=cell_zone_name_1,
        register=register,
        move_faces=move_faces,
    )

class move_cells(Boolean):
    """
    'move_cells' child.
    """
    _version = '251'
    fluent_name = 'move-cells?'
    _python_name = 'move_cells'

class sep_cell_zone_region(Command):
    """
    Separate a cell zone based on contiguous regions.
    
    Parameters
    ----------
        cell_zone_name : str
            The zone name.
        move_cells : bool
            'move_cells' child.
    """
    _version = '251'
    fluent_name = 'sep-cell-zone-region'
    _python_name = 'sep_cell_zone_region'
    argument_names = ['cell_zone_name', 'move_cells']
    _child_classes = dict(
        cell_zone_name=cell_zone_name_1,
        move_cells=move_cells,
    )

class face_zone_name(String, AllowedValuesMixin):
    """
    The zone name.
    """
    _version = '251'
    fluent_name = 'face-zone-name'
    _python_name = 'face_zone_name'

class angle_1(Real):
    """
    'angle' child.
    """
    _version = '251'
    fluent_name = 'angle'
    _python_name = 'angle'

class sep_face_zone_angle(Command):
    """
    Separate a face zone based on significant angle.
    
    Parameters
    ----------
        face_zone_name : str
            The zone name.
        angle : real
            'angle' child.
        move_faces : bool
            'move_faces' child.
    """
    _version = '251'
    fluent_name = 'sep-face-zone-angle'
    _python_name = 'sep_face_zone_angle'
    argument_names = ['face_zone_name', 'angle', 'move_faces']
    _child_classes = dict(
        face_zone_name=face_zone_name,
        angle=angle_1,
        move_faces=move_faces,
    )

class sep_face_zone_face(Command):
    """
    Separate each face in a zone into unique zone.
    
    Parameters
    ----------
        face_zone_name : str
            The zone name.
        move_faces : bool
            'move_faces' child.
    """
    _version = '251'
    fluent_name = 'sep-face-zone-face'
    _python_name = 'sep_face_zone_face'
    argument_names = ['face_zone_name', 'move_faces']
    _child_classes = dict(
        face_zone_name=face_zone_name,
        move_faces=move_faces,
    )

class register_name(String):
    """
    'register_name' child.
    """
    _version = '251'
    fluent_name = 'register-name'
    _python_name = 'register_name'

class sep_face_zone_mark(Command):
    """
    Separate a face zone based on cell marking.
    
    Parameters
    ----------
        face_zone_name : str
            The zone name.
        register_name : str
            'register_name' child.
        move_faces : bool
            'move_faces' child.
    """
    _version = '251'
    fluent_name = 'sep-face-zone-mark'
    _python_name = 'sep_face_zone_mark'
    argument_names = ['face_zone_name', 'register_name', 'move_faces']
    _child_classes = dict(
        face_zone_name=face_zone_name,
        register_name=register_name,
        move_faces=move_faces,
    )

class sep_face_zone_region(Command):
    """
    Separate a face zone based on contiguous regions.
    
    Parameters
    ----------
        face_zone_name : str
            The zone name.
        move_faces : bool
            'move_faces' child.
    """
    _version = '251'
    fluent_name = 'sep-face-zone-region'
    _python_name = 'sep_face_zone_region'
    argument_names = ['face_zone_name', 'move_faces']
    _child_classes = dict(
        face_zone_name=face_zone_name,
        move_faces=move_faces,
    )

class zone_name_2(String, AllowedValuesMixin):
    """
    The zone name.
    """
    _version = '251'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'

class new_name(String):
    """
    'new_name' child.
    """
    _version = '251'
    fluent_name = 'new-name'
    _python_name = 'new_name'

class zone_name(Command):
    """
    Give a zone a new name.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
        new_name : str
            'new_name' child.
    """
    _version = '251'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'
    argument_names = ['zone_name', 'new_name']
    _child_classes = dict(
        zone_name=zone_name_2,
        new_name=new_name,
    )

class zone_name_3(String, AllowedValuesMixin):
    """
    The fluid zone name.
    """
    _version = '251'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'

class domain(String, AllowedValuesMixin):
    """
    'domain' child.
    """
    _version = '251'
    fluent_name = 'domain'
    _python_name = 'domain'

class new_phase(Integer, AllowedValuesMixin):
    """
    'new_phase' child.
    """
    _version = '251'
    fluent_name = 'new-phase'
    _python_name = 'new_phase'

class change_zone_state(Command):
    """
    Change the realgas material state for a zone.
    
    Parameters
    ----------
        zone_name : str
            The fluid zone name.
        domain : str
            'domain' child.
        new_phase : int
            'new_phase' child.
    """
    _version = '251'
    fluent_name = 'change-zone-state'
    _python_name = 'change_zone_state'
    argument_names = ['zone_name', 'domain', 'new_phase']
    _child_classes = dict(
        zone_name=zone_name_3,
        domain=domain,
        new_phase=new_phase,
    )

class zone_name_4(String, AllowedValuesMixin):
    """
    Id/name of zone to convert to periodic.
    """
    _version = '251'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'

class shadow_zone_name(String, AllowedValuesMixin):
    """
    Id/name of zone to convert to shadow.
    """
    _version = '251'
    fluent_name = 'shadow-zone-name'
    _python_name = 'shadow_zone_name'

class rotate_periodic(Boolean):
    """
    'rotate_periodic' child.
    """
    _version = '251'
    fluent_name = 'rotate-periodic?'
    _python_name = 'rotate_periodic'

class create(Boolean):
    """
    'create' child.
    """
    _version = '251'
    fluent_name = 'create?'
    _python_name = 'create'

class auto_translation(Boolean):
    """
    'auto_translation' child.
    """
    _version = '251'
    fluent_name = 'auto-translation?'
    _python_name = 'auto_translation'

class direction(RealList):
    """
    'direction' child.
    """
    _version = '251'
    fluent_name = 'direction'
    _python_name = 'direction'

class make_periodic(Command):
    """
    Attempt to establish conformal periodic face zone connectivity.
    
    Parameters
    ----------
        zone_name : str
            Id/name of zone to convert to periodic.
        shadow_zone_name : str
            Id/name of zone to convert to shadow.
        rotate_periodic : bool
            'rotate_periodic' child.
        create : bool
            'create' child.
        auto_translation : bool
            'auto_translation' child.
        direction : List
            'direction' child.
    """
    _version = '251'
    fluent_name = 'make-periodic'
    _python_name = 'make_periodic'
    argument_names = ['zone_name', 'shadow_zone_name', 'rotate_periodic', 'create', 'auto_translation', 'direction']
    _child_classes = dict(
        zone_name=zone_name_4,
        shadow_zone_name=shadow_zone_name,
        rotate_periodic=rotate_periodic,
        create=create,
        auto_translation=auto_translation,
        direction=direction,
    )

class periodic_method(String, AllowedValuesMixin):
    """
    Method for creating periodic boundary.
    """
    _version = '251'
    fluent_name = 'periodic-method'
    _python_name = 'periodic_method'

class interface_name(String):
    """
    The name for this periodic interface.
    """
    _version = '251'
    fluent_name = 'interface-name'
    _python_name = 'interface_name'

class rotate_periodic_1(Boolean):
    """
    Rotational or tranlational periodic boundary.
    """
    _version = '251'
    fluent_name = 'rotate-periodic?'
    _python_name = 'rotate_periodic'

class new_origin(Boolean):
    """
    Use a new origin instead of the default origin.
    """
    _version = '251'
    fluent_name = 'new-origin?'
    _python_name = 'new_origin'

class origin_2(RealList):
    """
    User specified origin of rotation.
    """
    _version = '251'
    fluent_name = 'origin'
    _python_name = 'origin'

class new_direction(Boolean):
    """
    Use a new rotational axis/direction instead of the default one.
    """
    _version = '251'
    fluent_name = 'new-direction?'
    _python_name = 'new_direction'

class direction_1(RealList):
    """
    User specified axis/direction of rotation.
    """
    _version = '251'
    fluent_name = 'direction'
    _python_name = 'direction'

class auto_offset(Boolean):
    """
    Automatically calculate periodic offset.
    """
    _version = '251'
    fluent_name = 'auto-offset?'
    _python_name = 'auto_offset'

class angle_offset(Real):
    """
    Angle of rotation.
    """
    _version = '251'
    fluent_name = 'angle-offset'
    _python_name = 'angle_offset'

class trans_offset(RealList):
    """
    Translation offset vector.
    """
    _version = '251'
    fluent_name = 'trans-offset'
    _python_name = 'trans_offset'

class create_periodic(Boolean):
    """
    Create periodic boundary.
    """
    _version = '251'
    fluent_name = 'create-periodic?'
    _python_name = 'create_periodic'

class create_matching(Boolean):
    """
    Create matching interface.
    """
    _version = '251'
    fluent_name = 'create-matching?'
    _python_name = 'create_matching'

class create_periodic_interface(Command):
    """
    Create a conformal or non-conformal periodic interface.
    
    Parameters
    ----------
        periodic_method : str
            Method for creating periodic boundary.
        interface_name : str
            The name for this periodic interface.
        zone_name : str
            Id/name of zone to convert to periodic.
        shadow_zone_name : str
            Id/name of zone to convert to shadow.
        rotate_periodic : bool
            Rotational or tranlational periodic boundary.
        new_origin : bool
            Use a new origin instead of the default origin.
        origin : List
            User specified origin of rotation.
        new_direction : bool
            Use a new rotational axis/direction instead of the default one.
        direction : List
            User specified axis/direction of rotation.
        auto_offset : bool
            Automatically calculate periodic offset.
        angle_offset : real
            Angle of rotation.
        trans_offset : List
            Translation offset vector.
        create_periodic : bool
            Create periodic boundary.
        create_matching : bool
            Create matching interface.
    """
    _version = '251'
    fluent_name = 'create-periodic-interface'
    _python_name = 'create_periodic_interface'
    argument_names = ['periodic_method', 'interface_name', 'zone_name', 'shadow_zone_name', 'rotate_periodic', 'new_origin', 'origin', 'new_direction', 'direction', 'auto_offset', 'angle_offset', 'trans_offset', 'create_periodic', 'create_matching']
    _child_classes = dict(
        periodic_method=periodic_method,
        interface_name=interface_name,
        zone_name=zone_name_4,
        shadow_zone_name=shadow_zone_name,
        rotate_periodic=rotate_periodic_1,
        new_origin=new_origin,
        origin=origin_2,
        new_direction=new_direction,
        direction=direction_1,
        auto_offset=auto_offset,
        angle_offset=angle_offset,
        trans_offset=trans_offset,
        create_periodic=create_periodic,
        create_matching=create_matching,
    )

class periodic_zone_name(String, AllowedValuesMixin):
    """
    Id/name of periodic zone to slit.
    """
    _version = '251'
    fluent_name = 'periodic-zone-name'
    _python_name = 'periodic_zone_name'

class slit_periodic_1(Boolean):
    """
    'slit_periodic' child.
    """
    _version = '251'
    fluent_name = 'slit-periodic?'
    _python_name = 'slit_periodic'

class slit_periodic(Command):
    """
    Slit a periodic zone into two symmetry zones.
    
    Parameters
    ----------
        periodic_zone_name : str
            Id/name of periodic zone to slit.
        slit_periodic : bool
            'slit_periodic' child.
    """
    _version = '251'
    fluent_name = 'slit-periodic'
    _python_name = 'slit_periodic'
    argument_names = ['periodic_zone_name', 'slit_periodic']
    _child_classes = dict(
        periodic_zone_name=periodic_zone_name,
        slit_periodic=slit_periodic_1,
    )

class zone_names_5(StringList, AllowedValuesMixin):
    """
    Zone id/name.
    """
    _version = '251'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'

class new_type(String, AllowedValuesMixin):
    """
    Give new zone type.
    """
    _version = '251'
    fluent_name = 'new-type'
    _python_name = 'new_type'

class zone_type(Command):
    """
    Set a zone's type.
    
    Parameters
    ----------
        zone_names : List
            Zone id/name.
        new_type : str
            Give new zone type.
    """
    _version = '251'
    fluent_name = 'zone-type'
    _python_name = 'zone_type'
    argument_names = ['zone_names', 'new_type']
    _child_classes = dict(
        zone_names=zone_names_5,
        new_type=new_type,
    )

class cellids(IntegerList):
    """
    Provide a list of cell ids.
    """
    _version = '251'
    fluent_name = 'cellids'
    _python_name = 'cellids'

class augment(Boolean):
    """
    Augment list of cells to meet nunerics requirement.
    """
    _version = '251'
    fluent_name = 'augment?'
    _python_name = 'augment'

class del_cell_by_id(Command):
    """
    Delete cells based on cell ids.
    
    Parameters
    ----------
        cellids : List
            Provide a list of cell ids.
        augment : bool
            Augment list of cells to meet nunerics requirement.
    """
    _version = '251'
    fluent_name = 'del-cell-by-id'
    _python_name = 'del_cell_by_id'
    argument_names = ['cellids', 'augment']
    _child_classes = dict(
        cellids=cellids,
        augment=augment,
    )

class register_1(String):
    """
    Provide the id or name of a register.
    """
    _version = '251'
    fluent_name = 'register'
    _python_name = 'register'

class del_cell_by_mark(Command):
    """
    Delete cells based on a cell register.
    
    Parameters
    ----------
        register : str
            Provide the id or name of a register.
        augment : bool
            Augment list of cells to meet nunerics requirement.
    """
    _version = '251'
    fluent_name = 'del-cell-by-mark'
    _python_name = 'del_cell_by_mark'
    argument_names = ['register', 'augment']
    _child_classes = dict(
        register=register_1,
        augment=augment,
    )

class modify_zones(Group):
    """
    The modify zones object.
    """
    _version = '251'
    fluent_name = 'modify-zones'
    _python_name = 'modify_zones'
    command_names = ['deactivate_cell_zone', 'delete_cell_zone', 'copy_move_cell_zone', 'copy_cell_zones_by_offsets', 'copy_cell_zones_by_delta', 'list_zones', 'extrude_face_zone_delta', 'extrude_face_zone_para', 'fuse_face_zones', 'scale_zone', 'rotate_zone', 'translate_zone', 'merge_zones', 'replace_zone', 'append_mesh', 'append_mesh_data', 'sep_cell_zone_mark', 'sep_cell_zone_region', 'sep_face_zone_angle', 'sep_face_zone_face', 'sep_face_zone_mark', 'sep_face_zone_region', 'zone_name', 'change_zone_state', 'make_periodic', 'create_periodic_interface', 'slit_periodic', 'zone_type', 'del_cell_by_id', 'del_cell_by_mark']
    _child_classes = dict(
        deactivate_cell_zone=deactivate_cell_zone,
        delete_cell_zone=delete_cell_zone,
        copy_move_cell_zone=copy_move_cell_zone,
        copy_cell_zones_by_offsets=copy_cell_zones_by_offsets,
        copy_cell_zones_by_delta=copy_cell_zones_by_delta,
        list_zones=list_zones,
        extrude_face_zone_delta=extrude_face_zone_delta,
        extrude_face_zone_para=extrude_face_zone_para,
        fuse_face_zones=fuse_face_zones,
        scale_zone=scale_zone,
        rotate_zone=rotate_zone,
        translate_zone=translate_zone,
        merge_zones=merge_zones,
        replace_zone=replace_zone,
        append_mesh=append_mesh,
        append_mesh_data=append_mesh_data,
        sep_cell_zone_mark=sep_cell_zone_mark,
        sep_cell_zone_region=sep_cell_zone_region,
        sep_face_zone_angle=sep_face_zone_angle,
        sep_face_zone_face=sep_face_zone_face,
        sep_face_zone_mark=sep_face_zone_mark,
        sep_face_zone_region=sep_face_zone_region,
        zone_name=zone_name,
        change_zone_state=change_zone_state,
        make_periodic=make_periodic,
        create_periodic_interface=create_periodic_interface,
        slit_periodic=slit_periodic,
        zone_type=zone_type,
        del_cell_by_id=del_cell_by_id,
        del_cell_by_mark=del_cell_by_mark,
    )

class show_periodic_shadow_zones(Boolean):
    """
    Option to show periodic shadow zones in user interface.
    """
    _version = '251'
    fluent_name = 'show-periodic-shadow-zones?'
    _python_name = 'show_periodic_shadow_zones'

class band_width(Command):
    """
    Print cell bandwidth.
    """
    _version = '251'
    fluent_name = 'band-width'
    _python_name = 'band_width'

class reorder_domain(Command):
    """
    Reorder cells and faces by reverse Cuthill-McKee.
    """
    _version = '251'
    fluent_name = 'reorder-domain'
    _python_name = 'reorder_domain'

class reorder_zones(Command):
    """
    Reorder zones by partition, type, and id.
    """
    _version = '251'
    fluent_name = 'reorder-zones'
    _python_name = 'reorder_zones'

class reorder(Group):
    """
    The reorder domain object.
    """
    _version = '251'
    fluent_name = 'reorder'
    _python_name = 'reorder'
    command_names = ['band_width', 'reorder_domain', 'reorder_zones']
    _child_classes = dict(
        band_width=band_width,
        reorder_domain=reorder_domain,
        reorder_zones=reorder_zones,
    )

class allow_repair_at_boundaries(Boolean):
    """
    Enable/disable adjustment of boundary nodes during mesh repair.
    """
    _version = '251'
    fluent_name = 'allow-repair-at-boundaries?'
    _python_name = 'allow_repair_at_boundaries'

class include_local_polyhedra_conversion_in_repair(Boolean):
    """
    Enable/disable local conversion to polyhedra during mesh repair.
    """
    _version = '251'
    fluent_name = 'include-local-polyhedra-conversion-in-repair?'
    _python_name = 'include_local_polyhedra_conversion_in_repair'

class repair_poor_elements(Command):
    """
    Report invalid and poor quality elements.
    """
    _version = '251'
    fluent_name = 'repair-poor-elements'
    _python_name = 'repair_poor_elements'

class improve_quality(Command):
    """
    Tries to improve the mesh quality.
    """
    _version = '251'
    fluent_name = 'improve-quality'
    _python_name = 'improve_quality'

class repair(Command):
    """
    Tries to repair mesh problems identified by mesh check.
    """
    _version = '251'
    fluent_name = 'repair'
    _python_name = 'repair'

class repair_1(Boolean):
    """
    'repair' child.
    """
    _version = '251'
    fluent_name = 'repair?'
    _python_name = 'repair'

class disable_repair(Boolean):
    """
    'disable_repair' child.
    """
    _version = '251'
    fluent_name = 'disable-repair?'
    _python_name = 'disable_repair'

class repair_face_handedness(Command):
    """
    Correct face handedness at left handed faces if possible.
    
    Parameters
    ----------
        repair : bool
            'repair' child.
        disable_repair : bool
            'disable_repair' child.
    """
    _version = '251'
    fluent_name = 'repair-face-handedness'
    _python_name = 'repair_face_handedness'
    argument_names = ['repair', 'disable_repair']
    _child_classes = dict(
        repair=repair_1,
        disable_repair=disable_repair,
    )

class repair_face_node_order(Command):
    """
    Reverse order of face nodes if needed.
    """
    _version = '251'
    fluent_name = 'repair-face-node-order'
    _python_name = 'repair_face_node_order'

class repair_wall_distance(Command):
    """
    Correct wall distance at very high aspect ratio hexahedral/polyhedral cells.
    
    Parameters
    ----------
        repair : bool
            'repair' child.
    """
    _version = '251'
    fluent_name = 'repair-wall-distance'
    _python_name = 'repair_wall_distance'
    argument_names = ['repair']
    _child_classes = dict(
        repair=repair_1,
    )

class repair_angle(Boolean):
    """
    'repair_angle' child.
    """
    _version = '251'
    fluent_name = 'repair-angle?'
    _python_name = 'repair_angle'

class periodic_input(String):
    """
    Id/name of zone to repair.
    """
    _version = '251'
    fluent_name = 'periodic-input'
    _python_name = 'periodic_input'

class angle_input(Real):
    """
    Desired angle of rotation in degrees.
    """
    _version = '251'
    fluent_name = 'angle-input'
    _python_name = 'angle_input'

class repair_periodic_1(Boolean):
    """
    'repair_periodic' child.
    """
    _version = '251'
    fluent_name = 'repair-periodic?'
    _python_name = 'repair_periodic'

class repair_periodic(Command):
    """
    Modify mesh to enforce specified periodic rotation angle.
    
    Parameters
    ----------
        repair_angle : bool
            'repair_angle' child.
        periodic_input : str
            Id/name of zone to repair.
        angle_input : real
            Desired angle of rotation in degrees.
        repair_periodic : bool
            'repair_periodic' child.
    """
    _version = '251'
    fluent_name = 'repair-periodic'
    _python_name = 'repair_periodic'
    argument_names = ['repair_angle', 'periodic_input', 'angle_input', 'repair_periodic']
    _child_classes = dict(
        repair_angle=repair_angle,
        periodic_input=periodic_input,
        angle_input=angle_input,
        repair_periodic=repair_periodic_1,
    )

class repair_improve(Group):
    """
    The repair and improve quality object.
    """
    _version = '251'
    fluent_name = 'repair-improve'
    _python_name = 'repair_improve'
    child_names = ['allow_repair_at_boundaries', 'include_local_polyhedra_conversion_in_repair']
    command_names = ['repair_poor_elements', 'improve_quality', 'repair', 'repair_face_handedness', 'repair_face_node_order', 'repair_wall_distance', 'repair_periodic']
    _child_classes = dict(
        allow_repair_at_boundaries=allow_repair_at_boundaries,
        include_local_polyhedra_conversion_in_repair=include_local_polyhedra_conversion_in_repair,
        repair_poor_elements=repair_poor_elements,
        improve_quality=improve_quality,
        repair=repair,
        repair_face_handedness=repair_face_handedness,
        repair_face_node_order=repair_face_node_order,
        repair_wall_distance=repair_wall_distance,
        repair_periodic=repair_periodic,
    )

class surface(String, AllowedValuesMixin):
    """
    'surface' child.
    """
    _version = '251'
    fluent_name = 'surface'
    _python_name = 'surface'

class delete(CommandWithPositionalArgs):
    """
    Delete surface mesh.
    
    Parameters
    ----------
        surface : str
            'surface' child.
    """
    _version = '251'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['surface']
    _child_classes = dict(
        surface=surface,
    )

class display(Command):
    """
    Display surface meshes.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'

class filename_3(Filename, _InputFile):
    """
    'filename' child.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class unit_1(String):
    """
    'unit' child.
    """
    _version = '251'
    fluent_name = 'unit'
    _python_name = 'unit'

class read_2(Command):
    """
    Read surface meshes.
    
    Parameters
    ----------
        filename : str
            'filename' child.
        unit : str
            'unit' child.
    """
    _version = '251'
    fluent_name = 'read'
    _python_name = 'read'
    argument_names = ['filename', 'unit']
    _child_classes = dict(
        filename=filename_3,
        unit=unit_1,
    )

class surface_mesh(Group):
    """
    The surface mesh object.
    """
    _version = '251'
    fluent_name = 'surface-mesh'
    _python_name = 'surface_mesh'
    command_names = ['delete', 'display', 'read']
    _child_classes = dict(
        delete=delete,
        display=display,
        read=read_2,
    )

class migrate_and_reorder(Boolean):
    """
    Specifies whether to perform migration and reordering at the end of the polyhedra conversion.
    """
    _version = '251'
    fluent_name = 'migrate-and-reorder?'
    _python_name = 'migrate_and_reorder'

class preserve_boundary_layer(String, AllowedValuesMixin):
    """
    0 = Decide at runtime.
    1 = Never preserve.
    2 = Always preserve.
    """
    _version = '251'
    fluent_name = 'preserve-boundary-layer'
    _python_name = 'preserve_boundary_layer'

class preserve_interior_zones(String):
    """
    'preserve_interior_zones' child.
    """
    _version = '251'
    fluent_name = 'preserve-interior-zones'
    _python_name = 'preserve_interior_zones'

class options(Group):
    """
    Options object.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['migrate_and_reorder', 'preserve_boundary_layer', 'preserve_interior_zones']
    _child_classes = dict(
        migrate_and_reorder=migrate_and_reorder,
        preserve_boundary_layer=preserve_boundary_layer,
        preserve_interior_zones=preserve_interior_zones,
    )

class convert_domain(Command):
    """
    Convert entire domain to polyhedra cells.
    """
    _version = '251'
    fluent_name = 'convert-domain'
    _python_name = 'convert_domain'

class convert_hanging_nodes(Command):
    """
    Convert cells with hanging nodes and faces to polyhedra.
    """
    _version = '251'
    fluent_name = 'convert-hanging-nodes'
    _python_name = 'convert_hanging_nodes'

class convert_hanging_node_zones(Command):
    """
    Convert selected cell zones with hanging nodes and faces to polyhedra. 
    The selected cell zones cannot be connected to other zones.
    """
    _version = '251'
    fluent_name = 'convert-hanging-node-zones'
    _python_name = 'convert_hanging_node_zones'

class cell_thread_list(StringList, AllowedValuesMixin):
    """
    Zones where cells should be converted.
    """
    _version = '251'
    fluent_name = 'cell-thread-list'
    _python_name = 'cell_thread_list'

class max_cell_skewness(Real):
    """
    Target maximum cell skewness.
    """
    _version = '251'
    fluent_name = 'max-cell-skewness'
    _python_name = 'max_cell_skewness'

class convert_skewed_cells_1(Boolean):
    """
    'convert_skewed_cells' child.
    """
    _version = '251'
    fluent_name = 'convert-skewed-cells?'
    _python_name = 'convert_skewed_cells'

class convert_skewed_cells(Command):
    """
    'convert_skewed_cells' command.
    """
    _version = '251'
    fluent_name = 'convert-skewed-cells'
    _python_name = 'convert_skewed_cells'
    argument_names = ['cell_thread_list', 'max_cell_skewness', 'convert_skewed_cells']
    _child_classes = dict(
        cell_thread_list=cell_thread_list,
        max_cell_skewness=max_cell_skewness,
        convert_skewed_cells=convert_skewed_cells_1,
    )

class polyhedra(Group):
    """
    The polyhedra object.
    """
    _version = '251'
    fluent_name = 'polyhedra'
    _python_name = 'polyhedra'
    child_names = ['options']
    command_names = ['convert_domain', 'convert_hanging_nodes', 'convert_hanging_node_zones', 'convert_skewed_cells']
    _child_classes = dict(
        options=options,
        convert_domain=convert_domain,
        convert_hanging_nodes=convert_hanging_nodes,
        convert_hanging_node_zones=convert_hanging_node_zones,
        convert_skewed_cells=convert_skewed_cells,
    )

class wall_distance_method(String, AllowedValuesMixin):
    """
    Wall distance method.
    """
    _version = '251'
    fluent_name = 'wall-distance-method'
    _python_name = 'wall_distance_method'

class adjacency(Command):
    """
    View and rename face zones adjacent to selected cell zones.
    """
    _version = '251'
    fluent_name = 'adjacency'
    _python_name = 'adjacency'

class check(Command):
    """
    Perform various mesh consistency checks.
    """
    _version = '251'
    fluent_name = 'check'
    _python_name = 'check'

class memory_usage(Command):
    """
    Report solver memory use.
    """
    _version = '251'
    fluent_name = 'memory-usage'
    _python_name = 'memory_usage'

class print_level(Integer):
    """
    Print zone information size.
    """
    _version = '251'
    fluent_name = 'print-level'
    _python_name = 'print_level'

class mesh_info(Command):
    """
    Print zone information size.
    
    Parameters
    ----------
        print_level : int
            Print zone information size.
    """
    _version = '251'
    fluent_name = 'mesh-info'
    _python_name = 'mesh_info'
    argument_names = ['print_level']
    _child_classes = dict(
        print_level=print_level,
    )

class quality(Command):
    """
    Perform analysis of mesh quality.
    """
    _version = '251'
    fluent_name = 'quality'
    _python_name = 'quality'

class axis_components(RealList):
    """
    'axis_components' child.
    """
    _version = '251'
    fluent_name = 'axis-components'
    _python_name = 'axis_components'

class rotate(Command):
    """
    Rotate the mesh.
    
    Parameters
    ----------
        angle : real
            'angle' child.
        origin : List
            'origin' child.
        axis_components : List
            'axis_components' child.
    """
    _version = '251'
    fluent_name = 'rotate'
    _python_name = 'rotate'
    argument_names = ['angle', 'origin', 'axis_components']
    _child_classes = dict(
        angle=angle_1,
        origin=origin_1,
        axis_components=axis_components,
    )

class x_scale(Real):
    """
    'x_scale' child.
    """
    _version = '251'
    fluent_name = 'x-scale'
    _python_name = 'x_scale'

class y_scale(Real):
    """
    'y_scale' child.
    """
    _version = '251'
    fluent_name = 'y-scale'
    _python_name = 'y_scale'

class z_scale(Real):
    """
    'z_scale' child.
    """
    _version = '251'
    fluent_name = 'z-scale'
    _python_name = 'z_scale'

class scale(Command):
    """
    'scale' command.
    """
    _version = '251'
    fluent_name = 'scale'
    _python_name = 'scale'
    argument_names = ['x_scale', 'y_scale', 'z_scale']
    _child_classes = dict(
        x_scale=x_scale,
        y_scale=y_scale,
        z_scale=z_scale,
    )

class size_info(Command):
    """
    Print mesh size.
    """
    _version = '251'
    fluent_name = 'size-info'
    _python_name = 'size_info'

class growth_rate(Real):
    """
    'growth_rate' child.
    """
    _version = '251'
    fluent_name = 'growth-rate'
    _python_name = 'growth_rate'

class redistribute_boundary_layer(Command):
    """
    Enforce growth rate in boundary layer.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
        growth_rate : real
            'growth_rate' child.
    """
    _version = '251'
    fluent_name = 'redistribute-boundary-layer'
    _python_name = 'redistribute_boundary_layer'
    argument_names = ['zone_name', 'growth_rate']
    _child_classes = dict(
        zone_name=zone_name_2,
        growth_rate=growth_rate,
    )

class swap_mesh_faces(Command):
    """
    Swap mesh faces.
    """
    _version = '251'
    fluent_name = 'swap-mesh-faces'
    _python_name = 'swap_mesh_faces'

class type_of_smoothing(String, AllowedValuesMixin):
    """
    'type_of_smoothing' child.
    """
    _version = '251'
    fluent_name = 'type-of-smoothing'
    _python_name = 'type_of_smoothing'

class number_of_iterations(Integer):
    """
    'number_of_iterations' child.
    """
    _version = '251'
    fluent_name = 'number-of-iterations'
    _python_name = 'number_of_iterations'

class relaxtion_factor(Real):
    """
    'relaxtion_factor' child.
    """
    _version = '251'
    fluent_name = 'relaxtion-factor'
    _python_name = 'relaxtion_factor'

class percentage_of_cells(Real):
    """
    'percentage_of_cells' child.
    """
    _version = '251'
    fluent_name = 'percentage-of-cells'
    _python_name = 'percentage_of_cells'

class skewness_threshold(Real):
    """
    'skewness_threshold' child.
    """
    _version = '251'
    fluent_name = 'skewness-threshold'
    _python_name = 'skewness_threshold'

class smooth_mesh(Command):
    """
    Smooth the mesh using quality-based, Laplace or skewness methods.
    
    Parameters
    ----------
        type_of_smoothing : str
            'type_of_smoothing' child.
        number_of_iterations : int
            'number_of_iterations' child.
        relaxtion_factor : real
            'relaxtion_factor' child.
        percentage_of_cells : real
            'percentage_of_cells' child.
        skewness_threshold : real
            'skewness_threshold' child.
    """
    _version = '251'
    fluent_name = 'smooth-mesh'
    _python_name = 'smooth_mesh'
    argument_names = ['type_of_smoothing', 'number_of_iterations', 'relaxtion_factor', 'percentage_of_cells', 'skewness_threshold']
    _child_classes = dict(
        type_of_smoothing=type_of_smoothing,
        number_of_iterations=number_of_iterations,
        relaxtion_factor=relaxtion_factor,
        percentage_of_cells=percentage_of_cells,
        skewness_threshold=skewness_threshold,
    )

class zones(Boolean):
    """
    'zones' child.
    """
    _version = '251'
    fluent_name = 'zones?'
    _python_name = 'zones'

class replace(Command):
    """
    Replace mesh and interpolate data.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
        zones : bool
            'zones' child.
    """
    _version = '251'
    fluent_name = 'replace'
    _python_name = 'replace'
    argument_names = ['file_name', 'zones']
    _child_classes = dict(
        file_name=file_name_1_3,
        zones=zones,
    )

class translate(Command):
    """
    Translate the mesh.
    
    Parameters
    ----------
        offset : List
            'offset' child.
    """
    _version = '251'
    fluent_name = 'translate'
    _python_name = 'translate'
    argument_names = ['offset']
    _child_classes = dict(
        offset=offset,
    )

class mesh(Group):
    """
    'mesh' child.
    """
    _version = '251'
    fluent_name = 'mesh'
    _python_name = 'mesh'
    child_names = ['adapt', 'anisotropic_adaption', 'check_before_solve', 'check_verbosity', 'enhanced_orthogonal_quality', 'matching_tolerance', 'modify_zones', 'show_periodic_shadow_zones', 'reorder', 'repair_improve', 'surface_mesh', 'polyhedra', 'wall_distance_method']
    command_names = ['adjacency', 'check', 'memory_usage', 'mesh_info', 'quality', 'rotate', 'scale', 'size_info', 'redistribute_boundary_layer', 'swap_mesh_faces', 'smooth_mesh', 'replace', 'translate']
    _child_classes = dict(
        adapt=adapt,
        anisotropic_adaption=anisotropic_adaption,
        check_before_solve=check_before_solve,
        check_verbosity=check_verbosity,
        enhanced_orthogonal_quality=enhanced_orthogonal_quality,
        matching_tolerance=matching_tolerance,
        modify_zones=modify_zones,
        show_periodic_shadow_zones=show_periodic_shadow_zones,
        reorder=reorder,
        repair_improve=repair_improve,
        surface_mesh=surface_mesh,
        polyhedra=polyhedra,
        wall_distance_method=wall_distance_method,
        adjacency=adjacency,
        check=check,
        memory_usage=memory_usage,
        mesh_info=mesh_info,
        quality=quality,
        rotate=rotate,
        scale=scale,
        size_info=size_info,
        redistribute_boundary_layer=redistribute_boundary_layer,
        swap_mesh_faces=swap_mesh_faces,
        smooth_mesh=smooth_mesh,
        replace=replace,
        translate=translate,
    )

class session_name(String):
    """
    Name for the web server.
    """
    _version = '251'
    fluent_name = 'session-name'
    _python_name = 'session_name'

class port(Integer):
    """
    Listening port for the web server.
    """
    _version = '251'
    fluent_name = 'port'
    _python_name = 'port'

class port_span(Integer):
    """
    Number of ports to try starting from given 'port' for the web server.
    """
    _version = '251'
    fluent_name = 'port-span'
    _python_name = 'port_span'

class job_service_url(String):
    """
    Job service URL to register Fluent.
    """
    _version = '251'
    fluent_name = 'job-service-url'
    _python_name = 'job_service_url'

class email_id(String):
    """
    The email address for email notification on job startup.
    """
    _version = '251'
    fluent_name = 'email-id'
    _python_name = 'email_id'

class start(Command):
    """
    Start the web server.
    
    Parameters
    ----------
        session_name : str
            Name for the web server.
        port : int
            Listening port for the web server.
        port_span : int
            Number of ports to try starting from given 'port' for the web server.
        job_service_url : str
            Job service URL to register Fluent.
        email_id : str
            The email address for email notification on job startup.
    """
    _version = '251'
    fluent_name = 'start'
    _python_name = 'start'
    argument_names = ['session_name', 'port', 'port_span', 'job_service_url', 'email_id']
    _child_classes = dict(
        session_name=session_name,
        port=port,
        port_span=port_span,
        job_service_url=job_service_url,
        email_id=email_id,
    )

class stop(Command):
    """
    Stop the web server.
    """
    _version = '251'
    fluent_name = 'stop'
    _python_name = 'stop'

class print_server_info(Command):
    """
    Print the web server information.
    """
    _version = '251'
    fluent_name = 'print-server-info'
    _python_name = 'print_server_info'

class get_server_info(Query):
    """
    Get the web server information.
    """
    _version = '251'
    fluent_name = 'get-server-info'
    _python_name = 'get_server_info'

class web_server(Group):
    """
    REST and WebSocket based web server.
    """
    _version = '251'
    fluent_name = 'web-server'
    _python_name = 'web_server'
    command_names = ['start', 'stop', 'print_server_info']
    query_names = ['get_server_info']
    _child_classes = dict(
        start=start,
        stop=stop,
        print_server_info=print_server_info,
        get_server_info=get_server_info,
    )

class server(Group):
    """
    'server' child.
    """
    _version = '251'
    fluent_name = 'server'
    _python_name = 'server'
    child_names = ['web_server']
    _child_classes = dict(
        web_server=web_server,
    )

class type_1(String, AllowedValuesMixin):
    """
    Solver type.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'

class two_dim_space(String, AllowedValuesMixin):
    """
    'two_dim_space' child.
    """
    _version = '251'
    fluent_name = 'two-dim-space'
    _python_name = 'two_dim_space'

class velocity_formulation(String, AllowedValuesMixin):
    """
    Velocity formulation.
    """
    _version = '251'
    fluent_name = 'velocity-formulation'
    _python_name = 'velocity_formulation'

class time(String, AllowedValuesMixin):
    """
    'time' child.
    """
    _version = '251'
    fluent_name = 'time'
    _python_name = 'time'

class solver(Group):
    """
    'solver' child.
    """
    _version = '251'
    fluent_name = 'solver'
    _python_name = 'solver'
    child_names = ['type', 'two_dim_space', 'velocity_formulation', 'time']
    _child_classes = dict(
        type=type_1,
        two_dim_space=two_dim_space,
        velocity_formulation=velocity_formulation,
        time=time,
    )

class adjust_solver_defaults_based_on_setup(Boolean):
    """
    Enable/disable adjustment of solver defaults based on setup.
    """
    _version = '251'
    fluent_name = 'adjust-solver-defaults-based-on-setup'
    _python_name = 'adjust_solver_defaults_based_on_setup'

class enable_3(Boolean):
    """
    Gravitational acceleration.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class components(RealList):
    """
    'components' child.
    """
    _version = '251'
    fluent_name = 'components'
    _python_name = 'components'

class gravity_mrf_behavior(Boolean):
    """
    Enable/disable the fix of gravity vector in a stationary reference frame.
    """
    _version = '251'
    fluent_name = 'gravity-mrf-behavior'
    _python_name = 'gravity_mrf_behavior'

class gravity(Group):
    """
    'gravity' child.
    """
    _version = '251'
    fluent_name = 'gravity'
    _python_name = 'gravity'
    child_names = ['enable', 'components', 'gravity_mrf_behavior']
    _child_classes = dict(
        enable=enable_3,
        components=components,
        gravity_mrf_behavior=gravity_mrf_behavior,
    )

class real_gas_state(String, AllowedValuesMixin):
    """
    State for real gas EOS subcritical condition.
    """
    _version = '251'
    fluent_name = 'real-gas-state'
    _python_name = 'real_gas_state'

class operating_pressure(Real):
    """
    The operating pressure.
    """
    _version = '251'
    fluent_name = 'operating-pressure'
    _python_name = 'operating_pressure'

class reference_pressure_location(RealList):
    """
    Coordinates of reference pressure.
    """
    _version = '251'
    fluent_name = 'reference-pressure-location'
    _python_name = 'reference_pressure_location'

class reference_pressure_method(String, AllowedValuesMixin):
    """
    Choosing reference pressure type.
    """
    _version = '251'
    fluent_name = 'reference-pressure-method'
    _python_name = 'reference_pressure_method'

class enable_4(Boolean):
    """
    Enable/disable use of a operating density.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class method(String, AllowedValuesMixin):
    """
    Operating density methods for multiphase flow.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class value(Real):
    """
    Operating density.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class print_1(Command):
    """
    Print operating density value.
    """
    _version = '251'
    fluent_name = 'print'
    _python_name = 'print'

class operating_density(Group):
    """
    Enable/disable use of a specified operating density.
    """
    _version = '251'
    fluent_name = 'operating-density'
    _python_name = 'operating_density'
    child_names = ['enable', 'method', 'value']
    command_names = ['print']
    _child_classes = dict(
        enable=enable_4,
        method=method,
        value=value,
        print=print_1,
    )

class operating_temperature(Real):
    """
    The operating temperature for Boussinesq.
    """
    _version = '251'
    fluent_name = 'operating-temperature'
    _python_name = 'operating_temperature'

class enable_5(Boolean):
    """
    Enable/disable computing operating density from inlet.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class zone_name_5(String, AllowedValuesMixin):
    """
    The name of inlet from which the opreating density is computed.
    """
    _version = '251'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'

class inlet_temperature_for_operating_density(Group):
    """
    Enable/disable non-zero operating density computed from inlet temperature.
    """
    _version = '251'
    fluent_name = 'inlet-temperature-for-operating-density'
    _python_name = 'inlet_temperature_for_operating_density'
    child_names = ['enable', 'zone_name']
    _child_classes = dict(
        enable=enable_5,
        zone_name=zone_name_5,
    )

class used_ref_pressure_location(Command):
    """
    See the actual coordinates of reference pressure used.
    """
    _version = '251'
    fluent_name = 'used-ref-pressure-location'
    _python_name = 'used_ref_pressure_location'

class operating_conditions(Group):
    """
    'operating_conditions' child.
    """
    _version = '251'
    fluent_name = 'operating-conditions'
    _python_name = 'operating_conditions'
    child_names = ['gravity', 'real_gas_state', 'operating_pressure', 'reference_pressure_location', 'reference_pressure_method', 'operating_density', 'operating_temperature', 'inlet_temperature_for_operating_density']
    command_names = ['used_ref_pressure_location']
    _child_classes = dict(
        gravity=gravity,
        real_gas_state=real_gas_state,
        operating_pressure=operating_pressure,
        reference_pressure_location=reference_pressure_location,
        reference_pressure_method=reference_pressure_method,
        operating_density=operating_density,
        operating_temperature=operating_temperature,
        inlet_temperature_for_operating_density=inlet_temperature_for_operating_density,
        used_ref_pressure_location=used_ref_pressure_location,
    )

class quantity(String, AllowedValuesMixin):
    """
    'quantity' child.
    """
    _version = '251'
    fluent_name = 'quantity'
    _python_name = 'quantity'

class units_name(String):
    """
    'units_name' child.
    """
    _version = '251'
    fluent_name = 'units-name'
    _python_name = 'units_name'

class scale_factor(Real):
    """
    'scale_factor' child.
    """
    _version = '251'
    fluent_name = 'scale-factor'
    _python_name = 'scale_factor'

class offset_2(Real):
    """
    'offset' child.
    """
    _version = '251'
    fluent_name = 'offset'
    _python_name = 'offset'

class set_units(Command):
    """
    Set unit conversion factors.
    
    Parameters
    ----------
        quantity : str
            'quantity' child.
        units_name : str
            'units_name' child.
        scale_factor : real
            'scale_factor' child.
        offset : real
            'offset' child.
    """
    _version = '251'
    fluent_name = 'set-units'
    _python_name = 'set_units'
    argument_names = ['quantity', 'units_name', 'scale_factor', 'offset']
    _child_classes = dict(
        quantity=quantity,
        units_name=units_name,
        scale_factor=scale_factor,
        offset=offset_2,
    )

class unit_system(String, AllowedValuesMixin):
    """
    'unit_system' child.
    """
    _version = '251'
    fluent_name = 'unit-system'
    _python_name = 'unit_system'

class set_unit_system(Command):
    """
    Apply standard set of units to all quantities.
    
    Parameters
    ----------
        unit_system : str
            'unit_system' child.
    """
    _version = '251'
    fluent_name = 'set-unit-system'
    _python_name = 'set_unit_system'
    argument_names = ['unit_system']
    _child_classes = dict(
        unit_system=unit_system,
    )

class units(Group):
    """
    'units' child.
    """
    _version = '251'
    fluent_name = 'units'
    _python_name = 'units'
    command_names = ['set_units', 'set_unit_system']
    _child_classes = dict(
        set_units=set_units,
        set_unit_system=set_unit_system,
    )

class general(Group):
    """
    'general' child.
    """
    _version = '251'
    fluent_name = 'general'
    _python_name = 'general'
    child_names = ['solver', 'adjust_solver_defaults_based_on_setup', 'operating_conditions', 'units']
    _child_classes = dict(
        solver=solver,
        adjust_solver_defaults_based_on_setup=adjust_solver_defaults_based_on_setup,
        operating_conditions=operating_conditions,
        units=units,
    )

class models_1(String, AllowedValuesMixin):
    """
    Multiphase model.
    """
    _version = '251'
    fluent_name = 'models'
    _python_name = 'models'

class vaporization_pressure(Real):
    """
    Vaporization pressure.
    """
    _version = '251'
    fluent_name = 'vaporization-pressure'
    _python_name = 'vaporization_pressure'

class non_condensable_gas(Real):
    """
    Non condensable gas.
    """
    _version = '251'
    fluent_name = 'non-condensable-gas'
    _python_name = 'non_condensable_gas'

class liquid_surface_tension(Real):
    """
    Liquid surface tension.
    """
    _version = '251'
    fluent_name = 'liquid-surface-tension'
    _python_name = 'liquid_surface_tension'

class bubble_number_density(Real):
    """
    Bubble number density.
    """
    _version = '251'
    fluent_name = 'bubble-number-density'
    _python_name = 'bubble_number_density'

class level_set(Boolean):
    """
    Level set method.
    """
    _version = '251'
    fluent_name = 'level-set'
    _python_name = 'level_set'

class weighting(String, AllowedValuesMixin):
    """
    Weighting.
    """
    _version = '251'
    fluent_name = 'weighting'
    _python_name = 'weighting'

class coupled_level_set(Group):
    """
    Coupled level set.
    """
    _version = '251'
    fluent_name = 'coupled-level-set'
    _python_name = 'coupled_level_set'
    child_names = ['level_set', 'weighting']
    _child_classes = dict(
        level_set=level_set,
        weighting=weighting,
    )

class hybrid_models(Group):
    """
    Hybrid models.
    """
    _version = '251'
    fluent_name = 'hybrid-models'
    _python_name = 'hybrid_models'
    child_names = ['coupled_level_set']
    _child_classes = dict(
        coupled_level_set=coupled_level_set,
    )

class number_of_eulerian_phases(Integer):
    """
    >= 2 and <= 20.
    """
    _version = '251'
    fluent_name = 'number-of-eulerian-phases'
    _python_name = 'number_of_eulerian_phases'

class number_of_phases(Group):
    """
    Number of phases settings.
    """
    _version = '251'
    fluent_name = 'number-of-phases'
    _python_name = 'number_of_phases'
    child_names = ['number_of_eulerian_phases']
    _child_classes = dict(
        number_of_eulerian_phases=number_of_eulerian_phases,
    )

class number_of_eulerian_discrete_phases(IntegerList):
    """
    Sets the number of phases, calculated with the Discrete Phase model.
    The sum of Eulerian and Discrete phases has to be in the range (2,20).
    """
    _version = '251'
    fluent_name = 'number-of-eulerian-discrete-phases'
    _python_name = 'number_of_eulerian_discrete_phases'

class open_channel_flow(Boolean):
    """
    Help.
    """
    _version = '251'
    fluent_name = 'open-channel-flow'
    _python_name = 'open_channel_flow'

class open_channel_flow_wave_bc(Boolean):
    """
    Help.
    """
    _version = '251'
    fluent_name = 'open-channel-flow-wave-bc'
    _python_name = 'open_channel_flow_wave_bc'

class vof_sub_models(Group):
    """
    Vof sub model.
    """
    _version = '251'
    fluent_name = 'vof-sub-models'
    _python_name = 'vof_sub_models'
    child_names = ['open_channel_flow', 'open_channel_flow_wave_bc']
    _child_classes = dict(
        open_channel_flow=open_channel_flow,
        open_channel_flow_wave_bc=open_channel_flow_wave_bc,
    )

class vof_formulation(String, AllowedValuesMixin):
    """
    Explicit/implicit formulation.
    """
    _version = '251'
    fluent_name = 'vof-formulation'
    _python_name = 'vof_formulation'

class vof_cutoff(Real):
    """
    Vof cutoff.
    """
    _version = '251'
    fluent_name = 'vof-cutoff'
    _python_name = 'vof_cutoff'

class vof_courant_number(Real):
    """
    Vof courant number.
    """
    _version = '251'
    fluent_name = 'vof-courant-number'
    _python_name = 'vof_courant_number'

class interface_type(String, AllowedValuesMixin):
    """
    Interface type.
    """
    _version = '251'
    fluent_name = 'interface-type'
    _python_name = 'interface_type'

class anti_diffusion(Boolean):
    """
    Vof anti diffusion.
    """
    _version = '251'
    fluent_name = 'anti-diffusion'
    _python_name = 'anti_diffusion'

class anti_diffusion_factor(Real):
    """
    Vof anti diffusion factor.
    """
    _version = '251'
    fluent_name = 'anti-diffusion-factor'
    _python_name = 'anti_diffusion_factor'

class zonal_discretization(Boolean):
    """
    Zonal discretization.
    """
    _version = '251'
    fluent_name = 'zonal-discretization'
    _python_name = 'zonal_discretization'

class phase_localized_discretization(Boolean):
    """
    Phase localized discretization.
    """
    _version = '251'
    fluent_name = 'phase-localized-discretization'
    _python_name = 'phase_localized_discretization'

class interface_modeling_options(Group):
    """
    Interface modeling.
    """
    _version = '251'
    fluent_name = 'interface-modeling-options'
    _python_name = 'interface_modeling_options'
    child_names = ['interface_type', 'anti_diffusion', 'anti_diffusion_factor', 'zonal_discretization', 'phase_localized_discretization']
    _child_classes = dict(
        interface_type=interface_type,
        anti_diffusion=anti_diffusion,
        anti_diffusion_factor=anti_diffusion_factor,
        zonal_discretization=zonal_discretization,
        phase_localized_discretization=phase_localized_discretization,
    )

class vof_parameters(Group):
    """
    VOF Parameters.
    """
    _version = '251'
    fluent_name = 'vof-parameters'
    _python_name = 'vof_parameters'
    child_names = ['vof_formulation', 'vof_cutoff', 'vof_courant_number', 'interface_modeling_options']
    _child_classes = dict(
        vof_formulation=vof_formulation,
        vof_cutoff=vof_cutoff,
        vof_courant_number=vof_courant_number,
        interface_modeling_options=interface_modeling_options,
    )

class implicit_body_force(Boolean):
    """
    Help.
    """
    _version = '251'
    fluent_name = 'implicit-body-force'
    _python_name = 'implicit_body_force'

class sub_time_step_method(String, AllowedValuesMixin):
    """
    Sub time step method.
    """
    _version = '251'
    fluent_name = 'sub-time-step-method'
    _python_name = 'sub_time_step_method'

class solve_vof_every_iter(Boolean):
    """
    Solve vof every iter.
    """
    _version = '251'
    fluent_name = 'solve-vof-every-iter'
    _python_name = 'solve_vof_every_iter'

class enable_vof_filtering(Boolean):
    """
    Solve vof every iter.
    """
    _version = '251'
    fluent_name = 'enable-vof-filtering'
    _python_name = 'enable_vof_filtering'

class filtering_options(String, AllowedValuesMixin):
    """
    Filtering options.
    """
    _version = '251'
    fluent_name = 'filtering-options'
    _python_name = 'filtering_options'

class filter_vof_cutoff(Real):
    """
    Filtering vof cutoff.
    """
    _version = '251'
    fluent_name = 'filter-vof-cutoff'
    _python_name = 'filter_vof_cutoff'

class vof_filtering(Group):
    """
    Vof-filtering-class.
    """
    _version = '251'
    fluent_name = 'vof-filtering'
    _python_name = 'vof_filtering'
    child_names = ['enable_vof_filtering', 'filtering_options', 'filter_vof_cutoff']
    _child_classes = dict(
        enable_vof_filtering=enable_vof_filtering,
        filtering_options=filtering_options,
        filter_vof_cutoff=filter_vof_cutoff,
    )

class explicit_expert_options(Group):
    """
    Explicit expert options.
    """
    _version = '251'
    fluent_name = 'explicit-expert-options'
    _python_name = 'explicit_expert_options'
    child_names = ['sub_time_step_method', 'solve_vof_every_iter', 'vof_filtering']
    _child_classes = dict(
        sub_time_step_method=sub_time_step_method,
        solve_vof_every_iter=solve_vof_every_iter,
        vof_filtering=vof_filtering,
    )

class advanced_formulation(Group):
    """
    Body force formulation.
    """
    _version = '251'
    fluent_name = 'advanced-formulation'
    _python_name = 'advanced_formulation'
    child_names = ['implicit_body_force', 'explicit_expert_options']
    _child_classes = dict(
        implicit_body_force=implicit_body_force,
        explicit_expert_options=explicit_expert_options,
    )

class name(String):
    """
    Object name.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class create_1(CommandWithPositionalArgs):
    """
    Create a new instance of the current object type.
    
    Parameters
    ----------
        name : str
            Object name.
    """
    _version = '251'
    fluent_name = 'create'
    _python_name = 'create'
    argument_names = ['name']
    _child_classes = dict(
        name=name,
    )
    return_type = 'string'

class name_list(StringList, AllowedValuesMixin):
    """
    Objects to be deleted.
    """
    _version = '251'
    fluent_name = 'name-list'
    _python_name = 'name_list'

class delete_1(CommandWithPositionalArgs):
    """
    Delete selected objects.
    
    Parameters
    ----------
        name_list : List
            Objects to be deleted.
    """
    _version = '251'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['name_list']
    _child_classes = dict(
        name_list=name_list,
    )

class new_1(String):
    """
    New name for the object.
    """
    _version = '251'
    fluent_name = 'new'
    _python_name = 'new'

class old(String, AllowedValuesMixin):
    """
    Object to rename.
    """
    _version = '251'
    fluent_name = 'old'
    _python_name = 'old'

class rename(CommandWithPositionalArgs):
    """
    Rename the object.
    
    Parameters
    ----------
        new : str
            New name for the object.
        old : str
            Object to rename.
    """
    _version = '251'
    fluent_name = 'rename'
    _python_name = 'rename'
    argument_names = ['new', 'old']
    _child_classes = dict(
        new=new_1,
        old=old,
    )

class list(Command):
    """
    List the names of the objects.
    """
    _version = '251'
    fluent_name = 'list'
    _python_name = 'list'

class object_name(String, AllowedValuesMixin):
    """
    Object for which properties are to be listed.
    """
    _version = '251'
    fluent_name = 'object-name'
    _python_name = 'object_name'

class list_properties(Command):
    """
    List active properties of the object.
    
    Parameters
    ----------
        object_name : str
            Object for which properties are to be listed.
    """
    _version = '251'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name,
    )

class from_(String, AllowedValuesMixin):
    """
    The object to duplicate.
    """
    _version = '251'
    fluent_name = 'from'
    _python_name = 'from_'

class to(String):
    """
    The name of the new object.
    """
    _version = '251'
    fluent_name = 'to'
    _python_name = 'to'

class make_a_copy(Command):
    """
    Create a copy of the object.
    
    Parameters
    ----------
        from_ : str
            The object to duplicate.
        to : str
            The name of the new object.
    """
    _version = '251'
    fluent_name = 'make-a-copy'
    _python_name = 'make_a_copy'
    argument_names = ['from_', 'to']
    _child_classes = dict(
        from_=from_,
        to=to,
    )

class name_1(String):
    """
    Name for phase.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class material(String, AllowedValuesMixin):
    """
    Material for phase.
    """
    _version = '251'
    fluent_name = 'material'
    _python_name = 'material'

class phases_child(Group):
    """
    'child_object_type' of phases.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phases_child'
    child_names = ['name', 'material']
    _child_classes = dict(
        name=name_1,
        material=material,
    )

class phases(NamedObject[phases_child], CreatableNamedObjectMixin[phases_child]):
    """
    Group of phases.
    """
    _version = '251'
    fluent_name = 'phases'
    _python_name = 'phases'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phases_child

class option_2(String, AllowedValuesMixin):
    """
    The methods for surf-tension.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class constant(Real):
    """
    Constant value.
    """
    _version = '251'
    fluent_name = 'constant'
    _python_name = 'constant'

class user_defined(String, AllowedValuesMixin):
    """
    Prop udf.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'

class surface_tension_child_child(Group):
    """
    'child_object_type' of child_object_type.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'surface_tension_child_child'
    child_names = ['option', 'constant', 'user_defined']
    _child_classes = dict(
        option=option_2,
        constant=constant,
        user_defined=user_defined,
    )

class surface_tension_child(NamedObject[surface_tension_child_child], CreatableNamedObjectMixin[surface_tension_child_child]):
    """
    'child_object_type' of surface_tension.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'surface_tension_child'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = surface_tension_child_child

class surface_tension(NamedObject[surface_tension_child], CreatableNamedObjectMixin[surface_tension_child]):
    """
    Group of phases.
    """
    _version = '251'
    fluent_name = 'surface-tension'
    _python_name = 'surface_tension'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = surface_tension_child

class surface_tension_model(Boolean):
    """
    Sfc modeling?.
    """
    _version = '251'
    fluent_name = 'surface-tension-model'
    _python_name = 'surface_tension_model'

class surface_tension_model_type(String, AllowedValuesMixin):
    """
    Surface Tension model type.
    """
    _version = '251'
    fluent_name = 'surface-tension-model-type'
    _python_name = 'surface_tension_model_type'

class wall_adhesion(Boolean):
    """
    Sfc modeling?.
    """
    _version = '251'
    fluent_name = 'wall-adhesion?'
    _python_name = 'wall_adhesion'

class forces(Group):
    """
    Interfacial forces.
    """
    _version = '251'
    fluent_name = 'forces'
    _python_name = 'forces'
    child_names = ['surface_tension', 'surface_tension_model', 'surface_tension_model_type', 'wall_adhesion']
    _child_classes = dict(
        surface_tension=surface_tension,
        surface_tension_model=surface_tension_model,
        surface_tension_model_type=surface_tension_model_type,
        wall_adhesion=wall_adhesion,
    )

class phase_interaction(Group):
    """
    Phase interaction.
    """
    _version = '251'
    fluent_name = 'phase-interaction'
    _python_name = 'phase_interaction'
    child_names = ['forces']
    _child_classes = dict(
        forces=forces,
    )

class max_liquid_mass_fraction(Real):
    """
    The maximum limit on the condensed liquid-phase mass-fraction to prevent divergence.
    """
    _version = '251'
    fluent_name = 'max-liquid-mass-fraction'
    _python_name = 'max_liquid_mass_fraction'

class virial_equation_of_state(String, AllowedValuesMixin):
    """
    The formulation of the virial equation of state and associated equations for thermodynamic properties of steam.
    """
    _version = '251'
    fluent_name = 'virial-equation-of-state'
    _python_name = 'virial_equation_of_state'

class option_3(String, AllowedValuesMixin):
    """
    The formula to model the droplet growth rate.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class young_alpha(Real):
    """
    Parameter Alpha for Young model of droplet growth rate.
    """
    _version = '251'
    fluent_name = 'young-alpha'
    _python_name = 'young_alpha'

class young_beta(Real):
    """
    Parameter Beta for Young model of droplet growth rate.
    """
    _version = '251'
    fluent_name = 'young-beta'
    _python_name = 'young_beta'

class droplet_growth_rate(Group):
    """
    The formula to model the droplet growth rate and set modeling parameters.
    """
    _version = '251'
    fluent_name = 'droplet-growth-rate'
    _python_name = 'droplet_growth_rate'
    child_names = ['option', 'young_alpha', 'young_beta']
    _child_classes = dict(
        option=option_3,
        young_alpha=young_alpha,
        young_beta=young_beta,
    )

class stagnation_conditions(String, AllowedValuesMixin):
    """
    If the gas phase is selected, zero wetness is assumed when evaluating total or static values of pressure and temperature.
    """
    _version = '251'
    fluent_name = 'stagnation-conditions'
    _python_name = 'stagnation_conditions'

class wet_steam_settings(Group):
    """
    Adjust settings for the wet steam model.
    """
    _version = '251'
    fluent_name = 'wet-steam-settings'
    _python_name = 'wet_steam_settings'
    child_names = ['max_liquid_mass_fraction', 'virial_equation_of_state', 'droplet_growth_rate', 'stagnation_conditions']
    _child_classes = dict(
        max_liquid_mass_fraction=max_liquid_mass_fraction,
        virial_equation_of_state=virial_equation_of_state,
        droplet_growth_rate=droplet_growth_rate,
        stagnation_conditions=stagnation_conditions,
    )

class wet_steam_enabled(Boolean):
    """
    Enable/disable the wet steam model.
    """
    _version = '251'
    fluent_name = 'wet-steam-enabled'
    _python_name = 'wet_steam_enabled'

class multiphase(Group):
    """
    Multiphase model.
    """
    _version = '251'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['models', 'vaporization_pressure', 'non_condensable_gas', 'liquid_surface_tension', 'bubble_number_density', 'hybrid_models', 'number_of_phases', 'number_of_eulerian_discrete_phases', 'vof_sub_models', 'vof_parameters', 'advanced_formulation', 'phases', 'phase_interaction', 'wet_steam_settings', 'wet_steam_enabled']
    _child_classes = dict(
        models=models_1,
        vaporization_pressure=vaporization_pressure,
        non_condensable_gas=non_condensable_gas,
        liquid_surface_tension=liquid_surface_tension,
        bubble_number_density=bubble_number_density,
        hybrid_models=hybrid_models,
        number_of_phases=number_of_phases,
        number_of_eulerian_discrete_phases=number_of_eulerian_discrete_phases,
        vof_sub_models=vof_sub_models,
        vof_parameters=vof_parameters,
        advanced_formulation=advanced_formulation,
        phases=phases,
        phase_interaction=phase_interaction,
        wet_steam_settings=wet_steam_settings,
        wet_steam_enabled=wet_steam_enabled,
    )

class enabled(Boolean):
    """
    Enable the energy transport model.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class viscous_dissipation(Boolean):
    """
    'viscous_dissipation' child.
    """
    _version = '251'
    fluent_name = 'viscous-dissipation'
    _python_name = 'viscous_dissipation'

class pressure_work(Boolean):
    """
    'pressure_work' child.
    """
    _version = '251'
    fluent_name = 'pressure-work'
    _python_name = 'pressure_work'

class kinetic_energy(Boolean):
    """
    'kinetic_energy' child.
    """
    _version = '251'
    fluent_name = 'kinetic-energy'
    _python_name = 'kinetic_energy'

class inlet_diffusion(Boolean):
    """
    'inlet_diffusion' child.
    """
    _version = '251'
    fluent_name = 'inlet-diffusion'
    _python_name = 'inlet_diffusion'

class enable_6(Boolean):
    """
    Enable the two-temperature equation model.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class robustness_enhancement(Boolean):
    """
    Apply robustness enhancements in the two-temperature model.
    """
    _version = '251'
    fluent_name = 'robustness-enhancement?'
    _python_name = 'robustness_enhancement'

class nasa9_enhancement(Boolean):
    """
    Apply nasa9 robustness enhancements in the two-temperature model.
    """
    _version = '251'
    fluent_name = 'nasa9-enhancement?'
    _python_name = 'nasa9_enhancement'

class set_verbosity(Integer):
    """
    Two-temperature model verbosity option.
    """
    _version = '251'
    fluent_name = 'set-verbosity'
    _python_name = 'set_verbosity'

class model(String, AllowedValuesMixin):
    """
    The translational-vibrational energy relaxation model.
    """
    _version = '251'
    fluent_name = 'model'
    _python_name = 'model'

class object_at(Integer):
    """
    Object index to delete.
    """
    _version = '251'
    fluent_name = 'object-at'
    _python_name = 'object_at'

class list_properties_1(Command):
    """
    List properties of selected object.
    
    Parameters
    ----------
        object_at : int
            Object index to delete.
    """
    _version = '251'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    argument_names = ['object_at']
    _child_classes = dict(
        object_at=object_at,
    )

class size(Integer):
    """
    New size for list-object.
    """
    _version = '251'
    fluent_name = 'size'
    _python_name = 'size'

class resize(CommandWithPositionalArgs):
    """
    Set number of objects for list-object.
    
    Parameters
    ----------
        size : int
            New size for list-object.
    """
    _version = '251'
    fluent_name = 'resize'
    _python_name = 'resize'
    argument_names = ['size']
    _child_classes = dict(
        size=size,
    )

class list_all(Command):
    """
    List all the constants used in the Park's model.
    """
    _version = '251'
    fluent_name = 'list-all'
    _python_name = 'list_all'

class species_1(String):
    """
    'species_1' child.
    """
    _version = '251'
    fluent_name = 'species-1'
    _python_name = 'species_1'

class species_2(String):
    """
    'species_2' child.
    """
    _version = '251'
    fluent_name = 'species-2'
    _python_name = 'species_2'

class coefficient_1(Real):
    """
    'coefficient_1' child.
    """
    _version = '251'
    fluent_name = 'coefficient-1'
    _python_name = 'coefficient_1'

class coefficient_2(Real):
    """
    'coefficient_2' child.
    """
    _version = '251'
    fluent_name = 'coefficient-2'
    _python_name = 'coefficient_2'

class expert_child(Group):
    """
    'child_object_type' of expert.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'expert_child'
    child_names = ['species_1', 'species_2', 'coefficient_1', 'coefficient_2']
    _child_classes = dict(
        species_1=species_1,
        species_2=species_2,
        coefficient_1=coefficient_1,
        coefficient_2=coefficient_2,
    )

class expert(ListObject[expert_child]):
    """
    Expert options in Park's model.
    """
    _version = '251'
    fluent_name = 'expert'
    _python_name = 'expert'
    command_names = ['list_properties', 'resize', 'list_all']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
        list_all=list_all,
    )
    child_object_type = expert_child

class translational_vibrational_energy_relaxation(Group):
    """
    Define translational-vibrational energy relaxation model.
    """
    _version = '251'
    fluent_name = 'translational-vibrational-energy-relaxation'
    _python_name = 'translational_vibrational_energy_relaxation'
    child_names = ['model', 'expert']
    _child_classes = dict(
        model=model,
        expert=expert,
    )

class two_temperature(Group):
    """
    Define two-temperature model object.
    """
    _version = '251'
    fluent_name = 'two-temperature'
    _python_name = 'two_temperature'
    child_names = ['enable', 'robustness_enhancement', 'nasa9_enhancement', 'set_verbosity', 'translational_vibrational_energy_relaxation']
    _child_classes = dict(
        enable=enable_6,
        robustness_enhancement=robustness_enhancement,
        nasa9_enhancement=nasa9_enhancement,
        set_verbosity=set_verbosity,
        translational_vibrational_energy_relaxation=translational_vibrational_energy_relaxation,
    )

class energy(Group):
    """
    The energy transport model settings.
    """
    _version = '251'
    fluent_name = 'energy'
    _python_name = 'energy'
    child_names = ['enabled', 'viscous_dissipation', 'pressure_work', 'kinetic_energy', 'inlet_diffusion', 'two_temperature']
    _child_classes = dict(
        enabled=enabled,
        viscous_dissipation=viscous_dissipation,
        pressure_work=pressure_work,
        kinetic_energy=kinetic_energy,
        inlet_diffusion=inlet_diffusion,
        two_temperature=two_temperature,
    )

class model_1(String, AllowedValuesMixin):
    """
    'model' child.
    """
    _version = '251'
    fluent_name = 'model'
    _python_name = 'model'

class spalart_allmaras_production(String, AllowedValuesMixin):
    """
    Enable/disable strain/vorticity production in Spalart-Allmaras model.
    """
    _version = '251'
    fluent_name = 'spalart-allmaras-production'
    _python_name = 'spalart_allmaras_production'

class k_epsilon_model(String, AllowedValuesMixin):
    """
    'k_epsilon_model' child.
    """
    _version = '251'
    fluent_name = 'k-epsilon-model'
    _python_name = 'k_epsilon_model'

class k_omega_model(String, AllowedValuesMixin):
    """
    'k_omega_model' child.
    """
    _version = '251'
    fluent_name = 'k-omega-model'
    _python_name = 'k_omega_model'

class kw_low_re_correction(Boolean):
    """
    Enable/disable the k-omega low Re option.
    """
    _version = '251'
    fluent_name = 'kw-low-re-correction'
    _python_name = 'kw_low_re_correction'

class kw_shear_correction(Boolean):
    """
    Enable/disable the k-omega shear-flow correction option.
    """
    _version = '251'
    fluent_name = 'kw-shear-correction'
    _python_name = 'kw_shear_correction'

class k_omega_options(Group):
    """
    'k_omega_options' child.
    """
    _version = '251'
    fluent_name = 'k-omega-options'
    _python_name = 'k_omega_options'
    child_names = ['kw_low_re_correction', 'kw_shear_correction']
    _child_classes = dict(
        kw_low_re_correction=kw_low_re_correction,
        kw_shear_correction=kw_shear_correction,
    )

class wall_distance_free(Boolean):
    """
    Enable/disable wall-distance-free version of GEKO model.
    """
    _version = '251'
    fluent_name = 'wall-distance-free?'
    _python_name = 'wall_distance_free'

class version(String, AllowedValuesMixin):
    """
    The version of the GEKO model formulation.
    """
    _version = '251'
    fluent_name = 'version'
    _python_name = 'version'

class option_4(String, AllowedValuesMixin):
    """
    CSEP option.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class value_1(Real):
    """
    Constant value for CSEP.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class expression(Real):
    """
    Expression for CSEP.
    """
    _version = '251'
    fluent_name = 'expression'
    _python_name = 'expression'

class user_defined_2(String, AllowedValuesMixin):
    """
    User-Defined Function for CSEP.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'

class csep(Group):
    """
    The GEKO model coefficient CSEP.
    """
    _version = '251'
    fluent_name = 'csep'
    _python_name = 'csep'
    child_names = ['option', 'value', 'expression', 'user_defined']
    _child_classes = dict(
        option=option_4,
        value=value_1,
        expression=expression,
        user_defined=user_defined_2,
    )

class option_5(String, AllowedValuesMixin):
    """
    CNW option.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class value_2(Real):
    """
    Constant value for CNW.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class expression_1(Real):
    """
    Expression for CNW.
    """
    _version = '251'
    fluent_name = 'expression'
    _python_name = 'expression'

class user_defined_3(String, AllowedValuesMixin):
    """
    User-Defined Function for CNW.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'

class cnw(Group):
    """
    The GEKO model coefficient CNW.
    """
    _version = '251'
    fluent_name = 'cnw'
    _python_name = 'cnw'
    child_names = ['option', 'value', 'expression', 'user_defined']
    _child_classes = dict(
        option=option_5,
        value=value_2,
        expression=expression_1,
        user_defined=user_defined_3,
    )

class option_6(String, AllowedValuesMixin):
    """
    CMIX option.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class value_3(Real):
    """
    Constant value for CMIX.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class expression_2(Real):
    """
    Expression for CMIX.
    """
    _version = '251'
    fluent_name = 'expression'
    _python_name = 'expression'

class user_defined_4(String, AllowedValuesMixin):
    """
    User-Defined Function for CMIX.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'

class cmix(Group):
    """
    The GEKO model coefficient CMIX.
    """
    _version = '251'
    fluent_name = 'cmix'
    _python_name = 'cmix'
    child_names = ['option', 'value', 'expression', 'user_defined']
    _child_classes = dict(
        option=option_6,
        value=value_3,
        expression=expression_2,
        user_defined=user_defined_4,
    )

class cjet(Real):
    """
    The GEKO model coefficient CJET.
    """
    _version = '251'
    fluent_name = 'cjet'
    _python_name = 'cjet'

class option_7(String, AllowedValuesMixin):
    """
    Blending function option.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class expression_3(Real):
    """
    Expression for blending function.
    """
    _version = '251'
    fluent_name = 'expression'
    _python_name = 'expression'

class user_defined_5(String, AllowedValuesMixin):
    """
    User-Defined Blending Function.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'

class blending_function(Group):
    """
    The GEKO model blending function.
    """
    _version = '251'
    fluent_name = 'blending-function'
    _python_name = 'blending_function'
    child_names = ['option', 'expression', 'user_defined']
    _child_classes = dict(
        option=option_7,
        expression=expression_3,
        user_defined=user_defined_5,
    )

class creal(Real):
    """
    The GEKO model coefficient CREAL.
    """
    _version = '251'
    fluent_name = 'creal'
    _python_name = 'creal'

class cnw_sub(Real):
    """
    The GEKO model coefficient CNW-SUB.
    """
    _version = '251'
    fluent_name = 'cnw-sub'
    _python_name = 'cnw_sub'

class cjet_aux(Real):
    """
    The GEKO model coefficient CJET_AUX.
    """
    _version = '251'
    fluent_name = 'cjet-aux'
    _python_name = 'cjet_aux'

class cbf_lam(Real):
    """
    The GEKO model coefficient CBF_LAM.
    """
    _version = '251'
    fluent_name = 'cbf-lam'
    _python_name = 'cbf_lam'

class cbf_tur(Real):
    """
    The GEKO model coefficient CBF_TUR.
    """
    _version = '251'
    fluent_name = 'cbf-tur'
    _python_name = 'cbf_tur'

class auxiliary_constants(Group):
    """
    Auxiliary GEKO model constanst group.
    """
    _version = '251'
    fluent_name = 'auxiliary-constants'
    _python_name = 'auxiliary_constants'
    child_names = ['creal', 'cnw_sub', 'cjet_aux', 'cbf_lam', 'cbf_tur']
    _child_classes = dict(
        creal=creal,
        cnw_sub=cnw_sub,
        cjet_aux=cjet_aux,
        cbf_lam=cbf_lam,
        cbf_tur=cbf_tur,
    )

class geko_defaults(Command):
    """
    Set GEKO options to default.
    """
    _version = '251'
    fluent_name = 'geko-defaults'
    _python_name = 'geko_defaults'

class geko_options(Group):
    """
    'geko_options' child.
    """
    _version = '251'
    fluent_name = 'geko-options'
    _python_name = 'geko_options'
    child_names = ['wall_distance_free', 'version', 'csep', 'cnw', 'cmix', 'cjet', 'blending_function', 'auxiliary_constants']
    command_names = ['geko_defaults']
    _child_classes = dict(
        wall_distance_free=wall_distance_free,
        version=version,
        csep=csep,
        cnw=cnw,
        cmix=cmix,
        cjet=cjet,
        blending_function=blending_function,
        auxiliary_constants=auxiliary_constants,
        geko_defaults=geko_defaults,
    )
    _child_aliases = dict(
        cbf_lam=('auxiliary_constants/cbf_lam', 'cbf-lam'),
        cbf_tur=('auxiliary_constants/cbf_tur', 'cbf-tur'),
        cjet_aux=('auxiliary_constants/cjet_aux', 'cjet-aux'),
        cnw_sub=('auxiliary_constants/cnw_sub', 'cnw-sub'),
        creal=('auxiliary_constants/creal', 'creal'),
    )

class differential_viscosity_model(Boolean):
    """
    Enable/disable the differential-viscosity model.
    """
    _version = '251'
    fluent_name = 'differential-viscosity-model'
    _python_name = 'differential_viscosity_model'

class swirl_dominated_flow(Boolean):
    """
    Enable/disable swirl corrections for rng-model.
    """
    _version = '251'
    fluent_name = 'swirl-dominated-flow'
    _python_name = 'swirl_dominated_flow'

class rng_options(Group):
    """
    'rng_options' child.
    """
    _version = '251'
    fluent_name = 'rng-options'
    _python_name = 'rng_options'
    child_names = ['differential_viscosity_model', 'swirl_dominated_flow']
    _child_classes = dict(
        differential_viscosity_model=differential_viscosity_model,
        swirl_dominated_flow=swirl_dominated_flow,
    )

class wall_treatment(String, AllowedValuesMixin):
    """
    'wall_treatment' child.
    """
    _version = '251'
    fluent_name = 'wall-treatment'
    _python_name = 'wall_treatment'

class user_defined_6(String, AllowedValuesMixin):
    """
    'user_defined' child.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'

class pressure_gradient_effects(Boolean):
    """
    Enable/disable wall function pressure-gradient effects.
    """
    _version = '251'
    fluent_name = 'pressure-gradient-effects'
    _python_name = 'pressure_gradient_effects'

class thermal_effects(Boolean):
    """
    Enable/disable wall function thermal effects.
    """
    _version = '251'
    fluent_name = 'thermal-effects'
    _python_name = 'thermal_effects'

class enhanced_wall_treatment_options(Group):
    """
    'enhanced_wall_treatment_options' child.
    """
    _version = '251'
    fluent_name = 'enhanced-wall-treatment-options'
    _python_name = 'enhanced_wall_treatment_options'
    child_names = ['pressure_gradient_effects', 'thermal_effects']
    _child_classes = dict(
        pressure_gradient_effects=pressure_gradient_effects,
        thermal_effects=thermal_effects,
    )

class wall_omega_treatment(String, AllowedValuesMixin):
    """
    A wall omega treatment.
    """
    _version = '251'
    fluent_name = 'wall-omega-treatment'
    _python_name = 'wall_omega_treatment'

class use_second_cell_off_a_wall_quantities(Boolean):
    """
    Enable/disable using input from second cell off a wall for the wall function.
    """
    _version = '251'
    fluent_name = 'use-second-cell-off-a-wall-quantities'
    _python_name = 'use_second_cell_off_a_wall_quantities'

class near_wall_treatment(Group):
    """
    'near_wall_treatment' child.
    """
    _version = '251'
    fluent_name = 'near-wall-treatment'
    _python_name = 'near_wall_treatment'
    child_names = ['wall_treatment', 'user_defined', 'enhanced_wall_treatment_options', 'wall_omega_treatment', 'use_second_cell_off_a_wall_quantities']
    _child_classes = dict(
        wall_treatment=wall_treatment,
        user_defined=user_defined_6,
        enhanced_wall_treatment_options=enhanced_wall_treatment_options,
        wall_omega_treatment=wall_omega_treatment,
        use_second_cell_off_a_wall_quantities=use_second_cell_off_a_wall_quantities,
    )

class reynolds_stress_model(String, AllowedValuesMixin):
    """
    'reynolds_stress_model' child.
    """
    _version = '251'
    fluent_name = 'reynolds-stress-model'
    _python_name = 'reynolds_stress_model'

class subgrid_scale_model(String, AllowedValuesMixin):
    """
    'subgrid_scale_model' child.
    """
    _version = '251'
    fluent_name = 'subgrid-scale-model'
    _python_name = 'subgrid_scale_model'

class dynamic_stress(Boolean):
    """
    Enable/Disable Dynamic model option.
    """
    _version = '251'
    fluent_name = 'dynamic-stress'
    _python_name = 'dynamic_stress'

class dynamic_energy_flux(Boolean):
    """
    Enable/disable the dynamic sub-grid scale turbulent Prandtl Number.
    """
    _version = '251'
    fluent_name = 'dynamic-energy-flux'
    _python_name = 'dynamic_energy_flux'

class dynamic_scalar_flux(Boolean):
    """
    Enable/Disable dynamic Schmidt Number.
    """
    _version = '251'
    fluent_name = 'dynamic-scalar-flux'
    _python_name = 'dynamic_scalar_flux'

class subgrid_dynamic_fvar(Boolean):
    """
    Enable/Disable the dynamic subgrid-scale mixture fraction variance model.
    """
    _version = '251'
    fluent_name = 'subgrid-dynamic-fvar'
    _python_name = 'subgrid_dynamic_fvar'

class cvreman(Real):
    """
    The Vreman Model constant.
    """
    _version = '251'
    fluent_name = 'cvreman'
    _python_name = 'cvreman'

class csigma(Real):
    """
    The Sigma Model constant.
    """
    _version = '251'
    fluent_name = 'csigma'
    _python_name = 'csigma'

class near_wall_rans_layer(Boolean):
    """
    Enable/Disable Near Wall RANS Layer (WMLES) option.
    """
    _version = '251'
    fluent_name = 'near-wall-rans-layer?'
    _python_name = 'near_wall_rans_layer'

class cw1(Real):
    """
    The Wall Model coefficient Cw1.
    """
    _version = '251'
    fluent_name = 'cw1'
    _python_name = 'cw1'

class cw2(Real):
    """
    The Wall Model coefficient Cw2.
    """
    _version = '251'
    fluent_name = 'cw2'
    _python_name = 'cw2'

class les_model_options(Group):
    """
    'les_model_options' child.
    """
    _version = '251'
    fluent_name = 'les-model-options'
    _python_name = 'les_model_options'
    child_names = ['dynamic_stress', 'dynamic_energy_flux', 'dynamic_scalar_flux', 'subgrid_dynamic_fvar', 'cvreman', 'csigma', 'near_wall_rans_layer', 'cw1', 'cw2']
    _child_classes = dict(
        dynamic_stress=dynamic_stress,
        dynamic_energy_flux=dynamic_energy_flux,
        dynamic_scalar_flux=dynamic_scalar_flux,
        subgrid_dynamic_fvar=subgrid_dynamic_fvar,
        cvreman=cvreman,
        csigma=csigma,
        near_wall_rans_layer=near_wall_rans_layer,
        cw1=cw1,
        cw2=cw2,
    )

class solve_tke(Boolean):
    """
    Enable/disable the solution of T.K.E. in RSM model.
    """
    _version = '251'
    fluent_name = 'solve-tke'
    _python_name = 'solve_tke'

class wall_echo(Boolean):
    """
    Enable/disable wall-echo effects in RSM model.
    """
    _version = '251'
    fluent_name = 'wall-echo'
    _python_name = 'wall_echo'

class reynolds_stress_options(Group):
    """
    'reynolds_stress_options' child.
    """
    _version = '251'
    fluent_name = 'reynolds-stress-options'
    _python_name = 'reynolds_stress_options'
    child_names = ['solve_tke', 'wall_echo']
    _child_classes = dict(
        solve_tke=solve_tke,
        wall_echo=wall_echo,
    )

class rans_model(String, AllowedValuesMixin):
    """
    'rans_model' child.
    """
    _version = '251'
    fluent_name = 'rans-model'
    _python_name = 'rans_model'

class all_len_modified(Boolean):
    """
    Modify all length scales in nut equation? (if no, destruction term only).
    """
    _version = '251'
    fluent_name = 'all-len-modified?'
    _python_name = 'all_len_modified'

class des_limiter_option(String, AllowedValuesMixin):
    """
    DES limiter option.
    """
    _version = '251'
    fluent_name = 'des-limiter-option'
    _python_name = 'des_limiter_option'

class des_options(Group):
    """
    'des_options' child.
    """
    _version = '251'
    fluent_name = 'des-options'
    _python_name = 'des_options'
    child_names = ['all_len_modified', 'des_limiter_option']
    _child_classes = dict(
        all_len_modified=all_len_modified,
        des_limiter_option=des_limiter_option,
    )

class transition_module(String, AllowedValuesMixin):
    """
    Enable/disable a transition model to account for transitional effects.
    """
    _version = '251'
    fluent_name = 'transition-module'
    _python_name = 'transition_module'

class hybrid_rans_les(String, AllowedValuesMixin):
    """
    Enable/disable a hybrid RANS-LES model.
    """
    _version = '251'
    fluent_name = 'hybrid-rans-les'
    _python_name = 'hybrid_rans_les'

class hybrid_model(String, AllowedValuesMixin):
    """
    The SBES / SDES hybrid model.
    """
    _version = '251'
    fluent_name = 'hybrid-model'
    _python_name = 'hybrid_model'

class user_defined_7(String, AllowedValuesMixin):
    """
    User-Defined Function for SBES.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'

class update_interval_k_omega(Integer):
    """
    An integer value how often the k and omega equations are updated in a transient SBES run.
    """
    _version = '251'
    fluent_name = 'update-interval-k-omega'
    _python_name = 'update_interval_k_omega'

class les_subgrid_scale_model(String, AllowedValuesMixin):
    """
    The LES subgrid-scale model used in SBES.
    """
    _version = '251'
    fluent_name = 'les-subgrid-scale-model'
    _python_name = 'les_subgrid_scale_model'

class les_subgrid_dynamic_fvar(Boolean):
    """
    Enable/disable the dynamic subgrid-scale mixture fraction variance model.
    """
    _version = '251'
    fluent_name = 'les-subgrid-dynamic-fvar?'
    _python_name = 'les_subgrid_dynamic_fvar'

class sbes_options(Group):
    """
    'sbes_options' child.
    """
    _version = '251'
    fluent_name = 'sbes-options'
    _python_name = 'sbes_options'
    child_names = ['hybrid_model', 'user_defined', 'update_interval_k_omega', 'les_subgrid_scale_model', 'les_subgrid_dynamic_fvar']
    _child_classes = dict(
        hybrid_model=hybrid_model,
        user_defined=user_defined_7,
        update_interval_k_omega=update_interval_k_omega,
        les_subgrid_scale_model=les_subgrid_scale_model,
        les_subgrid_dynamic_fvar=les_subgrid_dynamic_fvar,
    )

class f_length(String):
    """
    User-defined transition correlations.
    """
    _version = '251'
    fluent_name = 'f_length'
    _python_name = 'f_length'

class re_theta_c(String):
    """
    User-defined transition correlations.
    """
    _version = '251'
    fluent_name = 're_theta_c'
    _python_name = 're_theta_c'

class re_theta_t(String):
    """
    User-defined transition correlations.
    """
    _version = '251'
    fluent_name = 're_theta_t'
    _python_name = 're_theta_t'

class user_defined_transition(Group):
    """
    User-defined transition correlations.
    """
    _version = '251'
    fluent_name = 'user-defined-transition'
    _python_name = 'user_defined_transition'
    child_names = ['f_length', 're_theta_c', 're_theta_t']
    _child_classes = dict(
        f_length=f_length,
        re_theta_c=re_theta_c,
        re_theta_t=re_theta_t,
    )

class viscous_heating(Boolean):
    """
    Compute viscous energy dissipation.
    """
    _version = '251'
    fluent_name = 'viscous-heating'
    _python_name = 'viscous_heating'

class low_pressure_boundary_slip(Boolean):
    """
    Enable/disable the slip boundary formulation for low-pressure gas systems.
    """
    _version = '251'
    fluent_name = 'low-pressure-boundary-slip?'
    _python_name = 'low_pressure_boundary_slip'

class enabled_1(Boolean):
    """
    Enable/disable the curvature correction.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class option_8(String, AllowedValuesMixin):
    """
    Option for curvature correction coefficient CCURV.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class value_4(Real):
    """
    Constant value for CCURV.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class expression_4(Real):
    """
    Expression for CCURV.
    """
    _version = '251'
    fluent_name = 'expression'
    _python_name = 'expression'

class user_defined_8(String, AllowedValuesMixin):
    """
    User-Defined Function for CCURV.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'

class ccurv(Group):
    """
    The curvature correction coefficient CCURV.
    """
    _version = '251'
    fluent_name = 'ccurv'
    _python_name = 'ccurv'
    child_names = ['option', 'value', 'expression', 'user_defined']
    _child_classes = dict(
        option=option_8,
        value=value_4,
        expression=expression_4,
        user_defined=user_defined_8,
    )

class curvature_correction(Group):
    """
    Curvature correction settings.
    """
    _version = '251'
    fluent_name = 'curvature-correction'
    _python_name = 'curvature_correction'
    child_names = ['enabled', 'ccurv']
    _child_classes = dict(
        enabled=enabled_1,
        ccurv=ccurv,
    )

class enabled_2(Boolean):
    """
    Enable/disable the corner flow correction.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class option_9(String, AllowedValuesMixin):
    """
    Option for corner flow correction coefficient CCORNER.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class value_5(Real):
    """
    Constant value for CCORNER.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class expression_5(Real):
    """
    Expression for CCORNER.
    """
    _version = '251'
    fluent_name = 'expression'
    _python_name = 'expression'

class user_defined_9(String, AllowedValuesMixin):
    """
    User-Defined Function for CCORNER.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'

class ccorner(Group):
    """
    The corner flow correction coefficient CCORNER.
    """
    _version = '251'
    fluent_name = 'ccorner'
    _python_name = 'ccorner'
    child_names = ['option', 'value', 'expression', 'user_defined']
    _child_classes = dict(
        option=option_9,
        value=value_5,
        expression=expression_5,
        user_defined=user_defined_9,
    )

class corner_flow_correction(Group):
    """
    Corner flow correction settings.
    """
    _version = '251'
    fluent_name = 'corner-flow-correction'
    _python_name = 'corner_flow_correction'
    child_names = ['enabled', 'ccorner']
    _child_classes = dict(
        enabled=enabled_2,
        ccorner=ccorner,
    )

class compressibility_effects(Boolean):
    """
    Enable/disable the compressibility correction option.
    """
    _version = '251'
    fluent_name = 'compressibility-effects'
    _python_name = 'compressibility_effects'

class production_kato_launder_enabled(Boolean):
    """
    Enable/disable Kato-Launder modification for production.
    """
    _version = '251'
    fluent_name = 'production-kato-launder-enabled?'
    _python_name = 'production_kato_launder_enabled'

class enabled_3(Boolean):
    """
    Enable/disable the Production Limiter.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class clip_factor(Real):
    """
    Clip Factor for Production Limiter.
    """
    _version = '251'
    fluent_name = 'clip-factor'
    _python_name = 'clip_factor'

class production_limiter(Group):
    """
    'production_limiter' child.
    """
    _version = '251'
    fluent_name = 'production-limiter'
    _python_name = 'production_limiter'
    child_names = ['enabled', 'clip_factor']
    _child_classes = dict(
        enabled=enabled_3,
        clip_factor=clip_factor,
    )

class turb_buoyancy_effects(String, AllowedValuesMixin):
    """
    Buoyancy effects on turbulence.
    """
    _version = '251'
    fluent_name = 'turb-buoyancy-effects'
    _python_name = 'turb_buoyancy_effects'

class kw_buoyancy_effects(Boolean):
    """
    Enable/disable effects of buoyancy on k-omega turbulence model.
    """
    _version = '251'
    fluent_name = 'kw-buoyancy-effects?'
    _python_name = 'kw_buoyancy_effects'

class enable_geko(Boolean):
    """
    Enable/disable the GEKO option for RSM or EARSM.
    """
    _version = '251'
    fluent_name = 'enable-geko?'
    _python_name = 'enable_geko'

class options_1(Group):
    """
    'options' child.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['viscous_heating', 'low_pressure_boundary_slip', 'curvature_correction', 'corner_flow_correction', 'compressibility_effects', 'production_kato_launder_enabled', 'production_limiter', 'turb_buoyancy_effects', 'kw_buoyancy_effects', 'enable_geko']
    _child_classes = dict(
        viscous_heating=viscous_heating,
        low_pressure_boundary_slip=low_pressure_boundary_slip,
        curvature_correction=curvature_correction,
        corner_flow_correction=corner_flow_correction,
        compressibility_effects=compressibility_effects,
        production_kato_launder_enabled=production_kato_launder_enabled,
        production_limiter=production_limiter,
        turb_buoyancy_effects=turb_buoyancy_effects,
        kw_buoyancy_effects=kw_buoyancy_effects,
        enable_geko=enable_geko,
    )

class dispersion_force_in_momentum(Boolean):
    """
    Enable/Disable dispersion force in momentum?.
    """
    _version = '251'
    fluent_name = 'dispersion-force-in-momentum?'
    _python_name = 'dispersion_force_in_momentum'

class dispersion_in_relative_velocity(Boolean):
    """
    Enable/Disable dispersion in relative velocity?.
    """
    _version = '251'
    fluent_name = 'dispersion-in-relative-velocity?'
    _python_name = 'dispersion_in_relative_velocity'

class multiphase_options(Group):
    """
    'multiphase_options' child.
    """
    _version = '251'
    fluent_name = 'multiphase-options'
    _python_name = 'multiphase_options'
    child_names = ['dispersion_force_in_momentum', 'dispersion_in_relative_velocity']
    _child_classes = dict(
        dispersion_force_in_momentum=dispersion_force_in_momentum,
        dispersion_in_relative_velocity=dispersion_in_relative_velocity,
    )

class turbulence_multiphase_models(String, AllowedValuesMixin):
    """
    'turbulence_multiphase_models' child.
    """
    _version = '251'
    fluent_name = 'turbulence-multiphase-models'
    _python_name = 'turbulence_multiphase_models'

class rsm_multiphase_models(String, AllowedValuesMixin):
    """
    'rsm_multiphase_models' child.
    """
    _version = '251'
    fluent_name = 'rsm-multiphase-models'
    _python_name = 'rsm_multiphase_models'

class subgrid_turbulence_contribution_aiad(Boolean):
    """
    Enable/disable the Subgrid Turbulence Contribution for the AIAD model.
    """
    _version = '251'
    fluent_name = 'subgrid-turbulence-contribution-aiad?'
    _python_name = 'subgrid_turbulence_contribution_aiad'

class multiphase_turbulence(Group):
    """
    'multiphase_turbulence' child.
    """
    _version = '251'
    fluent_name = 'multiphase-turbulence'
    _python_name = 'multiphase_turbulence'
    child_names = ['multiphase_options', 'turbulence_multiphase_models', 'rsm_multiphase_models', 'subgrid_turbulence_contribution_aiad']
    _child_classes = dict(
        multiphase_options=multiphase_options,
        turbulence_multiphase_models=turbulence_multiphase_models,
        rsm_multiphase_models=rsm_multiphase_models,
        subgrid_turbulence_contribution_aiad=subgrid_turbulence_contribution_aiad,
    )

class kw_vorticity_based_production(Boolean):
    """
    Enable/disable vorticity based production.
    """
    _version = '251'
    fluent_name = 'kw-vorticity-based-production?'
    _python_name = 'kw_vorticity_based_production'

class kw_add_sas(Boolean):
    """
    Enable/disable the SAS-mode with the current turbulence model.
    """
    _version = '251'
    fluent_name = 'kw-add-sas?'
    _python_name = 'kw_add_sas'

class kw_add_des(Boolean):
    """
    Enable/disable DES-mode with the current turbulence model.
    """
    _version = '251'
    fluent_name = 'kw-add-des?'
    _python_name = 'kw_add_des'

class enable_turb_damping(Boolean):
    """
    Enable/Disable Turbulence Damping.
    """
    _version = '251'
    fluent_name = 'enable-turb-damping?'
    _python_name = 'enable_turb_damping'

class turb_damping_factor(Real):
    """
    Damping Factor.
    """
    _version = '251'
    fluent_name = 'turb-damping-factor'
    _python_name = 'turb_damping_factor'

class turbulence_damping(Group):
    """
    'turbulence_damping' child.
    """
    _version = '251'
    fluent_name = 'turbulence-damping'
    _python_name = 'turbulence_damping'
    child_names = ['enable_turb_damping', 'turb_damping_factor']
    _child_classes = dict(
        enable_turb_damping=enable_turb_damping,
        turb_damping_factor=turb_damping_factor,
    )

class rke_cmu_rotation_term(Boolean):
    """
    Enable/disable inclusion of omega in the Cmu definition.
    """
    _version = '251'
    fluent_name = 'rke-cmu-rotation-term?'
    _python_name = 'rke_cmu_rotation_term'

class turb_non_newtonian(Boolean):
    """
    Enable/disable turbulence for non-Newtonian fluids.
    """
    _version = '251'
    fluent_name = 'turb-non-newtonian?'
    _python_name = 'turb_non_newtonian'

class non_newtonian_modification(Boolean):
    """
    Enable/disable non-Newtonian modification for Lam-Bremhorst model.
    """
    _version = '251'
    fluent_name = 'non-newtonian-modification?'
    _python_name = 'non_newtonian_modification'

class turb_pk_compressible(Boolean):
    """
    Enable/disable turbulent production due to compressible divergence.
    """
    _version = '251'
    fluent_name = 'turb-pk-compressible?'
    _python_name = 'turb_pk_compressible'

class thermal_p_function(Boolean):
    """
    Enable/disable the Jayatilleke P function.
    """
    _version = '251'
    fluent_name = 'thermal-p-function?'
    _python_name = 'thermal_p_function'

class restore_sst_v61(Boolean):
    """
    Enable/disable SST formulation of v6.1.
    """
    _version = '251'
    fluent_name = 'restore-sst-v61?'
    _python_name = 'restore_sst_v61'

class turbulence_expert(Group):
    """
    'turbulence_expert' child.
    """
    _version = '251'
    fluent_name = 'turbulence-expert'
    _python_name = 'turbulence_expert'
    child_names = ['kw_vorticity_based_production', 'kw_add_sas', 'kw_add_des', 'turbulence_damping', 'rke_cmu_rotation_term', 'turb_non_newtonian', 'non_newtonian_modification', 'turb_pk_compressible', 'thermal_p_function', 'restore_sst_v61']
    _child_classes = dict(
        kw_vorticity_based_production=kw_vorticity_based_production,
        kw_add_sas=kw_add_sas,
        kw_add_des=kw_add_des,
        turbulence_damping=turbulence_damping,
        rke_cmu_rotation_term=rke_cmu_rotation_term,
        turb_non_newtonian=turb_non_newtonian,
        non_newtonian_modification=non_newtonian_modification,
        turb_pk_compressible=turb_pk_compressible,
        thermal_p_function=thermal_p_function,
        restore_sst_v61=restore_sst_v61,
    )

class crossflow_transition(Boolean):
    """
    Enable/disable crossflow transition for the intermittency transition model.
    """
    _version = '251'
    fluent_name = 'crossflow-transition?'
    _python_name = 'crossflow_transition'

class critical_reynolds_number_correlation(String):
    """
    The critical Reynolds number correlation.
    """
    _version = '251'
    fluent_name = 'critical-reynolds-number-correlation'
    _python_name = 'critical_reynolds_number_correlation'

class clambda_scale(Real):
    """
    The algebraic transition model coefficient CLAMBDA_SCALE.
    """
    _version = '251'
    fluent_name = 'clambda-scale'
    _python_name = 'clambda_scale'

class capg_hightu(Real):
    """
    The algebraic transition model coefficient CAPG_HIGHTU.
    """
    _version = '251'
    fluent_name = 'capg-hightu'
    _python_name = 'capg_hightu'

class cfpg_hightu(Real):
    """
    The algebraic transition model coefficient CFPG_HIGHTU.
    """
    _version = '251'
    fluent_name = 'cfpg-hightu'
    _python_name = 'cfpg_hightu'

class capg_lowtu(Real):
    """
    The algebraic transition model coefficient CAPG_LOWTU.
    """
    _version = '251'
    fluent_name = 'capg-lowtu'
    _python_name = 'capg_lowtu'

class cfpg_lowtu(Real):
    """
    The algebraic transition model coefficient CFPG_LOWTU.
    """
    _version = '251'
    fluent_name = 'cfpg-lowtu'
    _python_name = 'cfpg_lowtu'

class ctu_hightu(Real):
    """
    The algebraic transition model coefficient CTU_HIGHTU.
    """
    _version = '251'
    fluent_name = 'ctu-hightu'
    _python_name = 'ctu_hightu'

class ctu_lowtu(Real):
    """
    The algebraic transition model coefficient CTU_LOWTU.
    """
    _version = '251'
    fluent_name = 'ctu-lowtu'
    _python_name = 'ctu_lowtu'

class rec_max(Real):
    """
    The algebraic transition model coefficient REC_MAX.
    """
    _version = '251'
    fluent_name = 'rec-max'
    _python_name = 'rec_max'

class rec_c1(Real):
    """
    The algebraic transition model coefficient REC_C1.
    """
    _version = '251'
    fluent_name = 'rec-c1'
    _python_name = 'rec_c1'

class rec_c2(Real):
    """
    The algebraic transition model coefficient REC_C2.
    """
    _version = '251'
    fluent_name = 'rec-c2'
    _python_name = 'rec_c2'

class cbubble_c1(Real):
    """
    The algebraic transition model coefficient CBUBBLE_C1.
    """
    _version = '251'
    fluent_name = 'cbubble-c1'
    _python_name = 'cbubble_c1'

class cbubble_c2(Real):
    """
    The algebraic transition model coefficient CBUBBLE_C2.
    """
    _version = '251'
    fluent_name = 'cbubble-c2'
    _python_name = 'cbubble_c2'

class rv1_switch(Real):
    """
    The algebraic transition model coefficient RV1_SWITCH.
    """
    _version = '251'
    fluent_name = 'rv1-switch'
    _python_name = 'rv1_switch'

class transition_model_options(Group):
    """
    'transition_model_options' child.
    """
    _version = '251'
    fluent_name = 'transition-model-options'
    _python_name = 'transition_model_options'
    child_names = ['crossflow_transition', 'critical_reynolds_number_correlation', 'clambda_scale', 'capg_hightu', 'cfpg_hightu', 'capg_lowtu', 'cfpg_lowtu', 'ctu_hightu', 'ctu_lowtu', 'rec_max', 'rec_c1', 'rec_c2', 'cbubble_c1', 'cbubble_c2', 'rv1_switch']
    _child_classes = dict(
        crossflow_transition=crossflow_transition,
        critical_reynolds_number_correlation=critical_reynolds_number_correlation,
        clambda_scale=clambda_scale,
        capg_hightu=capg_hightu,
        cfpg_hightu=cfpg_hightu,
        capg_lowtu=capg_lowtu,
        cfpg_lowtu=cfpg_lowtu,
        ctu_hightu=ctu_hightu,
        ctu_lowtu=ctu_lowtu,
        rec_max=rec_max,
        rec_c1=rec_c1,
        rec_c2=rec_c2,
        cbubble_c1=cbubble_c1,
        cbubble_c2=cbubble_c2,
        rv1_switch=rv1_switch,
    )

class enable_roughness_correlation(Boolean):
    """
    Enable/Disable Transition-SST roughness correlation?.
    """
    _version = '251'
    fluent_name = 'enable-roughness-correlation?'
    _python_name = 'enable_roughness_correlation'

class roughness_correlation_fcn(String, AllowedValuesMixin):
    """
    'roughness_correlation_fcn' child.
    """
    _version = '251'
    fluent_name = 'roughness-correlation-fcn'
    _python_name = 'roughness_correlation_fcn'

class geometric_roughness_ht_val(Real):
    """
    Geometric Roughness Height.
    """
    _version = '251'
    fluent_name = 'geometric-roughness-ht-val'
    _python_name = 'geometric_roughness_ht_val'

class transition_sst_option(Group):
    """
    'transition_sst_option' child.
    """
    _version = '251'
    fluent_name = 'transition-sst-option'
    _python_name = 'transition_sst_option'
    child_names = ['enable_roughness_correlation', 'roughness_correlation_fcn', 'geometric_roughness_ht_val']
    _child_classes = dict(
        enable_roughness_correlation=enable_roughness_correlation,
        roughness_correlation_fcn=roughness_correlation_fcn,
        geometric_roughness_ht_val=geometric_roughness_ht_val,
    )

class subgrid_scale_turb_visc(String, AllowedValuesMixin):
    """
    'subgrid_scale_turb_visc' child.
    """
    _version = '251'
    fluent_name = 'subgrid-scale-turb-visc'
    _python_name = 'subgrid_scale_turb_visc'

class turb_visc_func_mf_child(String, AllowedValuesMixin):
    """
    'child_object_type' of turb_visc_func_mf.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'turb_visc_func_mf_child'

class turb_visc_func_mf(NamedObject[turb_visc_func_mf_child], CreatableNamedObjectMixin[turb_visc_func_mf_child]):
    """
    'turb_visc_func_mf' child.
    """
    _version = '251'
    fluent_name = 'turb-visc-func-mf'
    _python_name = 'turb_visc_func_mf'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = turb_visc_func_mf_child

class turb_visc_func(String, AllowedValuesMixin):
    """
    'turb_visc_func' child.
    """
    _version = '251'
    fluent_name = 'turb-visc-func'
    _python_name = 'turb_visc_func'

class tke_prandtl(String, AllowedValuesMixin):
    """
    TKE prandtl number function.
    """
    _version = '251'
    fluent_name = 'tke-prandtl'
    _python_name = 'tke_prandtl'

class tdr_prandtl(String, AllowedValuesMixin):
    """
    TDR prandtl number function.
    """
    _version = '251'
    fluent_name = 'tdr-prandtl'
    _python_name = 'tdr_prandtl'

class sdr_prandtl(String, AllowedValuesMixin):
    """
    SDR prandtl number function.
    """
    _version = '251'
    fluent_name = 'sdr-prandtl'
    _python_name = 'sdr_prandtl'

class energy_prandtl(String, AllowedValuesMixin):
    """
    Energy Prandtl number function.
    """
    _version = '251'
    fluent_name = 'energy-prandtl'
    _python_name = 'energy_prandtl'

class wall_prandtl(String, AllowedValuesMixin):
    """
    Wall Prandtl number function.
    """
    _version = '251'
    fluent_name = 'wall-prandtl'
    _python_name = 'wall_prandtl'

class turbulent_schmidt(String, AllowedValuesMixin):
    """
    Turbulent Schmidt number function.
    """
    _version = '251'
    fluent_name = 'turbulent-schmidt'
    _python_name = 'turbulent_schmidt'

class user_defined_1(Group):
    """
    'user_defined' child.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'
    child_names = ['subgrid_scale_turb_visc', 'turb_visc_func_mf', 'turb_visc_func', 'tke_prandtl', 'tdr_prandtl', 'sdr_prandtl', 'energy_prandtl', 'wall_prandtl', 'turbulent_schmidt']
    _child_classes = dict(
        subgrid_scale_turb_visc=subgrid_scale_turb_visc,
        turb_visc_func_mf=turb_visc_func_mf,
        turb_visc_func=turb_visc_func,
        tke_prandtl=tke_prandtl,
        tdr_prandtl=tdr_prandtl,
        sdr_prandtl=sdr_prandtl,
        energy_prandtl=energy_prandtl,
        wall_prandtl=wall_prandtl,
        turbulent_schmidt=turbulent_schmidt,
    )

class sa_enhanced_wall_treatment(Boolean):
    """
    Enable/disable the enhanced wall treatment for the Spalart-Allmaras model.
    If disabled, no smooth blending between the viscous sublayer and the
    log-law formulation is employed, as was done in versions previous to Fluent14.
    """
    _version = '251'
    fluent_name = 'sa-enhanced-wall-treatment?'
    _python_name = 'sa_enhanced_wall_treatment'

class sa_damping(Boolean):
    """
    Enable/disable the full low-Reynolds number form of Spalart-Allmaras model.
    """
    _version = '251'
    fluent_name = 'sa-damping?'
    _python_name = 'sa_damping'

class viscous(Group):
    """
    'viscous' child.
    """
    _version = '251'
    fluent_name = 'viscous'
    _python_name = 'viscous'
    child_names = ['model', 'spalart_allmaras_production', 'k_epsilon_model', 'k_omega_model', 'k_omega_options', 'geko_options', 'rng_options', 'near_wall_treatment', 'reynolds_stress_model', 'subgrid_scale_model', 'les_model_options', 'reynolds_stress_options', 'rans_model', 'des_options', 'transition_module', 'hybrid_rans_les', 'sbes_options', 'user_defined_transition', 'options', 'multiphase_turbulence', 'turbulence_expert', 'transition_model_options', 'transition_sst_option', 'user_defined', 'sa_enhanced_wall_treatment', 'sa_damping']
    _child_classes = dict(
        model=model_1,
        spalart_allmaras_production=spalart_allmaras_production,
        k_epsilon_model=k_epsilon_model,
        k_omega_model=k_omega_model,
        k_omega_options=k_omega_options,
        geko_options=geko_options,
        rng_options=rng_options,
        near_wall_treatment=near_wall_treatment,
        reynolds_stress_model=reynolds_stress_model,
        subgrid_scale_model=subgrid_scale_model,
        les_model_options=les_model_options,
        reynolds_stress_options=reynolds_stress_options,
        rans_model=rans_model,
        des_options=des_options,
        transition_module=transition_module,
        hybrid_rans_les=hybrid_rans_les,
        sbes_options=sbes_options,
        user_defined_transition=user_defined_transition,
        options=options_1,
        multiphase_turbulence=multiphase_turbulence,
        turbulence_expert=turbulence_expert,
        transition_model_options=transition_model_options,
        transition_sst_option=transition_sst_option,
        user_defined=user_defined_1,
        sa_enhanced_wall_treatment=sa_enhanced_wall_treatment,
        sa_damping=sa_damping,
    )

class model_2(String, AllowedValuesMixin):
    """
    Activate a radiation model.
    """
    _version = '251'
    fluent_name = 'model'
    _python_name = 'model'

class n_theta_divisions(Integer):
    """
    Number of polar divisions.
    """
    _version = '251'
    fluent_name = 'n-theta-divisions'
    _python_name = 'n_theta_divisions'

class n_phi_divisions(Integer):
    """
    Number of azimuthal divisions.
    """
    _version = '251'
    fluent_name = 'n-phi-divisions'
    _python_name = 'n_phi_divisions'

class n_theta_pixels(Integer):
    """
    Number of polar pixels per solid-angle.
    """
    _version = '251'
    fluent_name = 'n-theta-pixels'
    _python_name = 'n_theta_pixels'

class n_phi_pixels(Integer):
    """
    Number of azimuthal pixels per solid-angle.
    """
    _version = '251'
    fluent_name = 'n-phi-pixels'
    _python_name = 'n_phi_pixels'

class do_acceleration(Boolean):
    """
    Enable/disable acceleration of computation of DO model.
    """
    _version = '251'
    fluent_name = 'do-acceleration?'
    _python_name = 'do_acceleration'

class method_partially_specular_wall(String, AllowedValuesMixin):
    """
    Method for partially specular wall with discrete ordinate model.
    """
    _version = '251'
    fluent_name = 'method-partially-specular-wall'
    _python_name = 'method_partially_specular_wall'

class fast_second_order_discrete_ordinate(Boolean):
    """
    Enable/disable the fast-second-order option for Discrete Ordinate Model.
    """
    _version = '251'
    fluent_name = 'fast-second-order-discrete-ordinate?'
    _python_name = 'fast_second_order_discrete_ordinate'

class blending_factor(Real):
    """
    1st-order to higher-order blending factor.
    """
    _version = '251'
    fluent_name = 'blending-factor'
    _python_name = 'blending_factor'

class enable_7(Boolean):
    """
    Enabled/disable DO/Energy Coupling.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class solution_method(String, AllowedValuesMixin):
    """
    The solution method for DO/Energy Coupling.
    """
    _version = '251'
    fluent_name = 'solution-method'
    _python_name = 'solution_method'

class do_energy_coupling(Group):
    """
    Settings for DO/Energy Coupling.
    """
    _version = '251'
    fluent_name = 'do-energy-coupling'
    _python_name = 'do_energy_coupling'
    child_names = ['enable', 'solution_method']
    _child_classes = dict(
        enable=enable_7,
        solution_method=solution_method,
    )

class discrete_ordinates(Group):
    """
    Enable/disable the discrete ordinates radiation model.
    """
    _version = '251'
    fluent_name = 'discrete-ordinates'
    _python_name = 'discrete_ordinates'
    child_names = ['n_theta_divisions', 'n_phi_divisions', 'n_theta_pixels', 'n_phi_pixels', 'do_acceleration', 'method_partially_specular_wall', 'fast_second_order_discrete_ordinate', 'blending_factor', 'do_energy_coupling']
    _child_classes = dict(
        n_theta_divisions=n_theta_divisions,
        n_phi_divisions=n_phi_divisions,
        n_theta_pixels=n_theta_pixels,
        n_phi_pixels=n_phi_pixels,
        do_acceleration=do_acceleration,
        method_partially_specular_wall=method_partially_specular_wall,
        fast_second_order_discrete_ordinate=fast_second_order_discrete_ordinate,
        blending_factor=blending_factor,
        do_energy_coupling=do_energy_coupling,
    )

class number_of_histories(Integer):
    """
    The target number of histories.
    """
    _version = '251'
    fluent_name = 'number-of-histories'
    _python_name = 'number_of_histories'

class under_relaxation(Real):
    """
    Under-relaxation factor for the MC model.
    """
    _version = '251'
    fluent_name = 'under-relaxation'
    _python_name = 'under_relaxation'

class target_cells_per_volume_cluster(Integer):
    """
    The target number of cells per volume cluster.
    """
    _version = '251'
    fluent_name = 'target-cells-per-volume-cluster'
    _python_name = 'target_cells_per_volume_cluster'

class monte_carlo(Group):
    """
    Enable/disable the Monte Carlo radiation model.
    """
    _version = '251'
    fluent_name = 'monte-carlo'
    _python_name = 'monte_carlo'
    child_names = ['number_of_histories', 'under_relaxation', 'target_cells_per_volume_cluster']
    _child_classes = dict(
        number_of_histories=number_of_histories,
        under_relaxation=under_relaxation,
        target_cells_per_volume_cluster=target_cells_per_volume_cluster,
    )

class basis(String, AllowedValuesMixin):
    """
    Basis for viewfactor calculation.
    """
    _version = '251'
    fluent_name = 'basis'
    _python_name = 'basis'

class method_1(String, AllowedValuesMixin):
    """
    Method for viewfactor calculation.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class surfaces_3(String, AllowedValuesMixin):
    """
    Surfaces for hemi-cube method.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class smoothing(String, AllowedValuesMixin):
    """
    Smoothing for hemi-cube method.
    """
    _version = '251'
    fluent_name = 'smoothing'
    _python_name = 'smoothing'

class resolution(Integer):
    """
    Resolution for view-factor calculation.
    """
    _version = '251'
    fluent_name = 'resolution'
    _python_name = 'resolution'

class separation(Real):
    """
    Normalized separation distance for hemi-cube method.
    """
    _version = '251'
    fluent_name = 'separation'
    _python_name = 'separation'

class subdivide(Integer):
    """
    Number of subdivisions for hemi-cube method.
    """
    _version = '251'
    fluent_name = 'subdivide'
    _python_name = 'subdivide'

class non_participating_zone_temperature(Real):
    """
    Temperature for the non-participating boundary zones.
    """
    _version = '251'
    fluent_name = 'non-participating-zone-temperature'
    _python_name = 'non_participating_zone_temperature'

class viewfactor_settings(Group):
    """
    Viewfactor related settings.
    """
    _version = '251'
    fluent_name = 'viewfactor-settings'
    _python_name = 'viewfactor_settings'
    child_names = ['basis', 'method', 'surfaces', 'smoothing', 'resolution', 'separation', 'subdivide', 'non_participating_zone_temperature']
    _child_classes = dict(
        basis=basis,
        method=method_1,
        surfaces=surfaces_3,
        smoothing=smoothing,
        resolution=resolution,
        separation=separation,
        subdivide=subdivide,
        non_participating_zone_temperature=non_participating_zone_temperature,
    )

class enable_mesh_interface_clustering(Boolean):
    """
    Enable clustering on mesh interface.
    """
    _version = '251'
    fluent_name = 'enable-mesh-interface-clustering'
    _python_name = 'enable_mesh_interface_clustering'

class split_angle(Real):
    """
    Split angle for clustering algorithm in degrees.
    """
    _version = '251'
    fluent_name = 'split-angle'
    _python_name = 'split_angle'

class clustering_algorithm(String, AllowedValuesMixin):
    """
    The cluster algorithm.
    """
    _version = '251'
    fluent_name = 'clustering-algorithm'
    _python_name = 'clustering_algorithm'

class enable_clustering(Boolean):
    """
    Enable/Disable clustering for S2S in GPU.
    """
    _version = '251'
    fluent_name = 'enable-clustering'
    _python_name = 'enable_clustering'

class option_10(String, AllowedValuesMixin):
    """
    An option to compute faces per surface cluster.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class global_faces_per_surface_cluster(Integer):
    """
    Manually enter global faces per surface cluster.
    """
    _version = '251'
    fluent_name = 'global-faces-per-surface-cluster'
    _python_name = 'global_faces_per_surface_cluster'

class maximum_faces_per_surface_cluster(Integer):
    """
    Maximum number of faces for automatic computation of faces per surface cluster.
    """
    _version = '251'
    fluent_name = 'maximum-faces-per-surface-cluster'
    _python_name = 'maximum_faces_per_surface_cluster'

class faces_per_cluster(Group):
    """
    Settings for determining number of faces per cluster.
    """
    _version = '251'
    fluent_name = 'faces-per-cluster'
    _python_name = 'faces_per_cluster'
    child_names = ['option', 'global_faces_per_surface_cluster', 'maximum_faces_per_surface_cluster']
    _child_classes = dict(
        option=option_10,
        global_faces_per_surface_cluster=global_faces_per_surface_cluster,
        maximum_faces_per_surface_cluster=maximum_faces_per_surface_cluster,
    )

class print_thread_clusters(Command):
    """
    Prints the following for all boundary threads: thread-id, number of faces, faces per surface cluster, and the number of surface clusters.
    """
    _version = '251'
    fluent_name = 'print-thread-clusters'
    _python_name = 'print_thread_clusters'

class clustering_settings(Group):
    """
    Clustering related settings.
    """
    _version = '251'
    fluent_name = 'clustering-settings'
    _python_name = 'clustering_settings'
    child_names = ['enable_mesh_interface_clustering', 'split_angle', 'clustering_algorithm', 'enable_clustering', 'faces_per_cluster']
    command_names = ['print_thread_clusters']
    _child_classes = dict(
        enable_mesh_interface_clustering=enable_mesh_interface_clustering,
        split_angle=split_angle,
        clustering_algorithm=clustering_algorithm,
        enable_clustering=enable_clustering,
        faces_per_cluster=faces_per_cluster,
        print_thread_clusters=print_thread_clusters,
    )

class maximum_radiation_iterations(Integer):
    """
    Maximum Radiation Iterations(number of sweeps).
    """
    _version = '251'
    fluent_name = 'maximum-radiation-iterations'
    _python_name = 'maximum_radiation_iterations'

class residual_convergence_criteria(Real):
    """
    Residual Convergence Criterion.
    """
    _version = '251'
    fluent_name = 'residual-convergence-criteria'
    _python_name = 'residual_convergence_criteria'

class radiosity_solver_control(Group):
    """
    Settings for Radiosity Solver Control.
    """
    _version = '251'
    fluent_name = 'radiosity-solver-control'
    _python_name = 'radiosity_solver_control'
    child_names = ['maximum_radiation_iterations', 'residual_convergence_criteria']
    _child_classes = dict(
        maximum_radiation_iterations=maximum_radiation_iterations,
        residual_convergence_criteria=residual_convergence_criteria,
    )

class file_name_4(Filename, _OutputFile):
    """
    Name of output file for updated surface clusters and view factors.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class compute_write_vf(Command):
    """
    Compute and write both surface clusters and view factors.
    
    Parameters
    ----------
        file_name : str
            Name of output file for updated surface clusters and view factors.
    """
    _version = '251'
    fluent_name = 'compute-write-vf'
    _python_name = 'compute_write_vf'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_4,
    )

class file_name_5(Filename, _OutputFile):
    """
    Name of output file for S2S view factors from existing surface clusters with GPU-acceleration.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class compute_vf_accelerated(Command):
    """
    Compute and write only view factors from existing surface clusters with GPU-acceleration.
    
    Parameters
    ----------
        file_name : str
            Name of output file for S2S view factors from existing surface clusters with GPU-acceleration.
    """
    _version = '251'
    fluent_name = 'compute-vf-accelerated'
    _python_name = 'compute_vf_accelerated'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_5,
    )

class file_name_6(Filename, _OutputFile):
    """
    Name of output file for updated surface clusters and view factors with GPU-acceleration.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class compute_clusters_and_vf_accelerated(Command):
    """
    Compute and write both surface clusters and view factors with GPU-acceleration.
    
    Parameters
    ----------
        file_name : str
            Name of output file for updated surface clusters and view factors with GPU-acceleration.
    """
    _version = '251'
    fluent_name = 'compute-clusters-and-vf-accelerated'
    _python_name = 'compute_clusters_and_vf_accelerated'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_6,
    )

class file_name_7(Filename, _OutputFile):
    """
    Name of output file for S2S view factors from existing surface clusters.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class compute_vf_only(Command):
    """
    Compute and write only view factors from existing surface clusters.
    
    Parameters
    ----------
        file_name : str
            Name of output file for S2S view factors from existing surface clusters.
    """
    _version = '251'
    fluent_name = 'compute-vf-only'
    _python_name = 'compute_vf_only'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_7,
    )

class file_name_1_4(Filename, _InputFile):
    """
    Name of input file containing view factors.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class read_vf_file(Command):
    """
    Read an S2S file.
    
    Parameters
    ----------
        file_name_1 : str
            Name of input file containing view factors.
    """
    _version = '251'
    fluent_name = 'read-vf-file'
    _python_name = 'read_vf_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_4,
    )

class s2s(Group):
    """
    Enable/disable the Surface to Surface radiation model.
    """
    _version = '251'
    fluent_name = 's2s'
    _python_name = 's2s'
    child_names = ['viewfactor_settings', 'clustering_settings', 'radiosity_solver_control']
    command_names = ['compute_write_vf', 'compute_vf_accelerated', 'compute_clusters_and_vf_accelerated', 'compute_vf_only', 'read_vf_file']
    _child_classes = dict(
        viewfactor_settings=viewfactor_settings,
        clustering_settings=clustering_settings,
        radiosity_solver_control=radiosity_solver_control,
        compute_write_vf=compute_write_vf,
        compute_vf_accelerated=compute_vf_accelerated,
        compute_clusters_and_vf_accelerated=compute_clusters_and_vf_accelerated,
        compute_vf_only=compute_vf_only,
        read_vf_file=read_vf_file,
    )

class name_2(String):
    """
    Name of the object.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class start_1(Real):
    """
    Start of wavelength interval (mu m).
    """
    _version = '251'
    fluent_name = 'start'
    _python_name = 'start'

class end(Real):
    """
    End of wavelength interval (mu m).
    """
    _version = '251'
    fluent_name = 'end'
    _python_name = 'end'

class multiband_child(Group):
    """
    'child_object_type' of multiband.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'multiband_child'
    child_names = ['name', 'start', 'end']
    _child_classes = dict(
        name=name_2,
        start=start_1,
        end=end,
    )

class multiband(NamedObject[multiband_child], CreatableNamedObjectMixin[multiband_child]):
    """
    Multi-band information.
    """
    _version = '251'
    fluent_name = 'multiband'
    _python_name = 'multiband'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = multiband_child

class method_2(String, AllowedValuesMixin):
    """
    Specifies whether to update radiation-model based on time-step or flow-time.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class time_step_interval(Integer):
    """
    Time-step interval at which to update radiation model.
    """
    _version = '251'
    fluent_name = 'time-step-interval'
    _python_name = 'time_step_interval'

class time_interval(Real):
    """
    Flow-time interval at which to update radiation model.
    """
    _version = '251'
    fluent_name = 'time-interval'
    _python_name = 'time_interval'

class iteration_interval(Integer):
    """
    Iteration interval at which to update radiation model.
    """
    _version = '251'
    fluent_name = 'iteration-interval'
    _python_name = 'iteration_interval'

class solve_frequency(Group):
    """
    Radiation solve frequency.
    """
    _version = '251'
    fluent_name = 'solve-frequency'
    _python_name = 'solve_frequency'
    child_names = ['method', 'time_step_interval', 'time_interval', 'iteration_interval']
    _child_classes = dict(
        method=method_2,
        time_step_interval=time_step_interval,
        time_interval=time_interval,
        iteration_interval=iteration_interval,
    )

class solar_model(String, AllowedValuesMixin):
    """
    Model for solar load.
    """
    _version = '251'
    fluent_name = 'solar-model'
    _python_name = 'solar_model'

class direction_from_solar_calculator(Boolean):
    """
    Use direction computed from solar calulator?.
    """
    _version = '251'
    fluent_name = 'direction-from-solar-calculator'
    _python_name = 'direction_from_solar_calculator'

class sun_direction_vector(RealList):
    """
    Sun direction vector.
    """
    _version = '251'
    fluent_name = 'sun-direction-vector'
    _python_name = 'sun_direction_vector'

class sun_direction_vector_definition(Group):
    """
    Sun direction vector settings.
    """
    _version = '251'
    fluent_name = 'sun-direction-vector-definition'
    _python_name = 'sun_direction_vector_definition'
    child_names = ['direction_from_solar_calculator', 'sun_direction_vector']
    _child_classes = dict(
        direction_from_solar_calculator=direction_from_solar_calculator,
        sun_direction_vector=sun_direction_vector,
    )

class option_11(String, AllowedValuesMixin):
    """
    Method for specifying direct solar irradiation.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class function_of(String, AllowedValuesMixin):
    """
    What variable this object is a function of.
    """
    _version = '251'
    fluent_name = 'function-of'
    _python_name = 'function_of'

class item(Real):
    """
    Data point.
    """
    _version = '251'
    fluent_name = 'item'
    _python_name = 'item'

class value_6(Real):
    """
    Data value.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class data_points_child(Group):
    """
    'child_object_type' of data_points.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'data_points_child'
    child_names = ['item', 'value']
    _child_classes = dict(
        item=item,
        value=value_6,
    )

class data_points(ListObject[data_points_child]):
    """
    Ranges and values for piecewise-linear property.
    """
    _version = '251'
    fluent_name = 'data-points'
    _python_name = 'data_points'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = data_points_child

class piecewise_linear(Group):
    """
    Data-points for piecewise linear interpolation.
    """
    _version = '251'
    fluent_name = 'piecewise-linear'
    _python_name = 'piecewise_linear'
    child_names = ['function_of', 'data_points']
    _child_classes = dict(
        function_of=function_of,
        data_points=data_points,
    )

class function_of_1(String, AllowedValuesMixin):
    """
    The independent variable of polynomial function.
    """
    _version = '251'
    fluent_name = 'function-of'
    _python_name = 'function_of'

class coefficients(RealList):
    """
    Polynomial coefficients.
    """
    _version = '251'
    fluent_name = 'coefficients'
    _python_name = 'coefficients'

class polynomial(Group):
    """
    Coefficients for interpolation polynomial.
    """
    _version = '251'
    fluent_name = 'polynomial'
    _python_name = 'polynomial'
    child_names = ['function_of', 'coefficients']
    _child_classes = dict(
        function_of=function_of_1,
        coefficients=coefficients,
    )

class user_defined_10(String, AllowedValuesMixin):
    """
    User defined functions for direct solar irradiation.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'

class direct_solar_irradiation(Group):
    """
    Parameters for direct solar irradiation.
    """
    _version = '251'
    fluent_name = 'direct-solar-irradiation'
    _python_name = 'direct_solar_irradiation'
    child_names = ['option', 'constant', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option_11,
        constant=constant,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_10,
    )

class option_12(String, AllowedValuesMixin):
    """
    Method for specifying diffuse solar irradiation.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class user_defined_11(String, AllowedValuesMixin):
    """
    User defined functions for diffuse solar irradiation.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'

class diffuse_solar_irradiation(Group):
    """
    Parameters for diffuse solar irradiation.
    """
    _version = '251'
    fluent_name = 'diffuse-solar-irradiation'
    _python_name = 'diffuse_solar_irradiation'
    child_names = ['option', 'constant', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option_12,
        constant=constant,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_11,
    )

class spectral_fraction(Real):
    """
    Value for spectral fraction.
    """
    _version = '251'
    fluent_name = 'spectral-fraction'
    _python_name = 'spectral_fraction'

class illumination_parameters(Group):
    """
    Settings for solar illumination.
    """
    _version = '251'
    fluent_name = 'illumination-parameters'
    _python_name = 'illumination_parameters'
    child_names = ['direct_solar_irradiation', 'diffuse_solar_irradiation', 'spectral_fraction']
    _child_classes = dict(
        direct_solar_irradiation=direct_solar_irradiation,
        diffuse_solar_irradiation=diffuse_solar_irradiation,
        spectral_fraction=spectral_fraction,
    )

class quad_tree_parameters(Integer):
    """
    Maximum Quad-Tree Refinement level.
    """
    _version = '251'
    fluent_name = 'quad-tree-parameters'
    _python_name = 'quad_tree_parameters'

class ground_reflectivity(Real):
    """
    Ground Reflectivity value.
    """
    _version = '251'
    fluent_name = 'ground-reflectivity'
    _python_name = 'ground_reflectivity'

class scattering_fraction(Real):
    """
    Scattering fraction.
    """
    _version = '251'
    fluent_name = 'scattering-fraction'
    _python_name = 'scattering_fraction'

class solar_on_adjacent_fluid(Boolean):
    """
    Enable solar load for adjacent fluid cells.
    """
    _version = '251'
    fluent_name = 'solar-on-adjacent-fluid'
    _python_name = 'solar_on_adjacent_fluid'

class solar_load_frequency(Integer):
    """
    Solar model update parameters.
    """
    _version = '251'
    fluent_name = 'solar-load-frequency'
    _python_name = 'solar_load_frequency'

class longitude(Real):
    """
    Longitude.
    """
    _version = '251'
    fluent_name = 'longitude'
    _python_name = 'longitude'

class latitude(Real):
    """
    Latitude.
    """
    _version = '251'
    fluent_name = 'latitude'
    _python_name = 'latitude'

class timezone(Real):
    """
    Time zone in terms of number of hours of (positive or negative) deviation from GMT.
    """
    _version = '251'
    fluent_name = 'timezone'
    _python_name = 'timezone'

class north_x(Real):
    """
    X-value of north-direction.
    """
    _version = '251'
    fluent_name = 'north_x'
    _python_name = 'north_x'

class north_y(Real):
    """
    Y-value of north-direction.
    """
    _version = '251'
    fluent_name = 'north_y'
    _python_name = 'north_y'

class north_z(Real):
    """
    Z-value of north-direction.
    """
    _version = '251'
    fluent_name = 'north_z'
    _python_name = 'north_z'

class north_direction(Group):
    """
    North-direction in global coordinates.
    """
    _version = '251'
    fluent_name = 'north-direction'
    _python_name = 'north_direction'
    child_names = ['north_x', 'north_y', 'north_z']
    _child_classes = dict(
        north_x=north_x,
        north_y=north_y,
        north_z=north_z,
    )

class east_x(Real):
    """
    X-value of east-direction.
    """
    _version = '251'
    fluent_name = 'east_x'
    _python_name = 'east_x'

class east_y(Real):
    """
    Y-value of east-direction.
    """
    _version = '251'
    fluent_name = 'east_y'
    _python_name = 'east_y'

class east_z(Real):
    """
    Z-value of east-direction.
    """
    _version = '251'
    fluent_name = 'east_z'
    _python_name = 'east_z'

class east_direction(Group):
    """
    East-direction in global coordinates.
    """
    _version = '251'
    fluent_name = 'east-direction'
    _python_name = 'east_direction'
    child_names = ['east_x', 'east_y', 'east_z']
    _child_classes = dict(
        east_x=east_x,
        east_y=east_y,
        east_z=east_z,
    )

class day(Integer):
    """
    Day.
    """
    _version = '251'
    fluent_name = 'day'
    _python_name = 'day'

class month(Integer):
    """
    Month.
    """
    _version = '251'
    fluent_name = 'month'
    _python_name = 'month'

class hour(Integer):
    """
    Hour in 24-hour format.
    """
    _version = '251'
    fluent_name = 'hour'
    _python_name = 'hour'

class minute(Integer):
    """
    Minute.
    """
    _version = '251'
    fluent_name = 'minute'
    _python_name = 'minute'

class date_and_time(Group):
    """
    Date and time for solar load calculation.
    """
    _version = '251'
    fluent_name = 'date-and-time'
    _python_name = 'date_and_time'
    child_names = ['day', 'month', 'hour', 'minute']
    _child_classes = dict(
        day=day,
        month=month,
        hour=hour,
        minute=minute,
    )

class calculator_method(String, AllowedValuesMixin):
    """
    A method for solar calculator.
    """
    _version = '251'
    fluent_name = 'calculator-method'
    _python_name = 'calculator_method'

class sunshine_factor(Real):
    """
    The sunshine factor.
    """
    _version = '251'
    fluent_name = 'sunshine-factor'
    _python_name = 'sunshine_factor'

class solar_calculator(Group):
    """
    Settings for solar calculator.
    """
    _version = '251'
    fluent_name = 'solar-calculator'
    _python_name = 'solar_calculator'
    child_names = ['longitude', 'latitude', 'timezone', 'north_direction', 'east_direction', 'date_and_time', 'calculator_method', 'sunshine_factor']
    _child_classes = dict(
        longitude=longitude,
        latitude=latitude,
        timezone=timezone,
        north_direction=north_direction,
        east_direction=east_direction,
        date_and_time=date_and_time,
        calculator_method=calculator_method,
        sunshine_factor=sunshine_factor,
    )

class apply_full_solar_irradiation(Boolean):
    """
    Enable/Disable application of solar irradiation to first band with DO model.
    """
    _version = '251'
    fluent_name = 'apply-full-solar-irradiation?'
    _python_name = 'apply_full_solar_irradiation'

class solar_frequency_data(Real):
    """
    Auto-save solar data file frequency.
    """
    _version = '251'
    fluent_name = 'solar-frequency-data'
    _python_name = 'solar_frequency_data'

class solar_filename(Filename, _InputFile):
    """
    Filename for autoreading solar data.
    """
    _version = '251'
    fluent_name = 'solar-filename'
    _python_name = 'solar_filename'

class autoread_solar_data(Group):
    """
    Auto-read solar data parameters.
    """
    _version = '251'
    fluent_name = 'autoread-solar-data'
    _python_name = 'autoread_solar_data'
    child_names = ['solar_frequency_data', 'solar_filename']
    _child_classes = dict(
        solar_frequency_data=solar_frequency_data,
        solar_filename=solar_filename,
    )

class use_binary_format(Boolean):
    """
    Specifies whether solar data is written in binary format.
    """
    _version = '251'
    fluent_name = 'use-binary-format?'
    _python_name = 'use_binary_format'

class autosave_solar_data(Group):
    """
    Auto-save solar data parameters.
    """
    _version = '251'
    fluent_name = 'autosave-solar-data'
    _python_name = 'autosave_solar_data'
    child_names = ['solar_frequency_data', 'solar_filename', 'use_binary_format']
    _child_classes = dict(
        solar_frequency_data=solar_frequency_data,
        solar_filename=solar_filename,
        use_binary_format=use_binary_format,
    )

class solar_on_demand(Command):
    """
    Calculate solar load on demand.
    """
    _version = '251'
    fluent_name = 'solar-on-demand'
    _python_name = 'solar_on_demand'

class solar_load(Group):
    """
    Activate a solar load model.
    """
    _version = '251'
    fluent_name = 'solar-load'
    _python_name = 'solar_load'
    child_names = ['solar_model', 'sun_direction_vector_definition', 'illumination_parameters', 'quad_tree_parameters', 'ground_reflectivity', 'scattering_fraction', 'solar_on_adjacent_fluid', 'solar_load_frequency', 'solar_calculator', 'apply_full_solar_irradiation', 'autoread_solar_data', 'autosave_solar_data']
    command_names = ['solar_on_demand']
    _child_classes = dict(
        solar_model=solar_model,
        sun_direction_vector_definition=sun_direction_vector_definition,
        illumination_parameters=illumination_parameters,
        quad_tree_parameters=quad_tree_parameters,
        ground_reflectivity=ground_reflectivity,
        scattering_fraction=scattering_fraction,
        solar_on_adjacent_fluid=solar_on_adjacent_fluid,
        solar_load_frequency=solar_load_frequency,
        solar_calculator=solar_calculator,
        apply_full_solar_irradiation=apply_full_solar_irradiation,
        autoread_solar_data=autoread_solar_data,
        autosave_solar_data=autosave_solar_data,
        solar_on_demand=solar_on_demand,
    )

class radiation(Group):
    """
    Model for radiative heat-transfer.
    """
    _version = '251'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['model', 'discrete_ordinates', 'monte_carlo', 's2s', 'multiband', 'solve_frequency', 'solar_load']
    _child_classes = dict(
        model=model_2,
        discrete_ordinates=discrete_ordinates,
        monte_carlo=monte_carlo,
        s2s=s2s,
        multiband=multiband,
        solve_frequency=solve_frequency,
        solar_load=solar_load,
    )

class material_1(String, AllowedValuesMixin):
    """
    'material' child.
    """
    _version = '251'
    fluent_name = 'material'
    _python_name = 'material'

class phase_material_child(String, AllowedValuesMixin):
    """
    'child_object_type' of phase_material.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_material_child'

class phase_material(NamedObject[phase_material_child], CreatableNamedObjectMixin[phase_material_child]):
    """
    'phase_material' child.
    """
    _version = '251'
    fluent_name = 'phase-material'
    _python_name = 'phase_material'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_material_child

class number_vol_spec(Integer):
    """
    Number of Volumetric Species.
    """
    _version = '251'
    fluent_name = 'number-vol-spec'
    _python_name = 'number_vol_spec'

class model_3(Group):
    """
    'model' child.
    """
    _version = '251'
    fluent_name = 'model'
    _python_name = 'model'
    child_names = ['option', 'material', 'phase_material', 'number_vol_spec']
    _child_classes = dict(
        option=option_1,
        material=material_1,
        phase_material=phase_material,
        number_vol_spec=number_vol_spec,
    )

class inlet_diffusion_1(Boolean):
    """
    Enable/disable inclusion of diffusion at inlets.
    """
    _version = '251'
    fluent_name = 'inlet-diffusion'
    _python_name = 'inlet_diffusion'

class thermal_diffusion(Boolean):
    """
    Enable/disable thermal diffusion.
    """
    _version = '251'
    fluent_name = 'thermal-diffusion'
    _python_name = 'thermal_diffusion'

class thickened_flame_model(Boolean):
    """
    Enable/disable the thickened flame model.
    """
    _version = '251'
    fluent_name = 'thickened-flame-model'
    _python_name = 'thickened_flame_model'

class diffusion_energy_source(Boolean):
    """
    Enable/disable diffusion energy source.
    """
    _version = '251'
    fluent_name = 'diffusion-energy-source'
    _python_name = 'diffusion_energy_source'

class multi_component_diffusion_mf_child(Boolean):
    """
    'child_object_type' of multi_component_diffusion_mf.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'multi_component_diffusion_mf_child'

class multi_component_diffusion_mf(NamedObject[multi_component_diffusion_mf_child], CreatableNamedObjectMixin[multi_component_diffusion_mf_child]):
    """
    'multi_component_diffusion_mf' child.
    """
    _version = '251'
    fluent_name = 'multi-component-diffusion-mf'
    _python_name = 'multi_component_diffusion_mf'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = multi_component_diffusion_mf_child

class multi_component_diffusion(Boolean):
    """
    Enable/disable multicomponent diffusion.
    """
    _version = '251'
    fluent_name = 'multi-component-diffusion'
    _python_name = 'multi_component_diffusion'

class liquid_energy_diffusion(Boolean):
    """
    Enable/disable energy diffusion for liquid regime.
    """
    _version = '251'
    fluent_name = 'liquid-energy-diffusion'
    _python_name = 'liquid_energy_diffusion'

class save_gradients(Boolean):
    """
    Enable/disable storage of species mass fraction gradients.
    """
    _version = '251'
    fluent_name = 'save-gradients'
    _python_name = 'save_gradients'

class species_migration(Boolean):
    """
    Enable/disable ion species migration in electric field.
    """
    _version = '251'
    fluent_name = 'species-migration'
    _python_name = 'species_migration'

class species_transport_expert(Boolean):
    """
    Enable/disable the convergence acceleration method.
    """
    _version = '251'
    fluent_name = 'species-transport-expert'
    _python_name = 'species_transport_expert'

class options_2(Group):
    """
    'options' child.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['inlet_diffusion', 'thermal_diffusion', 'thickened_flame_model', 'diffusion_energy_source', 'multi_component_diffusion_mf', 'multi_component_diffusion', 'liquid_energy_diffusion', 'save_gradients', 'species_migration', 'species_transport_expert']
    _child_classes = dict(
        inlet_diffusion=inlet_diffusion_1,
        thermal_diffusion=thermal_diffusion,
        thickened_flame_model=thickened_flame_model,
        diffusion_energy_source=diffusion_energy_source,
        multi_component_diffusion_mf=multi_component_diffusion_mf,
        multi_component_diffusion=multi_component_diffusion,
        liquid_energy_diffusion=liquid_energy_diffusion,
        save_gradients=save_gradients,
        species_migration=species_migration,
        species_transport_expert=species_transport_expert,
    )

class enable_volumetric_reactions(Boolean):
    """
    Enable/disable volumetric reactions.
    """
    _version = '251'
    fluent_name = 'enable-volumetric-reactions'
    _python_name = 'enable_volumetric_reactions'

class enable_wall_surface(Boolean):
    """
    Enable/disable wall surface reactions.
    """
    _version = '251'
    fluent_name = 'enable-wall-surface'
    _python_name = 'enable_wall_surface'

class enable_particle_reactions(Boolean):
    """
    Enable/disable particle reactions.
    """
    _version = '251'
    fluent_name = 'enable-particle-reactions'
    _python_name = 'enable_particle_reactions'

class enable_electrochemical_surface(Boolean):
    """
    Enable/disable electrochemical surface reactions.
    """
    _version = '251'
    fluent_name = 'enable-electrochemical-surface'
    _python_name = 'enable_electrochemical_surface'

class reactions(Group):
    """
    'reactions' child.
    """
    _version = '251'
    fluent_name = 'reactions'
    _python_name = 'reactions'
    child_names = ['enable_volumetric_reactions', 'enable_wall_surface', 'enable_particle_reactions', 'enable_electrochemical_surface']
    _child_classes = dict(
        enable_volumetric_reactions=enable_volumetric_reactions,
        enable_wall_surface=enable_wall_surface,
        enable_particle_reactions=enable_particle_reactions,
        enable_electrochemical_surface=enable_electrochemical_surface,
    )

class heat_of_surface_reactions(Boolean):
    """
    Enable/disable heat of surface reactions.
    """
    _version = '251'
    fluent_name = 'heat-of-surface-reactions'
    _python_name = 'heat_of_surface_reactions'

class mass_deposition_source(Boolean):
    """
    Enable/disable mass deposition source due to surface reactions.
    """
    _version = '251'
    fluent_name = 'mass-deposition-source'
    _python_name = 'mass_deposition_source'

class reaction_diffusion_balance(Boolean):
    """
    Enable/disable reaction diffusion balance at reacting surface for surface reactions.
    """
    _version = '251'
    fluent_name = 'reaction-diffusion-balance'
    _python_name = 'reaction_diffusion_balance'

class surface_reaction_aggresiveness_factor(Real):
    """
    The surface reaction aggressiveness factor.
    """
    _version = '251'
    fluent_name = 'surface-reaction-aggresiveness-factor'
    _python_name = 'surface_reaction_aggresiveness_factor'

class surface_reaction_rate_temperature_factor(Real):
    """
    The surface reaction parameters for the Non-Equilibrium Thermal Model: Surface reaction-rate temperature factor.
    """
    _version = '251'
    fluent_name = 'surface-reaction-rate-temperature-factor'
    _python_name = 'surface_reaction_rate_temperature_factor'

class surface_reaction_solid_fraction(Real):
    """
    The surface reaction parameters for the Non-Equilibrium Thermal Model: Reaction heat source fraction into solid zone.
    """
    _version = '251'
    fluent_name = 'surface-reaction-solid-fraction'
    _python_name = 'surface_reaction_solid_fraction'

class wall_surface_options(Group):
    """
    'wall_surface_options' child.
    """
    _version = '251'
    fluent_name = 'wall-surface-options'
    _python_name = 'wall_surface_options'
    child_names = ['heat_of_surface_reactions', 'mass_deposition_source', 'reaction_diffusion_balance', 'surface_reaction_aggresiveness_factor', 'surface_reaction_rate_temperature_factor', 'surface_reaction_solid_fraction']
    _child_classes = dict(
        heat_of_surface_reactions=heat_of_surface_reactions,
        mass_deposition_source=mass_deposition_source,
        reaction_diffusion_balance=reaction_diffusion_balance,
        surface_reaction_aggresiveness_factor=surface_reaction_aggresiveness_factor,
        surface_reaction_rate_temperature_factor=surface_reaction_rate_temperature_factor,
        surface_reaction_solid_fraction=surface_reaction_solid_fraction,
    )

class turb_chem_interaction_model(String, AllowedValuesMixin):
    """
    'turb_chem_interaction_model' child.
    """
    _version = '251'
    fluent_name = 'turb-chem-interaction-model'
    _python_name = 'turb_chem_interaction_model'

class chemistry_iterations(Integer):
    """
    Flow iterations per chemistry update.
    """
    _version = '251'
    fluent_name = 'chemistry-iterations'
    _python_name = 'chemistry_iterations'

class aggresiveness_factor(Real):
    """
    The aggressiveness factor [between 0 (most robust but slowest convergence) and 1].
    """
    _version = '251'
    fluent_name = 'aggresiveness-factor'
    _python_name = 'aggresiveness_factor'

class transport_time_scale_factor(Real):
    """
    The factor for the reaction averaging time step calculation.
    """
    _version = '251'
    fluent_name = 'transport-time-scale-factor'
    _python_name = 'transport_time_scale_factor'

class min_temperature(Real):
    """
    The minimum cell temperature for kinetics calculations.
    """
    _version = '251'
    fluent_name = 'min-temperature'
    _python_name = 'min_temperature'

class turb_chem_interaction_model_options(Group):
    """
    'turb_chem_interaction_model_options' child.
    """
    _version = '251'
    fluent_name = 'turb-chem-interaction-model-options'
    _python_name = 'turb_chem_interaction_model_options'
    child_names = ['chemistry_iterations', 'aggresiveness_factor', 'transport_time_scale_factor', 'min_temperature']
    _child_classes = dict(
        chemistry_iterations=chemistry_iterations,
        aggresiveness_factor=aggresiveness_factor,
        transport_time_scale_factor=transport_time_scale_factor,
        min_temperature=min_temperature,
    )

class linearize_convection_source(Boolean):
    """
    Enable/disable linearization of higher order convection sources.
    """
    _version = '251'
    fluent_name = 'linearize-convection-source'
    _python_name = 'linearize_convection_source'

class linearize_diffusion_source(Boolean):
    """
    Enable/disable linearization of secondary diffusion sources.
    """
    _version = '251'
    fluent_name = 'linearize-diffusion-source'
    _python_name = 'linearize_diffusion_source'

class blending(Boolean):
    """
    Enable/disable mesh quality based first-second order species blending.
    """
    _version = '251'
    fluent_name = 'blending'
    _python_name = 'blending'

class minimum_cell_quality_threshold(Real):
    """
    The minmum cell quality threshold for blending.
    """
    _version = '251'
    fluent_name = 'minimum-cell-quality-threshold'
    _python_name = 'minimum_cell_quality_threshold'

class species_transport_expert_options(Group):
    """
    'species_transport_expert_options' child.
    """
    _version = '251'
    fluent_name = 'species-transport-expert-options'
    _python_name = 'species_transport_expert_options'
    child_names = ['linearize_convection_source', 'linearize_diffusion_source', 'blending', 'minimum_cell_quality_threshold']
    _child_classes = dict(
        linearize_convection_source=linearize_convection_source,
        linearize_diffusion_source=linearize_diffusion_source,
        blending=blending,
        minimum_cell_quality_threshold=minimum_cell_quality_threshold,
    )

class edc_choice(String, AllowedValuesMixin):
    """
    'edc_choice' child.
    """
    _version = '251'
    fluent_name = 'edc-choice'
    _python_name = 'edc_choice'

class volume_fraction_constant(Real):
    """
    The Volume fraction constant.
    """
    _version = '251'
    fluent_name = 'volume-fraction-constant'
    _python_name = 'volume_fraction_constant'

class time_scale_constant(Real):
    """
    The time scale constant.
    """
    _version = '251'
    fluent_name = 'time-scale-constant'
    _python_name = 'time_scale_constant'

class edc_constant_coefficient_options(Group):
    """
    'edc_constant_coefficient_options' child.
    """
    _version = '251'
    fluent_name = 'edc-constant-coefficient-options'
    _python_name = 'edc_constant_coefficient_options'
    child_names = ['volume_fraction_constant', 'time_scale_constant']
    _child_classes = dict(
        volume_fraction_constant=volume_fraction_constant,
        time_scale_constant=time_scale_constant,
    )

class edc_pasr_mixing_model(String, AllowedValuesMixin):
    """
    The PaSR mixing model.
    """
    _version = '251'
    fluent_name = 'edc-pasr-mixing-model'
    _python_name = 'edc_pasr_mixing_model'

class mixing_constant(Real):
    """
    The mixing constant [from 0.05 to 1.0].
    """
    _version = '251'
    fluent_name = 'mixing-constant'
    _python_name = 'mixing_constant'

class fractal_dimension(Real):
    """
    The fractal dimension [from 3.0 and 5.0].
    """
    _version = '251'
    fluent_name = 'fractal-dimension'
    _python_name = 'fractal_dimension'

class edc_pasr_model_options(Group):
    """
    'edc_pasr_model_options' child.
    """
    _version = '251'
    fluent_name = 'edc-pasr-model-options'
    _python_name = 'edc_pasr_model_options'
    child_names = ['edc_pasr_mixing_model', 'mixing_constant', 'fractal_dimension']
    _child_classes = dict(
        edc_pasr_mixing_model=edc_pasr_mixing_model,
        mixing_constant=mixing_constant,
        fractal_dimension=fractal_dimension,
    )

class user_defined_edc_scales(String, AllowedValuesMixin):
    """
    'user_defined_edc_scales' child.
    """
    _version = '251'
    fluent_name = 'user-defined-edc-scales'
    _python_name = 'user_defined_edc_scales'

class edc_model_options(Group):
    """
    'edc_model_options' child.
    """
    _version = '251'
    fluent_name = 'edc-model-options'
    _python_name = 'edc_model_options'
    child_names = ['edc_choice', 'edc_constant_coefficient_options', 'edc_pasr_model_options', 'user_defined_edc_scales']
    _child_classes = dict(
        edc_choice=edc_choice,
        edc_constant_coefficient_options=edc_constant_coefficient_options,
        edc_pasr_model_options=edc_pasr_model_options,
        user_defined_edc_scales=user_defined_edc_scales,
    )

class efficiency_function(String, AllowedValuesMixin):
    """
    'efficiency_function' child.
    """
    _version = '251'
    fluent_name = 'efficiency-function'
    _python_name = 'efficiency_function'

class number_of_points_in_flame(Integer):
    """
    The number of grid points in flame.
    """
    _version = '251'
    fluent_name = 'number-of-points-in-flame'
    _python_name = 'number_of_points_in_flame'

class integral_length_scale(Real):
    """
    The integral length scale.
    """
    _version = '251'
    fluent_name = 'integral-length-scale'
    _python_name = 'integral_length_scale'

class sensor_method(String, AllowedValuesMixin):
    """
    'sensor_method' child.
    """
    _version = '251'
    fluent_name = 'sensor-method'
    _python_name = 'sensor_method'

class sensor_reaction_index(Integer):
    """
    The reaction index to use for the sensor method.
    """
    _version = '251'
    fluent_name = 'sensor-reaction-index'
    _python_name = 'sensor_reaction_index'

class beta_factor_omega_equation(Real):
    """
    The beta factor in the omega equation.
    """
    _version = '251'
    fluent_name = 'beta-factor-omega-equation'
    _python_name = 'beta_factor_omega_equation'

class sensor_num_smooths(Integer):
    """
    The number of times omega is filtered.
    """
    _version = '251'
    fluent_name = 'sensor-num-smooths'
    _python_name = 'sensor_num_smooths'

class tfm_model_options(Group):
    """
    'tfm_model_options' child.
    """
    _version = '251'
    fluent_name = 'tfm-model-options'
    _python_name = 'tfm_model_options'
    child_names = ['efficiency_function', 'number_of_points_in_flame', 'integral_length_scale', 'sensor_method', 'sensor_reaction_index', 'beta_factor_omega_equation', 'sensor_num_smooths']
    _child_classes = dict(
        efficiency_function=efficiency_function,
        number_of_points_in_flame=number_of_points_in_flame,
        integral_length_scale=integral_length_scale,
        sensor_method=sensor_method,
        sensor_reaction_index=sensor_reaction_index,
        beta_factor_omega_equation=beta_factor_omega_equation,
        sensor_num_smooths=sensor_num_smooths,
    )

class chemistry_solver(String, AllowedValuesMixin):
    """
    'chemistry_solver' child.
    """
    _version = '251'
    fluent_name = 'chemistry-solver'
    _python_name = 'chemistry_solver'

class integration_method(String, AllowedValuesMixin):
    """
    The integration method.
    """
    _version = '251'
    fluent_name = 'integration-method'
    _python_name = 'integration_method'

class absolute_ode_tolerance(Real):
    """
    The ODE Absolute error tolerance.
    """
    _version = '251'
    fluent_name = 'absolute-ode-tolerance'
    _python_name = 'absolute_ode_tolerance'

class relative_ode_tolerance(Real):
    """
    The ODE Relative error tolerance.
    """
    _version = '251'
    fluent_name = 'relative-ode-tolerance'
    _python_name = 'relative_ode_tolerance'

class integration_options(Group):
    """
    ODE parameters.
    """
    _version = '251'
    fluent_name = 'integration-options'
    _python_name = 'integration_options'
    child_names = ['absolute_ode_tolerance', 'relative_ode_tolerance']
    _child_classes = dict(
        absolute_ode_tolerance=absolute_ode_tolerance,
        relative_ode_tolerance=relative_ode_tolerance,
    )

class isat_error_tolerance(Real):
    """
    The ISAT error tolerance.
    """
    _version = '251'
    fluent_name = 'isat-error-tolerance'
    _python_name = 'isat_error_tolerance'

class isat_table_size(Real):
    """
    The Max. Storage [Mb].
    """
    _version = '251'
    fluent_name = 'isat-table-size'
    _python_name = 'isat_table_size'

class isat_verbosity(Integer):
    """
    Verbosity for ISAT output.
    """
    _version = '251'
    fluent_name = 'isat-verbosity'
    _python_name = 'isat_verbosity'

class clear_isat_table(Command):
    """
    Clear the current ISAT table.
    """
    _version = '251'
    fluent_name = 'clear-isat-table'
    _python_name = 'clear_isat_table'

class isat_options(Group):
    """
    'isat_options' child.
    """
    _version = '251'
    fluent_name = 'isat-options'
    _python_name = 'isat_options'
    child_names = ['isat_error_tolerance', 'isat_table_size', 'isat_verbosity']
    command_names = ['clear_isat_table']
    _child_classes = dict(
        isat_error_tolerance=isat_error_tolerance,
        isat_table_size=isat_table_size,
        isat_verbosity=isat_verbosity,
        clear_isat_table=clear_isat_table,
    )

class chemistry_agglomeration(Boolean):
    """
    Enable/disable chemistry agglomeration.
    """
    _version = '251'
    fluent_name = 'chemistry-agglomeration'
    _python_name = 'chemistry_agglomeration'

class chemistry_agglomeration_error_tolerance(Real):
    """
    The agglomerate chemistry error tolerance.
    """
    _version = '251'
    fluent_name = 'chemistry-agglomeration-error-tolerance'
    _python_name = 'chemistry_agglomeration_error_tolerance'

class chemistry_agglomeration_temperature_bin(Real):
    """
    The agglomerate chemistry temperature bin.
    """
    _version = '251'
    fluent_name = 'chemistry-agglomeration-temperature-bin'
    _python_name = 'chemistry_agglomeration_temperature_bin'

class chemistry_agglomeration_options(Group):
    """
    'chemistry_agglomeration_options' child.
    """
    _version = '251'
    fluent_name = 'chemistry-agglomeration-options'
    _python_name = 'chemistry_agglomeration_options'
    child_names = ['chemistry_agglomeration_error_tolerance', 'chemistry_agglomeration_temperature_bin']
    _child_classes = dict(
        chemistry_agglomeration_error_tolerance=chemistry_agglomeration_error_tolerance,
        chemistry_agglomeration_temperature_bin=chemistry_agglomeration_temperature_bin,
    )

class turbulent_rate_constant(Real):
    """
    The Turbulent Rate Constant.
    """
    _version = '251'
    fluent_name = 'turbulent-rate-constant'
    _python_name = 'turbulent_rate_constant'

class chemical_rate_constant(Real):
    """
    The Chemical Rate Constant.
    """
    _version = '251'
    fluent_name = 'chemical-rate-constant'
    _python_name = 'chemical_rate_constant'

class fuel_species(StringList, AllowedValuesMixin):
    """
    The fuel species.
    """
    _version = '251'
    fluent_name = 'fuel-species'
    _python_name = 'fuel_species'

class equilibrium_rich_flammability(Boolean):
    """
    Enable/disable slow reaction rate in rich mixtures.
    """
    _version = '251'
    fluent_name = 'equilibrium-rich-flammability'
    _python_name = 'equilibrium_rich_flammability'

class rich_equivalence_ratio_limit(Real):
    """
    The Rich equivalence ratio limit.
    """
    _version = '251'
    fluent_name = 'rich-equivalence-ratio-limit'
    _python_name = 'rich_equivalence_ratio_limit'

class exponential_factor_beta(Real):
    """
    The Exponential factor (beta).
    """
    _version = '251'
    fluent_name = 'exponential-factor-beta'
    _python_name = 'exponential_factor_beta'

class equilibrium_rich_flammability_options(Group):
    """
    'equilibrium_rich_flammability_options' child.
    """
    _version = '251'
    fluent_name = 'equilibrium-rich-flammability-options'
    _python_name = 'equilibrium_rich_flammability_options'
    child_names = ['rich_equivalence_ratio_limit', 'exponential_factor_beta']
    _child_classes = dict(
        rich_equivalence_ratio_limit=rich_equivalence_ratio_limit,
        exponential_factor_beta=exponential_factor_beta,
    )

class relax_to_equilibrium_options(Group):
    """
    'relax_to_equilibrium_options' child.
    """
    _version = '251'
    fluent_name = 'relax-to-equilibrium-options'
    _python_name = 'relax_to_equilibrium_options'
    child_names = ['turbulent_rate_constant', 'chemical_rate_constant', 'fuel_species', 'equilibrium_rich_flammability', 'equilibrium_rich_flammability_options']
    _child_classes = dict(
        turbulent_rate_constant=turbulent_rate_constant,
        chemical_rate_constant=chemical_rate_constant,
        fuel_species=fuel_species,
        equilibrium_rich_flammability=equilibrium_rich_flammability,
        equilibrium_rich_flammability_options=equilibrium_rich_flammability_options,
    )

class dynamic_mechanism_reduction(Boolean):
    """
    Enable/disable dynamic mechanism reduction.
    """
    _version = '251'
    fluent_name = 'dynamic-mechanism-reduction'
    _python_name = 'dynamic_mechanism_reduction'

class dynamic_mechanism_reduction_tolerance(Real):
    """
    The mechanism reduction error tolerance.
    """
    _version = '251'
    fluent_name = 'dynamic-mechanism-reduction-tolerance'
    _python_name = 'dynamic_mechanism_reduction_tolerance'

class dynamic_mechanism_reduction_expert(Boolean):
    """
    Enable expert options for dynamic mechanism reduction.
    """
    _version = '251'
    fluent_name = 'dynamic-mechanism-reduction-expert'
    _python_name = 'dynamic_mechanism_reduction_expert'

class dynamic_mechanism_reduction_min_target(Integer):
    """
    Minimum number of target species for dynamic mechanism reduction.
    """
    _version = '251'
    fluent_name = 'dynamic-mechanism-reduction-min-target'
    _python_name = 'dynamic_mechanism_reduction_min_target'

class dynamic_mechanism_reduction_target_threshold(Real):
    """
    Minimum mass fraction of target species.
    """
    _version = '251'
    fluent_name = 'dynamic-mechanism-reduction-target-threshold'
    _python_name = 'dynamic_mechanism_reduction_target_threshold'

class dynamic_mechanism_reduction_targets(StringList, AllowedValuesMixin):
    """
    The target species.
    """
    _version = '251'
    fluent_name = 'dynamic-mechanism-reduction-targets'
    _python_name = 'dynamic_mechanism_reduction_targets'

class dynamic_mechanism_reduction_options(Group):
    """
    'dynamic_mechanism_reduction_options' child.
    """
    _version = '251'
    fluent_name = 'dynamic-mechanism-reduction-options'
    _python_name = 'dynamic_mechanism_reduction_options'
    child_names = ['dynamic_mechanism_reduction_tolerance', 'dynamic_mechanism_reduction_expert', 'dynamic_mechanism_reduction_min_target', 'dynamic_mechanism_reduction_target_threshold', 'dynamic_mechanism_reduction_targets']
    _child_classes = dict(
        dynamic_mechanism_reduction_tolerance=dynamic_mechanism_reduction_tolerance,
        dynamic_mechanism_reduction_expert=dynamic_mechanism_reduction_expert,
        dynamic_mechanism_reduction_min_target=dynamic_mechanism_reduction_min_target,
        dynamic_mechanism_reduction_target_threshold=dynamic_mechanism_reduction_target_threshold,
        dynamic_mechanism_reduction_targets=dynamic_mechanism_reduction_targets,
    )

class dimension_reduction(Boolean):
    """
    Enable/disable dimension reduction.
    """
    _version = '251'
    fluent_name = 'dimension-reduction'
    _python_name = 'dimension_reduction'

class number_of_represented_species(Integer):
    """
    The number of represented species.
    """
    _version = '251'
    fluent_name = 'number-of-represented-species'
    _python_name = 'number_of_represented_species'

class full_mechanism_material_name(String):
    """
    The full mechanism material name.
    """
    _version = '251'
    fluent_name = 'full-mechanism-material-name'
    _python_name = 'full_mechanism_material_name'

class fuel_oxidizer_species(StringList, AllowedValuesMixin):
    """
    The fuel species.
    """
    _version = '251'
    fluent_name = 'fuel-oxidizer-species'
    _python_name = 'fuel_oxidizer_species'

class dimension_reduction_mixture_options(Group):
    """
    'dimension_reduction_mixture_options' child.
    """
    _version = '251'
    fluent_name = 'dimension-reduction-mixture-options'
    _python_name = 'dimension_reduction_mixture_options'
    child_names = ['number_of_represented_species', 'full_mechanism_material_name', 'fuel_oxidizer_species']
    _child_classes = dict(
        number_of_represented_species=number_of_represented_species,
        full_mechanism_material_name=full_mechanism_material_name,
        fuel_oxidizer_species=fuel_oxidizer_species,
    )

class integration_parameters(Group):
    """
    'integration_parameters' child.
    """
    _version = '251'
    fluent_name = 'integration-parameters'
    _python_name = 'integration_parameters'
    child_names = ['integration_method', 'integration_options', 'isat_options', 'chemistry_agglomeration', 'chemistry_agglomeration_options', 'relax_to_equilibrium_options', 'dynamic_mechanism_reduction', 'dynamic_mechanism_reduction_options', 'dimension_reduction', 'dimension_reduction_mixture_options']
    _child_classes = dict(
        integration_method=integration_method,
        integration_options=integration_options,
        isat_options=isat_options,
        chemistry_agglomeration=chemistry_agglomeration,
        chemistry_agglomeration_options=chemistry_agglomeration_options,
        relax_to_equilibrium_options=relax_to_equilibrium_options,
        dynamic_mechanism_reduction=dynamic_mechanism_reduction,
        dynamic_mechanism_reduction_options=dynamic_mechanism_reduction_options,
        dimension_reduction=dimension_reduction,
        dimension_reduction_mixture_options=dimension_reduction_mixture_options,
    )

class energy_treatment(String, AllowedValuesMixin):
    """
    Energy Treatmeant.
    """
    _version = '251'
    fluent_name = 'energy-treatment'
    _python_name = 'energy_treatment'

class state_relation(String, AllowedValuesMixin):
    """
    State Relation.
    """
    _version = '251'
    fluent_name = 'state-relation'
    _python_name = 'state_relation'

class inlet_diffusion_2(Boolean):
    """
    Enable/Disable inclusion of Diffusion at Inlets.
    """
    _version = '251'
    fluent_name = 'inlet-diffusion'
    _python_name = 'inlet_diffusion'

class compressibility(Boolean):
    """
    Enable/disable Compressibility Effects.
    """
    _version = '251'
    fluent_name = 'compressibility'
    _python_name = 'compressibility'

class liquid_micro_mix(Boolean):
    """
    Enable/Disable Liquid Micro-mixing.
    """
    _version = '251'
    fluent_name = 'liquid-micro-mix'
    _python_name = 'liquid_micro_mix'

class stoichiometric_mixture_fraction(Real):
    """
    Stoichiometric Mixture Fraction.
    """
    _version = '251'
    fluent_name = 'stoichiometric-mixture-fraction'
    _python_name = 'stoichiometric_mixture_fraction'

class options_3(Group):
    """
    PDF options.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['inlet_diffusion', 'compressibility', 'liquid_micro_mix', 'stoichiometric_mixture_fraction']
    _child_classes = dict(
        inlet_diffusion=inlet_diffusion_2,
        compressibility=compressibility,
        liquid_micro_mix=liquid_micro_mix,
        stoichiometric_mixture_fraction=stoichiometric_mixture_fraction,
    )

class operating_pressure_1(Real):
    """
    Pressure.
    """
    _version = '251'
    fluent_name = 'operating-pressure'
    _python_name = 'operating_pressure'

class equilibrium_operating_pressure(Real):
    """
    Pressure.
    """
    _version = '251'
    fluent_name = 'equilibrium-operating-pressure'
    _python_name = 'equilibrium_operating_pressure'

class model_settings(Group):
    """
    Model Settings for Pressure.
    """
    _version = '251'
    fluent_name = 'model-settings'
    _python_name = 'model_settings'
    child_names = ['operating_pressure', 'equilibrium_operating_pressure']
    _child_classes = dict(
        operating_pressure=operating_pressure_1,
        equilibrium_operating_pressure=equilibrium_operating_pressure,
    )

class flamelet_options(String, AllowedValuesMixin):
    """
    Import  or Create Flamelet.
    """
    _version = '251'
    fluent_name = 'flamelet-options'
    _python_name = 'flamelet_options'

class file_type_2(String, AllowedValuesMixin):
    """
    Flamelet File Type.
    """
    _version = '251'
    fluent_name = 'file-type'
    _python_name = 'file_type'

class flamelet_type(String, AllowedValuesMixin):
    """
    Flamelet type.
    """
    _version = '251'
    fluent_name = 'flamelet-type'
    _python_name = 'flamelet_type'

class flamelet_solution_method(String, AllowedValuesMixin):
    """
    Flamelet solution type.
    """
    _version = '251'
    fluent_name = 'flamelet-solution-method'
    _python_name = 'flamelet_solution_method'

class premixed_model(String, AllowedValuesMixin):
    """
    Pemixed Combustion Model.
    """
    _version = '251'
    fluent_name = 'premixed-model'
    _python_name = 'premixed_model'

class standard_flamelet_file(FilenameList, _InputFile):
    """
    Import Standard Flamelet File.
    """
    _version = '251'
    fluent_name = 'standard-flamelet-file'
    _python_name = 'standard_flamelet_file'

class import_standard_flamelet(Command):
    """
    Import Standard Flamelet.
    
    Parameters
    ----------
        standard_flamelet_file : List
            Import Standard Flamelet File.
    """
    _version = '251'
    fluent_name = 'import-standard-flamelet'
    _python_name = 'import_standard_flamelet'
    argument_names = ['standard_flamelet_file']
    _child_classes = dict(
        standard_flamelet_file=standard_flamelet_file,
    )

class rif_prp_file(Filename, _InputFile):
    """
    Import CFX-RIF Property PRP File.
    """
    _version = '251'
    fluent_name = 'rif-prp-file'
    _python_name = 'rif_prp_file'

class rif_flamelet_file(Filename, _InputFile):
    """
    Import RIF Flamelet File.
    """
    _version = '251'
    fluent_name = 'rif-flamelet-file'
    _python_name = 'rif_flamelet_file'

class import_rif_flamelet(Command):
    """
    Import CFX-RIF Flamelet.
    
    Parameters
    ----------
        rif_prp_file : str
            Import CFX-RIF Property PRP File.
        rif_flamelet_file : str
            Import RIF Flamelet File.
    """
    _version = '251'
    fluent_name = 'import-rif-flamelet'
    _python_name = 'import_rif_flamelet'
    argument_names = ['rif_prp_file', 'rif_flamelet_file']
    _child_classes = dict(
        rif_prp_file=rif_prp_file,
        rif_flamelet_file=rif_flamelet_file,
    )

class chemistry(Group):
    """
    PDF Chemistry Options.
    """
    _version = '251'
    fluent_name = 'chemistry'
    _python_name = 'chemistry'
    child_names = ['energy_treatment', 'state_relation', 'options', 'model_settings', 'flamelet_options', 'file_type', 'flamelet_type', 'flamelet_solution_method', 'premixed_model']
    command_names = ['import_standard_flamelet', 'import_rif_flamelet']
    _child_classes = dict(
        energy_treatment=energy_treatment,
        state_relation=state_relation,
        options=options_3,
        model_settings=model_settings,
        flamelet_options=flamelet_options,
        file_type=file_type_2,
        flamelet_type=flamelet_type,
        flamelet_solution_method=flamelet_solution_method,
        premixed_model=premixed_model,
        import_standard_flamelet=import_standard_flamelet,
        import_rif_flamelet=import_rif_flamelet,
    )

class fuel_temperature(Real):
    """
    Fuel Stream Temperature.
    """
    _version = '251'
    fluent_name = 'fuel-temperature'
    _python_name = 'fuel_temperature'

class oxidizer_temperature(Real):
    """
    Oxidizer Stream Temperature.
    """
    _version = '251'
    fluent_name = 'oxidizer-temperature'
    _python_name = 'oxidizer_temperature'

class fuel(Real):
    """
    Fuel.
    """
    _version = '251'
    fluent_name = 'fuel'
    _python_name = 'fuel'

class oxidizer(Real):
    """
    Oxi.
    """
    _version = '251'
    fluent_name = 'oxidizer'
    _python_name = 'oxidizer'

class species_boundary_child(Group):
    """
    'child_object_type' of species_boundary.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'species_boundary_child'
    child_names = ['fuel', 'oxidizer']
    _child_classes = dict(
        fuel=fuel,
        oxidizer=oxidizer,
    )

class species_boundary(NamedObject[species_boundary_child], CreatableNamedObjectMixin[species_boundary_child]):
    """
    Species Fuel and Oxidizer Fractions.
    """
    _version = '251'
    fluent_name = 'species-boundary'
    _python_name = 'species_boundary'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_boundary_child

class specify_species_in(String, AllowedValuesMixin):
    """
    Species in Mass or Mole Fraction.
    """
    _version = '251'
    fluent_name = 'specify-species-in'
    _python_name = 'specify_species_in'

class boundary(Group):
    """
    PDF Boundary Options.
    """
    _version = '251'
    fluent_name = 'boundary'
    _python_name = 'boundary'
    child_names = ['fuel_temperature', 'oxidizer_temperature', 'species_boundary', 'specify_species_in']
    _child_classes = dict(
        fuel_temperature=fuel_temperature,
        oxidizer_temperature=oxidizer_temperature,
        species_boundary=species_boundary,
        specify_species_in=specify_species_in,
    )

class initial_fourier_number(Real):
    """
    Initial Fourier Number.
    """
    _version = '251'
    fluent_name = 'initial-fourier-number'
    _python_name = 'initial_fourier_number'

class fourier_number_multiplier(Real):
    """
    Fourier Number Multiplier.
    """
    _version = '251'
    fluent_name = 'fourier-number-multiplier'
    _python_name = 'fourier_number_multiplier'

class relative_tolerance(Real):
    """
    Relative Error Tolerance.
    """
    _version = '251'
    fluent_name = 'relative-tolerance'
    _python_name = 'relative_tolerance'

class absolute_tolerance(Real):
    """
    Absolute Error Tolerance.
    """
    _version = '251'
    fluent_name = 'absolute-tolerance'
    _python_name = 'absolute_tolerance'

class flamelet_convergence_tolerance(Real):
    """
    Flamelet Convergence Tolerance.
    """
    _version = '251'
    fluent_name = 'flamelet-convergence-tolerance'
    _python_name = 'flamelet_convergence_tolerance'

class maximum_integration_time(Real):
    """
    Maximum Integration Time.
    """
    _version = '251'
    fluent_name = 'maximum-integration-time'
    _python_name = 'maximum_integration_time'

class control(Group):
    """
    PDF Control Options.
    """
    _version = '251'
    fluent_name = 'control'
    _python_name = 'control'
    child_names = ['initial_fourier_number', 'fourier_number_multiplier', 'relative_tolerance', 'absolute_tolerance', 'flamelet_convergence_tolerance', 'maximum_integration_time']
    _child_classes = dict(
        initial_fourier_number=initial_fourier_number,
        fourier_number_multiplier=fourier_number_multiplier,
        relative_tolerance=relative_tolerance,
        absolute_tolerance=absolute_tolerance,
        flamelet_convergence_tolerance=flamelet_convergence_tolerance,
        maximum_integration_time=maximum_integration_time,
    )

class number_grid_points_flamelet(Integer):
    """
    Number of Grid Points in flamelet.
    """
    _version = '251'
    fluent_name = 'number-grid-points-flamelet'
    _python_name = 'number_grid_points_flamelet'

class number_grid_points_mixture_fraction_space(Integer):
    """
    Number of Grid Points in Mixture Fraction Space.
    """
    _version = '251'
    fluent_name = 'number-grid-points-mixture-fraction-space'
    _python_name = 'number_grid_points_mixture_fraction_space'

class number_grid_points_progress_variable(Integer):
    """
    Number of Grid Points in Reaction Progress Space.
    """
    _version = '251'
    fluent_name = 'number-grid-points-progress-variable'
    _python_name = 'number_grid_points_progress_variable'

class maximum_number_of_flamelets(Integer):
    """
    Maximum Number of Flamelets.
    """
    _version = '251'
    fluent_name = 'maximum-number-of-flamelets'
    _python_name = 'maximum_number_of_flamelets'

class scalar_dissipation_stoichiometric(Real):
    """
    Scalar Dissipation at Stoichiometric Mixture Fraction.
    """
    _version = '251'
    fluent_name = 'scalar-dissipation-stoichiometric'
    _python_name = 'scalar_dissipation_stoichiometric'

class minimum_scalar_dissipation(Real):
    """
    Minimum Scalar Dissipation (Multiplier of Xsto).
    """
    _version = '251'
    fluent_name = 'minimum-scalar-dissipation'
    _python_name = 'minimum_scalar_dissipation'

class number_grid_points_enthalpy(Integer):
    """
    Number of Grid Points in Enthalpy Space.
    """
    _version = '251'
    fluent_name = 'number-grid-points-enthalpy'
    _python_name = 'number_grid_points_enthalpy'

class nonadiabatic_flamelet(Boolean):
    """
    Nonadiabatic Flamelets.
    """
    _version = '251'
    fluent_name = 'nonadiabatic-flamelet'
    _python_name = 'nonadiabatic_flamelet'

class fully_premix_flamelet(Boolean):
    """
    Fully Premixed FGM.
    """
    _version = '251'
    fluent_name = 'fully-premix-flamelet'
    _python_name = 'fully_premix_flamelet'

class fully_premix_flamelet_mixture_fraction_value(Real):
    """
    Mixture Fraction Value For Flamelet Generation.
    """
    _version = '251'
    fluent_name = 'fully-premix-flamelet-mixture-fraction-value'
    _python_name = 'fully_premix_flamelet_mixture_fraction_value'

class initial_scalar_dissipation(Real):
    """
    Initial Scalar Dissipation.
    """
    _version = '251'
    fluent_name = 'initial-scalar-dissipation'
    _python_name = 'initial_scalar_dissipation'

class scalar_dissipation_multiplier(Real):
    """
    Scalar Dissipation Multiplier.
    """
    _version = '251'
    fluent_name = 'scalar-dissipation-multiplier'
    _python_name = 'scalar_dissipation_multiplier'

class scalar_dissipation_step(Real):
    """
    Scalar Dissipation Step.
    """
    _version = '251'
    fluent_name = 'scalar-dissipation-step'
    _python_name = 'scalar_dissipation_step'

class udf_flamelet(Boolean):
    """
    User Defined Flamelet Parameters.
    """
    _version = '251'
    fluent_name = 'udf-flamelet'
    _python_name = 'udf_flamelet'

class option_13(String, AllowedValuesMixin):
    """
    UDF.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class calc_fla(Command):
    """
    Calculate Flamelets.
    """
    _version = '251'
    fluent_name = 'calc-fla'
    _python_name = 'calc_fla'

class write_flamelet_file(Filename, _OutputFile):
    """
    Name Flamelet File.
    """
    _version = '251'
    fluent_name = 'write-flamelet-file'
    _python_name = 'write_flamelet_file'

class write_flamelet_cmd(Command):
    """
    Write a flamelet file.
    
    Parameters
    ----------
        write_flamelet_file : str
            Name Flamelet File.
    """
    _version = '251'
    fluent_name = 'write-flamelet-cmd'
    _python_name = 'write_flamelet_cmd'
    argument_names = ['write_flamelet_file']
    _child_classes = dict(
        write_flamelet_file=write_flamelet_file,
    )

class flamelet_parameters(Group):
    """
    PDF Flamelet Parameters.
    """
    _version = '251'
    fluent_name = 'flamelet-parameters'
    _python_name = 'flamelet_parameters'
    child_names = ['number_grid_points_flamelet', 'number_grid_points_mixture_fraction_space', 'number_grid_points_progress_variable', 'maximum_number_of_flamelets', 'scalar_dissipation_stoichiometric', 'minimum_scalar_dissipation', 'number_grid_points_enthalpy', 'nonadiabatic_flamelet', 'fully_premix_flamelet', 'fully_premix_flamelet_mixture_fraction_value', 'initial_scalar_dissipation', 'scalar_dissipation_multiplier', 'scalar_dissipation_step', 'udf_flamelet', 'option']
    command_names = ['calc_fla', 'write_flamelet_cmd']
    _child_classes = dict(
        number_grid_points_flamelet=number_grid_points_flamelet,
        number_grid_points_mixture_fraction_space=number_grid_points_mixture_fraction_space,
        number_grid_points_progress_variable=number_grid_points_progress_variable,
        maximum_number_of_flamelets=maximum_number_of_flamelets,
        scalar_dissipation_stoichiometric=scalar_dissipation_stoichiometric,
        minimum_scalar_dissipation=minimum_scalar_dissipation,
        number_grid_points_enthalpy=number_grid_points_enthalpy,
        nonadiabatic_flamelet=nonadiabatic_flamelet,
        fully_premix_flamelet=fully_premix_flamelet,
        fully_premix_flamelet_mixture_fraction_value=fully_premix_flamelet_mixture_fraction_value,
        initial_scalar_dissipation=initial_scalar_dissipation,
        scalar_dissipation_multiplier=scalar_dissipation_multiplier,
        scalar_dissipation_step=scalar_dissipation_step,
        udf_flamelet=udf_flamelet,
        option=option_13,
        calc_fla=calc_fla,
        write_flamelet_cmd=write_flamelet_cmd,
    )

class include_equilibrium_flamelet(Boolean):
    """
    Include Equilibrium Flamelet.
    """
    _version = '251'
    fluent_name = 'include-equilibrium-flamelet'
    _python_name = 'include_equilibrium_flamelet'

class pdf_include_equilibrium_flamelet(Boolean):
    """
    Include Equilibrium Flamelet.
    """
    _version = '251'
    fluent_name = 'pdf-include-equilibrium-flamelet'
    _python_name = 'pdf_include_equilibrium_flamelet'

class automatic_refinement(Boolean):
    """
    Enable/disable Automated Grid Refinement.
    """
    _version = '251'
    fluent_name = 'automatic-refinement'
    _python_name = 'automatic_refinement'

class initial_number_grids_flamelet(Integer):
    """
    Initial Number of Grid Points in Flamelet.
    """
    _version = '251'
    fluent_name = 'initial-number-grids-flamelet'
    _python_name = 'initial_number_grids_flamelet'

class maximum_number_grids_flamelet(Integer):
    """
    Maximum Number of Grid Points in Flamelet.
    """
    _version = '251'
    fluent_name = 'maximum-number-grids-flamelet'
    _python_name = 'maximum_number_grids_flamelet'

class maximum_change_value_ratio(Real):
    """
    Maximum Change in Value Ratio.
    """
    _version = '251'
    fluent_name = 'maximum-change-value-ratio'
    _python_name = 'maximum_change_value_ratio'

class maximum_change_solve_ratio(Real):
    """
    Maximum Change in Slope Ratio.
    """
    _version = '251'
    fluent_name = 'maximum-change-solve-ratio'
    _python_name = 'maximum_change_solve_ratio'

class stoichiometric_mixture_fraction_1(Boolean):
    """
    Enable/disable Automated Grid Refinement.
    """
    _version = '251'
    fluent_name = 'stoichiometric-mixture-fraction'
    _python_name = 'stoichiometric_mixture_fraction'

class user_mixture_fraction(Boolean):
    """
    Specified mixture fraction level.
    """
    _version = '251'
    fluent_name = 'user-mixture-fraction'
    _python_name = 'user_mixture_fraction'

class user_mixture_fraction_value(Real):
    """
    Specified mixture fraction alue.
    """
    _version = '251'
    fluent_name = 'user-mixture-fraction-value'
    _python_name = 'user_mixture_fraction_value'

class refine_based(Group):
    """
    Auto Refine Flamelet in Mixture Fraction Options.
    """
    _version = '251'
    fluent_name = 'refine-based'
    _python_name = 'refine_based'
    child_names = ['stoichiometric_mixture_fraction', 'user_mixture_fraction', 'user_mixture_fraction_value']
    _child_classes = dict(
        stoichiometric_mixture_fraction=stoichiometric_mixture_fraction_1,
        user_mixture_fraction=user_mixture_fraction,
        user_mixture_fraction_value=user_mixture_fraction_value,
    )

class flamelet(Group):
    """
    PDF Flamelet Options.
    """
    _version = '251'
    fluent_name = 'flamelet'
    _python_name = 'flamelet'
    child_names = ['flamelet_parameters', 'include_equilibrium_flamelet', 'pdf_include_equilibrium_flamelet', 'automatic_refinement', 'initial_number_grids_flamelet', 'maximum_number_grids_flamelet', 'maximum_change_value_ratio', 'maximum_change_solve_ratio', 'refine_based']
    _child_classes = dict(
        flamelet_parameters=flamelet_parameters,
        include_equilibrium_flamelet=include_equilibrium_flamelet,
        pdf_include_equilibrium_flamelet=pdf_include_equilibrium_flamelet,
        automatic_refinement=automatic_refinement,
        initial_number_grids_flamelet=initial_number_grids_flamelet,
        maximum_number_grids_flamelet=maximum_number_grids_flamelet,
        maximum_change_value_ratio=maximum_change_value_ratio,
        maximum_change_solve_ratio=maximum_change_solve_ratio,
        refine_based=refine_based,
    )

class number_grid_points_progress_variable_1(Integer):
    """
    Number of Mean Progress Variable Points.
    """
    _version = '251'
    fluent_name = 'number-grid-points-progress-variable'
    _python_name = 'number_grid_points_progress_variable'

class number_grid_points_pdf(Integer):
    """
    Number of Mean Mixture Fraction Points.
    """
    _version = '251'
    fluent_name = 'number-grid-points-pdf'
    _python_name = 'number_grid_points_pdf'

class number_grid_points_progress_variable_variance(Integer):
    """
    Number of Progress Variable Variance Points.
    """
    _version = '251'
    fluent_name = 'number-grid-points-progress-variable-variance'
    _python_name = 'number_grid_points_progress_variable_variance'

class number_grid_points_mixture_fraction_variance(Integer):
    """
    Number of Mixture Fraction Variance Points.
    """
    _version = '251'
    fluent_name = 'number-grid-points-mixture-fraction-variance'
    _python_name = 'number_grid_points_mixture_fraction_variance'

class initial_grid_points(Integer):
    """
    Initial Number of Grid Points.
    """
    _version = '251'
    fluent_name = 'initial-grid-points'
    _python_name = 'initial_grid_points'

class maximum_grid_points(Integer):
    """
    Maximum Number of Grid Points.
    """
    _version = '251'
    fluent_name = 'maximum-grid-points'
    _python_name = 'maximum_grid_points'

class maximum_change_slope_ratio(Real):
    """
    Maximum Change in Slope Ratio.
    """
    _version = '251'
    fluent_name = 'maximum-change-slope-ratio'
    _python_name = 'maximum_change_slope_ratio'

class maximum_species(Integer):
    """
    Maximum Number of Species.
    """
    _version = '251'
    fluent_name = 'maximum-species'
    _python_name = 'maximum_species'

class mean_enthalpy_points(Integer):
    """
    Number of Mean Enthalpy Points.
    """
    _version = '251'
    fluent_name = 'mean-enthalpy-points'
    _python_name = 'mean_enthalpy_points'

class minimum_temperature(Real):
    """
    Minimum Temperature.
    """
    _version = '251'
    fluent_name = 'minimum-temperature'
    _python_name = 'minimum_temperature'

class automatic_grid_refinement(Boolean):
    """
    Enable/disable Automated Grid Refinement.
    """
    _version = '251'
    fluent_name = 'automatic-grid-refinement'
    _python_name = 'automatic_grid_refinement'

class table_parameters(Group):
    """
    PDF Table Parameters.
    """
    _version = '251'
    fluent_name = 'table-parameters'
    _python_name = 'table_parameters'
    child_names = ['number_grid_points_progress_variable', 'number_grid_points_pdf', 'number_grid_points_progress_variable_variance', 'number_grid_points_mixture_fraction_variance', 'initial_grid_points', 'maximum_grid_points', 'maximum_change_value_ratio', 'maximum_change_slope_ratio', 'maximum_species', 'mean_enthalpy_points', 'minimum_temperature', 'automatic_grid_refinement']
    _child_classes = dict(
        number_grid_points_progress_variable=number_grid_points_progress_variable_1,
        number_grid_points_pdf=number_grid_points_pdf,
        number_grid_points_progress_variable_variance=number_grid_points_progress_variable_variance,
        number_grid_points_mixture_fraction_variance=number_grid_points_mixture_fraction_variance,
        initial_grid_points=initial_grid_points,
        maximum_grid_points=maximum_grid_points,
        maximum_change_value_ratio=maximum_change_value_ratio,
        maximum_change_slope_ratio=maximum_change_slope_ratio,
        maximum_species=maximum_species,
        mean_enthalpy_points=mean_enthalpy_points,
        minimum_temperature=minimum_temperature,
        automatic_grid_refinement=automatic_grid_refinement,
    )

class calc_pdf(Command):
    """
    Calculate PDF.
    """
    _version = '251'
    fluent_name = 'calc-pdf'
    _python_name = 'calc_pdf'

class binary(Boolean):
    """
    Write in binary format.
    """
    _version = '251'
    fluent_name = 'binary'
    _python_name = 'binary'

class write_pdf_file(Filename, _OutputFile):
    """
    Name PDF File.
    """
    _version = '251'
    fluent_name = 'write-pdf-file'
    _python_name = 'write_pdf_file'

class write_pdf_cmd(Command):
    """
    Write a PDF file.
    
    Parameters
    ----------
        binary : bool
            Write in binary format.
        write_pdf_file : str
            Name PDF File.
    """
    _version = '251'
    fluent_name = 'write-pdf-cmd'
    _python_name = 'write_pdf_cmd'
    argument_names = ['binary', 'write_pdf_file']
    _child_classes = dict(
        binary=binary,
        write_pdf_file=write_pdf_file,
    )

class table(Group):
    """
    PDF Table Options.
    """
    _version = '251'
    fluent_name = 'table'
    _python_name = 'table'
    child_names = ['table_parameters']
    command_names = ['calc_pdf', 'write_pdf_cmd']
    _child_classes = dict(
        table_parameters=table_parameters,
        calc_pdf=calc_pdf,
        write_pdf_cmd=write_pdf_cmd,
    )

class option_14(String, AllowedValuesMixin):
    """
    Turbulence-Chemistry Interaction Options.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class turbulence_chemistry_interaction(Group):
    """
    Turbulence-Chemistry Interaction.
    """
    _version = '251'
    fluent_name = 'turbulence-chemistry-interaction'
    _python_name = 'turbulence_chemistry_interaction'
    child_names = ['option']
    _child_classes = dict(
        option=option_14,
    )

class flame_speed(String, AllowedValuesMixin):
    """
    Flame Speed Model.
    """
    _version = '251'
    fluent_name = 'flame-speed'
    _python_name = 'flame_speed'

class turbulent_length_scale_constant(Real):
    """
    Turbulent Length Scale Constant.
    """
    _version = '251'
    fluent_name = 'turbulent-length-scale-constant'
    _python_name = 'turbulent_length_scale_constant'

class turbulent_flame_speed_constant(Real):
    """
    Turbulent Flame Speed Constant.
    """
    _version = '251'
    fluent_name = 'turbulent-flame-speed-constant'
    _python_name = 'turbulent_flame_speed_constant'

class stretch_factor_coeff(Real):
    """
    Stretch Factor Coefficient.
    """
    _version = '251'
    fluent_name = 'stretch-factor-coeff'
    _python_name = 'stretch_factor_coeff'

class wall_damping_coeff(Real):
    """
    Wall Damping Coefficient.
    """
    _version = '251'
    fluent_name = 'wall-damping-coeff'
    _python_name = 'wall_damping_coeff'

class turbulent_schmidt_number(Real):
    """
    Turbulent Schmidt Number.
    """
    _version = '251'
    fluent_name = 'turbulent-schmidt-number'
    _python_name = 'turbulent_schmidt_number'

class turbulent_length_scale_constant_rans(Real):
    """
    Turbulent Length Scale Constant (RANS).
    """
    _version = '251'
    fluent_name = 'turbulent-length-scale-constant-rans'
    _python_name = 'turbulent_length_scale_constant_rans'

class turbulent_flame_speed_constant_rans(Real):
    """
    Turbulent Flame Speed Constant (RANS).
    """
    _version = '251'
    fluent_name = 'turbulent-flame-speed-constant-rans'
    _python_name = 'turbulent_flame_speed_constant_rans'

class ewald_corrector(Boolean):
    """
    Enable/disable Ewald Corrector.
    """
    _version = '251'
    fluent_name = 'ewald-corrector'
    _python_name = 'ewald_corrector'

class blint_modifier(Boolean):
    """
    Enable/disable Blint Modifier.
    """
    _version = '251'
    fluent_name = 'blint-modifier'
    _python_name = 'blint_modifier'

class flame_speed_model(Group):
    """
    Turbulence Flame Speed Options.
    """
    _version = '251'
    fluent_name = 'flame-speed-model'
    _python_name = 'flame_speed_model'
    child_names = ['flame_speed', 'turbulent_length_scale_constant', 'turbulent_flame_speed_constant', 'stretch_factor_coeff', 'wall_damping_coeff', 'turbulent_schmidt_number', 'turbulent_length_scale_constant_rans', 'turbulent_flame_speed_constant_rans', 'ewald_corrector', 'blint_modifier']
    _child_classes = dict(
        flame_speed=flame_speed,
        turbulent_length_scale_constant=turbulent_length_scale_constant,
        turbulent_flame_speed_constant=turbulent_flame_speed_constant,
        stretch_factor_coeff=stretch_factor_coeff,
        wall_damping_coeff=wall_damping_coeff,
        turbulent_schmidt_number=turbulent_schmidt_number,
        turbulent_length_scale_constant_rans=turbulent_length_scale_constant_rans,
        turbulent_flame_speed_constant_rans=turbulent_flame_speed_constant_rans,
        ewald_corrector=ewald_corrector,
        blint_modifier=blint_modifier,
    )

class variance_method(String, AllowedValuesMixin):
    """
    Variance Method.
    """
    _version = '251'
    fluent_name = 'variance-method'
    _python_name = 'variance_method'

class algebraic_variance_constant(Real):
    """
    Algebraic Variance Constant.
    """
    _version = '251'
    fluent_name = 'algebraic-variance-constant'
    _python_name = 'algebraic_variance_constant'

class variance_settings(Group):
    """
    Variance Settings.
    """
    _version = '251'
    fluent_name = 'variance-settings'
    _python_name = 'variance_settings'
    child_names = ['variance_method', 'algebraic_variance_constant']
    _child_classes = dict(
        variance_method=variance_method,
        algebraic_variance_constant=algebraic_variance_constant,
    )

class premix(Group):
    """
    PDF Premix Options.
    """
    _version = '251'
    fluent_name = 'premix'
    _python_name = 'premix'
    child_names = ['turbulence_chemistry_interaction', 'flame_speed_model', 'variance_settings']
    _child_classes = dict(
        turbulence_chemistry_interaction=turbulence_chemistry_interaction,
        flame_speed_model=flame_speed_model,
        variance_settings=variance_settings,
    )

class nonadianatic_laminar_flame_speed(Boolean):
    """
    Enable/disable Non-Adiabatic Laminar Flame Speed.
    """
    _version = '251'
    fluent_name = 'nonadianatic-laminar-flame-speed'
    _python_name = 'nonadianatic_laminar_flame_speed'

class strained_flame_speed(Boolean):
    """
    Enable/disable Strained Laminar Flame Speed.
    """
    _version = '251'
    fluent_name = 'strained-flame-speed'
    _python_name = 'strained_flame_speed'

class number_heat_loss_points(Integer):
    """
    Number of heat loss points.
    """
    _version = '251'
    fluent_name = 'number-heat-loss-points'
    _python_name = 'number_heat_loss_points'

class recalculate_property(Command):
    """
    Recalculate Properties.
    """
    _version = '251'
    fluent_name = 'recalculate-property'
    _python_name = 'recalculate_property'

class calculate_strain(Command):
    """
    Calculate Strained Flamelets.
    """
    _version = '251'
    fluent_name = 'calculate-strain'
    _python_name = 'calculate_strain'

class recompute_strain(Command):
    """
    Calculate Strained Flamelets.
    """
    _version = '251'
    fluent_name = 'recompute-strain'
    _python_name = 'recompute_strain'

class property(Group):
    """
    PDF Properties Options.
    """
    _version = '251'
    fluent_name = 'property'
    _python_name = 'property'
    child_names = ['nonadianatic_laminar_flame_speed', 'strained_flame_speed', 'number_heat_loss_points']
    command_names = ['recalculate_property', 'calculate_strain', 'recompute_strain']
    _child_classes = dict(
        nonadianatic_laminar_flame_speed=nonadianatic_laminar_flame_speed,
        strained_flame_speed=strained_flame_speed,
        number_heat_loss_points=number_heat_loss_points,
        recalculate_property=recalculate_property,
        calculate_strain=calculate_strain,
        recompute_strain=recompute_strain,
    )

class partially_premixed_model_options(Group):
    """
    Partially Premixed Model Options.
    """
    _version = '251'
    fluent_name = 'partially-premixed-model-options'
    _python_name = 'partially_premixed_model_options'
    child_names = ['chemistry', 'boundary', 'control', 'flamelet', 'table', 'premix', 'property']
    _child_classes = dict(
        chemistry=chemistry,
        boundary=boundary,
        control=control,
        flamelet=flamelet,
        table=table,
        premix=premix,
        property=property,
    )

class kinetics_input_file(Filename, _InputFile):
    """
    Kinetics Input File.
    """
    _version = '251'
    fluent_name = 'kinetics-input-file'
    _python_name = 'kinetics_input_file'

class thermodb_input_file(Filename, _InputFile):
    """
    Thermodynamic Database Input File.
    """
    _version = '251'
    fluent_name = 'thermodb-input-file'
    _python_name = 'thermodb_input_file'

class surf_mech(Boolean):
    """
    Import Surface Mechanism.
    """
    _version = '251'
    fluent_name = 'surf-mech'
    _python_name = 'surf_mech'

class trans_prop(Boolean):
    """
    Import CHEMKIN Transport Property Database.
    """
    _version = '251'
    fluent_name = 'trans-prop'
    _python_name = 'trans_prop'

class trans_input_file(Filename, _InputFile):
    """
    Transport Database File.
    """
    _version = '251'
    fluent_name = 'trans-input-file'
    _python_name = 'trans_input_file'

class surfchem_input_file(Filename, _InputFile):
    """
    Surface CHEMKIN Mechanism File.
    """
    _version = '251'
    fluent_name = 'surfchem-input-file'
    _python_name = 'surfchem_input_file'

class import_chemkin(Command):
    """
    Import Mechanism.
    
    Parameters
    ----------
        kinetics_input_file : str
            Kinetics Input File.
        thermodb_input_file : str
            Thermodynamic Database Input File.
        surf_mech : bool
            Import Surface Mechanism.
        trans_prop : bool
            Import CHEMKIN Transport Property Database.
        trans_input_file : str
            Transport Database File.
        surfchem_input_file : str
            Surface CHEMKIN Mechanism File.
    """
    _version = '251'
    fluent_name = 'import-chemkin'
    _python_name = 'import_chemkin'
    argument_names = ['kinetics_input_file', 'thermodb_input_file', 'surf_mech', 'trans_prop', 'trans_input_file', 'surfchem_input_file']
    _child_classes = dict(
        kinetics_input_file=kinetics_input_file,
        thermodb_input_file=thermodb_input_file,
        surf_mech=surf_mech,
        trans_prop=trans_prop,
        trans_input_file=trans_input_file,
        surfchem_input_file=surfchem_input_file,
    )

class species(Group):
    """
    'species' child.
    """
    _version = '251'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['model', 'options', 'reactions', 'wall_surface_options', 'turb_chem_interaction_model', 'turb_chem_interaction_model_options', 'species_transport_expert_options', 'edc_model_options', 'tfm_model_options', 'chemistry_solver', 'integration_parameters', 'partially_premixed_model_options']
    command_names = ['import_chemkin']
    _child_classes = dict(
        model=model_3,
        options=options_2,
        reactions=reactions,
        wall_surface_options=wall_surface_options,
        turb_chem_interaction_model=turb_chem_interaction_model,
        turb_chem_interaction_model_options=turb_chem_interaction_model_options,
        species_transport_expert_options=species_transport_expert_options,
        edc_model_options=edc_model_options,
        tfm_model_options=tfm_model_options,
        chemistry_solver=chemistry_solver,
        integration_parameters=integration_parameters,
        partially_premixed_model_options=partially_premixed_model_options,
        import_chemkin=import_chemkin,
    )

class enabled_4(Boolean):
    """
    Specifies whether the discrete phase affects the continuous phase flow ('two-way coupling') or not ('one-way-coupling').
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class iteration_interval_1(Integer):
    """
    The number of continuous phase iterations per DPM iteration.
    """
    _version = '251'
    fluent_name = 'iteration-interval'
    _python_name = 'iteration_interval'

class update_sources_every_iteration(Boolean):
    """
    Enable/disable update of DPM sources in the flow equations at every flow solver iteration. For unsteady simulations, this option is default and recommended.
    """
    _version = '251'
    fluent_name = 'update-sources-every-iteration?'
    _python_name = 'update_sources_every_iteration'

class interaction(Group):
    """
    Group containing interphase coupling related settings.
    """
    _version = '251'
    fluent_name = 'interaction'
    _python_name = 'interaction'
    child_names = ['enabled', 'iteration_interval', 'update_sources_every_iteration']
    _child_classes = dict(
        enabled=enabled_4,
        iteration_interval=iteration_interval_1,
        update_sources_every_iteration=update_sources_every_iteration,
    )
    _child_aliases = dict(
        option=('enabled', 'option'),
    )

class enabled_5(Boolean):
    """
    Specifies whether to use unsteady particle tracking or not.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class option_15(String, AllowedValuesMixin):
    """
    The unsteady particle tracking option.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class create_particles_at(String, AllowedValuesMixin):
    """
    Create particles every particle time step or every fluid flow time step?.
    """
    _version = '251'
    fluent_name = 'create-particles-at'
    _python_name = 'create_particles_at'

class dpm_time_step_size(Real):
    """
    The particle time step.
    """
    _version = '251'
    fluent_name = 'dpm-time-step-size'
    _python_name = 'dpm_time_step_size'

class number_of_time_steps(Integer):
    """
    Number of steps particles are advanced in time.
    """
    _version = '251'
    fluent_name = 'number-of-time-steps'
    _python_name = 'number_of_time_steps'

class clear_all_particles(Command):
    """
    Clear all particles currently in the domain.
    """
    _version = '251'
    fluent_name = 'clear-all-particles'
    _python_name = 'clear_all_particles'

class unsteady_tracking(Group):
    """
    Group containing unsteady particle tracking related settings.
    """
    _version = '251'
    fluent_name = 'unsteady-tracking'
    _python_name = 'unsteady_tracking'
    child_names = ['enabled', 'option', 'create_particles_at', 'dpm_time_step_size', 'number_of_time_steps']
    command_names = ['clear_all_particles']
    _child_classes = dict(
        enabled=enabled_5,
        option=option_15,
        create_particles_at=create_particles_at,
        dpm_time_step_size=dpm_time_step_size,
        number_of_time_steps=number_of_time_steps,
        clear_all_particles=clear_all_particles,
    )
    _child_aliases = dict(
        create_particles_every_dpm_step=('create_particles_at', 'create-particles-every-dpm-step?'),
    )

class contour_plotting(String, AllowedValuesMixin):
    """
    Enable/disable contour and vector plots of mean and rms particle data.
    """
    _version = '251'
    fluent_name = 'contour-plotting'
    _python_name = 'contour_plotting'

class general_settings(Group):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'general-settings'
    _python_name = 'general_settings'
    child_names = ['interaction', 'unsteady_tracking', 'contour_plotting']
    _child_classes = dict(
        interaction=interaction,
        unsteady_tracking=unsteady_tracking,
        contour_plotting=contour_plotting,
    )

class pressure_gradient_force(Group):
    """
    Deprecated, only for backward compatibility -- objects have been moved one level up.
    """
    _version = '251'
    fluent_name = 'pressure-gradient-force'
    _python_name = 'pressure_gradient_force'
    _child_aliases = dict(
        enabled=('../pressure_force_enabled', 'enabled?'),
    )

class saffman_lift_force_enabled(Boolean):
    """
    Enable/disable Saffman lift force acting on particles in non-uniform flow.
    """
    _version = '251'
    fluent_name = 'saffman-lift-force-enabled?'
    _python_name = 'saffman_lift_force_enabled'

class pressure_force_enabled(Boolean):
    """
    Enable/disable pressure gradient force acting on particles in non-uniform flow.
    """
    _version = '251'
    fluent_name = 'pressure-force-enabled?'
    _python_name = 'pressure_force_enabled'

class enabled_6(Boolean):
    """
    Enable/disable virtual mass force acting on particles. This force term may be important if the particle density is equal to or less than the local fluid density.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class virtual_mass_factor(Real):
    """
    The virtual mass factor.
    """
    _version = '251'
    fluent_name = 'virtual-mass-factor'
    _python_name = 'virtual_mass_factor'

class virtual_mass_force(Group):
    """
    Virtual mass force settings.
    """
    _version = '251'
    fluent_name = 'virtual-mass-force'
    _python_name = 'virtual_mass_force'
    child_names = ['enabled', 'virtual_mass_factor']
    _child_classes = dict(
        enabled=enabled_6,
        virtual_mass_factor=virtual_mass_factor,
    )

class thermophoretic_force_enabled(Boolean):
    """
    Enable/disable thermophoretic force acting on particles in flows with strong temperature gradients.
    """
    _version = '251'
    fluent_name = 'thermophoretic-force-enabled?'
    _python_name = 'thermophoretic_force_enabled'

class particle_forces(Group):
    """
    All configurable forces acting on particles.
    """
    _version = '251'
    fluent_name = 'particle-forces'
    _python_name = 'particle_forces'
    child_names = ['pressure_gradient_force', 'saffman_lift_force_enabled', 'pressure_force_enabled', 'virtual_mass_force', 'thermophoretic_force_enabled']
    _child_classes = dict(
        pressure_gradient_force=pressure_gradient_force,
        saffman_lift_force_enabled=saffman_lift_force_enabled,
        pressure_force_enabled=pressure_force_enabled,
        virtual_mass_force=virtual_mass_force,
        thermophoretic_force_enabled=thermophoretic_force_enabled,
    )

class erosion_accretion_enabled(Boolean):
    """
    Enable/disable wall erosion due to particles impacting on walls and/or accretion of particles on walls.
    """
    _version = '251'
    fluent_name = 'erosion-accretion-enabled?'
    _python_name = 'erosion_accretion_enabled'

class twoway_turb_coupl_enabled(Boolean):
    """
    Enable/disable modulation of carrier phase turbulence due to presence of particles.
    """
    _version = '251'
    fluent_name = 'twoway-turb-coupl-enabled?'
    _python_name = 'twoway_turb_coupl_enabled'

class secondary_breakup_enabled(Boolean):
    """
    Enable/disable droplet breakup due to aerodynamic forces acting on particles.
    """
    _version = '251'
    fluent_name = 'secondary-breakup-enabled?'
    _python_name = 'secondary_breakup_enabled'

class enabled_7(Boolean):
    """
    Enable/disable displacement of the continuous phase due to particles.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class blocking_max_vol_frac(Real):
    """
    The maximum value for the DPM volume fraction used in the continuous flow when the volume displacement option is active.
    """
    _version = '251'
    fluent_name = 'blocking-max-vol-frac'
    _python_name = 'blocking_max_vol_frac'

class drag_scaling_enabled(Boolean):
    """
    Enable/disable scaling of DPM drag coefficient due to inclusion of DPM volume fraction in continuous flow.
    """
    _version = '251'
    fluent_name = 'drag-scaling-enabled?'
    _python_name = 'drag_scaling_enabled'

class mom_source_scaling_enabled(Boolean):
    """
    Enable/disable scaling of DPM momentum source terms due to inclusion of DPM volume fraction in continuous flow.
    """
    _version = '251'
    fluent_name = 'mom-source-scaling-enabled?'
    _python_name = 'mom_source_scaling_enabled'

class other_source_scaling_enabled(Boolean):
    """
    Enable/disable scaling of other DPM source terms due to inclusion of DPM volume fraction in continuous flow.
    """
    _version = '251'
    fluent_name = 'other-source-scaling-enabled?'
    _python_name = 'other_source_scaling_enabled'

class volume_displacement(Group):
    """
    Volume displacement settings.
    """
    _version = '251'
    fluent_name = 'volume-displacement'
    _python_name = 'volume_displacement'
    child_names = ['enabled', 'blocking_max_vol_frac', 'drag_scaling_enabled', 'mom_source_scaling_enabled', 'other_source_scaling_enabled']
    _child_classes = dict(
        enabled=enabled_7,
        blocking_max_vol_frac=blocking_max_vol_frac,
        drag_scaling_enabled=drag_scaling_enabled,
        mom_source_scaling_enabled=mom_source_scaling_enabled,
        other_source_scaling_enabled=other_source_scaling_enabled,
    )

class enabled_8(Boolean):
    """
    Enable/disable convection/conduction in the film-to-wall heat transfer model.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class turbulent_approximation(Boolean):
    """
    Enable/disable turbulent approximation in convection/conduction film-to-wall heat transfer model.
    """
    _version = '251'
    fluent_name = 'turbulent-approximation?'
    _python_name = 'turbulent_approximation'

class convective_heat_transfer(Group):
    """
    'convective_heat_transfer' child.
    """
    _version = '251'
    fluent_name = 'convective-heat-transfer'
    _python_name = 'convective_heat_transfer'
    child_names = ['enabled', 'turbulent_approximation']
    _child_classes = dict(
        enabled=enabled_8,
        turbulent_approximation=turbulent_approximation,
    )

class include_convective_heat_transfer(Boolean):
    """
    Enable/disable convection/conduction in the film-to-wall heat transfer model.
    """
    _version = '251'
    fluent_name = 'include-convective-heat-transfer'
    _python_name = 'include_convective_heat_transfer'

class condensing_film_stationary(Boolean):
    """
    Enable/Disable movement of condensing film particles.
    """
    _version = '251'
    fluent_name = 'condensing-film-stationary?'
    _python_name = 'condensing_film_stationary'

class all_film_stationary(Boolean):
    """
    Enable/Disable acceleration of all film particles.
    """
    _version = '251'
    fluent_name = 'all-film-stationary?'
    _python_name = 'all_film_stationary'

class film_movement(Group):
    """
    Options for controlling the film particles movement.
    """
    _version = '251'
    fluent_name = 'film-movement'
    _python_name = 'film_movement'
    child_names = ['condensing_film_stationary', 'all_film_stationary']
    _child_classes = dict(
        condensing_film_stationary=condensing_film_stationary,
        all_film_stationary=all_film_stationary,
    )

class film_adds_to_dpm_concentration(Boolean):
    """
    Include/exclude LWF particle mass in the calculation of DPM Concentration.
    """
    _version = '251'
    fluent_name = 'film-adds-to-dpm-concentration?'
    _python_name = 'film_adds_to_dpm_concentration'

class leidenfrost_temp_postproc_enabled(Boolean):
    """
    Enable/disable the reporting of wall film faces above the Leidenfrost point.
    """
    _version = '251'
    fluent_name = 'leidenfrost-temp-postproc-enabled?'
    _python_name = 'leidenfrost_temp_postproc_enabled'

class enabled_9(Boolean):
    """
    Enable/disable the Leidenfrost wall film temperature limiter.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class temp_limit_rel_to_boil_point(Real):
    """
    The temperature difference above the film boiling point.
    """
    _version = '251'
    fluent_name = 'temp-limit-rel-to-boil-point'
    _python_name = 'temp_limit_rel_to_boil_point'

class temperature_limiter(Group):
    """
    Group containing settings related to wall film temperature limiters.
    """
    _version = '251'
    fluent_name = 'temperature-limiter'
    _python_name = 'temperature_limiter'
    child_names = ['leidenfrost_temp_postproc_enabled', 'enabled', 'temp_limit_rel_to_boil_point']
    _child_classes = dict(
        leidenfrost_temp_postproc_enabled=leidenfrost_temp_postproc_enabled,
        enabled=enabled_9,
        temp_limit_rel_to_boil_point=temp_limit_rel_to_boil_point,
    )

class wall_film(Group):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'wall-film'
    _python_name = 'wall_film'
    child_names = ['convective_heat_transfer', 'include_convective_heat_transfer', 'film_movement', 'film_adds_to_dpm_concentration', 'temperature_limiter']
    _child_classes = dict(
        convective_heat_transfer=convective_heat_transfer,
        include_convective_heat_transfer=include_convective_heat_transfer,
        film_movement=film_movement,
        film_adds_to_dpm_concentration=film_adds_to_dpm_concentration,
        temperature_limiter=temperature_limiter,
    )

class physical_models(Group):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'physical-models'
    _python_name = 'physical_models'
    child_names = ['particle_forces', 'erosion_accretion_enabled', 'twoway_turb_coupl_enabled', 'secondary_breakup_enabled', 'volume_displacement', 'wall_film']
    _child_classes = dict(
        particle_forces=particle_forces,
        erosion_accretion_enabled=erosion_accretion_enabled,
        twoway_turb_coupl_enabled=twoway_turb_coupl_enabled,
        secondary_breakup_enabled=secondary_breakup_enabled,
        volume_displacement=volume_displacement,
        wall_film=wall_film,
    )
    _child_aliases = dict(
        pressure_force_enabled=('particle_forces/pressure_force_enabled', 'pressure-force-enabled?'),
        pressure_gradient_force=('particle_forces/pressure_gradient_force', 'pressure-gradient-force'),
        saffman_lift_force_enabled=('particle_forces/saffman_lift_force_enabled', 'saffman-lift-force-enabled?'),
        thermophoretic_force_enabled=('particle_forces/thermophoretic_force_enabled', 'thermophoretic-force-enabled?'),
        virtual_mass_force=('particle_forces/virtual_mass_force', 'virtual-mass-force'),
    )

class max_num_steps(Integer):
    """
    The maximum number of integration steps per particle.
    """
    _version = '251'
    fluent_name = 'max-num-steps'
    _python_name = 'max_num_steps'

class option_16(String, AllowedValuesMixin):
    """
    The option to determine the initial tracking step length.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class length_scale(Real):
    """
    The tracking step length scale.
    """
    _version = '251'
    fluent_name = 'length-scale'
    _python_name = 'length_scale'

class step_length_factor(Integer):
    """
    The tracking step length factor.
    """
    _version = '251'
    fluent_name = 'step-length-factor'
    _python_name = 'step_length_factor'

class step_size_controls(Group):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'step-size-controls'
    _python_name = 'step_size_controls'
    child_names = ['option', 'length_scale', 'step_length_factor']
    _child_classes = dict(
        option=option_16,
        length_scale=length_scale,
        step_length_factor=step_length_factor,
    )

class randomize_every_iteration(Boolean):
    """
    Enable/disable changing the pseudo-random number sequences from iteration to iteration.
    """
    _version = '251'
    fluent_name = 'randomize-every-iteration?'
    _python_name = 'randomize_every_iteration'

class randomize_every_timestep(Boolean):
    """
    Enable/disable changing the pseudo-random number sequences from timestep to timestep.
    """
    _version = '251'
    fluent_name = 'randomize-every-timestep?'
    _python_name = 'randomize_every_timestep'

class tracking_statistics_format(String, AllowedValuesMixin):
    """
    Control the format of the one-line tracking statistics printed after every DPM tracking pass.
    """
    _version = '251'
    fluent_name = 'tracking-statistics-format'
    _python_name = 'tracking_statistics_format'

class verbosity_1(Integer):
    """
    The DPM tracker's verbosity level.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class reference_frame(String, AllowedValuesMixin):
    """
    Enable/disable tracking of particles in the absolute frame. Please note that tracking in the relative frame is the recommended default.
    """
    _version = '251'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'

class expert_1(Group):
    """
    Menu containing not frequently used (expert level) settings.
    """
    _version = '251'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['randomize_every_iteration', 'randomize_every_timestep', 'tracking_statistics_format', 'verbosity', 'reference_frame']
    _child_classes = dict(
        randomize_every_iteration=randomize_every_iteration,
        randomize_every_timestep=randomize_every_timestep,
        tracking_statistics_format=tracking_statistics_format,
        verbosity=verbosity_1,
        reference_frame=reference_frame,
    )

class tracking(Group):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'tracking'
    _python_name = 'tracking'
    child_names = ['max_num_steps', 'step_size_controls', 'expert']
    _child_classes = dict(
        max_num_steps=max_num_steps,
        step_size_controls=step_size_controls,
        expert=expert_1,
    )
    _child_aliases = dict(
        high_res_tracking=('../numerics/high_res_tracking', 'high-res-tracking'),
        track_in_absolute_frame_enabled=('expert/reference_frame', 'track-in-absolute-frame-enabled?'),
    )

class enabled_10(Boolean):
    """
    Enable/disable error control during tracking.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class tolerance(Real):
    """
    The maximum number of step size refinements if error control is active.
    """
    _version = '251'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'

class max_num_refinements(Integer):
    """
    The maximum number of step size refinements if error control is active.
    """
    _version = '251'
    fluent_name = 'max-num-refinements'
    _python_name = 'max_num_refinements'

class step_size_fraction(Real):
    """
    The maximum number of cells to be crossed in one step.
    """
    _version = '251'
    fluent_name = 'step-size-fraction'
    _python_name = 'step_size_fraction'

class accuracy_control(Group):
    """
    Group containing settings related to the accuracy control tracking option.
    """
    _version = '251'
    fluent_name = 'accuracy-control'
    _python_name = 'accuracy_control'
    child_names = ['enabled', 'tolerance', 'max_num_refinements', 'step_size_fraction']
    _child_classes = dict(
        enabled=enabled_10,
        tolerance=tolerance,
        max_num_refinements=max_num_refinements,
        step_size_fraction=step_size_fraction,
    )

class option_17(String, AllowedValuesMixin):
    """
    A tracking scheme used for DPM.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class low_order_scheme(String, AllowedValuesMixin):
    """
    A low-order tracking scheme used for automated tracking scheme selection.
    """
    _version = '251'
    fluent_name = 'low-order-scheme'
    _python_name = 'low_order_scheme'

class high_order_scheme(String, AllowedValuesMixin):
    """
    A high-order tracking scheme used for automated tracking scheme selection.
    """
    _version = '251'
    fluent_name = 'high-order-scheme'
    _python_name = 'high_order_scheme'

class tracking_1(Group):
    """
    Group containing DPM tracking related settings.
    """
    _version = '251'
    fluent_name = 'tracking'
    _python_name = 'tracking'
    child_names = ['accuracy_control', 'option', 'low_order_scheme', 'high_order_scheme']
    _child_classes = dict(
        accuracy_control=accuracy_control,
        option=option_17,
        low_order_scheme=low_order_scheme,
        high_order_scheme=high_order_scheme,
    )
    _child_aliases = dict(
        scheme=('option', 'scheme'),
    )

class enabled_11(Boolean):
    """
    Enable/disable linearization of DPM source terms.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class enhanced_formulation_enabled(Boolean):
    """
    Enable/disable enhanced DPM source terms linearization.
    """
    _version = '251'
    fluent_name = 'enhanced-formulation-enabled?'
    _python_name = 'enhanced_formulation_enabled'

class constant_during_iterations(Boolean):
    """
    Enable/disable keeping linearized DPM source terms constant until the next DPM Update.
    """
    _version = '251'
    fluent_name = 'constant-during-iterations?'
    _python_name = 'constant_during_iterations'

class limiter(Real):
    """
    Relative limit for DPM source linear coefficient with respect to fluid linear Ap coefficient.
    """
    _version = '251'
    fluent_name = 'limiter'
    _python_name = 'limiter'

class linearization(Group):
    """
    Menu containing options to enable/disable linearization of DPM source terms. 
    Please note that source term linearization is only available if the node-based averaging option is not active.
    """
    _version = '251'
    fluent_name = 'linearization'
    _python_name = 'linearization'
    child_names = ['enabled', 'enhanced_formulation_enabled', 'constant_during_iterations', 'limiter']
    _child_classes = dict(
        enabled=enabled_11,
        enhanced_formulation_enabled=enhanced_formulation_enabled,
        constant_during_iterations=constant_during_iterations,
        limiter=limiter,
    )
    _child_aliases = dict(
        constant_during_flow_iterations=('constant_during_iterations', 'constant-during-flow-iterations?'),
        enhanced_form_enabled=('enhanced_formulation_enabled', 'enhanced-form-enabled?'),
    )

class impl_mom_cplg_enabled(Boolean):
    """
    Enable/disable implicit treatment for the DPM momentum source terms.
    """
    _version = '251'
    fluent_name = 'impl-mom-cplg-enabled?'
    _python_name = 'impl_mom_cplg_enabled'

class impl_cplg_enabled(Boolean):
    """
    Enable/disable implicit treatment for all DPM source terms.
    """
    _version = '251'
    fluent_name = 'impl-cplg-enabled?'
    _python_name = 'impl_cplg_enabled'

class linear_change_enabled(Boolean):
    """
    Enable/disable the linear growth of DPM source terms every DPM iteration.
    """
    _version = '251'
    fluent_name = 'linear-change-enabled?'
    _python_name = 'linear_change_enabled'

class reset_sources_at_timestep(Boolean):
    """
    Enable/disable flushing of DPM source terms at beginning of every time step.
    """
    _version = '251'
    fluent_name = 'reset-sources-at-timestep?'
    _python_name = 'reset_sources_at_timestep'

class underrelaxation_factor(Real):
    """
    The DPM source term under-relaxation factor.
    """
    _version = '251'
    fluent_name = 'underrelaxation-factor'
    _python_name = 'underrelaxation_factor'

class time_accurate_sources_enabled(Boolean):
    """
    Enable/disable second order accurate formulation for transient DPM source terms.
    """
    _version = '251'
    fluent_name = 'time-accurate-sources-enabled?'
    _python_name = 'time_accurate_sources_enabled'

class source_term_settings(Group):
    """
    Group containing DPM source term related settings.
    """
    _version = '251'
    fluent_name = 'source-term-settings'
    _python_name = 'source_term_settings'
    child_names = ['linearization', 'impl_mom_cplg_enabled', 'impl_cplg_enabled', 'linear_change_enabled', 'reset_sources_at_timestep', 'underrelaxation_factor', 'time_accurate_sources_enabled']
    _child_classes = dict(
        linearization=linearization,
        impl_mom_cplg_enabled=impl_mom_cplg_enabled,
        impl_cplg_enabled=impl_cplg_enabled,
        linear_change_enabled=linear_change_enabled,
        reset_sources_at_timestep=reset_sources_at_timestep,
        underrelaxation_factor=underrelaxation_factor,
        time_accurate_sources_enabled=time_accurate_sources_enabled,
    )

class enabled_12(Boolean):
    """
    Enable/disable node-based averaging of DPM variables.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class source_avg_enabled(Boolean):
    """
    Enable/disable averaging of DPM source terms to nodes.
    """
    _version = '251'
    fluent_name = 'source-avg-enabled?'
    _python_name = 'source_avg_enabled'

class average_every_step(Boolean):
    """
    Do the averaging after each integration step for higher accuracy at a higher cost.
    """
    _version = '251'
    fluent_name = 'average-every-step?'
    _python_name = 'average_every_step'

class kernel(Group):
    """
    Deprecated, only for backward compatibility -- objects have been moved one level up.
    """
    _version = '251'
    fluent_name = 'kernel'
    _python_name = 'kernel'
    _child_aliases = dict(
        gaussian_factor=('../gaussian_factor', 'gaussian-factor'),
        option=('../kernel_type', 'option'),
    )

class kernel_type(String, AllowedValuesMixin):
    """
    A kernel for the averaging.
    """
    _version = '251'
    fluent_name = 'kernel-type'
    _python_name = 'kernel_type'

class gaussian_factor(Real):
    """
    A factor for the gaussian kernel for node-based averaging.~%Large values give small size, small values give large size of kernel.
    """
    _version = '251'
    fluent_name = 'gaussian-factor'
    _python_name = 'gaussian_factor'

class node_based_averaging(Group):
    """
    Menu containing options to enable/disable node-based averaging of DPM variables and DPM source terms. 
    Please note that node-based averaging functionality is only available if source term linearization is not active.
    """
    _version = '251'
    fluent_name = 'node-based-averaging'
    _python_name = 'node_based_averaging'
    child_names = ['enabled', 'source_avg_enabled', 'average_every_step', 'kernel', 'kernel_type', 'gaussian_factor']
    _child_classes = dict(
        enabled=enabled_12,
        source_avg_enabled=source_avg_enabled,
        average_every_step=average_every_step,
        kernel=kernel,
        kernel_type=kernel_type,
        gaussian_factor=gaussian_factor,
    )
    _child_aliases = dict(
        node_avg_enabled=('enabled', 'node-avg-enabled?'),
    )

class dynamic_interaction_range_enabled(Boolean):
    """
    Enable/disable dynamic interaction range option.
    """
    _version = '251'
    fluent_name = 'dynamic-interaction-range-enabled?'
    _python_name = 'dynamic_interaction_range_enabled'

class across_injections_enabled(Boolean):
    """
    For in situ data reduction, allow combining parcels from different injections as long as they use the same material.
    """
    _version = '251'
    fluent_name = 'across-injections-enabled?'
    _python_name = 'across_injections_enabled'

class min_parcel_count(Integer):
    """
    Invoke in situ data reduction on a face or a cell, require a minimum number of parcels.
    """
    _version = '251'
    fluent_name = 'min-parcel-count'
    _python_name = 'min_parcel_count'

class data_reduction(Group):
    """
    Combines groups of DPM parcels that are similar in all relevant aspects into one new parcel each.
    """
    _version = '251'
    fluent_name = 'data-reduction'
    _python_name = 'data_reduction'
    child_names = ['across_injections_enabled', 'min_parcel_count']
    _child_classes = dict(
        across_injections_enabled=across_injections_enabled,
        min_parcel_count=min_parcel_count,
    )

class parcel_count_control(Group):
    """
    Options for increasing or decreasing the number of DPM numerical parcels to meet resolution requirements.
    """
    _version = '251'
    fluent_name = 'parcel-count-control'
    _python_name = 'parcel_count_control'
    child_names = ['data_reduction']
    _child_classes = dict(
        data_reduction=data_reduction,
    )

class enabled_13(Boolean):
    """
    Enable/disable high resolution tracking. Please note that high-resolution tracking is the recommended default for highest tracking robustness, accuracy and performance.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class always_use_face_centroid_with_periodics(Boolean):
    """
    Enable/disable using quad face centroids when creating subtets if the case contains periodic boundaries.
    """
    _version = '251'
    fluent_name = 'always-use-face-centroid-with-periodics?'
    _python_name = 'always_use_face_centroid_with_periodics'

class specific_heat_enabled(Boolean):
    """
    Enable/disable interpolation of flow specific heat to the particle position.
    """
    _version = '251'
    fluent_name = 'specific-heat-enabled?'
    _python_name = 'specific_heat_enabled'

class density_enabled(Boolean):
    """
    Enable/disable interpolation of flow density to the particle position.
    """
    _version = '251'
    fluent_name = 'density-enabled?'
    _python_name = 'density_enabled'

class gradients_enabled(Boolean):
    """
    Enable/disable interpolation of flow solution gradients to the particle position.
    """
    _version = '251'
    fluent_name = 'gradients-enabled?'
    _python_name = 'gradients_enabled'

class viscosity_enabled(Boolean):
    """
    Enable/disable interpolation of flow laminar viscosity to the particle position.
    """
    _version = '251'
    fluent_name = 'viscosity-enabled?'
    _python_name = 'viscosity_enabled'

class temperature_enabled(Boolean):
    """
    Enable/disable interpolation of flow temperature to the particle position.
    """
    _version = '251'
    fluent_name = 'temperature-enabled?'
    _python_name = 'temperature_enabled'

class wall_zero_vel_enabled(Boolean):
    """
    Enable/disable setting the nodal velocity on all walls to zero.
    """
    _version = '251'
    fluent_name = 'wall-zero-vel-enabled?'
    _python_name = 'wall_zero_vel_enabled'

class flow_interpolation(Group):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'flow-interpolation'
    _python_name = 'flow_interpolation'
    child_names = ['specific_heat_enabled', 'density_enabled', 'gradients_enabled', 'viscosity_enabled', 'temperature_enabled', 'wall_zero_vel_enabled']
    _child_classes = dict(
        specific_heat_enabled=specific_heat_enabled,
        density_enabled=density_enabled,
        gradients_enabled=gradients_enabled,
        viscosity_enabled=viscosity_enabled,
        temperature_enabled=temperature_enabled,
        wall_zero_vel_enabled=wall_zero_vel_enabled,
    )

class boundary_layer_tracking_enabled(Boolean):
    """
    Enable/disable adjusting the particle timestep to account for high aspect ratio cells.
    """
    _version = '251'
    fluent_name = 'boundary-layer-tracking-enabled?'
    _python_name = 'boundary_layer_tracking_enabled'

class subtet_validity_checking_enabled(Boolean):
    """
    Enable/disable testing for inverted subtets due to warped cells.
    """
    _version = '251'
    fluent_name = 'subtet-validity-checking-enabled?'
    _python_name = 'subtet_validity_checking_enabled'

class auto_intersect_tol_enabled(Boolean):
    """
    Enable/disable using an automatic scaling of subtet intersection tolerance.
    """
    _version = '251'
    fluent_name = 'auto-intersect-tol-enabled?'
    _python_name = 'auto_intersect_tol_enabled'

class barycentric_intersection_enabled(Boolean):
    """
    Enable/disable using barycentric coordinates for intersection calculations.
    """
    _version = '251'
    fluent_name = 'barycentric-intersection-enabled?'
    _python_name = 'barycentric_intersection_enabled'

class enhanced_method_enabled(Boolean):
    """
    Enable/disable enhanced method of locating particles in cells.
    """
    _version = '251'
    fluent_name = 'enhanced-method-enabled?'
    _python_name = 'enhanced_method_enabled'

class support_for_std_track_data_read_enabled(Boolean):
    """
    Enable/disable data-read verification, preventing particle loss when transitioning between standard and high-res tracking.
    """
    _version = '251'
    fluent_name = 'support-for-std-track-data-read-enabled?'
    _python_name = 'support_for_std_track_data_read_enabled'

class overset_robustness_level(Integer):
    """
    The robustness level for particle relocation in overset meshes.
    """
    _version = '251'
    fluent_name = 'overset-robustness-level'
    _python_name = 'overset_robustness_level'

class legacy_method_enabled(Boolean):
    """
    Enable/disable legacy method of locating particles in cells.
    """
    _version = '251'
    fluent_name = 'legacy-method-enabled?'
    _python_name = 'legacy_method_enabled'

class particle_relocation(Group):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'particle-relocation'
    _python_name = 'particle_relocation'
    child_names = ['enhanced_method_enabled', 'support_for_std_track_data_read_enabled', 'overset_robustness_level', 'legacy_method_enabled']
    _child_classes = dict(
        enhanced_method_enabled=enhanced_method_enabled,
        support_for_std_track_data_read_enabled=support_for_std_track_data_read_enabled,
        overset_robustness_level=overset_robustness_level,
        legacy_method_enabled=legacy_method_enabled,
    )

class stuck_particle_removal_enabled(Boolean):
    """
    Enable/disable removal of particles that are stuck at edges or faces.
    """
    _version = '251'
    fluent_name = 'stuck-particle-removal-enabled?'
    _python_name = 'stuck_particle_removal_enabled'

class barycentric_sampling_enabled(Boolean):
    """
    Enable/disable using of barycentric coordinates when sampling particles at planes.
    """
    _version = '251'
    fluent_name = 'barycentric-sampling-enabled?'
    _python_name = 'barycentric_sampling_enabled'

class quad_face_centroid_enabled(Boolean):
    """
    Enable/disable using of quad face centroids when creating subtets.
    """
    _version = '251'
    fluent_name = 'quad-face-centroid-enabled?'
    _python_name = 'quad_face_centroid_enabled'

class high_res_tracking(Group):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'high-res-tracking'
    _python_name = 'high_res_tracking'
    child_names = ['enabled', 'always_use_face_centroid_with_periodics', 'flow_interpolation', 'boundary_layer_tracking_enabled', 'subtet_validity_checking_enabled', 'auto_intersect_tol_enabled', 'barycentric_intersection_enabled', 'particle_relocation', 'stuck_particle_removal_enabled', 'barycentric_sampling_enabled', 'quad_face_centroid_enabled']
    _child_classes = dict(
        enabled=enabled_13,
        always_use_face_centroid_with_periodics=always_use_face_centroid_with_periodics,
        flow_interpolation=flow_interpolation,
        boundary_layer_tracking_enabled=boundary_layer_tracking_enabled,
        subtet_validity_checking_enabled=subtet_validity_checking_enabled,
        auto_intersect_tol_enabled=auto_intersect_tol_enabled,
        barycentric_intersection_enabled=barycentric_intersection_enabled,
        particle_relocation=particle_relocation,
        stuck_particle_removal_enabled=stuck_particle_removal_enabled,
        barycentric_sampling_enabled=barycentric_sampling_enabled,
        quad_face_centroid_enabled=quad_face_centroid_enabled,
    )

class numerics(Group):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'numerics'
    _python_name = 'numerics'
    child_names = ['tracking', 'source_term_settings', 'node_based_averaging', 'dynamic_interaction_range_enabled', 'parcel_count_control', 'high_res_tracking']
    _child_classes = dict(
        tracking=tracking_1,
        source_term_settings=source_term_settings,
        node_based_averaging=node_based_averaging,
        dynamic_interaction_range_enabled=dynamic_interaction_range_enabled,
        parcel_count_control=parcel_count_control,
        high_res_tracking=high_res_tracking,
    )
    _child_aliases = dict(
        averaging=('node_based_averaging', 'averaging'),
        source_terms=('source_term_settings', 'source-terms'),
    )

class option_18(String, AllowedValuesMixin):
    """
    A parallel scheme used for DPM.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class ordered_accumulation(Boolean):
    """
    Enable/disable deterministic accumulation order of DPM source terms.
    """
    _version = '251'
    fluent_name = 'ordered-accumulation?'
    _python_name = 'ordered_accumulation'

class enabled_14(Boolean):
    """
    Enable/disable DPM domain for hybrid tracking.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class partitioning_method(String, AllowedValuesMixin):
    """
    The DPM domain partitioning method.
    """
    _version = '251'
    fluent_name = 'partitioning-method'
    _python_name = 'partitioning_method'

class dpm_domain(Group):
    """
    Group containing DPM domain related settings.
    """
    _version = '251'
    fluent_name = 'dpm-domain'
    _python_name = 'dpm_domain'
    child_names = ['enabled', 'partitioning_method']
    _child_classes = dict(
        enabled=enabled_14,
        partitioning_method=partitioning_method,
    )

class hybrid(Group):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'hybrid'
    _python_name = 'hybrid'
    child_names = ['ordered_accumulation', 'dpm_domain']
    _child_classes = dict(
        ordered_accumulation=ordered_accumulation,
        dpm_domain=dpm_domain,
    )

class parallel_verbosity_level(Integer):
    """
    The parallel verbosity level [0]: none.
    """
    _version = '251'
    fluent_name = 'parallel-verbosity-level'
    _python_name = 'parallel_verbosity_level'

class crossover_tolerance(Real):
    """
    The fraction a particle is moved towards the cell center (0: not moved, 1: moved to cell center).
    """
    _version = '251'
    fluent_name = 'crossover-tolerance'
    _python_name = 'crossover_tolerance'

class expert_2(Group):
    """
    Group containing parallel tracking expert settings.
    """
    _version = '251'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['parallel_verbosity_level', 'crossover_tolerance']
    _child_classes = dict(
        parallel_verbosity_level=parallel_verbosity_level,
        crossover_tolerance=crossover_tolerance,
    )

class parallel_1(Group):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'parallel'
    _python_name = 'parallel'
    child_names = ['option', 'hybrid', 'expert']
    _child_classes = dict(
        option=option_18,
        hybrid=hybrid,
        expert=expert_2,
    )

class body_force(String, AllowedValuesMixin):
    """
    The name of the DPM body force function.
    """
    _version = '251'
    fluent_name = 'body-force'
    _python_name = 'body_force'

class source_terms(String, AllowedValuesMixin):
    """
    The name of the DPM source function.
    """
    _version = '251'
    fluent_name = 'source-terms'
    _python_name = 'source_terms'

class erosion_accretion(String, AllowedValuesMixin):
    """
    The name of the DPM erosion/accretion function.
    """
    _version = '251'
    fluent_name = 'erosion-accretion'
    _python_name = 'erosion_accretion'

class output(String, AllowedValuesMixin):
    """
    The name of the DPM output function.
    """
    _version = '251'
    fluent_name = 'output'
    _python_name = 'output'

class scalar_update(String, AllowedValuesMixin):
    """
    The name of the DPM scalar update function.
    """
    _version = '251'
    fluent_name = 'scalar-update'
    _python_name = 'scalar_update'

class collision(String, AllowedValuesMixin):
    """
    The name of the DPM collision function.
    """
    _version = '251'
    fluent_name = 'collision'
    _python_name = 'collision'

class dpm_time_step_size_1(String, AllowedValuesMixin):
    """
    The name of the DPM timestep function.
    """
    _version = '251'
    fluent_name = 'dpm-time-step-size'
    _python_name = 'dpm_time_step_size'

class impingement_model(String, AllowedValuesMixin):
    """
    The name of the impingement model function.
    """
    _version = '251'
    fluent_name = 'impingement-model'
    _python_name = 'impingement_model'

class film_regime(String, AllowedValuesMixin):
    """
    The name of the film regime function.
    """
    _version = '251'
    fluent_name = 'film-regime'
    _python_name = 'film_regime'

class splashing_distribution(String, AllowedValuesMixin):
    """
    The name of the splashing distribution function.
    """
    _version = '251'
    fluent_name = 'splashing-distribution'
    _python_name = 'splashing_distribution'

class flow_interpolation_1(String, AllowedValuesMixin):
    """
    The name of the interpolation function.
    """
    _version = '251'
    fluent_name = 'flow-interpolation'
    _python_name = 'flow_interpolation'

class number_of_scalars(Integer):
    """
    The number of user reals stored on a particle.
    """
    _version = '251'
    fluent_name = 'number-of-scalars'
    _python_name = 'number_of_scalars'

class max_num_udf_species(Integer):
    """
    The maximum number of species that can be used in DPM UDFs.
    """
    _version = '251'
    fluent_name = 'max-num-udf-species'
    _python_name = 'max_num_udf_species'

class user_defined_functions(Group):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'user-defined-functions'
    _python_name = 'user_defined_functions'
    child_names = ['body_force', 'source_terms', 'erosion_accretion', 'output', 'scalar_update', 'collision', 'dpm_time_step_size', 'impingement_model', 'film_regime', 'splashing_distribution', 'flow_interpolation', 'number_of_scalars', 'max_num_udf_species']
    _child_classes = dict(
        body_force=body_force,
        source_terms=source_terms,
        erosion_accretion=erosion_accretion,
        output=output,
        scalar_update=scalar_update,
        collision=collision,
        dpm_time_step_size=dpm_time_step_size_1,
        impingement_model=impingement_model,
        film_regime=film_regime,
        splashing_distribution=splashing_distribution,
        flow_interpolation=flow_interpolation_1,
        number_of_scalars=number_of_scalars,
        max_num_udf_species=max_num_udf_species,
    )
    _child_aliases = dict(
        num_scalars=('number_of_scalars', 'num-scalars'),
    )

class particle_type(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'particle-type'
    _python_name = 'particle_type'

class material_2(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'material'
    _python_name = 'material'

class evaporating_species(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'evaporating-species'
    _python_name = 'evaporating_species'

class continuous_phase(String, AllowedValuesMixin):
    """
    The continuous phase that the injection interacts with.
    """
    _version = '251'
    fluent_name = 'continuous-phase'
    _python_name = 'continuous_phase'

class enabled_15(Boolean, AllowedValuesMixin):
    """
    Specifies whether the injection's particles are accounted for in terms of volume displacement (DDPM).
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class ddpm_phase(String, AllowedValuesMixin):
    """
    The DDPM (Eulerian) phase that the injection is to be associated to.
    """
    _version = '251'
    fluent_name = 'ddpm-phase'
    _python_name = 'ddpm_phase'

class volume_displacement_1(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'volume-displacement'
    _python_name = 'volume_displacement'
    child_names = ['enabled', 'ddpm_phase']
    _child_classes = dict(
        enabled=enabled_15,
        ddpm_phase=ddpm_phase,
    )

class interaction_1(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'interaction'
    _python_name = 'interaction'
    child_names = ['evaporating_species', 'continuous_phase', 'volume_displacement']
    _child_classes = dict(
        evaporating_species=evaporating_species,
        continuous_phase=continuous_phase,
        volume_displacement=volume_displacement_1,
    )

class option_19(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class cone_type(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'cone-type'
    _python_name = 'cone_type'

class mass_flux_distribution(String, AllowedValuesMixin):
    """
    Define the shape of the mass flux distribution across the cone cross section.
    """
    _version = '251'
    fluent_name = 'mass-flux-distribution'
    _python_name = 'mass_flux_distribution'

class inject_as_film(Boolean, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'inject-as-film?'
    _python_name = 'inject_as_film'

class filename_2_1(Filename, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class injection_type(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'injection-type'
    _python_name = 'injection_type'
    child_names = ['option', 'cone_type', 'mass_flux_distribution', 'inject_as_film', 'filename']
    _child_classes = dict(
        option=option_19,
        cone_type=cone_type,
        mass_flux_distribution=mass_flux_distribution,
        inject_as_film=inject_as_film,
        filename=filename_2_1,
    )
    _child_aliases = dict(
        uniform_massflow_distribution_enabled=('mass_flux_distribution', 'uniform-massflow-distribution-enabled?'),
    )

class reference_frame_1(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'

class start_time(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'start-time'
    _python_name = 'start_time'

class stop_time(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'stop-time'
    _python_name = 'stop_time'

class times(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'times'
    _python_name = 'times'
    child_names = ['start_time', 'stop_time']
    _child_classes = dict(
        start_time=start_time,
        stop_time=stop_time,
    )

class injection_surfaces(StringList, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'injection-surfaces'
    _python_name = 'injection_surfaces'

class randomized_positions_enabled(Boolean, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'randomized-positions-enabled?'
    _python_name = 'randomized_positions_enabled'

class number_of_streams(Integer, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'number-of-streams'
    _python_name = 'number_of_streams'

class x(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'x'
    _python_name = 'x'

class x_2(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'x-2'
    _python_name = 'x_2'

class y(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'y'
    _python_name = 'y'

class y_2(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'y-2'
    _python_name = 'y_2'

class z(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'z'
    _python_name = 'z'

class z_2(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'z-2'
    _python_name = 'z_2'

class azimuthal_start_angle(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'azimuthal-start-angle'
    _python_name = 'azimuthal_start_angle'

class azimuthal_stop_angle(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'azimuthal-stop-angle'
    _python_name = 'azimuthal_stop_angle'

class enabled_16(Boolean, AllowedValuesMixin):
    """
    Specifies whether spatial staggering shall be applied to the injection locations of this injection.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class radius(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'radius'
    _python_name = 'radius'

class only_in_plane(Boolean, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'only-in-plane?'
    _python_name = 'only_in_plane'

class spatial_staggering(Group):
    """
    Enable and configure spatial staggering.
    """
    _version = '251'
    fluent_name = 'spatial-staggering'
    _python_name = 'spatial_staggering'
    child_names = ['enabled', 'radius', 'only_in_plane']
    _child_classes = dict(
        enabled=enabled_16,
        radius=radius,
        only_in_plane=only_in_plane,
    )

class location_1(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'location'
    _python_name = 'location'
    child_names = ['injection_surfaces', 'randomized_positions_enabled', 'number_of_streams', 'x', 'x_2', 'y', 'y_2', 'z', 'z_2', 'azimuthal_start_angle', 'azimuthal_stop_angle', 'spatial_staggering']
    _child_classes = dict(
        injection_surfaces=injection_surfaces,
        randomized_positions_enabled=randomized_positions_enabled,
        number_of_streams=number_of_streams,
        x=x,
        x_2=x_2,
        y=y,
        y_2=y_2,
        z=z,
        z_2=z_2,
        azimuthal_start_angle=azimuthal_start_angle,
        azimuthal_stop_angle=azimuthal_stop_angle,
        spatial_staggering=spatial_staggering,
    )
    _child_aliases = dict(
        random_surface_inj=('randomized_positions_enabled', 'random-surface-inj?'),
    )

class half_angle(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'half-angle'
    _python_name = 'half_angle'

class dispersion_angle(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'dispersion-angle'
    _python_name = 'dispersion_angle'

class inner_radius(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'inner-radius'
    _python_name = 'inner_radius'

class outer_radius(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'outer-radius'
    _python_name = 'outer_radius'

class x_axis(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'x-axis'
    _python_name = 'x_axis'

class y_axis(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'y-axis'
    _python_name = 'y_axis'

class z_axis(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'z-axis'
    _python_name = 'z_axis'

class cone_settings(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'cone-settings'
    _python_name = 'cone_settings'
    child_names = ['half_angle', 'dispersion_angle', 'inner_radius', 'outer_radius', 'x_axis', 'y_axis', 'z_axis']
    _child_classes = dict(
        half_angle=half_angle,
        dispersion_angle=dispersion_angle,
        inner_radius=inner_radius,
        outer_radius=outer_radius,
        x_axis=x_axis,
        y_axis=y_axis,
        z_axis=z_axis,
    )

class scale_by_area(Boolean, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'scale-by-area?'
    _python_name = 'scale_by_area'

class flow_rate(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'flow-rate'
    _python_name = 'flow_rate'

class flow_rate_2(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'flow-rate-2'
    _python_name = 'flow_rate_2'

class total_flow_rate(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'total-flow-rate'
    _python_name = 'total_flow_rate'

class mass_flow_rate(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'mass-flow-rate'
    _python_name = 'mass_flow_rate'
    child_names = ['scale_by_area', 'flow_rate', 'flow_rate_2', 'total_flow_rate']
    _child_classes = dict(
        scale_by_area=scale_by_area,
        flow_rate=flow_rate,
        flow_rate_2=flow_rate_2,
        total_flow_rate=total_flow_rate,
    )

class r(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'r'
    _python_name = 'r'
    child_names = ['x', 'y', 'z']
    _child_classes = dict(
        x=x,
        y=y,
        z=z,
    )

class u(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'u'
    _python_name = 'u'
    child_names = ['x', 'y', 'z']
    _child_classes = dict(
        x=x,
        y=y,
        z=z,
    )

class matrix(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'matrix'
    _python_name = 'matrix'
    child_names = ['r', 'u']
    _child_classes = dict(
        r=r,
        u=u,
    )

class use_face_normal_direction(Boolean, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'use-face-normal-direction?'
    _python_name = 'use_face_normal_direction'

class x_velocity(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'x-velocity'
    _python_name = 'x_velocity'

class x_velocity_2(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'x-velocity-2'
    _python_name = 'x_velocity_2'

class y_velocity(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'y-velocity'
    _python_name = 'y_velocity'

class y_velocity_2(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'y-velocity-2'
    _python_name = 'y_velocity_2'

class z_velocity(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'z-velocity'
    _python_name = 'z_velocity'

class z_velocity_2(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'z-velocity-2'
    _python_name = 'z_velocity_2'

class magnitude(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'magnitude'
    _python_name = 'magnitude'

class swirl_fraction(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'swirl-fraction'
    _python_name = 'swirl_fraction'

class velocity(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'velocity'
    _python_name = 'velocity'
    child_names = ['use_face_normal_direction', 'x_velocity', 'x_velocity_2', 'y_velocity', 'y_velocity_2', 'z_velocity', 'z_velocity_2', 'magnitude', 'swirl_fraction']
    _child_classes = dict(
        use_face_normal_direction=use_face_normal_direction,
        x_velocity=x_velocity,
        x_velocity_2=x_velocity_2,
        y_velocity=y_velocity,
        y_velocity_2=y_velocity_2,
        z_velocity=z_velocity,
        z_velocity_2=z_velocity_2,
        magnitude=magnitude,
        swirl_fraction=swirl_fraction,
    )

class angular_velocity(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'angular-velocity'
    _python_name = 'angular_velocity'
    child_names = ['x', 'x_2', 'y', 'y_2', 'z', 'z_2', 'magnitude']
    _child_classes = dict(
        x=x,
        x_2=x_2,
        y=y,
        y_2=y_2,
        z=z,
        z_2=z_2,
        magnitude=magnitude,
    )

class diameter(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'diameter'
    _python_name = 'diameter'

class diameter_2(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'diameter-2'
    _python_name = 'diameter_2'

class min_diam(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'min-diam'
    _python_name = 'min_diam'

class max_diam(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'max-diam'
    _python_name = 'max_diam'

class mean_diam(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'mean-diam'
    _python_name = 'mean_diam'

class spread(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'spread'
    _python_name = 'spread'

class number_of_diameters(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'number-of-diameters'
    _python_name = 'number_of_diameters'

class rosin_rammler(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'rosin-rammler'
    _python_name = 'rosin_rammler'
    child_names = ['min_diam', 'max_diam', 'mean_diam', 'spread', 'number_of_diameters']
    _child_classes = dict(
        min_diam=min_diam,
        max_diam=max_diam,
        mean_diam=mean_diam,
        spread=spread,
        number_of_diameters=number_of_diameters,
    )

class table_name(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'table-name'
    _python_name = 'table_name'

class column_with_diameters(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'column-with-diameters'
    _python_name = 'column_with_diameters'

class column_with_number_fractions(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'column-with-number-fractions'
    _python_name = 'column_with_number_fractions'

class accumulated_number_fraction(Boolean, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'accumulated-number-fraction?'
    _python_name = 'accumulated_number_fraction'

class column_with_mass_fractions(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'column-with-mass-fractions'
    _python_name = 'column_with_mass_fractions'

class accumulated_mass_fraction(Boolean, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'accumulated-mass-fraction?'
    _python_name = 'accumulated_mass_fraction'

class interpolate_between_classes(Boolean, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'interpolate-between-classes?'
    _python_name = 'interpolate_between_classes'

class tabulated_size(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'tabulated-size'
    _python_name = 'tabulated_size'
    child_names = ['table_name', 'column_with_diameters', 'column_with_number_fractions', 'accumulated_number_fraction', 'column_with_mass_fractions', 'accumulated_mass_fraction', 'interpolate_between_classes']
    _child_classes = dict(
        table_name=table_name,
        column_with_diameters=column_with_diameters,
        column_with_number_fractions=column_with_number_fractions,
        accumulated_number_fraction=accumulated_number_fraction,
        column_with_mass_fractions=column_with_mass_fractions,
        accumulated_mass_fraction=accumulated_mass_fraction,
        interpolate_between_classes=interpolate_between_classes,
    )

class particle_size(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'particle-size'
    _python_name = 'particle_size'
    child_names = ['option', 'diameter', 'diameter_2', 'rosin_rammler', 'tabulated_size']
    _child_classes = dict(
        option=option_19,
        diameter=diameter,
        diameter_2=diameter_2,
        rosin_rammler=rosin_rammler,
        tabulated_size=tabulated_size,
    )

class temperature(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'temperature'
    _python_name = 'temperature'

class temperature_2(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'temperature-2'
    _python_name = 'temperature_2'

class initial_values(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'initial-values'
    _python_name = 'initial_values'
    child_names = ['reference_frame', 'times', 'location', 'cone_settings', 'mass_flow_rate', 'matrix', 'velocity', 'angular_velocity', 'particle_size', 'temperature', 'temperature_2']
    _child_classes = dict(
        reference_frame=reference_frame_1,
        times=times,
        location=location_1,
        cone_settings=cone_settings,
        mass_flow_rate=mass_flow_rate,
        matrix=matrix,
        velocity=velocity,
        angular_velocity=angular_velocity,
        particle_size=particle_size,
        temperature=temperature,
        temperature_2=temperature_2,
    )

class enable_8(Boolean, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class time_delay(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'time-delay'
    _python_name = 'time_delay'

class particle_reinjector(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'particle-reinjector'
    _python_name = 'particle_reinjector'
    child_names = ['enable', 'time_delay']
    _child_classes = dict(
        enable=enable_8,
        time_delay=time_delay,
    )

class shape_factor(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'shape-factor'
    _python_name = 'shape_factor'

class cunningham_factor(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'cunningham-factor'
    _python_name = 'cunningham_factor'

class particle_drag(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'particle-drag'
    _python_name = 'particle_drag'
    child_names = ['option', 'shape_factor', 'cunningham_factor']
    _child_classes = dict(
        option=option_19,
        shape_factor=shape_factor,
        cunningham_factor=cunningham_factor,
    )

class enabled_17(Boolean, AllowedValuesMixin):
    """
    Specifies whether turbulent dispersion of the particles should be modelled or not.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class option_20(String, AllowedValuesMixin):
    """
    The turbulent dispersion model.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class random_eddy_lifetime(Boolean, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'random-eddy-lifetime?'
    _python_name = 'random_eddy_lifetime'

class number_of_tries(Integer, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'number-of-tries'
    _python_name = 'number_of_tries'

class time_scale_constant_1(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'time-scale-constant'
    _python_name = 'time_scale_constant'

class length_scale_constant(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'length-scale-constant'
    _python_name = 'length_scale_constant'

class turbulent_dispersion(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'turbulent-dispersion'
    _python_name = 'turbulent_dispersion'
    child_names = ['enabled', 'option', 'random_eddy_lifetime', 'number_of_tries', 'time_scale_constant', 'length_scale_constant']
    _child_classes = dict(
        enabled=enabled_17,
        option=option_20,
        random_eddy_lifetime=random_eddy_lifetime,
        number_of_tries=number_of_tries,
        time_scale_constant=time_scale_constant_1,
        length_scale_constant=length_scale_constant,
    )

class const_htc(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'const-htc'
    _python_name = 'const_htc'

class const_nu(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'const-nu'
    _python_name = 'const_nu'

class heat_exchange(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'heat-exchange'
    _python_name = 'heat_exchange'
    child_names = ['option', 'const_htc', 'const_nu']
    _child_classes = dict(
        option=option_19,
        const_htc=const_htc,
        const_nu=const_nu,
    )

class enabled_18(Boolean, AllowedValuesMixin):
    """
    Specifies whether secondary breakup should be modelled for this injection or not.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class y0(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'y0'
    _python_name = 'y0'

class number_of_child_droplets(Integer, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'number-of-child-droplets'
    _python_name = 'number_of_child_droplets'

class b1(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'b1'
    _python_name = 'b1'

class b0(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'b0'
    _python_name = 'b0'

class cl(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'cl'
    _python_name = 'cl'

class ctau(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'ctau'
    _python_name = 'ctau'

class crt(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'crt'
    _python_name = 'crt'

class critical_weber_number(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'critical-weber-number'
    _python_name = 'critical_weber_number'

class core_b1(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'core-b1'
    _python_name = 'core_b1'

class xi(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'xi'
    _python_name = 'xi'

class target_number_in_parcel(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'target-number-in-parcel'
    _python_name = 'target_number_in_parcel'

class c0(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'c0'
    _python_name = 'c0'

class column_drag_coeff(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'column-drag-coeff'
    _python_name = 'column_drag_coeff'

class ligament_factor(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'ligament-factor'
    _python_name = 'ligament_factor'

class jet_diameter(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'jet-diameter'
    _python_name = 'jet_diameter'

class k1(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'k1'
    _python_name = 'k1'

class k2(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'k2'
    _python_name = 'k2'

class tb(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'tb'
    _python_name = 'tb'

class droplet_breakup(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'droplet-breakup'
    _python_name = 'droplet_breakup'
    child_names = ['enabled', 'option', 'y0', 'number_of_child_droplets', 'b1', 'b0', 'cl', 'ctau', 'crt', 'critical_weber_number', 'core_b1', 'xi', 'target_number_in_parcel', 'c0', 'column_drag_coeff', 'ligament_factor', 'jet_diameter', 'k1', 'k2', 'tb']
    _child_classes = dict(
        enabled=enabled_18,
        option=option_19,
        y0=y0,
        number_of_child_droplets=number_of_child_droplets,
        b1=b1,
        b0=b0,
        cl=cl,
        ctau=ctau,
        crt=crt,
        critical_weber_number=critical_weber_number,
        core_b1=core_b1,
        xi=xi,
        target_number_in_parcel=target_number_in_parcel,
        c0=c0,
        column_drag_coeff=column_drag_coeff,
        ligament_factor=ligament_factor,
        jet_diameter=jet_diameter,
        k1=k1,
        k2=k2,
        tb=tb,
    )

class enabled_19(Boolean, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class drag_law(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'drag-law'
    _python_name = 'drag_law'

class lift_law(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'lift-law'
    _python_name = 'lift_law'

class particle_rotation(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'particle-rotation'
    _python_name = 'particle_rotation'
    child_names = ['enabled', 'drag_law', 'lift_law']
    _child_classes = dict(
        enabled=enabled_19,
        drag_law=drag_law,
        lift_law=lift_law,
    )

class rough_wall_treatment_enabled(Boolean, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'rough-wall-treatment-enabled?'
    _python_name = 'rough_wall_treatment_enabled'

class enabled_20(Boolean, AllowedValuesMixin):
    """
    In e.g. the Web UI, open access to the individual particle laws and the switcher function.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class law_1(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'law-1'
    _python_name = 'law_1'

class law_2(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'law-2'
    _python_name = 'law_2'

class law_3(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'law-3'
    _python_name = 'law_3'

class law_4(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'law-4'
    _python_name = 'law_4'

class law_5(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'law-5'
    _python_name = 'law_5'

class law_6(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'law-6'
    _python_name = 'law_6'

class law_7(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'law-7'
    _python_name = 'law_7'

class law_8(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'law-8'
    _python_name = 'law_8'

class law_9(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'law-9'
    _python_name = 'law_9'

class law_10(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'law-10'
    _python_name = 'law_10'

class switch(String, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'switch'
    _python_name = 'switch'

class reset_laws(Command):
    """
    Reset all particles laws to default.
    """
    _version = '251'
    fluent_name = 'reset-laws'
    _python_name = 'reset_laws'

class custom_laws(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'custom-laws'
    _python_name = 'custom_laws'
    child_names = ['enabled', 'law_1', 'law_2', 'law_3', 'law_4', 'law_5', 'law_6', 'law_7', 'law_8', 'law_9', 'law_10', 'switch']
    command_names = ['reset_laws']
    _child_classes = dict(
        enabled=enabled_20,
        law_1=law_1,
        law_2=law_2,
        law_3=law_3,
        law_4=law_4,
        law_5=law_5,
        law_6=law_6,
        law_7=law_7,
        law_8=law_8,
        law_9=law_9,
        law_10=law_10,
        switch=switch,
        reset_laws=reset_laws,
    )

class physical_models_1(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'physical-models'
    _python_name = 'physical_models'
    child_names = ['particle_drag', 'turbulent_dispersion', 'heat_exchange', 'droplet_breakup', 'particle_rotation', 'rough_wall_treatment_enabled', 'custom_laws']
    _child_classes = dict(
        particle_drag=particle_drag,
        turbulent_dispersion=turbulent_dispersion,
        heat_exchange=heat_exchange,
        droplet_breakup=droplet_breakup,
        particle_rotation=particle_rotation,
        rough_wall_treatment_enabled=rough_wall_treatment_enabled,
        custom_laws=custom_laws,
    )
    _child_aliases = dict(
        rough_wall_model_enabled=('rough_wall_treatment_enabled', 'rough-wall-model-enabled?'),
    )

class const_number_in_parcel(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'const-number-in-parcel'
    _python_name = 'const_number_in_parcel'

class const_parcel_mass(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'const-parcel-mass'
    _python_name = 'const_parcel_mass'

class const_parcel_diameter(Real, AllowedValuesMixin):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'const-parcel-diameter'
    _python_name = 'const_parcel_diameter'

class parcel_method(Group):
    """
    Help for this object class is not available without an instantiated object.
    """
    _version = '251'
    fluent_name = 'parcel-method'
    _python_name = 'parcel_method'
    child_names = ['option', 'const_number_in_parcel', 'const_parcel_mass', 'const_parcel_diameter']
    _child_classes = dict(
        option=option_19,
        const_number_in_parcel=const_number_in_parcel,
        const_parcel_mass=const_parcel_mass,
        const_parcel_diameter=const_parcel_diameter,
    )

class injections_child(Group):
    """
    'child_object_type' of injections.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'injections_child'
    child_names = ['name', 'particle_type', 'material', 'interaction', 'injection_type', 'initial_values', 'particle_reinjector', 'physical_models', 'parcel_method']
    _child_classes = dict(
        name=name_2,
        particle_type=particle_type,
        material=material_2,
        interaction=interaction_1,
        injection_type=injection_type,
        initial_values=initial_values,
        particle_reinjector=particle_reinjector,
        physical_models=physical_models_1,
        parcel_method=parcel_method,
    )
    _child_aliases = dict(
        number_of_streams=('initial_values/location/number_of_streams', 'number-of-streams'),
        reference_frame=('initial_values/reference_frame', 'reference-frame'),
    )

class injections(NamedObject[injections_child], CreatableNamedObjectMixin[injections_child]):
    """
    'injections' child.
    """
    _version = '251'
    fluent_name = 'injections'
    _python_name = 'injections'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = injections_child

class discrete_phase(Group):
    """
    Toplevel object.
    """
    _version = '251'
    fluent_name = 'discrete-phase'
    _python_name = 'discrete_phase'
    child_names = ['general_settings', 'physical_models', 'tracking', 'numerics', 'parallel', 'user_defined_functions', 'injections']
    _child_classes = dict(
        general_settings=general_settings,
        physical_models=physical_models,
        tracking=tracking,
        numerics=numerics,
        parallel=parallel_1,
        user_defined_functions=user_defined_functions,
        injections=injections,
    )
    _child_aliases = dict(
        user_functions=('user_defined_functions', 'user-functions'),
    )

class enable_9(Boolean):
    """
    Enable/disable vbm model.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class mode(String, AllowedValuesMixin):
    """
    VBM mode edm/fdm.
    """
    _version = '251'
    fluent_name = 'mode'
    _python_name = 'mode'

class name_3(String):
    """
    The name of rotor.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class number_of_blades(Integer):
    """
    The total number of blades.
    """
    _version = '251'
    fluent_name = 'number-of-blades'
    _python_name = 'number_of_blades'

class rotor_speed(Real):
    """
    The rotor speed for the rotor.
    """
    _version = '251'
    fluent_name = 'rotor-speed'
    _python_name = 'rotor_speed'

class tip_radius(Real):
    """
    The radius of the rotor blade tip.
    """
    _version = '251'
    fluent_name = 'tip-radius'
    _python_name = 'tip_radius'

class root_radius(Real):
    """
    The radius of the rotor blade root.
    """
    _version = '251'
    fluent_name = 'root-radius'
    _python_name = 'root_radius'

class basic_info(Group):
    """
    Menu to define the rotor basic informations:
     - Number of Blades 
     - Rotor Speed  , 
     - Tip Radius 
     - Root Radius , 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '251'
    fluent_name = 'basic-info'
    _python_name = 'basic_info'
    child_names = ['number_of_blades', 'rotor_speed', 'tip_radius', 'root_radius']
    _child_classes = dict(
        number_of_blades=number_of_blades,
        rotor_speed=rotor_speed,
        tip_radius=tip_radius,
        root_radius=root_radius,
    )

class disk_origin_x(Real):
    """
    The rotor origin x-coordinate.
    """
    _version = '251'
    fluent_name = 'disk-origin-x'
    _python_name = 'disk_origin_x'

class disk_origin_y(Real):
    """
    The rotor origin y-coordinate.
    """
    _version = '251'
    fluent_name = 'disk-origin-y'
    _python_name = 'disk_origin_y'

class disk_origin_z(Real):
    """
    The rotor origin z-coordinate.
    """
    _version = '251'
    fluent_name = 'disk-origin-z'
    _python_name = 'disk_origin_z'

class disk_origin(Group):
    """
    Menu to define the disk center coordinates.
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '251'
    fluent_name = 'disk-origin'
    _python_name = 'disk_origin'
    child_names = ['disk_origin_x', 'disk_origin_y', 'disk_origin_z']
    _child_classes = dict(
        disk_origin_x=disk_origin_x,
        disk_origin_y=disk_origin_y,
        disk_origin_z=disk_origin_z,
    )

class terminology(Integer):
    """
    Rotor Disk Orientation Terminology:.
    """
    _version = '251'
    fluent_name = 'terminology'
    _python_name = 'terminology'

class disk_pitch_angle(Real):
    """
    The disk pitch angle.
    """
    _version = '251'
    fluent_name = 'disk-pitch-angle'
    _python_name = 'disk_pitch_angle'

class disk_bank_angle(Real):
    """
    The disk bank angle.
    """
    _version = '251'
    fluent_name = 'disk-bank-angle'
    _python_name = 'disk_bank_angle'

class disk_normal_x(Real):
    """
    The x-component of disk normal vector:.
    """
    _version = '251'
    fluent_name = 'disk-normal-x'
    _python_name = 'disk_normal_x'

class disk_normal_y(Real):
    """
    The y-component of disk normal vector:.
    """
    _version = '251'
    fluent_name = 'disk-normal-y'
    _python_name = 'disk_normal_y'

class disk_normal_z(Real):
    """
    The z-component of disk normal vector.
    """
    _version = '251'
    fluent_name = 'disk-normal-z'
    _python_name = 'disk_normal_z'

class disk_orientation(Group):
    """
    Menu to define the rotor disk orientation.
     - terminology      : the terminology to specify the rotor disk orientation: rotor-disk-angles / rotor-disk-normal, 
     - disk-normal-x/y/z : rotor-disk-normal components, 
     - disk-pitch-angle : , 
     - disk-bank-angle : , 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '251'
    fluent_name = 'disk-orientation'
    _python_name = 'disk_orientation'
    child_names = ['terminology', 'disk_pitch_angle', 'disk_bank_angle', 'disk_normal_x', 'disk_normal_y', 'disk_normal_z']
    _child_classes = dict(
        terminology=terminology,
        disk_pitch_angle=disk_pitch_angle,
        disk_bank_angle=disk_bank_angle,
        disk_normal_x=disk_normal_x,
        disk_normal_y=disk_normal_y,
        disk_normal_z=disk_normal_z,
    )

class embedded_face_zone(String, AllowedValuesMixin):
    """
    The embedded-face zone.
    """
    _version = '251'
    fluent_name = 'embedded-face-zone'
    _python_name = 'embedded_face_zone'

class floating_surface_name(String, AllowedValuesMixin):
    """
    The floating-surface name.
    """
    _version = '251'
    fluent_name = 'floating-surface-name'
    _python_name = 'floating_surface_name'

class disk_id(Group):
    """
    Menu to define the disk face/surface name:
     - embedded-face-zone    : select embedded-face-zone name, 
     - floating-surface-name : select floating-surface-name, 
     - create-floating-disk  : create a floating-disk for the current rotor, 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '251'
    fluent_name = 'disk-id'
    _python_name = 'disk_id'
    child_names = ['embedded_face_zone', 'floating_surface_name']
    _child_classes = dict(
        embedded_face_zone=embedded_face_zone,
        floating_surface_name=floating_surface_name,
    )

class blade_pitch_collective(Real):
    """
    The blade collective pitch angle.
    """
    _version = '251'
    fluent_name = 'blade-pitch-collective'
    _python_name = 'blade_pitch_collective'

class blade_pitch_cyclic_sin(Real):
    """
    The magnitude of sin component of blade's cyclic pitch angle.
    """
    _version = '251'
    fluent_name = 'blade-pitch-cyclic-sin'
    _python_name = 'blade_pitch_cyclic_sin'

class blade_pitch_cyclic_cos(Real):
    """
    The magnitude of cos component of blade's cyclic pitch angle.
    """
    _version = '251'
    fluent_name = 'blade-pitch-cyclic-cos'
    _python_name = 'blade_pitch_cyclic_cos'

class blade_pitch_angles(Group):
    """
    Menu to define the rotor pitch angles: 
     - blade-pitch-collective    
     - blade-pitch-cyclic-sin    
     - blade-pitch-cyclic-cos    
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '251'
    fluent_name = 'blade-pitch-angles'
    _python_name = 'blade_pitch_angles'
    child_names = ['blade_pitch_collective', 'blade_pitch_cyclic_sin', 'blade_pitch_cyclic_cos']
    _child_classes = dict(
        blade_pitch_collective=blade_pitch_collective,
        blade_pitch_cyclic_sin=blade_pitch_cyclic_sin,
        blade_pitch_cyclic_cos=blade_pitch_cyclic_cos,
    )

class blade_flapping_cone(Real):
    """
    The blade's flapping cone angle.
    """
    _version = '251'
    fluent_name = 'blade-flapping-cone'
    _python_name = 'blade_flapping_cone'

class blade_flapping_cyclic_sin(Real):
    """
    The magnitude of sin component of blade's cyclic flapping angle.
    """
    _version = '251'
    fluent_name = 'blade-flapping-cyclic-sin'
    _python_name = 'blade_flapping_cyclic_sin'

class blade_flapping_cyclic_cos(Real):
    """
    The magnitude of cos component of blade's cyclic flapping angle.
    """
    _version = '251'
    fluent_name = 'blade-flapping-cyclic-cos'
    _python_name = 'blade_flapping_cyclic_cos'

class blade_flap_angles(Group):
    """
    Menu to define the rotor flapping angles:
     - blade-flapping-cone         
     - blade-flapping-cyclic-sin   
     - blade-flapping-cyclic-cos   
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '251'
    fluent_name = 'blade-flap-angles'
    _python_name = 'blade_flap_angles'
    child_names = ['blade_flapping_cone', 'blade_flapping_cyclic_sin', 'blade_flapping_cyclic_cos']
    _child_classes = dict(
        blade_flapping_cone=blade_flapping_cone,
        blade_flapping_cyclic_sin=blade_flapping_cyclic_sin,
        blade_flapping_cyclic_cos=blade_flapping_cyclic_cos,
    )

class model_tip_loss(Integer):
    """
    Tip Loss Model:.
    """
    _version = '251'
    fluent_name = 'model-tip-loss'
    _python_name = 'model_tip_loss'

class tip_loss_limit(Real):
    """
    Tip Loss Limit (%R) if using Quadratic tip loss model.
    """
    _version = '251'
    fluent_name = 'tip-loss-limit'
    _python_name = 'tip_loss_limit'

class prandtl_tuning_coefficient(Real):
    """
    The tuning coefficient in modified prandtl tip loss model.
    """
    _version = '251'
    fluent_name = 'prandtl-tuning-coefficient'
    _python_name = 'prandtl_tuning_coefficient'

class tip_loss(Group):
    """
    Menu to define the rotor tip loss model: 
     - model-tip-loss : define the method to model rotor tip loss, quadratic-tip-loss, prandtl-tip-loss
     - tip-loss-limit : tip-loss-limit 
     - prandtl-tuning-coefficient: prandtl-tuning-coefficient, 
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '251'
    fluent_name = 'tip-loss'
    _python_name = 'tip_loss'
    child_names = ['model_tip_loss', 'tip_loss_limit', 'prandtl_tuning_coefficient']
    _child_classes = dict(
        model_tip_loss=model_tip_loss,
        tip_loss_limit=tip_loss_limit,
        prandtl_tuning_coefficient=prandtl_tuning_coefficient,
    )

class general_1(Group):
    """
    Menu to define the rotor general information.
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '251'
    fluent_name = 'general'
    _python_name = 'general'
    child_names = ['basic_info', 'disk_origin', 'disk_orientation', 'disk_id', 'blade_pitch_angles', 'blade_flap_angles', 'tip_loss']
    _child_classes = dict(
        basic_info=basic_info,
        disk_origin=disk_origin,
        disk_orientation=disk_orientation,
        disk_id=disk_id,
        blade_pitch_angles=blade_pitch_angles,
        blade_flap_angles=blade_flap_angles,
        tip_loss=tip_loss,
    )

class list_1(Command):
    """
    List the object names.
    """
    _version = '251'
    fluent_name = 'list'
    _python_name = 'list'

class name_4(String, AllowedValuesMixin):
    """
    Object name to add.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class add(Command):
    """
    Add object.
    
    Parameters
    ----------
        name : str
            Object name to add.
    """
    _version = '251'
    fluent_name = 'add'
    _python_name = 'add'
    argument_names = ['name']
    _child_classes = dict(
        name=name_4,
    )
    return_type = 'string'

class name_5(String):
    """
    The section name.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class radius_ratio(Real):
    """
    The span-wise distance of the blade section from rotor origin over rotor tip radius (r/R).
    """
    _version = '251'
    fluent_name = 'radius-ratio'
    _python_name = 'radius_ratio'

class chord(Real):
    """
    The chord lenght at blade section.
    """
    _version = '251'
    fluent_name = 'chord'
    _python_name = 'chord'

class twist(Real):
    """
    The blade twist at blade section.
    """
    _version = '251'
    fluent_name = 'twist'
    _python_name = 'twist'

class airfoil_data_file(String, AllowedValuesMixin):
    """
    The airfoil data file (cl/cd) at blade section.
    """
    _version = '251'
    fluent_name = 'airfoil-data-file'
    _python_name = 'airfoil_data_file'

class geometry_2_child(Group):
    """
    'child_object_type' of geometry.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'geometry_child'
    child_names = ['name', 'radius_ratio', 'chord', 'twist', 'airfoil_data_file']
    _child_classes = dict(
        name=name_5,
        radius_ratio=radius_ratio,
        chord=chord,
        twist=twist,
        airfoil_data_file=airfoil_data_file,
    )

class geometry_2(NamedObject[geometry_2_child], CreatableNamedObjectMixin[geometry_2_child]):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'add']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list_1,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        add=add,
    )
    child_object_type = geometry_2_child

class trim_option(Integer):
    """
    Trimming Option:.
    """
    _version = '251'
    fluent_name = 'trim-option'
    _python_name = 'trim_option'

class update_frequency(Integer):
    """
    Trimming Update Frequency N (VBM will trim the rotor after each N iterations).
    """
    _version = '251'
    fluent_name = 'update-frequency'
    _python_name = 'update_frequency'

class damping_factor(Real):
    """
    Trimming damping factor (relaxation factor).
    """
    _version = '251'
    fluent_name = 'damping-factor'
    _python_name = 'damping_factor'

class thrust_coef(Real):
    """
    Desired thrust coefficient of the rotor.
    """
    _version = '251'
    fluent_name = 'thrust-coef'
    _python_name = 'thrust_coef'

class roll_moment_coef(Real):
    """
    Desired roll-moment coefficient of the rotor.
    """
    _version = '251'
    fluent_name = 'roll-moment-coef'
    _python_name = 'roll_moment_coef'

class pitch_moment_coef(Real):
    """
    Desired pitch-moment coefficient of the rotor.
    """
    _version = '251'
    fluent_name = 'pitch-moment-coef'
    _python_name = 'pitch_moment_coef'

class trimming(Group):
    """
    Menu to define rotor trimming set-up.
    For more details please consult the help option of the corresponding menu or TUI command.
    """
    _version = '251'
    fluent_name = 'trimming'
    _python_name = 'trimming'
    child_names = ['trim_option', 'update_frequency', 'damping_factor', 'thrust_coef', 'roll_moment_coef', 'pitch_moment_coef']
    _child_classes = dict(
        trim_option=trim_option,
        update_frequency=update_frequency,
        damping_factor=damping_factor,
        thrust_coef=thrust_coef,
        roll_moment_coef=roll_moment_coef,
        pitch_moment_coef=pitch_moment_coef,
    )

class rotor_child(Group):
    """
    'child_object_type' of rotor.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'rotor_child'
    child_names = ['name', 'general', 'geometry', 'trimming']
    _child_classes = dict(
        name=name_3,
        general=general_1,
        geometry=geometry_2,
        trimming=trimming,
    )

class rotor(NamedObject[rotor_child], CreatableNamedObjectMixin[rotor_child]):
    """
    Main object.
    """
    _version = '251'
    fluent_name = 'rotor'
    _python_name = 'rotor'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = rotor_child

class apply(Command):
    """
    Read and apply VBM setting.
    """
    _version = '251'
    fluent_name = 'apply'
    _python_name = 'apply'

class virtual_blade_model(Group):
    """
    The vbm model object.
    """
    _version = '251'
    fluent_name = 'virtual-blade-model'
    _python_name = 'virtual_blade_model'
    child_names = ['enable', 'mode', 'rotor']
    command_names = ['apply']
    _child_classes = dict(
        enable=enable_9,
        mode=mode,
        rotor=rotor,
        apply=apply,
    )

class enable_10(Boolean):
    """
    Enable/disable aero-optical model.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class name_6(String):
    """
    A unique name for each optical beam.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class ap_face_zone(String, AllowedValuesMixin):
    """
    The wall face zones to specify the optical aperture surface.
    """
    _version = '251'
    fluent_name = 'ap-face-zone'
    _python_name = 'ap_face_zone'

class beam_length(Real):
    """
    The length of optical beam propagation.
    """
    _version = '251'
    fluent_name = 'beam-length'
    _python_name = 'beam_length'

class ray_points_count(Integer):
    """
    The number of grid point in each ray of the optical beam.
    """
    _version = '251'
    fluent_name = 'ray-points-count'
    _python_name = 'ray_points_count'

class beam_vector(RealList):
    """
    The components of the beam propagation vector.
    """
    _version = '251'
    fluent_name = 'beam-vector'
    _python_name = 'beam_vector'

class create_2(CommandWithPositionalArgs):
    """
    Copy optical beam grid.
    
    Parameters
    ----------
        name : str
            A unique name for each optical beam.
        ap_face_zone : str
            The wall face zones to specify the optical aperture surface.
        beam_length : real
            The length of optical beam propagation.
        ray_points_count : int
            The number of grid point in each ray of the optical beam.
        beam_vector : List
            The components of the beam propagation vector.
    """
    _version = '251'
    fluent_name = 'create'
    _python_name = 'create'
    argument_names = ['name', 'ap_face_zone', 'beam_length', 'ray_points_count', 'beam_vector']
    _child_classes = dict(
        name=name_6,
        ap_face_zone=ap_face_zone,
        beam_length=beam_length,
        ray_points_count=ray_points_count,
        beam_vector=beam_vector,
    )

class orig_beam_name(String, AllowedValuesMixin):
    """
    The name for the optical beam to be copied.
    """
    _version = '251'
    fluent_name = 'orig-beam-name'
    _python_name = 'orig_beam_name'

class beam_name(String):
    """
    A unique name for each optical beam.
    """
    _version = '251'
    fluent_name = 'beam-name'
    _python_name = 'beam_name'

class ray_npoints(Integer):
    """
    The number of grid point in each ray of the optical beam.
    """
    _version = '251'
    fluent_name = 'ray-npoints'
    _python_name = 'ray_npoints'

class x_beam_vector(Real):
    """
    The x-component of the beam propagation vector.
    """
    _version = '251'
    fluent_name = 'x-beam-vector'
    _python_name = 'x_beam_vector'

class y_beam_vector(Real):
    """
    The y-component of the beam propagation vector.
    """
    _version = '251'
    fluent_name = 'y-beam-vector'
    _python_name = 'y_beam_vector'

class z_beam_vector(Real):
    """
    The z-component of the beam propagation vector.
    """
    _version = '251'
    fluent_name = 'z-beam-vector'
    _python_name = 'z_beam_vector'

class copy(Command):
    """
    Copy optical beam grid.
    
    Parameters
    ----------
        orig_beam_name : str
            The name for the optical beam to be copied.
        beam_name : str
            A unique name for each optical beam.
        ap_face_zone : str
            The wall face zones to specify the optical aperture surface.
        beam_length : real
            The length of optical beam propagation.
        ray_npoints : int
            The number of grid point in each ray of the optical beam.
        x_beam_vector : real
            The x-component of the beam propagation vector.
        y_beam_vector : real
            The y-component of the beam propagation vector.
        z_beam_vector : real
            The z-component of the beam propagation vector.
    """
    _version = '251'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['orig_beam_name', 'beam_name', 'ap_face_zone', 'beam_length', 'ray_npoints', 'x_beam_vector', 'y_beam_vector', 'z_beam_vector']
    _child_classes = dict(
        orig_beam_name=orig_beam_name,
        beam_name=beam_name,
        ap_face_zone=ap_face_zone,
        beam_length=beam_length,
        ray_npoints=ray_npoints,
        x_beam_vector=x_beam_vector,
        y_beam_vector=y_beam_vector,
        z_beam_vector=z_beam_vector,
    )

class ap_face_zone_1(String, AllowedValuesMixin):
    """
    The wall face zone to specify the optical aperture surface.
    """
    _version = '251'
    fluent_name = 'ap-face-zone'
    _python_name = 'ap_face_zone'

class beams_child(Group):
    """
    'child_object_type' of beams.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'beams_child'
    child_names = ['name', 'ap_face_zone', 'beam_length', 'ray_points_count', 'beam_vector']
    _child_classes = dict(
        name=name_2,
        ap_face_zone=ap_face_zone_1,
        beam_length=beam_length,
        ray_points_count=ray_points_count,
        beam_vector=beam_vector,
    )

class beams(NamedObject[beams_child], CreatableNamedObjectMixin[beams_child]):
    """
    The optical beams object.
    """
    _version = '251'
    fluent_name = 'beams'
    _python_name = 'beams'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'copy']
    _child_classes = dict(
        create=create_2,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        copy=copy,
    )
    child_object_type = beams_child

class reset_statistics(Boolean):
    """
    Reset the statistics of averaging of flow and optical quantities.
    """
    _version = '251'
    fluent_name = 'reset-statistics'
    _python_name = 'reset_statistics'

class method_3(Integer):
    """
    'method' child.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class samp_time_period(Real):
    """
    'samp_time_period' child.
    """
    _version = '251'
    fluent_name = 'samp-time-period'
    _python_name = 'samp_time_period'

class samp_time_steps(Integer):
    """
    'samp_time_steps' child.
    """
    _version = '251'
    fluent_name = 'samp-time-steps'
    _python_name = 'samp_time_steps'

class avg_time_period(Real):
    """
    'avg_time_period' child.
    """
    _version = '251'
    fluent_name = 'avg-time-period'
    _python_name = 'avg_time_period'

class avg_time_steps(Integer):
    """
    'avg_time_steps' child.
    """
    _version = '251'
    fluent_name = 'avg-time-steps'
    _python_name = 'avg_time_steps'

class statistics_controls(Command):
    """
    Specify statistics parameters of sampling and averaging of flow and optical quantities.
    
    Parameters
    ----------
        method : int
            'method' child.
        samp_time_period : real
            'samp_time_period' child.
        samp_time_steps : int
            'samp_time_steps' child.
        avg_time_period : real
            'avg_time_period' child.
        avg_time_steps : int
            'avg_time_steps' child.
    """
    _version = '251'
    fluent_name = 'statistics-controls'
    _python_name = 'statistics_controls'
    argument_names = ['method', 'samp_time_period', 'samp_time_steps', 'avg_time_period', 'avg_time_steps']
    _child_classes = dict(
        method=method_3,
        samp_time_period=samp_time_period,
        samp_time_steps=samp_time_steps,
        avg_time_period=avg_time_period,
        avg_time_steps=avg_time_steps,
    )

class statistics(Group):
    """
    The statistics object.
    """
    _version = '251'
    fluent_name = 'statistics'
    _python_name = 'statistics'
    child_names = ['reset_statistics']
    command_names = ['statistics_controls']
    _child_classes = dict(
        reset_statistics=reset_statistics,
        statistics_controls=statistics_controls,
    )

class sampling_iterations(Integer):
    """
    The sampling iterations of flow quantities.
    """
    _version = '251'
    fluent_name = 'sampling-iterations'
    _python_name = 'sampling_iterations'

class index_of_refraction(Real):
    """
    The model parameters of index of refraction.
    """
    _version = '251'
    fluent_name = 'index-of-refraction'
    _python_name = 'index_of_refraction'

class report(Boolean):
    """
    Write aero-optical reports for optical beams.
    """
    _version = '251'
    fluent_name = 'report'
    _python_name = 'report'

class verbosity_2(Integer):
    """
    The verbosity of the model messages.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class optics(Group):
    """
    The optics model object.
    """
    _version = '251'
    fluent_name = 'optics'
    _python_name = 'optics'
    child_names = ['enable', 'beams', 'statistics', 'sampling_iterations', 'index_of_refraction', 'report', 'verbosity']
    _child_classes = dict(
        enable=enable_10,
        beams=beams,
        statistics=statistics,
        sampling_iterations=sampling_iterations,
        index_of_refraction=index_of_refraction,
        report=report,
        verbosity=verbosity_2,
    )

class thermal_effects_1(Boolean):
    """
    Enable structure thermal effects.
    """
    _version = '251'
    fluent_name = 'thermal-effects?'
    _python_name = 'thermal_effects'

class options_4(Group):
    """
    'options' child.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['thermal_effects']
    _child_classes = dict(
        thermal_effects=thermal_effects_1,
    )

class numerical_damping_factor(Real):
    """
    Structure damping parameters.
    """
    _version = '251'
    fluent_name = 'numerical-damping-factor'
    _python_name = 'numerical_damping_factor'

class enhanced_strain(Boolean):
    """
    Enable enhanced strain element.
    """
    _version = '251'
    fluent_name = 'enhanced-strain?'
    _python_name = 'enhanced_strain'

class unsteady_damping_rayleigh(Boolean):
    """
    Enable/disable Newmark unsteady solution model.
    """
    _version = '251'
    fluent_name = 'unsteady-damping-rayleigh?'
    _python_name = 'unsteady_damping_rayleigh'

class amg_stabilization(String, AllowedValuesMixin):
    """
    The AMG stabilization method for structural solver.
    """
    _version = '251'
    fluent_name = 'amg-stabilization'
    _python_name = 'amg_stabilization'

class max_iter(Integer):
    """
    The maximum number of iterations for structural solver.
    """
    _version = '251'
    fluent_name = 'max-iter'
    _python_name = 'max_iter'

class controls(Group):
    """
    The structure controls object.
    """
    _version = '251'
    fluent_name = 'controls'
    _python_name = 'controls'
    child_names = ['numerical_damping_factor', 'enhanced_strain', 'unsteady_damping_rayleigh', 'amg_stabilization', 'max_iter']
    _child_classes = dict(
        numerical_damping_factor=numerical_damping_factor,
        enhanced_strain=enhanced_strain,
        unsteady_damping_rayleigh=unsteady_damping_rayleigh,
        amg_stabilization=amg_stabilization,
        max_iter=max_iter,
    )

class include_pop_in_fsi_force(Boolean):
    """
    Enable inclusion of operating p into fsi force.
    """
    _version = '251'
    fluent_name = 'include-pop-in-fsi-force?'
    _python_name = 'include_pop_in_fsi_force'

class steady_2way_fsi(Boolean):
    """
    Enable steady 2-way fsi workflow.
    """
    _version = '251'
    fluent_name = 'steady-2way-fsi?'
    _python_name = 'steady_2way_fsi'

class include_viscous_fsi_force(Boolean):
    """
    Enable inclusion of viscous fsi force.
    """
    _version = '251'
    fluent_name = 'include-viscous-fsi-force?'
    _python_name = 'include_viscous_fsi_force'

class explicit_fsi_force(Boolean):
    """
    Enable explicit fsi force.
    """
    _version = '251'
    fluent_name = 'explicit-fsi-force?'
    _python_name = 'explicit_fsi_force'

class starting_t_re_initialization(String, AllowedValuesMixin):
    """
    Starting T-field re-initialization method.
    """
    _version = '251'
    fluent_name = 'starting-t-re-initialization'
    _python_name = 'starting_t_re_initialization'

class expert_3(Group):
    """
    The structure expert object.
    """
    _version = '251'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['include_pop_in_fsi_force', 'steady_2way_fsi', 'include_viscous_fsi_force', 'explicit_fsi_force', 'starting_t_re_initialization']
    _child_classes = dict(
        include_pop_in_fsi_force=include_pop_in_fsi_force,
        steady_2way_fsi=steady_2way_fsi,
        include_viscous_fsi_force=include_viscous_fsi_force,
        explicit_fsi_force=explicit_fsi_force,
        starting_t_re_initialization=starting_t_re_initialization,
    )

class structure(Group):
    """
    'structure' child.
    """
    _version = '251'
    fluent_name = 'structure'
    _python_name = 'structure'
    child_names = ['model', 'options', 'controls', 'expert']
    _child_classes = dict(
        model=model_1,
        options=options_4,
        controls=controls,
        expert=expert_3,
    )

class enabled_21(Boolean):
    """
    Enable ablation model.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class ablation(Group):
    """
    Enable/disable ablation model.
    """
    _version = '251'
    fluent_name = 'ablation'
    _python_name = 'ablation'
    child_names = ['enabled']
    _child_classes = dict(
        enabled=enabled_21,
    )

class potential(Boolean):
    """
    Enable the electric potential model.
    """
    _version = '251'
    fluent_name = 'potential'
    _python_name = 'potential'

class joule_heating(Boolean):
    """
    Include Joule heating in energy equation.
    """
    _version = '251'
    fluent_name = 'joule-heating'
    _python_name = 'joule_heating'

class li_battery_enabled(Boolean):
    """
    Enable the detailed lithium-ion battery model.
    """
    _version = '251'
    fluent_name = 'li-battery-enabled'
    _python_name = 'li_battery_enabled'

class echemistry_enabled(Boolean):
    """
    Enable the echemistry-related model.
    """
    _version = '251'
    fluent_name = 'echemistry-enabled'
    _python_name = 'echemistry_enabled'

class echem_heating_enabled(Boolean):
    """
    Include echem heating in energy equation.
    """
    _version = '251'
    fluent_name = 'echem-heating-enabled'
    _python_name = 'echem_heating_enabled'

class positive_electrode_zone(StringList, AllowedValuesMixin):
    """
    Positive electrode zones.
    """
    _version = '251'
    fluent_name = 'positive-electrode-zone'
    _python_name = 'positive_electrode_zone'

class electrolyte_zone(StringList, AllowedValuesMixin):
    """
    Electrolyte zones.
    """
    _version = '251'
    fluent_name = 'electrolyte-zone'
    _python_name = 'electrolyte_zone'

class negative_electrode_zone(StringList, AllowedValuesMixin):
    """
    Negative electrode zones.
    """
    _version = '251'
    fluent_name = 'negative-electrode-zone'
    _python_name = 'negative_electrode_zone'

class zone_assignment(Group):
    """
    Zone assignment.
    """
    _version = '251'
    fluent_name = 'zone-assignment'
    _python_name = 'zone_assignment'
    child_names = ['positive_electrode_zone', 'electrolyte_zone', 'negative_electrode_zone']
    _child_classes = dict(
        positive_electrode_zone=positive_electrode_zone,
        electrolyte_zone=electrolyte_zone,
        negative_electrode_zone=negative_electrode_zone,
    )

class cathode_i0(Real):
    """
    Exchange current density i0 at cathode.
    """
    _version = '251'
    fluent_name = 'cathode-i0'
    _python_name = 'cathode_i0'

class cathode_alpha1(Real):
    """
    Ce rate exponent at cathode.
    """
    _version = '251'
    fluent_name = 'cathode-alpha1'
    _python_name = 'cathode_alpha1'

class cathode_alpha2(Real):
    """
    Cmax-cs rate exponent at cathode.
    """
    _version = '251'
    fluent_name = 'cathode-alpha2'
    _python_name = 'cathode_alpha2'

class cathode_alpha3(Real):
    """
    Cs rate exponent at cathode.
    """
    _version = '251'
    fluent_name = 'cathode-alpha3'
    _python_name = 'cathode_alpha3'

class cathode_alpha_a(Real):
    """
    Anodic transfer coefficient at cathode.
    """
    _version = '251'
    fluent_name = 'cathode-alpha-a'
    _python_name = 'cathode_alpha_a'

class cathode_alpha_c(Real):
    """
    Cathodic transfer coefficient at cathode.
    """
    _version = '251'
    fluent_name = 'cathode-alpha-c'
    _python_name = 'cathode_alpha_c'

class method_4(String, AllowedValuesMixin):
    """
    Method for the property.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class value_7(Real):
    """
    Constant value for the profile.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class user_defined_12(String, AllowedValuesMixin):
    """
    UDF name for the user-defined profile.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'

class cathode_ocv(Group):
    """
    Equilibium potential at cathode.
    """
    _version = '251'
    fluent_name = 'cathode-ocv'
    _python_name = 'cathode_ocv'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_7,
        user_defined=user_defined_12,
    )

class anode_i0(Real):
    """
    Exchange current density i0 at anode.
    """
    _version = '251'
    fluent_name = 'anode-i0'
    _python_name = 'anode_i0'

class anode_alpha1(Real):
    """
    Ce rate exponent at anode.
    """
    _version = '251'
    fluent_name = 'anode-alpha1'
    _python_name = 'anode_alpha1'

class anode_alpha2(Real):
    """
    Cmax-cs rate exponent at anode.
    """
    _version = '251'
    fluent_name = 'anode-alpha2'
    _python_name = 'anode_alpha2'

class anode_alpha3(Real):
    """
    Cs rate exponent at anode.
    """
    _version = '251'
    fluent_name = 'anode-alpha3'
    _python_name = 'anode_alpha3'

class anode_alpha_a(Real):
    """
    Anodic transfer coefficient at anode.
    """
    _version = '251'
    fluent_name = 'anode-alpha-a'
    _python_name = 'anode_alpha_a'

class anode_alpha_c(Real):
    """
    Cathodic transfer coefficient at anode.
    """
    _version = '251'
    fluent_name = 'anode-alpha-c'
    _python_name = 'anode_alpha_c'

class anode_ocv(Group):
    """
    Equilibium potential at anode.
    """
    _version = '251'
    fluent_name = 'anode-ocv'
    _python_name = 'anode_ocv'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_7,
        user_defined=user_defined_12,
    )

class linearized_bv_rate(Boolean):
    """
    Linearized Butler-Volmer rate.
    """
    _version = '251'
    fluent_name = 'linearized-bv-rate'
    _python_name = 'linearized_bv_rate'

class butler_volmer_rate(Group):
    """
    Up Butler-Volmer rate kinetics parameters.
    """
    _version = '251'
    fluent_name = 'butler-volmer-rate'
    _python_name = 'butler_volmer_rate'
    child_names = ['cathode_i0', 'cathode_alpha1', 'cathode_alpha2', 'cathode_alpha3', 'cathode_alpha_a', 'cathode_alpha_c', 'cathode_ocv', 'anode_i0', 'anode_alpha1', 'anode_alpha2', 'anode_alpha3', 'anode_alpha_a', 'anode_alpha_c', 'anode_ocv', 'linearized_bv_rate']
    _child_classes = dict(
        cathode_i0=cathode_i0,
        cathode_alpha1=cathode_alpha1,
        cathode_alpha2=cathode_alpha2,
        cathode_alpha3=cathode_alpha3,
        cathode_alpha_a=cathode_alpha_a,
        cathode_alpha_c=cathode_alpha_c,
        cathode_ocv=cathode_ocv,
        anode_i0=anode_i0,
        anode_alpha1=anode_alpha1,
        anode_alpha2=anode_alpha2,
        anode_alpha3=anode_alpha3,
        anode_alpha_a=anode_alpha_a,
        anode_alpha_c=anode_alpha_c,
        anode_ocv=anode_ocv,
        linearized_bv_rate=linearized_bv_rate,
    )

class cathode_cmax(Real):
    """
    Max Li+ conc. in cathode.
    """
    _version = '251'
    fluent_name = 'cathode-cmax'
    _python_name = 'cathode_cmax'

class anode_cmax(Real):
    """
    Max Li+ conc. in anode.
    """
    _version = '251'
    fluent_name = 'anode-cmax'
    _python_name = 'anode_cmax'

class cathode_c_init(Real):
    """
    Initial Li+ conc. in cathode.
    """
    _version = '251'
    fluent_name = 'cathode-c-init'
    _python_name = 'cathode_c_init'

class anode_c_init(Real):
    """
    Initial Li+ conc. in anode.
    """
    _version = '251'
    fluent_name = 'anode-c-init'
    _python_name = 'anode_c_init'

class electrolyte_c_init(Real):
    """
    Initial Li+ conc. in electrolyte.
    """
    _version = '251'
    fluent_name = 'electrolyte-c-init'
    _python_name = 'electrolyte_c_init'

class tplus(Group):
    """
    Transference number t+.
    """
    _version = '251'
    fluent_name = 'tplus'
    _python_name = 'tplus'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_7,
        user_defined=user_defined_12,
    )

class activity_term(Group):
    """
    Activity-related term.
    """
    _version = '251'
    fluent_name = 'activity-term'
    _python_name = 'activity_term'
    child_names = ['method', 'value', 'user_defined']
    _child_classes = dict(
        method=method_4,
        value=value_7,
        user_defined=user_defined_12,
    )

class material_property(Group):
    """
    Up material property.
    """
    _version = '251'
    fluent_name = 'material-property'
    _python_name = 'material_property'
    child_names = ['cathode_cmax', 'anode_cmax', 'cathode_c_init', 'anode_c_init', 'electrolyte_c_init', 'tplus', 'activity_term']
    _child_classes = dict(
        cathode_cmax=cathode_cmax,
        anode_cmax=anode_cmax,
        cathode_c_init=cathode_c_init,
        anode_c_init=anode_c_init,
        electrolyte_c_init=electrolyte_c_init,
        tplus=tplus,
        activity_term=activity_term,
    )

class aging_model_enabled(Boolean):
    """
    Enable physics-based aging model.
    """
    _version = '251'
    fluent_name = 'aging-model-enabled'
    _python_name = 'aging_model_enabled'

class li_plating_enabled(Boolean):
    """
    Include Li-plating side reaction.
    """
    _version = '251'
    fluent_name = 'li-plating-enabled'
    _python_name = 'li_plating_enabled'

class cathode_film_growth_enabled(Boolean):
    """
    Include cathode film growth side reaction.
    """
    _version = '251'
    fluent_name = 'cathode-film-growth-enabled'
    _python_name = 'cathode_film_growth_enabled'

class ec_concentration(Real):
    """
    EC concentration in electrolyte.
    """
    _version = '251'
    fluent_name = 'ec-concentration'
    _python_name = 'ec_concentration'

class ec_diffusivity(Real):
    """
    EC diffusivity in SEI layer.
    """
    _version = '251'
    fluent_name = 'ec-diffusivity'
    _python_name = 'ec_diffusivity'

class ionic_conductivity(Real):
    """
    Ionic conductivity in SEI layer.
    """
    _version = '251'
    fluent_name = 'ionic-conductivity'
    _python_name = 'ionic_conductivity'

class rate_constant(Real):
    """
    Rate constant for SEI reaction.
    """
    _version = '251'
    fluent_name = 'rate-constant'
    _python_name = 'rate_constant'

class cathodic_transfer_coefficient(Real):
    """
    Cathodic transfer coefficient.
    """
    _version = '251'
    fluent_name = 'cathodic-transfer-coefficient'
    _python_name = 'cathodic_transfer_coefficient'

class equilibium_potential(Real):
    """
    SEI equilibium potential.
    """
    _version = '251'
    fluent_name = 'equilibium-potential'
    _python_name = 'equilibium_potential'

class molecular_weight(Real):
    """
    SEI molecular weight.
    """
    _version = '251'
    fluent_name = 'molecular-weight'
    _python_name = 'molecular_weight'

class density(Real):
    """
    SEI density.
    """
    _version = '251'
    fluent_name = 'density'
    _python_name = 'density'

class sei_growth(Group):
    """
    Up SEI layer growth parameters.
    """
    _version = '251'
    fluent_name = 'sei-growth'
    _python_name = 'sei_growth'
    child_names = ['ec_concentration', 'ec_diffusivity', 'ionic_conductivity', 'rate_constant', 'cathodic_transfer_coefficient', 'equilibium_potential', 'molecular_weight', 'density']
    _child_classes = dict(
        ec_concentration=ec_concentration,
        ec_diffusivity=ec_diffusivity,
        ionic_conductivity=ionic_conductivity,
        rate_constant=rate_constant,
        cathodic_transfer_coefficient=cathodic_transfer_coefficient,
        equilibium_potential=equilibium_potential,
        molecular_weight=molecular_weight,
        density=density,
    )

class current_exchange_density(Real):
    """
    Current exchange density for Li-plating reaction.
    """
    _version = '251'
    fluent_name = 'current-exchange-density'
    _python_name = 'current_exchange_density'

class equilibium_potential_1(Real):
    """
    Li-plating equilibium potential.
    """
    _version = '251'
    fluent_name = 'equilibium-potential'
    _python_name = 'equilibium_potential'

class molecular_weight_1(Real):
    """
    Li-plating molecular weight.
    """
    _version = '251'
    fluent_name = 'molecular-weight'
    _python_name = 'molecular_weight'

class density_1(Real):
    """
    Li-plating density.
    """
    _version = '251'
    fluent_name = 'density'
    _python_name = 'density'

class spliting_coefficient(Real):
    """
    Spliting coefficient.
    """
    _version = '251'
    fluent_name = 'spliting-coefficient'
    _python_name = 'spliting_coefficient'

class li_plating(Group):
    """
    Up Li-plating reaction parameters.
    """
    _version = '251'
    fluent_name = 'li-plating'
    _python_name = 'li_plating'
    child_names = ['current_exchange_density', 'cathodic_transfer_coefficient', 'equilibium_potential', 'molecular_weight', 'density', 'spliting_coefficient']
    _child_classes = dict(
        current_exchange_density=current_exchange_density,
        cathodic_transfer_coefficient=cathodic_transfer_coefficient,
        equilibium_potential=equilibium_potential_1,
        molecular_weight=molecular_weight_1,
        density=density_1,
        spliting_coefficient=spliting_coefficient,
    )

class rate_constant_1(Real):
    """
    Rate constant for cathode film reaciton.
    """
    _version = '251'
    fluent_name = 'rate-constant'
    _python_name = 'rate_constant'

class ionic_conductivity_1(Real):
    """
    Ionic conductivity.
    """
    _version = '251'
    fluent_name = 'ionic-conductivity'
    _python_name = 'ionic_conductivity'

class molecular_weight_2(Real):
    """
    Cathode film molecular weight.
    """
    _version = '251'
    fluent_name = 'molecular-weight'
    _python_name = 'molecular_weight'

class density_2(Real):
    """
    Cathode film density.
    """
    _version = '251'
    fluent_name = 'density'
    _python_name = 'density'

class cathode_film_growth(Group):
    """
    Up cathode film growth reaction parameters.
    """
    _version = '251'
    fluent_name = 'cathode-film-growth'
    _python_name = 'cathode_film_growth'
    child_names = ['rate_constant', 'ionic_conductivity', 'molecular_weight', 'density']
    _child_classes = dict(
        rate_constant=rate_constant_1,
        ionic_conductivity=ionic_conductivity_1,
        molecular_weight=molecular_weight_2,
        density=density_2,
    )

class aging_model(Group):
    """
    Up physics-based aging model.
    """
    _version = '251'
    fluent_name = 'aging-model'
    _python_name = 'aging_model'
    child_names = ['aging_model_enabled', 'li_plating_enabled', 'cathode_film_growth_enabled', 'sei_growth', 'li_plating', 'cathode_film_growth']
    _child_classes = dict(
        aging_model_enabled=aging_model_enabled,
        li_plating_enabled=li_plating_enabled,
        cathode_film_growth_enabled=cathode_film_growth_enabled,
        sei_growth=sei_growth,
        li_plating=li_plating,
        cathode_film_growth=cathode_film_growth,
    )

class lithium_battery(Group):
    """
    Up li-ion battery model.
    """
    _version = '251'
    fluent_name = 'lithium-battery'
    _python_name = 'lithium_battery'
    child_names = ['echem_heating_enabled', 'zone_assignment', 'butler_volmer_rate', 'material_property', 'aging_model']
    _child_classes = dict(
        echem_heating_enabled=echem_heating_enabled,
        zone_assignment=zone_assignment,
        butler_volmer_rate=butler_volmer_rate,
        material_property=material_property,
        aging_model=aging_model,
    )

class device_type(String, AllowedValuesMixin):
    """
    Device type.
    """
    _version = '251'
    fluent_name = 'device-type'
    _python_name = 'device_type'

class mea_model(String, AllowedValuesMixin):
    """
    MEA layer modeling method.
    """
    _version = '251'
    fluent_name = 'mea-model'
    _python_name = 'mea_model'

class source_enabled(Boolean):
    """
    Include Electrochemistry Sources.
    """
    _version = '251'
    fluent_name = 'source-enabled'
    _python_name = 'source_enabled'

class butlervolmer_rate(Boolean):
    """
    Use Butler-Volmer Rate.
    """
    _version = '251'
    fluent_name = 'butlervolmer-rate'
    _python_name = 'butlervolmer_rate'

class multidiff_enabled(Boolean):
    """
    Enable Multi-Component Diffusion.
    """
    _version = '251'
    fluent_name = 'multidiff-enabled'
    _python_name = 'multidiff_enabled'

class halfcell_voltage(Boolean):
    """
    Enable Half-Cell Potential.
    """
    _version = '251'
    fluent_name = 'halfcell-voltage'
    _python_name = 'halfcell_voltage'

class osmotic_drag(Boolean):
    """
    Include Osmotic Drag Effect.
    """
    _version = '251'
    fluent_name = 'osmotic-drag'
    _python_name = 'osmotic_drag'

class capillary_pressure(Boolean):
    """
    Include Capillary Pressure Effect.
    """
    _version = '251'
    fluent_name = 'capillary-pressure'
    _python_name = 'capillary_pressure'

class reaction_heat(Boolean):
    """
    Include Reaction Heat.
    """
    _version = '251'
    fluent_name = 'reaction-heat'
    _python_name = 'reaction_heat'

class phase_change(Boolean):
    """
    Include Water Phase Change.
    """
    _version = '251'
    fluent_name = 'phase-change'
    _python_name = 'phase_change'

class water_content(Boolean):
    """
    Include Water Content Transport Equation.
    """
    _version = '251'
    fluent_name = 'water-content'
    _python_name = 'water_content'

class bc_type(String, AllowedValuesMixin):
    """
    Electrical boundary type.
    """
    _version = '251'
    fluent_name = 'bc-type'
    _python_name = 'bc_type'

class tot_voltage(Real):
    """
    Total Cell Voltage (V).
    """
    _version = '251'
    fluent_name = 'tot-voltage'
    _python_name = 'tot_voltage'

class tot_current(Real):
    """
    Total Cell Current (A).
    """
    _version = '251'
    fluent_name = 'tot-current'
    _python_name = 'tot_current'

class options_5(Group):
    """
    Model options.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['device_type', 'mea_model', 'source_enabled', 'butlervolmer_rate', 'multidiff_enabled', 'halfcell_voltage', 'osmotic_drag', 'capillary_pressure', 'reaction_heat', 'phase_change', 'water_content', 'bc_type', 'tot_voltage', 'tot_current']
    _child_classes = dict(
        device_type=device_type,
        mea_model=mea_model,
        source_enabled=source_enabled,
        butlervolmer_rate=butlervolmer_rate,
        multidiff_enabled=multidiff_enabled,
        halfcell_voltage=halfcell_voltage,
        osmotic_drag=osmotic_drag,
        capillary_pressure=capillary_pressure,
        reaction_heat=reaction_heat,
        phase_change=phase_change,
        water_content=water_content,
        bc_type=bc_type,
        tot_voltage=tot_voltage,
        tot_current=tot_current,
    )

class anode_jref(Real):
    """
    Anode Reference Current Density (A/m2).
    """
    _version = '251'
    fluent_name = 'anode-jref'
    _python_name = 'anode_jref'

class anode_jea(Real):
    """
    Anode Activation Energy (J/mol).
    """
    _version = '251'
    fluent_name = 'anode-jea'
    _python_name = 'anode_jea'

class anode_tref(Real):
    """
    Anode Reference Temperature (K).
    """
    _version = '251'
    fluent_name = 'anode-tref'
    _python_name = 'anode_tref'

class anode_cref(Real):
    """
    Anode Reference Concentration (kmol/m3).
    """
    _version = '251'
    fluent_name = 'anode-cref'
    _python_name = 'anode_cref'

class anode_exp(Real):
    """
    Anode Concentration Exponent.
    """
    _version = '251'
    fluent_name = 'anode-exp'
    _python_name = 'anode_exp'

class anode_ex_a(Real):
    """
    Anode Exchange Coefficient(a).
    """
    _version = '251'
    fluent_name = 'anode-ex-a'
    _python_name = 'anode_ex_a'

class anode_ex_c(Real):
    """
    Anode Exchange Coefficient(c).
    """
    _version = '251'
    fluent_name = 'anode-ex-c'
    _python_name = 'anode_ex_c'

class cathode_jref(Real):
    """
    Cathode Reference Current Density (A/m2).
    """
    _version = '251'
    fluent_name = 'cathode-jref'
    _python_name = 'cathode_jref'

class cathode_jea(Real):
    """
    Cathode Activation Energy (J/mol).
    """
    _version = '251'
    fluent_name = 'cathode-jea'
    _python_name = 'cathode_jea'

class cathode_tref(Real):
    """
    Cathode Reference Temperature (K).
    """
    _version = '251'
    fluent_name = 'cathode-tref'
    _python_name = 'cathode_tref'

class cathode_cref(Real):
    """
    Cathode Reference Concentration (kmol/m3).
    """
    _version = '251'
    fluent_name = 'cathode-cref'
    _python_name = 'cathode_cref'

class cathode_exp(Real):
    """
    Cathode Concentration Exponent.
    """
    _version = '251'
    fluent_name = 'cathode-exp'
    _python_name = 'cathode_exp'

class cathode_ex_a(Real):
    """
    Cathode Exchange Coefficient(a).
    """
    _version = '251'
    fluent_name = 'cathode-ex-a'
    _python_name = 'cathode_ex_a'

class cathode_ex_c(Real):
    """
    Cathode Exchange Coefficient(c).
    """
    _version = '251'
    fluent_name = 'cathode-ex-c'
    _python_name = 'cathode_ex_c'

class anode_stde(Real):
    """
    Anode Half-Cell Potential (V).
    """
    _version = '251'
    fluent_name = 'anode-stde'
    _python_name = 'anode_stde'

class cathode_stde(Real):
    """
    Cathode Half-Cell Potential (V).
    """
    _version = '251'
    fluent_name = 'cathode-stde'
    _python_name = 'cathode_stde'

class std_tem(Real):
    """
    Standard State Temperature (K).
    """
    _version = '251'
    fluent_name = 'std-tem'
    _python_name = 'std_tem'

class std_pre(Real):
    """
    Standard State Pressure (Pa).
    """
    _version = '251'
    fluent_name = 'std-pre'
    _python_name = 'std_pre'

class open_voltage(Real):
    """
    Open-Circuit Voltage (V).
    """
    _version = '251'
    fluent_name = 'open-voltage'
    _python_name = 'open_voltage'

class anode_entro(Real):
    """
    Anode Reaction Entropy (j/kgmol-k).
    """
    _version = '251'
    fluent_name = 'anode-entro'
    _python_name = 'anode_entro'

class cathode_entro(Real):
    """
    Cathode Reaction Entropy (j/kgmol-k).
    """
    _version = '251'
    fluent_name = 'cathode-entro'
    _python_name = 'cathode_entro'

class evaporation_rate(Real):
    """
    Vaporation Rate (1/s).
    """
    _version = '251'
    fluent_name = 'evaporation-rate'
    _python_name = 'evaporation_rate'

class condensation_rate(Real):
    """
    Condensation Rate (1/s).
    """
    _version = '251'
    fluent_name = 'condensation-rate'
    _python_name = 'condensation_rate'

class osmoticdrag_coeff(Real):
    """
    Modification to Osmotic Drag.
    """
    _version = '251'
    fluent_name = 'osmoticdrag-coeff'
    _python_name = 'osmoticdrag_coeff'

class parameters_1(Group):
    """
    Model parameters.
    """
    _version = '251'
    fluent_name = 'parameters'
    _python_name = 'parameters'
    child_names = ['anode_jref', 'anode_jea', 'anode_tref', 'anode_cref', 'anode_exp', 'anode_ex_a', 'anode_ex_c', 'cathode_jref', 'cathode_jea', 'cathode_tref', 'cathode_cref', 'cathode_exp', 'cathode_ex_a', 'cathode_ex_c', 'anode_stde', 'cathode_stde', 'std_tem', 'std_pre', 'open_voltage', 'anode_entro', 'cathode_entro', 'evaporation_rate', 'condensation_rate', 'osmoticdrag_coeff']
    _child_classes = dict(
        anode_jref=anode_jref,
        anode_jea=anode_jea,
        anode_tref=anode_tref,
        anode_cref=anode_cref,
        anode_exp=anode_exp,
        anode_ex_a=anode_ex_a,
        anode_ex_c=anode_ex_c,
        cathode_jref=cathode_jref,
        cathode_jea=cathode_jea,
        cathode_tref=cathode_tref,
        cathode_cref=cathode_cref,
        cathode_exp=cathode_exp,
        cathode_ex_a=cathode_ex_a,
        cathode_ex_c=cathode_ex_c,
        anode_stde=anode_stde,
        cathode_stde=cathode_stde,
        std_tem=std_tem,
        std_pre=std_pre,
        open_voltage=open_voltage,
        anode_entro=anode_entro,
        cathode_entro=cathode_entro,
        evaporation_rate=evaporation_rate,
        condensation_rate=condensation_rate,
        osmoticdrag_coeff=osmoticdrag_coeff,
    )

class anode_cc_zone_list(StringList, AllowedValuesMixin):
    """
    Anode current collector cell zones.
    """
    _version = '251'
    fluent_name = 'anode-cc-zone-list'
    _python_name = 'anode_cc_zone_list'

class anode_cc_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'anode-cc-update'
    _python_name = 'anode_cc_update'

class anode_cc_material(String, AllowedValuesMixin):
    """
    Anode current collector material.
    """
    _version = '251'
    fluent_name = 'anode-cc-material'
    _python_name = 'anode_cc_material'

class anode_cc_zone(Group):
    """
    Up anode current collector.
    """
    _version = '251'
    fluent_name = 'anode-cc-zone'
    _python_name = 'anode_cc_zone'
    child_names = ['anode_cc_zone_list', 'anode_cc_update', 'anode_cc_material']
    _child_classes = dict(
        anode_cc_zone_list=anode_cc_zone_list,
        anode_cc_update=anode_cc_update,
        anode_cc_material=anode_cc_material,
    )

class anode_fc_zone_list(StringList, AllowedValuesMixin):
    """
    Anode flow channel cell zones.
    """
    _version = '251'
    fluent_name = 'anode-fc-zone-list'
    _python_name = 'anode_fc_zone_list'

class anode_fc_zone(Group):
    """
    Up anode flow channel.
    """
    _version = '251'
    fluent_name = 'anode-fc-zone'
    _python_name = 'anode_fc_zone'
    child_names = ['anode_fc_zone_list']
    _child_classes = dict(
        anode_fc_zone_list=anode_fc_zone_list,
    )

class anode_pl_zone_list(StringList, AllowedValuesMixin):
    """
    Anode porous layer cell zones.
    """
    _version = '251'
    fluent_name = 'anode-pl-zone-list'
    _python_name = 'anode_pl_zone_list'

class anode_pl_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'anode-pl-update'
    _python_name = 'anode_pl_update'

class anode_pl_material(String, AllowedValuesMixin):
    """
    Anode porous layer material.
    """
    _version = '251'
    fluent_name = 'anode-pl-material'
    _python_name = 'anode_pl_material'

class anode_pl_porosity(Real):
    """
    Anode porous layer porosity.
    """
    _version = '251'
    fluent_name = 'anode-pl-porosity'
    _python_name = 'anode_pl_porosity'

class anode_pl_kr(Real):
    """
    Anode porous layer permeability.
    """
    _version = '251'
    fluent_name = 'anode-pl-kr'
    _python_name = 'anode_pl_kr'

class anode_pl_cp_function(String, AllowedValuesMixin):
    """
    Anode porous layer capillary pressure function.
    """
    _version = '251'
    fluent_name = 'anode-pl-cp-function'
    _python_name = 'anode_pl_cp_function'

class anode_pl_cp_udf(String, AllowedValuesMixin):
    """
    Anode porous layer capillary pressure user-defined function.
    """
    _version = '251'
    fluent_name = 'anode-pl-cp-udf'
    _python_name = 'anode_pl_cp_udf'

class anode_pl_angle(Real):
    """
    Anode porous layer contact angle.
    """
    _version = '251'
    fluent_name = 'anode-pl-angle'
    _python_name = 'anode_pl_angle'

class anode_pl_a(Real):
    """
    Anode porous layer Leverett function coefficient a.
    """
    _version = '251'
    fluent_name = 'anode-pl-a'
    _python_name = 'anode_pl_a'

class anode_pl_b(Real):
    """
    Anode porous layer Leverett function coefficient b.
    """
    _version = '251'
    fluent_name = 'anode-pl-b'
    _python_name = 'anode_pl_b'

class anode_pl_c(Real):
    """
    Anode porous layer Leverett function coefficient c.
    """
    _version = '251'
    fluent_name = 'anode-pl-c'
    _python_name = 'anode_pl_c'

class anode_pl_zone(Group):
    """
    Up anode porous layer.
    """
    _version = '251'
    fluent_name = 'anode-pl-zone'
    _python_name = 'anode_pl_zone'
    child_names = ['anode_pl_zone_list', 'anode_pl_update', 'anode_pl_material', 'anode_pl_porosity', 'anode_pl_kr', 'anode_pl_cp_function', 'anode_pl_cp_udf', 'anode_pl_angle', 'anode_pl_a', 'anode_pl_b', 'anode_pl_c']
    _child_classes = dict(
        anode_pl_zone_list=anode_pl_zone_list,
        anode_pl_update=anode_pl_update,
        anode_pl_material=anode_pl_material,
        anode_pl_porosity=anode_pl_porosity,
        anode_pl_kr=anode_pl_kr,
        anode_pl_cp_function=anode_pl_cp_function,
        anode_pl_cp_udf=anode_pl_cp_udf,
        anode_pl_angle=anode_pl_angle,
        anode_pl_a=anode_pl_a,
        anode_pl_b=anode_pl_b,
        anode_pl_c=anode_pl_c,
    )

class anode_cl_zone_list(StringList, AllowedValuesMixin):
    """
    Anode catalyst layer cell zones.
    """
    _version = '251'
    fluent_name = 'anode-cl-zone-list'
    _python_name = 'anode_cl_zone_list'

class anode_cl_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'anode-cl-update'
    _python_name = 'anode_cl_update'

class anode_cl_material(String, AllowedValuesMixin):
    """
    Anode catalyst layer material.
    """
    _version = '251'
    fluent_name = 'anode-cl-material'
    _python_name = 'anode_cl_material'

class anode_cl_porosity(Real):
    """
    Anode catalyst layer porosity.
    """
    _version = '251'
    fluent_name = 'anode-cl-porosity'
    _python_name = 'anode_cl_porosity'

class anode_cl_kr(Real):
    """
    Anode catalyst layer permeability.
    """
    _version = '251'
    fluent_name = 'anode-cl-kr'
    _python_name = 'anode_cl_kr'

class anode_cl_svratio(Real):
    """
    Anode catalyst layer surface volume ratio.
    """
    _version = '251'
    fluent_name = 'anode-cl-svratio'
    _python_name = 'anode_cl_svratio'

class anode_cl_thickness(Real):
    """
    Anode catalyst layer thickness.
    """
    _version = '251'
    fluent_name = 'anode-cl-thickness'
    _python_name = 'anode_cl_thickness'

class anode_cl_conductivity(Real):
    """
    Anode catalyst layer conductivity.
    """
    _version = '251'
    fluent_name = 'anode-cl-conductivity'
    _python_name = 'anode_cl_conductivity'

class anode_cl_cp_function(String, AllowedValuesMixin):
    """
    Anode catalyst layer capillary pressure function.
    """
    _version = '251'
    fluent_name = 'anode-cl-cp-function'
    _python_name = 'anode_cl_cp_function'

class anode_cl_cp_udf(String, AllowedValuesMixin):
    """
    Anode catalyst layer capillary pressure user-defined function.
    """
    _version = '251'
    fluent_name = 'anode-cl-cp-udf'
    _python_name = 'anode_cl_cp_udf'

class anode_cl_angle(Real):
    """
    Anode catalyst layer contact angle.
    """
    _version = '251'
    fluent_name = 'anode-cl-angle'
    _python_name = 'anode_cl_angle'

class anode_cl_a(Real):
    """
    Anode catalyst layer Leverett function coefficient a.
    """
    _version = '251'
    fluent_name = 'anode-cl-a'
    _python_name = 'anode_cl_a'

class anode_cl_b(Real):
    """
    Anode catalyst layer Leverett function coefficient b.
    """
    _version = '251'
    fluent_name = 'anode-cl-b'
    _python_name = 'anode_cl_b'

class anode_cl_c(Real):
    """
    Anode catalyst layer Leverett function coefficient c.
    """
    _version = '251'
    fluent_name = 'anode-cl-c'
    _python_name = 'anode_cl_c'

class anode_cl_zone(Group):
    """
    Up anode catalyst layer.
    """
    _version = '251'
    fluent_name = 'anode-cl-zone'
    _python_name = 'anode_cl_zone'
    child_names = ['anode_cl_zone_list', 'anode_cl_update', 'anode_cl_material', 'anode_cl_porosity', 'anode_cl_kr', 'anode_cl_svratio', 'anode_cl_thickness', 'anode_cl_conductivity', 'anode_cl_cp_function', 'anode_cl_cp_udf', 'anode_cl_angle', 'anode_cl_a', 'anode_cl_b', 'anode_cl_c']
    _child_classes = dict(
        anode_cl_zone_list=anode_cl_zone_list,
        anode_cl_update=anode_cl_update,
        anode_cl_material=anode_cl_material,
        anode_cl_porosity=anode_cl_porosity,
        anode_cl_kr=anode_cl_kr,
        anode_cl_svratio=anode_cl_svratio,
        anode_cl_thickness=anode_cl_thickness,
        anode_cl_conductivity=anode_cl_conductivity,
        anode_cl_cp_function=anode_cl_cp_function,
        anode_cl_cp_udf=anode_cl_cp_udf,
        anode_cl_angle=anode_cl_angle,
        anode_cl_a=anode_cl_a,
        anode_cl_b=anode_cl_b,
        anode_cl_c=anode_cl_c,
    )

class anode(Group):
    """
    Up anode.
    """
    _version = '251'
    fluent_name = 'anode'
    _python_name = 'anode'
    child_names = ['anode_cc_zone', 'anode_fc_zone', 'anode_pl_zone', 'anode_cl_zone']
    _child_classes = dict(
        anode_cc_zone=anode_cc_zone,
        anode_fc_zone=anode_fc_zone,
        anode_pl_zone=anode_pl_zone,
        anode_cl_zone=anode_cl_zone,
    )

class mem_zone_list(StringList, AllowedValuesMixin):
    """
    Electrolyte cell zones.
    """
    _version = '251'
    fluent_name = 'mem-zone-list'
    _python_name = 'mem_zone_list'

class mem_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'mem-update'
    _python_name = 'mem_update'

class mem_material(String, AllowedValuesMixin):
    """
    Electrolyte material.
    """
    _version = '251'
    fluent_name = 'mem-material'
    _python_name = 'mem_material'

class mem_porosity(Real):
    """
    Membrane porosity.
    """
    _version = '251'
    fluent_name = 'mem-porosity'
    _python_name = 'mem_porosity'

class mem_kr(Real):
    """
    Membrane permeability.
    """
    _version = '251'
    fluent_name = 'mem-kr'
    _python_name = 'mem_kr'

class mem_zone(Group):
    """
    Up electrolyte cell zones.
    """
    _version = '251'
    fluent_name = 'mem-zone'
    _python_name = 'mem_zone'
    child_names = ['mem_zone_list', 'mem_update', 'mem_material', 'mem_porosity', 'mem_kr']
    _child_classes = dict(
        mem_zone_list=mem_zone_list,
        mem_update=mem_update,
        mem_material=mem_material,
        mem_porosity=mem_porosity,
        mem_kr=mem_kr,
    )

class permeation_enabled(Boolean):
    """
    Enable species permeation.
    """
    _version = '251'
    fluent_name = 'permeation-enabled'
    _python_name = 'permeation_enabled'

class permeation_n(Integer):
    """
    The total number of permeation species.
    """
    _version = '251'
    fluent_name = 'permeation-n'
    _python_name = 'permeation_n'

class permeation_name(StringList, AllowedValuesMixin):
    """
    Permeation species name.
    """
    _version = '251'
    fluent_name = 'permeation-name'
    _python_name = 'permeation_name'

class permeation_rate(RealList):
    """
    Permeation rate.
    """
    _version = '251'
    fluent_name = 'permeation-rate'
    _python_name = 'permeation_rate'

class permeation_ea(RealList):
    """
    Permeation activation Energy.
    """
    _version = '251'
    fluent_name = 'permeation-ea'
    _python_name = 'permeation_ea'

class species_permeation(Group):
    """
    Up species permeation.
    """
    _version = '251'
    fluent_name = 'species-permeation'
    _python_name = 'species_permeation'
    child_names = ['permeation_enabled', 'permeation_n', 'permeation_name', 'permeation_rate', 'permeation_ea']
    _child_classes = dict(
        permeation_enabled=permeation_enabled,
        permeation_n=permeation_n,
        permeation_name=permeation_name,
        permeation_rate=permeation_rate,
        permeation_ea=permeation_ea,
    )

class mem_anode_interface(StringList, AllowedValuesMixin):
    """
    Electrolyte Anode Interface.
    """
    _version = '251'
    fluent_name = 'mem-anode-interface'
    _python_name = 'mem_anode_interface'

class mem_cathode_interface(StringList, AllowedValuesMixin):
    """
    Electrolyte Cathode Interface.
    """
    _version = '251'
    fluent_name = 'mem-cathode-interface'
    _python_name = 'mem_cathode_interface'

class mem_thickness(Real):
    """
    Membrane thickness.
    """
    _version = '251'
    fluent_name = 'mem-thickness'
    _python_name = 'mem_thickness'

class mem_cond(Real):
    """
    Membrane conductivity.
    """
    _version = '251'
    fluent_name = 'mem-cond'
    _python_name = 'mem_cond'

class electrolyte(Group):
    """
    Up electrolyte.
    """
    _version = '251'
    fluent_name = 'electrolyte'
    _python_name = 'electrolyte'
    child_names = ['mem_zone', 'species_permeation', 'mem_anode_interface', 'mem_cathode_interface', 'mem_thickness', 'mem_cond']
    _child_classes = dict(
        mem_zone=mem_zone,
        species_permeation=species_permeation,
        mem_anode_interface=mem_anode_interface,
        mem_cathode_interface=mem_cathode_interface,
        mem_thickness=mem_thickness,
        mem_cond=mem_cond,
    )

class cathode_cc_zone_list(StringList, AllowedValuesMixin):
    """
    Cathode current collector cell zones.
    """
    _version = '251'
    fluent_name = 'cathode-cc-zone-list'
    _python_name = 'cathode_cc_zone_list'

class cathode_cc_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'cathode-cc-update'
    _python_name = 'cathode_cc_update'

class cathode_cc_material(String, AllowedValuesMixin):
    """
    Cathode current collector material.
    """
    _version = '251'
    fluent_name = 'cathode-cc-material'
    _python_name = 'cathode_cc_material'

class cathode_cc_zone(Group):
    """
    Up cathode current collector.
    """
    _version = '251'
    fluent_name = 'cathode-cc-zone'
    _python_name = 'cathode_cc_zone'
    child_names = ['cathode_cc_zone_list', 'cathode_cc_update', 'cathode_cc_material']
    _child_classes = dict(
        cathode_cc_zone_list=cathode_cc_zone_list,
        cathode_cc_update=cathode_cc_update,
        cathode_cc_material=cathode_cc_material,
    )

class cathode_fc_zone_list(StringList, AllowedValuesMixin):
    """
    Cathode flow channel cell zones.
    """
    _version = '251'
    fluent_name = 'cathode-fc-zone-list'
    _python_name = 'cathode_fc_zone_list'

class cathode_fc_zone(Group):
    """
    Up cathode flow channel.
    """
    _version = '251'
    fluent_name = 'cathode-fc-zone'
    _python_name = 'cathode_fc_zone'
    child_names = ['cathode_fc_zone_list']
    _child_classes = dict(
        cathode_fc_zone_list=cathode_fc_zone_list,
    )

class cathode_pl_zone_list(StringList, AllowedValuesMixin):
    """
    Cathode porous layer cell zones.
    """
    _version = '251'
    fluent_name = 'cathode-pl-zone-list'
    _python_name = 'cathode_pl_zone_list'

class cathode_pl_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'cathode-pl-update'
    _python_name = 'cathode_pl_update'

class cathode_pl_material(String, AllowedValuesMixin):
    """
    Cathode porous layer material.
    """
    _version = '251'
    fluent_name = 'cathode-pl-material'
    _python_name = 'cathode_pl_material'

class cathode_pl_porosity(Real):
    """
    Cathode porous layer porosity.
    """
    _version = '251'
    fluent_name = 'cathode-pl-porosity'
    _python_name = 'cathode_pl_porosity'

class cathode_pl_kr(Real):
    """
    Cathode porous layer permeability.
    """
    _version = '251'
    fluent_name = 'cathode-pl-kr'
    _python_name = 'cathode_pl_kr'

class cathode_pl_cp_function(String, AllowedValuesMixin):
    """
    Cathode porous layer capillary pressure function.
    """
    _version = '251'
    fluent_name = 'cathode-pl-cp-function'
    _python_name = 'cathode_pl_cp_function'

class cathode_pl_cp_udf(String, AllowedValuesMixin):
    """
    Cathode porous layer capillary pressure user-defined function.
    """
    _version = '251'
    fluent_name = 'cathode-pl-cp-udf'
    _python_name = 'cathode_pl_cp_udf'

class cathode_pl_angle(Real):
    """
    Cathode porous layer contact angle.
    """
    _version = '251'
    fluent_name = 'cathode-pl-angle'
    _python_name = 'cathode_pl_angle'

class cathode_pl_a(Real):
    """
    Cathode porous layer Leverett function coefficient a.
    """
    _version = '251'
    fluent_name = 'cathode-pl-a'
    _python_name = 'cathode_pl_a'

class cathode_pl_b(Real):
    """
    Cathode porous layer Leverett function coefficient b.
    """
    _version = '251'
    fluent_name = 'cathode-pl-b'
    _python_name = 'cathode_pl_b'

class cathode_pl_c(Real):
    """
    Cathode porous layer Leverett function coefficient c.
    """
    _version = '251'
    fluent_name = 'cathode-pl-c'
    _python_name = 'cathode_pl_c'

class cathode_pl_zone(Group):
    """
    Up cathode porous layer.
    """
    _version = '251'
    fluent_name = 'cathode-pl-zone'
    _python_name = 'cathode_pl_zone'
    child_names = ['cathode_pl_zone_list', 'cathode_pl_update', 'cathode_pl_material', 'cathode_pl_porosity', 'cathode_pl_kr', 'cathode_pl_cp_function', 'cathode_pl_cp_udf', 'cathode_pl_angle', 'cathode_pl_a', 'cathode_pl_b', 'cathode_pl_c']
    _child_classes = dict(
        cathode_pl_zone_list=cathode_pl_zone_list,
        cathode_pl_update=cathode_pl_update,
        cathode_pl_material=cathode_pl_material,
        cathode_pl_porosity=cathode_pl_porosity,
        cathode_pl_kr=cathode_pl_kr,
        cathode_pl_cp_function=cathode_pl_cp_function,
        cathode_pl_cp_udf=cathode_pl_cp_udf,
        cathode_pl_angle=cathode_pl_angle,
        cathode_pl_a=cathode_pl_a,
        cathode_pl_b=cathode_pl_b,
        cathode_pl_c=cathode_pl_c,
    )

class cathode_cl_zone_list(StringList, AllowedValuesMixin):
    """
    Cathode catalyst layer cell zones.
    """
    _version = '251'
    fluent_name = 'cathode-cl-zone-list'
    _python_name = 'cathode_cl_zone_list'

class cathode_cl_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'cathode-cl-update'
    _python_name = 'cathode_cl_update'

class cathode_cl_material(String, AllowedValuesMixin):
    """
    Cathode catalyst layer material.
    """
    _version = '251'
    fluent_name = 'cathode-cl-material'
    _python_name = 'cathode_cl_material'

class cathode_cl_porosity(Real):
    """
    Cathode catalyst layer porosity.
    """
    _version = '251'
    fluent_name = 'cathode-cl-porosity'
    _python_name = 'cathode_cl_porosity'

class cathode_cl_kr(Real):
    """
    Cathode catalyst layer permeability.
    """
    _version = '251'
    fluent_name = 'cathode-cl-kr'
    _python_name = 'cathode_cl_kr'

class cathode_cl_svratio(Real):
    """
    Cathode catalyst layer surface volume ratio.
    """
    _version = '251'
    fluent_name = 'cathode-cl-svratio'
    _python_name = 'cathode_cl_svratio'

class cathode_cl_thickness(Real):
    """
    Cathode catalyst layer thickness.
    """
    _version = '251'
    fluent_name = 'cathode-cl-thickness'
    _python_name = 'cathode_cl_thickness'

class cathode_cl_conductivity(Real):
    """
    Cathode catalyst layer conductivity.
    """
    _version = '251'
    fluent_name = 'cathode-cl-conductivity'
    _python_name = 'cathode_cl_conductivity'

class cathode_cl_cp_function(String, AllowedValuesMixin):
    """
    Cathode catalyst layer capillary pressure function.
    """
    _version = '251'
    fluent_name = 'cathode-cl-cp-function'
    _python_name = 'cathode_cl_cp_function'

class cathode_cl_cp_udf(String, AllowedValuesMixin):
    """
    Cathode catalyst layer capillary pressure user-defined function.
    """
    _version = '251'
    fluent_name = 'cathode-cl-cp-udf'
    _python_name = 'cathode_cl_cp_udf'

class cathode_cl_angle(Real):
    """
    Cathode catalyst layer contact angle.
    """
    _version = '251'
    fluent_name = 'cathode-cl-angle'
    _python_name = 'cathode_cl_angle'

class cathode_cl_a(Real):
    """
    Cathode catalyst layer Leverett function coefficient a.
    """
    _version = '251'
    fluent_name = 'cathode-cl-a'
    _python_name = 'cathode_cl_a'

class cathode_cl_b(Real):
    """
    Cathode catalyst layer Leverett function coefficient b.
    """
    _version = '251'
    fluent_name = 'cathode-cl-b'
    _python_name = 'cathode_cl_b'

class cathode_cl_c(Real):
    """
    Cathode catalyst layer Leverett function coefficient c.
    """
    _version = '251'
    fluent_name = 'cathode-cl-c'
    _python_name = 'cathode_cl_c'

class cathode_cl_zone(Group):
    """
    Up cathode catalyst layer.
    """
    _version = '251'
    fluent_name = 'cathode-cl-zone'
    _python_name = 'cathode_cl_zone'
    child_names = ['cathode_cl_zone_list', 'cathode_cl_update', 'cathode_cl_material', 'cathode_cl_porosity', 'cathode_cl_kr', 'cathode_cl_svratio', 'cathode_cl_thickness', 'cathode_cl_conductivity', 'cathode_cl_cp_function', 'cathode_cl_cp_udf', 'cathode_cl_angle', 'cathode_cl_a', 'cathode_cl_b', 'cathode_cl_c']
    _child_classes = dict(
        cathode_cl_zone_list=cathode_cl_zone_list,
        cathode_cl_update=cathode_cl_update,
        cathode_cl_material=cathode_cl_material,
        cathode_cl_porosity=cathode_cl_porosity,
        cathode_cl_kr=cathode_cl_kr,
        cathode_cl_svratio=cathode_cl_svratio,
        cathode_cl_thickness=cathode_cl_thickness,
        cathode_cl_conductivity=cathode_cl_conductivity,
        cathode_cl_cp_function=cathode_cl_cp_function,
        cathode_cl_cp_udf=cathode_cl_cp_udf,
        cathode_cl_angle=cathode_cl_angle,
        cathode_cl_a=cathode_cl_a,
        cathode_cl_b=cathode_cl_b,
        cathode_cl_c=cathode_cl_c,
    )

class cathode(Group):
    """
    Up cathode.
    """
    _version = '251'
    fluent_name = 'cathode'
    _python_name = 'cathode'
    child_names = ['cathode_cc_zone', 'cathode_fc_zone', 'cathode_pl_zone', 'cathode_cl_zone']
    _child_classes = dict(
        cathode_cc_zone=cathode_cc_zone,
        cathode_fc_zone=cathode_fc_zone,
        cathode_pl_zone=cathode_pl_zone,
        cathode_cl_zone=cathode_cl_zone,
    )

class anode_tab(StringList, AllowedValuesMixin):
    """
    Up anode electrical tabs.
    """
    _version = '251'
    fluent_name = 'anode-tab'
    _python_name = 'anode_tab'

class cathode_tab(StringList, AllowedValuesMixin):
    """
    Up cathode electrical tabs.
    """
    _version = '251'
    fluent_name = 'cathode-tab'
    _python_name = 'cathode_tab'

class electrical_tab(Group):
    """
    Up external electrical tabs.
    """
    _version = '251'
    fluent_name = 'electrical-tab'
    _python_name = 'electrical_tab'
    child_names = ['anode_tab', 'cathode_tab']
    _child_classes = dict(
        anode_tab=anode_tab,
        cathode_tab=cathode_tab,
    )

class echem_rate(String, AllowedValuesMixin):
    """
    Electrochemistry rate factor function.
    """
    _version = '251'
    fluent_name = 'echem-rate'
    _python_name = 'echem_rate'

class relative_permeability(String, AllowedValuesMixin):
    """
    Relative permeability  function.
    """
    _version = '251'
    fluent_name = 'relative-permeability'
    _python_name = 'relative_permeability'

class customization(Group):
    """
    Customization for electrolysis model.
    """
    _version = '251'
    fluent_name = 'customization'
    _python_name = 'customization'
    child_names = ['echem_rate', 'relative_permeability']
    _child_classes = dict(
        echem_rate=echem_rate,
        relative_permeability=relative_permeability,
    )

class zone_name_6(String):
    """
    Zone name in add-zone operation.
    """
    _version = '251'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'

class value_8(Real):
    """
    Value in add-zone operation.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class add_zone(Command):
    """
    Add thread-real-pair object.
    
    Parameters
    ----------
        zone_name : str
            Zone name in add-zone operation.
        value : real
            Value in add-zone operation.
    """
    _version = '251'
    fluent_name = 'add-zone'
    _python_name = 'add_zone'
    argument_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_6,
        value=value_8,
    )

class list_zone(Command):
    """
    List thread-real-pair object.
    """
    _version = '251'
    fluent_name = 'list-zone'
    _python_name = 'list_zone'

class face_name(String, AllowedValuesMixin):
    """
    Pick a zone you want to delete.
    """
    _version = '251'
    fluent_name = 'face-name'
    _python_name = 'face_name'

class delete_zone(Command):
    """
    Delete thread-real-pair object.
    
    Parameters
    ----------
        face_name : str
            Pick a zone you want to delete.
    """
    _version = '251'
    fluent_name = 'delete-zone'
    _python_name = 'delete_zone'
    argument_names = ['face_name']
    _child_classes = dict(
        face_name=face_name,
    )

class zone_name_7(String, AllowedValuesMixin):
    """
    Zone name in thread-real-pair object.
    """
    _version = '251'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'

class value_9(Real):
    """
    Value in thread-real-pair object.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class contact_resis_child(Group):
    """
    'child_object_type' of contact_resis.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'contact_resis_child'
    child_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_7,
        value=value_9,
    )

class contact_resis(ListObject[contact_resis_child]):
    """
    Contact Resistance Regions.
    """
    _version = '251'
    fluent_name = 'contact-resis'
    _python_name = 'contact_resis'
    command_names = ['list_properties', 'resize', 'add_zone', 'list_zone', 'delete_zone']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
        add_zone=add_zone,
        list_zone=list_zone,
        delete_zone=delete_zone,
    )
    child_object_type = contact_resis_child

class advanced(Group):
    """
    Advanced settings.
    """
    _version = '251'
    fluent_name = 'advanced'
    _python_name = 'advanced'
    child_names = ['contact_resis']
    _child_classes = dict(
        contact_resis=contact_resis,
    )

class electrolysis(Group):
    """
    The Electrolysis and H2 Pump model settings.
    """
    _version = '251'
    fluent_name = 'electrolysis'
    _python_name = 'electrolysis'
    child_names = ['options', 'parameters', 'anode', 'electrolyte', 'cathode', 'electrical_tab', 'customization', 'advanced']
    _child_classes = dict(
        options=options_5,
        parameters=parameters_1,
        anode=anode,
        electrolyte=electrolyte,
        cathode=cathode,
        electrical_tab=electrical_tab,
        customization=customization,
        advanced=advanced,
    )

class echemistry(Group):
    """
    The potential/echemistry model settings.
    """
    _version = '251'
    fluent_name = 'echemistry'
    _python_name = 'echemistry'
    child_names = ['potential', 'joule_heating', 'li_battery_enabled', 'echemistry_enabled', 'lithium_battery', 'electrolysis']
    _child_classes = dict(
        potential=potential,
        joule_heating=joule_heating,
        li_battery_enabled=li_battery_enabled,
        echemistry_enabled=echemistry_enabled,
        lithium_battery=lithium_battery,
        electrolysis=electrolysis,
    )

class enabled_22(Boolean):
    """
    Enable battery model.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class solution_method_1(String, AllowedValuesMixin):
    """
    Solution method.
    """
    _version = '251'
    fluent_name = 'solution-method'
    _python_name = 'solution_method'

class echem_model(String, AllowedValuesMixin):
    """
    E-chemistry model.
    """
    _version = '251'
    fluent_name = 'echem-model'
    _python_name = 'echem_model'

class active_zone(StringList, AllowedValuesMixin):
    """
    Battery active zones.
    """
    _version = '251'
    fluent_name = 'active-zone'
    _python_name = 'active_zone'

class passive_zone(StringList, AllowedValuesMixin):
    """
    Passive zones.
    """
    _version = '251'
    fluent_name = 'passive-zone'
    _python_name = 'passive_zone'

class passive_zone_tab(StringList, AllowedValuesMixin):
    """
    Tab conductive regions.
    """
    _version = '251'
    fluent_name = 'passive-zone-tab'
    _python_name = 'passive_zone_tab'

class virtual_connection(Boolean):
    """
    Use virtual connection.
    """
    _version = '251'
    fluent_name = 'virtual-connection'
    _python_name = 'virtual_connection'

class virtual_connection_file(Filename, _InputFile):
    """
    Virtual connection file name.
    """
    _version = '251'
    fluent_name = 'virtual-connection-file'
    _python_name = 'virtual_connection_file'

class positive_tab(StringList, AllowedValuesMixin):
    """
    Positive terminal surface.
    """
    _version = '251'
    fluent_name = 'positive-tab'
    _python_name = 'positive_tab'

class negative_tab(StringList, AllowedValuesMixin):
    """
    Negative terminal surface.
    """
    _version = '251'
    fluent_name = 'negative-tab'
    _python_name = 'negative_tab'

class print_battery_connection(Command):
    """
    Print battery connection information.
    """
    _version = '251'
    fluent_name = 'print-battery-connection'
    _python_name = 'print_battery_connection'

class zone_assignment_1(Group):
    """
    Battery zone assignment.
    """
    _version = '251'
    fluent_name = 'zone-assignment'
    _python_name = 'zone_assignment'
    child_names = ['active_zone', 'passive_zone', 'passive_zone_tab', 'virtual_connection', 'virtual_connection_file', 'positive_tab', 'negative_tab']
    command_names = ['print_battery_connection']
    _child_classes = dict(
        active_zone=active_zone,
        passive_zone=passive_zone,
        passive_zone_tab=passive_zone_tab,
        virtual_connection=virtual_connection,
        virtual_connection_file=virtual_connection_file,
        positive_tab=positive_tab,
        negative_tab=negative_tab,
        print_battery_connection=print_battery_connection,
    )

class initial_dod(Real):
    """
    Initial DOD.
    """
    _version = '251'
    fluent_name = 'initial-dod'
    _python_name = 'initial_dod'

class ref_capacity(Real):
    """
    Reference capacity in the NTGK model.
    """
    _version = '251'
    fluent_name = 'ref-capacity'
    _python_name = 'ref_capacity'

class data_type(String, AllowedValuesMixin):
    """
    Data type in the NTGK model.
    """
    _version = '251'
    fluent_name = 'data-type'
    _python_name = 'data_type'

class poly_u_function(RealList):
    """
    List u value in polynomial.
    """
    _version = '251'
    fluent_name = 'poly-u-function'
    _python_name = 'poly_u_function'

class poly_y_function(RealList):
    """
    List Y-polynomial in the NTGK model.
    """
    _version = '251'
    fluent_name = 'poly-y-function'
    _python_name = 'poly_y_function'

class poly_t_dependence(RealList):
    """
    List t-polynomial in the NTGK model.
    """
    _version = '251'
    fluent_name = 'poly-t-dependence'
    _python_name = 'poly_t_dependence'

class interp_method(String, AllowedValuesMixin):
    """
    Interpolation method.
    """
    _version = '251'
    fluent_name = 'interp-method'
    _python_name = 'interp_method'

class z_value(Real):
    """
    Z value in a 2D table.
    """
    _version = '251'
    fluent_name = 'z-value'
    _python_name = 'z_value'

class column_number(Integer):
    """
    Number of columns in a 2D table.
    """
    _version = '251'
    fluent_name = 'column-number'
    _python_name = 'column_number'

class row_number(Integer):
    """
    Number of rows in a 2D table.
    """
    _version = '251'
    fluent_name = 'row-number'
    _python_name = 'row_number'

class column_value(RealList):
    """
    Column values in a 2D table.
    """
    _version = '251'
    fluent_name = 'column-value'
    _python_name = 'column_value'

class row_value(RealList):
    """
    Row values in a 2D table.
    """
    _version = '251'
    fluent_name = 'row-value'
    _python_name = 'row_value'

class table_value(RealList):
    """
    Table values in a 2D table.
    """
    _version = '251'
    fluent_name = 'table-value'
    _python_name = 'table_value'

class z_label(String):
    """
    Show z label.
    """
    _version = '251'
    fluent_name = 'z-label'
    _python_name = 'z_label'

class table_label(String):
    """
    Show table value label.
    """
    _version = '251'
    fluent_name = 'table-label'
    _python_name = 'table_label'

class file_name_8(Filename, _OutputFile):
    """
    File name in 2D table writting.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class write_table(Command):
    """
    2D table writting command.
    """
    _version = '251'
    fluent_name = 'write-table'
    _python_name = 'write_table'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_8,
    )

class file_name_1_5(Filename, _InputFile):
    """
    File name in 2D table reading.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class read_table(Command):
    """
    2D table reading command.
    """
    _version = '251'
    fluent_name = 'read-table'
    _python_name = 'read_table'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_5,
    )

class print_table(Command):
    """
    2D table printing command.
    """
    _version = '251'
    fluent_name = 'print-table'
    _python_name = 'print_table'

class u_table(Group):
    """
    U-table data in the NTGK model.
    """
    _version = '251'
    fluent_name = 'u-table'
    _python_name = 'u_table'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class y_table(Group):
    """
    Y-table data in the NTGK model.
    """
    _version = '251'
    fluent_name = 'y-table'
    _python_name = 'y_table'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class file_name_9(Filename, _OutputFile):
    """
    File name in the 3D table-writing command.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class write_table_1(Command):
    """
    Writing 3D table command.
    """
    _version = '251'
    fluent_name = 'write-table'
    _python_name = 'write_table'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_9,
    )

class file_name_1_6(Filename, _InputFile):
    """
    File name in the 3D table-reading command.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class read_table_1(Command):
    """
    3D Reading table command.
    """
    _version = '251'
    fluent_name = 'read-table'
    _python_name = 'read_table'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_6,
    )

class print_table_1(Command):
    """
    3D table-printing command.
    """
    _version = '251'
    fluent_name = 'print-table'
    _python_name = 'print_table'

class internal_resistance_table_child(Group):
    """
    'child_object_type' of internal_resistance_table.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'internal_resistance_table_child'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
    )

class internal_resistance_table(ListObject[internal_resistance_table_child]):
    """
    Internal resistance table in the NTGK model.
    """
    _version = '251'
    fluent_name = 'internal-resistance-table'
    _python_name = 'internal_resistance_table'
    command_names = ['list_properties', 'resize', 'write_table', 'read_table', 'print_table']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
        write_table=write_table_1,
        read_table=read_table_1,
        print_table=print_table_1,
    )
    child_object_type = internal_resistance_table_child

class limit_current_enabled(Boolean):
    """
    Enable limiting current in the NTGK model.
    """
    _version = '251'
    fluent_name = 'limit-current-enabled'
    _python_name = 'limit_current_enabled'

class provide_utable_enabled(Boolean):
    """
    Providing U-table in the NTGK model.
    """
    _version = '251'
    fluent_name = 'provide-utable-enabled'
    _python_name = 'provide_utable_enabled'

class limit_current_table_child(Group):
    """
    'child_object_type' of limit_current_table.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'limit_current_table_child'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
    )

class limit_current_table(ListObject[limit_current_table_child]):
    """
    Current limit table in the NTGK model.
    """
    _version = '251'
    fluent_name = 'limit-current-table'
    _python_name = 'limit_current_table'
    command_names = ['list_properties', 'resize', 'write_table', 'read_table', 'print_table']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
        write_table=write_table_1,
        read_table=read_table_1,
        print_table=print_table_1,
    )
    child_object_type = limit_current_table_child

class monitor_names(StringList, AllowedValuesMixin):
    """
    Pick temperature report definition in the NTGK model.
    """
    _version = '251'
    fluent_name = 'monitor-names'
    _python_name = 'monitor_names'

class import_files_enabled(Boolean):
    """
    Import raw data in the NTGK model.
    """
    _version = '251'
    fluent_name = 'import-files-enabled'
    _python_name = 'import_files_enabled'

class number_of_files(Integer):
    """
    Total number of discharging files.
    """
    _version = '251'
    fluent_name = 'number-of-files'
    _python_name = 'number_of_files'

class files(FilenameList):
    """
    Discharging file names in the NTGK model.
    """
    _version = '251'
    fluent_name = 'files'
    _python_name = 'files'

class capacify_fade_enabled(Boolean):
    """
    Enable capacity fade model in the NTGK model.
    """
    _version = '251'
    fluent_name = 'capacify-fade-enabled'
    _python_name = 'capacify_fade_enabled'

class raw_data(Command):
    """
    Specify U and Y parameters using raw data.
    
    Parameters
    ----------
        import_files_enabled : bool
            Import raw data in the NTGK model.
        number_of_files : int
            Total number of discharging files.
        files : List
            Discharging file names in the NTGK model.
        capacify_fade_enabled : bool
            Enable capacity fade model in the NTGK model.
    """
    _version = '251'
    fluent_name = 'raw-data'
    _python_name = 'raw_data'
    argument_names = ['import_files_enabled', 'number_of_files', 'files', 'capacify_fade_enabled']
    _child_classes = dict(
        import_files_enabled=import_files_enabled,
        number_of_files=number_of_files,
        files=files,
        capacify_fade_enabled=capacify_fade_enabled,
    )

class ntgk_model_settings(Group):
    """
    NTGK model settings.
    """
    _version = '251'
    fluent_name = 'ntgk-model-settings'
    _python_name = 'ntgk_model_settings'
    child_names = ['initial_dod', 'ref_capacity', 'data_type', 'poly_u_function', 'poly_y_function', 'poly_t_dependence', 'u_table', 'y_table', 'internal_resistance_table', 'limit_current_enabled', 'provide_utable_enabled', 'limit_current_table', 'monitor_names']
    command_names = ['raw_data']
    _child_classes = dict(
        initial_dod=initial_dod,
        ref_capacity=ref_capacity,
        data_type=data_type,
        poly_u_function=poly_u_function,
        poly_y_function=poly_y_function,
        poly_t_dependence=poly_t_dependence,
        u_table=u_table,
        y_table=y_table,
        internal_resistance_table=internal_resistance_table,
        limit_current_enabled=limit_current_enabled,
        provide_utable_enabled=provide_utable_enabled,
        limit_current_table=limit_current_table,
        monitor_names=monitor_names,
        raw_data=raw_data,
    )

class initial_soc(Real):
    """
    Initial SOC in the ECM model.
    """
    _version = '251'
    fluent_name = 'initial-soc'
    _python_name = 'initial_soc'

class ref_capacity_1(Real):
    """
    Reference capacity in the ECM model.
    """
    _version = '251'
    fluent_name = 'ref-capacity'
    _python_name = 'ref_capacity'

class two_set_data(Boolean):
    """
    Use different coefficients for charging and discharging in the ECM model.
    """
    _version = '251'
    fluent_name = 'two-set-data'
    _python_name = 'two_set_data'

class data_type_1(String, AllowedValuesMixin):
    """
    Data type in the ECM model.
    """
    _version = '251'
    fluent_name = 'data-type'
    _python_name = 'data_type'

class chen_rs(RealList):
    """
    List Chen's rs value in the ECM model.
    """
    _version = '251'
    fluent_name = 'chen-rs'
    _python_name = 'chen_rs'

class chen_r1(RealList):
    """
    List Chen's r1 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'chen-r1'
    _python_name = 'chen_r1'

class chen_c1(RealList):
    """
    List Chen's c1 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'chen-c1'
    _python_name = 'chen_c1'

class chen_r2(RealList):
    """
    List Chen's r2 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'chen-r2'
    _python_name = 'chen_r2'

class chen_c2(RealList):
    """
    List Chen's c2 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'chen-c2'
    _python_name = 'chen_c2'

class chen_voc(RealList):
    """
    List Chen's voc value in the ECM model.
    """
    _version = '251'
    fluent_name = 'chen-voc'
    _python_name = 'chen_voc'

class chen_rs_c(RealList):
    """
    List Chen's charging rs value in the ECM model.
    """
    _version = '251'
    fluent_name = 'chen-rs-c'
    _python_name = 'chen_rs_c'

class chen_r1_c(RealList):
    """
    List Chen's charging r1 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'chen-r1-c'
    _python_name = 'chen_r1_c'

class chen_c1_c(RealList):
    """
    List Chen's charging c1 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'chen-c1-c'
    _python_name = 'chen_c1_c'

class chen_r2_c(RealList):
    """
    List Chen's charging r2 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'chen-r2-c'
    _python_name = 'chen_r2_c'

class chen_c2_c(RealList):
    """
    List Chen's charging c2 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'chen-c2-c'
    _python_name = 'chen_c2_c'

class chen_voc_c(RealList):
    """
    List Chen's charging voc value in the ECM model.
    """
    _version = '251'
    fluent_name = 'chen-voc-c'
    _python_name = 'chen_voc_c'

class poly_rs(RealList):
    """
    List poly rs value in the ECM model.
    """
    _version = '251'
    fluent_name = 'poly-rs'
    _python_name = 'poly_rs'

class poly_r1(RealList):
    """
    List poly r1 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'poly-r1'
    _python_name = 'poly_r1'

class poly_c1(RealList):
    """
    List poly c1 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'poly-c1'
    _python_name = 'poly_c1'

class poly_r2(RealList):
    """
    List poly r2 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'poly-r2'
    _python_name = 'poly_r2'

class poly_c2(RealList):
    """
    List poly c2 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'poly-c2'
    _python_name = 'poly_c2'

class poly_voc(RealList):
    """
    List poly voc value in the ECM model.
    """
    _version = '251'
    fluent_name = 'poly-voc'
    _python_name = 'poly_voc'

class poly_rs_c(RealList):
    """
    List charging poly rs value in the ECM model.
    """
    _version = '251'
    fluent_name = 'poly-rs-c'
    _python_name = 'poly_rs_c'

class poly_r1_c(RealList):
    """
    List charging poly r1 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'poly-r1-c'
    _python_name = 'poly_r1_c'

class poly_c1_c(RealList):
    """
    List charging poly c1 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'poly-c1-c'
    _python_name = 'poly_c1_c'

class poly_r2_c(RealList):
    """
    List charging poly r2 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'poly-r2-c'
    _python_name = 'poly_r2_c'

class poly_c2_c(RealList):
    """
    List charging poly c2 value in the ECM model.
    """
    _version = '251'
    fluent_name = 'poly-c2-c'
    _python_name = 'poly_c2_c'

class poly_voc_c(RealList):
    """
    List charging poly voc value in the ECM model.
    """
    _version = '251'
    fluent_name = 'poly-voc-c'
    _python_name = 'poly_voc_c'

class table_rs(Group):
    """
    Rs table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-rs'
    _python_name = 'table_rs'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_r1(Group):
    """
    R1 table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-r1'
    _python_name = 'table_r1'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_c1(Group):
    """
    C1 table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-c1'
    _python_name = 'table_c1'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_r2(Group):
    """
    R2 table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-r2'
    _python_name = 'table_r2'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_c2(Group):
    """
    C2 table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-c2'
    _python_name = 'table_c2'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_r3(Group):
    """
    R3 table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-r3'
    _python_name = 'table_r3'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_c3(Group):
    """
    C3 table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-c3'
    _python_name = 'table_c3'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_voc(Group):
    """
    Voc table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-voc'
    _python_name = 'table_voc'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_rs_c(Group):
    """
    Charging rs table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-rs-c'
    _python_name = 'table_rs_c'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_r1_c(Group):
    """
    Charging r1 table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-r1-c'
    _python_name = 'table_r1_c'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_c1_c(Group):
    """
    Charging c1 table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-c1-c'
    _python_name = 'table_c1_c'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_r2_c(Group):
    """
    Charging r2 table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-r2-c'
    _python_name = 'table_r2_c'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_c2_c(Group):
    """
    Charging c2 table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-c2-c'
    _python_name = 'table_c2_c'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_r3_c(Group):
    """
    Charging r3 table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-r3-c'
    _python_name = 'table_r3_c'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_c3_c(Group):
    """
    Charging c3 table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-c3-c'
    _python_name = 'table_c3_c'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_voc_c(Group):
    """
    Charging voc table data in the ECM model.
    """
    _version = '251'
    fluent_name = 'table-voc-c'
    _python_name = 'table_voc_c'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class enabled_23(Boolean):
    """
    Read all ECM data tables.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class file_name_1_7(Filename, _InputFile):
    """
    File name in reading ECM tables.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class read_all_data_table(Command):
    """
    Command to read all ECM data tables.
    
    Parameters
    ----------
        enabled : bool
            Read all ECM data tables.
        file_name_1 : str
            File name in reading ECM tables.
    """
    _version = '251'
    fluent_name = 'read-all-data-table'
    _python_name = 'read_all_data_table'
    argument_names = ['enabled', 'file_name']
    _child_classes = dict(
        enabled=enabled_23,
        file_name=file_name_1_7,
    )

class enabled_24(Boolean):
    """
    Write all ECM data tables.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class file_name_10(Filename, _OutputFile):
    """
    File name in writing ECM tables.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class write_all_data_table(Command):
    """
    Command to write all ECM data tables.
    
    Parameters
    ----------
        enabled : bool
            Write all ECM data tables.
        file_name : str
            File name in writing ECM tables.
    """
    _version = '251'
    fluent_name = 'write-all-data-table'
    _python_name = 'write_all_data_table'
    argument_names = ['enabled', 'file_name']
    _child_classes = dict(
        enabled=enabled_24,
        file_name=file_name_10,
    )

class ecm_model_settings(Group):
    """
    ECM model settings.
    """
    _version = '251'
    fluent_name = 'ecm-model-settings'
    _python_name = 'ecm_model_settings'
    child_names = ['initial_soc', 'ref_capacity', 'two_set_data', 'data_type', 'chen_rs', 'chen_r1', 'chen_c1', 'chen_r2', 'chen_c2', 'chen_voc', 'chen_rs_c', 'chen_r1_c', 'chen_c1_c', 'chen_r2_c', 'chen_c2_c', 'chen_voc_c', 'poly_rs', 'poly_r1', 'poly_c1', 'poly_r2', 'poly_c2', 'poly_voc', 'poly_rs_c', 'poly_r1_c', 'poly_c1_c', 'poly_r2_c', 'poly_c2_c', 'poly_voc_c', 'table_rs', 'table_r1', 'table_c1', 'table_r2', 'table_c2', 'table_r3', 'table_c3', 'table_voc', 'table_rs_c', 'table_r1_c', 'table_c1_c', 'table_r2_c', 'table_c2_c', 'table_r3_c', 'table_c3_c', 'table_voc_c']
    command_names = ['read_all_data_table', 'write_all_data_table']
    _child_classes = dict(
        initial_soc=initial_soc,
        ref_capacity=ref_capacity_1,
        two_set_data=two_set_data,
        data_type=data_type_1,
        chen_rs=chen_rs,
        chen_r1=chen_r1,
        chen_c1=chen_c1,
        chen_r2=chen_r2,
        chen_c2=chen_c2,
        chen_voc=chen_voc,
        chen_rs_c=chen_rs_c,
        chen_r1_c=chen_r1_c,
        chen_c1_c=chen_c1_c,
        chen_r2_c=chen_r2_c,
        chen_c2_c=chen_c2_c,
        chen_voc_c=chen_voc_c,
        poly_rs=poly_rs,
        poly_r1=poly_r1,
        poly_c1=poly_c1,
        poly_r2=poly_r2,
        poly_c2=poly_c2,
        poly_voc=poly_voc,
        poly_rs_c=poly_rs_c,
        poly_r1_c=poly_r1_c,
        poly_c1_c=poly_c1_c,
        poly_r2_c=poly_r2_c,
        poly_c2_c=poly_c2_c,
        poly_voc_c=poly_voc_c,
        table_rs=table_rs,
        table_r1=table_r1,
        table_c1=table_c1,
        table_r2=table_r2,
        table_c2=table_c2,
        table_r3=table_r3,
        table_c3=table_c3,
        table_voc=table_voc,
        table_rs_c=table_rs_c,
        table_r1_c=table_r1_c,
        table_c1_c=table_c1_c,
        table_r2_c=table_r2_c,
        table_c2_c=table_c2_c,
        table_r3_c=table_r3_c,
        table_c3_c=table_c3_c,
        table_voc_c=table_voc_c,
        read_all_data_table=read_all_data_table,
        write_all_data_table=write_all_data_table,
    )

class initial_soc_1(Real):
    """
    Initial SOC in the P2D model.
    """
    _version = '251'
    fluent_name = 'initial-soc'
    _python_name = 'initial_soc'

class ref_capacity_2(Real):
    """
    Theoretical capacity in the P2D model.
    """
    _version = '251'
    fluent_name = 'ref-capacity'
    _python_name = 'ref_capacity'

class anode_thickness(Real):
    """
    Negative electrode thickness in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-thickness'
    _python_name = 'anode_thickness'

class anode_n_grid(Integer):
    """
    Number of grid in negative electrode zone in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-n-grid'
    _python_name = 'anode_n_grid'

class anode_size_ratio(Real):
    """
    Grid ratio for Ln in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-size-ratio'
    _python_name = 'anode_size_ratio'

class anode_p_diameter(Real):
    """
    Particle diameter in negative electrode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-p-diameter'
    _python_name = 'anode_p_diameter'

class anode_n_sphere(Integer):
    """
    Number of grids across radius of particle at anode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-n-sphere'
    _python_name = 'anode_n_sphere'

class anode_size_ratio_r(Real):
    """
    Grid ratio for rn in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-size-ratio-r'
    _python_name = 'anode_size_ratio_r'

class anode_cs_max(Real):
    """
    Max. solid Li+ conc. at anode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-cs-max'
    _python_name = 'anode_cs_max'

class anode_stio_0(Real):
    """
    Stoi. at 0% at anode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-stio-0'
    _python_name = 'anode_stio_0'

class anode_stio_100(Real):
    """
    Stoi. at 100% at anode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-stio-100'
    _python_name = 'anode_stio_100'

class anode_ce_0(Real):
    """
    Electrolyte Li+ conc. in anode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-ce-0'
    _python_name = 'anode_ce_0'

class anode_vof(Real):
    """
    Volume fraction of electrolyte in negative electrode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-vof'
    _python_name = 'anode_vof'

class anode_filler_f(Real):
    """
    Filler fraction in negative electrode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-filler-f'
    _python_name = 'anode_filler_f'

class option_21(String, AllowedValuesMixin):
    """
    Method for the property.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class anode_ds(Group):
    """
    Lithium mass diffusivity in anode particles in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-ds'
    _python_name = 'anode_ds'
    child_names = ['option', 'value', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option_21,
        value=value_7,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_12,
    )
    _child_aliases = dict(
        method=('option', 'method'),
    )

class anode_ed(Real):
    """
    Activation energy for diff- in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-ed'
    _python_name = 'anode_ed'

class anode_brugg(Real):
    """
    Bruggeman coefficient of negative electrode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-brugg'
    _python_name = 'anode_brugg'

class anode_sigma(Group):
    """
    Solid electric conductivity in anode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-sigma'
    _python_name = 'anode_sigma'
    child_names = ['option', 'value', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option_21,
        value=value_7,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_12,
    )
    _child_aliases = dict(
        method=('option', 'method'),
    )

class anode_i0_1(Real):
    """
    Ref. rate constant in negative electrode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-i0'
    _python_name = 'anode_i0'

class anode_er(Real):
    """
    Activation energy for Er- in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-er'
    _python_name = 'anode_er'

class anode_alpha_a_1(Real):
    """
    Anodic transfer coeff. at anode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-alpha-a'
    _python_name = 'anode_alpha_a'

class anode_alpha_c_1(Real):
    """
    Cathodic Transfer Coeff. at anode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-alpha-c'
    _python_name = 'anode_alpha_c'

class anode_ocv_1(Group):
    """
    Ocp in negative electrode in the P2D model.
    """
    _version = '251'
    fluent_name = 'anode-ocv'
    _python_name = 'anode_ocv'
    child_names = ['option', 'value', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option_21,
        value=value_7,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_12,
    )
    _child_aliases = dict(
        method=('option', 'method'),
    )

class cathode_thickness(Real):
    """
    Positive electrode thickness in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-thickness'
    _python_name = 'cathode_thickness'

class cathode_n_grid(Integer):
    """
    Number of grid in positive electrode zone in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-n-grid'
    _python_name = 'cathode_n_grid'

class cathode_size_ratio(Real):
    """
    Grid ratio for Lp in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-size-ratio'
    _python_name = 'cathode_size_ratio'

class cathode_p_diameter(Real):
    """
    Particle diameter in positive Electrode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-p-diameter'
    _python_name = 'cathode_p_diameter'

class cathode_n_sphere(Integer):
    """
    Number of grids across radius of particle at cathode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-n-sphere'
    _python_name = 'cathode_n_sphere'

class cathode_size_ratio_r(Real):
    """
    Grid ratio for rp in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-size-ratio-r'
    _python_name = 'cathode_size_ratio_r'

class cathode_cs_max(Real):
    """
    Max. solid Li+ conc. at cathode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-cs-max'
    _python_name = 'cathode_cs_max'

class cathode_stio_0(Real):
    """
    Stoi. at 0% at cathode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-stio-0'
    _python_name = 'cathode_stio_0'

class cathode_stio_100(Real):
    """
    Stoi. at 100% at cathode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-stio-100'
    _python_name = 'cathode_stio_100'

class cathode_ce_0(Real):
    """
    Electrolyte Li+ conc. in cathode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-ce-0'
    _python_name = 'cathode_ce_0'

class cathode_vof(Real):
    """
    Volume fraction of electrolyte in positive electrode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-vof'
    _python_name = 'cathode_vof'

class cathode_filler_f(Real):
    """
    Filler fraction in positive electrode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-filler-f'
    _python_name = 'cathode_filler_f'

class cathode_ds(Group):
    """
    Lithium mass diffusivity in cathode particles in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-ds'
    _python_name = 'cathode_ds'
    child_names = ['option', 'value', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option_21,
        value=value_7,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_12,
    )
    _child_aliases = dict(
        method=('option', 'method'),
    )

class cathode_ed(Real):
    """
    Activation energy for diff+ in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-ed'
    _python_name = 'cathode_ed'

class cathode_brugg(Real):
    """
    Bruggeman coefficient of positive electrode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-brugg'
    _python_name = 'cathode_brugg'

class cathode_sigma(Group):
    """
    Solid electric conductivity in cathode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-sigma'
    _python_name = 'cathode_sigma'
    child_names = ['option', 'value', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option_21,
        value=value_7,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_12,
    )
    _child_aliases = dict(
        method=('option', 'method'),
    )

class cathode_i0_1(Real):
    """
    Ref. rate constant in positive electrode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-i0'
    _python_name = 'cathode_i0'

class cathode_er(Real):
    """
    Activation energy for Er+. in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-er'
    _python_name = 'cathode_er'

class cathode_alpha_a_1(Real):
    """
    Anodic transfer coeff. at cathode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-alpha-a'
    _python_name = 'cathode_alpha_a'

class cathode_alpha_c_1(Real):
    """
    Cathodic transfer coeff. at cathode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-alpha-c'
    _python_name = 'cathode_alpha_c'

class cathode_ocv_1(Group):
    """
    Ocp in positive electrode in the P2D model.
    """
    _version = '251'
    fluent_name = 'cathode-ocv'
    _python_name = 'cathode_ocv'
    child_names = ['option', 'value', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option_21,
        value=value_7,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_12,
    )
    _child_aliases = dict(
        method=('option', 'method'),
    )

class electrolyte_thickness(Real):
    """
    Separator thickness in the P2D model.
    """
    _version = '251'
    fluent_name = 'electrolyte-thickness'
    _python_name = 'electrolyte_thickness'

class electrolyte_n_grid(Integer):
    """
    Number of grid in separator zone in the P2D model.
    """
    _version = '251'
    fluent_name = 'electrolyte-n-grid'
    _python_name = 'electrolyte_n_grid'

class electrolyte_ce_0(Real):
    """
    Electrolyte Li+ conc. in separator in the P2D model.
    """
    _version = '251'
    fluent_name = 'electrolyte-ce-0'
    _python_name = 'electrolyte_ce_0'

class electrolyte_vof(Real):
    """
    Volume fraction of electrolyte in separator in the P2D model.
    """
    _version = '251'
    fluent_name = 'electrolyte-vof'
    _python_name = 'electrolyte_vof'

class electrolyte_brugg(Real):
    """
    Bruggeman coefficient of separator in the P2D model.
    """
    _version = '251'
    fluent_name = 'electrolyte-brugg'
    _python_name = 'electrolyte_brugg'

class electrolyte_de(Group):
    """
    Mass diffusivity of electrolyte in the P2D model.
    """
    _version = '251'
    fluent_name = 'electrolyte-de'
    _python_name = 'electrolyte_de'
    child_names = ['option', 'value', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option_21,
        value=value_7,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_12,
    )
    _child_aliases = dict(
        method=('option', 'method'),
    )

class electrolyte_t_plus(Group):
    """
    Transference number t+ in the P2D model.
    """
    _version = '251'
    fluent_name = 'electrolyte-t-plus'
    _python_name = 'electrolyte_t_plus'
    child_names = ['option', 'value', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option_21,
        value=value_7,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_12,
    )
    _child_aliases = dict(
        method=('option', 'method'),
    )

class electrolyte_sigma(Group):
    """
    Ionic conductivity in electrolyte in the P2D model.
    """
    _version = '251'
    fluent_name = 'electrolyte-sigma'
    _python_name = 'electrolyte_sigma'
    child_names = ['option', 'value', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option_21,
        value=value_7,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_12,
    )
    _child_aliases = dict(
        method=('option', 'method'),
    )

class electrolyte_activity(Group):
    """
    Electrolyte activity-term in the P2D model.
    """
    _version = '251'
    fluent_name = 'electrolyte-activity'
    _python_name = 'electrolyte_activity'
    child_names = ['option', 'value', 'piecewise_linear', 'polynomial', 'user_defined']
    _child_classes = dict(
        option=option_21,
        value=value_7,
        piecewise_linear=piecewise_linear,
        polynomial=polynomial,
        user_defined=user_defined_12,
    )
    _child_aliases = dict(
        method=('option', 'method'),
    )

class analytical_cs(Boolean):
    """
    Use analytical cs in the P2D model.
    """
    _version = '251'
    fluent_name = 'analytical-cs'
    _python_name = 'analytical_cs'

class analytical_cs_order(Integer):
    """
    Cs function order in the P2D model.
    """
    _version = '251'
    fluent_name = 'analytical-cs-order'
    _python_name = 'analytical_cs_order'

class aging_model_enabled_1(Boolean):
    """
    Enable aging model in the P2D model.
    """
    _version = '251'
    fluent_name = 'aging-model-enabled'
    _python_name = 'aging_model_enabled'

class aging_file(Filename, _InputFile):
    """
    Aging file name in the P2D model.
    """
    _version = '251'
    fluent_name = 'aging-file'
    _python_name = 'aging_file'

class aging_profile(String, AllowedValuesMixin):
    """
    Aging effects profile in the P2D model.
    """
    _version = '251'
    fluent_name = 'aging-profile'
    _python_name = 'aging_profile'

class p2d_model_settings(Group):
    """
    Newman's P2D model settings.
    """
    _version = '251'
    fluent_name = 'p2d-model-settings'
    _python_name = 'p2d_model_settings'
    child_names = ['initial_soc', 'ref_capacity', 'anode_thickness', 'anode_n_grid', 'anode_size_ratio', 'anode_p_diameter', 'anode_n_sphere', 'anode_size_ratio_r', 'anode_cs_max', 'anode_stio_0', 'anode_stio_100', 'anode_ce_0', 'anode_vof', 'anode_filler_f', 'anode_ds', 'anode_ed', 'anode_brugg', 'anode_sigma', 'anode_i0', 'anode_er', 'anode_alpha_a', 'anode_alpha_c', 'anode_ocv', 'cathode_thickness', 'cathode_n_grid', 'cathode_size_ratio', 'cathode_p_diameter', 'cathode_n_sphere', 'cathode_size_ratio_r', 'cathode_cs_max', 'cathode_stio_0', 'cathode_stio_100', 'cathode_ce_0', 'cathode_vof', 'cathode_filler_f', 'cathode_ds', 'cathode_ed', 'cathode_brugg', 'cathode_sigma', 'cathode_i0', 'cathode_er', 'cathode_alpha_a', 'cathode_alpha_c', 'cathode_ocv', 'electrolyte_thickness', 'electrolyte_n_grid', 'electrolyte_ce_0', 'electrolyte_vof', 'electrolyte_brugg', 'electrolyte_de', 'electrolyte_t_plus', 'electrolyte_sigma', 'electrolyte_activity', 'analytical_cs', 'analytical_cs_order', 'aging_model_enabled', 'aging_file', 'aging_profile']
    _child_classes = dict(
        initial_soc=initial_soc_1,
        ref_capacity=ref_capacity_2,
        anode_thickness=anode_thickness,
        anode_n_grid=anode_n_grid,
        anode_size_ratio=anode_size_ratio,
        anode_p_diameter=anode_p_diameter,
        anode_n_sphere=anode_n_sphere,
        anode_size_ratio_r=anode_size_ratio_r,
        anode_cs_max=anode_cs_max,
        anode_stio_0=anode_stio_0,
        anode_stio_100=anode_stio_100,
        anode_ce_0=anode_ce_0,
        anode_vof=anode_vof,
        anode_filler_f=anode_filler_f,
        anode_ds=anode_ds,
        anode_ed=anode_ed,
        anode_brugg=anode_brugg,
        anode_sigma=anode_sigma,
        anode_i0=anode_i0_1,
        anode_er=anode_er,
        anode_alpha_a=anode_alpha_a_1,
        anode_alpha_c=anode_alpha_c_1,
        anode_ocv=anode_ocv_1,
        cathode_thickness=cathode_thickness,
        cathode_n_grid=cathode_n_grid,
        cathode_size_ratio=cathode_size_ratio,
        cathode_p_diameter=cathode_p_diameter,
        cathode_n_sphere=cathode_n_sphere,
        cathode_size_ratio_r=cathode_size_ratio_r,
        cathode_cs_max=cathode_cs_max,
        cathode_stio_0=cathode_stio_0,
        cathode_stio_100=cathode_stio_100,
        cathode_ce_0=cathode_ce_0,
        cathode_vof=cathode_vof,
        cathode_filler_f=cathode_filler_f,
        cathode_ds=cathode_ds,
        cathode_ed=cathode_ed,
        cathode_brugg=cathode_brugg,
        cathode_sigma=cathode_sigma,
        cathode_i0=cathode_i0_1,
        cathode_er=cathode_er,
        cathode_alpha_a=cathode_alpha_a_1,
        cathode_alpha_c=cathode_alpha_c_1,
        cathode_ocv=cathode_ocv_1,
        electrolyte_thickness=electrolyte_thickness,
        electrolyte_n_grid=electrolyte_n_grid,
        electrolyte_ce_0=electrolyte_ce_0,
        electrolyte_vof=electrolyte_vof,
        electrolyte_brugg=electrolyte_brugg,
        electrolyte_de=electrolyte_de,
        electrolyte_t_plus=electrolyte_t_plus,
        electrolyte_sigma=electrolyte_sigma,
        electrolyte_activity=electrolyte_activity,
        analytical_cs=analytical_cs,
        analytical_cs_order=analytical_cs_order,
        aging_model_enabled=aging_model_enabled_1,
        aging_file=aging_file,
        aging_profile=aging_profile,
    )

class memory_num_per_cell(Integer):
    """
    Number of memories per cell in user-defined Echem model.
    """
    _version = '251'
    fluent_name = 'memory-num-per-cell'
    _python_name = 'memory_num_per_cell'

class initial_soc_2(Real):
    """
    Initial SOC in user-defined Echem model.
    """
    _version = '251'
    fluent_name = 'initial-soc'
    _python_name = 'initial_soc'

class reference_capacity(Real):
    """
    Reference capacity in user-defined Echem model.
    """
    _version = '251'
    fluent_name = 'reference-capacity'
    _python_name = 'reference_capacity'

class customized_echem_model_settings(Group):
    """
    User-defined echem model.
    """
    _version = '251'
    fluent_name = 'customized-echem-model-settings'
    _python_name = 'customized_echem_model_settings'
    child_names = ['memory_num_per_cell', 'initial_soc', 'reference_capacity']
    _child_classes = dict(
        memory_num_per_cell=memory_num_per_cell,
        initial_soc=initial_soc_2,
        reference_capacity=reference_capacity,
    )

class same_for_active_enabled(Boolean):
    """
    Use same source settings for all batteries in the CHT-coupling.
    """
    _version = '251'
    fluent_name = 'same-for-active-enabled'
    _python_name = 'same_for_active_enabled'

class option_22(String, AllowedValuesMixin):
    """
    Data type for the same energy source.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class value_10(Real):
    """
    Heat source value when same heating source used.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class profile_1(Filename, _InputFile):
    """
    Profile file name when same heating source used.
    """
    _version = '251'
    fluent_name = 'profile'
    _python_name = 'profile'

class energy_source_same_active(Group):
    """
    Same energy source for all zones.
    """
    _version = '251'
    fluent_name = 'energy-source-same-active'
    _python_name = 'energy_source_same_active'
    child_names = ['option', 'value', 'profile']
    _child_classes = dict(
        option=option_22,
        value=value_10,
        profile=profile_1,
    )
    _child_aliases = dict(
        data_type=('option', 'data-type'),
    )

class option_23(String, AllowedValuesMixin):
    """
    Method used in the energy-source-class in the CHT-coupling.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class value_11(Real):
    """
    Value in the energy-source-class in the CHT-coupling.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class profile_2(Filename, _InputFile):
    """
    Profile in the energy-source-class in the CHT-coupling.
    """
    _version = '251'
    fluent_name = 'profile'
    _python_name = 'profile'

class energy_source_active_child(Group):
    """
    'child_object_type' of energy_source_active.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'energy_source_active_child'
    child_names = ['option', 'value', 'profile']
    _child_classes = dict(
        option=option_23,
        value=value_11,
        profile=profile_2,
    )
    _child_aliases = dict(
        method=('option', 'method'),
    )

class energy_source_active(NamedObject[energy_source_active_child], CreatableNamedObjectMixin[energy_source_active_child]):
    """
    Energy source for active zone.
    """
    _version = '251'
    fluent_name = 'energy-source-active'
    _python_name = 'energy_source_active'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = energy_source_active_child

class option_24(String, AllowedValuesMixin):
    """
    Electric current data type at terminal in the CHT-coupling.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class value_12(Real):
    """
    Electric current value at termainal in the CHT-coupling.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class profile_3(Filename, _InputFile):
    """
    Current profile file name in the CHT-coupling.
    """
    _version = '251'
    fluent_name = 'profile'
    _python_name = 'profile'

class tab_elec_current(Group):
    """
    Electric current load at terminal in the CHT-coupling.
    """
    _version = '251'
    fluent_name = 'tab-elec-current'
    _python_name = 'tab_elec_current'
    child_names = ['option', 'value', 'profile']
    _child_classes = dict(
        option=option_24,
        value=value_12,
        profile=profile_3,
    )
    _child_aliases = dict(
        data_type=('option', 'data-type'),
    )

class cht_model_settings(Group):
    """
    CHT solution method settings.
    """
    _version = '251'
    fluent_name = 'cht-model-settings'
    _python_name = 'cht_model_settings'
    child_names = ['same_for_active_enabled', 'energy_source_same_active', 'energy_source_active', 'tab_elec_current']
    _child_classes = dict(
        same_for_active_enabled=same_for_active_enabled,
        energy_source_same_active=energy_source_same_active,
        energy_source_active=energy_source_active,
        tab_elec_current=tab_elec_current,
    )

class energy_source_active_1_child(String, AllowedValuesMixin):
    """
    'child_object_type' of energy_source_active.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'energy_source_active_child'

class energy_source_active_1(NamedObject[energy_source_active_1_child], CreatableNamedObjectMixin[energy_source_active_1_child]):
    """
    Energy source for active zone in the FMU-coupling.
    """
    _version = '251'
    fluent_name = 'energy-source-active'
    _python_name = 'energy_source_active'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = energy_source_active_1_child

class option_25(String, AllowedValuesMixin):
    """
    The FMU local variable for electric current in the FMU-coupling.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class value_13(Real):
    """
    Electric current value at termainal in FMU coupling method.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class profile_4(Filename, _InputFile):
    """
    Current profile file name in FMU coupling.
    """
    _version = '251'
    fluent_name = 'profile'
    _python_name = 'profile'

class tab_elec_current_1(Group):
    """
    Electric current at terminal in FMU coupling method.
    """
    _version = '251'
    fluent_name = 'tab-elec-current'
    _python_name = 'tab_elec_current'
    child_names = ['option', 'value', 'profile']
    _child_classes = dict(
        option=option_25,
        value=value_13,
        profile=profile_4,
    )
    _child_aliases = dict(
        data_type=('option', 'data-type'),
    )

class fmu_model_settings(Group):
    """
    FMU-coupling solution method settings.
    """
    _version = '251'
    fluent_name = 'fmu-model-settings'
    _python_name = 'fmu_model_settings'
    child_names = ['energy_source_active', 'tab_elec_current']
    _child_classes = dict(
        energy_source_active=energy_source_active_1,
        tab_elec_current=tab_elec_current_1,
    )

class nominal_capacity(Real):
    """
    Battery nominal capacity.
    """
    _version = '251'
    fluent_name = 'nominal-capacity'
    _python_name = 'nominal_capacity'

class eload_type(String, AllowedValuesMixin):
    """
    Eload type.
    """
    _version = '251'
    fluent_name = 'eload-type'
    _python_name = 'eload_type'

class crate_value(Real):
    """
    System c-rate type.
    """
    _version = '251'
    fluent_name = 'crate-value'
    _python_name = 'crate_value'

class current_value(Real):
    """
    System current value.
    """
    _version = '251'
    fluent_name = 'current-value'
    _python_name = 'current_value'

class voltage_value(Real):
    """
    System voltage value.
    """
    _version = '251'
    fluent_name = 'voltage-value'
    _python_name = 'voltage_value'

class power_value(Real):
    """
    System power value.
    """
    _version = '251'
    fluent_name = 'power-value'
    _python_name = 'power_value'

class external_resistance(Real):
    """
    System resistance value.
    """
    _version = '251'
    fluent_name = 'external-resistance'
    _python_name = 'external_resistance'

class profile_type(String, AllowedValuesMixin):
    """
    Eload profile type.
    """
    _version = '251'
    fluent_name = 'profile-type'
    _python_name = 'profile_type'

class profile_file(Filename, _InputFile):
    """
    Profile file name.
    """
    _version = '251'
    fluent_name = 'profile-file'
    _python_name = 'profile_file'

class udf_profile_name(String, AllowedValuesMixin):
    """
    Profile udf name.
    """
    _version = '251'
    fluent_name = 'udf-profile-name'
    _python_name = 'udf_profile_name'

class fast_charging_table_child(Group):
    """
    'child_object_type' of fast_charging_table.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'fast_charging_table_child'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
    )

class fast_charging_table(ListObject[fast_charging_table_child]):
    """
    Fast charging table.
    """
    _version = '251'
    fluent_name = 'fast-charging-table'
    _python_name = 'fast_charging_table'
    command_names = ['list_properties', 'resize', 'write_table', 'read_table', 'print_table']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
        write_table=write_table_1,
        read_table=read_table_1,
        print_table=print_table_1,
    )
    child_object_type = fast_charging_table_child

class monitor_names_1(StringList, AllowedValuesMixin):
    """
    Pick temperature report definition.
    """
    _version = '251'
    fluent_name = 'monitor-names'
    _python_name = 'monitor_names'

class eload_settings(Group):
    """
    Up electric load conditions.
    """
    _version = '251'
    fluent_name = 'eload-settings'
    _python_name = 'eload_settings'
    child_names = ['nominal_capacity', 'eload_type', 'crate_value', 'current_value', 'voltage_value', 'power_value', 'external_resistance', 'profile_type', 'profile_file', 'udf_profile_name', 'fast_charging_table', 'monitor_names']
    _child_classes = dict(
        nominal_capacity=nominal_capacity,
        eload_type=eload_type,
        crate_value=crate_value,
        current_value=current_value,
        voltage_value=voltage_value,
        power_value=power_value,
        external_resistance=external_resistance,
        profile_type=profile_type,
        profile_file=profile_file,
        udf_profile_name=udf_profile_name,
        fast_charging_table=fast_charging_table,
        monitor_names=monitor_names_1,
    )

class echem_stop_type(String, AllowedValuesMixin):
    """
    Echem stop type.
    """
    _version = '251'
    fluent_name = 'echem-stop-type'
    _python_name = 'echem_stop_type'

class min_voltage(Real):
    """
    Min stop voltage.
    """
    _version = '251'
    fluent_name = 'min-voltage'
    _python_name = 'min_voltage'

class max_voltage(Real):
    """
    Max stop voltage.
    """
    _version = '251'
    fluent_name = 'max-voltage'
    _python_name = 'max_voltage'

class min_soc(Real):
    """
    Min stop soc.
    """
    _version = '251'
    fluent_name = 'min-soc'
    _python_name = 'min_soc'

class max_soc(Real):
    """
    Max stop soc.
    """
    _version = '251'
    fluent_name = 'max-soc'
    _python_name = 'max_soc'

class echem_stop_criterion(Group):
    """
    Echem calculation stop criterion.
    """
    _version = '251'
    fluent_name = 'echem-stop-criterion'
    _python_name = 'echem_stop_criterion'
    child_names = ['echem_stop_type', 'min_voltage', 'max_voltage', 'min_soc', 'max_soc']
    _child_classes = dict(
        echem_stop_type=echem_stop_type,
        min_voltage=min_voltage,
        max_voltage=max_voltage,
        min_soc=min_soc,
        max_soc=max_soc,
    )

class eload_condition(Group):
    """
    Up electric load conditions.
    """
    _version = '251'
    fluent_name = 'eload-condition'
    _python_name = 'eload_condition'
    child_names = ['eload_settings', 'echem_stop_criterion']
    _child_classes = dict(
        eload_settings=eload_settings,
        echem_stop_criterion=echem_stop_criterion,
    )

class joule_heat_in_passive_zone(Boolean):
    """
    Enable Joule heat source in passive zones.
    """
    _version = '251'
    fluent_name = 'joule-heat-in-passive-zone'
    _python_name = 'joule_heat_in_passive_zone'

class joule_heat_in_active_zone(Boolean):
    """
    Enable Joule heat source in active zones.
    """
    _version = '251'
    fluent_name = 'joule-heat-in-active-zone'
    _python_name = 'joule_heat_in_active_zone'

class echem_heat_enabled(Boolean):
    """
    Enable E-chem heat source.
    """
    _version = '251'
    fluent_name = 'echem-heat-enabled'
    _python_name = 'echem_heat_enabled'

class number_substeps(Integer):
    """
    E-chem model sub-steps in a CFD time step.
    """
    _version = '251'
    fluent_name = 'number-substeps'
    _python_name = 'number_substeps'

class current_urf(Real):
    """
    Under-relaxation factor for exchange current density.
    """
    _version = '251'
    fluent_name = 'current-urf'
    _python_name = 'current_urf'

class voltage_correction_urf(Real):
    """
    Voltage correction under-relaxation factor.
    """
    _version = '251'
    fluent_name = 'voltage-correction-urf'
    _python_name = 'voltage_correction_urf'

class q_correct_enabled(Boolean):
    """
    Correcting heat release rate.
    """
    _version = '251'
    fluent_name = 'q-correct-enabled'
    _python_name = 'q_correct_enabled'

class heat_correct_table(Group):
    """
    Data table for heat release rate correction.
    """
    _version = '251'
    fluent_name = 'heat-correct-table'
    _python_name = 'heat_correct_table'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class entropic_heat_enabled(Boolean):
    """
    Include entropic heat.
    """
    _version = '251'
    fluent_name = 'entropic-heat-enabled'
    _python_name = 'entropic_heat_enabled'

class data_type_2(String, AllowedValuesMixin):
    """
    Data type option.
    """
    _version = '251'
    fluent_name = 'data-type'
    _python_name = 'data_type'

class two_tables(Boolean):
    """
    Use different tables for charging and discharging.
    """
    _version = '251'
    fluent_name = 'two-tables'
    _python_name = 'two_tables'

class table_discharge(Group):
    """
    Discharging table data.
    """
    _version = '251'
    fluent_name = 'table-discharge'
    _python_name = 'table_discharge'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class table_charge(Group):
    """
    Charging table data.
    """
    _version = '251'
    fluent_name = 'table-charge'
    _python_name = 'table_charge'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class udf_name(String, AllowedValuesMixin):
    """
    Entropic heat udf name.
    """
    _version = '251'
    fluent_name = 'udf-name'
    _python_name = 'udf_name'

class entropic_heat(Group):
    """
    Define entropic heat related settings.
    """
    _version = '251'
    fluent_name = 'entropic-heat'
    _python_name = 'entropic_heat'
    child_names = ['entropic_heat_enabled', 'data_type', 'two_tables', 'table_discharge', 'table_charge', 'udf_name']
    _child_classes = dict(
        entropic_heat_enabled=entropic_heat_enabled,
        data_type=data_type_2,
        two_tables=two_tables,
        table_discharge=table_discharge,
        table_charge=table_charge,
        udf_name=udf_name,
    )

class option_settings(Group):
    """
    Solution option Setting.
    """
    _version = '251'
    fluent_name = 'option-settings'
    _python_name = 'option_settings'
    child_names = ['joule_heat_in_passive_zone', 'joule_heat_in_active_zone', 'echem_heat_enabled', 'number_substeps', 'current_urf', 'voltage_correction_urf', 'q_correct_enabled', 'heat_correct_table', 'entropic_heat']
    _child_classes = dict(
        joule_heat_in_passive_zone=joule_heat_in_passive_zone,
        joule_heat_in_active_zone=joule_heat_in_active_zone,
        echem_heat_enabled=echem_heat_enabled,
        number_substeps=number_substeps,
        current_urf=current_urf,
        voltage_correction_urf=voltage_correction_urf,
        q_correct_enabled=q_correct_enabled,
        heat_correct_table=heat_correct_table,
        entropic_heat=entropic_heat,
    )

class enabled_25(Boolean):
    """
    Enable cell clustering.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class clustering_type(String, AllowedValuesMixin):
    """
    Clustering type.
    """
    _version = '251'
    fluent_name = 'clustering-type'
    _python_name = 'clustering_type'

class nx(Integer):
    """
    Number of blocks in x direction.
    """
    _version = '251'
    fluent_name = 'nx'
    _python_name = 'nx'

class ny(Integer):
    """
    Number of blocks in y direction.
    """
    _version = '251'
    fluent_name = 'ny'
    _python_name = 'ny'

class nz(Integer):
    """
    Number of blocks in z direction.
    """
    _version = '251'
    fluent_name = 'nz'
    _python_name = 'nz'

class cluster_number(Integer):
    """
    Cluster number.
    """
    _version = '251'
    fluent_name = 'cluster-number'
    _python_name = 'cluster_number'

class target_variable(String, AllowedValuesMixin):
    """
    Target variable name.
    """
    _version = '251'
    fluent_name = 'target-variable'
    _python_name = 'target_variable'

class udf_name_1(String, AllowedValuesMixin):
    """
    Cell clustering udf name.
    """
    _version = '251'
    fluent_name = 'udf-name'
    _python_name = 'udf_name'

class cell_clustering(Group):
    """
    Cell clustering information.
    """
    _version = '251'
    fluent_name = 'cell-clustering'
    _python_name = 'cell_clustering'
    child_names = ['enabled', 'clustering_type', 'nx', 'ny', 'nz', 'cluster_number', 'target_variable', 'udf_name']
    _child_classes = dict(
        enabled=enabled_25,
        clustering_type=clustering_type,
        nx=nx,
        ny=ny,
        nz=nz,
        cluster_number=cluster_number,
        target_variable=target_variable,
        udf_name=udf_name_1,
    )

class solution_option(Group):
    """
    Solution options.
    """
    _version = '251'
    fluent_name = 'solution-option'
    _python_name = 'solution_option'
    child_names = ['option_settings', 'cell_clustering']
    _child_classes = dict(
        option_settings=option_settings,
        cell_clustering=cell_clustering,
    )

class face_name_1(String, AllowedValuesMixin):
    """
    Object name when deleting a thread-real-pair object.
    """
    _version = '251'
    fluent_name = 'face-name'
    _python_name = 'face_name'

class delete_zone_1(Command):
    """
    Delete thread-real-pair object.
    
    Parameters
    ----------
        face_name : str
            Object name when deleting a thread-real-pair object.
    """
    _version = '251'
    fluent_name = 'delete-zone'
    _python_name = 'delete_zone'
    argument_names = ['face_name']
    _child_classes = dict(
        face_name=face_name_1,
    )

class contact_resistance_child(Group):
    """
    'child_object_type' of contact_resistance.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'contact_resistance_child'
    child_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_7,
        value=value_9,
    )

class contact_resistance(ListObject[contact_resistance_child]):
    """
    Contact resistance regions.
    """
    _version = '251'
    fluent_name = 'contact-resistance'
    _python_name = 'contact_resistance'
    command_names = ['list_properties', 'resize', 'add_zone', 'list_zone', 'delete_zone']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
        add_zone=add_zone,
        list_zone=list_zone,
        delete_zone=delete_zone_1,
    )
    child_object_type = contact_resistance_child

class enabled_26(Boolean):
    """
    Enable orthotropic thermal conductivity.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class cell_type(String, AllowedValuesMixin):
    """
    Battery type in orthotropic thermal conductivity.
    """
    _version = '251'
    fluent_name = 'cell-type'
    _python_name = 'cell_type'

class cyl_axis_vec(RealList):
    """
    Define cyl-axis direction vector in orthotropic thermal conductivity.
    """
    _version = '251'
    fluent_name = 'cyl-axis-vec'
    _python_name = 'cyl_axis_vec'

class prism_axis_vec(RealList):
    """
    Define prism-axis direction vector in orthotropic thermal conductivity.
    """
    _version = '251'
    fluent_name = 'prism-axis-vec'
    _python_name = 'prism_axis_vec'

class prism_vec2(RealList):
    """
    Define a vector passing through two axis' origins in orthotropic thermal conductivity.
    """
    _version = '251'
    fluent_name = 'prism-vec2'
    _python_name = 'prism_vec2'

class pouch_normal_vec(RealList):
    """
    Define normal direction of a pouch cell in orthotropic thermal conductivity.
    """
    _version = '251'
    fluent_name = 'pouch-normal-vec'
    _python_name = 'pouch_normal_vec'

class thermal_conductivity(RealList):
    """
    Define orthotropic thermal conductivity in different directions.
    """
    _version = '251'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'

class orthotropic_k(Group):
    """
    Parameters related to orthotropic thermal conductivity.
    """
    _version = '251'
    fluent_name = 'orthotropic-k'
    _python_name = 'orthotropic_k'
    child_names = ['enabled', 'cell_type', 'cyl_axis_vec', 'prism_axis_vec', 'prism_vec2', 'pouch_normal_vec', 'thermal_conductivity']
    _child_classes = dict(
        enabled=enabled_26,
        cell_type=cell_type,
        cyl_axis_vec=cyl_axis_vec,
        prism_axis_vec=prism_axis_vec,
        prism_vec2=prism_vec2,
        pouch_normal_vec=pouch_normal_vec,
        thermal_conductivity=thermal_conductivity,
    )

class enabled_27(Boolean):
    """
    Enable thermal abuse model.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class model_type(String, AllowedValuesMixin):
    """
    Abuse model type.
    """
    _version = '251'
    fluent_name = 'model-type'
    _python_name = 'model_type'

class only_abuse(Boolean):
    """
    Run thermal abuse model only, i.e, battery model is turned off.
    """
    _version = '251'
    fluent_name = 'only-abuse'
    _python_name = 'only_abuse'

class data_type_3(String, AllowedValuesMixin):
    """
    Data type in the 1-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'data-type'
    _python_name = 'data_type'

class hw(Real):
    """
    Hw value in the 1-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'hw'
    _python_name = 'hw'

class a(Real):
    """
    A value in the 1-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'a'
    _python_name = 'a'

class e(Real):
    """
    E value in the 1-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'e'
    _python_name = 'e'

class m(Real):
    """
    M value in the 1-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'm'
    _python_name = 'm'

class n(Real):
    """
    N value in the 1-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'n'
    _python_name = 'n'

class alpha0(Real):
    """
    Alpha0 value in the 1-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'alpha0'
    _python_name = 'alpha0'

class rate_table(Group):
    """
    Abuse rate table in the 1-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'rate-table'
    _python_name = 'rate_table'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class hw_table(Real):
    """
    Hw value in the 1-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'hw-table'
    _python_name = 'hw_table'

class hw_udf(Real):
    """
    Hw value in the 1-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'hw-udf'
    _python_name = 'hw_udf'

class udf_name_2(String, AllowedValuesMixin):
    """
    Abuse rate udf file in the 1-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'udf-name'
    _python_name = 'udf_name'

class one_equation(Group):
    """
    One-equation abuse model parameters.
    """
    _version = '251'
    fluent_name = 'one-equation'
    _python_name = 'one_equation'
    child_names = ['data_type', 'hw', 'a', 'e', 'm', 'n', 'alpha0', 'rate_table', 'hw_table', 'hw_udf', 'udf_name']
    _child_classes = dict(
        data_type=data_type_3,
        hw=hw,
        a=a,
        e=e,
        m=m,
        n=n,
        alpha0=alpha0,
        rate_table=rate_table,
        hw_table=hw_table,
        hw_udf=hw_udf,
        udf_name=udf_name_2,
    )

class a_sei(Real):
    """
    A-sei value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'a-sei'
    _python_name = 'a_sei'

class e_sei(Real):
    """
    E-sei value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'e-sei'
    _python_name = 'e_sei'

class m_sei(Real):
    """
    M-sei value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'm-sei'
    _python_name = 'm_sei'

class h_sei(Real):
    """
    H-sei value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'h-sei'
    _python_name = 'h_sei'

class w_sei(Real):
    """
    W-sei value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'w-sei'
    _python_name = 'w_sei'

class sei0(Real):
    """
    W-sei value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'sei0'
    _python_name = 'sei0'

class a_ne(Real):
    """
    A-ne value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'a-ne'
    _python_name = 'a_ne'

class e_ne(Real):
    """
    E-ne value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'e-ne'
    _python_name = 'e_ne'

class m_ne(Real):
    """
    M-ne value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'm-ne'
    _python_name = 'm_ne'

class h_ne(Real):
    """
    H-ne value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'h-ne'
    _python_name = 'h_ne'

class w_ne(Real):
    """
    W-ne value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'w-ne'
    _python_name = 'w_ne'

class ne0(Real):
    """
    Ne0 value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'ne0'
    _python_name = 'ne0'

class ne_tsei_ref(Real):
    """
    Ne-tsei-ref value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'ne-tsei-ref'
    _python_name = 'ne_tsei_ref'

class ne_tsei0(Real):
    """
    Ne-tsei0 value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'ne-tsei0'
    _python_name = 'ne_tsei0'

class a_pe(Real):
    """
    A-pe value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'a-pe'
    _python_name = 'a_pe'

class e_pe(Real):
    """
    E-pe value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'e-pe'
    _python_name = 'e_pe'

class m1_pe(Real):
    """
    M1-pe value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'm1-pe'
    _python_name = 'm1_pe'

class m2_pe(Real):
    """
    M2-pe value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'm2-pe'
    _python_name = 'm2_pe'

class h_pe(Real):
    """
    H-pe value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'h-pe'
    _python_name = 'h_pe'

class w_pe(Real):
    """
    W-pe value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'w-pe'
    _python_name = 'w_pe'

class pe0(Real):
    """
    Pe0 value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'pe0'
    _python_name = 'pe0'

class a_e(Real):
    """
    A-e value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'a-e'
    _python_name = 'a_e'

class e_e(Real):
    """
    E-e value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'e-e'
    _python_name = 'e_e'

class m_e(Real):
    """
    M-e value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'm-e'
    _python_name = 'm_e'

class h_e(Real):
    """
    H-e value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'h-e'
    _python_name = 'h_e'

class w_e(Real):
    """
    W-e value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'w-e'
    _python_name = 'w_e'

class e0(Real):
    """
    E0 value in the 4-eq thermal abuse model.
    """
    _version = '251'
    fluent_name = 'e0'
    _python_name = 'e0'

class four_equation(Group):
    """
    4-equation abuse model parameters.
    """
    _version = '251'
    fluent_name = 'four-equation'
    _python_name = 'four_equation'
    child_names = ['a_sei', 'e_sei', 'm_sei', 'h_sei', 'w_sei', 'sei0', 'a_ne', 'e_ne', 'm_ne', 'h_ne', 'w_ne', 'ne0', 'ne_tsei_ref', 'ne_tsei0', 'a_pe', 'e_pe', 'm1_pe', 'm2_pe', 'h_pe', 'w_pe', 'pe0', 'a_e', 'e_e', 'm_e', 'h_e', 'w_e', 'e0']
    _child_classes = dict(
        a_sei=a_sei,
        e_sei=e_sei,
        m_sei=m_sei,
        h_sei=h_sei,
        w_sei=w_sei,
        sei0=sei0,
        a_ne=a_ne,
        e_ne=e_ne,
        m_ne=m_ne,
        h_ne=h_ne,
        w_ne=w_ne,
        ne0=ne0,
        ne_tsei_ref=ne_tsei_ref,
        ne_tsei0=ne_tsei0,
        a_pe=a_pe,
        e_pe=e_pe,
        m1_pe=m1_pe,
        m2_pe=m2_pe,
        h_pe=h_pe,
        w_pe=w_pe,
        pe0=pe0,
        a_e=a_e,
        e_e=e_e,
        m_e=m_e,
        h_e=h_e,
        w_e=w_e,
        e0=e0,
    )

class enabled_28(Boolean):
    """
    Enable short reaction.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class h(Real):
    """
    H value in the internal short reaction.
    """
    _version = '251'
    fluent_name = 'h'
    _python_name = 'h'

class a_1(Real):
    """
    A value in the internal short reaction.
    """
    _version = '251'
    fluent_name = 'a'
    _python_name = 'a'

class e_1(Real):
    """
    E value in the internal short reaction.
    """
    _version = '251'
    fluent_name = 'e'
    _python_name = 'e'

class trigger_t(Real):
    """
    Trigger temperature value in the internal short reaction.
    """
    _version = '251'
    fluent_name = 'trigger-t'
    _python_name = 'trigger_t'

class e0_1(Real):
    """
    E0 value in the internal short reaction.
    """
    _version = '251'
    fluent_name = 'e0'
    _python_name = 'e0'

class internal_short(Group):
    """
    Internal short reaction kinetics.
    """
    _version = '251'
    fluent_name = 'internal-short'
    _python_name = 'internal_short'
    child_names = ['enabled', 'h', 'a', 'e', 'trigger_t', 'e0']
    _child_classes = dict(
        enabled=enabled_28,
        h=h,
        a=a_1,
        e=e_1,
        trigger_t=trigger_t,
        e0=e0_1,
    )

class thermal_abuse_model(Group):
    """
    Thermal abuse model related parameters.
    """
    _version = '251'
    fluent_name = 'thermal-abuse-model'
    _python_name = 'thermal_abuse_model'
    child_names = ['enabled', 'model_type', 'only_abuse', 'one_equation', 'four_equation', 'internal_short']
    _child_classes = dict(
        enabled=enabled_27,
        model_type=model_type,
        only_abuse=only_abuse,
        one_equation=one_equation,
        four_equation=four_equation,
        internal_short=internal_short,
    )

class enabled_29(Boolean):
    """
    Enable capacity fade model.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class capacity_fade_table(Group):
    """
    Define capacity fade table.
    """
    _version = '251'
    fluent_name = 'capacity-fade-table'
    _python_name = 'capacity_fade_table'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class capacity_fade_model(Group):
    """
    Capacity fade model.
    """
    _version = '251'
    fluent_name = 'capacity-fade-model'
    _python_name = 'capacity_fade_model'
    child_names = ['enabled', 'capacity_fade_table']
    _child_classes = dict(
        enabled=enabled_29,
        capacity_fade_table=capacity_fade_table,
    )

class enabled_30(Boolean):
    """
    Enable empirical battery life model.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class calendar_time(Real):
    """
    Calendar time in empirical battery life model.
    """
    _version = '251'
    fluent_name = 'calendar-time'
    _python_name = 'calendar_time'

class cycle_number(Real):
    """
    Cycle number in empirical battery life model.
    """
    _version = '251'
    fluent_name = 'cycle-number'
    _python_name = 'cycle_number'

class operation_temperature(Real):
    """
    Operation temperature in empirical battery life model.
    """
    _version = '251'
    fluent_name = 'operation-temperature'
    _python_name = 'operation_temperature'

class ref_temperature(Real):
    """
    Ref. temperature in calendar life model in empirical battery life model..
    """
    _version = '251'
    fluent_name = 'ref-temperature'
    _python_name = 'ref_temperature'

class pre_exp_fac(Real):
    """
    Pre-exponential factor in calendar life model.
    """
    _version = '251'
    fluent_name = 'pre-exp-fac'
    _python_name = 'pre_exp_fac'

class activation_e(Real):
    """
    Activation energy in calendar life model.
    """
    _version = '251'
    fluent_name = 'activation-e'
    _python_name = 'activation_e'

class exponent_value(Real):
    """
    Exponent value in calendar life model.
    """
    _version = '251'
    fluent_name = 'exponent-value'
    _python_name = 'exponent_value'

class calendar_life_params(Group):
    """
    Calendar life related parameters in empirical battery life model.
    """
    _version = '251'
    fluent_name = 'calendar-life-params'
    _python_name = 'calendar_life_params'
    child_names = ['ref_temperature', 'pre_exp_fac', 'activation_e', 'exponent_value']
    _child_classes = dict(
        ref_temperature=ref_temperature,
        pre_exp_fac=pre_exp_fac,
        activation_e=activation_e,
        exponent_value=exponent_value,
    )

class cycle_life_table(Group):
    """
    Cycle life table in the empirical life model.
    """
    _version = '251'
    fluent_name = 'cycle-life-table'
    _python_name = 'cycle_life_table'
    child_names = ['interp_method', 'z_value', 'column_number', 'row_number', 'column_value', 'row_value', 'table_value', 'z_label', 'table_label']
    command_names = ['write_table', 'read_table', 'print_table']
    _child_classes = dict(
        interp_method=interp_method,
        z_value=z_value,
        column_number=column_number,
        row_number=row_number,
        column_value=column_value,
        row_value=row_value,
        table_value=table_value,
        z_label=z_label,
        table_label=table_label,
        write_table=write_table,
        read_table=read_table,
        print_table=print_table,
    )

class life_model(Group):
    """
    Empirical battery life model.
    """
    _version = '251'
    fluent_name = 'life-model'
    _python_name = 'life_model'
    child_names = ['enabled', 'calendar_time', 'cycle_number', 'operation_temperature', 'calendar_life_params', 'cycle_life_table']
    _child_classes = dict(
        enabled=enabled_30,
        calendar_time=calendar_time,
        cycle_number=cycle_number,
        operation_temperature=operation_temperature,
        calendar_life_params=calendar_life_params,
        cycle_life_table=cycle_life_table,
    )

class enabled_31(Boolean):
    """
    Enable battery swelling model.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class omega(Real):
    """
    Swell coefficient.
    """
    _version = '251'
    fluent_name = 'omega'
    _python_name = 'omega'

class omega_pe(Real):
    """
    Swell coefficient of positive electrode.
    """
    _version = '251'
    fluent_name = 'omega-pe'
    _python_name = 'omega_pe'

class omega_ne(Real):
    """
    Swell coefficient of negative electrode.
    """
    _version = '251'
    fluent_name = 'omega-ne'
    _python_name = 'omega_ne'

class e_elastic_pe(Real):
    """
    Young's modulus of positive electrode.
    """
    _version = '251'
    fluent_name = 'e-elastic-pe'
    _python_name = 'e_elastic_pe'

class e_elastic_sp(Real):
    """
    Young's modulus of separator.
    """
    _version = '251'
    fluent_name = 'e-elastic-sp'
    _python_name = 'e_elastic_sp'

class e_elastic_ne(Real):
    """
    Young's modulus of negative electrode.
    """
    _version = '251'
    fluent_name = 'e-elastic-ne'
    _python_name = 'e_elastic_ne'

class soc_ref(Real):
    """
    Neutral swell state of charge in the battery swell model.
    """
    _version = '251'
    fluent_name = 'soc-ref'
    _python_name = 'soc_ref'

class cell_type_1(String, AllowedValuesMixin):
    """
    Cell type in the battery swell model.
    """
    _version = '251'
    fluent_name = 'cell-type'
    _python_name = 'cell_type'

class axis_vec(RealList):
    """
    Cylinder axis vector in the battery swell model.
    """
    _version = '251'
    fluent_name = 'axis-vec'
    _python_name = 'axis_vec'

class origin_vec(RealList):
    """
    Cylinder origin coordinate in the battery swell model.
    """
    _version = '251'
    fluent_name = 'origin-vec'
    _python_name = 'origin_vec'

class normal_vec(RealList):
    """
    Layer normal vector in the battery swell model.
    """
    _version = '251'
    fluent_name = 'normal-vec'
    _python_name = 'normal_vec'

class prism_axis_vec_1(RealList):
    """
    Axis vector in the battery swell model.
    """
    _version = '251'
    fluent_name = 'prism-axis-vec'
    _python_name = 'prism_axis_vec'

class prism_vec2_1(RealList):
    """
    Vector connecting two origins in the battery swell model.
    """
    _version = '251'
    fluent_name = 'prism-vec2'
    _python_name = 'prism_vec2'

class orientation_udf_name(String, AllowedValuesMixin):
    """
    Layer normal vector udf in the battery swell model.
    """
    _version = '251'
    fluent_name = 'orientation-udf-name'
    _python_name = 'orientation_udf_name'

class customize_swelling_strain_enabled(Boolean):
    """
    Enable customized swelling strain in the battery swell model.
    """
    _version = '251'
    fluent_name = 'customize-swelling-strain-enabled'
    _python_name = 'customize_swelling_strain_enabled'

class strain_udf_name(String, AllowedValuesMixin):
    """
    Swelling strain udf in the battery swell model.
    """
    _version = '251'
    fluent_name = 'strain-udf-name'
    _python_name = 'strain_udf_name'

class swelling_model(Group):
    """
    Battery swelling model related parameters.
    """
    _version = '251'
    fluent_name = 'swelling-model'
    _python_name = 'swelling_model'
    child_names = ['enabled', 'omega', 'omega_pe', 'omega_ne', 'e_elastic_pe', 'e_elastic_sp', 'e_elastic_ne', 'soc_ref', 'cell_type', 'axis_vec', 'origin_vec', 'normal_vec', 'prism_axis_vec', 'prism_vec2', 'orientation_udf_name', 'customize_swelling_strain_enabled', 'strain_udf_name']
    _child_classes = dict(
        enabled=enabled_31,
        omega=omega,
        omega_pe=omega_pe,
        omega_ne=omega_ne,
        e_elastic_pe=e_elastic_pe,
        e_elastic_sp=e_elastic_sp,
        e_elastic_ne=e_elastic_ne,
        soc_ref=soc_ref,
        cell_type=cell_type_1,
        axis_vec=axis_vec,
        origin_vec=origin_vec,
        normal_vec=normal_vec,
        prism_axis_vec=prism_axis_vec_1,
        prism_vec2=prism_vec2_1,
        orientation_udf_name=orientation_udf_name,
        customize_swelling_strain_enabled=customize_swelling_strain_enabled,
        strain_udf_name=strain_udf_name,
    )

class enabled_32(Boolean):
    """
    Enable battery venting model.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class venting_gas_phase(String, AllowedValuesMixin):
    """
    Venting gas release phase.
    """
    _version = '251'
    fluent_name = 'venting-gas-phase'
    _python_name = 'venting_gas_phase'

class gas_release_faces(StringList, AllowedValuesMixin):
    """
    Venting gas release faces.
    """
    _version = '251'
    fluent_name = 'gas-release-faces'
    _python_name = 'gas_release_faces'

class reacting_model(String, AllowedValuesMixin):
    """
    The species reaction model in the venting model.
    """
    _version = '251'
    fluent_name = 'reacting-model'
    _python_name = 'reacting_model'

class rate_method(String, AllowedValuesMixin):
    """
    The venting gas release method in the venting model.
    """
    _version = '251'
    fluent_name = 'rate-method'
    _python_name = 'rate_method'

class one_mass(Real):
    """
    Total venting gas release in the 1-eq abuse model.
    """
    _version = '251'
    fluent_name = 'one-mass'
    _python_name = 'one_mass'

class four_sei(Real):
    """
    Total gas release due to SEI-reaction in the 4-eq abuse model.
    """
    _version = '251'
    fluent_name = 'four-sei'
    _python_name = 'four_sei'

class four_pe(Real):
    """
    Total gas release due to PE-reaction in the 4-eq abuse model.
    """
    _version = '251'
    fluent_name = 'four-pe'
    _python_name = 'four_pe'

class four_ne(Real):
    """
    Total gas release due to NE-reaction in the 4-eq abuse model.
    """
    _version = '251'
    fluent_name = 'four-ne'
    _python_name = 'four_ne'

class four_e(Real):
    """
    Total gas release due to electrolyte decomposition reaction in the 4-eq abuse model.
    """
    _version = '251'
    fluent_name = 'four-e'
    _python_name = 'four_e'

class trigger_t_1(Real):
    """
    Trigger temperature for venting gas release.
    """
    _version = '251'
    fluent_name = 'trigger-t'
    _python_name = 'trigger_t'

class rate_file(Filename):
    """
    File name of the venting gas release information.
    """
    _version = '251'
    fluent_name = 'rate-file'
    _python_name = 'rate_file'

class gas_composition(RealList):
    """
    Define venting gas composition.
    """
    _version = '251'
    fluent_name = 'gas-composition'
    _python_name = 'gas_composition'

class venting_model(Group):
    """
    Venting model settings.
    """
    _version = '251'
    fluent_name = 'venting-model'
    _python_name = 'venting_model'
    child_names = ['enabled', 'venting_gas_phase', 'gas_release_faces', 'reacting_model', 'rate_method', 'one_mass', 'four_sei', 'four_pe', 'four_ne', 'four_e', 'trigger_t', 'rate_file', 'gas_composition']
    _child_classes = dict(
        enabled=enabled_32,
        venting_gas_phase=venting_gas_phase,
        gas_release_faces=gas_release_faces,
        reacting_model=reacting_model,
        rate_method=rate_method,
        one_mass=one_mass,
        four_sei=four_sei,
        four_pe=four_pe,
        four_ne=four_ne,
        four_e=four_e,
        trigger_t=trigger_t_1,
        rate_file=rate_file,
        gas_composition=gas_composition,
    )

class ntgk_model_parameter(String, AllowedValuesMixin):
    """
    UDF function name for ntgk-model parameters.
    """
    _version = '251'
    fluent_name = 'ntgk-model-parameter'
    _python_name = 'ntgk_model_parameter'

class ecm_model_parameter(String, AllowedValuesMixin):
    """
    UDF function name for ecm-model parameters.
    """
    _version = '251'
    fluent_name = 'ecm-model-parameter'
    _python_name = 'ecm_model_parameter'

class user_defined_echem_model(String, AllowedValuesMixin):
    """
    UDF function for user-defined echem model.
    """
    _version = '251'
    fluent_name = 'user-defined-echem-model'
    _python_name = 'user_defined_echem_model'

class p2d_bv_rate(String, AllowedValuesMixin):
    """
    UDF function for Butler-Volmer rate in p2d model.
    """
    _version = '251'
    fluent_name = 'p2d-bv-rate'
    _python_name = 'p2d_bv_rate'

class p2d_postprocessing(String, AllowedValuesMixin):
    """
    UDF function for postprocessing in p2d model.
    """
    _version = '251'
    fluent_name = 'p2d-postprocessing'
    _python_name = 'p2d_postprocessing'

class p2d_porosity_p(String, AllowedValuesMixin):
    """
    UDF function for cathode porosity in p2d model.
    """
    _version = '251'
    fluent_name = 'p2d-porosity-p'
    _python_name = 'p2d_porosity_p'

class p2d_porosity_n(String, AllowedValuesMixin):
    """
    UDF function for anode porosity in p2d model.
    """
    _version = '251'
    fluent_name = 'p2d-porosity-n'
    _python_name = 'p2d_porosity_n'

class udf_hooks(Group):
    """
    Hook up battery model related UDFs.
    """
    _version = '251'
    fluent_name = 'udf-hooks'
    _python_name = 'udf_hooks'
    child_names = ['ntgk_model_parameter', 'ecm_model_parameter', 'user_defined_echem_model', 'p2d_bv_rate', 'p2d_postprocessing', 'p2d_porosity_p', 'p2d_porosity_n']
    _child_classes = dict(
        ntgk_model_parameter=ntgk_model_parameter,
        ecm_model_parameter=ecm_model_parameter,
        user_defined_echem_model=user_defined_echem_model,
        p2d_bv_rate=p2d_bv_rate,
        p2d_postprocessing=p2d_postprocessing,
        p2d_porosity_p=p2d_porosity_p,
        p2d_porosity_n=p2d_porosity_n,
    )

class advanced_models(Group):
    """
    Advanced model options.
    """
    _version = '251'
    fluent_name = 'advanced-models'
    _python_name = 'advanced_models'
    child_names = ['contact_resistance', 'orthotropic_k', 'thermal_abuse_model', 'capacity_fade_model', 'life_model', 'swelling_model', 'venting_model', 'udf_hooks']
    _child_classes = dict(
        contact_resistance=contact_resistance,
        orthotropic_k=orthotropic_k,
        thermal_abuse_model=thermal_abuse_model,
        capacity_fade_model=capacity_fade_model,
        life_model=life_model,
        swelling_model=swelling_model,
        venting_model=venting_model,
        udf_hooks=udf_hooks,
    )

class enabled_33(Boolean):
    """
    Enable standalone echem model.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class life_model_enabled(Boolean):
    """
    Enable physics-based battery life model.
    """
    _version = '251'
    fluent_name = 'life-model-enabled'
    _python_name = 'life_model_enabled'

class report_time_step(Real):
    """
    Report time step in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'report-time-step'
    _python_name = 'report_time_step'

class total_run_num_cycles(Real):
    """
    Total run number of cycles in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'total-run-num-cycles'
    _python_name = 'total_run_num_cycles'

class total_run_time(Real):
    """
    Total run time in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'total-run-time'
    _python_name = 'total_run_time'

class ref_temp(Real):
    """
    Reference temperature used in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'ref-temp'
    _python_name = 'ref_temp'

class load_type(String, AllowedValuesMixin):
    """
    Mechanical load type in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'load-type'
    _python_name = 'load_type'

class external_p(Real):
    """
    External pressure in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'external-p'
    _python_name = 'external_p'

class total_deformation(Real):
    """
    Total deformation (%) in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'total-deformation'
    _python_name = 'total_deformation'

class external_stiff(Real):
    """
    External stiffness in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'external-stiff'
    _python_name = 'external_stiff'

class ce_ec(Real):
    """
    Ethylene Carbonate concentration in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'ce-ec'
    _python_name = 'ce_ec'

class diff_ec(Real):
    """
    Ethylene carbonate diffusivity in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'diff-ec'
    _python_name = 'diff_ec'

class rho_sei(Real):
    """
    SEI density in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'rho-sei'
    _python_name = 'rho_sei'

class m_sei_1(Real):
    """
    SEI molecular weight in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'm-sei'
    _python_name = 'm_sei'

class kappa_sei(Real):
    """
    SEI conductivity in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'kappa-sei'
    _python_name = 'kappa_sei'

class k0_sei(Real):
    """
    Reference rate constant of SEI reaction in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'k0-sei'
    _python_name = 'k0_sei'

class ac_sei(Real):
    """
    Transfer coefficient at cathode of SEI reaction in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'ac-sei'
    _python_name = 'ac_sei'

class u_sei(Real):
    """
    Equilibrium potential of SEI reaction in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'u-sei'
    _python_name = 'u_sei'

class lithium_plating_enabled(Boolean):
    """
    Enable lithium plating in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'lithium-plating-enabled'
    _python_name = 'lithium_plating_enabled'

class rho_li(Real):
    """
    Lithium density in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'rho-li'
    _python_name = 'rho_li'

class m_li(Real):
    """
    Lithium molecular weight in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'm-li'
    _python_name = 'm_li'

class i0_lpl(Real):
    """
    Reference current density of Li plating reaction in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'i0-lpl'
    _python_name = 'i0_lpl'

class ac_lpl(Real):
    """
    Transfer coefficient at cathode of Li plating reaction in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'ac-lpl'
    _python_name = 'ac_lpl'

class u_lpl(Real):
    """
    Equilibrium potential of Li plating reaction in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'u-lpl'
    _python_name = 'u_lpl'

class beta(Real):
    """
    Fraction of deposited Li+ forming SEI in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'beta'
    _python_name = 'beta'

class multiplier(Real):
    """
    Aging effects multiplier used in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'multiplier'
    _python_name = 'multiplier'

class save_interval(Integer):
    """
    Save aging effects profile every N cycles in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'save-interval'
    _python_name = 'save_interval'

class restart_enabled(Boolean):
    """
    Restart from aged battery in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'restart-enabled'
    _python_name = 'restart_enabled'

class restart_filename(Filename, _InputFile):
    """
    Profile file name (\\*.prof,csv) in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'restart-filename'
    _python_name = 'restart_filename'

class restart_profile(String, AllowedValuesMixin):
    """
    Aging effects profile in the standalone echem model.
    """
    _version = '251'
    fluent_name = 'restart-profile'
    _python_name = 'restart_profile'

class run_echem_standalone(Command):
    """
    Execute standalone echem model command.
    """
    _version = '251'
    fluent_name = 'run-echem-standalone'
    _python_name = 'run_echem_standalone'

class standalone_echem_model(Group):
    """
    Run standalone echem model.
    """
    _version = '251'
    fluent_name = 'standalone-echem-model'
    _python_name = 'standalone_echem_model'
    child_names = ['enabled', 'life_model_enabled', 'report_time_step', 'total_run_num_cycles', 'total_run_time', 'ref_temp', 'load_type', 'external_p', 'total_deformation', 'external_stiff', 'ce_ec', 'diff_ec', 'rho_sei', 'm_sei', 'kappa_sei', 'k0_sei', 'ac_sei', 'u_sei', 'lithium_plating_enabled', 'rho_li', 'm_li', 'i0_lpl', 'ac_lpl', 'u_lpl', 'beta', 'multiplier', 'save_interval', 'restart_enabled', 'restart_filename', 'restart_profile']
    command_names = ['run_echem_standalone']
    _child_classes = dict(
        enabled=enabled_33,
        life_model_enabled=life_model_enabled,
        report_time_step=report_time_step,
        total_run_num_cycles=total_run_num_cycles,
        total_run_time=total_run_time,
        ref_temp=ref_temp,
        load_type=load_type,
        external_p=external_p,
        total_deformation=total_deformation,
        external_stiff=external_stiff,
        ce_ec=ce_ec,
        diff_ec=diff_ec,
        rho_sei=rho_sei,
        m_sei=m_sei_1,
        kappa_sei=kappa_sei,
        k0_sei=k0_sei,
        ac_sei=ac_sei,
        u_sei=u_sei,
        lithium_plating_enabled=lithium_plating_enabled,
        rho_li=rho_li,
        m_li=m_li,
        i0_lpl=i0_lpl,
        ac_lpl=ac_lpl,
        u_lpl=u_lpl,
        beta=beta,
        multiplier=multiplier,
        save_interval=save_interval,
        restart_enabled=restart_enabled,
        restart_filename=restart_filename,
        restart_profile=restart_profile,
        run_echem_standalone=run_echem_standalone,
    )

class echem_model_1(String, AllowedValuesMixin):
    """
    Echem model for parameter estimation.
    """
    _version = '251'
    fluent_name = 'echem-model'
    _python_name = 'echem_model'

class filename_5(Filename, _InputFile):
    """
    Test filenames used in thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class initial_alpha(Real):
    """
    Battery's initial alpha in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'initial-alpha'
    _python_name = 'initial_alpha'

class initial_temp(Real):
    """
    Battery's initial temperature in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'initial-temp'
    _python_name = 'initial_temp'

class ambient_temp_1(Real):
    """
    Ambient temperature in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'ambient-temp'
    _python_name = 'ambient_temp'

class external_ht_coeff(Real):
    """
    External heat transfer coefficient in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'external-ht-coeff'
    _python_name = 'external_ht_coeff'

class enclosure_temp(Real):
    """
    Enclosure temperature for radiation in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'enclosure-temp'
    _python_name = 'enclosure_temp'

class include_max_temp_enabled(Boolean):
    """
    Maximum temperature included in the data file.
    """
    _version = '251'
    fluent_name = 'include-max-temp-enabled'
    _python_name = 'include_max_temp_enabled'

class range_temp(Real):
    """
    Total temperature increase in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'range-temp'
    _python_name = 'range_temp'

class test_data_sets_child(Group):
    """
    'child_object_type' of test_data_sets.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'test_data_sets_child'
    child_names = ['filename', 'initial_alpha', 'initial_temp', 'ambient_temp', 'external_ht_coeff', 'enclosure_temp', 'include_max_temp_enabled', 'range_temp']
    _child_classes = dict(
        filename=filename_5,
        initial_alpha=initial_alpha,
        initial_temp=initial_temp,
        ambient_temp=ambient_temp_1,
        external_ht_coeff=external_ht_coeff,
        enclosure_temp=enclosure_temp,
        include_max_temp_enabled=include_max_temp_enabled,
        range_temp=range_temp,
    )

class test_data_sets(ListObject[test_data_sets_child]):
    """
    Define test data sets.
    """
    _version = '251'
    fluent_name = 'test-data-sets'
    _python_name = 'test_data_sets'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = test_data_sets_child

class rhocp(Real):
    """
    Density\\*Cp used in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'rhocp'
    _python_name = 'rhocp'

class area(Real):
    """
    Battery external area used in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'area'
    _python_name = 'area'

class vol(Real):
    """
    Battery volume used in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'vol'
    _python_name = 'vol'

class epsilon(Real):
    """
    Battery's surface emissivity used in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'epsilon'
    _python_name = 'epsilon'

class fixm_enabled(Boolean):
    """
    Fixing the exponent of alph in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'fixm-enabled'
    _python_name = 'fixm_enabled'

class mvalue(Real):
    """
    Value for exponent m in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'mvalue'
    _python_name = 'mvalue'

class fixn_enabled(Boolean):
    """
    Fix the exponent of (1-alpha) in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'fixn-enabled'
    _python_name = 'fixn_enabled'

class nvalue(Real):
    """
    Value for exponent n in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'nvalue'
    _python_name = 'nvalue'

class filename_4(Filename, _InputFile):
    """
    File name for temperature testing data in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class ambient_temp(Real):
    """
    Ambient temperature for convection in the thermal abuse model fitting.
    """
    _version = '251'
    fluent_name = 'ambient-temp'
    _python_name = 'ambient_temp'

class abuse_curve_fitting(Command):
    """
    Thermal abuse curve fitting.
    """
    _version = '251'
    fluent_name = 'abuse-curve-fitting'
    _python_name = 'abuse_curve_fitting'

class user_a(Real):
    """
    Fine-tuning parameter A in abuse model fitting.
    """
    _version = '251'
    fluent_name = 'user-a'
    _python_name = 'user_a'

class user_e(Real):
    """
    Fine-tuning parameter E in abuse model fitting.
    """
    _version = '251'
    fluent_name = 'user-e'
    _python_name = 'user_e'

class user_m(Real):
    """
    Fine-tuning parameter m in abuse model fitting.
    """
    _version = '251'
    fluent_name = 'user-m'
    _python_name = 'user_m'

class user_n(Real):
    """
    Fine-tuning parameter n in abuse model fitting.
    """
    _version = '251'
    fluent_name = 'user-n'
    _python_name = 'user_n'

class fine_tune_parameter(Command):
    """
    Fine tune Arrhenius rate parameters.
    
    Parameters
    ----------
        user_a : real
            Fine-tuning parameter A in abuse model fitting.
        user_e : real
            Fine-tuning parameter E in abuse model fitting.
        user_m : real
            Fine-tuning parameter m in abuse model fitting.
        user_n : real
            Fine-tuning parameter n in abuse model fitting.
    """
    _version = '251'
    fluent_name = 'fine-tune-parameter'
    _python_name = 'fine_tune_parameter'
    argument_names = ['user_a', 'user_e', 'user_m', 'user_n']
    _child_classes = dict(
        user_a=user_a,
        user_e=user_e,
        user_m=user_m,
        user_n=user_n,
    )

class apply_1(Boolean):
    """
    Use fine-tuned parameters.
    """
    _version = '251'
    fluent_name = 'apply?'
    _python_name = 'apply'

class use_fine_tune_parameter(Command):
    """
    Command to use fine-tuned parameters.
    
    Parameters
    ----------
        apply : bool
            Use fine-tuned parameters.
    """
    _version = '251'
    fluent_name = 'use-fine-tune-parameter'
    _python_name = 'use_fine_tune_parameter'
    argument_names = ['apply']
    _child_classes = dict(
        apply=apply_1,
    )

class thermal_abuse_fitting(Group):
    """
    Thermal abuse parameter estimation tool.
    """
    _version = '251'
    fluent_name = 'thermal-abuse-fitting'
    _python_name = 'thermal_abuse_fitting'
    child_names = ['test_data_sets', 'rhocp', 'area', 'vol', 'epsilon', 'fixm_enabled', 'mvalue', 'fixn_enabled', 'nvalue', 'filename', 'initial_temp', 'ambient_temp', 'external_ht_coeff', 'enclosure_temp']
    command_names = ['abuse_curve_fitting', 'fine_tune_parameter', 'use_fine_tune_parameter']
    _child_classes = dict(
        test_data_sets=test_data_sets,
        rhocp=rhocp,
        area=area,
        vol=vol,
        epsilon=epsilon,
        fixm_enabled=fixm_enabled,
        mvalue=mvalue,
        fixn_enabled=fixn_enabled,
        nvalue=nvalue,
        filename=filename_4,
        initial_temp=initial_temp,
        ambient_temp=ambient_temp,
        external_ht_coeff=external_ht_coeff,
        enclosure_temp=enclosure_temp,
        abuse_curve_fitting=abuse_curve_fitting,
        fine_tune_parameter=fine_tune_parameter,
        use_fine_tune_parameter=use_fine_tune_parameter,
    )

class filename_6(FilenameList):
    """
    File names used in the NTGK model fitting.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class capacity(Real):
    """
    Battery capacity used in the NTGK model fitting.
    """
    _version = '251'
    fluent_name = 'capacity'
    _python_name = 'capacity'

class number_dod_level(Integer):
    """
    Number of DOD-levels used in the NTGK model fitting.
    """
    _version = '251'
    fluent_name = 'number-dod-level'
    _python_name = 'number_dod_level'

class min_dod(Real):
    """
    Minimum DOD used in the NTGK model fitting.
    """
    _version = '251'
    fluent_name = 'min-dod'
    _python_name = 'min_dod'

class max_dod(Real):
    """
    Maximum DOD used in the NTGK model fitting.
    """
    _version = '251'
    fluent_name = 'max-dod'
    _python_name = 'max_dod'

class capacity_fade_enabled(Boolean):
    """
    Include Capacity Fade Effect in the NTGK model fitting.
    """
    _version = '251'
    fluent_name = 'capacity-fade-enabled'
    _python_name = 'capacity_fade_enabled'

class ntgk_curve_fitting(Command):
    """
    NTGK parameter estimation tool.
    
    Parameters
    ----------
        filename : List
            File names used in the NTGK model fitting.
        capacity : real
            Battery capacity used in the NTGK model fitting.
        number_dod_level : int
            Number of DOD-levels used in the NTGK model fitting.
        min_dod : real
            Minimum DOD used in the NTGK model fitting.
        max_dod : real
            Maximum DOD used in the NTGK model fitting.
        capacity_fade_enabled : bool
            Include Capacity Fade Effect in the NTGK model fitting.
    """
    _version = '251'
    fluent_name = 'ntgk-curve-fitting'
    _python_name = 'ntgk_curve_fitting'
    argument_names = ['filename', 'capacity', 'number_dod_level', 'min_dod', 'max_dod', 'capacity_fade_enabled']
    _child_classes = dict(
        filename=filename_6,
        capacity=capacity,
        number_dod_level=number_dod_level,
        min_dod=min_dod,
        max_dod=max_dod,
        capacity_fade_enabled=capacity_fade_enabled,
    )

class filename_7(FilenameList):
    """
    File names used in ECM model parameter fitting.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class capacity_1(Real):
    """
    Battery capacity used in ECM model parameter fitting.
    """
    _version = '251'
    fluent_name = 'capacity'
    _python_name = 'capacity'

class circuit_model(String, AllowedValuesMixin):
    """
    Circuit model used in ECM model parameter fitting.
    """
    _version = '251'
    fluent_name = 'circuit-model'
    _python_name = 'circuit_model'

class fitting_method(String, AllowedValuesMixin):
    """
    Fitting method used in ECM model parameter fitting.
    """
    _version = '251'
    fluent_name = 'fitting-method'
    _python_name = 'fitting_method'

class rs_fix(RealList):
    """
    Fix-Rs used in ECM model parameter fitting.
    """
    _version = '251'
    fluent_name = 'rs-fix'
    _python_name = 'rs_fix'

class capacity_fade_enabled_1(Boolean):
    """
    Include capacity fade effect used in ECM model parameter fitting.
    """
    _version = '251'
    fluent_name = 'capacity-fade-enabled'
    _python_name = 'capacity_fade_enabled'

class read_discharge_file_enabled(Boolean):
    """
    Import discharging curves used in ECM model parameter fitting.
    """
    _version = '251'
    fluent_name = 'read-discharge-file-enabled'
    _python_name = 'read_discharge_file_enabled'

class number_discharge_file(Integer):
    """
    Number of total discharging files used in ECM model parameter fitting.
    """
    _version = '251'
    fluent_name = 'number-discharge-file'
    _python_name = 'number_discharge_file'

class discharge_filename(FilenameList):
    """
    File name for discharing curve used in ECM model parameter fitting.
    """
    _version = '251'
    fluent_name = 'discharge-filename'
    _python_name = 'discharge_filename'

class ecm_curve_fitting(Command):
    """
    ECM parameter estimation tool.
    
    Parameters
    ----------
        filename : List
            File names used in ECM model parameter fitting.
        capacity : real
            Battery capacity used in ECM model parameter fitting.
        circuit_model : str
            Circuit model used in ECM model parameter fitting.
        fitting_method : str
            Fitting method used in ECM model parameter fitting.
        rs_fix : List
            Fix-Rs used in ECM model parameter fitting.
        capacity_fade_enabled : bool
            Include capacity fade effect used in ECM model parameter fitting.
        read_discharge_file_enabled : bool
            Import discharging curves used in ECM model parameter fitting.
        number_discharge_file : int
            Number of total discharging files used in ECM model parameter fitting.
        discharge_filename : List
            File name for discharing curve used in ECM model parameter fitting.
    """
    _version = '251'
    fluent_name = 'ecm-curve-fitting'
    _python_name = 'ecm_curve_fitting'
    argument_names = ['filename', 'capacity', 'circuit_model', 'fitting_method', 'rs_fix', 'capacity_fade_enabled', 'read_discharge_file_enabled', 'number_discharge_file', 'discharge_filename']
    _child_classes = dict(
        filename=filename_7,
        capacity=capacity_1,
        circuit_model=circuit_model,
        fitting_method=fitting_method,
        rs_fix=rs_fix,
        capacity_fade_enabled=capacity_fade_enabled_1,
        read_discharge_file_enabled=read_discharge_file_enabled,
        number_discharge_file=number_discharge_file,
        discharge_filename=discharge_filename,
    )

class parameter_estimation_tool(Group):
    """
    Parameter estimation tool.
    """
    _version = '251'
    fluent_name = 'parameter-estimation-tool'
    _python_name = 'parameter_estimation_tool'
    child_names = ['echem_model', 'thermal_abuse_fitting']
    command_names = ['ntgk_curve_fitting', 'ecm_curve_fitting']
    _child_classes = dict(
        echem_model=echem_model_1,
        thermal_abuse_fitting=thermal_abuse_fitting,
        ntgk_curve_fitting=ntgk_curve_fitting,
        ecm_curve_fitting=ecm_curve_fitting,
    )

class rom_type(String, AllowedValuesMixin):
    """
    ROM type.
    """
    _version = '251'
    fluent_name = 'rom-type'
    _python_name = 'rom_type'

class time_stepping_method(String, AllowedValuesMixin):
    """
    Time stepping method in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'time-stepping-method'
    _python_name = 'time_stepping_method'

class max_time(Real):
    """
    Max time to run the ROM simulation.
    """
    _version = '251'
    fluent_name = 'max-time'
    _python_name = 'max_time'

class dt_0(Real):
    """
    Initial time step size used in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'dt-0'
    _python_name = 'dt_0'

class dt_max(Real):
    """
    Max. time step size used in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'dt-max'
    _python_name = 'dt_max'

class increment_factor(Real):
    """
    Time step increment factor used in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'increment-factor'
    _python_name = 'increment_factor'

class n_time_step_per_setting(Integer):
    """
    Number of time steps before setting change in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'n-time-step-per-setting'
    _python_name = 'n_time_step_per_setting'

class max_n_per_time_step(Integer):
    """
    Max iterations per time-step in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'max-n-per-time-step'
    _python_name = 'max_n_per_time_step'

class file_name_1_8(Filename, _InputFile):
    """
    Time-stepping file in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class stop_range_fraction(Real):
    """
    Max dT_duration/T-range to stop in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'stop-range-fraction'
    _python_name = 'stop_range_fraction'

class transient_setup(Group):
    """
    Up transient simulation related parameters.
    """
    _version = '251'
    fluent_name = 'transient-setup'
    _python_name = 'transient_setup'
    child_names = ['time_stepping_method', 'max_time', 'dt_0', 'dt_max', 'increment_factor', 'n_time_step_per_setting', 'max_n_per_time_step', 'file_name', 'stop_range_fraction']
    _child_classes = dict(
        time_stepping_method=time_stepping_method,
        max_time=max_time,
        dt_0=dt_0,
        dt_max=dt_max,
        increment_factor=increment_factor,
        n_time_step_per_setting=n_time_step_per_setting,
        max_n_per_time_step=max_n_per_time_step,
        file_name=file_name_1_8,
        stop_range_fraction=stop_range_fraction,
    )

class volume_heat_run(Integer):
    """
    Saving frequency for volume heat run in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'volume-heat-run'
    _python_name = 'volume_heat_run'

class face_heat_run(Integer):
    """
    Saving frequency for face heat run in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'face-heat-run'
    _python_name = 'face_heat_run'

class face_temperature_run(Integer):
    """
    Saving frequency for face-temperature run in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'face-temperature-run'
    _python_name = 'face_temperature_run'

class joule_heat_run(Integer):
    """
    Saving frequency for Joule heating run in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'joule-heat-run'
    _python_name = 'joule_heat_run'

class file_saving_frequency(Group):
    """
    File saving-frequency used in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'file-saving-frequency'
    _python_name = 'file_saving_frequency'
    child_names = ['volume_heat_run', 'face_heat_run', 'face_temperature_run', 'joule_heat_run']
    _child_classes = dict(
        volume_heat_run=volume_heat_run,
        face_heat_run=face_heat_run,
        face_temperature_run=face_temperature_run,
        joule_heat_run=joule_heat_run,
    )

class enabled_34(Boolean):
    """
    Add joule heating as input parameter in ROM.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class value_14(Real):
    """
    Electric tab current in ROM run.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class joule_heat_parameter(Group):
    """
    Joule heat parameter related settings in ROM.
    """
    _version = '251'
    fluent_name = 'joule-heat-parameter'
    _python_name = 'joule_heat_parameter'
    child_names = ['enabled', 'value']
    _child_classes = dict(
        enabled=enabled_34,
        value=value_14,
    )

class parameter_type(String, AllowedValuesMixin):
    """
    Parameter type.
    """
    _version = '251'
    fluent_name = 'parameter-type'
    _python_name = 'parameter_type'

class entity_list(StringList, AllowedValuesMixin):
    """
    Entity list name.
    """
    _version = '251'
    fluent_name = 'entity-list'
    _python_name = 'entity_list'

class group_value(Real):
    """
    Group value.
    """
    _version = '251'
    fluent_name = 'group-value'
    _python_name = 'group_value'

class individual_or_group(Boolean):
    """
    As-group option.
    """
    _version = '251'
    fluent_name = 'individual-or-group'
    _python_name = 'individual_or_group'

class individual_value(Boolean):
    """
    Individual value for different entities in the group.
    """
    _version = '251'
    fluent_name = 'individual-value'
    _python_name = 'individual_value'

class value_list(RealList):
    """
    Values for the different entities in the group.
    """
    _version = '251'
    fluent_name = 'value-list'
    _python_name = 'value_list'

class add_rom_parameter(Command):
    """
    Add parameter command.
    """
    _version = '251'
    fluent_name = 'add-rom-parameter'
    _python_name = 'add_rom_parameter'
    argument_names = ['parameter_type', 'entity_list', 'group_value', 'individual_or_group', 'individual_value', 'value_list']
    _child_classes = dict(
        parameter_type=parameter_type,
        entity_list=entity_list,
        group_value=group_value,
        individual_or_group=individual_or_group,
        individual_value=individual_value,
        value_list=value_list,
    )

class rom_type_1(Integer):
    """
    ROM type in ROM-data creator.
    """
    _version = '251'
    fluent_name = 'rom-type'
    _python_name = 'rom_type'

class rom_data_creator(Command):
    """
    ROM data creator.
    
    Parameters
    ----------
        rom_type : int
            ROM type in ROM-data creator.
    """
    _version = '251'
    fluent_name = 'rom-data-creator'
    _python_name = 'rom_data_creator'
    argument_names = ['rom_type']
    _child_classes = dict(
        rom_type=rom_type_1,
    )

class rom_type_2(Integer):
    """
    ROM type in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'rom-type'
    _python_name = 'rom_type'

class create_journal_file(Command):
    """
    Create journal file.
    
    Parameters
    ----------
        rom_type : int
            ROM type in the ROM simulation.
    """
    _version = '251'
    fluent_name = 'create-journal-file'
    _python_name = 'create_journal_file'
    argument_names = ['rom_type']
    _child_classes = dict(
        rom_type=rom_type_2,
    )

class list_rom_parameter(Command):
    """
    Print all ROM-related paramters.
    """
    _version = '251'
    fluent_name = 'list-rom-parameter'
    _python_name = 'list_rom_parameter'

class parameter_names(StringList, AllowedValuesMixin):
    """
    Deleted parameter lists.
    """
    _version = '251'
    fluent_name = 'parameter-names'
    _python_name = 'parameter_names'

class delete_rom_parameter(Command):
    """
    Delete ROM-related paramters.
    
    Parameters
    ----------
        parameter_names : List
            Deleted parameter lists.
    """
    _version = '251'
    fluent_name = 'delete-rom-parameter'
    _python_name = 'delete_rom_parameter'
    argument_names = ['parameter_names']
    _child_classes = dict(
        parameter_names=parameter_names,
    )

class rom_data_creator_tool(Group):
    """
    Rom tool kit.
    """
    _version = '251'
    fluent_name = 'rom-data-creator-tool'
    _python_name = 'rom_data_creator_tool'
    child_names = ['rom_type', 'transient_setup', 'file_saving_frequency', 'joule_heat_parameter']
    command_names = ['add_rom_parameter', 'rom_data_creator', 'create_journal_file', 'list_rom_parameter', 'delete_rom_parameter']
    _child_classes = dict(
        rom_type=rom_type,
        transient_setup=transient_setup,
        file_saving_frequency=file_saving_frequency,
        joule_heat_parameter=joule_heat_parameter,
        add_rom_parameter=add_rom_parameter,
        rom_data_creator=rom_data_creator,
        create_journal_file=create_journal_file,
        list_rom_parameter=list_rom_parameter,
        delete_rom_parameter=delete_rom_parameter,
    )

class lti_folder_name(Filename, _InputFile):
    """
    LTI folder file folder name.
    """
    _version = '251'
    fluent_name = 'lti-folder-name'
    _python_name = 'lti_folder_name'

class user_config(Boolean):
    """
    User user-modified config file in ROM.
    """
    _version = '251'
    fluent_name = 'user-config'
    _python_name = 'user_config'

class min_order(Integer):
    """
    State space model min order in the ROM-generaor.
    """
    _version = '251'
    fluent_name = 'min-order'
    _python_name = 'min_order'

class max_order(Integer):
    """
    State space model mxn order in the ROM-generaor..
    """
    _version = '251'
    fluent_name = 'max-order'
    _python_name = 'max_order'

class rel_error(Real):
    """
    Target relative error in the ROM-generaor..
    """
    _version = '251'
    fluent_name = 'rel-error'
    _python_name = 'rel_error'

class tolerance_0th_order(Real):
    """
    Tolerance for 0-th order in the ROM-generaor..
    """
    _version = '251'
    fluent_name = 'tolerance-0th-order'
    _python_name = 'tolerance_0th_order'

class slope_method(String, AllowedValuesMixin):
    """
    Slope specification method in the ROM-generaor..
    """
    _version = '251'
    fluent_name = 'slope-method'
    _python_name = 'slope_method'

class run_rom_generation(Command):
    """
    Start LTI-ROM generation.
    """
    _version = '251'
    fluent_name = 'run-rom-generation'
    _python_name = 'run_rom_generation'

class lti_rom_generation(Group):
    """
    LTI-ROM Generator command.
    """
    _version = '251'
    fluent_name = 'lti-rom-generation'
    _python_name = 'lti_rom_generation'
    child_names = ['lti_folder_name', 'user_config', 'min_order', 'max_order', 'rel_error', 'tolerance_0th_order', 'slope_method']
    command_names = ['run_rom_generation']
    _child_classes = dict(
        lti_folder_name=lti_folder_name,
        user_config=user_config,
        min_order=min_order,
        max_order=max_order,
        rel_error=rel_error,
        tolerance_0th_order=tolerance_0th_order,
        slope_method=slope_method,
        run_rom_generation=run_rom_generation,
    )

class rom_tool_kit(Group):
    """
    ROM tool kits.
    """
    _version = '251'
    fluent_name = 'rom-tool-kit'
    _python_name = 'rom_tool_kit'
    child_names = ['rom_data_creator_tool', 'lti_rom_generation']
    _child_classes = dict(
        rom_data_creator_tool=rom_data_creator_tool,
        lti_rom_generation=lti_rom_generation,
    )

class module_case_file(Filename, _InputFile):
    """
    Module case name with its full path used in the pack builder.
    """
    _version = '251'
    fluent_name = 'module-case-file'
    _python_name = 'module_case_file'

class cold_plate_file(String):
    """
    Cold-plate file name with its full path.
    """
    _version = '251'
    fluent_name = 'cold-plate-file'
    _python_name = 'cold_plate_file'

class nci_face_list(StringList, AllowedValuesMixin):
    """
    Non-conformal interface list om the pack builder.
    """
    _version = '251'
    fluent_name = 'nci-face-list'
    _python_name = 'nci_face_list'

class translation_rotation_matrix_child(RealList):
    """
    'child_object_type' of translation_rotation_matrix.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'translation_rotation_matrix_child'

class translation_rotation_matrix(ListObject[translation_rotation_matrix_child]):
    """
    Data class to hold translation-rotation-matrix in the pack builder.
    """
    _version = '251'
    fluent_name = 'translation-rotation-matrix'
    _python_name = 'translation_rotation_matrix'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = translation_rotation_matrix_child

class file_name_1_9(Filename, _InputFile):
    """
    Module Location file name with its full path.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class read_location_file(Command):
    """
    Command object to read location file in the pack builder.
    
    Parameters
    ----------
        file_name_1 : str
            Module Location file name with its full path.
    """
    _version = '251'
    fluent_name = 'read-location-file'
    _python_name = 'read_location_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_9,
    )

class file_name_11(Filename, _OutputFile):
    """
    Write location information into a file in the pack builder.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class write_location_file(Command):
    """
    Command object to write location file in the pack builder.
    
    Parameters
    ----------
        file_name : str
            Write location information into a file in the pack builder.
    """
    _version = '251'
    fluent_name = 'write-location-file'
    _python_name = 'write_location_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_11,
    )

class construct_battery_pack(Command):
    """
    Construct battery pack.
    """
    _version = '251'
    fluent_name = 'construct-battery-pack'
    _python_name = 'construct_battery_pack'

class nci_pair_creation(Command):
    """
    Non-conformal Interface Matching in the pack builder.
    """
    _version = '251'
    fluent_name = 'nci-pair-creation'
    _python_name = 'nci_pair_creation'

class pack_builder(Group):
    """
    Battery pack builder setup.
    """
    _version = '251'
    fluent_name = 'pack-builder'
    _python_name = 'pack_builder'
    child_names = ['module_case_file', 'cold_plate_file', 'nci_face_list', 'translation_rotation_matrix']
    command_names = ['read_location_file', 'write_location_file', 'construct_battery_pack', 'nci_pair_creation']
    _child_classes = dict(
        module_case_file=module_case_file,
        cold_plate_file=cold_plate_file,
        nci_face_list=nci_face_list,
        translation_rotation_matrix=translation_rotation_matrix,
        read_location_file=read_location_file,
        write_location_file=write_location_file,
        construct_battery_pack=construct_battery_pack,
        nci_pair_creation=nci_pair_creation,
    )

class tool_kits(Group):
    """
    Battery model's tool kits.
    """
    _version = '251'
    fluent_name = 'tool-kits'
    _python_name = 'tool_kits'
    child_names = ['standalone_echem_model', 'parameter_estimation_tool', 'rom_tool_kit', 'pack_builder']
    _child_classes = dict(
        standalone_echem_model=standalone_echem_model,
        parameter_estimation_tool=parameter_estimation_tool,
        rom_tool_kit=rom_tool_kit,
        pack_builder=pack_builder,
    )

class init_battery_model(Command):
    """
    Initialize the battery model.
    """
    _version = '251'
    fluent_name = 'init-battery-model'
    _python_name = 'init_battery_model'

class battery(Group):
    """
    Battery model settings.
    """
    _version = '251'
    fluent_name = 'battery'
    _python_name = 'battery'
    child_names = ['enabled', 'solution_method', 'echem_model', 'zone_assignment', 'ntgk_model_settings', 'ecm_model_settings', 'p2d_model_settings', 'customized_echem_model_settings', 'cht_model_settings', 'fmu_model_settings', 'eload_condition', 'solution_option', 'advanced_models', 'tool_kits']
    command_names = ['init_battery_model']
    _child_classes = dict(
        enabled=enabled_22,
        solution_method=solution_method_1,
        echem_model=echem_model,
        zone_assignment=zone_assignment_1,
        ntgk_model_settings=ntgk_model_settings,
        ecm_model_settings=ecm_model_settings,
        p2d_model_settings=p2d_model_settings,
        customized_echem_model_settings=customized_echem_model_settings,
        cht_model_settings=cht_model_settings,
        fmu_model_settings=fmu_model_settings,
        eload_condition=eload_condition,
        solution_option=solution_option,
        advanced_models=advanced_models,
        tool_kits=tool_kits,
        init_battery_model=init_battery_model,
    )

class calculation_method(String, AllowedValuesMixin):
    """
    'calculation_method' child.
    """
    _version = '251'
    fluent_name = 'calculation-method'
    _python_name = 'calculation_method'

class htc(Group):
    """
    The heat transfer coeficient object.
    """
    _version = '251'
    fluent_name = 'htc'
    _python_name = 'htc'
    child_names = ['calculation_method']
    _child_classes = dict(
        calculation_method=calculation_method,
    )

class enable_sub_stepping(Boolean):
    """
    Enable or Disable sub stepping options for each coupling  steps.
    """
    _version = '251'
    fluent_name = 'enable-sub-stepping?'
    _python_name = 'enable_sub_stepping'

class num_sub_stepping_coupling_itr(Integer):
    """
    The number of substeps for each coupling iterations (default = 1).
    """
    _version = '251'
    fluent_name = 'num-sub-stepping-coupling-itr'
    _python_name = 'num_sub_stepping_coupling_itr'

class sc_enable_sub_stepping_option_per_coupling_step(Command):
    """
    Enable/disable sub stepping option per coupling step.
    
    Parameters
    ----------
        enable_sub_stepping : bool
            Enable or Disable sub stepping options for each coupling  steps.
        num_sub_stepping_coupling_itr : int
            The number of substeps for each coupling iterations (default = 1).
    """
    _version = '251'
    fluent_name = 'sc-enable-sub-stepping-option-per-coupling-step'
    _python_name = 'sc_enable_sub_stepping_option_per_coupling_step'
    argument_names = ['enable_sub_stepping', 'num_sub_stepping_coupling_itr']
    _child_classes = dict(
        enable_sub_stepping=enable_sub_stepping,
        num_sub_stepping_coupling_itr=num_sub_stepping_coupling_itr,
    )

class unsteady_statistics(Group):
    """
    The unsteady statistics object.
    """
    _version = '251'
    fluent_name = 'unsteady-statistics'
    _python_name = 'unsteady_statistics'
    command_names = ['sc_enable_sub_stepping_option_per_coupling_step']
    _child_classes = dict(
        sc_enable_sub_stepping_option_per_coupling_step=sc_enable_sub_stepping_option_per_coupling_step,
    )

class udm_index(Integer):
    """
    'udm_index' child.
    """
    _version = '251'
    fluent_name = 'udm-index'
    _python_name = 'udm_index'

class zone_names_6(StringList, AllowedValuesMixin):
    """
    'zone_names' child.
    """
    _version = '251'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'

class extensive(Boolean):
    """
    'extensive' child.
    """
    _version = '251'
    fluent_name = 'extensive?'
    _python_name = 'extensive'

class input(Boolean):
    """
    'input' child.
    """
    _version = '251'
    fluent_name = 'input?'
    _python_name = 'input'

class output_1(Boolean):
    """
    'output' child.
    """
    _version = '251'
    fluent_name = 'output?'
    _python_name = 'output'

class output_variable_name(String):
    """
    'output_variable_name' child.
    """
    _version = '251'
    fluent_name = 'output-variable-name'
    _python_name = 'output_variable_name'

class input_variable_name(String):
    """
    'input_variable_name' child.
    """
    _version = '251'
    fluent_name = 'input-variable-name'
    _python_name = 'input_variable_name'

class user_defined_coupling_variables_via_udm_child(Group):
    """
    'child_object_type' of user_defined_coupling_variables_via_udm.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'user_defined_coupling_variables_via_udm_child'
    child_names = ['udm_index', 'zone_names', 'extensive', 'input', 'output', 'output_variable_name', 'input_variable_name']
    _child_classes = dict(
        udm_index=udm_index,
        zone_names=zone_names_6,
        extensive=extensive,
        input=input,
        output=output_1,
        output_variable_name=output_variable_name,
        input_variable_name=input_variable_name,
    )

class user_defined_coupling_variables_via_udm(ListObject[user_defined_coupling_variables_via_udm_child]):
    """
    'user_defined_coupling_variables_via_udm' child.
    """
    _version = '251'
    fluent_name = 'user-defined-coupling-variables-via-udm'
    _python_name = 'user_defined_coupling_variables_via_udm'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = user_defined_coupling_variables_via_udm_child

class use_face_or_element_based_data_transfer(Boolean):
    """
    Enable/disable face based data transfer.
    """
    _version = '251'
    fluent_name = 'use-face-or-element-based-data-transfer?'
    _python_name = 'use_face_or_element_based_data_transfer'

class activate_flow_boundary_coupling_model(Boolean):
    """
    Activate/Deactivate of Flow Boundary Coupling Variables.
    """
    _version = '251'
    fluent_name = 'activate-flow-boundary-coupling-model?'
    _python_name = 'activate_flow_boundary_coupling_model'

class specify_zones_to_activate(StringList, AllowedValuesMixin):
    """
    Activate SC Flow Boundary Coupling zones.
    """
    _version = '251'
    fluent_name = 'specify-zones-to-activate'
    _python_name = 'specify_zones_to_activate'

class specify_zones_to_deactivate(StringList, AllowedValuesMixin):
    """
    Deactivate SC Flow Boundary Coupling zones.
    """
    _version = '251'
    fluent_name = 'specify-zones-to-deactivate'
    _python_name = 'specify_zones_to_deactivate'

class flow_boundary_coupling(Group):
    """
    Flow boundary coupling object.
    """
    _version = '251'
    fluent_name = 'flow-boundary-coupling'
    _python_name = 'flow_boundary_coupling'
    child_names = ['activate_flow_boundary_coupling_model', 'specify_zones_to_activate', 'specify_zones_to_deactivate']
    _child_classes = dict(
        activate_flow_boundary_coupling_model=activate_flow_boundary_coupling_model,
        specify_zones_to_activate=specify_zones_to_activate,
        specify_zones_to_deactivate=specify_zones_to_deactivate,
    )

class write_scp_file(Command):
    """
    Write fluent input scp file for sc.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'write-scp-file'
    _python_name = 'write_scp_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_2,
    )

class schost(String):
    """
    Sc solver host input.
    """
    _version = '251'
    fluent_name = 'schost'
    _python_name = 'schost'

class scport(Integer):
    """
    Sc solver port input.
    """
    _version = '251'
    fluent_name = 'scport'
    _python_name = 'scport'

class scname(String):
    """
    Sc solver name input.
    """
    _version = '251'
    fluent_name = 'scname'
    _python_name = 'scname'

class connect_parallel(Command):
    """
    System coupling connection status.
    
    Parameters
    ----------
        schost : str
            Sc solver host input.
        scport : int
            Sc solver port input.
        scname : str
            Sc solver name input.
    """
    _version = '251'
    fluent_name = 'connect-parallel'
    _python_name = 'connect_parallel'
    argument_names = ['schost', 'scport', 'scname']
    _child_classes = dict(
        schost=schost,
        scport=scport,
        scname=scname,
    )

class init_and_solve(Command):
    """
    System-coupling-solve-init-command.
    """
    _version = '251'
    fluent_name = 'init-and-solve'
    _python_name = 'init_and_solve'

class solve(Command):
    """
    System-coupling-solve-command.
    """
    _version = '251'
    fluent_name = 'solve'
    _python_name = 'solve'

class get_analysis_type(Query):
    """
    Get analysis type.
    """
    _version = '251'
    fluent_name = 'get-analysis-type'
    _python_name = 'get_analysis_type'

class get_all_regions(Query):
    """
    Get all supported sc regions.
    """
    _version = '251'
    fluent_name = 'get-all-regions'
    _python_name = 'get_all_regions'

class region_name(String, AllowedValuesMixin):
    """
    Sc region name.
    """
    _version = '251'
    fluent_name = 'region-name'
    _python_name = 'region_name'

class get_topology(Query):
    """
    Get topology.
    
    Parameters
    ----------
        region_name : str
            Sc region name.
    """
    _version = '251'
    fluent_name = 'get-topology'
    _python_name = 'get_topology'
    argument_names = ['region_name']
    _child_classes = dict(
        region_name=region_name,
    )

class region_name_1(String, AllowedValuesMixin):
    """
    Provide region name.
    """
    _version = '251'
    fluent_name = 'region-name'
    _python_name = 'region_name'

class get_input_vars(Query):
    """
    Get input variables for a given region.
    
    Parameters
    ----------
        region_name : str
            Provide region name.
    """
    _version = '251'
    fluent_name = 'get-input-vars'
    _python_name = 'get_input_vars'
    argument_names = ['region_name']
    _child_classes = dict(
        region_name=region_name_1,
    )

class get_output_vars(Query):
    """
    Get output variables for a given region.
    
    Parameters
    ----------
        region_name : str
            Provide region name.
    """
    _version = '251'
    fluent_name = 'get-output-vars'
    _python_name = 'get_output_vars'
    argument_names = ['region_name']
    _child_classes = dict(
        region_name=region_name_1,
    )

class variable_name(String, AllowedValuesMixin):
    """
    Provide variable name.
    """
    _version = '251'
    fluent_name = 'variable-name'
    _python_name = 'variable_name'

class is_extensive_var(Query):
    """
    Check if given variable is of extensive type.
    
    Parameters
    ----------
        variable_name : str
            Provide variable name.
    """
    _version = '251'
    fluent_name = 'is-extensive-var'
    _python_name = 'is_extensive_var'
    argument_names = ['variable_name']
    _child_classes = dict(
        variable_name=variable_name,
    )

class variable_name_1(String, AllowedValuesMixin):
    """
    Sc variable name.
    """
    _version = '251'
    fluent_name = 'variable-name'
    _python_name = 'variable_name'

class get_data_location(Query):
    """
    Get data location.
    
    Parameters
    ----------
        variable_name : str
            Sc variable name.
    """
    _version = '251'
    fluent_name = 'get-data-location'
    _python_name = 'get_data_location'
    argument_names = ['variable_name']
    _child_classes = dict(
        variable_name=variable_name_1,
    )

class get_tensor_type(Query):
    """
    Get tensor type for given selected variable.
    
    Parameters
    ----------
        variable_name : str
            Provide variable name.
    """
    _version = '251'
    fluent_name = 'get-tensor-type'
    _python_name = 'get_tensor_type'
    argument_names = ['variable_name']
    _child_classes = dict(
        variable_name=variable_name,
    )

class system_coupling(Group):
    """
    The system coupling model object.
    """
    _version = '251'
    fluent_name = 'system-coupling'
    _python_name = 'system_coupling'
    child_names = ['htc', 'unsteady_statistics', 'user_defined_coupling_variables_via_udm', 'use_face_or_element_based_data_transfer', 'flow_boundary_coupling']
    command_names = ['write_scp_file', 'connect_parallel', 'init_and_solve', 'solve']
    query_names = ['get_analysis_type', 'get_all_regions', 'get_topology', 'get_input_vars', 'get_output_vars', 'is_extensive_var', 'get_data_location', 'get_tensor_type']
    _child_classes = dict(
        htc=htc,
        unsteady_statistics=unsteady_statistics,
        user_defined_coupling_variables_via_udm=user_defined_coupling_variables_via_udm,
        use_face_or_element_based_data_transfer=use_face_or_element_based_data_transfer,
        flow_boundary_coupling=flow_boundary_coupling,
        write_scp_file=write_scp_file,
        connect_parallel=connect_parallel,
        init_and_solve=init_and_solve,
        solve=solve,
        get_analysis_type=get_analysis_type,
        get_all_regions=get_all_regions,
        get_topology=get_topology,
        get_input_vars=get_input_vars,
        get_output_vars=get_output_vars,
        is_extensive_var=is_extensive_var,
        get_data_location=get_data_location,
        get_tensor_type=get_tensor_type,
    )

class enabled_35(Boolean):
    """
    Enable/diable SOFC model.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class electrolyte_submodel_enabled(Boolean):
    """
    Enable/diable electrolyte conductivity submodel.
    """
    _version = '251'
    fluent_name = 'electrolyte-submodel-enabled'
    _python_name = 'electrolyte_submodel_enabled'

class vol_energy_enabled(Boolean):
    """
    Enable/disable volumetric energy source.
    """
    _version = '251'
    fluent_name = 'vol-energy-enabled'
    _python_name = 'vol_energy_enabled'

class surf_energy_enabled(Boolean):
    """
    Enable/disable surface energy source.
    """
    _version = '251'
    fluent_name = 'surf-energy-enabled'
    _python_name = 'surf_energy_enabled'

class knudsen_diff_enabled(Boolean):
    """
    Enable/disable Knudsen diffusion.
    """
    _version = '251'
    fluent_name = 'knudsen-diff-enabled'
    _python_name = 'knudsen_diff_enabled'

class species_enabled(Boolean):
    """
    Enable/disable species sources.
    """
    _version = '251'
    fluent_name = 'species-enabled'
    _python_name = 'species_enabled'

class electrolysis_mode_enabled(Boolean):
    """
    Enable/disable electrolysis mode.
    """
    _version = '251'
    fluent_name = 'electrolysis-mode-enabled'
    _python_name = 'electrolysis_mode_enabled'

class co_echemistry_disabled(Boolean):
    """
    Enable/disable CO electrochemistry.
    """
    _version = '251'
    fluent_name = 'co-echemistry-disabled'
    _python_name = 'co_echemistry_disabled'

class options_6(Group):
    """
    The model options settings.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['electrolyte_submodel_enabled', 'vol_energy_enabled', 'surf_energy_enabled', 'knudsen_diff_enabled', 'species_enabled', 'electrolysis_mode_enabled', 'co_echemistry_disabled']
    _child_classes = dict(
        electrolyte_submodel_enabled=electrolyte_submodel_enabled,
        vol_energy_enabled=vol_energy_enabled,
        surf_energy_enabled=surf_energy_enabled,
        knudsen_diff_enabled=knudsen_diff_enabled,
        species_enabled=species_enabled,
        electrolysis_mode_enabled=electrolysis_mode_enabled,
        co_echemistry_disabled=co_echemistry_disabled,
    )

class individual_bc_enabled(Boolean):
    """
    Electrical boundary condition in Boundary Conditions task page.
    """
    _version = '251'
    fluent_name = 'individual-bc-enabled'
    _python_name = 'individual_bc_enabled'

class converg_voltage_enabled(Boolean):
    """
    Enable/disable input of specified system voltage.
    """
    _version = '251'
    fluent_name = 'converg-voltage-enabled'
    _python_name = 'converg_voltage_enabled'

class system_voltage(Real):
    """
    Total system voltage.
    """
    _version = '251'
    fluent_name = 'system-voltage'
    _python_name = 'system_voltage'

class system_current(Real):
    """
    Total system current.
    """
    _version = '251'
    fluent_name = 'system-current'
    _python_name = 'system_current'

class leakage_current_density(Real):
    """
    Leakage current density.
    """
    _version = '251'
    fluent_name = 'leakage-current-density'
    _python_name = 'leakage_current_density'

class electrolyte_thickness_1(Real):
    """
    Electrolyte thickness.
    """
    _version = '251'
    fluent_name = 'electrolyte-thickness'
    _python_name = 'electrolyte_thickness'

class electrolyte_resistivity(Real):
    """
    Electrolyte resistivity.
    """
    _version = '251'
    fluent_name = 'electrolyte-resistivity'
    _python_name = 'electrolyte_resistivity'

class current_urf_1(Real):
    """
    Current under-relaxation factor.
    """
    _version = '251'
    fluent_name = 'current-urf'
    _python_name = 'current_urf'

class fcycle_amg_enabled(Boolean):
    """
    Apply F-Cycle for all equations.
    """
    _version = '251'
    fluent_name = 'fcycle-amg-enabled'
    _python_name = 'fcycle_amg_enabled'

class model_parameters(Group):
    """
    The model parameters settings.
    """
    _version = '251'
    fluent_name = 'model-parameters'
    _python_name = 'model_parameters'
    child_names = ['options', 'individual_bc_enabled', 'converg_voltage_enabled', 'system_voltage', 'system_current', 'leakage_current_density', 'electrolyte_thickness', 'electrolyte_resistivity', 'current_urf', 'fcycle_amg_enabled']
    _child_classes = dict(
        options=options_6,
        individual_bc_enabled=individual_bc_enabled,
        converg_voltage_enabled=converg_voltage_enabled,
        system_voltage=system_voltage,
        system_current=system_current,
        leakage_current_density=leakage_current_density,
        electrolyte_thickness=electrolyte_thickness_1,
        electrolyte_resistivity=electrolyte_resistivity,
        current_urf=current_urf_1,
        fcycle_amg_enabled=fcycle_amg_enabled,
    )

class temp_depend_anode_i0(Boolean):
    """
    Enable/disable anode temperature dependent exchange current density.
    """
    _version = '251'
    fluent_name = 'temp-depend-anode-i0'
    _python_name = 'temp_depend_anode_i0'

class temp_depend_cathode_i0(Boolean):
    """
    Enable/disable cathode temperature dependent exchange current density.
    """
    _version = '251'
    fluent_name = 'temp-depend-cathode-i0'
    _python_name = 'temp_depend_cathode_i0'

class anode_i0_2(Real):
    """
    Exchange current density I0 at anode.
    """
    _version = '251'
    fluent_name = 'anode-i0'
    _python_name = 'anode_i0'

class cathode_i0_2(Real):
    """
    Exchange current density I0 at cathode.
    """
    _version = '251'
    fluent_name = 'cathode-i0'
    _python_name = 'cathode_i0'

class a_anode_i0(Real):
    """
    Temperature dependent coefficient A at anode.
    """
    _version = '251'
    fluent_name = 'a-anode-i0'
    _python_name = 'a_anode_i0'

class b_anode_i0(Real):
    """
    Temperature dependent coefficient B at anode.
    """
    _version = '251'
    fluent_name = 'b-anode-i0'
    _python_name = 'b_anode_i0'

class a_cathode_i0(Real):
    """
    Temperature dependent coefficient A at cathode.
    """
    _version = '251'
    fluent_name = 'a-cathode-i0'
    _python_name = 'a_cathode_i0'

class b_cathode_i0(Real):
    """
    Temperature dependent coefficient B at cathode.
    """
    _version = '251'
    fluent_name = 'b-cathode-i0'
    _python_name = 'b_cathode_i0'

class exchange_current(Group):
    """
    The exchange current density settings.
    """
    _version = '251'
    fluent_name = 'exchange-current'
    _python_name = 'exchange_current'
    child_names = ['temp_depend_anode_i0', 'temp_depend_cathode_i0', 'anode_i0', 'cathode_i0', 'a_anode_i0', 'b_anode_i0', 'a_cathode_i0', 'b_cathode_i0']
    _child_classes = dict(
        temp_depend_anode_i0=temp_depend_anode_i0,
        temp_depend_cathode_i0=temp_depend_cathode_i0,
        anode_i0=anode_i0_2,
        cathode_i0=cathode_i0_2,
        a_anode_i0=a_anode_i0,
        b_anode_i0=b_anode_i0,
        a_cathode_i0=a_cathode_i0,
        b_cathode_i0=b_cathode_i0,
    )

class molef_ref_h2(Real):
    """
    H2 mole fraction reference value.
    """
    _version = '251'
    fluent_name = 'molef-ref-h2'
    _python_name = 'molef_ref_h2'

class molef_ref_o2(Real):
    """
    O2 mole fraction reference value.
    """
    _version = '251'
    fluent_name = 'molef-ref-o2'
    _python_name = 'molef_ref_o2'

class molef_ref_h2o(Real):
    """
    H2O mole fraction reference value.
    """
    _version = '251'
    fluent_name = 'molef-ref-h2o'
    _python_name = 'molef_ref_h2o'

class mole_fraction_ref(Group):
    """
    The mole fraction reference settings.
    """
    _version = '251'
    fluent_name = 'mole-fraction-ref'
    _python_name = 'mole_fraction_ref'
    child_names = ['molef_ref_h2', 'molef_ref_o2', 'molef_ref_h2o']
    _child_classes = dict(
        molef_ref_h2=molef_ref_h2,
        molef_ref_o2=molef_ref_o2,
        molef_ref_h2o=molef_ref_h2o,
    )

class exponent_h2(Real):
    """
    H2 concentration exponent.
    """
    _version = '251'
    fluent_name = 'exponent-h2'
    _python_name = 'exponent_h2'

class exponent_o2(Real):
    """
    O2 concentration exponent.
    """
    _version = '251'
    fluent_name = 'exponent-o2'
    _python_name = 'exponent_o2'

class exponent_h2o(Real):
    """
    H2O concentration exponent.
    """
    _version = '251'
    fluent_name = 'exponent-h2o'
    _python_name = 'exponent_h2o'

class concentration_exp(Group):
    """
    The concentration exponents settings.
    """
    _version = '251'
    fluent_name = 'concentration-exp'
    _python_name = 'concentration_exp'
    child_names = ['exponent_h2', 'exponent_o2', 'exponent_h2o']
    _child_classes = dict(
        exponent_h2=exponent_h2,
        exponent_o2=exponent_o2,
        exponent_h2o=exponent_h2o,
    )

class anode_alpha_a_2(Real):
    """
    Anode anodic symmetry factor.
    """
    _version = '251'
    fluent_name = 'anode-alpha-a'
    _python_name = 'anode_alpha_a'

class anode_alpha_b(Real):
    """
    Anode cathodic symmetry factor.
    """
    _version = '251'
    fluent_name = 'anode-alpha-b'
    _python_name = 'anode_alpha_b'

class cathode_alpha_a_2(Real):
    """
    Cathode anodic symmetry factor.
    """
    _version = '251'
    fluent_name = 'cathode-alpha-a'
    _python_name = 'cathode_alpha_a'

class cathode_alpha_b(Real):
    """
    Cathode cathodic symmetry factor.
    """
    _version = '251'
    fluent_name = 'cathode-alpha-b'
    _python_name = 'cathode_alpha_b'

class bv_symmetry_factor(Group):
    """
    The Butler-Volmer symmetriy factors settings.
    """
    _version = '251'
    fluent_name = 'bv-symmetry-factor'
    _python_name = 'bv_symmetry_factor'
    child_names = ['anode_alpha_a', 'anode_alpha_b', 'cathode_alpha_a', 'cathode_alpha_b']
    _child_classes = dict(
        anode_alpha_a=anode_alpha_a_2,
        anode_alpha_b=anode_alpha_b,
        cathode_alpha_a=cathode_alpha_a_2,
        cathode_alpha_b=cathode_alpha_b,
    )

class electrochemistry(Group):
    """
    The electrochemistry settings.
    """
    _version = '251'
    fluent_name = 'electrochemistry'
    _python_name = 'electrochemistry'
    child_names = ['exchange_current', 'mole_fraction_ref', 'concentration_exp', 'bv_symmetry_factor']
    _child_classes = dict(
        exchange_current=exchange_current,
        mole_fraction_ref=mole_fraction_ref,
        concentration_exp=concentration_exp,
        bv_symmetry_factor=bv_symmetry_factor,
    )

class anode_interface(StringList, AllowedValuesMixin):
    """
    Anode electrode interfaces with the electrolyte.
    """
    _version = '251'
    fluent_name = 'anode-interface'
    _python_name = 'anode_interface'

class cathode_interface(StringList, AllowedValuesMixin):
    """
    Cathode electrode interfaces with the electrolyte.
    """
    _version = '251'
    fluent_name = 'cathode-interface'
    _python_name = 'cathode_interface'

class tortuosity_interface_child(Group):
    """
    'child_object_type' of tortuosity_interface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'tortuosity_interface_child'
    child_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_7,
        value=value_9,
    )

class tortuosity_interface(ListObject[tortuosity_interface_child]):
    """
    Setup tortuosity zones and values.
    """
    _version = '251'
    fluent_name = 'tortuosity-interface'
    _python_name = 'tortuosity_interface'
    command_names = ['list_properties', 'resize', 'add_zone', 'list_zone', 'delete_zone']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
        add_zone=add_zone,
        list_zone=list_zone,
        delete_zone=delete_zone,
    )
    child_object_type = tortuosity_interface_child

class pore_size_interface_child(Group):
    """
    'child_object_type' of pore_size_interface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'pore_size_interface_child'
    child_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_7,
        value=value_9,
    )

class pore_size_interface(ListObject[pore_size_interface_child]):
    """
    Setup Knudsen diffusion zones and pore sizes.
    """
    _version = '251'
    fluent_name = 'pore-size-interface'
    _python_name = 'pore_size_interface'
    command_names = ['list_properties', 'resize', 'add_zone', 'list_zone', 'delete_zone']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
        add_zone=add_zone,
        list_zone=list_zone,
        delete_zone=delete_zone,
    )
    child_object_type = pore_size_interface_child

class electrolyte_porous(Group):
    """
    Electrolyte and porous zones settings.
    """
    _version = '251'
    fluent_name = 'electrolyte-porous'
    _python_name = 'electrolyte_porous'
    child_names = ['anode_interface', 'cathode_interface', 'tortuosity_interface', 'pore_size_interface']
    _child_classes = dict(
        anode_interface=anode_interface,
        cathode_interface=cathode_interface,
        tortuosity_interface=tortuosity_interface,
        pore_size_interface=pore_size_interface,
    )

class voltage_tap(StringList, AllowedValuesMixin):
    """
    Voltage tap surface.
    """
    _version = '251'
    fluent_name = 'voltage-tap'
    _python_name = 'voltage_tap'

class current_tap(StringList, AllowedValuesMixin):
    """
    Current tap surfaces.
    """
    _version = '251'
    fluent_name = 'current-tap'
    _python_name = 'current_tap'

class conductive_regions_child(Group):
    """
    'child_object_type' of conductive_regions.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'conductive_regions_child'
    child_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_7,
        value=value_9,
    )

class conductive_regions(ListObject[conductive_regions_child]):
    """
    Setup conducting zones and conductivities.
    """
    _version = '251'
    fluent_name = 'conductive-regions'
    _python_name = 'conductive_regions'
    command_names = ['list_properties', 'resize', 'add_zone', 'list_zone', 'delete_zone']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
        add_zone=add_zone,
        list_zone=list_zone,
        delete_zone=delete_zone,
    )
    child_object_type = conductive_regions_child

class contact_resistance_regions_child(Group):
    """
    'child_object_type' of contact_resistance_regions.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'contact_resistance_regions_child'
    child_names = ['zone_name', 'value']
    _child_classes = dict(
        zone_name=zone_name_7,
        value=value_9,
    )

class contact_resistance_regions(ListObject[contact_resistance_regions_child]):
    """
    Setup contact surfaces and resistance.
    """
    _version = '251'
    fluent_name = 'contact-resistance-regions'
    _python_name = 'contact_resistance_regions'
    command_names = ['list_properties', 'resize', 'add_zone', 'list_zone', 'delete_zone']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
        add_zone=add_zone,
        list_zone=list_zone,
        delete_zone=delete_zone,
    )
    child_object_type = contact_resistance_regions_child

class electric_field(Group):
    """
    Electric field model settings.
    """
    _version = '251'
    fluent_name = 'electric-field'
    _python_name = 'electric_field'
    child_names = ['voltage_tap', 'current_tap', 'conductive_regions', 'contact_resistance_regions']
    _child_classes = dict(
        voltage_tap=voltage_tap,
        current_tap=current_tap,
        conductive_regions=conductive_regions,
        contact_resistance_regions=contact_resistance_regions,
    )

class enabled_36(Boolean):
    """
    Enable/disable customized SOFC module.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class source_file(Filename, _InputFile):
    """
    UDF source file.
    """
    _version = '251'
    fluent_name = 'source-file'
    _python_name = 'source_file'

class create_customized_addon_lib(Command):
    """
    Create customized addon library.
    """
    _version = '251'
    fluent_name = 'create-customized-addon-lib'
    _python_name = 'create_customized_addon_lib'

class copy_user_source_file(Command):
    """
    Copy user modifiable file to the working directory.
    """
    _version = '251'
    fluent_name = 'copy-user-source-file'
    _python_name = 'copy_user_source_file'

class customized_udf(Group):
    """
    Customized UDFs settings.
    """
    _version = '251'
    fluent_name = 'customized-udf'
    _python_name = 'customized_udf'
    child_names = ['enabled', 'source_file']
    command_names = ['create_customized_addon_lib', 'copy_user_source_file']
    _child_classes = dict(
        enabled=enabled_36,
        source_file=source_file,
        create_customized_addon_lib=create_customized_addon_lib,
        copy_user_source_file=copy_user_source_file,
    )

class sofc(Group):
    """
    SOFC model settings.
    """
    _version = '251'
    fluent_name = 'sofc'
    _python_name = 'sofc'
    child_names = ['enabled', 'model_parameters', 'electrochemistry', 'electrolyte_porous', 'electric_field', 'customized_udf']
    _child_classes = dict(
        enabled=enabled_35,
        model_parameters=model_parameters,
        electrochemistry=electrochemistry,
        electrolyte_porous=electrolyte_porous,
        electric_field=electric_field,
        customized_udf=customized_udf,
    )

class enabled_37(Boolean):
    """
    Enable-fc-model?.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class joule_heat(Boolean):
    """
    Include Joule Heating?.
    """
    _version = '251'
    fluent_name = 'joule-heat'
    _python_name = 'joule_heat'

class reaction_heat_1(Boolean):
    """
    Include Reaction Heating?.
    """
    _version = '251'
    fluent_name = 'reaction-heat'
    _python_name = 'reaction_heat'

class electrochemistry_1(Boolean):
    """
    Enable Electrochemistry?.
    """
    _version = '251'
    fluent_name = 'electrochemistry'
    _python_name = 'electrochemistry'

class butlervolmer(Boolean):
    """
    Use Butler-Volmer Rate.
    """
    _version = '251'
    fluent_name = 'butlervolmer'
    _python_name = 'butlervolmer'

class multidiff(Boolean):
    """
    Enable Multi-Component Diffusion.
    """
    _version = '251'
    fluent_name = 'multidiff'
    _python_name = 'multidiff'

class anisotropic(Boolean):
    """
    Enable Anisotropic E-Conductivity in Porous Electrode.
    """
    _version = '251'
    fluent_name = 'anisotropic'
    _python_name = 'anisotropic'

class pconductivity(Boolean):
    """
    Enable Effective P-Conductivity in MEA.
    """
    _version = '251'
    fluent_name = 'pconductivity'
    _python_name = 'pconductivity'

class halfcell(Boolean):
    """
    Enable Half-Cell Potential.
    """
    _version = '251'
    fluent_name = 'halfcell'
    _python_name = 'halfcell'

class particlemodel(Boolean):
    """
    Enable Cathode Particle Model.
    """
    _version = '251'
    fluent_name = 'particlemodel'
    _python_name = 'particlemodel'

class liquid_phase(Boolean):
    """
    Enable Liquid Phase.
    """
    _version = '251'
    fluent_name = 'liquid-phase'
    _python_name = 'liquid_phase'

class liquid_pressure(Boolean):
    """
    Solve Liquid Pressure.
    """
    _version = '251'
    fluent_name = 'liquid-pressure'
    _python_name = 'liquid_pressure'

class liquid_in_channel(Boolean):
    """
    Compute Liquid in Channels.
    """
    _version = '251'
    fluent_name = 'liquid-in-channel'
    _python_name = 'liquid_in_channel'

class dynamic_head(Boolean):
    """
    Include Dynamic Head in Liquid Flux at GDL/Channel Interface.
    """
    _version = '251'
    fluent_name = 'dynamic-head'
    _python_name = 'dynamic_head'

class knudsen_diffusion(Boolean):
    """
    Enable Knudsen Diffusion.
    """
    _version = '251'
    fluent_name = 'knudsen-diffusion'
    _python_name = 'knudsen_diffusion'

class temp_jref(Boolean):
    """
    Use Temperature Dependent Jref.
    """
    _version = '251'
    fluent_name = 'temp-jref'
    _python_name = 'temp_jref'

class n2_crossover(Boolean):
    """
    Enable N2 Crossover.
    """
    _version = '251'
    fluent_name = 'n2-crossover'
    _python_name = 'n2_crossover'

class ice_phase(Boolean):
    """
    Enable Ice Phase.
    """
    _version = '251'
    fluent_name = 'ice-phase'
    _python_name = 'ice_phase'

class dissovled_urf(Real):
    """
    Dissolved<->Liquid/Vapor Source Under-Relaxation.
    """
    _version = '251'
    fluent_name = 'dissovled-urf'
    _python_name = 'dissovled_urf'

class osmotic_urf(Real):
    """
    Osmotic Drag Source Under-Relaxation.
    """
    _version = '251'
    fluent_name = 'osmotic-urf'
    _python_name = 'osmotic_urf'

class phasechange_urf(Real):
    """
    Liquid<->Vapor Source Under-Relaxation.
    """
    _version = '251'
    fluent_name = 'phasechange-urf'
    _python_name = 'phasechange_urf'

class liquidremoval_urf(Real):
    """
    GDL Liquid Removal Under-Relaxation.
    """
    _version = '251'
    fluent_name = 'liquidremoval-urf'
    _python_name = 'liquidremoval_urf'

class auto_amg(Boolean):
    """
    Enable Automatic F-Cycle for All Equations.
    """
    _version = '251'
    fluent_name = 'auto-amg'
    _python_name = 'auto_amg'

class wdiff_model(String, AllowedValuesMixin):
    """
    Dissolved Water Diffusion Model.
    """
    _version = '251'
    fluent_name = 'wdiff-model'
    _python_name = 'wdiff_model'

class options_7(Group):
    """
    Model options.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['joule_heat', 'reaction_heat', 'electrochemistry', 'butlervolmer', 'multidiff', 'anisotropic', 'pconductivity', 'halfcell', 'particlemodel', 'liquid_phase', 'liquid_pressure', 'liquid_in_channel', 'dynamic_head', 'knudsen_diffusion', 'temp_jref', 'n2_crossover', 'ice_phase', 'dissovled_urf', 'osmotic_urf', 'phasechange_urf', 'liquidremoval_urf', 'auto_amg', 'wdiff_model', 'bc_type', 'tot_voltage', 'tot_current']
    _child_classes = dict(
        joule_heat=joule_heat,
        reaction_heat=reaction_heat_1,
        electrochemistry=electrochemistry_1,
        butlervolmer=butlervolmer,
        multidiff=multidiff,
        anisotropic=anisotropic,
        pconductivity=pconductivity,
        halfcell=halfcell,
        particlemodel=particlemodel,
        liquid_phase=liquid_phase,
        liquid_pressure=liquid_pressure,
        liquid_in_channel=liquid_in_channel,
        dynamic_head=dynamic_head,
        knudsen_diffusion=knudsen_diffusion,
        temp_jref=temp_jref,
        n2_crossover=n2_crossover,
        ice_phase=ice_phase,
        dissovled_urf=dissovled_urf,
        osmotic_urf=osmotic_urf,
        phasechange_urf=phasechange_urf,
        liquidremoval_urf=liquidremoval_urf,
        auto_amg=auto_amg,
        wdiff_model=wdiff_model,
        bc_type=bc_type,
        tot_voltage=tot_voltage,
        tot_current=tot_current,
    )

class leak_current(Real):
    """
    Leakage Current Density (A/m2).
    """
    _version = '251'
    fluent_name = 'leak-current'
    _python_name = 'leak_current'

class std_temp(Real):
    """
    Standard State Temperature (K).
    """
    _version = '251'
    fluent_name = 'std-temp'
    _python_name = 'std_temp'

class h2_diff(Real):
    """
    H2 Reference Diffusivity (m2/s).
    """
    _version = '251'
    fluent_name = 'h2-diff'
    _python_name = 'h2_diff'

class o2_diff(Real):
    """
    O2 Reference Diffusivity (m2/s).
    """
    _version = '251'
    fluent_name = 'o2-diff'
    _python_name = 'o2_diff'

class h2o_diff(Real):
    """
    H2O Reference Diffusivity (m2/s).
    """
    _version = '251'
    fluent_name = 'h2o-diff'
    _python_name = 'h2o_diff'

class other_diff(Real):
    """
    Other Species Reference Diffusivity (m2/s).
    """
    _version = '251'
    fluent_name = 'other-diff'
    _python_name = 'other_diff'

class gas_diff_exp(Real):
    """
    Exponent for Gas Diffusion.
    """
    _version = '251'
    fluent_name = 'gas-diff-exp'
    _python_name = 'gas_diff_exp'

class transfer_currrent_exp(Real):
    """
    Exponent for Transfer Current.
    """
    _version = '251'
    fluent_name = 'transfer-currrent-exp'
    _python_name = 'transfer_currrent_exp'

class rk_exp(Real):
    """
    Exponent for Relative Permeability.
    """
    _version = '251'
    fluent_name = 'rk-exp'
    _python_name = 'rk_exp'

class liquid_cov_exp(Real):
    """
    Exponent for Ionomer Liquid Coverage.
    """
    _version = '251'
    fluent_name = 'liquid-cov-exp'
    _python_name = 'liquid_cov_exp'

class liquid_diss_const(Real):
    """
    Liquid<->Dissolved Phase Change Constant.
    """
    _version = '251'
    fluent_name = 'liquid-diss-const'
    _python_name = 'liquid_diss_const'

class liquid_rho(Real):
    """
    Liquid Density.
    """
    _version = '251'
    fluent_name = 'liquid-rho'
    _python_name = 'liquid_rho'

class liquid_k(Real):
    """
    Liquid Thermal Conductivity.
    """
    _version = '251'
    fluent_name = 'liquid-k'
    _python_name = 'liquid_k'

class upper_liq_pre(Real):
    """
    Upper Limit of Liquid Pressure.
    """
    _version = '251'
    fluent_name = 'upper-liq-pre'
    _python_name = 'upper_liq_pre'

class lower_liq_pre(Real):
    """
    Lower Limit of Liquid Pressure.
    """
    _version = '251'
    fluent_name = 'lower-liq-pre'
    _python_name = 'lower_liq_pre'

class liq_diff(Real):
    """
    Liquid Diffusivity in Channels.
    """
    _version = '251'
    fluent_name = 'liq-diff'
    _python_name = 'liq_diff'

class velocity_ratio(Real):
    """
    Ratio of V_liq/V_gas in Channels.
    """
    _version = '251'
    fluent_name = 'velocity-ratio'
    _python_name = 'velocity_ratio'

class gas_diss_const(Real):
    """
    Dissolved<->Gas Phase Change Constant.
    """
    _version = '251'
    fluent_name = 'gas-diss-const'
    _python_name = 'gas_diss_const'

class osmotic_coeff(Real):
    """
    Modification to Osmotic Drag.
    """
    _version = '251'
    fluent_name = 'osmotic-coeff'
    _python_name = 'osmotic_coeff'

class lam_a1(Real):
    """
    Equilibrium Water Content at a=1.
    """
    _version = '251'
    fluent_name = 'lam-a1'
    _python_name = 'lam_a1'

class lam_s1(Real):
    """
    Equilibrium Water Content at s=1.
    """
    _version = '251'
    fluent_name = 'lam-s1'
    _python_name = 'lam_s1'

class n2_cross_coeff(Real):
    """
    N2 Crossover Factor.
    """
    _version = '251'
    fluent_name = 'n2-cross-coeff'
    _python_name = 'n2_cross_coeff'

class desublimation_rate(Real):
    """
    Desublimation Rate.
    """
    _version = '251'
    fluent_name = 'desublimation-rate'
    _python_name = 'desublimation_rate'

class sublimation_rate(Real):
    """
    Sublimation Rate.
    """
    _version = '251'
    fluent_name = 'sublimation-rate'
    _python_name = 'sublimation_rate'

class parameters_2(Group):
    """
    Model parameters.
    """
    _version = '251'
    fluent_name = 'parameters'
    _python_name = 'parameters'
    child_names = ['anode_jref', 'anode_cref', 'anode_exp', 'anode_ex_a', 'anode_ex_c', 'cathode_jref', 'cathode_cref', 'cathode_exp', 'cathode_ex_a', 'cathode_ex_c', 'leak_current', 'anode_stde', 'cathode_stde', 'std_temp', 'std_pre', 'open_voltage', 'anode_entro', 'cathode_entro', 'h2_diff', 'o2_diff', 'h2o_diff', 'other_diff', 'gas_diff_exp', 'transfer_currrent_exp', 'rk_exp', 'liquid_cov_exp', 'liquid_diss_const', 'liquid_rho', 'liquid_k', 'upper_liq_pre', 'lower_liq_pre', 'liq_diff', 'velocity_ratio', 'gas_diss_const', 'osmotic_coeff', 'lam_a1', 'lam_s1', 'n2_cross_coeff', 'desublimation_rate', 'sublimation_rate']
    _child_classes = dict(
        anode_jref=anode_jref,
        anode_cref=anode_cref,
        anode_exp=anode_exp,
        anode_ex_a=anode_ex_a,
        anode_ex_c=anode_ex_c,
        cathode_jref=cathode_jref,
        cathode_cref=cathode_cref,
        cathode_exp=cathode_exp,
        cathode_ex_a=cathode_ex_a,
        cathode_ex_c=cathode_ex_c,
        leak_current=leak_current,
        anode_stde=anode_stde,
        cathode_stde=cathode_stde,
        std_temp=std_temp,
        std_pre=std_pre,
        open_voltage=open_voltage,
        anode_entro=anode_entro,
        cathode_entro=cathode_entro,
        h2_diff=h2_diff,
        o2_diff=o2_diff,
        h2o_diff=h2o_diff,
        other_diff=other_diff,
        gas_diff_exp=gas_diff_exp,
        transfer_currrent_exp=transfer_currrent_exp,
        rk_exp=rk_exp,
        liquid_cov_exp=liquid_cov_exp,
        liquid_diss_const=liquid_diss_const,
        liquid_rho=liquid_rho,
        liquid_k=liquid_k,
        upper_liq_pre=upper_liq_pre,
        lower_liq_pre=lower_liq_pre,
        liq_diff=liq_diff,
        velocity_ratio=velocity_ratio,
        gas_diss_const=gas_diss_const,
        osmotic_coeff=osmotic_coeff,
        lam_a1=lam_a1,
        lam_s1=lam_s1,
        n2_cross_coeff=n2_cross_coeff,
        desublimation_rate=desublimation_rate,
        sublimation_rate=sublimation_rate,
    )

class anode_fc_condensation(Real):
    """
    Condensation Rate Constant for Channel.
    """
    _version = '251'
    fluent_name = 'anode-fc-condensation'
    _python_name = 'anode_fc_condensation'

class anode_fc_evaporation(Real):
    """
    Evaporation Rate Constant for Channel.
    """
    _version = '251'
    fluent_name = 'anode-fc-evaporation'
    _python_name = 'anode_fc_evaporation'

class anode_fc_zone_1(Group):
    """
    Up anode flow channel.
    """
    _version = '251'
    fluent_name = 'anode-fc-zone'
    _python_name = 'anode_fc_zone'
    child_names = ['anode_fc_zone_list', 'anode_fc_condensation', 'anode_fc_evaporation']
    _child_classes = dict(
        anode_fc_zone_list=anode_fc_zone_list,
        anode_fc_condensation=anode_fc_condensation,
        anode_fc_evaporation=anode_fc_evaporation,
    )

class anode_gdl_zone_list(StringList, AllowedValuesMixin):
    """
    Anode gas diffusion layer cell zones.
    """
    _version = '251'
    fluent_name = 'anode-gdl-zone-list'
    _python_name = 'anode_gdl_zone_list'

class anode_gdl_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'anode-gdl-update'
    _python_name = 'anode_gdl_update'

class anode_gdl_material(String, AllowedValuesMixin):
    """
    Anode gas diffusion layer material.
    """
    _version = '251'
    fluent_name = 'anode-gdl-material'
    _python_name = 'anode_gdl_material'

class anode_gdl_porosity(Real):
    """
    Porosity.
    """
    _version = '251'
    fluent_name = 'anode-gdl-porosity'
    _python_name = 'anode_gdl_porosity'

class anode_gdl_permeability(Real):
    """
    Absolute Permeability (m2).
    """
    _version = '251'
    fluent_name = 'anode-gdl-permeability'
    _python_name = 'anode_gdl_permeability'

class anode_gdl_angle(Real):
    """
    H-phobic Contact Angle (>90 degree).
    """
    _version = '251'
    fluent_name = 'anode-gdl-angle'
    _python_name = 'anode_gdl_angle'

class anode_gdl_angle_hi(Real):
    """
    H-philic Contact Angle (<90 degree).
    """
    _version = '251'
    fluent_name = 'anode-gdl-angle-hi'
    _python_name = 'anode_gdl_angle_hi'

class anode_gdl_fraction(Real):
    """
    H-philic Pore Fraction.
    """
    _version = '251'
    fluent_name = 'anode-gdl-fraction'
    _python_name = 'anode_gdl_fraction'

class anode_gdl_waterremoval(Real):
    """
    GDL Water Removal Coef. (s/m).
    """
    _version = '251'
    fluent_name = 'anode-gdl-waterremoval'
    _python_name = 'anode_gdl_waterremoval'

class anode_gdl_brug_coeff(Real):
    """
    Bruggeman Coefficient.
    """
    _version = '251'
    fluent_name = 'anode-gdl-brug-coeff'
    _python_name = 'anode_gdl_brug_coeff'

class anode_gdl_a(Real):
    """
    GDL Js Coefficient_a.
    """
    _version = '251'
    fluent_name = 'anode-gdl-a'
    _python_name = 'anode_gdl_a'

class anode_gdl_b(Real):
    """
    GDL Js Coefficient_b.
    """
    _version = '251'
    fluent_name = 'anode-gdl-b'
    _python_name = 'anode_gdl_b'

class anode_gdl_c(Real):
    """
    GDL Js Coefficient_c.
    """
    _version = '251'
    fluent_name = 'anode-gdl-c'
    _python_name = 'anode_gdl_c'

class anode_gdl_condensation(Real):
    """
    Condensation Rate Constant for GDL.
    """
    _version = '251'
    fluent_name = 'anode-gdl-condensation'
    _python_name = 'anode_gdl_condensation'

class anode_gdl_evaporation(Real):
    """
    Evaporation Rate Constant for GDL.
    """
    _version = '251'
    fluent_name = 'anode-gdl-evaporation'
    _python_name = 'anode_gdl_evaporation'

class anode_gdl_poresize(Real):
    """
    Pore Size [m] for GDL.
    """
    _version = '251'
    fluent_name = 'anode-gdl-poresize'
    _python_name = 'anode_gdl_poresize'

class anode_gdl_zone(Group):
    """
    Up anode GDL.
    """
    _version = '251'
    fluent_name = 'anode-gdl-zone'
    _python_name = 'anode_gdl_zone'
    child_names = ['anode_gdl_zone_list', 'anode_gdl_update', 'anode_gdl_material', 'anode_gdl_porosity', 'anode_gdl_permeability', 'anode_gdl_angle', 'anode_gdl_angle_hi', 'anode_gdl_fraction', 'anode_gdl_waterremoval', 'anode_gdl_brug_coeff', 'anode_gdl_a', 'anode_gdl_b', 'anode_gdl_c', 'anode_gdl_condensation', 'anode_gdl_evaporation', 'anode_gdl_poresize']
    _child_classes = dict(
        anode_gdl_zone_list=anode_gdl_zone_list,
        anode_gdl_update=anode_gdl_update,
        anode_gdl_material=anode_gdl_material,
        anode_gdl_porosity=anode_gdl_porosity,
        anode_gdl_permeability=anode_gdl_permeability,
        anode_gdl_angle=anode_gdl_angle,
        anode_gdl_angle_hi=anode_gdl_angle_hi,
        anode_gdl_fraction=anode_gdl_fraction,
        anode_gdl_waterremoval=anode_gdl_waterremoval,
        anode_gdl_brug_coeff=anode_gdl_brug_coeff,
        anode_gdl_a=anode_gdl_a,
        anode_gdl_b=anode_gdl_b,
        anode_gdl_c=anode_gdl_c,
        anode_gdl_condensation=anode_gdl_condensation,
        anode_gdl_evaporation=anode_gdl_evaporation,
        anode_gdl_poresize=anode_gdl_poresize,
    )

class anode_mpl_zone_list(StringList, AllowedValuesMixin):
    """
    Anode micro porous layer cell zones.
    """
    _version = '251'
    fluent_name = 'anode-mpl-zone-list'
    _python_name = 'anode_mpl_zone_list'

class anode_mpl_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'anode-mpl-update'
    _python_name = 'anode_mpl_update'

class anode_mpl_material(String, AllowedValuesMixin):
    """
    Anode micro porous layer material.
    """
    _version = '251'
    fluent_name = 'anode-mpl-material'
    _python_name = 'anode_mpl_material'

class anode_mpl_porosity(Real):
    """
    Porosity.
    """
    _version = '251'
    fluent_name = 'anode-mpl-porosity'
    _python_name = 'anode_mpl_porosity'

class anode_mpl_permeability(Real):
    """
    Absolute Permeability (m2).
    """
    _version = '251'
    fluent_name = 'anode-mpl-permeability'
    _python_name = 'anode_mpl_permeability'

class anode_mpl_angle(Real):
    """
    H-phobic Contact Angle (>90 degree).
    """
    _version = '251'
    fluent_name = 'anode-mpl-angle'
    _python_name = 'anode_mpl_angle'

class anode_mpl_angle_hi(Real):
    """
    H-philic Contact Angle (<90 degree).
    """
    _version = '251'
    fluent_name = 'anode-mpl-angle-hi'
    _python_name = 'anode_mpl_angle_hi'

class anode_mpl_fraction(Real):
    """
    H-philic Pore Fraction.
    """
    _version = '251'
    fluent_name = 'anode-mpl-fraction'
    _python_name = 'anode_mpl_fraction'

class anode_mpl_brug_coeff(Real):
    """
    Bruggeman Coefficient.
    """
    _version = '251'
    fluent_name = 'anode-mpl-brug-coeff'
    _python_name = 'anode_mpl_brug_coeff'

class anode_mpl_a(Real):
    """
    MPL Js Coefficient_a.
    """
    _version = '251'
    fluent_name = 'anode-mpl-a'
    _python_name = 'anode_mpl_a'

class anode_mpl_b(Real):
    """
    MPL Js Coefficient_b.
    """
    _version = '251'
    fluent_name = 'anode-mpl-b'
    _python_name = 'anode_mpl_b'

class anode_mpl_c(Real):
    """
    MPL Js Coefficient_c.
    """
    _version = '251'
    fluent_name = 'anode-mpl-c'
    _python_name = 'anode_mpl_c'

class anode_mpl_condensation(Real):
    """
    Condensation Rate Constant for MPL.
    """
    _version = '251'
    fluent_name = 'anode-mpl-condensation'
    _python_name = 'anode_mpl_condensation'

class anode_mpl_evaporation(Real):
    """
    Evaporation Rate Constant for MPL.
    """
    _version = '251'
    fluent_name = 'anode-mpl-evaporation'
    _python_name = 'anode_mpl_evaporation'

class anode_mpl_poresize(Real):
    """
    Pore Size [m] for MPL.
    """
    _version = '251'
    fluent_name = 'anode-mpl-poresize'
    _python_name = 'anode_mpl_poresize'

class anode_mpl_zone(Group):
    """
    Up anode MPL.
    """
    _version = '251'
    fluent_name = 'anode-mpl-zone'
    _python_name = 'anode_mpl_zone'
    child_names = ['anode_mpl_zone_list', 'anode_mpl_update', 'anode_mpl_material', 'anode_mpl_porosity', 'anode_mpl_permeability', 'anode_mpl_angle', 'anode_mpl_angle_hi', 'anode_mpl_fraction', 'anode_mpl_brug_coeff', 'anode_mpl_a', 'anode_mpl_b', 'anode_mpl_c', 'anode_mpl_condensation', 'anode_mpl_evaporation', 'anode_mpl_poresize']
    _child_classes = dict(
        anode_mpl_zone_list=anode_mpl_zone_list,
        anode_mpl_update=anode_mpl_update,
        anode_mpl_material=anode_mpl_material,
        anode_mpl_porosity=anode_mpl_porosity,
        anode_mpl_permeability=anode_mpl_permeability,
        anode_mpl_angle=anode_mpl_angle,
        anode_mpl_angle_hi=anode_mpl_angle_hi,
        anode_mpl_fraction=anode_mpl_fraction,
        anode_mpl_brug_coeff=anode_mpl_brug_coeff,
        anode_mpl_a=anode_mpl_a,
        anode_mpl_b=anode_mpl_b,
        anode_mpl_c=anode_mpl_c,
        anode_mpl_condensation=anode_mpl_condensation,
        anode_mpl_evaporation=anode_mpl_evaporation,
        anode_mpl_poresize=anode_mpl_poresize,
    )

class anode_ca_zone_list(StringList, AllowedValuesMixin):
    """
    Anode catalyst layer cell zones.
    """
    _version = '251'
    fluent_name = 'anode-ca-zone-list'
    _python_name = 'anode_ca_zone_list'

class anode_ca_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'anode-ca-update'
    _python_name = 'anode_ca_update'

class anode_ca_material(String, AllowedValuesMixin):
    """
    Anode catalyst layer material.
    """
    _version = '251'
    fluent_name = 'anode-ca-material'
    _python_name = 'anode_ca_material'

class anode_ca_porosity(Real):
    """
    Porosity.
    """
    _version = '251'
    fluent_name = 'anode-ca-porosity'
    _python_name = 'anode_ca_porosity'

class anode_ca_permeability(Real):
    """
    Absolute Permeability (m2).
    """
    _version = '251'
    fluent_name = 'anode-ca-permeability'
    _python_name = 'anode_ca_permeability'

class anode_ca_sv_ratio(Real):
    """
    Surface-to-Volume Ratio (1/m).
    """
    _version = '251'
    fluent_name = 'anode-ca-sv-ratio'
    _python_name = 'anode_ca_sv_ratio'

class anode_ca_alpha(Real):
    """
    P-Conduction Coefficient.
    """
    _version = '251'
    fluent_name = 'anode-ca-alpha'
    _python_name = 'anode_ca_alpha'

class anode_ca_beta(Real):
    """
    P-Conduction Exponent.
    """
    _version = '251'
    fluent_name = 'anode-ca-beta'
    _python_name = 'anode_ca_beta'

class anode_ca_ion_vof(Real):
    """
    Ionomer Volume Fraction.
    """
    _version = '251'
    fluent_name = 'anode-ca-ion-vof'
    _python_name = 'anode_ca_ion_vof'

class anode_ca_act(Real):
    """
    Activation Energy for P-Conductivity(k).
    """
    _version = '251'
    fluent_name = 'anode-ca-act'
    _python_name = 'anode_ca_act'

class anode_ca_tortuosity(Real):
    """
    Ionomer Tortuosity.
    """
    _version = '251'
    fluent_name = 'anode-ca-tortuosity'
    _python_name = 'anode_ca_tortuosity'

class anode_ca_jref_act(Real):
    """
    Activation Energy for J_ref(j/kmol).
    """
    _version = '251'
    fluent_name = 'anode-ca-jref-act'
    _python_name = 'anode_ca_jref_act'

class anode_ca_jref_t(Real):
    """
    Reference Temperature for J_ref (k).
    """
    _version = '251'
    fluent_name = 'anode-ca-jref-t'
    _python_name = 'anode_ca_jref_t'

class anode_ca_angle(Real):
    """
    H-phobic Contact Angle (>90 degree).
    """
    _version = '251'
    fluent_name = 'anode-ca-angle'
    _python_name = 'anode_ca_angle'

class anode_ca_angle_hi(Real):
    """
    H-philic Contact Angle (<90 degree).
    """
    _version = '251'
    fluent_name = 'anode-ca-angle-hi'
    _python_name = 'anode_ca_angle_hi'

class anode_ca_brug_coeff(Real):
    """
    Bruggeman Coefficient.
    """
    _version = '251'
    fluent_name = 'anode-ca-brug-coeff'
    _python_name = 'anode_ca_brug_coeff'

class anode_ca_fraction(Real):
    """
    H-philic Pore Fraction.
    """
    _version = '251'
    fluent_name = 'anode-ca-fraction'
    _python_name = 'anode_ca_fraction'

class anode_ca_a(Real):
    """
    TPB Js Coefficient_a.
    """
    _version = '251'
    fluent_name = 'anode-ca-a'
    _python_name = 'anode_ca_a'

class anode_ca_b(Real):
    """
    TPB Js Coefficient_b.
    """
    _version = '251'
    fluent_name = 'anode-ca-b'
    _python_name = 'anode_ca_b'

class anode_ca_c(Real):
    """
    TPB Js Coefficient_c.
    """
    _version = '251'
    fluent_name = 'anode-ca-c'
    _python_name = 'anode_ca_c'

class anode_ca_condensation(Real):
    """
    Condensation Rate Constant for Catalyst.
    """
    _version = '251'
    fluent_name = 'anode-ca-condensation'
    _python_name = 'anode_ca_condensation'

class anode_ca_evaporation(Real):
    """
    Evaporation Rate Constant for Catalyst.
    """
    _version = '251'
    fluent_name = 'anode-ca-evaporation'
    _python_name = 'anode_ca_evaporation'

class anode_ca_poresize(Real):
    """
    Pore Size [m] for Catalyst.
    """
    _version = '251'
    fluent_name = 'anode-ca-poresize'
    _python_name = 'anode_ca_poresize'

class anode_ca_zone(Group):
    """
    Up anode catalyst layer.
    """
    _version = '251'
    fluent_name = 'anode-ca-zone'
    _python_name = 'anode_ca_zone'
    child_names = ['anode_ca_zone_list', 'anode_ca_update', 'anode_ca_material', 'anode_ca_porosity', 'anode_ca_permeability', 'anode_ca_sv_ratio', 'anode_ca_alpha', 'anode_ca_beta', 'anode_ca_ion_vof', 'anode_ca_act', 'anode_ca_tortuosity', 'anode_ca_jref_act', 'anode_ca_jref_t', 'anode_ca_angle', 'anode_ca_angle_hi', 'anode_ca_brug_coeff', 'anode_ca_fraction', 'anode_ca_a', 'anode_ca_b', 'anode_ca_c', 'anode_ca_condensation', 'anode_ca_evaporation', 'anode_ca_poresize']
    _child_classes = dict(
        anode_ca_zone_list=anode_ca_zone_list,
        anode_ca_update=anode_ca_update,
        anode_ca_material=anode_ca_material,
        anode_ca_porosity=anode_ca_porosity,
        anode_ca_permeability=anode_ca_permeability,
        anode_ca_sv_ratio=anode_ca_sv_ratio,
        anode_ca_alpha=anode_ca_alpha,
        anode_ca_beta=anode_ca_beta,
        anode_ca_ion_vof=anode_ca_ion_vof,
        anode_ca_act=anode_ca_act,
        anode_ca_tortuosity=anode_ca_tortuosity,
        anode_ca_jref_act=anode_ca_jref_act,
        anode_ca_jref_t=anode_ca_jref_t,
        anode_ca_angle=anode_ca_angle,
        anode_ca_angle_hi=anode_ca_angle_hi,
        anode_ca_brug_coeff=anode_ca_brug_coeff,
        anode_ca_fraction=anode_ca_fraction,
        anode_ca_a=anode_ca_a,
        anode_ca_b=anode_ca_b,
        anode_ca_c=anode_ca_c,
        anode_ca_condensation=anode_ca_condensation,
        anode_ca_evaporation=anode_ca_evaporation,
        anode_ca_poresize=anode_ca_poresize,
    )

class anode_1(Group):
    """
    Up anode.
    """
    _version = '251'
    fluent_name = 'anode'
    _python_name = 'anode'
    child_names = ['anode_cc_zone', 'anode_fc_zone', 'anode_gdl_zone', 'anode_mpl_zone', 'anode_ca_zone']
    _child_classes = dict(
        anode_cc_zone=anode_cc_zone,
        anode_fc_zone=anode_fc_zone_1,
        anode_gdl_zone=anode_gdl_zone,
        anode_mpl_zone=anode_mpl_zone,
        anode_ca_zone=anode_ca_zone,
    )

class mem_zone_list_1(StringList, AllowedValuesMixin):
    """
    Membrane cell zones.
    """
    _version = '251'
    fluent_name = 'mem-zone-list'
    _python_name = 'mem_zone_list'

class mem_eqv_weight(Real):
    """
    Equivalent Weight (kg/kmol).
    """
    _version = '251'
    fluent_name = 'mem-eqv-weight'
    _python_name = 'mem_eqv_weight'

class mem_alpha(Real):
    """
    Protonic Conduction Coefficient.
    """
    _version = '251'
    fluent_name = 'mem-alpha'
    _python_name = 'mem_alpha'

class mem_beta(Real):
    """
    Protonic Conduction Exponent.
    """
    _version = '251'
    fluent_name = 'mem-beta'
    _python_name = 'mem_beta'

class mem_diff_corr(Real):
    """
    Water Diffusion Correction.
    """
    _version = '251'
    fluent_name = 'mem-diff-corr'
    _python_name = 'mem_diff_corr'

class mem_permeability(Real):
    """
    Absolute Permeability (m2).
    """
    _version = '251'
    fluent_name = 'mem-permeability'
    _python_name = 'mem_permeability'

class mem_act(Real):
    """
    Activation Energy for Proton Conductivity (k).
    """
    _version = '251'
    fluent_name = 'mem-act'
    _python_name = 'mem_act'

class membrane(Group):
    """
    Up membrane.
    """
    _version = '251'
    fluent_name = 'membrane'
    _python_name = 'membrane'
    child_names = ['mem_zone_list', 'mem_update', 'mem_material', 'mem_eqv_weight', 'mem_alpha', 'mem_beta', 'mem_diff_corr', 'mem_permeability', 'mem_act']
    _child_classes = dict(
        mem_zone_list=mem_zone_list_1,
        mem_update=mem_update,
        mem_material=mem_material,
        mem_eqv_weight=mem_eqv_weight,
        mem_alpha=mem_alpha,
        mem_beta=mem_beta,
        mem_diff_corr=mem_diff_corr,
        mem_permeability=mem_permeability,
        mem_act=mem_act,
    )

class cathode_fc_condensation(Real):
    """
    Condensation Rate Constant for Channel.
    """
    _version = '251'
    fluent_name = 'cathode-fc-condensation'
    _python_name = 'cathode_fc_condensation'

class cathode_fc_evaporation(Real):
    """
    Evaporation Rate Constant for Channel.
    """
    _version = '251'
    fluent_name = 'cathode-fc-evaporation'
    _python_name = 'cathode_fc_evaporation'

class cathode_fc_zone_1(Group):
    """
    Up cathode flow channel.
    """
    _version = '251'
    fluent_name = 'cathode-fc-zone'
    _python_name = 'cathode_fc_zone'
    child_names = ['cathode_fc_zone_list', 'cathode_fc_condensation', 'cathode_fc_evaporation']
    _child_classes = dict(
        cathode_fc_zone_list=cathode_fc_zone_list,
        cathode_fc_condensation=cathode_fc_condensation,
        cathode_fc_evaporation=cathode_fc_evaporation,
    )

class cathode_gdl_zone_list(StringList, AllowedValuesMixin):
    """
    Cathode gas diffusion layer cell zones.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-zone-list'
    _python_name = 'cathode_gdl_zone_list'

class cathode_gdl_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-update'
    _python_name = 'cathode_gdl_update'

class cathode_gdl_material(String, AllowedValuesMixin):
    """
    Cathode gas diffusion layer material.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-material'
    _python_name = 'cathode_gdl_material'

class cathode_gdl_porosity(Real):
    """
    Porosity.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-porosity'
    _python_name = 'cathode_gdl_porosity'

class cathode_gdl_permeability(Real):
    """
    Absolute Permeability (m2).
    """
    _version = '251'
    fluent_name = 'cathode-gdl-permeability'
    _python_name = 'cathode_gdl_permeability'

class cathode_gdl_angle(Real):
    """
    H-phobic Contact Angle (>90 degree).
    """
    _version = '251'
    fluent_name = 'cathode-gdl-angle'
    _python_name = 'cathode_gdl_angle'

class cathode_gdl_angle_hi(Real):
    """
    H-philic Contact Angle (<90 degree).
    """
    _version = '251'
    fluent_name = 'cathode-gdl-angle-hi'
    _python_name = 'cathode_gdl_angle_hi'

class cathode_gdl_fraction(Real):
    """
    H-philic Pore Fraction.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-fraction'
    _python_name = 'cathode_gdl_fraction'

class cathode_gdl_brug_coeff(Real):
    """
    Bruggeman Coefficient.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-brug-coeff'
    _python_name = 'cathode_gdl_brug_coeff'

class cathode_gdl_waterremoval(Real):
    """
    GDL Water Removal Coef. (s/m).
    """
    _version = '251'
    fluent_name = 'cathode-gdl-waterremoval'
    _python_name = 'cathode_gdl_waterremoval'

class cathode_gdl_a(Real):
    """
    GDL Js Coefficient_a.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-a'
    _python_name = 'cathode_gdl_a'

class cathode_gdl_b(Real):
    """
    GDL Js Coefficient_b.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-b'
    _python_name = 'cathode_gdl_b'

class cathode_gdl_c(Real):
    """
    GDL Js Coefficient_c.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-c'
    _python_name = 'cathode_gdl_c'

class cathode_gdl_condensation(Real):
    """
    Condensation Rate Constant for GDL.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-condensation'
    _python_name = 'cathode_gdl_condensation'

class cathode_gdl_evaporation(Real):
    """
    Evaporation Rate Constant for GDL.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-evaporation'
    _python_name = 'cathode_gdl_evaporation'

class cathode_gdl_poresize(Real):
    """
    Pore Size [m] for GDL.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-poresize'
    _python_name = 'cathode_gdl_poresize'

class cathode_gdl_zone(Group):
    """
    Up cathode GDL.
    """
    _version = '251'
    fluent_name = 'cathode-gdl-zone'
    _python_name = 'cathode_gdl_zone'
    child_names = ['cathode_gdl_zone_list', 'cathode_gdl_update', 'cathode_gdl_material', 'cathode_gdl_porosity', 'cathode_gdl_permeability', 'cathode_gdl_angle', 'cathode_gdl_angle_hi', 'cathode_gdl_fraction', 'cathode_gdl_brug_coeff', 'cathode_gdl_waterremoval', 'cathode_gdl_a', 'cathode_gdl_b', 'cathode_gdl_c', 'cathode_gdl_condensation', 'cathode_gdl_evaporation', 'cathode_gdl_poresize']
    _child_classes = dict(
        cathode_gdl_zone_list=cathode_gdl_zone_list,
        cathode_gdl_update=cathode_gdl_update,
        cathode_gdl_material=cathode_gdl_material,
        cathode_gdl_porosity=cathode_gdl_porosity,
        cathode_gdl_permeability=cathode_gdl_permeability,
        cathode_gdl_angle=cathode_gdl_angle,
        cathode_gdl_angle_hi=cathode_gdl_angle_hi,
        cathode_gdl_fraction=cathode_gdl_fraction,
        cathode_gdl_brug_coeff=cathode_gdl_brug_coeff,
        cathode_gdl_waterremoval=cathode_gdl_waterremoval,
        cathode_gdl_a=cathode_gdl_a,
        cathode_gdl_b=cathode_gdl_b,
        cathode_gdl_c=cathode_gdl_c,
        cathode_gdl_condensation=cathode_gdl_condensation,
        cathode_gdl_evaporation=cathode_gdl_evaporation,
        cathode_gdl_poresize=cathode_gdl_poresize,
    )

class cathode_mpl_zone_list(StringList, AllowedValuesMixin):
    """
    Cathode micro porous layer cell zones.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-zone-list'
    _python_name = 'cathode_mpl_zone_list'

class cathode_mpl_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-update'
    _python_name = 'cathode_mpl_update'

class cathode_mpl_material(String, AllowedValuesMixin):
    """
    Cathode micro porous layer material.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-material'
    _python_name = 'cathode_mpl_material'

class cathode_mpl_porosity(Real):
    """
    Porosity.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-porosity'
    _python_name = 'cathode_mpl_porosity'

class cathode_mpl_permeability(Real):
    """
    Absolute Permeability (m2).
    """
    _version = '251'
    fluent_name = 'cathode-mpl-permeability'
    _python_name = 'cathode_mpl_permeability'

class cathode_mpl_angle(Real):
    """
    H-phobic Contact Angle (>90 degree).
    """
    _version = '251'
    fluent_name = 'cathode-mpl-angle'
    _python_name = 'cathode_mpl_angle'

class cathode_mpl_angle_hi(Real):
    """
    H-philic Contact Angle (<90 degree).
    """
    _version = '251'
    fluent_name = 'cathode-mpl-angle-hi'
    _python_name = 'cathode_mpl_angle_hi'

class cathode_mpl_fraction(Real):
    """
    H-philic Pore Fraction.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-fraction'
    _python_name = 'cathode_mpl_fraction'

class cathode_mpl_brug_coeff(Real):
    """
    Bruggeman Coefficient.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-brug-coeff'
    _python_name = 'cathode_mpl_brug_coeff'

class cathode_mpl_a(Real):
    """
    MPL Js Coefficient_a.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-a'
    _python_name = 'cathode_mpl_a'

class cathode_mpl_b(Real):
    """
    MPL Js Coefficient_b.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-b'
    _python_name = 'cathode_mpl_b'

class cathode_mpl_c(Real):
    """
    MPL Js Coefficient_c.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-c'
    _python_name = 'cathode_mpl_c'

class cathode_mpl_condensation(Real):
    """
    Condensation Rate Constant for MPL.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-condensation'
    _python_name = 'cathode_mpl_condensation'

class cathode_mpl_evaporation(Real):
    """
    Evaporation Rate Constant for MPL.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-evaporation'
    _python_name = 'cathode_mpl_evaporation'

class cathode_mpl_poresize(Real):
    """
    Pore Size [m] for MPL.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-poresize'
    _python_name = 'cathode_mpl_poresize'

class cathode_mpl_zone(Group):
    """
    Up cathode MPL.
    """
    _version = '251'
    fluent_name = 'cathode-mpl-zone'
    _python_name = 'cathode_mpl_zone'
    child_names = ['cathode_mpl_zone_list', 'cathode_mpl_update', 'cathode_mpl_material', 'cathode_mpl_porosity', 'cathode_mpl_permeability', 'cathode_mpl_angle', 'cathode_mpl_angle_hi', 'cathode_mpl_fraction', 'cathode_mpl_brug_coeff', 'cathode_mpl_a', 'cathode_mpl_b', 'cathode_mpl_c', 'cathode_mpl_condensation', 'cathode_mpl_evaporation', 'cathode_mpl_poresize']
    _child_classes = dict(
        cathode_mpl_zone_list=cathode_mpl_zone_list,
        cathode_mpl_update=cathode_mpl_update,
        cathode_mpl_material=cathode_mpl_material,
        cathode_mpl_porosity=cathode_mpl_porosity,
        cathode_mpl_permeability=cathode_mpl_permeability,
        cathode_mpl_angle=cathode_mpl_angle,
        cathode_mpl_angle_hi=cathode_mpl_angle_hi,
        cathode_mpl_fraction=cathode_mpl_fraction,
        cathode_mpl_brug_coeff=cathode_mpl_brug_coeff,
        cathode_mpl_a=cathode_mpl_a,
        cathode_mpl_b=cathode_mpl_b,
        cathode_mpl_c=cathode_mpl_c,
        cathode_mpl_condensation=cathode_mpl_condensation,
        cathode_mpl_evaporation=cathode_mpl_evaporation,
        cathode_mpl_poresize=cathode_mpl_poresize,
    )

class cathode_ca_zone_list(StringList, AllowedValuesMixin):
    """
    Cathode catalyst layer cell zones.
    """
    _version = '251'
    fluent_name = 'cathode-ca-zone-list'
    _python_name = 'cathode_ca_zone_list'

class cathode_ca_update(Boolean):
    """
    Use Collective Boundary Condition.
    """
    _version = '251'
    fluent_name = 'cathode-ca-update'
    _python_name = 'cathode_ca_update'

class cathode_ca_material(String, AllowedValuesMixin):
    """
    Cathode catalyst layer material.
    """
    _version = '251'
    fluent_name = 'cathode-ca-material'
    _python_name = 'cathode_ca_material'

class cathode_ca_porosity(Real):
    """
    Porosity.
    """
    _version = '251'
    fluent_name = 'cathode-ca-porosity'
    _python_name = 'cathode_ca_porosity'

class cathode_ca_permeability(Real):
    """
    Absolute Permeability (m2).
    """
    _version = '251'
    fluent_name = 'cathode-ca-permeability'
    _python_name = 'cathode_ca_permeability'

class cathode_ca_sv_ratio(Real):
    """
    Surface-to-Volume Ratio (1/m).
    """
    _version = '251'
    fluent_name = 'cathode-ca-sv-ratio'
    _python_name = 'cathode_ca_sv_ratio'

class cathode_ca_alpha(Real):
    """
    P-Conduction Coefficient.
    """
    _version = '251'
    fluent_name = 'cathode-ca-alpha'
    _python_name = 'cathode_ca_alpha'

class cathode_ca_beta(Real):
    """
    P-Conduction Exponent.
    """
    _version = '251'
    fluent_name = 'cathode-ca-beta'
    _python_name = 'cathode_ca_beta'

class cathode_ca_ion_vof(Real):
    """
    Ionomer Volume Fraction.
    """
    _version = '251'
    fluent_name = 'cathode-ca-ion-vof'
    _python_name = 'cathode_ca_ion_vof'

class cathode_ca_act(Real):
    """
    Activation Energy for P-Conductivity(k).
    """
    _version = '251'
    fluent_name = 'cathode-ca-act'
    _python_name = 'cathode_ca_act'

class cathode_ca_tortuosity(Real):
    """
    Ionomer Tortuosity.
    """
    _version = '251'
    fluent_name = 'cathode-ca-tortuosity'
    _python_name = 'cathode_ca_tortuosity'

class cathode_ca_jref_act(Real):
    """
    Activation Energy for J_ref(j/kmol).
    """
    _version = '251'
    fluent_name = 'cathode-ca-jref-act'
    _python_name = 'cathode_ca_jref_act'

class cathode_ca_jref_t(Real):
    """
    Reference Temperature for J_ref (k).
    """
    _version = '251'
    fluent_name = 'cathode-ca-jref-t'
    _python_name = 'cathode_ca_jref_t'

class cathode_ca_radius(Real):
    """
    Radius of Cathode Particle(m).
    """
    _version = '251'
    fluent_name = 'cathode-ca-radius'
    _python_name = 'cathode_ca_radius'

class cathode_ca_resistance(Real):
    """
    Ionomer Resistanc/(s/m).
    """
    _version = '251'
    fluent_name = 'cathode-ca-resistance'
    _python_name = 'cathode_ca_resistance'

class cathode_ca_kwdw(Real):
    """
    Product of O2 Solubility and Diffusivity(m2/s).
    """
    _version = '251'
    fluent_name = 'cathode-ca-kwdw'
    _python_name = 'cathode_ca_kwdw'

class cathode_ca_angle(Real):
    """
    H-phobic Contact Angle (>90 degree).
    """
    _version = '251'
    fluent_name = 'cathode-ca-angle'
    _python_name = 'cathode_ca_angle'

class cathode_ca_angle_hi(Real):
    """
    H-philic Contact Angle (<90 degree).
    """
    _version = '251'
    fluent_name = 'cathode-ca-angle-hi'
    _python_name = 'cathode_ca_angle_hi'

class cathode_ca_fraction(Real):
    """
    H-philic Pore Fraction.
    """
    _version = '251'
    fluent_name = 'cathode-ca-fraction'
    _python_name = 'cathode_ca_fraction'

class cathode_ca_brug_coeff(Real):
    """
    Bruggeman Coefficient.
    """
    _version = '251'
    fluent_name = 'cathode-ca-brug-coeff'
    _python_name = 'cathode_ca_brug_coeff'

class cathode_ca_a(Real):
    """
    TPB Js Coefficient_a.
    """
    _version = '251'
    fluent_name = 'cathode-ca-a'
    _python_name = 'cathode_ca_a'

class cathode_ca_b(Real):
    """
    TPB Js Coefficient_b.
    """
    _version = '251'
    fluent_name = 'cathode-ca-b'
    _python_name = 'cathode_ca_b'

class cathode_ca_c(Real):
    """
    TPB Js Coefficient_c.
    """
    _version = '251'
    fluent_name = 'cathode-ca-c'
    _python_name = 'cathode_ca_c'

class cathode_ca_condensation(Real):
    """
    Condensation Rate Constant for Catalyst.
    """
    _version = '251'
    fluent_name = 'cathode-ca-condensation'
    _python_name = 'cathode_ca_condensation'

class cathode_ca_evaporation(Real):
    """
    Evaporation Rate Constant for Catalyst.
    """
    _version = '251'
    fluent_name = 'cathode-ca-evaporation'
    _python_name = 'cathode_ca_evaporation'

class cathode_ca_poresize(Real):
    """
    Pore Size [m] for Catalyst.
    """
    _version = '251'
    fluent_name = 'cathode-ca-poresize'
    _python_name = 'cathode_ca_poresize'

class cathode_ca_zone(Group):
    """
    Up cathode catalyst layer.
    """
    _version = '251'
    fluent_name = 'cathode-ca-zone'
    _python_name = 'cathode_ca_zone'
    child_names = ['cathode_ca_zone_list', 'cathode_ca_update', 'cathode_ca_material', 'cathode_ca_porosity', 'cathode_ca_permeability', 'cathode_ca_sv_ratio', 'cathode_ca_alpha', 'cathode_ca_beta', 'cathode_ca_ion_vof', 'cathode_ca_act', 'cathode_ca_tortuosity', 'cathode_ca_jref_act', 'cathode_ca_jref_t', 'cathode_ca_radius', 'cathode_ca_resistance', 'cathode_ca_kwdw', 'cathode_ca_angle', 'cathode_ca_angle_hi', 'cathode_ca_fraction', 'cathode_ca_brug_coeff', 'cathode_ca_a', 'cathode_ca_b', 'cathode_ca_c', 'cathode_ca_condensation', 'cathode_ca_evaporation', 'cathode_ca_poresize']
    _child_classes = dict(
        cathode_ca_zone_list=cathode_ca_zone_list,
        cathode_ca_update=cathode_ca_update,
        cathode_ca_material=cathode_ca_material,
        cathode_ca_porosity=cathode_ca_porosity,
        cathode_ca_permeability=cathode_ca_permeability,
        cathode_ca_sv_ratio=cathode_ca_sv_ratio,
        cathode_ca_alpha=cathode_ca_alpha,
        cathode_ca_beta=cathode_ca_beta,
        cathode_ca_ion_vof=cathode_ca_ion_vof,
        cathode_ca_act=cathode_ca_act,
        cathode_ca_tortuosity=cathode_ca_tortuosity,
        cathode_ca_jref_act=cathode_ca_jref_act,
        cathode_ca_jref_t=cathode_ca_jref_t,
        cathode_ca_radius=cathode_ca_radius,
        cathode_ca_resistance=cathode_ca_resistance,
        cathode_ca_kwdw=cathode_ca_kwdw,
        cathode_ca_angle=cathode_ca_angle,
        cathode_ca_angle_hi=cathode_ca_angle_hi,
        cathode_ca_fraction=cathode_ca_fraction,
        cathode_ca_brug_coeff=cathode_ca_brug_coeff,
        cathode_ca_a=cathode_ca_a,
        cathode_ca_b=cathode_ca_b,
        cathode_ca_c=cathode_ca_c,
        cathode_ca_condensation=cathode_ca_condensation,
        cathode_ca_evaporation=cathode_ca_evaporation,
        cathode_ca_poresize=cathode_ca_poresize,
    )

class cathode_1(Group):
    """
    Up cathode.
    """
    _version = '251'
    fluent_name = 'cathode'
    _python_name = 'cathode'
    child_names = ['cathode_cc_zone', 'cathode_fc_zone', 'cathode_gdl_zone', 'cathode_mpl_zone', 'cathode_ca_zone']
    _child_classes = dict(
        cathode_cc_zone=cathode_cc_zone,
        cathode_fc_zone=cathode_fc_zone_1,
        cathode_gdl_zone=cathode_gdl_zone,
        cathode_mpl_zone=cathode_mpl_zone,
        cathode_ca_zone=cathode_ca_zone,
    )

class enabled_38(Boolean):
    """
    Enable Coolant Channels.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class coolant_zone_list(StringList, AllowedValuesMixin):
    """
    Coolant cell zones.
    """
    _version = '251'
    fluent_name = 'coolant-zone-list'
    _python_name = 'coolant_zone_list'

class coolant_density(Real):
    """
    Coolant Density (kg/m3).
    """
    _version = '251'
    fluent_name = 'coolant-density'
    _python_name = 'coolant_density'

class coolant_channel(Group):
    """
    Up coolant channel.
    """
    _version = '251'
    fluent_name = 'coolant-channel'
    _python_name = 'coolant_channel'
    child_names = ['enabled', 'coolant_zone_list', 'coolant_density']
    _child_classes = dict(
        enabled=enabled_38,
        coolant_zone_list=coolant_zone_list,
        coolant_density=coolant_density,
    )

class list_fc_units(Command):
    """
    List fuel cell units.
    """
    _version = '251'
    fluent_name = 'list-fc-units'
    _python_name = 'list_fc_units'

class fcu_name(String):
    """
    Name of fcu.
    """
    _version = '251'
    fluent_name = 'fcu-name'
    _python_name = 'fcu_name'

class cellzones_2(StringList, AllowedValuesMixin):
    """
    Cell zones.
    """
    _version = '251'
    fluent_name = 'cellzones'
    _python_name = 'cellzones'

class stack_create_fcu(Command):
    """
    Create stack units.
    
    Parameters
    ----------
        fcu_name : str
            Name of fcu.
        cellzones : List
            Cell zones.
    """
    _version = '251'
    fluent_name = 'stack-create-fcu'
    _python_name = 'stack_create_fcu'
    argument_names = ['fcu_name', 'cellzones']
    _child_classes = dict(
        fcu_name=fcu_name,
        cellzones=cellzones_2,
    )

class stack_modify_fcu(Command):
    """
    Modify stack units.
    
    Parameters
    ----------
        fcu_name : str
            Name of fcu.
        cellzones : List
            Cell zones.
    """
    _version = '251'
    fluent_name = 'stack-modify-fcu'
    _python_name = 'stack_modify_fcu'
    argument_names = ['fcu_name', 'cellzones']
    _child_classes = dict(
        fcu_name=fcu_name,
        cellzones=cellzones_2,
    )

class stack_delete_fcu(Command):
    """
    Delete stack units.
    
    Parameters
    ----------
        fcu_name : str
            Name of fcu.
    """
    _version = '251'
    fluent_name = 'stack-delete-fcu'
    _python_name = 'stack_delete_fcu'
    argument_names = ['fcu_name']
    _child_classes = dict(
        fcu_name=fcu_name,
    )

class reset(Boolean):
    """
    Reset stack setup from saved value.
    """
    _version = '251'
    fluent_name = 'reset'
    _python_name = 'reset'

class stack_reset_fcu(Command):
    """
    Reset stack units.
    
    Parameters
    ----------
        reset : bool
            Reset stack setup from saved value.
    """
    _version = '251'
    fluent_name = 'stack-reset-fcu'
    _python_name = 'stack_reset_fcu'
    argument_names = ['reset']
    _child_classes = dict(
        reset=reset,
    )

class submit(Boolean):
    """
    Submit new stack setup.
    """
    _version = '251'
    fluent_name = 'submit'
    _python_name = 'submit'

class stack_submit_fcu(Command):
    """
    Apply stack units settings.
    
    Parameters
    ----------
        submit : bool
            Submit new stack setup.
    """
    _version = '251'
    fluent_name = 'stack-submit-fcu'
    _python_name = 'stack_submit_fcu'
    argument_names = ['submit']
    _child_classes = dict(
        submit=submit,
    )

class stack_management(Group):
    """
    Stack management.
    """
    _version = '251'
    fluent_name = 'stack-management'
    _python_name = 'stack_management'
    command_names = ['list_fc_units', 'stack_create_fcu', 'stack_modify_fcu', 'stack_delete_fcu', 'stack_reset_fcu', 'stack_submit_fcu']
    _child_classes = dict(
        list_fc_units=list_fc_units,
        stack_create_fcu=stack_create_fcu,
        stack_modify_fcu=stack_modify_fcu,
        stack_delete_fcu=stack_delete_fcu,
        stack_reset_fcu=stack_reset_fcu,
        stack_submit_fcu=stack_submit_fcu,
    )

class enabled_39(Boolean):
    """
    Enable Predefined Workflow.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class num_init_iter(Integer):
    """
    Number of initial iterations.
    """
    _version = '251'
    fluent_name = 'num-init-iter'
    _python_name = 'num_init_iter'

class predefined_workflow(Group):
    """
    Use predefined workflow.
    """
    _version = '251'
    fluent_name = 'predefined-workflow'
    _python_name = 'predefined_workflow'
    child_names = ['enabled', 'num_init_iter']
    _child_classes = dict(
        enabled=enabled_39,
        num_init_iter=num_init_iter,
    )

class advanced_1(Group):
    """
    Advanced settings.
    """
    _version = '251'
    fluent_name = 'advanced'
    _python_name = 'advanced'
    child_names = ['contact_resis', 'coolant_channel', 'stack_management', 'predefined_workflow']
    _child_classes = dict(
        contact_resis=contact_resis,
        coolant_channel=coolant_channel,
        stack_management=stack_management,
        predefined_workflow=predefined_workflow,
    )

class electrolyte_area(Real):
    """
    Projected Area of Electrolyte (m2).
    """
    _version = '251'
    fluent_name = 'electrolyte-area'
    _python_name = 'electrolyte_area'

class monitor_enable(Boolean):
    """
    Create Monitors?.
    """
    _version = '251'
    fluent_name = 'monitor-enable'
    _python_name = 'monitor_enable'

class monitor_frequency(Integer):
    """
    Monitor Frequency.
    """
    _version = '251'
    fluent_name = 'monitor-frequency'
    _python_name = 'monitor_frequency'

class report_1(Group):
    """
    Report settings.
    """
    _version = '251'
    fluent_name = 'report'
    _python_name = 'report'
    child_names = ['electrolyte_area', 'monitor_enable', 'monitor_frequency']
    _child_classes = dict(
        electrolyte_area=electrolyte_area,
        monitor_enable=monitor_enable,
        monitor_frequency=monitor_frequency,
    )

class pemfc(Group):
    """
    PEMFC model settings.
    """
    _version = '251'
    fluent_name = 'pemfc'
    _python_name = 'pemfc'
    child_names = ['enabled', 'options', 'parameters', 'anode', 'membrane', 'cathode', 'electrical_tab', 'advanced', 'report']
    _child_classes = dict(
        enabled=enabled_37,
        options=options_7,
        parameters=parameters_2,
        anode=anode_1,
        membrane=membrane,
        cathode=cathode_1,
        electrical_tab=electrical_tab,
        advanced=advanced_1,
        report=report_1,
    )

class models(Group):
    """
    'models' child.
    """
    _version = '251'
    fluent_name = 'models'
    _python_name = 'models'
    child_names = ['multiphase', 'energy', 'viscous', 'radiation', 'species', 'discrete_phase', 'virtual_blade_model', 'optics', 'structure', 'ablation', 'echemistry', 'battery', 'system_coupling', 'sofc', 'pemfc']
    _child_classes = dict(
        multiphase=multiphase,
        energy=energy,
        viscous=viscous,
        radiation=radiation,
        species=species,
        discrete_phase=discrete_phase,
        virtual_blade_model=virtual_blade_model,
        optics=optics,
        structure=structure,
        ablation=ablation,
        echemistry=echemistry,
        battery=battery,
        system_coupling=system_coupling,
        sofc=sofc,
        pemfc=pemfc,
    )

class database_type(String, AllowedValuesMixin):
    """
    Material database.
    """
    _version = '251'
    fluent_name = 'database-type'
    _python_name = 'database_type'

class type_2(String, AllowedValuesMixin):
    """
    'type' child.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'

class formula(String, AllowedValuesMixin):
    """
    'formula' child.
    """
    _version = '251'
    fluent_name = 'formula'
    _python_name = 'formula'

class new_name_1(String):
    """
    Material with same name exist. Please select new material name.
    """
    _version = '251'
    fluent_name = 'new-name'
    _python_name = 'new_name'

class new_formula(String):
    """
    Material with same chemical formula exist. Please select new chemical formula.
    """
    _version = '251'
    fluent_name = 'new-formula'
    _python_name = 'new_formula'

class copy_by_formula(Command):
    """
    Copy database material by formula.
    
    Parameters
    ----------
        type : str
            'type' child.
        formula : str
            'formula' child.
        new_name : str
            Material with same name exist. Please select new material name.
        new_formula : str
            Material with same chemical formula exist. Please select new chemical formula.
    """
    _version = '251'
    fluent_name = 'copy-by-formula'
    _python_name = 'copy_by_formula'
    argument_names = ['type', 'formula', 'new_name', 'new_formula']
    _child_classes = dict(
        type=type_2,
        formula=formula,
        new_name=new_name_1,
        new_formula=new_formula,
    )

class name_7(String, AllowedValuesMixin):
    """
    'name' child.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class copy_by_name(Command):
    """
    Copy database material by name.
    
    Parameters
    ----------
        type : str
            'type' child.
        name : str
            'name' child.
        new_name : str
            Material with same name exist. Please select new material name.
        new_formula : str
            Material with same chemical formula exist. Please select new chemical formula.
    """
    _version = '251'
    fluent_name = 'copy-by-name'
    _python_name = 'copy_by_name'
    argument_names = ['type', 'name', 'new_name', 'new_formula']
    _child_classes = dict(
        type=type_2,
        name=name_7,
        new_name=new_name_1,
        new_formula=new_formula,
    )

class list_materials_1(Command):
    """
    List database materials.
    """
    _version = '251'
    fluent_name = 'list-materials'
    _python_name = 'list_materials'

class list_properties_3(Command):
    """
    List database material properties.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '251'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    argument_names = ['name']
    _child_classes = dict(
        name=name_7,
    )

class database(Group):
    """
    Material database.
    """
    _version = '251'
    fluent_name = 'database'
    _python_name = 'database'
    child_names = ['database_type']
    command_names = ['copy_by_formula', 'copy_by_name', 'list_materials', 'list_properties']
    _child_classes = dict(
        database_type=database_type,
        copy_by_formula=copy_by_formula,
        copy_by_name=copy_by_name,
        list_materials=list_materials_1,
        list_properties=list_properties_3,
    )

class name_8(String):
    """
    Material name.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class chemical_formula(String):
    """
    Material chemical formula.
    """
    _version = '251'
    fluent_name = 'chemical-formula'
    _python_name = 'chemical_formula'

class option_26(String, AllowedValuesMixin):
    """
    Material property method.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class nist_fluid(String, AllowedValuesMixin):
    """
    NIST library fluid data.
    """
    _version = '251'
    fluent_name = 'nist-fluid'
    _python_name = 'nist_fluid'

class lookup_table(Boolean):
    """
    Create lookup table for faster NIST real gas property calculation.
    """
    _version = '251'
    fluent_name = 'lookup-table?'
    _python_name = 'lookup_table'

class pressure_points(Integer):
    """
    Number of pressure points in lookup table.
    """
    _version = '251'
    fluent_name = 'pressure-points'
    _python_name = 'pressure_points'

class pressure_minimum(Real):
    """
    Lower pressure bound in lookup table.
    """
    _version = '251'
    fluent_name = 'pressure-minimum'
    _python_name = 'pressure_minimum'

class pressure_maximum(Real):
    """
    Upper pressure bound in lookup table.
    """
    _version = '251'
    fluent_name = 'pressure-maximum'
    _python_name = 'pressure_maximum'

class temperature_points(Integer):
    """
    Number of temperature points in lookup table.
    """
    _version = '251'
    fluent_name = 'temperature-points'
    _python_name = 'temperature_points'

class temperature_minimum(Real):
    """
    Lower temperature bound in lookup table.
    """
    _version = '251'
    fluent_name = 'temperature-minimum'
    _python_name = 'temperature_minimum'

class temperature_maximum(Real):
    """
    Upper temperature bound in lookup table.
    """
    _version = '251'
    fluent_name = 'temperature-maximum'
    _python_name = 'temperature_maximum'

class saturation_points(Integer):
    """
    Number of points on saturation (bubble/dew) curve in lookup table.
    """
    _version = '251'
    fluent_name = 'saturation-points'
    _python_name = 'saturation_points'

class real_gas_nist(Group):
    """
    NIST real gas model settings.
    """
    _version = '251'
    fluent_name = 'real-gas-nist'
    _python_name = 'real_gas_nist'
    child_names = ['nist_fluid', 'lookup_table', 'pressure_points', 'pressure_minimum', 'pressure_maximum', 'temperature_points', 'temperature_minimum', 'temperature_maximum', 'saturation_points']
    _child_classes = dict(
        nist_fluid=nist_fluid,
        lookup_table=lookup_table,
        pressure_points=pressure_points,
        pressure_minimum=pressure_minimum,
        pressure_maximum=pressure_maximum,
        temperature_points=temperature_points,
        temperature_minimum=temperature_minimum,
        temperature_maximum=temperature_maximum,
        saturation_points=saturation_points,
    )

class value_15(Real):
    """
    Constant property value.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class reference_pressure(Real):
    """
    Compressible liquid density method parameter: Reference Pressure.
    """
    _version = '251'
    fluent_name = 'reference-pressure'
    _python_name = 'reference_pressure'

class reference_density(Real):
    """
    Compressible liquid density method parameter: Reference Density.
    """
    _version = '251'
    fluent_name = 'reference-density'
    _python_name = 'reference_density'

class reference_bulk_modulus(Real):
    """
    Compressible liquid density method parameter: Reference Bulk Modulus.
    """
    _version = '251'
    fluent_name = 'reference-bulk-modulus'
    _python_name = 'reference_bulk_modulus'

class density_exponent(Real):
    """
    Compressible liquid density method parameter: Density Exponent.
    """
    _version = '251'
    fluent_name = 'density-exponent'
    _python_name = 'density_exponent'

class maximum_density_ratio(Real):
    """
    Compressible liquid density method parameter: Maximum Density Ratio.
    """
    _version = '251'
    fluent_name = 'maximum-density-ratio'
    _python_name = 'maximum_density_ratio'

class minimum_density_ratio(Real):
    """
    Compressible liquid density method parameter: Minimum Density Ratio.
    """
    _version = '251'
    fluent_name = 'minimum-density-ratio'
    _python_name = 'minimum_density_ratio'

class compressible_liquid(Group):
    """
    Compressible liquid density method settings.
    """
    _version = '251'
    fluent_name = 'compressible-liquid'
    _python_name = 'compressible_liquid'
    child_names = ['reference_pressure', 'reference_density', 'reference_bulk_modulus', 'density_exponent', 'maximum_density_ratio', 'minimum_density_ratio']
    _child_classes = dict(
        reference_pressure=reference_pressure,
        reference_density=reference_density,
        reference_bulk_modulus=reference_bulk_modulus,
        density_exponent=density_exponent,
        maximum_density_ratio=maximum_density_ratio,
        minimum_density_ratio=minimum_density_ratio,
    )

class piecewise_linear_1(Group):
    """
    Property piecewise-linear values.
    """
    _version = '251'
    fluent_name = 'piecewise-linear'
    _python_name = 'piecewise_linear'
    child_names = ['function_of', 'data_points']
    _child_classes = dict(
        function_of=function_of,
        data_points=data_points,
    )

class minimum(Real):
    """
    Minimum argument range for this polynomial segment.
    """
    _version = '251'
    fluent_name = 'minimum'
    _python_name = 'minimum'

class maximum(Real):
    """
    Maximum argument range for this polynomial segment.
    """
    _version = '251'
    fluent_name = 'maximum'
    _python_name = 'maximum'

class coefficients_1(RealList):
    """
    Coefficients of polynomial.
    """
    _version = '251'
    fluent_name = 'coefficients'
    _python_name = 'coefficients'

class range_child(Group):
    """
    'child_object_type' of range.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'range_child'
    child_names = ['minimum', 'maximum', 'coefficients']
    _child_classes = dict(
        minimum=minimum,
        maximum=maximum,
        coefficients=coefficients_1,
    )

class range(ListObject[range_child]):
    """
    Piecewise-polynomial settings.
    """
    _version = '251'
    fluent_name = 'range'
    _python_name = 'range'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = range_child

class piecewise_polynomial(Group):
    """
    Property piecewise-polynomial coefficients.
    """
    _version = '251'
    fluent_name = 'piecewise-polynomial'
    _python_name = 'piecewise_polynomial'
    child_names = ['function_of', 'range']
    _child_classes = dict(
        function_of=function_of_1,
        range=range,
    )

class polynomial_1(Group):
    """
    Property polynomial coefficients.
    """
    _version = '251'
    fluent_name = 'polynomial'
    _python_name = 'polynomial'
    child_names = ['function_of', 'coefficients']
    _child_classes = dict(
        function_of=function_of_1,
        coefficients=coefficients,
    )

class expression_6(Real):
    """
    Property value expression.
    """
    _version = '251'
    fluent_name = 'expression'
    _python_name = 'expression'

class user_defined_function(String, AllowedValuesMixin):
    """
    User-defined property function.
    """
    _version = '251'
    fluent_name = 'user-defined-function'
    _python_name = 'user_defined_function'

class rgp_table(String, AllowedValuesMixin):
    """
    RGP Table Data Set.
    """
    _version = '251'
    fluent_name = 'rgp-table'
    _python_name = 'rgp_table'

class density_3(Group):
    """
    Material property: density.
    """
    _version = '251'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'real_gas_nist', 'value', 'compressible_liquid', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function', 'rgp_table']
    _child_classes = dict(
        option=option_26,
        real_gas_nist=real_gas_nist,
        value=value_15,
        compressible_liquid=compressible_liquid,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        user_defined_function=user_defined_function,
        rgp_table=rgp_table,
    )

class option_27(String, AllowedValuesMixin):
    """
    Sepcify coefficient method.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class b(Real):
    """
    B coefficient.
    """
    _version = '251'
    fluent_name = 'b'
    _python_name = 'b'

class reference_viscosity(Real):
    """
    Reference viscosity, mu0.
    """
    _version = '251'
    fluent_name = 'reference-viscosity'
    _python_name = 'reference_viscosity'

class reference_temperature_1(Real):
    """
    Reference temperature, T0.
    """
    _version = '251'
    fluent_name = 'reference-temperature'
    _python_name = 'reference_temperature'

class temperature_exponent(Real):
    """
    Temperature exponent, n.
    """
    _version = '251'
    fluent_name = 'temperature-exponent'
    _python_name = 'temperature_exponent'

class power_law(Group):
    """
    Power law viscosity settings.
    """
    _version = '251'
    fluent_name = 'power-law'
    _python_name = 'power_law'
    child_names = ['option', 'b', 'reference_viscosity', 'reference_temperature', 'temperature_exponent']
    _child_classes = dict(
        option=option_27,
        b=b,
        reference_viscosity=reference_viscosity,
        reference_temperature=reference_temperature_1,
        temperature_exponent=temperature_exponent,
    )

class a_2(Real):
    """
    A coefficient.
    """
    _version = '251'
    fluent_name = 'a'
    _python_name = 'a'

class c(Real):
    """
    C coefficient.
    """
    _version = '251'
    fluent_name = 'c'
    _python_name = 'c'

class blottner_curve_fit(Group):
    """
    Blottner curve fit viscosity settings.
    """
    _version = '251'
    fluent_name = 'blottner-curve-fit'
    _python_name = 'blottner_curve_fit'
    child_names = ['a', 'b', 'c']
    _child_classes = dict(
        a=a_2,
        b=b,
        c=c,
    )

class gupta_curve_fit_viscosity(Group):
    """
    Gupta curve fit viscosity settings.
    """
    _version = '251'
    fluent_name = 'gupta-curve-fit-viscosity'
    _python_name = 'gupta_curve_fit_viscosity'
    child_names = ['a', 'b', 'c']
    _child_classes = dict(
        a=a_2,
        b=b,
        c=c,
    )

class c1(Real):
    """
    C1 coefficient.
    """
    _version = '251'
    fluent_name = 'c1'
    _python_name = 'c1'

class c2(Real):
    """
    C2 coefficient.
    """
    _version = '251'
    fluent_name = 'c2'
    _python_name = 'c2'

class effective_temperature(Real):
    """
    Effective temperature, S.
    """
    _version = '251'
    fluent_name = 'effective-temperature'
    _python_name = 'effective_temperature'

class sutherland(Group):
    """
    Sutherland viscosity settings.
    """
    _version = '251'
    fluent_name = 'sutherland'
    _python_name = 'sutherland'
    child_names = ['option', 'c1', 'c2', 'reference_viscosity', 'reference_temperature', 'effective_temperature']
    _child_classes = dict(
        option=option_27,
        c1=c1,
        c2=c2,
        reference_viscosity=reference_viscosity,
        reference_temperature=reference_temperature_1,
        effective_temperature=effective_temperature,
    )

class option_28(String, AllowedValuesMixin):
    """
    Non newtonian dependency method.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class zero_shear_viscosity(Real):
    """
    Zero shear viscosity.
    """
    _version = '251'
    fluent_name = 'zero-shear-viscosity'
    _python_name = 'zero_shear_viscosity'

class power_law_index(Real):
    """
    Power-law index.
    """
    _version = '251'
    fluent_name = 'power-law-index'
    _python_name = 'power_law_index'

class time_constant(Real):
    """
    Time constant, lambda.
    """
    _version = '251'
    fluent_name = 'time-constant'
    _python_name = 'time_constant'

class reference_temperature_2(Real):
    """
    Reference temperature, T_alpha.
    """
    _version = '251'
    fluent_name = 'reference-temperature'
    _python_name = 'reference_temperature'

class activation_energy(Real):
    """
    Activation energy/r, alpha.
    """
    _version = '251'
    fluent_name = 'activation-energy'
    _python_name = 'activation_energy'

class cross(Group):
    """
    Cross model viscosity settings.
    """
    _version = '251'
    fluent_name = 'cross'
    _python_name = 'cross'
    child_names = ['option', 'zero_shear_viscosity', 'power_law_index', 'time_constant', 'reference_temperature', 'activation_energy']
    _child_classes = dict(
        option=option_28,
        zero_shear_viscosity=zero_shear_viscosity,
        power_law_index=power_law_index,
        time_constant=time_constant,
        reference_temperature=reference_temperature_2,
        activation_energy=activation_energy,
    )

class consistency_index(Real):
    """
    Consistency index, k.
    """
    _version = '251'
    fluent_name = 'consistency-index'
    _python_name = 'consistency_index'

class power_law_index_1(Real):
    """
    Power-Law index, n.
    """
    _version = '251'
    fluent_name = 'power-law-index'
    _python_name = 'power_law_index'

class yield_stress_threshold(Real):
    """
    Yield stress threshold.
    """
    _version = '251'
    fluent_name = 'yield-stress-threshold'
    _python_name = 'yield_stress_threshold'

class critical_shear_rate(Real):
    """
    Critical shear rate.
    """
    _version = '251'
    fluent_name = 'critical-shear-rate'
    _python_name = 'critical_shear_rate'

class reference_temperature_3(Real):
    """
    Reference temperature.
    """
    _version = '251'
    fluent_name = 'reference-temperature'
    _python_name = 'reference_temperature'

class activation_energy_1(Real):
    """
    Activation energy/R.
    """
    _version = '251'
    fluent_name = 'activation-energy'
    _python_name = 'activation_energy'

class herschel_bulkley(Group):
    """
    Herschel-Bulkley viscosity settings.
    """
    _version = '251'
    fluent_name = 'herschel-bulkley'
    _python_name = 'herschel_bulkley'
    child_names = ['option', 'consistency_index', 'power_law_index', 'yield_stress_threshold', 'critical_shear_rate', 'reference_temperature', 'activation_energy']
    _child_classes = dict(
        option=option_28,
        consistency_index=consistency_index,
        power_law_index=power_law_index_1,
        yield_stress_threshold=yield_stress_threshold,
        critical_shear_rate=critical_shear_rate,
        reference_temperature=reference_temperature_3,
        activation_energy=activation_energy_1,
    )

class infinite_shear_viscosity(Real):
    """
    Infinite shear viscosity.
    """
    _version = '251'
    fluent_name = 'infinite-shear-viscosity'
    _python_name = 'infinite_shear_viscosity'

class carreau(Group):
    """
    Carreau model viscosity settings.
    """
    _version = '251'
    fluent_name = 'carreau'
    _python_name = 'carreau'
    child_names = ['option', 'time_constant', 'power_law_index', 'zero_shear_viscosity', 'infinite_shear_viscosity', 'reference_temperature', 'activation_energy']
    _child_classes = dict(
        option=option_28,
        time_constant=time_constant,
        power_law_index=power_law_index,
        zero_shear_viscosity=zero_shear_viscosity,
        infinite_shear_viscosity=infinite_shear_viscosity,
        reference_temperature=reference_temperature_2,
        activation_energy=activation_energy,
    )

class power_law_index_2(Real):
    """
    Power-law index, n.
    """
    _version = '251'
    fluent_name = 'power-law-index'
    _python_name = 'power_law_index'

class minimum_viscosity(Real):
    """
    Minimum viscosity limit.
    """
    _version = '251'
    fluent_name = 'minimum-viscosity'
    _python_name = 'minimum_viscosity'

class maximum_viscosity(Real):
    """
    Maximum viscosity limit.
    """
    _version = '251'
    fluent_name = 'maximum-viscosity'
    _python_name = 'maximum_viscosity'

class activation_energy_2(Real):
    """
    Activation energy/R, alpha.
    """
    _version = '251'
    fluent_name = 'activation-energy'
    _python_name = 'activation_energy'

class non_newtonian_power_law(Group):
    """
    Non-Newtonian power law viscosity settings.
    """
    _version = '251'
    fluent_name = 'non-newtonian-power-law'
    _python_name = 'non_newtonian_power_law'
    child_names = ['option', 'consistency_index', 'power_law_index', 'minimum_viscosity', 'maximum_viscosity', 'reference_temperature', 'activation_energy']
    _child_classes = dict(
        option=option_28,
        consistency_index=consistency_index,
        power_law_index=power_law_index_2,
        minimum_viscosity=minimum_viscosity,
        maximum_viscosity=maximum_viscosity,
        reference_temperature=reference_temperature_2,
        activation_energy=activation_energy_2,
    )

class viscosity(Group):
    """
    Material property: viscosity.
    """
    _version = '251'
    fluent_name = 'viscosity'
    _python_name = 'viscosity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'power_law', 'blottner_curve_fit', 'gupta_curve_fit_viscosity', 'sutherland', 'cross', 'herschel_bulkley', 'carreau', 'non_newtonian_power_law', 'user_defined_function', 'rgp_table', 'real_gas_nist']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        power_law=power_law,
        blottner_curve_fit=blottner_curve_fit,
        gupta_curve_fit_viscosity=gupta_curve_fit_viscosity,
        sutherland=sutherland,
        cross=cross,
        herschel_bulkley=herschel_bulkley,
        carreau=carreau,
        non_newtonian_power_law=non_newtonian_power_law,
        user_defined_function=user_defined_function,
        rgp_table=rgp_table,
        real_gas_nist=real_gas_nist,
    )

class nasa_9_piecewise_polynomial(Group):
    """
    Property piecewise-polynomial coefficients.
    """
    _version = '251'
    fluent_name = 'nasa-9-piecewise-polynomial'
    _python_name = 'nasa_9_piecewise_polynomial'
    child_names = ['function_of', 'range']
    _child_classes = dict(
        function_of=function_of_1,
        range=range,
    )

class specific_heat(Group):
    """
    Material property: specific-heat.
    """
    _version = '251'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'nasa_9_piecewise_polynomial', 'user_defined_function', 'rgp_table', 'real_gas_nist']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        nasa_9_piecewise_polynomial=nasa_9_piecewise_polynomial,
        user_defined_function=user_defined_function,
        rgp_table=rgp_table,
        real_gas_nist=real_gas_nist,
    )

class d(Real):
    """
    D coefficient.
    """
    _version = '251'
    fluent_name = 'd'
    _python_name = 'd'

class e_2(Real):
    """
    E coefficient.
    """
    _version = '251'
    fluent_name = 'e'
    _python_name = 'e'

class gupta_curve_fit_conductivity(Group):
    """
    Gupta curve fit conductivity settings.
    """
    _version = '251'
    fluent_name = 'gupta-curve-fit-conductivity'
    _python_name = 'gupta_curve_fit_conductivity'
    child_names = ['a', 'b', 'c', 'd', 'e']
    _child_classes = dict(
        a=a_2,
        b=b,
        c=c,
        d=d,
        e=e_2,
    )

class thermal_conductivity_1(Group):
    """
    Material property: thermal-conductivity.
    """
    _version = '251'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'gupta_curve_fit_conductivity', 'expression', 'user_defined_function', 'rgp_table', 'real_gas_nist']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        gupta_curve_fit_conductivity=gupta_curve_fit_conductivity,
        expression=expression_6,
        user_defined_function=user_defined_function,
        rgp_table=rgp_table,
        real_gas_nist=real_gas_nist,
    )

class molecular_weight_3(Group):
    """
    Material property: molecular-weight.
    """
    _version = '251'
    fluent_name = 'molecular-weight'
    _python_name = 'molecular_weight'
    child_names = ['option', 'value', 'rgp_table']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        rgp_table=rgp_table,
    )

class combustion_mixture(String, AllowedValuesMixin):
    """
    Combustion mixture.
    """
    _version = '251'
    fluent_name = 'combustion-mixture'
    _python_name = 'combustion_mixture'

class premix_laminar_speed(Group):
    """
    Material property: premix-laminar-speed.
    """
    _version = '251'
    fluent_name = 'premix-laminar-speed'
    _python_name = 'premix_laminar_speed'
    child_names = ['option', 'value', 'user_defined_function', 'combustion_mixture']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
        combustion_mixture=combustion_mixture,
    )

class premix_critical_strain(Group):
    """
    Material property: premix-critical-strain.
    """
    _version = '251'
    fluent_name = 'premix-critical-strain'
    _python_name = 'premix_critical_strain'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
    )

class premix_unburnt_temp(Group):
    """
    Material property: premix-unburnt-temp.
    """
    _version = '251'
    fluent_name = 'premix-unburnt-temp'
    _python_name = 'premix_unburnt_temp'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class premix_unburnt_density(Group):
    """
    Material property: premix-unburnt-density.
    """
    _version = '251'
    fluent_name = 'premix-unburnt-density'
    _python_name = 'premix_unburnt_density'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class premix_heat_trans_coeff(Group):
    """
    Material property: premix-heat-trans-coeff.
    """
    _version = '251'
    fluent_name = 'premix-heat-trans-coeff'
    _python_name = 'premix_heat_trans_coeff'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class premix_heat_of_comb(Group):
    """
    Material property: premix-heat-of-comb.
    """
    _version = '251'
    fluent_name = 'premix-heat-of-comb'
    _python_name = 'premix_heat_of_comb'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class premix_unburnt_fuel_mf(Group):
    """
    Material property: premix-unburnt-fuel-mf.
    """
    _version = '251'
    fluent_name = 'premix-unburnt-fuel-mf'
    _python_name = 'premix_unburnt_fuel_mf'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
    )

class premix_adiabatic_temp(Group):
    """
    Material property: premix-adiabatic-temp.
    """
    _version = '251'
    fluent_name = 'premix-adiabatic-temp'
    _python_name = 'premix_adiabatic_temp'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
    )

class therm_exp_coeff(Group):
    """
    Material property: therm-exp-coeff.
    """
    _version = '251'
    fluent_name = 'therm-exp-coeff'
    _python_name = 'therm_exp_coeff'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class vibrational_temperature_mode_1(Real):
    """
    Vibrational temperature mode 1.
    """
    _version = '251'
    fluent_name = 'vibrational-temperature-mode-1'
    _python_name = 'vibrational_temperature_mode_1'

class vibrational_degeneracy_mode_1(Real):
    """
    Vibrational degeneracy mode 1.
    """
    _version = '251'
    fluent_name = 'vibrational-degeneracy-mode-1'
    _python_name = 'vibrational_degeneracy_mode_1'

class vibrational_temperature_mode_2(Real):
    """
    Vibrational temperature mode 2.
    """
    _version = '251'
    fluent_name = 'vibrational-temperature-mode-2'
    _python_name = 'vibrational_temperature_mode_2'

class vibrational_degeneracy_mode_2(Real):
    """
    Vibrational degeneracy mode 2.
    """
    _version = '251'
    fluent_name = 'vibrational-degeneracy-mode-2'
    _python_name = 'vibrational_degeneracy_mode_2'

class vibrational_temperature_mode_3(Real):
    """
    Vibrational temperature mode 3.
    """
    _version = '251'
    fluent_name = 'vibrational-temperature-mode-3'
    _python_name = 'vibrational_temperature_mode_3'

class vibrational_degeneracy_mode_3(Real):
    """
    Vibrational degeneracy mode 3.
    """
    _version = '251'
    fluent_name = 'vibrational-degeneracy-mode-3'
    _python_name = 'vibrational_degeneracy_mode_3'

class vibrational_modes(Group):
    """
    Multiple vibrational modes settings.
    """
    _version = '251'
    fluent_name = 'vibrational-modes'
    _python_name = 'vibrational_modes'
    child_names = ['vibrational_temperature_mode_1', 'vibrational_degeneracy_mode_1', 'vibrational_temperature_mode_2', 'vibrational_degeneracy_mode_2', 'vibrational_temperature_mode_3', 'vibrational_degeneracy_mode_3']
    _child_classes = dict(
        vibrational_temperature_mode_1=vibrational_temperature_mode_1,
        vibrational_degeneracy_mode_1=vibrational_degeneracy_mode_1,
        vibrational_temperature_mode_2=vibrational_temperature_mode_2,
        vibrational_degeneracy_mode_2=vibrational_degeneracy_mode_2,
        vibrational_temperature_mode_3=vibrational_temperature_mode_3,
        vibrational_degeneracy_mode_3=vibrational_degeneracy_mode_3,
    )

class characteristic_vibrational_temperature(Group):
    """
    Material property: characteristic-vibrational-temperature.
    """
    _version = '251'
    fluent_name = 'characteristic-vibrational-temperature'
    _python_name = 'characteristic_vibrational_temperature'
    child_names = ['option', 'vibrational_modes', 'value']
    _child_classes = dict(
        option=option_26,
        vibrational_modes=vibrational_modes,
        value=value_15,
    )

class gray_band_coefficients(RealList):
    """
    Gray band coefficient settings.
    """
    _version = '251'
    fluent_name = 'gray-band-coefficients'
    _python_name = 'gray_band_coefficients'

class absorption_coefficient(Group):
    """
    Material property: absorption-coefficient.
    """
    _version = '251'
    fluent_name = 'absorption-coefficient'
    _python_name = 'absorption_coefficient'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'gray_band_coefficients', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        gray_band_coefficients=gray_band_coefficients,
        user_defined_function=user_defined_function,
    )

class melting_heat(Group):
    """
    Material property: melting-heat.
    """
    _version = '251'
    fluent_name = 'melting-heat'
    _python_name = 'melting_heat'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class tsolidus(Group):
    """
    Material property: tsolidus.
    """
    _version = '251'
    fluent_name = 'tsolidus'
    _python_name = 'tsolidus'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class tliqidus(Group):
    """
    Material property: tliqidus.
    """
    _version = '251'
    fluent_name = 'tliqidus'
    _python_name = 'tliqidus'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class liquidus_slope(Group):
    """
    Material property: liquidus-slope.
    """
    _version = '251'
    fluent_name = 'liquidus-slope'
    _python_name = 'liquidus_slope'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class partition_coeff(Group):
    """
    Material property: partition-coeff.
    """
    _version = '251'
    fluent_name = 'partition-coeff'
    _python_name = 'partition_coeff'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        user_defined_function=user_defined_function,
    )

class eutectic_mf(Group):
    """
    Material property: eutectic-mf.
    """
    _version = '251'
    fluent_name = 'eutectic-mf'
    _python_name = 'eutectic_mf'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class solid_diffusion(Group):
    """
    Material property: solid-diffusion.
    """
    _version = '251'
    fluent_name = 'solid-diffusion'
    _python_name = 'solid_diffusion'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class solut_exp_coeff(Group):
    """
    Material property: solut-exp-coeff.
    """
    _version = '251'
    fluent_name = 'solut-exp-coeff'
    _python_name = 'solut_exp_coeff'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class scattering_coefficient(Group):
    """
    Material property: scattering-coefficient.
    """
    _version = '251'
    fluent_name = 'scattering-coefficient'
    _python_name = 'scattering_coefficient'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        user_defined_function=user_defined_function,
    )

class forward_scattering_factor(Real):
    """
    Forward scattering factor.
    """
    _version = '251'
    fluent_name = 'forward-scattering-factor'
    _python_name = 'forward_scattering_factor'

class asymmetry_factor(Real):
    """
    Asymmetry aactor.
    """
    _version = '251'
    fluent_name = 'asymmetry-factor'
    _python_name = 'asymmetry_factor'

class delta_eddington(Group):
    """
    Scattering phase function Delta Eddington settings.
    """
    _version = '251'
    fluent_name = 'delta-eddington'
    _python_name = 'delta_eddington'
    child_names = ['forward_scattering_factor', 'asymmetry_factor']
    _child_classes = dict(
        forward_scattering_factor=forward_scattering_factor,
        asymmetry_factor=asymmetry_factor,
    )

class scattering_phase_function(Group):
    """
    Material property: scattering-phase-function.
    """
    _version = '251'
    fluent_name = 'scattering-phase-function'
    _python_name = 'scattering_phase_function'
    child_names = ['option', 'value', 'delta_eddington', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        delta_eddington=delta_eddington,
        user_defined_function=user_defined_function,
    )

class refractive_index(Group):
    """
    Material property: refractive-index.
    """
    _version = '251'
    fluent_name = 'refractive-index'
    _python_name = 'refractive_index'
    child_names = ['option', 'value', 'gray_band_coefficients']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        gray_band_coefficients=gray_band_coefficients,
    )

class formation_entropy(Group):
    """
    Material property: formation-entropy.
    """
    _version = '251'
    fluent_name = 'formation-entropy'
    _python_name = 'formation_entropy'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class formation_enthalpy(Group):
    """
    Material property: formation-enthalpy.
    """
    _version = '251'
    fluent_name = 'formation-enthalpy'
    _python_name = 'formation_enthalpy'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class reference_temperature(Group):
    """
    Material property: reference-temperature.
    """
    _version = '251'
    fluent_name = 'reference-temperature'
    _python_name = 'reference_temperature'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class lennard_jones_length(Group):
    """
    Material property: lennard-jones-length.
    """
    _version = '251'
    fluent_name = 'lennard-jones-length'
    _python_name = 'lennard_jones_length'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class lennard_jones_energy(Group):
    """
    Material property: lennard-jones-energy.
    """
    _version = '251'
    fluent_name = 'lennard-jones-energy'
    _python_name = 'lennard_jones_energy'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class thermal_accom_coefficient(Group):
    """
    Material property: thermal-accom-coefficient.
    """
    _version = '251'
    fluent_name = 'thermal-accom-coefficient'
    _python_name = 'thermal_accom_coefficient'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class velocity_accom_coefficient(Group):
    """
    Material property: velocity-accom-coefficient.
    """
    _version = '251'
    fluent_name = 'velocity-accom-coefficient'
    _python_name = 'velocity_accom_coefficient'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class degrees_of_freedom(Group):
    """
    Material property: degrees-of-freedom.
    """
    _version = '251'
    fluent_name = 'degrees-of-freedom'
    _python_name = 'degrees_of_freedom'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class electric_conductivity(Group):
    """
    Material property: electric-conductivity.
    """
    _version = '251'
    fluent_name = 'electric-conductivity'
    _python_name = 'electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        user_defined_function=user_defined_function,
    )

class dual_electric_conductivity(Group):
    """
    Material property: dual-electric-conductivity.
    """
    _version = '251'
    fluent_name = 'dual-electric-conductivity'
    _python_name = 'dual_electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        user_defined_function=user_defined_function,
    )

class lithium_diffusivity(Group):
    """
    Material property: lithium-diffusivity.
    """
    _version = '251'
    fluent_name = 'lithium-diffusivity'
    _python_name = 'lithium_diffusivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        user_defined_function=user_defined_function,
    )

class magnetic_permeability(Group):
    """
    Material property: magnetic-permeability.
    """
    _version = '251'
    fluent_name = 'magnetic-permeability'
    _python_name = 'magnetic_permeability'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class speed_of_sound(Group):
    """
    Material property: speed-of-sound.
    """
    _version = '251'
    fluent_name = 'speed-of-sound'
    _python_name = 'speed_of_sound'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        user_defined_function=user_defined_function,
    )

class critical_temperature(Group):
    """
    Material property: critical-temperature.
    """
    _version = '251'
    fluent_name = 'critical-temperature'
    _python_name = 'critical_temperature'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class critical_pressure(Group):
    """
    Material property: critical-pressure.
    """
    _version = '251'
    fluent_name = 'critical-pressure'
    _python_name = 'critical_pressure'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class critical_volume(Group):
    """
    Material property: critical-volume.
    """
    _version = '251'
    fluent_name = 'critical-volume'
    _python_name = 'critical_volume'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class acentric_factor(Group):
    """
    Material property: acentric-factor.
    """
    _version = '251'
    fluent_name = 'acentric-factor'
    _python_name = 'acentric_factor'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class latent_heat(Group):
    """
    Material property: latent-heat.
    """
    _version = '251'
    fluent_name = 'latent-heat'
    _python_name = 'latent_heat'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class saturation_pressure(Group):
    """
    Material property: saturation-pressure.
    """
    _version = '251'
    fluent_name = 'saturation-pressure'
    _python_name = 'saturation_pressure'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        user_defined_function=user_defined_function,
    )

class vaporization_temperature(Group):
    """
    Material property: vaporization-temperature.
    """
    _version = '251'
    fluent_name = 'vaporization-temperature'
    _python_name = 'vaporization_temperature'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
    )

class charge(Group):
    """
    Material property: charge.
    """
    _version = '251'
    fluent_name = 'charge'
    _python_name = 'charge'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class matrix_component(RealList):
    """
    Anisotropic property matrix components.
    """
    _version = '251'
    fluent_name = 'matrix-component'
    _python_name = 'matrix_component'

class diffusivity(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'diffusivity'
    _python_name = 'diffusivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class anisotropic_1(Group):
    """
    Anisotropic conductivity settings.
    """
    _version = '251'
    fluent_name = 'anisotropic'
    _python_name = 'anisotropic'
    child_names = ['matrix_component', 'diffusivity']
    _child_classes = dict(
        matrix_component=matrix_component,
        diffusivity=diffusivity,
    )

class direction_0(RealList):
    """
    Orthotropic property directions.
    """
    _version = '251'
    fluent_name = 'direction-0'
    _python_name = 'direction_0'

class direction_1_1(RealList):
    """
    Orthotropic property directions.
    """
    _version = '251'
    fluent_name = 'direction-1'
    _python_name = 'direction_1'

class diffusivity_0(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'diffusivity-0'
    _python_name = 'diffusivity_0'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class diffusivity_1(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'diffusivity-1'
    _python_name = 'diffusivity_1'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class diffusivity_2(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'diffusivity-2'
    _python_name = 'diffusivity_2'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class orthotropic(Group):
    """
    Orthotropic conductivity settings.
    """
    _version = '251'
    fluent_name = 'orthotropic'
    _python_name = 'orthotropic'
    child_names = ['direction_0', 'direction_1', 'diffusivity_0', 'diffusivity_1', 'diffusivity_2']
    _child_classes = dict(
        direction_0=direction_0,
        direction_1=direction_1_1,
        diffusivity_0=diffusivity_0,
        diffusivity_1=diffusivity_1,
        diffusivity_2=diffusivity_2,
    )

class axis_origin(RealList):
    """
    Orthotropic property directions.
    """
    _version = '251'
    fluent_name = 'axis-origin'
    _python_name = 'axis_origin'

class axis_direction(RealList):
    """
    Orthotropic property directions.
    """
    _version = '251'
    fluent_name = 'axis-direction'
    _python_name = 'axis_direction'

class radial_diffusivity(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'radial-diffusivity'
    _python_name = 'radial_diffusivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class tangential_diffusivity(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'tangential-diffusivity'
    _python_name = 'tangential_diffusivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class axial_diffusivity(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'axial-diffusivity'
    _python_name = 'axial_diffusivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class cyl_orthotropic(Group):
    """
    Cylindrical orthotropic conductivity settings.
    """
    _version = '251'
    fluent_name = 'cyl-orthotropic'
    _python_name = 'cyl_orthotropic'
    child_names = ['axis_origin', 'axis_direction', 'radial_diffusivity', 'tangential_diffusivity', 'axial_diffusivity']
    _child_classes = dict(
        axis_origin=axis_origin,
        axis_direction=axis_direction,
        radial_diffusivity=radial_diffusivity,
        tangential_diffusivity=tangential_diffusivity,
        axial_diffusivity=axial_diffusivity,
    )

class uds_diffusivities_child(Group):
    """
    'child_object_type' of uds_diffusivities.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'uds_diffusivities_child'
    child_names = ['option', 'value', 'expression', 'polynomial', 'user_defined_function', 'anisotropic', 'orthotropic', 'cyl_orthotropic']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
        anisotropic=anisotropic_1,
        orthotropic=orthotropic,
        cyl_orthotropic=cyl_orthotropic,
    )

class uds_diffusivities(NamedObject[uds_diffusivities_child], CreatableNamedObjectMixin[uds_diffusivities_child]):
    """
    UDS Diffusivity settings.
    """
    _version = '251'
    fluent_name = 'uds-diffusivities'
    _python_name = 'uds_diffusivities'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = uds_diffusivities_child

class uds_diffusivity(Group):
    """
    Material property: uds-diffusivity.
    """
    _version = '251'
    fluent_name = 'uds-diffusivity'
    _python_name = 'uds_diffusivity'
    child_names = ['option', 'uds_diffusivities', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        uds_diffusivities=uds_diffusivities,
        user_defined_function=user_defined_function,
    )

class fluid_child(Group):
    """
    'child_object_type' of fluid.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'fluid_child'
    child_names = ['name', 'chemical_formula', 'density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'molecular_weight', 'premix_laminar_speed', 'premix_critical_strain', 'premix_unburnt_temp', 'premix_unburnt_density', 'premix_heat_trans_coeff', 'premix_heat_of_comb', 'premix_unburnt_fuel_mf', 'premix_adiabatic_temp', 'therm_exp_coeff', 'characteristic_vibrational_temperature', 'absorption_coefficient', 'melting_heat', 'tsolidus', 'tliqidus', 'liquidus_slope', 'partition_coeff', 'eutectic_mf', 'solid_diffusion', 'solut_exp_coeff', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'formation_entropy', 'formation_enthalpy', 'reference_temperature', 'lennard_jones_length', 'lennard_jones_energy', 'thermal_accom_coefficient', 'velocity_accom_coefficient', 'degrees_of_freedom', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'magnetic_permeability', 'speed_of_sound', 'critical_temperature', 'critical_pressure', 'critical_volume', 'acentric_factor', 'latent_heat', 'saturation_pressure', 'vaporization_temperature', 'charge', 'uds_diffusivity']
    _child_classes = dict(
        name=name_8,
        chemical_formula=chemical_formula,
        density=density_3,
        viscosity=viscosity,
        specific_heat=specific_heat,
        thermal_conductivity=thermal_conductivity_1,
        molecular_weight=molecular_weight_3,
        premix_laminar_speed=premix_laminar_speed,
        premix_critical_strain=premix_critical_strain,
        premix_unburnt_temp=premix_unburnt_temp,
        premix_unburnt_density=premix_unburnt_density,
        premix_heat_trans_coeff=premix_heat_trans_coeff,
        premix_heat_of_comb=premix_heat_of_comb,
        premix_unburnt_fuel_mf=premix_unburnt_fuel_mf,
        premix_adiabatic_temp=premix_adiabatic_temp,
        therm_exp_coeff=therm_exp_coeff,
        characteristic_vibrational_temperature=characteristic_vibrational_temperature,
        absorption_coefficient=absorption_coefficient,
        melting_heat=melting_heat,
        tsolidus=tsolidus,
        tliqidus=tliqidus,
        liquidus_slope=liquidus_slope,
        partition_coeff=partition_coeff,
        eutectic_mf=eutectic_mf,
        solid_diffusion=solid_diffusion,
        solut_exp_coeff=solut_exp_coeff,
        scattering_coefficient=scattering_coefficient,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        formation_entropy=formation_entropy,
        formation_enthalpy=formation_enthalpy,
        reference_temperature=reference_temperature,
        lennard_jones_length=lennard_jones_length,
        lennard_jones_energy=lennard_jones_energy,
        thermal_accom_coefficient=thermal_accom_coefficient,
        velocity_accom_coefficient=velocity_accom_coefficient,
        degrees_of_freedom=degrees_of_freedom,
        electric_conductivity=electric_conductivity,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        magnetic_permeability=magnetic_permeability,
        speed_of_sound=speed_of_sound,
        critical_temperature=critical_temperature,
        critical_pressure=critical_pressure,
        critical_volume=critical_volume,
        acentric_factor=acentric_factor,
        latent_heat=latent_heat,
        saturation_pressure=saturation_pressure,
        vaporization_temperature=vaporization_temperature,
        charge=charge,
        uds_diffusivity=uds_diffusivity,
    )

class fluid(NamedObject[fluid_child], CreatableNamedObjectMixin[fluid_child]):
    """
    'fluid' child.
    """
    _version = '251'
    fluent_name = 'fluid'
    _python_name = 'fluid'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = fluid_child

class density_4(Group):
    """
    Material property: density.
    """
    _version = '251'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'user_defined_function', 'value']
    _child_classes = dict(
        option=option_26,
        user_defined_function=user_defined_function,
        value=value_15,
    )

class specific_heat_1(Group):
    """
    Material property: specific-heat.
    """
    _version = '251'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'user_defined_function', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'nasa_9_piecewise_polynomial']
    _child_classes = dict(
        option=option_26,
        user_defined_function=user_defined_function,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        nasa_9_piecewise_polynomial=nasa_9_piecewise_polynomial,
    )

class planar_conductivity(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'planar-conductivity'
    _python_name = 'planar_conductivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class transverse_conductivity(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'transverse-conductivity'
    _python_name = 'transverse_conductivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class biaxial(Group):
    """
    Biaxial orthotropic conductivity settings.
    """
    _version = '251'
    fluent_name = 'biaxial'
    _python_name = 'biaxial'
    child_names = ['planar_conductivity', 'transverse_conductivity']
    _child_classes = dict(
        planar_conductivity=planar_conductivity,
        transverse_conductivity=transverse_conductivity,
    )

class radial_conductivity(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'radial-conductivity'
    _python_name = 'radial_conductivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class tangential_conductivity(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'tangential-conductivity'
    _python_name = 'tangential_conductivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class axial_conductivity(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'axial-conductivity'
    _python_name = 'axial_conductivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class cyl_orthotropic_1(Group):
    """
    Cylindrical orthotropic conductivity settings.
    """
    _version = '251'
    fluent_name = 'cyl-orthotropic'
    _python_name = 'cyl_orthotropic'
    child_names = ['axis_origin', 'axis_direction', 'radial_conductivity', 'tangential_conductivity', 'axial_conductivity']
    _child_classes = dict(
        axis_origin=axis_origin,
        axis_direction=axis_direction,
        radial_conductivity=radial_conductivity,
        tangential_conductivity=tangential_conductivity,
        axial_conductivity=axial_conductivity,
    )

class conductivity_0(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'conductivity-0'
    _python_name = 'conductivity_0'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class conductivity_1(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'conductivity-1'
    _python_name = 'conductivity_1'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class conductivity_2(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'conductivity-2'
    _python_name = 'conductivity_2'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class orthotropic_1(Group):
    """
    Orthotropic conductivity settings.
    """
    _version = '251'
    fluent_name = 'orthotropic'
    _python_name = 'orthotropic'
    child_names = ['direction_0', 'direction_1', 'conductivity_0', 'conductivity_1', 'conductivity_2']
    _child_classes = dict(
        direction_0=direction_0,
        direction_1=direction_1_1,
        conductivity_0=conductivity_0,
        conductivity_1=conductivity_1,
        conductivity_2=conductivity_2,
    )

class principal_axes(RealList):
    """
    Anisotropic property matrix components.
    """
    _version = '251'
    fluent_name = 'principal-axes'
    _python_name = 'principal_axes'

class principal_values(RealList):
    """
    Orthotropic property directions.
    """
    _version = '251'
    fluent_name = 'principal-values'
    _python_name = 'principal_values'

class conductivity(Group):
    """
    Property settings.
    """
    _version = '251'
    fluent_name = 'conductivity'
    _python_name = 'conductivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class principal_axes_values(Group):
    """
    Anisotropic conduction - principal components settings.
    """
    _version = '251'
    fluent_name = 'principal-axes-values'
    _python_name = 'principal_axes_values'
    child_names = ['principal_axes', 'principal_values', 'conductivity']
    _child_classes = dict(
        principal_axes=principal_axes,
        principal_values=principal_values,
        conductivity=conductivity,
    )

class anisotropic_2(Group):
    """
    Anisotropic conductivity settings.
    """
    _version = '251'
    fluent_name = 'anisotropic'
    _python_name = 'anisotropic'
    child_names = ['matrix_component', 'conductivity']
    _child_classes = dict(
        matrix_component=matrix_component,
        conductivity=conductivity,
    )

class thermal_conductivity_2(Group):
    """
    Material property: thermal-conductivity.
    """
    _version = '251'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'biaxial', 'cyl_orthotropic', 'orthotropic', 'principal_axes_values', 'anisotropic', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        biaxial=biaxial,
        cyl_orthotropic=cyl_orthotropic_1,
        orthotropic=orthotropic_1,
        principal_axes_values=principal_axes_values,
        anisotropic=anisotropic_2,
        user_defined_function=user_defined_function,
    )

class atomic_number(Group):
    """
    Material property: atomic-number.
    """
    _version = '251'
    fluent_name = 'atomic-number'
    _python_name = 'atomic_number'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class electric_conductivity_1(Group):
    """
    Material property: electric-conductivity.
    """
    _version = '251'
    fluent_name = 'electric-conductivity'
    _python_name = 'electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'cyl_orthotropic', 'orthotropic', 'anisotropic', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        cyl_orthotropic=cyl_orthotropic_1,
        orthotropic=orthotropic_1,
        anisotropic=anisotropic_2,
        user_defined_function=user_defined_function,
    )

class direction_0_1(RealList):
    """
    Orthotropic youngs modulus direction 0 components.
    """
    _version = '251'
    fluent_name = 'direction-0'
    _python_name = 'direction_0'

class direction_1_2(RealList):
    """
    Orthotropic youngs modulus direction 1 components.
    """
    _version = '251'
    fluent_name = 'direction-1'
    _python_name = 'direction_1'

class option_29(String, AllowedValuesMixin):
    """
    Orthotropic structure option.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class youngs_modulus_0(Group):
    """
    Orthotropic youngs modulus direction 0 value.
    """
    _version = '251'
    fluent_name = 'youngs-modulus-0'
    _python_name = 'youngs_modulus_0'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_29,
        value=value_15,
    )

class youngs_modulus_1(Group):
    """
    Orthotropic youngs modulus direction 1 value.
    """
    _version = '251'
    fluent_name = 'youngs-modulus-1'
    _python_name = 'youngs_modulus_1'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_29,
        value=value_15,
    )

class youngs_modulus_2(Group):
    """
    Orthotropic youngs modulus direction 2 value.
    """
    _version = '251'
    fluent_name = 'youngs-modulus-2'
    _python_name = 'youngs_modulus_2'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_29,
        value=value_15,
    )

class shear_modulus_01(Group):
    """
    Orthotropic youngs modulus shear modulus plane 01 value.
    """
    _version = '251'
    fluent_name = 'shear-modulus-01'
    _python_name = 'shear_modulus_01'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_29,
        value=value_15,
    )

class shear_modulus_12(Group):
    """
    Orthotropic youngs modulus shear modulus plane 12 value.
    """
    _version = '251'
    fluent_name = 'shear-modulus-12'
    _python_name = 'shear_modulus_12'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_29,
        value=value_15,
    )

class shear_modulus_02(Group):
    """
    Orthotropic youngs modulus shear modulus plane 02 value.
    """
    _version = '251'
    fluent_name = 'shear-modulus-02'
    _python_name = 'shear_modulus_02'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_29,
        value=value_15,
    )

class orthotropic_structure_ym(Group):
    """
    Orthotropic structure Youngs modulus settings.
    """
    _version = '251'
    fluent_name = 'orthotropic-structure-ym'
    _python_name = 'orthotropic_structure_ym'
    child_names = ['direction_0', 'direction_1', 'youngs_modulus_0', 'youngs_modulus_1', 'youngs_modulus_2', 'shear_modulus_01', 'shear_modulus_12', 'shear_modulus_02']
    _child_classes = dict(
        direction_0=direction_0_1,
        direction_1=direction_1_2,
        youngs_modulus_0=youngs_modulus_0,
        youngs_modulus_1=youngs_modulus_1,
        youngs_modulus_2=youngs_modulus_2,
        shear_modulus_01=shear_modulus_01,
        shear_modulus_12=shear_modulus_12,
        shear_modulus_02=shear_modulus_02,
    )

class struct_youngs_modulus(Group):
    """
    Material property: struct-youngs-modulus.
    """
    _version = '251'
    fluent_name = 'struct-youngs-modulus'
    _python_name = 'struct_youngs_modulus'
    child_names = ['option', 'value', 'orthotropic_structure_ym', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        orthotropic_structure_ym=orthotropic_structure_ym,
        user_defined_function=user_defined_function,
    )

class poisson_ratio_01(Group):
    """
    Orthotropic poisson ratio plane 01 value.
    """
    _version = '251'
    fluent_name = 'poisson-ratio-01'
    _python_name = 'poisson_ratio_01'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_29,
        value=value_15,
    )

class poisson_ratio_12(Group):
    """
    Orthotropic poisson ratio plane 12 value.
    """
    _version = '251'
    fluent_name = 'poisson-ratio-12'
    _python_name = 'poisson_ratio_12'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_29,
        value=value_15,
    )

class poisson_ratio_02(Group):
    """
    Orthotropic poisson ratio plane 02 value.
    """
    _version = '251'
    fluent_name = 'poisson-ratio-02'
    _python_name = 'poisson_ratio_02'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_29,
        value=value_15,
    )

class orthotropic_structure_nu(Group):
    """
    Orthotropic structure Poisson ratio settings.
    """
    _version = '251'
    fluent_name = 'orthotropic-structure-nu'
    _python_name = 'orthotropic_structure_nu'
    child_names = ['poisson_ratio_01', 'poisson_ratio_12', 'poisson_ratio_02']
    _child_classes = dict(
        poisson_ratio_01=poisson_ratio_01,
        poisson_ratio_12=poisson_ratio_12,
        poisson_ratio_02=poisson_ratio_02,
    )

class struct_poisson_ratio(Group):
    """
    Material property: struct-poisson-ratio.
    """
    _version = '251'
    fluent_name = 'struct-poisson-ratio'
    _python_name = 'struct_poisson_ratio'
    child_names = ['option', 'value', 'orthotropic_structure_nu', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        orthotropic_structure_nu=orthotropic_structure_nu,
        user_defined_function=user_defined_function,
    )

class struct_start_temperature(Group):
    """
    Material property: struct-start-temperature.
    """
    _version = '251'
    fluent_name = 'struct-start-temperature'
    _python_name = 'struct_start_temperature'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class thermal_expansion_0(Group):
    """
    Orthotropic thermal expansion direction 0 value.
    """
    _version = '251'
    fluent_name = 'thermal-expansion-0'
    _python_name = 'thermal_expansion_0'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_29,
        value=value_15,
    )

class thermal_expansion_1(Group):
    """
    Orthotropic thermal expansion direction 1 value.
    """
    _version = '251'
    fluent_name = 'thermal-expansion-1'
    _python_name = 'thermal_expansion_1'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_29,
        value=value_15,
    )

class thermal_expansion_2(Group):
    """
    Orthotropic thermal expansion direction 2 value.
    """
    _version = '251'
    fluent_name = 'thermal-expansion-2'
    _python_name = 'thermal_expansion_2'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_29,
        value=value_15,
    )

class orthotropic_structure_te(Group):
    """
    Orthotropic structure thermal expansion settings.
    """
    _version = '251'
    fluent_name = 'orthotropic-structure-te'
    _python_name = 'orthotropic_structure_te'
    child_names = ['thermal_expansion_0', 'thermal_expansion_1', 'thermal_expansion_2']
    _child_classes = dict(
        thermal_expansion_0=thermal_expansion_0,
        thermal_expansion_1=thermal_expansion_1,
        thermal_expansion_2=thermal_expansion_2,
    )

class struct_thermal_expansion(Group):
    """
    Material property: struct-thermal-expansion.
    """
    _version = '251'
    fluent_name = 'struct-thermal-expansion'
    _python_name = 'struct_thermal_expansion'
    child_names = ['option', 'value', 'orthotropic_structure_te', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        orthotropic_structure_te=orthotropic_structure_te,
        user_defined_function=user_defined_function,
    )

class struct_damping_alpha(Group):
    """
    Material property: struct-damping-alpha.
    """
    _version = '251'
    fluent_name = 'struct-damping-alpha'
    _python_name = 'struct_damping_alpha'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class struct_damping_beta(Group):
    """
    Material property: struct-damping-beta.
    """
    _version = '251'
    fluent_name = 'struct-damping-beta'
    _python_name = 'struct_damping_beta'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class uds_diffusivity_1(Group):
    """
    Material property: uds-diffusivity.
    """
    _version = '251'
    fluent_name = 'uds-diffusivity'
    _python_name = 'uds_diffusivity'
    child_names = ['option', 'value', 'uds_diffusivities', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        uds_diffusivities=uds_diffusivities,
        user_defined_function=user_defined_function,
    )

class solid_child(Group):
    """
    'child_object_type' of solid.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'solid_child'
    child_names = ['name', 'chemical_formula', 'density', 'specific_heat', 'thermal_conductivity', 'atomic_number', 'absorption_coefficient', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'magnetic_permeability', 'struct_youngs_modulus', 'struct_poisson_ratio', 'struct_start_temperature', 'struct_thermal_expansion', 'struct_damping_alpha', 'struct_damping_beta', 'uds_diffusivity']
    _child_classes = dict(
        name=name_8,
        chemical_formula=chemical_formula,
        density=density_4,
        specific_heat=specific_heat_1,
        thermal_conductivity=thermal_conductivity_2,
        atomic_number=atomic_number,
        absorption_coefficient=absorption_coefficient,
        scattering_coefficient=scattering_coefficient,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        electric_conductivity=electric_conductivity_1,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        magnetic_permeability=magnetic_permeability,
        struct_youngs_modulus=struct_youngs_modulus,
        struct_poisson_ratio=struct_poisson_ratio,
        struct_start_temperature=struct_start_temperature,
        struct_thermal_expansion=struct_thermal_expansion,
        struct_damping_alpha=struct_damping_alpha,
        struct_damping_beta=struct_damping_beta,
        uds_diffusivity=uds_diffusivity_1,
    )

class solid(NamedObject[solid_child], CreatableNamedObjectMixin[solid_child]):
    """
    'solid' child.
    """
    _version = '251'
    fluent_name = 'solid'
    _python_name = 'solid'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = solid_child

class volumetric_species_child(Group):
    """
    'child_object_type' of volumetric_species.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'volumetric_species_child'
    child_names = ['name', 'chemical_formula', 'density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'molecular_weight', 'premix_laminar_speed', 'premix_critical_strain', 'premix_unburnt_temp', 'premix_unburnt_density', 'premix_heat_trans_coeff', 'premix_heat_of_comb', 'premix_unburnt_fuel_mf', 'premix_adiabatic_temp', 'therm_exp_coeff', 'characteristic_vibrational_temperature', 'absorption_coefficient', 'melting_heat', 'tsolidus', 'tliqidus', 'liquidus_slope', 'partition_coeff', 'eutectic_mf', 'solid_diffusion', 'solut_exp_coeff', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'formation_entropy', 'formation_enthalpy', 'reference_temperature', 'lennard_jones_length', 'lennard_jones_energy', 'thermal_accom_coefficient', 'velocity_accom_coefficient', 'degrees_of_freedom', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'magnetic_permeability', 'speed_of_sound', 'critical_temperature', 'critical_pressure', 'critical_volume', 'acentric_factor', 'latent_heat', 'saturation_pressure', 'vaporization_temperature', 'charge', 'uds_diffusivity']
    _child_classes = dict(
        name=name_8,
        chemical_formula=chemical_formula,
        density=density_3,
        viscosity=viscosity,
        specific_heat=specific_heat,
        thermal_conductivity=thermal_conductivity_1,
        molecular_weight=molecular_weight_3,
        premix_laminar_speed=premix_laminar_speed,
        premix_critical_strain=premix_critical_strain,
        premix_unburnt_temp=premix_unburnt_temp,
        premix_unburnt_density=premix_unburnt_density,
        premix_heat_trans_coeff=premix_heat_trans_coeff,
        premix_heat_of_comb=premix_heat_of_comb,
        premix_unburnt_fuel_mf=premix_unburnt_fuel_mf,
        premix_adiabatic_temp=premix_adiabatic_temp,
        therm_exp_coeff=therm_exp_coeff,
        characteristic_vibrational_temperature=characteristic_vibrational_temperature,
        absorption_coefficient=absorption_coefficient,
        melting_heat=melting_heat,
        tsolidus=tsolidus,
        tliqidus=tliqidus,
        liquidus_slope=liquidus_slope,
        partition_coeff=partition_coeff,
        eutectic_mf=eutectic_mf,
        solid_diffusion=solid_diffusion,
        solut_exp_coeff=solut_exp_coeff,
        scattering_coefficient=scattering_coefficient,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        formation_entropy=formation_entropy,
        formation_enthalpy=formation_enthalpy,
        reference_temperature=reference_temperature,
        lennard_jones_length=lennard_jones_length,
        lennard_jones_energy=lennard_jones_energy,
        thermal_accom_coefficient=thermal_accom_coefficient,
        velocity_accom_coefficient=velocity_accom_coefficient,
        degrees_of_freedom=degrees_of_freedom,
        electric_conductivity=electric_conductivity,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        magnetic_permeability=magnetic_permeability,
        speed_of_sound=speed_of_sound,
        critical_temperature=critical_temperature,
        critical_pressure=critical_pressure,
        critical_volume=critical_volume,
        acentric_factor=acentric_factor,
        latent_heat=latent_heat,
        saturation_pressure=saturation_pressure,
        vaporization_temperature=vaporization_temperature,
        charge=charge,
        uds_diffusivity=uds_diffusivity,
    )

class volumetric_species(NamedObject[volumetric_species_child], CreatableNamedObjectMixin[volumetric_species_child]):
    """
    'volumetric_species' child.
    """
    _version = '251'
    fluent_name = 'volumetric-species'
    _python_name = 'volumetric_species'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = volumetric_species_child

class volumetric(StringList, AllowedValuesMixin):
    """
    Volumetric species.
    """
    _version = '251'
    fluent_name = 'volumetric'
    _python_name = 'volumetric'

class site(StringList, AllowedValuesMixin):
    """
    Site species.
    """
    _version = '251'
    fluent_name = 'site'
    _python_name = 'site'

class solid_1(StringList, AllowedValuesMixin):
    """
    Solid species.
    """
    _version = '251'
    fluent_name = 'solid'
    _python_name = 'solid'

class last_species(String, AllowedValuesMixin):
    """
    Assign the last species in mixture. It should be the most abundant and it's transport equation is not solved.
    """
    _version = '251'
    fluent_name = 'last-species'
    _python_name = 'last_species'

class material_3_child(Group):
    """
    'child_object_type' of material.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'material_child'
    child_names = ['name', 'chemical_formula', 'density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'molecular_weight', 'premix_laminar_speed', 'premix_critical_strain', 'premix_unburnt_temp', 'premix_unburnt_density', 'premix_heat_trans_coeff', 'premix_heat_of_comb', 'premix_unburnt_fuel_mf', 'premix_adiabatic_temp', 'therm_exp_coeff', 'characteristic_vibrational_temperature', 'absorption_coefficient', 'melting_heat', 'tsolidus', 'tliqidus', 'liquidus_slope', 'partition_coeff', 'eutectic_mf', 'solid_diffusion', 'solut_exp_coeff', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'formation_entropy', 'formation_enthalpy', 'reference_temperature', 'lennard_jones_length', 'lennard_jones_energy', 'thermal_accom_coefficient', 'velocity_accom_coefficient', 'degrees_of_freedom', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'magnetic_permeability', 'speed_of_sound', 'critical_temperature', 'critical_pressure', 'critical_volume', 'acentric_factor', 'latent_heat', 'saturation_pressure', 'vaporization_temperature', 'charge', 'uds_diffusivity']
    _child_classes = dict(
        name=name_8,
        chemical_formula=chemical_formula,
        density=density_3,
        viscosity=viscosity,
        specific_heat=specific_heat,
        thermal_conductivity=thermal_conductivity_1,
        molecular_weight=molecular_weight_3,
        premix_laminar_speed=premix_laminar_speed,
        premix_critical_strain=premix_critical_strain,
        premix_unburnt_temp=premix_unburnt_temp,
        premix_unburnt_density=premix_unburnt_density,
        premix_heat_trans_coeff=premix_heat_trans_coeff,
        premix_heat_of_comb=premix_heat_of_comb,
        premix_unburnt_fuel_mf=premix_unburnt_fuel_mf,
        premix_adiabatic_temp=premix_adiabatic_temp,
        therm_exp_coeff=therm_exp_coeff,
        characteristic_vibrational_temperature=characteristic_vibrational_temperature,
        absorption_coefficient=absorption_coefficient,
        melting_heat=melting_heat,
        tsolidus=tsolidus,
        tliqidus=tliqidus,
        liquidus_slope=liquidus_slope,
        partition_coeff=partition_coeff,
        eutectic_mf=eutectic_mf,
        solid_diffusion=solid_diffusion,
        solut_exp_coeff=solut_exp_coeff,
        scattering_coefficient=scattering_coefficient,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        formation_entropy=formation_entropy,
        formation_enthalpy=formation_enthalpy,
        reference_temperature=reference_temperature,
        lennard_jones_length=lennard_jones_length,
        lennard_jones_energy=lennard_jones_energy,
        thermal_accom_coefficient=thermal_accom_coefficient,
        velocity_accom_coefficient=velocity_accom_coefficient,
        degrees_of_freedom=degrees_of_freedom,
        electric_conductivity=electric_conductivity,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        magnetic_permeability=magnetic_permeability,
        speed_of_sound=speed_of_sound,
        critical_temperature=critical_temperature,
        critical_pressure=critical_pressure,
        critical_volume=critical_volume,
        acentric_factor=acentric_factor,
        latent_heat=latent_heat,
        saturation_pressure=saturation_pressure,
        vaporization_temperature=vaporization_temperature,
        charge=charge,
        uds_diffusivity=uds_diffusivity,
    )

class material_3(NamedObject[material_3_child], CreatableNamedObjectMixin[material_3_child]):
    """
    Mixture species materials.
    """
    _version = '251'
    fluent_name = 'material'
    _python_name = 'material'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = material_3_child

class species_3(Group):
    """
    Mixture species.
    """
    _version = '251'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['volumetric_species', 'volumetric', 'site', 'solid', 'last_species', 'material']
    _child_classes = dict(
        volumetric_species=volumetric_species,
        volumetric=volumetric,
        site=site,
        solid=solid_1,
        last_species=last_species,
        material=material_3,
    )

class reactions_1(Group):
    """
    Material property: reactions.
    """
    _version = '251'
    fluent_name = 'reactions'
    _python_name = 'reactions'
    child_names = ['option']
    _child_classes = dict(
        option=option_26,
    )

class reaction_mechs(Group):
    """
    Material property: reaction-mechs.
    """
    _version = '251'
    fluent_name = 'reaction-mechs'
    _python_name = 'reaction_mechs'
    child_names = ['option']
    _child_classes = dict(
        option=option_26,
    )

class composition_type(String, AllowedValuesMixin):
    """
    Species composition fraction type.
    """
    _version = '251'
    fluent_name = 'composition-type'
    _python_name = 'composition_type'

class species_fractions(RealList):
    """
    Species composition fractions.
    """
    _version = '251'
    fluent_name = 'species-fractions'
    _python_name = 'species_fractions'

class real_gas_nist_mixture(Group):
    """
    NIST real gas mixture model settings.
    """
    _version = '251'
    fluent_name = 'real-gas-nist-mixture'
    _python_name = 'real_gas_nist_mixture'
    child_names = ['lookup_table', 'composition_type', 'species_fractions', 'pressure_points', 'pressure_minimum', 'pressure_maximum', 'temperature_points', 'temperature_minimum', 'temperature_maximum']
    _child_classes = dict(
        lookup_table=lookup_table,
        composition_type=composition_type,
        species_fractions=species_fractions,
        pressure_points=pressure_points,
        pressure_minimum=pressure_minimum,
        pressure_maximum=pressure_maximum,
        temperature_points=temperature_points,
        temperature_minimum=temperature_minimum,
        temperature_maximum=temperature_maximum,
    )

class density_5(Group):
    """
    Material property: density.
    """
    _version = '251'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'real_gas_nist_mixture', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        real_gas_nist_mixture=real_gas_nist_mixture,
        user_defined_function=user_defined_function,
    )

class viscosity_1(Group):
    """
    Material property: viscosity.
    """
    _version = '251'
    fluent_name = 'viscosity'
    _python_name = 'viscosity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'power_law', 'sutherland', 'user_defined_function', 'real_gas_nist_mixture']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        power_law=power_law,
        sutherland=sutherland,
        user_defined_function=user_defined_function,
        real_gas_nist_mixture=real_gas_nist_mixture,
    )

class specific_heat_2(Group):
    """
    Material property: specific-heat.
    """
    _version = '251'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'nasa_9_piecewise_polynomial', 'real_gas_nist_mixture', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        nasa_9_piecewise_polynomial=nasa_9_piecewise_polynomial,
        real_gas_nist_mixture=real_gas_nist_mixture,
        user_defined_function=user_defined_function,
    )

class thermal_conductivity_3(Group):
    """
    Material property: thermal-conductivity.
    """
    _version = '251'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'user_defined_function', 'real_gas_nist_mixture']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        user_defined_function=user_defined_function,
        real_gas_nist_mixture=real_gas_nist_mixture,
    )

class premix_laminar_thickness(Group):
    """
    Material property: premix-laminar-thickness.
    """
    _version = '251'
    fluent_name = 'premix-laminar-thickness'
    _python_name = 'premix_laminar_thickness'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
    )

class premix_unburnt_temp_1(Group):
    """
    Material property: premix-unburnt-temp.
    """
    _version = '251'
    fluent_name = 'premix-unburnt-temp'
    _python_name = 'premix_unburnt_temp'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        user_defined_function=user_defined_function,
    )

class premix_unburnt_cp(Group):
    """
    Material property: premix-unburnt-cp.
    """
    _version = '251'
    fluent_name = 'premix-unburnt-cp'
    _python_name = 'premix_unburnt_cp'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        user_defined_function=user_defined_function,
    )

class premix_unburnt_density_1(Group):
    """
    Material property: premix-unburnt-density.
    """
    _version = '251'
    fluent_name = 'premix-unburnt-density'
    _python_name = 'premix_unburnt_density'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        user_defined_function=user_defined_function,
    )

class premix_heat_trans_coeff_1(Group):
    """
    Material property: premix-heat-trans-coeff.
    """
    _version = '251'
    fluent_name = 'premix-heat-trans-coeff'
    _python_name = 'premix_heat_trans_coeff'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        user_defined_function=user_defined_function,
    )

class path_length(Real):
    """
    WSGGM user specified path length.
    """
    _version = '251'
    fluent_name = 'path-length'
    _python_name = 'path_length'

class absorption_coefficient_1(Group):
    """
    Material property: absorption-coefficient.
    """
    _version = '251'
    fluent_name = 'absorption-coefficient'
    _python_name = 'absorption_coefficient'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'expression', 'path_length', 'gray_band_coefficients', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        expression=expression_6,
        path_length=path_length,
        gray_band_coefficients=gray_band_coefficients,
        user_defined_function=user_defined_function,
    )

class lewis_number(Real):
    """
    Lewis number.
    """
    _version = '251'
    fluent_name = 'lewis-number'
    _python_name = 'lewis_number'

class value_16(Real):
    """
    Constant mass diffusivity.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class species_diffusivity_child(Group):
    """
    'child_object_type' of species_diffusivity.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'species_diffusivity_child'
    child_names = ['option', 'value', 'polynomial']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        polynomial=polynomial_1,
    )

class species_diffusivity(NamedObject[species_diffusivity_child], CreatableNamedObjectMixin[species_diffusivity_child]):
    """
    Mixture species mass diffusion coeffients.
    """
    _version = '251'
    fluent_name = 'species-diffusivity'
    _python_name = 'species_diffusivity'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_diffusivity_child

class multicomponent_child_child(Group):
    """
    'child_object_type' of child_object_type.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'multicomponent_child_child'
    child_names = ['option', 'value', 'polynomial']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        polynomial=polynomial_1,
    )

class multicomponent_child(NamedObject[multicomponent_child_child], CreatableNamedObjectMixin[multicomponent_child_child]):
    """
    'child_object_type' of multicomponent.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'multicomponent_child'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = multicomponent_child_child

class multicomponent(NamedObject[multicomponent_child], CreatableNamedObjectMixin[multicomponent_child]):
    """
    First species.
    """
    _version = '251'
    fluent_name = 'multicomponent'
    _python_name = 'multicomponent'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = multicomponent_child

class mass_diffusivity(Group):
    """
    Material property: mass-diffusivity.
    """
    _version = '251'
    fluent_name = 'mass-diffusivity'
    _python_name = 'mass_diffusivity'
    child_names = ['option', 'lewis_number', 'value', 'species_diffusivity', 'multicomponent', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        lewis_number=lewis_number,
        value=value_16,
        species_diffusivity=species_diffusivity,
        multicomponent=multicomponent,
        user_defined_function=user_defined_function,
    )

class thermal_diffusivity(Group):
    """
    Material property: thermal-diffusivity.
    """
    _version = '251'
    fluent_name = 'thermal-diffusivity'
    _python_name = 'thermal_diffusivity'
    child_names = ['option', 'species_diffusivity', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        species_diffusivity=species_diffusivity,
        user_defined_function=user_defined_function,
    )

class tmelt(Group):
    """
    Material property: tmelt.
    """
    _version = '251'
    fluent_name = 'tmelt'
    _python_name = 'tmelt'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
    )

class eutectic_temp(Group):
    """
    Material property: eutectic-temp.
    """
    _version = '251'
    fluent_name = 'eutectic-temp'
    _python_name = 'eutectic_temp'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class diffusion_collision_integral(RealList):
    """
    'diffusion_collision_integral' child.
    """
    _version = '251'
    fluent_name = 'diffusion-collision-integral'
    _python_name = 'diffusion_collision_integral'

class viscosity_collision_integral(RealList):
    """
    'viscosity_collision_integral' child.
    """
    _version = '251'
    fluent_name = 'viscosity-collision-integral'
    _python_name = 'viscosity_collision_integral'

class neutral_involved_interaction(Group):
    """
    'neutral_involved_interaction' child.
    """
    _version = '251'
    fluent_name = 'neutral-involved-interaction'
    _python_name = 'neutral_involved_interaction'
    child_names = ['diffusion_collision_integral', 'viscosity_collision_integral']
    _child_classes = dict(
        diffusion_collision_integral=diffusion_collision_integral,
        viscosity_collision_integral=viscosity_collision_integral,
    )

class charged_particle_interaction(String, AllowedValuesMixin):
    """
    'charged_particle_interaction' child.
    """
    _version = '251'
    fluent_name = 'charged-particle-interaction'
    _python_name = 'charged_particle_interaction'

class cross_section_multicomponent_child_child(Group):
    """
    'child_object_type' of child_object_type.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'cross_section_multicomponent_child_child'
    child_names = ['option', 'neutral_involved_interaction', 'charged_particle_interaction']
    _child_classes = dict(
        option=option_26,
        neutral_involved_interaction=neutral_involved_interaction,
        charged_particle_interaction=charged_particle_interaction,
    )

class cross_section_multicomponent_child(NamedObject[cross_section_multicomponent_child_child], CreatableNamedObjectMixin[cross_section_multicomponent_child_child]):
    """
    'child_object_type' of cross_section_multicomponent.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'cross_section_multicomponent_child'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = cross_section_multicomponent_child_child

class cross_section_multicomponent(NamedObject[cross_section_multicomponent_child], CreatableNamedObjectMixin[cross_section_multicomponent_child]):
    """
    'cross_section_multicomponent' child.
    """
    _version = '251'
    fluent_name = 'cross-section-multicomponent'
    _python_name = 'cross_section_multicomponent'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = cross_section_multicomponent_child

class collision_cross_section(Group):
    """
    Material property: collision-cross-section.
    """
    _version = '251'
    fluent_name = 'collision-cross-section'
    _python_name = 'collision_cross_section'
    child_names = ['option', 'cross_section_multicomponent']
    _child_classes = dict(
        option=option_26,
        cross_section_multicomponent=cross_section_multicomponent,
    )

class mixture_child(Group):
    """
    'child_object_type' of mixture.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'mixture_child'
    child_names = ['name', 'chemical_formula', 'species', 'reactions', 'reaction_mechs', 'density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'premix_laminar_speed', 'premix_laminar_thickness', 'premix_unburnt_temp', 'premix_unburnt_cp', 'premix_unburnt_density', 'premix_heat_trans_coeff', 'premix_critical_strain', 'therm_exp_coeff', 'absorption_coefficient', 'scattering_coefficient', 'scattering_phase_function', 'refractive_index', 'mass_diffusivity', 'thermal_diffusivity', 'tmelt', 'melting_heat', 'eutectic_temp', 'speed_of_sound', 'critical_temperature', 'critical_pressure', 'critical_volume', 'acentric_factor', 'electric_conductivity', 'dual_electric_conductivity', 'lithium_diffusivity', 'collision_cross_section', 'uds_diffusivity']
    _child_classes = dict(
        name=name_8,
        chemical_formula=chemical_formula,
        species=species_3,
        reactions=reactions_1,
        reaction_mechs=reaction_mechs,
        density=density_5,
        viscosity=viscosity_1,
        specific_heat=specific_heat_2,
        thermal_conductivity=thermal_conductivity_3,
        premix_laminar_speed=premix_laminar_speed,
        premix_laminar_thickness=premix_laminar_thickness,
        premix_unburnt_temp=premix_unburnt_temp_1,
        premix_unburnt_cp=premix_unburnt_cp,
        premix_unburnt_density=premix_unburnt_density_1,
        premix_heat_trans_coeff=premix_heat_trans_coeff_1,
        premix_critical_strain=premix_critical_strain,
        therm_exp_coeff=therm_exp_coeff,
        absorption_coefficient=absorption_coefficient_1,
        scattering_coefficient=scattering_coefficient,
        scattering_phase_function=scattering_phase_function,
        refractive_index=refractive_index,
        mass_diffusivity=mass_diffusivity,
        thermal_diffusivity=thermal_diffusivity,
        tmelt=tmelt,
        melting_heat=melting_heat,
        eutectic_temp=eutectic_temp,
        speed_of_sound=speed_of_sound,
        critical_temperature=critical_temperature,
        critical_pressure=critical_pressure,
        critical_volume=critical_volume,
        acentric_factor=acentric_factor,
        electric_conductivity=electric_conductivity,
        dual_electric_conductivity=dual_electric_conductivity,
        lithium_diffusivity=lithium_diffusivity,
        collision_cross_section=collision_cross_section,
        uds_diffusivity=uds_diffusivity,
    )

class mixture(NamedObject[mixture_child], CreatableNamedObjectMixin[mixture_child]):
    """
    'mixture' child.
    """
    _version = '251'
    fluent_name = 'mixture'
    _python_name = 'mixture'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = mixture_child

class density_6(Group):
    """
    Material property: density.
    """
    _version = '251'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'compressible_liquid', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        compressible_liquid=compressible_liquid,
        user_defined_function=user_defined_function,
    )

class viscosity_2(Group):
    """
    Material property: viscosity.
    """
    _version = '251'
    fluent_name = 'viscosity'
    _python_name = 'viscosity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class specific_heat_3(Group):
    """
    Material property: specific-heat.
    """
    _version = '251'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'nasa_9_piecewise_polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        nasa_9_piecewise_polynomial=nasa_9_piecewise_polynomial,
        user_defined_function=user_defined_function,
    )

class thermal_conductivity_4(Group):
    """
    Material property: thermal-conductivity.
    """
    _version = '251'
    fluent_name = 'thermal-conductivity'
    _python_name = 'thermal_conductivity'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class thermophoretic_co(Group):
    """
    Material property: thermophoretic-co.
    """
    _version = '251'
    fluent_name = 'thermophoretic-co'
    _python_name = 'thermophoretic_co'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class scattering_factor(Group):
    """
    Material property: scattering-factor.
    """
    _version = '251'
    fluent_name = 'scattering-factor'
    _python_name = 'scattering_factor'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
    )

class emissivity(Group):
    """
    Material property: emissivity.
    """
    _version = '251'
    fluent_name = 'emissivity'
    _python_name = 'emissivity'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
    )

class dpm_surften(Group):
    """
    Material property: dpm-surften.
    """
    _version = '251'
    fluent_name = 'dpm-surften'
    _python_name = 'dpm_surften'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class electric_conductivity_2(Group):
    """
    Material property: electric-conductivity.
    """
    _version = '251'
    fluent_name = 'electric-conductivity'
    _python_name = 'electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class dual_electric_conductivity_1(Group):
    """
    Material property: dual-electric-conductivity.
    """
    _version = '251'
    fluent_name = 'dual-electric-conductivity'
    _python_name = 'dual_electric_conductivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class charge_density(Group):
    """
    Material property: charge-density.
    """
    _version = '251'
    fluent_name = 'charge-density'
    _python_name = 'charge_density'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
    )

class inert_particle_child(Group):
    """
    'child_object_type' of inert_particle.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'inert_particle_child'
    child_names = ['name', 'chemical_formula', 'density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'thermophoretic_co', 'scattering_factor', 'emissivity', 'dpm_surften', 'electric_conductivity', 'dual_electric_conductivity', 'magnetic_permeability', 'charge_density']
    _child_classes = dict(
        name=name_8,
        chemical_formula=chemical_formula,
        density=density_6,
        viscosity=viscosity_2,
        specific_heat=specific_heat_3,
        thermal_conductivity=thermal_conductivity_4,
        thermophoretic_co=thermophoretic_co,
        scattering_factor=scattering_factor,
        emissivity=emissivity,
        dpm_surften=dpm_surften,
        electric_conductivity=electric_conductivity_2,
        dual_electric_conductivity=dual_electric_conductivity_1,
        magnetic_permeability=magnetic_permeability,
        charge_density=charge_density,
    )

class inert_particle(NamedObject[inert_particle_child], CreatableNamedObjectMixin[inert_particle_child]):
    """
    'inert_particle' child.
    """
    _version = '251'
    fluent_name = 'inert-particle'
    _python_name = 'inert_particle'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = inert_particle_child

class use_vapor_species_heat_capacity(Boolean):
    """
    Specifies whether to use specific heat of evaporating species in boiling law.
    """
    _version = '251'
    fluent_name = 'use-vapor-species-heat-capacity?'
    _python_name = 'use_vapor_species_heat_capacity'

class diffusion_controlled(Group):
    """
    Diffusion controlled boiling model settings.
    """
    _version = '251'
    fluent_name = 'diffusion-controlled'
    _python_name = 'diffusion_controlled'
    child_names = ['use_vapor_species_heat_capacity']
    _child_classes = dict(
        use_vapor_species_heat_capacity=use_vapor_species_heat_capacity,
    )

class variable_lewis_number(Boolean):
    """
    Specifies whether to use variable lewis number formulation.
    """
    _version = '251'
    fluent_name = 'variable-lewis-number?'
    _python_name = 'variable_lewis_number'

class convection_diffusion_controlled(Group):
    """
    Convection diffusion controlled vaporization model settings.
    """
    _version = '251'
    fluent_name = 'convection-diffusion-controlled'
    _python_name = 'convection_diffusion_controlled'
    child_names = ['variable_lewis_number', 'use_vapor_species_heat_capacity']
    _child_classes = dict(
        variable_lewis_number=variable_lewis_number,
        use_vapor_species_heat_capacity=use_vapor_species_heat_capacity,
    )

class vaporization_model(Group):
    """
    Material property: vaporization-model.
    """
    _version = '251'
    fluent_name = 'vaporization-model'
    _python_name = 'vaporization_model'
    child_names = ['option', 'diffusion_controlled', 'convection_diffusion_controlled']
    _child_classes = dict(
        option=option_26,
        diffusion_controlled=diffusion_controlled,
        convection_diffusion_controlled=convection_diffusion_controlled,
    )

class pre_exponential_factor(Real):
    """
    Pre-exponential factor.
    """
    _version = '251'
    fluent_name = 'pre-exponential-factor'
    _python_name = 'pre_exponential_factor'

class activation_energy_3(Real):
    """
    Activation energy.
    """
    _version = '251'
    fluent_name = 'activation-energy'
    _python_name = 'activation_energy'

class single_rate(Group):
    """
    Single rate model settings.
    """
    _version = '251'
    fluent_name = 'single-rate'
    _python_name = 'single_rate'
    child_names = ['pre_exponential_factor', 'activation_energy']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy_3,
    )

class particle_thermolysis_rate(Group):
    """
    Particle thermolysis rate settings.
    """
    _version = '251'
    fluent_name = 'particle-thermolysis-rate'
    _python_name = 'particle_thermolysis_rate'
    child_names = ['pre_exponential_factor', 'activation_energy']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy_3,
    )

class film_thermolysis_rate(Group):
    """
    Film thermolysis rate settings.
    """
    _version = '251'
    fluent_name = 'film-thermolysis-rate'
    _python_name = 'film_thermolysis_rate'
    child_names = ['pre_exponential_factor', 'activation_energy']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy_3,
    )

class secondary_rate(Group):
    """
    Secondary rate model settings.
    """
    _version = '251'
    fluent_name = 'secondary-rate'
    _python_name = 'secondary_rate'
    child_names = ['particle_thermolysis_rate', 'film_thermolysis_rate']
    _child_classes = dict(
        particle_thermolysis_rate=particle_thermolysis_rate,
        film_thermolysis_rate=film_thermolysis_rate,
    )

class thermolysis_model(Group):
    """
    Material property: thermolysis-model.
    """
    _version = '251'
    fluent_name = 'thermolysis-model'
    _python_name = 'thermolysis_model'
    child_names = ['option', 'single_rate', 'secondary_rate', 'value']
    _child_classes = dict(
        option=option_26,
        single_rate=single_rate,
        secondary_rate=secondary_rate,
        value=value_15,
    )

class latent_heat_1(Group):
    """
    Material property: latent-heat.
    """
    _version = '251'
    fluent_name = 'latent-heat'
    _python_name = 'latent_heat'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
    )

class volatile_fraction(Group):
    """
    Material property: volatile-fraction.
    """
    _version = '251'
    fluent_name = 'volatile-fraction'
    _python_name = 'volatile_fraction'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class heat_of_pyrolysis(Group):
    """
    Material property: heat-of-pyrolysis.
    """
    _version = '251'
    fluent_name = 'heat-of-pyrolysis'
    _python_name = 'heat_of_pyrolysis'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class averaging_coefficient(Real):
    """
    Averaging coefficient.
    """
    _version = '251'
    fluent_name = 'averaging-coefficient'
    _python_name = 'averaging_coefficient'

class binary_diffusivity_1(Group):
    """
    Binary diffusivity method.
    """
    _version = '251'
    fluent_name = 'binary-diffusivity'
    _python_name = 'binary_diffusivity'
    child_names = ['option', 'value', 'expression', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        expression=expression_6,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class film_averaged(Group):
    """
    Film binary diffusivity film averaged method settings.
    """
    _version = '251'
    fluent_name = 'film-averaged'
    _python_name = 'film_averaged'
    child_names = ['averaging_coefficient', 'binary_diffusivity']
    _child_classes = dict(
        averaging_coefficient=averaging_coefficient,
        binary_diffusivity=binary_diffusivity_1,
    )

class binary_diffusivity(Group):
    """
    Material property: binary-diffusivity.
    """
    _version = '251'
    fluent_name = 'binary-diffusivity'
    _python_name = 'binary_diffusivity'
    child_names = ['option', 'value', 'film_averaged', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        film_averaged=film_averaged,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class diffusivity_reference_pressure(Group):
    """
    Material property: diffusivity-reference-pressure.
    """
    _version = '251'
    fluent_name = 'diffusivity-reference-pressure'
    _python_name = 'diffusivity_reference_pressure'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class averaging_coefficient_t(Group):
    """
    Material property: averaging-coefficient-t.
    """
    _version = '251'
    fluent_name = 'averaging-coefficient-t'
    _python_name = 'averaging_coefficient_t'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class averaging_coefficient_y(Group):
    """
    Material property: averaging-coefficient-y.
    """
    _version = '251'
    fluent_name = 'averaging-coefficient-y'
    _python_name = 'averaging_coefficient_y'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class vapor_pressure(Group):
    """
    Material property: vapor-pressure.
    """
    _version = '251'
    fluent_name = 'vapor-pressure'
    _python_name = 'vapor_pressure'
    child_names = ['option', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'value', 'rgp_table', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        value=value_15,
        rgp_table=rgp_table,
        user_defined_function=user_defined_function,
    )

class molecular_weight_4(Group):
    """
    Material property: molecular-weight.
    """
    _version = '251'
    fluent_name = 'molecular-weight'
    _python_name = 'molecular_weight'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class boiling_point(Group):
    """
    Material property: boiling-point.
    """
    _version = '251'
    fluent_name = 'boiling-point'
    _python_name = 'boiling_point'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
    )

class scattering_factor_1(Group):
    """
    Material property: scattering-factor.
    """
    _version = '251'
    fluent_name = 'scattering-factor'
    _python_name = 'scattering_factor'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class emissivity_1(Group):
    """
    Material property: emissivity.
    """
    _version = '251'
    fluent_name = 'emissivity'
    _python_name = 'emissivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class dpm_surften_1(Group):
    """
    Material property: dpm-surften.
    """
    _version = '251'
    fluent_name = 'dpm-surften'
    _python_name = 'dpm_surften'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'rgp_table', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        rgp_table=rgp_table,
        user_defined_function=user_defined_function,
    )

class droplet_particle_child(Group):
    """
    'child_object_type' of droplet_particle.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'droplet_particle_child'
    child_names = ['name', 'chemical_formula', 'density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'vaporization_model', 'thermolysis_model', 'latent_heat', 'volatile_fraction', 'heat_of_pyrolysis', 'binary_diffusivity', 'diffusivity_reference_pressure', 'averaging_coefficient_t', 'averaging_coefficient_y', 'vapor_pressure', 'molecular_weight', 'vaporization_temperature', 'boiling_point', 'thermophoretic_co', 'scattering_factor', 'emissivity', 'dpm_surften', 'electric_conductivity', 'dual_electric_conductivity', 'magnetic_permeability', 'charge_density', 'formation_entropy', 'formation_enthalpy', 'reference_temperature']
    _child_classes = dict(
        name=name_8,
        chemical_formula=chemical_formula,
        density=density_6,
        viscosity=viscosity_2,
        specific_heat=specific_heat_3,
        thermal_conductivity=thermal_conductivity_4,
        vaporization_model=vaporization_model,
        thermolysis_model=thermolysis_model,
        latent_heat=latent_heat_1,
        volatile_fraction=volatile_fraction,
        heat_of_pyrolysis=heat_of_pyrolysis,
        binary_diffusivity=binary_diffusivity,
        diffusivity_reference_pressure=diffusivity_reference_pressure,
        averaging_coefficient_t=averaging_coefficient_t,
        averaging_coefficient_y=averaging_coefficient_y,
        vapor_pressure=vapor_pressure,
        molecular_weight=molecular_weight_4,
        vaporization_temperature=vaporization_temperature,
        boiling_point=boiling_point,
        thermophoretic_co=thermophoretic_co,
        scattering_factor=scattering_factor_1,
        emissivity=emissivity_1,
        dpm_surften=dpm_surften_1,
        electric_conductivity=electric_conductivity_2,
        dual_electric_conductivity=dual_electric_conductivity_1,
        magnetic_permeability=magnetic_permeability,
        charge_density=charge_density,
        formation_entropy=formation_entropy,
        formation_enthalpy=formation_enthalpy,
        reference_temperature=reference_temperature,
    )

class droplet_particle(NamedObject[droplet_particle_child], CreatableNamedObjectMixin[droplet_particle_child]):
    """
    'droplet_particle' child.
    """
    _version = '251'
    fluent_name = 'droplet-particle'
    _python_name = 'droplet_particle'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = droplet_particle_child

class density_7(Group):
    """
    Material property: density.
    """
    _version = '251'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class combustible_fraction(Group):
    """
    Material property: combustible-fraction.
    """
    _version = '251'
    fluent_name = 'combustible-fraction'
    _python_name = 'combustible_fraction'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class swelling_coefficient(Group):
    """
    Material property: swelling-coefficient.
    """
    _version = '251'
    fluent_name = 'swelling-coefficient'
    _python_name = 'swelling_coefficient'
    child_names = ['option', 'value', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        user_defined_function=user_defined_function,
    )

class burn_stoichiometry(Group):
    """
    Material property: burn-stoichiometry.
    """
    _version = '251'
    fluent_name = 'burn-stoichiometry'
    _python_name = 'burn_stoichiometry'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class binary_diffusivity_2(Group):
    """
    Material property: binary-diffusivity.
    """
    _version = '251'
    fluent_name = 'binary-diffusivity'
    _python_name = 'binary_diffusivity'
    child_names = ['option', 'value', 'piecewise_linear', 'piecewise_polynomial', 'polynomial', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        piecewise_linear=piecewise_linear_1,
        piecewise_polynomial=piecewise_polynomial,
        polynomial=polynomial_1,
        user_defined_function=user_defined_function,
    )

class burn_hreact(Group):
    """
    Material property: burn-hreact.
    """
    _version = '251'
    fluent_name = 'burn-hreact'
    _python_name = 'burn_hreact'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class burn_hreact_fraction(Group):
    """
    Material property: burn-hreact-fraction.
    """
    _version = '251'
    fluent_name = 'burn-hreact-fraction'
    _python_name = 'burn_hreact_fraction'
    child_names = ['option', 'value']
    _child_classes = dict(
        option=option_26,
        value=value_15,
    )

class weighting_factor(Real):
    """
    Weighting factor.
    """
    _version = '251'
    fluent_name = 'weighting-factor'
    _python_name = 'weighting_factor'

class first_rate(Group):
    """
    First rate settings.
    """
    _version = '251'
    fluent_name = 'first-rate'
    _python_name = 'first_rate'
    child_names = ['pre_exponential_factor', 'activation_energy', 'weighting_factor']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy_3,
        weighting_factor=weighting_factor,
    )

class second_rate(Group):
    """
    Second rate settings.
    """
    _version = '251'
    fluent_name = 'second-rate'
    _python_name = 'second_rate'
    child_names = ['pre_exponential_factor', 'activation_energy', 'weighting_factor']
    _child_classes = dict(
        pre_exponential_factor=pre_exponential_factor,
        activation_energy=activation_energy_3,
        weighting_factor=weighting_factor,
    )

class two_competing_rates(Group):
    """
    Two competing rate model settings.
    """
    _version = '251'
    fluent_name = 'two-competing-rates'
    _python_name = 'two_competing_rates'
    child_names = ['first_rate', 'second_rate']
    _child_classes = dict(
        first_rate=first_rate,
        second_rate=second_rate,
    )

class initial_fraction_of_bridges_in_coal_lattice(Real):
    """
    Initial fraction of bridges in coal lattice.
    """
    _version = '251'
    fluent_name = 'initial-fraction-of-bridges-in-coal-lattice'
    _python_name = 'initial_fraction_of_bridges_in_coal_lattice'

class initial_fraction_of_char_bridges(Real):
    """
    Initial fraction of char bridges.
    """
    _version = '251'
    fluent_name = 'initial-fraction-of-char-bridges'
    _python_name = 'initial_fraction_of_char_bridges'

class lattice_coordination_number(Real):
    """
    Lattice coordination number (sigma+1).
    """
    _version = '251'
    fluent_name = 'lattice-coordination-number'
    _python_name = 'lattice_coordination_number'

class cluster_molecular_weight(Real):
    """
    Cluster molecular weight.
    """
    _version = '251'
    fluent_name = 'cluster-molecular-weight'
    _python_name = 'cluster_molecular_weight'

class side_chain_molecular_weight(Real):
    """
    Side chain molecular weight.
    """
    _version = '251'
    fluent_name = 'side-chain-molecular-weight'
    _python_name = 'side_chain_molecular_weight'

class cpd_model(Group):
    """
    CPD Model settings.
    """
    _version = '251'
    fluent_name = 'cpd-model'
    _python_name = 'cpd_model'
    child_names = ['initial_fraction_of_bridges_in_coal_lattice', 'initial_fraction_of_char_bridges', 'lattice_coordination_number', 'cluster_molecular_weight', 'side_chain_molecular_weight']
    _child_classes = dict(
        initial_fraction_of_bridges_in_coal_lattice=initial_fraction_of_bridges_in_coal_lattice,
        initial_fraction_of_char_bridges=initial_fraction_of_char_bridges,
        lattice_coordination_number=lattice_coordination_number,
        cluster_molecular_weight=cluster_molecular_weight,
        side_chain_molecular_weight=side_chain_molecular_weight,
    )

class devolatilization_model(Group):
    """
    Material property: devolatilization-model.
    """
    _version = '251'
    fluent_name = 'devolatilization-model'
    _python_name = 'devolatilization_model'
    child_names = ['option', 'value', 'single_rate', 'two_competing_rates', 'cpd_model']
    _child_classes = dict(
        option=option_26,
        value=value_15,
        single_rate=single_rate,
        two_competing_rates=two_competing_rates,
        cpd_model=cpd_model,
    )

class option_30(String, AllowedValuesMixin):
    """
    CBK combustion model method.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class char_intrinsic_reactivity(Real):
    """
    Char intrinsic reactivity.
    """
    _version = '251'
    fluent_name = 'char-intrinsic-reactivity'
    _python_name = 'char_intrinsic_reactivity'

class carbon_content_percentage(Real):
    """
    Carbon content %(DAF) correlation.
    """
    _version = '251'
    fluent_name = 'carbon-content-percentage'
    _python_name = 'carbon_content_percentage'

class cbk(Group):
    """
    CBK combustion model settings.
    """
    _version = '251'
    fluent_name = 'cbk'
    _python_name = 'cbk'
    child_names = ['option', 'char_intrinsic_reactivity', 'carbon_content_percentage']
    _child_classes = dict(
        option=option_30,
        char_intrinsic_reactivity=char_intrinsic_reactivity,
        carbon_content_percentage=carbon_content_percentage,
    )

class diffusion_rate_constant(Real):
    """
    Mass diffusion-limited rate constant.
    """
    _version = '251'
    fluent_name = 'diffusion-rate-constant'
    _python_name = 'diffusion_rate_constant'

class pre_exponential_factor_1(Real):
    """
    Kinetics-limited rate pre-exponential factor.
    """
    _version = '251'
    fluent_name = 'pre-exponential-factor'
    _python_name = 'pre_exponential_factor'

class activation_energy_4(Real):
    """
    Kinetics-limited rate activation energy.
    """
    _version = '251'
    fluent_name = 'activation-energy'
    _python_name = 'activation_energy'

class kinetics_diffusion_limited(Group):
    """
    Kinetics diffusion limited combustion model settings.
    """
    _version = '251'
    fluent_name = 'kinetics-diffusion-limited'
    _python_name = 'kinetics_diffusion_limited'
    child_names = ['diffusion_rate_constant', 'pre_exponential_factor', 'activation_energy']
    _child_classes = dict(
        diffusion_rate_constant=diffusion_rate_constant,
        pre_exponential_factor=pre_exponential_factor_1,
        activation_energy=activation_energy_4,
    )

class char_porosity(Real):
    """
    Char porosity.
    """
    _version = '251'
    fluent_name = 'char-porosity'
    _python_name = 'char_porosity'

class mean_pore_radius(Real):
    """
    Mean pore radius.
    """
    _version = '251'
    fluent_name = 'mean-pore-radius'
    _python_name = 'mean_pore_radius'

class specific_internal_surface_area(Real):
    """
    Specific internal surface area.
    """
    _version = '251'
    fluent_name = 'specific-internal-surface-area'
    _python_name = 'specific_internal_surface_area'

class tortuosity(Real):
    """
    Tortuosity.
    """
    _version = '251'
    fluent_name = 'tortuosity'
    _python_name = 'tortuosity'

class burning_mode(Real):
    """
    Burning mode, alpha.
    """
    _version = '251'
    fluent_name = 'burning-mode'
    _python_name = 'burning_mode'

class intrinsic_model(Group):
    """
    Intrinsic combustion model settings.
    """
    _version = '251'
    fluent_name = 'intrinsic-model'
    _python_name = 'intrinsic_model'
    child_names = ['diffusion_rate_constant', 'pre_exponential_factor', 'activation_energy', 'char_porosity', 'mean_pore_radius', 'specific_internal_surface_area', 'tortuosity', 'burning_mode']
    _child_classes = dict(
        diffusion_rate_constant=diffusion_rate_constant,
        pre_exponential_factor=pre_exponential_factor_1,
        activation_energy=activation_energy_4,
        char_porosity=char_porosity,
        mean_pore_radius=mean_pore_radius,
        specific_internal_surface_area=specific_internal_surface_area,
        tortuosity=tortuosity,
        burning_mode=burning_mode,
    )

class composition_dependent_specific_heat(Boolean):
    """
    Specifies whether to use composition dependent specific heat.
    """
    _version = '251'
    fluent_name = 'composition-dependent-specific-heat?'
    _python_name = 'composition_dependent_specific_heat'

class composition_dependent_density(Boolean):
    """
    Specifies whether to use composition dependent density.
    """
    _version = '251'
    fluent_name = 'composition-dependent-density?'
    _python_name = 'composition_dependent_density'

class multiple_surface_reactions(Group):
    """
    Multiple surface reactions setting.
    """
    _version = '251'
    fluent_name = 'multiple-surface-reactions'
    _python_name = 'multiple_surface_reactions'
    child_names = ['composition_dependent_specific_heat', 'composition_dependent_density']
    _child_classes = dict(
        composition_dependent_specific_heat=composition_dependent_specific_heat,
        composition_dependent_density=composition_dependent_density,
    )

class combustion_model(Group):
    """
    Material property: combustion-model.
    """
    _version = '251'
    fluent_name = 'combustion-model'
    _python_name = 'combustion_model'
    child_names = ['option', 'cbk', 'kinetics_diffusion_limited', 'intrinsic_model', 'multiple_surface_reactions']
    _child_classes = dict(
        option=option_26,
        cbk=cbk,
        kinetics_diffusion_limited=kinetics_diffusion_limited,
        intrinsic_model=intrinsic_model,
        multiple_surface_reactions=multiple_surface_reactions,
    )

class combusting_particle_child(Group):
    """
    'child_object_type' of combusting_particle.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'combusting_particle_child'
    child_names = ['name', 'chemical_formula', 'density', 'specific_heat', 'thermal_conductivity', 'latent_heat', 'volatile_fraction', 'combustible_fraction', 'swelling_coefficient', 'burn_stoichiometry', 'binary_diffusivity', 'diffusivity_reference_pressure', 'vaporization_temperature', 'thermophoretic_co', 'burn_hreact', 'burn_hreact_fraction', 'devolatilization_model', 'combustion_model', 'scattering_factor', 'emissivity']
    _child_classes = dict(
        name=name_8,
        chemical_formula=chemical_formula,
        density=density_7,
        specific_heat=specific_heat_3,
        thermal_conductivity=thermal_conductivity_4,
        latent_heat=latent_heat_1,
        volatile_fraction=volatile_fraction,
        combustible_fraction=combustible_fraction,
        swelling_coefficient=swelling_coefficient,
        burn_stoichiometry=burn_stoichiometry,
        binary_diffusivity=binary_diffusivity_2,
        diffusivity_reference_pressure=diffusivity_reference_pressure,
        vaporization_temperature=vaporization_temperature,
        thermophoretic_co=thermophoretic_co,
        burn_hreact=burn_hreact,
        burn_hreact_fraction=burn_hreact_fraction,
        devolatilization_model=devolatilization_model,
        combustion_model=combustion_model,
        scattering_factor=scattering_factor_1,
        emissivity=emissivity_1,
    )

class combusting_particle(NamedObject[combusting_particle_child], CreatableNamedObjectMixin[combusting_particle_child]):
    """
    'combusting_particle' child.
    """
    _version = '251'
    fluent_name = 'combusting-particle'
    _python_name = 'combusting_particle'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = combusting_particle_child

class particle_species_child(Group):
    """
    'child_object_type' of particle_species.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'particle_species_child'
    child_names = ['name', 'chemical_formula', 'density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'vaporization_model', 'thermolysis_model', 'latent_heat', 'volatile_fraction', 'heat_of_pyrolysis', 'binary_diffusivity', 'diffusivity_reference_pressure', 'averaging_coefficient_t', 'averaging_coefficient_y', 'vapor_pressure', 'molecular_weight', 'vaporization_temperature', 'boiling_point', 'thermophoretic_co', 'scattering_factor', 'emissivity', 'dpm_surften', 'electric_conductivity', 'dual_electric_conductivity', 'magnetic_permeability', 'charge_density', 'formation_entropy', 'formation_enthalpy', 'reference_temperature']
    _child_classes = dict(
        name=name_8,
        chemical_formula=chemical_formula,
        density=density_6,
        viscosity=viscosity_2,
        specific_heat=specific_heat_3,
        thermal_conductivity=thermal_conductivity_4,
        vaporization_model=vaporization_model,
        thermolysis_model=thermolysis_model,
        latent_heat=latent_heat_1,
        volatile_fraction=volatile_fraction,
        heat_of_pyrolysis=heat_of_pyrolysis,
        binary_diffusivity=binary_diffusivity,
        diffusivity_reference_pressure=diffusivity_reference_pressure,
        averaging_coefficient_t=averaging_coefficient_t,
        averaging_coefficient_y=averaging_coefficient_y,
        vapor_pressure=vapor_pressure,
        molecular_weight=molecular_weight_4,
        vaporization_temperature=vaporization_temperature,
        boiling_point=boiling_point,
        thermophoretic_co=thermophoretic_co,
        scattering_factor=scattering_factor_1,
        emissivity=emissivity_1,
        dpm_surften=dpm_surften_1,
        electric_conductivity=electric_conductivity_2,
        dual_electric_conductivity=dual_electric_conductivity_1,
        magnetic_permeability=magnetic_permeability,
        charge_density=charge_density,
        formation_entropy=formation_entropy,
        formation_enthalpy=formation_enthalpy,
        reference_temperature=reference_temperature,
    )

class particle_species(NamedObject[particle_species_child], CreatableNamedObjectMixin[particle_species_child]):
    """
    'particle_species' child.
    """
    _version = '251'
    fluent_name = 'particle-species'
    _python_name = 'particle_species'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = particle_species_child

class particle(StringList, AllowedValuesMixin):
    """
    Particle species.
    """
    _version = '251'
    fluent_name = 'particle'
    _python_name = 'particle'

class material_4_child(Group):
    """
    'child_object_type' of material.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'material_child'
    child_names = ['name', 'chemical_formula', 'density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'vaporization_model', 'thermolysis_model', 'latent_heat', 'volatile_fraction', 'heat_of_pyrolysis', 'binary_diffusivity', 'diffusivity_reference_pressure', 'averaging_coefficient_t', 'averaging_coefficient_y', 'vapor_pressure', 'molecular_weight', 'vaporization_temperature', 'boiling_point', 'thermophoretic_co', 'scattering_factor', 'emissivity', 'dpm_surften', 'electric_conductivity', 'dual_electric_conductivity', 'magnetic_permeability', 'charge_density', 'formation_entropy', 'formation_enthalpy', 'reference_temperature']
    _child_classes = dict(
        name=name_8,
        chemical_formula=chemical_formula,
        density=density_6,
        viscosity=viscosity_2,
        specific_heat=specific_heat_3,
        thermal_conductivity=thermal_conductivity_4,
        vaporization_model=vaporization_model,
        thermolysis_model=thermolysis_model,
        latent_heat=latent_heat_1,
        volatile_fraction=volatile_fraction,
        heat_of_pyrolysis=heat_of_pyrolysis,
        binary_diffusivity=binary_diffusivity,
        diffusivity_reference_pressure=diffusivity_reference_pressure,
        averaging_coefficient_t=averaging_coefficient_t,
        averaging_coefficient_y=averaging_coefficient_y,
        vapor_pressure=vapor_pressure,
        molecular_weight=molecular_weight_4,
        vaporization_temperature=vaporization_temperature,
        boiling_point=boiling_point,
        thermophoretic_co=thermophoretic_co,
        scattering_factor=scattering_factor_1,
        emissivity=emissivity_1,
        dpm_surften=dpm_surften_1,
        electric_conductivity=electric_conductivity_2,
        dual_electric_conductivity=dual_electric_conductivity_1,
        magnetic_permeability=magnetic_permeability,
        charge_density=charge_density,
        formation_entropy=formation_entropy,
        formation_enthalpy=formation_enthalpy,
        reference_temperature=reference_temperature,
    )

class material_4(NamedObject[material_4_child], CreatableNamedObjectMixin[material_4_child]):
    """
    Species particle mixture species materials.
    """
    _version = '251'
    fluent_name = 'material'
    _python_name = 'material'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = material_4_child

class species_4(Group):
    """
    Particle mixture species.
    """
    _version = '251'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['particle_species', 'particle', 'last_species', 'material']
    _child_classes = dict(
        particle_species=particle_species,
        particle=particle,
        last_species=last_species,
        material=material_4,
    )

class density_8(Group):
    """
    Material property: density.
    """
    _version = '251'
    fluent_name = 'density'
    _python_name = 'density'
    child_names = ['option', 'compressible_liquid', 'user_defined_function', 'value']
    _child_classes = dict(
        option=option_26,
        compressible_liquid=compressible_liquid,
        user_defined_function=user_defined_function,
        value=value_15,
    )

class specific_heat_4(Group):
    """
    Material property: specific-heat.
    """
    _version = '251'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    child_names = ['option', 'user_defined_function', 'value']
    _child_classes = dict(
        option=option_26,
        user_defined_function=user_defined_function,
        value=value_15,
    )

class vp_equilib(Group):
    """
    Material property: vp-equilib.
    """
    _version = '251'
    fluent_name = 'vp-equilib'
    _python_name = 'vp_equilib'
    child_names = ['option', 'user_defined_function']
    _child_classes = dict(
        option=option_26,
        user_defined_function=user_defined_function,
    )

class emissivity_2(Group):
    """
    Material property: emissivity.
    """
    _version = '251'
    fluent_name = 'emissivity'
    _python_name = 'emissivity'
    child_names = ['option']
    _child_classes = dict(
        option=option_26,
    )

class scattering_factor_2(Group):
    """
    Material property: scattering-factor.
    """
    _version = '251'
    fluent_name = 'scattering-factor'
    _python_name = 'scattering_factor'
    child_names = ['option']
    _child_classes = dict(
        option=option_26,
    )

class reaction_model(Group):
    """
    Material property: reaction-model.
    """
    _version = '251'
    fluent_name = 'reaction-model'
    _python_name = 'reaction_model'
    child_names = ['option']
    _child_classes = dict(
        option=option_26,
    )

class particle_mixture_child(Group):
    """
    'child_object_type' of particle_mixture.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'particle_mixture_child'
    child_names = ['name', 'chemical_formula', 'species', 'density', 'viscosity', 'specific_heat', 'thermal_conductivity', 'vp_equilib', 'dpm_surften', 'emissivity', 'scattering_factor', 'vaporization_model', 'averaging_coefficient_t', 'averaging_coefficient_y', 'thermophoretic_co', 'reaction_model']
    _child_classes = dict(
        name=name_8,
        chemical_formula=chemical_formula,
        species=species_4,
        density=density_8,
        viscosity=viscosity_2,
        specific_heat=specific_heat_4,
        thermal_conductivity=thermal_conductivity_4,
        vp_equilib=vp_equilib,
        dpm_surften=dpm_surften,
        emissivity=emissivity_2,
        scattering_factor=scattering_factor_2,
        vaporization_model=vaporization_model,
        averaging_coefficient_t=averaging_coefficient_t,
        averaging_coefficient_y=averaging_coefficient_y,
        thermophoretic_co=thermophoretic_co,
        reaction_model=reaction_model,
    )

class particle_mixture(NamedObject[particle_mixture_child], CreatableNamedObjectMixin[particle_mixture_child]):
    """
    'particle_mixture' child.
    """
    _version = '251'
    fluent_name = 'particle-mixture'
    _python_name = 'particle_mixture'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = particle_mixture_child

class list_materials(Command):
    """
    List case materials.
    """
    _version = '251'
    fluent_name = 'list-materials'
    _python_name = 'list_materials'

class list_properties_2(Command):
    """
    List case material properties.
    
    Parameters
    ----------
        name : str
            'name' child.
    """
    _version = '251'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    argument_names = ['name']
    _child_classes = dict(
        name=name_7,
    )

class materials(Group):
    """
    'materials' child.
    """
    _version = '251'
    fluent_name = 'materials'
    _python_name = 'materials'
    child_names = ['database', 'fluid', 'solid', 'mixture', 'inert_particle', 'droplet_particle', 'combusting_particle', 'particle_mixture']
    command_names = ['list_materials', 'list_properties']
    _child_classes = dict(
        database=database,
        fluid=fluid,
        solid=solid,
        mixture=mixture,
        inert_particle=inert_particle,
        droplet_particle=droplet_particle,
        combusting_particle=combusting_particle,
        particle_mixture=particle_mixture,
        list_materials=list_materials,
        list_properties=list_properties_2,
    )

class material_5(String, AllowedValuesMixin):
    """
    Material Name.
    """
    _version = '251'
    fluent_name = 'material'
    _python_name = 'material'

class participates_in_radiation(Boolean):
    """
    Participates in radiation.
    """
    _version = '251'
    fluent_name = 'participates-in-radiation'
    _python_name = 'participates_in_radiation'

class glass(Boolean):
    """
    Glass zone?.
    """
    _version = '251'
    fluent_name = 'glass?'
    _python_name = 'glass'

class laminar(Boolean):
    """
    Laminar zone?.
    """
    _version = '251'
    fluent_name = 'laminar?'
    _python_name = 'laminar'

class vapor_phase_realgas(Integer):
    """
    Zone real-gas state:.
    """
    _version = '251'
    fluent_name = 'vapor-phase-realgas'
    _python_name = 'vapor_phase_realgas'

class active_wetsteam_zone(Boolean):
    """
    Is Active Wetsteam Zone?.
    """
    _version = '251'
    fluent_name = 'active-wetsteam-zone?'
    _python_name = 'active_wetsteam_zone'

class contact_property(Boolean):
    """
    Contact Property Thread?.
    """
    _version = '251'
    fluent_name = 'contact-property?'
    _python_name = 'contact_property'

class general_2(Group):
    """
    Allows to change general model variables or settings.
    """
    _version = '251'
    fluent_name = 'general'
    _python_name = 'general'
    child_names = ['material', 'participates_in_radiation', 'glass', 'laminar', 'vapor_phase_realgas', 'active_wetsteam_zone', 'contact_property']
    _child_classes = dict(
        material=material_5,
        participates_in_radiation=participates_in_radiation,
        glass=glass,
        laminar=laminar,
        vapor_phase_realgas=vapor_phase_realgas,
        active_wetsteam_zone=active_wetsteam_zone,
        contact_property=contact_property,
    )
    _child_aliases = dict(
        radiating=('participates_in_radiation', 'radiating?'),
    )

class conical(Boolean):
    """
    Conical porous zone?.
    """
    _version = '251'
    fluent_name = 'conical?'
    _python_name = 'conical'

class frame_motion(Boolean):
    """
    Frame Motion?.
    """
    _version = '251'
    fluent_name = 'frame-motion'
    _python_name = 'frame_motion'

class mrf_relative_to_thread(String, AllowedValuesMixin):
    """
    Relative To Cell Zone.
    """
    _version = '251'
    fluent_name = 'mrf-relative-to-thread'
    _python_name = 'mrf_relative_to_thread'

class option_31(String, AllowedValuesMixin):
    """
    How the boundary condition will be defined.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class value_17(Real):
    """
    Value as constant or expression.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class profile_name(String, AllowedValuesMixin):
    """
    The name of the profile.
    """
    _version = '251'
    fluent_name = 'profile-name'
    _python_name = 'profile_name'

class field_name(String, AllowedValuesMixin):
    """
    The name of the field.
    """
    _version = '251'
    fluent_name = 'field-name'
    _python_name = 'field_name'

class udf(String, AllowedValuesMixin):
    """
    The name of the user-defined function.
    """
    _version = '251'
    fluent_name = 'udf'
    _python_name = 'udf'

class mrf_omega(Group):
    """
    Reference Frame Rotation Speed.
    """
    _version = '251'
    fluent_name = 'mrf-omega'
    _python_name = 'mrf_omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class reference_frame_velocity_child(Group):
    """
    'child_object_type' of reference_frame_velocity.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'reference_frame_velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class reference_frame_velocity(ListObject[reference_frame_velocity_child]):
    """
    Reference frame velocity components.
    """
    _version = '251'
    fluent_name = 'reference-frame-velocity'
    _python_name = 'reference_frame_velocity'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = reference_frame_velocity_child

class reference_frame_axis_origin_child(Group):
    """
    'child_object_type' of reference_frame_axis_origin.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'reference_frame_axis_origin_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class reference_frame_axis_origin(ListObject[reference_frame_axis_origin_child]):
    """
    Reference frame axis origin components.
    """
    _version = '251'
    fluent_name = 'reference-frame-axis-origin'
    _python_name = 'reference_frame_axis_origin'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = reference_frame_axis_origin_child

class reference_frame_axis_direction_child(Group):
    """
    'child_object_type' of reference_frame_axis_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'reference_frame_axis_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class reference_frame_axis_direction(ListObject[reference_frame_axis_direction_child]):
    """
    Reference frame axis direction components.
    """
    _version = '251'
    fluent_name = 'reference-frame-axis-direction'
    _python_name = 'reference_frame_axis_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = reference_frame_axis_direction_child

class reference_frame_zone_motion_function(String, AllowedValuesMixin):
    """
    Reference Frame User Defined Zone Motion Function.
    """
    _version = '251'
    fluent_name = 'reference-frame-zone-motion-function'
    _python_name = 'reference_frame_zone_motion_function'

class reference_frame_2(Group):
    """
    Reference frame settings for this zone.
    """
    _version = '251'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'
    child_names = ['frame_motion', 'mrf_relative_to_thread', 'mrf_omega', 'reference_frame_velocity', 'reference_frame_axis_origin', 'reference_frame_axis_direction', 'reference_frame_zone_motion_function']
    _child_classes = dict(
        frame_motion=frame_motion,
        mrf_relative_to_thread=mrf_relative_to_thread,
        mrf_omega=mrf_omega,
        reference_frame_velocity=reference_frame_velocity,
        reference_frame_axis_origin=reference_frame_axis_origin,
        reference_frame_axis_direction=reference_frame_axis_direction,
        reference_frame_zone_motion_function=reference_frame_zone_motion_function,
    )
    _child_aliases = dict(
        mrf_motion=('frame_motion', 'mrf-motion?'),
        mrf_udf_zmotion_name=('reference_frame_zone_motion_function', 'mrf-udf-zmotion-name'),
        reference_frame_axis_direction_components=('reference_frame_axis_direction', 'reference-frame-axis-direction-components'),
        reference_frame_axis_origin_components=('reference_frame_axis_origin', 'reference-frame-axis-origin-components'),
        reference_frame_velocity_components=('reference_frame_velocity', 'reference-frame-velocity-components'),
    )

class enable_11(Boolean):
    """
    Enable/disable mesh motion.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class mgrid_enable_transient(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'mgrid-enable-transient?'
    _python_name = 'mgrid_enable_transient'

class mgrid_relative_to_thread(String, AllowedValuesMixin):
    """
    Relative To Cell Zone.
    """
    _version = '251'
    fluent_name = 'mgrid-relative-to-thread'
    _python_name = 'mgrid_relative_to_thread'

class mgrid_omega(Group):
    """
    Moving Mesh Rotation Speed.
    """
    _version = '251'
    fluent_name = 'mgrid-omega'
    _python_name = 'mgrid_omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class moving_mesh_velocity_child(Group):
    """
    'child_object_type' of moving_mesh_velocity.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'moving_mesh_velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class moving_mesh_velocity(ListObject[moving_mesh_velocity_child]):
    """
    Moving mesh velocity components.
    """
    _version = '251'
    fluent_name = 'moving-mesh-velocity'
    _python_name = 'moving_mesh_velocity'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = moving_mesh_velocity_child

class moving_mesh_axis_origin_child(Group):
    """
    'child_object_type' of moving_mesh_axis_origin.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'moving_mesh_axis_origin_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class moving_mesh_axis_origin(ListObject[moving_mesh_axis_origin_child]):
    """
    Moving mesh axis origin components.
    """
    _version = '251'
    fluent_name = 'moving-mesh-axis-origin'
    _python_name = 'moving_mesh_axis_origin'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = moving_mesh_axis_origin_child

class moving_mesh_axis_direction_child(Group):
    """
    'child_object_type' of moving_mesh_axis_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'moving_mesh_axis_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class moving_mesh_axis_direction(ListObject[moving_mesh_axis_direction_child]):
    """
    Moving mesh axis direction components.
    """
    _version = '251'
    fluent_name = 'moving-mesh-axis-direction'
    _python_name = 'moving_mesh_axis_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = moving_mesh_axis_direction_child

class moving_mesh_zone_motion_function(String, AllowedValuesMixin):
    """
    Moving Mesh User Defined Zone Motion Function.
    """
    _version = '251'
    fluent_name = 'moving-mesh-zone-motion-function'
    _python_name = 'moving_mesh_zone_motion_function'

class mesh_motion(Group):
    """
    Allows to change mesh-motion model variables or settings.
    """
    _version = '251'
    fluent_name = 'mesh-motion'
    _python_name = 'mesh_motion'
    child_names = ['enable', 'mgrid_enable_transient', 'mgrid_relative_to_thread', 'mgrid_omega', 'moving_mesh_velocity', 'moving_mesh_axis_origin', 'moving_mesh_axis_direction', 'moving_mesh_zone_motion_function']
    _child_classes = dict(
        enable=enable_11,
        mgrid_enable_transient=mgrid_enable_transient,
        mgrid_relative_to_thread=mgrid_relative_to_thread,
        mgrid_omega=mgrid_omega,
        moving_mesh_velocity=moving_mesh_velocity,
        moving_mesh_axis_origin=moving_mesh_axis_origin,
        moving_mesh_axis_direction=moving_mesh_axis_direction,
        moving_mesh_zone_motion_function=moving_mesh_zone_motion_function,
    )
    _child_aliases = dict(
        mgrid_motion=('enable', 'mgrid-motion?'),
        mgrid_udf_zmotion_name=('moving_mesh_zone_motion_function', 'mgrid-udf-zmotion-name'),
        moving_mesh_axis_direction_components=('moving_mesh_axis_direction', 'moving-mesh-axis-direction-components'),
        moving_mesh_axis_origin_components=('moving_mesh_axis_origin', 'moving-mesh-axis-origin-components'),
        moving_mesh_velocity_components=('moving_mesh_velocity', 'moving-mesh-velocity-components'),
    )

class zonal_models_1(Boolean):
    """
    Zonal Models.
    """
    _version = '251'
    fluent_name = 'zonal-models?'
    _python_name = 'zonal_models'

class zonal_flow(Boolean):
    """
    Zonal Flow.
    """
    _version = '251'
    fluent_name = 'zonal-flow?'
    _python_name = 'zonal_flow'

class zonal_flow_spec(String, AllowedValuesMixin):
    """
    Pressure-Velocity Coupling Scheme.
    """
    _version = '251'
    fluent_name = 'zonal-flow-spec'
    _python_name = 'zonal_flow_spec'

class zonal_pseudo_time_spec(String, AllowedValuesMixin):
    """
    Pseudo Time Method.
    """
    _version = '251'
    fluent_name = 'zonal-pseudo-time-spec'
    _python_name = 'zonal_pseudo_time_spec'

class zonal_models(Group):
    """
    Zonal flow model settings.
    """
    _version = '251'
    fluent_name = 'zonal-models'
    _python_name = 'zonal_models'
    child_names = ['zonal_models', 'zonal_flow', 'zonal_flow_spec', 'zonal_pseudo_time_spec']
    _child_classes = dict(
        zonal_models=zonal_models_1,
        zonal_flow=zonal_flow,
        zonal_flow_spec=zonal_flow_spec,
        zonal_pseudo_time_spec=zonal_pseudo_time_spec,
    )

class porous(Boolean):
    """
    Porous zone?.
    """
    _version = '251'
    fluent_name = 'porous?'
    _python_name = 'porous'

class dir_spec_cond(String, AllowedValuesMixin):
    """
    Direction Specification.
    """
    _version = '251'
    fluent_name = 'dir-spec-cond'
    _python_name = 'dir_spec_cond'

class cursys_name(String, AllowedValuesMixin):
    """
    Coordinate System.
    """
    _version = '251'
    fluent_name = 'cursys-name'
    _python_name = 'cursys_name'

class direction_1_vector_child(Group):
    """
    'child_object_type' of direction_1_vector.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'direction_1_vector_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class direction_1_vector(ListObject[direction_1_vector_child]):
    """
    Direction 1 vector components.
    """
    _version = '251'
    fluent_name = 'direction-1-vector'
    _python_name = 'direction_1_vector'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = direction_1_vector_child

class direction_2_vector_child(Group):
    """
    'child_object_type' of direction_2_vector.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'direction_2_vector_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class direction_2_vector(ListObject[direction_2_vector_child]):
    """
    Direction 2 vector components.
    """
    _version = '251'
    fluent_name = 'direction-2-vector'
    _python_name = 'direction_2_vector'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = direction_2_vector_child

class cone_axis_vector_child(Real):
    """
    'child_object_type' of cone_axis_vector.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'cone_axis_vector_child'

class cone_axis_vector(ListObject[cone_axis_vector_child]):
    """
    Cone axis vector components.
    """
    _version = '251'
    fluent_name = 'cone-axis-vector'
    _python_name = 'cone_axis_vector'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = cone_axis_vector_child

class point_on_cone_axis_child(Real):
    """
    'child_object_type' of point_on_cone_axis.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'point_on_cone_axis_child'

class point_on_cone_axis(ListObject[point_on_cone_axis_child]):
    """
    Point on cone axis components.
    """
    _version = '251'
    fluent_name = 'point-on-cone-axis'
    _python_name = 'point_on_cone_axis'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = point_on_cone_axis_child

class cone_angle(Real):
    """
    Half Angle of Cone Relative to its Axis.
    """
    _version = '251'
    fluent_name = 'cone-angle'
    _python_name = 'cone_angle'

class rel_vel_resistance(Boolean):
    """
    Relative Velocity Resistance Formulation?.
    """
    _version = '251'
    fluent_name = 'rel-vel-resistance?'
    _python_name = 'rel_vel_resistance'

class viscous_resistance_child(Group):
    """
    'child_object_type' of viscous_resistance.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'viscous_resistance_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class viscous_resistance(ListObject[viscous_resistance_child]):
    """
    Viscous resistance components.
    """
    _version = '251'
    fluent_name = 'viscous-resistance'
    _python_name = 'viscous_resistance'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = viscous_resistance_child

class alt_inertial_form(Boolean):
    """
    Alternative formulation for inertial resistance?.
    """
    _version = '251'
    fluent_name = 'alt-inertial-form?'
    _python_name = 'alt_inertial_form'

class inertial_resistance_child(Group):
    """
    'child_object_type' of inertial_resistance.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'inertial_resistance_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class inertial_resistance(ListObject[inertial_resistance_child]):
    """
    Inertial resistance components.
    """
    _version = '251'
    fluent_name = 'inertial-resistance'
    _python_name = 'inertial_resistance'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = inertial_resistance_child

class power_law_c0(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'power-law-c0'
    _python_name = 'power_law_c0'

class power_law_c1(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'power-law-c1'
    _python_name = 'power_law_c1'

class porosity(Group):
    """
    Porosity.
    """
    _version = '251'
    fluent_name = 'porosity'
    _python_name = 'porosity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class option_32(String, AllowedValuesMixin):
    """
    Polynomial method.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class udf_1(String, AllowedValuesMixin):
    """
    User defined function.
    """
    _version = '251'
    fluent_name = 'udf'
    _python_name = 'udf'

class piecewise_polynomial_1(Group):
    """
    Piecewise polynomial settings.
    """
    _version = '251'
    fluent_name = 'piecewise-polynomial'
    _python_name = 'piecewise_polynomial'
    child_names = ['function_of', 'range']
    _child_classes = dict(
        function_of=function_of_1,
        range=range,
    )

class piecewise_linear_2(Group):
    """
    Ranges and values for piecewise-linear property.
    """
    _version = '251'
    fluent_name = 'piecewise-linear'
    _python_name = 'piecewise_linear'
    child_names = ['function_of', 'data_points']
    _child_classes = dict(
        function_of=function_of,
        data_points=data_points,
    )

class polynomial_2(Group):
    """
    Polynomial settings.
    """
    _version = '251'
    fluent_name = 'polynomial'
    _python_name = 'polynomial'
    child_names = ['function_of', 'coefficients']
    _child_classes = dict(
        function_of=function_of_1,
        coefficients=coefficients,
    )

class relative_viscosity(Group):
    """
    Relative Viscosity.
    """
    _version = '251'
    fluent_name = 'relative-viscosity'
    _python_name = 'relative_viscosity'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class relative_permeability_1(Boolean):
    """
    Enable/disable Relative Permeability.
    """
    _version = '251'
    fluent_name = 'relative-permeability?'
    _python_name = 'relative_permeability'

class corey(Boolean):
    """
    Two-Phase Corey's Model?.
    """
    _version = '251'
    fluent_name = 'corey?'
    _python_name = 'corey'

class stone_1(Boolean):
    """
    Three-Phase Stone-1?.
    """
    _version = '251'
    fluent_name = 'stone-1?'
    _python_name = 'stone_1'

class stone_2(Boolean):
    """
    Three-Phase Stone-2?.
    """
    _version = '251'
    fluent_name = 'stone-2?'
    _python_name = 'stone_2'

class rel_perm_limit_p1(Real):
    """
    Minimum Relative Permeability.
    """
    _version = '251'
    fluent_name = 'rel-perm-limit-p1'
    _python_name = 'rel_perm_limit_p1'

class rel_perm_limit_p2(Real):
    """
    Minimum Relative Permeability.
    """
    _version = '251'
    fluent_name = 'rel-perm-limit-p2'
    _python_name = 'rel_perm_limit_p2'

class ref_perm_p1(Real):
    """
    Reference Relative Permeability.
    """
    _version = '251'
    fluent_name = 'ref-perm-p1'
    _python_name = 'ref_perm_p1'

class exp_p1(Real):
    """
    Corey Exponent.
    """
    _version = '251'
    fluent_name = 'exp-p1'
    _python_name = 'exp_p1'

class res_sat_p1(Real):
    """
    Residual Saturation.
    """
    _version = '251'
    fluent_name = 'res-sat-p1'
    _python_name = 'res_sat_p1'

class ref_perm_p2(Real):
    """
    Reference Relative Permeability.
    """
    _version = '251'
    fluent_name = 'ref-perm-p2'
    _python_name = 'ref_perm_p2'

class exp_p2(Real):
    """
    Corey Exponent.
    """
    _version = '251'
    fluent_name = 'exp-p2'
    _python_name = 'exp_p2'

class res_sat_p2(Real):
    """
    Residual Saturation.
    """
    _version = '251'
    fluent_name = 'res-sat-p2'
    _python_name = 'res_sat_p2'

class ref_perm_p3(Real):
    """
    Reference Relative Permeability.
    """
    _version = '251'
    fluent_name = 'ref-perm-p3'
    _python_name = 'ref_perm_p3'

class exp_p3(Real):
    """
    Corey Exponent.
    """
    _version = '251'
    fluent_name = 'exp-p3'
    _python_name = 'exp_p3'

class res_sat_p3(Real):
    """
    Residual Saturation.
    """
    _version = '251'
    fluent_name = 'res-sat-p3'
    _python_name = 'res_sat_p3'

class capillary_pressure_1(Group):
    """
    Capillary Pressure.
    """
    _version = '251'
    fluent_name = 'capillary-pressure'
    _python_name = 'capillary_pressure'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class max_capillary_pressure(Real):
    """
    Maximum Capillary Pressure.
    """
    _version = '251'
    fluent_name = 'max-capillary-pressure'
    _python_name = 'max_capillary_pressure'

class van_genuchten_pg(Real):
    """
    Entry pressure.
    """
    _version = '251'
    fluent_name = 'van-genuchten-pg'
    _python_name = 'van_genuchten_pg'

class van_genuchten_ng(Real):
    """
    Pore size exponent.
    """
    _version = '251'
    fluent_name = 'van-genuchten-ng'
    _python_name = 'van_genuchten_ng'

class skjaeveland_nw_pc_coef(Real):
    """
    Entry pressure.
    """
    _version = '251'
    fluent_name = 'skjaeveland-nw-pc-coef'
    _python_name = 'skjaeveland_nw_pc_coef'

class skjaeveland_nw_pc_pwr(Real):
    """
    Pore size exponent.
    """
    _version = '251'
    fluent_name = 'skjaeveland-nw-pc-pwr'
    _python_name = 'skjaeveland_nw_pc_pwr'

class skjaeveland_wet_pc_coef(Real):
    """
    Entry pressure.
    """
    _version = '251'
    fluent_name = 'skjaeveland-wet-pc-coef'
    _python_name = 'skjaeveland_wet_pc_coef'

class skjaeveland_wet_pc_pwr(Real):
    """
    Pore size exponent.
    """
    _version = '251'
    fluent_name = 'skjaeveland-wet-pc-pwr'
    _python_name = 'skjaeveland_wet_pc_pwr'

class brooks_corey_pe(Real):
    """
    Entry Pressure.
    """
    _version = '251'
    fluent_name = 'brooks-corey-pe'
    _python_name = 'brooks_corey_pe'

class brooks_corey_ng(Real):
    """
    Pore size exponent.
    """
    _version = '251'
    fluent_name = 'brooks-corey-ng'
    _python_name = 'brooks_corey_ng'

class leverett_con_ang(Real):
    """
    Contact Angle.
    """
    _version = '251'
    fluent_name = 'leverett-con-ang'
    _python_name = 'leverett_con_ang'

class rp_cbox_p1(String):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rp-cbox-p1'
    _python_name = 'rp_cbox_p1'

class rp_edit_p1(String):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rp-edit-p1'
    _python_name = 'rp_edit_p1'

class rel_perm_tabular_p1(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rel-perm-tabular-p1?'
    _python_name = 'rel_perm_tabular_p1'

class rel_perm_table_p1(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rel-perm-table-p1'
    _python_name = 'rel_perm_table_p1'

class rel_perm_satw_p1(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rel-perm-satw-p1'
    _python_name = 'rel_perm_satw_p1'

class rel_perm_rp_p1(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rel-perm-rp-p1'
    _python_name = 'rel_perm_rp_p1'

class rp_cbox_p2(String):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rp-cbox-p2'
    _python_name = 'rp_cbox_p2'

class rp_edit_p2(String):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rp-edit-p2'
    _python_name = 'rp_edit_p2'

class rel_perm_tabular_p2(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rel-perm-tabular-p2?'
    _python_name = 'rel_perm_tabular_p2'

class rel_perm_table_p2(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rel-perm-table-p2'
    _python_name = 'rel_perm_table_p2'

class rel_perm_satw_p2(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rel-perm-satw-p2'
    _python_name = 'rel_perm_satw_p2'

class rel_perm_rp_p2(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rel-perm-rp-p2'
    _python_name = 'rel_perm_rp_p2'

class wetting_phase(String, AllowedValuesMixin):
    """
    Wetting Phase.
    """
    _version = '251'
    fluent_name = 'wetting-phase'
    _python_name = 'wetting_phase'

class non_wetting_phase(String, AllowedValuesMixin):
    """
    Non Wetting Phase.
    """
    _version = '251'
    fluent_name = 'non-wetting-phase'
    _python_name = 'non_wetting_phase'

class equib_thermal(Boolean):
    """
    Equilibrium Thermal Model (if no, Non-Equilibrium)?.
    """
    _version = '251'
    fluent_name = 'equib-thermal?'
    _python_name = 'equib_thermal'

class non_equib_thermal(Boolean):
    """
    Non-Equilibrium Thermal Model?.
    """
    _version = '251'
    fluent_name = 'non-equib-thermal?'
    _python_name = 'non_equib_thermal'

class solid_material(String, AllowedValuesMixin):
    """
    Solid Material Name.
    """
    _version = '251'
    fluent_name = 'solid-material'
    _python_name = 'solid_material'

class area_density(Group):
    """
    Interfacial Area Density.
    """
    _version = '251'
    fluent_name = 'area-density'
    _python_name = 'area_density'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class heat_transfer_coeff(Group):
    """
    Heat Transfer Coefficient.
    """
    _version = '251'
    fluent_name = 'heat-transfer-coeff'
    _python_name = 'heat_transfer_coeff'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class porous_structure(Boolean):
    """
    Porous Structure?.
    """
    _version = '251'
    fluent_name = 'porous-structure?'
    _python_name = 'porous_structure'

class structure_material(String, AllowedValuesMixin):
    """
    Structure Material Name.
    """
    _version = '251'
    fluent_name = 'structure-material'
    _python_name = 'structure_material'

class anisotropic_spe_diff(Boolean):
    """
    Anisotropic Species Diffusion?.
    """
    _version = '251'
    fluent_name = 'anisotropic-spe-diff?'
    _python_name = 'anisotropic_spe_diff'

class spe_diff_xx(Real):
    """
    XX diffusion matrix coefficient.
    """
    _version = '251'
    fluent_name = 'spe-diff-xx'
    _python_name = 'spe_diff_xx'

class spe_diff_xy(Real):
    """
    XY diffusion matrix coefficient.
    """
    _version = '251'
    fluent_name = 'spe-diff-xy'
    _python_name = 'spe_diff_xy'

class spe_diff_xz(Real):
    """
    XZ diffusion matrix coefficient.
    """
    _version = '251'
    fluent_name = 'spe-diff-xz'
    _python_name = 'spe_diff_xz'

class spe_diff_yx(Real):
    """
    YX diffusion matrix coefficient.
    """
    _version = '251'
    fluent_name = 'spe-diff-yx'
    _python_name = 'spe_diff_yx'

class spe_diff_yy(Real):
    """
    YY diffusion matrix coefficient.
    """
    _version = '251'
    fluent_name = 'spe-diff-yy'
    _python_name = 'spe_diff_yy'

class spe_diff_yz(Real):
    """
    YZ diffusion matrix coefficient.
    """
    _version = '251'
    fluent_name = 'spe-diff-yz'
    _python_name = 'spe_diff_yz'

class spe_diff_zx(Real):
    """
    ZX diffusion matrix coefficient.
    """
    _version = '251'
    fluent_name = 'spe-diff-zx'
    _python_name = 'spe_diff_zx'

class spe_diff_zy(Real):
    """
    ZY diffusion matrix coefficient.
    """
    _version = '251'
    fluent_name = 'spe-diff-zy'
    _python_name = 'spe_diff_zy'

class spe_diff_zz(Real):
    """
    ZZ diffusion matrix coefficient.
    """
    _version = '251'
    fluent_name = 'spe-diff-zz'
    _python_name = 'spe_diff_zz'

class wall_treatment_1(Boolean):
    """
    Enable wall treatment at porous fluid interfaces?.
    """
    _version = '251'
    fluent_name = 'wall-treatment?'
    _python_name = 'wall_treatment'

class rad_porous_wall(Boolean):
    """
    Enable (opaque) radiation wall model for porous-fluid interface?.
    """
    _version = '251'
    fluent_name = 'rad-porous-wall?'
    _python_name = 'rad_porous_wall'

class rad_porous_wall_in_emiss(Group):
    """
    Internal Emissivity.
    """
    _version = '251'
    fluent_name = 'rad-porous-wall-in-emiss'
    _python_name = 'rad_porous_wall_in_emiss'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class rad_porous_wall_diffuse_fraction(Real):
    """
    Diffuse Fraction.
    """
    _version = '251'
    fluent_name = 'rad-porous-wall-diffuse-fraction'
    _python_name = 'rad_porous_wall_diffuse_fraction'

class porous_zone(Group):
    """
    Allows to change porous-zone model variables or settings.
    """
    _version = '251'
    fluent_name = 'porous-zone'
    _python_name = 'porous_zone'
    child_names = ['porous', 'dir_spec_cond', 'cursys_name', 'direction_1_vector', 'direction_2_vector', 'cone_axis_vector', 'point_on_cone_axis', 'cone_angle', 'rel_vel_resistance', 'viscous_resistance', 'alt_inertial_form', 'inertial_resistance', 'power_law_c0', 'power_law_c1', 'porosity', 'relative_viscosity', 'relative_permeability', 'corey', 'stone_1', 'stone_2', 'rel_perm_limit_p1', 'rel_perm_limit_p2', 'ref_perm_p1', 'exp_p1', 'res_sat_p1', 'ref_perm_p2', 'exp_p2', 'res_sat_p2', 'ref_perm_p3', 'exp_p3', 'res_sat_p3', 'capillary_pressure', 'max_capillary_pressure', 'van_genuchten_pg', 'van_genuchten_ng', 'skjaeveland_nw_pc_coef', 'skjaeveland_nw_pc_pwr', 'skjaeveland_wet_pc_coef', 'skjaeveland_wet_pc_pwr', 'brooks_corey_pe', 'brooks_corey_ng', 'leverett_con_ang', 'rp_cbox_p1', 'rp_edit_p1', 'rel_perm_tabular_p1', 'rel_perm_table_p1', 'rel_perm_satw_p1', 'rel_perm_rp_p1', 'rp_cbox_p2', 'rp_edit_p2', 'rel_perm_tabular_p2', 'rel_perm_table_p2', 'rel_perm_satw_p2', 'rel_perm_rp_p2', 'wetting_phase', 'non_wetting_phase', 'equib_thermal', 'non_equib_thermal', 'solid_material', 'area_density', 'heat_transfer_coeff', 'porous_structure', 'structure_material', 'anisotropic_spe_diff', 'spe_diff_xx', 'spe_diff_xy', 'spe_diff_xz', 'spe_diff_yx', 'spe_diff_yy', 'spe_diff_yz', 'spe_diff_zx', 'spe_diff_zy', 'spe_diff_zz', 'wall_treatment', 'rad_porous_wall', 'rad_porous_wall_in_emiss', 'rad_porous_wall_diffuse_fraction']
    _child_classes = dict(
        porous=porous,
        dir_spec_cond=dir_spec_cond,
        cursys_name=cursys_name,
        direction_1_vector=direction_1_vector,
        direction_2_vector=direction_2_vector,
        cone_axis_vector=cone_axis_vector,
        point_on_cone_axis=point_on_cone_axis,
        cone_angle=cone_angle,
        rel_vel_resistance=rel_vel_resistance,
        viscous_resistance=viscous_resistance,
        alt_inertial_form=alt_inertial_form,
        inertial_resistance=inertial_resistance,
        power_law_c0=power_law_c0,
        power_law_c1=power_law_c1,
        porosity=porosity,
        relative_viscosity=relative_viscosity,
        relative_permeability=relative_permeability_1,
        corey=corey,
        stone_1=stone_1,
        stone_2=stone_2,
        rel_perm_limit_p1=rel_perm_limit_p1,
        rel_perm_limit_p2=rel_perm_limit_p2,
        ref_perm_p1=ref_perm_p1,
        exp_p1=exp_p1,
        res_sat_p1=res_sat_p1,
        ref_perm_p2=ref_perm_p2,
        exp_p2=exp_p2,
        res_sat_p2=res_sat_p2,
        ref_perm_p3=ref_perm_p3,
        exp_p3=exp_p3,
        res_sat_p3=res_sat_p3,
        capillary_pressure=capillary_pressure_1,
        max_capillary_pressure=max_capillary_pressure,
        van_genuchten_pg=van_genuchten_pg,
        van_genuchten_ng=van_genuchten_ng,
        skjaeveland_nw_pc_coef=skjaeveland_nw_pc_coef,
        skjaeveland_nw_pc_pwr=skjaeveland_nw_pc_pwr,
        skjaeveland_wet_pc_coef=skjaeveland_wet_pc_coef,
        skjaeveland_wet_pc_pwr=skjaeveland_wet_pc_pwr,
        brooks_corey_pe=brooks_corey_pe,
        brooks_corey_ng=brooks_corey_ng,
        leverett_con_ang=leverett_con_ang,
        rp_cbox_p1=rp_cbox_p1,
        rp_edit_p1=rp_edit_p1,
        rel_perm_tabular_p1=rel_perm_tabular_p1,
        rel_perm_table_p1=rel_perm_table_p1,
        rel_perm_satw_p1=rel_perm_satw_p1,
        rel_perm_rp_p1=rel_perm_rp_p1,
        rp_cbox_p2=rp_cbox_p2,
        rp_edit_p2=rp_edit_p2,
        rel_perm_tabular_p2=rel_perm_tabular_p2,
        rel_perm_table_p2=rel_perm_table_p2,
        rel_perm_satw_p2=rel_perm_satw_p2,
        rel_perm_rp_p2=rel_perm_rp_p2,
        wetting_phase=wetting_phase,
        non_wetting_phase=non_wetting_phase,
        equib_thermal=equib_thermal,
        non_equib_thermal=non_equib_thermal,
        solid_material=solid_material,
        area_density=area_density,
        heat_transfer_coeff=heat_transfer_coeff,
        porous_structure=porous_structure,
        structure_material=structure_material,
        anisotropic_spe_diff=anisotropic_spe_diff,
        spe_diff_xx=spe_diff_xx,
        spe_diff_xy=spe_diff_xy,
        spe_diff_xz=spe_diff_xz,
        spe_diff_yx=spe_diff_yx,
        spe_diff_yy=spe_diff_yy,
        spe_diff_yz=spe_diff_yz,
        spe_diff_zx=spe_diff_zx,
        spe_diff_zy=spe_diff_zy,
        spe_diff_zz=spe_diff_zz,
        wall_treatment=wall_treatment_1,
        rad_porous_wall=rad_porous_wall,
        rad_porous_wall_in_emiss=rad_porous_wall_in_emiss,
        rad_porous_wall_diffuse_fraction=rad_porous_wall_diffuse_fraction,
    )
    _child_aliases = dict(
        c0=('power_law_c0', 'c0'),
        c1=('power_law_c1', 'c1'),
        cone_axis_components=('cone_axis_vector', 'cone-axis-components'),
        direction_1_components=('direction_1_vector', 'direction-1-components'),
        direction_2_components=('direction_2_vector', 'direction-2-components'),
        inertial_resistance_components=('inertial_resistance', 'inertial-resistance-components'),
        none=('relative_permeability', 'none?'),
        point_on_cone_axis_components=('point_on_cone_axis', 'point-on-cone-axis-components'),
        viscosity_ratio=('relative_viscosity', 'viscosity-ratio'),
        viscous_resistance_components=('viscous_resistance', 'viscous-resistance-components'),
    )

class fan_zone_1(Boolean):
    """
    3D Fan Zone?.
    """
    _version = '251'
    fluent_name = 'fan-zone'
    _python_name = 'fan_zone'

class inlet_fan_zone(String, AllowedValuesMixin):
    """
    Inlet Fan Zone.
    """
    _version = '251'
    fluent_name = 'inlet-fan-zone'
    _python_name = 'inlet_fan_zone'

class fan_thickness(Real):
    """
    Fan Thickness.
    """
    _version = '251'
    fluent_name = 'fan-thickness'
    _python_name = 'fan_thickness'

class fan_hub_rad(Real):
    """
    Fan Hub Radius.
    """
    _version = '251'
    fluent_name = 'fan-hub-rad'
    _python_name = 'fan_hub_rad'

class fan_tip_rad(Real):
    """
    Fan Tip Radius.
    """
    _version = '251'
    fluent_name = 'fan-tip-rad'
    _python_name = 'fan_tip_rad'

class fan_origin_child(Real):
    """
    'child_object_type' of fan_origin.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'fan_origin_child'

class fan_origin(ListObject[fan_origin_child]):
    """
    Fan origin components.
    """
    _version = '251'
    fluent_name = 'fan-origin'
    _python_name = 'fan_origin'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = fan_origin_child

class fan_rot_dir(String, AllowedValuesMixin):
    """
    Rotational Direction.
    """
    _version = '251'
    fluent_name = 'fan-rot-dir'
    _python_name = 'fan_rot_dir'

class fan_opert_angvel(Real):
    """
    Fan Operating Angular Velocity.
    """
    _version = '251'
    fluent_name = 'fan-opert-angvel'
    _python_name = 'fan_opert_angvel'

class fan_inflection_point(Real):
    """
    Fan Inflection Point.
    """
    _version = '251'
    fluent_name = 'fan-inflection-point'
    _python_name = 'fan_inflection_point'

class limit_flow_fan(Boolean):
    """
    Limit Flow Rate Through Fan.
    """
    _version = '251'
    fluent_name = 'limit-flow-fan'
    _python_name = 'limit_flow_fan'

class max_flow_rate(Real):
    """
    Maximum Flow Rate.
    """
    _version = '251'
    fluent_name = 'max-flow-rate'
    _python_name = 'max_flow_rate'

class min_flow_rate(Real):
    """
    Minimum Flow Rate.
    """
    _version = '251'
    fluent_name = 'min-flow-rate'
    _python_name = 'min_flow_rate'

class tan_source_term(Boolean):
    """
    Tangential Source Term.
    """
    _version = '251'
    fluent_name = 'tan-source-term'
    _python_name = 'tan_source_term'

class rad_source_term(Boolean):
    """
    Radial Source Term.
    """
    _version = '251'
    fluent_name = 'rad-source-term'
    _python_name = 'rad_source_term'

class axial_source_term(Boolean):
    """
    Axial Source Term.
    """
    _version = '251'
    fluent_name = 'axial-source-term'
    _python_name = 'axial_source_term'

class fan_axial_source_method(String, AllowedValuesMixin):
    """
    Method.
    """
    _version = '251'
    fluent_name = 'fan-axial-source-method'
    _python_name = 'fan_axial_source_method'

class fan_pre_jump(Real):
    """
    Pressure Jump.
    """
    _version = '251'
    fluent_name = 'fan-pre-jump'
    _python_name = 'fan_pre_jump'

class fan_curve_fit(String, AllowedValuesMixin):
    """
    Fan Curve Fitting Method.
    """
    _version = '251'
    fluent_name = 'fan-curve-fit'
    _python_name = 'fan_curve_fit'

class fan_poly_order(Real):
    """
    Polynomial Order.
    """
    _version = '251'
    fluent_name = 'fan-poly-order'
    _python_name = 'fan_poly_order'

class fan_ini_flow(Real):
    """
    Initial Flow Rate.
    """
    _version = '251'
    fluent_name = 'fan-ini-flow'
    _python_name = 'fan_ini_flow'

class fan_test_angvel(Real):
    """
    Fan Test Angular Velocity.
    """
    _version = '251'
    fluent_name = 'fan-test-angvel'
    _python_name = 'fan_test_angvel'

class fan_test_temp(Real):
    """
    Fan Test Temperature.
    """
    _version = '251'
    fluent_name = 'fan-test-temp'
    _python_name = 'fan_test_temp'

class fan_curve_filename(String, AllowedValuesMixin):
    """
    Fan Curve Filename.
    """
    _version = '251'
    fluent_name = 'fan-curve-filename'
    _python_name = 'fan_curve_filename'

class read_fan_curve(String):
    """
    Read Fan Curve.
    """
    _version = '251'
    fluent_name = 'read-fan-curve'
    _python_name = 'read_fan_curve'

class fan_zone(Group):
    """
    Allows to change fan-zone model variables or settings.
    """
    _version = '251'
    fluent_name = 'fan-zone'
    _python_name = 'fan_zone'
    child_names = ['fan_zone', 'inlet_fan_zone', 'fan_thickness', 'fan_hub_rad', 'fan_tip_rad', 'fan_origin', 'fan_rot_dir', 'fan_opert_angvel', 'fan_inflection_point', 'limit_flow_fan', 'max_flow_rate', 'min_flow_rate', 'tan_source_term', 'rad_source_term', 'axial_source_term', 'fan_axial_source_method', 'fan_pre_jump', 'fan_curve_fit', 'fan_poly_order', 'fan_ini_flow', 'fan_test_angvel', 'fan_test_temp', 'fan_curve_filename', 'read_fan_curve']
    _child_classes = dict(
        fan_zone=fan_zone_1,
        inlet_fan_zone=inlet_fan_zone,
        fan_thickness=fan_thickness,
        fan_hub_rad=fan_hub_rad,
        fan_tip_rad=fan_tip_rad,
        fan_origin=fan_origin,
        fan_rot_dir=fan_rot_dir,
        fan_opert_angvel=fan_opert_angvel,
        fan_inflection_point=fan_inflection_point,
        limit_flow_fan=limit_flow_fan,
        max_flow_rate=max_flow_rate,
        min_flow_rate=min_flow_rate,
        tan_source_term=tan_source_term,
        rad_source_term=rad_source_term,
        axial_source_term=axial_source_term,
        fan_axial_source_method=fan_axial_source_method,
        fan_pre_jump=fan_pre_jump,
        fan_curve_fit=fan_curve_fit,
        fan_poly_order=fan_poly_order,
        fan_ini_flow=fan_ini_flow,
        fan_test_angvel=fan_test_angvel,
        fan_test_temp=fan_test_temp,
        fan_curve_filename=fan_curve_filename,
        read_fan_curve=read_fan_curve,
    )
    _child_aliases = dict(
        fan_origin_components=('fan_origin', 'fan-origin-components'),
        fan_zone_list=('inlet_fan_zone', 'fan-zone-list'),
        fanzone=('fan_zone', 'fanzone?'),
    )

class les_zone(Boolean):
    """
    LES zone?.
    """
    _version = '251'
    fluent_name = 'les-zone'
    _python_name = 'les_zone'

class laminar_mut_zero(Boolean):
    """
    Turbulent Viscosity to zero within laminar zone?.
    """
    _version = '251'
    fluent_name = 'laminar-mut-zero?'
    _python_name = 'laminar_mut_zero'

class les_embedded_spec(String, AllowedValuesMixin):
    """
    Embedded Subgrid-Scale Model.
    """
    _version = '251'
    fluent_name = 'les-embedded-spec'
    _python_name = 'les_embedded_spec'

class les_embedded_mom_scheme(String, AllowedValuesMixin):
    """
    Momentum Spatial Discretization.
    """
    _version = '251'
    fluent_name = 'les-embedded-mom-scheme'
    _python_name = 'les_embedded_mom_scheme'

class les_embedded_c_wale(Real):
    """
    Cwale.
    """
    _version = '251'
    fluent_name = 'les-embedded-c-wale'
    _python_name = 'les_embedded_c_wale'

class les_embedded_c_smag(Real):
    """
    Cs.
    """
    _version = '251'
    fluent_name = 'les-embedded-c-smag'
    _python_name = 'les_embedded_c_smag'

class embedded_les(Group):
    """
    Allows to change embedded-les model variables or settings.
    """
    _version = '251'
    fluent_name = 'embedded-les'
    _python_name = 'embedded_les'
    child_names = ['les_zone', 'laminar_mut_zero', 'les_embedded_spec', 'les_embedded_mom_scheme', 'les_embedded_c_wale', 'les_embedded_c_smag']
    _child_classes = dict(
        les_zone=les_zone,
        laminar_mut_zero=laminar_mut_zero,
        les_embedded_spec=les_embedded_spec,
        les_embedded_mom_scheme=les_embedded_mom_scheme,
        les_embedded_c_wale=les_embedded_c_wale,
        les_embedded_c_smag=les_embedded_c_smag,
    )
    _child_aliases = dict(
        les_embedded=('les_zone', 'les-embedded?'),
    )

class react(Boolean):
    """
    Activate reaction mechanisms?.
    """
    _version = '251'
    fluent_name = 'react?'
    _python_name = 'react'

class reaction_mechs_1(String, AllowedValuesMixin):
    """
    Reaction Mechanism.
    """
    _version = '251'
    fluent_name = 'reaction-mechs'
    _python_name = 'reaction_mechs'

class surface_volume_ratio(Real):
    """
    Surface-Volume-Ratio.
    """
    _version = '251'
    fluent_name = 'surface-volume-ratio'
    _python_name = 'surface_volume_ratio'

class enable_12(Boolean):
    """
    Zone is electrolyte.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class reaction(Group):
    """
    Allows to change reaction model variables or settings.
    """
    _version = '251'
    fluent_name = 'reaction'
    _python_name = 'reaction'
    child_names = ['react', 'reaction_mechs', 'surface_volume_ratio', 'enable']
    _child_classes = dict(
        react=react,
        reaction_mechs=reaction_mechs_1,
        surface_volume_ratio=surface_volume_ratio,
        enable=enable_12,
    )
    _child_aliases = dict(
        electrolyte=('enable', 'electrolyte?'),
    )

class enable_13(Boolean):
    """
    Zone is electrode.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class electrode(Group):
    """
    Zone is electrode.
    """
    _version = '251'
    fluent_name = 'electrode'
    _python_name = 'electrode'
    child_names = ['enable']
    _child_classes = dict(
        enable=enable_13,
    )
    _child_aliases = dict(
        electrode=('enable', 'electrode?'),
    )

class enable_14(Boolean):
    """
    Enable/disable source terms.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class terms_child_child(Group):
    """
    'child_object_type' of child_object_type.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'terms_child_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class terms_child(ListObject[terms_child_child]):
    """
    'child_object_type' of terms.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'terms_child'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = terms_child_child

class terms(NamedObject[terms_child], CreatableNamedObjectMixin[terms_child]):
    """
    List of sources.
    """
    _version = '251'
    fluent_name = 'terms'
    _python_name = 'terms'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = terms_child

class sources(Group):
    """
    Source terms for this cell zone.
    """
    _version = '251'
    fluent_name = 'sources'
    _python_name = 'sources'
    child_names = ['enable', 'terms']
    _child_classes = dict(
        enable=enable_14,
        terms=terms,
    )
    _child_aliases = dict(
        source_terms=('terms', 'source-terms'),
        sources=('enable', 'sources?'),
    )

class enable_15(Boolean):
    """
    Enable/disable fixed terms.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class cylindrical_fixed_var(Boolean):
    """
    Local Coordinate System for Fixed Velocities.
    """
    _version = '251'
    fluent_name = 'cylindrical-fixed-var?'
    _python_name = 'cylindrical_fixed_var'

class variables_child(Group):
    """
    'child_object_type' of variables.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'variables_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class variables(NamedObject[variables_child], CreatableNamedObjectMixin[variables_child]):
    """
    List of variables for fixed terms.
    """
    _version = '251'
    fluent_name = 'variables'
    _python_name = 'variables'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = variables_child

class fixed_values(Group):
    """
    Allows to change fixed-values model variables or settings.
    """
    _version = '251'
    fluent_name = 'fixed-values'
    _python_name = 'fixed_values'
    child_names = ['enable', 'cylindrical_fixed_var', 'variables']
    _child_classes = dict(
        enable=enable_15,
        cylindrical_fixed_var=cylindrical_fixed_var,
        variables=variables,
    )
    _child_aliases = dict(
        fixed=('enable', 'fixed?'),
        fixes=('variables', 'fixes'),
    )

class mp_compressive_beta_max(Real):
    """
    Compressive Scheme Slope Limiter.
    """
    _version = '251'
    fluent_name = 'mp-compressive-beta-max'
    _python_name = 'mp_compressive_beta_max'

class mp_boiling_zone(Boolean):
    """
    Boiling Zone.
    """
    _version = '251'
    fluent_name = 'mp-boiling-zone?'
    _python_name = 'mp_boiling_zone'

class numerical_beach(Boolean):
    """
    Numerical Beach.
    """
    _version = '251'
    fluent_name = 'numerical-beach?'
    _python_name = 'numerical_beach'

class beach_id(Integer):
    """
    Beach Group ID.
    """
    _version = '251'
    fluent_name = 'beach-id'
    _python_name = 'beach_id'

class beach_multi_dir(Boolean):
    """
    Multi-Directional Beach.
    """
    _version = '251'
    fluent_name = 'beach-multi-dir?'
    _python_name = 'beach_multi_dir'

class beach_damp_type(String, AllowedValuesMixin):
    """
    Damping Type.
    """
    _version = '251'
    fluent_name = 'beach-damp-type'
    _python_name = 'beach_damp_type'

class beach_inlet_bndr(String, AllowedValuesMixin):
    """
    Compute from Inlet Boundary.
    """
    _version = '251'
    fluent_name = 'beach-inlet-bndr'
    _python_name = 'beach_inlet_bndr'

class beach_fs_level(Real):
    """
    Free Surface Level.
    """
    _version = '251'
    fluent_name = 'beach-fs-level'
    _python_name = 'beach_fs_level'

class beach_bottom_level(Real):
    """
    Bottom Level.
    """
    _version = '251'
    fluent_name = 'beach-bottom-level'
    _python_name = 'beach_bottom_level'

class beach_dir_ni(Real):
    """
    X-Direction.
    """
    _version = '251'
    fluent_name = 'beach-dir-ni'
    _python_name = 'beach_dir_ni'

class beach_dir_nj(Real):
    """
    Y-Direction.
    """
    _version = '251'
    fluent_name = 'beach-dir-nj'
    _python_name = 'beach_dir_nj'

class beach_dir_nk(Real):
    """
    Z-Direction.
    """
    _version = '251'
    fluent_name = 'beach-dir-nk'
    _python_name = 'beach_dir_nk'

class beach_damp_len_spec(String, AllowedValuesMixin):
    """
    Damping Length Specification.
    """
    _version = '251'
    fluent_name = 'beach-damp-len-spec'
    _python_name = 'beach_damp_len_spec'

class beach_end_point(Real):
    """
    End Point.
    """
    _version = '251'
    fluent_name = 'beach-end-point'
    _python_name = 'beach_end_point'

class beach_wave_len(Real):
    """
    Wave Length.
    """
    _version = '251'
    fluent_name = 'beach-wave-len'
    _python_name = 'beach_wave_len'

class beach_len_factor(Real):
    """
    Number of Wave Lengths.
    """
    _version = '251'
    fluent_name = 'beach-len-factor'
    _python_name = 'beach_len_factor'

class beach_start_point(Real):
    """
    Start Point.
    """
    _version = '251'
    fluent_name = 'beach-start-point'
    _python_name = 'beach_start_point'

class ni(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'ni'
    _python_name = 'ni'

class nj(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'nj'
    _python_name = 'nj'

class nk(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'nk'
    _python_name = 'nk'

class xe(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'xe'
    _python_name = 'xe'

class len(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'len'
    _python_name = 'len'

class beach_dir_list_child(Group):
    """
    'child_object_type' of beach_dir_list.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'beach_dir_list_child'
    child_names = ['ni', 'nj', 'nk', 'xe', 'len']
    _child_classes = dict(
        ni=ni,
        nj=nj,
        nk=nk,
        xe=xe,
        len=len,
    )

class beach_dir_list(ListObject[beach_dir_list_child]):
    """
    Multi-Directional Beach Inputs.
    """
    _version = '251'
    fluent_name = 'beach-dir-list'
    _python_name = 'beach_dir_list'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = beach_dir_list_child

class beach_damp_relative(Boolean):
    """
    Relative Velocity Resistance Formulation.
    """
    _version = '251'
    fluent_name = 'beach-damp-relative?'
    _python_name = 'beach_damp_relative'

class beach_damp_resist_lin(Real):
    """
    Linear Damping Resistance.
    """
    _version = '251'
    fluent_name = 'beach-damp-resist-lin'
    _python_name = 'beach_damp_resist_lin'

class beach_damp_resist(Real):
    """
    Quadratic Damping Resistance.
    """
    _version = '251'
    fluent_name = 'beach-damp-resist'
    _python_name = 'beach_damp_resist'

class multiphase_1(Group):
    """
    Allows to change multiphase model variables or settings.
    """
    _version = '251'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['mp_compressive_beta_max', 'mp_boiling_zone', 'numerical_beach', 'beach_id', 'beach_multi_dir', 'beach_damp_type', 'beach_inlet_bndr', 'beach_fs_level', 'beach_bottom_level', 'beach_dir_ni', 'beach_dir_nj', 'beach_dir_nk', 'beach_damp_len_spec', 'beach_end_point', 'beach_wave_len', 'beach_len_factor', 'beach_start_point', 'beach_dir_list', 'beach_damp_relative', 'beach_damp_resist_lin', 'beach_damp_resist']
    _child_classes = dict(
        mp_compressive_beta_max=mp_compressive_beta_max,
        mp_boiling_zone=mp_boiling_zone,
        numerical_beach=numerical_beach,
        beach_id=beach_id,
        beach_multi_dir=beach_multi_dir,
        beach_damp_type=beach_damp_type,
        beach_inlet_bndr=beach_inlet_bndr,
        beach_fs_level=beach_fs_level,
        beach_bottom_level=beach_bottom_level,
        beach_dir_ni=beach_dir_ni,
        beach_dir_nj=beach_dir_nj,
        beach_dir_nk=beach_dir_nk,
        beach_damp_len_spec=beach_damp_len_spec,
        beach_end_point=beach_end_point,
        beach_wave_len=beach_wave_len,
        beach_len_factor=beach_len_factor,
        beach_start_point=beach_start_point,
        beach_dir_list=beach_dir_list,
        beach_damp_relative=beach_damp_relative,
        beach_damp_resist_lin=beach_damp_resist_lin,
        beach_damp_resist=beach_damp_resist,
    )

class udf_zmotion_name(String, AllowedValuesMixin):
    """
    User Defined Zone Motion Function.
    """
    _version = '251'
    fluent_name = 'udf-zmotion-name'
    _python_name = 'udf_zmotion_name'

class axis_direction_1_child(Group):
    """
    'child_object_type' of axis_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'axis_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class axis_direction_1(ListObject[axis_direction_1_child]):
    """
    Axis direction components.
    """
    _version = '251'
    fluent_name = 'axis-direction'
    _python_name = 'axis_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = axis_direction_1_child

class axis_origin_1_child(Group):
    """
    'child_object_type' of axis_origin.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'axis_origin_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class axis_origin_1(ListObject[axis_origin_1_child]):
    """
    Axis origin components.
    """
    _version = '251'
    fluent_name = 'axis-origin'
    _python_name = 'axis_origin'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = axis_origin_1_child

class cursys(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'cursys?'
    _python_name = 'cursys'

class solid_omega(Group):
    """
    Solid Body Rotation Speed.
    """
    _version = '251'
    fluent_name = 'solid-omega'
    _python_name = 'solid_omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class solid_relative_to_thread(String, AllowedValuesMixin):
    """
    Relative To Cell Zone.
    """
    _version = '251'
    fluent_name = 'solid-relative-to-thread'
    _python_name = 'solid_relative_to_thread'

class enable_16(Boolean):
    """
    Enable/disable solid motion.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class solid_motion_axis_direction_child(Group):
    """
    'child_object_type' of solid_motion_axis_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'solid_motion_axis_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class solid_motion_axis_direction(ListObject[solid_motion_axis_direction_child]):
    """
    Solid motion axis direction components.
    """
    _version = '251'
    fluent_name = 'solid-motion-axis-direction'
    _python_name = 'solid_motion_axis_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = solid_motion_axis_direction_child

class solid_motion_axis_origin_child(Group):
    """
    'child_object_type' of solid_motion_axis_origin.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'solid_motion_axis_origin_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class solid_motion_axis_origin(ListObject[solid_motion_axis_origin_child]):
    """
    Solid motion axis origin components.
    """
    _version = '251'
    fluent_name = 'solid-motion-axis-origin'
    _python_name = 'solid_motion_axis_origin'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = solid_motion_axis_origin_child

class solid_motion_velocity_child(Group):
    """
    'child_object_type' of solid_motion_velocity.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'solid_motion_velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class solid_motion_velocity(ListObject[solid_motion_velocity_child]):
    """
    Solid motion velocity components.
    """
    _version = '251'
    fluent_name = 'solid-motion-velocity'
    _python_name = 'solid_motion_velocity'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = solid_motion_velocity_child

class solid_motion_zone_motion_function(String, AllowedValuesMixin):
    """
    Solid Motion User Defined Solid Motion Function.
    """
    _version = '251'
    fluent_name = 'solid-motion-zone-motion-function'
    _python_name = 'solid_motion_zone_motion_function'

class omega_1(Group):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'omega'
    _python_name = 'omega'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class relative_to_thread(String, AllowedValuesMixin):
    """
    Relative To Cell Zone.
    """
    _version = '251'
    fluent_name = 'relative-to-thread'
    _python_name = 'relative_to_thread'

class motion_spec(String, AllowedValuesMixin):
    """
    Motion Type.
    """
    _version = '251'
    fluent_name = 'motion-spec'
    _python_name = 'motion_spec'

class disabled(Group):
    """
    Allows to change disabled model variables or settings.
    """
    _version = '251'
    fluent_name = 'disabled'
    _python_name = 'disabled'
    child_names = ['udf_zmotion_name', 'axis_direction', 'axis_origin', 'cursys', 'solid_omega', 'solid_relative_to_thread', 'enable', 'solid_motion_axis_direction', 'solid_motion_axis_origin', 'solid_motion_velocity', 'solid_motion_zone_motion_function', 'omega', 'relative_to_thread', 'motion_spec']
    _child_classes = dict(
        udf_zmotion_name=udf_zmotion_name,
        axis_direction=axis_direction_1,
        axis_origin=axis_origin_1,
        cursys=cursys,
        solid_omega=solid_omega,
        solid_relative_to_thread=solid_relative_to_thread,
        enable=enable_16,
        solid_motion_axis_direction=solid_motion_axis_direction,
        solid_motion_axis_origin=solid_motion_axis_origin,
        solid_motion_velocity=solid_motion_velocity,
        solid_motion_zone_motion_function=solid_motion_zone_motion_function,
        omega=omega_1,
        relative_to_thread=relative_to_thread,
        motion_spec=motion_spec,
    )
    _child_aliases = dict(
        axis_direction_component=('axis_direction', 'axis-direction-component'),
        axis_origin_component=('axis_origin', 'axis-origin-component'),
        solid_motion_axis_direction_components=('solid_motion_axis_direction', 'solid-motion-axis-direction-components'),
        solid_motion_axis_origin_components=('solid_motion_axis_origin', 'solid-motion-axis-origin-components'),
        solid_motion_velocity_components=('solid_motion_velocity', 'solid-motion-velocity-components'),
        solid_motion=('enable', 'solid-motion?'),
        solid_udf_zmotion_name=('solid_motion_zone_motion_function', 'solid-udf-zmotion-name'),
    )

class adjacent_cell_zone(Query):
    """
    Get adjacent cell zone for this face zone.
    """
    _version = '251'
    fluent_name = 'adjacent-cell-zone'
    _python_name = 'adjacent_cell_zone'

class shadow_face_zone(Query):
    """
    Get shadow zone for this wall zone.
    """
    _version = '251'
    fluent_name = 'shadow-face-zone'
    _python_name = 'shadow_face_zone'

class phase_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['general', 'conical', 'reference_frame', 'mesh_motion', 'zonal_models', 'porous_zone', 'fan_zone', 'embedded_les', 'reaction', 'electrode', 'sources', 'fixed_values', 'multiphase', 'disabled']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        general=general_2,
        conical=conical,
        reference_frame=reference_frame_2,
        mesh_motion=mesh_motion,
        zonal_models=zonal_models,
        porous_zone=porous_zone,
        fan_zone=fan_zone,
        embedded_les=embedded_les,
        reaction=reaction,
        electrode=electrode,
        sources=sources,
        fixed_values=fixed_values,
        multiphase=multiphase_1,
        disabled=disabled,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        material=('general/material', 'material'),
    )

class phase(NamedObject[phase_child], CreatableNamedObjectMixin[phase_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_child

class fluid_1_child(Group):
    """
    'child_object_type' of fluid.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'fluid_child'
    child_names = ['name', 'phase', 'general', 'conical', 'reference_frame', 'mesh_motion', 'zonal_models', 'porous_zone', 'fan_zone', 'embedded_les', 'reaction', 'electrode', 'sources', 'fixed_values', 'multiphase', 'disabled']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase,
        general=general_2,
        conical=conical,
        reference_frame=reference_frame_2,
        mesh_motion=mesh_motion,
        zonal_models=zonal_models,
        porous_zone=porous_zone,
        fan_zone=fan_zone,
        embedded_les=embedded_les,
        reaction=reaction,
        electrode=electrode,
        sources=sources,
        fixed_values=fixed_values,
        multiphase=multiphase_1,
        disabled=disabled,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        material=('general/material', 'material'),
    )

class fluid_1(NamedObject[fluid_1_child], CreatableNamedObjectMixin[fluid_1_child]):
    """
    Settings for cell zone condition object.
    """
    _version = '251'
    fluent_name = 'fluid'
    _python_name = 'fluid'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = fluid_1_child

class general_3(Group):
    """
    Allows to change general model variables or settings.
    """
    _version = '251'
    fluent_name = 'general'
    _python_name = 'general'
    child_names = ['material', 'participates_in_radiation']
    _child_classes = dict(
        material=material_5,
        participates_in_radiation=participates_in_radiation,
    )
    _child_aliases = dict(
        radiating=('participates_in_radiation', 'radiating?'),
    )

class reference_frame_3(Group):
    """
    Allows to change reference-frame model variables or settings.
    """
    _version = '251'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'
    child_names = ['frame_motion', 'mrf_relative_to_thread', 'mrf_omega', 'reference_frame_velocity', 'reference_frame_axis_origin', 'reference_frame_axis_direction', 'reference_frame_zone_motion_function']
    _child_classes = dict(
        frame_motion=frame_motion,
        mrf_relative_to_thread=mrf_relative_to_thread,
        mrf_omega=mrf_omega,
        reference_frame_velocity=reference_frame_velocity,
        reference_frame_axis_origin=reference_frame_axis_origin,
        reference_frame_axis_direction=reference_frame_axis_direction,
        reference_frame_zone_motion_function=reference_frame_zone_motion_function,
    )
    _child_aliases = dict(
        mrf_motion=('frame_motion', 'mrf-motion?'),
        mrf_udf_zmotion_name=('reference_frame_zone_motion_function', 'mrf-udf-zmotion-name'),
        reference_frame_axis_direction_components=('reference_frame_axis_direction', 'reference-frame-axis-direction-components'),
        reference_frame_axis_origin_components=('reference_frame_axis_origin', 'reference-frame-axis-origin-components'),
        reference_frame_velocity_components=('reference_frame_velocity', 'reference-frame-velocity-components'),
    )

class solid_motion(Group):
    """
    Allows to change solid-motion model variables or settings.
    """
    _version = '251'
    fluent_name = 'solid-motion'
    _python_name = 'solid_motion'
    child_names = ['enable', 'solid_relative_to_thread', 'solid_omega', 'solid_motion_velocity', 'solid_motion_axis_origin', 'solid_motion_axis_direction', 'solid_motion_zone_motion_function']
    _child_classes = dict(
        enable=enable_16,
        solid_relative_to_thread=solid_relative_to_thread,
        solid_omega=solid_omega,
        solid_motion_velocity=solid_motion_velocity,
        solid_motion_axis_origin=solid_motion_axis_origin,
        solid_motion_axis_direction=solid_motion_axis_direction,
        solid_motion_zone_motion_function=solid_motion_zone_motion_function,
    )
    _child_aliases = dict(
        solid_motion_axis_direction_components=('solid_motion_axis_direction', 'solid-motion-axis-direction-components'),
        solid_motion_axis_origin_components=('solid_motion_axis_origin', 'solid-motion-axis-origin-components'),
        solid_motion_velocity_components=('solid_motion_velocity', 'solid-motion-velocity-components'),
        solid_motion=('enable', 'solid-motion?'),
        solid_udf_zmotion_name=('solid_motion_zone_motion_function', 'solid-udf-zmotion-name'),
    )

class cursys_1(Boolean):
    """
    Assign local material orientation using curvilinear coordinate?.
    """
    _version = '251'
    fluent_name = 'cursys?'
    _python_name = 'cursys'

class material_orientation(Group):
    """
    Allows to change material-orientation model variables or settings.
    """
    _version = '251'
    fluent_name = 'material-orientation'
    _python_name = 'material_orientation'
    child_names = ['cursys', 'cursys_name']
    _child_classes = dict(
        cursys=cursys_1,
        cursys_name=cursys_name,
    )

class les_zone_1(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'les-zone'
    _python_name = 'les_zone'

class disabled_1(Group):
    """
    Allows to change disabled model variables or settings.
    """
    _version = '251'
    fluent_name = 'disabled'
    _python_name = 'disabled'
    child_names = ['les_zone', 'udf_zmotion_name', 'axis_origin', 'axis_direction', 'omega', 'relative_to_thread', 'motion_spec', 'cylindrical_fixed_var']
    _child_classes = dict(
        les_zone=les_zone_1,
        udf_zmotion_name=udf_zmotion_name,
        axis_origin=axis_origin_1,
        axis_direction=axis_direction_1,
        omega=omega_1,
        relative_to_thread=relative_to_thread,
        motion_spec=motion_spec,
        cylindrical_fixed_var=cylindrical_fixed_var,
    )
    _child_aliases = dict(
        axis_direction_component=('axis_direction', 'axis-direction-component'),
        axis_origin_component=('axis_origin', 'axis-origin-component'),
        les_embedded=('les_zone', 'les-embedded?'),
    )

class ecad_name(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'ecad-name'
    _python_name = 'ecad_name'

class choice(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'choice'
    _python_name = 'choice'

class rows(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'rows'
    _python_name = 'rows'

class columns(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'columns'
    _python_name = 'columns'

class ref_frame(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'ref-frame'
    _python_name = 'ref_frame'

class pwr_names(StringList, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'pwr-names'
    _python_name = 'pwr_names'

class pcb_zone_info(Group):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'pcb-zone-info'
    _python_name = 'pcb_zone_info'
    child_names = ['ecad_name', 'choice', 'rows', 'columns', 'ref_frame', 'pwr_names']
    _child_classes = dict(
        ecad_name=ecad_name,
        choice=choice,
        rows=rows,
        columns=columns,
        ref_frame=ref_frame,
        pwr_names=pwr_names,
    )

class pcb_model(Boolean):
    """
    PCB Model ON?.
    """
    _version = '251'
    fluent_name = 'pcb-model'
    _python_name = 'pcb_model'

class internal(Group):
    """
    Allows to change internal model variables or settings.
    """
    _version = '251'
    fluent_name = 'internal'
    _python_name = 'internal'
    child_names = ['pcb_zone_info', 'pcb_model', 'vapor_phase_realgas', 'active_wetsteam_zone', 'contact_property']
    _child_classes = dict(
        pcb_zone_info=pcb_zone_info,
        pcb_model=pcb_model,
        vapor_phase_realgas=vapor_phase_realgas,
        active_wetsteam_zone=active_wetsteam_zone,
        contact_property=contact_property,
    )
    _child_aliases = dict(
        pcb_model=('pcb_model', 'pcb-model?'),
    )

class electrolyte_1(Group):
    """
    Zone is electrolyte.
    """
    _version = '251'
    fluent_name = 'electrolyte'
    _python_name = 'electrolyte'
    child_names = ['enable']
    _child_classes = dict(
        enable=enable_12,
    )
    _child_aliases = dict(
        electrolyte=('enable', 'electrolyte?'),
    )

class phase_1_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['general', 'reference_frame', 'mesh_motion', 'solid_motion', 'sources', 'fixed_values', 'material_orientation', 'disabled', 'internal', 'electrolyte', 'electrode']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        general=general_3,
        reference_frame=reference_frame_3,
        mesh_motion=mesh_motion,
        solid_motion=solid_motion,
        sources=sources,
        fixed_values=fixed_values,
        material_orientation=material_orientation,
        disabled=disabled_1,
        internal=internal,
        electrolyte=electrolyte_1,
        electrode=electrode,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        material=('general/material', 'material'),
    )

class phase_1(NamedObject[phase_1_child], CreatableNamedObjectMixin[phase_1_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_1_child

class solid_2_child(Group):
    """
    'child_object_type' of solid.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'solid_child'
    child_names = ['name', 'phase', 'general', 'reference_frame', 'mesh_motion', 'solid_motion', 'sources', 'fixed_values', 'material_orientation', 'disabled', 'internal', 'electrolyte', 'electrode']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_1,
        general=general_3,
        reference_frame=reference_frame_3,
        mesh_motion=mesh_motion,
        solid_motion=solid_motion,
        sources=sources,
        fixed_values=fixed_values,
        material_orientation=material_orientation,
        disabled=disabled_1,
        internal=internal,
        electrolyte=electrolyte_1,
        electrode=electrode,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        material=('general/material', 'material'),
    )

class solid_2(NamedObject[solid_2_child], CreatableNamedObjectMixin[solid_2_child]):
    """
    Settings for cell zone condition object.
    """
    _version = '251'
    fluent_name = 'solid'
    _python_name = 'solid'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = solid_2_child

class from__1(String, AllowedValuesMixin):
    """
    Copy boundary conditions from zone.
    """
    _version = '251'
    fluent_name = 'from'
    _python_name = 'from_'

class to_1(StringList, AllowedValuesMixin):
    """
    Copy boundary conditions to zone.
    """
    _version = '251'
    fluent_name = 'to'
    _python_name = 'to'

class verbosity_3(Boolean):
    """
    Copy boundary conditions: Print more information.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class copy_1(Command):
    """
    Copy boundary conditions to another zone.
    
    Parameters
    ----------
        from_ : str
            Copy boundary conditions from zone.
        to : List
            Copy boundary conditions to zone.
        verbosity : bool
            Copy boundary conditions: Print more information.
    """
    _version = '251'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['from_', 'to', 'verbosity']
    _child_classes = dict(
        from_=from__1,
        to=to_1,
        verbosity=verbosity_3,
    )

class zone_list(StringList, AllowedValuesMixin):
    """
    Zone name list.
    """
    _version = '251'
    fluent_name = 'zone-list'
    _python_name = 'zone_list'

class set_zone_type(Command):
    """
    Set a zone's type.
    
    Parameters
    ----------
        zone_list : List
            Zone name list.
        new_type : str
            Give new zone type.
    """
    _version = '251'
    fluent_name = 'set-zone-type'
    _python_name = 'set_zone_type'
    argument_names = ['zone_list', 'new_type']
    _child_classes = dict(
        zone_list=zone_list,
        new_type=new_type,
    )

class cell_zone_list(StringList, AllowedValuesMixin):
    """
    Id/name of cell-zones to activate.
    """
    _version = '251'
    fluent_name = 'cell-zone-list'
    _python_name = 'cell_zone_list'

class activate_cell_zone(Command):
    """
    Activate a cell thread.
    
    Parameters
    ----------
        cell_zone_list : List
            Id/name of cell-zones to activate.
    """
    _version = '251'
    fluent_name = 'activate-cell-zone'
    _python_name = 'activate_cell_zone'
    argument_names = ['cell_zone_list']
    _child_classes = dict(
        cell_zone_list=cell_zone_list,
    )

class mrf_to_sliding_mesh(Command):
    """
    Change motion specification from MRF to moving mesh.
    
    Parameters
    ----------
        cell_zone_name : str
            The cell zone name.
    """
    _version = '251'
    fluent_name = 'mrf-to-sliding-mesh'
    _python_name = 'mrf_to_sliding_mesh'
    argument_names = ['cell_zone_name']
    _child_classes = dict(
        cell_zone_name=cell_zone_name,
    )

class convert_all_solid_mrf_to_solid_motion(Command):
    """
    Change all solid zones motion specification from MRF to solid motion.
    """
    _version = '251'
    fluent_name = 'convert-all-solid-mrf-to-solid-motion'
    _python_name = 'convert_all_solid_mrf_to_solid_motion'

class overwrite(Boolean):
    """
    Specifies whether you want to overwrite the motion variables.
    """
    _version = '251'
    fluent_name = 'overwrite?'
    _python_name = 'overwrite'

class copy_mrf_to_mesh_motion(Command):
    """
    Copy motion variable values for origin, axis and velocities from Frame Motion to Mesh Motion.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
        overwrite : bool
            Specifies whether you want to overwrite the motion variables.
    """
    _version = '251'
    fluent_name = 'copy-mrf-to-mesh-motion'
    _python_name = 'copy_mrf_to_mesh_motion'
    argument_names = ['zone_name', 'overwrite']
    _child_classes = dict(
        zone_name=zone_name_2,
        overwrite=overwrite,
    )

class copy_mesh_to_mrf_motion(Command):
    """
    Copy motion variable values for origin, axis and velocities from Mesh Motion to Frame Motion.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
        overwrite : bool
            Specifies whether you want to overwrite the motion variables.
    """
    _version = '251'
    fluent_name = 'copy-mesh-to-mrf-motion'
    _python_name = 'copy_mesh_to_mrf_motion'
    argument_names = ['zone_name', 'overwrite']
    _child_classes = dict(
        zone_name=zone_name_2,
        overwrite=overwrite,
    )

class cell_zone_conditions(Group, _ChildNamedObjectAccessorMixin):
    """
    The cell zone conditions object.
    """
    _version = '251'
    fluent_name = 'cell-zone-conditions'
    _python_name = 'cell_zone_conditions'
    child_names = ['fluid', 'solid']
    command_names = ['copy', 'set_zone_type', 'activate_cell_zone', 'mrf_to_sliding_mesh', 'convert_all_solid_mrf_to_solid_motion', 'copy_mrf_to_mesh_motion', 'copy_mesh_to_mrf_motion']
    _child_classes = dict(
        fluid=fluid_1,
        solid=solid_2,
        copy=copy_1,
        set_zone_type=set_zone_type,
        activate_cell_zone=activate_cell_zone,
        mrf_to_sliding_mesh=mrf_to_sliding_mesh,
        convert_all_solid_mrf_to_solid_motion=convert_all_solid_mrf_to_solid_motion,
        copy_mrf_to_mesh_motion=copy_mrf_to_mesh_motion,
        copy_mesh_to_mrf_motion=copy_mesh_to_mrf_motion,
    )

class geom_disable(Boolean):
    """
    Disable Geometry Based Adption.
    """
    _version = '251'
    fluent_name = 'geom-disable?'
    _python_name = 'geom_disable'

class geom_dir_spec(Boolean):
    """
    Direction Specification.
    """
    _version = '251'
    fluent_name = 'geom-dir-spec'
    _python_name = 'geom_dir_spec'

class geom_dir_x(Real):
    """
    X Direction.
    """
    _version = '251'
    fluent_name = 'geom-dir-x'
    _python_name = 'geom_dir_x'

class geom_dir_y(Real):
    """
    Y Direction.
    """
    _version = '251'
    fluent_name = 'geom-dir-y'
    _python_name = 'geom_dir_y'

class geom_dir_z(Real):
    """
    Z Direction.
    """
    _version = '251'
    fluent_name = 'geom-dir-z'
    _python_name = 'geom_dir_z'

class geom_levels(Integer):
    """
    Levels.
    """
    _version = '251'
    fluent_name = 'geom-levels'
    _python_name = 'geom_levels'

class geom_bgthread(Integer):
    """
    Background Thread.
    """
    _version = '251'
    fluent_name = 'geom-bgthread'
    _python_name = 'geom_bgthread'

class geometry_4(Group):
    """
    Allows to change geometry model variables or settings.
    """
    _version = '251'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )

class phase_2_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class phase_2(NamedObject[phase_2_child], CreatableNamedObjectMixin[phase_2_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_2_child

class axis_2_child(Group):
    """
    'child_object_type' of axis.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'axis_child'
    child_names = ['name', 'phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_2,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class axis_2(NamedObject[axis_2_child], CreatableNamedObjectMixin[axis_2_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'axis'
    _python_name = 'axis'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = axis_2_child

class degassing_child(Group):
    """
    'child_object_type' of degassing.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'degassing_child'
    child_names = ['name', 'phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_2,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class degassing(NamedObject[degassing_child], CreatableNamedObjectMixin[degassing_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'degassing'
    _python_name = 'degassing'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = degassing_child

class system_coupling_1(Boolean):
    """
    System Coupling?.
    """
    _version = '251'
    fluent_name = 'system-coupling?'
    _python_name = 'system_coupling'

class backflow_reference_frame(String, AllowedValuesMixin):
    """
    Backflow Reference Frame.
    """
    _version = '251'
    fluent_name = 'backflow-reference-frame'
    _python_name = 'backflow_reference_frame'

class pressure_spec(String, AllowedValuesMixin):
    """
    Pressure specification method.
    """
    _version = '251'
    fluent_name = 'pressure-spec'
    _python_name = 'pressure_spec'

class pressure_spec_method(String, AllowedValuesMixin):
    """
    Pressure specification method.
    """
    _version = '251'
    fluent_name = 'pressure-spec-method'
    _python_name = 'pressure_spec_method'

class gauge_pressure(Group):
    """
    Gauge Pressure.
    """
    _version = '251'
    fluent_name = 'gauge-pressure'
    _python_name = 'gauge_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pressure_profile_multiplier(Real):
    """
    Pressure Profile Multiplier.
    """
    _version = '251'
    fluent_name = 'pressure-profile-multiplier'
    _python_name = 'pressure_profile_multiplier'

class backflow_dir_spec_method(String, AllowedValuesMixin):
    """
    Backflow Direction Specification Method.
    """
    _version = '251'
    fluent_name = 'backflow-dir-spec-method'
    _python_name = 'backflow_dir_spec_method'

class coordinate_system(String, AllowedValuesMixin):
    """
    Coordinate System.
    """
    _version = '251'
    fluent_name = 'coordinate-system'
    _python_name = 'coordinate_system'

class flow_direction_child(Group):
    """
    'child_object_type' of flow_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'flow_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class flow_direction(ListObject[flow_direction_child]):
    """
    Flow direction components.
    """
    _version = '251'
    fluent_name = 'flow-direction'
    _python_name = 'flow_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = flow_direction_child

class backflow_pressure_spec(String, AllowedValuesMixin):
    """
    Backflow Pressure Specification.
    """
    _version = '251'
    fluent_name = 'backflow-pressure-spec'
    _python_name = 'backflow_pressure_spec'

class backflow_pressure_specification(String, AllowedValuesMixin):
    """
    Backflow Pressure Specification.
    """
    _version = '251'
    fluent_name = 'backflow-pressure-specification'
    _python_name = 'backflow_pressure_specification'

class axis_direction_2_child(Real):
    """
    'child_object_type' of axis_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'axis_direction_child'

class axis_direction_2(ListObject[axis_direction_2_child]):
    """
    Axis direction components.
    """
    _version = '251'
    fluent_name = 'axis-direction'
    _python_name = 'axis_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = axis_direction_2_child

class axis_origin_2_child(Real):
    """
    'child_object_type' of axis_origin.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'axis_origin_child'

class axis_origin_2(ListObject[axis_origin_2_child]):
    """
    Axis origin components.
    """
    _version = '251'
    fluent_name = 'axis-origin'
    _python_name = 'axis_origin'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = axis_origin_2_child

class prevent_reverse_flow(Boolean):
    """
    Enable/disable to Build artificial walls to prevent reverse flow.
    """
    _version = '251'
    fluent_name = 'prevent-reverse-flow?'
    _python_name = 'prevent_reverse_flow'

class radial_equ_pressure_distribution(Boolean):
    """
    Enable/disable Rdial Equilibrium Pressure Distribution.
    """
    _version = '251'
    fluent_name = 'radial-equ-pressure-distribution'
    _python_name = 'radial_equ_pressure_distribution'

class radial_equ_reference_position(String, AllowedValuesMixin):
    """
    Reference position option for radial equilibrium pressure distribution.
    """
    _version = '251'
    fluent_name = 'radial-equ-reference-position'
    _python_name = 'radial_equ_reference_position'

class radial_equ_specified_radius(Real):
    """
    Reference radius for radial equilibrium pressure distribution.
    """
    _version = '251'
    fluent_name = 'radial-equ-specified-radius'
    _python_name = 'radial_equ_specified_radius'

class radial_equ_specified_span(Real):
    """
    Reference span for radial equilibrium pressure distribution.
    """
    _version = '251'
    fluent_name = 'radial-equ-specified-span'
    _python_name = 'radial_equ_specified_span'

class avg_pressure_spec(Boolean):
    """
    Average Pressure Specification on/off.
    """
    _version = '251'
    fluent_name = 'avg-pressure-spec?'
    _python_name = 'avg_pressure_spec'

class avg_method(String, AllowedValuesMixin):
    """
    Averaging Method.
    """
    _version = '251'
    fluent_name = 'avg-method'
    _python_name = 'avg_method'

class target_mass_flow_rate(Boolean):
    """
    Targeted mass flow rate.
    """
    _version = '251'
    fluent_name = 'target-mass-flow-rate?'
    _python_name = 'target_mass_flow_rate'

class target_mass_flow(Group):
    """
    Target Mass Flow.
    """
    _version = '251'
    fluent_name = 'target-mass-flow'
    _python_name = 'target_mass_flow'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class upper_limit_of_abs_pressure(Group):
    """
    Upper Limit of Absolute Pressure.
    """
    _version = '251'
    fluent_name = 'upper-limit-of-abs-pressure'
    _python_name = 'upper_limit_of_abs_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class lower_limit_of_abs_pressure(Group):
    """
    Lower Limit of Absolute Pressure.
    """
    _version = '251'
    fluent_name = 'lower-limit-of-abs-pressure'
    _python_name = 'lower_limit_of_abs_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class acoustic_wave_model(String, AllowedValuesMixin):
    """
    Acoustic wave model.
    """
    _version = '251'
    fluent_name = 'acoustic-wave-model'
    _python_name = 'acoustic_wave_model'

class exit_pressure_spec(String, AllowedValuesMixin):
    """
    Exit pressure specification.
    """
    _version = '251'
    fluent_name = 'exit-pressure-spec'
    _python_name = 'exit_pressure_spec'

class impedance_zero_order_term(Real):
    """
    Impedance zero order term.
    """
    _version = '251'
    fluent_name = 'impedance-zero-order-term'
    _python_name = 'impedance_zero_order_term'

class pole(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'pole'
    _python_name = 'pole'

class amplitude(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'amplitude'
    _python_name = 'amplitude'

class real_pole_series_child(Group):
    """
    'child_object_type' of real_pole_series.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'real_pole_series_child'
    child_names = ['pole', 'amplitude']
    _child_classes = dict(
        pole=pole,
        amplitude=amplitude,
    )

class real_pole_series(ListObject[real_pole_series_child]):
    """
    List of Real Pole Series.
    """
    _version = '251'
    fluent_name = 'real-pole-series'
    _python_name = 'real_pole_series'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = real_pole_series_child

class pole_real(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'pole-real'
    _python_name = 'pole_real'

class pole_imag(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'pole-imag'
    _python_name = 'pole_imag'

class amplitude_real(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'amplitude-real'
    _python_name = 'amplitude_real'

class amplitude_imag(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'amplitude-imag'
    _python_name = 'amplitude_imag'

class complex_pole_series_child(Group):
    """
    'child_object_type' of complex_pole_series.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'complex_pole_series_child'
    child_names = ['pole_real', 'pole_imag', 'amplitude_real', 'amplitude_imag']
    _child_classes = dict(
        pole_real=pole_real,
        pole_imag=pole_imag,
        amplitude_real=amplitude_real,
        amplitude_imag=amplitude_imag,
    )

class complex_pole_series(ListObject[complex_pole_series_child]):
    """
    List of Complex Pole Series.
    """
    _version = '251'
    fluent_name = 'complex-pole-series'
    _python_name = 'complex_pole_series'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = complex_pole_series_child

class incoming_wave(Group):
    """
    Incoming wave.
    """
    _version = '251'
    fluent_name = 'incoming-wave'
    _python_name = 'incoming_wave'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pressure_jump(Group):
    """
    Pressure Jump.
    """
    _version = '251'
    fluent_name = 'pressure-jump'
    _python_name = 'pressure_jump'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class strength(Group):
    """
    Strength.
    """
    _version = '251'
    fluent_name = 'strength'
    _python_name = 'strength'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class new_fan_definition(Boolean):
    """
    New Fan Definition.
    """
    _version = '251'
    fluent_name = 'new-fan-definition'
    _python_name = 'new_fan_definition'

class momentum(Group):
    """
    Allows to change momentum model variables or settings.
    """
    _version = '251'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['system_coupling', 'backflow_reference_frame', 'pressure_spec', 'pressure_spec_method', 'gauge_pressure', 'pressure_profile_multiplier', 'backflow_dir_spec_method', 'coordinate_system', 'flow_direction', 'backflow_pressure_spec', 'backflow_pressure_specification', 'axis_direction', 'axis_origin', 'prevent_reverse_flow', 'radial_equ_pressure_distribution', 'radial_equ_reference_position', 'radial_equ_specified_radius', 'radial_equ_specified_span', 'avg_pressure_spec', 'avg_method', 'target_mass_flow_rate', 'target_mass_flow', 'upper_limit_of_abs_pressure', 'lower_limit_of_abs_pressure', 'acoustic_wave_model', 'exit_pressure_spec', 'impedance_zero_order_term', 'real_pole_series', 'complex_pole_series', 'incoming_wave', 'pressure_jump', 'strength', 'new_fan_definition']
    _child_classes = dict(
        system_coupling=system_coupling_1,
        backflow_reference_frame=backflow_reference_frame,
        pressure_spec=pressure_spec,
        pressure_spec_method=pressure_spec_method,
        gauge_pressure=gauge_pressure,
        pressure_profile_multiplier=pressure_profile_multiplier,
        backflow_dir_spec_method=backflow_dir_spec_method,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        backflow_pressure_spec=backflow_pressure_spec,
        backflow_pressure_specification=backflow_pressure_specification,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        prevent_reverse_flow=prevent_reverse_flow,
        radial_equ_pressure_distribution=radial_equ_pressure_distribution,
        radial_equ_reference_position=radial_equ_reference_position,
        radial_equ_specified_radius=radial_equ_specified_radius,
        radial_equ_specified_span=radial_equ_specified_span,
        avg_pressure_spec=avg_pressure_spec,
        avg_method=avg_method,
        target_mass_flow_rate=target_mass_flow_rate,
        target_mass_flow=target_mass_flow,
        upper_limit_of_abs_pressure=upper_limit_of_abs_pressure,
        lower_limit_of_abs_pressure=lower_limit_of_abs_pressure,
        acoustic_wave_model=acoustic_wave_model,
        exit_pressure_spec=exit_pressure_spec,
        impedance_zero_order_term=impedance_zero_order_term,
        real_pole_series=real_pole_series,
        complex_pole_series=complex_pole_series,
        incoming_wave=incoming_wave,
        pressure_jump=pressure_jump,
        strength=strength,
        new_fan_definition=new_fan_definition,
    )
    _child_aliases = dict(
        a=('pressure_jump', 'a'),
        ac_options=('acoustic_wave_model', 'ac-options'),
        ac_wave=('incoming_wave', 'ac-wave'),
        avg_option=('avg_method', 'avg-option'),
        avg_press_spec=('avg_pressure_spec', 'avg-press-spec?'),
        axis_direction_component=('axis_direction', 'axis-direction-component'),
        axis_origin_component=('axis_origin', 'axis-origin-component'),
        direction_spec=('backflow_dir_spec_method', 'direction-spec'),
        flow_direction_component=('flow_direction', 'flow-direction-component'),
        frame_of_reference=('backflow_reference_frame', 'frame-of-reference'),
        gen_nrbc_spec=('exit_pressure_spec', 'gen-nrbc-spec'),
        impedance_0=('impedance_zero_order_term', 'impedance-0'),
        impedance_1=('real_pole_series', 'impedance-1'),
        impedance_2=('complex_pole_series', 'impedance-2'),
        new_fan_definition=('new_fan_definition', 'new-fan-definition?'),
        p=('gauge_pressure', 'p'),
        p_backflow_spec=('backflow_pressure_specification', 'p-backflow-spec'),
        p_backflow_spec_gen=('backflow_pressure_spec', 'p-backflow-spec-gen'),
        p_profile_multiplier=('pressure_profile_multiplier', 'p-profile-multiplier'),
        press_spec=('pressure_spec_method', 'press-spec'),
        press_spec_gen=('pressure_spec', 'press-spec-gen'),
        radial_ref_position=('radial_equ_reference_position', 'radial-ref-position'),
        radial_specified_radius=('radial_equ_specified_radius', 'radial-specified-radius'),
        radial_specified_span=('radial_equ_specified_span', 'radial-specified-span'),
        radial=('radial_equ_pressure_distribution', 'radial?'),
        targeted_mf=('target_mass_flow', 'targeted-mf'),
        targeted_mf_boundary=('target_mass_flow_rate', 'targeted-mf-boundary?'),
        targeted_mf_pmax=('upper_limit_of_abs_pressure', 'targeted-mf-pmax'),
        targeted_mf_pmin=('lower_limit_of_abs_pressure', 'targeted-mf-pmin'),
    )

class turbulence_specification(String, AllowedValuesMixin):
    """
    Turbulence Specification Method.
    """
    _version = '251'
    fluent_name = 'turbulence-specification'
    _python_name = 'turbulence_specification'

class backflow_modified_turbulent_viscosity(Group):
    """
    Modified Turbulent Viscosity.
    """
    _version = '251'
    fluent_name = 'backflow-modified-turbulent-viscosity'
    _python_name = 'backflow_modified_turbulent_viscosity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_laminar_kinetic_energy(Group):
    """
    Laminar Kinetic Energy.
    """
    _version = '251'
    fluent_name = 'backflow-laminar-kinetic-energy'
    _python_name = 'backflow_laminar_kinetic_energy'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_intermittency(Group):
    """
    Intermittency.
    """
    _version = '251'
    fluent_name = 'backflow-intermittency'
    _python_name = 'backflow_intermittency'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_turbulent_kinetic_energy(Group):
    """
    Turbulent Kinetic Energy.
    """
    _version = '251'
    fluent_name = 'backflow-turbulent-kinetic-energy'
    _python_name = 'backflow_turbulent_kinetic_energy'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_turbulent_dissipation_rate(Group):
    """
    Turbulent Dissipation Rate.
    """
    _version = '251'
    fluent_name = 'backflow-turbulent-dissipation-rate'
    _python_name = 'backflow_turbulent_dissipation_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_specific_dissipation_rate(Group):
    """
    Specific Dissipation Rate.
    """
    _version = '251'
    fluent_name = 'backflow-specific-dissipation-rate'
    _python_name = 'backflow_specific_dissipation_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_velocity_variance_scale(Group):
    """
    Velocity Variance Scale.
    """
    _version = '251'
    fluent_name = 'backflow-velocity-variance-scale'
    _python_name = 'backflow_velocity_variance_scale'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_turbulent_intensity(Real):
    """
    Turbulent Intensity.
    """
    _version = '251'
    fluent_name = 'backflow-turbulent-intensity'
    _python_name = 'backflow_turbulent_intensity'

class backflow_turbulent_length_scale(Real):
    """
    Turbulent Length Scale.
    """
    _version = '251'
    fluent_name = 'backflow-turbulent-length-scale'
    _python_name = 'backflow_turbulent_length_scale'

class backflow_hydraulic_diameter(Real):
    """
    Hydraulic Diameter.
    """
    _version = '251'
    fluent_name = 'backflow-hydraulic-diameter'
    _python_name = 'backflow_hydraulic_diameter'

class backflow_turbulent_viscosity_ratio(Real):
    """
    Turbulent Viscosity Ratio.
    """
    _version = '251'
    fluent_name = 'backflow-turbulent-viscosity-ratio'
    _python_name = 'backflow_turbulent_viscosity_ratio'

class backflow_turbulent_viscosity_ratio_profile(Group):
    """
    Turbulent Viscosity Ratio.
    """
    _version = '251'
    fluent_name = 'backflow-turbulent-viscosity-ratio-profile'
    _python_name = 'backflow_turbulent_viscosity_ratio_profile'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class reynolds_stress_specification(String, AllowedValuesMixin):
    """
    Reynolds-Stress Specification Method.
    """
    _version = '251'
    fluent_name = 'reynolds-stress-specification'
    _python_name = 'reynolds_stress_specification'

class backflow_uu_reynolds_stresses(Group):
    """
    UU Reynolds Stresses.
    """
    _version = '251'
    fluent_name = 'backflow-uu-reynolds-stresses'
    _python_name = 'backflow_uu_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_vv_reynolds_stresses(Group):
    """
    VV Reynolds Stresses.
    """
    _version = '251'
    fluent_name = 'backflow-vv-reynolds-stresses'
    _python_name = 'backflow_vv_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_ww_reynolds_stresses(Group):
    """
    WW Reynolds Stresses.
    """
    _version = '251'
    fluent_name = 'backflow-ww-reynolds-stresses'
    _python_name = 'backflow_ww_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_uv_reynolds_stresses(Group):
    """
    UV Reynolds Stresses.
    """
    _version = '251'
    fluent_name = 'backflow-uv-reynolds-stresses'
    _python_name = 'backflow_uv_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_vw_reynolds_stresses(Group):
    """
    VW Reynolds Stresses.
    """
    _version = '251'
    fluent_name = 'backflow-vw-reynolds-stresses'
    _python_name = 'backflow_vw_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_uw_reynolds_stresses(Group):
    """
    UW Reynolds Stresses.
    """
    _version = '251'
    fluent_name = 'backflow-uw-reynolds-stresses'
    _python_name = 'backflow_uw_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class subgrid_kinetic_energy_specification(String, AllowedValuesMixin):
    """
    Subgrid Kinetic Energy Specification Method.
    """
    _version = '251'
    fluent_name = 'subgrid-kinetic-energy-specification'
    _python_name = 'subgrid_kinetic_energy_specification'

class subgrid_kinetic_energy(Group):
    """
    Subgrid Kinetic Energy.
    """
    _version = '251'
    fluent_name = 'subgrid-kinetic-energy'
    _python_name = 'subgrid_kinetic_energy'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class subgrid_turbulent_intensity(Real):
    """
    Subgrid Turbulent Intensity.
    """
    _version = '251'
    fluent_name = 'subgrid-turbulent-intensity'
    _python_name = 'subgrid_turbulent_intensity'

class turbulence(Group):
    """
    Allows to change turbulence model variables or settings.
    """
    _version = '251'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'
    child_names = ['turbulence_specification', 'backflow_modified_turbulent_viscosity', 'backflow_laminar_kinetic_energy', 'backflow_intermittency', 'backflow_turbulent_kinetic_energy', 'backflow_turbulent_dissipation_rate', 'backflow_specific_dissipation_rate', 'backflow_velocity_variance_scale', 'backflow_turbulent_intensity', 'backflow_turbulent_length_scale', 'backflow_hydraulic_diameter', 'backflow_turbulent_viscosity_ratio', 'backflow_turbulent_viscosity_ratio_profile', 'reynolds_stress_specification', 'backflow_uu_reynolds_stresses', 'backflow_vv_reynolds_stresses', 'backflow_ww_reynolds_stresses', 'backflow_uv_reynolds_stresses', 'backflow_vw_reynolds_stresses', 'backflow_uw_reynolds_stresses', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity']
    _child_classes = dict(
        turbulence_specification=turbulence_specification,
        backflow_modified_turbulent_viscosity=backflow_modified_turbulent_viscosity,
        backflow_laminar_kinetic_energy=backflow_laminar_kinetic_energy,
        backflow_intermittency=backflow_intermittency,
        backflow_turbulent_kinetic_energy=backflow_turbulent_kinetic_energy,
        backflow_turbulent_dissipation_rate=backflow_turbulent_dissipation_rate,
        backflow_specific_dissipation_rate=backflow_specific_dissipation_rate,
        backflow_velocity_variance_scale=backflow_velocity_variance_scale,
        backflow_turbulent_intensity=backflow_turbulent_intensity,
        backflow_turbulent_length_scale=backflow_turbulent_length_scale,
        backflow_hydraulic_diameter=backflow_hydraulic_diameter,
        backflow_turbulent_viscosity_ratio=backflow_turbulent_viscosity_ratio,
        backflow_turbulent_viscosity_ratio_profile=backflow_turbulent_viscosity_ratio_profile,
        reynolds_stress_specification=reynolds_stress_specification,
        backflow_uu_reynolds_stresses=backflow_uu_reynolds_stresses,
        backflow_vv_reynolds_stresses=backflow_vv_reynolds_stresses,
        backflow_ww_reynolds_stresses=backflow_ww_reynolds_stresses,
        backflow_uv_reynolds_stresses=backflow_uv_reynolds_stresses,
        backflow_vw_reynolds_stresses=backflow_vw_reynolds_stresses,
        backflow_uw_reynolds_stresses=backflow_uw_reynolds_stresses,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
    )
    _child_aliases = dict(
        e=('backflow_turbulent_dissipation_rate', 'e'),
        hydraulic_diameter=('backflow_hydraulic_diameter', 'hydraulic-diameter'),
        intermit=('backflow_intermittency', 'intermit'),
        intermittency=('backflow_intermittency', 'intermittency'),
        k=('backflow_turbulent_kinetic_energy', 'k'),
        kl=('backflow_laminar_kinetic_energy', 'kl'),
        ksgs=('subgrid_kinetic_energy', 'ksgs'),
        ksgs_spec=('subgrid_kinetic_energy_specification', 'ksgs-spec'),
        laminar_kinetic_energy=('backflow_laminar_kinetic_energy', 'laminar-kinetic-energy'),
        modified_turbulent_viscosity=('backflow_modified_turbulent_viscosity', 'modified-turbulent-viscosity'),
        nut=('backflow_modified_turbulent_viscosity', 'nut'),
        o=('backflow_specific_dissipation_rate', 'o'),
        reynolds_stress_specification=('backflow_reynolds_stress_specification', 'reynolds-stress-specification'),
        rst_spec=('reynolds_stress_specification', 'rst-spec'),
        sgs_turb_intensity=('subgrid_turbulent_intensity', 'sgs-turb-intensity'),
        specific_dissipation_rate=('backflow_specific_dissipation_rate', 'specific-dissipation-rate'),
        subgrid_kinetic_energy=('backflow_subgrid_kinetic_energy', 'subgrid-kinetic-energy'),
        subgrid_kinetic_energy_specification=('backflow_subgrid_kinetic_energy_specification', 'subgrid-kinetic-energy-specification'),
        subgrid_turbulent_intensity=('backflow_subgrid_turbulent_intensity', 'subgrid-turbulent-intensity'),
        turb_hydraulic_diam=('backflow_hydraulic_diameter', 'turb-hydraulic-diam'),
        turb_intensity=('backflow_turbulent_intensity', 'turb-intensity'),
        turb_length_scale=('backflow_turbulent_length_scale', 'turb-length-scale'),
        turb_viscosity_ratio=('backflow_turbulent_viscosity_ratio', 'turb-viscosity-ratio'),
        turb_viscosity_ratio_profile=('backflow_turbulent_viscosity_ratio_profile', 'turb-viscosity-ratio-profile'),
        turbulent_dissipation_rate=('backflow_turbulent_dissipation_rate', 'turbulent-dissipation-rate'),
        turbulent_intensity=('backflow_turbulent_intensity', 'turbulent-intensity'),
        turbulent_length_scale=('backflow_turbulent_length_scale', 'turbulent-length-scale'),
        turbulent_specification=('turbulence_specification', 'turbulent-specification'),
        turbulent_viscosity_ratio=('backflow_turbulent_viscosity_ratio', 'turbulent-viscosity-ratio'),
        turbulent_viscosity_ratio_profile=('backflow_turbulent_viscosity_ratio_profile', 'turbulent-viscosity-ratio-profile'),
        uu=('backflow_uu_reynolds_stresses', 'uu'),
        uu_reynolds_stresses=('backflow_uu_reynolds_stresses', 'uu-reynolds-stresses'),
        uv=('backflow_uv_reynolds_stresses', 'uv'),
        uv_reynolds_stresses=('backflow_uv_reynolds_stresses', 'uv-reynolds-stresses'),
        uw=('backflow_uw_reynolds_stresses', 'uw'),
        uw_reynolds_stresses=('backflow_uw_reynolds_stresses', 'uw-reynolds-stresses'),
        v2=('backflow_velocity_variance_scale', 'v2'),
        velocity_variance_scale=('backflow_velocity_variance_scale', 'velocity-variance-scale'),
        vv=('backflow_vv_reynolds_stresses', 'vv'),
        vv_reynolds_stresses=('backflow_vv_reynolds_stresses', 'vv-reynolds-stresses'),
        vw=('backflow_vw_reynolds_stresses', 'vw'),
        vw_reynolds_stresses=('backflow_vw_reynolds_stresses', 'vw-reynolds-stresses'),
        ww=('backflow_ww_reynolds_stresses', 'ww'),
        ww_reynolds_stresses=('backflow_ww_reynolds_stresses', 'ww-reynolds-stresses'),
    )

class backflow_total_temperature(Group):
    """
    Temperature.
    """
    _version = '251'
    fluent_name = 'backflow-total-temperature'
    _python_name = 'backflow_total_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class thermal(Group):
    """
    Allows to change thermal model variables or settings.
    """
    _version = '251'
    fluent_name = 'thermal'
    _python_name = 'thermal'
    child_names = ['backflow_total_temperature']
    _child_classes = dict(
        backflow_total_temperature=backflow_total_temperature,
    )
    _child_aliases = dict(
        t0=('backflow_total_temperature', 't0'),
    )

class radiation_bc(String, AllowedValuesMixin):
    """
    Radiation BC Type.
    """
    _version = '251'
    fluent_name = 'radiation-bc'
    _python_name = 'radiation_bc'

class radial_direction_child(Group):
    """
    'child_object_type' of radial_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'radial_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class radial_direction(ListObject[radial_direction_child]):
    """
    Radial direction components.
    """
    _version = '251'
    fluent_name = 'radial-direction'
    _python_name = 'radial_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = radial_direction_child

class theta_width_of_beam(Real):
    """
    Theta Width of Beam.
    """
    _version = '251'
    fluent_name = 'theta-width-of-beam'
    _python_name = 'theta_width_of_beam'

class phi_width_of_beam(Real):
    """
    Phi Width of Beam.
    """
    _version = '251'
    fluent_name = 'phi-width-of-beam'
    _python_name = 'phi_width_of_beam'

class direct_irradiation_child(Group):
    """
    'child_object_type' of direct_irradiation.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'direct_irradiation_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class direct_irradiation(NamedObject[direct_irradiation_child], CreatableNamedObjectMixin[direct_irradiation_child]):
    """
    Settings for direct irradiation on this boundary.
    """
    _version = '251'
    fluent_name = 'direct-irradiation'
    _python_name = 'direct_irradiation'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = direct_irradiation_child

class diffuse_irradiation_child(Group):
    """
    'child_object_type' of diffuse_irradiation.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'diffuse_irradiation_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class diffuse_irradiation(NamedObject[diffuse_irradiation_child], CreatableNamedObjectMixin[diffuse_irradiation_child]):
    """
    Settings for diffuse irradiation on this boundary.
    """
    _version = '251'
    fluent_name = 'diffuse-irradiation'
    _python_name = 'diffuse_irradiation'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = diffuse_irradiation_child

class parallel_collimated_beam(Boolean):
    """
    Specifies whether direct irradiation is applied parallel to the beam.
    """
    _version = '251'
    fluent_name = 'parallel-collimated-beam?'
    _python_name = 'parallel_collimated_beam'

class use_beeam_direction_from_solar_load_model_settings(Boolean):
    """
    Use Beam Direction from Solar Load Model Settings.
    """
    _version = '251'
    fluent_name = 'use-beeam-direction-from-solar-load-model-settings'
    _python_name = 'use_beeam_direction_from_solar_load_model_settings'

class use_irradiation_from_solar_soad_model_settings(Boolean):
    """
    Use Irradiation from Solar Load Model Settings.
    """
    _version = '251'
    fluent_name = 'use-irradiation-from-solar-soad-model-settings'
    _python_name = 'use_irradiation_from_solar_soad_model_settings'

class external_black_body_temperature_method(String, AllowedValuesMixin):
    """
    External Black Body Temperature Method.
    """
    _version = '251'
    fluent_name = 'external-black-body-temperature-method'
    _python_name = 'external_black_body_temperature_method'

class black_body_temperature(Real):
    """
    Black Body Temperature.
    """
    _version = '251'
    fluent_name = 'black-body-temperature'
    _python_name = 'black_body_temperature'

class internal_emissivity(Group):
    """
    Internal Emissivity.
    """
    _version = '251'
    fluent_name = 'internal-emissivity'
    _python_name = 'internal_emissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class participates_in_solar_ray_tracing(Boolean):
    """
    Specifies whether to participates in Solar Ray Tracing or not.
    """
    _version = '251'
    fluent_name = 'participates-in-solar-ray-tracing'
    _python_name = 'participates_in_solar_ray_tracing'

class solar_transmissivity_factor(Real):
    """
    Solar Transmissivity Factor.
    """
    _version = '251'
    fluent_name = 'solar-transmissivity-factor'
    _python_name = 'solar_transmissivity_factor'

class participates_in_view_factor_calculation(Boolean):
    """
    Participates in View Factor Calculation?.
    """
    _version = '251'
    fluent_name = 'participates-in-view-factor-calculation'
    _python_name = 'participates_in_view_factor_calculation'

class radiation_1(Group):
    """
    Radiation settings for this boundary-condition.
    """
    _version = '251'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['radiation_bc', 'radial_direction', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'participates_in_view_factor_calculation']
    _child_classes = dict(
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        participates_in_view_factor_calculation=participates_in_view_factor_calculation,
    )
    _child_aliases = dict(
        band_q_irrad=('direct_irradiation', 'band-q-irrad'),
        band_q_irrad_diffuse=('diffuse_irradiation', 'band-q-irrad-diffuse'),
        coll_dphi=('phi_width_of_beam', 'coll-dphi'),
        coll_dtheta=('theta_width_of_beam', 'coll-dtheta'),
        in_emiss=('internal_emissivity', 'in-emiss'),
        radial_direction_component=('radial_direction', 'radial-direction-component'),
        radiating_s2s_surface=('participates_in_view_factor_calculation', 'radiating-s2s-surface?'),
        solar_direction=('use_beeam_direction_from_solar_load_model_settings', 'solar-direction?'),
        solar_fluxes=('participates_in_solar_ray_tracing', 'solar-fluxes?'),
        solar_irradiation=('use_irradiation_from_solar_soad_model_settings', 'solar-irradiation?'),
        solar_shining_factor=('solar_transmissivity_factor', 'solar-shining-factor'),
        t_b_b=('black_body_temperature', 't-b-b'),
        t_b_b_spec=('external_black_body_temperature_method', 't-b-b-spec'),
    )

class mean_mixture_fraction(Group):
    """
    Mean Mixture Fraction.
    """
    _version = '251'
    fluent_name = 'mean-mixture-fraction'
    _python_name = 'mean_mixture_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class secondary_mean_mixture_fraction(Group):
    """
    Secondary Mean Mixture Fraction.
    """
    _version = '251'
    fluent_name = 'secondary-mean-mixture-fraction'
    _python_name = 'secondary_mean_mixture_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class mixture_fraction_variance(Group):
    """
    Mixture Fraction Variance.
    """
    _version = '251'
    fluent_name = 'mixture-fraction-variance'
    _python_name = 'mixture_fraction_variance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class secondary_mixture_fraction_variance(Group):
    """
    Secondary Mixture Fraction Variance.
    """
    _version = '251'
    fluent_name = 'secondary-mixture-fraction-variance'
    _python_name = 'secondary_mixture_fraction_variance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class specify_species_in_mole_fractions(Boolean):
    """
    Species in Mole Fractions.
    """
    _version = '251'
    fluent_name = 'specify-species-in-mole-fractions?'
    _python_name = 'specify_species_in_mole_fractions'

class backflow_species_mass_fraction_child(Group):
    """
    'child_object_type' of backflow_species_mass_fraction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'backflow_species_mass_fraction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_species_mass_fraction(NamedObject[backflow_species_mass_fraction_child], CreatableNamedObjectMixin[backflow_species_mass_fraction_child]):
    """
    Species mass fraction.
    """
    _version = '251'
    fluent_name = 'backflow-species-mass-fraction'
    _python_name = 'backflow_species_mass_fraction'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = backflow_species_mass_fraction_child

class species_mole_fraction_child(Group):
    """
    'child_object_type' of species_mole_fraction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'species_mole_fraction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class species_mole_fraction(NamedObject[species_mole_fraction_child], CreatableNamedObjectMixin[species_mole_fraction_child]):
    """
    Species mole fraction.
    """
    _version = '251'
    fluent_name = 'species-mole-fraction'
    _python_name = 'species_mole_fraction'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_mole_fraction_child

class backflow_mixture_fraction(Group):
    """
    Mixture fraction.
    """
    _version = '251'
    fluent_name = 'backflow-mixture-fraction'
    _python_name = 'backflow_mixture_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_mode_2_probability(Group):
    """
    Mode-2 probability.
    """
    _version = '251'
    fluent_name = 'backflow-mode-2-probability'
    _python_name = 'backflow_mode_2_probability'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_mode_3_probability(Group):
    """
    Mode-3 probability.
    """
    _version = '251'
    fluent_name = 'backflow-mode-3-probability'
    _python_name = 'backflow_mode_3_probability'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_progress_variable(Group):
    """
    Progress Variable.
    """
    _version = '251'
    fluent_name = 'backflow-progress-variable'
    _python_name = 'backflow_progress_variable'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_progress_variable_variance(Group):
    """
    Progress Variable Variance.
    """
    _version = '251'
    fluent_name = 'backflow-progress-variable-variance'
    _python_name = 'backflow_progress_variable_variance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_flame_area_density(Group):
    """
    Flame Area Density.
    """
    _version = '251'
    fluent_name = 'backflow-flame-area-density'
    _python_name = 'backflow_flame_area_density'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_inert_stream(Group):
    """
    Inert Stream.
    """
    _version = '251'
    fluent_name = 'backflow-inert-stream'
    _python_name = 'backflow_inert_stream'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_no_mass_fraction(Group):
    """
    Pollutant NO Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-no-mass-fraction'
    _python_name = 'backflow_pollutant_no_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_hcn_mass_fraction(Group):
    """
    Pollutant HCN Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-hcn-mass-fraction'
    _python_name = 'backflow_pollutant_hcn_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_nh3_mass_fraction(Group):
    """
    Pollutant NH3 Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-nh3-mass-fraction'
    _python_name = 'backflow_pollutant_nh3_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_n2o_mass_fraction(Group):
    """
    Pollutant N2O Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-n2o-mass-fraction'
    _python_name = 'backflow_pollutant_n2o_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_urea_mass_fraction(Group):
    """
    Pollutant UREA Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-urea-mass-fraction'
    _python_name = 'backflow_pollutant_urea_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_hnco_mass_fraction(Group):
    """
    Pollutant HNCO Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-hnco-mass-fraction'
    _python_name = 'backflow_pollutant_hnco_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_nco_mass_fraction(Group):
    """
    Pollutant NCO Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-nco-mass-fraction'
    _python_name = 'backflow_pollutant_nco_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_so2_mass_fraction(Group):
    """
    Pollutant SO2 Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-so2-mass-fraction'
    _python_name = 'backflow_pollutant_so2_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_h2s_mass_fraction(Group):
    """
    Pollutant H2S Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-h2s-mass-fraction'
    _python_name = 'backflow_pollutant_h2s_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_so3_mass_fraction(Group):
    """
    Pollutant SO3 Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-so3-mass-fraction'
    _python_name = 'backflow_pollutant_so3_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_sh_mass_fraction(Group):
    """
    Pollutant SH Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-sh-mass-fraction'
    _python_name = 'backflow_pollutant_sh_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_so_mass_fraction(Group):
    """
    Pollutant SO Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-so-mass-fraction'
    _python_name = 'backflow_pollutant_so_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_soot_mass_fraction(Group):
    """
    Soot Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-soot-mass-fraction'
    _python_name = 'backflow_soot_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_nuclei(Group):
    """
    Nuclei.
    """
    _version = '251'
    fluent_name = 'backflow-nuclei'
    _python_name = 'backflow_nuclei'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_tar_mass_fraction(Group):
    """
    Tar Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-tar-mass-fraction'
    _python_name = 'backflow_tar_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_hg_mass_fraction(Group):
    """
    Pollutant HG Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-hg-mass-fraction'
    _python_name = 'backflow_pollutant_hg_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_hgcl2_mass_fraction(Group):
    """
    Pollutant HGCL2 Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-hgcl2-mass-fraction'
    _python_name = 'backflow_pollutant_hgcl2_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_hcl_mass_fraction(Group):
    """
    Pollutant HCL Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-hcl-mass-fraction'
    _python_name = 'backflow_pollutant_hcl_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_hgo_mass_fraction(Group):
    """
    Pollutant HGO Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-hgo-mass-fraction'
    _python_name = 'backflow_pollutant_hgo_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_cl_mass_fraction(Group):
    """
    Pollutant CL Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-cl-mass-fraction'
    _python_name = 'backflow_pollutant_cl_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_cl2_mass_fraction(Group):
    """
    Pollutant CL2 Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-cl2-mass-fraction'
    _python_name = 'backflow_pollutant_cl2_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_hgcl_mass_fraction(Group):
    """
    Pollutant HGCL Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-hgcl-mass-fraction'
    _python_name = 'backflow_pollutant_hgcl_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_pollutant_hocl_mass_fraction(Group):
    """
    Pollutant HOCL Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-pollutant-hocl-mass-fraction'
    _python_name = 'backflow_pollutant_hocl_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class tss_scalar_child(Group):
    """
    'child_object_type' of tss_scalar.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'tss_scalar_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class tss_scalar(NamedObject[tss_scalar_child], CreatableNamedObjectMixin[tss_scalar_child]):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'tss-scalar'
    _python_name = 'tss_scalar'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = tss_scalar_child

class species_5(Group):
    """
    Allows to change species model variables or settings.
    """
    _version = '251'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['mean_mixture_fraction', 'secondary_mean_mixture_fraction', 'mixture_fraction_variance', 'secondary_mixture_fraction_variance', 'specify_species_in_mole_fractions', 'backflow_species_mass_fraction', 'species_mole_fraction', 'backflow_mixture_fraction', 'backflow_mode_2_probability', 'backflow_mode_3_probability', 'backflow_progress_variable', 'backflow_progress_variable_variance', 'backflow_flame_area_density', 'backflow_inert_stream', 'backflow_pollutant_no_mass_fraction', 'backflow_pollutant_hcn_mass_fraction', 'backflow_pollutant_nh3_mass_fraction', 'backflow_pollutant_n2o_mass_fraction', 'backflow_pollutant_urea_mass_fraction', 'backflow_pollutant_hnco_mass_fraction', 'backflow_pollutant_nco_mass_fraction', 'backflow_pollutant_so2_mass_fraction', 'backflow_pollutant_h2s_mass_fraction', 'backflow_pollutant_so3_mass_fraction', 'backflow_pollutant_sh_mass_fraction', 'backflow_pollutant_so_mass_fraction', 'backflow_soot_mass_fraction', 'backflow_nuclei', 'backflow_tar_mass_fraction', 'backflow_pollutant_hg_mass_fraction', 'backflow_pollutant_hgcl2_mass_fraction', 'backflow_pollutant_hcl_mass_fraction', 'backflow_pollutant_hgo_mass_fraction', 'backflow_pollutant_cl_mass_fraction', 'backflow_pollutant_cl2_mass_fraction', 'backflow_pollutant_hgcl_mass_fraction', 'backflow_pollutant_hocl_mass_fraction', 'tss_scalar']
    _child_classes = dict(
        mean_mixture_fraction=mean_mixture_fraction,
        secondary_mean_mixture_fraction=secondary_mean_mixture_fraction,
        mixture_fraction_variance=mixture_fraction_variance,
        secondary_mixture_fraction_variance=secondary_mixture_fraction_variance,
        specify_species_in_mole_fractions=specify_species_in_mole_fractions,
        backflow_species_mass_fraction=backflow_species_mass_fraction,
        species_mole_fraction=species_mole_fraction,
        backflow_mixture_fraction=backflow_mixture_fraction,
        backflow_mode_2_probability=backflow_mode_2_probability,
        backflow_mode_3_probability=backflow_mode_3_probability,
        backflow_progress_variable=backflow_progress_variable,
        backflow_progress_variable_variance=backflow_progress_variable_variance,
        backflow_flame_area_density=backflow_flame_area_density,
        backflow_inert_stream=backflow_inert_stream,
        backflow_pollutant_no_mass_fraction=backflow_pollutant_no_mass_fraction,
        backflow_pollutant_hcn_mass_fraction=backflow_pollutant_hcn_mass_fraction,
        backflow_pollutant_nh3_mass_fraction=backflow_pollutant_nh3_mass_fraction,
        backflow_pollutant_n2o_mass_fraction=backflow_pollutant_n2o_mass_fraction,
        backflow_pollutant_urea_mass_fraction=backflow_pollutant_urea_mass_fraction,
        backflow_pollutant_hnco_mass_fraction=backflow_pollutant_hnco_mass_fraction,
        backflow_pollutant_nco_mass_fraction=backflow_pollutant_nco_mass_fraction,
        backflow_pollutant_so2_mass_fraction=backflow_pollutant_so2_mass_fraction,
        backflow_pollutant_h2s_mass_fraction=backflow_pollutant_h2s_mass_fraction,
        backflow_pollutant_so3_mass_fraction=backflow_pollutant_so3_mass_fraction,
        backflow_pollutant_sh_mass_fraction=backflow_pollutant_sh_mass_fraction,
        backflow_pollutant_so_mass_fraction=backflow_pollutant_so_mass_fraction,
        backflow_soot_mass_fraction=backflow_soot_mass_fraction,
        backflow_nuclei=backflow_nuclei,
        backflow_tar_mass_fraction=backflow_tar_mass_fraction,
        backflow_pollutant_hg_mass_fraction=backflow_pollutant_hg_mass_fraction,
        backflow_pollutant_hgcl2_mass_fraction=backflow_pollutant_hgcl2_mass_fraction,
        backflow_pollutant_hcl_mass_fraction=backflow_pollutant_hcl_mass_fraction,
        backflow_pollutant_hgo_mass_fraction=backflow_pollutant_hgo_mass_fraction,
        backflow_pollutant_cl_mass_fraction=backflow_pollutant_cl_mass_fraction,
        backflow_pollutant_cl2_mass_fraction=backflow_pollutant_cl2_mass_fraction,
        backflow_pollutant_hgcl_mass_fraction=backflow_pollutant_hgcl_mass_fraction,
        backflow_pollutant_hocl_mass_fraction=backflow_pollutant_hocl_mass_fraction,
        tss_scalar=tss_scalar,
    )
    _child_aliases = dict(
        ecfm_sigma=('backflow_flame_area_density', 'ecfm-sigma'),
        fmean=('mean_mixture_fraction', 'fmean'),
        fmean2=('secondary_mean_mixture_fraction', 'fmean2'),
        fvar=('mixture_fraction_variance', 'fvar'),
        fvar2=('secondary_mixture_fraction_variance', 'fvar2'),
        inert=('backflow_inert_stream', 'inert'),
        mf=('backflow_species_mass_fraction', 'mf'),
        mole_fraction=('species_mole_fraction', 'mole-fraction'),
        pollut_cl=('backflow_pollutant_cl_mass_fraction', 'pollut_cl'),
        pollut_cl2=('backflow_pollutant_cl2_mass_fraction', 'pollut_cl2'),
        pollut_ctar=('backflow_tar_mass_fraction', 'pollut_ctar'),
        pollut_h2s=('backflow_pollutant_h2s_mass_fraction', 'pollut_h2s'),
        pollut_hcl=('backflow_pollutant_hcl_mass_fraction', 'pollut_hcl'),
        pollut_hcn=('backflow_pollutant_hcn_mass_fraction', 'pollut_hcn'),
        pollut_hg=('backflow_pollutant_hg_mass_fraction', 'pollut_hg'),
        pollut_hgcl=('backflow_pollutant_hgcl_mass_fraction', 'pollut_hgcl'),
        pollut_hgcl2=('backflow_pollutant_hgcl2_mass_fraction', 'pollut_hgcl2'),
        pollut_hgo=('backflow_pollutant_hgo_mass_fraction', 'pollut_hgo'),
        pollut_hnco=('backflow_pollutant_hnco_mass_fraction', 'pollut_hnco'),
        pollut_hocl=('backflow_pollutant_hocl_mass_fraction', 'pollut_hocl'),
        pollut_n2o=('backflow_pollutant_n2o_mass_fraction', 'pollut_n2o'),
        pollut_nco=('backflow_pollutant_nco_mass_fraction', 'pollut_nco'),
        pollut_nh3=('backflow_pollutant_nh3_mass_fraction', 'pollut_nh3'),
        pollut_no=('backflow_pollutant_no_mass_fraction', 'pollut_no'),
        pollut_nuclei=('backflow_nuclei', 'pollut_nuclei'),
        pollut_sh=('backflow_pollutant_sh_mass_fraction', 'pollut_sh'),
        pollut_so=('backflow_pollutant_so_mass_fraction', 'pollut_so'),
        pollut_so2=('backflow_pollutant_so2_mass_fraction', 'pollut_so2'),
        pollut_so3=('backflow_pollutant_so3_mass_fraction', 'pollut_so3'),
        pollut_soot=('backflow_soot_mass_fraction', 'pollut_soot'),
        pollut_urea=('backflow_pollutant_urea_mass_fraction', 'pollut_urea'),
        premixc=('backflow_progress_variable', 'premixc'),
        premixc_var=('backflow_progress_variable_variance', 'premixc-var'),
        prob_mode_1=('backflow_mixture_fraction', 'prob-mode-1'),
        prob_mode_2=('backflow_mode_2_probability', 'prob-mode-2'),
        prob_mode_3=('backflow_mode_3_probability', 'prob-mode-3'),
        species_in_mole_fractions=('specify_species_in_mole_fractions', 'species-in-mole-fractions?'),
    )

class bc_type_1(String, AllowedValuesMixin):
    """
    Discrete Phase BC Type.
    """
    _version = '251'
    fluent_name = 'bc-type'
    _python_name = 'bc_type'

class reinject_using_injection(String, AllowedValuesMixin):
    """
    Use Settings from.
    """
    _version = '251'
    fluent_name = 'reinject-using-injection'
    _python_name = 'reinject_using_injection'

class bc_user_function(String, AllowedValuesMixin):
    """
    Discrete Phase BC Function.
    """
    _version = '251'
    fluent_name = 'bc-user-function'
    _python_name = 'bc_user_function'

class dem_collision_partner(String, AllowedValuesMixin):
    """
    DEM Collision Partner.
    """
    _version = '251'
    fluent_name = 'dem-collision-partner'
    _python_name = 'dem_collision_partner'

class mixing_plane_thread(Boolean):
    """
    Is zone used in mixing-plane model?.
    """
    _version = '251'
    fluent_name = 'mixing-plane-thread?'
    _python_name = 'mixing_plane_thread'

class discrete_phase_1(Group):
    """
    Allows to change DPM model variables or settings.
    """
    _version = '251'
    fluent_name = 'discrete-phase'
    _python_name = 'discrete_phase'
    child_names = ['bc_type', 'reinject_using_injection', 'bc_user_function', 'dem_collision_partner', 'mixing_plane_thread']
    _child_classes = dict(
        bc_type=bc_type_1,
        reinject_using_injection=reinject_using_injection,
        bc_user_function=bc_user_function,
        dem_collision_partner=dem_collision_partner,
        mixing_plane_thread=mixing_plane_thread,
    )
    _child_aliases = dict(
        discrete_phase_bc_function=('bc_user_function', 'discrete-phase-bc-function'),
        discrete_phase_bc_type=('bc_type', 'discrete-phase-bc-type'),
        dpm_bc_collision_partner=('dem_collision_partner', 'dpm/bc-collision-partner'),
        dpm_bc_type=('bc_type', 'dpm/bc-type'),
        dpm_bc_udf=('bc_user_function', 'dpm/bc-udf'),
        reinj_inj=('reinject_using_injection', 'reinj-inj'),
    )

class open_channel(Boolean):
    """
    Enable/disable open channel.
    """
    _version = '251'
    fluent_name = 'open-channel?'
    _python_name = 'open_channel'

class outlet_group_id(Integer):
    """
    Outlet Group ID.
    """
    _version = '251'
    fluent_name = 'outlet-group-id'
    _python_name = 'outlet_group_id'

class phase_spec(String, AllowedValuesMixin):
    """
    Secondary Phase for Level Specification.
    """
    _version = '251'
    fluent_name = 'phase-spec'
    _python_name = 'phase_spec'

class free_surface_level(Group):
    """
    Free Surface Level.
    """
    _version = '251'
    fluent_name = 'free-surface-level'
    _python_name = 'free_surface_level'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class bottom_level(Group):
    """
    Bottom Level.
    """
    _version = '251'
    fluent_name = 'bottom-level'
    _python_name = 'bottom_level'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class density_interpolation_method(String, AllowedValuesMixin):
    """
    Density Interpolation Method.
    """
    _version = '251'
    fluent_name = 'density-interpolation-method'
    _python_name = 'density_interpolation_method'

class backflow_granular_temperature(Group):
    """
    Granular temperature.
    """
    _version = '251'
    fluent_name = 'backflow-granular-temperature'
    _python_name = 'backflow_granular_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_interfacial_area_concentration(Group):
    """
    Interfacial area concentration.
    """
    _version = '251'
    fluent_name = 'backflow-interfacial-area-concentration'
    _python_name = 'backflow_interfacial_area_concentration'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_level_set_function_flux(Group):
    """
    Level-set Function Flux.
    """
    _version = '251'
    fluent_name = 'backflow-level-set-function-flux'
    _python_name = 'backflow_level_set_function_flux'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class volume_frac_spec_method(String, AllowedValuesMixin):
    """
    Volume Fraction Specification Method.
    """
    _version = '251'
    fluent_name = 'volume-frac-spec-method'
    _python_name = 'volume_frac_spec_method'

class backflow_volume_fraction(Group):
    """
    Volume Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-volume-fraction'
    _python_name = 'backflow_volume_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class discrete_boundary_condition_child(String, AllowedValuesMixin):
    """
    'child_object_type' of discrete_boundary_condition.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'discrete_boundary_condition_child'

class discrete_boundary_condition(NamedObject[discrete_boundary_condition_child], CreatableNamedObjectMixin[discrete_boundary_condition_child]):
    """
    List of boundary conditions for Discrete population balance model.
    """
    _version = '251'
    fluent_name = 'discrete-boundary-condition'
    _python_name = 'discrete_boundary_condition'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = discrete_boundary_condition_child

class discrete_boundary_value_child(Group):
    """
    'child_object_type' of discrete_boundary_value.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'discrete_boundary_value_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class discrete_boundary_value(NamedObject[discrete_boundary_value_child], CreatableNamedObjectMixin[discrete_boundary_value_child]):
    """
    List of boundary values for Discrete population balance model.
    """
    _version = '251'
    fluent_name = 'discrete-boundary-value'
    _python_name = 'discrete_boundary_value'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = discrete_boundary_value_child

class quadrature_moment_boundary_condition_child(String, AllowedValuesMixin):
    """
    'child_object_type' of quadrature_moment_boundary_condition.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'quadrature_moment_boundary_condition_child'

class quadrature_moment_boundary_condition(NamedObject[quadrature_moment_boundary_condition_child], CreatableNamedObjectMixin[quadrature_moment_boundary_condition_child]):
    """
    List of boundary conditions for Quadrature Moment population balance model.
    """
    _version = '251'
    fluent_name = 'quadrature-moment-boundary-condition'
    _python_name = 'quadrature_moment_boundary_condition'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = quadrature_moment_boundary_condition_child

class quadrature_moment_boundary_value_child(Group):
    """
    'child_object_type' of quadrature_moment_boundary_value.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'quadrature_moment_boundary_value_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class quadrature_moment_boundary_value(NamedObject[quadrature_moment_boundary_value_child], CreatableNamedObjectMixin[quadrature_moment_boundary_value_child]):
    """
    List of boundary values for Quadrature Moment population balance model.
    """
    _version = '251'
    fluent_name = 'quadrature-moment-boundary-value'
    _python_name = 'quadrature_moment_boundary_value'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = quadrature_moment_boundary_value_child

class qbmm_boundary_condition_child(String, AllowedValuesMixin):
    """
    'child_object_type' of qbmm_boundary_condition.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'qbmm_boundary_condition_child'

class qbmm_boundary_condition(NamedObject[qbmm_boundary_condition_child], CreatableNamedObjectMixin[qbmm_boundary_condition_child]):
    """
    List of boundary conditions for QBMM population balance model.
    """
    _version = '251'
    fluent_name = 'qbmm-boundary-condition'
    _python_name = 'qbmm_boundary_condition'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = qbmm_boundary_condition_child

class qbmm_boundary_value_child(Group):
    """
    'child_object_type' of qbmm_boundary_value.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'qbmm_boundary_value_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class qbmm_boundary_value(NamedObject[qbmm_boundary_value_child], CreatableNamedObjectMixin[qbmm_boundary_value_child]):
    """
    List of boundary values for QBMM population balance model.
    """
    _version = '251'
    fluent_name = 'qbmm-boundary-value'
    _python_name = 'qbmm_boundary_value'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = qbmm_boundary_value_child

class std_moment_boundary_condition_child(String, AllowedValuesMixin):
    """
    'child_object_type' of std_moment_boundary_condition.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'std_moment_boundary_condition_child'

class std_moment_boundary_condition(NamedObject[std_moment_boundary_condition_child], CreatableNamedObjectMixin[std_moment_boundary_condition_child]):
    """
    List of boundary conditions for Standard population balance model.
    """
    _version = '251'
    fluent_name = 'std-moment-boundary-condition'
    _python_name = 'std_moment_boundary_condition'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = std_moment_boundary_condition_child

class std_moment_boundary_value_child(Group):
    """
    'child_object_type' of std_moment_boundary_value.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'std_moment_boundary_value_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class std_moment_boundary_value(NamedObject[std_moment_boundary_value_child], CreatableNamedObjectMixin[std_moment_boundary_value_child]):
    """
    List of boundary values for Standard population balance model.
    """
    _version = '251'
    fluent_name = 'std-moment-boundary-value'
    _python_name = 'std_moment_boundary_value'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = std_moment_boundary_value_child

class dqmom_boundary_condition_child(String, AllowedValuesMixin):
    """
    'child_object_type' of dqmom_boundary_condition.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'dqmom_boundary_condition_child'

class dqmom_boundary_condition(NamedObject[dqmom_boundary_condition_child], CreatableNamedObjectMixin[dqmom_boundary_condition_child]):
    """
    List of boundary conditions for DQMOM population balance model.
    """
    _version = '251'
    fluent_name = 'dqmom-boundary-condition'
    _python_name = 'dqmom_boundary_condition'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = dqmom_boundary_condition_child

class dqmom_boundary_value_child(Group):
    """
    'child_object_type' of dqmom_boundary_value.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'dqmom_boundary_value_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class dqmom_boundary_value(NamedObject[dqmom_boundary_value_child], CreatableNamedObjectMixin[dqmom_boundary_value_child]):
    """
    List of boundary values for DQMOM population balance model.
    """
    _version = '251'
    fluent_name = 'dqmom-boundary-value'
    _python_name = 'dqmom_boundary_value'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = dqmom_boundary_value_child

class population_balance(Group):
    """
    Population balance settings.
    """
    _version = '251'
    fluent_name = 'population-balance'
    _python_name = 'population_balance'
    child_names = ['discrete_boundary_condition', 'discrete_boundary_value', 'quadrature_moment_boundary_condition', 'quadrature_moment_boundary_value', 'qbmm_boundary_condition', 'qbmm_boundary_value', 'std_moment_boundary_condition', 'std_moment_boundary_value', 'dqmom_boundary_condition', 'dqmom_boundary_value']
    _child_classes = dict(
        discrete_boundary_condition=discrete_boundary_condition,
        discrete_boundary_value=discrete_boundary_value,
        quadrature_moment_boundary_condition=quadrature_moment_boundary_condition,
        quadrature_moment_boundary_value=quadrature_moment_boundary_value,
        qbmm_boundary_condition=qbmm_boundary_condition,
        qbmm_boundary_value=qbmm_boundary_value,
        std_moment_boundary_condition=std_moment_boundary_condition,
        std_moment_boundary_value=std_moment_boundary_value,
        dqmom_boundary_condition=dqmom_boundary_condition,
        dqmom_boundary_value=dqmom_boundary_value,
    )
    _child_aliases = dict(
        pb_disc=('discrete_boundary_value', 'pb-disc'),
        pb_disc_bc=('discrete_boundary_condition', 'pb-disc-bc'),
        pb_dqmom=('dqmom_boundary_value', 'pb-dqmom'),
        pb_dqmom_bc=('dqmom_boundary_condition', 'pb-dqmom-bc'),
        pb_qbmm=('qbmm_boundary_value', 'pb-qbmm'),
        pb_qbmm_bc=('qbmm_boundary_condition', 'pb-qbmm-bc'),
        pb_qmom=('quadrature_moment_boundary_value', 'pb-qmom'),
        pb_qmom_bc=('quadrature_moment_boundary_condition', 'pb-qmom-bc'),
        pb_smm=('std_moment_boundary_value', 'pb-smm'),
        pb_smm_bc=('std_moment_boundary_condition', 'pb-smm-bc'),
    )

class backflow_relative_humidity(Group):
    """
    Backflow Relative humidity.
    """
    _version = '251'
    fluent_name = 'backflow-relative-humidity'
    _python_name = 'backflow_relative_humidity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_liquid_mass_fraction(Group):
    """
    Backflow Liquid Mass Fraction.
    """
    _version = '251'
    fluent_name = 'backflow-liquid-mass-fraction'
    _python_name = 'backflow_liquid_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class backflow_log10_droplets_per_unit_volume(Group):
    """
    Backflow Log10(Droplets Per Unit Volume).
    """
    _version = '251'
    fluent_name = 'backflow-log10-droplets-per-unit-volume'
    _python_name = 'backflow_log10_droplets_per_unit_volume'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class multiphase_2(Group):
    """
    Multiphase settings.
    """
    _version = '251'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['open_channel', 'outlet_group_id', 'phase_spec', 'free_surface_level', 'bottom_level', 'density_interpolation_method', 'backflow_granular_temperature', 'backflow_interfacial_area_concentration', 'backflow_level_set_function_flux', 'volume_frac_spec_method', 'backflow_volume_fraction', 'population_balance', 'backflow_relative_humidity', 'backflow_liquid_mass_fraction', 'backflow_log10_droplets_per_unit_volume']
    _child_classes = dict(
        open_channel=open_channel,
        outlet_group_id=outlet_group_id,
        phase_spec=phase_spec,
        free_surface_level=free_surface_level,
        bottom_level=bottom_level,
        density_interpolation_method=density_interpolation_method,
        backflow_granular_temperature=backflow_granular_temperature,
        backflow_interfacial_area_concentration=backflow_interfacial_area_concentration,
        backflow_level_set_function_flux=backflow_level_set_function_flux,
        volume_frac_spec_method=volume_frac_spec_method,
        backflow_volume_fraction=backflow_volume_fraction,
        population_balance=population_balance,
        backflow_relative_humidity=backflow_relative_humidity,
        backflow_liquid_mass_fraction=backflow_liquid_mass_fraction,
        backflow_log10_droplets_per_unit_volume=backflow_log10_droplets_per_unit_volume,
    )
    _child_aliases = dict(
        den_spec=('density_interpolation_method', 'den-spec'),
        granular_temperature=('backflow_granular_temperature', 'granular-temperature'),
        ht_bottom=('bottom_level', 'ht-bottom'),
        ht_local=('free_surface_level', 'ht-local'),
        iac=('backflow_interfacial_area_concentration', 'iac'),
        lsfun=('backflow_level_set_function_flux', 'lsfun'),
        outlet_number=('outlet_group_id', 'outlet-number'),
        vof_spec=('volume_frac_spec_method', 'vof-spec'),
        volume_fraction=('backflow_volume_fraction', 'volume-fraction'),
        wsb=('backflow_liquid_mass_fraction', 'wsb'),
        wsf=('backflow_relative_humidity', 'wsf'),
        wsn=('backflow_log10_droplets_per_unit_volume', 'wsn'),
    )

class potential_boundary_condition(String, AllowedValuesMixin):
    """
    Potential Boundary Condition.
    """
    _version = '251'
    fluent_name = 'potential-boundary-condition'
    _python_name = 'potential_boundary_condition'

class potential_boundary_value(Group):
    """
    Potential or Current density Value.
    """
    _version = '251'
    fluent_name = 'potential-boundary-value'
    _python_name = 'potential_boundary_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class electrolyte_potential_boundary_condition(String, AllowedValuesMixin):
    """
    Electrolyte Potential Boundary Condition.
    """
    _version = '251'
    fluent_name = 'electrolyte-potential-boundary-condition'
    _python_name = 'electrolyte_potential_boundary_condition'

class current_density_boundary_value(Group):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'current-density-boundary-value'
    _python_name = 'current_density_boundary_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class potential_1(Group):
    """
    Allows to change potential model variables or settings.
    """
    _version = '251'
    fluent_name = 'potential'
    _python_name = 'potential'
    child_names = ['potential_boundary_condition', 'potential_boundary_value', 'electrolyte_potential_boundary_condition', 'current_density_boundary_value']
    _child_classes = dict(
        potential_boundary_condition=potential_boundary_condition,
        potential_boundary_value=potential_boundary_value,
        electrolyte_potential_boundary_condition=electrolyte_potential_boundary_condition,
        current_density_boundary_value=current_density_boundary_value,
    )
    _child_aliases = dict(
        dual_potential_type=('electrolyte_potential_boundary_condition', 'dual-potential-type'),
        dual_potential_value=('current_density_boundary_value', 'dual-potential-value'),
        elec_potential_type=('potential_boundary_condition', 'elec-potential-type'),
        elec_potential_value=('potential_boundary_value', 'elec-potential-value'),
    )

class x_disp_boundary_condition(String, AllowedValuesMixin):
    """
    X-Displacement Boundary Condition.
    """
    _version = '251'
    fluent_name = 'x-disp-boundary-condition'
    _python_name = 'x_disp_boundary_condition'

class x_disp_boundary_value(Group):
    """
    X-Displacement Boundary value.
    """
    _version = '251'
    fluent_name = 'x-disp-boundary-value'
    _python_name = 'x_disp_boundary_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class y_disp_boundary_condition(String, AllowedValuesMixin):
    """
    Y-Displacement Boundary Condition.
    """
    _version = '251'
    fluent_name = 'y-disp-boundary-condition'
    _python_name = 'y_disp_boundary_condition'

class y_disp_boundary_value(Group):
    """
    Y-Displacement Boundary Value.
    """
    _version = '251'
    fluent_name = 'y-disp-boundary-value'
    _python_name = 'y_disp_boundary_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class z_disp_boundary_condition(String, AllowedValuesMixin):
    """
    Z-Displacement Boundary Condition.
    """
    _version = '251'
    fluent_name = 'z-disp-boundary-condition'
    _python_name = 'z_disp_boundary_condition'

class z_disp_boundary_value(Group):
    """
    Z-Displacement Boundary Value.
    """
    _version = '251'
    fluent_name = 'z-disp-boundary-value'
    _python_name = 'z_disp_boundary_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class structure_1(Group):
    """
    Allows to change structure model variables or settings.
    """
    _version = '251'
    fluent_name = 'structure'
    _python_name = 'structure'
    child_names = ['x_disp_boundary_condition', 'x_disp_boundary_value', 'y_disp_boundary_condition', 'y_disp_boundary_value', 'z_disp_boundary_condition', 'z_disp_boundary_value']
    _child_classes = dict(
        x_disp_boundary_condition=x_disp_boundary_condition,
        x_disp_boundary_value=x_disp_boundary_value,
        y_disp_boundary_condition=y_disp_boundary_condition,
        y_disp_boundary_value=y_disp_boundary_value,
        z_disp_boundary_condition=z_disp_boundary_condition,
        z_disp_boundary_value=z_disp_boundary_value,
    )
    _child_aliases = dict(
        x_displacement_type=('x_disp_boundary_condition', 'x-displacement-type'),
        x_displacement_value=('x_disp_boundary_value', 'x-displacement-value'),
        y_displacement_type=('y_disp_boundary_condition', 'y-displacement-type'),
        y_displacement_value=('y_disp_boundary_value', 'y-displacement-value'),
        z_displacement_type=('z_disp_boundary_condition', 'z-displacement-type'),
        z_displacement_value=('z_disp_boundary_value', 'z-displacement-value'),
    )

class uds_bc_child(String, AllowedValuesMixin):
    """
    'child_object_type' of uds_bc.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'uds_bc_child'

class uds_bc(NamedObject[uds_bc_child], CreatableNamedObjectMixin[uds_bc_child]):
    """
    User-defined scalar boundary condition.
    """
    _version = '251'
    fluent_name = 'uds-bc'
    _python_name = 'uds_bc'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = uds_bc_child

class uds_1_child(Group):
    """
    'child_object_type' of uds.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'uds_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class uds_1(NamedObject[uds_1_child], CreatableNamedObjectMixin[uds_1_child]):
    """
    User-defined scalar boundary value or flux.
    """
    _version = '251'
    fluent_name = 'uds'
    _python_name = 'uds'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = uds_1_child

class uds(Group):
    """
    Allows to change UDS model variables or settings.
    """
    _version = '251'
    fluent_name = 'uds'
    _python_name = 'uds'
    child_names = ['uds_bc', 'uds']
    _child_classes = dict(
        uds_bc=uds_bc,
        uds=uds_1,
    )

class fensapice_flow_bc_subtype(Integer):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-flow-bc-subtype'
    _python_name = 'fensapice_flow_bc_subtype'

class fensapice_dpm_outlet_condition(Integer):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-dpm-outlet-condition'
    _python_name = 'fensapice_dpm_outlet_condition'

class fensapice_dpm_rh_mode(Integer):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-dpm-rh-mode'
    _python_name = 'fensapice_dpm_rh_mode'

class fensapice_drop_vrh(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-vrh'
    _python_name = 'fensapice_drop_vrh'

class fensapice_drop_vc(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-vc'
    _python_name = 'fensapice_drop_vc'

class icing(Group):
    """
    Allows to change icing model variables or settings.
    """
    _version = '251'
    fluent_name = 'icing'
    _python_name = 'icing'
    child_names = ['fensapice_flow_bc_subtype', 'fensapice_dpm_outlet_condition', 'fensapice_dpm_rh_mode', 'fensapice_drop_vrh', 'fensapice_drop_vc']
    _child_classes = dict(
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_dpm_outlet_condition=fensapice_dpm_outlet_condition,
        fensapice_dpm_rh_mode=fensapice_dpm_rh_mode,
        fensapice_drop_vrh=fensapice_drop_vrh,
        fensapice_drop_vc=fensapice_drop_vc,
    )

class phase_3_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        momentum=momentum,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_3(NamedObject[phase_3_child], CreatableNamedObjectMixin[phase_3_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_3_child

class exhaust_fan_child(Group):
    """
    'child_object_type' of exhaust_fan.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'exhaust_fan_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_3,
        momentum=momentum,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class exhaust_fan(NamedObject[exhaust_fan_child], CreatableNamedObjectMixin[exhaust_fan_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'exhaust-fan'
    _python_name = 'exhaust_fan'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = exhaust_fan_child

class porous_jump_turb_wall_treatment(Boolean):
    """
    Enable/disable Wall Treatment.
    """
    _version = '251'
    fluent_name = 'porous-jump-turb-wall-treatment?'
    _python_name = 'porous_jump_turb_wall_treatment'

class reverse_fan_direction(Boolean):
    """
    Turn on/off Reverse Fan Direction.
    """
    _version = '251'
    fluent_name = 'reverse-fan-direction?'
    _python_name = 'reverse_fan_direction'

class profile_specification_of_pressure_jump(Boolean):
    """
    Enable/disable Profile Specification of Pressure-Jump.
    """
    _version = '251'
    fluent_name = 'profile-specification-of-pressure-jump?'
    _python_name = 'profile_specification_of_pressure_jump'

class pressure_jump_profile(Group):
    """
    Pressure Jump Profile.
    """
    _version = '251'
    fluent_name = 'pressure-jump-profile'
    _python_name = 'pressure_jump_profile'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class limit_polynomial_velocity_range(Boolean):
    """
    Enable/disable Limit Polynomial Velocity Range.
    """
    _version = '251'
    fluent_name = 'limit-polynomial-velocity-range?'
    _python_name = 'limit_polynomial_velocity_range'

class min_velocity(Real):
    """
    Polynomial Range: Minimum Velocity Magnitude.
    """
    _version = '251'
    fluent_name = 'min-velocity'
    _python_name = 'min_velocity'

class max_velocity(Real):
    """
    Polynomial Range: Maximum Velocity Magnitude.
    """
    _version = '251'
    fluent_name = 'max-velocity'
    _python_name = 'max_velocity'

class cal_pressure_jump_from_avg_conditions(Boolean):
    """
    Calculate Pressure-Jump from Average Conditions.
    """
    _version = '251'
    fluent_name = 'cal-pressure-jump-from-avg-conditions?'
    _python_name = 'cal_pressure_jump_from_avg_conditions'

class pressure_jump_specification(Group):
    """
    Pressure jump specification settings.
    """
    _version = '251'
    fluent_name = 'pressure-jump-specification'
    _python_name = 'pressure_jump_specification'
    child_names = ['porous_jump_turb_wall_treatment', 'reverse_fan_direction', 'profile_specification_of_pressure_jump', 'pressure_jump', 'pressure_jump_profile', 'limit_polynomial_velocity_range', 'min_velocity', 'max_velocity', 'strength', 'cal_pressure_jump_from_avg_conditions', 'new_fan_definition']
    _child_classes = dict(
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        reverse_fan_direction=reverse_fan_direction,
        profile_specification_of_pressure_jump=profile_specification_of_pressure_jump,
        pressure_jump=pressure_jump,
        pressure_jump_profile=pressure_jump_profile,
        limit_polynomial_velocity_range=limit_polynomial_velocity_range,
        min_velocity=min_velocity,
        max_velocity=max_velocity,
        strength=strength,
        cal_pressure_jump_from_avg_conditions=cal_pressure_jump_from_avg_conditions,
        new_fan_definition=new_fan_definition,
    )
    _child_aliases = dict(
        average_dp=('cal_pressure_jump_from_avg_conditions', 'average-dp?'),
        c=('pressure_jump', 'c'),
        dir=('reverse_fan_direction', 'dir'),
        dp_profile=('pressure_jump_profile', 'dp-profile'),
        limit_range=('limit_polynomial_velocity_range', 'limit-range?'),
        new_fan_definition=('new_fan_definition', 'new-fan-definition?'),
        profile_dp=('profile_specification_of_pressure_jump', 'profile-dp?'),
        v_max=('max_velocity', 'v-max'),
        v_min=('min_velocity', 'v-min'),
    )

class specify_swirl_velocity(Boolean):
    """
    Enable/disable Swirl-Velocity Specification.
    """
    _version = '251'
    fluent_name = 'specify-swirl-velocity?'
    _python_name = 'specify_swirl_velocity'

class fan_axis_child(Real):
    """
    'child_object_type' of fan_axis.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'fan_axis_child'

class fan_axis(ListObject[fan_axis_child]):
    """
    Axis direction components.
    """
    _version = '251'
    fluent_name = 'fan-axis'
    _python_name = 'fan_axis'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = fan_axis_child

class fan_origin_1_child(Real):
    """
    'child_object_type' of fan_origin.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'fan_origin_child'

class fan_origin_1(ListObject[fan_origin_1_child]):
    """
    Axis origin components.
    """
    _version = '251'
    fluent_name = 'fan-origin'
    _python_name = 'fan_origin'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = fan_origin_1_child

class fan_hub_radius(Real):
    """
    Fan Hub Radius.
    """
    _version = '251'
    fluent_name = 'fan-hub-radius'
    _python_name = 'fan_hub_radius'

class profile_specification_of_tangential_velocity(Boolean):
    """
    Enable/disable Profile Specification of Tangential Velocity.
    """
    _version = '251'
    fluent_name = 'profile-specification-of-tangential-velocity?'
    _python_name = 'profile_specification_of_tangential_velocity'

class tangential_velocity_profile(Group):
    """
    Tangential Velocity Profile.
    """
    _version = '251'
    fluent_name = 'tangential-velocity-profile'
    _python_name = 'tangential_velocity_profile'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class tangential_velocity_polynomial_coeff(RealList):
    """
    Tangential-Velocity Polynomial Coefficient.
    """
    _version = '251'
    fluent_name = 'tangential-velocity-polynomial-coeff'
    _python_name = 'tangential_velocity_polynomial_coeff'

class profile_specification_of_radial_velocity(Boolean):
    """
    Enable/disable Profile Specification of Radial Velocity?.
    """
    _version = '251'
    fluent_name = 'profile-specification-of-radial-velocity?'
    _python_name = 'profile_specification_of_radial_velocity'

class radial_velocity_profile(Group):
    """
    Radial Velocity Profile.
    """
    _version = '251'
    fluent_name = 'radial-velocity-profile'
    _python_name = 'radial_velocity_profile'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class radial_velocity_polynomial_coeff(RealList):
    """
    Radial-Velocity Polynomial Coefficient.
    """
    _version = '251'
    fluent_name = 'radial-velocity-polynomial-coeff'
    _python_name = 'radial_velocity_polynomial_coeff'

class swirl_factor(Real):
    """
    Swirl factor.
    """
    _version = '251'
    fluent_name = 'swirl-factor'
    _python_name = 'swirl_factor'

class swirl_velocity_specification(Group):
    """
    Swirl Velocity specification settings.
    """
    _version = '251'
    fluent_name = 'swirl-velocity-specification'
    _python_name = 'swirl_velocity_specification'
    child_names = ['specify_swirl_velocity', 'fan_axis', 'fan_origin', 'fan_hub_radius', 'profile_specification_of_tangential_velocity', 'tangential_velocity_profile', 'tangential_velocity_polynomial_coeff', 'profile_specification_of_radial_velocity', 'radial_velocity_profile', 'radial_velocity_polynomial_coeff', 'swirl_factor']
    _child_classes = dict(
        specify_swirl_velocity=specify_swirl_velocity,
        fan_axis=fan_axis,
        fan_origin=fan_origin_1,
        fan_hub_radius=fan_hub_radius,
        profile_specification_of_tangential_velocity=profile_specification_of_tangential_velocity,
        tangential_velocity_profile=tangential_velocity_profile,
        tangential_velocity_polynomial_coeff=tangential_velocity_polynomial_coeff,
        profile_specification_of_radial_velocity=profile_specification_of_radial_velocity,
        radial_velocity_profile=radial_velocity_profile,
        radial_velocity_polynomial_coeff=radial_velocity_polynomial_coeff,
        swirl_factor=swirl_factor,
    )
    _child_aliases = dict(
        axis_direction_component=('fan_axis', 'axis-direction-component'),
        axis_origin_component=('fan_origin', 'axis-origin-component'),
        fan_vr=('radial_velocity_polynomial_coeff', 'fan-vr'),
        fr=('tangential_velocity_polynomial_coeff', 'fr'),
        hub=('fan_hub_radius', 'hub'),
        profile_vr=('profile_specification_of_radial_velocity', 'profile-vr?'),
        profile_vt=('profile_specification_of_tangential_velocity', 'profile-vt?'),
        swirl_model=('specify_swirl_velocity', 'swirl-model?'),
        vr_profile=('radial_velocity_profile', 'vr-profile'),
        vt_profile=('tangential_velocity_profile', 'vt-profile'),
    )

class discrete_phase_2(Group):
    """
    Discrete Phase settings.
    """
    _version = '251'
    fluent_name = 'discrete-phase'
    _python_name = 'discrete_phase'
    child_names = ['bc_type', 'reinject_using_injection', 'bc_user_function', 'dem_collision_partner']
    _child_classes = dict(
        bc_type=bc_type_1,
        reinject_using_injection=reinject_using_injection,
        bc_user_function=bc_user_function,
        dem_collision_partner=dem_collision_partner,
    )
    _child_aliases = dict(
        discrete_phase_bc_function=('bc_user_function', 'discrete-phase-bc-function'),
        discrete_phase_bc_type=('bc_type', 'discrete-phase-bc-type'),
        dpm_bc_collision_partner=('dem_collision_partner', 'dpm/bc-collision-partner'),
        dpm_bc_type_j=('bc_type', 'dpm/bc-type-j'),
        dpm_bc_udf=('bc_user_function', 'dpm/bc-udf'),
        reinj_inj=('reinject_using_injection', 'reinj-inj'),
    )

class phase_4_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['pressure_jump_specification', 'swirl_velocity_specification', 'discrete_phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        pressure_jump_specification=pressure_jump_specification,
        swirl_velocity_specification=swirl_velocity_specification,
        discrete_phase=discrete_phase_2,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_4(NamedObject[phase_4_child], CreatableNamedObjectMixin[phase_4_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_4_child

class fan_child(Group):
    """
    'child_object_type' of fan.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'fan_child'
    child_names = ['name', 'phase', 'pressure_jump_specification', 'swirl_velocity_specification', 'discrete_phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_4,
        pressure_jump_specification=pressure_jump_specification,
        swirl_velocity_specification=swirl_velocity_specification,
        discrete_phase=discrete_phase_2,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class fan(NamedObject[fan_child], CreatableNamedObjectMixin[fan_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'fan'
    _python_name = 'fan'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = fan_child

class geometry_3_child(Group):
    """
    'child_object_type' of geometry.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'geometry_child'
    child_names = ['name', 'phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_2,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class geometry_3(NamedObject[geometry_3_child], CreatableNamedObjectMixin[geometry_3_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = geometry_3_child

class reference_frame_4(String, AllowedValuesMixin):
    """
    Reference Frame.
    """
    _version = '251'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'

class gauge_total_pressure(Group):
    """
    Gauge Total Pressure.
    """
    _version = '251'
    fluent_name = 'gauge-total-pressure'
    _python_name = 'gauge_total_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class supersonic_or_initial_gauge_pressure(Group):
    """
    Supersonic/Initial Gauge Pressure.
    """
    _version = '251'
    fluent_name = 'supersonic-or-initial-gauge-pressure'
    _python_name = 'supersonic_or_initial_gauge_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class direction_specification_method(String, AllowedValuesMixin):
    """
    Direction Specification Method.
    """
    _version = '251'
    fluent_name = 'direction-specification-method'
    _python_name = 'direction_specification_method'

class direction_vector_child(Group):
    """
    'child_object_type' of direction_vector.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'direction_vector_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class direction_vector(ListObject[direction_vector_child]):
    """
    Direction vector components.
    """
    _version = '251'
    fluent_name = 'direction-vector'
    _python_name = 'direction_vector'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = direction_vector_child

class prevent_reverse_flow_1(Boolean):
    """
    Build artificial walls to prevent reverse flow?.
    """
    _version = '251'
    fluent_name = 'prevent-reverse-flow?'
    _python_name = 'prevent_reverse_flow'

class loss_coefficient(Group):
    """
    Loss Coefficient.
    """
    _version = '251'
    fluent_name = 'loss-coefficient'
    _python_name = 'loss_coefficient'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class momentum_1(Group):
    """
    Allows to change momentum model variables or settings.
    """
    _version = '251'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['reference_frame', 'gauge_total_pressure', 'supersonic_or_initial_gauge_pressure', 'direction_specification_method', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'prevent_reverse_flow', 'acoustic_wave_model', 'impedance_zero_order_term', 'real_pole_series', 'complex_pole_series', 'incoming_wave', 'loss_coefficient', 'strength']
    _child_classes = dict(
        reference_frame=reference_frame_4,
        gauge_total_pressure=gauge_total_pressure,
        supersonic_or_initial_gauge_pressure=supersonic_or_initial_gauge_pressure,
        direction_specification_method=direction_specification_method,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        prevent_reverse_flow=prevent_reverse_flow_1,
        acoustic_wave_model=acoustic_wave_model,
        impedance_zero_order_term=impedance_zero_order_term,
        real_pole_series=real_pole_series,
        complex_pole_series=complex_pole_series,
        incoming_wave=incoming_wave,
        loss_coefficient=loss_coefficient,
        strength=strength,
    )
    _child_aliases = dict(
        ac_options=('acoustic_wave_model', 'ac-options'),
        ac_wave=('incoming_wave', 'ac-wave'),
        axis_direction_component=('axis_direction', 'axis-direction-component'),
        axis_origin_component=('axis_origin', 'axis-origin-component'),
        b=('loss_coefficient', 'b'),
        direction_spec=('direction_specification_method', 'direction-spec'),
        direction_vector_components=('direction_vector', 'direction-vector-components'),
        flow_direction_component=('flow_direction', 'flow-direction-component'),
        frame_of_reference=('reference_frame', 'frame-of-reference'),
        impedance_0=('impedance_zero_order_term', 'impedance-0'),
        impedance_1=('real_pole_series', 'impedance-1'),
        impedance_2=('complex_pole_series', 'impedance-2'),
        p0=('gauge_total_pressure', 'p0'),
    )

class number_of_vortices(Integer):
    """
    Number of Vortices.
    """
    _version = '251'
    fluent_name = 'number-of-vortices'
    _python_name = 'number_of_vortices'

class streamwise_fluctuations(Boolean):
    """
    Enable/disable Streamwise Fluctuations.
    """
    _version = '251'
    fluent_name = 'streamwise-fluctuations?'
    _python_name = 'streamwise_fluctuations'

class satisfy_mass_conservation(Boolean):
    """
    Enable/disable Satisfy Mass Conservation.
    """
    _version = '251'
    fluent_name = 'satisfy-mass-conservation?'
    _python_name = 'satisfy_mass_conservation'

class scale_search_limiter(String, AllowedValuesMixin):
    """
    Scale Search Limiter option.
    """
    _version = '251'
    fluent_name = 'scale-search-limiter'
    _python_name = 'scale_search_limiter'

class stg_turbulent_intensity(Real):
    """
    Synthetic turbulence generated turbulent intensity.
    """
    _version = '251'
    fluent_name = 'stg-turbulent-intensity'
    _python_name = 'stg_turbulent_intensity'

class stg_turbulent_viscosity_ratio(Real):
    """
    Synthetic turbulence generator turbulent viscosity ratio.
    """
    _version = '251'
    fluent_name = 'stg-turbulent-viscosity-ratio'
    _python_name = 'stg_turbulent_viscosity_ratio'

class wall_distance(Real):
    """
    Synthetic turbulence generator wall distance.
    """
    _version = '251'
    fluent_name = 'wall-distance'
    _python_name = 'wall_distance'

class volumetric_forcing(Boolean):
    """
    Enable/disable Volumetric Forcing.
    """
    _version = '251'
    fluent_name = 'volumetric-forcing?'
    _python_name = 'volumetric_forcing'

class forcing_zone_thickness(String, AllowedValuesMixin):
    """
    Forcing zone thickness option.
    """
    _version = '251'
    fluent_name = 'forcing-zone-thickness'
    _python_name = 'forcing_zone_thickness'

class volumetric_thickness(Real):
    """
    Volumetric Thickness.
    """
    _version = '251'
    fluent_name = 'volumetric-thickness'
    _python_name = 'volumetric_thickness'

class les_spec(String, AllowedValuesMixin):
    """
    Pre-R18.1 Fluctuating Velocity Algorithm Choice.
    """
    _version = '251'
    fluent_name = 'les-spec'
    _python_name = 'les_spec'

class fluctuating_velocity_algorithm(String, AllowedValuesMixin):
    """
    Fluctuating Velocity Algorithm.
    """
    _version = '251'
    fluent_name = 'fluctuating-velocity-algorithm'
    _python_name = 'fluctuating_velocity_algorithm'

class modified_turbulent_viscosity(Group):
    """
    Modified Turbulent Viscosity.
    """
    _version = '251'
    fluent_name = 'modified-turbulent-viscosity'
    _python_name = 'modified_turbulent_viscosity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class laminar_kinetic_energy(Group):
    """
    Laminar Kinetic Energy.
    """
    _version = '251'
    fluent_name = 'laminar-kinetic-energy'
    _python_name = 'laminar_kinetic_energy'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class intermittency(Group):
    """
    Intermittency.
    """
    _version = '251'
    fluent_name = 'intermittency'
    _python_name = 'intermittency'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class turbulent_kinetic_energy(Group):
    """
    Turbulent Kinetic Energy.
    """
    _version = '251'
    fluent_name = 'turbulent-kinetic-energy'
    _python_name = 'turbulent_kinetic_energy'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class turbulent_dissipation_rate(Group):
    """
    Turbulent Dissipation Rate.
    """
    _version = '251'
    fluent_name = 'turbulent-dissipation-rate'
    _python_name = 'turbulent_dissipation_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class specific_dissipation_rate(Group):
    """
    Specific Dissipation Rate.
    """
    _version = '251'
    fluent_name = 'specific-dissipation-rate'
    _python_name = 'specific_dissipation_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class velocity_variance_scale(Group):
    """
    Velocity Variance Scale.
    """
    _version = '251'
    fluent_name = 'velocity-variance-scale'
    _python_name = 'velocity_variance_scale'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class turbulent_intensity(Real):
    """
    Turbulent Intensity.
    """
    _version = '251'
    fluent_name = 'turbulent-intensity'
    _python_name = 'turbulent_intensity'

class turbulent_length_scale(Real):
    """
    Turbulent Length Scale.
    """
    _version = '251'
    fluent_name = 'turbulent-length-scale'
    _python_name = 'turbulent_length_scale'

class hydraulic_diameter(Real):
    """
    Hydraulic Diameter.
    """
    _version = '251'
    fluent_name = 'hydraulic-diameter'
    _python_name = 'hydraulic_diameter'

class turbulent_viscosity_ratio(Real):
    """
    Turbulent Viscosity Ratio.
    """
    _version = '251'
    fluent_name = 'turbulent-viscosity-ratio'
    _python_name = 'turbulent_viscosity_ratio'

class turbulent_viscosity_ratio_profile(Group):
    """
    Turbulent Viscosity Ratio.
    """
    _version = '251'
    fluent_name = 'turbulent-viscosity-ratio-profile'
    _python_name = 'turbulent_viscosity_ratio_profile'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class number_of_fourier_modes(Integer):
    """
    Number of Fourier Modes.
    """
    _version = '251'
    fluent_name = 'number-of-fourier-modes'
    _python_name = 'number_of_fourier_modes'

class uu_reynolds_stresses(Group):
    """
    UU Reynolds Stresses.
    """
    _version = '251'
    fluent_name = 'uu-reynolds-stresses'
    _python_name = 'uu_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class vv_reynolds_stresses(Group):
    """
    VV Reynolds Stresses.
    """
    _version = '251'
    fluent_name = 'vv-reynolds-stresses'
    _python_name = 'vv_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class ww_reynolds_stresses(Group):
    """
    WW Reynolds Stresses.
    """
    _version = '251'
    fluent_name = 'ww-reynolds-stresses'
    _python_name = 'ww_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class uv_reynolds_stresses(Group):
    """
    UV Reynolds Stresses.
    """
    _version = '251'
    fluent_name = 'uv-reynolds-stresses'
    _python_name = 'uv_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class vw_reynolds_stresses(Group):
    """
    VW Reynolds Stresses.
    """
    _version = '251'
    fluent_name = 'vw-reynolds-stresses'
    _python_name = 'vw_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class uw_reynolds_stresses(Group):
    """
    UW Reynolds Stresses.
    """
    _version = '251'
    fluent_name = 'uw-reynolds-stresses'
    _python_name = 'uw_reynolds_stresses'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class turbulence_1(Group):
    """
    Allows to change turbulence model variables or settings.
    """
    _version = '251'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'
    child_names = ['number_of_vortices', 'streamwise_fluctuations', 'satisfy_mass_conservation', 'scale_search_limiter', 'stg_turbulent_intensity', 'stg_turbulent_viscosity_ratio', 'wall_distance', 'volumetric_forcing', 'forcing_zone_thickness', 'volumetric_thickness', 'les_spec', 'fluctuating_velocity_algorithm', 'turbulence_specification', 'modified_turbulent_viscosity', 'laminar_kinetic_energy', 'intermittency', 'turbulent_kinetic_energy', 'turbulent_dissipation_rate', 'specific_dissipation_rate', 'velocity_variance_scale', 'turbulent_intensity', 'turbulent_length_scale', 'hydraulic_diameter', 'turbulent_viscosity_ratio', 'turbulent_viscosity_ratio_profile', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity', 'number_of_fourier_modes', 'reynolds_stress_specification', 'uu_reynolds_stresses', 'vv_reynolds_stresses', 'ww_reynolds_stresses', 'uv_reynolds_stresses', 'vw_reynolds_stresses', 'uw_reynolds_stresses']
    _child_classes = dict(
        number_of_vortices=number_of_vortices,
        streamwise_fluctuations=streamwise_fluctuations,
        satisfy_mass_conservation=satisfy_mass_conservation,
        scale_search_limiter=scale_search_limiter,
        stg_turbulent_intensity=stg_turbulent_intensity,
        stg_turbulent_viscosity_ratio=stg_turbulent_viscosity_ratio,
        wall_distance=wall_distance,
        volumetric_forcing=volumetric_forcing,
        forcing_zone_thickness=forcing_zone_thickness,
        volumetric_thickness=volumetric_thickness,
        les_spec=les_spec,
        fluctuating_velocity_algorithm=fluctuating_velocity_algorithm,
        turbulence_specification=turbulence_specification,
        modified_turbulent_viscosity=modified_turbulent_viscosity,
        laminar_kinetic_energy=laminar_kinetic_energy,
        intermittency=intermittency,
        turbulent_kinetic_energy=turbulent_kinetic_energy,
        turbulent_dissipation_rate=turbulent_dissipation_rate,
        specific_dissipation_rate=specific_dissipation_rate,
        velocity_variance_scale=velocity_variance_scale,
        turbulent_intensity=turbulent_intensity,
        turbulent_length_scale=turbulent_length_scale,
        hydraulic_diameter=hydraulic_diameter,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio,
        turbulent_viscosity_ratio_profile=turbulent_viscosity_ratio_profile,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
        number_of_fourier_modes=number_of_fourier_modes,
        reynolds_stress_specification=reynolds_stress_specification,
        uu_reynolds_stresses=uu_reynolds_stresses,
        vv_reynolds_stresses=vv_reynolds_stresses,
        ww_reynolds_stresses=ww_reynolds_stresses,
        uv_reynolds_stresses=uv_reynolds_stresses,
        vw_reynolds_stresses=vw_reynolds_stresses,
        uw_reynolds_stresses=uw_reynolds_stresses,
    )
    _child_aliases = dict(
        e=('turbulent_dissipation_rate', 'e'),
        intermit=('intermittency', 'intermit'),
        k=('turbulent_kinetic_energy', 'k'),
        kl=('laminar_kinetic_energy', 'kl'),
        ksgs=('subgrid_kinetic_energy', 'ksgs'),
        ksgs_spec=('subgrid_kinetic_energy_specification', 'ksgs-spec'),
        nut=('modified_turbulent_viscosity', 'nut'),
        o=('specific_dissipation_rate', 'o'),
        rfg_number_of_modes=('number_of_fourier_modes', 'rfg-number-of-modes'),
        rst_spec=('reynolds_stress_specification', 'rst-spec'),
        sgs_turb_intensity=('subgrid_turbulent_intensity', 'sgs-turb-intensity'),
        stg_dw_limiter=('wall_distance', 'stg-dw-limiter'),
        stg_scale_limiter_type=('scale_search_limiter', 'stg-scale-limiter-type'),
        stg_ti_limiter=('stg_turbulent_intensity', 'stg-ti-limiter'),
        stg_tvr_limiter=('stg_turbulent_viscosity_ratio', 'stg-tvr-limiter'),
        turb_hydraulic_diam=('hydraulic_diameter', 'turb-hydraulic-diam'),
        turb_intensity=('turbulent_intensity', 'turb-intensity'),
        turb_length_scale=('turbulent_length_scale', 'turb-length-scale'),
        turb_viscosity_ratio=('turbulent_viscosity_ratio', 'turb-viscosity-ratio'),
        turb_viscosity_ratio_profile=('turbulent_viscosity_ratio_profile', 'turb-viscosity-ratio-profile'),
        turbulent_specification=('turbulence_specification', 'turbulent-specification'),
        uu=('uu_reynolds_stresses', 'uu'),
        uv=('uv_reynolds_stresses', 'uv'),
        uw=('uw_reynolds_stresses', 'uw'),
        v2=('velocity_variance_scale', 'v2'),
        vm_mass_conservation=('satisfy_mass_conservation', 'vm-mass-conservation?'),
        vm_number_of_vortices=('number_of_vortices', 'vm-number-of-vortices'),
        vm_streamwise_fluct=('streamwise_fluctuations', 'vm-streamwise-fluct?'),
        volumetric_synthetic_turbulence_generator_option=('forcing_zone_thickness', 'volumetric-synthetic-turbulence-generator-option'),
        volumetric_synthetic_turbulence_generator_option_thickness=('volumetric_thickness', 'volumetric-synthetic-turbulence-generator-option-thickness'),
        volumetric_synthetic_turbulence_generator=('volumetric_forcing', 'volumetric-synthetic-turbulence-generator?'),
        vv=('vv_reynolds_stresses', 'vv'),
        vw=('vw_reynolds_stresses', 'vw'),
        ww=('ww_reynolds_stresses', 'ww'),
    )

class total_temperature(Group):
    """
    Total temperature.
    """
    _version = '251'
    fluent_name = 'total-temperature'
    _python_name = 'total_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class thermal_1(Group):
    """
    Allows to change thermal model variables or settings.
    """
    _version = '251'
    fluent_name = 'thermal'
    _python_name = 'thermal'
    child_names = ['total_temperature']
    _child_classes = dict(
        total_temperature=total_temperature,
    )
    _child_aliases = dict(
        t0=('total_temperature', 't0'),
    )

class radiating_s2s_surface(Boolean):
    """
    Participates in View Factor Calculation?.
    """
    _version = '251'
    fluent_name = 'radiating-s2s-surface?'
    _python_name = 'radiating_s2s_surface'

class radiation_2(Group):
    """
    Radiation settings for this boundary-condition.
    """
    _version = '251'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['radiation_bc', 'radial_direction', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'radiating_s2s_surface', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity']
    _child_classes = dict(
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        radiating_s2s_surface=radiating_s2s_surface,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
    )
    _child_aliases = dict(
        band_q_irrad=('direct_irradiation', 'band-q-irrad'),
        band_q_irrad_diffuse=('diffuse_irradiation', 'band-q-irrad-diffuse'),
        coll_dphi=('phi_width_of_beam', 'coll-dphi'),
        coll_dtheta=('theta_width_of_beam', 'coll-dtheta'),
        in_emiss=('internal_emissivity', 'in-emiss'),
        radial_direction_component=('radial_direction', 'radial-direction-component'),
        solar_direction=('use_beeam_direction_from_solar_load_model_settings', 'solar-direction?'),
        solar_fluxes=('participates_in_solar_ray_tracing', 'solar-fluxes?'),
        solar_irradiation=('use_irradiation_from_solar_soad_model_settings', 'solar-irradiation?'),
        solar_shining_factor=('solar_transmissivity_factor', 'solar-shining-factor'),
        t_b_b=('black_body_temperature', 't-b-b'),
        t_b_b_spec=('external_black_body_temperature_method', 't-b-b-spec'),
    )

class mixture_fraction(Group):
    """
    Mixture fraction.
    """
    _version = '251'
    fluent_name = 'mixture-fraction'
    _python_name = 'mixture_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class mode_2_probability(Group):
    """
    Mode-2 probability.
    """
    _version = '251'
    fluent_name = 'mode-2-probability'
    _python_name = 'mode_2_probability'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class mode_3_probability(Group):
    """
    Mode-3 probability.
    """
    _version = '251'
    fluent_name = 'mode-3-probability'
    _python_name = 'mode_3_probability'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class equilibrate_inlet_stream(Boolean):
    """
    Equilibrate this inlet stream?.
    """
    _version = '251'
    fluent_name = 'equilibrate-inlet-stream?'
    _python_name = 'equilibrate_inlet_stream'

class species_mass_fraction_child(Group):
    """
    'child_object_type' of species_mass_fraction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'species_mass_fraction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class species_mass_fraction(NamedObject[species_mass_fraction_child], CreatableNamedObjectMixin[species_mass_fraction_child]):
    """
    Species mass fraction.
    """
    _version = '251'
    fluent_name = 'species-mass-fraction'
    _python_name = 'species_mass_fraction'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_mass_fraction_child

class progress_variable(Group):
    """
    Progress Variable.
    """
    _version = '251'
    fluent_name = 'progress-variable'
    _python_name = 'progress_variable'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class progress_variable_variance(Group):
    """
    Progress Variable Variance.
    """
    _version = '251'
    fluent_name = 'progress-variable-variance'
    _python_name = 'progress_variable_variance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class flame_area_density(Group):
    """
    Flame Area Density.
    """
    _version = '251'
    fluent_name = 'flame-area-density'
    _python_name = 'flame_area_density'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class inert_stream(Group):
    """
    Inert Stream.
    """
    _version = '251'
    fluent_name = 'inert-stream'
    _python_name = 'inert_stream'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_no_mass_fraction(Group):
    """
    Pollutant NO Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-no-mass-fraction'
    _python_name = 'pollutant_no_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_hcn_mass_fraction(Group):
    """
    Pollutant HCN Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-hcn-mass-fraction'
    _python_name = 'pollutant_hcn_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_nh3_mass_fraction(Group):
    """
    Pollutant NH3 Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-nh3-mass-fraction'
    _python_name = 'pollutant_nh3_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_n2o_mass_fraction(Group):
    """
    Pollutant N2O Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-n2o-mass-fraction'
    _python_name = 'pollutant_n2o_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_urea_mass_fraction(Group):
    """
    Pollutant UREA Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-urea-mass-fraction'
    _python_name = 'pollutant_urea_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_hnco_mass_fraction(Group):
    """
    Pollutant HNCO Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-hnco-mass-fraction'
    _python_name = 'pollutant_hnco_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_nco_mass_fraction(Group):
    """
    Pollutant NCO Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-nco-mass-fraction'
    _python_name = 'pollutant_nco_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_so2_mass_fraction(Group):
    """
    Pollutant SO2 Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-so2-mass-fraction'
    _python_name = 'pollutant_so2_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_h2s_mass_fraction(Group):
    """
    Pollutant H2S Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-h2s-mass-fraction'
    _python_name = 'pollutant_h2s_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_so3_mass_fraction(Group):
    """
    Pollutant SO3 Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-so3-mass-fraction'
    _python_name = 'pollutant_so3_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_sh_mass_fraction(Group):
    """
    Pollutant SH Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-sh-mass-fraction'
    _python_name = 'pollutant_sh_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_so_mass_fraction(Group):
    """
    Pollutant SO Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-so-mass-fraction'
    _python_name = 'pollutant_so_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class soot_mass_fraction(Group):
    """
    Soot Mass Fraction.
    """
    _version = '251'
    fluent_name = 'soot-mass-fraction'
    _python_name = 'soot_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class nuclei(Group):
    """
    Nuclei.
    """
    _version = '251'
    fluent_name = 'nuclei'
    _python_name = 'nuclei'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class tar_mass_fraction(Group):
    """
    Tar Mass Fraction.
    """
    _version = '251'
    fluent_name = 'tar-mass-fraction'
    _python_name = 'tar_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_hg_mass_fraction(Group):
    """
    Pollutant HG Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-hg-mass-fraction'
    _python_name = 'pollutant_hg_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_hgcl2_mass_fraction(Group):
    """
    Pollutant HGCL2 Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-hgcl2-mass-fraction'
    _python_name = 'pollutant_hgcl2_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_hcl_mass_fraction(Group):
    """
    Pollutant HCL Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-hcl-mass-fraction'
    _python_name = 'pollutant_hcl_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_hgo_mass_fraction(Group):
    """
    Pollutant HGO Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-hgo-mass-fraction'
    _python_name = 'pollutant_hgo_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_cl_mass_fraction(Group):
    """
    Pollutant CL Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-cl-mass-fraction'
    _python_name = 'pollutant_cl_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_cl2_mass_fraction(Group):
    """
    Pollutant CL2 Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-cl2-mass-fraction'
    _python_name = 'pollutant_cl2_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_hgcl_mass_fraction(Group):
    """
    Pollutant HGCL Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-hgcl-mass-fraction'
    _python_name = 'pollutant_hgcl_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pollutant_hocl_mass_fraction(Group):
    """
    Pollutant HOCL Mass Fraction.
    """
    _version = '251'
    fluent_name = 'pollutant-hocl-mass-fraction'
    _python_name = 'pollutant_hocl_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class species_6(Group):
    """
    Allows to change species model variables or settings.
    """
    _version = '251'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['mixture_fraction', 'mode_2_probability', 'mode_3_probability', 'equilibrate_inlet_stream', 'mean_mixture_fraction', 'mixture_fraction_variance', 'secondary_mean_mixture_fraction', 'secondary_mixture_fraction_variance', 'specify_species_in_mole_fractions', 'species_mass_fraction', 'species_mole_fraction', 'progress_variable', 'progress_variable_variance', 'flame_area_density', 'inert_stream', 'pollutant_no_mass_fraction', 'pollutant_hcn_mass_fraction', 'pollutant_nh3_mass_fraction', 'pollutant_n2o_mass_fraction', 'pollutant_urea_mass_fraction', 'pollutant_hnco_mass_fraction', 'pollutant_nco_mass_fraction', 'pollutant_so2_mass_fraction', 'pollutant_h2s_mass_fraction', 'pollutant_so3_mass_fraction', 'pollutant_sh_mass_fraction', 'pollutant_so_mass_fraction', 'soot_mass_fraction', 'nuclei', 'tar_mass_fraction', 'pollutant_hg_mass_fraction', 'pollutant_hgcl2_mass_fraction', 'pollutant_hcl_mass_fraction', 'pollutant_hgo_mass_fraction', 'pollutant_cl_mass_fraction', 'pollutant_cl2_mass_fraction', 'pollutant_hgcl_mass_fraction', 'pollutant_hocl_mass_fraction', 'tss_scalar']
    _child_classes = dict(
        mixture_fraction=mixture_fraction,
        mode_2_probability=mode_2_probability,
        mode_3_probability=mode_3_probability,
        equilibrate_inlet_stream=equilibrate_inlet_stream,
        mean_mixture_fraction=mean_mixture_fraction,
        mixture_fraction_variance=mixture_fraction_variance,
        secondary_mean_mixture_fraction=secondary_mean_mixture_fraction,
        secondary_mixture_fraction_variance=secondary_mixture_fraction_variance,
        specify_species_in_mole_fractions=specify_species_in_mole_fractions,
        species_mass_fraction=species_mass_fraction,
        species_mole_fraction=species_mole_fraction,
        progress_variable=progress_variable,
        progress_variable_variance=progress_variable_variance,
        flame_area_density=flame_area_density,
        inert_stream=inert_stream,
        pollutant_no_mass_fraction=pollutant_no_mass_fraction,
        pollutant_hcn_mass_fraction=pollutant_hcn_mass_fraction,
        pollutant_nh3_mass_fraction=pollutant_nh3_mass_fraction,
        pollutant_n2o_mass_fraction=pollutant_n2o_mass_fraction,
        pollutant_urea_mass_fraction=pollutant_urea_mass_fraction,
        pollutant_hnco_mass_fraction=pollutant_hnco_mass_fraction,
        pollutant_nco_mass_fraction=pollutant_nco_mass_fraction,
        pollutant_so2_mass_fraction=pollutant_so2_mass_fraction,
        pollutant_h2s_mass_fraction=pollutant_h2s_mass_fraction,
        pollutant_so3_mass_fraction=pollutant_so3_mass_fraction,
        pollutant_sh_mass_fraction=pollutant_sh_mass_fraction,
        pollutant_so_mass_fraction=pollutant_so_mass_fraction,
        soot_mass_fraction=soot_mass_fraction,
        nuclei=nuclei,
        tar_mass_fraction=tar_mass_fraction,
        pollutant_hg_mass_fraction=pollutant_hg_mass_fraction,
        pollutant_hgcl2_mass_fraction=pollutant_hgcl2_mass_fraction,
        pollutant_hcl_mass_fraction=pollutant_hcl_mass_fraction,
        pollutant_hgo_mass_fraction=pollutant_hgo_mass_fraction,
        pollutant_cl_mass_fraction=pollutant_cl_mass_fraction,
        pollutant_cl2_mass_fraction=pollutant_cl2_mass_fraction,
        pollutant_hgcl_mass_fraction=pollutant_hgcl_mass_fraction,
        pollutant_hocl_mass_fraction=pollutant_hocl_mass_fraction,
        tss_scalar=tss_scalar,
    )
    _child_aliases = dict(
        ecfm_sigma=('flame_area_density', 'ecfm-sigma'),
        equ_required=('equilibrate_inlet_stream', 'equ-required?'),
        fmean=('mean_mixture_fraction', 'fmean'),
        fmean2=('secondary_mean_mixture_fraction', 'fmean2'),
        fvar=('mixture_fraction_variance', 'fvar'),
        fvar2=('secondary_mixture_fraction_variance', 'fvar2'),
        inert=('inert_stream', 'inert'),
        mf=('species_mass_fraction', 'mf'),
        mole_fraction=('species_mole_fraction', 'mole-fraction'),
        pollut_cl=('pollutant_cl_mass_fraction', 'pollut_cl'),
        pollut_cl2=('pollutant_cl2_mass_fraction', 'pollut_cl2'),
        pollut_ctar=('tar_mass_fraction', 'pollut_ctar'),
        pollut_h2s=('pollutant_h2s_mass_fraction', 'pollut_h2s'),
        pollut_hcl=('pollutant_hcl_mass_fraction', 'pollut_hcl'),
        pollut_hcn=('pollutant_hcn_mass_fraction', 'pollut_hcn'),
        pollut_hg=('pollutant_hg_mass_fraction', 'pollut_hg'),
        pollut_hgcl=('pollutant_hgcl_mass_fraction', 'pollut_hgcl'),
        pollut_hgcl2=('pollutant_hgcl2_mass_fraction', 'pollut_hgcl2'),
        pollut_hgo=('pollutant_hgo_mass_fraction', 'pollut_hgo'),
        pollut_hnco=('pollutant_hnco_mass_fraction', 'pollut_hnco'),
        pollut_hocl=('pollutant_hocl_mass_fraction', 'pollut_hocl'),
        pollut_n2o=('pollutant_n2o_mass_fraction', 'pollut_n2o'),
        pollut_nco=('pollutant_nco_mass_fraction', 'pollut_nco'),
        pollut_nh3=('pollutant_nh3_mass_fraction', 'pollut_nh3'),
        pollut_no=('pollutant_no_mass_fraction', 'pollut_no'),
        pollut_nuclei=('nuclei', 'pollut_nuclei'),
        pollut_sh=('pollutant_sh_mass_fraction', 'pollut_sh'),
        pollut_so=('pollutant_so_mass_fraction', 'pollut_so'),
        pollut_so2=('pollutant_so2_mass_fraction', 'pollut_so2'),
        pollut_so3=('pollutant_so3_mass_fraction', 'pollut_so3'),
        pollut_soot=('soot_mass_fraction', 'pollut_soot'),
        pollut_urea=('pollutant_urea_mass_fraction', 'pollut_urea'),
        premixc=('progress_variable', 'premixc'),
        premixc_var=('progress_variable_variance', 'premixc-var'),
        prob_mode_1=('mixture_fraction', 'prob-mode-1'),
        prob_mode_2=('mode_2_probability', 'prob-mode-2'),
        prob_mode_3=('mode_3_probability', 'prob-mode-3'),
        species_in_mole_fractions=('specify_species_in_mole_fractions', 'species-in-mole-fractions?'),
    )

class open_channel_1(Boolean):
    """
    Open Channel.
    """
    _version = '251'
    fluent_name = 'open-channel?'
    _python_name = 'open_channel'

class inlet_number(Integer):
    """
    Inlet Group ID.
    """
    _version = '251'
    fluent_name = 'inlet-number'
    _python_name = 'inlet_number'

class phase_spec_1(String, AllowedValuesMixin):
    """
    Secondary Phase for Inlet.
    """
    _version = '251'
    fluent_name = 'phase-spec'
    _python_name = 'phase_spec'

class flow_spec(String, AllowedValuesMixin):
    """
    Flow Specification Method.
    """
    _version = '251'
    fluent_name = 'flow-spec'
    _python_name = 'flow_spec'

class ht_bottom(Group):
    """
    Bottom Level.
    """
    _version = '251'
    fluent_name = 'ht-bottom'
    _python_name = 'ht_bottom'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class ht_total(Group):
    """
    Total Height.
    """
    _version = '251'
    fluent_name = 'ht-total'
    _python_name = 'ht_total'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class vmag(Group):
    """
    Velocity Magnitude.
    """
    _version = '251'
    fluent_name = 'vmag'
    _python_name = 'vmag'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class den_spec(String, AllowedValuesMixin):
    """
    Density Interpolation Method.
    """
    _version = '251'
    fluent_name = 'den-spec'
    _python_name = 'den_spec'

class granular_temperature(Group):
    """
    Granular temperature.
    """
    _version = '251'
    fluent_name = 'granular-temperature'
    _python_name = 'granular_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class interfacial_area_concentration(Group):
    """
    Interfacial area concentration.
    """
    _version = '251'
    fluent_name = 'interfacial-area-concentration'
    _python_name = 'interfacial_area_concentration'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class level_set_function_flux(Group):
    """
    Level-set Function Flux.
    """
    _version = '251'
    fluent_name = 'level-set-function-flux'
    _python_name = 'level_set_function_flux'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class volume_fraction(Group):
    """
    Volume Fraction.
    """
    _version = '251'
    fluent_name = 'volume-fraction'
    _python_name = 'volume_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class relative_humidity(Group):
    """
    Relative humidity.
    """
    _version = '251'
    fluent_name = 'relative-humidity'
    _python_name = 'relative_humidity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class liquid_mass_fraction(Group):
    """
    Liquid Mass Fraction.
    """
    _version = '251'
    fluent_name = 'liquid-mass-fraction'
    _python_name = 'liquid_mass_fraction'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class log10_droplets_per_unit_volume(Group):
    """
    Log10(Droplets Per Unit Volume).
    """
    _version = '251'
    fluent_name = 'log10-droplets-per-unit-volume'
    _python_name = 'log10_droplets_per_unit_volume'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class multiphase_3(Group):
    """
    Allows to change multiphase model variables or settings.
    """
    _version = '251'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['open_channel', 'inlet_number', 'phase_spec', 'flow_spec', 'free_surface_level', 'ht_bottom', 'ht_total', 'vmag', 'den_spec', 'granular_temperature', 'interfacial_area_concentration', 'level_set_function_flux', 'volume_fraction', 'population_balance', 'relative_humidity', 'liquid_mass_fraction', 'log10_droplets_per_unit_volume']
    _child_classes = dict(
        open_channel=open_channel_1,
        inlet_number=inlet_number,
        phase_spec=phase_spec_1,
        flow_spec=flow_spec,
        free_surface_level=free_surface_level,
        ht_bottom=ht_bottom,
        ht_total=ht_total,
        vmag=vmag,
        den_spec=den_spec,
        granular_temperature=granular_temperature,
        interfacial_area_concentration=interfacial_area_concentration,
        level_set_function_flux=level_set_function_flux,
        volume_fraction=volume_fraction,
        population_balance=population_balance,
        relative_humidity=relative_humidity,
        liquid_mass_fraction=liquid_mass_fraction,
        log10_droplets_per_unit_volume=log10_droplets_per_unit_volume,
    )
    _child_aliases = dict(
        ht_local=('free_surface_level', 'ht-local'),
        iac=('interfacial_area_concentration', 'iac'),
        lsfun=('level_set_function_flux', 'lsfun'),
        wsb=('liquid_mass_fraction', 'wsb'),
        wsf=('relative_humidity', 'wsf'),
        wsn=('log10_droplets_per_unit_volume', 'wsn'),
    )

class fensapice_drop_bccustom(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-bccustom?'
    _python_name = 'fensapice_drop_bccustom'

class fensapice_drop_lwc(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-lwc'
    _python_name = 'fensapice_drop_lwc'

class fensapice_drop_dtemp(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-dtemp'
    _python_name = 'fensapice_drop_dtemp'

class fensapice_drop_ddiam(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-ddiam'
    _python_name = 'fensapice_drop_ddiam'

class fensapice_drop_dv(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-dv?'
    _python_name = 'fensapice_drop_dv'

class fensapice_drop_dx(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-dx'
    _python_name = 'fensapice_drop_dx'

class fensapice_drop_dy(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-dy'
    _python_name = 'fensapice_drop_dy'

class fensapice_drop_dz(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-dz'
    _python_name = 'fensapice_drop_dz'

class fensapice_dpm_surface_injection(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-dpm-surface-injection?'
    _python_name = 'fensapice_dpm_surface_injection'

class fensapice_dpm_inj_nstream(Integer):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-dpm-inj-nstream'
    _python_name = 'fensapice_dpm_inj_nstream'

class fensapice_drop_icc(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-icc'
    _python_name = 'fensapice_drop_icc'

class fensapice_drop_ctemp(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-ctemp'
    _python_name = 'fensapice_drop_ctemp'

class fensapice_drop_cmelt(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-cmelt'
    _python_name = 'fensapice_drop_cmelt'

class fensapice_drop_cdiam(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-cdiam'
    _python_name = 'fensapice_drop_cdiam'

class fensapice_drop_cv(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-cv?'
    _python_name = 'fensapice_drop_cv'

class fensapice_drop_cx(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-cx'
    _python_name = 'fensapice_drop_cx'

class fensapice_drop_cy(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-cy'
    _python_name = 'fensapice_drop_cy'

class fensapice_drop_cz(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-cz'
    _python_name = 'fensapice_drop_cz'

class fensapice_drop_vrh_1(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-vrh?'
    _python_name = 'fensapice_drop_vrh'

class fensapice_drop_vrh_1_1(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-vrh'
    _python_name = 'fensapice_drop_vrh'

class icing_1(Group):
    """
    Allows to change icing model variables or settings.
    """
    _version = '251'
    fluent_name = 'icing'
    _python_name = 'icing'
    child_names = ['fensapice_flow_bc_subtype', 'fensapice_drop_bccustom', 'fensapice_drop_lwc', 'fensapice_drop_dtemp', 'fensapice_drop_ddiam', 'fensapice_drop_dv', 'fensapice_drop_dx', 'fensapice_drop_dy', 'fensapice_drop_dz', 'fensapice_dpm_surface_injection', 'fensapice_dpm_inj_nstream', 'fensapice_dpm_rh_mode', 'fensapice_drop_icc', 'fensapice_drop_ctemp', 'fensapice_drop_cmelt', 'fensapice_drop_cdiam', 'fensapice_drop_cv', 'fensapice_drop_cx', 'fensapice_drop_cy', 'fensapice_drop_cz', 'fensapice_drop_vrh', 'fensapice_drop_vrh_1', 'fensapice_drop_vc']
    _child_classes = dict(
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_drop_bccustom=fensapice_drop_bccustom,
        fensapice_drop_lwc=fensapice_drop_lwc,
        fensapice_drop_dtemp=fensapice_drop_dtemp,
        fensapice_drop_ddiam=fensapice_drop_ddiam,
        fensapice_drop_dv=fensapice_drop_dv,
        fensapice_drop_dx=fensapice_drop_dx,
        fensapice_drop_dy=fensapice_drop_dy,
        fensapice_drop_dz=fensapice_drop_dz,
        fensapice_dpm_surface_injection=fensapice_dpm_surface_injection,
        fensapice_dpm_inj_nstream=fensapice_dpm_inj_nstream,
        fensapice_dpm_rh_mode=fensapice_dpm_rh_mode,
        fensapice_drop_icc=fensapice_drop_icc,
        fensapice_drop_ctemp=fensapice_drop_ctemp,
        fensapice_drop_cmelt=fensapice_drop_cmelt,
        fensapice_drop_cdiam=fensapice_drop_cdiam,
        fensapice_drop_cv=fensapice_drop_cv,
        fensapice_drop_cx=fensapice_drop_cx,
        fensapice_drop_cy=fensapice_drop_cy,
        fensapice_drop_cz=fensapice_drop_cz,
        fensapice_drop_vrh=fensapice_drop_vrh_1,
        fensapice_drop_vrh_1=fensapice_drop_vrh_1_1,
        fensapice_drop_vc=fensapice_drop_vc,
    )

class phase_5_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        momentum=momentum_1,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_5(NamedObject[phase_5_child], CreatableNamedObjectMixin[phase_5_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_5_child

class inlet_vent_child(Group):
    """
    'child_object_type' of inlet_vent.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'inlet_vent_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_5,
        momentum=momentum_1,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class inlet_vent(NamedObject[inlet_vent_child], CreatableNamedObjectMixin[inlet_vent_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'inlet-vent'
    _python_name = 'inlet_vent'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = inlet_vent_child

class swirl_velocity_specification_1(Boolean):
    """
    Swirl-Velocity Specification?.
    """
    _version = '251'
    fluent_name = 'swirl-velocity-specification'
    _python_name = 'swirl_velocity_specification'

class fan_rotation_speed(Real):
    """
    Fan Rotation Speed.
    """
    _version = '251'
    fluent_name = 'fan-rotation-speed'
    _python_name = 'fan_rotation_speed'

class momentum_2(Group):
    """
    Allows to change momentum model variables or settings.
    """
    _version = '251'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['reference_frame', 'gauge_total_pressure', 'supersonic_or_initial_gauge_pressure', 'direction_specification_method', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'prevent_reverse_flow', 'acoustic_wave_model', 'impedance_zero_order_term', 'real_pole_series', 'complex_pole_series', 'incoming_wave', 'pressure_jump', 'swirl_velocity_specification', 'swirl_factor', 'fan_rotation_speed', 'fan_origin', 'strength', 'new_fan_definition']
    _child_classes = dict(
        reference_frame=reference_frame_4,
        gauge_total_pressure=gauge_total_pressure,
        supersonic_or_initial_gauge_pressure=supersonic_or_initial_gauge_pressure,
        direction_specification_method=direction_specification_method,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        prevent_reverse_flow=prevent_reverse_flow_1,
        acoustic_wave_model=acoustic_wave_model,
        impedance_zero_order_term=impedance_zero_order_term,
        real_pole_series=real_pole_series,
        complex_pole_series=complex_pole_series,
        incoming_wave=incoming_wave,
        pressure_jump=pressure_jump,
        swirl_velocity_specification=swirl_velocity_specification_1,
        swirl_factor=swirl_factor,
        fan_rotation_speed=fan_rotation_speed,
        fan_origin=fan_origin,
        strength=strength,
        new_fan_definition=new_fan_definition,
    )
    _child_aliases = dict(
        a=('pressure_jump', 'a'),
        ac_options=('acoustic_wave_model', 'ac-options'),
        ac_wave=('incoming_wave', 'ac-wave'),
        axis_direction_component=('axis_direction', 'axis-direction-component'),
        axis_origin_component=('axis_origin', 'axis-origin-component'),
        direction_spec=('direction_specification_method', 'direction-spec'),
        direction_vector_components=('direction_vector', 'direction-vector-components'),
        fan_omega=('fan_rotation_speed', 'fan-omega'),
        fan_origin_components=('fan_origin', 'fan-origin-components'),
        flow_direction_component=('flow_direction', 'flow-direction-component'),
        frame_of_reference=('reference_frame', 'frame-of-reference'),
        impedance_0=('impedance_zero_order_term', 'impedance-0'),
        impedance_1=('real_pole_series', 'impedance-1'),
        impedance_2=('complex_pole_series', 'impedance-2'),
        new_fan_definition=('new_fan_definition', 'new-fan-definition?'),
        p0=('gauge_total_pressure', 'p0'),
        swirl_model=('swirl_velocity_specification', 'swirl-model?'),
    )

class phase_6_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        momentum=momentum_2,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_6(NamedObject[phase_6_child], CreatableNamedObjectMixin[phase_6_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_6_child

class intake_fan_child(Group):
    """
    'child_object_type' of intake_fan.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'intake_fan_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_6,
        momentum=momentum_2,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class intake_fan(NamedObject[intake_fan_child], CreatableNamedObjectMixin[intake_fan_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'intake-fan'
    _python_name = 'intake_fan'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = intake_fan_child

class non_overlap_zone_name(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'non-overlap-zone-name'
    _python_name = 'non_overlap_zone_name'

class interface_1(Group):
    """
    Allows to change interface model variables or settings.
    """
    _version = '251'
    fluent_name = 'interface'
    _python_name = 'interface'
    child_names = ['non_overlap_zone_name']
    _child_classes = dict(
        non_overlap_zone_name=non_overlap_zone_name,
    )

class phase_7_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['interface', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        interface=interface_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class phase_7(NamedObject[phase_7_child], CreatableNamedObjectMixin[phase_7_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_7_child

class interface_child(Group):
    """
    'child_object_type' of interface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'interface_child'
    child_names = ['name', 'phase', 'interface', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_7,
        interface=interface_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class interface(NamedObject[interface_child], CreatableNamedObjectMixin[interface_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'interface'
    _python_name = 'interface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = interface_child

class is_not_a_rans_les_interface(Boolean):
    """
    This should never appear in the GUI nor TUI.
    """
    _version = '251'
    fluent_name = 'is-not-a-rans-les-interface'
    _python_name = 'is_not_a_rans_les_interface'

class interior_1(Group):
    """
    Allows to change interior model variables or settings.
    """
    _version = '251'
    fluent_name = 'interior'
    _python_name = 'interior'
    child_names = ['is_not_a_rans_les_interface']
    _child_classes = dict(
        is_not_a_rans_les_interface=is_not_a_rans_les_interface,
    )

class phase_8_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['interior']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        interior=interior_1,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class phase_8(NamedObject[phase_8_child], CreatableNamedObjectMixin[phase_8_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_8_child

class interior_child(Group):
    """
    'child_object_type' of interior.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'interior_child'
    child_names = ['name', 'phase', 'interior']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_8,
        interior=interior_1,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class interior(NamedObject[interior_child], CreatableNamedObjectMixin[interior_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'interior'
    _python_name = 'interior'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = interior_child

class mass_flow_specification(String, AllowedValuesMixin):
    """
    Mass Flow Specification Method.
    """
    _version = '251'
    fluent_name = 'mass-flow-specification'
    _python_name = 'mass_flow_specification'

class mass_flow_rate_1(Group):
    """
    Mass Flow Rate.
    """
    _version = '251'
    fluent_name = 'mass-flow-rate'
    _python_name = 'mass_flow_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class exit_corrected_mass_flow_rate(Group):
    """
    Exit Corrected Mass Flow Rate.
    """
    _version = '251'
    fluent_name = 'exit-corrected-mass-flow-rate'
    _python_name = 'exit_corrected_mass_flow_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class mass_flux(Group):
    """
    Mass Flux.
    """
    _version = '251'
    fluent_name = 'mass-flux'
    _python_name = 'mass_flux'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class average_mass_flux(Real):
    """
    Average Mass Flux.
    """
    _version = '251'
    fluent_name = 'average-mass-flux'
    _python_name = 'average_mass_flux'

class supersonic_gauge_pressure(Group):
    """
    Gauge Pressure.
    """
    _version = '251'
    fluent_name = 'supersonic-gauge-pressure'
    _python_name = 'supersonic_gauge_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class direction_specification(String, AllowedValuesMixin):
    """
    Direction Specification Method.
    """
    _version = '251'
    fluent_name = 'direction-specification'
    _python_name = 'direction_specification'

class ecmf_reference_temperature(Real):
    """
    ECMF Reference Temperature.
    """
    _version = '251'
    fluent_name = 'ecmf-reference-temperature'
    _python_name = 'ecmf_reference_temperature'

class ecmf_reference_gauge_pressure(Real):
    """
    ECMF Reference Gauge Pressure.
    """
    _version = '251'
    fluent_name = 'ecmf-reference-gauge-pressure'
    _python_name = 'ecmf_reference_gauge_pressure'

class momentum_3(Group):
    """
    Allows to change momentum model variables or settings.
    """
    _version = '251'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['reference_frame', 'system_coupling', 'mass_flow_specification', 'mass_flow_rate', 'exit_corrected_mass_flow_rate', 'mass_flux', 'average_mass_flux', 'supersonic_gauge_pressure', 'direction_specification', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'swirl_velocity_specification', 'swirl_factor', 'fan_origin', 'ecmf_reference_temperature', 'ecmf_reference_gauge_pressure', 'acoustic_wave_model', 'impedance_zero_order_term', 'real_pole_series', 'complex_pole_series', 'incoming_wave']
    _child_classes = dict(
        reference_frame=reference_frame_4,
        system_coupling=system_coupling_1,
        mass_flow_specification=mass_flow_specification,
        mass_flow_rate=mass_flow_rate_1,
        exit_corrected_mass_flow_rate=exit_corrected_mass_flow_rate,
        mass_flux=mass_flux,
        average_mass_flux=average_mass_flux,
        supersonic_gauge_pressure=supersonic_gauge_pressure,
        direction_specification=direction_specification,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        swirl_velocity_specification=swirl_velocity_specification_1,
        swirl_factor=swirl_factor,
        fan_origin=fan_origin,
        ecmf_reference_temperature=ecmf_reference_temperature,
        ecmf_reference_gauge_pressure=ecmf_reference_gauge_pressure,
        acoustic_wave_model=acoustic_wave_model,
        impedance_zero_order_term=impedance_zero_order_term,
        real_pole_series=real_pole_series,
        complex_pole_series=complex_pole_series,
        incoming_wave=incoming_wave,
    )
    _child_aliases = dict(
        ac_options=('acoustic_wave_model', 'ac-options'),
        ac_wave=('incoming_wave', 'ac-wave'),
        axis_direction_component=('axis_direction', 'axis-direction-component'),
        axis_origin_component=('axis_origin', 'axis-origin-component'),
        direction_spec=('direction_specification', 'direction-spec'),
        direction_vector_components=('direction_vector', 'direction-vector-components'),
        ec_mass_flow=('exit_corrected_mass_flow_rate', 'ec-mass-flow'),
        fan_origin_components=('fan_origin', 'fan-origin-components'),
        flow_direction_component=('flow_direction', 'flow-direction-component'),
        flow_spec=('mass_flow_specification', 'flow-spec'),
        frame_of_reference=('reference_frame', 'frame-of-reference'),
        impedance_0=('impedance_zero_order_term', 'impedance-0'),
        impedance_1=('real_pole_series', 'impedance-1'),
        impedance_2=('complex_pole_series', 'impedance-2'),
        mass_flow=('mass_flow_rate', 'mass-flow'),
        mass_flux_ave=('average_mass_flux', 'mass-flux-ave'),
        p=('supersonic_gauge_pressure', 'p'),
        pref=('ecmf_reference_gauge_pressure', 'pref'),
        swirl_model=('swirl_velocity_specification', 'swirl-model?'),
        tref=('ecmf_reference_temperature', 'tref'),
    )

class turbulence_2(Group):
    """
    Allows to change turbulence model variables or settings.
    """
    _version = '251'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'
    child_names = ['turbulence_specification', 'modified_turbulent_viscosity', 'laminar_kinetic_energy', 'intermittency', 'turbulent_kinetic_energy', 'turbulent_dissipation_rate', 'specific_dissipation_rate', 'velocity_variance_scale', 'turbulent_intensity', 'turbulent_length_scale', 'hydraulic_diameter', 'turbulent_viscosity_ratio', 'turbulent_viscosity_ratio_profile', 'reynolds_stress_specification', 'uu_reynolds_stresses', 'vv_reynolds_stresses', 'ww_reynolds_stresses', 'uv_reynolds_stresses', 'vw_reynolds_stresses', 'uw_reynolds_stresses', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity']
    _child_classes = dict(
        turbulence_specification=turbulence_specification,
        modified_turbulent_viscosity=modified_turbulent_viscosity,
        laminar_kinetic_energy=laminar_kinetic_energy,
        intermittency=intermittency,
        turbulent_kinetic_energy=turbulent_kinetic_energy,
        turbulent_dissipation_rate=turbulent_dissipation_rate,
        specific_dissipation_rate=specific_dissipation_rate,
        velocity_variance_scale=velocity_variance_scale,
        turbulent_intensity=turbulent_intensity,
        turbulent_length_scale=turbulent_length_scale,
        hydraulic_diameter=hydraulic_diameter,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio,
        turbulent_viscosity_ratio_profile=turbulent_viscosity_ratio_profile,
        reynolds_stress_specification=reynolds_stress_specification,
        uu_reynolds_stresses=uu_reynolds_stresses,
        vv_reynolds_stresses=vv_reynolds_stresses,
        ww_reynolds_stresses=ww_reynolds_stresses,
        uv_reynolds_stresses=uv_reynolds_stresses,
        vw_reynolds_stresses=vw_reynolds_stresses,
        uw_reynolds_stresses=uw_reynolds_stresses,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
    )
    _child_aliases = dict(
        e=('turbulent_dissipation_rate', 'e'),
        intermit=('intermittency', 'intermit'),
        k=('turbulent_kinetic_energy', 'k'),
        kl=('laminar_kinetic_energy', 'kl'),
        ksgs=('subgrid_kinetic_energy', 'ksgs'),
        ksgs_spec=('subgrid_kinetic_energy_specification', 'ksgs-spec'),
        nut=('modified_turbulent_viscosity', 'nut'),
        o=('specific_dissipation_rate', 'o'),
        rst_spec=('reynolds_stress_specification', 'rst-spec'),
        sgs_turb_intensity=('subgrid_turbulent_intensity', 'sgs-turb-intensity'),
        turb_hydraulic_diam=('hydraulic_diameter', 'turb-hydraulic-diam'),
        turb_intensity=('turbulent_intensity', 'turb-intensity'),
        turb_length_scale=('turbulent_length_scale', 'turb-length-scale'),
        turb_viscosity_ratio=('turbulent_viscosity_ratio', 'turb-viscosity-ratio'),
        turb_viscosity_ratio_profile=('turbulent_viscosity_ratio_profile', 'turb-viscosity-ratio-profile'),
        turbulent_specification=('turbulence_specification', 'turbulent-specification'),
        uu=('uu_reynolds_stresses', 'uu'),
        uv=('uv_reynolds_stresses', 'uv'),
        uw=('uw_reynolds_stresses', 'uw'),
        v2=('velocity_variance_scale', 'v2'),
        vv=('vv_reynolds_stresses', 'vv'),
        vw=('vw_reynolds_stresses', 'vw'),
        ww=('ww_reynolds_stresses', 'ww'),
    )

class total_temperature_1(Group):
    """
    Temperature.
    """
    _version = '251'
    fluent_name = 'total-temperature'
    _python_name = 'total_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class thermal_2(Group):
    """
    Allows to change thermal model variables or settings.
    """
    _version = '251'
    fluent_name = 'thermal'
    _python_name = 'thermal'
    child_names = ['total_temperature']
    _child_classes = dict(
        total_temperature=total_temperature_1,
    )
    _child_aliases = dict(
        t0=('total_temperature', 't0'),
    )

class radiation_3(Group):
    """
    Allows to change radiation model variables or settings.
    """
    _version = '251'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['radiation_bc', 'radial_direction', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'participates_in_view_factor_calculation']
    _child_classes = dict(
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        participates_in_view_factor_calculation=participates_in_view_factor_calculation,
    )
    _child_aliases = dict(
        band_q_irrad=('direct_irradiation', 'band-q-irrad'),
        band_q_irrad_diffuse=('diffuse_irradiation', 'band-q-irrad-diffuse'),
        coll_dphi=('phi_width_of_beam', 'coll-dphi'),
        coll_dtheta=('theta_width_of_beam', 'coll-dtheta'),
        in_emiss=('internal_emissivity', 'in-emiss'),
        radial_direction_component=('radial_direction', 'radial-direction-component'),
        radiating_s2s_surface=('participates_in_view_factor_calculation', 'radiating-s2s-surface?'),
        solar_direction=('use_beeam_direction_from_solar_load_model_settings', 'solar-direction?'),
        solar_fluxes=('participates_in_solar_ray_tracing', 'solar-fluxes?'),
        solar_irradiation=('use_irradiation_from_solar_soad_model_settings', 'solar-irradiation?'),
        solar_shining_factor=('solar_transmissivity_factor', 'solar-shining-factor'),
        t_b_b=('black_body_temperature', 't-b-b'),
        t_b_b_spec=('external_black_body_temperature_method', 't-b-b-spec'),
    )

class species_7(Group):
    """
    Allows to change species model variables or settings.
    """
    _version = '251'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['specify_species_in_mole_fractions', 'species_mass_fraction', 'species_mole_fraction', 'mixture_fraction', 'mode_2_probability', 'mode_3_probability', 'equilibrate_inlet_stream', 'progress_variable', 'progress_variable_variance', 'flame_area_density', 'inert_stream', 'pollutant_no_mass_fraction', 'pollutant_hcn_mass_fraction', 'pollutant_nh3_mass_fraction', 'pollutant_n2o_mass_fraction', 'pollutant_urea_mass_fraction', 'pollutant_hnco_mass_fraction', 'pollutant_nco_mass_fraction', 'pollutant_so2_mass_fraction', 'pollutant_h2s_mass_fraction', 'pollutant_so3_mass_fraction', 'pollutant_sh_mass_fraction', 'pollutant_so_mass_fraction', 'soot_mass_fraction', 'nuclei', 'tar_mass_fraction', 'pollutant_hg_mass_fraction', 'pollutant_hgcl2_mass_fraction', 'pollutant_hcl_mass_fraction', 'pollutant_hgo_mass_fraction', 'pollutant_cl_mass_fraction', 'pollutant_cl2_mass_fraction', 'pollutant_hgcl_mass_fraction', 'pollutant_hocl_mass_fraction', 'mean_mixture_fraction', 'mixture_fraction_variance', 'secondary_mean_mixture_fraction', 'secondary_mixture_fraction_variance', 'tss_scalar']
    _child_classes = dict(
        specify_species_in_mole_fractions=specify_species_in_mole_fractions,
        species_mass_fraction=species_mass_fraction,
        species_mole_fraction=species_mole_fraction,
        mixture_fraction=mixture_fraction,
        mode_2_probability=mode_2_probability,
        mode_3_probability=mode_3_probability,
        equilibrate_inlet_stream=equilibrate_inlet_stream,
        progress_variable=progress_variable,
        progress_variable_variance=progress_variable_variance,
        flame_area_density=flame_area_density,
        inert_stream=inert_stream,
        pollutant_no_mass_fraction=pollutant_no_mass_fraction,
        pollutant_hcn_mass_fraction=pollutant_hcn_mass_fraction,
        pollutant_nh3_mass_fraction=pollutant_nh3_mass_fraction,
        pollutant_n2o_mass_fraction=pollutant_n2o_mass_fraction,
        pollutant_urea_mass_fraction=pollutant_urea_mass_fraction,
        pollutant_hnco_mass_fraction=pollutant_hnco_mass_fraction,
        pollutant_nco_mass_fraction=pollutant_nco_mass_fraction,
        pollutant_so2_mass_fraction=pollutant_so2_mass_fraction,
        pollutant_h2s_mass_fraction=pollutant_h2s_mass_fraction,
        pollutant_so3_mass_fraction=pollutant_so3_mass_fraction,
        pollutant_sh_mass_fraction=pollutant_sh_mass_fraction,
        pollutant_so_mass_fraction=pollutant_so_mass_fraction,
        soot_mass_fraction=soot_mass_fraction,
        nuclei=nuclei,
        tar_mass_fraction=tar_mass_fraction,
        pollutant_hg_mass_fraction=pollutant_hg_mass_fraction,
        pollutant_hgcl2_mass_fraction=pollutant_hgcl2_mass_fraction,
        pollutant_hcl_mass_fraction=pollutant_hcl_mass_fraction,
        pollutant_hgo_mass_fraction=pollutant_hgo_mass_fraction,
        pollutant_cl_mass_fraction=pollutant_cl_mass_fraction,
        pollutant_cl2_mass_fraction=pollutant_cl2_mass_fraction,
        pollutant_hgcl_mass_fraction=pollutant_hgcl_mass_fraction,
        pollutant_hocl_mass_fraction=pollutant_hocl_mass_fraction,
        mean_mixture_fraction=mean_mixture_fraction,
        mixture_fraction_variance=mixture_fraction_variance,
        secondary_mean_mixture_fraction=secondary_mean_mixture_fraction,
        secondary_mixture_fraction_variance=secondary_mixture_fraction_variance,
        tss_scalar=tss_scalar,
    )
    _child_aliases = dict(
        ecfm_sigma=('flame_area_density', 'ecfm-sigma'),
        equ_required=('equilibrate_inlet_stream', 'equ-required?'),
        fmean=('mean_mixture_fraction', 'fmean'),
        fmean2=('secondary_mean_mixture_fraction', 'fmean2'),
        fvar=('mixture_fraction_variance', 'fvar'),
        fvar2=('secondary_mixture_fraction_variance', 'fvar2'),
        inert=('inert_stream', 'inert'),
        mf=('species_mass_fraction', 'mf'),
        mole_fraction=('species_mole_fraction', 'mole-fraction'),
        pollut_cl=('pollutant_cl_mass_fraction', 'pollut_cl'),
        pollut_cl2=('pollutant_cl2_mass_fraction', 'pollut_cl2'),
        pollut_ctar=('tar_mass_fraction', 'pollut_ctar'),
        pollut_h2s=('pollutant_h2s_mass_fraction', 'pollut_h2s'),
        pollut_hcl=('pollutant_hcl_mass_fraction', 'pollut_hcl'),
        pollut_hcn=('pollutant_hcn_mass_fraction', 'pollut_hcn'),
        pollut_hg=('pollutant_hg_mass_fraction', 'pollut_hg'),
        pollut_hgcl=('pollutant_hgcl_mass_fraction', 'pollut_hgcl'),
        pollut_hgcl2=('pollutant_hgcl2_mass_fraction', 'pollut_hgcl2'),
        pollut_hgo=('pollutant_hgo_mass_fraction', 'pollut_hgo'),
        pollut_hnco=('pollutant_hnco_mass_fraction', 'pollut_hnco'),
        pollut_hocl=('pollutant_hocl_mass_fraction', 'pollut_hocl'),
        pollut_n2o=('pollutant_n2o_mass_fraction', 'pollut_n2o'),
        pollut_nco=('pollutant_nco_mass_fraction', 'pollut_nco'),
        pollut_nh3=('pollutant_nh3_mass_fraction', 'pollut_nh3'),
        pollut_no=('pollutant_no_mass_fraction', 'pollut_no'),
        pollut_nuclei=('nuclei', 'pollut_nuclei'),
        pollut_sh=('pollutant_sh_mass_fraction', 'pollut_sh'),
        pollut_so=('pollutant_so_mass_fraction', 'pollut_so'),
        pollut_so2=('pollutant_so2_mass_fraction', 'pollut_so2'),
        pollut_so3=('pollutant_so3_mass_fraction', 'pollut_so3'),
        pollut_soot=('soot_mass_fraction', 'pollut_soot'),
        pollut_urea=('pollutant_urea_mass_fraction', 'pollut_urea'),
        premixc=('progress_variable', 'premixc'),
        premixc_var=('progress_variable_variance', 'premixc-var'),
        prob_mode_1=('mixture_fraction', 'prob-mode-1'),
        prob_mode_2=('mode_2_probability', 'prob-mode-2'),
        prob_mode_3=('mode_3_probability', 'prob-mode-3'),
        species_in_mole_fractions=('specify_species_in_mole_fractions', 'species-in-mole-fractions?'),
    )

class upstream_torque_integral(Real):
    """
    Upstream Torque Integral.
    """
    _version = '251'
    fluent_name = 'upstream-torque-integral'
    _python_name = 'upstream_torque_integral'

class upstream_total_enthalpy_integral(Real):
    """
    Upstream Total Enthalpy Integral.
    """
    _version = '251'
    fluent_name = 'upstream-total-enthalpy-integral'
    _python_name = 'upstream_total_enthalpy_integral'

class discrete_phase_3(Group):
    """
    Allows to change DPM model variables or settings.
    """
    _version = '251'
    fluent_name = 'discrete-phase'
    _python_name = 'discrete_phase'
    child_names = ['upstream_torque_integral', 'upstream_total_enthalpy_integral', 'bc_type', 'reinject_using_injection', 'bc_user_function', 'dem_collision_partner', 'mixing_plane_thread']
    _child_classes = dict(
        upstream_torque_integral=upstream_torque_integral,
        upstream_total_enthalpy_integral=upstream_total_enthalpy_integral,
        bc_type=bc_type_1,
        reinject_using_injection=reinject_using_injection,
        bc_user_function=bc_user_function,
        dem_collision_partner=dem_collision_partner,
        mixing_plane_thread=mixing_plane_thread,
    )
    _child_aliases = dict(
        discrete_phase_bc_function=('bc_user_function', 'discrete-phase-bc-function'),
        discrete_phase_bc_type=('bc_type', 'discrete-phase-bc-type'),
        dpm_bc_collision_partner=('dem_collision_partner', 'dpm/bc-collision-partner'),
        dpm_bc_type=('bc_type', 'dpm/bc-type'),
        dpm_bc_udf=('bc_user_function', 'dpm/bc-udf'),
        reinj_inj=('reinject_using_injection', 'reinj-inj'),
        upstream_t_enthalpy=('upstream_total_enthalpy_integral', 'upstream-t-enthalpy'),
        upstream_torque=('upstream_torque_integral', 'upstream-torque'),
    )

class open_channel_2(Boolean):
    """
    Open Channel.
    """
    _version = '251'
    fluent_name = 'open-channel'
    _python_name = 'open_channel'

class secondary_phase_for_inlet(String, AllowedValuesMixin):
    """
    Secondary Phase for Inlet.
    """
    _version = '251'
    fluent_name = 'secondary-phase-for-inlet'
    _python_name = 'secondary_phase_for_inlet'

class slip_velocity_specification(String, AllowedValuesMixin):
    """
    Slip Velocity Specification Method.
    """
    _version = '251'
    fluent_name = 'slip-velocity-specification'
    _python_name = 'slip_velocity_specification'

class phase_velocity_ratio(Group):
    """
    Phase Velocity Ratio .
    """
    _version = '251'
    fluent_name = 'phase-velocity-ratio'
    _python_name = 'phase_velocity_ratio'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class multiphase_4(Group):
    """
    Allows to change multiphase model variables or settings.
    """
    _version = '251'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['open_channel', 'inlet_number', 'secondary_phase_for_inlet', 'free_surface_level', 'bottom_level', 'density_interpolation_method', 'population_balance', 'slip_velocity_specification', 'phase_velocity_ratio', 'volume_fraction', 'granular_temperature', 'interfacial_area_concentration', 'relative_humidity', 'liquid_mass_fraction', 'log10_droplets_per_unit_volume']
    _child_classes = dict(
        open_channel=open_channel_2,
        inlet_number=inlet_number,
        secondary_phase_for_inlet=secondary_phase_for_inlet,
        free_surface_level=free_surface_level,
        bottom_level=bottom_level,
        density_interpolation_method=density_interpolation_method,
        population_balance=population_balance,
        slip_velocity_specification=slip_velocity_specification,
        phase_velocity_ratio=phase_velocity_ratio,
        volume_fraction=volume_fraction,
        granular_temperature=granular_temperature,
        interfacial_area_concentration=interfacial_area_concentration,
        relative_humidity=relative_humidity,
        liquid_mass_fraction=liquid_mass_fraction,
        log10_droplets_per_unit_volume=log10_droplets_per_unit_volume,
    )
    _child_aliases = dict(
        den_spec=('density_interpolation_method', 'den-spec'),
        ht_bottom=('bottom_level', 'ht-bottom'),
        ht_local=('free_surface_level', 'ht-local'),
        iac=('interfacial_area_concentration', 'iac'),
        open_channel=('open_channel', 'open-channel?'),
        phase_spec=('secondary_phase_for_inlet', 'phase-spec'),
        slip_velocity=('slip_velocity_specification', 'slip-velocity'),
        velocity_ratio=('phase_velocity_ratio', 'velocity-ratio'),
        volume_frac=('volume_fraction', 'volume-frac'),
        wsb=('liquid_mass_fraction', 'wsb'),
        wsf=('relative_humidity', 'wsf'),
        wsn=('log10_droplets_per_unit_volume', 'wsn'),
    )

class phase_9_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        momentum=momentum_3,
        turbulence=turbulence_2,
        thermal=thermal_2,
        radiation=radiation_3,
        species=species_7,
        discrete_phase=discrete_phase_3,
        multiphase=multiphase_4,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_9(NamedObject[phase_9_child], CreatableNamedObjectMixin[phase_9_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_9_child

class mass_flow_inlet_child(Group):
    """
    'child_object_type' of mass_flow_inlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'mass_flow_inlet_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_9,
        momentum=momentum_3,
        turbulence=turbulence_2,
        thermal=thermal_2,
        radiation=radiation_3,
        species=species_7,
        discrete_phase=discrete_phase_3,
        multiphase=multiphase_4,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class mass_flow_inlet(NamedObject[mass_flow_inlet_child], CreatableNamedObjectMixin[mass_flow_inlet_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'mass-flow-inlet'
    _python_name = 'mass_flow_inlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = mass_flow_inlet_child

class momentum_4(Group):
    """
    Allows to change momentum model variables or settings.
    """
    _version = '251'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['reference_frame', 'mass_flow_specification', 'mass_flow_rate', 'exit_corrected_mass_flow_rate', 'mass_flux', 'average_mass_flux', 'ecmf_reference_temperature', 'ecmf_reference_gauge_pressure']
    _child_classes = dict(
        reference_frame=reference_frame_4,
        mass_flow_specification=mass_flow_specification,
        mass_flow_rate=mass_flow_rate_1,
        exit_corrected_mass_flow_rate=exit_corrected_mass_flow_rate,
        mass_flux=mass_flux,
        average_mass_flux=average_mass_flux,
        ecmf_reference_temperature=ecmf_reference_temperature,
        ecmf_reference_gauge_pressure=ecmf_reference_gauge_pressure,
    )
    _child_aliases = dict(
        ec_mass_flow=('exit_corrected_mass_flow_rate', 'ec-mass-flow'),
        flow_spec=('mass_flow_specification', 'flow-spec'),
        frame_of_reference=('reference_frame', 'frame-of-reference'),
        mass_flow=('mass_flow_rate', 'mass-flow'),
        mass_flux_ave=('average_mass_flux', 'mass-flux-ave'),
        pref=('ecmf_reference_gauge_pressure', 'pref'),
        tref=('ecmf_reference_temperature', 'tref'),
    )

class turbulence_3(Group):
    """
    Allows to change turbulence model variables or settings.
    """
    _version = '251'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'

class thermal_3(Group):
    """
    Allows to change thermal model variables or settings.
    """
    _version = '251'
    fluent_name = 'thermal'
    _python_name = 'thermal'

class species_8(Group):
    """
    Allows to change species model variables or settings.
    """
    _version = '251'
    fluent_name = 'species'
    _python_name = 'species'

class multiphase_5(Group):
    """
    Allows to change multiphase model variables or settings.
    """
    _version = '251'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['slip_velocity_specification', 'phase_velocity_ratio', 'volume_fraction', 'granular_temperature', 'interfacial_area_concentration']
    _child_classes = dict(
        slip_velocity_specification=slip_velocity_specification,
        phase_velocity_ratio=phase_velocity_ratio,
        volume_fraction=volume_fraction,
        granular_temperature=granular_temperature,
        interfacial_area_concentration=interfacial_area_concentration,
    )
    _child_aliases = dict(
        iac=('interfacial_area_concentration', 'iac'),
        slip_velocity=('slip_velocity_specification', 'slip-velocity'),
        velocity_ratio=('phase_velocity_ratio', 'velocity-ratio'),
        volume_frac=('volume_fraction', 'volume-frac'),
    )

class potential_2(Group):
    """
    Allows to change potential model variables or settings.
    """
    _version = '251'
    fluent_name = 'potential'
    _python_name = 'potential'

class phase_10_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        momentum=momentum_4,
        turbulence=turbulence_3,
        thermal=thermal_3,
        radiation=radiation_1,
        species=species_8,
        discrete_phase=discrete_phase_3,
        multiphase=multiphase_5,
        potential=potential_2,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_10(NamedObject[phase_10_child], CreatableNamedObjectMixin[phase_10_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_10_child

class mass_flow_outlet_child(Group):
    """
    'child_object_type' of mass_flow_outlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'mass_flow_outlet_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_10,
        momentum=momentum_4,
        turbulence=turbulence_3,
        thermal=thermal_3,
        radiation=radiation_1,
        species=species_8,
        discrete_phase=discrete_phase_3,
        multiphase=multiphase_5,
        potential=potential_2,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class mass_flow_outlet(NamedObject[mass_flow_outlet_child], CreatableNamedObjectMixin[mass_flow_outlet_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'mass-flow-outlet'
    _python_name = 'mass_flow_outlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = mass_flow_outlet_child

class phase_11_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class phase_11(NamedObject[phase_11_child], CreatableNamedObjectMixin[phase_11_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_11_child

class network_child(Group):
    """
    'child_object_type' of network.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'network_child'
    child_names = ['name', 'phase']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_11,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class network(NamedObject[network_child], CreatableNamedObjectMixin[network_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'network'
    _python_name = 'network'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = network_child

class thermal_bc(String, AllowedValuesMixin):
    """
    Thermal BC Type.
    """
    _version = '251'
    fluent_name = 'thermal-bc'
    _python_name = 'thermal_bc'

class temperature_1(Group):
    """
    Temperature.
    """
    _version = '251'
    fluent_name = 'temperature'
    _python_name = 'temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class q(Group):
    """
    Heat Flux.
    """
    _version = '251'
    fluent_name = 'q'
    _python_name = 'q'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class network_end_1(Group):
    """
    Allows to change network-end model variables or settings.
    """
    _version = '251'
    fluent_name = 'network-end'
    _python_name = 'network_end'
    child_names = ['thermal_bc', 'temperature', 'q']
    _child_classes = dict(
        thermal_bc=thermal_bc,
        temperature=temperature_1,
        q=q,
    )

class phase_12_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['network_end']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        network_end=network_end_1,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class phase_12(NamedObject[phase_12_child], CreatableNamedObjectMixin[phase_12_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_12_child

class network_end_child(Group):
    """
    'child_object_type' of network_end.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'network_end_child'
    child_names = ['name', 'phase', 'network_end']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_12,
        network_end=network_end_1,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class network_end(NamedObject[network_end_child], CreatableNamedObjectMixin[network_end_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'network-end'
    _python_name = 'network_end'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = network_end_child

class flowrate_frac(Real):
    """
    Flow rate weighting.
    """
    _version = '251'
    fluent_name = 'flowrate-frac'
    _python_name = 'flowrate_frac'

class momentum_5(Group):
    """
    Allows to change momentum model variables or settings.
    """
    _version = '251'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['flowrate_frac']
    _child_classes = dict(
        flowrate_frac=flowrate_frac,
    )

class uds_2(Group):
    """
    Allows to change uds model variables or settings.
    """
    _version = '251'
    fluent_name = 'uds'
    _python_name = 'uds'
    child_names = ['uds_bc', 'uds']
    _child_classes = dict(
        uds_bc=uds_bc,
        uds=uds_1,
    )

class radiation_4(Group):
    """
    Radiation settings for this boundary-condition.
    """
    _version = '251'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['radiation_bc', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        radiation_bc=radiation_bc,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    _child_aliases = dict(
        band_q_irrad=('direct_irradiation', 'band-q-irrad'),
        band_q_irrad_diffuse=('diffuse_irradiation', 'band-q-irrad-diffuse'),
        coll_dphi=('phi_width_of_beam', 'coll-dphi'),
        coll_dtheta=('theta_width_of_beam', 'coll-dtheta'),
        in_emiss=('internal_emissivity', 'in-emiss'),
        solar_direction=('use_beeam_direction_from_solar_load_model_settings', 'solar-direction?'),
        solar_fluxes=('participates_in_solar_ray_tracing', 'solar-fluxes?'),
        solar_irradiation=('use_irradiation_from_solar_soad_model_settings', 'solar-irradiation?'),
        solar_shining_factor=('solar_transmissivity_factor', 'solar-shining-factor'),
        t_b_b=('black_body_temperature', 't-b-b'),
        t_b_b_spec=('external_black_body_temperature_method', 't-b-b-spec'),
    )

class discrete_phase_4(Group):
    """
    Allows to change DPM model variables or settings.
    """
    _version = '251'
    fluent_name = 'discrete-phase'
    _python_name = 'discrete_phase'
    child_names = ['bc_type', 'reinject_using_injection', 'bc_user_function', 'dem_collision_partner']
    _child_classes = dict(
        bc_type=bc_type_1,
        reinject_using_injection=reinject_using_injection,
        bc_user_function=bc_user_function,
        dem_collision_partner=dem_collision_partner,
    )
    _child_aliases = dict(
        discrete_phase_bc_function=('bc_user_function', 'discrete-phase-bc-function'),
        discrete_phase_bc_type=('bc_type', 'discrete-phase-bc-type'),
        dpm_bc_collision_partner=('dem_collision_partner', 'dpm/bc-collision-partner'),
        dpm_bc_type=('bc_type', 'dpm/bc-type'),
        dpm_bc_udf=('bc_user_function', 'dpm/bc-udf'),
        reinj_inj=('reinject_using_injection', 'reinj-inj'),
    )

class phase_13_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'potential', 'structure', 'uds', 'radiation', 'discrete_phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        momentum=momentum_5,
        potential=potential_1,
        structure=structure_1,
        uds=uds_2,
        radiation=radiation_4,
        discrete_phase=discrete_phase_4,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_13(NamedObject[phase_13_child], CreatableNamedObjectMixin[phase_13_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_13_child

class outflow_child(Group):
    """
    'child_object_type' of outflow.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'outflow_child'
    child_names = ['name', 'phase', 'momentum', 'potential', 'structure', 'uds', 'radiation', 'discrete_phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_13,
        momentum=momentum_5,
        potential=potential_1,
        structure=structure_1,
        uds=uds_2,
        radiation=radiation_4,
        discrete_phase=discrete_phase_4,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class outflow(NamedObject[outflow_child], CreatableNamedObjectMixin[outflow_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'outflow'
    _python_name = 'outflow'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = outflow_child

class momentum_6(Group):
    """
    Allows to change momentum model variables or settings.
    """
    _version = '251'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['system_coupling', 'backflow_reference_frame', 'pressure_spec', 'pressure_spec_method', 'gauge_pressure', 'pressure_profile_multiplier', 'backflow_dir_spec_method', 'coordinate_system', 'flow_direction', 'backflow_pressure_spec', 'backflow_pressure_specification', 'axis_direction', 'axis_origin', 'prevent_reverse_flow', 'radial_equ_pressure_distribution', 'radial_equ_reference_position', 'radial_equ_specified_radius', 'radial_equ_specified_span', 'avg_pressure_spec', 'avg_method', 'target_mass_flow_rate', 'target_mass_flow', 'upper_limit_of_abs_pressure', 'lower_limit_of_abs_pressure', 'acoustic_wave_model', 'exit_pressure_spec', 'impedance_zero_order_term', 'real_pole_series', 'complex_pole_series', 'incoming_wave', 'loss_coefficient', 'strength']
    _child_classes = dict(
        system_coupling=system_coupling_1,
        backflow_reference_frame=backflow_reference_frame,
        pressure_spec=pressure_spec,
        pressure_spec_method=pressure_spec_method,
        gauge_pressure=gauge_pressure,
        pressure_profile_multiplier=pressure_profile_multiplier,
        backflow_dir_spec_method=backflow_dir_spec_method,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        backflow_pressure_spec=backflow_pressure_spec,
        backflow_pressure_specification=backflow_pressure_specification,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        prevent_reverse_flow=prevent_reverse_flow,
        radial_equ_pressure_distribution=radial_equ_pressure_distribution,
        radial_equ_reference_position=radial_equ_reference_position,
        radial_equ_specified_radius=radial_equ_specified_radius,
        radial_equ_specified_span=radial_equ_specified_span,
        avg_pressure_spec=avg_pressure_spec,
        avg_method=avg_method,
        target_mass_flow_rate=target_mass_flow_rate,
        target_mass_flow=target_mass_flow,
        upper_limit_of_abs_pressure=upper_limit_of_abs_pressure,
        lower_limit_of_abs_pressure=lower_limit_of_abs_pressure,
        acoustic_wave_model=acoustic_wave_model,
        exit_pressure_spec=exit_pressure_spec,
        impedance_zero_order_term=impedance_zero_order_term,
        real_pole_series=real_pole_series,
        complex_pole_series=complex_pole_series,
        incoming_wave=incoming_wave,
        loss_coefficient=loss_coefficient,
        strength=strength,
    )
    _child_aliases = dict(
        ac_options=('acoustic_wave_model', 'ac-options'),
        ac_wave=('incoming_wave', 'ac-wave'),
        avg_option=('avg_method', 'avg-option'),
        avg_press_spec=('avg_pressure_spec', 'avg-press-spec?'),
        axis_direction_component=('axis_direction', 'axis-direction-component'),
        axis_origin_component=('axis_origin', 'axis-origin-component'),
        b=('loss_coefficient', 'b'),
        direction_spec=('backflow_dir_spec_method', 'direction-spec'),
        flow_direction_component=('flow_direction', 'flow-direction-component'),
        frame_of_reference=('backflow_reference_frame', 'frame-of-reference'),
        gen_nrbc_spec=('exit_pressure_spec', 'gen-nrbc-spec'),
        impedance_0=('impedance_zero_order_term', 'impedance-0'),
        impedance_1=('real_pole_series', 'impedance-1'),
        impedance_2=('complex_pole_series', 'impedance-2'),
        p=('gauge_pressure', 'p'),
        p_backflow_spec=('backflow_pressure_specification', 'p-backflow-spec'),
        p_backflow_spec_gen=('backflow_pressure_spec', 'p-backflow-spec-gen'),
        p_profile_multiplier=('pressure_profile_multiplier', 'p-profile-multiplier'),
        press_spec=('pressure_spec_method', 'press-spec'),
        press_spec_gen=('pressure_spec', 'press-spec-gen'),
        radial_ref_position=('radial_equ_reference_position', 'radial-ref-position'),
        radial_specified_radius=('radial_equ_specified_radius', 'radial-specified-radius'),
        radial_specified_span=('radial_equ_specified_span', 'radial-specified-span'),
        radial=('radial_equ_pressure_distribution', 'radial?'),
        targeted_mf=('target_mass_flow', 'targeted-mf'),
        targeted_mf_boundary=('target_mass_flow_rate', 'targeted-mf-boundary?'),
        targeted_mf_pmax=('upper_limit_of_abs_pressure', 'targeted-mf-pmax'),
        targeted_mf_pmin=('lower_limit_of_abs_pressure', 'targeted-mf-pmin'),
    )

class phase_14_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        momentum=momentum_6,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_14(NamedObject[phase_14_child], CreatableNamedObjectMixin[phase_14_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_14_child

class outlet_vent_child(Group):
    """
    'child_object_type' of outlet_vent.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'outlet_vent_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_14,
        momentum=momentum_6,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class outlet_vent(NamedObject[outlet_vent_child], CreatableNamedObjectMixin[outlet_vent_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'outlet-vent'
    _python_name = 'outlet_vent'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = outlet_vent_child

class overset_child(Group):
    """
    'child_object_type' of overset.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'overset_child'
    child_names = ['name', 'phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_2,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class overset(NamedObject[overset_child], CreatableNamedObjectMixin[overset_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'overset'
    _python_name = 'overset'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = overset_child

class rotationally_periodic(String, AllowedValuesMixin):
    """
    Rotationally Periodic?.
    """
    _version = '251'
    fluent_name = 'rotationally-periodic?'
    _python_name = 'rotationally_periodic'

class p_jump(Real):
    """
    Periodic Pressure Jump.
    """
    _version = '251'
    fluent_name = 'p-jump'
    _python_name = 'p_jump'

class axis_direction_3_child(Real):
    """
    'child_object_type' of axis_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'axis_direction_child'

class axis_direction_3(ListObject[axis_direction_3_child]):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'axis-direction'
    _python_name = 'axis_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = axis_direction_3_child

class axis_origin_3_child(Real):
    """
    'child_object_type' of axis_origin.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'axis_origin_child'

class axis_origin_3(ListObject[axis_origin_3_child]):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'axis-origin'
    _python_name = 'axis_origin'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = axis_origin_3_child

class shift_component_child(Real):
    """
    'child_object_type' of shift_component.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'shift_component_child'

class shift_component(ListObject[shift_component_child]):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'shift-component'
    _python_name = 'shift_component'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = shift_component_child

class per_angle(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'per-angle'
    _python_name = 'per_angle'

class periodic_1(Group):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'periodic'
    _python_name = 'periodic'
    child_names = ['rotationally_periodic', 'p_jump', 'axis_direction', 'axis_origin', 'shift_component', 'per_angle']
    _child_classes = dict(
        rotationally_periodic=rotationally_periodic,
        p_jump=p_jump,
        axis_direction=axis_direction_3,
        axis_origin=axis_origin_3,
        shift_component=shift_component,
        per_angle=per_angle,
    )
    _child_aliases = dict(
        angular=('rotationally_periodic', 'angular?'),
        axis_direction_component=('axis_direction', 'axis-direction-component'),
        position_of_axis=('axis_origin', 'position-of-axis'),
        shift_components=('shift_component', 'shift-components'),
    )

class geometry_5(Group):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    child_names = ['geom_disable', 'geom_dir_spec', 'geom_dir_x', 'geom_dir_y', 'geom_dir_z', 'geom_levels', 'geom_bgthread']
    _child_classes = dict(
        geom_disable=geom_disable,
        geom_dir_spec=geom_dir_spec,
        geom_dir_x=geom_dir_x,
        geom_dir_y=geom_dir_y,
        geom_dir_z=geom_dir_z,
        geom_levels=geom_levels,
        geom_bgthread=geom_bgthread,
    )

class phase_15_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['periodic', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        periodic=periodic_1,
        geometry=geometry_5,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class phase_15(NamedObject[phase_15_child], CreatableNamedObjectMixin[phase_15_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_15_child

class periodic_child(Group):
    """
    'child_object_type' of periodic.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'periodic_child'
    child_names = ['name', 'phase', 'periodic', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_15,
        periodic=periodic_1,
        geometry=geometry_5,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class periodic(NamedObject[periodic_child], CreatableNamedObjectMixin[periodic_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'periodic'
    _python_name = 'periodic'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = periodic_child

class alpha(Real):
    """
    Face Permeability.
    """
    _version = '251'
    fluent_name = 'alpha'
    _python_name = 'alpha'

class dm(Real):
    """
    Porous Medium Thickness.
    """
    _version = '251'
    fluent_name = 'dm'
    _python_name = 'dm'

class c2_1(Real):
    """
    Pressure-Jump Coefficient (C2).
    """
    _version = '251'
    fluent_name = 'c2'
    _python_name = 'c2'

class thermal_ctk(Real):
    """
    Thermal Contact Resistance.
    """
    _version = '251'
    fluent_name = 'thermal-ctk'
    _python_name = 'thermal_ctk'

class solar_fluxes(Boolean):
    """
    Participates in Solar Ray Tracing?.
    """
    _version = '251'
    fluent_name = 'solar-fluxes?'
    _python_name = 'solar_fluxes'

class v_absp(Group):
    """
    Direct Visible (Absorptivity).
    """
    _version = '251'
    fluent_name = 'v-absp'
    _python_name = 'v_absp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class ir_absp(Group):
    """
    Direct IR (Absorptivity).
    """
    _version = '251'
    fluent_name = 'ir-absp'
    _python_name = 'ir_absp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class ir_trans(Group):
    """
    Direct IR (Transmissivity).
    """
    _version = '251'
    fluent_name = 'ir-trans'
    _python_name = 'ir_trans'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class v_trans(Group):
    """
    Direct Visible (Transmissivity).
    """
    _version = '251'
    fluent_name = 'v-trans'
    _python_name = 'v_trans'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class jump_adhesion(Boolean):
    """
    Jump Adhesion.
    """
    _version = '251'
    fluent_name = 'jump-adhesion?'
    _python_name = 'jump_adhesion'

class adhesion_constrained(Boolean):
    """
    Constrained Two-Sided Adhesion.
    """
    _version = '251'
    fluent_name = 'adhesion-constrained?'
    _python_name = 'adhesion_constrained'

class contact_angles_child(Group):
    """
    'child_object_type' of contact_angles.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'contact_angles_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class contact_angles(NamedObject[contact_angles_child], CreatableNamedObjectMixin[contact_angles_child]):
    """
    Contact angle values.
    """
    _version = '251'
    fluent_name = 'contact-angles'
    _python_name = 'contact_angles'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = contact_angles_child

class porous_jump_1(Group):
    """
    Allows to change porous-jump model variables or settings.
    """
    _version = '251'
    fluent_name = 'porous-jump'
    _python_name = 'porous_jump'
    child_names = ['porous_jump_turb_wall_treatment', 'alpha', 'dm', 'c2', 'thermal_ctk', 'solar_fluxes', 'v_absp', 'ir_absp', 'ir_trans', 'v_trans', 'strength', 'jump_adhesion', 'adhesion_constrained', 'contact_angles', 'x_disp_boundary_condition', 'x_disp_boundary_value', 'y_disp_boundary_condition', 'y_disp_boundary_value', 'z_disp_boundary_condition', 'z_disp_boundary_value']
    _child_classes = dict(
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        alpha=alpha,
        dm=dm,
        c2=c2_1,
        thermal_ctk=thermal_ctk,
        solar_fluxes=solar_fluxes,
        v_absp=v_absp,
        ir_absp=ir_absp,
        ir_trans=ir_trans,
        v_trans=v_trans,
        strength=strength,
        jump_adhesion=jump_adhesion,
        adhesion_constrained=adhesion_constrained,
        contact_angles=contact_angles,
        x_disp_boundary_condition=x_disp_boundary_condition,
        x_disp_boundary_value=x_disp_boundary_value,
        y_disp_boundary_condition=y_disp_boundary_condition,
        y_disp_boundary_value=y_disp_boundary_value,
        z_disp_boundary_condition=z_disp_boundary_condition,
        z_disp_boundary_value=z_disp_boundary_value,
    )
    _child_aliases = dict(
        adhesion_angle=('contact_angles', 'adhesion-angle'),
        x_displacement_type=('x_disp_boundary_condition', 'x-displacement-type'),
        x_displacement_value=('x_disp_boundary_value', 'x-displacement-value'),
        y_displacement_type=('y_disp_boundary_condition', 'y-displacement-type'),
        y_displacement_value=('y_disp_boundary_value', 'y-displacement-value'),
        z_displacement_type=('z_disp_boundary_condition', 'z-displacement-type'),
        z_displacement_value=('z_disp_boundary_value', 'z-displacement-value'),
    )

class phase_16_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['porous_jump', 'discrete_phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        porous_jump=porous_jump_1,
        discrete_phase=discrete_phase_2,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_16(NamedObject[phase_16_child], CreatableNamedObjectMixin[phase_16_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_16_child

class porous_jump_child(Group):
    """
    'child_object_type' of porous_jump.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'porous_jump_child'
    child_names = ['name', 'phase', 'porous_jump', 'discrete_phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_16,
        porous_jump=porous_jump_1,
        discrete_phase=discrete_phase_2,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class porous_jump(NamedObject[porous_jump_child], CreatableNamedObjectMixin[porous_jump_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'porous-jump'
    _python_name = 'porous_jump'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = porous_jump_child

class mach_number(Group):
    """
    Mach Number.
    """
    _version = '251'
    fluent_name = 'mach-number'
    _python_name = 'mach_number'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class non_equil_boundary(Boolean):
    """
    Thermodynamic Non-Equilibrium Boundary.
    """
    _version = '251'
    fluent_name = 'non-equil-boundary?'
    _python_name = 'non_equil_boundary'

class momentum_7(Group):
    """
    Allows to change momentum model variables or settings.
    """
    _version = '251'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['gauge_pressure', 'mach_number', 'non_equil_boundary', 'coordinate_system', 'flow_direction', 'axis_direction', 'axis_origin']
    _child_classes = dict(
        gauge_pressure=gauge_pressure,
        mach_number=mach_number,
        non_equil_boundary=non_equil_boundary,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
    )
    _child_aliases = dict(
        axis_direction_component=('axis_direction', 'axis-direction-component'),
        axis_origin_component=('axis_origin', 'axis-origin-component'),
        flow_direction_component=('flow_direction', 'flow-direction-component'),
        m=('mach_number', 'm'),
        p=('gauge_pressure', 'p'),
    )

class vibrational_electronic_temperature(Group):
    """
    Vibrational-Electronic Temperature.
    """
    _version = '251'
    fluent_name = 'vibrational-electronic-temperature'
    _python_name = 'vibrational_electronic_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class thermal_4(Group):
    """
    Allows to change thermal model variables or settings.
    """
    _version = '251'
    fluent_name = 'thermal'
    _python_name = 'thermal'
    child_names = ['temperature', 'vibrational_electronic_temperature']
    _child_classes = dict(
        temperature=temperature_1,
        vibrational_electronic_temperature=vibrational_electronic_temperature,
    )
    _child_aliases = dict(
        t=('temperature', 't'),
        tve=('vibrational_electronic_temperature', 'tve'),
    )

class radiation_5(Group):
    """
    Radiation settings for this boundary-condition.
    """
    _version = '251'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['radiation_bc', 'radial_direction', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'radiating_s2s_surface']
    _child_classes = dict(
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        radiating_s2s_surface=radiating_s2s_surface,
    )
    _child_aliases = dict(
        band_q_irrad=('direct_irradiation', 'band-q-irrad'),
        band_q_irrad_diffuse=('diffuse_irradiation', 'band-q-irrad-diffuse'),
        coll_dphi=('phi_width_of_beam', 'coll-dphi'),
        coll_dtheta=('theta_width_of_beam', 'coll-dtheta'),
        in_emiss=('internal_emissivity', 'in-emiss'),
        radial_direction_component=('radial_direction', 'radial-direction-component'),
        solar_direction=('use_beeam_direction_from_solar_load_model_settings', 'solar-direction?'),
        solar_fluxes=('participates_in_solar_ray_tracing', 'solar-fluxes?'),
        solar_irradiation=('use_irradiation_from_solar_soad_model_settings', 'solar-irradiation?'),
        solar_shining_factor=('solar_transmissivity_factor', 'solar-shining-factor'),
        t_b_b=('black_body_temperature', 't-b-b'),
        t_b_b_spec=('external_black_body_temperature_method', 't-b-b-spec'),
    )

class species_9(Group):
    """
    Allows to change species model variables or settings.
    """
    _version = '251'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['mean_mixture_fraction', 'mixture_fraction_variance', 'secondary_mean_mixture_fraction', 'secondary_mixture_fraction_variance', 'specify_species_in_mole_fractions', 'species_mass_fraction', 'species_mole_fraction', 'mixture_fraction', 'mode_2_probability', 'mode_3_probability', 'pollutant_no_mass_fraction', 'pollutant_hcn_mass_fraction', 'pollutant_nh3_mass_fraction', 'pollutant_n2o_mass_fraction', 'pollutant_urea_mass_fraction', 'pollutant_hnco_mass_fraction', 'pollutant_nco_mass_fraction', 'pollutant_so2_mass_fraction', 'pollutant_h2s_mass_fraction', 'pollutant_so3_mass_fraction', 'pollutant_sh_mass_fraction', 'pollutant_so_mass_fraction', 'soot_mass_fraction', 'nuclei', 'tar_mass_fraction', 'pollutant_hg_mass_fraction', 'pollutant_hgcl2_mass_fraction', 'pollutant_hcl_mass_fraction', 'pollutant_hgo_mass_fraction', 'pollutant_cl_mass_fraction', 'pollutant_cl2_mass_fraction', 'pollutant_hgcl_mass_fraction', 'pollutant_hocl_mass_fraction']
    _child_classes = dict(
        mean_mixture_fraction=mean_mixture_fraction,
        mixture_fraction_variance=mixture_fraction_variance,
        secondary_mean_mixture_fraction=secondary_mean_mixture_fraction,
        secondary_mixture_fraction_variance=secondary_mixture_fraction_variance,
        specify_species_in_mole_fractions=specify_species_in_mole_fractions,
        species_mass_fraction=species_mass_fraction,
        species_mole_fraction=species_mole_fraction,
        mixture_fraction=mixture_fraction,
        mode_2_probability=mode_2_probability,
        mode_3_probability=mode_3_probability,
        pollutant_no_mass_fraction=pollutant_no_mass_fraction,
        pollutant_hcn_mass_fraction=pollutant_hcn_mass_fraction,
        pollutant_nh3_mass_fraction=pollutant_nh3_mass_fraction,
        pollutant_n2o_mass_fraction=pollutant_n2o_mass_fraction,
        pollutant_urea_mass_fraction=pollutant_urea_mass_fraction,
        pollutant_hnco_mass_fraction=pollutant_hnco_mass_fraction,
        pollutant_nco_mass_fraction=pollutant_nco_mass_fraction,
        pollutant_so2_mass_fraction=pollutant_so2_mass_fraction,
        pollutant_h2s_mass_fraction=pollutant_h2s_mass_fraction,
        pollutant_so3_mass_fraction=pollutant_so3_mass_fraction,
        pollutant_sh_mass_fraction=pollutant_sh_mass_fraction,
        pollutant_so_mass_fraction=pollutant_so_mass_fraction,
        soot_mass_fraction=soot_mass_fraction,
        nuclei=nuclei,
        tar_mass_fraction=tar_mass_fraction,
        pollutant_hg_mass_fraction=pollutant_hg_mass_fraction,
        pollutant_hgcl2_mass_fraction=pollutant_hgcl2_mass_fraction,
        pollutant_hcl_mass_fraction=pollutant_hcl_mass_fraction,
        pollutant_hgo_mass_fraction=pollutant_hgo_mass_fraction,
        pollutant_cl_mass_fraction=pollutant_cl_mass_fraction,
        pollutant_cl2_mass_fraction=pollutant_cl2_mass_fraction,
        pollutant_hgcl_mass_fraction=pollutant_hgcl_mass_fraction,
        pollutant_hocl_mass_fraction=pollutant_hocl_mass_fraction,
    )
    _child_aliases = dict(
        fmean=('mean_mixture_fraction', 'fmean'),
        fmean2=('secondary_mean_mixture_fraction', 'fmean2'),
        fvar=('mixture_fraction_variance', 'fvar'),
        fvar2=('secondary_mixture_fraction_variance', 'fvar2'),
        mf=('species_mass_fraction', 'mf'),
        mole_fraction=('species_mole_fraction', 'mole-fraction'),
        pollut_cl=('pollutant_cl_mass_fraction', 'pollut_cl'),
        pollut_cl2=('pollutant_cl2_mass_fraction', 'pollut_cl2'),
        pollut_ctar=('tar_mass_fraction', 'pollut_ctar'),
        pollut_h2s=('pollutant_h2s_mass_fraction', 'pollut_h2s'),
        pollut_hcl=('pollutant_hcl_mass_fraction', 'pollut_hcl'),
        pollut_hcn=('pollutant_hcn_mass_fraction', 'pollut_hcn'),
        pollut_hg=('pollutant_hg_mass_fraction', 'pollut_hg'),
        pollut_hgcl=('pollutant_hgcl_mass_fraction', 'pollut_hgcl'),
        pollut_hgcl2=('pollutant_hgcl2_mass_fraction', 'pollut_hgcl2'),
        pollut_hgo=('pollutant_hgo_mass_fraction', 'pollut_hgo'),
        pollut_hnco=('pollutant_hnco_mass_fraction', 'pollut_hnco'),
        pollut_hocl=('pollutant_hocl_mass_fraction', 'pollut_hocl'),
        pollut_n2o=('pollutant_n2o_mass_fraction', 'pollut_n2o'),
        pollut_nco=('pollutant_nco_mass_fraction', 'pollut_nco'),
        pollut_nh3=('pollutant_nh3_mass_fraction', 'pollut_nh3'),
        pollut_no=('pollutant_no_mass_fraction', 'pollut_no'),
        pollut_nuclei=('nuclei', 'pollut_nuclei'),
        pollut_sh=('pollutant_sh_mass_fraction', 'pollut_sh'),
        pollut_so=('pollutant_so_mass_fraction', 'pollut_so'),
        pollut_so2=('pollutant_so2_mass_fraction', 'pollut_so2'),
        pollut_so3=('pollutant_so3_mass_fraction', 'pollut_so3'),
        pollut_soot=('soot_mass_fraction', 'pollut_soot'),
        pollut_urea=('pollutant_urea_mass_fraction', 'pollut_urea'),
        prob_mode_1=('mixture_fraction', 'prob-mode-1'),
        prob_mode_2=('mode_2_probability', 'prob-mode-2'),
        prob_mode_3=('mode_3_probability', 'prob-mode-3'),
        species_in_mole_fractions=('specify_species_in_mole_fractions', 'species-in-mole-fractions?'),
    )

class phase_17_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        momentum=momentum_7,
        turbulence=turbulence_2,
        thermal=thermal_4,
        radiation=radiation_5,
        species=species_9,
        discrete_phase=discrete_phase_4,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_17(NamedObject[phase_17_child], CreatableNamedObjectMixin[phase_17_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_17_child

class pressure_far_field_child(Group):
    """
    'child_object_type' of pressure_far_field.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'pressure_far_field_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_17,
        momentum=momentum_7,
        turbulence=turbulence_2,
        thermal=thermal_4,
        radiation=radiation_5,
        species=species_9,
        discrete_phase=discrete_phase_4,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class pressure_far_field(NamedObject[pressure_far_field_child], CreatableNamedObjectMixin[pressure_far_field_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'pressure-far-field'
    _python_name = 'pressure_far_field'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = pressure_far_field_child

class momentum_8(Group):
    """
    Allows to change momentum model variables or settings.
    """
    _version = '251'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['reference_frame', 'gauge_total_pressure', 'supersonic_or_initial_gauge_pressure', 'direction_specification_method', 'coordinate_system', 'flow_direction', 'direction_vector', 'axis_direction', 'axis_origin', 'prevent_reverse_flow', 'acoustic_wave_model', 'impedance_zero_order_term', 'real_pole_series', 'complex_pole_series', 'incoming_wave']
    _child_classes = dict(
        reference_frame=reference_frame_4,
        gauge_total_pressure=gauge_total_pressure,
        supersonic_or_initial_gauge_pressure=supersonic_or_initial_gauge_pressure,
        direction_specification_method=direction_specification_method,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        prevent_reverse_flow=prevent_reverse_flow_1,
        acoustic_wave_model=acoustic_wave_model,
        impedance_zero_order_term=impedance_zero_order_term,
        real_pole_series=real_pole_series,
        complex_pole_series=complex_pole_series,
        incoming_wave=incoming_wave,
    )
    _child_aliases = dict(
        ac_options=('acoustic_wave_model', 'ac-options'),
        ac_wave=('incoming_wave', 'ac-wave'),
        axis_direction_component=('axis_direction', 'axis-direction-component'),
        axis_origin_component=('axis_origin', 'axis-origin-component'),
        direction_spec=('direction_specification_method', 'direction-spec'),
        direction_vector_components=('direction_vector', 'direction-vector-components'),
        flow_direction_component=('flow_direction', 'flow-direction-component'),
        frame_of_reference=('reference_frame', 'frame-of-reference'),
        impedance_0=('impedance_zero_order_term', 'impedance-0'),
        impedance_1=('real_pole_series', 'impedance-1'),
        impedance_2=('complex_pole_series', 'impedance-2'),
        p0=('gauge_total_pressure', 'p0'),
    )

class phase_18_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        momentum=momentum_8,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_18(NamedObject[phase_18_child], CreatableNamedObjectMixin[phase_18_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_18_child

class pressure_inlet_child(Group):
    """
    'child_object_type' of pressure_inlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'pressure_inlet_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_18,
        momentum=momentum_8,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class pressure_inlet(NamedObject[pressure_inlet_child], CreatableNamedObjectMixin[pressure_inlet_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'pressure-inlet'
    _python_name = 'pressure_inlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = pressure_inlet_child

class momentum_9(Group):
    """
    Allows to change momentum model variables or settings.
    """
    _version = '251'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['system_coupling', 'backflow_reference_frame', 'pressure_spec', 'pressure_spec_method', 'gauge_pressure', 'pressure_profile_multiplier', 'backflow_dir_spec_method', 'coordinate_system', 'flow_direction', 'backflow_pressure_spec', 'backflow_pressure_specification', 'axis_direction', 'axis_origin', 'prevent_reverse_flow', 'radial_equ_pressure_distribution', 'radial_equ_reference_position', 'radial_equ_specified_radius', 'radial_equ_specified_span', 'avg_pressure_spec', 'avg_method', 'target_mass_flow_rate', 'target_mass_flow', 'upper_limit_of_abs_pressure', 'lower_limit_of_abs_pressure', 'acoustic_wave_model', 'exit_pressure_spec', 'impedance_zero_order_term', 'real_pole_series', 'complex_pole_series', 'incoming_wave']
    _child_classes = dict(
        system_coupling=system_coupling_1,
        backflow_reference_frame=backflow_reference_frame,
        pressure_spec=pressure_spec,
        pressure_spec_method=pressure_spec_method,
        gauge_pressure=gauge_pressure,
        pressure_profile_multiplier=pressure_profile_multiplier,
        backflow_dir_spec_method=backflow_dir_spec_method,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        backflow_pressure_spec=backflow_pressure_spec,
        backflow_pressure_specification=backflow_pressure_specification,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        prevent_reverse_flow=prevent_reverse_flow,
        radial_equ_pressure_distribution=radial_equ_pressure_distribution,
        radial_equ_reference_position=radial_equ_reference_position,
        radial_equ_specified_radius=radial_equ_specified_radius,
        radial_equ_specified_span=radial_equ_specified_span,
        avg_pressure_spec=avg_pressure_spec,
        avg_method=avg_method,
        target_mass_flow_rate=target_mass_flow_rate,
        target_mass_flow=target_mass_flow,
        upper_limit_of_abs_pressure=upper_limit_of_abs_pressure,
        lower_limit_of_abs_pressure=lower_limit_of_abs_pressure,
        acoustic_wave_model=acoustic_wave_model,
        exit_pressure_spec=exit_pressure_spec,
        impedance_zero_order_term=impedance_zero_order_term,
        real_pole_series=real_pole_series,
        complex_pole_series=complex_pole_series,
        incoming_wave=incoming_wave,
    )
    _child_aliases = dict(
        ac_options=('acoustic_wave_model', 'ac-options'),
        ac_wave=('incoming_wave', 'ac-wave'),
        avg_option=('avg_method', 'avg-option'),
        avg_press_spec=('avg_pressure_spec', 'avg-press-spec?'),
        axis_direction_component=('axis_direction', 'axis-direction-component'),
        axis_origin_component=('axis_origin', 'axis-origin-component'),
        direction_spec=('backflow_dir_spec_method', 'direction-spec'),
        flow_direction_component=('flow_direction', 'flow-direction-component'),
        frame_of_reference=('backflow_reference_frame', 'frame-of-reference'),
        gen_nrbc_spec=('exit_pressure_spec', 'gen-nrbc-spec'),
        impedance_0=('impedance_zero_order_term', 'impedance-0'),
        impedance_1=('real_pole_series', 'impedance-1'),
        impedance_2=('complex_pole_series', 'impedance-2'),
        p=('gauge_pressure', 'p'),
        p_backflow_spec=('backflow_pressure_specification', 'p-backflow-spec'),
        p_backflow_spec_gen=('backflow_pressure_spec', 'p-backflow-spec-gen'),
        p_profile_multiplier=('pressure_profile_multiplier', 'p-profile-multiplier'),
        press_spec=('pressure_spec_method', 'press-spec'),
        press_spec_gen=('pressure_spec', 'press-spec-gen'),
        radial_ref_position=('radial_equ_reference_position', 'radial-ref-position'),
        radial_specified_radius=('radial_equ_specified_radius', 'radial-specified-radius'),
        radial_specified_span=('radial_equ_specified_span', 'radial-specified-span'),
        radial=('radial_equ_pressure_distribution', 'radial?'),
        targeted_mf=('target_mass_flow', 'targeted-mf'),
        targeted_mf_boundary=('target_mass_flow_rate', 'targeted-mf-boundary?'),
        targeted_mf_pmax=('upper_limit_of_abs_pressure', 'targeted-mf-pmax'),
        targeted_mf_pmin=('lower_limit_of_abs_pressure', 'targeted-mf-pmin'),
    )

class phase_19_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        momentum=momentum_9,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_19(NamedObject[phase_19_child], CreatableNamedObjectMixin[phase_19_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_19_child

class pressure_outlet_child(Group):
    """
    'child_object_type' of pressure_outlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'pressure_outlet_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_19,
        momentum=momentum_9,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class pressure_outlet(NamedObject[pressure_outlet_child], CreatableNamedObjectMixin[pressure_outlet_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'pressure-outlet'
    _python_name = 'pressure_outlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = pressure_outlet_child

class hc(Group):
    """
    Heat-Transfer-Coefficient.
    """
    _version = '251'
    fluent_name = 'hc'
    _python_name = 'hc'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class t(Real):
    """
    Temperature.
    """
    _version = '251'
    fluent_name = 't'
    _python_name = 't'

class heat_flux(Real):
    """
    Heat flux.
    """
    _version = '251'
    fluent_name = 'heat-flux'
    _python_name = 'heat_flux'

class radiator_1(Group):
    """
    Allows to change radiator model variables or settings.
    """
    _version = '251'
    fluent_name = 'radiator'
    _python_name = 'radiator'
    child_names = ['porous_jump_turb_wall_treatment', 'loss_coefficient', 'hc', 't', 'heat_flux', 'strength']
    _child_classes = dict(
        porous_jump_turb_wall_treatment=porous_jump_turb_wall_treatment,
        loss_coefficient=loss_coefficient,
        hc=hc,
        t=t,
        heat_flux=heat_flux,
        strength=strength,
    )
    _child_aliases = dict(
        kc=('loss_coefficient', 'kc'),
        q=('heat_flux', 'q'),
    )

class phase_20_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['radiator', 'discrete_phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        radiator=radiator_1,
        discrete_phase=discrete_phase_2,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_20(NamedObject[phase_20_child], CreatableNamedObjectMixin[phase_20_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_20_child

class radiator_child(Group):
    """
    'child_object_type' of radiator.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'radiator_child'
    child_names = ['name', 'phase', 'radiator', 'discrete_phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_20,
        radiator=radiator_1,
        discrete_phase=discrete_phase_2,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class radiator(NamedObject[radiator_child], CreatableNamedObjectMixin[radiator_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'radiator'
    _python_name = 'radiator'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = radiator_child

class les_spec_name(String, AllowedValuesMixin):
    """
    Fluctuating Velocity Algorithm   .
    """
    _version = '251'
    fluent_name = 'les-spec-name'
    _python_name = 'les_spec_name'

class rfg_number_of_modes(Integer):
    """
    Number of Fourier Modes.
    """
    _version = '251'
    fluent_name = 'rfg-number-of-modes'
    _python_name = 'rfg_number_of_modes'

class vm_nvortices(Integer):
    """
    Number of Vortices.
    """
    _version = '251'
    fluent_name = 'vm-nvortices'
    _python_name = 'vm_nvortices'

class les_embedded_fluctuations(String, AllowedValuesMixin):
    """
    Pre-R18.1 Fluctuating Velocity Algorithm Choice.
    """
    _version = '251'
    fluent_name = 'les-embedded-fluctuations'
    _python_name = 'les_embedded_fluctuations'

class turbulence_4(Group):
    """
    Allows to change turbulence model variables or settings.
    """
    _version = '251'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'
    child_names = ['les_spec_name', 'rfg_number_of_modes', 'vm_nvortices', 'les_embedded_fluctuations']
    _child_classes = dict(
        les_spec_name=les_spec_name,
        rfg_number_of_modes=rfg_number_of_modes,
        vm_nvortices=vm_nvortices,
        les_embedded_fluctuations=les_embedded_fluctuations,
    )

class phase_21_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['turbulence', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        turbulence=turbulence_4,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class phase_21(NamedObject[phase_21_child], CreatableNamedObjectMixin[phase_21_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_21_child

class rans_les_interface_child(Group):
    """
    'child_object_type' of rans_les_interface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'rans_les_interface_child'
    child_names = ['name', 'phase', 'turbulence', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_21,
        turbulence=turbulence_4,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class rans_les_interface(NamedObject[rans_les_interface_child], CreatableNamedObjectMixin[rans_les_interface_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'rans-les-interface'
    _python_name = 'rans_les_interface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = rans_les_interface_child

class outlet_zone(Group):
    """
    Outlet Zone.
    """
    _version = '251'
    fluent_name = 'outlet-zone'
    _python_name = 'outlet_zone'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class temperature_rise_specification(String, AllowedValuesMixin):
    """
    Temperature Rise Specification Method.
    """
    _version = '251'
    fluent_name = 'temperature-rise-specification'
    _python_name = 'temperature_rise_specification'

class temperature_rise(Group):
    """
    Temperature Rise.
    """
    _version = '251'
    fluent_name = 'temperature-rise'
    _python_name = 'temperature_rise'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class heat_source(Group):
    """
    Heat Source.
    """
    _version = '251'
    fluent_name = 'heat-source'
    _python_name = 'heat_source'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class freestream_temperature(Real):
    """
    Freestream temperature.
    """
    _version = '251'
    fluent_name = 'freestream-temperature'
    _python_name = 'freestream_temperature'

class transfer_coefficient(Group):
    """
    Heat-Transfer-Coefficient.
    """
    _version = '251'
    fluent_name = 'transfer-coefficient'
    _python_name = 'transfer_coefficient'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class species_mass_fractions_child(Group):
    """
    'child_object_type' of species_mass_fractions.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'species_mass_fractions_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class species_mass_fractions(NamedObject[species_mass_fractions_child], CreatableNamedObjectMixin[species_mass_fractions_child]):
    """
    List of Species mass fractions or mole fractions.
    """
    _version = '251'
    fluent_name = 'species-mass-fractions'
    _python_name = 'species_mass_fractions'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_mass_fractions_child

class recirculation_inlet_1(Group):
    """
    Allows to change recirculation-inlet model variables or settings.
    """
    _version = '251'
    fluent_name = 'recirculation-inlet'
    _python_name = 'recirculation_inlet'
    child_names = ['outlet_zone', 'temperature_rise_specification', 'temperature_rise', 'heat_source', 'freestream_temperature', 'transfer_coefficient', 'direction_specification', 'coordinate_system', 'flow_direction', 'direction_vector', 'turbulence_specification', 'modified_turbulent_viscosity', 'laminar_kinetic_energy', 'intermittency', 'turbulent_kinetic_energy', 'turbulent_dissipation_rate', 'specific_dissipation_rate', 'velocity_variance_scale', 'turbulent_intensity', 'turbulent_length_scale', 'hydraulic_diameter', 'turbulent_viscosity_ratio', 'turbulent_viscosity_ratio_profile', 'reynolds_stress_specification', 'uu_reynolds_stresses', 'vv_reynolds_stresses', 'ww_reynolds_stresses', 'uv_reynolds_stresses', 'vw_reynolds_stresses', 'uw_reynolds_stresses', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity', 'species_mass_fractions', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor']
    _child_classes = dict(
        outlet_zone=outlet_zone,
        temperature_rise_specification=temperature_rise_specification,
        temperature_rise=temperature_rise,
        heat_source=heat_source,
        freestream_temperature=freestream_temperature,
        transfer_coefficient=transfer_coefficient,
        direction_specification=direction_specification,
        coordinate_system=coordinate_system,
        flow_direction=flow_direction,
        direction_vector=direction_vector,
        turbulence_specification=turbulence_specification,
        modified_turbulent_viscosity=modified_turbulent_viscosity,
        laminar_kinetic_energy=laminar_kinetic_energy,
        intermittency=intermittency,
        turbulent_kinetic_energy=turbulent_kinetic_energy,
        turbulent_dissipation_rate=turbulent_dissipation_rate,
        specific_dissipation_rate=specific_dissipation_rate,
        velocity_variance_scale=velocity_variance_scale,
        turbulent_intensity=turbulent_intensity,
        turbulent_length_scale=turbulent_length_scale,
        hydraulic_diameter=hydraulic_diameter,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio,
        turbulent_viscosity_ratio_profile=turbulent_viscosity_ratio_profile,
        reynolds_stress_specification=reynolds_stress_specification,
        uu_reynolds_stresses=uu_reynolds_stresses,
        vv_reynolds_stresses=vv_reynolds_stresses,
        ww_reynolds_stresses=ww_reynolds_stresses,
        uv_reynolds_stresses=uv_reynolds_stresses,
        vw_reynolds_stresses=vw_reynolds_stresses,
        uw_reynolds_stresses=uw_reynolds_stresses,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
        species_mass_fractions=species_mass_fractions,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
    )
    _child_aliases = dict(
        direction_spec=('direction_specification', 'direction-spec'),
        direction_vector_components=('direction_vector', 'direction-vector-components'),
        e=('turbulent_dissipation_rate', 'e'),
        flow_direction_component=('flow_direction', 'flow-direction-component'),
        hc=('transfer_coefficient', 'hc'),
        intermit=('intermittency', 'intermit'),
        k=('turbulent_kinetic_energy', 'k'),
        kl=('laminar_kinetic_energy', 'kl'),
        ksgs=('subgrid_kinetic_energy', 'ksgs'),
        ksgs_spec=('subgrid_kinetic_energy_specification', 'ksgs-spec'),
        mass_flow_multiplier=('species_mass_fractions', 'mass-flow-multiplier'),
        nut=('modified_turbulent_viscosity', 'nut'),
        o=('specific_dissipation_rate', 'o'),
        pid=('outlet_zone', 'pid'),
        rst_spec=('reynolds_stress_specification', 'rst-spec'),
        sgs_turb_intensity=('subgrid_turbulent_intensity', 'sgs-turb-intensity'),
        solar_fluxes=('participates_in_solar_ray_tracing', 'solar-fluxes?'),
        solar_shining_factor=('solar_transmissivity_factor', 'solar-shining-factor'),
        temperature_spec=('temperature_rise_specification', 'temperature-spec'),
        tinf=('freestream_temperature', 'tinf'),
        turb_hydraulic_diam=('hydraulic_diameter', 'turb-hydraulic-diam'),
        turb_intensity=('turbulent_intensity', 'turb-intensity'),
        turb_length_scale=('turbulent_length_scale', 'turb-length-scale'),
        turb_viscosity_ratio=('turbulent_viscosity_ratio', 'turb-viscosity-ratio'),
        turb_viscosity_ratio_profile=('turbulent_viscosity_ratio_profile', 'turb-viscosity-ratio-profile'),
        uu=('uu_reynolds_stresses', 'uu'),
        uv=('uv_reynolds_stresses', 'uv'),
        uw=('uw_reynolds_stresses', 'uw'),
        v2=('velocity_variance_scale', 'v2'),
        vv=('vv_reynolds_stresses', 'vv'),
        vw=('vw_reynolds_stresses', 'vw'),
        ww=('ww_reynolds_stresses', 'ww'),
    )

class phase_22_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['recirculation_inlet', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        recirculation_inlet=recirculation_inlet_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class phase_22(NamedObject[phase_22_child], CreatableNamedObjectMixin[phase_22_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_22_child

class recirculation_inlet_child(Group):
    """
    'child_object_type' of recirculation_inlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'recirculation_inlet_child'
    child_names = ['name', 'phase', 'recirculation_inlet', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_22,
        recirculation_inlet=recirculation_inlet_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class recirculation_inlet(NamedObject[recirculation_inlet_child], CreatableNamedObjectMixin[recirculation_inlet_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'recirculation-inlet'
    _python_name = 'recirculation_inlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = recirculation_inlet_child

class recirculation_outlet_1(Group):
    """
    Allows to change recirculation-outlet model variables or settings.
    """
    _version = '251'
    fluent_name = 'recirculation-outlet'
    _python_name = 'recirculation_outlet'
    child_names = ['mass_flow_specification', 'mass_flow_rate', 'mass_flux', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor']
    _child_classes = dict(
        mass_flow_specification=mass_flow_specification,
        mass_flow_rate=mass_flow_rate_1,
        mass_flux=mass_flux,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
    )
    _child_aliases = dict(
        flow_spec=('mass_flow_specification', 'flow-spec'),
        mass_flow=('mass_flow_rate', 'mass-flow'),
        solar_fluxes=('participates_in_solar_ray_tracing', 'solar-fluxes?'),
        solar_shining_factor=('solar_transmissivity_factor', 'solar-shining-factor'),
    )

class phase_23_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['recirculation_outlet', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        recirculation_outlet=recirculation_outlet_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class phase_23(NamedObject[phase_23_child], CreatableNamedObjectMixin[phase_23_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_23_child

class recirculation_outlet_child(Group):
    """
    'child_object_type' of recirculation_outlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'recirculation_outlet_child'
    child_names = ['name', 'phase', 'recirculation_outlet', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_23,
        recirculation_outlet=recirculation_outlet_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class recirculation_outlet(NamedObject[recirculation_outlet_child], CreatableNamedObjectMixin[recirculation_outlet_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'recirculation-outlet'
    _python_name = 'recirculation_outlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = recirculation_outlet_child

class shadow_child(Group):
    """
    'child_object_type' of shadow.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'shadow_child'
    child_names = ['name', 'phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_2,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class shadow(NamedObject[shadow_child], CreatableNamedObjectMixin[shadow_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'shadow'
    _python_name = 'shadow'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = shadow_child

class symmetry_child(Group):
    """
    'child_object_type' of symmetry.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'symmetry_child'
    child_names = ['name', 'phase', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_2,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )

class symmetry(NamedObject[symmetry_child], CreatableNamedObjectMixin[symmetry_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'symmetry'
    _python_name = 'symmetry'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = symmetry_child

class velocity_specification_method(String, AllowedValuesMixin):
    """
    Velocity Specification Method.
    """
    _version = '251'
    fluent_name = 'velocity-specification-method'
    _python_name = 'velocity_specification_method'

class reference_frame_5(String, AllowedValuesMixin):
    """
    Reference frame.
    """
    _version = '251'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'

class velocity_magnitude(Group):
    """
    Velocity Magnitude.
    """
    _version = '251'
    fluent_name = 'velocity-magnitude'
    _python_name = 'velocity_magnitude'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class initial_gauge_pressure(Group):
    """
    Gauge Pressure.
    """
    _version = '251'
    fluent_name = 'initial-gauge-pressure'
    _python_name = 'initial_gauge_pressure'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class velocity_components_child(Group):
    """
    'child_object_type' of velocity_components.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'velocity_components_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class velocity_components(ListObject[velocity_components_child]):
    """
    Velocity components.
    """
    _version = '251'
    fluent_name = 'velocity-components'
    _python_name = 'velocity_components'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = velocity_components_child

class swirl_angular_velocity(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'swirl-angular-velocity'
    _python_name = 'swirl_angular_velocity'

class momentum_10(Group):
    """
    Allows to change momentum model variables or settings.
    """
    _version = '251'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['system_coupling', 'velocity_specification_method', 'reference_frame', 'velocity_magnitude', 'initial_gauge_pressure', 'coordinate_system', 'velocity_components', 'flow_direction', 'axis_direction', 'axis_origin', 'swirl_angular_velocity', 'gauge_pressure', 'acoustic_wave_model', 'impedance_zero_order_term', 'real_pole_series', 'complex_pole_series', 'incoming_wave']
    _child_classes = dict(
        system_coupling=system_coupling_1,
        velocity_specification_method=velocity_specification_method,
        reference_frame=reference_frame_5,
        velocity_magnitude=velocity_magnitude,
        initial_gauge_pressure=initial_gauge_pressure,
        coordinate_system=coordinate_system,
        velocity_components=velocity_components,
        flow_direction=flow_direction,
        axis_direction=axis_direction_2,
        axis_origin=axis_origin_2,
        swirl_angular_velocity=swirl_angular_velocity,
        gauge_pressure=gauge_pressure,
        acoustic_wave_model=acoustic_wave_model,
        impedance_zero_order_term=impedance_zero_order_term,
        real_pole_series=real_pole_series,
        complex_pole_series=complex_pole_series,
        incoming_wave=incoming_wave,
    )
    _child_aliases = dict(
        ac_options=('acoustic_wave_model', 'ac-options'),
        ac_wave=('incoming_wave', 'ac-wave'),
        axis_direction_component=('axis_direction', 'axis-direction-component'),
        axis_origin_component=('axis_origin', 'axis-origin-component'),
        flow_direction_component=('flow_direction', 'flow-direction-component'),
        frame_of_reference=('reference_frame', 'frame-of-reference'),
        impedance_0=('impedance_zero_order_term', 'impedance-0'),
        impedance_1=('real_pole_series', 'impedance-1'),
        impedance_2=('complex_pole_series', 'impedance-2'),
        omega_swirl=('swirl_angular_velocity', 'omega-swirl'),
        p=('gauge_pressure', 'p'),
        p_sup=('initial_gauge_pressure', 'p_sup'),
        velocity=('velocity_magnitude', 'velocity'),
        velocity_component=('velocity_components', 'velocity-component'),
        velocity_spec=('velocity_specification_method', 'velocity-spec'),
        vmag=('velocity_magnitude', 'vmag'),
    )

class turbulence_5(Group):
    """
    Allows to change turbulence model variables or settings.
    """
    _version = '251'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'
    child_names = ['les_spec', 'fluctuating_velocity_algorithm', 'number_of_fourier_modes', 'number_of_vortices', 'streamwise_fluctuations', 'satisfy_mass_conservation', 'scale_search_limiter', 'stg_turbulent_intensity', 'stg_turbulent_viscosity_ratio', 'wall_distance', 'volumetric_forcing', 'forcing_zone_thickness', 'volumetric_thickness', 'turbulence_specification', 'modified_turbulent_viscosity', 'laminar_kinetic_energy', 'intermittency', 'turbulent_kinetic_energy', 'turbulent_dissipation_rate', 'specific_dissipation_rate', 'velocity_variance_scale', 'turbulent_intensity', 'turbulent_length_scale', 'hydraulic_diameter', 'turbulent_viscosity_ratio', 'turbulent_viscosity_ratio_profile', 'reynolds_stress_specification', 'uu_reynolds_stresses', 'vv_reynolds_stresses', 'ww_reynolds_stresses', 'uv_reynolds_stresses', 'vw_reynolds_stresses', 'uw_reynolds_stresses', 'subgrid_kinetic_energy_specification', 'subgrid_kinetic_energy', 'subgrid_turbulent_intensity']
    _child_classes = dict(
        les_spec=les_spec,
        fluctuating_velocity_algorithm=fluctuating_velocity_algorithm,
        number_of_fourier_modes=number_of_fourier_modes,
        number_of_vortices=number_of_vortices,
        streamwise_fluctuations=streamwise_fluctuations,
        satisfy_mass_conservation=satisfy_mass_conservation,
        scale_search_limiter=scale_search_limiter,
        stg_turbulent_intensity=stg_turbulent_intensity,
        stg_turbulent_viscosity_ratio=stg_turbulent_viscosity_ratio,
        wall_distance=wall_distance,
        volumetric_forcing=volumetric_forcing,
        forcing_zone_thickness=forcing_zone_thickness,
        volumetric_thickness=volumetric_thickness,
        turbulence_specification=turbulence_specification,
        modified_turbulent_viscosity=modified_turbulent_viscosity,
        laminar_kinetic_energy=laminar_kinetic_energy,
        intermittency=intermittency,
        turbulent_kinetic_energy=turbulent_kinetic_energy,
        turbulent_dissipation_rate=turbulent_dissipation_rate,
        specific_dissipation_rate=specific_dissipation_rate,
        velocity_variance_scale=velocity_variance_scale,
        turbulent_intensity=turbulent_intensity,
        turbulent_length_scale=turbulent_length_scale,
        hydraulic_diameter=hydraulic_diameter,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio,
        turbulent_viscosity_ratio_profile=turbulent_viscosity_ratio_profile,
        reynolds_stress_specification=reynolds_stress_specification,
        uu_reynolds_stresses=uu_reynolds_stresses,
        vv_reynolds_stresses=vv_reynolds_stresses,
        ww_reynolds_stresses=ww_reynolds_stresses,
        uv_reynolds_stresses=uv_reynolds_stresses,
        vw_reynolds_stresses=vw_reynolds_stresses,
        uw_reynolds_stresses=uw_reynolds_stresses,
        subgrid_kinetic_energy_specification=subgrid_kinetic_energy_specification,
        subgrid_kinetic_energy=subgrid_kinetic_energy,
        subgrid_turbulent_intensity=subgrid_turbulent_intensity,
    )
    _child_aliases = dict(
        e=('turbulent_dissipation_rate', 'e'),
        intermit=('intermittency', 'intermit'),
        k=('turbulent_kinetic_energy', 'k'),
        kl=('laminar_kinetic_energy', 'kl'),
        ksgs=('subgrid_kinetic_energy', 'ksgs'),
        ksgs_spec=('subgrid_kinetic_energy_specification', 'ksgs-spec'),
        nut=('modified_turbulent_viscosity', 'nut'),
        o=('specific_dissipation_rate', 'o'),
        rfg_number_of_modes=('number_of_fourier_modes', 'rfg-number-of-modes'),
        rst_spec=('reynolds_stress_specification', 'rst-spec'),
        sgs_turb_intensity=('subgrid_turbulent_intensity', 'sgs-turb-intensity'),
        stg_dw_limiter=('wall_distance', 'stg-dw-limiter'),
        stg_scale_limiter_type=('scale_search_limiter', 'stg-scale-limiter-type'),
        stg_ti_limiter=('stg_turbulent_intensity', 'stg-ti-limiter'),
        stg_tvr_limiter=('stg_turbulent_viscosity_ratio', 'stg-tvr-limiter'),
        turb_hydraulic_diam=('hydraulic_diameter', 'turb-hydraulic-diam'),
        turb_intensity=('turbulent_intensity', 'turb-intensity'),
        turb_length_scale=('turbulent_length_scale', 'turb-length-scale'),
        turb_viscosity_ratio=('turbulent_viscosity_ratio', 'turb-viscosity-ratio'),
        turb_viscosity_ratio_profile=('turbulent_viscosity_ratio_profile', 'turb-viscosity-ratio-profile'),
        turbulent_specification=('turbulence_specification', 'turbulent-specification'),
        uu=('uu_reynolds_stresses', 'uu'),
        uv=('uv_reynolds_stresses', 'uv'),
        uw=('uw_reynolds_stresses', 'uw'),
        v2=('velocity_variance_scale', 'v2'),
        vm_mass_conservation=('satisfy_mass_conservation', 'vm-mass-conservation?'),
        vm_number_of_vortices=('number_of_vortices', 'vm-number-of-vortices'),
        vm_streamwise_fluct=('streamwise_fluctuations', 'vm-streamwise-fluct?'),
        volumetric_synthetic_turbulence_generator_option=('forcing_zone_thickness', 'volumetric-synthetic-turbulence-generator-option'),
        volumetric_synthetic_turbulence_generator_option_thickness=('volumetric_thickness', 'volumetric-synthetic-turbulence-generator-option-thickness'),
        volumetric_synthetic_turbulence_generator=('volumetric_forcing', 'volumetric-synthetic-turbulence-generator?'),
        vv=('vv_reynolds_stresses', 'vv'),
        vw=('vw_reynolds_stresses', 'vw'),
        ww=('ww_reynolds_stresses', 'ww'),
    )

class thermodynamic_non_equilibrium_boundary(Boolean):
    """
    Thermodynamic Non-Equilibrium Boundary.
    """
    _version = '251'
    fluent_name = 'thermodynamic-non-equilibrium-boundary'
    _python_name = 'thermodynamic_non_equilibrium_boundary'

class vibrational_electronic_temperature_1(Group):
    """
    Temperature.
    """
    _version = '251'
    fluent_name = 'vibrational-electronic-temperature'
    _python_name = 'vibrational_electronic_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class thermal_5(Group):
    """
    Allows to change thermal model variables or settings.
    """
    _version = '251'
    fluent_name = 'thermal'
    _python_name = 'thermal'
    child_names = ['temperature', 'thermodynamic_non_equilibrium_boundary', 'vibrational_electronic_temperature']
    _child_classes = dict(
        temperature=temperature_1,
        thermodynamic_non_equilibrium_boundary=thermodynamic_non_equilibrium_boundary,
        vibrational_electronic_temperature=vibrational_electronic_temperature_1,
    )
    _child_aliases = dict(
        non_equil_boundary=('thermodynamic_non_equilibrium_boundary', 'non-equil-boundary?'),
        t=('temperature', 't'),
        tve=('vibrational_electronic_temperature', 'tve'),
    )

class participates_in_view_factor_calculation_1(Boolean):
    """
    Participates in View Factor Calculation?.
    """
    _version = '251'
    fluent_name = 'participates-in-view-factor-calculation?'
    _python_name = 'participates_in_view_factor_calculation'

class radiation_6(Group):
    """
    Radiation settings for this boundary-condition.
    """
    _version = '251'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['radiation_bc', 'radial_direction', 'theta_width_of_beam', 'phi_width_of_beam', 'direct_irradiation', 'diffuse_irradiation', 'parallel_collimated_beam', 'use_beeam_direction_from_solar_load_model_settings', 'use_irradiation_from_solar_soad_model_settings', 'external_black_body_temperature_method', 'black_body_temperature', 'internal_emissivity', 'participates_in_solar_ray_tracing', 'solar_transmissivity_factor', 'participates_in_view_factor_calculation']
    _child_classes = dict(
        radiation_bc=radiation_bc,
        radial_direction=radial_direction,
        theta_width_of_beam=theta_width_of_beam,
        phi_width_of_beam=phi_width_of_beam,
        direct_irradiation=direct_irradiation,
        diffuse_irradiation=diffuse_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        use_beeam_direction_from_solar_load_model_settings=use_beeam_direction_from_solar_load_model_settings,
        use_irradiation_from_solar_soad_model_settings=use_irradiation_from_solar_soad_model_settings,
        external_black_body_temperature_method=external_black_body_temperature_method,
        black_body_temperature=black_body_temperature,
        internal_emissivity=internal_emissivity,
        participates_in_solar_ray_tracing=participates_in_solar_ray_tracing,
        solar_transmissivity_factor=solar_transmissivity_factor,
        participates_in_view_factor_calculation=participates_in_view_factor_calculation_1,
    )
    _child_aliases = dict(
        band_q_irrad=('direct_irradiation', 'band-q-irrad'),
        band_q_irrad_diffuse=('diffuse_irradiation', 'band-q-irrad-diffuse'),
        coll_dphi=('phi_width_of_beam', 'coll-dphi'),
        coll_dtheta=('theta_width_of_beam', 'coll-dtheta'),
        in_emiss=('internal_emissivity', 'in-emiss'),
        radial_direction_component=('radial_direction', 'radial-direction-component'),
        radiating_s2s_surface=('participates_in_view_factor_calculation', 'radiating-s2s-surface?'),
        solar_direction=('use_beeam_direction_from_solar_load_model_settings', 'solar-direction?'),
        solar_fluxes=('participates_in_solar_ray_tracing', 'solar-fluxes?'),
        solar_irradiation=('use_irradiation_from_solar_soad_model_settings', 'solar-irradiation?'),
        solar_shining_factor=('solar_transmissivity_factor', 'solar-shining-factor'),
        t_b_b=('black_body_temperature', 't-b-b'),
        t_b_b_spec=('external_black_body_temperature_method', 't-b-b-spec'),
    )

class open_channel_wave_bc(Boolean):
    """
    Open Channel Wave BC.
    """
    _version = '251'
    fluent_name = 'open-channel-wave-bc'
    _python_name = 'open_channel_wave_bc'

class segregated_velocity_inputs(Boolean):
    """
    Segregated Velocity Inputs.
    """
    _version = '251'
    fluent_name = 'segregated-velocity-inputs'
    _python_name = 'segregated_velocity_inputs'

class averaged_flow_specification_method(String, AllowedValuesMixin):
    """
    Averaged Flow Specification Method.
    """
    _version = '251'
    fluent_name = 'averaged-flow-specification-method'
    _python_name = 'averaged_flow_specification_method'

class avg_flow_velocity(Group):
    """
    Averaged Flow Velocity Magnitude.
    """
    _version = '251'
    fluent_name = 'avg-flow-velocity'
    _python_name = 'avg_flow_velocity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class flow_velocity_child(Group):
    """
    'child_object_type' of flow_velocity.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'flow_velocity_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class flow_velocity(ListObject[flow_velocity_child]):
    """
    Wave velocity components.
    """
    _version = '251'
    fluent_name = 'flow-velocity'
    _python_name = 'flow_velocity'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = flow_velocity_child

class moving_object_velocity_specification_method(String, AllowedValuesMixin):
    """
    Moving Object: Velocity Specification Method.
    """
    _version = '251'
    fluent_name = 'moving-object-velocity-specification-method'
    _python_name = 'moving_object_velocity_specification_method'

class moving_object_velocity(Group):
    """
    Moving Object: Velocity Magnitude.
    """
    _version = '251'
    fluent_name = 'moving-object-velocity'
    _python_name = 'moving_object_velocity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class moving_object_direction_child(Group):
    """
    'child_object_type' of moving_object_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'moving_object_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class moving_object_direction(ListObject[moving_object_direction_child]):
    """
    Moving object direction components.
    """
    _version = '251'
    fluent_name = 'moving-object-direction'
    _python_name = 'moving_object_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = moving_object_direction_child

class secondary_phase_velocity_specification_method(String, AllowedValuesMixin):
    """
    Secondary Phase: Velocity Specification Method.
    """
    _version = '251'
    fluent_name = 'secondary-phase-velocity-specification-method'
    _python_name = 'secondary_phase_velocity_specification_method'

class secondary_phase_velocity(Group):
    """
    Secondary Phase: Velocity Magnitude.
    """
    _version = '251'
    fluent_name = 'secondary-phase-velocity'
    _python_name = 'secondary_phase_velocity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class secondary_phase_direction_child(Group):
    """
    'child_object_type' of secondary_phase_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'secondary_phase_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class secondary_phase_direction(ListObject[secondary_phase_direction_child]):
    """
    Secondary phase direction components.
    """
    _version = '251'
    fluent_name = 'secondary-phase-direction'
    _python_name = 'secondary_phase_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = secondary_phase_direction_child

class primary_phase_velocity_specification_method(String, AllowedValuesMixin):
    """
    Primary Phase: Velocity Specification Method.
    """
    _version = '251'
    fluent_name = 'primary-phase-velocity-specification-method'
    _python_name = 'primary_phase_velocity_specification_method'

class primary_phase_reference_height_above_free_surface(Real):
    """
    Primary Phase: Reference Height Above Free Surface.
    """
    _version = '251'
    fluent_name = 'primary-phase-reference-height-above-free-surface'
    _python_name = 'primary_phase_reference_height_above_free_surface'

class primary_phase_power_law_coefficient(Real):
    """
    Primary Phase: Power Law Coefficient.
    """
    _version = '251'
    fluent_name = 'primary-phase-power-law-coefficient'
    _python_name = 'primary_phase_power_law_coefficient'

class primary_phase_velocity(Group):
    """
    Primary Phase: Velocity Magnitude.
    """
    _version = '251'
    fluent_name = 'primary-phase-velocity'
    _python_name = 'primary_phase_velocity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class primary_phase_reference_velocity(Group):
    """
    Primary Phase: Reference Velocity Magnitude.
    """
    _version = '251'
    fluent_name = 'primary-phase-reference-velocity'
    _python_name = 'primary_phase_reference_velocity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class primary_phase_direction_child(Group):
    """
    'child_object_type' of primary_phase_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'primary_phase_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class primary_phase_direction(ListObject[primary_phase_direction_child]):
    """
    Primary phase direction components.
    """
    _version = '251'
    fluent_name = 'primary-phase-direction'
    _python_name = 'primary_phase_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = primary_phase_direction_child

class wave_option(String, AllowedValuesMixin):
    """
    Wave BC Options.
    """
    _version = '251'
    fluent_name = 'wave-option'
    _python_name = 'wave_option'

class reference_wave_direction(String, AllowedValuesMixin):
    """
    Reference Wave Direction.
    """
    _version = '251'
    fluent_name = 'reference-wave-direction'
    _python_name = 'reference_wave_direction'

class reference_direction_child(Group):
    """
    'child_object_type' of reference_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'reference_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class reference_direction(ListObject[reference_direction_child]):
    """
    Reference direction components.
    """
    _version = '251'
    fluent_name = 'reference-direction'
    _python_name = 'reference_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = reference_direction_child

class wave_modeling_option(String, AllowedValuesMixin):
    """
    Wave Modeling Options.
    """
    _version = '251'
    fluent_name = 'wave-modeling-option'
    _python_name = 'wave_modeling_option'

class theory(String, AllowedValuesMixin):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'theory'
    _python_name = 'theory'

class wave_ht(Group):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'wave-ht'
    _python_name = 'wave_ht'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class wave_len(Group):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'wave-len'
    _python_name = 'wave_len'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class phase_diff(Group):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'phase-diff'
    _python_name = 'phase_diff'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class heading_angle(Group):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'heading-angle'
    _python_name = 'heading_angle'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class wave_group_inputs_child(Group):
    """
    'child_object_type' of wave_group_inputs.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'wave_group_inputs_child'
    child_names = ['theory', 'wave_ht', 'wave_len', 'phase_diff', 'heading_angle']
    _child_classes = dict(
        theory=theory,
        wave_ht=wave_ht,
        wave_len=wave_len,
        phase_diff=phase_diff,
        heading_angle=heading_angle,
    )

class wave_group_inputs(ListObject[wave_group_inputs_child]):
    """
    List of Wave Group Inputs.
    """
    _version = '251'
    fluent_name = 'wave-group-inputs'
    _python_name = 'wave_group_inputs'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = wave_group_inputs_child

class offset_3(Group):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'offset'
    _python_name = 'offset'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class shallow_wave_inputs_child(Group):
    """
    'child_object_type' of shallow_wave_inputs.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'shallow_wave_inputs_child'
    child_names = ['theory', 'wave_ht', 'wave_len', 'offset', 'heading_angle']
    _child_classes = dict(
        theory=theory,
        wave_ht=wave_ht,
        wave_len=wave_len,
        offset=offset_3,
        heading_angle=heading_angle,
    )

class shallow_wave_inputs(ListObject[shallow_wave_inputs_child]):
    """
    List of Shallow Wave Inputs.
    """
    _version = '251'
    fluent_name = 'shallow-wave-inputs'
    _python_name = 'shallow_wave_inputs'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = shallow_wave_inputs_child

class frequency_spectrum_method(String, AllowedValuesMixin):
    """
    Frequency Spectrum Method .
    """
    _version = '251'
    fluent_name = 'frequency-spectrum-method'
    _python_name = 'frequency_spectrum_method'

class peak_shape_parameter(Real):
    """
    Peak Shape Parameter.
    """
    _version = '251'
    fluent_name = 'peak-shape-parameter'
    _python_name = 'peak_shape_parameter'

class significant_wave_height(Group):
    """
    Significant Wave Height.
    """
    _version = '251'
    fluent_name = 'significant-wave-height'
    _python_name = 'significant_wave_height'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class peak_frequency(Group):
    """
    Peak Frequency.
    """
    _version = '251'
    fluent_name = 'peak-frequency'
    _python_name = 'peak_frequency'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class minimum_frequency(Group):
    """
    Minimum Frequency.
    """
    _version = '251'
    fluent_name = 'minimum-frequency'
    _python_name = 'minimum_frequency'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class maximum_frequency(Group):
    """
    Maximum Frequency.
    """
    _version = '251'
    fluent_name = 'maximum-frequency'
    _python_name = 'maximum_frequency'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class number_of_frequency_components(Integer):
    """
    Number of frequency components.
    """
    _version = '251'
    fluent_name = 'number-of-frequency-components'
    _python_name = 'number_of_frequency_components'

class directional_spreading_method(String, AllowedValuesMixin):
    """
    Directional Spreading Method .
    """
    _version = '251'
    fluent_name = 'directional-spreading-method'
    _python_name = 'directional_spreading_method'

class frequency_independent_cosine_exponent(Integer):
    """
    Frequency Independent Cosine Exponent.
    """
    _version = '251'
    fluent_name = 'frequency-independent-cosine-exponent'
    _python_name = 'frequency_independent_cosine_exponent'

class mean_wave_heading_angle(Group):
    """
    Mean Wave Heading Angle.
    """
    _version = '251'
    fluent_name = 'mean-wave-heading-angle'
    _python_name = 'mean_wave_heading_angle'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class angular_deviation(Group):
    """
    Angular Deviation.
    """
    _version = '251'
    fluent_name = 'angular-deviation'
    _python_name = 'angular_deviation'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class angular_components_count(Integer):
    """
    Number of Angular components.
    """
    _version = '251'
    fluent_name = 'angular-components-count'
    _python_name = 'angular_components_count'

class mean_and_std_deviation(RealList):
    """
    Mean and standard deviation.
    """
    _version = '251'
    fluent_name = 'mean-and-std-deviation'
    _python_name = 'mean_and_std_deviation'

class pb_disc_components_child(Group):
    """
    'child_object_type' of pb_disc_components.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'pb_disc_components_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class pb_disc_components(ListObject[pb_disc_components_child]):
    """
    'pb_disc_components' child.
    """
    _version = '251'
    fluent_name = 'pb-disc-components'
    _python_name = 'pb_disc_components'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = pb_disc_components_child

class pb_disc(Group):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'pb-disc'
    _python_name = 'pb_disc'
    child_names = ['mean_and_std_deviation', 'pb_disc_components']
    _child_classes = dict(
        mean_and_std_deviation=mean_and_std_deviation,
        pb_disc_components=pb_disc_components,
    )

class multiphase_6(Group):
    """
    Allows to change multiphase model variables or settings.
    """
    _version = '251'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['open_channel_wave_bc', 'segregated_velocity_inputs', 'averaged_flow_specification_method', 'avg_flow_velocity', 'flow_velocity', 'moving_object_velocity_specification_method', 'moving_object_velocity', 'moving_object_direction', 'secondary_phase_velocity_specification_method', 'secondary_phase_velocity', 'secondary_phase_direction', 'primary_phase_velocity_specification_method', 'primary_phase_reference_height_above_free_surface', 'primary_phase_power_law_coefficient', 'primary_phase_velocity', 'primary_phase_reference_velocity', 'primary_phase_direction', 'secondary_phase_for_inlet', 'wave_option', 'free_surface_level', 'bottom_level', 'reference_wave_direction', 'reference_direction', 'wave_modeling_option', 'wave_group_inputs', 'shallow_wave_inputs', 'frequency_spectrum_method', 'peak_shape_parameter', 'significant_wave_height', 'peak_frequency', 'minimum_frequency', 'maximum_frequency', 'number_of_frequency_components', 'directional_spreading_method', 'frequency_independent_cosine_exponent', 'mean_wave_heading_angle', 'angular_deviation', 'angular_components_count', 'granular_temperature', 'interfacial_area_concentration', 'level_set_function_flux', 'volume_fraction', 'discrete_boundary_condition', 'pb_disc', 'quadrature_moment_boundary_condition', 'quadrature_moment_boundary_value', 'qbmm_boundary_condition', 'qbmm_boundary_value', 'std_moment_boundary_condition', 'std_moment_boundary_value', 'dqmom_boundary_condition', 'dqmom_boundary_value']
    _child_classes = dict(
        open_channel_wave_bc=open_channel_wave_bc,
        segregated_velocity_inputs=segregated_velocity_inputs,
        averaged_flow_specification_method=averaged_flow_specification_method,
        avg_flow_velocity=avg_flow_velocity,
        flow_velocity=flow_velocity,
        moving_object_velocity_specification_method=moving_object_velocity_specification_method,
        moving_object_velocity=moving_object_velocity,
        moving_object_direction=moving_object_direction,
        secondary_phase_velocity_specification_method=secondary_phase_velocity_specification_method,
        secondary_phase_velocity=secondary_phase_velocity,
        secondary_phase_direction=secondary_phase_direction,
        primary_phase_velocity_specification_method=primary_phase_velocity_specification_method,
        primary_phase_reference_height_above_free_surface=primary_phase_reference_height_above_free_surface,
        primary_phase_power_law_coefficient=primary_phase_power_law_coefficient,
        primary_phase_velocity=primary_phase_velocity,
        primary_phase_reference_velocity=primary_phase_reference_velocity,
        primary_phase_direction=primary_phase_direction,
        secondary_phase_for_inlet=secondary_phase_for_inlet,
        wave_option=wave_option,
        free_surface_level=free_surface_level,
        bottom_level=bottom_level,
        reference_wave_direction=reference_wave_direction,
        reference_direction=reference_direction,
        wave_modeling_option=wave_modeling_option,
        wave_group_inputs=wave_group_inputs,
        shallow_wave_inputs=shallow_wave_inputs,
        frequency_spectrum_method=frequency_spectrum_method,
        peak_shape_parameter=peak_shape_parameter,
        significant_wave_height=significant_wave_height,
        peak_frequency=peak_frequency,
        minimum_frequency=minimum_frequency,
        maximum_frequency=maximum_frequency,
        number_of_frequency_components=number_of_frequency_components,
        directional_spreading_method=directional_spreading_method,
        frequency_independent_cosine_exponent=frequency_independent_cosine_exponent,
        mean_wave_heading_angle=mean_wave_heading_angle,
        angular_deviation=angular_deviation,
        angular_components_count=angular_components_count,
        granular_temperature=granular_temperature,
        interfacial_area_concentration=interfacial_area_concentration,
        level_set_function_flux=level_set_function_flux,
        volume_fraction=volume_fraction,
        discrete_boundary_condition=discrete_boundary_condition,
        pb_disc=pb_disc,
        quadrature_moment_boundary_condition=quadrature_moment_boundary_condition,
        quadrature_moment_boundary_value=quadrature_moment_boundary_value,
        qbmm_boundary_condition=qbmm_boundary_condition,
        qbmm_boundary_value=qbmm_boundary_value,
        std_moment_boundary_condition=std_moment_boundary_condition,
        std_moment_boundary_value=std_moment_boundary_value,
        dqmom_boundary_condition=dqmom_boundary_condition,
        dqmom_boundary_value=dqmom_boundary_value,
    )
    _child_aliases = dict(
        ht_bottom=('bottom_level', 'ht-bottom'),
        ht_local=('free_surface_level', 'ht-local'),
        iac=('interfacial_area_concentration', 'iac'),
        lsfun=('level_set_function_flux', 'lsfun'),
        moving_object_direction_components=('moving_object_direction', 'moving-object-direction-components'),
        ocw_pp_power_coeff=('primary_phase_power_law_coefficient', 'ocw-pp-power-coeff'),
        ocw_pp_ref_ht=('primary_phase_reference_height_above_free_surface', 'ocw-pp-ref-ht'),
        ocw_pp_vel_spec=('primary_phase_velocity_specification_method', 'ocw-pp-vel-spec'),
        ocw_pp_vmag=('primary_phase_velocity', 'ocw-pp-vmag'),
        ocw_pp_vmag_ref=('primary_phase_reference_velocity', 'ocw-pp-vmag-ref'),
        ocw_ship_vel_spec=('moving_object_velocity_specification_method', 'ocw-ship-vel-spec'),
        ocw_ship_vmag=('moving_object_velocity', 'ocw-ship-vmag'),
        ocw_sp_vel_spec=('secondary_phase_velocity_specification_method', 'ocw-sp-vel-spec'),
        ocw_sp_vmag=('secondary_phase_velocity', 'ocw-sp-vmag'),
        ocw_vel_segregated=('segregated_velocity_inputs', 'ocw-vel-segregated?'),
        open_channel_wave_bc=('open_channel_wave_bc', 'open-channel-wave-bc?'),
        pb_disc_bc=('discrete_boundary_condition', 'pb-disc-bc'),
        pb_dqmom=('dqmom_boundary_value', 'pb-dqmom'),
        pb_dqmom_bc=('dqmom_boundary_condition', 'pb-dqmom-bc'),
        pb_qbmm=('qbmm_boundary_value', 'pb-qbmm'),
        pb_qbmm_bc=('qbmm_boundary_condition', 'pb-qbmm-bc'),
        pb_qmom=('quadrature_moment_boundary_value', 'pb-qmom'),
        pb_qmom_bc=('quadrature_moment_boundary_condition', 'pb-qmom-bc'),
        pb_smm=('std_moment_boundary_value', 'pb-smm'),
        pb_smm_bc=('std_moment_boundary_condition', 'pb-smm-bc'),
        phase_spec=('secondary_phase_for_inlet', 'phase-spec'),
        primary_phase_direction_components=('primary_phase_direction', 'primary-phase-direction-components'),
        secondary_phase_direction_components=('secondary_phase_direction', 'secondary-phase-direction-components'),
        wave_bc_type=('wave_option', 'wave-bc-type'),
        wave_components=('flow_velocity', 'wave-components'),
        wave_dir_spec=('reference_wave_direction', 'wave-dir-spec'),
        wave_list=('wave_group_inputs', 'wave-list'),
        wave_list_shallow=('shallow_wave_inputs', 'wave-list-shallow'),
        wave_modeling_type=('wave_modeling_option', 'wave-modeling-type'),
        wave_spect_deviation=('angular_deviation', 'wave-spect-deviation'),
        wave_spect_dir_components=('angular_components_count', 'wave-spect-dir-components'),
        wave_spect_factor=('peak_shape_parameter', 'wave-spect-factor'),
        wave_spect_freq_components=('number_of_frequency_components', 'wave-spect-freq-components'),
        wave_spect_max_freq=('maximum_frequency', 'wave-spect-max-freq'),
        wave_spect_mean_angle=('mean_wave_heading_angle', 'wave-spect-mean-angle'),
        wave_spect_method_dir=('directional_spreading_method', 'wave-spect-method-dir'),
        wave_spect_method_freq=('frequency_spectrum_method', 'wave-spect-method-freq'),
        wave_spect_min_freq=('minimum_frequency', 'wave-spect-min-freq'),
        wave_spect_peak_freq=('peak_frequency', 'wave-spect-peak-freq'),
        wave_spect_s=('frequency_independent_cosine_exponent', 'wave-spect-s'),
        wave_spect_sig_wave_ht=('significant_wave_height', 'wave-spect-sig-wave-ht'),
        wave_velocity_spec=('averaged_flow_specification_method', 'wave-velocity-spec'),
        wave_vmag=('avg_flow_velocity', 'wave-vmag'),
    )

class phase_24_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        momentum=momentum_10,
        turbulence=turbulence_5,
        thermal=thermal_5,
        radiation=radiation_6,
        species=species_7,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_6,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_24(NamedObject[phase_24_child], CreatableNamedObjectMixin[phase_24_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_24_child

class velocity_inlet_child(Group):
    """
    'child_object_type' of velocity_inlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'velocity_inlet_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_24,
        momentum=momentum_10,
        turbulence=turbulence_5,
        thermal=thermal_5,
        radiation=radiation_6,
        species=species_7,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_6,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class velocity_inlet(NamedObject[velocity_inlet_child], CreatableNamedObjectMixin[velocity_inlet_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'velocity-inlet'
    _python_name = 'velocity_inlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = velocity_inlet_child

class wall_motion(String, AllowedValuesMixin):
    """
    Wall Motion.
    """
    _version = '251'
    fluent_name = 'wall-motion'
    _python_name = 'wall_motion'

class moving(Boolean):
    """
    Apply a velocity to this wall?.
    """
    _version = '251'
    fluent_name = 'moving?'
    _python_name = 'moving'

class relative(Boolean):
    """
    Define wall motion relative to adjacent cell zone.
    """
    _version = '251'
    fluent_name = 'relative?'
    _python_name = 'relative'

class rotating(Boolean):
    """
    Apply a rotational velocity to this wall.
    """
    _version = '251'
    fluent_name = 'rotating?'
    _python_name = 'rotating'

class components_1(Boolean):
    """
    Define wall velocity components.
    """
    _version = '251'
    fluent_name = 'components?'
    _python_name = 'components'

class velocity_spec(String, AllowedValuesMixin):
    """
    Motion specification type.
    """
    _version = '251'
    fluent_name = 'velocity-spec'
    _python_name = 'velocity_spec'

class speed(Group):
    """
    Velocity Magnitude.
    """
    _version = '251'
    fluent_name = 'speed'
    _python_name = 'speed'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class rotation_speed(Group):
    """
    Rotation Speed.
    """
    _version = '251'
    fluent_name = 'rotation-speed'
    _python_name = 'rotation_speed'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class rotation_axis_origin_child(Real):
    """
    'child_object_type' of rotation_axis_origin.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'rotation_axis_origin_child'

class rotation_axis_origin(ListObject[rotation_axis_origin_child]):
    """
    Rotation axis origin components.
    """
    _version = '251'
    fluent_name = 'rotation-axis-origin'
    _python_name = 'rotation_axis_origin'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = rotation_axis_origin_child

class rotation_axis_direction_child(Real):
    """
    'child_object_type' of rotation_axis_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'rotation_axis_direction_child'

class rotation_axis_direction(ListObject[rotation_axis_direction_child]):
    """
    Rotation axis direction components.
    """
    _version = '251'
    fluent_name = 'rotation-axis-direction'
    _python_name = 'rotation_axis_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = rotation_axis_direction_child

class direction_2_child(Real):
    """
    'child_object_type' of direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'direction_child'

class direction_2(ListObject[direction_2_child]):
    """
    Wall translation components.
    """
    _version = '251'
    fluent_name = 'direction'
    _python_name = 'direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = direction_2_child

class shear_condition(String, AllowedValuesMixin):
    """
    Shear Condition.
    """
    _version = '251'
    fluent_name = 'shear-condition'
    _python_name = 'shear_condition'

class fsi_interface(Boolean):
    """
    FSI Interface.
    """
    _version = '251'
    fluent_name = 'fsi-interface?'
    _python_name = 'fsi_interface'

class periodic_displacement_child(Group):
    """
    'child_object_type' of periodic_displacement.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'periodic_displacement_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class periodic_displacement(ListObject[periodic_displacement_child]):
    """
    Periodic displacement components.
    """
    _version = '251'
    fluent_name = 'periodic-displacement'
    _python_name = 'periodic_displacement'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = periodic_displacement_child

class periodic_imaginary_displacement_child(Group):
    """
    'child_object_type' of periodic_imaginary_displacement.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'periodic_imaginary_displacement_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class periodic_imaginary_displacement(ListObject[periodic_imaginary_displacement_child]):
    """
    Periodic imaginary displacement components.
    """
    _version = '251'
    fluent_name = 'periodic-imaginary-displacement'
    _python_name = 'periodic_imaginary_displacement'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = periodic_imaginary_displacement_child

class frequency(Group):
    """
    Frequency of Periodic Displacement.
    """
    _version = '251'
    fluent_name = 'frequency'
    _python_name = 'frequency'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class amplitude_1(Group):
    """
    Amplitude of Periodic Displacement.
    """
    _version = '251'
    fluent_name = 'amplitude'
    _python_name = 'amplitude'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class nodal_diam(Integer):
    """
    Nodal Diameter for Periodic Displacement.
    """
    _version = '251'
    fluent_name = 'nodal-diam'
    _python_name = 'nodal_diam'

class passage_number(Group):
    """
    Passage Number for Periodic Displacement.
    """
    _version = '251'
    fluent_name = 'passage-number'
    _python_name = 'passage_number'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class fwd(Boolean):
    """
    Forward or Backward Travelling Wave.
    """
    _version = '251'
    fluent_name = 'fwd?'
    _python_name = 'fwd'

class aero(Boolean):
    """
    Enable Aerodamping Monitoring?.
    """
    _version = '251'
    fluent_name = 'aero?'
    _python_name = 'aero'

class cmplx(Boolean):
    """
    Complex Mode Shape?.
    """
    _version = '251'
    fluent_name = 'cmplx?'
    _python_name = 'cmplx'

class norm(Boolean):
    """
    Normalized profile?.
    """
    _version = '251'
    fluent_name = 'norm?'
    _python_name = 'norm'

class method_5(Integer):
    """
    Travelling Wave Method.
    """
    _version = '251'
    fluent_name = 'method?'
    _python_name = 'method'

class shear_stress_child(Group):
    """
    'child_object_type' of shear_stress.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'shear_stress_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class shear_stress(ListObject[shear_stress_child]):
    """
    Shear stress components.
    """
    _version = '251'
    fluent_name = 'shear-stress'
    _python_name = 'shear_stress'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = shear_stress_child

class fslip(Real):
    """
    Fslip constant.
    """
    _version = '251'
    fluent_name = 'fslip'
    _python_name = 'fslip'

class eslip(Real):
    """
    Eslip constant.
    """
    _version = '251'
    fluent_name = 'eslip'
    _python_name = 'eslip'

class surface_tension_gradient(Real):
    """
    Surface Tension Gradient.
    """
    _version = '251'
    fluent_name = 'surface-tension-gradient'
    _python_name = 'surface_tension_gradient'

class specified_shear(Boolean):
    """
    Shear stress?.
    """
    _version = '251'
    fluent_name = 'specified-shear?'
    _python_name = 'specified_shear'

class specularity_coeff(Real):
    """
    Specularity Coefficient.
    """
    _version = '251'
    fluent_name = 'specularity-coeff'
    _python_name = 'specularity_coeff'

class mom_accommodation_coeff(Real):
    """
    Momentum Accommodation Coefficient.
    """
    _version = '251'
    fluent_name = 'mom-accommodation-coeff'
    _python_name = 'mom_accommodation_coeff'

class momentum_11(Group):
    """
    Allows to change momentum model variables or settings.
    """
    _version = '251'
    fluent_name = 'momentum'
    _python_name = 'momentum'
    child_names = ['wall_motion', 'moving', 'relative', 'rotating', 'components', 'velocity_spec', 'speed', 'rotation_speed', 'rotation_axis_origin', 'rotation_axis_direction', 'direction', 'velocity_components', 'shear_condition', 'fsi_interface', 'periodic_displacement', 'periodic_imaginary_displacement', 'frequency', 'amplitude', 'nodal_diam', 'passage_number', 'fwd', 'aero', 'cmplx', 'norm', 'method', 'shear_stress', 'fslip', 'eslip', 'surface_tension_gradient', 'specified_shear', 'specularity_coeff', 'mom_accommodation_coeff']
    _child_classes = dict(
        wall_motion=wall_motion,
        moving=moving,
        relative=relative,
        rotating=rotating,
        components=components_1,
        velocity_spec=velocity_spec,
        speed=speed,
        rotation_speed=rotation_speed,
        rotation_axis_origin=rotation_axis_origin,
        rotation_axis_direction=rotation_axis_direction,
        direction=direction_2,
        velocity_components=velocity_components,
        shear_condition=shear_condition,
        fsi_interface=fsi_interface,
        periodic_displacement=periodic_displacement,
        periodic_imaginary_displacement=periodic_imaginary_displacement,
        frequency=frequency,
        amplitude=amplitude_1,
        nodal_diam=nodal_diam,
        passage_number=passage_number,
        fwd=fwd,
        aero=aero,
        cmplx=cmplx,
        norm=norm,
        method=method_5,
        shear_stress=shear_stress,
        fslip=fslip,
        eslip=eslip,
        surface_tension_gradient=surface_tension_gradient,
        specified_shear=specified_shear,
        specularity_coeff=specularity_coeff,
        mom_accommodation_coeff=mom_accommodation_coeff,
    )
    _child_aliases = dict(
        amp=('amplitude', 'amp'),
        api_motion_spec=('velocity_spec', 'api-motion-spec'),
        direction_component_of_rotation_axis=('rotation_axis_direction', 'direction-component-of-rotation-axis'),
        freq=('frequency', 'freq'),
        mom_accom_coef=('mom_accommodation_coeff', 'mom-accom-coef'),
        motion_bc=('wall_motion', 'motion-bc'),
        omega=('rotation_speed', 'omega'),
        pass_number=('passage_number', 'pass-number'),
        periodic_displacement_components=('periodic_displacement', 'periodic-displacement-components'),
        periodic_imaginary_displacement_components=('periodic_imaginary_displacement', 'periodic-imaginary-displacement-components'),
        position_of_rotation_axis=('rotation_axis_origin', 'position-of-rotation-axis'),
        shear_bc=('shear_condition', 'shear-bc'),
        shear_stress_components=('shear_stress', 'shear-stress-components'),
        specular_coeff=('specularity_coeff', 'specular-coeff'),
        surf_tens_grad=('surface_tension_gradient', 'surf-tens-grad'),
        vmag=('speed', 'vmag'),
        wall_translation_vector=('direction', 'wall-translation-vector'),
    )

class roughness_model(String, AllowedValuesMixin):
    """
    Wall Roughness Model.
    """
    _version = '251'
    fluent_name = 'roughness-model'
    _python_name = 'roughness_model'

class rough_option(Boolean):
    """
    Wall Roughness?.
    """
    _version = '251'
    fluent_name = 'rough-option?'
    _python_name = 'rough_option'

class rough_nasa(Boolean):
    """
    NASA sand-grain roughness model for icing?.
    """
    _version = '251'
    fluent_name = 'rough-nasa?'
    _python_name = 'rough_nasa'

class rough_shin_et_al(Boolean):
    """
    Shin-et-al sand-grain roughness model for icing ?.
    """
    _version = '251'
    fluent_name = 'rough-shin-et-al?'
    _python_name = 'rough_shin_et_al'

class rough_data(Boolean):
    """
    Variable Roughness From ICE3D?.
    """
    _version = '251'
    fluent_name = 'rough-data?'
    _python_name = 'rough_data'

class sand_grain_roughness(String, AllowedValuesMixin):
    """
    Sand-Grain Roughness type.
    """
    _version = '251'
    fluent_name = 'sand-grain-roughness'
    _python_name = 'sand_grain_roughness'

class roughness_height(Group):
    """
    Wall Roughness Height.
    """
    _version = '251'
    fluent_name = 'roughness-height'
    _python_name = 'roughness_height'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class roughness_const(Group):
    """
    Wall Roughness Constant.
    """
    _version = '251'
    fluent_name = 'roughness-const'
    _python_name = 'roughness_const'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class roughness_height_cp(Group):
    """
    Wall Roughness Height.
    """
    _version = '251'
    fluent_name = 'roughness-height-cp'
    _python_name = 'roughness_height_cp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class roughness_const_cp(Group):
    """
    Wall Roughness Constant.
    """
    _version = '251'
    fluent_name = 'roughness-const-cp'
    _python_name = 'roughness_const_cp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class roughness_const_nasa(Group):
    """
    Wall Roughness Constant.
    """
    _version = '251'
    fluent_name = 'roughness-const-nasa'
    _python_name = 'roughness_const_nasa'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class roughness_const_shin(Group):
    """
    Wall Roughness Constant.
    """
    _version = '251'
    fluent_name = 'roughness-const-shin'
    _python_name = 'roughness_const_shin'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class roughness_const_data(Group):
    """
    Wall Roughness Constant.
    """
    _version = '251'
    fluent_name = 'roughness-const-data'
    _python_name = 'roughness_const_data'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class variable_roughness(Group):
    """
    Variable Roughness Profile from ICE3D.
    """
    _version = '251'
    fluent_name = 'variable-roughness'
    _python_name = 'variable_roughness'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class free_stream_velocity(Real):
    """
    Free Stream Velocity.
    """
    _version = '251'
    fluent_name = 'free-stream-velocity'
    _python_name = 'free_stream_velocity'

class free_stream_temp(Real):
    """
    Free Stream Temperature.
    """
    _version = '251'
    fluent_name = 'free-stream-temp'
    _python_name = 'free_stream_temp'

class characteristic_length(Real):
    """
    Characteristic Length.
    """
    _version = '251'
    fluent_name = 'characteristic-length'
    _python_name = 'characteristic_length'

class free_stream_temp_cp(Real):
    """
    Free Stream Temperature.
    """
    _version = '251'
    fluent_name = 'free-stream-temp-cp'
    _python_name = 'free_stream_temp_cp'

class characteristic_length_cp(Real):
    """
    Characteristic Length.
    """
    _version = '251'
    fluent_name = 'characteristic-length-cp'
    _python_name = 'characteristic_length_cp'

class liquid_content(Group):
    """
    Liquid Content (in [g/m^3]).
    """
    _version = '251'
    fluent_name = 'liquid-content'
    _python_name = 'liquid_content'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class liquid_content_cp(Group):
    """
    Liquid Content (in [g/m^3]).
    """
    _version = '251'
    fluent_name = 'liquid-content-cp'
    _python_name = 'liquid_content_cp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class droplet_diameter(Group):
    """
    Droplet Diameter (microns).
    """
    _version = '251'
    fluent_name = 'droplet-diameter'
    _python_name = 'droplet_diameter'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class turbulence_6(Group):
    """
    Allows to change turbulence model variables or settings.
    """
    _version = '251'
    fluent_name = 'turbulence'
    _python_name = 'turbulence'
    child_names = ['roughness_model', 'rough_option', 'rough_nasa', 'rough_shin_et_al', 'rough_data', 'sand_grain_roughness', 'roughness_height', 'roughness_const', 'roughness_height_cp', 'roughness_const_cp', 'roughness_const_nasa', 'roughness_const_shin', 'roughness_const_data', 'variable_roughness', 'free_stream_velocity', 'free_stream_temp', 'characteristic_length', 'free_stream_temp_cp', 'characteristic_length_cp', 'liquid_content', 'liquid_content_cp', 'droplet_diameter']
    _child_classes = dict(
        roughness_model=roughness_model,
        rough_option=rough_option,
        rough_nasa=rough_nasa,
        rough_shin_et_al=rough_shin_et_al,
        rough_data=rough_data,
        sand_grain_roughness=sand_grain_roughness,
        roughness_height=roughness_height,
        roughness_const=roughness_const,
        roughness_height_cp=roughness_height_cp,
        roughness_const_cp=roughness_const_cp,
        roughness_const_nasa=roughness_const_nasa,
        roughness_const_shin=roughness_const_shin,
        roughness_const_data=roughness_const_data,
        variable_roughness=variable_roughness,
        free_stream_velocity=free_stream_velocity,
        free_stream_temp=free_stream_temp,
        characteristic_length=characteristic_length,
        free_stream_temp_cp=free_stream_temp_cp,
        characteristic_length_cp=characteristic_length_cp,
        liquid_content=liquid_content,
        liquid_content_cp=liquid_content_cp,
        droplet_diameter=droplet_diameter,
    )
    _child_aliases = dict(
        api_sand_grain_rough_spec=('sand_grain_roughness', 'api-sand-grain-rough-spec'),
        rough_bc=('roughness_model', 'rough-bc'),
    )

class thermal_condition(String, AllowedValuesMixin):
    """
    Thermal Conditions.
    """
    _version = '251'
    fluent_name = 'thermal-condition'
    _python_name = 'thermal_condition'

class heat_flux_1(Group):
    """
    Heat Flux.
    """
    _version = '251'
    fluent_name = 'heat-flux'
    _python_name = 'heat_flux'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class heat_transfer_coeff_1(Group):
    """
    Convective Heat Transfer Coefficient.
    """
    _version = '251'
    fluent_name = 'heat-transfer-coeff'
    _python_name = 'heat_transfer_coeff'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class free_stream_temp_1(Group):
    """
    Free Stream Temperature.
    """
    _version = '251'
    fluent_name = 'free-stream-temp'
    _python_name = 'free_stream_temp'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class external_emissivity(Group):
    """
    Emissivity.
    """
    _version = '251'
    fluent_name = 'external-emissivity'
    _python_name = 'external_emissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class ext_rad_temperature(Group):
    """
    External Radiation Temperature.
    """
    _version = '251'
    fluent_name = 'ext-rad-temperature'
    _python_name = 'ext_rad_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class wall_thickness_old(Real):
    """
    Wall Thickness.
    """
    _version = '251'
    fluent_name = 'wall-thickness-old'
    _python_name = 'wall_thickness_old'

class wall_thickness(Group):
    """
    Wall Thickness.
    """
    _version = '251'
    fluent_name = 'wall-thickness'
    _python_name = 'wall_thickness'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class heat_generation_rate(Group):
    """
    Heat Generation Rate.
    """
    _version = '251'
    fluent_name = 'heat-generation-rate'
    _python_name = 'heat_generation_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class enable_shell_conduction(Boolean):
    """
    Enable/disable shell conduction.
    """
    _version = '251'
    fluent_name = 'enable-shell-conduction?'
    _python_name = 'enable_shell_conduction'

class thickness(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'thickness'
    _python_name = 'thickness'

class material_6(String, AllowedValuesMixin):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'material'
    _python_name = 'material'

class qdot(Group):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'qdot'
    _python_name = 'qdot'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class conduction_layers_child(Group):
    """
    'child_object_type' of conduction_layers.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'conduction_layers_child'
    child_names = ['thickness', 'material', 'qdot']
    _child_classes = dict(
        thickness=thickness,
        material=material_6,
        qdot=qdot,
    )

class conduction_layers(ListObject[conduction_layers_child]):
    """
    List of Conduction Layers.
    """
    _version = '251'
    fluent_name = 'conduction-layers'
    _python_name = 'conduction_layers'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = conduction_layers_child

class thickness_1(Group):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'thickness'
    _python_name = 'thickness'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class thin_wall_child(Group):
    """
    'child_object_type' of thin_wall.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'thin_wall_child'
    child_names = ['thickness', 'material', 'qdot']
    _child_classes = dict(
        thickness=thickness_1,
        material=material_6,
        qdot=qdot,
    )

class thin_wall(ListObject[thin_wall_child]):
    """
    Conduction Layer.
    """
    _version = '251'
    fluent_name = 'thin-wall'
    _python_name = 'thin_wall'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = thin_wall_child

class radiating_to_fixed_temp(Boolean):
    """
    Enable/disable wall radiating to fixed temperature.
    """
    _version = '251'
    fluent_name = 'radiating-to-fixed-temp'
    _python_name = 'radiating_to_fixed_temp'

class internal_radiation_temp(Real):
    """
    Internal Radiation Temperature.
    """
    _version = '251'
    fluent_name = 'internal-radiation-temp'
    _python_name = 'internal_radiation_temp'

class area_enhancement_factor(Group):
    """
    Area Enhancement Factor.
    """
    _version = '251'
    fluent_name = 'area-enhancement-factor'
    _python_name = 'area_enhancement_factor'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class contact_resistance_1(Group):
    """
    Contact Resistance.
    """
    _version = '251'
    fluent_name = 'contact-resistance'
    _python_name = 'contact_resistance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class therm_accom_coef(Real):
    """
    Thermal Accommodation Coefficient.
    """
    _version = '251'
    fluent_name = 'therm-accom-coef'
    _python_name = 'therm_accom_coef'

class eve_accom_coef(Real):
    """
    Vibrational-Electronic Accommodation Coefficient.
    """
    _version = '251'
    fluent_name = 'eve-accom-coef'
    _python_name = 'eve_accom_coef'

class caf(Group):
    """
    Convective Augmentation Factor.
    """
    _version = '251'
    fluent_name = 'caf'
    _python_name = 'caf'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class thermal_stabilization(Boolean):
    """
    Enable Thermal Stabilization?.
    """
    _version = '251'
    fluent_name = 'thermal-stabilization?'
    _python_name = 'thermal_stabilization'

class scale_factor_1(Real):
    """
    Scale Factor.
    """
    _version = '251'
    fluent_name = 'scale-factor'
    _python_name = 'scale_factor'

class stab_method(String, AllowedValuesMixin):
    """
    Stabilization Method.
    """
    _version = '251'
    fluent_name = 'stab-method'
    _python_name = 'stab_method'

class boundary_advection(Boolean):
    """
    Boundary Advection?.
    """
    _version = '251'
    fluent_name = 'boundary-advection'
    _python_name = 'boundary_advection'

class thermal_6(Group):
    """
    Allows to change thermal model variables or settings.
    """
    _version = '251'
    fluent_name = 'thermal'
    _python_name = 'thermal'
    child_names = ['thermal_condition', 'material', 'heat_flux', 'temperature', 'heat_transfer_coeff', 'free_stream_temp', 'external_emissivity', 'ext_rad_temperature', 'wall_thickness_old', 'wall_thickness', 'heat_generation_rate', 'enable_shell_conduction', 'conduction_layers', 'thin_wall', 'radiating_to_fixed_temp', 'internal_radiation_temp', 'area_enhancement_factor', 'contact_resistance', 'therm_accom_coef', 'eve_accom_coef', 'caf', 'thermal_stabilization', 'scale_factor', 'stab_method', 'boundary_advection']
    _child_classes = dict(
        thermal_condition=thermal_condition,
        material=material_5,
        heat_flux=heat_flux_1,
        temperature=temperature_1,
        heat_transfer_coeff=heat_transfer_coeff_1,
        free_stream_temp=free_stream_temp_1,
        external_emissivity=external_emissivity,
        ext_rad_temperature=ext_rad_temperature,
        wall_thickness_old=wall_thickness_old,
        wall_thickness=wall_thickness,
        heat_generation_rate=heat_generation_rate,
        enable_shell_conduction=enable_shell_conduction,
        conduction_layers=conduction_layers,
        thin_wall=thin_wall,
        radiating_to_fixed_temp=radiating_to_fixed_temp,
        internal_radiation_temp=internal_radiation_temp,
        area_enhancement_factor=area_enhancement_factor,
        contact_resistance=contact_resistance_1,
        therm_accom_coef=therm_accom_coef,
        eve_accom_coef=eve_accom_coef,
        caf=caf,
        thermal_stabilization=thermal_stabilization,
        scale_factor=scale_factor_1,
        stab_method=stab_method,
        boundary_advection=boundary_advection,
    )
    _child_aliases = dict(
        boundary_advection=('boundary_advection', 'boundary-advection?'),
        d=('wall_thickness', 'd'),
        d_constant=('wall_thickness_old', 'd-constant'),
        ex_emiss=('external_emissivity', 'ex-emiss'),
        h=('heat_transfer_coeff', 'h'),
        int_rad=('radiating_to_fixed_temp', 'int-rad?'),
        planar_conduction=('enable_shell_conduction', 'planar-conduction?'),
        q=('heat_flux', 'q'),
        q_dot=('heat_generation_rate', 'q-dot'),
        shell_conduction=('conduction_layers', 'shell-conduction'),
        t=('temperature', 't'),
        thermal_bc=('thermal_condition', 'thermal-bc'),
        tinf=('free_stream_temp', 'tinf'),
        trad=('ext_rad_temperature', 'trad'),
        trad_internal=('internal_radiation_temp', 'trad-internal'),
    )

class bc_type_2(String, AllowedValuesMixin):
    """
    Radiation BC Type.
    """
    _version = '251'
    fluent_name = 'bc-type'
    _python_name = 'bc_type'

class boundary_source(Boolean):
    """
    Enable/disable Boundary Source.
    """
    _version = '251'
    fluent_name = 'boundary-source?'
    _python_name = 'boundary_source'

class polar_distribution_function(Boolean):
    """
    Enable/disable Polar Distribution Function.
    """
    _version = '251'
    fluent_name = 'polar-distribution-function?'
    _python_name = 'polar_distribution_function'

class polar_func_type(String, AllowedValuesMixin):
    """
    Polar Function Type.
    """
    _version = '251'
    fluent_name = 'polar-func-type'
    _python_name = 'polar_func_type'

class polar_expression(Real):
    """
    Polar Expression.
    """
    _version = '251'
    fluent_name = 'polar-expression'
    _python_name = 'polar_expression'

class polar_real_angle(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'polar-real-angle'
    _python_name = 'polar_real_angle'

class polar_real_intensity(Real):
    """
    Element.
    """
    _version = '251'
    fluent_name = 'polar-real-intensity'
    _python_name = 'polar_real_intensity'

class polar_data_pairs_child(Group):
    """
    'child_object_type' of polar_data_pairs.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'polar_data_pairs_child'
    child_names = ['polar_real_angle', 'polar_real_intensity']
    _child_classes = dict(
        polar_real_angle=polar_real_angle,
        polar_real_intensity=polar_real_intensity,
    )

class polar_data_pairs(ListObject[polar_data_pairs_child]):
    """
    Polar data pairs.
    """
    _version = '251'
    fluent_name = 'polar-data-pairs'
    _python_name = 'polar_data_pairs'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = polar_data_pairs_child

class file_name_1_10(Filename, _InputFile):
    """
    Name of input CSV file.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class read_polar_dist_func_from_file(Command):
    """
    Read polar distribution function from file.
    
    Parameters
    ----------
        file_name_1 : str
            Name of input CSV file.
    """
    _version = '251'
    fluent_name = 'read-polar-dist-func-from-file?'
    _python_name = 'read_polar_dist_func_from_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_10,
    )

class file_name_12(Filename, _OutputFile):
    """
    Name of output CSV file.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class write_polar_dist_func_to_file(Command):
    """
    Write polar distribution function to file.
    
    Parameters
    ----------
        file_name : str
            Name of output CSV file.
    """
    _version = '251'
    fluent_name = 'write-polar-dist-func-to-file?'
    _python_name = 'write_polar_dist_func_to_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_12,
    )

class polar_distribution_function_settings(Group):
    """
    Polar distribution function settings.
    """
    _version = '251'
    fluent_name = 'polar-distribution-function-settings'
    _python_name = 'polar_distribution_function_settings'
    child_names = ['polar_func_type', 'polar_expression', 'polar_data_pairs']
    command_names = ['read_polar_dist_func_from_file', 'write_polar_dist_func_to_file']
    _child_classes = dict(
        polar_func_type=polar_func_type,
        polar_expression=polar_expression,
        polar_data_pairs=polar_data_pairs,
        read_polar_dist_func_from_file=read_polar_dist_func_from_file,
        write_polar_dist_func_to_file=write_polar_dist_func_to_file,
    )
    _child_aliases = dict(
        mc_polar_expr=('polar_expression', 'mc-polar-expr'),
        polar_pair_list=('polar_data_pairs', 'polar-pair-list'),
    )

class theta(Real):
    """
    Theta Width of Beam.
    """
    _version = '251'
    fluent_name = 'theta'
    _python_name = 'theta'

class coll_dphi(Real):
    """
    Phi Width of Beam.
    """
    _version = '251'
    fluent_name = 'coll-dphi'
    _python_name = 'coll_dphi'

class beam_width(Group):
    """
    Beam width settings.
    """
    _version = '251'
    fluent_name = 'beam-width'
    _python_name = 'beam_width'
    child_names = ['theta', 'coll_dphi']
    _child_classes = dict(
        theta=theta,
        coll_dphi=coll_dphi,
    )
    _child_aliases = dict(
        coll_dtheta=('theta', 'coll-dtheta'),
    )

class solar_direction(Boolean):
    """
    Use Beam Direction from Solar Load Model Settings.
    """
    _version = '251'
    fluent_name = 'solar-direction?'
    _python_name = 'solar_direction'

class solar_irradiation(Boolean):
    """
    Use Irradiation from Solar Load Model Settings.
    """
    _version = '251'
    fluent_name = 'solar-irradiation?'
    _python_name = 'solar_irradiation'

class reference_direction_1_child(Group):
    """
    'child_object_type' of reference_direction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'reference_direction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class reference_direction_1(ListObject[reference_direction_1_child]):
    """
    Radiation direction components.
    """
    _version = '251'
    fluent_name = 'reference-direction'
    _python_name = 'reference_direction'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = reference_direction_1_child

class direct_irradiation_settings(Group):
    """
    Direct irradiation settings.
    """
    _version = '251'
    fluent_name = 'direct-irradiation-settings'
    _python_name = 'direct_irradiation_settings'
    child_names = ['direct_irradiation', 'parallel_collimated_beam', 'reference_direction']
    _child_classes = dict(
        direct_irradiation=direct_irradiation,
        parallel_collimated_beam=parallel_collimated_beam,
        reference_direction=reference_direction_1,
    )
    _child_aliases = dict(
        band_q_irrad=('direct_irradiation', 'band-q-irrad'),
        component_of_radiation_direction=('reference_direction', 'component-of-radiation-direction'),
    )

class diffuse_irradiation_band_child(Group):
    """
    'child_object_type' of diffuse_irradiation_band.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'diffuse_irradiation_band_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class diffuse_irradiation_band(NamedObject[diffuse_irradiation_band_child], CreatableNamedObjectMixin[diffuse_irradiation_band_child]):
    """
    Settings for diffuse irradiation on this boundary.
    """
    _version = '251'
    fluent_name = 'diffuse-irradiation-band'
    _python_name = 'diffuse_irradiation_band'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = diffuse_irradiation_band_child

class diffuse_fraction_band_child(Real):
    """
    'child_object_type' of diffuse_fraction_band.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'diffuse_fraction_band_child'

class diffuse_fraction_band(NamedObject[diffuse_fraction_band_child], CreatableNamedObjectMixin[diffuse_fraction_band_child]):
    """
    Diffuse fraction.
    """
    _version = '251'
    fluent_name = 'diffuse-fraction-band'
    _python_name = 'diffuse_fraction_band'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = diffuse_fraction_band_child

class diffuse_irradiation_settings(Group):
    """
    Diffuse irradiation settings.
    """
    _version = '251'
    fluent_name = 'diffuse-irradiation-settings'
    _python_name = 'diffuse_irradiation_settings'
    child_names = ['diffuse_irradiation_band', 'diffuse_fraction_band']
    _child_classes = dict(
        diffuse_irradiation_band=diffuse_irradiation_band,
        diffuse_fraction_band=diffuse_fraction_band,
    )
    _child_aliases = dict(
        band_diffuse_frac=('diffuse_fraction_band', 'band-diffuse-frac'),
        band_q_irrad_diffuse=('diffuse_irradiation_band', 'band-q-irrad-diffuse'),
    )

class internal_emissivity_band_child(Group):
    """
    'child_object_type' of internal_emissivity_band.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'internal_emissivity_band_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class internal_emissivity_band(NamedObject[internal_emissivity_band_child], CreatableNamedObjectMixin[internal_emissivity_band_child]):
    """
    Internal emissivity.
    """
    _version = '251'
    fluent_name = 'internal-emissivity-band'
    _python_name = 'internal_emissivity_band'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = internal_emissivity_band_child

class critical_zone(Boolean):
    """
    Critical Zone.
    """
    _version = '251'
    fluent_name = 'critical-zone?'
    _python_name = 'critical_zone'

class faces_per_surface_cluster(Integer):
    """
    Faces Per Surface Cluster.
    """
    _version = '251'
    fluent_name = 'faces-per-surface-cluster'
    _python_name = 'faces_per_surface_cluster'

class v_transmissivity(Group):
    """
    Direct Visible (Transmissivity).
    """
    _version = '251'
    fluent_name = 'v-transmissivity'
    _python_name = 'v_transmissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class ir_transmissivity(Group):
    """
    Direct IR (Transmissivity).
    """
    _version = '251'
    fluent_name = 'ir-transmissivity'
    _python_name = 'ir_transmissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class d_transmissivity(Group):
    """
    Diffuse Hemispherical (Transmissivity).
    """
    _version = '251'
    fluent_name = 'd-transmissivity'
    _python_name = 'd_transmissivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class transmissivity(Group):
    """
    Transmissivity settings.
    """
    _version = '251'
    fluent_name = 'transmissivity'
    _python_name = 'transmissivity'
    child_names = ['v_transmissivity', 'ir_transmissivity', 'd_transmissivity']
    _child_classes = dict(
        v_transmissivity=v_transmissivity,
        ir_transmissivity=ir_transmissivity,
        d_transmissivity=d_transmissivity,
    )

class v_opq_absorbtivity(Group):
    """
    Direct Visible (Absorptivity).
    """
    _version = '251'
    fluent_name = 'v-opq-absorbtivity'
    _python_name = 'v_opq_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class v_st_absorbtivity(Group):
    """
    Direct Visible (Absorptivity).
    """
    _version = '251'
    fluent_name = 'v-st-absorbtivity'
    _python_name = 'v_st_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class ir_opq_absorbtivity(Group):
    """
    Direct IR (Absorptivity).
    """
    _version = '251'
    fluent_name = 'ir-opq-absorbtivity'
    _python_name = 'ir_opq_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class ir_st_absorbtivity(Group):
    """
    Direct IR (Absorptivity).
    """
    _version = '251'
    fluent_name = 'ir-st-absorbtivity'
    _python_name = 'ir_st_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class d_st_absorbtivity(Group):
    """
    Diffuse Hemispherical (Absorptivity).
    """
    _version = '251'
    fluent_name = 'd-st-absorbtivity'
    _python_name = 'd_st_absorbtivity'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class absorptivity(Group):
    """
    Absorptivity settings.
    """
    _version = '251'
    fluent_name = 'absorptivity'
    _python_name = 'absorptivity'
    child_names = ['v_opq_absorbtivity', 'v_st_absorbtivity', 'ir_opq_absorbtivity', 'ir_st_absorbtivity', 'd_st_absorbtivity']
    _child_classes = dict(
        v_opq_absorbtivity=v_opq_absorbtivity,
        v_st_absorbtivity=v_st_absorbtivity,
        ir_opq_absorbtivity=ir_opq_absorbtivity,
        ir_st_absorbtivity=ir_st_absorbtivity,
        d_st_absorbtivity=d_st_absorbtivity,
    )

class radiation_7(Group):
    """
    Radiation settings for this boundary-condition.
    """
    _version = '251'
    fluent_name = 'radiation'
    _python_name = 'radiation'
    child_names = ['bc_type', 'boundary_source', 'polar_distribution_function', 'polar_distribution_function_settings', 'beam_width', 'solar_direction', 'solar_irradiation', 'direct_irradiation_settings', 'diffuse_irradiation_settings', 'internal_emissivity', 'internal_emissivity_band', 'radiating_s2s_surface', 'critical_zone', 'faces_per_surface_cluster', 'solar_fluxes', 'transmissivity', 'absorptivity']
    _child_classes = dict(
        bc_type=bc_type_2,
        boundary_source=boundary_source,
        polar_distribution_function=polar_distribution_function,
        polar_distribution_function_settings=polar_distribution_function_settings,
        beam_width=beam_width,
        solar_direction=solar_direction,
        solar_irradiation=solar_irradiation,
        direct_irradiation_settings=direct_irradiation_settings,
        diffuse_irradiation_settings=diffuse_irradiation_settings,
        internal_emissivity=internal_emissivity,
        internal_emissivity_band=internal_emissivity_band,
        radiating_s2s_surface=radiating_s2s_surface,
        critical_zone=critical_zone,
        faces_per_surface_cluster=faces_per_surface_cluster,
        solar_fluxes=solar_fluxes,
        transmissivity=transmissivity,
        absorptivity=absorptivity,
    )
    _child_aliases = dict(
        band_in_emiss=('internal_emissivity_band', 'band-in-emiss'),
        fpsc=('faces_per_surface_cluster', 'fpsc'),
        in_emiss=('internal_emissivity', 'in-emiss'),
        mc_bsource_p=('boundary_source', 'mc-bsource-p?'),
        mc_poldfun_p=('polar_distribution_function', 'mc-poldfun-p?'),
        radiation_bc=('bc_type', 'radiation-bc'),
    )

class react_1(Boolean):
    """
    Activate Reaction.
    """
    _version = '251'
    fluent_name = 'react?'
    _python_name = 'react'

class partially_catalytic(Boolean):
    """
    Activate Partially Catalytic Wall.
    """
    _version = '251'
    fluent_name = 'partially-catalytic?'
    _python_name = 'partially_catalytic'

class partially_catalytic_material(String, AllowedValuesMixin):
    """
    Material Options.
    """
    _version = '251'
    fluent_name = 'partially-catalytic-material'
    _python_name = 'partially_catalytic_material'

class partially_catalytic_recombination_coefficient_o(Group):
    """
    Recombination Coefficient For o.
    """
    _version = '251'
    fluent_name = 'partially-catalytic-recombination-coefficient-o'
    _python_name = 'partially_catalytic_recombination_coefficient_o'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class partially_catalytic_recombination_coefficient_n(Group):
    """
    Recombination Coefficient For n.
    """
    _version = '251'
    fluent_name = 'partially-catalytic-recombination-coefficient-n'
    _python_name = 'partially_catalytic_recombination_coefficient_n'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class partially_catalytic_recombination_model(String, AllowedValuesMixin):
    """
    Recombination Coefficient Model.
    """
    _version = '251'
    fluent_name = 'partially-catalytic-recombination-model'
    _python_name = 'partially_catalytic_recombination_model'

class species_boundary_conditions_child(String, AllowedValuesMixin):
    """
    'child_object_type' of species_boundary_conditions.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'species_boundary_conditions_child'

class species_boundary_conditions(NamedObject[species_boundary_conditions_child], CreatableNamedObjectMixin[species_boundary_conditions_child]):
    """
    Species Boundary Conditions.
    """
    _version = '251'
    fluent_name = 'species-boundary-conditions'
    _python_name = 'species_boundary_conditions'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_boundary_conditions_child

class species_mass_fraction_or_flux_child(Group):
    """
    'child_object_type' of species_mass_fraction_or_flux.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'species_mass_fraction_or_flux_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class species_mass_fraction_or_flux(NamedObject[species_mass_fraction_or_flux_child], CreatableNamedObjectMixin[species_mass_fraction_or_flux_child]):
    """
    List of Species mass fractions or mole fractions.
    """
    _version = '251'
    fluent_name = 'species-mass-fraction-or-flux'
    _python_name = 'species_mass_fraction_or_flux'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_mass_fraction_or_flux_child

class surf_washcoat_factor(Real):
    """
    Surface Area Washcoat Factor.
    """
    _version = '251'
    fluent_name = 'surf-washcoat-factor'
    _python_name = 'surf_washcoat_factor'

class initial_deposition_height(Real):
    """
    Initial Deposition Thickness.
    """
    _version = '251'
    fluent_name = 'initial-deposition-height'
    _python_name = 'initial_deposition_height'

class solid_species_density(Real):
    """
    Solid Species Density.
    """
    _version = '251'
    fluent_name = 'solid-species-density'
    _python_name = 'solid_species_density'

class species_10(Group):
    """
    Allows to change species model variables or settings.
    """
    _version = '251'
    fluent_name = 'species'
    _python_name = 'species'
    child_names = ['react', 'partially_catalytic', 'partially_catalytic_material', 'partially_catalytic_recombination_coefficient_o', 'partially_catalytic_recombination_coefficient_n', 'partially_catalytic_recombination_model', 'species_boundary_conditions', 'species_mass_fraction_or_flux', 'reaction_mechs', 'surf_washcoat_factor', 'initial_deposition_height', 'solid_species_density']
    _child_classes = dict(
        react=react_1,
        partially_catalytic=partially_catalytic,
        partially_catalytic_material=partially_catalytic_material,
        partially_catalytic_recombination_coefficient_o=partially_catalytic_recombination_coefficient_o,
        partially_catalytic_recombination_coefficient_n=partially_catalytic_recombination_coefficient_n,
        partially_catalytic_recombination_model=partially_catalytic_recombination_model,
        species_boundary_conditions=species_boundary_conditions,
        species_mass_fraction_or_flux=species_mass_fraction_or_flux,
        reaction_mechs=reaction_mechs_1,
        surf_washcoat_factor=surf_washcoat_factor,
        initial_deposition_height=initial_deposition_height,
        solid_species_density=solid_species_density,
    )
    _child_aliases = dict(
        mf=('species_mass_fraction_or_flux', 'mf'),
        species_spec=('species_boundary_conditions', 'species-spec'),
    )

class particle_wall_heat_exchange_enabled(Boolean):
    """
    Particle-Wall Heat Exchange.
    """
    _version = '251'
    fluent_name = 'particle-wall-heat-exchange-enabled?'
    _python_name = 'particle_wall_heat_exchange_enabled'

class normal(Group):
    """
    The normal coefficient of restitution.
    """
    _version = '251'
    fluent_name = 'normal'
    _python_name = 'normal'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class tangential(Group):
    """
    The tangential coefficient of restitution.
    """
    _version = '251'
    fluent_name = 'tangential'
    _python_name = 'tangential'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class reflection_coefficients(Group):
    """
    Discrete Phase Wall Reflection Coefficients.
    """
    _version = '251'
    fluent_name = 'reflection-coefficients'
    _python_name = 'reflection_coefficients'
    child_names = ['normal', 'tangential']
    _child_classes = dict(
        normal=normal,
        tangential=tangential,
    )
    _child_aliases = dict(
        dpm_bc_norm_coeff=('normal', 'dpm/bc-norm-coeff'),
        dpm_bc_tang_coeff=('tangential', 'dpm/bc-tang-coeff'),
    )

class film_condensation_enabled(Boolean):
    """
    Enable Film Condensation?.
    """
    _version = '251'
    fluent_name = 'film-condensation-enabled?'
    _python_name = 'film_condensation_enabled'

class gas_side_boundary_layer_model_enabled(Boolean):
    """
    Enable Gas-Side Boundary Layer Model?.
    """
    _version = '251'
    fluent_name = 'gas-side-boundary-layer-model-enabled?'
    _python_name = 'gas_side_boundary_layer_model_enabled'

class lwf_to_vof_enabled(Boolean):
    """
    Allow Lagrangian Wall Film-to-VOF transition?.
    """
    _version = '251'
    fluent_name = 'lwf-to-vof-enabled?'
    _python_name = 'lwf_to_vof_enabled'

class vof_to_lwf_enabled(Boolean):
    """
    Allow VOF-to-Lagrangian Wall Film transition?.
    """
    _version = '251'
    fluent_name = 'vof-to-lwf-enabled?'
    _python_name = 'vof_to_lwf_enabled'

class model_4(String, AllowedValuesMixin):
    """
    The DPM wall-film impingement/splashing model.
    """
    _version = '251'
    fluent_name = 'model'
    _python_name = 'model'

class number_of_splashed_drops(Integer):
    """
    Number of Splashed Drops .
    """
    _version = '251'
    fluent_name = 'number-of-splashed-drops'
    _python_name = 'number_of_splashed_drops'

class critical_temperature_option(String, AllowedValuesMixin):
    """
    Critical Temperature Option (0: Temperature Factor, 1: Calibratable Temperature) .
    """
    _version = '251'
    fluent_name = 'critical-temperature-option'
    _python_name = 'critical_temperature_option'

class critical_temperature_factor(Real):
    """
    Temperature Factor .
    """
    _version = '251'
    fluent_name = 'critical-temperature-factor'
    _python_name = 'critical_temperature_factor'

class critical_temperature_offset(Real):
    """
    Calibratable Temperature .
    """
    _version = '251'
    fluent_name = 'critical-temperature-offset'
    _python_name = 'critical_temperature_offset'

class upper_deposition_limit_offset(Real):
    """
    Upper Deposition Limit Offset .
    """
    _version = '251'
    fluent_name = 'upper-deposition-limit-offset'
    _python_name = 'upper_deposition_limit_offset'

class deposition_delta_t(Real):
    """
    Deposition Delta T .
    """
    _version = '251'
    fluent_name = 'deposition-delta-t'
    _python_name = 'deposition_delta_t'

class laplace_number_constant(Real):
    """
    Laplace Number Constant .
    """
    _version = '251'
    fluent_name = 'laplace-number-constant'
    _python_name = 'laplace_number_constant'

class partial_evaporation_ratio(Real):
    """
    Partial Evaporation Ratio .
    """
    _version = '251'
    fluent_name = 'partial-evaporation-ratio'
    _python_name = 'partial_evaporation_ratio'

class regime_parameters(Group):
    """
    Wall-film model impingement / splashing model regime parameters.
    """
    _version = '251'
    fluent_name = 'regime-parameters'
    _python_name = 'regime_parameters'
    child_names = ['critical_temperature_option', 'critical_temperature_factor', 'critical_temperature_offset', 'upper_deposition_limit_offset', 'deposition_delta_t', 'laplace_number_constant', 'partial_evaporation_ratio']
    _child_classes = dict(
        critical_temperature_option=critical_temperature_option,
        critical_temperature_factor=critical_temperature_factor,
        critical_temperature_offset=critical_temperature_offset,
        upper_deposition_limit_offset=upper_deposition_limit_offset,
        deposition_delta_t=deposition_delta_t,
        laplace_number_constant=laplace_number_constant,
        partial_evaporation_ratio=partial_evaporation_ratio,
    )
    _child_aliases = dict(
        dpm_a_wet=('laplace_number_constant', 'dpm/a-wet'),
        dpm_calibratable_temp=('critical_temperature_offset', 'dpm/calibratable-temp'),
        dpm_crit_temp_factor=('critical_temperature_factor', 'dpm/crit-temp-factor'),
        dpm_crit_temp_option=('critical_temperature_option', 'dpm/crit-temp-option'),
        dpm_partial_evap_ratio=('partial_evaporation_ratio', 'dpm/partial-evap-ratio'),
        dpm_t_delta=('deposition_delta_t', 'dpm/t-delta'),
        dpm_t_deposition_offset=('upper_deposition_limit_offset', 'dpm/t-deposition-offset'),
    )

class impingement_splashing(Group):
    """
    Wall-film model impingement / splashing parameters.
    """
    _version = '251'
    fluent_name = 'impingement-splashing'
    _python_name = 'impingement_splashing'
    child_names = ['model', 'number_of_splashed_drops', 'regime_parameters']
    _child_classes = dict(
        model=model_4,
        number_of_splashed_drops=number_of_splashed_drops,
        regime_parameters=regime_parameters,
    )
    _child_aliases = dict(
        dpm_film_splash_nsamp=('number_of_splashed_drops', 'dpm/film-splash-nsamp'),
        dpm_imping_splash_model=('model', 'dpm/imping-splash-model'),
    )

class ra(Real):
    """
    Ra.
    """
    _version = '251'
    fluent_name = 'ra'
    _python_name = 'ra'

class rz(Real):
    """
    Rz.
    """
    _version = '251'
    fluent_name = 'rz'
    _python_name = 'rz'

class rq(Real):
    """
    Rq.
    """
    _version = '251'
    fluent_name = 'rq'
    _python_name = 'rq'

class rsm(Real):
    """
    RSm.
    """
    _version = '251'
    fluent_name = 'rsm'
    _python_name = 'rsm'

class wall_roughness_parameters(Group):
    """
    Wall roughness parameters.
    """
    _version = '251'
    fluent_name = 'wall-roughness-parameters'
    _python_name = 'wall_roughness_parameters'
    child_names = ['ra', 'rz', 'rq', 'rsm']
    _child_classes = dict(
        ra=ra,
        rz=rz,
        rq=rq,
        rsm=rsm,
    )
    _child_aliases = dict(
        dpm_ra_roughness=('ra', 'dpm/ra-roughness'),
        dpm_rq_roughness=('rq', 'dpm/rq-roughness'),
        dpm_rsm_roughness=('rsm', 'dpm/rsm-roughness'),
        dpm_rz_roughness=('rz', 'dpm/rz-roughness'),
    )

class friction_coefficient(Group):
    """
    Friction Coefficient.
    """
    _version = '251'
    fluent_name = 'friction-coefficient'
    _python_name = 'friction_coefficient'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class model_5(String, AllowedValuesMixin):
    """
    The DPM wall-film separation model.
    """
    _version = '251'
    fluent_name = 'model'
    _python_name = 'model'

class critical_weber_number_1(Real):
    """
    Critical Weber Number.
    """
    _version = '251'
    fluent_name = 'critical-weber-number'
    _python_name = 'critical_weber_number'

class separation_angle(Real):
    """
    Film Separation Angle.
    """
    _version = '251'
    fluent_name = 'separation-angle'
    _python_name = 'separation_angle'

class film_separation(Group):
    """
    Wall film separation model parameters.
    """
    _version = '251'
    fluent_name = 'film-separation'
    _python_name = 'film_separation'
    child_names = ['model', 'critical_weber_number', 'separation_angle']
    _child_classes = dict(
        model=model_5,
        critical_weber_number=critical_weber_number_1,
        separation_angle=separation_angle,
    )
    _child_aliases = dict(
        dpm_critical_we_number=('critical_weber_number', 'dpm/critical-we-number'),
        dpm_film_separation_angle=('separation_angle', 'dpm/film-separation-angle'),
        dpm_film_separation_model=('model', 'dpm/film-separation-model'),
    )

class enabled_40(Boolean):
    """
    Enable Particle Stripping?.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class critical_shear_stress(Real):
    """
    Critical Shear Stress .
    """
    _version = '251'
    fluent_name = 'critical-shear-stress'
    _python_name = 'critical_shear_stress'

class film_particle_stripping(Group):
    """
    Settings for stripping of particles from the film.
    """
    _version = '251'
    fluent_name = 'film-particle-stripping'
    _python_name = 'film_particle_stripping'
    child_names = ['enabled', 'critical_shear_stress']
    _child_classes = dict(
        enabled=enabled_40,
        critical_shear_stress=critical_shear_stress,
    )
    _child_aliases = dict(
        dpm_crit_stripping_const=('critical_shear_stress', 'dpm/crit-stripping-const'),
        dpm_film_stripping=('enabled', 'dpm/film-stripping?'),
    )

class enabled_41(Boolean):
    """
    Initialize Wall Film?.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class film_height(Real):
    """
    Film Height .
    """
    _version = '251'
    fluent_name = 'film-height'
    _python_name = 'film_height'

class film_velocity_child(Real):
    """
    'child_object_type' of film_velocity.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'film_velocity_child'

class film_velocity(ListObject[film_velocity_child]):
    """
    Film velocity components.
    """
    _version = '251'
    fluent_name = 'film-velocity'
    _python_name = 'film_velocity'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = film_velocity_child

class film_temperature(Real):
    """
    Film Temperature.
    """
    _version = '251'
    fluent_name = 'film-temperature'
    _python_name = 'film_temperature'

class injection(String, AllowedValuesMixin):
    """
    Initialize From Injection .
    """
    _version = '251'
    fluent_name = 'injection'
    _python_name = 'injection'

class min_parcels_per_unit_area(Real):
    """
    Minimum Film Parcel Surface Density.
    """
    _version = '251'
    fluent_name = 'min-parcels-per-unit-area'
    _python_name = 'min_parcels_per_unit_area'

class min_parcels_per_facet(Integer):
    """
    Minimum Number Of Parcels Per Face.
    """
    _version = '251'
    fluent_name = 'min-parcels-per-facet'
    _python_name = 'min_parcels_per_facet'

class do_initialization_now(Command):
    """
    Apply All settings and initialize film on selected wall(s) Now?.
    """
    _version = '251'
    fluent_name = 'do-initialization-now'
    _python_name = 'do_initialization_now'

class film_initialization(Group):
    """
    Patch an initial film, uniformly distributed on the entire wall zone, to begin the calculation with, based on specified film properties.
    """
    _version = '251'
    fluent_name = 'film-initialization'
    _python_name = 'film_initialization'
    child_names = ['enabled', 'film_height', 'film_velocity', 'film_temperature', 'injection', 'min_parcels_per_unit_area', 'min_parcels_per_facet']
    command_names = ['do_initialization_now']
    _child_classes = dict(
        enabled=enabled_41,
        film_height=film_height,
        film_velocity=film_velocity,
        film_temperature=film_temperature,
        injection=injection,
        min_parcels_per_unit_area=min_parcels_per_unit_area,
        min_parcels_per_facet=min_parcels_per_facet,
        do_initialization_now=do_initialization_now,
    )
    _child_aliases = dict(
        dpm_do_patch_lwf_now=('do_initialization_now', 'dpm/do-patch-lwf-now'),
        dpm_film_parcel_density=('min_parcels_per_unit_area', 'dpm/film-parcel-density'),
        dpm_initial_height=('film_height', 'dpm/initial-height'),
        dpm_initial_injection=('injection', 'dpm/initial-injection'),
        dpm_initial_temperature=('film_temperature', 'dpm/initial-temperature'),
        dpm_initialize_lwf=('enabled', 'dpm/initialize-lwf?'),
        dpm_minimum_number_of_parcels=('min_parcels_per_facet', 'dpm/minimum-number-of-parcels'),
    )

class enabled_42(Boolean):
    """
    Apply in situ data reduction to this film wall?.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class time_of_first_execution(Real):
    """
    Time of First Execution.
    """
    _version = '251'
    fluent_name = 'time-of-first-execution'
    _python_name = 'time_of_first_execution'

class execution_time_interval(Real):
    """
    Execution Time Interval.
    """
    _version = '251'
    fluent_name = 'execution-time-interval'
    _python_name = 'execution_time_interval'

class number_of_coordinate_intervals(Integer):
    """
    Number of Coordinate Classes.
    """
    _version = '251'
    fluent_name = 'number-of-coordinate-intervals'
    _python_name = 'number_of_coordinate_intervals'

class number_of_velocity_intervals(Integer):
    """
    Number of Velocity Classes.
    """
    _version = '251'
    fluent_name = 'number-of-velocity-intervals'
    _python_name = 'number_of_velocity_intervals'

class number_of_temperature_intervals(Integer):
    """
    Number of Temperature Classes.
    """
    _version = '251'
    fluent_name = 'number-of-temperature-intervals'
    _python_name = 'number_of_temperature_intervals'

class per_face_parameters(Group):
    """
    Parameters that are used during data evaluation on every face individually.
    """
    _version = '251'
    fluent_name = 'per-face-parameters'
    _python_name = 'per_face_parameters'
    child_names = ['number_of_coordinate_intervals', 'number_of_velocity_intervals', 'number_of_temperature_intervals']
    _child_classes = dict(
        number_of_coordinate_intervals=number_of_coordinate_intervals,
        number_of_velocity_intervals=number_of_velocity_intervals,
        number_of_temperature_intervals=number_of_temperature_intervals,
    )
    _child_aliases = dict(
        dpm_data_redu_target_num_pcls_per_face=('number_of_coordinate_intervals', 'dpm/data-redu/target-num-pcls-per-face'),
        dpm_data_redu_temperature_intervals=('number_of_temperature_intervals', 'dpm/data-redu/temperature-intervals'),
        dpm_data_redu_velocity_intervals=('number_of_velocity_intervals', 'dpm/data-redu/velocity-intervals'),
    )

class film_in_situ_data_reduction(Group):
    """
    Enable and configure the feature that reduces the film particle (parcel) count by combining parcels with similar properties into one.
    """
    _version = '251'
    fluent_name = 'film-in-situ-data-reduction'
    _python_name = 'film_in_situ_data_reduction'
    child_names = ['enabled', 'time_of_first_execution', 'execution_time_interval', 'per_face_parameters']
    _child_classes = dict(
        enabled=enabled_42,
        time_of_first_execution=time_of_first_execution,
        execution_time_interval=execution_time_interval,
        per_face_parameters=per_face_parameters,
    )
    _child_aliases = dict(
        additional_temperature_intervals=('per_face_parameters/number_of_temperature_intervals', 'additional-temperature-intervals'),
        additional_velocity_intervals=('per_face_parameters/number_of_velocity_intervals', 'additional-velocity-intervals'),
        data_reduction_time_first_execution=('time_of_first_execution', 'data-reduction-time-first-execution'),
        data_reduction_time_interval=('execution_time_interval', 'data-reduction-time-interval'),
        dpm_in_situ_data_reduction=('enabled', 'dpm/in-situ-data-reduction?'),
        target_num_parcels_per_face=('per_face_parameters/number_of_coordinate_intervals', 'target-num-parcels-per-face'),
    )

class enabled_43(Boolean):
    """
    Generic Model.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class impact_angle_function(Group):
    """
    Impact Angle Function.
    """
    _version = '251'
    fluent_name = 'impact-angle-function'
    _python_name = 'impact_angle_function'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class diameter_function(Group):
    """
    Diameter Function.
    """
    _version = '251'
    fluent_name = 'diameter-function'
    _python_name = 'diameter_function'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class velocity_exponent_function(Group):
    """
    Velocity Exponent Function.
    """
    _version = '251'
    fluent_name = 'velocity-exponent-function'
    _python_name = 'velocity_exponent_function'
    child_names = ['option', 'function_of', 'value', 'udf', 'piecewise_polynomial', 'piecewise_linear', 'polynomial']
    _child_classes = dict(
        option=option_32,
        function_of=function_of,
        value=value_17,
        udf=udf_1,
        piecewise_polynomial=piecewise_polynomial_1,
        piecewise_linear=piecewise_linear_2,
        polynomial=polynomial_2,
    )

class generic(Group):
    """
    Settings for the generic erosion model.
    """
    _version = '251'
    fluent_name = 'generic'
    _python_name = 'generic'
    child_names = ['enabled', 'impact_angle_function', 'diameter_function', 'velocity_exponent_function']
    _child_classes = dict(
        enabled=enabled_43,
        impact_angle_function=impact_angle_function,
        diameter_function=diameter_function,
        velocity_exponent_function=velocity_exponent_function,
    )
    _child_aliases = dict(
        dpm_bc_erosion=('impact_angle_function', 'dpm/bc-erosion'),
        dpm_bc_erosion_c=('diameter_function', 'dpm/bc-erosion-c'),
        dpm_bc_erosion_generic=('enabled', 'dpm/bc-erosion-generic?'),
        dpm_bc_erosion_n=('velocity_exponent_function', 'dpm/bc-erosion-n'),
    )

class enabled_44(Boolean):
    """
    Finnie.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class model_constant_k(Real):
    """
    Model Constant, k.
    """
    _version = '251'
    fluent_name = 'model-constant-k'
    _python_name = 'model_constant_k'

class velocity_exponent(Real):
    """
    Velocity Exponent.
    """
    _version = '251'
    fluent_name = 'velocity-exponent'
    _python_name = 'velocity_exponent'

class angle_of_max_erosion(Real):
    """
    Angle of Maximum Erosion.
    """
    _version = '251'
    fluent_name = 'angle-of-max-erosion'
    _python_name = 'angle_of_max_erosion'

class finnie(Group):
    """
    Settings for the Finnie erosion model.
    """
    _version = '251'
    fluent_name = 'finnie'
    _python_name = 'finnie'
    child_names = ['enabled', 'model_constant_k', 'velocity_exponent', 'angle_of_max_erosion']
    _child_classes = dict(
        enabled=enabled_44,
        model_constant_k=model_constant_k,
        velocity_exponent=velocity_exponent,
        angle_of_max_erosion=angle_of_max_erosion,
    )
    _child_aliases = dict(
        dpm_bc_erosion_finnie_k=('model_constant_k', 'dpm/bc-erosion-finnie-k'),
        dpm_bc_erosion_finnie_max_erosion_angle=('angle_of_max_erosion', 'dpm/bc-erosion-finnie-max-erosion-angle'),
        dpm_bc_erosion_finnie_vel_exp=('velocity_exponent', 'dpm/bc-erosion-finnie-vel-exp'),
        dpm_bc_erosion_finnie=('enabled', 'dpm/bc-erosion-finnie?'),
    )

class enabled_45(Boolean):
    """
    McLaury.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class model_constant_a(Real):
    """
    Model Constant, A.
    """
    _version = '251'
    fluent_name = 'model-constant-a'
    _python_name = 'model_constant_a'

class transition_angle(Real):
    """
    Transition Angle.
    """
    _version = '251'
    fluent_name = 'transition-angle'
    _python_name = 'transition_angle'

class impact_angle_constant_b(Real):
    """
    Impact Angle Constant, b.
    """
    _version = '251'
    fluent_name = 'impact-angle-constant-b'
    _python_name = 'impact_angle_constant_b'

class impact_angle_constant_c(Real):
    """
    Impact Angle Constant, c.
    """
    _version = '251'
    fluent_name = 'impact-angle-constant-c'
    _python_name = 'impact_angle_constant_c'

class impact_angle_constant_w(Real):
    """
    Impact Angle Constant, w.
    """
    _version = '251'
    fluent_name = 'impact-angle-constant-w'
    _python_name = 'impact_angle_constant_w'

class impact_angle_constant_x(Real):
    """
    Impact Angle Constant, x.
    """
    _version = '251'
    fluent_name = 'impact-angle-constant-x'
    _python_name = 'impact_angle_constant_x'

class impact_angle_constant_y(Real):
    """
    Impact Angle Constant, y.
    """
    _version = '251'
    fluent_name = 'impact-angle-constant-y'
    _python_name = 'impact_angle_constant_y'

class mclaury(Group):
    """
    Settings for the McLaury erosion model.
    """
    _version = '251'
    fluent_name = 'mclaury'
    _python_name = 'mclaury'
    child_names = ['enabled', 'model_constant_a', 'velocity_exponent', 'transition_angle', 'impact_angle_constant_b', 'impact_angle_constant_c', 'impact_angle_constant_w', 'impact_angle_constant_x', 'impact_angle_constant_y']
    _child_classes = dict(
        enabled=enabled_45,
        model_constant_a=model_constant_a,
        velocity_exponent=velocity_exponent,
        transition_angle=transition_angle,
        impact_angle_constant_b=impact_angle_constant_b,
        impact_angle_constant_c=impact_angle_constant_c,
        impact_angle_constant_w=impact_angle_constant_w,
        impact_angle_constant_x=impact_angle_constant_x,
        impact_angle_constant_y=impact_angle_constant_y,
    )
    _child_aliases = dict(
        dpm_bc_erosion_mclaury_a=('model_constant_a', 'dpm/bc-erosion-mclaury-a'),
        dpm_bc_erosion_mclaury_b=('impact_angle_constant_b', 'dpm/bc-erosion-mclaury-b'),
        dpm_bc_erosion_mclaury_c=('impact_angle_constant_c', 'dpm/bc-erosion-mclaury-c'),
        dpm_bc_erosion_mclaury_transition_angle=('transition_angle', 'dpm/bc-erosion-mclaury-transition-angle'),
        dpm_bc_erosion_mclaury_vel_exp=('velocity_exponent', 'dpm/bc-erosion-mclaury-vel-exp'),
        dpm_bc_erosion_mclaury_w=('impact_angle_constant_w', 'dpm/bc-erosion-mclaury-w'),
        dpm_bc_erosion_mclaury_x=('impact_angle_constant_x', 'dpm/bc-erosion-mclaury-x'),
        dpm_bc_erosion_mclaury_y=('impact_angle_constant_y', 'dpm/bc-erosion-mclaury-y'),
        dpm_bc_erosion_mclaury=('enabled', 'dpm/bc-erosion-mclaury?'),
    )

class enabled_46(Boolean):
    """
    Oka.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class reference_erosion_rate_e90(Real):
    """
    Reference Erosion Rate.
    """
    _version = '251'
    fluent_name = 'reference-erosion-rate-e90'
    _python_name = 'reference_erosion_rate_e90'

class wall_vickers_hardness_hv(Real):
    """
    Wall Vickers Hardness (GPa).
    """
    _version = '251'
    fluent_name = 'wall-vickers-hardness-hv'
    _python_name = 'wall_vickers_hardness_hv'

class model_constant_n1(Real):
    """
    Model Constant, n1.
    """
    _version = '251'
    fluent_name = 'model-constant-n1'
    _python_name = 'model_constant_n1'

class model_constant_n2(Real):
    """
    Model Constant, n2.
    """
    _version = '251'
    fluent_name = 'model-constant-n2'
    _python_name = 'model_constant_n2'

class velocity_exponent_k2(Real):
    """
    Velocity Exponent.
    """
    _version = '251'
    fluent_name = 'velocity-exponent-k2'
    _python_name = 'velocity_exponent_k2'

class diameter_exponent_k3(Real):
    """
    Diameter Exponent.
    """
    _version = '251'
    fluent_name = 'diameter-exponent-k3'
    _python_name = 'diameter_exponent_k3'

class reference_diameter_dref(Real):
    """
    Reference Diameter.
    """
    _version = '251'
    fluent_name = 'reference-diameter-dref'
    _python_name = 'reference_diameter_dref'

class reference_velocity_vref(Real):
    """
    Reference Velocity.
    """
    _version = '251'
    fluent_name = 'reference-velocity-vref'
    _python_name = 'reference_velocity_vref'

class oka(Group):
    """
    Settings for the Oka erosion model.
    """
    _version = '251'
    fluent_name = 'oka'
    _python_name = 'oka'
    child_names = ['enabled', 'reference_erosion_rate_e90', 'wall_vickers_hardness_hv', 'model_constant_n1', 'model_constant_n2', 'velocity_exponent_k2', 'diameter_exponent_k3', 'reference_diameter_dref', 'reference_velocity_vref']
    _child_classes = dict(
        enabled=enabled_46,
        reference_erosion_rate_e90=reference_erosion_rate_e90,
        wall_vickers_hardness_hv=wall_vickers_hardness_hv,
        model_constant_n1=model_constant_n1,
        model_constant_n2=model_constant_n2,
        velocity_exponent_k2=velocity_exponent_k2,
        diameter_exponent_k3=diameter_exponent_k3,
        reference_diameter_dref=reference_diameter_dref,
        reference_velocity_vref=reference_velocity_vref,
    )
    _child_aliases = dict(
        dpm_bc_erosion_oka_dref=('reference_diameter_dref', 'dpm/bc-erosion-oka-dref'),
        dpm_bc_erosion_oka_e90=('reference_erosion_rate_e90', 'dpm/bc-erosion-oka-e90'),
        dpm_bc_erosion_oka_hv=('wall_vickers_hardness_hv', 'dpm/bc-erosion-oka-hv'),
        dpm_bc_erosion_oka_k2=('velocity_exponent_k2', 'dpm/bc-erosion-oka-k2'),
        dpm_bc_erosion_oka_k3=('diameter_exponent_k3', 'dpm/bc-erosion-oka-k3'),
        dpm_bc_erosion_oka_n1=('model_constant_n1', 'dpm/bc-erosion-oka-n1'),
        dpm_bc_erosion_oka_n2=('model_constant_n2', 'dpm/bc-erosion-oka-n2'),
        dpm_bc_erosion_oka_vref=('reference_velocity_vref', 'dpm/bc-erosion-oka-vref'),
        dpm_bc_erosion_oka=('enabled', 'dpm/bc-erosion-oka?'),
    )

class enabled_47(Boolean):
    """
    DNV.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class model_constant_n(Real):
    """
    Model Constant, n.
    """
    _version = '251'
    fluent_name = 'model-constant-n'
    _python_name = 'model_constant_n'

class ductile_material_enabled(Boolean):
    """
    Ductile Wall Material.
    """
    _version = '251'
    fluent_name = 'ductile-material-enabled?'
    _python_name = 'ductile_material_enabled'

class dnv(Group):
    """
    Settings for the DNV erosion model.
    """
    _version = '251'
    fluent_name = 'dnv'
    _python_name = 'dnv'
    child_names = ['enabled', 'model_constant_k', 'model_constant_n', 'ductile_material_enabled']
    _child_classes = dict(
        enabled=enabled_47,
        model_constant_k=model_constant_k,
        model_constant_n=model_constant_n,
        ductile_material_enabled=ductile_material_enabled,
    )
    _child_aliases = dict(
        dpm_bc_erosion_dnv_ductile=('ductile_material_enabled', 'dpm/bc-erosion-dnv-ductile?'),
        dpm_bc_erosion_dnv_k=('model_constant_k', 'dpm/bc-erosion-dnv-k'),
        dpm_bc_erosion_dnv_n=('model_constant_n', 'dpm/bc-erosion-dnv-n'),
        dpm_bc_erosion_dnv=('enabled', 'dpm/bc-erosion-dnv?'),
    )

class enabled_48(Boolean):
    """
    Shear Stress.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class velocity_exponent_v(Real):
    """
    Velocity Exponent, v.
    """
    _version = '251'
    fluent_name = 'velocity-exponent-v'
    _python_name = 'velocity_exponent_v'

class model_constant_c(Real):
    """
    Empirical Model Contant, c.
    """
    _version = '251'
    fluent_name = 'model-constant-c'
    _python_name = 'model_constant_c'

class packing_limit(Real):
    """
    Solid Phase Packing Limit.
    """
    _version = '251'
    fluent_name = 'packing-limit'
    _python_name = 'packing_limit'

class shielding_enabled(Boolean):
    """
    Granular Phase Shielding.
    """
    _version = '251'
    fluent_name = 'shielding-enabled?'
    _python_name = 'shielding_enabled'

class shear_erosion(Group):
    """
    Settings for the shear erosion model.
    """
    _version = '251'
    fluent_name = 'shear-erosion'
    _python_name = 'shear_erosion'
    child_names = ['enabled', 'velocity_exponent_v', 'model_constant_c', 'packing_limit', 'shielding_enabled']
    _child_classes = dict(
        enabled=enabled_48,
        velocity_exponent_v=velocity_exponent_v,
        model_constant_c=model_constant_c,
        packing_limit=packing_limit,
        shielding_enabled=shielding_enabled,
    )
    _child_aliases = dict(
        dpm_bc_erosion_shear_c=('model_constant_c', 'dpm/bc-erosion-shear-c'),
        dpm_bc_erosion_shear_packing_limit=('packing_limit', 'dpm/bc-erosion-shear-packing-limit'),
        dpm_bc_erosion_shear_v=('velocity_exponent_v', 'dpm/bc-erosion-shear-v'),
        dpm_bc_erosion_shear=('enabled', 'dpm/bc-erosion-shear?'),
        dpm_bc_erosion_shielding=('shielding_enabled', 'dpm/bc-erosion-shielding?'),
    )

class erosion(Group):
    """
    Settings for calculating erosion by various models.
    """
    _version = '251'
    fluent_name = 'erosion'
    _python_name = 'erosion'
    child_names = ['generic', 'finnie', 'mclaury', 'oka', 'dnv', 'shear_erosion']
    _child_classes = dict(
        generic=generic,
        finnie=finnie,
        mclaury=mclaury,
        oka=oka,
        dnv=dnv,
        shear_erosion=shear_erosion,
    )

class discrete_phase_5(Group):
    """
    Allows to change DPM model variables or settings.
    """
    _version = '251'
    fluent_name = 'discrete-phase'
    _python_name = 'discrete_phase'
    child_names = ['bc_type', 'particle_wall_heat_exchange_enabled', 'reflection_coefficients', 'dem_collision_partner', 'reinject_using_injection', 'bc_user_function', 'film_condensation_enabled', 'gas_side_boundary_layer_model_enabled', 'lwf_to_vof_enabled', 'vof_to_lwf_enabled', 'impingement_splashing', 'wall_roughness_parameters', 'friction_coefficient', 'film_separation', 'film_particle_stripping', 'film_initialization', 'film_in_situ_data_reduction', 'erosion']
    _child_classes = dict(
        bc_type=bc_type_1,
        particle_wall_heat_exchange_enabled=particle_wall_heat_exchange_enabled,
        reflection_coefficients=reflection_coefficients,
        dem_collision_partner=dem_collision_partner,
        reinject_using_injection=reinject_using_injection,
        bc_user_function=bc_user_function,
        film_condensation_enabled=film_condensation_enabled,
        gas_side_boundary_layer_model_enabled=gas_side_boundary_layer_model_enabled,
        lwf_to_vof_enabled=lwf_to_vof_enabled,
        vof_to_lwf_enabled=vof_to_lwf_enabled,
        impingement_splashing=impingement_splashing,
        wall_roughness_parameters=wall_roughness_parameters,
        friction_coefficient=friction_coefficient,
        film_separation=film_separation,
        film_particle_stripping=film_particle_stripping,
        film_initialization=film_initialization,
        film_in_situ_data_reduction=film_in_situ_data_reduction,
        erosion=erosion,
    )
    _child_aliases = dict(
        data_reduction=('film_in_situ_data_reduction', 'data-reduction'),
        discrete_phase_bc_function=('bc_user_function', 'discrete-phase-bc-function'),
        discrete_phase_bc_type=('bc_type', 'discrete-phase-bc-type'),
        dpm_allow_lwf_to_vof=('lwf_to_vof_enabled', 'dpm-allow-lwf-to-vof?'),
        dpm_allow_vof_to_lwf=('vof_to_lwf_enabled', 'dpm-allow-vof-to-lwf?'),
        dpm_bc_erosion_dnv_ductile=('erosion/dnv/ductile_material_enabled', 'dpm-bc-erosion-dnv-ductile?'),
        dpm_bc_erosion_dnv_k=('erosion/dnv/model_constant_k', 'dpm-bc-erosion-dnv-k'),
        dpm_bc_erosion_dnv_n=('erosion/dnv/model_constant_n', 'dpm-bc-erosion-dnv-n'),
        dpm_bc_erosion_dnv=('erosion/dnv/enabled', 'dpm-bc-erosion-dnv?'),
        dpm_bc_erosion_finnie_k=('erosion/finnie/model_constant_k', 'dpm-bc-erosion-finnie-k'),
        dpm_bc_erosion_finnie_max_erosion_angle=('erosion/finnie/angle_of_max_erosion', 'dpm-bc-erosion-finnie-max-erosion-angle'),
        dpm_bc_erosion_finnie_vel_exp=('erosion/finnie/velocity_exponent', 'dpm-bc-erosion-finnie-vel-exp'),
        dpm_bc_erosion_mclaury_a=('erosion/mclaury/model_constant_a', 'dpm-bc-erosion-mclaury-a'),
        dpm_bc_erosion_mclaury_b=('erosion/mclaury/impact_angle_constant_b', 'dpm-bc-erosion-mclaury-b'),
        dpm_bc_erosion_mclaury_c=('erosion/mclaury/impact_angle_constant_c', 'dpm-bc-erosion-mclaury-c'),
        dpm_bc_erosion_mclaury_transition_angle=('erosion/mclaury/transition_angle', 'dpm-bc-erosion-mclaury-transition-angle'),
        dpm_bc_erosion_mclaury_vel_exp=('erosion/mclaury/velocity_exponent', 'dpm-bc-erosion-mclaury-vel-exp'),
        dpm_bc_erosion_mclaury_w=('erosion/mclaury/impact_angle_constant_w', 'dpm-bc-erosion-mclaury-w'),
        dpm_bc_erosion_mclaury_x=('erosion/mclaury/impact_angle_constant_x', 'dpm-bc-erosion-mclaury-x'),
        dpm_bc_erosion_mclaury_y=('erosion/mclaury/impact_angle_constant_y', 'dpm-bc-erosion-mclaury-y'),
        dpm_bc_erosion_mclaury=('erosion/mclaury/enabled', 'dpm-bc-erosion-mclaury?'),
        dpm_bc_erosion_oka_dref=('erosion/oka/reference_diameter_dref', 'dpm-bc-erosion-oka-dref'),
        dpm_bc_erosion_oka_e90=('erosion/oka/reference_erosion_rate_e90', 'dpm-bc-erosion-oka-e90'),
        dpm_bc_erosion_oka_hv=('erosion/oka/wall_vickers_hardness_hv', 'dpm-bc-erosion-oka-hv'),
        dpm_bc_erosion_oka_k2=('erosion/oka/velocity_exponent_k2', 'dpm-bc-erosion-oka-k2'),
        dpm_bc_erosion_oka_k3=('erosion/oka/diameter_exponent_k3', 'dpm-bc-erosion-oka-k3'),
        dpm_bc_erosion_oka_n1=('erosion/oka/model_constant_n1', 'dpm-bc-erosion-oka-n1'),
        dpm_bc_erosion_oka_n2=('erosion/oka/model_constant_n2', 'dpm-bc-erosion-oka-n2'),
        dpm_bc_erosion_oka_vref=('erosion/oka/reference_velocity_vref', 'dpm-bc-erosion-oka-vref'),
        dpm_bc_erosion_oka=('erosion/oka/enabled', 'dpm-bc-erosion-oka?'),
        dpm_bc_erosion_shear_c=('erosion/shear_erosion/model_constant_c', 'dpm-bc-erosion-shear-c'),
        dpm_bc_erosion_shear_packing_limit=('erosion/shear_erosion/packing_limit', 'dpm-bc-erosion-shear-packing-limit'),
        dpm_bc_erosion_shear_v=('erosion/shear_erosion/velocity_exponent_v', 'dpm-bc-erosion-shear-v'),
        dpm_bc_erosion_shear=('erosion/shear_erosion/enabled', 'dpm-bc-erosion-shear?'),
        dpm_bc_erosion_shielding=('erosion/shear_erosion/shielding_enabled', 'dpm-bc-erosion-shielding?'),
        dpm_bc_frictn_coeff=('friction_coefficient', 'dpm-bc-frictn-coeff'),
        dpm_bc_norm_coeff=('reflection_coefficients/normal', 'dpm-bc-norm-coeff'),
        dpm_bc_tang_coeff=('reflection_coefficients/tangential', 'dpm-bc-tang-coeff'),
        dpm_calibratable_temp=('impingement_splashing/regime_parameters/critical_temperature_offset', 'dpm-calibratable-temp'),
        dpm_crit_temp_option=('impingement_splashing/regime_parameters/critical_temperature_option', 'dpm-crit-temp-option'),
        dpm_critical_shear_stress=('film_particle_stripping/critical_shear_stress', 'dpm-critical-shear-stress'),
        dpm_critical_temp_factor=('impingement_splashing/regime_parameters/critical_temperature_factor', 'dpm-critical-temp-factor'),
        dpm_critical_we_number=('film_separation/critical_weber_number', 'dpm-critical-we-number'),
        dpm_deposition_delta_t=('impingement_splashing/regime_parameters/deposition_delta_t', 'dpm-deposition-delta-t'),
        dpm_do_initialize_lwf_now=('film_initialization/do_initialization_now', 'dpm-do-initialize-lwf-now'),
        dpm_film_bl_model=('gas_side_boundary_layer_model_enabled', 'dpm-film-bl-model?'),
        dpm_film_condensation=('film_condensation_enabled', 'dpm-film-condensation?'),
        dpm_film_separation_angle=('film_separation/separation_angle', 'dpm-film-separation-angle'),
        dpm_film_separation_model=('film_separation/model', 'dpm-film-separation-model'),
        dpm_film_splash_nsamp=('impingement_splashing/number_of_splashed_drops', 'dpm-film-splash-nsamp'),
        dpm_impingement_splashing_model=('impingement_splashing/model', 'dpm-impingement-splashing-model'),
        dpm_initial_height=('film_initialization/film_height', 'dpm-initial-height'),
        dpm_initial_injection=('film_initialization/injection', 'dpm-initial-injection'),
        dpm_initial_temperature=('film_initialization/film_temperature', 'dpm-initial-temperature'),
        dpm_initialize_lwf=('film_initialization/enabled', 'dpm-initialize-lwf?'),
        dpm_laplace_number_constant=('impingement_splashing/regime_parameters/laplace_number_constant', 'dpm-laplace-number-constant'),
        dpm_partial_evaporation_ratio=('impingement_splashing/regime_parameters/partial_evaporation_ratio', 'dpm-partial-evaporation-ratio'),
        dpm_particle_stripping=('film_particle_stripping/enabled', 'dpm-particle-stripping?'),
        dpm_upper_deposition_limit_offset=('impingement_splashing/regime_parameters/upper_deposition_limit_offset', 'dpm-upper-deposition-limit-offset'),
        dpm_wall_heat_exchange=('particle_wall_heat_exchange_enabled', 'dpm-wall-heat-exchange?'),
        dpm_bc_collision_partner=('dem_collision_partner', 'dpm/bc-collision-partner'),
        dpm_bc_type=('bc_type', 'dpm/bc-type'),
        dpm_bc_udf=('bc_user_function', 'dpm/bc-udf'),
        enable_finnie_erosion_model=('erosion/finnie/enabled', 'enable-finnie-erosion-model?'),
        enable_generic_erosion_model=('erosion/generic/enabled', 'enable-generic-erosion-model?'),
        film_parcel_surface_area_density=('film_initialization/min_parcels_per_facet', 'film-parcel-surface-area-density'),
        film_velocity=('film_initialization/film_velocity', 'film-velocity'),
        generic_diameter_function=('erosion/generic/diameter_function', 'generic-diameter-function'),
        generic_impact_angle_function=('erosion/generic/impact_angle_function', 'generic-impact-angle-function'),
        generic_velocity_exponent_function=('erosion/generic/velocity_exponent_function', 'generic-velocity-exponent-function'),
        in_situ_data_reduction=('film_in_situ_data_reduction/enabled', 'in-situ-data-reduction?'),
        initialize_lwf_now=('film_initialization/do_initialization_now', 'initialize-lwf-now'),
        minimum_number_of_parcels_per_face=('film_initialization/min_parcels_per_unit_area', 'minimum-number-of-parcels-per-face'),
        normal_coefficient=('reflection_coefficients/normal', 'normal-coefficient'),
        ra_roughness=('wall_roughness_parameters/ra', 'ra-roughness'),
        reinj_inj=('reinject_using_injection', 'reinj-inj'),
        rq_roughness=('wall_roughness_parameters/rq', 'rq-roughness'),
        rsm_roughness=('wall_roughness_parameters/rsm', 'rsm-roughness'),
        rz_roughness=('wall_roughness_parameters/rz', 'rz-roughness'),
        tangential_coefficient=('reflection_coefficients/tangential', 'tangential-coefficient'),
    )

class eulerian_film_wall(Boolean):
    """
    As Eulerian Film Wall?.
    """
    _version = '251'
    fluent_name = 'eulerian-film-wall?'
    _python_name = 'eulerian_film_wall'

class film_condition_type(String, AllowedValuesMixin):
    """
    Film Condition Type (0: Boundary Condition, 1: Initial Condition).
    """
    _version = '251'
    fluent_name = 'film-condition-type'
    _python_name = 'film_condition_type'

class film_height_1(Group):
    """
    Film Height.
    """
    _version = '251'
    fluent_name = 'film-height'
    _python_name = 'film_height'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class flux_momentum_child(Group):
    """
    'child_object_type' of flux_momentum.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'flux_momentum_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class flux_momentum(ListObject[flux_momentum_child]):
    """
    Flux momentum components.
    """
    _version = '251'
    fluent_name = 'flux-momentum'
    _python_name = 'flux_momentum'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = flux_momentum_child

class relative_initial_film_velocity(Boolean):
    """
    Enable/Disable Relative Initial Film velocity.
    """
    _version = '251'
    fluent_name = 'relative-initial-film-velocity'
    _python_name = 'relative_initial_film_velocity'

class include_film_momentum_pressure(Boolean):
    """
    Include Film Momentum Pressure?.
    """
    _version = '251'
    fluent_name = 'include-film-momentum-pressure?'
    _python_name = 'include_film_momentum_pressure'

class film_temperature_1(Group):
    """
    Film Temperature.
    """
    _version = '251'
    fluent_name = 'film-temperature'
    _python_name = 'film_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class film_passive_scalar(Group):
    """
    Passive Scalar.
    """
    _version = '251'
    fluent_name = 'film-passive-scalar'
    _python_name = 'film_passive_scalar'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class enable_film_source_terms(Boolean):
    """
    Enable Film Source Terms?.
    """
    _version = '251'
    fluent_name = 'enable-film-source-terms?'
    _python_name = 'enable_film_source_terms'

class film_mass_source(Group):
    """
    Film Mass Source.
    """
    _version = '251'
    fluent_name = 'film-mass-source'
    _python_name = 'film_mass_source'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class momentum_source_child(Group):
    """
    'child_object_type' of momentum_source.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'momentum_source_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class momentum_source(ListObject[momentum_source_child]):
    """
    Momentum source components.
    """
    _version = '251'
    fluent_name = 'momentum-source'
    _python_name = 'momentum_source'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = momentum_source_child

class film_heat_source(Group):
    """
    Film Heat Source.
    """
    _version = '251'
    fluent_name = 'film-heat-source'
    _python_name = 'film_heat_source'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class film_passive_scalar_source(Group):
    """
    Film Passive Scalar Source.
    """
    _version = '251'
    fluent_name = 'film-passive-scalar-source'
    _python_name = 'film_passive_scalar_source'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class enable_film_phase_change(Boolean):
    """
    Enable Film Phase Change?.
    """
    _version = '251'
    fluent_name = 'enable-film-phase-change?'
    _python_name = 'enable_film_phase_change'

class phase_change_model(String, AllowedValuesMixin):
    """
    Phase Change Model: Diffusion Balance [0]; Wall Boundary Layer [1]; User Defined [2] -.
    """
    _version = '251'
    fluent_name = 'phase-change-model'
    _python_name = 'phase_change_model'

class film_condensation_constant(Real):
    """
    Film Condensation Constant.
    """
    _version = '251'
    fluent_name = 'film-condensation-constant'
    _python_name = 'film_condensation_constant'

class film_vaporization_constant(Real):
    """
    Film Vaporization Constant.
    """
    _version = '251'
    fluent_name = 'film-vaporization-constant'
    _python_name = 'film_vaporization_constant'

class film_condensation_rate(Group):
    """
    Film Condensation Rate.
    """
    _version = '251'
    fluent_name = 'film-condensation-rate'
    _python_name = 'film_condensation_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class film_vaporization_rate(Group):
    """
    Film Vaporization Rate.
    """
    _version = '251'
    fluent_name = 'film-vaporization-rate'
    _python_name = 'film_vaporization_rate'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class enable_flow_momentum_coupling(Boolean):
    """
    Enable Flow Momentum Coupling?.
    """
    _version = '251'
    fluent_name = 'enable-flow-momentum-coupling?'
    _python_name = 'enable_flow_momentum_coupling'

class enable_dpm_wall_splash(Boolean):
    """
    Enable DPM Wall Splash?.
    """
    _version = '251'
    fluent_name = 'enable-dpm-wall-splash?'
    _python_name = 'enable_dpm_wall_splash'

class allow_film_boundary_separation(Boolean):
    """
    Allow Film Boundary Separation?.
    """
    _version = '251'
    fluent_name = 'allow-film-boundary-separation?'
    _python_name = 'allow_film_boundary_separation'

class impingement_model_1(String, AllowedValuesMixin):
    """
    Impingement Model.
    """
    _version = '251'
    fluent_name = 'impingement-model'
    _python_name = 'impingement_model'

class number_of_splashed_particles(Integer):
    """
    Number of Splashed Particles.
    """
    _version = '251'
    fluent_name = 'number-of-splashed-particles'
    _python_name = 'number_of_splashed_particles'

class critical_temperature_factor_1(Real):
    """
    Critical Temperature Factor.
    """
    _version = '251'
    fluent_name = 'critical-temperature-factor'
    _python_name = 'critical_temperature_factor'

class wall_roughness_length_ra(Real):
    """
    Wall Roughness Length Ra.
    """
    _version = '251'
    fluent_name = 'wall-roughness-length-ra'
    _python_name = 'wall_roughness_length_ra'

class wall_roughness_length_rz(Real):
    """
    Wall Roughness Length Rz.
    """
    _version = '251'
    fluent_name = 'wall-roughness-length-rz'
    _python_name = 'wall_roughness_length_rz'

class upper_deposition_limit_offset_1(Real):
    """
    Upper Deposition Limit Offset [K] .
    """
    _version = '251'
    fluent_name = 'upper-deposition-limit-offset'
    _python_name = 'upper_deposition_limit_offset'

class deposition_delta_t_1(Real):
    """
    Deposition Delta T [K] .
    """
    _version = '251'
    fluent_name = 'deposition-delta-t'
    _python_name = 'deposition_delta_t'

class enable_film_contact_angle_force(Boolean):
    """
    Enable Film Contact Angle Force?.
    """
    _version = '251'
    fluent_name = 'enable-film-contact-angle-force?'
    _python_name = 'enable_film_contact_angle_force'

class film_contact_angle_mean(Group):
    """
    Film Contact Angle Mean.
    """
    _version = '251'
    fluent_name = 'film-contact-angle-mean'
    _python_name = 'film_contact_angle_mean'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class film_contact_angle_rstd(Real):
    """
    Film Contact Angle Relative Standard Deviation.
    """
    _version = '251'
    fluent_name = 'film-contact-angle-rstd'
    _python_name = 'film_contact_angle_rstd'

class film_contact_angle_beta(Real):
    """
    Film Contact Angle Force Beta.
    """
    _version = '251'
    fluent_name = 'film-contact-angle-beta'
    _python_name = 'film_contact_angle_beta'

class film_vof_coupling_high(Boolean):
    """
    Enable Film-to-VOF Transition?.
    """
    _version = '251'
    fluent_name = 'film-vof-coupling-high?'
    _python_name = 'film_vof_coupling_high'

class film_vof_trans_high(Real):
    """
    Film to VOF Transition Criteria.
    """
    _version = '251'
    fluent_name = 'film-vof-trans-high'
    _python_name = 'film_vof_trans_high'

class film_vof_trans_high_relax(Real):
    """
    Film to VOF Transition Relaxation.
    """
    _version = '251'
    fluent_name = 'film-vof-trans-high-relax'
    _python_name = 'film_vof_trans_high_relax'

class film_vof_coupling_low(Boolean):
    """
    Enable VOF-to-Film Transition?.
    """
    _version = '251'
    fluent_name = 'film-vof-coupling-low?'
    _python_name = 'film_vof_coupling_low'

class film_vof_trans_low(Real):
    """
    VOF to Film Transition Criteria.
    """
    _version = '251'
    fluent_name = 'film-vof-trans-low'
    _python_name = 'film_vof_trans_low'

class film_vof_trans_low_relax(Real):
    """
    VOF to Film Transition Relaxation.
    """
    _version = '251'
    fluent_name = 'film-vof-trans-low-relax'
    _python_name = 'film_vof_trans_low_relax'

class wall_film_1(Group):
    """
    Wall Film Settings for boundary-condition.
    """
    _version = '251'
    fluent_name = 'wall-film'
    _python_name = 'wall_film'
    child_names = ['eulerian_film_wall', 'film_condition_type', 'film_height', 'flux_momentum', 'relative_initial_film_velocity', 'include_film_momentum_pressure', 'film_temperature', 'film_passive_scalar', 'enable_film_source_terms', 'film_mass_source', 'momentum_source', 'film_heat_source', 'film_passive_scalar_source', 'enable_film_phase_change', 'phase_change_model', 'film_condensation_constant', 'film_vaporization_constant', 'film_condensation_rate', 'film_vaporization_rate', 'enable_flow_momentum_coupling', 'enable_dpm_wall_splash', 'allow_film_boundary_separation', 'impingement_model', 'number_of_splashed_particles', 'critical_temperature_factor', 'wall_roughness_length_ra', 'wall_roughness_length_rz', 'upper_deposition_limit_offset', 'deposition_delta_t', 'laplace_number_constant', 'partial_evaporation_ratio', 'enable_film_contact_angle_force', 'film_contact_angle_mean', 'film_contact_angle_rstd', 'film_contact_angle_beta', 'film_vof_coupling_high', 'film_vof_trans_high', 'film_vof_trans_high_relax', 'film_vof_coupling_low', 'film_vof_trans_low', 'film_vof_trans_low_relax']
    _child_classes = dict(
        eulerian_film_wall=eulerian_film_wall,
        film_condition_type=film_condition_type,
        film_height=film_height_1,
        flux_momentum=flux_momentum,
        relative_initial_film_velocity=relative_initial_film_velocity,
        include_film_momentum_pressure=include_film_momentum_pressure,
        film_temperature=film_temperature_1,
        film_passive_scalar=film_passive_scalar,
        enable_film_source_terms=enable_film_source_terms,
        film_mass_source=film_mass_source,
        momentum_source=momentum_source,
        film_heat_source=film_heat_source,
        film_passive_scalar_source=film_passive_scalar_source,
        enable_film_phase_change=enable_film_phase_change,
        phase_change_model=phase_change_model,
        film_condensation_constant=film_condensation_constant,
        film_vaporization_constant=film_vaporization_constant,
        film_condensation_rate=film_condensation_rate,
        film_vaporization_rate=film_vaporization_rate,
        enable_flow_momentum_coupling=enable_flow_momentum_coupling,
        enable_dpm_wall_splash=enable_dpm_wall_splash,
        allow_film_boundary_separation=allow_film_boundary_separation,
        impingement_model=impingement_model_1,
        number_of_splashed_particles=number_of_splashed_particles,
        critical_temperature_factor=critical_temperature_factor_1,
        wall_roughness_length_ra=wall_roughness_length_ra,
        wall_roughness_length_rz=wall_roughness_length_rz,
        upper_deposition_limit_offset=upper_deposition_limit_offset_1,
        deposition_delta_t=deposition_delta_t_1,
        laplace_number_constant=laplace_number_constant,
        partial_evaporation_ratio=partial_evaporation_ratio,
        enable_film_contact_angle_force=enable_film_contact_angle_force,
        film_contact_angle_mean=film_contact_angle_mean,
        film_contact_angle_rstd=film_contact_angle_rstd,
        film_contact_angle_beta=film_contact_angle_beta,
        film_vof_coupling_high=film_vof_coupling_high,
        film_vof_trans_high=film_vof_trans_high,
        film_vof_trans_high_relax=film_vof_trans_high_relax,
        film_vof_coupling_low=film_vof_coupling_low,
        film_vof_trans_low=film_vof_trans_low,
        film_vof_trans_low_relax=film_vof_trans_low_relax,
    )
    _child_aliases = dict(
        film_a_wet=('laplace_number_constant', 'film-a-wet'),
        film_bc_imp_press=('include_film_momentum_pressure', 'film-bc-imp-press?'),
        film_boundary_separation=('allow_film_boundary_separation', 'film-boundary-separation?'),
        film_cond_const=('film_condensation_constant', 'film-cond-const'),
        film_cond_rate=('film_condensation_rate', 'film-cond-rate'),
        film_contact_angle=('enable_film_contact_angle_force', 'film-contact-angle?'),
        film_crit_temp_factor=('critical_temperature_factor', 'film-crit-temp-factor'),
        film_h_src=('film_mass_source', 'film-h-src'),
        film_impinge_model=('impingement_model', 'film-impinge-model'),
        film_momentum_coupling=('enable_flow_momentum_coupling', 'film-momentum-coupling?'),
        film_partial_evap_ratio=('partial_evaporation_ratio', 'film-partial-evap-ratio'),
        film_phase_change_model=('phase_change_model', 'film-phase-change-model'),
        film_phase_change=('enable_film_phase_change', 'film-phase-change?'),
        film_relative_vel=('relative_initial_film_velocity', 'film-relative-vel?'),
        film_roughness_ra=('wall_roughness_length_ra', 'film-roughness-ra'),
        film_roughness_rz=('wall_roughness_length_rz', 'film-roughness-rz'),
        film_s_src=('film_passive_scalar_source', 'film-s-src'),
        film_scalar=('film_passive_scalar', 'film-scalar'),
        film_source=('enable_film_source_terms', 'film-source?'),
        film_splash_nparc=('number_of_splashed_particles', 'film-splash-nparc'),
        film_splash_wall=('enable_dpm_wall_splash', 'film-splash-wall?'),
        film_t_delta=('deposition_delta_t', 'film-t-delta'),
        film_t_deposition_offset=('upper_deposition_limit_offset', 'film-t-deposition-offset'),
        film_t_src=('film_heat_source', 'film-t-src'),
        film_vapo_const=('film_vaporization_constant', 'film-vapo-const'),
        film_vapo_rate=('film_vaporization_rate', 'film-vapo-rate'),
        film_wall_bc=('film_condition_type', 'film-wall-bc'),
        film_wall=('eulerian_film_wall', 'film-wall?'),
        flux_momentum_components=('flux_momentum', 'flux-momentum-components'),
        momentum_source_components=('momentum_source', 'momentum-source-components'),
    )

class gtemp_bc(String, AllowedValuesMixin):
    """
    Granular Conditions.
    """
    _version = '251'
    fluent_name = 'gtemp-bc'
    _python_name = 'gtemp_bc'

class g_temperature(Group):
    """
    Granular Temperature.
    """
    _version = '251'
    fluent_name = 'g-temperature'
    _python_name = 'g_temperature'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class g_qflux(Group):
    """
    Granular Flux.
    """
    _version = '251'
    fluent_name = 'g-qflux'
    _python_name = 'g_qflux'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class wall_restitution_coeff(Real):
    """
    Restitution Coefficient.
    """
    _version = '251'
    fluent_name = 'wall-restitution-coeff'
    _python_name = 'wall_restitution_coeff'

class multiphase_7(Group):
    """
    Allows to change multiphase model variables or settings.
    """
    _version = '251'
    fluent_name = 'multiphase'
    _python_name = 'multiphase'
    child_names = ['gtemp_bc', 'g_temperature', 'g_qflux', 'wall_restitution_coeff', 'contact_angles']
    _child_classes = dict(
        gtemp_bc=gtemp_bc,
        g_temperature=g_temperature,
        g_qflux=g_qflux,
        wall_restitution_coeff=wall_restitution_coeff,
        contact_angles=contact_angles,
    )
    _child_aliases = dict(
        adhesion_angle=('contact_angles', 'adhesion-angle'),
    )

class elec_potential_jump(Group):
    """
    Potential Jump.
    """
    _version = '251'
    fluent_name = 'elec-potential-jump'
    _python_name = 'elec_potential_jump'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class elec_potential_resistance(Group):
    """
    Contact Resistance.
    """
    _version = '251'
    fluent_name = 'elec-potential-resistance'
    _python_name = 'elec_potential_resistance'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class echem_reaction(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'echem-reaction?'
    _python_name = 'echem_reaction'

class elec_potential_mechs(String, AllowedValuesMixin):
    """
    Reaction Mechanism.
    """
    _version = '251'
    fluent_name = 'elec-potential-mechs'
    _python_name = 'elec_potential_mechs'

class faradaic_heat(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'faradaic-heat?'
    _python_name = 'faradaic_heat'

class lithium_conc_cond(String, AllowedValuesMixin):
    """
    Lithium Concentration Condition.
    """
    _version = '251'
    fluent_name = 'lithium-conc-cond'
    _python_name = 'lithium_conc_cond'

class lithium_boundary_value(Group):
    """
    Lithium Boundary Value.
    """
    _version = '251'
    fluent_name = 'lithium-boundary-value'
    _python_name = 'lithium_boundary_value'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class potential_3(Group):
    """
    Allows to change potential model variables or settings.
    """
    _version = '251'
    fluent_name = 'potential'
    _python_name = 'potential'
    child_names = ['potential_boundary_condition', 'potential_boundary_value', 'elec_potential_jump', 'elec_potential_resistance', 'electrolyte_potential_boundary_condition', 'current_density_boundary_value', 'echem_reaction', 'elec_potential_mechs', 'faradaic_heat', 'lithium_conc_cond', 'lithium_boundary_value']
    _child_classes = dict(
        potential_boundary_condition=potential_boundary_condition,
        potential_boundary_value=potential_boundary_value,
        elec_potential_jump=elec_potential_jump,
        elec_potential_resistance=elec_potential_resistance,
        electrolyte_potential_boundary_condition=electrolyte_potential_boundary_condition,
        current_density_boundary_value=current_density_boundary_value,
        echem_reaction=echem_reaction,
        elec_potential_mechs=elec_potential_mechs,
        faradaic_heat=faradaic_heat,
        lithium_conc_cond=lithium_conc_cond,
        lithium_boundary_value=lithium_boundary_value,
    )
    _child_aliases = dict(
        dual_potential_type=('electrolyte_potential_boundary_condition', 'dual-potential-type'),
        dual_potential_value=('current_density_boundary_value', 'dual-potential-value'),
        elec_potential_type=('potential_boundary_condition', 'elec-potential-type'),
        elec_potential_value=('potential_boundary_value', 'elec-potential-value'),
        li_ion_type=('lithium_conc_cond', 'li-ion-type'),
        li_ion_value=('lithium_boundary_value', 'li-ion-value'),
    )

class fensapice_ice_icing_mode(Integer):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-ice-icing-mode'
    _python_name = 'fensapice_ice_icing_mode'

class fensapice_ice_hflux_mode(Integer):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-ice-hflux-mode'
    _python_name = 'fensapice_ice_hflux_mode'

class fensapice_ice_hflux_value(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-ice-hflux-value'
    _python_name = 'fensapice_ice_hflux_value'

class fensapice_ice_hflux_file(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-ice-hflux-file'
    _python_name = 'fensapice_ice_hflux_file'

class fensapice_ice_wall_thickness(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-ice-wall-thickness'
    _python_name = 'fensapice_ice_wall_thickness'

class fensapice_ice_wall_internal_temperature(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-ice-wall-internal-temperature'
    _python_name = 'fensapice_ice_wall_internal_temperature'

class fensapice_ice_wall_conductivity(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-ice-wall-conductivity'
    _python_name = 'fensapice_ice_wall_conductivity'

class fensapice_drop_vwet(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-vwet?'
    _python_name = 'fensapice_drop_vwet'

class fensapice_drop_reinj(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-drop-reinj?'
    _python_name = 'fensapice_drop_reinj'

class fensapice_dpm_wall_condition(Integer):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-dpm-wall-condition'
    _python_name = 'fensapice_dpm_wall_condition'

class fensapice_dpm_udf_wall_cond(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-dpm-udf-wall-cond'
    _python_name = 'fensapice_dpm_udf_wall_cond'

class fensapice_dpm_bc_norm_coeff(RealList):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-dpm-bc-norm-coeff'
    _python_name = 'fensapice_dpm_bc_norm_coeff'

class fensapice_dpm_bc_tang_coeff(RealList):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'fensapice-dpm-bc-tang-coeff'
    _python_name = 'fensapice_dpm_bc_tang_coeff'

class icing_2(Group):
    """
    Allows to change icing model variables or settings.
    """
    _version = '251'
    fluent_name = 'icing'
    _python_name = 'icing'
    child_names = ['fensapice_flow_bc_subtype', 'fensapice_ice_icing_mode', 'fensapice_ice_hflux_mode', 'fensapice_ice_hflux_value', 'fensapice_ice_hflux_file', 'fensapice_ice_wall_thickness', 'fensapice_ice_wall_internal_temperature', 'fensapice_ice_wall_conductivity', 'fensapice_drop_vwet', 'fensapice_drop_reinj', 'fensapice_dpm_wall_condition', 'fensapice_dpm_udf_wall_cond', 'fensapice_dpm_bc_norm_coeff', 'fensapice_dpm_bc_tang_coeff']
    _child_classes = dict(
        fensapice_flow_bc_subtype=fensapice_flow_bc_subtype,
        fensapice_ice_icing_mode=fensapice_ice_icing_mode,
        fensapice_ice_hflux_mode=fensapice_ice_hflux_mode,
        fensapice_ice_hflux_value=fensapice_ice_hflux_value,
        fensapice_ice_hflux_file=fensapice_ice_hflux_file,
        fensapice_ice_wall_thickness=fensapice_ice_wall_thickness,
        fensapice_ice_wall_internal_temperature=fensapice_ice_wall_internal_temperature,
        fensapice_ice_wall_conductivity=fensapice_ice_wall_conductivity,
        fensapice_drop_vwet=fensapice_drop_vwet,
        fensapice_drop_reinj=fensapice_drop_reinj,
        fensapice_dpm_wall_condition=fensapice_dpm_wall_condition,
        fensapice_dpm_udf_wall_cond=fensapice_dpm_udf_wall_cond,
        fensapice_dpm_bc_norm_coeff=fensapice_dpm_bc_norm_coeff,
        fensapice_dpm_bc_tang_coeff=fensapice_dpm_bc_tang_coeff,
    )

class ablation_select_model(String, AllowedValuesMixin):
    """
    Ablation Model.
    """
    _version = '251'
    fluent_name = 'ablation-select-model'
    _python_name = 'ablation_select_model'

class ablation_vielle_a(Real):
    """
    Parameter A.
    """
    _version = '251'
    fluent_name = 'ablation-vielle-a'
    _python_name = 'ablation_vielle_a'

class ablation_vielle_n(Real):
    """
    Parameter n.
    """
    _version = '251'
    fluent_name = 'ablation-vielle-n'
    _python_name = 'ablation_vielle_n'

class ablation_flux(Boolean):
    """
    Species Flux?.
    """
    _version = '251'
    fluent_name = 'ablation-flux?'
    _python_name = 'ablation_flux'

class ablation_surfacerxn_density(Real):
    """
    Ablative Material Density.
    """
    _version = '251'
    fluent_name = 'ablation-surfacerxn-density'
    _python_name = 'ablation_surfacerxn_density'

class species_mass_fraction_1_child(Group):
    """
    'child_object_type' of species_mass_fraction.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'species_mass_fraction_child'
    child_names = ['option', 'value', 'profile_name', 'field_name', 'udf']
    _child_classes = dict(
        option=option_31,
        value=value_17,
        profile_name=profile_name,
        field_name=field_name,
        udf=udf,
    )
    _child_aliases = dict(
        constant=('value', 'constant'),
    )

class species_mass_fraction_1(NamedObject[species_mass_fraction_1_child], CreatableNamedObjectMixin[species_mass_fraction_1_child]):
    """
    List of species mass fractions or mole fractions.
    """
    _version = '251'
    fluent_name = 'species-mass-fraction'
    _python_name = 'species_mass_fraction'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_mass_fraction_1_child

class ablation_1(Group):
    """
    Allows to change ablation model variables or settings.
    """
    _version = '251'
    fluent_name = 'ablation'
    _python_name = 'ablation'
    child_names = ['ablation_select_model', 'ablation_vielle_a', 'ablation_vielle_n', 'ablation_flux', 'ablation_surfacerxn_density', 'species_mass_fraction']
    _child_classes = dict(
        ablation_select_model=ablation_select_model,
        ablation_vielle_a=ablation_vielle_a,
        ablation_vielle_n=ablation_vielle_n,
        ablation_flux=ablation_flux,
        ablation_surfacerxn_density=ablation_surfacerxn_density,
        species_mass_fraction=species_mass_fraction_1,
    )
    _child_aliases = dict(
        ablation_species_mf=('species_mass_fraction', 'ablation/species-mf'),
    )

class phase_25_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'wall_film', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'ablation', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        momentum=momentum_11,
        turbulence=turbulence_6,
        thermal=thermal_6,
        radiation=radiation_7,
        species=species_10,
        discrete_phase=discrete_phase_5,
        wall_film=wall_film_1,
        multiphase=multiphase_7,
        potential=potential_3,
        structure=structure_1,
        uds=uds,
        icing=icing_2,
        ablation=ablation_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_25(NamedObject[phase_25_child], CreatableNamedObjectMixin[phase_25_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_25_child

class wall_child(Group):
    """
    'child_object_type' of wall.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'wall_child'
    child_names = ['name', 'phase', 'momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'wall_film', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'ablation', 'geometry']
    query_names = ['adjacent_cell_zone', 'shadow_face_zone']
    _child_classes = dict(
        name=name_2,
        phase=phase_25,
        momentum=momentum_11,
        turbulence=turbulence_6,
        thermal=thermal_6,
        radiation=radiation_7,
        species=species_10,
        discrete_phase=discrete_phase_5,
        wall_film=wall_film_1,
        multiphase=multiphase_7,
        potential=potential_3,
        structure=structure_1,
        uds=uds,
        icing=icing_2,
        ablation=ablation_1,
        geometry=geometry_4,
        adjacent_cell_zone=adjacent_cell_zone,
        shadow_face_zone=shadow_face_zone,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class wall(NamedObject[wall_child], CreatableNamedObjectMixin[wall_child]):
    """
    Settings for boundary-condition object.
    """
    _version = '251'
    fluent_name = 'wall'
    _python_name = 'wall'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = wall_child

class sigma(Real):
    """
    Nrbc sigma factor (default value 0.15).
    """
    _version = '251'
    fluent_name = 'sigma'
    _python_name = 'sigma'

class sigma2(Real):
    """
    Nrbc sigma2 factor (default value 5.0).
    """
    _version = '251'
    fluent_name = 'sigma2'
    _python_name = 'sigma2'

class relax(Real):
    """
    NRBC relaxation factor (default value 0.5).
    """
    _version = '251'
    fluent_name = 'relax'
    _python_name = 'relax'

class tangential_source(Boolean):
    """
    Include or not NRBC tangential source (default value #t).
    """
    _version = '251'
    fluent_name = 'tangential-source?'
    _python_name = 'tangential_source'

class verbosity_4(Integer):
    """
    Print boundary equations convergence info.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class general_nrbc(Group):
    """
    The object.
    """
    _version = '251'
    fluent_name = 'general-nrbc'
    _python_name = 'general_nrbc'
    child_names = ['sigma', 'sigma2', 'relax', 'tangential_source', 'verbosity']
    _child_classes = dict(
        sigma=sigma,
        sigma2=sigma2,
        relax=relax,
        tangential_source=tangential_source,
        verbosity=verbosity_4,
    )

class enable_17(Boolean):
    """
    Enable/disable turbo-specific non-reflecting b.c.'s.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class discretization(Boolean):
    """
    Enable use of higher-order reconstruction at boundaries if available.
    """
    _version = '251'
    fluent_name = 'discretization'
    _python_name = 'discretization'

class under_relaxation_1(Real):
    """
    Turbo-specific non-reflecting b.c. under-relaxation factor.
    """
    _version = '251'
    fluent_name = 'under-relaxation'
    _python_name = 'under_relaxation'

class verbosity_5(Integer):
    """
    Turbo-specific non-reflecting b.c. verbosity level.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class initialize(Command):
    """
    Initialize turbo-specific non-reflecting b.c.'s.
    """
    _version = '251'
    fluent_name = 'initialize'
    _python_name = 'initialize'

class show_status(Command):
    """
    Show current status of turbo-specific non-reflecting b.c.'s.
    """
    _version = '251'
    fluent_name = 'show-status'
    _python_name = 'show_status'

class turbo_sepcific_nrbc(Group):
    """
    The turbo-specific n.r.b.c. object.
    """
    _version = '251'
    fluent_name = 'turbo-sepcific-nrbc'
    _python_name = 'turbo_sepcific_nrbc'
    child_names = ['enable', 'discretization', 'under_relaxation', 'verbosity']
    command_names = ['initialize', 'show_status']
    _child_classes = dict(
        enable=enable_17,
        discretization=discretization,
        under_relaxation=under_relaxation_1,
        verbosity=verbosity_5,
        initialize=initialize,
        show_status=show_status,
    )

class non_reflecting_bc(Group):
    """
    The non-reflecting b.c. object.
    """
    _version = '251'
    fluent_name = 'non-reflecting-bc'
    _python_name = 'non_reflecting_bc'
    child_names = ['general_nrbc', 'turbo_sepcific_nrbc']
    _child_classes = dict(
        general_nrbc=general_nrbc,
        turbo_sepcific_nrbc=turbo_sepcific_nrbc,
    )

class setup_method(String, AllowedValuesMixin):
    """
    'setup_method' child.
    """
    _version = '251'
    fluent_name = 'setup-method'
    _python_name = 'setup_method'

class ninjections(Integer):
    """
    The number of injection boundaries.
    """
    _version = '251'
    fluent_name = 'ninjections'
    _python_name = 'ninjections'

class urf(Real):
    """
    The explicit relaxation factor.
    """
    _version = '251'
    fluent_name = 'urf'
    _python_name = 'urf'

class injection_thread(String, AllowedValuesMixin):
    """
    The wall zone name.
    """
    _version = '251'
    fluent_name = 'injection-thread'
    _python_name = 'injection_thread'

class coupled(Boolean):
    """
    Injection wall is coupled?.
    """
    _version = '251'
    fluent_name = 'coupled?'
    _python_name = 'coupled'

class extraction_thread(String, AllowedValuesMixin):
    """
    The wall zone name.
    """
    _version = '251'
    fluent_name = 'extraction-thread'
    _python_name = 'extraction_thread'

class uniform(Boolean):
    """
    Injection wall is uniform?.
    """
    _version = '251'
    fluent_name = 'uniform?'
    _python_name = 'uniform'

class injection_hole_count(Integer):
    """
    The number of injection holes.
    """
    _version = '251'
    fluent_name = 'injection-hole-count'
    _python_name = 'injection_hole_count'

class discrete_ext(Boolean):
    """
    Discrete on extraction side?.
    """
    _version = '251'
    fluent_name = 'discrete-ext?'
    _python_name = 'discrete_ext'

class static(Boolean):
    """
    Static injection?.
    """
    _version = '251'
    fluent_name = 'static?'
    _python_name = 'static'

class formulation(Integer):
    """
    Mass flow rate formulation (0 [incompressible]; 1 [compressible]):.
    """
    _version = '251'
    fluent_name = 'formulation'
    _python_name = 'formulation'

class cht_coupling(Boolean):
    """
    Enable CHT heat transfer coupling.
    """
    _version = '251'
    fluent_name = 'cht-coupling'
    _python_name = 'cht_coupling'

class point1(RealList):
    """
    The coordinates of point 1.
    """
    _version = '251'
    fluent_name = 'point1'
    _python_name = 'point1'

class point2_or_vector(RealList):
    """
    The coordinates of point 2 or vector of aixs.
    """
    _version = '251'
    fluent_name = 'point2-or-vector'
    _python_name = 'point2_or_vector'

class diameter_1(Real):
    """
    The diameter of cyclinder.
    """
    _version = '251'
    fluent_name = 'diameter'
    _python_name = 'diameter'

class injection_hole_child(Group):
    """
    'child_object_type' of injection_hole.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'injection_hole_child'
    child_names = ['point1', 'point2_or_vector', 'diameter']
    _child_classes = dict(
        point1=point1,
        point2_or_vector=point2_or_vector,
        diameter=diameter_1,
    )

class injection_hole(ListObject[injection_hole_child]):
    """
    'injection_hole' child.
    """
    _version = '251'
    fluent_name = 'injection-hole'
    _python_name = 'injection_hole'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = injection_hole_child

class holes_setup(Group):
    """
    'holes_setup' child.
    """
    _version = '251'
    fluent_name = 'holes-setup'
    _python_name = 'holes_setup'
    child_names = ['method', 'injection_hole']
    _child_classes = dict(
        method=method_3,
        injection_hole=injection_hole,
    )

class method_6(Integer):
    """
    The dynamic injection method.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class acd(Real):
    """
    ACd: .
    """
    _version = '251'
    fluent_name = 'acd'
    _python_name = 'acd'

class cd(Real):
    """
    Cd: .
    """
    _version = '251'
    fluent_name = 'cd'
    _python_name = 'cd'

class direction_3(RealList):
    """
    The vector of direction.
    """
    _version = '251'
    fluent_name = 'direction'
    _python_name = 'direction'

class angle_2(RealList):
    """
    The angles.
    """
    _version = '251'
    fluent_name = 'angle'
    _python_name = 'angle'

class dynamic_injection_child(Group):
    """
    'child_object_type' of dynamic_injection.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'dynamic_injection_child'
    child_names = ['acd', 'cd', 'direction', 'angle']
    _child_classes = dict(
        acd=acd,
        cd=cd,
        direction=direction_3,
        angle=angle_2,
    )

class dynamic_injection(ListObject[dynamic_injection_child]):
    """
    'dynamic_injection' child.
    """
    _version = '251'
    fluent_name = 'dynamic-injection'
    _python_name = 'dynamic_injection'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = dynamic_injection_child

class dynamic_setup(Group):
    """
    'dynamic_setup' child.
    """
    _version = '251'
    fluent_name = 'dynamic-setup'
    _python_name = 'dynamic_setup'
    child_names = ['method', 'dynamic_injection']
    _child_classes = dict(
        method=method_6,
        dynamic_injection=dynamic_injection,
    )

class method_7(Integer):
    """
    The static injection method.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class mass_flow_rate_2(Real):
    """
    Mass flow rate [kg/s]: .
    """
    _version = '251'
    fluent_name = 'mass-flow-rate'
    _python_name = 'mass_flow_rate'

class flow_direction_1(RealList):
    """
    The vector of direction.
    """
    _version = '251'
    fluent_name = 'flow-direction'
    _python_name = 'flow_direction'

class temperature_3(Real):
    """
    Temperature [K]: .
    """
    _version = '251'
    fluent_name = 'temperature'
    _python_name = 'temperature'

class mixture_fraction_1(Real):
    """
    Mixture fraction: .
    """
    _version = '251'
    fluent_name = 'mixture-fraction'
    _python_name = 'mixture_fraction'

class progress_variable_1(Real):
    """
    Progress variable: .
    """
    _version = '251'
    fluent_name = 'progress-variable'
    _python_name = 'progress_variable'

class species_11(RealList):
    """
    The species mass fraction.
    """
    _version = '251'
    fluent_name = 'species'
    _python_name = 'species'

class static_injection_child(Group):
    """
    'child_object_type' of static_injection.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'static_injection_child'
    child_names = ['mass_flow_rate', 'flow_direction', 'temperature', 'mixture_fraction', 'progress_variable', 'species']
    _child_classes = dict(
        mass_flow_rate=mass_flow_rate_2,
        flow_direction=flow_direction_1,
        temperature=temperature_3,
        mixture_fraction=mixture_fraction_1,
        progress_variable=progress_variable_1,
        species=species_11,
    )

class static_injection(ListObject[static_injection_child]):
    """
    'static_injection' child.
    """
    _version = '251'
    fluent_name = 'static-injection'
    _python_name = 'static_injection'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = static_injection_child

class static_setup(Group):
    """
    'static_setup' child.
    """
    _version = '251'
    fluent_name = 'static-setup'
    _python_name = 'static_setup'
    child_names = ['method', 'static_injection']
    _child_classes = dict(
        method=method_7,
        static_injection=static_injection,
    )

class injection_1_child(Group):
    """
    'child_object_type' of injection.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'injection_child'
    child_names = ['injection_thread', 'coupled', 'extraction_thread', 'uniform', 'injection_hole_count', 'discrete_ext', 'static', 'formulation', 'cht_coupling', 'holes_setup', 'dynamic_setup', 'static_setup']
    _child_classes = dict(
        injection_thread=injection_thread,
        coupled=coupled,
        extraction_thread=extraction_thread,
        uniform=uniform,
        injection_hole_count=injection_hole_count,
        discrete_ext=discrete_ext,
        static=static,
        formulation=formulation,
        cht_coupling=cht_coupling,
        holes_setup=holes_setup,
        dynamic_setup=dynamic_setup,
        static_setup=static_setup,
    )

class injection_1(ListObject[injection_1_child]):
    """
    'injection' child.
    """
    _version = '251'
    fluent_name = 'injection'
    _python_name = 'injection'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = injection_1_child

class model_setup(Group):
    """
    'model_setup' child.
    """
    _version = '251'
    fluent_name = 'model-setup'
    _python_name = 'model_setup'
    child_names = ['ninjections', 'urf', 'injection']
    _child_classes = dict(
        ninjections=ninjections,
        urf=urf,
        injection=injection_1,
    )

class file_name_13(String):
    """
    'file_name' child.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class read_input_file(Command):
    """
    'read_input_file' command.
    """
    _version = '251'
    fluent_name = 'read-input-file'
    _python_name = 'read_input_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_13,
    )

class perforated_wall(Group):
    """
    Perforated wall model.
    """
    _version = '251'
    fluent_name = 'perforated-wall'
    _python_name = 'perforated_wall'
    child_names = ['setup_method', 'model_setup']
    command_names = ['read_input_file']
    _child_classes = dict(
        setup_method=setup_method,
        model_setup=model_setup,
        read_input_file=read_input_file,
    )

class degassing_verbosity(Integer, AllowedValuesMixin):
    """
    The verbosity level of the total mass flow rate at the degassing boundary. The acceptable values are:.
    """
    _version = '251'
    fluent_name = 'degassing-verbosity'
    _python_name = 'degassing_verbosity'

class mass_flow(Boolean):
    """
    Method for setting the mass flow rate.
    """
    _version = '251'
    fluent_name = 'mass-flow'
    _python_name = 'mass_flow'

class blending_factor_1(Real):
    """
    The pressure blend factor(f), blends between specified pressure and average pressure conditions.
    If f = 1 recovers specified pressure, f = 0 recovers fully averaged pressure.
    """
    _version = '251'
    fluent_name = 'blending-factor'
    _python_name = 'blending_factor'

class bin_count(Integer):
    """
    The number of bins in to which the boundary is subdivided in radial or axial strips.
    """
    _version = '251'
    fluent_name = 'bin-count'
    _python_name = 'bin_count'

class average_pressure(Boolean):
    """
    Supress pressure average warning messages when average pressure is enabled with unsteady flow.
    """
    _version = '251'
    fluent_name = 'average-pressure'
    _python_name = 'average_pressure'

class pressure_outlet_1(Group):
    """
    Pressure specification method on pressure-outlet boundaries.
    """
    _version = '251'
    fluent_name = 'pressure-outlet'
    _python_name = 'pressure_outlet'
    child_names = ['blending_factor', 'bin_count', 'average_pressure']
    _child_classes = dict(
        blending_factor=blending_factor_1,
        bin_count=bin_count,
        average_pressure=average_pressure,
    )

class riemann_invariants_tangency_correction(Boolean):
    """
    Apply a local correction where the flow is tangential to the boundary.
    """
    _version = '251'
    fluent_name = 'riemann-invariants-tangency-correction'
    _python_name = 'riemann_invariants_tangency_correction'

class type_3(String, AllowedValuesMixin):
    """
    Pressure-far-field boundary-condition type.
    """
    _version = '251'
    fluent_name = 'type?'
    _python_name = 'type'

class pressure_far_field_1(Group):
    """
    Presure-far-field boundary-condition options.
    """
    _version = '251'
    fluent_name = 'pressure-far-field'
    _python_name = 'pressure_far_field'
    child_names = ['riemann_invariants_tangency_correction', 'type']
    _child_classes = dict(
        riemann_invariants_tangency_correction=riemann_invariants_tangency_correction,
        type=type_3,
    )

class physical_velocity_porous_formulation(Boolean):
    """
    Enables the physical velocity (rather than superficial velocity) porous formulation.
    """
    _version = '251'
    fluent_name = 'physical-velocity-porous-formulation?'
    _python_name = 'physical_velocity_porous_formulation'

class under_relaxation_factor(Real):
    """
    Under-relaxation-factor.
    """
    _version = '251'
    fluent_name = 'under-relaxation-factor'
    _python_name = 'under_relaxation_factor'

class verbosity_6(Boolean):
    """
    Enable targeted mass flow rate verbosity?.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class target_mass_flow_rate_settings(Group):
    """
    The targeted mass flow rate setting object.
    """
    _version = '251'
    fluent_name = 'target-mass-flow-rate-settings'
    _python_name = 'target_mass_flow_rate_settings'
    child_names = ['under_relaxation_factor', 'verbosity']
    _child_classes = dict(
        under_relaxation_factor=under_relaxation_factor,
        verbosity=verbosity_6,
    )

class delay_model_change_update(Boolean):
    """
    Model change call update.
    """
    _version = '251'
    fluent_name = 'delay-model-change-update?'
    _python_name = 'delay_model_change_update'

class batch_thread_update(Boolean):
    """
    Batch thread update option.
    """
    _version = '251'
    fluent_name = 'batch-thread-update?'
    _python_name = 'batch_thread_update'

class advanced_2(Group):
    """
    Control settings while doing BC setup.
    """
    _version = '251'
    fluent_name = 'advanced'
    _python_name = 'advanced'
    child_names = ['delay_model_change_update', 'batch_thread_update']
    _child_classes = dict(
        delay_model_change_update=delay_model_change_update,
        batch_thread_update=batch_thread_update,
    )

class detect_boundary_advection(Command):
    """
    Detect and set boundary advection at solid walls.
    """
    _version = '251'
    fluent_name = 'detect-boundary-advection'
    _python_name = 'detect_boundary_advection'

class settings_1(Group):
    """
    'settings' child.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['degassing_verbosity', 'mass_flow', 'pressure_outlet', 'pressure_far_field', 'physical_velocity_porous_formulation', 'target_mass_flow_rate_settings', 'advanced']
    command_names = ['detect_boundary_advection']
    _child_classes = dict(
        degassing_verbosity=degassing_verbosity,
        mass_flow=mass_flow,
        pressure_outlet=pressure_outlet_1,
        pressure_far_field=pressure_far_field_1,
        physical_velocity_porous_formulation=physical_velocity_porous_formulation,
        target_mass_flow_rate_settings=target_mass_flow_rate_settings,
        advanced=advanced_2,
        detect_boundary_advection=detect_boundary_advection,
    )

class slit_face_zone(Command):
    """
    Slit a two-sided wall into two connected wall zones.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
    """
    _version = '251'
    fluent_name = 'slit-face-zone'
    _python_name = 'slit_face_zone'
    argument_names = ['zone_name']
    _child_classes = dict(
        zone_name=zone_name_2,
    )

class non_overlapping_zone_name(Command):
    """
    Get non-overlapping zone name from the associated interface zone.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
    """
    _version = '251'
    fluent_name = 'non-overlapping-zone-name'
    _python_name = 'non_overlapping_zone_name'
    argument_names = ['zone_name']
    _child_classes = dict(
        zone_name=zone_name_2,
    )

class slit_interior_between_diff_solids(Command):
    """
    Slit interior created between different solids into coupled walls.
    """
    _version = '251'
    fluent_name = 'slit-interior-between-diff-solids'
    _python_name = 'slit_interior_between_diff_solids'

class create_all_shell_threads(Command):
    """
    Mark all finite thickness wall for shell creation. Shell zones will be created at the start of iterations.
    """
    _version = '251'
    fluent_name = 'create-all-shell-threads'
    _python_name = 'create_all_shell_threads'

class recreate_all_shells(Command):
    """
    Create shell on all the walls where which were deleted using the command delete-all-shells.
    """
    _version = '251'
    fluent_name = 'recreate-all-shells'
    _python_name = 'recreate_all_shells'

class delete_all_shells(Command):
    """
    Delete all shell zones and switch off shell conduction on all the walls. These zones can be recreated using the command recreate-all-shells.
    """
    _version = '251'
    fluent_name = 'delete-all-shells'
    _python_name = 'delete_all_shells'

class orient_face_zone(Command):
    """
    Orient the face zone.
    
    Parameters
    ----------
        zone_name : str
            The zone name.
    """
    _version = '251'
    fluent_name = 'orient-face-zone'
    _python_name = 'orient_face_zone'
    argument_names = ['zone_name']
    _child_classes = dict(
        zone_name=zone_name_2,
    )

class length(Real):
    """
    Characteristic physics length.
    """
    _version = '251'
    fluent_name = 'length'
    _python_name = 'length'

class boundary_1(String, AllowedValuesMixin):
    """
    Give flow boundary name.
    """
    _version = '251'
    fluent_name = 'boundary'
    _python_name = 'boundary'

class knudsen_number_calculator(Command):
    """
    Utility to compute Kudsen number based on characteristic length and boundary information.
    
    Parameters
    ----------
        length : real
            Characteristic physics length.
        boundary : str
            Give flow boundary name.
    """
    _version = '251'
    fluent_name = 'knudsen-number-calculator'
    _python_name = 'knudsen_number_calculator'
    argument_names = ['length', 'boundary']
    _child_classes = dict(
        length=length,
        boundary=boundary_1,
    )

class zonename(String, AllowedValuesMixin):
    """
    The zone name.
    """
    _version = '251'
    fluent_name = 'zonename'
    _python_name = 'zonename'

class newname(String):
    """
    Give a new zone name.
    """
    _version = '251'
    fluent_name = 'newname'
    _python_name = 'newname'

class set_zone_name(Command):
    """
    Give a zone a new name.
    
    Parameters
    ----------
        zonename : str
            The zone name.
        newname : str
            Give a new zone name.
    """
    _version = '251'
    fluent_name = 'set-zone-name'
    _python_name = 'set_zone_name'
    argument_names = ['zonename', 'newname']
    _child_classes = dict(
        zonename=zonename,
        newname=newname,
    )

class zone_name_8(StringList, AllowedValuesMixin):
    """
    Zone name list.
    """
    _version = '251'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'

class append(Boolean):
    """
    Add suffix to zone name.
    """
    _version = '251'
    fluent_name = 'append?'
    _python_name = 'append'

class text(String):
    """
    Add prefix to zone name.
    """
    _version = '251'
    fluent_name = 'text'
    _python_name = 'text'

class add_suffix_or_prefix(Command):
    """
    Add suffix or prefix to zone name.
    
    Parameters
    ----------
        zone_name : List
            Zone name list.
        append : bool
            Add suffix to zone name.
        text : str
            Add prefix to zone name.
    """
    _version = '251'
    fluent_name = 'add-suffix-or-prefix'
    _python_name = 'add_suffix_or_prefix'
    argument_names = ['zone_name', 'append', 'text']
    _child_classes = dict(
        zone_name=zone_name_8,
        append=append,
        text=text,
    )

class abbreviate_types(Boolean):
    """
    Specifies whether to provide abbreviate types.
    """
    _version = '251'
    fluent_name = 'abbreviate-types?'
    _python_name = 'abbreviate_types'

class exclude(Boolean):
    """
    Specifies whether to exclude custom names.
    """
    _version = '251'
    fluent_name = 'exclude?'
    _python_name = 'exclude'

class rename_by_adjacency(Command):
    """
    Rename zone to adjacent zones.
    
    Parameters
    ----------
        zone_name : List
            Zone name list.
        abbreviate_types : bool
            Specifies whether to provide abbreviate types.
        exclude : bool
            Specifies whether to exclude custom names.
    """
    _version = '251'
    fluent_name = 'rename-by-adjacency'
    _python_name = 'rename_by_adjacency'
    argument_names = ['zone_name', 'abbreviate_types', 'exclude']
    _child_classes = dict(
        zone_name=zone_name_8,
        abbreviate_types=abbreviate_types,
        exclude=exclude,
    )

class abbrev(Boolean):
    """
    Specifies whether to provide abbreviate types.
    """
    _version = '251'
    fluent_name = 'abbrev?'
    _python_name = 'abbrev'

class rename_to_default(Command):
    """
    Rename zone to default name.
    
    Parameters
    ----------
        zone_name : List
            Zone name list.
        abbrev : bool
            Specifies whether to provide abbreviate types.
        exclude : bool
            Specifies whether to exclude custom names.
    """
    _version = '251'
    fluent_name = 'rename-to-default'
    _python_name = 'rename_to_default'
    argument_names = ['zone_name', 'abbrev', 'exclude']
    _child_classes = dict(
        zone_name=zone_name_8,
        abbrev=abbrev,
        exclude=exclude,
    )

class boundary_conditions(Group, _ChildNamedObjectAccessorMixin):
    """
    The boundary conditions object.
    """
    _version = '251'
    fluent_name = 'boundary-conditions'
    _python_name = 'boundary_conditions'
    child_names = ['axis', 'degassing', 'exhaust_fan', 'fan', 'geometry', 'inlet_vent', 'intake_fan', 'interface', 'interior', 'mass_flow_inlet', 'mass_flow_outlet', 'network', 'network_end', 'outflow', 'outlet_vent', 'overset', 'periodic', 'porous_jump', 'pressure_far_field', 'pressure_inlet', 'pressure_outlet', 'radiator', 'rans_les_interface', 'recirculation_inlet', 'recirculation_outlet', 'shadow', 'symmetry', 'velocity_inlet', 'wall', 'non_reflecting_bc', 'perforated_wall', 'settings']
    command_names = ['copy', 'set_zone_type', 'slit_face_zone', 'non_overlapping_zone_name', 'slit_interior_between_diff_solids', 'create_all_shell_threads', 'recreate_all_shells', 'delete_all_shells', 'orient_face_zone', 'knudsen_number_calculator', 'set_zone_name', 'add_suffix_or_prefix', 'rename_by_adjacency', 'rename_to_default']
    _child_classes = dict(
        axis=axis_2,
        degassing=degassing,
        exhaust_fan=exhaust_fan,
        fan=fan,
        geometry=geometry_3,
        inlet_vent=inlet_vent,
        intake_fan=intake_fan,
        interface=interface,
        interior=interior,
        mass_flow_inlet=mass_flow_inlet,
        mass_flow_outlet=mass_flow_outlet,
        network=network,
        network_end=network_end,
        outflow=outflow,
        outlet_vent=outlet_vent,
        overset=overset,
        periodic=periodic,
        porous_jump=porous_jump,
        pressure_far_field=pressure_far_field,
        pressure_inlet=pressure_inlet,
        pressure_outlet=pressure_outlet,
        radiator=radiator,
        rans_les_interface=rans_les_interface,
        recirculation_inlet=recirculation_inlet,
        recirculation_outlet=recirculation_outlet,
        shadow=shadow,
        symmetry=symmetry,
        velocity_inlet=velocity_inlet,
        wall=wall,
        non_reflecting_bc=non_reflecting_bc,
        perforated_wall=perforated_wall,
        settings=settings_1,
        copy=copy_1,
        set_zone_type=set_zone_type,
        slit_face_zone=slit_face_zone,
        non_overlapping_zone_name=non_overlapping_zone_name,
        slit_interior_between_diff_solids=slit_interior_between_diff_solids,
        create_all_shell_threads=create_all_shell_threads,
        recreate_all_shells=recreate_all_shells,
        delete_all_shells=delete_all_shells,
        orient_face_zone=orient_face_zone,
        knudsen_number_calculator=knudsen_number_calculator,
        set_zone_name=set_zone_name,
        add_suffix_or_prefix=add_suffix_or_prefix,
        rename_by_adjacency=rename_by_adjacency,
        rename_to_default=rename_to_default,
    )

class name_9(String):
    """
    The prefix for mesh interface names.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class zone1(String, AllowedValuesMixin):
    """
    First interface zones for pairing.
    """
    _version = '251'
    fluent_name = 'zone1'
    _python_name = 'zone1'

class zone2(String, AllowedValuesMixin):
    """
    Second interface zones for pairing.
    """
    _version = '251'
    fluent_name = 'zone2'
    _python_name = 'zone2'

class zone1_list(StringList, AllowedValuesMixin):
    """
    First interface defining this mesh-interface.
    """
    _version = '251'
    fluent_name = 'zone1-list'
    _python_name = 'zone1_list'

class zone2_list(StringList, AllowedValuesMixin):
    """
    Second interface defining this mesh-interface.
    """
    _version = '251'
    fluent_name = 'zone2-list'
    _python_name = 'zone2_list'

class mapped(Boolean):
    """
    Specifies whether mesh-interface is mapped.
    """
    _version = '251'
    fluent_name = 'mapped?'
    _python_name = 'mapped'

class enable_local_mapped_tolerance(Boolean):
    """
    Enable local tolerance for this mesh interface.
    """
    _version = '251'
    fluent_name = 'enable-local-mapped-tolerance?'
    _python_name = 'enable_local_mapped_tolerance'

class use_local_edge_length_factor(Boolean):
    """
    Enable tolerance based on local edge length factor instead of absolute tolerance.
    """
    _version = '251'
    fluent_name = 'use-local-edge-length-factor?'
    _python_name = 'use_local_edge_length_factor'

class local_relative_mapped_tolerance(Real):
    """
    Tolerance.
    """
    _version = '251'
    fluent_name = 'local-relative-mapped-tolerance'
    _python_name = 'local_relative_mapped_tolerance'

class local_absolute_mapped_tolerance(Real):
    """
    Tolerance.
    """
    _version = '251'
    fluent_name = 'local-absolute-mapped-tolerance'
    _python_name = 'local_absolute_mapped_tolerance'

class periodic_2(Boolean):
    """
    Specifies whether mesh-interface is adjacent to periodic boundaries.
    """
    _version = '251'
    fluent_name = 'periodic?'
    _python_name = 'periodic'

class turbo(Boolean):
    """
    Create a general turbo interface.
    """
    _version = '251'
    fluent_name = 'turbo?'
    _python_name = 'turbo'

class turbo_choice(String, AllowedValuesMixin):
    """
    Your choice of pitch-change types.
    """
    _version = '251'
    fluent_name = 'turbo-choice'
    _python_name = 'turbo_choice'

class mixing_plane(Boolean):
    """
    If you want to use mixing plane mechanism.
    """
    _version = '251'
    fluent_name = 'mixing-plane?'
    _python_name = 'mixing_plane'

class turbo_non_overlap(Boolean):
    """
    Create non-overlapping walls for gti interfaces.
    """
    _version = '251'
    fluent_name = 'turbo-non-overlap'
    _python_name = 'turbo_non_overlap'

class coupled_1(Boolean):
    """
    Specifies whether mesh-interface is coupled.
    """
    _version = '251'
    fluent_name = 'coupled?'
    _python_name = 'coupled'

class matching(Boolean):
    """
    Specifies whether mesh-interface is matching.
    """
    _version = '251'
    fluent_name = 'matching?'
    _python_name = 'matching'

class ignore_area_difference(Boolean):
    """
    Check if user want to create poorly matched interface.
    """
    _version = '251'
    fluent_name = 'ignore-area-difference?'
    _python_name = 'ignore_area_difference'

class static_1(Boolean):
    """
    Specifies whether mesh-interface is static.
    """
    _version = '251'
    fluent_name = 'static?'
    _python_name = 'static'

class create_3(CommandWithPositionalArgs):
    """
    Create mesh interfaces.
    
    Parameters
    ----------
        name : str
            The prefix for mesh interface names.
        zone1 : str
            First interface zones for pairing.
        zone2 : str
            Second interface zones for pairing.
        zone1_list : List
            First interface defining this mesh-interface.
        zone2_list : List
            Second interface defining this mesh-interface.
        mapped : bool
            Specifies whether mesh-interface is mapped.
        enable_local_mapped_tolerance : bool
            Enable local tolerance for this mesh interface.
        use_local_edge_length_factor : bool
            Enable tolerance based on local edge length factor instead of absolute tolerance.
        local_relative_mapped_tolerance : real
            Tolerance.
        local_absolute_mapped_tolerance : real
            Tolerance.
        periodic : bool
            Specifies whether mesh-interface is adjacent to periodic boundaries.
        turbo : bool
            Create a general turbo interface.
        turbo_choice : str
            Your choice of pitch-change types.
        mixing_plane : bool
            If you want to use mixing plane mechanism.
        turbo_non_overlap : bool
            Create non-overlapping walls for gti interfaces.
        coupled : bool
            Specifies whether mesh-interface is coupled.
        matching : bool
            Specifies whether mesh-interface is matching.
        ignore_area_difference : bool
            Check if user want to create poorly matched interface.
        static : bool
            Specifies whether mesh-interface is static.
    """
    _version = '251'
    fluent_name = 'create'
    _python_name = 'create'
    argument_names = ['name', 'zone1', 'zone2', 'zone1_list', 'zone2_list', 'mapped', 'enable_local_mapped_tolerance', 'use_local_edge_length_factor', 'local_relative_mapped_tolerance', 'local_absolute_mapped_tolerance', 'periodic', 'turbo', 'turbo_choice', 'mixing_plane', 'turbo_non_overlap', 'coupled', 'matching', 'ignore_area_difference', 'static']
    _child_classes = dict(
        name=name_9,
        zone1=zone1,
        zone2=zone2,
        zone1_list=zone1_list,
        zone2_list=zone2_list,
        mapped=mapped,
        enable_local_mapped_tolerance=enable_local_mapped_tolerance,
        use_local_edge_length_factor=use_local_edge_length_factor,
        local_relative_mapped_tolerance=local_relative_mapped_tolerance,
        local_absolute_mapped_tolerance=local_absolute_mapped_tolerance,
        periodic=periodic_2,
        turbo=turbo,
        turbo_choice=turbo_choice,
        mixing_plane=mixing_plane,
        turbo_non_overlap=turbo_non_overlap,
        coupled=coupled_1,
        matching=matching,
        ignore_area_difference=ignore_area_difference,
        static=static_1,
    )

class zone1_1(String):
    """
    First interface of this mesh-interface.
    """
    _version = '251'
    fluent_name = 'zone1'
    _python_name = 'zone1'

class zone2_1(String):
    """
    Second interface of this mesh-interface.
    """
    _version = '251'
    fluent_name = 'zone2'
    _python_name = 'zone2'

class interface_2_child(Group):
    """
    'child_object_type' of interface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'interface_child'
    child_names = ['name', 'zone1', 'zone2', 'zone1_list', 'zone2_list', 'mapped', 'enable_local_mapped_tolerance', 'use_local_edge_length_factor', 'local_relative_mapped_tolerance', 'local_absolute_mapped_tolerance', 'periodic', 'turbo', 'turbo_choice', 'mixing_plane', 'turbo_non_overlap', 'coupled', 'matching', 'static']
    _child_classes = dict(
        name=name_9,
        zone1=zone1_1,
        zone2=zone2_1,
        zone1_list=zone1_list,
        zone2_list=zone2_list,
        mapped=mapped,
        enable_local_mapped_tolerance=enable_local_mapped_tolerance,
        use_local_edge_length_factor=use_local_edge_length_factor,
        local_relative_mapped_tolerance=local_relative_mapped_tolerance,
        local_absolute_mapped_tolerance=local_absolute_mapped_tolerance,
        periodic=periodic_2,
        turbo=turbo,
        turbo_choice=turbo_choice,
        mixing_plane=mixing_plane,
        turbo_non_overlap=turbo_non_overlap,
        coupled=coupled_1,
        matching=matching,
        static=static_1,
    )

class interface_2(NamedObject[interface_2_child], CreatableNamedObjectMixin[interface_2_child]):
    """
    Create mesh interfaces.
    """
    _version = '251'
    fluent_name = 'interface'
    _python_name = 'interface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_3,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = interface_2_child

class proximity_tolerance(Real):
    """
    Specification of auto pairing tolerance.
    """
    _version = '251'
    fluent_name = 'proximity-tolerance'
    _python_name = 'proximity_tolerance'

class set_default_name_prefix(String):
    """
    Specification of auto pairing default name prefix.
    """
    _version = '251'
    fluent_name = 'set-default-name-prefix'
    _python_name = 'set_default_name_prefix'

class set_minimum_area_percentage(Real):
    """
    The minimum area percentage for mesh interface creation.
    """
    _version = '251'
    fluent_name = 'set-minimum-area-percentage'
    _python_name = 'set_minimum_area_percentage'

class pairing_between_different_cell_zones_only(Boolean):
    """
    Pairing between interface zones from different cell zones only.
    """
    _version = '251'
    fluent_name = 'pairing-between-different-cell-zones-only?'
    _python_name = 'pairing_between_different_cell_zones_only'

class pairing_between_interface_zones_only(Boolean):
    """
    Pairing between interface zones only.
    """
    _version = '251'
    fluent_name = 'pairing-between-interface-zones-only?'
    _python_name = 'pairing_between_interface_zones_only'

class keep_empty_interface(Boolean):
    """
    Keep empty interfaces during one-to-one mesh interface creation.
    """
    _version = '251'
    fluent_name = 'keep-empty-interface?'
    _python_name = 'keep_empty_interface'

class option_33(String, AllowedValuesMixin):
    """
    (0) basic:           name-prefix:##
    (1) name-based:      name-prefix:##:interface_name1::interface_name2
    (2) ID-based:        name-prefix:##:interface_ID1::interface-ID2
    (3) adjacency-based: name-prefix:##:cell_zone_name1::cell_zone_name2.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class change_all_one_to_one_interfaces_names(Boolean):
    """
    Apply the new naming option to existing one-to-one mesh interfaces?.
    """
    _version = '251'
    fluent_name = 'change-all-one-to-one-interfaces-names?'
    _python_name = 'change_all_one_to_one_interfaces_names'

class naming_option(Command):
    """
    Specify whether or not to include an informative suffix to the mesh interface name.
    
    Parameters
    ----------
        option : str
            (0) basic:           name-prefix:##
    (1) name-based:      name-prefix:##:interface_name1::interface_name2
    (2) ID-based:        name-prefix:##:interface_ID1::interface-ID2
    (3) adjacency-based: name-prefix:##:cell_zone_name1::cell_zone_name2.
        change_all_one_to_one_interfaces_names : bool
            Apply the new naming option to existing one-to-one mesh interfaces?.
    """
    _version = '251'
    fluent_name = 'naming-option'
    _python_name = 'naming_option'
    argument_names = ['option', 'change_all_one_to_one_interfaces_names']
    _child_classes = dict(
        option=option_33,
        change_all_one_to_one_interfaces_names=change_all_one_to_one_interfaces_names,
    )

class adjustable_tolerance(Boolean):
    """
    Enable/disable one-to-one adjustable tolerance.
    """
    _version = '251'
    fluent_name = 'adjustable-tolerance?'
    _python_name = 'adjustable_tolerance'

class length_factor(Real):
    """
    The valid number for length factor.
    """
    _version = '251'
    fluent_name = 'length-factor'
    _python_name = 'length_factor'

class set_one_to_one_pairing_tolerance(Command):
    """
    Set one-to-one adjustable tolerance.
    
    Parameters
    ----------
        adjustable_tolerance : bool
            Enable/disable one-to-one adjustable tolerance.
        length_factor : real
            The valid number for length factor.
    """
    _version = '251'
    fluent_name = 'set-one-to-one-pairing-tolerance'
    _python_name = 'set_one_to_one_pairing_tolerance'
    argument_names = ['adjustable_tolerance', 'length_factor']
    _child_classes = dict(
        adjustable_tolerance=adjustable_tolerance,
        length_factor=length_factor,
    )

class exclude_pairs(Boolean):
    """
    Excluding specified zone pairs.
    """
    _version = '251'
    fluent_name = 'exclude-pairs?'
    _python_name = 'exclude_pairs'

class exclusion_pairs(StringList, AllowedValuesMixin):
    """
    Wall and/or interface zones for pairing. no input will clear the exclusion paris.
    """
    _version = '251'
    fluent_name = 'exclusion-pairs'
    _python_name = 'exclusion_pairs'

class set_exclusion_pairs(Command):
    """
    Set one-to-one interface exclusion pairs.
    
    Parameters
    ----------
        exclude_pairs : bool
            Excluding specified zone pairs.
        exclusion_pairs : List
            Wall and/or interface zones for pairing. no input will clear the exclusion paris.
    """
    _version = '251'
    fluent_name = 'set-exclusion-pairs'
    _python_name = 'set_exclusion_pairs'
    argument_names = ['exclude_pairs', 'exclusion_pairs']
    _child_classes = dict(
        exclude_pairs=exclude_pairs,
        exclusion_pairs=exclusion_pairs,
    )

class auto_options(Group):
    """
    Auto-options object.
    """
    _version = '251'
    fluent_name = 'auto-options'
    _python_name = 'auto_options'
    child_names = ['proximity_tolerance', 'set_default_name_prefix', 'set_minimum_area_percentage', 'pairing_between_different_cell_zones_only', 'pairing_between_interface_zones_only', 'keep_empty_interface']
    command_names = ['naming_option', 'set_one_to_one_pairing_tolerance', 'set_exclusion_pairs']
    _child_classes = dict(
        proximity_tolerance=proximity_tolerance,
        set_default_name_prefix=set_default_name_prefix,
        set_minimum_area_percentage=set_minimum_area_percentage,
        pairing_between_different_cell_zones_only=pairing_between_different_cell_zones_only,
        pairing_between_interface_zones_only=pairing_between_interface_zones_only,
        keep_empty_interface=keep_empty_interface,
        naming_option=naming_option,
        set_one_to_one_pairing_tolerance=set_one_to_one_pairing_tolerance,
        set_exclusion_pairs=set_exclusion_pairs,
    )

class mesh_interface_name(String):
    """
    The mesh interface names.
    """
    _version = '251'
    fluent_name = 'mesh-interface-name'
    _python_name = 'mesh_interface_name'

class adjacent_cell_zone_1(String, AllowedValuesMixin):
    """
    Adjacent cell zone 1.
    """
    _version = '251'
    fluent_name = 'adjacent-cell-zone-1'
    _python_name = 'adjacent_cell_zone_1'

class zone1_2(String, AllowedValuesMixin):
    """
    First interface defining this mesh-interface.
    """
    _version = '251'
    fluent_name = 'zone1'
    _python_name = 'zone1'

class adjacent_cell_zone_2(String, AllowedValuesMixin):
    """
    Adjacent cell zone 2.
    """
    _version = '251'
    fluent_name = 'adjacent-cell-zone-2'
    _python_name = 'adjacent_cell_zone_2'

class zone2_2(String, AllowedValuesMixin):
    """
    Second interface defining this mesh-interface.
    """
    _version = '251'
    fluent_name = 'zone2'
    _python_name = 'zone2'

class paired_zones(StringList, AllowedValuesMixin):
    """
    Paired zones list.
    """
    _version = '251'
    fluent_name = 'paired-zones'
    _python_name = 'paired_zones'

class turbo_non_overlap_1(Boolean):
    """
    Enable non-overlapping walls option for this mesh-interface.
    """
    _version = '251'
    fluent_name = 'turbo-non-overlap'
    _python_name = 'turbo_non_overlap'

class create_4(CommandWithPositionalArgs):
    """
    Create turbo mesh interface.
    
    Parameters
    ----------
        mesh_interface_name : str
            The mesh interface names.
        adjacent_cell_zone_1 : str
            Adjacent cell zone 1.
        zone1 : str
            First interface defining this mesh-interface.
        adjacent_cell_zone_2 : str
            Adjacent cell zone 2.
        zone2 : str
            Second interface defining this mesh-interface.
        paired_zones : List
            Paired zones list.
        turbo_choice : str
            Your choice of pitch-change types.
        turbo_non_overlap : bool
            Enable non-overlapping walls option for this mesh-interface.
    """
    _version = '251'
    fluent_name = 'create'
    _python_name = 'create'
    argument_names = ['mesh_interface_name', 'adjacent_cell_zone_1', 'zone1', 'adjacent_cell_zone_2', 'zone2', 'paired_zones', 'turbo_choice', 'turbo_non_overlap']
    _child_classes = dict(
        mesh_interface_name=mesh_interface_name,
        adjacent_cell_zone_1=adjacent_cell_zone_1,
        zone1=zone1_2,
        adjacent_cell_zone_2=adjacent_cell_zone_2,
        zone2=zone2_2,
        paired_zones=paired_zones,
        turbo_choice=turbo_choice,
        turbo_non_overlap=turbo_non_overlap_1,
    )

class name_10(String):
    """
    Selected mesh interface name.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class adjacent_cell_zone_1_1(String):
    """
    Adjacent cell zone 1 of the associated interface zone 1.
    """
    _version = '251'
    fluent_name = 'adjacent-cell-zone-1'
    _python_name = 'adjacent_cell_zone_1'

class adjacent_cell_zone_2_1(String):
    """
    Adjacent cell zone 2 of the associated interface zone 2.
    """
    _version = '251'
    fluent_name = 'adjacent-cell-zone-2'
    _python_name = 'adjacent_cell_zone_2'

class paired_zones_1(StringList, AllowedValuesMixin):
    """
    Paired zones names.
    """
    _version = '251'
    fluent_name = 'paired-zones'
    _python_name = 'paired_zones'

class turbo_choice_1(String, AllowedValuesMixin):
    """
    Change pitch type of this General-Turbo Inteface (GTI)  mesh-interface.
    """
    _version = '251'
    fluent_name = 'turbo-choice'
    _python_name = 'turbo_choice'

class turbo_non_overlap_2(Boolean):
    """
    Non-overlapping walls for this GTI interface.
    """
    _version = '251'
    fluent_name = 'turbo-non-overlap'
    _python_name = 'turbo_non_overlap'

class turbo_interface_child(Group):
    """
    'child_object_type' of turbo_interface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'turbo_interface_child'
    child_names = ['name', 'adjacent_cell_zone_1', 'zone1', 'adjacent_cell_zone_2', 'zone2', 'paired_zones', 'turbo_choice', 'turbo_non_overlap']
    _child_classes = dict(
        name=name_10,
        adjacent_cell_zone_1=adjacent_cell_zone_1_1,
        zone1=zone1_1,
        adjacent_cell_zone_2=adjacent_cell_zone_2_1,
        zone2=zone2_1,
        paired_zones=paired_zones_1,
        turbo_choice=turbo_choice_1,
        turbo_non_overlap=turbo_non_overlap_2,
    )

class turbo_interface(NamedObject[turbo_interface_child], CreatableNamedObjectMixin[turbo_interface_child]):
    """
    Create turbo interfaces.
    """
    _version = '251'
    fluent_name = 'turbo-interface'
    _python_name = 'turbo_interface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_4,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = turbo_interface_child

class verbosity_7(Integer):
    """
    Mesh interface verbosity.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class enforce_continuity_after_bc(Boolean):
    """
    Across the interface, enforces continuity over boundary condition.
    """
    _version = '251'
    fluent_name = 'enforce-continuity-after-bc?'
    _python_name = 'enforce_continuity_after_bc'

class coupled_interfaces_inherit_bcs(Boolean):
    """
    Copy wall boundary conditions to resulting coupled interfaces.
    """
    _version = '251'
    fluent_name = 'coupled-interfaces-inherit-bcs?'
    _python_name = 'coupled_interfaces_inherit_bcs'

class enable_si_with_nodes(Boolean):
    """
    Enable sliding interfaces with nodes.
    """
    _version = '251'
    fluent_name = 'enable-si-with-nodes'
    _python_name = 'enable_si_with_nodes'

class enforce_coupled_wall_between_solids(Boolean):
    """
    Create coupled wall interface between solids.
    """
    _version = '251'
    fluent_name = 'enforce-coupled-wall-between-solids?'
    _python_name = 'enforce_coupled_wall_between_solids'

class enable_visualization_of_interfaces(Boolean):
    """
    Display facets on mesh interfaces.
    """
    _version = '251'
    fluent_name = 'enable-visualization-of-interfaces?'
    _python_name = 'enable_visualization_of_interfaces'

class mapping_frequency(Integer):
    """
    Mapping Frequency.
    """
    _version = '251'
    fluent_name = 'mapping-frequency'
    _python_name = 'mapping_frequency'

class under_relaxation_factor_1(Real):
    """
    Under-Relaxation Factor.
    """
    _version = '251'
    fluent_name = 'under-relaxation-factor'
    _python_name = 'under_relaxation_factor'

class solution_controls(Command):
    """
    Specification of mapped frequency and under-relaxation factor for mapped interfaces.
    
    Parameters
    ----------
        mapping_frequency : int
            Mapping Frequency.
        under_relaxation_factor : real
            Under-Relaxation Factor.
    """
    _version = '251'
    fluent_name = 'solution-controls'
    _python_name = 'solution_controls'
    argument_names = ['mapping_frequency', 'under_relaxation_factor']
    _child_classes = dict(
        mapping_frequency=mapping_frequency,
        under_relaxation_factor=under_relaxation_factor_1,
    )

class gtol_length_factor(Real):
    """
    Tolerance.
    """
    _version = '251'
    fluent_name = 'gtol-length-factor'
    _python_name = 'gtol_length_factor'

class gtol_absolute_value(Real):
    """
    Tolerance.
    """
    _version = '251'
    fluent_name = 'gtol-absolute-value'
    _python_name = 'gtol_absolute_value'

class update(Boolean):
    """
    Update mapped interface with new tolerance.
    """
    _version = '251'
    fluent_name = 'update?'
    _python_name = 'update'

class tolerance_1(Command):
    """
    Specification of mapped interface tolerance.
    
    Parameters
    ----------
        use_local_edge_length_factor : bool
            Enable tolerance based on local edge length factor instead of absolute tolerance.
        gtol_length_factor : real
            Tolerance.
        gtol_absolute_value : real
            Tolerance.
        update : bool
            Update mapped interface with new tolerance.
    """
    _version = '251'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'
    argument_names = ['use_local_edge_length_factor', 'gtol_length_factor', 'gtol_absolute_value', 'update']
    _child_classes = dict(
        use_local_edge_length_factor=use_local_edge_length_factor,
        gtol_length_factor=gtol_length_factor,
        gtol_absolute_value=gtol_absolute_value,
        update=update,
    )

class convert_all(Boolean):
    """
    Convert all mesh interfaces to mapped mesh interfaces.
    """
    _version = '251'
    fluent_name = 'convert-all?'
    _python_name = 'convert_all'

class convert_poorly_matching(Boolean):
    """
    Convert poorly matching mesh interfaces to mapped mesh interfaces.
    """
    _version = '251'
    fluent_name = 'convert-poorly-matching?'
    _python_name = 'convert_poorly_matching'

class convert_to_mapped_interface(Command):
    """
    Convert non-conformal mesh interface to mapped mesh interfaces.
    
    Parameters
    ----------
        convert_all : bool
            Convert all mesh interfaces to mapped mesh interfaces.
        convert_poorly_matching : bool
            Convert poorly matching mesh interfaces to mapped mesh interfaces.
        use_local_edge_length_factor : bool
            Enable tolerance based on local edge length factor instead of absolute tolerance.
        gtol_length_factor : real
            Tolerance.
        gtol_absolute_value : real
            Tolerance.
    """
    _version = '251'
    fluent_name = 'convert-to-mapped-interface'
    _python_name = 'convert_to_mapped_interface'
    argument_names = ['convert_all', 'convert_poorly_matching', 'use_local_edge_length_factor', 'gtol_length_factor', 'gtol_absolute_value']
    _child_classes = dict(
        convert_all=convert_all,
        convert_poorly_matching=convert_poorly_matching,
        use_local_edge_length_factor=use_local_edge_length_factor,
        gtol_length_factor=gtol_length_factor,
        gtol_absolute_value=gtol_absolute_value,
    )

class mapped_interface_options(Group):
    """
    The mapped-interface-options object.
    """
    _version = '251'
    fluent_name = 'mapped-interface-options'
    _python_name = 'mapped_interface_options'
    command_names = ['solution_controls', 'tolerance', 'convert_to_mapped_interface']
    _child_classes = dict(
        solution_controls=solution_controls,
        tolerance=tolerance_1,
        convert_to_mapped_interface=convert_to_mapped_interface,
    )

class use_sided_area_vector(Boolean):
    """
    Enforce watertight cells for fluid-solid and solid-solid interfaces?.
    """
    _version = '251'
    fluent_name = 'use-sided-area-vector?'
    _python_name = 'use_sided_area_vector'

class use_nci_sided_area_vectors(Boolean):
    """
    Use enhanced gradient computations for fluid-solid and solid-solid interfaces?.
    """
    _version = '251'
    fluent_name = 'use-nci-sided-area-vectors?'
    _python_name = 'use_nci_sided_area_vectors'

class recreate(Boolean):
    """
    Recreate non-conformal interfaces?.
    """
    _version = '251'
    fluent_name = 'recreate?'
    _python_name = 'recreate'

class change_numerics(Command):
    """
    Enable modified non-conformal interface numerics.
    
    Parameters
    ----------
        use_sided_area_vector : bool
            Enforce watertight cells for fluid-solid and solid-solid interfaces?.
        use_nci_sided_area_vectors : bool
            Use enhanced gradient computations for fluid-solid and solid-solid interfaces?.
        recreate : bool
            Recreate non-conformal interfaces?.
    """
    _version = '251'
    fluent_name = 'change-numerics?'
    _python_name = 'change_numerics'
    argument_names = ['use_sided_area_vector', 'use_nci_sided_area_vectors', 'recreate']
    _child_classes = dict(
        use_sided_area_vector=use_sided_area_vector,
        use_nci_sided_area_vectors=use_nci_sided_area_vectors,
        recreate=recreate,
    )

class non_conformal_interface_numerics(Group):
    """
    Setting non-conformal numerics options.
    """
    _version = '251'
    fluent_name = 'non-conformal-interface-numerics'
    _python_name = 'non_conformal_interface_numerics'
    command_names = ['change_numerics']
    _child_classes = dict(
        change_numerics=change_numerics,
    )

class name_11(String, AllowedValuesMixin):
    """
    Mesh interface name to be deleted.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class delete_2(CommandWithPositionalArgs):
    """
    Delete a mesh interface.
    
    Parameters
    ----------
        name : str
            Mesh interface name to be deleted.
    """
    _version = '251'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['name']
    _child_classes = dict(
        name=name_11,
    )

class list_2(Command):
    """
    List all mesh-interfaces.
    """
    _version = '251'
    fluent_name = 'list'
    _python_name = 'list'

class delete_all(Command):
    """
    Delete all mesh interfaces.
    """
    _version = '251'
    fluent_name = 'delete-all'
    _python_name = 'delete_all'

class zones_1(StringList, AllowedValuesMixin):
    """
    Zone-name to be displayed.
    """
    _version = '251'
    fluent_name = 'zones'
    _python_name = 'zones'

class display_1(Command):
    """
    Display specified mesh interface zone.
    
    Parameters
    ----------
        zones : List
            Zone-name to be displayed.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'
    argument_names = ['zones']
    _child_classes = dict(
        zones=zones_1,
    )

class one_to_one_interface(Boolean):
    """
    Use the default one-to-one interface creation method?.
    """
    _version = '251'
    fluent_name = 'one-to-one-interface'
    _python_name = 'one_to_one_interface'

class proceed(Boolean):
    """
    Would you like to proceed?.
    """
    _version = '251'
    fluent_name = 'proceed?'
    _python_name = 'proceed'

class delete_empty(Boolean):
    """
    Delete empty interface interior zones from non-overlapping interfaces?.
    """
    _version = '251'
    fluent_name = 'delete-empty?'
    _python_name = 'delete_empty'

class one_to_one_pairing(Command):
    """
    Use the default one-to-one interface creation method?.
    
    Parameters
    ----------
        one_to_one_interface : bool
            Use the default one-to-one interface creation method?.
        proceed : bool
            Would you like to proceed?.
        delete_empty : bool
            Delete empty interface interior zones from non-overlapping interfaces?.
    """
    _version = '251'
    fluent_name = 'one-to-one-pairing?'
    _python_name = 'one_to_one_pairing'
    argument_names = ['one_to_one_interface', 'proceed', 'delete_empty']
    _child_classes = dict(
        one_to_one_interface=one_to_one_interface,
        proceed=proceed,
        delete_empty=delete_empty,
    )

class delete_3(Boolean):
    """
    Delete mesh interfaces that have an area percentage under a specified value?.
    """
    _version = '251'
    fluent_name = 'delete?'
    _python_name = 'delete'

class overlapping_percentage_threshold(Real):
    """
    The area percentage used for deletion (%).
    """
    _version = '251'
    fluent_name = 'overlapping-percentage-threshold'
    _python_name = 'overlapping_percentage_threshold'

class delete_interfaces_with_small_overlap(Command):
    """
    Delete mesh interfaces that have an area percentage under a specified value.
    
    Parameters
    ----------
        delete : bool
            Delete mesh interfaces that have an area percentage under a specified value?.
        overlapping_percentage_threshold : real
            The area percentage used for deletion (%).
    """
    _version = '251'
    fluent_name = 'delete-interfaces-with-small-overlap'
    _python_name = 'delete_interfaces_with_small_overlap'
    argument_names = ['delete', 'overlapping_percentage_threshold']
    _child_classes = dict(
        delete=delete_3,
        overlapping_percentage_threshold=overlapping_percentage_threshold,
    )

class zone_list_1(StringList, AllowedValuesMixin):
    """
    The boundary zones belonging to the first group.
    """
    _version = '251'
    fluent_name = 'zone-list-1'
    _python_name = 'zone_list_1'

class zone_list_2(StringList, AllowedValuesMixin):
    """
    The boundary zones belonging to the second group.
    """
    _version = '251'
    fluent_name = 'zone-list-2'
    _python_name = 'zone_list_2'

class create_manually(Command):
    """
    Create one-to-one interfaces between two groups of boundary zones even if they do not currently overlap.
    
    Parameters
    ----------
        name : str
            The prefix for mesh interface names.
        zone_list_1 : List
            The boundary zones belonging to the first group.
        zone_list_2 : List
            The boundary zones belonging to the second group.
        matching : bool
            Specifies whether mesh-interface is matching.
        ignore_area_difference : bool
            Check if user want to create poorly matched interface.
    """
    _version = '251'
    fluent_name = 'create-manually'
    _python_name = 'create_manually'
    argument_names = ['name', 'zone_list_1', 'zone_list_2', 'matching', 'ignore_area_difference']
    _child_classes = dict(
        name=name_9,
        zone_list_1=zone_list_1,
        zone_list_2=zone_list_2,
        matching=matching,
        ignore_area_difference=ignore_area_difference,
    )

class pair_all(Boolean):
    """
    Automatic pairing of all unintersected interface zones?.
    """
    _version = '251'
    fluent_name = 'pair-all?'
    _python_name = 'pair_all'

class one_to_one_pairs(Boolean):
    """
    Create one-to-one pairs only?.
    """
    _version = '251'
    fluent_name = 'one-to-one-pairs?'
    _python_name = 'one_to_one_pairs'

class interface_zones(StringList, AllowedValuesMixin):
    """
    Unintersected interface zones for pairing.
    """
    _version = '251'
    fluent_name = 'interface-zones'
    _python_name = 'interface_zones'

class create_5(Boolean):
    """
    Create mesh interfaces with all these pairs?.
    """
    _version = '251'
    fluent_name = 'create?'
    _python_name = 'create'

class apply_mapped(Boolean):
    """
    Apply Mapped option at solids.
    """
    _version = '251'
    fluent_name = 'apply-mapped?'
    _python_name = 'apply_mapped'

class static_interface(Boolean):
    """
    Static?.
    """
    _version = '251'
    fluent_name = 'static-interface?'
    _python_name = 'static_interface'

class auto_create(Command):
    """
    Automatically pair and create mesh interfaces for some or all interface zones.
    
    Parameters
    ----------
        pair_all : bool
            Automatic pairing of all unintersected interface zones?.
        one_to_one_pairs : bool
            Create one-to-one pairs only?.
        interface_zones : List
            Unintersected interface zones for pairing.
        create : bool
            Create mesh interfaces with all these pairs?.
        name : str
            The prefix for mesh interface names.
        apply_mapped : bool
            Apply Mapped option at solids.
        static_interface : bool
            Static?.
    """
    _version = '251'
    fluent_name = 'auto-create'
    _python_name = 'auto_create'
    argument_names = ['pair_all', 'one_to_one_pairs', 'interface_zones', 'create', 'name', 'apply_mapped', 'static_interface']
    _child_classes = dict(
        pair_all=pair_all,
        one_to_one_pairs=one_to_one_pairs,
        interface_zones=interface_zones,
        create=create_5,
        name=name_9,
        apply_mapped=apply_mapped,
        static_interface=static_interface,
    )

class check_mapped_interface_quality(Boolean):
    """
    Check Mapped Interface Qaulity.
    """
    _version = '251'
    fluent_name = 'check-mapped-interface-quality?'
    _python_name = 'check_mapped_interface_quality'

class proceed_1(Boolean):
    """
    Continue to improve the mapped interface quality.
    """
    _version = '251'
    fluent_name = 'proceed?'
    _python_name = 'proceed'

class tol_percentage_increment(Real):
    """
    The percentage increment for tolerance (%).
    """
    _version = '251'
    fluent_name = 'tol-percentage-increment'
    _python_name = 'tol_percentage_increment'

class improve_quality_1(Command):
    """
    Improve mesh interface quality.
    
    Parameters
    ----------
        check_mapped_interface_quality : bool
            Check Mapped Interface Qaulity.
        proceed : bool
            Continue to improve the mapped interface quality.
        tol_percentage_increment : real
            The percentage increment for tolerance (%).
    """
    _version = '251'
    fluent_name = 'improve-quality'
    _python_name = 'improve_quality'
    argument_names = ['check_mapped_interface_quality', 'proceed', 'tol_percentage_increment']
    _child_classes = dict(
        check_mapped_interface_quality=check_mapped_interface_quality,
        proceed=proceed_1,
        tol_percentage_increment=tol_percentage_increment,
    )

class side_1(String, AllowedValuesMixin):
    """
    Id/name of zone to convert to phase lag side 1.
    """
    _version = '251'
    fluent_name = 'side-1'
    _python_name = 'side_1'

class side_2(String, AllowedValuesMixin):
    """
    Id/name of zone to convert to phase lag side 2.
    """
    _version = '251'
    fluent_name = 'side-2'
    _python_name = 'side_2'

class angle_3(Real):
    """
    Rotation angle.
    """
    _version = '251'
    fluent_name = 'angle'
    _python_name = 'angle'

class interface_name_1(String):
    """
    The name for this phaselag interface.
    """
    _version = '251'
    fluent_name = 'interface-name'
    _python_name = 'interface_name'

class make_phaselag_from_boundaries(Command):
    """
    Make interface zones phase lagged.
    
    Parameters
    ----------
        side_1 : str
            Id/name of zone to convert to phase lag side 1.
        side_2 : str
            Id/name of zone to convert to phase lag side 2.
        angle : real
            Rotation angle.
        interface_name : str
            The name for this phaselag interface.
    """
    _version = '251'
    fluent_name = 'make-phaselag-from-boundaries'
    _python_name = 'make_phaselag_from_boundaries'
    argument_names = ['side_1', 'side_2', 'angle', 'interface_name']
    _child_classes = dict(
        side_1=side_1,
        side_2=side_2,
        angle=angle_3,
        interface_name=interface_name_1,
    )

class periodic_zone_name_1(String, AllowedValuesMixin):
    """
    Periodic zone id/name.
    """
    _version = '251'
    fluent_name = 'periodic-zone-name'
    _python_name = 'periodic_zone_name'

class make_phaselag_from_periodic(Command):
    """
    Convert periodic interface to phase lagged.
    
    Parameters
    ----------
        periodic_zone_name : str
            Periodic zone id/name.
    """
    _version = '251'
    fluent_name = 'make-phaselag-from-periodic'
    _python_name = 'make_phaselag_from_periodic'
    argument_names = ['periodic_zone_name']
    _child_classes = dict(
        periodic_zone_name=periodic_zone_name_1,
    )

class enabled_49(Boolean):
    """
    Enable motion transfer across mesh interfaces?.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class option_name(String, AllowedValuesMixin):
    """
    Transfer type.
    """
    _version = '251'
    fluent_name = 'option-name'
    _python_name = 'option_name'

class transfer_motion_across_interfaces(Command):
    """
    Transfer motion from one side of the interface to the other when only one side undergoes user-defined or system-coupling motion.
    
    Parameters
    ----------
        enabled : bool
            Enable motion transfer across mesh interfaces?.
        option_name : str
            Transfer type.
    """
    _version = '251'
    fluent_name = 'transfer-motion-across-interfaces?'
    _python_name = 'transfer_motion_across_interfaces'
    argument_names = ['enabled', 'option_name']
    _child_classes = dict(
        enabled=enabled_49,
        option_name=option_name,
    )

class enable_18(Boolean):
    """
    Remove left-handed faces on mesh interfaces.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class update_1(Boolean):
    """
    Update existing mesh interfaces?.
    """
    _version = '251'
    fluent_name = 'update?'
    _python_name = 'update'

class remove_left_handed_interface_faces(Command):
    """
    Remove left-handed faces during mesh interface creation.
    
    Parameters
    ----------
        enable : bool
            Remove left-handed faces on mesh interfaces.
        update : bool
            Update existing mesh interfaces?.
    """
    _version = '251'
    fluent_name = 'remove-left-handed-interface-faces?'
    _python_name = 'remove_left_handed_interface_faces'
    argument_names = ['enable', 'update']
    _child_classes = dict(
        enable=enable_18,
        update=update_1,
    )

class zone_name_9(String, AllowedValuesMixin):
    """
    Zone id/name.
    """
    _version = '251'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'

class non_overlapping_zone_name_1(Command):
    """
    Get non-overlapping zone name from the associated interface zone.
    
    Parameters
    ----------
        zone_name : str
            Zone id/name.
    """
    _version = '251'
    fluent_name = 'non-overlapping-zone-name'
    _python_name = 'non_overlapping_zone_name'
    argument_names = ['zone_name']
    _child_classes = dict(
        zone_name=zone_name_9,
    )

class mesh_interfaces(Group):
    """
    The mesh interfaces object.
    """
    _version = '251'
    fluent_name = 'mesh-interfaces'
    _python_name = 'mesh_interfaces'
    child_names = ['interface', 'auto_options', 'turbo_interface', 'verbosity', 'enforce_continuity_after_bc', 'coupled_interfaces_inherit_bcs', 'enable_si_with_nodes', 'enforce_coupled_wall_between_solids', 'enable_visualization_of_interfaces', 'mapped_interface_options', 'non_conformal_interface_numerics']
    command_names = ['delete', 'list', 'delete_all', 'display', 'one_to_one_pairing', 'delete_interfaces_with_small_overlap', 'create_manually', 'auto_create', 'improve_quality', 'make_phaselag_from_boundaries', 'make_phaselag_from_periodic', 'transfer_motion_across_interfaces', 'remove_left_handed_interface_faces', 'non_overlapping_zone_name']
    _child_classes = dict(
        interface=interface_2,
        auto_options=auto_options,
        turbo_interface=turbo_interface,
        verbosity=verbosity_7,
        enforce_continuity_after_bc=enforce_continuity_after_bc,
        coupled_interfaces_inherit_bcs=coupled_interfaces_inherit_bcs,
        enable_si_with_nodes=enable_si_with_nodes,
        enforce_coupled_wall_between_solids=enforce_coupled_wall_between_solids,
        enable_visualization_of_interfaces=enable_visualization_of_interfaces,
        mapped_interface_options=mapped_interface_options,
        non_conformal_interface_numerics=non_conformal_interface_numerics,
        delete=delete_2,
        list=list_2,
        delete_all=delete_all,
        display=display_1,
        one_to_one_pairing=one_to_one_pairing,
        delete_interfaces_with_small_overlap=delete_interfaces_with_small_overlap,
        create_manually=create_manually,
        auto_create=auto_create,
        improve_quality=improve_quality_1,
        make_phaselag_from_boundaries=make_phaselag_from_boundaries,
        make_phaselag_from_periodic=make_phaselag_from_periodic,
        transfer_motion_across_interfaces=transfer_motion_across_interfaces,
        remove_left_handed_interface_faces=remove_left_handed_interface_faces,
        non_overlapping_zone_name=non_overlapping_zone_name_1,
    )

class enabled_50(Boolean):
    """
    Enable dynamic mesh.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class enabled_51(Boolean):
    """
    Enable smoothing of dynamic meshes.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class method_8(String, AllowedValuesMixin):
    """
    The smoothing method used by the dynamic mesh model.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class constant_factor(Real):
    """
    The spring constant relaxation factor.
    """
    _version = '251'
    fluent_name = 'constant-factor'
    _python_name = 'constant_factor'

class tolerance_2(Real):
    """
    The convergence tolerance for spring-based solver.
    """
    _version = '251'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'

class max_iter_1(Integer):
    """
    The maximum number of iterations for spring-based solver.
    """
    _version = '251'
    fluent_name = 'max-iter'
    _python_name = 'max_iter'

class bnd_node_relax(Real):
    """
    The spring boundary node relaxation factor.
    """
    _version = '251'
    fluent_name = 'bnd-node-relax'
    _python_name = 'bnd_node_relax'

class bnd_stiffness_factor(Real):
    """
    The stiffness factor for springs connected to boundary nodes.
    """
    _version = '251'
    fluent_name = 'bnd-stiffness-factor'
    _python_name = 'bnd_stiffness_factor'

class spring_on_all_elements(Boolean):
    """
    Enable/disable spring-based smoothing for all cell shapes.
    """
    _version = '251'
    fluent_name = 'spring-on-all-elements?'
    _python_name = 'spring_on_all_elements'

class spring_on_simplex_elements(Boolean):
    """
    Enable/disable spring-based smoothing for tri/tet elements in mixed element zones.
    """
    _version = '251'
    fluent_name = 'spring-on-simplex-elements?'
    _python_name = 'spring_on_simplex_elements'

class laplace_node_relax(Real):
    """
    The Laplace boundary node relaxation factor.
    """
    _version = '251'
    fluent_name = 'laplace-node-relax'
    _python_name = 'laplace_node_relax'

class skew_smooth_niter(Integer):
    """
    The number of skewness-based smoothing cycles.
    """
    _version = '251'
    fluent_name = 'skew-smooth-niter'
    _python_name = 'skew_smooth_niter'

class skew_smooth_cell_skew_max(Real):
    """
    The cell skewness threshold above which cells will be smoothed .
    """
    _version = '251'
    fluent_name = 'skew-smooth-cell-skew-max'
    _python_name = 'skew_smooth_cell_skew_max'

class skew_smooth_face_skew_max(Real):
    """
    The face skewness threshold above which deforming boundary faces .
    """
    _version = '251'
    fluent_name = 'skew-smooth-face-skew-max'
    _python_name = 'skew_smooth_face_skew_max'

class skew_smooth_all_deforming_boundaries(Boolean):
    """
    Enable/disable skewness smoothing for all deforming 
    dynamic boundary zones. If disabled, only the deforming dynamic boundary zones are 
    smoothed which have smoothing explicitly enabled or use local face remeshing.
    """
    _version = '251'
    fluent_name = 'skew-smooth-all-deforming-boundaries?'
    _python_name = 'skew_smooth_all_deforming_boundaries'

class verbosity_8(Integer):
    """
    The verbosity for spring smoothing.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class spring_settings(Group):
    """
    'spring_settings' child.
    """
    _version = '251'
    fluent_name = 'spring-settings'
    _python_name = 'spring_settings'
    child_names = ['constant_factor', 'tolerance', 'max_iter', 'bnd_node_relax', 'bnd_stiffness_factor', 'spring_on_all_elements', 'spring_on_simplex_elements', 'laplace_node_relax', 'skew_smooth_niter', 'skew_smooth_cell_skew_max', 'skew_smooth_face_skew_max', 'skew_smooth_all_deforming_boundaries', 'verbosity']
    _child_classes = dict(
        constant_factor=constant_factor,
        tolerance=tolerance_2,
        max_iter=max_iter_1,
        bnd_node_relax=bnd_node_relax,
        bnd_stiffness_factor=bnd_stiffness_factor,
        spring_on_all_elements=spring_on_all_elements,
        spring_on_simplex_elements=spring_on_simplex_elements,
        laplace_node_relax=laplace_node_relax,
        skew_smooth_niter=skew_smooth_niter,
        skew_smooth_cell_skew_max=skew_smooth_cell_skew_max,
        skew_smooth_face_skew_max=skew_smooth_face_skew_max,
        skew_smooth_all_deforming_boundaries=skew_smooth_all_deforming_boundaries,
        verbosity=verbosity_8,
    )

class diffusion_coeff_function(String, AllowedValuesMixin):
    """
    Specifies whether the diffusion coefficient is based on the boundary distance or the cell volume.
    """
    _version = '251'
    fluent_name = 'diffusion-coeff-function'
    _python_name = 'diffusion_coeff_function'

class diffusion_coeff_parameter(Real):
    """
    The diffusion coefficient parameter used for diffusion-based smoothing.
    """
    _version = '251'
    fluent_name = 'diffusion-coeff-parameter'
    _python_name = 'diffusion_coeff_parameter'

class amg_stabilization_1(String, AllowedValuesMixin):
    """
    The AMG stabilization method for mesh smoothing (FEM).
    """
    _version = '251'
    fluent_name = 'amg-stabilization'
    _python_name = 'amg_stabilization'

class max_iter_2(Integer):
    """
    The maximum number of iterations for smoothing.
    """
    _version = '251'
    fluent_name = 'max-iter'
    _python_name = 'max_iter'

class relative_tolerance_1(Real):
    """
    The relative residual convergence tolerance for smoothing.
    """
    _version = '251'
    fluent_name = 'relative-tolerance'
    _python_name = 'relative_tolerance'

class verbosity_9(Integer):
    """
    Diffusion smoothing verbosity.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class boundary_distance_method(Boolean):
    """
    The method used to evaluate the boundary distance for the .
    """
    _version = '251'
    fluent_name = 'boundary-distance-method'
    _python_name = 'boundary_distance_method'

class smooth_from_ref(Boolean):
    """
    Enable smoothing from reference position.
    """
    _version = '251'
    fluent_name = 'smooth-from-ref?'
    _python_name = 'smooth_from_ref'

class diffusion_fvm(Boolean):
    """
    The numerical method used for diffusion-based smoothing.
    """
    _version = '251'
    fluent_name = 'diffusion-fvm?'
    _python_name = 'diffusion_fvm'

class diffusion_settings(Group):
    """
    'diffusion_settings' child.
    """
    _version = '251'
    fluent_name = 'diffusion-settings'
    _python_name = 'diffusion_settings'
    child_names = ['diffusion_coeff_function', 'diffusion_coeff_parameter', 'amg_stabilization', 'max_iter', 'relative_tolerance', 'verbosity', 'boundary_distance_method', 'smooth_from_ref', 'diffusion_fvm']
    _child_classes = dict(
        diffusion_coeff_function=diffusion_coeff_function,
        diffusion_coeff_parameter=diffusion_coeff_parameter,
        amg_stabilization=amg_stabilization_1,
        max_iter=max_iter_2,
        relative_tolerance=relative_tolerance_1,
        verbosity=verbosity_9,
        boundary_distance_method=boundary_distance_method,
        smooth_from_ref=smooth_from_ref,
        diffusion_fvm=diffusion_fvm,
    )

class poisson_ratio(Real):
    """
    The Poisson's ratio used by the linearly elastic solid model.
    """
    _version = '251'
    fluent_name = 'poisson-ratio'
    _python_name = 'poisson_ratio'

class max_iter_3(Integer):
    """
    The maximum number of iterations for mesh smoothing (FEM).
    """
    _version = '251'
    fluent_name = 'max-iter'
    _python_name = 'max_iter'

class relative_tolerance_2(Real):
    """
    The relative convergence tolerance for mesh smoothing (FEM).
    """
    _version = '251'
    fluent_name = 'relative-tolerance'
    _python_name = 'relative_tolerance'

class verbosity_10(Integer):
    """
    The verbosity for linearly elastic mesh smoothing.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class linelast_settings(Group):
    """
    'linelast_settings' child.
    """
    _version = '251'
    fluent_name = 'linelast-settings'
    _python_name = 'linelast_settings'
    child_names = ['poisson_ratio', 'amg_stabilization', 'max_iter', 'relative_tolerance', 'verbosity', 'smooth_from_ref']
    _child_classes = dict(
        poisson_ratio=poisson_ratio,
        amg_stabilization=amg_stabilization_1,
        max_iter=max_iter_3,
        relative_tolerance=relative_tolerance_2,
        verbosity=verbosity_10,
        smooth_from_ref=smooth_from_ref,
    )

class relative_tolerance_3(Real):
    """
    The relative convergence tolerance for mesh smoothing (Radial Basis Function).
    """
    _version = '251'
    fluent_name = 'relative-tolerance'
    _python_name = 'relative_tolerance'

class verbosity_11(Integer):
    """
    The verbosity for mesh smoothing (Radial Basis Function).
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class local_smoothing(Boolean):
    """
    Enable local smoothing (Radial Basis Function).
    """
    _version = '251'
    fluent_name = 'local-smoothing?'
    _python_name = 'local_smoothing'

class number_local_layers(Integer):
    """
    Number of layers for local smoothing (Radial Basis Function).
    """
    _version = '251'
    fluent_name = 'number-local-layers'
    _python_name = 'number_local_layers'

class smooth_bl_with_adj(Boolean):
    """
    Enable smoothing of boundary layers solely on adjacent zone motion (Radial Basis Function).
    """
    _version = '251'
    fluent_name = 'smooth-bl-with-adj?'
    _python_name = 'smooth_bl_with_adj'

class radial_settings(Group):
    """
    'radial_settings' child.
    """
    _version = '251'
    fluent_name = 'radial-settings'
    _python_name = 'radial_settings'
    child_names = ['relative_tolerance', 'verbosity', 'local_smoothing', 'smooth_from_ref', 'number_local_layers', 'smooth_bl_with_adj']
    _child_classes = dict(
        relative_tolerance=relative_tolerance_3,
        verbosity=verbosity_11,
        local_smoothing=local_smoothing,
        smooth_from_ref=smooth_from_ref,
        number_local_layers=number_local_layers,
        smooth_bl_with_adj=smooth_bl_with_adj,
    )

class smoothing_1(Group):
    """
    'smoothing' child.
    """
    _version = '251'
    fluent_name = 'smoothing'
    _python_name = 'smoothing'
    child_names = ['enabled', 'method', 'spring_settings', 'diffusion_settings', 'linelast_settings', 'radial_settings']
    _child_classes = dict(
        enabled=enabled_51,
        method=method_8,
        spring_settings=spring_settings,
        diffusion_settings=diffusion_settings,
        linelast_settings=linelast_settings,
        radial_settings=radial_settings,
    )

class enabled_52(Boolean):
    """
    Enable remeshing.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class unified_remeshing(Boolean):
    """
    Enable/disable unified remeshing.
    """
    _version = '251'
    fluent_name = 'unified-remeshing?'
    _python_name = 'unified_remeshing'

class cell_skew_max(Real):
    """
    The cell skewness threshold above which cells will be remeshed.
    """
    _version = '251'
    fluent_name = 'cell-skew-max'
    _python_name = 'cell_skew_max'

class face_skew_max(Real):
    """
    The face skewness threshold above which faces will be remeshed.
    """
    _version = '251'
    fluent_name = 'face-skew-max'
    _python_name = 'face_skew_max'

class retain_size_distribution(Boolean):
    """
    Enable/disable retaining of size distribution.
    """
    _version = '251'
    fluent_name = 'retain-size-distribution?'
    _python_name = 'retain_size_distribution'

class length_min(Real):
    """
    The length threshold below which cells will be remeshed.
    """
    _version = '251'
    fluent_name = 'length-min'
    _python_name = 'length_min'

class length_max(Real):
    """
    The length threshold above which cells will be remeshed.
    """
    _version = '251'
    fluent_name = 'length-max'
    _python_name = 'length_max'

class settings_2(Group):
    """
    'settings' child.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['unified_remeshing', 'cell_skew_max', 'face_skew_max', 'retain_size_distribution', 'length_min', 'length_max']
    _child_classes = dict(
        unified_remeshing=unified_remeshing,
        cell_skew_max=cell_skew_max,
        face_skew_max=face_skew_max,
        retain_size_distribution=retain_size_distribution,
        length_min=length_min,
        length_max=length_max,
    )

class remeshing(Group):
    """
    'remeshing' child.
    """
    _version = '251'
    fluent_name = 'remeshing'
    _python_name = 'remeshing'
    child_names = ['enabled', 'settings']
    _child_classes = dict(
        enabled=enabled_52,
        settings=settings_2,
    )

class enabled_53(Boolean):
    """
    Enable layering.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class split_factor(Real):
    """
    The factor determining when to split dynamic layers.
    """
    _version = '251'
    fluent_name = 'split-factor'
    _python_name = 'split_factor'

class collapse_factor(Real):
    """
    The factor determining when to collapse dynamic layers.
    """
    _version = '251'
    fluent_name = 'collapse-factor'
    _python_name = 'collapse_factor'

class constant_height(Boolean):
    """
    Enable/disable layering based on constant height, else layering based on constant ratio.
    """
    _version = '251'
    fluent_name = 'constant-height?'
    _python_name = 'constant_height'

class settings_3(Group):
    """
    'settings' child.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['split_factor', 'collapse_factor', 'constant_height']
    _child_classes = dict(
        split_factor=split_factor,
        collapse_factor=collapse_factor,
        constant_height=constant_height,
    )

class layering(Group):
    """
    'layering' child.
    """
    _version = '251'
    fluent_name = 'layering'
    _python_name = 'layering'
    child_names = ['enabled', 'settings']
    _child_classes = dict(
        enabled=enabled_53,
        settings=settings_3,
    )

class methods(Group):
    """
    'methods' child.
    """
    _version = '251'
    fluent_name = 'methods'
    _python_name = 'methods'
    child_names = ['smoothing', 'remeshing', 'layering']
    _child_classes = dict(
        smoothing=smoothing_1,
        remeshing=remeshing,
        layering=layering,
    )

class dynamic_mesh(Group):
    """
    'dynamic_mesh' child.
    """
    _version = '251'
    fluent_name = 'dynamic-mesh'
    _python_name = 'dynamic_mesh'
    child_names = ['enabled', 'methods']
    _child_classes = dict(
        enabled=enabled_50,
        methods=methods,
    )

class area_1(Real):
    """
    Reference area for normalization.
    """
    _version = '251'
    fluent_name = 'area'
    _python_name = 'area'

class depth(Real):
    """
    Reference depth for volume calculation.
    """
    _version = '251'
    fluent_name = 'depth'
    _python_name = 'depth'

class density_9(Real):
    """
    Reference density for normalization.
    """
    _version = '251'
    fluent_name = 'density'
    _python_name = 'density'

class enthalpy(Real):
    """
    Reference enthalpy for enthalpy damping and normalization.
    """
    _version = '251'
    fluent_name = 'enthalpy'
    _python_name = 'enthalpy'

class length_1(Real):
    """
    Reference length for normalization.
    """
    _version = '251'
    fluent_name = 'length'
    _python_name = 'length'

class pressure(Real):
    """
    Reference pressure for normalization.
    """
    _version = '251'
    fluent_name = 'pressure'
    _python_name = 'pressure'

class temperature_4(Real):
    """
    Reference temperature for normalization.
    """
    _version = '251'
    fluent_name = 'temperature'
    _python_name = 'temperature'

class yplus(Real):
    """
    Reference yplus for normalization.
    """
    _version = '251'
    fluent_name = 'yplus'
    _python_name = 'yplus'

class velocity_1(Real):
    """
    Reference velocity for normalization.
    """
    _version = '251'
    fluent_name = 'velocity'
    _python_name = 'velocity'

class viscosity_3(Real):
    """
    Reference viscosity for normalization.
    """
    _version = '251'
    fluent_name = 'viscosity'
    _python_name = 'viscosity'

class ratio_of_specific_heats(Real):
    """
    Ratio of specific heats.
    """
    _version = '251'
    fluent_name = 'ratio-of-specific-heats'
    _python_name = 'ratio_of_specific_heats'

class zone(String, AllowedValuesMixin):
    """
    Reference zone.
    """
    _version = '251'
    fluent_name = 'zone'
    _python_name = 'zone'

class from_zone_type(String, AllowedValuesMixin):
    """
    'from_zone_type' child.
    """
    _version = '251'
    fluent_name = 'from-zone-type'
    _python_name = 'from_zone_type'

class from_zone_name(String, AllowedValuesMixin):
    """
    'from_zone_name' child.
    """
    _version = '251'
    fluent_name = 'from-zone-name'
    _python_name = 'from_zone_name'

class phase_26(String, AllowedValuesMixin):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'

class compute(Command):
    """
    'compute' command.
    """
    _version = '251'
    fluent_name = 'compute'
    _python_name = 'compute'
    argument_names = ['from_zone_type', 'from_zone_name', 'phase']
    _child_classes = dict(
        from_zone_type=from_zone_type,
        from_zone_name=from_zone_name,
        phase=phase_26,
    )

class list_values(Command):
    """
    'list_values' command.
    """
    _version = '251'
    fluent_name = 'list-values'
    _python_name = 'list_values'

class reference_values(Group):
    """
    'reference_values' child.
    """
    _version = '251'
    fluent_name = 'reference-values'
    _python_name = 'reference_values'
    child_names = ['area', 'depth', 'density', 'enthalpy', 'length', 'pressure', 'temperature', 'yplus', 'velocity', 'viscosity', 'ratio_of_specific_heats', 'zone']
    command_names = ['compute', 'list_values']
    _child_classes = dict(
        area=area_1,
        depth=depth,
        density=density_9,
        enthalpy=enthalpy,
        length=length_1,
        pressure=pressure,
        temperature=temperature_4,
        yplus=yplus,
        velocity=velocity_1,
        viscosity=viscosity_3,
        ratio_of_specific_heats=ratio_of_specific_heats,
        zone=zone,
        compute=compute,
        list_values=list_values,
    )

class name_12(String, AllowedValuesMixin):
    """
    Display a reference frame by selecting its name.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class display_frame(Command):
    """
    Display Reference Frame.
    
    Parameters
    ----------
        name : str
            Display a reference frame by selecting its name.
    """
    _version = '251'
    fluent_name = 'display-frame'
    _python_name = 'display_frame'
    argument_names = ['name']
    _child_classes = dict(
        name=name_12,
    )

class name_13(String, AllowedValuesMixin):
    """
    Hide a reference frame.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class hide_frame(Command):
    """
    Hide Reference Frame.
    
    Parameters
    ----------
        name : str
            Hide a reference frame.
    """
    _version = '251'
    fluent_name = 'hide-frame'
    _python_name = 'hide_frame'
    argument_names = ['name']
    _child_classes = dict(
        name=name_13,
    )

class motion_type(String, AllowedValuesMixin):
    """
    The type of motion.
    """
    _version = '251'
    fluent_name = 'motion-type'
    _python_name = 'motion_type'

class linear_velocity(RealList):
    """
    The linear velocity in XYZ directions with respect to the parent reference frame orientation.
    """
    _version = '251'
    fluent_name = 'linear-velocity'
    _python_name = 'linear_velocity'

class speed_1(Real):
    """
    The angular speed.
    """
    _version = '251'
    fluent_name = 'speed'
    _python_name = 'speed'

class rotation_axis(RealList):
    """
    The axis of the angular rotation.
    """
    _version = '251'
    fluent_name = 'rotation-axis'
    _python_name = 'rotation_axis'

class rotational_velocity(Group):
    """
    The rotational velocity with respect to the parent reference frame orientation.
    """
    _version = '251'
    fluent_name = 'rotational-velocity'
    _python_name = 'rotational_velocity'
    child_names = ['speed', 'rotation_axis']
    _child_classes = dict(
        speed=speed_1,
        rotation_axis=rotation_axis,
    )

class constant_velocity(Group):
    """
    The linear and rotational velocity.
    """
    _version = '251'
    fluent_name = 'constant-velocity'
    _python_name = 'constant_velocity'
    child_names = ['linear_velocity', 'rotational_velocity']
    _child_classes = dict(
        linear_velocity=linear_velocity,
        rotational_velocity=rotational_velocity,
    )

class track_zone(String, AllowedValuesMixin):
    """
    The zone you want to attach the reference frame to.
    """
    _version = '251'
    fluent_name = 'track-zone'
    _python_name = 'track_zone'

class zone_track(Group):
    """
    Attach the reference frame to a zone. You can specify reference frame location and orientation.
    """
    _version = '251'
    fluent_name = 'zone-track'
    _python_name = 'zone_track'
    child_names = ['track_zone']
    _child_classes = dict(
        track_zone=track_zone,
    )

class motion_definition(String, AllowedValuesMixin):
    """
    The desired motion definition for this reference frame.
    """
    _version = '251'
    fluent_name = 'motion-definition'
    _python_name = 'motion_definition'

class motion(Group):
    """
    Give motion properties.
    """
    _version = '251'
    fluent_name = 'motion'
    _python_name = 'motion'
    child_names = ['motion_type', 'constant_velocity', 'zone_track', 'motion_definition']
    _child_classes = dict(
        motion_type=motion_type,
        constant_velocity=constant_velocity,
        zone_track=zone_track,
        motion_definition=motion_definition,
    )

class parent_ref_frame(String, AllowedValuesMixin):
    """
    Parent.
    """
    _version = '251'
    fluent_name = 'parent-ref-frame'
    _python_name = 'parent_ref_frame'

class origin_3(RealList):
    """
    The origin of your reference frame.
    """
    _version = '251'
    fluent_name = 'origin'
    _python_name = 'origin'

class direction_option(String, AllowedValuesMixin):
    """
    The axis you are specifying using by selecting either X, Y, or Z. You can either specify the orientation by providing a point or a direction.
    """
    _version = '251'
    fluent_name = 'direction-option'
    _python_name = 'direction_option'

class vector(RealList):
    """
    The XYZ components of the orientation direction.
    """
    _version = '251'
    fluent_name = 'vector'
    _python_name = 'vector'

class point(RealList):
    """
    The XYZ components of the orientation point.
    """
    _version = '251'
    fluent_name = 'point'
    _python_name = 'point'

class axis_label(String, AllowedValuesMixin):
    """
    Which  XYZ axis you want to specify.
    """
    _version = '251'
    fluent_name = 'axis-label'
    _python_name = 'axis_label'

class axis_from(Group):
    """
    The initial state properties.
    """
    _version = '251'
    fluent_name = 'axis-from'
    _python_name = 'axis_from'
    child_names = ['direction_option', 'vector', 'point', 'axis_label']
    _child_classes = dict(
        direction_option=direction_option,
        vector=vector,
        point=point,
        axis_label=axis_label,
    )

class axis_to(Group):
    """
    The initial state properties.
    """
    _version = '251'
    fluent_name = 'axis-to'
    _python_name = 'axis_to'
    child_names = ['direction_option', 'vector', 'point', 'axis_label']
    _child_classes = dict(
        direction_option=direction_option,
        vector=vector,
        point=point,
        axis_label=axis_label,
    )

class first_axis(Group):
    """
    The axis-from and axis-to of your reference frame.
    """
    _version = '251'
    fluent_name = 'first-axis'
    _python_name = 'first_axis'
    child_names = ['axis_from', 'axis_to']
    _child_classes = dict(
        axis_from=axis_from,
        axis_to=axis_to,
    )

class auto_second_axis(Boolean):
    """
    Specifies whether to automatically provide the orientation of the second axis.
    """
    _version = '251'
    fluent_name = 'auto-second-axis'
    _python_name = 'auto_second_axis'

class second_axis(Group):
    """
    The axis-from and axis-to of your reference frame.
    """
    _version = '251'
    fluent_name = 'second-axis'
    _python_name = 'second_axis'
    child_names = ['axis_from', 'axis_to']
    _child_classes = dict(
        axis_from=axis_from,
        axis_to=axis_to,
    )

class orientation(Group):
    """
    The orientation of the axis of your reference frame.
    """
    _version = '251'
    fluent_name = 'orientation'
    _python_name = 'orientation'
    child_names = ['first_axis', 'auto_second_axis', 'second_axis']
    _child_classes = dict(
        first_axis=first_axis,
        auto_second_axis=auto_second_axis,
        second_axis=second_axis,
    )

class initial_state(Group):
    """
    Properties for the initial state of the reference frame.
    """
    _version = '251'
    fluent_name = 'initial-state'
    _python_name = 'initial_state'
    child_names = ['origin', 'orientation']
    _child_classes = dict(
        origin=origin_3,
        orientation=orientation,
    )

class origin_4(RealList):
    """
    Reference frame current origin.
    """
    _version = '251'
    fluent_name = 'origin'
    _python_name = 'origin'

class x_axis_1(RealList):
    """
    Reference frame x-axis.
    """
    _version = '251'
    fluent_name = 'x-axis'
    _python_name = 'x_axis'

class y_axis_1(RealList):
    """
    Reference frame Y axis.
    """
    _version = '251'
    fluent_name = 'y-axis'
    _python_name = 'y_axis'

class z_axis_1(RealList):
    """
    Reference frame Z axis.
    """
    _version = '251'
    fluent_name = 'z-axis'
    _python_name = 'z_axis'

class current_state(Group):
    """
    Current state.
    """
    _version = '251'
    fluent_name = 'current-state'
    _python_name = 'current_state'
    child_names = ['origin', 'x_axis', 'y_axis', 'z_axis']
    _child_classes = dict(
        origin=origin_4,
        x_axis=x_axis_1,
        y_axis=y_axis_1,
        z_axis=z_axis_1,
    )

class display_state(String, AllowedValuesMixin):
    """
    'display_state' child.
    """
    _version = '251'
    fluent_name = 'display-state'
    _python_name = 'display_state'

class reference_frames_child(Group):
    """
    'child_object_type' of reference_frames.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'reference_frames_child'
    child_names = ['name', 'motion', 'parent_ref_frame', 'initial_state', 'current_state', 'display_state']
    _child_classes = dict(
        name=name_2,
        motion=motion,
        parent_ref_frame=parent_ref_frame,
        initial_state=initial_state,
        current_state=current_state,
        display_state=display_state,
    )

class reference_frames(NamedObject[reference_frames_child], CreatableNamedObjectMixin[reference_frames_child]):
    """
    Create local coordinate systems with a given position and orientation, either with or without motion.
    """
    _version = '251'
    fluent_name = 'reference-frames'
    _python_name = 'reference_frames'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'display_frame', 'hide_frame']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        display_frame=display_frame,
        hide_frame=hide_frame,
    )
    child_object_type = reference_frames_child

class names(StringList, AllowedValuesMixin):
    """
    'names' child.
    """
    _version = '251'
    fluent_name = 'names'
    _python_name = 'names'

class compute_1(Command):
    """
    'compute' command.
    """
    _version = '251'
    fluent_name = 'compute'
    _python_name = 'compute'
    argument_names = ['names']
    _child_classes = dict(
        names=names,
    )

class name_14(String):
    """
    'name' child.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class definition(String, AllowedValuesMixin):
    """
    'definition' child.
    """
    _version = '251'
    fluent_name = 'definition'
    _python_name = 'definition'

class description(String, AllowedValuesMixin):
    """
    'description' child.
    """
    _version = '251'
    fluent_name = 'description'
    _python_name = 'description'

class parameterid(String, AllowedValuesMixin):
    """
    'parameterid' child.
    """
    _version = '251'
    fluent_name = 'parameterid'
    _python_name = 'parameterid'

class parametername(String, AllowedValuesMixin):
    """
    'parametername' child.
    """
    _version = '251'
    fluent_name = 'parametername'
    _python_name = 'parametername'

class unit_2(String, AllowedValuesMixin):
    """
    'unit' child.
    """
    _version = '251'
    fluent_name = 'unit'
    _python_name = 'unit'

class input_parameter(Boolean):
    """
    As input parameter?.
    """
    _version = '251'
    fluent_name = 'input-parameter'
    _python_name = 'input_parameter'

class output_parameter(Boolean):
    """
    As output parameter?.
    """
    _version = '251'
    fluent_name = 'output-parameter'
    _python_name = 'output_parameter'

class get_value(Query):
    """
    'get_value' query.
    """
    _version = '251'
    fluent_name = 'get-value'
    _python_name = 'get_value'

class named_expressions_child(Group):
    """
    'child_object_type' of named_expressions.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'named_expressions_child'
    child_names = ['name', 'definition', 'description', 'parameterid', 'parametername', 'unit', 'input_parameter', 'output_parameter']
    query_names = ['get_value']
    _child_classes = dict(
        name=name_14,
        definition=definition,
        description=description,
        parameterid=parameterid,
        parametername=parametername,
        unit=unit_2,
        input_parameter=input_parameter,
        output_parameter=output_parameter,
        get_value=get_value,
    )

class named_expressions(NamedObject[named_expressions_child], CreatableNamedObjectMixin[named_expressions_child]):
    """
    'named_expressions' child.
    """
    _version = '251'
    fluent_name = 'named-expressions'
    _python_name = 'named_expressions'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'compute']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        compute=compute_1,
    )
    child_object_type = named_expressions_child

class enabled_54(Boolean):
    """
    Enable/disable turbo model object.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class enabled_55(Boolean):
    """
    Enable/Disable enhanced discretization for the mixing-plane.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class pre_24r2_mp_discretization(Command):
    """
    Pre 24R2 discretization for the mixing-plane.
    
    Parameters
    ----------
        enabled : bool
            Enable/Disable enhanced discretization for the mixing-plane.
    """
    _version = '251'
    fluent_name = 'pre-24r2-mp-discretization'
    _python_name = 'pre_24r2_mp_discretization'
    argument_names = ['enabled']
    _child_classes = dict(
        enabled=enabled_55,
    )

class backward_compatibility(Group):
    """
    List of backward compatbility options for GTI.
    """
    _version = '251'
    fluent_name = 'backward-compatibility'
    _python_name = 'backward_compatibility'
    command_names = ['pre_24r2_mp_discretization']
    _child_classes = dict(
        pre_24r2_mp_discretization=pre_24r2_mp_discretization,
    )

class enhanced_mpm_bands_viability_check(Boolean):
    """
    Enhamced viability check for mixing-plane model band creation.
    """
    _version = '251'
    fluent_name = 'enhanced-mpm-bands-viability-check?'
    _python_name = 'enhanced_mpm_bands_viability_check'

class enabled_all(Boolean):
    """
    Enable flux scaling for all the interfaces.
    """
    _version = '251'
    fluent_name = 'enabled-all'
    _python_name = 'enabled_all'

class disabled_all(Boolean):
    """
    Disable flux scaling for all the interfaces.
    """
    _version = '251'
    fluent_name = 'disabled-all'
    _python_name = 'disabled_all'

class interface_name_2(String, AllowedValuesMixin):
    """
    Define the turbo interface to enable/disable flux scaling.
    """
    _version = '251'
    fluent_name = 'interface-name'
    _python_name = 'interface_name'

class scale_2(Boolean):
    """
    Enable or disable flux scaling for the turbo interface.
    """
    _version = '251'
    fluent_name = 'scale?'
    _python_name = 'scale'

class flux_scaling(Command):
    """
    Enable or disable flux scaling at the turbo interfaces.
    
    Parameters
    ----------
        enabled_all : bool
            Enable flux scaling for all the interfaces.
        disabled_all : bool
            Disable flux scaling for all the interfaces.
        interface_name : str
            Define the turbo interface to enable/disable flux scaling.
        scale : bool
            Enable or disable flux scaling for the turbo interface.
    """
    _version = '251'
    fluent_name = 'flux-scaling'
    _python_name = 'flux_scaling'
    argument_names = ['enabled_all', 'disabled_all', 'interface_name', 'scale']
    _child_classes = dict(
        enabled_all=enabled_all,
        disabled_all=disabled_all,
        interface_name=interface_name_2,
        scale=scale_2,
    )

class enabled_all_1(Boolean):
    """
    Enable for all the nps interfaces.
    """
    _version = '251'
    fluent_name = 'enabled-all'
    _python_name = 'enabled_all'

class disabled_all_1(Boolean):
    """
    Disable for all the nps interfaces.
    """
    _version = '251'
    fluent_name = 'disabled-all'
    _python_name = 'disabled_all'

class interface_name_3(String, AllowedValuesMixin):
    """
    Define the nps interface to enable/disable minimize total pressure loss option.
    """
    _version = '251'
    fluent_name = 'interface-name'
    _python_name = 'interface_name'

class nps_min_po_loss(Boolean):
    """
    Enable or disable minimize total pressure loss option for the specified interface.
    """
    _version = '251'
    fluent_name = 'nps-min-po-loss?'
    _python_name = 'nps_min_po_loss'

class nps_minimize_po_loss(Command):
    """
    Enable or disable minimize total pressure loss option for the nps interfaces.
    
    Parameters
    ----------
        enabled_all : bool
            Enable for all the nps interfaces.
        disabled_all : bool
            Disable for all the nps interfaces.
        interface_name : str
            Define the nps interface to enable/disable minimize total pressure loss option.
        nps_min_po_loss : bool
            Enable or disable minimize total pressure loss option for the specified interface.
    """
    _version = '251'
    fluent_name = 'nps-minimize-po-loss'
    _python_name = 'nps_minimize_po_loss'
    argument_names = ['enabled_all', 'disabled_all', 'interface_name', 'nps_min_po_loss']
    _child_classes = dict(
        enabled_all=enabled_all_1,
        disabled_all=disabled_all_1,
        interface_name=interface_name_3,
        nps_min_po_loss=nps_min_po_loss,
    )

class print_settings(Command):
    """
    Display the current status(on/off) of flux scaling for the turbo interfaces.
    """
    _version = '251'
    fluent_name = 'print-settings'
    _python_name = 'print_settings'

class get_po_loss_settings(Query):
    """
    Return the settings to minimize pressure loss for the NPS interfaces.
    """
    _version = '251'
    fluent_name = 'get-po-loss-settings'
    _python_name = 'get_po_loss_settings'

class get_flux_settings(Query):
    """
    Return the flux scale settings for the turbo interfaces.
    """
    _version = '251'
    fluent_name = 'get-flux-settings'
    _python_name = 'get_flux_settings'

class expert_4(Group):
    """
    Configure expert parameters for turbo interfaces.
    """
    _version = '251'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['backward_compatibility', 'enhanced_mpm_bands_viability_check']
    command_names = ['flux_scaling', 'nps_minimize_po_loss', 'print_settings']
    query_names = ['get_po_loss_settings', 'get_flux_settings']
    _child_classes = dict(
        backward_compatibility=backward_compatibility,
        enhanced_mpm_bands_viability_check=enhanced_mpm_bands_viability_check,
        flux_scaling=flux_scaling,
        nps_minimize_po_loss=nps_minimize_po_loss,
        print_settings=print_settings,
        get_po_loss_settings=get_po_loss_settings,
        get_flux_settings=get_flux_settings,
    )

class bands_type(String, AllowedValuesMixin):
    """
    The type of band for the mixing plane.
    """
    _version = '251'
    fluent_name = 'bands-type'
    _python_name = 'bands_type'

class bands(Integer):
    """
    Maximum number of band counts.
    """
    _version = '251'
    fluent_name = 'bands'
    _python_name = 'bands'

class on_all_interfaces(Command):
    """
    Maximum number of bands to be employed at all the mixing planes.
    
    Parameters
    ----------
        bands : int
            Maximum number of band counts.
    """
    _version = '251'
    fluent_name = 'on-all-interfaces'
    _python_name = 'on_all_interfaces'
    argument_names = ['bands']
    _child_classes = dict(
        bands=bands,
    )

class interface_name_4(String, AllowedValuesMixin):
    """
    Define the mixing plane interface to specify band count.
    """
    _version = '251'
    fluent_name = 'interface-name'
    _python_name = 'interface_name'

class on_specified_interface(Command):
    """
    Maximum number of bands to be employed at the specified mixing plane interface.
    
    Parameters
    ----------
        interface_name : str
            Define the mixing plane interface to specify band count.
        bands : int
            Maximum number of band counts.
    """
    _version = '251'
    fluent_name = 'on-specified-interface'
    _python_name = 'on_specified_interface'
    argument_names = ['interface_name', 'bands']
    _child_classes = dict(
        interface_name=interface_name_4,
        bands=bands,
    )

class number_of_bands(Group):
    """
    Maximum number of bands to be employed at the mixing plane interface.
    """
    _version = '251'
    fluent_name = 'number-of-bands'
    _python_name = 'number_of_bands'
    command_names = ['on_all_interfaces', 'on_specified_interface']
    _child_classes = dict(
        on_all_interfaces=on_all_interfaces,
        on_specified_interface=on_specified_interface,
    )

class list_mixing_planes(Command):
    """
    Display the configuration settings of mixing planes in the current case.
    """
    _version = '251'
    fluent_name = 'list-mixing-planes'
    _python_name = 'list_mixing_planes'

class mixing_plane_model(Group):
    """
    The expert parameters for turbo interfaces.
    """
    _version = '251'
    fluent_name = 'mixing-plane-model'
    _python_name = 'mixing_plane_model'
    child_names = ['bands_type', 'number_of_bands']
    command_names = ['list_mixing_planes']
    _child_classes = dict(
        bands_type=bands_type,
        number_of_bands=number_of_bands,
        list_mixing_planes=list_mixing_planes,
    )

class general_turbo_interface(Group):
    """
    The general turbo interface settings.
    """
    _version = '251'
    fluent_name = 'general-turbo-interface'
    _python_name = 'general_turbo_interface'
    child_names = ['expert', 'mixing_plane_model']
    _child_classes = dict(
        expert=expert_4,
        mixing_plane_model=mixing_plane_model,
    )

class filename_1_2(Filename, _OutputFile):
    """
    Output file name.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class boundary_list_1(StringList, AllowedValuesMixin):
    """
    Boundary zones for exporting mesh.
    """
    _version = '251'
    fluent_name = 'boundary-list'
    _python_name = 'boundary_list'

class global_(Boolean):
    """
    Enable/disable output of mesh global number.
    """
    _version = '251'
    fluent_name = 'global'
    _python_name = 'global_'

class export_boundary_mesh(Command):
    """
    Export boundary mesh file.
    
    Parameters
    ----------
        filename_1 : str
            Output file name.
        boundary_list : List
            Boundary zones for exporting mesh.
        global_ : bool
            Enable/disable output of mesh global number.
    """
    _version = '251'
    fluent_name = 'export-boundary-mesh'
    _python_name = 'export_boundary_mesh'
    argument_names = ['filename', 'boundary_list', 'global_']
    _child_classes = dict(
        filename=filename_1_2,
        boundary_list=boundary_list_1,
        global_=global_,
    )

class turbo_models(Group):
    """
    The turbo-models settings.
    """
    _version = '251'
    fluent_name = 'turbo-models'
    _python_name = 'turbo_models'
    child_names = ['enabled', 'general_turbo_interface']
    command_names = ['export_boundary_mesh']
    _child_classes = dict(
        enabled=enabled_54,
        general_turbo_interface=general_turbo_interface,
        export_boundary_mesh=export_boundary_mesh,
    )

class face_name_2(String, AllowedValuesMixin):
    """
    'face_name' child.
    """
    _version = '251'
    fluent_name = 'face-name'
    _python_name = 'face_name'

class list_face(Command):
    """
    'list_face' command.
    """
    _version = '251'
    fluent_name = 'list-face'
    _python_name = 'list_face'
    argument_names = ['face_name']
    _child_classes = dict(
        face_name=face_name_2,
    )

class list_properties_4(Command):
    """
    'list_properties' command.
    """
    _version = '251'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'

class faces_child(Group):
    """
    'child_object_type' of faces.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'faces_child'
    child_names = ['name']
    command_names = ['list_properties']
    _child_classes = dict(
        name=name_2,
        list_properties=list_properties_4,
    )

class faces(NamedObject[faces_child], CreatableNamedObjectMixin[faces_child]):
    """
    'faces' child.
    """
    _version = '251'
    fluent_name = 'faces'
    _python_name = 'faces'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'list_face']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        list_face=list_face,
    )
    child_object_type = faces_child

class bodies_child(Group):
    """
    'child_object_type' of bodies.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'bodies_child'
    child_names = ['name', 'faces']
    command_names = ['list_properties']
    _child_classes = dict(
        name=name_2,
        faces=faces,
        list_properties=list_properties_4,
    )

class bodies(NamedObject[bodies_child], CreatableNamedObjectMixin[bodies_child]):
    """
    'bodies' child.
    """
    _version = '251'
    fluent_name = 'bodies'
    _python_name = 'bodies'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = bodies_child

class components_2(StringList, AllowedValuesMixin):
    """
    Input component name.
    """
    _version = '251'
    fluent_name = 'components'
    _python_name = 'components'

class groups_child(Group):
    """
    'child_object_type' of groups.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'groups_child'
    child_names = ['name', 'components']
    command_names = ['list_properties']
    _child_classes = dict(
        name=name_2,
        components=components_2,
        list_properties=list_properties_4,
    )

class groups(NamedObject[groups_child], CreatableNamedObjectMixin[groups_child]):
    """
    'groups' child.
    """
    _version = '251'
    fluent_name = 'groups'
    _python_name = 'groups'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = groups_child

class parts_child(Group):
    """
    'child_object_type' of parts.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'parts_child'
    child_names = ['name', 'bodies', 'groups']
    _child_classes = dict(
        name=name_2,
        bodies=bodies,
        groups=groups,
    )

class parts(NamedObject[parts_child], CreatableNamedObjectMixin[parts_child]):
    """
    'parts' child.
    """
    _version = '251'
    fluent_name = 'parts'
    _python_name = 'parts'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = parts_child

class list_topology(Command):
    """
    'list_topology' command.
    """
    _version = '251'
    fluent_name = 'list-topology'
    _python_name = 'list_topology'

class geometry_1(Group):
    """
    'geometry' child.
    """
    _version = '251'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    child_names = ['parts']
    command_names = ['list_topology']
    _child_classes = dict(
        parts=parts,
        list_topology=list_topology,
    )

class location_2(StringList, AllowedValuesMixin):
    """
    Input location name.
    """
    _version = '251'
    fluent_name = 'location'
    _python_name = 'location'

class phase_27_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['general', 'conical', 'reference_frame', 'mesh_motion', 'zonal_models', 'porous_zone', 'fan_zone', 'embedded_les', 'reaction', 'electrode', 'sources', 'fixed_values', 'multiphase', 'disabled']
    _child_classes = dict(
        general=general_2,
        conical=conical,
        reference_frame=reference_frame_2,
        mesh_motion=mesh_motion,
        zonal_models=zonal_models,
        porous_zone=porous_zone,
        fan_zone=fan_zone,
        embedded_les=embedded_les,
        reaction=reaction,
        electrode=electrode,
        sources=sources,
        fixed_values=fixed_values,
        multiphase=multiphase_1,
        disabled=disabled,
    )
    _child_aliases = dict(
        material=('general/material', 'material'),
    )

class phase_27(NamedObject[phase_27_child], CreatableNamedObjectMixin[phase_27_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_27_child

class settings_4(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['general', 'conical', 'reference_frame', 'mesh_motion', 'zonal_models', 'porous_zone', 'fan_zone', 'embedded_les', 'reaction', 'electrode', 'sources', 'fixed_values', 'multiphase', 'disabled', 'phase']
    _child_classes = dict(
        general=general_2,
        conical=conical,
        reference_frame=reference_frame_2,
        mesh_motion=mesh_motion,
        zonal_models=zonal_models,
        porous_zone=porous_zone,
        fan_zone=fan_zone,
        embedded_les=embedded_les,
        reaction=reaction,
        electrode=electrode,
        sources=sources,
        fixed_values=fixed_values,
        multiphase=multiphase_1,
        disabled=disabled,
        phase=phase_27,
    )
    _child_aliases = dict(
        material=('general/material', 'material'),
    )

class phase_28_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['geometry']
    _child_classes = dict(
        geometry=geometry_4,
    )

class phase_28(NamedObject[phase_28_child], CreatableNamedObjectMixin[phase_28_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_28_child

class settings_5(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['geometry', 'phase']
    _child_classes = dict(
        geometry=geometry_4,
        phase=phase_28,
    )

class name_15(String):
    """
    Input new boundary name.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class location_3(StringList, AllowedValuesMixin):
    """
    Input location name which should be part of new boundary.
    """
    _version = '251'
    fluent_name = 'location'
    _python_name = 'location'

class split_1(Command):
    """
    Input boundary and location names to split.
    
    Parameters
    ----------
        name : str
            Input new boundary name.
        location : List
            Input location name which should be part of new boundary.
    """
    _version = '251'
    fluent_name = 'split'
    _python_name = 'split'
    argument_names = ['name', 'location']
    _child_classes = dict(
        name=name_15,
        location=location_3,
    )

class axis_3_child(Group):
    """
    'child_object_type' of axis.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'axis_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_5,
        split=split_1,
    )

class axis_3(NamedObject[axis_3_child], CreatableNamedObjectMixin[axis_3_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'axis'
    _python_name = 'axis'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = axis_3_child

class degassing_1_child(Group):
    """
    'child_object_type' of degassing.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'degassing_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_5,
        split=split_1,
    )

class degassing_1(NamedObject[degassing_1_child], CreatableNamedObjectMixin[degassing_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'degassing'
    _python_name = 'degassing'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = degassing_1_child

class phase_29_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_29(NamedObject[phase_29_child], CreatableNamedObjectMixin[phase_29_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_29_child

class settings_6(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry', 'phase']
    _child_classes = dict(
        momentum=momentum,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
        phase=phase_29,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class exhaust_fan_1_child(Group):
    """
    'child_object_type' of exhaust_fan.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'exhaust_fan_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_6,
        split=split_1,
    )

class exhaust_fan_1(NamedObject[exhaust_fan_1_child], CreatableNamedObjectMixin[exhaust_fan_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'exhaust-fan'
    _python_name = 'exhaust_fan'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = exhaust_fan_1_child

class phase_30_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['pressure_jump_specification', 'swirl_velocity_specification', 'discrete_phase', 'geometry']
    _child_classes = dict(
        pressure_jump_specification=pressure_jump_specification,
        swirl_velocity_specification=swirl_velocity_specification,
        discrete_phase=discrete_phase_2,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_30(NamedObject[phase_30_child], CreatableNamedObjectMixin[phase_30_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_30_child

class settings_7(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['pressure_jump_specification', 'swirl_velocity_specification', 'discrete_phase', 'geometry', 'phase']
    _child_classes = dict(
        pressure_jump_specification=pressure_jump_specification,
        swirl_velocity_specification=swirl_velocity_specification,
        discrete_phase=discrete_phase_2,
        geometry=geometry_4,
        phase=phase_30,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class fan_1_child(Group):
    """
    'child_object_type' of fan.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'fan_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_7,
        split=split_1,
    )

class fan_1(NamedObject[fan_1_child], CreatableNamedObjectMixin[fan_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'fan'
    _python_name = 'fan'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = fan_1_child

class geometry_6_child(Group):
    """
    'child_object_type' of geometry.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'geometry_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_5,
        split=split_1,
    )

class geometry_6(NamedObject[geometry_6_child], CreatableNamedObjectMixin[geometry_6_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = geometry_6_child

class phase_31_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_1,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_31(NamedObject[phase_31_child], CreatableNamedObjectMixin[phase_31_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_31_child

class settings_8(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry', 'phase']
    _child_classes = dict(
        momentum=momentum_1,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        phase=phase_31,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class inlet_vent_1_child(Group):
    """
    'child_object_type' of inlet_vent.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'inlet_vent_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_8,
        split=split_1,
    )

class inlet_vent_1(NamedObject[inlet_vent_1_child], CreatableNamedObjectMixin[inlet_vent_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'inlet-vent'
    _python_name = 'inlet_vent'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = inlet_vent_1_child

class phase_32_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_2,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_32(NamedObject[phase_32_child], CreatableNamedObjectMixin[phase_32_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_32_child

class settings_9(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry', 'phase']
    _child_classes = dict(
        momentum=momentum_2,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        phase=phase_32,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class intake_fan_1_child(Group):
    """
    'child_object_type' of intake_fan.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'intake_fan_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_9,
        split=split_1,
    )

class intake_fan_1(NamedObject[intake_fan_1_child], CreatableNamedObjectMixin[intake_fan_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'intake-fan'
    _python_name = 'intake_fan'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = intake_fan_1_child

class phase_33_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['interface', 'geometry']
    _child_classes = dict(
        interface=interface_1,
        geometry=geometry_4,
    )

class phase_33(NamedObject[phase_33_child], CreatableNamedObjectMixin[phase_33_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_33_child

class settings_10(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['interface', 'geometry', 'phase']
    _child_classes = dict(
        interface=interface_1,
        geometry=geometry_4,
        phase=phase_33,
    )

class interface_3_child(Group):
    """
    'child_object_type' of interface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'interface_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_10,
        split=split_1,
    )

class interface_3(NamedObject[interface_3_child], CreatableNamedObjectMixin[interface_3_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'interface'
    _python_name = 'interface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = interface_3_child

class phase_34_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['interior']
    _child_classes = dict(
        interior=interior_1,
    )

class phase_34(NamedObject[phase_34_child], CreatableNamedObjectMixin[phase_34_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_34_child

class settings_11(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['interior', 'phase']
    _child_classes = dict(
        interior=interior_1,
        phase=phase_34,
    )

class interior_2_child(Group):
    """
    'child_object_type' of interior.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'interior_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_11,
        split=split_1,
    )

class interior_2(NamedObject[interior_2_child], CreatableNamedObjectMixin[interior_2_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'interior'
    _python_name = 'interior'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = interior_2_child

class phase_35_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_3,
        turbulence=turbulence_2,
        thermal=thermal_2,
        radiation=radiation_3,
        species=species_7,
        discrete_phase=discrete_phase_3,
        multiphase=multiphase_4,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_35(NamedObject[phase_35_child], CreatableNamedObjectMixin[phase_35_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_35_child

class settings_12(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry', 'phase']
    _child_classes = dict(
        momentum=momentum_3,
        turbulence=turbulence_2,
        thermal=thermal_2,
        radiation=radiation_3,
        species=species_7,
        discrete_phase=discrete_phase_3,
        multiphase=multiphase_4,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        phase=phase_35,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class mass_flow_inlet_1_child(Group):
    """
    'child_object_type' of mass_flow_inlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'mass_flow_inlet_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_12,
        split=split_1,
    )

class mass_flow_inlet_1(NamedObject[mass_flow_inlet_1_child], CreatableNamedObjectMixin[mass_flow_inlet_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'mass-flow-inlet'
    _python_name = 'mass_flow_inlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = mass_flow_inlet_1_child

class phase_36_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_4,
        turbulence=turbulence_3,
        thermal=thermal_3,
        radiation=radiation_1,
        species=species_8,
        discrete_phase=discrete_phase_3,
        multiphase=multiphase_5,
        potential=potential_2,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_36(NamedObject[phase_36_child], CreatableNamedObjectMixin[phase_36_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_36_child

class settings_13(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry', 'phase']
    _child_classes = dict(
        momentum=momentum_4,
        turbulence=turbulence_3,
        thermal=thermal_3,
        radiation=radiation_1,
        species=species_8,
        discrete_phase=discrete_phase_3,
        multiphase=multiphase_5,
        potential=potential_2,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        phase=phase_36,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class mass_flow_outlet_1_child(Group):
    """
    'child_object_type' of mass_flow_outlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'mass_flow_outlet_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_13,
        split=split_1,
    )

class mass_flow_outlet_1(NamedObject[mass_flow_outlet_1_child], CreatableNamedObjectMixin[mass_flow_outlet_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'mass-flow-outlet'
    _python_name = 'mass_flow_outlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = mass_flow_outlet_1_child

class phase_37_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'

class phase_37(NamedObject[phase_37_child], CreatableNamedObjectMixin[phase_37_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_37_child

class settings_14(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['phase']
    _child_classes = dict(
        phase=phase_37,
    )

class network_1_child(Group):
    """
    'child_object_type' of network.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'network_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_14,
        split=split_1,
    )

class network_1(NamedObject[network_1_child], CreatableNamedObjectMixin[network_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'network'
    _python_name = 'network'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = network_1_child

class phase_38_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['network_end']
    _child_classes = dict(
        network_end=network_end_1,
    )

class phase_38(NamedObject[phase_38_child], CreatableNamedObjectMixin[phase_38_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_38_child

class settings_15(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['network_end', 'phase']
    _child_classes = dict(
        network_end=network_end_1,
        phase=phase_38,
    )

class network_end_2_child(Group):
    """
    'child_object_type' of network_end.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'network_end_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_15,
        split=split_1,
    )

class network_end_2(NamedObject[network_end_2_child], CreatableNamedObjectMixin[network_end_2_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'network-end'
    _python_name = 'network_end'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = network_end_2_child

class phase_39_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'potential', 'structure', 'uds', 'radiation', 'discrete_phase', 'geometry']
    _child_classes = dict(
        momentum=momentum_5,
        potential=potential_1,
        structure=structure_1,
        uds=uds_2,
        radiation=radiation_4,
        discrete_phase=discrete_phase_4,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_39(NamedObject[phase_39_child], CreatableNamedObjectMixin[phase_39_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_39_child

class settings_16(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['momentum', 'potential', 'structure', 'uds', 'radiation', 'discrete_phase', 'geometry', 'phase']
    _child_classes = dict(
        momentum=momentum_5,
        potential=potential_1,
        structure=structure_1,
        uds=uds_2,
        radiation=radiation_4,
        discrete_phase=discrete_phase_4,
        geometry=geometry_4,
        phase=phase_39,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class outflow_1_child(Group):
    """
    'child_object_type' of outflow.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'outflow_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_16,
        split=split_1,
    )

class outflow_1(NamedObject[outflow_1_child], CreatableNamedObjectMixin[outflow_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'outflow'
    _python_name = 'outflow'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = outflow_1_child

class phase_40_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_6,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_40(NamedObject[phase_40_child], CreatableNamedObjectMixin[phase_40_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_40_child

class settings_17(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry', 'phase']
    _child_classes = dict(
        momentum=momentum_6,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
        phase=phase_40,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class outlet_vent_1_child(Group):
    """
    'child_object_type' of outlet_vent.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'outlet_vent_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_17,
        split=split_1,
    )

class outlet_vent_1(NamedObject[outlet_vent_1_child], CreatableNamedObjectMixin[outlet_vent_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'outlet-vent'
    _python_name = 'outlet_vent'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = outlet_vent_1_child

class overset_1_child(Group):
    """
    'child_object_type' of overset.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'overset_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_5,
        split=split_1,
    )

class overset_1(NamedObject[overset_1_child], CreatableNamedObjectMixin[overset_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'overset'
    _python_name = 'overset'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = overset_1_child

class phase_41_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['periodic', 'geometry']
    _child_classes = dict(
        periodic=periodic_1,
        geometry=geometry_5,
    )

class phase_41(NamedObject[phase_41_child], CreatableNamedObjectMixin[phase_41_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_41_child

class settings_18(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['periodic', 'geometry', 'phase']
    _child_classes = dict(
        periodic=periodic_1,
        geometry=geometry_5,
        phase=phase_41,
    )

class periodic_3_child(Group):
    """
    'child_object_type' of periodic.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'periodic_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_18,
        split=split_1,
    )

class periodic_3(NamedObject[periodic_3_child], CreatableNamedObjectMixin[periodic_3_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'periodic'
    _python_name = 'periodic'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = periodic_3_child

class phase_42_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['porous_jump', 'discrete_phase', 'geometry']
    _child_classes = dict(
        porous_jump=porous_jump_1,
        discrete_phase=discrete_phase_2,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_42(NamedObject[phase_42_child], CreatableNamedObjectMixin[phase_42_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_42_child

class settings_19(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['porous_jump', 'discrete_phase', 'geometry', 'phase']
    _child_classes = dict(
        porous_jump=porous_jump_1,
        discrete_phase=discrete_phase_2,
        geometry=geometry_4,
        phase=phase_42,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class porous_jump_2_child(Group):
    """
    'child_object_type' of porous_jump.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'porous_jump_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_19,
        split=split_1,
    )

class porous_jump_2(NamedObject[porous_jump_2_child], CreatableNamedObjectMixin[porous_jump_2_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'porous-jump'
    _python_name = 'porous_jump'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = porous_jump_2_child

class phase_43_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_7,
        turbulence=turbulence_2,
        thermal=thermal_4,
        radiation=radiation_5,
        species=species_9,
        discrete_phase=discrete_phase_4,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_43(NamedObject[phase_43_child], CreatableNamedObjectMixin[phase_43_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_43_child

class settings_20(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'potential', 'structure', 'uds', 'icing', 'geometry', 'phase']
    _child_classes = dict(
        momentum=momentum_7,
        turbulence=turbulence_2,
        thermal=thermal_4,
        radiation=radiation_5,
        species=species_9,
        discrete_phase=discrete_phase_4,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        phase=phase_43,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class pressure_far_field_2_child(Group):
    """
    'child_object_type' of pressure_far_field.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'pressure_far_field_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_20,
        split=split_1,
    )

class pressure_far_field_2(NamedObject[pressure_far_field_2_child], CreatableNamedObjectMixin[pressure_far_field_2_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'pressure-far-field'
    _python_name = 'pressure_far_field'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = pressure_far_field_2_child

class phase_44_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_8,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_44(NamedObject[phase_44_child], CreatableNamedObjectMixin[phase_44_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_44_child

class settings_21(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry', 'phase']
    _child_classes = dict(
        momentum=momentum_8,
        turbulence=turbulence_1,
        thermal=thermal_1,
        radiation=radiation_2,
        species=species_6,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_3,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        phase=phase_44,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class pressure_inlet_1_child(Group):
    """
    'child_object_type' of pressure_inlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'pressure_inlet_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_21,
        split=split_1,
    )

class pressure_inlet_1(NamedObject[pressure_inlet_1_child], CreatableNamedObjectMixin[pressure_inlet_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'pressure-inlet'
    _python_name = 'pressure_inlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = pressure_inlet_1_child

class phase_45_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_9,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_45(NamedObject[phase_45_child], CreatableNamedObjectMixin[phase_45_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_45_child

class settings_22(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry', 'phase']
    _child_classes = dict(
        momentum=momentum_9,
        turbulence=turbulence,
        thermal=thermal,
        radiation=radiation_1,
        species=species_5,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_2,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing,
        geometry=geometry_4,
        phase=phase_45,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class pressure_outlet_2_child(Group):
    """
    'child_object_type' of pressure_outlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'pressure_outlet_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_22,
        split=split_1,
    )

class pressure_outlet_2(NamedObject[pressure_outlet_2_child], CreatableNamedObjectMixin[pressure_outlet_2_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'pressure-outlet'
    _python_name = 'pressure_outlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = pressure_outlet_2_child

class phase_46_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['radiator', 'discrete_phase', 'geometry']
    _child_classes = dict(
        radiator=radiator_1,
        discrete_phase=discrete_phase_2,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_46(NamedObject[phase_46_child], CreatableNamedObjectMixin[phase_46_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_46_child

class settings_23(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['radiator', 'discrete_phase', 'geometry', 'phase']
    _child_classes = dict(
        radiator=radiator_1,
        discrete_phase=discrete_phase_2,
        geometry=geometry_4,
        phase=phase_46,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class radiator_2_child(Group):
    """
    'child_object_type' of radiator.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'radiator_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_23,
        split=split_1,
    )

class radiator_2(NamedObject[radiator_2_child], CreatableNamedObjectMixin[radiator_2_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'radiator'
    _python_name = 'radiator'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = radiator_2_child

class phase_47_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['turbulence', 'geometry']
    _child_classes = dict(
        turbulence=turbulence_4,
        geometry=geometry_4,
    )

class phase_47(NamedObject[phase_47_child], CreatableNamedObjectMixin[phase_47_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_47_child

class settings_24(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['turbulence', 'geometry', 'phase']
    _child_classes = dict(
        turbulence=turbulence_4,
        geometry=geometry_4,
        phase=phase_47,
    )

class rans_les_interface_1_child(Group):
    """
    'child_object_type' of rans_les_interface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'rans_les_interface_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_24,
        split=split_1,
    )

class rans_les_interface_1(NamedObject[rans_les_interface_1_child], CreatableNamedObjectMixin[rans_les_interface_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'rans-les-interface'
    _python_name = 'rans_les_interface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = rans_les_interface_1_child

class phase_48_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['recirculation_inlet', 'geometry']
    _child_classes = dict(
        recirculation_inlet=recirculation_inlet_1,
        geometry=geometry_4,
    )

class phase_48(NamedObject[phase_48_child], CreatableNamedObjectMixin[phase_48_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_48_child

class settings_25(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['recirculation_inlet', 'geometry', 'phase']
    _child_classes = dict(
        recirculation_inlet=recirculation_inlet_1,
        geometry=geometry_4,
        phase=phase_48,
    )

class recirculation_inlet_2_child(Group):
    """
    'child_object_type' of recirculation_inlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'recirculation_inlet_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_25,
        split=split_1,
    )

class recirculation_inlet_2(NamedObject[recirculation_inlet_2_child], CreatableNamedObjectMixin[recirculation_inlet_2_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'recirculation-inlet'
    _python_name = 'recirculation_inlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = recirculation_inlet_2_child

class phase_49_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['recirculation_outlet', 'geometry']
    _child_classes = dict(
        recirculation_outlet=recirculation_outlet_1,
        geometry=geometry_4,
    )

class phase_49(NamedObject[phase_49_child], CreatableNamedObjectMixin[phase_49_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_49_child

class settings_26(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['recirculation_outlet', 'geometry', 'phase']
    _child_classes = dict(
        recirculation_outlet=recirculation_outlet_1,
        geometry=geometry_4,
        phase=phase_49,
    )

class recirculation_outlet_2_child(Group):
    """
    'child_object_type' of recirculation_outlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'recirculation_outlet_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_26,
        split=split_1,
    )

class recirculation_outlet_2(NamedObject[recirculation_outlet_2_child], CreatableNamedObjectMixin[recirculation_outlet_2_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'recirculation-outlet'
    _python_name = 'recirculation_outlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = recirculation_outlet_2_child

class shadow_1_child(Group):
    """
    'child_object_type' of shadow.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'shadow_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_5,
        split=split_1,
    )

class shadow_1(NamedObject[shadow_1_child], CreatableNamedObjectMixin[shadow_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'shadow'
    _python_name = 'shadow'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = shadow_1_child

class symmetry_1_child(Group):
    """
    'child_object_type' of symmetry.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'symmetry_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_5,
        split=split_1,
    )

class symmetry_1(NamedObject[symmetry_1_child], CreatableNamedObjectMixin[symmetry_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'symmetry'
    _python_name = 'symmetry'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = symmetry_1_child

class phase_50_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry']
    _child_classes = dict(
        momentum=momentum_10,
        turbulence=turbulence_5,
        thermal=thermal_5,
        radiation=radiation_6,
        species=species_7,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_6,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_50(NamedObject[phase_50_child], CreatableNamedObjectMixin[phase_50_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_50_child

class settings_27(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'geometry', 'phase']
    _child_classes = dict(
        momentum=momentum_10,
        turbulence=turbulence_5,
        thermal=thermal_5,
        radiation=radiation_6,
        species=species_7,
        discrete_phase=discrete_phase_1,
        multiphase=multiphase_6,
        potential=potential_1,
        structure=structure_1,
        uds=uds,
        icing=icing_1,
        geometry=geometry_4,
        phase=phase_50,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class velocity_inlet_1_child(Group):
    """
    'child_object_type' of velocity_inlet.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'velocity_inlet_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_27,
        split=split_1,
    )

class velocity_inlet_1(NamedObject[velocity_inlet_1_child], CreatableNamedObjectMixin[velocity_inlet_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'velocity-inlet'
    _python_name = 'velocity_inlet'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = velocity_inlet_1_child

class phase_51_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'wall_film', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'ablation', 'geometry']
    _child_classes = dict(
        momentum=momentum_11,
        turbulence=turbulence_6,
        thermal=thermal_6,
        radiation=radiation_7,
        species=species_10,
        discrete_phase=discrete_phase_5,
        wall_film=wall_film_1,
        multiphase=multiphase_7,
        potential=potential_3,
        structure=structure_1,
        uds=uds,
        icing=icing_2,
        ablation=ablation_1,
        geometry=geometry_4,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class phase_51(NamedObject[phase_51_child], CreatableNamedObjectMixin[phase_51_child]):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_51_child

class settings_28(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['momentum', 'turbulence', 'thermal', 'radiation', 'species', 'discrete_phase', 'wall_film', 'multiphase', 'potential', 'structure', 'uds', 'icing', 'ablation', 'geometry', 'phase']
    _child_classes = dict(
        momentum=momentum_11,
        turbulence=turbulence_6,
        thermal=thermal_6,
        radiation=radiation_7,
        species=species_10,
        discrete_phase=discrete_phase_5,
        wall_film=wall_film_1,
        multiphase=multiphase_7,
        potential=potential_3,
        structure=structure_1,
        uds=uds,
        icing=icing_2,
        ablation=ablation_1,
        geometry=geometry_4,
        phase=phase_51,
    )
    _child_aliases = dict(
        dpm=('discrete_phase', 'dpm'),
    )

class wall_1_child(Group):
    """
    'child_object_type' of wall.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'wall_child'
    child_names = ['name', 'location', 'settings']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_28,
        split=split_1,
    )

class wall_1(NamedObject[wall_1_child], CreatableNamedObjectMixin[wall_1_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'wall'
    _python_name = 'wall'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = wall_1_child

class boundary_names(StringList, AllowedValuesMixin):
    """
    Input boundary names .
    """
    _version = '251'
    fluent_name = 'boundary-names'
    _python_name = 'boundary_names'

class type_4(String, AllowedValuesMixin):
    """
    Input boundary type.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'

class set_type_1(Command):
    """
    Input volume name(s) to change its type.
    
    Parameters
    ----------
        boundary_names : List
            Input boundary names .
        type : str
            Input boundary type.
    """
    _version = '251'
    fluent_name = 'set-type'
    _python_name = 'set_type'
    argument_names = ['boundary_names', 'type']
    _child_classes = dict(
        boundary_names=boundary_names,
        type=type_4,
    )

class boundaries(Group):
    """
    'boundaries' child.
    """
    _version = '251'
    fluent_name = 'boundaries'
    _python_name = 'boundaries'
    child_names = ['axis', 'degassing', 'exhaust_fan', 'fan', 'geometry', 'inlet_vent', 'intake_fan', 'interface', 'interior', 'mass_flow_inlet', 'mass_flow_outlet', 'network', 'network_end', 'outflow', 'outlet_vent', 'overset', 'periodic', 'porous_jump', 'pressure_far_field', 'pressure_inlet', 'pressure_outlet', 'radiator', 'rans_les_interface', 'recirculation_inlet', 'recirculation_outlet', 'shadow', 'symmetry', 'velocity_inlet', 'wall']
    command_names = ['set_type']
    _child_classes = dict(
        axis=axis_3,
        degassing=degassing_1,
        exhaust_fan=exhaust_fan_1,
        fan=fan_1,
        geometry=geometry_6,
        inlet_vent=inlet_vent_1,
        intake_fan=intake_fan_1,
        interface=interface_3,
        interior=interior_2,
        mass_flow_inlet=mass_flow_inlet_1,
        mass_flow_outlet=mass_flow_outlet_1,
        network=network_1,
        network_end=network_end_2,
        outflow=outflow_1,
        outlet_vent=outlet_vent_1,
        overset=overset_1,
        periodic=periodic_3,
        porous_jump=porous_jump_2,
        pressure_far_field=pressure_far_field_2,
        pressure_inlet=pressure_inlet_1,
        pressure_outlet=pressure_outlet_2,
        radiator=radiator_2,
        rans_les_interface=rans_les_interface_1,
        recirculation_inlet=recirculation_inlet_2,
        recirculation_outlet=recirculation_outlet_2,
        shadow=shadow_1,
        symmetry=symmetry_1,
        velocity_inlet=velocity_inlet_1,
        wall=wall_1,
        set_type=set_type_1,
    )

class name_16(String):
    """
    Input new volume name.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class location_4(StringList, AllowedValuesMixin):
    """
    Input location name which should be part of new volume.
    """
    _version = '251'
    fluent_name = 'location'
    _python_name = 'location'

class split(Command):
    """
    Input volume and location names to split.
    
    Parameters
    ----------
        name : str
            Input new volume name.
        location : List
            Input location name which should be part of new volume.
    """
    _version = '251'
    fluent_name = 'split'
    _python_name = 'split'
    argument_names = ['name', 'location']
    _child_classes = dict(
        name=name_16,
        location=location_4,
    )

class fluid_2_child(Group):
    """
    'child_object_type' of fluid.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'fluid_child'
    child_names = ['name', 'location', 'settings', 'boundaries']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_4,
        boundaries=boundaries,
        split=split,
    )

class fluid_2(NamedObject[fluid_2_child], CreatableNamedObjectMixin[fluid_2_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'fluid'
    _python_name = 'fluid'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = fluid_2_child

class phase_52_child(Group):
    """
    'child_object_type' of phase.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_child'
    child_names = ['general', 'reference_frame', 'mesh_motion', 'solid_motion', 'sources', 'fixed_values', 'material_orientation', 'disabled', 'internal', 'electrolyte', 'electrode']
    _child_classes = dict(
        general=general_3,
        reference_frame=reference_frame_3,
        mesh_motion=mesh_motion,
        solid_motion=solid_motion,
        sources=sources,
        fixed_values=fixed_values,
        material_orientation=material_orientation,
        disabled=disabled_1,
        internal=internal,
        electrolyte=electrolyte_1,
        electrode=electrode,
    )
    _child_aliases = dict(
        material=('general/material', 'material'),
    )

class phase_52(NamedObject[phase_52_child], CreatableNamedObjectMixin[phase_52_child]):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_52_child

class settings_29(Group):
    """
    Domain name to define settings on.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['general', 'reference_frame', 'mesh_motion', 'solid_motion', 'sources', 'fixed_values', 'material_orientation', 'disabled', 'internal', 'electrolyte', 'electrode', 'phase']
    _child_classes = dict(
        general=general_3,
        reference_frame=reference_frame_3,
        mesh_motion=mesh_motion,
        solid_motion=solid_motion,
        sources=sources,
        fixed_values=fixed_values,
        material_orientation=material_orientation,
        disabled=disabled_1,
        internal=internal,
        electrolyte=electrolyte_1,
        electrode=electrode,
        phase=phase_52,
    )
    _child_aliases = dict(
        material=('general/material', 'material'),
    )

class solid_3_child(Group):
    """
    'child_object_type' of solid.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'solid_child'
    child_names = ['name', 'location', 'settings', 'boundaries']
    command_names = ['split']
    _child_classes = dict(
        name=name_2,
        location=location_2,
        settings=settings_29,
        boundaries=boundaries,
        split=split,
    )

class solid_3(NamedObject[solid_3_child], CreatableNamedObjectMixin[solid_3_child]):
    """
    Thread-type.
    """
    _version = '251'
    fluent_name = 'solid'
    _python_name = 'solid'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = solid_3_child

class list_physics(Command):
    """
    List volume information.
    """
    _version = '251'
    fluent_name = 'list-physics'
    _python_name = 'list_physics'

class volume_names(StringList, AllowedValuesMixin):
    """
    Input volume names .
    """
    _version = '251'
    fluent_name = 'volume-names'
    _python_name = 'volume_names'

class type_5(String, AllowedValuesMixin):
    """
    Input volume type.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'

class set_type(Command):
    """
    Input volume name(s) to change its type.
    
    Parameters
    ----------
        volume_names : List
            Input volume names .
        type : str
            Input volume type.
    """
    _version = '251'
    fluent_name = 'set-type'
    _python_name = 'set_type'
    argument_names = ['volume_names', 'type']
    _child_classes = dict(
        volume_names=volume_names,
        type=type_5,
    )

class volumes(Group, _ChildNamedObjectAccessorMixin):
    """
    Volumes definitions.
    """
    _version = '251'
    fluent_name = 'volumes'
    _python_name = 'volumes'
    child_names = ['fluid', 'solid']
    command_names = ['list_physics', 'set_type']
    _child_classes = dict(
        fluid=fluid_2,
        solid=solid_3,
        list_physics=list_physics,
        set_type=set_type,
    )

class boundary_1_1(String, AllowedValuesMixin):
    """
    First interface zones for pairing.
    """
    _version = '251'
    fluent_name = 'boundary-1'
    _python_name = 'boundary_1'

class boundary_2(String, AllowedValuesMixin):
    """
    First interface zones for pairing.
    """
    _version = '251'
    fluent_name = 'boundary-2'
    _python_name = 'boundary_2'

class periodicity(String, AllowedValuesMixin):
    """
    Interface periodicity type.
    """
    _version = '251'
    fluent_name = 'periodicity'
    _python_name = 'periodicity'

class intf_type(String, AllowedValuesMixin):
    """
    Interface type.
    """
    _version = '251'
    fluent_name = 'intf-type'
    _python_name = 'intf_type'

class mesh_connectivity(String, AllowedValuesMixin):
    """
    Interface mesh connectivity type.
    """
    _version = '251'
    fluent_name = 'mesh-connectivity'
    _python_name = 'mesh_connectivity'

class create_6(CommandWithPositionalArgs):
    """
    Create mesh interfaces.
    
    Parameters
    ----------
        name : str
            The prefix for mesh interface names.
        boundary_1 : str
            First interface zones for pairing.
        boundary_2 : str
            First interface zones for pairing.
        periodicity : str
            Interface periodicity type.
        intf_type : str
            Interface type.
        mesh_connectivity : str
            Interface mesh connectivity type.
    """
    _version = '251'
    fluent_name = 'create'
    _python_name = 'create'
    argument_names = ['name', 'boundary_1', 'boundary_2', 'periodicity', 'intf_type', 'mesh_connectivity']
    _child_classes = dict(
        name=name_9,
        boundary_1=boundary_1_1,
        boundary_2=boundary_2,
        periodicity=periodicity,
        intf_type=intf_type,
        mesh_connectivity=mesh_connectivity,
    )

class type_6(String, AllowedValuesMixin):
    """
    Interface type.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'

class boundary_1_2(String, AllowedValuesMixin):
    """
    Interface side-1 boundary.
    """
    _version = '251'
    fluent_name = 'boundary-1'
    _python_name = 'boundary_1'

class boundary_2_1(String, AllowedValuesMixin):
    """
    Interface side-2 boundary.
    """
    _version = '251'
    fluent_name = 'boundary-2'
    _python_name = 'boundary_2'

class interfaces_child(Group):
    """
    'child_object_type' of interfaces.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'interfaces_child'
    child_names = ['name', 'type', 'boundary_1', 'boundary_2', 'periodicity', 'mesh_connectivity']
    _child_classes = dict(
        name=name_9,
        type=type_6,
        boundary_1=boundary_1_2,
        boundary_2=boundary_2_1,
        periodicity=periodicity,
        mesh_connectivity=mesh_connectivity,
    )

class interfaces(NamedObject[interfaces_child], CreatableNamedObjectMixin[interfaces_child]):
    """
    Physics interface definitions.
    """
    _version = '251'
    fluent_name = 'interfaces'
    _python_name = 'interfaces'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_6,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = interfaces_child

class physics(Group, _ChildNamedObjectAccessorMixin):
    """
    UTL physics definitions.
    """
    _version = '251'
    fluent_name = 'physics'
    _python_name = 'physics'
    child_names = ['volumes', 'interfaces']
    _child_classes = dict(
        volumes=volumes,
        interfaces=interfaces,
    )

class update_interval(Integer):
    """
    Dynamic profile update interval.
    """
    _version = '251'
    fluent_name = 'update-interval'
    _python_name = 'update_interval'

class circumferential_averaged_profile_enhanced_bands_check(Boolean):
    """
    Enhamced viability check for circumferential averaged profile band creation.
    """
    _version = '251'
    fluent_name = 'circumferential-averaged-profile-enhanced-bands-check?'
    _python_name = 'circumferential_averaged_profile_enhanced_bands_check'

class profile_name_1(String, AllowedValuesMixin):
    """
    Profile name.
    """
    _version = '251'
    fluent_name = 'profile-name'
    _python_name = 'profile_name'

class field_contour(Boolean):
    """
    Field contour?.
    """
    _version = '251'
    fluent_name = 'field-contour?'
    _python_name = 'field_contour'

class field_variable(String, AllowedValuesMixin):
    """
    Field variable.
    """
    _version = '251'
    fluent_name = 'field-variable'
    _python_name = 'field_variable'

class display_profile_point_cloud_data(Command):
    """
    Display Profile Point cloud data Command.
    
    Parameters
    ----------
        profile_name : str
            Profile name.
        field_contour : bool
            Field contour?.
        field_variable : str
            Field variable.
    """
    _version = '251'
    fluent_name = 'display-profile-point-cloud-data'
    _python_name = 'display_profile_point_cloud_data'
    argument_names = ['profile_name', 'field_contour', 'field_variable']
    _child_classes = dict(
        profile_name=profile_name_1,
        field_contour=field_contour,
        field_variable=field_variable,
    )

class display_profile_surface(Command):
    """
    Display Profile Surface/field rendering command.
    """
    _version = '251'
    fluent_name = 'display-profile-surface'
    _python_name = 'display_profile_surface'
    argument_names = ['profile_name', 'field_contour', 'field_variable']
    _child_classes = dict(
        profile_name=profile_name_1,
        field_contour=field_contour,
        field_variable=field_variable,
    )

class profile_point_marker(String, AllowedValuesMixin):
    """
    Profile point marker.
    """
    _version = '251'
    fluent_name = 'profile-point-marker'
    _python_name = 'profile_point_marker'

class profile_point_marker_size(Real):
    """
    Profile point marker size.
    """
    _version = '251'
    fluent_name = 'profile-point-marker-size'
    _python_name = 'profile_point_marker_size'

class profile_point_marker_color(String, AllowedValuesMixin):
    """
    Profile point marker color.
    """
    _version = '251'
    fluent_name = 'profile-point-marker-color'
    _python_name = 'profile_point_marker_color'

class set_preference_profile_point_cloud_data(Command):
    """
    Profile Point attributes command.
    """
    _version = '251'
    fluent_name = 'set-preference-profile-point-cloud-data'
    _python_name = 'set_preference_profile_point_cloud_data'
    argument_names = ['profile_point_marker', 'profile_point_marker_size', 'profile_point_marker_color']
    _child_classes = dict(
        profile_point_marker=profile_point_marker,
        profile_point_marker_size=profile_point_marker_size,
        profile_point_marker_color=profile_point_marker_color,
    )

class overlay(Boolean):
    """
    Overlay profile point cloud data.
    """
    _version = '251'
    fluent_name = 'overlay?'
    _python_name = 'overlay'

class graphics_object(String, AllowedValuesMixin):
    """
    Graphics Object.
    """
    _version = '251'
    fluent_name = 'graphics-object'
    _python_name = 'graphics_object'

class display_contour(Boolean):
    """
    Enable/Disable Profile Field Contour.
    """
    _version = '251'
    fluent_name = 'display-contour?'
    _python_name = 'display_contour'

class overlay_profile_point_cloud_data(Command):
    """
    Overlay Display Profile Point cloud data Command.
    
    Parameters
    ----------
        overlay : bool
            Overlay profile point cloud data.
        profile_name : str
            Profile name.
        graphics_object : str
            Graphics Object.
        display_contour : bool
            Enable/Disable Profile Field Contour.
        field_variable : str
            Field variable.
    """
    _version = '251'
    fluent_name = 'overlay-profile-point-cloud-data'
    _python_name = 'overlay_profile_point_cloud_data'
    argument_names = ['overlay', 'profile_name', 'graphics_object', 'display_contour', 'field_variable']
    _child_classes = dict(
        overlay=overlay,
        profile_name=profile_name_1,
        graphics_object=graphics_object,
        display_contour=display_contour,
        field_variable=field_variable,
    )

class overlay_1(Boolean):
    """
    Overlay profile surface.
    """
    _version = '251'
    fluent_name = 'overlay?'
    _python_name = 'overlay'

class filed_variable(String, AllowedValuesMixin):
    """
    Field variable.
    """
    _version = '251'
    fluent_name = 'filed-variable'
    _python_name = 'filed_variable'

class overlay_profile_surface(Command):
    """
    Overlay Display Profile Surface Command.
    
    Parameters
    ----------
        overlay : bool
            Overlay profile surface.
        profile_name : str
            Profile name.
        graphics_object : str
            Graphics Object.
        field_contour : bool
            Field contour?.
        filed_variable : str
            Field variable.
    """
    _version = '251'
    fluent_name = 'overlay-profile-surface'
    _python_name = 'overlay_profile_surface'
    argument_names = ['overlay', 'profile_name', 'graphics_object', 'field_contour', 'filed_variable']
    _child_classes = dict(
        overlay=overlay_1,
        profile_name=profile_name_1,
        graphics_object=graphics_object,
        field_contour=field_contour,
        filed_variable=filed_variable,
    )

class list_profiles(Command):
    """
    List-profiles-command.
    """
    _version = '251'
    fluent_name = 'list-profiles'
    _python_name = 'list_profiles'

class list_profile_parameters(Command):
    """
    List-profile-parameters-command.
    """
    _version = '251'
    fluent_name = 'list-profile-parameters'
    _python_name = 'list_profile_parameters'
    argument_names = ['profile_name']
    _child_classes = dict(
        profile_name=profile_name_1,
    )

class list_profile_parameters_with_value(Command):
    """
    List-profile-parameters-with-value-command.
    """
    _version = '251'
    fluent_name = 'list-profile-parameters-with-value'
    _python_name = 'list_profile_parameters_with_value'
    argument_names = ['profile_name']
    _child_classes = dict(
        profile_name=profile_name_1,
    )

class list_profile_fields(Command):
    """
    List-profile-fields-command.
    """
    _version = '251'
    fluent_name = 'list-profile-fields'
    _python_name = 'list_profile_fields'
    argument_names = ['profile_name']
    _child_classes = dict(
        profile_name=profile_name_1,
    )

class delete_4(CommandWithPositionalArgs):
    """
    Delete-profile-command.
    """
    _version = '251'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['profile_name']
    _child_classes = dict(
        profile_name=profile_name_1,
    )

class delete_all_1(Command):
    """
    Delete-all-command.
    """
    _version = '251'
    fluent_name = 'delete-all'
    _python_name = 'delete_all'

class query_list_profiles(Query):
    """
    List-profiles-command.
    """
    _version = '251'
    fluent_name = 'query-list-profiles'
    _python_name = 'query_list_profiles'

class query_list_profile_fields(Query):
    """
    Query list-profile-fields.
    
    Parameters
    ----------
        profile_name : str
            Profile name.
    """
    _version = '251'
    fluent_name = 'query-list-profile-fields'
    _python_name = 'query_list_profile_fields'
    argument_names = ['profile_name']
    _child_classes = dict(
        profile_name=profile_name_1,
    )

class query_list_profile_parameters(Query):
    """
    Query-list-profile-parameters-class.
    
    Parameters
    ----------
        profile_name : str
            Profile name.
    """
    _version = '251'
    fluent_name = 'query-list-profile-parameters'
    _python_name = 'query_list_profile_parameters'
    argument_names = ['profile_name']
    _child_classes = dict(
        profile_name=profile_name_1,
    )

class query_list_profile_parameters_with_value(Query):
    """
    Query-list-profile-parameters-with-value-class.
    
    Parameters
    ----------
        profile_name : str
            Profile name.
    """
    _version = '251'
    fluent_name = 'query-list-profile-parameters-with-value'
    _python_name = 'query_list_profile_parameters_with_value'
    argument_names = ['profile_name']
    _child_classes = dict(
        profile_name=profile_name_1,
    )

class profiles(Group):
    """
    Profile display object.
    """
    _version = '251'
    fluent_name = 'profiles'
    _python_name = 'profiles'
    child_names = ['update_interval', 'circumferential_averaged_profile_enhanced_bands_check']
    command_names = ['display_profile_point_cloud_data', 'display_profile_surface', 'set_preference_profile_point_cloud_data', 'overlay_profile_point_cloud_data', 'overlay_profile_surface', 'list_profiles', 'list_profile_parameters', 'list_profile_parameters_with_value', 'list_profile_fields', 'delete', 'delete_all']
    query_names = ['query_list_profiles', 'query_list_profile_fields', 'query_list_profile_parameters', 'query_list_profile_parameters_with_value']
    _child_classes = dict(
        update_interval=update_interval,
        circumferential_averaged_profile_enhanced_bands_check=circumferential_averaged_profile_enhanced_bands_check,
        display_profile_point_cloud_data=display_profile_point_cloud_data,
        display_profile_surface=display_profile_surface,
        set_preference_profile_point_cloud_data=set_preference_profile_point_cloud_data,
        overlay_profile_point_cloud_data=overlay_profile_point_cloud_data,
        overlay_profile_surface=overlay_profile_surface,
        list_profiles=list_profiles,
        list_profile_parameters=list_profile_parameters,
        list_profile_parameters_with_value=list_profile_parameters_with_value,
        list_profile_fields=list_profile_fields,
        delete=delete_4,
        delete_all=delete_all_1,
        query_list_profiles=query_list_profiles,
        query_list_profile_fields=query_list_profile_fields,
        query_list_profile_parameters=query_list_profile_parameters,
        query_list_profile_parameters_with_value=query_list_profile_parameters_with_value,
    )

class setup(Group):
    """
    'setup' child.
    """
    _version = '251'
    fluent_name = 'setup'
    _python_name = 'setup'
    child_names = ['general', 'models', 'materials', 'cell_zone_conditions', 'boundary_conditions', 'mesh_interfaces', 'dynamic_mesh', 'reference_values', 'reference_frames', 'named_expressions', 'turbo_models', 'geometry', 'physics', 'profiles']
    _child_classes = dict(
        general=general,
        models=models,
        materials=materials,
        cell_zone_conditions=cell_zone_conditions,
        boundary_conditions=boundary_conditions,
        mesh_interfaces=mesh_interfaces,
        dynamic_mesh=dynamic_mesh,
        reference_values=reference_values,
        reference_frames=reference_frames,
        named_expressions=named_expressions,
        turbo_models=turbo_models,
        geometry=geometry_1,
        physics=physics,
        profiles=profiles,
    )

class axis_stabilization(Boolean):
    """
    Enable numerical stabilization of the axis boundary-condition.
    """
    _version = '251'
    fluent_name = 'axis-stabilization?'
    _python_name = 'axis_stabilization'

class axisymmetric(Group):
    """
    Axisymmetric object.
    """
    _version = '251'
    fluent_name = 'axisymmetric'
    _python_name = 'axisymmetric'
    child_names = ['axis_stabilization']
    _child_classes = dict(
        axis_stabilization=axis_stabilization,
    )

class flow_scheme(String, AllowedValuesMixin):
    """
    'flow_scheme' child.
    """
    _version = '251'
    fluent_name = 'flow-scheme'
    _python_name = 'flow_scheme'

class skewness_correction_itr_count(Integer):
    """
    Iterations for skewness correction.
    """
    _version = '251'
    fluent_name = 'skewness-correction-itr-count'
    _python_name = 'skewness_correction_itr_count'

class neighbor_correction_itr_count(Integer):
    """
    Iterations for neighbor correction.
    """
    _version = '251'
    fluent_name = 'neighbor-correction-itr-count'
    _python_name = 'neighbor_correction_itr_count'

class skewness_neighbor_coupling(Boolean):
    """
    Skewness-Neighbor Coupling?.
    """
    _version = '251'
    fluent_name = 'skewness-neighbor-coupling'
    _python_name = 'skewness_neighbor_coupling'

class coupled_form(Boolean):
    """
    'coupled_form' child.
    """
    _version = '251'
    fluent_name = 'coupled-form'
    _python_name = 'coupled_form'

class solve_n_phase(Boolean):
    """
    Enable/disable N-Phase volume fraction equations.
    """
    _version = '251'
    fluent_name = 'solve-n-phase?'
    _python_name = 'solve_n_phase'

class p_v_coupling(Group):
    """
    The pressure velocity coupling scheme.
    """
    _version = '251'
    fluent_name = 'p-v-coupling'
    _python_name = 'p_v_coupling'
    child_names = ['flow_scheme', 'skewness_correction_itr_count', 'neighbor_correction_itr_count', 'skewness_neighbor_coupling', 'coupled_form', 'solve_n_phase']
    _child_classes = dict(
        flow_scheme=flow_scheme,
        skewness_correction_itr_count=skewness_correction_itr_count,
        neighbor_correction_itr_count=neighbor_correction_itr_count,
        skewness_neighbor_coupling=skewness_neighbor_coupling,
        coupled_form=coupled_form,
        solve_n_phase=solve_n_phase,
    )

class flux_type_1(String, AllowedValuesMixin):
    """
    Flux type for density-based solver.
    """
    _version = '251'
    fluent_name = 'flux-type'
    _python_name = 'flux_type'

class dbns_cases(Group):
    """
    Flux type object.
    """
    _version = '251'
    fluent_name = 'dbns_cases'
    _python_name = 'dbns_cases'
    child_names = ['flux_type']
    _child_classes = dict(
        flux_type=flux_type_1,
    )

class flux_auto_select(Boolean):
    """
    Enable/disable auto select.
    """
    _version = '251'
    fluent_name = 'flux-auto-select?'
    _python_name = 'flux_auto_select'

class flux_type_2(String, AllowedValuesMixin):
    """
    Flux type for pressure-based solver.
    """
    _version = '251'
    fluent_name = 'flux-type'
    _python_name = 'flux_type'

class pbns_cases(Group):
    """
    Flux type object.
    """
    _version = '251'
    fluent_name = 'pbns_cases'
    _python_name = 'pbns_cases'
    child_names = ['flux_auto_select', 'flux_type']
    _child_classes = dict(
        flux_auto_select=flux_auto_select,
        flux_type=flux_type_2,
    )

class flux_type(Group):
    """
    The flux type.
    """
    _version = '251'
    fluent_name = 'flux-type'
    _python_name = 'flux_type'
    child_names = ['dbns_cases', 'pbns_cases']
    _child_classes = dict(
        dbns_cases=dbns_cases,
        pbns_cases=pbns_cases,
    )

class gradient_scheme(String, AllowedValuesMixin):
    """
    Gradient scheme.
    """
    _version = '251'
    fluent_name = 'gradient-scheme'
    _python_name = 'gradient_scheme'

class discretization_scheme_child(String, AllowedValuesMixin):
    """
    'child_object_type' of discretization_scheme.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'discretization_scheme_child'

class discretization_scheme(NamedObject[discretization_scheme_child], CreatableNamedObjectMixin[discretization_scheme_child]):
    """
    Discretization scheme.
    """
    _version = '251'
    fluent_name = 'discretization-scheme'
    _python_name = 'discretization_scheme'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = discretization_scheme_child

class spatial_discretization(Group):
    """
    Spatial Discretizatio Schemes.
    """
    _version = '251'
    fluent_name = 'spatial-discretization'
    _python_name = 'spatial_discretization'
    child_names = ['gradient_scheme', 'discretization_scheme']
    _child_classes = dict(
        gradient_scheme=gradient_scheme,
        discretization_scheme=discretization_scheme,
    )

class bcd_boundedness(Real):
    """
    The BCD scheme boundedness strength.
    """
    _version = '251'
    fluent_name = 'bcd-boundedness'
    _python_name = 'bcd_boundedness'

class coupled_solver(String, AllowedValuesMixin):
    """
    Pseudo time step size formulation for the pseudo time method.
    """
    _version = '251'
    fluent_name = 'coupled-solver'
    _python_name = 'coupled_solver'

class segregated_solver(String, AllowedValuesMixin):
    """
    Pseudo time step size formulation for the pseudo time method.
    """
    _version = '251'
    fluent_name = 'segregated-solver'
    _python_name = 'segregated_solver'

class density_based_solver(String, AllowedValuesMixin):
    """
    Pseudo time step size formulation for the pseudo time method.
    """
    _version = '251'
    fluent_name = 'density-based-solver'
    _python_name = 'density_based_solver'

class formulation_1(Group):
    """
    The pseudo time step size formulation for the pseudo time method.
    """
    _version = '251'
    fluent_name = 'formulation'
    _python_name = 'formulation'
    child_names = ['coupled_solver', 'segregated_solver', 'density_based_solver']
    _child_classes = dict(
        coupled_solver=coupled_solver,
        segregated_solver=segregated_solver,
        density_based_solver=density_based_solver,
    )

class relaxation_method(String, AllowedValuesMixin):
    """
    Relaxation definition for pseudo time method.
    """
    _version = '251'
    fluent_name = 'relaxation-method'
    _python_name = 'relaxation_method'

class convergence_acceleration_type(String, AllowedValuesMixin):
    """
    Convergence acceleration type.
    """
    _version = '251'
    fluent_name = 'convergence-acceleration-type'
    _python_name = 'convergence_acceleration_type'

class casm_cutoff_multiplier(Real):
    """
    'casm_cutoff_multiplier' child.
    """
    _version = '251'
    fluent_name = 'casm-cutoff-multiplier'
    _python_name = 'casm_cutoff_multiplier'

class convergence_acceleration_for_stretched_meshes_1(Group):
    """
    Enable convergence acceleration for stretched meshes to improve the convergence of the implicit pressure based solver on meshes with high cell stretching.
    """
    _version = '251'
    fluent_name = 'convergence-acceleration-for-stretched-meshes'
    _python_name = 'convergence_acceleration_for_stretched_meshes'
    child_names = ['convergence_acceleration_type', 'casm_cutoff_multiplier']
    _child_classes = dict(
        convergence_acceleration_type=convergence_acceleration_type,
        casm_cutoff_multiplier=casm_cutoff_multiplier,
    )

class relaxation_bounding_method(String, AllowedValuesMixin):
    """
    'relaxation_bounding_method' child.
    """
    _version = '251'
    fluent_name = 'relaxation-bounding-method'
    _python_name = 'relaxation_bounding_method'

class default_min_max_relaxation_limits(Boolean):
    """
    'default_min_max_relaxation_limits' child.
    """
    _version = '251'
    fluent_name = 'default-min-max-relaxation-limits?'
    _python_name = 'default_min_max_relaxation_limits'

class minimum_allowed_effctive_relaxation(Real):
    """
    'minimum_allowed_effctive_relaxation' child.
    """
    _version = '251'
    fluent_name = 'minimum-allowed-effctive-relaxation'
    _python_name = 'minimum_allowed_effctive_relaxation'

class maximum_allowed_effctive_relaxation(Real):
    """
    'maximum_allowed_effctive_relaxation' child.
    """
    _version = '251'
    fluent_name = 'maximum-allowed-effctive-relaxation'
    _python_name = 'maximum_allowed_effctive_relaxation'

class relaxation_bounds(Command):
    """
    Select relaxation bounding scheme for pseudo time method.
    
    Parameters
    ----------
        relaxation_bounding_method : str
            'relaxation_bounding_method' child.
        default_min_max_relaxation_limits : bool
            'default_min_max_relaxation_limits' child.
        minimum_allowed_effctive_relaxation : real
            'minimum_allowed_effctive_relaxation' child.
        maximum_allowed_effctive_relaxation : real
            'maximum_allowed_effctive_relaxation' child.
    """
    _version = '251'
    fluent_name = 'relaxation-bounds'
    _python_name = 'relaxation_bounds'
    argument_names = ['relaxation_bounding_method', 'default_min_max_relaxation_limits', 'minimum_allowed_effctive_relaxation', 'maximum_allowed_effctive_relaxation']
    _child_classes = dict(
        relaxation_bounding_method=relaxation_bounding_method,
        default_min_max_relaxation_limits=default_min_max_relaxation_limits,
        minimum_allowed_effctive_relaxation=minimum_allowed_effctive_relaxation,
        maximum_allowed_effctive_relaxation=maximum_allowed_effctive_relaxation,
    )

class pseudo_time_method(Group):
    """
    The pseudo time method object.
    """
    _version = '251'
    fluent_name = 'pseudo-time-method'
    _python_name = 'pseudo_time_method'
    child_names = ['formulation', 'relaxation_method', 'convergence_acceleration_for_stretched_meshes']
    command_names = ['relaxation_bounds']
    _child_classes = dict(
        formulation=formulation_1,
        relaxation_method=relaxation_method,
        convergence_acceleration_for_stretched_meshes=convergence_acceleration_for_stretched_meshes_1,
        relaxation_bounds=relaxation_bounds,
    )

class transient_formulation(String, AllowedValuesMixin):
    """
    Transient formulation.
    """
    _version = '251'
    fluent_name = 'transient-formulation'
    _python_name = 'transient_formulation'

class unsteady_global_time(Boolean):
    """
    Enable/disable unsteady global-time-step solution model.
    """
    _version = '251'
    fluent_name = 'unsteady-global-time?'
    _python_name = 'unsteady_global_time'

class accelerated_non_iterative_time_marching(Boolean):
    """
    Enable/disable accelerated non-iterative time marching.
    """
    _version = '251'
    fluent_name = 'accelerated-non-iterative-time-marching?'
    _python_name = 'accelerated_non_iterative_time_marching'

class convergence_acceleration_type_1(String, AllowedValuesMixin):
    """
    'convergence_acceleration_type' child.
    """
    _version = '251'
    fluent_name = 'convergence-acceleration-type'
    _python_name = 'convergence_acceleration_type'

class casm_cutoff_multiplier_1(Real):
    """
    CASM cut-off multiplier :.
    """
    _version = '251'
    fluent_name = 'casm-cutoff-multiplier'
    _python_name = 'casm_cutoff_multiplier'

class convergence_acceleration_for_stretched_meshes(Group):
    """
    Enable convergence acceleration for stretched meshes to improve the convergence of the implicit density based solver on meshes with high cell stretching.
    """
    _version = '251'
    fluent_name = 'convergence-acceleration-for-stretched-meshes'
    _python_name = 'convergence_acceleration_for_stretched_meshes'
    child_names = ['convergence_acceleration_type', 'casm_cutoff_multiplier']
    _child_classes = dict(
        convergence_acceleration_type=convergence_acceleration_type_1,
        casm_cutoff_multiplier=casm_cutoff_multiplier_1,
    )

class reactions_2(Boolean):
    """
    Enable/disable the species reaction sources and set relaxation factor.
    """
    _version = '251'
    fluent_name = 'reactions?'
    _python_name = 'reactions'

class reaction_source_term_relaxation_factor(Real):
    """
    Reaction source term relaxation factor.
    """
    _version = '251'
    fluent_name = 'reaction-source-term-relaxation-factor'
    _python_name = 'reaction_source_term_relaxation_factor'

class implicit_bodyforce_treatment(Boolean):
    """
    Enable/disable implicit body force treatment.
    """
    _version = '251'
    fluent_name = 'implicit-bodyforce-treatment?'
    _python_name = 'implicit_bodyforce_treatment'

class physical_velocity_formulation(Boolean):
    """
    Enable/disable use of physical velocity formulation for porous media.
    """
    _version = '251'
    fluent_name = 'physical-velocity-formulation?'
    _python_name = 'physical_velocity_formulation'

class disable_rhie_chow_flux(Boolean):
    """
    Use low order velocity interpolation in flux calculation.
    """
    _version = '251'
    fluent_name = 'disable-rhie-chow-flux?'
    _python_name = 'disable_rhie_chow_flux'

class presto_pressure_scheme(Boolean):
    """
    Limit high-order terms for PRESTO! pressure scheme.
    """
    _version = '251'
    fluent_name = 'presto-pressure-scheme?'
    _python_name = 'presto_pressure_scheme'

class first_to_second_order_blending(Real):
    """
    1st-order to higher-order blending factor [min=0.0 - max=1.0].
    """
    _version = '251'
    fluent_name = 'first-to-second-order-blending'
    _python_name = 'first_to_second_order_blending'

class alternate_diffusion_for_porous_region_solids(Boolean):
    """
    Enable/disable use of alternate diffusion for porous region solids.
    """
    _version = '251'
    fluent_name = 'alternate-diffusion-for-porous-region-solids?'
    _python_name = 'alternate_diffusion_for_porous_region_solids'

class numerics_pbns(Group):
    """
    Numeric options for pressure-based solver.
    """
    _version = '251'
    fluent_name = 'numerics-pbns'
    _python_name = 'numerics_pbns'
    child_names = ['implicit_bodyforce_treatment', 'velocity_formulation', 'physical_velocity_formulation', 'disable_rhie_chow_flux', 'presto_pressure_scheme', 'first_to_second_order_blending', 'alternate_diffusion_for_porous_region_solids']
    _child_classes = dict(
        implicit_bodyforce_treatment=implicit_bodyforce_treatment,
        velocity_formulation=velocity_formulation,
        physical_velocity_formulation=physical_velocity_formulation,
        disable_rhie_chow_flux=disable_rhie_chow_flux,
        presto_pressure_scheme=presto_pressure_scheme,
        first_to_second_order_blending=first_to_second_order_blending,
        alternate_diffusion_for_porous_region_solids=alternate_diffusion_for_porous_region_solids,
    )

class first_to_second_order_blending_dbns(Real):
    """
    1st-order to higher-order blending factor [min=0.0 - max=1.0]:.
    """
    _version = '251'
    fluent_name = 'first-to-second-order-blending-dbns'
    _python_name = 'first_to_second_order_blending_dbns'

class numerics_dbns(Group):
    """
    Numeric options for density-based solver.
    """
    _version = '251'
    fluent_name = 'numerics-dbns'
    _python_name = 'numerics_dbns'
    child_names = ['first_to_second_order_blending_dbns']
    _child_classes = dict(
        first_to_second_order_blending_dbns=first_to_second_order_blending_dbns,
    )

class expert_5(Group):
    """
    Expert object.
    """
    _version = '251'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['reactions', 'reaction_source_term_relaxation_factor', 'numerics_pbns', 'numerics_dbns']
    _child_classes = dict(
        reactions=reactions_2,
        reaction_source_term_relaxation_factor=reaction_source_term_relaxation_factor,
        numerics_pbns=numerics_pbns,
        numerics_dbns=numerics_dbns,
    )

class frozen_flux(Boolean):
    """
    Enable/disable frozen flux formulation for transient flows.
    """
    _version = '251'
    fluent_name = 'frozen-flux?'
    _python_name = 'frozen_flux'

class enable_19(Boolean):
    """
    Enable/Disable High Order Term Relaxation.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class relaxation_factor(Real):
    """
    Relaxation factor.
    """
    _version = '251'
    fluent_name = 'relaxation-factor'
    _python_name = 'relaxation_factor'

class select_variables(String, AllowedValuesMixin):
    """
    Variables for high order term relaxation.
    """
    _version = '251'
    fluent_name = 'select-variables'
    _python_name = 'select_variables'

class type_7(String, AllowedValuesMixin):
    """
    High order relaxation type.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'

class options_8(Group):
    """
    High Order Term Relaxation Options.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['relaxation_factor', 'select_variables', 'type']
    _child_classes = dict(
        relaxation_factor=relaxation_factor,
        select_variables=select_variables,
        type=type_7,
    )

class high_order_term_relaxation(Group):
    """
    High Order Relaxation Menu.
    """
    _version = '251'
    fluent_name = 'high-order-term-relaxation'
    _python_name = 'high_order_term_relaxation'
    child_names = ['enable', 'options']
    _child_classes = dict(
        enable=enable_19,
        options=options_8,
    )

class relative_permeability_2(Boolean):
    """
    Multiphase relative permeability fix option.
    """
    _version = '251'
    fluent_name = 'relative-permeability?'
    _python_name = 'relative_permeability'

class capillary_pressure_as_diffusion(Boolean):
    """
    Model capillary pressure as diffusion.
    """
    _version = '251'
    fluent_name = 'capillary-pressure-as-diffusion?'
    _python_name = 'capillary_pressure_as_diffusion'

class porous_media(Group):
    """
    Multiphase miscellaneous porous media numerics object.
    """
    _version = '251'
    fluent_name = 'porous-media'
    _python_name = 'porous_media'
    child_names = ['relative_permeability', 'capillary_pressure_as_diffusion']
    _child_classes = dict(
        relative_permeability=relative_permeability_2,
        capillary_pressure_as_diffusion=capillary_pressure_as_diffusion,
    )

class enhanced_numerics(Boolean):
    """
    Multiphase enhanced compressible flow numerics options.
    """
    _version = '251'
    fluent_name = 'enhanced-numerics?'
    _python_name = 'enhanced_numerics'

class alternate_bc_formulation(Boolean):
    """
    Enable/disable use of alternate compressible bc formulation.
    """
    _version = '251'
    fluent_name = 'alternate-bc-formulation?'
    _python_name = 'alternate_bc_formulation'

class analytical_thermodynamic_derivatives(Boolean):
    """
    Enable/disable use of analytical thermodynamic derivatives.
    """
    _version = '251'
    fluent_name = 'analytical-thermodynamic-derivatives?'
    _python_name = 'analytical_thermodynamic_derivatives'

class compressible_flow(Group):
    """
    Multiphase compressible numerics options object.
    """
    _version = '251'
    fluent_name = 'compressible-flow'
    _python_name = 'compressible_flow'
    child_names = ['enhanced_numerics', 'alternate_bc_formulation', 'analytical_thermodynamic_derivatives']
    _child_classes = dict(
        enhanced_numerics=enhanced_numerics,
        alternate_bc_formulation=alternate_bc_formulation,
        analytical_thermodynamic_derivatives=analytical_thermodynamic_derivatives,
    )

class thin_film(Boolean):
    """
    Multiphase boiling thin film effects.
    """
    _version = '251'
    fluent_name = 'thin-film?'
    _python_name = 'thin_film'

class liquid_vof_factor(Boolean):
    """
    Multiphase boiling liquid volume fraction effects.
    """
    _version = '251'
    fluent_name = 'liquid-vof-factor?'
    _python_name = 'liquid_vof_factor'

class boiling_parameters(Group):
    """
    Multiphase boiling parameters object.
    """
    _version = '251'
    fluent_name = 'boiling-parameters'
    _python_name = 'boiling_parameters'
    child_names = ['thin_film', 'liquid_vof_factor']
    _child_classes = dict(
        thin_film=thin_film,
        liquid_vof_factor=liquid_vof_factor,
    )

class viscosity_averaging(Boolean):
    """
    Enable/disable use of harmonic averaging for viscosity.
    """
    _version = '251'
    fluent_name = 'viscosity-averaging?'
    _python_name = 'viscosity_averaging'

class turb_visc_based_damping(Boolean):
    """
    Enable/disable turbulence damping based on turbulent viscosity.
    """
    _version = '251'
    fluent_name = 'turb-visc-based-damping?'
    _python_name = 'turb_visc_based_damping'

class density_func_expo(Real):
    """
    Density function exponent.
    """
    _version = '251'
    fluent_name = 'density-func-expo'
    _python_name = 'density_func_expo'

class density_ratio_cutoff(Real):
    """
    Density ratio cut-off.
    """
    _version = '251'
    fluent_name = 'density-ratio-cutoff'
    _python_name = 'density_ratio_cutoff'

class n_smooth_for_interfacial_regims(Integer):
    """
    Number of smoothings for interfacial regime.
    """
    _version = '251'
    fluent_name = 'n-smooth-for-interfacial-regims'
    _python_name = 'n_smooth_for_interfacial_regims'

class sm_relax_factor(Real):
    """
    Smoothing relaxation factor.
    """
    _version = '251'
    fluent_name = 'sm-relax-factor'
    _python_name = 'sm_relax_factor'

class viscous_func_options(Integer):
    """
    Viscous function option.
    """
    _version = '251'
    fluent_name = 'viscous-func-options'
    _python_name = 'viscous_func_options'

class density_func_options(Integer):
    """
    Density function option.
    """
    _version = '251'
    fluent_name = 'density-func-options'
    _python_name = 'density_func_options'

class exponent_smoothing_func(Real):
    """
    Exponent of smoothing function.
    """
    _version = '251'
    fluent_name = 'exponent-smoothing-func'
    _python_name = 'exponent_smoothing_func'

class exponent_density_func(Real):
    """
    Exponent of density function.
    """
    _version = '251'
    fluent_name = 'exponent-density-func'
    _python_name = 'exponent_density_func'

class boundry_treatment(Boolean):
    """
    Enable/disable boundary treatment.
    """
    _version = '251'
    fluent_name = 'boundry-treatment?'
    _python_name = 'boundry_treatment'

class near_wall_treatment_1(Boolean):
    """
    Enable/disable near wall treatment?.
    """
    _version = '251'
    fluent_name = 'near-wall-treatment?'
    _python_name = 'near_wall_treatment'

class interfacial_artificial_viscosity(Group):
    """
    Interfacial artifical viscosity controls.
    """
    _version = '251'
    fluent_name = 'interfacial-artificial-viscosity'
    _python_name = 'interfacial_artificial_viscosity'
    child_names = ['n_smooth_for_interfacial_regims', 'sm_relax_factor', 'viscous_func_options', 'density_func_options', 'exponent_smoothing_func', 'exponent_density_func', 'boundry_treatment', 'near_wall_treatment']
    _child_classes = dict(
        n_smooth_for_interfacial_regims=n_smooth_for_interfacial_regims,
        sm_relax_factor=sm_relax_factor,
        viscous_func_options=viscous_func_options,
        density_func_options=density_func_options,
        exponent_smoothing_func=exponent_smoothing_func,
        exponent_density_func=exponent_density_func,
        boundry_treatment=boundry_treatment,
        near_wall_treatment=near_wall_treatment_1,
    )

class viscous_flow(Group):
    """
    Multiphase viscous flow numerics options object.
    """
    _version = '251'
    fluent_name = 'viscous-flow'
    _python_name = 'viscous_flow'
    child_names = ['viscosity_averaging', 'turb_visc_based_damping', 'density_func_expo', 'density_ratio_cutoff', 'interfacial_artificial_viscosity']
    _child_classes = dict(
        viscosity_averaging=viscosity_averaging,
        turb_visc_based_damping=turb_visc_based_damping,
        density_func_expo=density_func_expo,
        density_ratio_cutoff=density_ratio_cutoff,
        interfacial_artificial_viscosity=interfacial_artificial_viscosity,
    )

class schnerr_evap_coeff(Real):
    """
    Evaporation coefficient for Schnerr-Sauer model.
    """
    _version = '251'
    fluent_name = 'schnerr-evap-coeff'
    _python_name = 'schnerr_evap_coeff'

class schnerr_cond_coeff(Real):
    """
    Condensation coefficient for Schnerr-Sauer model.
    """
    _version = '251'
    fluent_name = 'schnerr-cond-coeff'
    _python_name = 'schnerr_cond_coeff'

class max_vapor_pressure_ratio(Real):
    """
    Maximum limit on vapor pressure after turbulence and thermal correction.
    """
    _version = '251'
    fluent_name = 'max-vapor-pressure-ratio'
    _python_name = 'max_vapor_pressure_ratio'

class min_vapor_pressure(Real):
    """
    Minimum vapor pressure limit for cavitation model.
    """
    _version = '251'
    fluent_name = 'min-vapor-pressure'
    _python_name = 'min_vapor_pressure'

class display_clipped_pressure(Boolean):
    """
    Clipped pressure is just used for the properties evaluation. Mass Transfer Rate uses unclipped pressure.
    """
    _version = '251'
    fluent_name = 'display-clipped-pressure?'
    _python_name = 'display_clipped_pressure'

class p_limit_method(String, AllowedValuesMixin):
    """
    It provides the pressure limit during properties calculation when pressure goes below the vapor pressure.
    """
    _version = '251'
    fluent_name = 'p-limit-method'
    _python_name = 'p_limit_method'

class turbulent_diffusion(Boolean):
    """
    New turbulent diffusion treatment is applicable to N-phase flow when one of the phases 
    participating in cavitation is selected as a primary phase.
    """
    _version = '251'
    fluent_name = 'turbulent-diffusion?'
    _python_name = 'turbulent_diffusion'

class old_treatment_for_turbulent_diffusion(Boolean):
    """
    Old turbulent diffusion treatment is applicable to two phase flow when vapor is selected as a secondary phase.
    """
    _version = '251'
    fluent_name = 'old-treatment-for-turbulent-diffusion?'
    _python_name = 'old_treatment_for_turbulent_diffusion'

class cavitation(Group):
    """
    Enable/disable turbulent diffusion treatment between phases participating in cavitation.
    This treatment is generally recommended for better solution stability.
    However, in case of numerical difficulties, it can be disabled.
    """
    _version = '251'
    fluent_name = 'cavitation'
    _python_name = 'cavitation'
    child_names = ['schnerr_evap_coeff', 'schnerr_cond_coeff', 'max_vapor_pressure_ratio', 'min_vapor_pressure', 'display_clipped_pressure', 'p_limit_method', 'turbulent_diffusion', 'old_treatment_for_turbulent_diffusion']
    _child_classes = dict(
        schnerr_evap_coeff=schnerr_evap_coeff,
        schnerr_cond_coeff=schnerr_cond_coeff,
        max_vapor_pressure_ratio=max_vapor_pressure_ratio,
        min_vapor_pressure=min_vapor_pressure,
        display_clipped_pressure=display_clipped_pressure,
        p_limit_method=p_limit_method,
        turbulent_diffusion=turbulent_diffusion,
        old_treatment_for_turbulent_diffusion=old_treatment_for_turbulent_diffusion,
    )

class vof_from_min_limit(Real):
    """
    Minimum volume fraction below which mass transfer rate is set to zero.
    """
    _version = '251'
    fluent_name = 'vof-from-min-limit'
    _python_name = 'vof_from_min_limit'

class vof_from_max_limit(Real):
    """
    Maximum volume fraction above which mass transfer rate is set to zero.
    """
    _version = '251'
    fluent_name = 'vof-from-max-limit'
    _python_name = 'vof_from_max_limit'

class vof_to_min_limit(Real):
    """
    Minimum volume fraction below which mass transfer rate is set to zero.
    """
    _version = '251'
    fluent_name = 'vof-to-min-limit'
    _python_name = 'vof_to_min_limit'

class vof_to_max_limit(Real):
    """
    Maximum volume fraction above which mass transfer rate is set to zero.
    """
    _version = '251'
    fluent_name = 'vof-to-max-limit'
    _python_name = 'vof_to_max_limit'

class ia_norm_min_limit(Real):
    """
    Minimum normalized area density below which mass transfer rate is set to zero.
    """
    _version = '251'
    fluent_name = 'ia-norm-min-limit'
    _python_name = 'ia_norm_min_limit'

class max_rel_humidity(Real):
    """
    Maximum value of relative humidity to limit condensation rate.
    """
    _version = '251'
    fluent_name = 'max-rel-humidity'
    _python_name = 'max_rel_humidity'

class evaporation_condensation(Group):
    """
    Evaporation-condensation advanced options object.
    """
    _version = '251'
    fluent_name = 'evaporation-condensation'
    _python_name = 'evaporation_condensation'
    child_names = ['vof_from_min_limit', 'vof_from_max_limit', 'vof_to_min_limit', 'vof_to_max_limit', 'ia_norm_min_limit', 'max_rel_humidity']
    _child_classes = dict(
        vof_from_min_limit=vof_from_min_limit,
        vof_from_max_limit=vof_from_max_limit,
        vof_to_min_limit=vof_to_min_limit,
        vof_to_max_limit=vof_to_max_limit,
        ia_norm_min_limit=ia_norm_min_limit,
        max_rel_humidity=max_rel_humidity,
    )

class heat_flux_relaxation_factor(Real):
    """
    Under-relaxation factor for boiling heat flux.
    """
    _version = '251'
    fluent_name = 'heat-flux-relaxation-factor'
    _python_name = 'heat_flux_relaxation_factor'

class show_expert_options(Boolean):
    """
    Exposes expert options of min/max superheat along with wetting fraction controls.
    """
    _version = '251'
    fluent_name = 'show-expert-options?'
    _python_name = 'show_expert_options'

class two_resistance_boiling_framework(Boolean):
    """
    Allow generalized two-resistance framework for boiling model.
    """
    _version = '251'
    fluent_name = 'two-resistance-boiling-framework?'
    _python_name = 'two_resistance_boiling_framework'

class boiling(Group):
    """
    Boiling advanced options object.
    """
    _version = '251'
    fluent_name = 'boiling'
    _python_name = 'boiling'
    child_names = ['heat_flux_relaxation_factor', 'show_expert_options', 'two_resistance_boiling_framework']
    _child_classes = dict(
        heat_flux_relaxation_factor=heat_flux_relaxation_factor,
        show_expert_options=show_expert_options,
        two_resistance_boiling_framework=two_resistance_boiling_framework,
    )

class vof_min_seeding(Real):
    """
    Minimum vof seeding for non-zero area density in heat and mass transfer.
    """
    _version = '251'
    fluent_name = 'vof-min-seeding'
    _python_name = 'vof_min_seeding'

class ia_grad_sym(Boolean):
    """
    Interfacial area density gradient-symmetric mechanism.
    """
    _version = '251'
    fluent_name = 'ia-grad-sym?'
    _python_name = 'ia_grad_sym'

class area_density_1(Group):
    """
    Interfacial area density object.
    """
    _version = '251'
    fluent_name = 'area-density'
    _python_name = 'area_density'
    child_names = ['vof_min_seeding', 'ia_grad_sym']
    _child_classes = dict(
        vof_min_seeding=vof_min_seeding,
        ia_grad_sym=ia_grad_sym,
    )

class alternative_energy_treatment(Boolean):
    """
    Alternative treatment of latent heat source due to mass transfer.
    """
    _version = '251'
    fluent_name = 'alternative-energy-treatment?'
    _python_name = 'alternative_energy_treatment'

class heat_mass_transfer(Group):
    """
    Multiphase interphase heat and mass transfer numerics options object.
    """
    _version = '251'
    fluent_name = 'heat-mass-transfer'
    _python_name = 'heat_mass_transfer'
    child_names = ['cavitation', 'evaporation_condensation', 'boiling', 'area_density', 'alternative_energy_treatment']
    _child_classes = dict(
        cavitation=cavitation,
        evaporation_condensation=evaporation_condensation,
        boiling=boiling,
        area_density=area_density_1,
        alternative_energy_treatment=alternative_energy_treatment,
    )

class turb_disp_trans_lower_vof(Real):
    """
    The lower volume fraction limit for the transition function.
    """
    _version = '251'
    fluent_name = 'turb-disp-trans-lower-vof'
    _python_name = 'turb_disp_trans_lower_vof'

class turb_disp_trans_upper_vof(Real):
    """
    The upper volume fraction limit for the transition function.
    """
    _version = '251'
    fluent_name = 'turb-disp-trans-upper-vof'
    _python_name = 'turb_disp_trans_upper_vof'

class turbulent_dispersion_trans_vof(Group):
    """
    The turbulent dispersion vof transient options object.
    """
    _version = '251'
    fluent_name = 'turbulent-dispersion-trans-vof'
    _python_name = 'turbulent_dispersion_trans_vof'
    child_names = ['turb_disp_trans_lower_vof', 'turb_disp_trans_upper_vof']
    _child_classes = dict(
        turb_disp_trans_lower_vof=turb_disp_trans_lower_vof,
        turb_disp_trans_upper_vof=turb_disp_trans_upper_vof,
    )

class turb_disp_limit_lower_vof(Real):
    """
    The lower volume fraction limit for the limiting function.
    """
    _version = '251'
    fluent_name = 'turb-disp-limit-lower-vof'
    _python_name = 'turb_disp_limit_lower_vof'

class turb_disp_limit_upper_vof(Real):
    """
    The upper volume fraction limit for the limiting function.
    """
    _version = '251'
    fluent_name = 'turb-disp-limit-upper-vof'
    _python_name = 'turb_disp_limit_upper_vof'

class turbulent_dispersion_limit_vof_child(Group):
    """
    'child_object_type' of turbulent_dispersion_limit_vof.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'turbulent_dispersion_limit_vof_child'
    child_names = ['turb_disp_limit_lower_vof', 'turb_disp_limit_upper_vof']
    _child_classes = dict(
        turb_disp_limit_lower_vof=turb_disp_limit_lower_vof,
        turb_disp_limit_upper_vof=turb_disp_limit_upper_vof,
    )

class turbulent_dispersion_limit_vof(NamedObject[turbulent_dispersion_limit_vof_child], CreatableNamedObjectMixin[turbulent_dispersion_limit_vof_child]):
    """
    The volume fraction limits for the turbulent dispersion limiting function.
    """
    _version = '251'
    fluent_name = 'turbulent-dispersion-limit-vof'
    _python_name = 'turbulent_dispersion_limit_vof'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = turbulent_dispersion_limit_vof_child

class turbulent_dispersion_1(Group):
    """
    Limiting and transition function controls for turbulent dispersion.
    """
    _version = '251'
    fluent_name = 'turbulent-dispersion'
    _python_name = 'turbulent_dispersion'
    child_names = ['turbulent_dispersion_trans_vof', 'turbulent_dispersion_limit_vof']
    _child_classes = dict(
        turbulent_dispersion_trans_vof=turbulent_dispersion_trans_vof,
        turbulent_dispersion_limit_vof=turbulent_dispersion_limit_vof,
    )

class t_h_legacy(Boolean):
    """
    Switching between the legacy and updated implementation of the Troshko-Hassan model.
    """
    _version = '251'
    fluent_name = 't-h-legacy'
    _python_name = 't_h_legacy'

class t_h_vof_correction(Boolean):
    """
    Applying the volume fraction correction to the Troshko-Hassan model in cases with the dispersed-phase turbulence model.
    """
    _version = '251'
    fluent_name = 't-h-vof-correction'
    _python_name = 't_h_vof_correction'

class t_h_freq_correction(Boolean):
    """
    Applying the frequency correction to the Troshko-Hassan model in cases with the non-critical heat flux boiling model.
    """
    _version = '251'
    fluent_name = 't-h-freq-correction'
    _python_name = 't_h_freq_correction'

class turbulent_interaction_troshko_hassan(Group):
    """
    The object.
    """
    _version = '251'
    fluent_name = 'turbulent-interaction-troshko-hassan'
    _python_name = 'turbulent_interaction_troshko_hassan'
    child_names = ['t_h_legacy', 't_h_vof_correction', 't_h_freq_correction']
    _child_classes = dict(
        t_h_legacy=t_h_legacy,
        t_h_vof_correction=t_h_vof_correction,
        t_h_freq_correction=t_h_freq_correction,
    )

class turbulence_interaction(Group):
    """
    The object.
    """
    _version = '251'
    fluent_name = 'turbulence-interaction'
    _python_name = 'turbulence_interaction'
    child_names = ['turbulent_interaction_troshko_hassan']
    _child_classes = dict(
        turbulent_interaction_troshko_hassan=turbulent_interaction_troshko_hassan,
    )

class interphase_interactions(Group):
    """
    The interphase interaction options object.
    """
    _version = '251'
    fluent_name = 'interphase-interactions'
    _python_name = 'interphase_interactions'
    child_names = ['turbulent_dispersion', 'turbulence_interaction']
    _child_classes = dict(
        turbulent_dispersion=turbulent_dispersion_1,
        turbulence_interaction=turbulence_interaction,
    )

class smoothed_density_stabilization_method(Boolean):
    """
    Enable/disable smoothed density for momentum stabilization.
    """
    _version = '251'
    fluent_name = 'smoothed-density-stabilization-method?'
    _python_name = 'smoothed_density_stabilization_method'

class num_of_density_smoothing(Integer):
    """
    Number of density smoothings.
    """
    _version = '251'
    fluent_name = 'num-of-density-smoothing'
    _python_name = 'num_of_density_smoothing'

class false_time_step_linearization(Boolean):
    """
    False time-step linearization for added stability.
    """
    _version = '251'
    fluent_name = 'false-time-step-linearization?'
    _python_name = 'false_time_step_linearization'

class enable_20(Boolean):
    """
    Enable advanced automatic time stepping for better stability.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class dt_init_limit(Real):
    """
    Maximum value for pseudo time step size during first iteration.
    """
    _version = '251'
    fluent_name = 'dt-init-limit'
    _python_name = 'dt_init_limit'

class dt_max_1(Real):
    """
    Maximum pseudo time step size.
    """
    _version = '251'
    fluent_name = 'dt-max'
    _python_name = 'dt_max'

class dt_factor_min(Real):
    """
    Minimum limit for reduction in pseudo time step size.
    """
    _version = '251'
    fluent_name = 'dt-factor-min'
    _python_name = 'dt_factor_min'

class dt_factor_max(Real):
    """
    Maximum limit for increase in pseudo time step size.
    """
    _version = '251'
    fluent_name = 'dt-factor-max'
    _python_name = 'dt_factor_max'

class max_velocity_ratio(Real):
    """
    Velocity ratio to freeze the time step size for better solution stability.
    """
    _version = '251'
    fluent_name = 'max-velocity-ratio'
    _python_name = 'max_velocity_ratio'

class auto_dt_advanced_controls(Group):
    """
    Automatic time-stepping controls for better solution stability.
    """
    _version = '251'
    fluent_name = 'auto-dt-advanced-controls'
    _python_name = 'auto_dt_advanced_controls'
    child_names = ['enable', 'dt_init_limit', 'dt_max', 'dt_factor_min', 'dt_factor_max', 'max_velocity_ratio']
    _child_classes = dict(
        enable=enable_20,
        dt_init_limit=dt_init_limit,
        dt_max=dt_max_1,
        dt_factor_min=dt_factor_min,
        dt_factor_max=dt_factor_max,
        max_velocity_ratio=max_velocity_ratio,
    )

class pseudo_transient(Group):
    """
    Pseudo-Time stability controls for multiphase flow.
    """
    _version = '251'
    fluent_name = 'pseudo-transient'
    _python_name = 'pseudo_transient'
    child_names = ['smoothed_density_stabilization_method', 'num_of_density_smoothing', 'false_time_step_linearization', 'auto_dt_advanced_controls']
    _child_classes = dict(
        smoothed_density_stabilization_method=smoothed_density_stabilization_method,
        num_of_density_smoothing=num_of_density_smoothing,
        false_time_step_linearization=false_time_step_linearization,
        auto_dt_advanced_controls=auto_dt_advanced_controls,
    )

class buoyancy_force_linearization(Boolean):
    """
    Enable/disable linearized buoyancy force.
    """
    _version = '251'
    fluent_name = 'buoyancy-force-linearization?'
    _python_name = 'buoyancy_force_linearization'

class blended_treatment_for_buoyancy_forces(Boolean):
    """
    Enable/disable use of  blended treatment for buoyancy force.
    """
    _version = '251'
    fluent_name = 'blended-treatment-for-buoyancy-forces?'
    _python_name = 'blended_treatment_for_buoyancy_forces'

class coupled_vof(Group):
    """
    Coupled VOF stability controls.
    """
    _version = '251'
    fluent_name = 'coupled-vof'
    _python_name = 'coupled_vof'
    child_names = ['buoyancy_force_linearization', 'blended_treatment_for_buoyancy_forces']
    _child_classes = dict(
        buoyancy_force_linearization=buoyancy_force_linearization,
        blended_treatment_for_buoyancy_forces=blended_treatment_for_buoyancy_forces,
    )

class low_order_rhie_chow(Boolean):
    """
    Use low order velocity interpolation in flux calculation.
    """
    _version = '251'
    fluent_name = 'low-order-rhie-chow?'
    _python_name = 'low_order_rhie_chow'

class rhie_chow_flux(Group):
    """
    'rhie_chow_flux' child.
    """
    _version = '251'
    fluent_name = 'rhie-chow-flux'
    _python_name = 'rhie_chow_flux'
    child_names = ['low_order_rhie_chow']
    _child_classes = dict(
        low_order_rhie_chow=low_order_rhie_chow,
    )

class limit_pressure_correction_gradient(Boolean):
    """
    Use limited pressure correction gradient in skewness corrections for better stability.
    """
    _version = '251'
    fluent_name = 'limit-pressure-correction-gradient?'
    _python_name = 'limit_pressure_correction_gradient'

class skewness_correction(Group):
    """
    Skewness correction related stabiity controls for multiphase flow.
    """
    _version = '251'
    fluent_name = 'skewness-correction'
    _python_name = 'skewness_correction'
    child_names = ['limit_pressure_correction_gradient']
    _child_classes = dict(
        limit_pressure_correction_gradient=limit_pressure_correction_gradient,
    )

class p_v_coupling_1(Group):
    """
    Pressure velocity coupling controls for multiphase flow.
    """
    _version = '251'
    fluent_name = 'p-v-coupling'
    _python_name = 'p_v_coupling'
    child_names = ['coupled_vof', 'rhie_chow_flux', 'skewness_correction']
    _child_classes = dict(
        coupled_vof=coupled_vof,
        rhie_chow_flux=rhie_chow_flux,
        skewness_correction=skewness_correction,
    )

class outer_iterations(Integer):
    """
    Number of outer iterations in hybrid nita.
    """
    _version = '251'
    fluent_name = 'outer-iterations'
    _python_name = 'outer_iterations'

class initial_time_steps(Integer):
    """
    Number of initial time-steps.
    """
    _version = '251'
    fluent_name = 'initial-time-steps'
    _python_name = 'initial_time_steps'

class initial_outer_iter(Integer):
    """
    Number of initial outer iterations.
    """
    _version = '251'
    fluent_name = 'initial-outer-iter'
    _python_name = 'initial_outer_iter'

class initial_outer_iterations(Group):
    """
    Hybrid NITA start-up controls.
    """
    _version = '251'
    fluent_name = 'initial-outer-iterations'
    _python_name = 'initial_outer_iterations'
    child_names = ['initial_time_steps', 'initial_outer_iter']
    _child_classes = dict(
        initial_time_steps=initial_time_steps,
        initial_outer_iter=initial_outer_iter,
    )

class enable_instability_detector(Boolean):
    """
    Enable instability detector for better stability.
    """
    _version = '251'
    fluent_name = 'enable-instability-detector?'
    _python_name = 'enable_instability_detector'

class set_cfl_limit(Real):
    """
    Courant Number limit for detection of unstable event.
    """
    _version = '251'
    fluent_name = 'set-cfl-limit'
    _python_name = 'set_cfl_limit'

class set_cfl_type(String, AllowedValuesMixin):
    """
    Courant Number type for detection of unstable event.
    """
    _version = '251'
    fluent_name = 'set-cfl-type'
    _python_name = 'set_cfl_type'

class set_velocity_limit(Real):
    """
    Velocity limit for detection of unstable event.
    """
    _version = '251'
    fluent_name = 'set-velocity-limit'
    _python_name = 'set_velocity_limit'

class unstable_event_outer_iterations(Integer):
    """
    Number of outer iterations for unstable event.
    """
    _version = '251'
    fluent_name = 'unstable-event-outer-iterations'
    _python_name = 'unstable_event_outer_iterations'

class instability_detector(Group):
    """
    Hybrid NITA instability detector controls.
    """
    _version = '251'
    fluent_name = 'instability-detector'
    _python_name = 'instability_detector'
    child_names = ['enable_instability_detector', 'set_cfl_limit', 'set_cfl_type', 'set_velocity_limit', 'unstable_event_outer_iterations']
    _child_classes = dict(
        enable_instability_detector=enable_instability_detector,
        set_cfl_limit=set_cfl_limit,
        set_cfl_type=set_cfl_type,
        set_velocity_limit=set_velocity_limit,
        unstable_event_outer_iterations=unstable_event_outer_iterations,
    )

class hybrid_nita(Group):
    """
    Hybrid NITA stability controls for multiphase flow.
    """
    _version = '251'
    fluent_name = 'hybrid-nita'
    _python_name = 'hybrid_nita'
    child_names = ['outer_iterations', 'initial_outer_iterations', 'instability_detector']
    _child_classes = dict(
        outer_iterations=outer_iterations,
        initial_outer_iterations=initial_outer_iterations,
        instability_detector=instability_detector,
    )

class solve_flow_last(Boolean):
    """
    Solve flow equation at the end of iteration as an alternative.
    """
    _version = '251'
    fluent_name = 'solve-flow-last?'
    _python_name = 'solve_flow_last'

class solve_exp_vof_at_end(Boolean):
    """
    Solve Explicit VOF at the end of time-step as an alternative.
    """
    _version = '251'
    fluent_name = 'solve-exp-vof-at-end?'
    _python_name = 'solve_exp_vof_at_end'

class equation_order(Group):
    """
    Equation Order Menu for Homogeneous Multiphase Flow Models.
    """
    _version = '251'
    fluent_name = 'equation-order'
    _python_name = 'equation_order'
    child_names = ['solve_flow_last', 'solve_exp_vof_at_end']
    _child_classes = dict(
        solve_flow_last=solve_flow_last,
        solve_exp_vof_at_end=solve_exp_vof_at_end,
    )

class enable_dynamic_strength(Boolean):
    """
    Enable dynamic strength to reduce compression in the tangential direction to the interface.
    """
    _version = '251'
    fluent_name = 'enable-dynamic-strength?'
    _python_name = 'enable_dynamic_strength'

class set_dynamic_strength_exponent(Real):
    """
    Cosine exponent in dynamic strength treatment.
    """
    _version = '251'
    fluent_name = 'set-dynamic-strength-exponent'
    _python_name = 'set_dynamic_strength_exponent'

class set_maximum_dynamic_strength(Real):
    """
    Maximum value of dynamic anti-diffusion strength.
    """
    _version = '251'
    fluent_name = 'set-maximum-dynamic-strength'
    _python_name = 'set_maximum_dynamic_strength'

class anti_diffusion_1(Group):
    """
    Anti Diffusion Menu for VOF/Multi-Fluid VOF Models.
    """
    _version = '251'
    fluent_name = 'anti-diffusion'
    _python_name = 'anti_diffusion'
    child_names = ['enable_dynamic_strength', 'set_dynamic_strength_exponent', 'set_maximum_dynamic_strength']
    _child_classes = dict(
        enable_dynamic_strength=enable_dynamic_strength,
        set_dynamic_strength_exponent=set_dynamic_strength_exponent,
        set_maximum_dynamic_strength=set_maximum_dynamic_strength,
    )

class advanced_stability_controls(Group):
    """
    Stability controls for multiphase flow.
    """
    _version = '251'
    fluent_name = 'advanced-stability-controls'
    _python_name = 'advanced_stability_controls'
    child_names = ['pseudo_transient', 'p_v_coupling', 'hybrid_nita', 'equation_order', 'anti_diffusion']
    _child_classes = dict(
        pseudo_transient=pseudo_transient,
        p_v_coupling=p_v_coupling_1,
        hybrid_nita=hybrid_nita,
        equation_order=equation_order,
        anti_diffusion=anti_diffusion_1,
    )

class recommended_defaults_for_existing_cases(Boolean):
    """
    Activate multiphase defaults for loaded case.
    """
    _version = '251'
    fluent_name = 'recommended-defaults-for-existing-cases'
    _python_name = 'recommended_defaults_for_existing_cases'

class old_default_of_operating_density_method(Boolean):
    """
    Revert to the old default of operating density method.
    """
    _version = '251'
    fluent_name = 'old-default-of-operating-density-method'
    _python_name = 'old_default_of_operating_density_method'

class old_default_of_volume_fraction_smoothing(Boolean):
    """
    Revert to the old default of volume fraction smoothings for surface tension.
    """
    _version = '251'
    fluent_name = 'old-default-of-volume-fraction-smoothing'
    _python_name = 'old_default_of_volume_fraction_smoothing'

class old_variant_of_pesto_for_cases_using_structured_mesh(Boolean):
    """
    Revert to the old variant of PRESTO for cases using structured mesh.
    """
    _version = '251'
    fluent_name = 'old-variant-of-pesto-for-cases-using-structured-mesh'
    _python_name = 'old_variant_of_pesto_for_cases_using_structured_mesh'

class revert_to_pre_r20_1_default_settings(Group):
    """
    Revert to pre-R20.1 multiphase flow default settings.
    """
    _version = '251'
    fluent_name = 'revert-to-pre-r20-1-default-settings?'
    _python_name = 'revert_to_pre_r20_1_default_settings'
    child_names = ['old_default_of_operating_density_method', 'old_default_of_volume_fraction_smoothing', 'old_variant_of_pesto_for_cases_using_structured_mesh']
    _child_classes = dict(
        old_default_of_operating_density_method=old_default_of_operating_density_method,
        old_default_of_volume_fraction_smoothing=old_default_of_volume_fraction_smoothing,
        old_variant_of_pesto_for_cases_using_structured_mesh=old_variant_of_pesto_for_cases_using_structured_mesh,
    )

class default_controls(Group):
    """
    Multiphase default controls object.
    """
    _version = '251'
    fluent_name = 'default-controls'
    _python_name = 'default_controls'
    child_names = ['recommended_defaults_for_existing_cases', 'revert_to_pre_r20_1_default_settings']
    _child_classes = dict(
        recommended_defaults_for_existing_cases=recommended_defaults_for_existing_cases,
        revert_to_pre_r20_1_default_settings=revert_to_pre_r20_1_default_settings,
    )

class pressure_corr_grad(Boolean):
    """
    Enable/disable pressure correction gradient limiting in corrector step.
    """
    _version = '251'
    fluent_name = 'pressure-corr-grad?'
    _python_name = 'pressure_corr_grad'

class face_pressure_calculation_method(String):
    """
    Face pressure calculation method for corrector step .
    """
    _version = '251'
    fluent_name = 'face-pressure-calculation-method'
    _python_name = 'face_pressure_calculation_method'

class exclude_transient_term_in_face_pressure_calc(Boolean):
    """
    Enable/disale transient terms in face pressure calculation.
    """
    _version = '251'
    fluent_name = 'exclude-transient-term-in-face-pressure-calc'
    _python_name = 'exclude_transient_term_in_face_pressure_calc'

class face_pressure_options(Group):
    """
    Face pressure options.
    """
    _version = '251'
    fluent_name = 'face-pressure-options'
    _python_name = 'face_pressure_options'
    child_names = ['pressure_corr_grad', 'face_pressure_calculation_method', 'exclude_transient_term_in_face_pressure_calc']
    _child_classes = dict(
        pressure_corr_grad=pressure_corr_grad,
        face_pressure_calculation_method=face_pressure_calculation_method,
        exclude_transient_term_in_face_pressure_calc=exclude_transient_term_in_face_pressure_calc,
    )

class face_pressure_controls(Group):
    """
    The face pressure expert controls object.
    """
    _version = '251'
    fluent_name = 'face-pressure-controls'
    _python_name = 'face_pressure_controls'
    child_names = ['face_pressure_options']
    _child_classes = dict(
        face_pressure_options=face_pressure_options,
    )

class execute_settings_optimization(Boolean):
    """
    Execute optimized settings for VOF.
    """
    _version = '251'
    fluent_name = 'execute-settings-optimization?'
    _python_name = 'execute_settings_optimization'

class execute_advanced_stabilization(Boolean):
    """
    Execute advanced stabilization for VOF.
    """
    _version = '251'
    fluent_name = 'execute-advanced-stabilization?'
    _python_name = 'execute_advanced_stabilization'

class execute_additional_stability_controls(String, AllowedValuesMixin):
    """
    Execute additional stability controls for VOF.
    """
    _version = '251'
    fluent_name = 'execute-additional-stability-controls?'
    _python_name = 'execute_additional_stability_controls'

class blended_compressive_scheme(Boolean):
    """
    Blended Compressive discretization scheme for VOF.
    """
    _version = '251'
    fluent_name = 'blended-compressive-scheme?'
    _python_name = 'blended_compressive_scheme'

class pseudo_time_stabilization(Boolean):
    """
    Pseudo-Time Momentum stabilization and False Time Step Linearization methods for VOF.
    """
    _version = '251'
    fluent_name = 'pseudo-time-stabilization?'
    _python_name = 'pseudo_time_stabilization'

class additional_stabilization_controls(Group):
    """
    Additional advanced stability controls for VOF.
    """
    _version = '251'
    fluent_name = 'additional-stabilization-controls'
    _python_name = 'additional_stabilization_controls'
    child_names = ['blended_compressive_scheme', 'pseudo_time_stabilization']
    _child_classes = dict(
        blended_compressive_scheme=blended_compressive_scheme,
        pseudo_time_stabilization=pseudo_time_stabilization,
    )
    _child_aliases = dict(
        pseudo_transient_stabilization=('pseudo_time_stabilization', 'pseudo-transient-stabilization?'),
    )

class enable_velocity_limiting(Boolean):
    """
    Enable velocity limiting treatment.
    """
    _version = '251'
    fluent_name = 'enable-velocity-limiting?'
    _python_name = 'enable_velocity_limiting'

class max_vel_mag(Real):
    """
    Maximum velocity magnitude.
    """
    _version = '251'
    fluent_name = 'max-vel-mag'
    _python_name = 'max_vel_mag'

class vol_frac_cutoff(Real):
    """
    Volume fraction cut-off.
    """
    _version = '251'
    fluent_name = 'vol-frac-cutoff'
    _python_name = 'vol_frac_cutoff'

class set_velocity_and_vof_cutoffs_child(Group):
    """
    'child_object_type' of set_velocity_and_vof_cutoffs.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'set_velocity_and_vof_cutoffs_child'
    child_names = ['max_vel_mag', 'vol_frac_cutoff']
    _child_classes = dict(
        max_vel_mag=max_vel_mag,
        vol_frac_cutoff=vol_frac_cutoff,
    )

class set_velocity_and_vof_cutoffs(NamedObject[set_velocity_and_vof_cutoffs_child], CreatableNamedObjectMixin[set_velocity_and_vof_cutoffs_child]):
    """
    Velocity and vof cutoff.
    """
    _version = '251'
    fluent_name = 'set-velocity-and-vof-cutoffs'
    _python_name = 'set_velocity_and_vof_cutoffs'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = set_velocity_and_vof_cutoffs_child

class set_damping_strengths_child(Real):
    """
    'child_object_type' of set_damping_strengths.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'set_damping_strengths_child'

class set_damping_strengths(NamedObject[set_damping_strengths_child], CreatableNamedObjectMixin[set_damping_strengths_child]):
    """
    Damping strength.
    """
    _version = '251'
    fluent_name = 'set-damping-strengths'
    _python_name = 'set_damping_strengths'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = set_damping_strengths_child

class set_velocity_cutoff(Real):
    """
    Max velocity magnitude.
    """
    _version = '251'
    fluent_name = 'set-velocity-cutoff'
    _python_name = 'set_velocity_cutoff'

class set_damping_strength(Real):
    """
    Damping Strength.
    """
    _version = '251'
    fluent_name = 'set-damping-strength'
    _python_name = 'set_damping_strength'

class verbosity_12(Boolean):
    """
    Enable verbosity to print number of velocity limited cells during iterations.
    """
    _version = '251'
    fluent_name = 'verbosity?'
    _python_name = 'verbosity'

class velocity_limiting_treatment(Group):
    """
    Velocity limiting related stabiity controls for VOF.
    """
    _version = '251'
    fluent_name = 'velocity-limiting-treatment'
    _python_name = 'velocity_limiting_treatment'
    child_names = ['enable_velocity_limiting', 'set_velocity_and_vof_cutoffs', 'set_damping_strengths', 'set_velocity_cutoff', 'set_damping_strength', 'verbosity']
    _child_classes = dict(
        enable_velocity_limiting=enable_velocity_limiting,
        set_velocity_and_vof_cutoffs=set_velocity_and_vof_cutoffs,
        set_damping_strengths=set_damping_strengths,
        set_velocity_cutoff=set_velocity_cutoff,
        set_damping_strength=set_damping_strength,
        verbosity=verbosity_12,
    )

class solution_stabilization(Group):
    """
    VOF solution stabilization object.
    """
    _version = '251'
    fluent_name = 'solution-stabilization'
    _python_name = 'solution_stabilization'
    child_names = ['execute_settings_optimization', 'execute_advanced_stabilization', 'execute_additional_stability_controls', 'additional_stabilization_controls', 'velocity_limiting_treatment']
    _child_classes = dict(
        execute_settings_optimization=execute_settings_optimization,
        execute_advanced_stabilization=execute_advanced_stabilization,
        execute_additional_stability_controls=execute_additional_stability_controls,
        additional_stabilization_controls=additional_stabilization_controls,
        velocity_limiting_treatment=velocity_limiting_treatment,
    )

class phasic_wall_heat_flux_form(Boolean):
    """
    Report using phasic or mixture wall heat flux formulation.
    """
    _version = '251'
    fluent_name = 'phasic-wall-heat-flux-form?'
    _python_name = 'phasic_wall_heat_flux_form'

class energy_1(Group):
    """
    Multiphase energy options object.
    """
    _version = '251'
    fluent_name = 'energy'
    _python_name = 'energy'
    child_names = ['phasic_wall_heat_flux_form']
    _child_classes = dict(
        phasic_wall_heat_flux_form=phasic_wall_heat_flux_form,
    )

class multiphase_numerics(Group):
    """
    The multiphase numerics options object.
    """
    _version = '251'
    fluent_name = 'multiphase-numerics'
    _python_name = 'multiphase_numerics'
    child_names = ['porous_media', 'compressible_flow', 'boiling_parameters', 'viscous_flow', 'heat_mass_transfer', 'interphase_interactions', 'advanced_stability_controls', 'default_controls', 'face_pressure_controls', 'solution_stabilization', 'energy']
    _child_classes = dict(
        porous_media=porous_media,
        compressible_flow=compressible_flow,
        boiling_parameters=boiling_parameters,
        viscous_flow=viscous_flow,
        heat_mass_transfer=heat_mass_transfer,
        interphase_interactions=interphase_interactions,
        advanced_stability_controls=advanced_stability_controls,
        default_controls=default_controls,
        face_pressure_controls=face_pressure_controls,
        solution_stabilization=solution_stabilization,
        energy=energy_1,
    )

class nb_gradient(String, AllowedValuesMixin):
    """
    Type of boundary treatment for pressure-based solver.
    """
    _version = '251'
    fluent_name = 'nb-gradient'
    _python_name = 'nb_gradient'

class nb_gradient_dbns(String, AllowedValuesMixin):
    """
    Type of boundary treatment for density-based solver.
    """
    _version = '251'
    fluent_name = 'nb-gradient-dbns'
    _python_name = 'nb_gradient_dbns'

class nb_gradient_boundary_option(Group):
    """
    Ggnb options.
    """
    _version = '251'
    fluent_name = 'nb-gradient-boundary-option'
    _python_name = 'nb_gradient_boundary_option'
    child_names = ['nb_gradient', 'nb_gradient_dbns']
    _child_classes = dict(
        nb_gradient=nb_gradient,
        nb_gradient_dbns=nb_gradient_dbns,
    )

class nita(Boolean):
    """
    Enable/disable Use of Noniterative Time Advancement Scheme.
    """
    _version = '251'
    fluent_name = 'nita?'
    _python_name = 'nita'

class verbosity_13(Integer):
    """
    NITA verbosity option.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class skewness_neighbor_coupling_1(Boolean):
    """
    Skewness neighbor coupling for NITA.
    """
    _version = '251'
    fluent_name = 'skewness-neighbor-coupling?'
    _python_name = 'skewness_neighbor_coupling'

class enable_21(Boolean):
    """
    Enable/disable hybrid NITA settings.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class options_9(String, AllowedValuesMixin):
    """
    Hybrid NITA option.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'

class multi_phase_setting(Group):
    """
    Hybrid NITA for multi-phase flow.
    """
    _version = '251'
    fluent_name = 'multi-phase-setting'
    _python_name = 'multi_phase_setting'
    child_names = ['enable', 'options']
    _child_classes = dict(
        enable=enable_21,
        options=options_9,
    )

class single_phase_setting(String, AllowedValuesMixin):
    """
    Hybrid NITA for single phase flow.
    """
    _version = '251'
    fluent_name = 'single-phase-setting'
    _python_name = 'single_phase_setting'

class hybrid_nita_settings(Group):
    """
    A hybrid NITA settings option for faster performance and better robustness.
    """
    _version = '251'
    fluent_name = 'hybrid-nita-settings'
    _python_name = 'hybrid_nita_settings'
    child_names = ['multi_phase_setting', 'single_phase_setting']
    _child_classes = dict(
        multi_phase_setting=multi_phase_setting,
        single_phase_setting=single_phase_setting,
    )

class nita_expert_controls(Group):
    """
    The NITA expert controls object.
    """
    _version = '251'
    fluent_name = 'nita-expert-controls'
    _python_name = 'nita_expert_controls'
    child_names = ['verbosity', 'skewness_neighbor_coupling', 'hybrid_nita_settings']
    _child_classes = dict(
        verbosity=verbosity_13,
        skewness_neighbor_coupling=skewness_neighbor_coupling_1,
        hybrid_nita_settings=hybrid_nita_settings,
    )

class high_order_pressure(Boolean):
    """
    High order pressure extrapolation at overset interface.
    """
    _version = '251'
    fluent_name = 'high-order-pressure?'
    _python_name = 'high_order_pressure'

class interpolation_method(String, AllowedValuesMixin):
    """
    The interpolation method for overset interface(s).
    """
    _version = '251'
    fluent_name = 'interpolation-method'
    _python_name = 'interpolation_method'

class orphan_cell_treatment(Boolean):
    """
    Enable solver to run with orphans present.
    """
    _version = '251'
    fluent_name = 'orphan-cell-treatment?'
    _python_name = 'orphan_cell_treatment'

class mass_flux_correction_method(String, AllowedValuesMixin):
    """
    Mass flux correction option at overset interfaces.
    """
    _version = '251'
    fluent_name = 'mass-flux-correction-method'
    _python_name = 'mass_flux_correction_method'

class hybrid_mode_selection(String, AllowedValuesMixin):
    """
    Mode for hybrid interpolation.
    """
    _version = '251'
    fluent_name = 'hybrid-mode-selection'
    _python_name = 'hybrid_mode_selection'

class expert_6(Group):
    """
    Overset expert solver options object.
    """
    _version = '251'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['mass_flux_correction_method', 'hybrid_mode_selection']
    _child_classes = dict(
        mass_flux_correction_method=mass_flux_correction_method,
        hybrid_mode_selection=hybrid_mode_selection,
    )

class overset_2(Group):
    """
    Overset solver options object.
    """
    _version = '251'
    fluent_name = 'overset'
    _python_name = 'overset'
    child_names = ['high_order_pressure', 'interpolation_method', 'orphan_cell_treatment', 'expert']
    _child_classes = dict(
        high_order_pressure=high_order_pressure,
        interpolation_method=interpolation_method,
        orphan_cell_treatment=orphan_cell_treatment,
        expert=expert_6,
    )

class phase_based_vof_discretization_child(Real):
    """
    'child_object_type' of phase_based_vof_discretization.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'phase_based_vof_discretization_child'

class phase_based_vof_discretization(NamedObject[phase_based_vof_discretization_child], CreatableNamedObjectMixin[phase_based_vof_discretization_child]):
    """
    Phase-based vof discretization.
    """
    _version = '251'
    fluent_name = 'phase-based-vof-discretization'
    _python_name = 'phase_based_vof_discretization'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = phase_based_vof_discretization_child

class reduced_rank_extrapolation(Boolean):
    """
    Enable/disable Reduced Rank Extrapolation method to accelerate solution time.
    """
    _version = '251'
    fluent_name = 'reduced-rank-extrapolation'
    _python_name = 'reduced_rank_extrapolation'

class subspace_size(Integer):
    """
    Subspace size.
    """
    _version = '251'
    fluent_name = 'subspace-size'
    _python_name = 'subspace_size'

class skip_iter_count(Integer):
    """
    Skip every n iterations.
    """
    _version = '251'
    fluent_name = 'skip-iter-count'
    _python_name = 'skip_iter_count'

class reduced_rank_extrapolation_options(Group):
    """
    Reduced Rank Extrapolation options.
    """
    _version = '251'
    fluent_name = 'reduced-rank-extrapolation-options'
    _python_name = 'reduced_rank_extrapolation_options'
    child_names = ['subspace_size', 'skip_iter_count']
    _child_classes = dict(
        subspace_size=subspace_size,
        skip_iter_count=skip_iter_count,
    )

class use_limiter_in_time(Boolean):
    """
    Use a limiter in the time discretization to reduce local over- or undershoots of the solution.
    """
    _version = '251'
    fluent_name = 'use-limiter-in-time?'
    _python_name = 'use_limiter_in_time'

class residual_smoothing_factor(Real):
    """
    Residual smoothing factor.
    """
    _version = '251'
    fluent_name = 'residual-smoothing-factor'
    _python_name = 'residual_smoothing_factor'

class residual_smoothing_iter_count(Integer):
    """
    Number of implicit iterations.
    """
    _version = '251'
    fluent_name = 'residual-smoothing-iter-count'
    _python_name = 'residual_smoothing_iter_count'

class residual_smoothing(Group):
    """
    Residual smoothing factor and number of iterations.
    """
    _version = '251'
    fluent_name = 'residual-smoothing'
    _python_name = 'residual_smoothing'
    child_names = ['residual_smoothing_factor', 'residual_smoothing_iter_count']
    _child_classes = dict(
        residual_smoothing_factor=residual_smoothing_factor,
        residual_smoothing_iter_count=residual_smoothing_iter_count,
    )

class high_order_rc(Boolean):
    """
    Use low order velocity interpolation in flux calculation.
    """
    _version = '251'
    fluent_name = 'high-order-rc?'
    _python_name = 'high_order_rc'

class high_order_rc_hybrid_treatment(Boolean):
    """
    Enable/disable use of hybrid treatment for high order Rhie-Chow flux.
    """
    _version = '251'
    fluent_name = 'high-order-rc-hybrid-treatment?'
    _python_name = 'high_order_rc_hybrid_treatment'

class force_treatment_of_unsteady_rc(Boolean):
    """
    Enable/disable use of forced treatment of unsteady terms in Rhie-Chow flux.
    """
    _version = '251'
    fluent_name = 'force-treatment-of-unsteady-rc?'
    _python_name = 'force_treatment_of_unsteady_rc'

class unstructured_var_presto_scheme(Boolean):
    """
    Enable/disable use of unstructured variant of PRESTO pressure scheme.
    """
    _version = '251'
    fluent_name = 'unstructured-var-presto-scheme?'
    _python_name = 'unstructured_var_presto_scheme'

class new_framework_for_vof_specific_node_based_treatment(Boolean):
    """
    Enable/disable new framework for vof specific node based treatments.
    """
    _version = '251'
    fluent_name = 'new-framework-for-vof-specific-node-based-treatment?'
    _python_name = 'new_framework_for_vof_specific_node_based_treatment'

class vof_numerics(Group):
    """
    VOF numeric options.
    """
    _version = '251'
    fluent_name = 'vof-numerics'
    _python_name = 'vof_numerics'
    child_names = ['high_order_rc', 'high_order_rc_hybrid_treatment', 'force_treatment_of_unsteady_rc', 'unstructured_var_presto_scheme', 'new_framework_for_vof_specific_node_based_treatment']
    _child_classes = dict(
        high_order_rc=high_order_rc,
        high_order_rc_hybrid_treatment=high_order_rc_hybrid_treatment,
        force_treatment_of_unsteady_rc=force_treatment_of_unsteady_rc,
        unstructured_var_presto_scheme=unstructured_var_presto_scheme,
        new_framework_for_vof_specific_node_based_treatment=new_framework_for_vof_specific_node_based_treatment,
    )

class enable_22(Boolean):
    """
    Enable Warped-Face Gradient Correction.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class mode_1(String, AllowedValuesMixin):
    """
    Gradient Correction Mode.
    """
    _version = '251'
    fluent_name = 'mode'
    _python_name = 'mode'

class turbulence_options(String, AllowedValuesMixin):
    """
    Options:
     Legacy computations 
     New computations .
    """
    _version = '251'
    fluent_name = 'turbulence-options'
    _python_name = 'turbulence_options'

class warped_face_gradient_correction(Group):
    """
    Warped-face-gradient-correction object.
    """
    _version = '251'
    fluent_name = 'warped-face-gradient-correction'
    _python_name = 'warped_face_gradient_correction'
    child_names = ['enable', 'mode', 'turbulence_options']
    _child_classes = dict(
        enable=enable_22,
        mode=mode_1,
        turbulence_options=turbulence_options,
    )

class enable_23(Boolean):
    """
    Enable/disable high-speed-numerics.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class expert_7(String, AllowedValuesMixin):
    """
    High-Speed-Numerics set.
    """
    _version = '251'
    fluent_name = 'expert'
    _python_name = 'expert'

class visualize_pressure_discontinuity_sensor(Boolean):
    """
    Enable/disable pressure-discontinuity-sensor visualization.
    """
    _version = '251'
    fluent_name = 'visualize-pressure-discontinuity-sensor?'
    _python_name = 'visualize_pressure_discontinuity_sensor'

class high_speed_numerics(Group):
    """
    High-speed-numerics object.
    """
    _version = '251'
    fluent_name = 'high-speed-numerics'
    _python_name = 'high_speed_numerics'
    child_names = ['enable', 'expert', 'visualize_pressure_discontinuity_sensor']
    _child_classes = dict(
        enable=enable_23,
        expert=expert_7,
        visualize_pressure_discontinuity_sensor=visualize_pressure_discontinuity_sensor,
    )

class species_disc_together(Boolean):
    """
    Enable/disable Set all species discretizations together.
    """
    _version = '251'
    fluent_name = 'species-disc-together'
    _python_name = 'species_disc_together'

class set_solution_methods_to_default(Command):
    """
    Set solution methods to default values.
    """
    _version = '251'
    fluent_name = 'set-solution-methods-to-default'
    _python_name = 'set_solution_methods_to_default'

class methods_1(Group):
    """
    The solution methods object.
    """
    _version = '251'
    fluent_name = 'methods'
    _python_name = 'methods'
    child_names = ['axisymmetric', 'p_v_coupling', 'flux_type', 'spatial_discretization', 'bcd_boundedness', 'pseudo_time_method', 'transient_formulation', 'unsteady_global_time', 'accelerated_non_iterative_time_marching', 'convergence_acceleration_for_stretched_meshes', 'expert', 'frozen_flux', 'high_order_term_relaxation', 'multiphase_numerics', 'nb_gradient_boundary_option', 'nita', 'nita_expert_controls', 'overset', 'phase_based_vof_discretization', 'reduced_rank_extrapolation', 'reduced_rank_extrapolation_options', 'use_limiter_in_time', 'residual_smoothing', 'vof_numerics', 'warped_face_gradient_correction', 'high_speed_numerics', 'species_disc_together']
    command_names = ['set_solution_methods_to_default']
    _child_classes = dict(
        axisymmetric=axisymmetric,
        p_v_coupling=p_v_coupling,
        flux_type=flux_type,
        spatial_discretization=spatial_discretization,
        bcd_boundedness=bcd_boundedness,
        pseudo_time_method=pseudo_time_method,
        transient_formulation=transient_formulation,
        unsteady_global_time=unsteady_global_time,
        accelerated_non_iterative_time_marching=accelerated_non_iterative_time_marching,
        convergence_acceleration_for_stretched_meshes=convergence_acceleration_for_stretched_meshes,
        expert=expert_5,
        frozen_flux=frozen_flux,
        high_order_term_relaxation=high_order_term_relaxation,
        multiphase_numerics=multiphase_numerics,
        nb_gradient_boundary_option=nb_gradient_boundary_option,
        nita=nita,
        nita_expert_controls=nita_expert_controls,
        overset=overset_2,
        phase_based_vof_discretization=phase_based_vof_discretization,
        reduced_rank_extrapolation=reduced_rank_extrapolation,
        reduced_rank_extrapolation_options=reduced_rank_extrapolation_options,
        use_limiter_in_time=use_limiter_in_time,
        residual_smoothing=residual_smoothing,
        vof_numerics=vof_numerics,
        warped_face_gradient_correction=warped_face_gradient_correction,
        high_speed_numerics=high_speed_numerics,
        species_disc_together=species_disc_together,
        set_solution_methods_to_default=set_solution_methods_to_default,
    )
    _child_aliases = dict(
        discretization_scheme=('spatial_discretization/discretization_scheme', 'discretization-scheme'),
        gradient_scheme=('spatial_discretization/gradient_scheme', 'gradient-scheme'),
    )

class courant_number(Real):
    """
    The fine mesh Courant number (time step factor).
    """
    _version = '251'
    fluent_name = 'courant-number'
    _python_name = 'courant_number'

class vof_correction_itr_count(Integer):
    """
    Iterations for vof correction.
    """
    _version = '251'
    fluent_name = 'vof-correction-itr-count'
    _python_name = 'vof_correction_itr_count'

class flow_courant_number(Real):
    """
    Flow Courant number.
    """
    _version = '251'
    fluent_name = 'flow-courant-number'
    _python_name = 'flow_courant_number'

class volume_fraction_courant_number(Real):
    """
    Volume fraction Courant number.
    """
    _version = '251'
    fluent_name = 'volume-fraction-courant-number'
    _python_name = 'volume_fraction_courant_number'

class explicit_pressure_under_relaxation(Real):
    """
    Explicit pressure under-relaxation.
    """
    _version = '251'
    fluent_name = 'explicit-pressure-under-relaxation'
    _python_name = 'explicit_pressure_under_relaxation'

class explicit_momentum_under_relaxation(Real):
    """
    Explicit momentum under-relaxation.
    """
    _version = '251'
    fluent_name = 'explicit-momentum-under-relaxation'
    _python_name = 'explicit_momentum_under_relaxation'

class explicit_volume_fraction_under_relaxation(Real):
    """
    Explicit volume fraction under-relaxation.
    """
    _version = '251'
    fluent_name = 'explicit-volume-fraction-under-relaxation'
    _python_name = 'explicit_volume_fraction_under_relaxation'

class p_v_controls(Group):
    """
    P-V-Controls.
    """
    _version = '251'
    fluent_name = 'p-v-controls'
    _python_name = 'p_v_controls'
    child_names = ['skewness_correction_itr_count', 'neighbor_correction_itr_count', 'skewness_neighbor_coupling', 'vof_correction_itr_count', 'flow_courant_number', 'volume_fraction_courant_number', 'explicit_pressure_under_relaxation', 'explicit_momentum_under_relaxation', 'explicit_volume_fraction_under_relaxation']
    _child_classes = dict(
        skewness_correction_itr_count=skewness_correction_itr_count,
        neighbor_correction_itr_count=neighbor_correction_itr_count,
        skewness_neighbor_coupling=skewness_neighbor_coupling,
        vof_correction_itr_count=vof_correction_itr_count,
        flow_courant_number=flow_courant_number,
        volume_fraction_courant_number=volume_fraction_courant_number,
        explicit_pressure_under_relaxation=explicit_pressure_under_relaxation,
        explicit_momentum_under_relaxation=explicit_momentum_under_relaxation,
        explicit_volume_fraction_under_relaxation=explicit_volume_fraction_under_relaxation,
    )
    _child_aliases = dict(
        neighbor_correction_itr_count=('solution/methods/p_v_coupling/neighbor_correction_itr_count', 'neighbor-correction-itr-count'),
        skewness_correction_itr_count=('solution/methods/p_v_coupling/skewness_correction_itr_count', 'skewness-correction-itr-count'),
        skewness_neighbor_coupling=('solution/methods/p_v_coupling/skewness_neighbor_coupling', 'skewness-neighbor-coupling'),
    )

class relaxation_factor_1_child(Real):
    """
    'child_object_type' of relaxation_factor.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'relaxation_factor_child'

class relaxation_factor_1(NamedObject[relaxation_factor_1_child], CreatableNamedObjectMixin[relaxation_factor_1_child]):
    """
    Explicit relaxation object.
    """
    _version = '251'
    fluent_name = 'relaxation-factor'
    _python_name = 'relaxation_factor'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = relaxation_factor_1_child

class under_relaxation_2_child(Real):
    """
    'child_object_type' of under_relaxation.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'under_relaxation_child'

class under_relaxation_2(NamedObject[under_relaxation_2_child], CreatableNamedObjectMixin[under_relaxation_2_child]):
    """
    Under Relaxation Menu.
    """
    _version = '251'
    fluent_name = 'under-relaxation'
    _python_name = 'under_relaxation'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = under_relaxation_2_child

class pseudo_time_courant_number(Real):
    """
    Courant number for the local pseudo time method.
    """
    _version = '251'
    fluent_name = 'pseudo-time-courant-number'
    _python_name = 'pseudo_time_courant_number'

class pseudo_time_step_method_solid_zone(Boolean):
    """
    Enable/disable pseudo time step method for solid zones.
    """
    _version = '251'
    fluent_name = 'pseudo-time-step-method-solid-zone?'
    _python_name = 'pseudo_time_step_method_solid_zone'

class time_step_size_scale_factor(Real):
    """
    Time step size scale factor for solid zones.
    """
    _version = '251'
    fluent_name = 'time-step-size-scale-factor'
    _python_name = 'time_step_size_scale_factor'

class pseudo_time_method_local_time_step(Group):
    """
    Pseudo time method local time step settings object.
    """
    _version = '251'
    fluent_name = 'pseudo-time-method-local-time-step'
    _python_name = 'pseudo_time_method_local_time_step'
    child_names = ['pseudo_time_courant_number', 'pseudo_time_step_method_solid_zone', 'time_step_size_scale_factor']
    _child_classes = dict(
        pseudo_time_courant_number=pseudo_time_courant_number,
        pseudo_time_step_method_solid_zone=pseudo_time_step_method_solid_zone,
        time_step_size_scale_factor=time_step_size_scale_factor,
    )

class local_dt_dualts_relax_child(Real):
    """
    'child_object_type' of local_dt_dualts_relax.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'local_dt_dualts_relax_child'

class local_dt_dualts_relax(NamedObject[local_dt_dualts_relax_child], CreatableNamedObjectMixin[local_dt_dualts_relax_child]):
    """
    Local time step relaxation factor.
    """
    _version = '251'
    fluent_name = 'local-dt-dualts-relax'
    _python_name = 'local_dt_dualts_relax'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = local_dt_dualts_relax_child

class global_dt_pseudo_relax_child(Real):
    """
    'child_object_type' of global_dt_pseudo_relax.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'global_dt_pseudo_relax_child'

class global_dt_pseudo_relax(NamedObject[global_dt_pseudo_relax_child], CreatableNamedObjectMixin[global_dt_pseudo_relax_child]):
    """
    Global time step relaxation factor.
    """
    _version = '251'
    fluent_name = 'global-dt-pseudo-relax'
    _python_name = 'global_dt_pseudo_relax'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = global_dt_pseudo_relax_child

class pseudo_time_explicit_relaxation_factor(Group):
    """
    Pseudo time explicit relaxation factor object.
    """
    _version = '251'
    fluent_name = 'pseudo-time-explicit-relaxation-factor'
    _python_name = 'pseudo_time_explicit_relaxation_factor'
    child_names = ['local_dt_dualts_relax', 'global_dt_pseudo_relax']
    _child_classes = dict(
        local_dt_dualts_relax=local_dt_dualts_relax,
        global_dt_pseudo_relax=global_dt_pseudo_relax,
    )

class simplec_skewness_correction_itr(Integer):
    """
    Iterations for skewness correction for SIMPLEC.
    """
    _version = '251'
    fluent_name = 'simplec-skewness-correction-itr'
    _python_name = 'simplec_skewness_correction_itr'

class piso_skewness_correction_itr(Integer):
    """
    Iterations for skewness correction for PISO.
    """
    _version = '251'
    fluent_name = 'piso-skewness-correction-itr'
    _python_name = 'piso_skewness_correction_itr'

class fractstep_skewness_correction_itr(Integer):
    """
    Iterations for skewness correction for Fractional Step.
    """
    _version = '251'
    fluent_name = 'fractstep-skewness-correction-itr'
    _python_name = 'fractstep_skewness_correction_itr'

class neighbor_correction_itr(Integer):
    """
    Iterations for neighbor correction for PISO.
    """
    _version = '251'
    fluent_name = 'neighbor-correction-itr'
    _python_name = 'neighbor_correction_itr'

class flow_courant_number_1(Real):
    """
    Flow Courant number for Coupled Solver.
    """
    _version = '251'
    fluent_name = 'flow-courant-number'
    _python_name = 'flow_courant_number'

class dualts_explicit_mom(Real):
    """
    Explicit Mom relaxation for local pseudo time method.
    """
    _version = '251'
    fluent_name = 'dualts-explicit-mom'
    _python_name = 'dualts_explicit_mom'

class dualts_explicit_pressure(Real):
    """
    Explicit Pressure relaxation for local pseudo time method.
    """
    _version = '251'
    fluent_name = 'dualts-explicit-pressure'
    _python_name = 'dualts_explicit_pressure'

class cpl_expl_relax_mom(Real):
    """
    Explicit Mom relaxation for unsteady non-local-pseudo-time method.
    """
    _version = '251'
    fluent_name = 'cpl-expl-relax-mom'
    _python_name = 'cpl_expl_relax_mom'

class cpl_expl_relax_pressure(Real):
    """
    Explicit Pressure relaxation for unsteady non-local-pseudo-time method.
    """
    _version = '251'
    fluent_name = 'cpl-expl-relax-pressure'
    _python_name = 'cpl_expl_relax_pressure'

class cpl_pseudo_expl_relax_mom(Real):
    """
    Explicit Mom relaxation for steady global pseudo time method.
    """
    _version = '251'
    fluent_name = 'cpl-pseudo-expl-relax-mom'
    _python_name = 'cpl_pseudo_expl_relax_mom'

class cpl_pseudo_expl_relax_pressure(Real):
    """
    Explicit Pressure relaxation for steady global pseudo time method.
    """
    _version = '251'
    fluent_name = 'cpl-pseudo-expl-relax-pressure'
    _python_name = 'cpl_pseudo_expl_relax_pressure'

class cpl_steady_expl_relax_mom(Real):
    """
    Explicit Mom relaxation for steady pseudo-time-off method.
    """
    _version = '251'
    fluent_name = 'cpl-steady-expl-relax-mom'
    _python_name = 'cpl_steady_expl_relax_mom'

class cpl_steady_expl_relax_pressure(Real):
    """
    Explicit Pressure relaxation for steady pseudo-time-off method.
    """
    _version = '251'
    fluent_name = 'cpl-steady-expl-relax-pressure'
    _python_name = 'cpl_steady_expl_relax_pressure'

class global_dt_verbosity(Integer):
    """
    The verbosity for the pseudo time method with global time stepping.
    """
    _version = '251'
    fluent_name = 'global-dt-verbosity'
    _python_name = 'global_dt_verbosity'

class local_dt_verbosity(Integer):
    """
    The verbosity for the pseudo time method with local time stepping.
    """
    _version = '251'
    fluent_name = 'local-dt-verbosity'
    _python_name = 'local_dt_verbosity'

class pseudo_time_localdt_courant_number(Real):
    """
    Courant number for the local pseudo time method.
    """
    _version = '251'
    fluent_name = 'pseudo-time-localdt-courant-number'
    _python_name = 'pseudo_time_localdt_courant_number'

class global_dt_time_step_method(String, AllowedValuesMixin):
    """
    Enable/disable use of automatic time step size calculation.
    """
    _version = '251'
    fluent_name = 'global-dt-time-step-method'
    _python_name = 'global_dt_time_step_method'

class global_dt_pseudo_time_step_size(Real):
    """
    Pseudo time step size.
    """
    _version = '251'
    fluent_name = 'global-dt-pseudo-time-step-size'
    _python_name = 'global_dt_pseudo_time_step_size'

class auto_time_length_scale_methods(String, AllowedValuesMixin):
    """
    Length Scale Calculation Method.
    """
    _version = '251'
    fluent_name = 'auto-time-length-scale-methods'
    _python_name = 'auto_time_length_scale_methods'

class auto_time_step_size_scale_factor(Real):
    """
    Auto Time Step Size Scaling Factor.
    """
    _version = '251'
    fluent_name = 'auto-time-step-size-scale-factor'
    _python_name = 'auto_time_step_size_scale_factor'

class auto_time_length_scale(Real):
    """
    Length Scale .
    """
    _version = '251'
    fluent_name = 'auto-time-length-scale'
    _python_name = 'auto_time_length_scale'

class cycle_type(String, AllowedValuesMixin):
    """
    Multigrid cycle type.
    """
    _version = '251'
    fluent_name = 'cycle-type'
    _python_name = 'cycle_type'

class pseudo_cycle_type(String, AllowedValuesMixin):
    """
    Multigrid pseudo cycle type.
    """
    _version = '251'
    fluent_name = 'pseudo-cycle-type'
    _python_name = 'pseudo_cycle_type'

class dual_ts_cycle_type(String, AllowedValuesMixin):
    """
    Multigrid dual-ts cycle type.
    """
    _version = '251'
    fluent_name = 'dual-ts-cycle-type'
    _python_name = 'dual_ts_cycle_type'

class mg_controls_child(Group):
    """
    'child_object_type' of mg_controls.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'mg_controls_child'
    child_names = ['cycle_type', 'pseudo_cycle_type', 'dual_ts_cycle_type']
    _child_classes = dict(
        cycle_type=cycle_type,
        pseudo_cycle_type=pseudo_cycle_type,
        dual_ts_cycle_type=dual_ts_cycle_type,
    )

class mg_controls(NamedObject[mg_controls_child], CreatableNamedObjectMixin[mg_controls_child]):
    """
    Multi-grid controls object.
    """
    _version = '251'
    fluent_name = 'mg-controls'
    _python_name = 'mg_controls'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = mg_controls_child

class global_dt_post_sweeps(Integer):
    """
    Number of post-relaxations for fixed cycles (global dt).
    """
    _version = '251'
    fluent_name = 'global-dt-post-sweeps'
    _python_name = 'global_dt_post_sweeps'

class post_sweeps(Integer):
    """
    Number of post-relaxations for fixed cycles.
    """
    _version = '251'
    fluent_name = 'post-sweeps'
    _python_name = 'post_sweeps'

class global_dt_max_cycle(Integer):
    """
    Maximum number of cycles (global dt).
    """
    _version = '251'
    fluent_name = 'global-dt-max-cycle'
    _python_name = 'global_dt_max_cycle'

class max_cycle(Integer):
    """
    Maximum number of cycles.
    """
    _version = '251'
    fluent_name = 'max-cycle'
    _python_name = 'max_cycle'

class fixed_cycle_parameters(Group):
    """
    Fixed cycle parameters for the scalar AMG solver.
    """
    _version = '251'
    fluent_name = 'fixed-cycle-parameters'
    _python_name = 'fixed_cycle_parameters'
    child_names = ['global_dt_post_sweeps', 'post_sweeps', 'global_dt_max_cycle', 'max_cycle']
    _child_classes = dict(
        global_dt_post_sweeps=global_dt_post_sweeps,
        post_sweeps=post_sweeps,
        global_dt_max_cycle=global_dt_max_cycle,
        max_cycle=max_cycle,
    )

class global_dt_coarsen_by_interval(Integer):
    """
    Coarsen by interval (global dt).
    """
    _version = '251'
    fluent_name = 'global-dt-coarsen-by-interval'
    _python_name = 'global_dt_coarsen_by_interval'

class coarsen_by_interval(Integer):
    """
    Coarsen by interval.
    """
    _version = '251'
    fluent_name = 'coarsen-by-interval'
    _python_name = 'coarsen_by_interval'

class coarsening_parameters(Group):
    """
    Coarsening parameters for the scalar AMG solver.
    """
    _version = '251'
    fluent_name = 'coarsening-parameters'
    _python_name = 'coarsening_parameters'
    child_names = ['global_dt_coarsen_by_interval', 'coarsen_by_interval']
    _child_classes = dict(
        global_dt_coarsen_by_interval=global_dt_coarsen_by_interval,
        coarsen_by_interval=coarsen_by_interval,
    )

class global_dt_smoother_type(String, AllowedValuesMixin):
    """
    Smoother type (global dt).
    """
    _version = '251'
    fluent_name = 'global-dt-smoother-type'
    _python_name = 'global_dt_smoother_type'

class smoother_type(String, AllowedValuesMixin):
    """
    Smoother type.
    """
    _version = '251'
    fluent_name = 'smoother-type'
    _python_name = 'smoother_type'

class amg_controls_scalar(Group):
    """
    AMG scalar parameters object.
    """
    _version = '251'
    fluent_name = 'amg-controls-scalar'
    _python_name = 'amg_controls_scalar'
    child_names = ['fixed_cycle_parameters', 'coarsening_parameters', 'global_dt_smoother_type', 'smoother_type']
    _child_classes = dict(
        fixed_cycle_parameters=fixed_cycle_parameters,
        coarsening_parameters=coarsening_parameters,
        global_dt_smoother_type=global_dt_smoother_type,
        smoother_type=smoother_type,
    )

class zonal_pbns_solution_controls(Group):
    """
    Mom and pressure relaxation factors for coupled solver.
    """
    _version = '251'
    fluent_name = 'zonal-pbns-solution-controls'
    _python_name = 'zonal_pbns_solution_controls'
    child_names = ['simplec_skewness_correction_itr', 'piso_skewness_correction_itr', 'fractstep_skewness_correction_itr', 'neighbor_correction_itr', 'skewness_neighbor_coupling', 'flow_courant_number', 'dualts_explicit_mom', 'dualts_explicit_pressure', 'cpl_expl_relax_mom', 'cpl_expl_relax_pressure', 'cpl_pseudo_expl_relax_mom', 'cpl_pseudo_expl_relax_pressure', 'cpl_steady_expl_relax_mom', 'cpl_steady_expl_relax_pressure', 'global_dt_verbosity', 'local_dt_verbosity', 'pseudo_time_localdt_courant_number', 'global_dt_time_step_method', 'global_dt_pseudo_time_step_size', 'auto_time_length_scale_methods', 'auto_time_step_size_scale_factor', 'auto_time_length_scale', 'mg_controls', 'amg_controls_scalar']
    _child_classes = dict(
        simplec_skewness_correction_itr=simplec_skewness_correction_itr,
        piso_skewness_correction_itr=piso_skewness_correction_itr,
        fractstep_skewness_correction_itr=fractstep_skewness_correction_itr,
        neighbor_correction_itr=neighbor_correction_itr,
        skewness_neighbor_coupling=skewness_neighbor_coupling,
        flow_courant_number=flow_courant_number_1,
        dualts_explicit_mom=dualts_explicit_mom,
        dualts_explicit_pressure=dualts_explicit_pressure,
        cpl_expl_relax_mom=cpl_expl_relax_mom,
        cpl_expl_relax_pressure=cpl_expl_relax_pressure,
        cpl_pseudo_expl_relax_mom=cpl_pseudo_expl_relax_mom,
        cpl_pseudo_expl_relax_pressure=cpl_pseudo_expl_relax_pressure,
        cpl_steady_expl_relax_mom=cpl_steady_expl_relax_mom,
        cpl_steady_expl_relax_pressure=cpl_steady_expl_relax_pressure,
        global_dt_verbosity=global_dt_verbosity,
        local_dt_verbosity=local_dt_verbosity,
        pseudo_time_localdt_courant_number=pseudo_time_localdt_courant_number,
        global_dt_time_step_method=global_dt_time_step_method,
        global_dt_pseudo_time_step_size=global_dt_pseudo_time_step_size,
        auto_time_length_scale_methods=auto_time_length_scale_methods,
        auto_time_step_size_scale_factor=auto_time_step_size_scale_factor,
        auto_time_length_scale=auto_time_length_scale,
        mg_controls=mg_controls,
        amg_controls_scalar=amg_controls_scalar,
    )

class under_relaxation_factor_2(Real):
    """
    Under-relaxation factor to be used in .
    """
    _version = '251'
    fluent_name = 'under-relaxation-factor'
    _python_name = 'under_relaxation_factor'

class explicit_relaxation_factor(Real):
    """
    Explicit relaxation factor to be applied to.
    """
    _version = '251'
    fluent_name = 'explicit-relaxation-factor'
    _python_name = 'explicit_relaxation_factor'

class expert_8(Group):
    """
    Object.
    """
    _version = '251'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['under_relaxation_factor', 'explicit_relaxation_factor']
    _child_classes = dict(
        under_relaxation_factor=under_relaxation_factor_2,
        explicit_relaxation_factor=explicit_relaxation_factor,
    )

class relative_convergence_criterion(Real):
    """
    Convergence tolerance for the timestep iterations.
    """
    _version = '251'
    fluent_name = 'relative-convergence-criterion'
    _python_name = 'relative_convergence_criterion'

class max_iter_per_timestep_count(Integer):
    """
    Maximum number of iterations per timestep.
    """
    _version = '251'
    fluent_name = 'max-iter-per-timestep-count'
    _python_name = 'max_iter_per_timestep_count'

class acoustics_wave_eqn_controls(Group):
    """
    Object.
    """
    _version = '251'
    fluent_name = 'acoustics-wave-eqn-controls'
    _python_name = 'acoustics_wave_eqn_controls'
    child_names = ['expert', 'relative_convergence_criterion', 'max_iter_per_timestep_count']
    _child_classes = dict(
        expert=expert_8,
        relative_convergence_criterion=relative_convergence_criterion,
        max_iter_per_timestep_count=max_iter_per_timestep_count,
    )

class solution_stabilization_1(Boolean):
    """
    Automatic solver settings adjustment for solution stabilization during contact process.
    """
    _version = '251'
    fluent_name = 'solution-stabilization?'
    _python_name = 'solution_stabilization'

class verbosity_14(Integer):
    """
    Verbosity level for contact solution controls.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class iter_count(Integer):
    """
    Additional iterations to accomodate contact solution stabilization.
    """
    _version = '251'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'

class solution_stabilization_persistence(String, AllowedValuesMixin):
    """
    Persistence of the solution stabilization based on events [0-contact based, 1-always on].
    """
    _version = '251'
    fluent_name = 'solution-stabilization-persistence'
    _python_name = 'solution_stabilization_persistence'

class persistence_fixed_time_steps(Integer):
    """
    Fixed time-steps for solution stabilization persistence after trigger.
    """
    _version = '251'
    fluent_name = 'persistence-fixed-time-steps'
    _python_name = 'persistence_fixed_time_steps'

class persistence_fixed_duration(Real):
    """
    Fixed time for solution stabilization persistence after trigger.
    """
    _version = '251'
    fluent_name = 'persistence-fixed-duration'
    _python_name = 'persistence_fixed_duration'

class extrapolation_method(String, AllowedValuesMixin):
    """
    Solution extrapolation method for cells changing status from contact to non-contact.
    """
    _version = '251'
    fluent_name = 'extrapolation-method'
    _python_name = 'extrapolation_method'

class parameters_3(Group):
    """
    Flexible numerics controls parameters object.
    """
    _version = '251'
    fluent_name = 'parameters'
    _python_name = 'parameters'
    child_names = ['iter_count', 'solution_stabilization_persistence', 'persistence_fixed_time_steps', 'persistence_fixed_duration', 'extrapolation_method']
    _child_classes = dict(
        iter_count=iter_count,
        solution_stabilization_persistence=solution_stabilization_persistence,
        persistence_fixed_time_steps=persistence_fixed_time_steps,
        persistence_fixed_duration=persistence_fixed_duration,
        extrapolation_method=extrapolation_method,
    )

class first_to_second_order_blending_1(Real):
    """
    Factor to control first order to second order blending.
    """
    _version = '251'
    fluent_name = 'first-to-second-order-blending'
    _python_name = 'first_to_second_order_blending'

class first_to_second_order_blending_list(RealList):
    """
    List set factor to control first order to second order blending.
    """
    _version = '251'
    fluent_name = 'first-to-second-order-blending-list'
    _python_name = 'first_to_second_order_blending_list'

class scheme(Integer):
    """
    Advection scheme for contact event stability.
    """
    _version = '251'
    fluent_name = 'scheme'
    _python_name = 'scheme'

class flow_skew_diffusion_exclude(Boolean):
    """
    Exclude skew diffusion discretization contribution for momentum.
    """
    _version = '251'
    fluent_name = 'flow-skew-diffusion-exclude?'
    _python_name = 'flow_skew_diffusion_exclude'

class scalars_skew_diffusion_exclude(Boolean):
    """
    Exclude skew diffusion discretization contribution for scalars.
    """
    _version = '251'
    fluent_name = 'scalars-skew-diffusion-exclude?'
    _python_name = 'scalars_skew_diffusion_exclude'

class rhie_chow_flux_specify(Boolean):
    """
    Allow specification of the the rhie-chow flux method.
    """
    _version = '251'
    fluent_name = 'rhie-chow-flux-specify?'
    _python_name = 'rhie_chow_flux_specify'

class rhie_chow_method(Integer):
    """
    The rhie-chow flux method.
    """
    _version = '251'
    fluent_name = 'rhie-chow-method'
    _python_name = 'rhie_chow_method'

class spatial(Group):
    """
    Flexible numeris object.
    """
    _version = '251'
    fluent_name = 'spatial'
    _python_name = 'spatial'
    child_names = ['first_to_second_order_blending', 'first_to_second_order_blending_list', 'scheme', 'flow_skew_diffusion_exclude', 'scalars_skew_diffusion_exclude', 'rhie_chow_flux_specify', 'rhie_chow_method']
    _child_classes = dict(
        first_to_second_order_blending=first_to_second_order_blending_1,
        first_to_second_order_blending_list=first_to_second_order_blending_list,
        scheme=scheme,
        flow_skew_diffusion_exclude=flow_skew_diffusion_exclude,
        scalars_skew_diffusion_exclude=scalars_skew_diffusion_exclude,
        rhie_chow_flux_specify=rhie_chow_flux_specify,
        rhie_chow_method=rhie_chow_method,
    )

class transient_parameters_specify(Boolean):
    """
    Enable/Disable transient parameter specification.
    """
    _version = '251'
    fluent_name = 'transient-parameters-specify?'
    _python_name = 'transient_parameters_specify'

class transient_scheme(Integer):
    """
    Temporal scheme to be used.
    """
    _version = '251'
    fluent_name = 'transient-scheme'
    _python_name = 'transient_scheme'

class time_scale_modification_method(Integer):
    """
    Time scale modification method [0-time-step, 1-cfl].
    """
    _version = '251'
    fluent_name = 'time-scale-modification-method'
    _python_name = 'time_scale_modification_method'

class time_scale_modification_factor(Real):
    """
    Time-scale modification factor.
    """
    _version = '251'
    fluent_name = 'time-scale-modification-factor'
    _python_name = 'time_scale_modification_factor'

class transient(Group):
    """
    Flexible numeris object.
    """
    _version = '251'
    fluent_name = 'transient'
    _python_name = 'transient'
    child_names = ['transient_parameters_specify', 'transient_scheme', 'time_scale_modification_method', 'time_scale_modification_factor']
    _child_classes = dict(
        transient_parameters_specify=transient_parameters_specify,
        transient_scheme=transient_scheme,
        time_scale_modification_method=time_scale_modification_method,
        time_scale_modification_factor=time_scale_modification_factor,
    )

class enforce_laplace_coarsening(Boolean):
    """
    Enable/disable the use of laplace coarsening in AMG.
    """
    _version = '251'
    fluent_name = 'enforce-laplace-coarsening?'
    _python_name = 'enforce_laplace_coarsening'

class increase_pre_sweeps(Boolean):
    """
    Enable/disable increase in AMG pre-sweeps.
    """
    _version = '251'
    fluent_name = 'increase-pre-sweeps?'
    _python_name = 'increase_pre_sweeps'

class pre_sweeps(Integer):
    """
    The number of AMG pre-sweeps.
    """
    _version = '251'
    fluent_name = 'pre-sweeps'
    _python_name = 'pre_sweeps'

class specify_coarsening_rate(Boolean):
    """
    Enable/disable AMG coarsening rate.
    """
    _version = '251'
    fluent_name = 'specify-coarsening-rate?'
    _python_name = 'specify_coarsening_rate'

class coarsen_rate(Integer):
    """
    AMG coarsening rate.
    """
    _version = '251'
    fluent_name = 'coarsen-rate'
    _python_name = 'coarsen_rate'

class amg(Group):
    """
    Flexible numeris object.
    """
    _version = '251'
    fluent_name = 'amg'
    _python_name = 'amg'
    child_names = ['enforce_laplace_coarsening', 'increase_pre_sweeps', 'pre_sweeps', 'specify_coarsening_rate', 'coarsen_rate']
    _child_classes = dict(
        enforce_laplace_coarsening=enforce_laplace_coarsening,
        increase_pre_sweeps=increase_pre_sweeps,
        pre_sweeps=pre_sweeps,
        specify_coarsening_rate=specify_coarsening_rate,
        coarsen_rate=coarsen_rate,
    )

class model_ramping(Boolean):
    """
    Enable/disable model ramping for solver stability and accuracy.
    """
    _version = '251'
    fluent_name = 'model-ramping?'
    _python_name = 'model_ramping'

class ramp_flow(Boolean):
    """
    Enable/disable ramp flow for solver stability and accuracy.
    """
    _version = '251'
    fluent_name = 'ramp-flow?'
    _python_name = 'ramp_flow'

class ramp_turbulence(Boolean):
    """
    Enable/disable ramp turbulence for solver stability and accuracy.
    """
    _version = '251'
    fluent_name = 'ramp-turbulence?'
    _python_name = 'ramp_turbulence'

class ramp_scalars(Boolean):
    """
    Enable/disable ramp all scalar transport equations for solver stability and accuracy.
    """
    _version = '251'
    fluent_name = 'ramp-scalars?'
    _python_name = 'ramp_scalars'

class models_2(Group):
    """
    Flexible numeris object.
    """
    _version = '251'
    fluent_name = 'models'
    _python_name = 'models'
    child_names = ['model_ramping', 'ramp_flow', 'ramp_turbulence', 'ramp_scalars']
    _child_classes = dict(
        model_ramping=model_ramping,
        ramp_flow=ramp_flow,
        ramp_turbulence=ramp_turbulence,
        ramp_scalars=ramp_scalars,
    )

class pv_coupling_controls(Boolean):
    """
    Enable/disable pressure-velocity coupling method change for solver stability and accuracy.
    """
    _version = '251'
    fluent_name = 'pv-coupling-controls?'
    _python_name = 'pv_coupling_controls'

class pv_coupling_method(Integer):
    """
    Pressure-velocity coupling method change for solver stability and accuracy.
    """
    _version = '251'
    fluent_name = 'pv-coupling-method'
    _python_name = 'pv_coupling_method'

class gradient_controls(Boolean):
    """
    Enable/disable gradient method for solver stability and accuracy.
    """
    _version = '251'
    fluent_name = 'gradient-controls?'
    _python_name = 'gradient_controls'

class specify_gradient_method(Integer):
    """
    Gradient method for solver stability and accuracy.
    """
    _version = '251'
    fluent_name = 'specify-gradient-method'
    _python_name = 'specify_gradient_method'

class methods_2(Group):
    """
    Flexible numeris object.
    """
    _version = '251'
    fluent_name = 'methods'
    _python_name = 'methods'
    child_names = ['pv_coupling_controls', 'pv_coupling_method', 'gradient_controls', 'specify_gradient_method']
    _child_classes = dict(
        pv_coupling_controls=pv_coupling_controls,
        pv_coupling_method=pv_coupling_method,
        gradient_controls=gradient_controls,
        specify_gradient_method=specify_gradient_method,
    )

class compute_statistics(Boolean):
    """
    Enable/disable solution statistics for contact updates.
    """
    _version = '251'
    fluent_name = 'compute-statistics?'
    _python_name = 'compute_statistics'

class statistics_level(Integer):
    """
    Level of detail for solution statistics.
    """
    _version = '251'
    fluent_name = 'statistics-level'
    _python_name = 'statistics_level'

class miscellaneous(Group):
    """
    Flexible numeris object.
    """
    _version = '251'
    fluent_name = 'miscellaneous'
    _python_name = 'miscellaneous'
    child_names = ['compute_statistics', 'statistics_level']
    _child_classes = dict(
        compute_statistics=compute_statistics,
        statistics_level=statistics_level,
    )

class set_settings_to_default(Command):
    """
    Set contact solution stabilization to default.
    """
    _version = '251'
    fluent_name = 'set-settings-to-default'
    _python_name = 'set_settings_to_default'

class contact_solution_controls(Group):
    """
    Solver controls for contact marks method.
    """
    _version = '251'
    fluent_name = 'contact-solution-controls'
    _python_name = 'contact_solution_controls'
    child_names = ['solution_stabilization', 'verbosity', 'parameters', 'spatial', 'transient', 'amg', 'models', 'methods', 'miscellaneous']
    command_names = ['set_settings_to_default']
    _child_classes = dict(
        solution_stabilization=solution_stabilization_1,
        verbosity=verbosity_14,
        parameters=parameters_3,
        spatial=spatial,
        transient=transient,
        amg=amg,
        models=models_2,
        methods=methods_2,
        miscellaneous=miscellaneous,
        set_settings_to_default=set_settings_to_default,
    )

class equations_child(Boolean):
    """
    'child_object_type' of equations.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'equations_child'

class equations(NamedObject[equations_child], CreatableNamedObjectMixin[equations_child]):
    """
    Equations to be solved.
    """
    _version = '251'
    fluent_name = 'equations'
    _python_name = 'equations'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = equations_child

class min_pressure(Real):
    """
    Minimum vapor pressure limit for cavitation model.
    """
    _version = '251'
    fluent_name = 'min-pressure'
    _python_name = 'min_pressure'

class max_pressure(Real):
    """
    Maximum allowable absolute pressure.
    """
    _version = '251'
    fluent_name = 'max-pressure'
    _python_name = 'max_pressure'

class min_temperature_1(Real):
    """
    Minimum allowable temperature.
    """
    _version = '251'
    fluent_name = 'min-temperature'
    _python_name = 'min_temperature'

class max_temperature(Real):
    """
    Maximum allowable temperature.
    """
    _version = '251'
    fluent_name = 'max-temperature'
    _python_name = 'max_temperature'

class min_tke(Real):
    """
    Minimum allowable k.
    """
    _version = '251'
    fluent_name = 'min-tke'
    _python_name = 'min_tke'

class min_lam_tke(Real):
    """
    Minimum allowable kl.
    """
    _version = '251'
    fluent_name = 'min-lam-tke'
    _python_name = 'min_lam_tke'

class min_des_tke(Real):
    """
    Minimum allowable k.
    """
    _version = '251'
    fluent_name = 'min-des-tke'
    _python_name = 'min_des_tke'

class min_epsilon(Real):
    """
    Minimum allowable epsilon.
    """
    _version = '251'
    fluent_name = 'min-epsilon'
    _python_name = 'min_epsilon'

class min_des_epsilon(Real):
    """
    Minimum allowable epsilon.
    """
    _version = '251'
    fluent_name = 'min-des-epsilon'
    _python_name = 'min_des_epsilon'

class min_v2f_tke(Real):
    """
    Minimum allowable k.
    """
    _version = '251'
    fluent_name = 'min-v2f-tke'
    _python_name = 'min_v2f_tke'

class min_v2f_epsilon(Real):
    """
    Minimum allowable epsilon.
    """
    _version = '251'
    fluent_name = 'min-v2f-epsilon'
    _python_name = 'min_v2f_epsilon'

class min_vel_var_scale(Real):
    """
    Minimum allowable v2.
    """
    _version = '251'
    fluent_name = 'min-vel-var-scale'
    _python_name = 'min_vel_var_scale'

class min_elliptic_relax_func(Real):
    """
    Minimum allowable f.
    """
    _version = '251'
    fluent_name = 'min-elliptic-relax-func'
    _python_name = 'min_elliptic_relax_func'

class min_omega(Real):
    """
    Minimum allowable omega.
    """
    _version = '251'
    fluent_name = 'min-omega'
    _python_name = 'min_omega'

class min_des_omega(Real):
    """
    Minimum allowable omega.
    """
    _version = '251'
    fluent_name = 'min-des-omega'
    _python_name = 'min_des_omega'

class max_turb_visc_ratio(Real):
    """
    Maximum allowable turbulent/laminar viscosity ratio.
    """
    _version = '251'
    fluent_name = 'max-turb-visc-ratio'
    _python_name = 'max_turb_visc_ratio'

class positivity_rate(Real):
    """
    Positivity Rate Limit.
    """
    _version = '251'
    fluent_name = 'positivity-rate'
    _python_name = 'positivity_rate'

class min_vol_frac_for_matrix_sol(Real):
    """
    Minimum Vol. Frac. for Matrix Solution.
    """
    _version = '251'
    fluent_name = 'min-vol-frac-for-matrix-sol'
    _python_name = 'min_vol_frac_for_matrix_sol'

class limits(Group):
    """
    Solver limits for the values of various solution variables.
    """
    _version = '251'
    fluent_name = 'limits'
    _python_name = 'limits'
    child_names = ['min_pressure', 'max_pressure', 'min_temperature', 'max_temperature', 'min_tke', 'min_lam_tke', 'min_des_tke', 'min_epsilon', 'min_des_epsilon', 'min_v2f_tke', 'min_v2f_epsilon', 'min_vel_var_scale', 'min_elliptic_relax_func', 'min_omega', 'min_des_omega', 'max_turb_visc_ratio', 'positivity_rate', 'min_vol_frac_for_matrix_sol']
    _child_classes = dict(
        min_pressure=min_pressure,
        max_pressure=max_pressure,
        min_temperature=min_temperature_1,
        max_temperature=max_temperature,
        min_tke=min_tke,
        min_lam_tke=min_lam_tke,
        min_des_tke=min_des_tke,
        min_epsilon=min_epsilon,
        min_des_epsilon=min_des_epsilon,
        min_v2f_tke=min_v2f_tke,
        min_v2f_epsilon=min_v2f_epsilon,
        min_vel_var_scale=min_vel_var_scale,
        min_elliptic_relax_func=min_elliptic_relax_func,
        min_omega=min_omega,
        min_des_omega=min_des_omega,
        max_turb_visc_ratio=max_turb_visc_ratio,
        positivity_rate=positivity_rate,
        min_vol_frac_for_matrix_sol=min_vol_frac_for_matrix_sol,
    )

class termination_criteria(Real):
    """
    Multigrid termination criterion.
    """
    _version = '251'
    fluent_name = 'termination-criteria'
    _python_name = 'termination_criteria'

class residual_reduction_tolerance(Real):
    """
    Multigrid residual reduction tolerance.
    """
    _version = '251'
    fluent_name = 'residual-reduction-tolerance'
    _python_name = 'residual_reduction_tolerance'

class method_9(String, AllowedValuesMixin):
    """
    Multigrid method.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class stabilization(String, AllowedValuesMixin):
    """
    Multigrid stabilization.
    """
    _version = '251'
    fluent_name = 'stabilization'
    _python_name = 'stabilization'

class mg_controls_1_child(Group):
    """
    'child_object_type' of mg_controls.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'mg_controls_child'
    child_names = ['cycle_type', 'termination_criteria', 'residual_reduction_tolerance', 'method', 'stabilization']
    _child_classes = dict(
        cycle_type=cycle_type,
        termination_criteria=termination_criteria,
        residual_reduction_tolerance=residual_reduction_tolerance,
        method=method_9,
        stabilization=stabilization,
    )

class mg_controls_1(NamedObject[mg_controls_1_child], CreatableNamedObjectMixin[mg_controls_1_child]):
    """
    Multi-grid controls object.
    """
    _version = '251'
    fluent_name = 'mg-controls'
    _python_name = 'mg_controls'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = mg_controls_1_child

class pre_sweeps_1(Integer):
    """
    Number of pre-relaxations for fixed cycles.
    """
    _version = '251'
    fluent_name = 'pre-sweeps'
    _python_name = 'pre_sweeps'

class fixed_cycle_parameters_1(Group):
    """
    'fixed_cycle_parameters' child.
    """
    _version = '251'
    fluent_name = 'fixed-cycle-parameters'
    _python_name = 'fixed_cycle_parameters'
    child_names = ['pre_sweeps', 'post_sweeps', 'max_cycle']
    _child_classes = dict(
        pre_sweeps=pre_sweeps_1,
        post_sweeps=post_sweeps,
        max_cycle=max_cycle,
    )

class max_coarse_levels(Integer):
    """
    Maximum number of coarse grid levels.
    """
    _version = '251'
    fluent_name = 'max-coarse-levels'
    _python_name = 'max_coarse_levels'

class conservative_coarsening(Boolean):
    """
    Use conservative AMG coarsening?.
    """
    _version = '251'
    fluent_name = 'conservative-coarsening?'
    _python_name = 'conservative_coarsening'

class aggressive_coarsening(Boolean):
    """
    Enable aggressive AMG coarsening for scalar equation systems.
    """
    _version = '251'
    fluent_name = 'aggressive-coarsening?'
    _python_name = 'aggressive_coarsening'

class laplace_coarsening(Boolean):
    """
    AMG laplace coarsening options.
    """
    _version = '251'
    fluent_name = 'laplace-coarsening?'
    _python_name = 'laplace_coarsening'

class coarsening_parameters_1(Group):
    """
    'coarsening_parameters' child.
    """
    _version = '251'
    fluent_name = 'coarsening-parameters'
    _python_name = 'coarsening_parameters'
    child_names = ['max_coarse_levels', 'coarsen_by_interval', 'conservative_coarsening', 'aggressive_coarsening', 'laplace_coarsening']
    _child_classes = dict(
        max_coarse_levels=max_coarse_levels,
        coarsen_by_interval=coarsen_by_interval,
        conservative_coarsening=conservative_coarsening,
        aggressive_coarsening=aggressive_coarsening,
        laplace_coarsening=laplace_coarsening,
    )

class scalar_parameters(Group):
    """
    AMG scalar parameters object.
    """
    _version = '251'
    fluent_name = 'scalar-parameters'
    _python_name = 'scalar_parameters'
    child_names = ['fixed_cycle_parameters', 'coarsening_parameters', 'smoother_type']
    _child_classes = dict(
        fixed_cycle_parameters=fixed_cycle_parameters_1,
        coarsening_parameters=coarsening_parameters_1,
        smoother_type=smoother_type,
    )

class pre_sweeps_2(Integer):
    """
    Coupled:number of pre-relaxations for fixed cycles.
    """
    _version = '251'
    fluent_name = 'pre-sweeps'
    _python_name = 'pre_sweeps'

class post_sweeps_1(Integer):
    """
    Coupled:number of post-relaxations for fixed cycles.
    """
    _version = '251'
    fluent_name = 'post-sweeps'
    _python_name = 'post_sweeps'

class max_cycle_1(Integer):
    """
    Coupled:maximum number of cycles.
    """
    _version = '251'
    fluent_name = 'max-cycle'
    _python_name = 'max_cycle'

class fixed_cycle_parameters_2(Group):
    """
    'fixed_cycle_parameters' child.
    """
    _version = '251'
    fluent_name = 'fixed-cycle-parameters'
    _python_name = 'fixed_cycle_parameters'
    child_names = ['pre_sweeps', 'post_sweeps', 'max_cycle']
    _child_classes = dict(
        pre_sweeps=pre_sweeps_2,
        post_sweeps=post_sweeps_1,
        max_cycle=max_cycle_1,
    )

class max_coarse_levels_1(Integer):
    """
    Coupled:maximum number of coarse grid levels.
    """
    _version = '251'
    fluent_name = 'max-coarse-levels'
    _python_name = 'max_coarse_levels'

class coarsen_by_interval_1(Integer):
    """
    Coupled:coarsen by interval.
    """
    _version = '251'
    fluent_name = 'coarsen-by-interval'
    _python_name = 'coarsen_by_interval'

class aggressive_coarsening_1(Boolean):
    """
    Enable aggressive AMG coarsening for coupled equation systems.
    """
    _version = '251'
    fluent_name = 'aggressive-coarsening?'
    _python_name = 'aggressive_coarsening'

class coarsening_parameters_2(Group):
    """
    'coarsening_parameters' child.
    """
    _version = '251'
    fluent_name = 'coarsening-parameters'
    _python_name = 'coarsening_parameters'
    child_names = ['max_coarse_levels', 'coarsen_by_interval', 'conservative_coarsening', 'aggressive_coarsening', 'laplace_coarsening']
    _child_classes = dict(
        max_coarse_levels=max_coarse_levels_1,
        coarsen_by_interval=coarsen_by_interval_1,
        conservative_coarsening=conservative_coarsening,
        aggressive_coarsening=aggressive_coarsening_1,
        laplace_coarsening=laplace_coarsening,
    )

class smoother_type_1(String, AllowedValuesMixin):
    """
    Coupled:smoother type.
    """
    _version = '251'
    fluent_name = 'smoother-type'
    _python_name = 'smoother_type'

class coupled_parameters(Group):
    """
    AMG coupled-parameters object.
    """
    _version = '251'
    fluent_name = 'coupled-parameters'
    _python_name = 'coupled_parameters'
    child_names = ['fixed_cycle_parameters', 'coarsening_parameters', 'smoother_type']
    _child_classes = dict(
        fixed_cycle_parameters=fixed_cycle_parameters_2,
        coarsening_parameters=coarsening_parameters_2,
        smoother_type=smoother_type_1,
    )

class sweeps(Integer):
    """
    Number of sweeps for flexible cycle.
    """
    _version = '251'
    fluent_name = 'sweeps'
    _python_name = 'sweeps'

class max_fine_relaxations(Integer):
    """
    Maximum number of fine level relaxations for flexible cycle.
    """
    _version = '251'
    fluent_name = 'max-fine-relaxations'
    _python_name = 'max_fine_relaxations'

class max_coarse_relaxations(Integer):
    """
    Maximum number of coarse level relaxations for flexible cycle.
    """
    _version = '251'
    fluent_name = 'max-coarse-relaxations'
    _python_name = 'max_coarse_relaxations'

class flexible_cycle_parameters(Group):
    """
    AMG flexible cycle paramters object.
    """
    _version = '251'
    fluent_name = 'flexible-cycle-parameters'
    _python_name = 'flexible_cycle_parameters'
    child_names = ['sweeps', 'max_fine_relaxations', 'max_coarse_relaxations']
    _child_classes = dict(
        sweeps=sweeps,
        max_fine_relaxations=max_fine_relaxations,
        max_coarse_relaxations=max_coarse_relaxations,
    )

class verbosity_15(Integer):
    """
    Multigrid verbosity.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class options_10(Group):
    """
    AMG options object.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['verbosity']
    _child_classes = dict(
        verbosity=verbosity_15,
    )

class amg_controls(Group):
    """
    AMG controls object.
    """
    _version = '251'
    fluent_name = 'amg-controls'
    _python_name = 'amg_controls'
    child_names = ['scalar_parameters', 'coupled_parameters', 'flexible_cycle_parameters', 'options']
    _child_classes = dict(
        scalar_parameters=scalar_parameters,
        coupled_parameters=coupled_parameters,
        flexible_cycle_parameters=flexible_cycle_parameters,
        options=options_10,
    )

class pre_sweeps_3(Integer):
    """
    Number of fine grid relaxations.
    """
    _version = '251'
    fluent_name = 'pre-sweeps'
    _python_name = 'pre_sweeps'

class post_sweeps_2(Integer):
    """
    Number of relaxations after interpolation.
    """
    _version = '251'
    fluent_name = 'post-sweeps'
    _python_name = 'post_sweeps'

class fixed_cycle_parameters_3(Group):
    """
    FAS multigrid fixed cycle parameters object.
    """
    _version = '251'
    fluent_name = 'fixed-cycle-parameters'
    _python_name = 'fixed_cycle_parameters'
    child_names = ['pre_sweeps', 'post_sweeps']
    _child_classes = dict(
        pre_sweeps=pre_sweeps_3,
        post_sweeps=post_sweeps_2,
    )

class max_coarse_levels_2(Integer):
    """
    Number of coarse grid levels.
    """
    _version = '251'
    fluent_name = 'max-coarse-levels'
    _python_name = 'max_coarse_levels'

class coarsen_by_interval_2(Integer):
    """
    Coarsen-by interval.
    """
    _version = '251'
    fluent_name = 'coarsen-by-interval'
    _python_name = 'coarsen_by_interval'

class coarsening_parameters_3(Group):
    """
    FAS multigrid coarsening parameters object.
    """
    _version = '251'
    fluent_name = 'coarsening-parameters'
    _python_name = 'coarsening_parameters'
    child_names = ['max_coarse_levels', 'coarsen_by_interval']
    _child_classes = dict(
        max_coarse_levels=max_coarse_levels_2,
        coarsen_by_interval=coarsen_by_interval_2,
    )

class courant_number_reduction(Real):
    """
    Coarse-grid Courant number reduction factor.
    """
    _version = '251'
    fluent_name = 'courant-number-reduction'
    _python_name = 'courant_number_reduction'

class correction_reduction(Real):
    """
    Correction relaxation factor.
    """
    _version = '251'
    fluent_name = 'correction-reduction'
    _python_name = 'correction_reduction'

class correction_smoothing(Real):
    """
    Correction smoothing factor.
    """
    _version = '251'
    fluent_name = 'correction-smoothing'
    _python_name = 'correction_smoothing'

class species_correction_reduction(Real):
    """
    Species relaxation factor.
    """
    _version = '251'
    fluent_name = 'species-correction-reduction'
    _python_name = 'species_correction_reduction'

class relaxation_factor_2(Group):
    """
    FAS multigrid relaxation factor object.
    """
    _version = '251'
    fluent_name = 'relaxation-factor'
    _python_name = 'relaxation_factor'
    child_names = ['courant_number_reduction', 'correction_reduction', 'correction_smoothing', 'species_correction_reduction']
    _child_classes = dict(
        courant_number_reduction=courant_number_reduction,
        correction_reduction=correction_reduction,
        correction_smoothing=correction_smoothing,
        species_correction_reduction=species_correction_reduction,
    )

class options_11(Group):
    """
    FAS multigrid options object.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['verbosity']
    _child_classes = dict(
        verbosity=verbosity_15,
    )

class fas_mg_controls(Group):
    """
    FAS multigrid controls object.
    """
    _version = '251'
    fluent_name = 'fas-mg-controls'
    _python_name = 'fas_mg_controls'
    child_names = ['fixed_cycle_parameters', 'coarsening_parameters', 'relaxation_factor', 'options']
    _child_classes = dict(
        fixed_cycle_parameters=fixed_cycle_parameters_3,
        coarsening_parameters=coarsening_parameters_3,
        relaxation_factor=relaxation_factor_2,
        options=options_11,
    )

class enable_gpu(Boolean):
    """
    Enable/Disable on GPGPU.
    """
    _version = '251'
    fluent_name = 'enable-gpu?'
    _python_name = 'enable_gpu'

class term_criterion(Real):
    """
    Termination criterion.
    """
    _version = '251'
    fluent_name = 'term-criterion'
    _python_name = 'term_criterion'

class solver_1(String, AllowedValuesMixin):
    """
    GPGPU equation solver.
    """
    _version = '251'
    fluent_name = 'solver'
    _python_name = 'solver'

class max_num_cycle(Integer):
    """
    Maximum number of cycles.
    """
    _version = '251'
    fluent_name = 'max-num-cycle'
    _python_name = 'max_num_cycle'

class coarsen_by_size(Integer):
    """
    GPGPU equation coarsen by size.
    """
    _version = '251'
    fluent_name = 'coarsen-by-size'
    _python_name = 'coarsen_by_size'

class pre_sweep(Integer):
    """
    Number of fine grid relaxations.
    """
    _version = '251'
    fluent_name = 'pre-sweep'
    _python_name = 'pre_sweep'

class post_sweep(Integer):
    """
    Number of relaxations after interpolation.
    """
    _version = '251'
    fluent_name = 'post-sweep'
    _python_name = 'post_sweep'

class smoother(String):
    """
    Smoother.
    """
    _version = '251'
    fluent_name = 'smoother'
    _python_name = 'smoother'

class amg_gpgpu_options_child(Group):
    """
    'child_object_type' of amg_gpgpu_options.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'amg_gpgpu_options_child'
    child_names = ['enable_gpu', 'term_criterion', 'solver', 'max_num_cycle', 'coarsen_by_size', 'pre_sweep', 'post_sweep', 'smoother']
    _child_classes = dict(
        enable_gpu=enable_gpu,
        term_criterion=term_criterion,
        solver=solver_1,
        max_num_cycle=max_num_cycle,
        coarsen_by_size=coarsen_by_size,
        pre_sweep=pre_sweep,
        post_sweep=post_sweep,
        smoother=smoother,
    )

class amg_gpgpu_options(NamedObject[amg_gpgpu_options_child], CreatableNamedObjectMixin[amg_gpgpu_options_child]):
    """
    AMG GPGPU options object.
    """
    _version = '251'
    fluent_name = 'amg-gpgpu-options'
    _python_name = 'amg_gpgpu_options'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = amg_gpgpu_options_child

class multi_grid(Group):
    """
    Multi-grid object.
    """
    _version = '251'
    fluent_name = 'multi-grid'
    _python_name = 'multi_grid'
    child_names = ['mg_controls', 'amg_controls', 'fas_mg_controls', 'amg_gpgpu_options']
    _child_classes = dict(
        mg_controls=mg_controls_1,
        amg_controls=amg_controls,
        fas_mg_controls=fas_mg_controls,
        amg_gpgpu_options=amg_gpgpu_options,
    )

class coefficient(Real):
    """
    Multi-stage coefficient.
    """
    _version = '251'
    fluent_name = 'coefficient'
    _python_name = 'coefficient'

class update_dissipation(Boolean):
    """
    Update artificial dissipation at stage.
    """
    _version = '251'
    fluent_name = 'update-dissipation?'
    _python_name = 'update_dissipation'

class update_viscous(Boolean):
    """
    Update viscous stresses at stage.
    """
    _version = '251'
    fluent_name = 'update-viscous?'
    _python_name = 'update_viscous'

class multi_stage_child(Group):
    """
    'child_object_type' of multi_stage.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'multi_stage_child'
    child_names = ['coefficient', 'update_dissipation', 'update_viscous']
    _child_classes = dict(
        coefficient=coefficient,
        update_dissipation=update_dissipation,
        update_viscous=update_viscous,
    )

class multi_stage(ListObject[multi_stage_child]):
    """
    Multi-stage settings object.
    """
    _version = '251'
    fluent_name = 'multi-stage'
    _python_name = 'multi_stage'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = multi_stage_child

class limiter_type(String, AllowedValuesMixin):
    """
    Slope-limiter type.
    """
    _version = '251'
    fluent_name = 'limiter-type'
    _python_name = 'limiter_type'

class cell_to_limiting(String, AllowedValuesMixin):
    """
    Slope-limiter direction.
    """
    _version = '251'
    fluent_name = 'cell-to-limiting'
    _python_name = 'cell_to_limiting'

class limiter_filter(Boolean):
    """
    Enable limiter filter?.
    """
    _version = '251'
    fluent_name = 'limiter-filter?'
    _python_name = 'limiter_filter'

class spatial_discretization_limiter(Group):
    """
    The slope limiter set object.
    """
    _version = '251'
    fluent_name = 'spatial-discretization-limiter'
    _python_name = 'spatial_discretization_limiter'
    child_names = ['limiter_type', 'cell_to_limiting', 'limiter_filter']
    _child_classes = dict(
        limiter_type=limiter_type,
        cell_to_limiting=cell_to_limiting,
        limiter_filter=limiter_filter,
    )

class enable_pseudo_time_method(Boolean):
    """
    Enable/disable pseudo time method.
    """
    _version = '251'
    fluent_name = 'enable-pseudo-time-method?'
    _python_name = 'enable_pseudo_time_method'

class pseudo_time_scale_factor(Real):
    """
    Pseudo time scale factor.
    """
    _version = '251'
    fluent_name = 'pseudo-time-scale-factor'
    _python_name = 'pseudo_time_scale_factor'

class implicit_under_relaxation_factor(Real):
    """
    Implicit under-relaxation factor.
    """
    _version = '251'
    fluent_name = 'implicit-under-relaxation-factor'
    _python_name = 'implicit_under_relaxation_factor'

class local_dt_child(Group):
    """
    'child_object_type' of local_dt.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'local_dt_child'
    child_names = ['enable_pseudo_time_method', 'pseudo_time_scale_factor', 'implicit_under_relaxation_factor']
    _child_classes = dict(
        enable_pseudo_time_method=enable_pseudo_time_method,
        pseudo_time_scale_factor=pseudo_time_scale_factor,
        implicit_under_relaxation_factor=implicit_under_relaxation_factor,
    )

class local_dt(NamedObject[local_dt_child], CreatableNamedObjectMixin[local_dt_child]):
    """
    Local time step method object.
    """
    _version = '251'
    fluent_name = 'local-dt'
    _python_name = 'local_dt'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = local_dt_child

class global_dt_child(Group):
    """
    'child_object_type' of global_dt.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'global_dt_child'
    child_names = ['enable_pseudo_time_method', 'implicit_under_relaxation_factor', 'pseudo_time_scale_factor']
    _child_classes = dict(
        enable_pseudo_time_method=enable_pseudo_time_method,
        implicit_under_relaxation_factor=implicit_under_relaxation_factor,
        pseudo_time_scale_factor=pseudo_time_scale_factor,
    )

class global_dt(NamedObject[global_dt_child], CreatableNamedObjectMixin[global_dt_child]):
    """
    Global time step method object.
    """
    _version = '251'
    fluent_name = 'global-dt'
    _python_name = 'global_dt'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = global_dt_child

class pseudo_time_method_usage(Group):
    """
    Psueo time method expert settings object.
    """
    _version = '251'
    fluent_name = 'pseudo-time-method-usage'
    _python_name = 'pseudo_time_method_usage'
    child_names = ['local_dt', 'global_dt']
    _child_classes = dict(
        local_dt=local_dt,
        global_dt=global_dt,
    )

class linearized_mass_transfer_udf(Boolean):
    """
    Enable/disable linearized mass transfer UDF for multiphase flows.
    """
    _version = '251'
    fluent_name = 'linearized-mass-transfer-udf?'
    _python_name = 'linearized_mass_transfer_udf'

class singhal_cavitation_model(Boolean):
    """
    Enable/disable Singhal-et-al cavitation model.
    """
    _version = '251'
    fluent_name = 'singhal-cavitation-model?'
    _python_name = 'singhal_cavitation_model'

class wall_temp_alternate_formulation(Boolean):
    """
    Enable/disable alternate formulation for wall temperatures.
    """
    _version = '251'
    fluent_name = 'wall-temp-alternate-formulation?'
    _python_name = 'wall_temp_alternate_formulation'

class save_cell_residuals(Boolean):
    """
    Retain cell residuals for post-processing.
    """
    _version = '251'
    fluent_name = 'save-cell-residuals'
    _python_name = 'save_cell_residuals'

class keep_temporary_memory(Boolean):
    """
    Retention of temporary solver memory.
    """
    _version = '251'
    fluent_name = 'keep-temporary-memory'
    _python_name = 'keep_temporary_memory'

class allow_all_disc_schemes(Boolean):
    """
    Enable/disable selection of all applicable discretization schemes.
    """
    _version = '251'
    fluent_name = 'allow-all-disc-schemes'
    _python_name = 'allow_all_disc_schemes'

class explicit_under_relaxation_value(Real):
    """
    Explicit under-relaxation value.
    """
    _version = '251'
    fluent_name = 'explicit-under-relaxation-value'
    _python_name = 'explicit_under_relaxation_value'

class nci_secondary_gradient_child(Boolean):
    """
    'child_object_type' of nci_secondary_gradient.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'nci_secondary_gradient_child'

class nci_secondary_gradient(NamedObject[nci_secondary_gradient_child], CreatableNamedObjectMixin[nci_secondary_gradient_child]):
    """
    NCI Secondary Gradient Correction object.
    """
    _version = '251'
    fluent_name = 'nci-secondary-gradient'
    _python_name = 'nci_secondary_gradient'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = nci_secondary_gradient_child

class expert_9(Group):
    """
    Expert options object.
    """
    _version = '251'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['spatial_discretization_limiter', 'pseudo_time_method_usage', 'linearized_mass_transfer_udf', 'singhal_cavitation_model', 'wall_temp_alternate_formulation', 'save_cell_residuals', 'keep_temporary_memory', 'allow_all_disc_schemes', 'explicit_under_relaxation_value', 'nci_secondary_gradient']
    _child_classes = dict(
        spatial_discretization_limiter=spatial_discretization_limiter,
        pseudo_time_method_usage=pseudo_time_method_usage,
        linearized_mass_transfer_udf=linearized_mass_transfer_udf,
        singhal_cavitation_model=singhal_cavitation_model,
        wall_temp_alternate_formulation=wall_temp_alternate_formulation,
        save_cell_residuals=save_cell_residuals,
        keep_temporary_memory=keep_temporary_memory,
        allow_all_disc_schemes=allow_all_disc_schemes,
        explicit_under_relaxation_value=explicit_under_relaxation_value,
        nci_secondary_gradient=nci_secondary_gradient,
    )

class update_stage_gradients(Boolean):
    """
    Update/freeze reconstruction gradients at each explicit stage.
    """
    _version = '251'
    fluent_name = 'update-stage-gradients'
    _python_name = 'update_stage_gradients'

class two_stage(Boolean):
    """
    Enable/disable two-stage Runge-Kutta scheme.
    """
    _version = '251'
    fluent_name = 'two-stage?'
    _python_name = 'two_stage'

class ten_stage(Boolean):
    """
    Enable/disable optimized ten-stage Runge-Kutta scheme.
    """
    _version = '251'
    fluent_name = 'ten-stage?'
    _python_name = 'ten_stage'

class default_multi_stage(Boolean):
    """
    Enable/disable default multi-stage Runge-Kutta scheme.
    """
    _version = '251'
    fluent_name = 'default-multi-stage?'
    _python_name = 'default_multi_stage'

class runge_kutta(Group):
    """
    Runge-Kutta schemes setup object.
    """
    _version = '251'
    fluent_name = 'runge-kutta'
    _python_name = 'runge_kutta'
    child_names = ['two_stage', 'ten_stage', 'default_multi_stage']
    _child_classes = dict(
        two_stage=two_stage,
        ten_stage=ten_stage,
        default_multi_stage=default_multi_stage,
    )

class fast_transient_settings(Group):
    """
    The fast transient settings object.
    """
    _version = '251'
    fluent_name = 'fast-transient-settings'
    _python_name = 'fast_transient_settings'
    child_names = ['update_stage_gradients', 'runge_kutta']
    _child_classes = dict(
        update_stage_gradients=update_stage_gradients,
        runge_kutta=runge_kutta,
    )

class relaxation_method_1(String):
    """
    The solver relaxation method.
    """
    _version = '251'
    fluent_name = 'relaxation-method'
    _python_name = 'relaxation_method'

class correction_tolerance_child(Real):
    """
    'child_object_type' of correction_tolerance.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'correction_tolerance_child'

class correction_tolerance(NamedObject[correction_tolerance_child], CreatableNamedObjectMixin[correction_tolerance_child]):
    """
    Correction tolerance object.
    """
    _version = '251'
    fluent_name = 'correction-tolerance'
    _python_name = 'correction_tolerance'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = correction_tolerance_child

class relaxation(Real):
    """
    The under-relaxation for heat flux coefficient.
    """
    _version = '251'
    fluent_name = 'relaxation'
    _python_name = 'relaxation'

class flux(String, AllowedValuesMixin):
    """
    The heat flux calculation method for solid zones.
    """
    _version = '251'
    fluent_name = 'flux'
    _python_name = 'flux'

class gradient(String, AllowedValuesMixin):
    """
    The temperature gradient calculation method for solid zones.
    """
    _version = '251'
    fluent_name = 'gradient'
    _python_name = 'gradient'

class anisotropic_solid_heat_transfer(Group):
    """
    Anisotropic solid heat transfer object.
    """
    _version = '251'
    fluent_name = 'anisotropic-solid-heat-transfer'
    _python_name = 'anisotropic_solid_heat_transfer'
    child_names = ['relaxation', 'flux', 'gradient']
    _child_classes = dict(
        relaxation=relaxation,
        flux=flux,
        gradient=gradient,
    )

class linearize(Boolean):
    """
    Activate continuity transient term linearization?.
    """
    _version = '251'
    fluent_name = 'linearize?'
    _python_name = 'linearize'

class threshold(Real):
    """
    Relative density threshold.
    """
    _version = '251'
    fluent_name = 'threshold'
    _python_name = 'threshold'

class continuity_transient_term_linearization(Group):
    """
    Continuity transient term linearization.
    """
    _version = '251'
    fluent_name = 'continuity-transient-term-linearization'
    _python_name = 'continuity_transient_term_linearization'
    child_names = ['linearize', 'threshold']
    _child_classes = dict(
        linearize=linearize,
        threshold=threshold,
    )

class enthalpy_reference_temperature(Real):
    """
    Enthalpy reference temperature.
    """
    _version = '251'
    fluent_name = 'enthalpy-reference-temperature'
    _python_name = 'enthalpy_reference_temperature'

class advanced_3(Group):
    """
    Solution method advanced object.
    """
    _version = '251'
    fluent_name = 'advanced'
    _python_name = 'advanced'
    child_names = ['multi_grid', 'multi_stage', 'expert', 'fast_transient_settings', 'relaxation_method', 'correction_tolerance', 'anisotropic_solid_heat_transfer', 'continuity_transient_term_linearization', 'enthalpy_reference_temperature']
    _child_classes = dict(
        multi_grid=multi_grid,
        multi_stage=multi_stage,
        expert=expert_9,
        fast_transient_settings=fast_transient_settings,
        relaxation_method=relaxation_method_1,
        correction_tolerance=correction_tolerance,
        anisotropic_solid_heat_transfer=anisotropic_solid_heat_transfer,
        continuity_transient_term_linearization=continuity_transient_term_linearization,
        enthalpy_reference_temperature=enthalpy_reference_temperature,
    )

class species_urf_together(Boolean):
    """
    Enable/disable Set all species URFs together.
    """
    _version = '251'
    fluent_name = 'species-urf-together'
    _python_name = 'species_urf_together'

class reset_solution_controls(Command):
    """
    Reset the solution controls to default.
    """
    _version = '251'
    fluent_name = 'reset-solution-controls'
    _python_name = 'reset_solution_controls'

class reset_amg_controls(Command):
    """
    Rest AMG controls to default.
    """
    _version = '251'
    fluent_name = 'reset-amg-controls'
    _python_name = 'reset_amg_controls'

class reset_multi_stage_parameters(Command):
    """
    Reset multi-stage parameters.
    """
    _version = '251'
    fluent_name = 'reset-multi-stage-parameters'
    _python_name = 'reset_multi_stage_parameters'

class reset_limits(Command):
    """
    Reset limits to default.
    """
    _version = '251'
    fluent_name = 'reset-limits'
    _python_name = 'reset_limits'

class reset_pseudo_time_method_generic(Command):
    """
    Set pseudo time method parameters to default.
    """
    _version = '251'
    fluent_name = 'reset-pseudo-time-method-generic'
    _python_name = 'reset_pseudo_time_method_generic'

class reset_pseudo_time_method_equations(Command):
    """
    Set pseudo time method equation specific usage to default.
    """
    _version = '251'
    fluent_name = 'reset-pseudo-time-method-equations'
    _python_name = 'reset_pseudo_time_method_equations'

class reset_pseudo_time_method_relaxations(Command):
    """
    Set pseudo time method relaxation factors to default.
    """
    _version = '251'
    fluent_name = 'reset-pseudo-time-method-relaxations'
    _python_name = 'reset_pseudo_time_method_relaxations'

class reset_pseudo_time_method_scale_factors(Command):
    """
    Set pseudo time method time scale factors to default.
    """
    _version = '251'
    fluent_name = 'reset-pseudo-time-method-scale-factors'
    _python_name = 'reset_pseudo_time_method_scale_factors'

class controls_1(Group):
    """
    Solution controls object.
    """
    _version = '251'
    fluent_name = 'controls'
    _python_name = 'controls'
    child_names = ['courant_number', 'p_v_controls', 'relaxation_factor', 'under_relaxation', 'pseudo_time_method_local_time_step', 'pseudo_time_explicit_relaxation_factor', 'zonal_pbns_solution_controls', 'acoustics_wave_eqn_controls', 'contact_solution_controls', 'equations', 'limits', 'advanced', 'species_urf_together']
    command_names = ['reset_solution_controls', 'reset_amg_controls', 'reset_multi_stage_parameters', 'reset_limits', 'reset_pseudo_time_method_generic', 'reset_pseudo_time_method_equations', 'reset_pseudo_time_method_relaxations', 'reset_pseudo_time_method_scale_factors']
    _child_classes = dict(
        courant_number=courant_number,
        p_v_controls=p_v_controls,
        relaxation_factor=relaxation_factor_1,
        under_relaxation=under_relaxation_2,
        pseudo_time_method_local_time_step=pseudo_time_method_local_time_step,
        pseudo_time_explicit_relaxation_factor=pseudo_time_explicit_relaxation_factor,
        zonal_pbns_solution_controls=zonal_pbns_solution_controls,
        acoustics_wave_eqn_controls=acoustics_wave_eqn_controls,
        contact_solution_controls=contact_solution_controls,
        equations=equations,
        limits=limits,
        advanced=advanced_3,
        species_urf_together=species_urf_together,
        reset_solution_controls=reset_solution_controls,
        reset_amg_controls=reset_amg_controls,
        reset_multi_stage_parameters=reset_multi_stage_parameters,
        reset_limits=reset_limits,
        reset_pseudo_time_method_generic=reset_pseudo_time_method_generic,
        reset_pseudo_time_method_equations=reset_pseudo_time_method_equations,
        reset_pseudo_time_method_relaxations=reset_pseudo_time_method_relaxations,
        reset_pseudo_time_method_scale_factors=reset_pseudo_time_method_scale_factors,
    )

class report_type(String, AllowedValuesMixin):
    """
    The report type; the list may vary on the selected report definition type.
    """
    _version = '251'
    fluent_name = 'report-type'
    _python_name = 'report_type'

class per_zone(Boolean):
    """
    'per_zone' child.
    """
    _version = '251'
    fluent_name = 'per-zone?'
    _python_name = 'per_zone'

class average_over(Integer):
    """
    'average_over' child.
    """
    _version = '251'
    fluent_name = 'average-over'
    _python_name = 'average_over'

class retain_instantaneous_values(Boolean):
    """
    'retain_instantaneous_values' child.
    """
    _version = '251'
    fluent_name = 'retain-instantaneous-values?'
    _python_name = 'retain_instantaneous_values'

class cell_zones_6(StringList, AllowedValuesMixin):
    """
    'cell_zones' child.
    """
    _version = '251'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'

class face_zones(StringList, AllowedValuesMixin):
    """
    'face_zones' child.
    """
    _version = '251'
    fluent_name = 'face-zones'
    _python_name = 'face_zones'

class physics_1(StringList, AllowedValuesMixin):
    """
    'physics' child.
    """
    _version = '251'
    fluent_name = 'physics'
    _python_name = 'physics'

class output_parameter_1(Boolean):
    """
    Option to make report definition available as an output parameter.
    """
    _version = '251'
    fluent_name = 'output-parameter'
    _python_name = 'output_parameter'

class create_output_parameter(Command):
    """
    Option to make report definition available as an output parameter.
    """
    _version = '251'
    fluent_name = 'create-output-parameter'
    _python_name = 'create_output_parameter'

class mesh_1_child(Group):
    """
    'child_object_type' of mesh.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'mesh_child'
    child_names = ['name', 'report_type', 'per_zone', 'average_over', 'retain_instantaneous_values', 'cell_zones', 'face_zones', 'physics', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        report_type=report_type,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        cell_zones=cell_zones_6,
        face_zones=face_zones,
        physics=physics_1,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class mesh_1(NamedObject[mesh_1_child], CreatableNamedObjectMixin[mesh_1_child]):
    """
    The report definition type.
    """
    _version = '251'
    fluent_name = 'mesh'
    _python_name = 'mesh'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = mesh_1_child

class field(String, AllowedValuesMixin):
    """
    'field' child.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class surface_names(StringList, AllowedValuesMixin):
    """
    'surface_names' child.
    """
    _version = '251'
    fluent_name = 'surface-names'
    _python_name = 'surface_names'

class per_surface(Boolean):
    """
    'per_surface' child.
    """
    _version = '251'
    fluent_name = 'per-surface?'
    _python_name = 'per_surface'

class custom_vector(String, AllowedValuesMixin):
    """
    'custom_vector' child.
    """
    _version = '251'
    fluent_name = 'custom-vector'
    _python_name = 'custom_vector'

class geometry_7(StringList, AllowedValuesMixin):
    """
    'geometry' child.
    """
    _version = '251'
    fluent_name = 'geometry'
    _python_name = 'geometry'

class surfaces_4(StringList, AllowedValuesMixin):
    """
    'surfaces' child.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class surface_1_child(Group):
    """
    'child_object_type' of surface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'surface_child'
    child_names = ['name', 'report_type', 'field', 'surface_names', 'per_surface', 'average_over', 'retain_instantaneous_values', 'custom_vector', 'phase', 'physics', 'geometry', 'surfaces', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        report_type=report_type,
        field=field,
        surface_names=surface_names,
        per_surface=per_surface,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        custom_vector=custom_vector,
        phase=phase_26,
        physics=physics_1,
        geometry=geometry_7,
        surfaces=surfaces_4,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class surface_1(NamedObject[surface_1_child], CreatableNamedObjectMixin[surface_1_child]):
    """
    The report definition type.
    """
    _version = '251'
    fluent_name = 'surface'
    _python_name = 'surface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = surface_1_child

class cell_zones_7(StringList, AllowedValuesMixin):
    """
    Cell zones and cell registers and expression volumes.
    """
    _version = '251'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'

class volume_child(Group):
    """
    'child_object_type' of volume.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'volume_child'
    child_names = ['name', 'report_type', 'field', 'cell_zones', 'per_zone', 'average_over', 'retain_instantaneous_values', 'phase', 'physics', 'geometry', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        report_type=report_type,
        field=field,
        cell_zones=cell_zones_7,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        phase=phase_26,
        physics=physics_1,
        geometry=geometry_7,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class volume(NamedObject[volume_child], CreatableNamedObjectMixin[volume_child]):
    """
    The report definition type.
    """
    _version = '251'
    fluent_name = 'volume'
    _python_name = 'volume'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = volume_child

class force_vector(RealList):
    """
    'force_vector' child.
    """
    _version = '251'
    fluent_name = 'force-vector'
    _python_name = 'force_vector'

class reference_frame_6(String, AllowedValuesMixin):
    """
    'reference_frame' child.
    """
    _version = '251'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'

class zones_2(StringList, AllowedValuesMixin):
    """
    'zones' child.
    """
    _version = '251'
    fluent_name = 'zones'
    _python_name = 'zones'

class report_output_type(String, AllowedValuesMixin):
    """
    'report_output_type' child.
    """
    _version = '251'
    fluent_name = 'report-output-type'
    _python_name = 'report_output_type'

class force_child(Group):
    """
    'child_object_type' of force.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'force_child'
    child_names = ['name', 'report_type', 'force_vector', 'reference_frame', 'zones', 'per_zone', 'average_over', 'retain_instantaneous_values', 'report_output_type', 'physics', 'geometry', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        report_type=report_type,
        force_vector=force_vector,
        reference_frame=reference_frame_6,
        zones=zones_2,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        report_output_type=report_output_type,
        physics=physics_1,
        geometry=geometry_7,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class force(NamedObject[force_child], CreatableNamedObjectMixin[force_child]):
    """
    The report definition type.
    """
    _version = '251'
    fluent_name = 'force'
    _python_name = 'force'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = force_child

class lift_child(Group):
    """
    'child_object_type' of lift.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'lift_child'
    child_names = ['name', 'report_type', 'force_vector', 'reference_frame', 'zones', 'per_zone', 'average_over', 'retain_instantaneous_values', 'report_output_type', 'physics', 'geometry', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        report_type=report_type,
        force_vector=force_vector,
        reference_frame=reference_frame_6,
        zones=zones_2,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        report_output_type=report_output_type,
        physics=physics_1,
        geometry=geometry_7,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class lift(NamedObject[lift_child], CreatableNamedObjectMixin[lift_child]):
    """
    The report definition type.
    """
    _version = '251'
    fluent_name = 'lift'
    _python_name = 'lift'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = lift_child

class drag_child(Group):
    """
    'child_object_type' of drag.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'drag_child'
    child_names = ['name', 'report_type', 'force_vector', 'reference_frame', 'zones', 'per_zone', 'average_over', 'retain_instantaneous_values', 'report_output_type', 'physics', 'geometry', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        report_type=report_type,
        force_vector=force_vector,
        reference_frame=reference_frame_6,
        zones=zones_2,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        report_output_type=report_output_type,
        physics=physics_1,
        geometry=geometry_7,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class drag(NamedObject[drag_child], CreatableNamedObjectMixin[drag_child]):
    """
    The report definition type.
    """
    _version = '251'
    fluent_name = 'drag'
    _python_name = 'drag'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = drag_child

class mom_center(RealList):
    """
    'mom_center' child.
    """
    _version = '251'
    fluent_name = 'mom-center'
    _python_name = 'mom_center'

class mom_axis(RealList):
    """
    'mom_axis' child.
    """
    _version = '251'
    fluent_name = 'mom-axis'
    _python_name = 'mom_axis'

class moment_child(Group):
    """
    'child_object_type' of moment.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'moment_child'
    child_names = ['name', 'report_type', 'mom_center', 'mom_axis', 'reference_frame', 'zones', 'per_zone', 'average_over', 'retain_instantaneous_values', 'report_output_type', 'physics', 'geometry', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        report_type=report_type,
        mom_center=mom_center,
        mom_axis=mom_axis,
        reference_frame=reference_frame_6,
        zones=zones_2,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        report_output_type=report_output_type,
        physics=physics_1,
        geometry=geometry_7,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class moment(NamedObject[moment_child], CreatableNamedObjectMixin[moment_child]):
    """
    The report definition type.
    """
    _version = '251'
    fluent_name = 'moment'
    _python_name = 'moment'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = moment_child

class time_1_child(Group):
    """
    'child_object_type' of time.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'time_child'
    child_names = ['output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class time_1(NamedObject[time_1_child], CreatableNamedObjectMixin[time_1_child]):
    """
    Create a new or edit an existing report definition.
    """
    _version = '251'
    fluent_name = 'time'
    _python_name = 'time'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = time_1_child

class boundaries_1(StringList, AllowedValuesMixin):
    """
    'boundaries' child.
    """
    _version = '251'
    fluent_name = 'boundaries'
    _python_name = 'boundaries'

class flux_1_child(Group):
    """
    'child_object_type' of flux.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'flux_child'
    child_names = ['name', 'report_type', 'boundaries', 'per_zone', 'average_over', 'retain_instantaneous_values', 'phase', 'physics', 'geometry', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        report_type=report_type,
        boundaries=boundaries_1,
        per_zone=per_zone,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        phase=phase_26,
        physics=physics_1,
        geometry=geometry_7,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class flux_1(NamedObject[flux_1_child], CreatableNamedObjectMixin[flux_1_child]):
    """
    The report definition type.
    """
    _version = '251'
    fluent_name = 'flux'
    _python_name = 'flux'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = flux_1_child

class vbm_rotor_name(String, AllowedValuesMixin):
    """
    The name of the rotor to report a VBM quantity for that.
    """
    _version = '251'
    fluent_name = 'vbm-rotor-name'
    _python_name = 'vbm_rotor_name'

class report_output_type_1(String, AllowedValuesMixin):
    """
    Answer yes if you would like to calculate the output coefficient; otherwise output value will be calculated.
    """
    _version = '251'
    fluent_name = 'report-output-type'
    _python_name = 'report_output_type'

class vbm_child(Group):
    """
    'child_object_type' of vbm.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'vbm_child'
    child_names = ['name', 'report_type', 'vbm_rotor_name', 'report_output_type', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        report_type=report_type,
        vbm_rotor_name=vbm_rotor_name,
        report_output_type=report_output_type_1,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class vbm(NamedObject[vbm_child], CreatableNamedObjectMixin[vbm_child]):
    """
    The report definition type.
    """
    _version = '251'
    fluent_name = 'vbm'
    _python_name = 'vbm'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = vbm_child

class injection_list(StringList, AllowedValuesMixin):
    """
    'injection_list' child.
    """
    _version = '251'
    fluent_name = 'injection-list'
    _python_name = 'injection_list'

class per_injection(Boolean):
    """
    'per_injection' child.
    """
    _version = '251'
    fluent_name = 'per-injection?'
    _python_name = 'per_injection'

class mass_criterion(Real):
    """
    'mass_criterion' child.
    """
    _version = '251'
    fluent_name = 'mass-criterion'
    _python_name = 'mass_criterion'

class user_specified_origin_and_axis(Boolean):
    """
    'user_specified_origin_and_axis' child.
    """
    _version = '251'
    fluent_name = 'user-specified-origin-and-axis?'
    _python_name = 'user_specified_origin_and_axis'

class show_unsteady_rate(Boolean):
    """
    'show_unsteady_rate' child.
    """
    _version = '251'
    fluent_name = 'show-unsteady-rate?'
    _python_name = 'show_unsteady_rate'

class inj_mass_rate_prev_time(Real):
    """
    'inj_mass_rate_prev_time' child.
    """
    _version = '251'
    fluent_name = 'inj-mass-rate-prev-time'
    _python_name = 'inj_mass_rate_prev_time'

class inj_mass_rate_prev_mass(Real):
    """
    'inj_mass_rate_prev_mass' child.
    """
    _version = '251'
    fluent_name = 'inj-mass-rate-prev-mass'
    _python_name = 'inj_mass_rate_prev_mass'

class inj_mass_rate_last_flow(Real):
    """
    'inj_mass_rate_last_flow' child.
    """
    _version = '251'
    fluent_name = 'inj-mass-rate-last-flow'
    _python_name = 'inj_mass_rate_last_flow'

class inj_mass_rate_last_tstp(Real):
    """
    'inj_mass_rate_last_tstp' child.
    """
    _version = '251'
    fluent_name = 'inj-mass-rate-last-tstp'
    _python_name = 'inj_mass_rate_last_tstp'

class injection_2_child(Group):
    """
    'child_object_type' of injection.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'injection_child'
    child_names = ['name', 'report_type', 'injection_list', 'boundaries', 'physics', 'per_injection', 'average_over', 'retain_instantaneous_values', 'mass_criterion', 'user_specified_origin_and_axis', 'origin', 'axis', 'show_unsteady_rate', 'inj_mass_rate_prev_time', 'inj_mass_rate_prev_mass', 'inj_mass_rate_last_flow', 'inj_mass_rate_last_tstp', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        report_type=report_type,
        injection_list=injection_list,
        boundaries=boundaries_1,
        physics=physics_1,
        per_injection=per_injection,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        mass_criterion=mass_criterion,
        user_specified_origin_and_axis=user_specified_origin_and_axis,
        origin=origin_1,
        axis=axis,
        show_unsteady_rate=show_unsteady_rate,
        inj_mass_rate_prev_time=inj_mass_rate_prev_time,
        inj_mass_rate_prev_mass=inj_mass_rate_prev_mass,
        inj_mass_rate_last_flow=inj_mass_rate_last_flow,
        inj_mass_rate_last_tstp=inj_mass_rate_last_tstp,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class injection_2(NamedObject[injection_2_child], CreatableNamedObjectMixin[injection_2_child]):
    """
    Create a new or edit an existing report definition.
    """
    _version = '251'
    fluent_name = 'injection'
    _python_name = 'injection'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = injection_2_child

class function_name(String, AllowedValuesMixin):
    """
    'function_name' child.
    """
    _version = '251'
    fluent_name = 'function-name'
    _python_name = 'function_name'

class input_params(StringList, AllowedValuesMixin):
    """
    'input_params' child.
    """
    _version = '251'
    fluent_name = 'input-params'
    _python_name = 'input_params'

class user_defined_13_child(Group):
    """
    'child_object_type' of user_defined.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'user_defined_child'
    child_names = ['name', 'average_over', 'retain_instantaneous_values', 'function_name', 'input_params', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        function_name=function_name,
        input_params=input_params,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class user_defined_13(NamedObject[user_defined_13_child], CreatableNamedObjectMixin[user_defined_13_child]):
    """
    The report definition type.
    """
    _version = '251'
    fluent_name = 'user-defined'
    _python_name = 'user_defined'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = user_defined_13_child

class nodal_diameters(StringList, AllowedValuesMixin):
    """
    'nodal_diameters' child.
    """
    _version = '251'
    fluent_name = 'nodal-diameters'
    _python_name = 'nodal_diameters'

class integrate_over(Integer):
    """
    'integrate_over' child.
    """
    _version = '251'
    fluent_name = 'integrate-over'
    _python_name = 'integrate_over'

class normalization(Real):
    """
    'normalization' child.
    """
    _version = '251'
    fluent_name = 'normalization'
    _python_name = 'normalization'

class realcomponent(Boolean):
    """
    'realcomponent' child.
    """
    _version = '251'
    fluent_name = 'realcomponent?'
    _python_name = 'realcomponent'

class aeromechanics_child(Group):
    """
    'child_object_type' of aeromechanics.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'aeromechanics_child'
    child_names = ['name', 'report_type', 'zones', 'per_zone', 'nodal_diameters', 'average_over', 'integrate_over', 'normalization', 'realcomponent', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        report_type=report_type,
        zones=zones_2,
        per_zone=per_zone,
        nodal_diameters=nodal_diameters,
        average_over=average_over,
        integrate_over=integrate_over,
        normalization=normalization,
        realcomponent=realcomponent,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class aeromechanics(NamedObject[aeromechanics_child], CreatableNamedObjectMixin[aeromechanics_child]):
    """
    Create a new or edit an existing report definition.
    """
    _version = '251'
    fluent_name = 'aeromechanics'
    _python_name = 'aeromechanics'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = aeromechanics_child

class icing_3_child(Group):
    """
    'child_object_type' of icing.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'icing_child'
    child_names = ['name', 'report_type', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        report_type=report_type,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class icing_3(NamedObject[icing_3_child], CreatableNamedObjectMixin[icing_3_child]):
    """
    Create a new or edit an existing report definition.
    """
    _version = '251'
    fluent_name = 'icing'
    _python_name = 'icing'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = icing_3_child

class expr_value(Real):
    """
    'expr_value' child.
    """
    _version = '251'
    fluent_name = 'expr-value'
    _python_name = 'expr_value'

class define(String, AllowedValuesMixin):
    """
    'define' child.
    """
    _version = '251'
    fluent_name = 'define'
    _python_name = 'define'

class list_valid_report_names(String, AllowedValuesMixin):
    """
    'list_valid_report_names' child.
    """
    _version = '251'
    fluent_name = 'list-valid-report-names'
    _python_name = 'list_valid_report_names'

class expression_7_child(Group):
    """
    'child_object_type' of expression.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'expression_child'
    child_names = ['name', 'average_over', 'expr_value', 'define', 'list_valid_report_names', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        average_over=average_over,
        expr_value=expr_value,
        define=define,
        list_valid_report_names=list_valid_report_names,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class expression_7(NamedObject[expression_7_child], CreatableNamedObjectMixin[expression_7_child]):
    """
    Create a new or edit an existing report definition.
    """
    _version = '251'
    fluent_name = 'expression'
    _python_name = 'expression'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = expression_7_child

class single_valued_expression_child(Group):
    """
    'child_object_type' of single_valued_expression.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'single_valued_expression_child'
    child_names = ['name', 'average_over', 'retain_instantaneous_values', 'definition', 'list_valid_report_names', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        average_over=average_over,
        retain_instantaneous_values=retain_instantaneous_values,
        definition=definition,
        list_valid_report_names=list_valid_report_names,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class single_valued_expression(NamedObject[single_valued_expression_child], CreatableNamedObjectMixin[single_valued_expression_child]):
    """
    The report definition type.
    """
    _version = '251'
    fluent_name = 'single-valued-expression'
    _python_name = 'single_valued_expression'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = single_valued_expression_child

class custom_child(Group):
    """
    'child_object_type' of custom.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'custom_child'
    child_names = ['name', 'output_parameter']
    command_names = ['create_output_parameter']
    _child_classes = dict(
        name=name_2,
        output_parameter=output_parameter_1,
        create_output_parameter=create_output_parameter,
    )

class custom(NamedObject[custom_child], CreatableNamedObjectMixin[custom_child]):
    """
    Create a new or edit an existing report definition.
    """
    _version = '251'
    fluent_name = 'custom'
    _python_name = 'custom'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = custom_child

class report_defs(StringList, AllowedValuesMixin):
    """
    Compute the net value of the selected report definition.
    """
    _version = '251'
    fluent_name = 'report-defs'
    _python_name = 'report_defs'

class compute_2(Command):
    """
    Compute and view the net value.
    
    Parameters
    ----------
        report_defs : List
            Compute the net value of the selected report definition.
    """
    _version = '251'
    fluent_name = 'compute'
    _python_name = 'compute'
    argument_names = ['report_defs']
    _child_classes = dict(
        report_defs=report_defs,
    )
    return_type = 'object'

class copy_from(String, AllowedValuesMixin):
    """
    The report definition to copy.
    """
    _version = '251'
    fluent_name = 'copy-from'
    _python_name = 'copy_from'

class copy_to(String):
    """
    Write the new name for the copied report definition.
    """
    _version = '251'
    fluent_name = 'copy-to'
    _python_name = 'copy_to'

class copy_2(Command):
    """
    Create a copy of a report definition.
    
    Parameters
    ----------
        copy_from : str
            The report definition to copy.
        copy_to : str
            Write the new name for the copied report definition.
    """
    _version = '251'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['copy_from', 'copy_to']
    _child_classes = dict(
        copy_from=copy_from,
        copy_to=copy_to,
    )

class delete_all_2(Command):
    """
    Delete all the report definitions.
    """
    _version = '251'
    fluent_name = 'delete-all'
    _python_name = 'delete_all'

class report_definitions(Group, _ChildNamedObjectAccessorMixin):
    """
    Provides access to create an object that specifies a certain quantity or set of values to be computed at the end of a solver timestep or iteration. You can then choose to have multiple report definitions printed to the console written to a single file or plotted in the same window.
    """
    _version = '251'
    fluent_name = 'report-definitions'
    _python_name = 'report_definitions'
    child_names = ['mesh', 'surface', 'volume', 'force', 'lift', 'drag', 'moment', 'time', 'flux', 'vbm', 'injection', 'user_defined', 'aeromechanics', 'icing', 'expression', 'single_valued_expression', 'custom']
    command_names = ['compute', 'copy', 'delete_all']
    _child_classes = dict(
        mesh=mesh_1,
        surface=surface_1,
        volume=volume,
        force=force,
        lift=lift,
        drag=drag,
        moment=moment,
        time=time_1,
        flux=flux_1,
        vbm=vbm,
        injection=injection_2,
        user_defined=user_defined_13,
        aeromechanics=aeromechanics,
        icing=icing_3,
        expression=expression_7,
        single_valued_expression=single_valued_expression,
        custom=custom,
        compute=compute_2,
        copy=copy_2,
        delete_all=delete_all_2,
    )

class monitor_1(Boolean):
    """
    Which residuals to monitor as printed and/or plotted output.
    """
    _version = '251'
    fluent_name = 'monitor?'
    _python_name = 'monitor'

class normalization_factor(Real):
    """
    Normalization factors for currently-monitored residuals.
    """
    _version = '251'
    fluent_name = 'normalization-factor'
    _python_name = 'normalization_factor'

class check_convergence(Boolean):
    """
    Which currently-monitored residuals.
    """
    _version = '251'
    fluent_name = 'check-convergence?'
    _python_name = 'check_convergence'

class absolute_criteria(Real):
    """
    Convergence criteria for residuals which are.
    """
    _version = '251'
    fluent_name = 'absolute-criteria'
    _python_name = 'absolute_criteria'

class relative_criteria(Real):
    """
    Relative convergence criteria for residuals which are.
    """
    _version = '251'
    fluent_name = 'relative-criteria'
    _python_name = 'relative_criteria'

class equations_1_child(Group):
    """
    'child_object_type' of equations.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'equations_child'
    child_names = ['monitor', 'normalization_factor', 'check_convergence', 'absolute_criteria', 'relative_criteria']
    _child_classes = dict(
        monitor=monitor_1,
        normalization_factor=normalization_factor,
        check_convergence=check_convergence,
        absolute_criteria=absolute_criteria,
        relative_criteria=relative_criteria,
    )

class equations_1(NamedObject[equations_1_child], CreatableNamedObjectMixin[equations_1_child]):
    """
    The various equations that can be monitored. For example, continuity, x-velocity, y-velocity, z-velocity, energy, k, and omega.
    """
    _version = '251'
    fluent_name = 'equations'
    _python_name = 'equations'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = equations_1_child

class criterion_type(String, AllowedValuesMixin):
    """
    Convergence criterion type.
    """
    _version = '251'
    fluent_name = 'criterion-type'
    _python_name = 'criterion_type'

class n_save(Integer):
    """
    Number of residuals to be saved with data.
    """
    _version = '251'
    fluent_name = 'n-save'
    _python_name = 'n_save'

class normalize(Boolean):
    """
    Specifies whether to normalize residuals in printed and plotted output.
    """
    _version = '251'
    fluent_name = 'normalize?'
    _python_name = 'normalize'

class n_maximize_norms(Integer):
    """
    The number of iterations through which normalization factors will be maximized.
    """
    _version = '251'
    fluent_name = 'n-maximize-norms'
    _python_name = 'n_maximize_norms'

class enhanced_continuity_residual(Boolean):
    """
    Specifies whether to scale the continuity residuals locally based on the enhanced formulation.
    """
    _version = '251'
    fluent_name = 'enhanced-continuity-residual?'
    _python_name = 'enhanced_continuity_residual'

class scale_residuals(Boolean):
    """
    Specifies whether to scale the residuals.
    """
    _version = '251'
    fluent_name = 'scale-residuals?'
    _python_name = 'scale_residuals'

class compute_local_scale(Boolean):
    """
    Specifies whether to compute and store both the residuals locally and globally scaled subsequent iterations.
    """
    _version = '251'
    fluent_name = 'compute-local-scale?'
    _python_name = 'compute_local_scale'

class reporting_option(String, AllowedValuesMixin):
    """
    Reporting option as local or global.
    """
    _version = '251'
    fluent_name = 'reporting-option'
    _python_name = 'reporting_option'

class residual_values(Group):
    """
    Enable/disable scaling of residuals by coefficient sum in printed and plotted output.
    """
    _version = '251'
    fluent_name = 'residual-values'
    _python_name = 'residual_values'
    child_names = ['scale_residuals', 'compute_local_scale', 'reporting_option']
    _child_classes = dict(
        scale_residuals=scale_residuals,
        compute_local_scale=compute_local_scale,
        reporting_option=reporting_option,
    )
    _child_aliases = dict(
        scale_type=('reporting_option', 'scale-type'),
    )

class print_2(Boolean):
    """
    Specifies whether residuals will be printed during iteration.
    """
    _version = '251'
    fluent_name = 'print?'
    _python_name = 'print'

class plot_1(Boolean):
    """
    Specifies whether residuals will be plotted during iteration.
    """
    _version = '251'
    fluent_name = 'plot?'
    _python_name = 'plot'

class n_display(Integer):
    """
    The number of most recent residuals to display in plots.
    """
    _version = '251'
    fluent_name = 'n-display'
    _python_name = 'n_display'

class options_12(Group):
    """
    Options for reporting residuals.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['criterion_type', 'n_save', 'normalize', 'n_maximize_norms', 'enhanced_continuity_residual', 'residual_values', 'print', 'plot', 'n_display']
    _child_classes = dict(
        criterion_type=criterion_type,
        n_save=n_save,
        normalize=normalize,
        n_maximize_norms=n_maximize_norms,
        enhanced_continuity_residual=enhanced_continuity_residual,
        residual_values=residual_values,
        print=print_2,
        plot=plot_1,
        n_display=n_display,
    )

class label(String):
    """
    Axis label.
    """
    _version = '251'
    fluent_name = 'label'
    _python_name = 'label'

class format_type(String, AllowedValuesMixin):
    """
    Choice of number-representation.
    """
    _version = '251'
    fluent_name = 'format-type'
    _python_name = 'format_type'

class precision(Integer):
    """
    Decimal precision.
    """
    _version = '251'
    fluent_name = 'precision'
    _python_name = 'precision'

class number_format(Group):
    """
    Number-formatting options.
    """
    _version = '251'
    fluent_name = 'number-format'
    _python_name = 'number_format'
    child_names = ['format_type', 'precision']
    _child_classes = dict(
        format_type=format_type,
        precision=precision,
    )

class log_scale(Boolean):
    """
    Represent axis in logarithmic scale?.
    """
    _version = '251'
    fluent_name = 'log-scale?'
    _python_name = 'log_scale'

class auto_range(Boolean):
    """
    Axis-range automatically?.
    """
    _version = '251'
    fluent_name = 'auto-range?'
    _python_name = 'auto_range'

class min(Real):
    """
    Minimum value represented on axis.
    """
    _version = '251'
    fluent_name = 'min'
    _python_name = 'min'

class max(Real):
    """
    Maximum value represented on axis.
    """
    _version = '251'
    fluent_name = 'max'
    _python_name = 'max'

class show_major_gridlines(Boolean):
    """
    Specifies whether to show major gridlines on plot.
    """
    _version = '251'
    fluent_name = 'show-major-gridlines?'
    _python_name = 'show_major_gridlines'

class color(String, AllowedValuesMixin):
    """
    Color of gridlines on axis.
    """
    _version = '251'
    fluent_name = 'color'
    _python_name = 'color'

class weight(Integer):
    """
    Weight of gridlines on axis.
    """
    _version = '251'
    fluent_name = 'weight'
    _python_name = 'weight'

class major_gridlines(Group):
    """
    Properties of gridlines on axis.
    """
    _version = '251'
    fluent_name = 'major-gridlines'
    _python_name = 'major_gridlines'
    child_names = ['color', 'weight']
    _child_classes = dict(
        color=color,
        weight=weight,
    )

class show_minor_gridlines(Boolean):
    """
    Specifies whether to show minor gridlines on plot.
    """
    _version = '251'
    fluent_name = 'show-minor-gridlines?'
    _python_name = 'show_minor_gridlines'

class minor_gridlines(Group):
    """
    Properties of gridlines on axis.
    """
    _version = '251'
    fluent_name = 'minor-gridlines'
    _python_name = 'minor_gridlines'
    child_names = ['color', 'weight']
    _child_classes = dict(
        color=color,
        weight=weight,
    )

class x_1(Group):
    """
    X-axis properties.
    """
    _version = '251'
    fluent_name = 'x'
    _python_name = 'x'
    child_names = ['label', 'number_format', 'log_scale', 'auto_range', 'min', 'max', 'show_major_gridlines', 'major_gridlines', 'show_minor_gridlines', 'minor_gridlines']
    _child_classes = dict(
        label=label,
        number_format=number_format,
        log_scale=log_scale,
        auto_range=auto_range,
        min=min,
        max=max,
        show_major_gridlines=show_major_gridlines,
        major_gridlines=major_gridlines,
        show_minor_gridlines=show_minor_gridlines,
        minor_gridlines=minor_gridlines,
    )

class y_1(Group):
    """
    Y-axis properties.
    """
    _version = '251'
    fluent_name = 'y'
    _python_name = 'y'
    child_names = ['label', 'number_format', 'log_scale', 'auto_range', 'min', 'max', 'show_major_gridlines', 'major_gridlines', 'show_minor_gridlines', 'minor_gridlines']
    _child_classes = dict(
        label=label,
        number_format=number_format,
        log_scale=log_scale,
        auto_range=auto_range,
        min=min,
        max=max,
        show_major_gridlines=show_major_gridlines,
        major_gridlines=major_gridlines,
        show_minor_gridlines=show_minor_gridlines,
        minor_gridlines=minor_gridlines,
    )

class background_color(String, AllowedValuesMixin):
    """
    Background color.
    """
    _version = '251'
    fluent_name = 'background-color'
    _python_name = 'background_color'

class axes(Group):
    """
    Axes-properties.
    """
    _version = '251'
    fluent_name = 'axes'
    _python_name = 'axes'
    child_names = ['x', 'y', 'background_color']
    _child_classes = dict(
        x=x_1,
        y=y_1,
        background_color=background_color,
    )

class pattern(String, AllowedValuesMixin):
    """
    Pattern for plot lines.
    """
    _version = '251'
    fluent_name = 'pattern'
    _python_name = 'pattern'

class weight_1(Real):
    """
    Weight for plot lines.
    """
    _version = '251'
    fluent_name = 'weight'
    _python_name = 'weight'

class color_1(String, AllowedValuesMixin):
    """
    Color for plot lines.
    """
    _version = '251'
    fluent_name = 'color'
    _python_name = 'color'

class line(Group):
    """
    Parameters for plot lines.
    """
    _version = '251'
    fluent_name = 'line'
    _python_name = 'line'
    child_names = ['pattern', 'weight', 'color']
    _child_classes = dict(
        pattern=pattern,
        weight=weight_1,
        color=color_1,
    )

class line_in_file(Group):
    """
    Parameters for plot lines (file).
    """
    _version = '251'
    fluent_name = 'line-in-file'
    _python_name = 'line_in_file'
    child_names = ['pattern', 'weight', 'color']
    _child_classes = dict(
        pattern=pattern,
        weight=weight_1,
        color=color_1,
    )

class symbol(String, AllowedValuesMixin):
    """
    Data marker symbol.
    """
    _version = '251'
    fluent_name = 'symbol'
    _python_name = 'symbol'

class size_1(Real):
    """
    Data marker size.
    """
    _version = '251'
    fluent_name = 'size'
    _python_name = 'size'

class color_2(String, AllowedValuesMixin):
    """
    Data marker color.
    """
    _version = '251'
    fluent_name = 'color'
    _python_name = 'color'

class marker(Group):
    """
    Parameters for data markers.
    """
    _version = '251'
    fluent_name = 'marker'
    _python_name = 'marker'
    child_names = ['symbol', 'size', 'color']
    _child_classes = dict(
        symbol=symbol,
        size=size_1,
        color=color_2,
    )

class marker_in_file(Group):
    """
    Parameters for data markers (file).
    """
    _version = '251'
    fluent_name = 'marker-in-file'
    _python_name = 'marker_in_file'
    child_names = ['symbol', 'size', 'color']
    _child_classes = dict(
        symbol=symbol,
        size=size_1,
        color=color_2,
    )

class curves_child(Group):
    """
    'child_object_type' of curves.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'curves_child'
    child_names = ['line', 'line_in_file', 'marker', 'marker_in_file']
    _child_classes = dict(
        line=line,
        line_in_file=line_in_file,
        marker=marker,
        marker_in_file=marker_in_file,
    )

class curves(ListObject[curves_child]):
    """
    Parameters for curves.
    """
    _version = '251'
    fluent_name = 'curves'
    _python_name = 'curves'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = curves_child

class reset_1(Command):
    """
    Delete the residual history and reset iteration counter to unity.
    """
    _version = '251'
    fluent_name = 'reset'
    _python_name = 'reset'

class renormalize(Command):
    """
    Renormalize residuals by maximum values.
    """
    _version = '251'
    fluent_name = 'renormalize'
    _python_name = 'renormalize'

class plot(Command):
    """
    Plot residuals.
    """
    _version = '251'
    fluent_name = 'plot'
    _python_name = 'plot'

class filename_1_3(Filename, _OutputFile):
    """
    The name you want the file saved with.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class write_1(Command):
    """
    Write residuals to file.
    
    Parameters
    ----------
        filename_1 : str
            The name you want the file saved with.
    """
    _version = '251'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_1_3,
    )

class residual(Group):
    """
    Options for controlling residual information that the solver reports.
    """
    _version = '251'
    fluent_name = 'residual'
    _python_name = 'residual'
    child_names = ['equations', 'options', 'axes', 'curves']
    command_names = ['reset', 'renormalize', 'plot', 'write']
    _child_classes = dict(
        equations=equations_1,
        options=options_12,
        axes=axes,
        curves=curves,
        reset=reset_1,
        renormalize=renormalize,
        plot=plot,
        write=write_1,
    )

class delete_all_3(Command):
    """
    Delete all the report files.
    """
    _version = '251'
    fluent_name = 'delete-all'
    _python_name = 'delete_all'

class report_files_1(StringList, AllowedValuesMixin):
    """
    The Report files.
    """
    _version = '251'
    fluent_name = 'report-files'
    _python_name = 'report_files'

class clear_data(Command):
    """
    Delete the report file from system.
    
    Parameters
    ----------
        report_files : List
            The Report files.
    """
    _version = '251'
    fluent_name = 'clear-data'
    _python_name = 'clear_data'
    argument_names = ['report_files']
    _child_classes = dict(
        report_files=report_files_1,
    )

class file_name_2_1(Filename, _InOutFile):
    """
    'file_name' child.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class frequency_of(String, AllowedValuesMixin):
    """
    'frequency_of' child.
    """
    _version = '251'
    fluent_name = 'frequency-of'
    _python_name = 'frequency_of'

class frequency_1(Integer):
    """
    How often convergence checks are performed.
    """
    _version = '251'
    fluent_name = 'frequency'
    _python_name = 'frequency'

class flow_frequency(Real):
    """
    'flow_frequency' child.
    """
    _version = '251'
    fluent_name = 'flow-frequency'
    _python_name = 'flow_frequency'

class itr_index(String, AllowedValuesMixin):
    """
    'itr_index' child.
    """
    _version = '251'
    fluent_name = 'itr-index'
    _python_name = 'itr_index'

class run_index(String, AllowedValuesMixin):
    """
    'run_index' child.
    """
    _version = '251'
    fluent_name = 'run-index'
    _python_name = 'run_index'

class report_defs_1(StringList, AllowedValuesMixin):
    """
    'report_defs' child.
    """
    _version = '251'
    fluent_name = 'report-defs'
    _python_name = 'report_defs'

class print_3(Boolean):
    """
    'print' child.
    """
    _version = '251'
    fluent_name = 'print?'
    _python_name = 'print'

class active(Boolean):
    """
    'active' child.
    """
    _version = '251'
    fluent_name = 'active?'
    _python_name = 'active'

class write_instantaneous_values(Boolean):
    """
    'write_instantaneous_values' child.
    """
    _version = '251'
    fluent_name = 'write-instantaneous-values?'
    _python_name = 'write_instantaneous_values'

class report_files_child(Group):
    """
    'child_object_type' of report_files.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'report_files_child'
    child_names = ['name', 'file_name', 'frequency_of', 'frequency', 'flow_frequency', 'itr_index', 'run_index', 'report_defs', 'print', 'active', 'write_instantaneous_values']
    _child_classes = dict(
        name=name_14,
        file_name=file_name_2_1,
        frequency_of=frequency_of,
        frequency=frequency_1,
        flow_frequency=flow_frequency,
        itr_index=itr_index,
        run_index=run_index,
        report_defs=report_defs_1,
        print=print_3,
        active=active,
        write_instantaneous_values=write_instantaneous_values,
    )

class report_files(NamedObject[report_files_child], CreatableNamedObjectMixin[report_files_child]):
    """
    Available options related to report files.
    """
    _version = '251'
    fluent_name = 'report-files'
    _python_name = 'report_files'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'delete_all', 'clear_data']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        delete_all=delete_all_3,
        clear_data=clear_data,
    )
    child_object_type = report_files_child

class delete_all_4(Command):
    """
    Delete all the report plots.
    """
    _version = '251'
    fluent_name = 'delete-all'
    _python_name = 'delete_all'

class plot_window(Integer):
    """
    'plot_window' child.
    """
    _version = '251'
    fluent_name = 'plot-window'
    _python_name = 'plot_window'

class title(String, AllowedValuesMixin):
    """
    'title' child.
    """
    _version = '251'
    fluent_name = 'title'
    _python_name = 'title'

class x_label(String, AllowedValuesMixin):
    """
    'x_label' child.
    """
    _version = '251'
    fluent_name = 'x-label'
    _python_name = 'x_label'

class y_label(String, AllowedValuesMixin):
    """
    'y_label' child.
    """
    _version = '251'
    fluent_name = 'y-label'
    _python_name = 'y_label'

class plot_instantaneous_values(Boolean):
    """
    'plot_instantaneous_values' child.
    """
    _version = '251'
    fluent_name = 'plot-instantaneous-values?'
    _python_name = 'plot_instantaneous_values'

class plot_2(Command):
    """
    Display the report-plot.
    """
    _version = '251'
    fluent_name = 'plot'
    _python_name = 'plot'

class report_plots_child(Group):
    """
    'child_object_type' of report_plots.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'report_plots_child'
    child_names = ['name', 'plot_window', 'frequency_of', 'frequency', 'flow_frequency', 'report_defs', 'print', 'title', 'x_label', 'y_label', 'active', 'plot_instantaneous_values', 'axes', 'curves']
    command_names = ['plot']
    _child_classes = dict(
        name=name_14,
        plot_window=plot_window,
        frequency_of=frequency_of,
        frequency=frequency_1,
        flow_frequency=flow_frequency,
        report_defs=report_defs_1,
        print=print_3,
        title=title,
        x_label=x_label,
        y_label=y_label,
        active=active,
        plot_instantaneous_values=plot_instantaneous_values,
        axes=axes,
        curves=curves,
        plot=plot_2,
    )

class report_plots(NamedObject[report_plots_child], CreatableNamedObjectMixin[report_plots_child]):
    """
    Available options related to report plots.
    """
    _version = '251'
    fluent_name = 'report-plots'
    _python_name = 'report_plots'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'delete_all']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        delete_all=delete_all_4,
    )
    child_object_type = report_plots_child

class previous_values_to_consider(Integer):
    """
    How often convergence checks are performed.
    """
    _version = '251'
    fluent_name = 'previous-values-to-consider'
    _python_name = 'previous_values_to_consider'

class initial_values_to_ignore(Integer):
    """
    'initial_values_to_ignore' child.
    """
    _version = '251'
    fluent_name = 'initial-values-to-ignore'
    _python_name = 'initial_values_to_ignore'

class iteration_at_creation_or_edit(Integer):
    """
    'iteration_at_creation_or_edit' child.
    """
    _version = '251'
    fluent_name = 'iteration-at-creation-or-edit'
    _python_name = 'iteration_at_creation_or_edit'

class stop_criterion(Real):
    """
    'stop_criterion' child.
    """
    _version = '251'
    fluent_name = 'stop-criterion'
    _python_name = 'stop_criterion'

class report_defs_2(String, AllowedValuesMixin):
    """
    'report_defs' child.
    """
    _version = '251'
    fluent_name = 'report-defs'
    _python_name = 'report_defs'

class plot_3(Boolean):
    """
    'plot' child.
    """
    _version = '251'
    fluent_name = 'plot?'
    _python_name = 'plot'

class cov(Boolean):
    """
    'cov' child.
    """
    _version = '251'
    fluent_name = 'cov?'
    _python_name = 'cov'

class previous_values(StringList, AllowedValuesMixin):
    """
    'previous_values' child.
    """
    _version = '251'
    fluent_name = 'previous-values'
    _python_name = 'previous_values'

class convergence_reports_child(Group):
    """
    'child_object_type' of convergence_reports.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'convergence_reports_child'
    child_names = ['name', 'previous_values_to_consider', 'initial_values_to_ignore', 'iteration_at_creation_or_edit', 'stop_criterion', 'report_defs', 'print', 'plot', 'cov', 'active', 'x_label', 'previous_values']
    _child_classes = dict(
        name=name_14,
        previous_values_to_consider=previous_values_to_consider,
        initial_values_to_ignore=initial_values_to_ignore,
        iteration_at_creation_or_edit=iteration_at_creation_or_edit,
        stop_criterion=stop_criterion,
        report_defs=report_defs_2,
        print=print_3,
        plot=plot_3,
        cov=cov,
        active=active,
        x_label=x_label,
        previous_values=previous_values,
    )

class convergence_reports(NamedObject[convergence_reports_child], CreatableNamedObjectMixin[convergence_reports_child]):
    """
    Available options related to creating convergence reports.
    """
    _version = '251'
    fluent_name = 'convergence-reports'
    _python_name = 'convergence_reports'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = convergence_reports_child

class frequency_2(Integer):
    """
    The frequency for the convergence condition.
    """
    _version = '251'
    fluent_name = 'frequency'
    _python_name = 'frequency'

class condition(String, AllowedValuesMixin):
    """
    The condition to be met for the convergence condition.
    """
    _version = '251'
    fluent_name = 'condition'
    _python_name = 'condition'

class check_for(String, AllowedValuesMixin):
    """
    The convergence check to perform physical solution convergence or time-step convergence.
    """
    _version = '251'
    fluent_name = 'check-for'
    _python_name = 'check_for'

class convergence_conditions(Group):
    """
    Available options that allow you to set convergence conditions on the solution based on the values from report definitions. For example, surface, volume, lift, drag, and so on.
    """
    _version = '251'
    fluent_name = 'convergence-conditions'
    _python_name = 'convergence_conditions'
    child_names = ['convergence_reports', 'frequency', 'condition', 'check_for']
    _child_classes = dict(
        convergence_reports=convergence_reports,
        frequency=frequency_2,
        condition=condition,
        check_for=check_for,
    )

class monitor(Group):
    """
    Provides access to common settings to monitor the convergence dynamically during the solution process by checking residuals, statistics, force values, surface integrals, and volume integrals. You can print reports of or display plots of lift, drag and moment coefficients, surface integrations and residuals for the solution variables. For unsteady flows you can also monitor elapsed time.
    """
    _version = '251'
    fluent_name = 'monitor'
    _python_name = 'monitor'
    child_names = ['residual', 'report_files', 'report_plots', 'convergence_conditions']
    _child_classes = dict(
        residual=residual,
        report_files=report_files,
        report_plots=report_plots,
        convergence_conditions=convergence_conditions,
    )

class python_name_1(String, AllowedValuesMixin):
    """
    'python_name' child.
    """
    _version = '251'
    fluent_name = 'python-name'
    _python_name = 'python_name'

class min_point(RealList):
    """
    'min_point' child.
    """
    _version = '251'
    fluent_name = 'min-point'
    _python_name = 'min_point'

class max_point(RealList):
    """
    'max_point' child.
    """
    _version = '251'
    fluent_name = 'max-point'
    _python_name = 'max_point'

class inside(Boolean):
    """
    'inside' child.
    """
    _version = '251'
    fluent_name = 'inside?'
    _python_name = 'inside'

class hexahedron(Group):
    """
    'hexahedron' child.
    """
    _version = '251'
    fluent_name = 'hexahedron'
    _python_name = 'hexahedron'
    child_names = ['min_point', 'max_point', 'inside']
    _child_classes = dict(
        min_point=min_point,
        max_point=max_point,
        inside=inside,
    )

class center(RealList):
    """
    'center' child.
    """
    _version = '251'
    fluent_name = 'center'
    _python_name = 'center'

class radius_1(Real):
    """
    'radius' child.
    """
    _version = '251'
    fluent_name = 'radius'
    _python_name = 'radius'

class sphere(Group):
    """
    'sphere' child.
    """
    _version = '251'
    fluent_name = 'sphere'
    _python_name = 'sphere'
    child_names = ['center', 'radius', 'inside']
    _child_classes = dict(
        center=center,
        radius=radius_1,
        inside=inside,
    )

class axis_begin(RealList):
    """
    'axis_begin' child.
    """
    _version = '251'
    fluent_name = 'axis-begin'
    _python_name = 'axis_begin'

class axis_end(RealList):
    """
    'axis_end' child.
    """
    _version = '251'
    fluent_name = 'axis-end'
    _python_name = 'axis_end'

class cylinder(Group):
    """
    'cylinder' child.
    """
    _version = '251'
    fluent_name = 'cylinder'
    _python_name = 'cylinder'
    child_names = ['axis_begin', 'axis_end', 'radius', 'inside']
    _child_classes = dict(
        axis_begin=axis_begin,
        axis_end=axis_end,
        radius=radius_1,
        inside=inside,
    )

class cell_distance(Integer):
    """
    'cell_distance' child.
    """
    _version = '251'
    fluent_name = 'cell-distance'
    _python_name = 'cell_distance'

class boundary_volume(Real):
    """
    'boundary_volume' child.
    """
    _version = '251'
    fluent_name = 'boundary-volume'
    _python_name = 'boundary_volume'

class volume_growth(Real):
    """
    'volume_growth' child.
    """
    _version = '251'
    fluent_name = 'volume-growth'
    _python_name = 'volume_growth'

class volume_distance(Group):
    """
    'volume_distance' child.
    """
    _version = '251'
    fluent_name = 'volume-distance'
    _python_name = 'volume_distance'
    child_names = ['boundary_volume', 'volume_growth']
    _child_classes = dict(
        boundary_volume=boundary_volume,
        volume_growth=volume_growth,
    )

class distance_option(Group):
    """
    'distance_option' child.
    """
    _version = '251'
    fluent_name = 'distance-option'
    _python_name = 'distance_option'
    child_names = ['option', 'cell_distance', 'normal_distance', 'volume_distance']
    _child_classes = dict(
        option=option_1,
        cell_distance=cell_distance,
        normal_distance=normal_distance,
        volume_distance=volume_distance,
    )

class boundary_3(Group):
    """
    'boundary' child.
    """
    _version = '251'
    fluent_name = 'boundary'
    _python_name = 'boundary'
    child_names = ['distance_option', 'boundary_list']
    _child_classes = dict(
        distance_option=distance_option,
        boundary_list=boundary_list,
    )

class limiters(String, AllowedValuesMixin):
    """
    'limiters' child.
    """
    _version = '251'
    fluent_name = 'limiters'
    _python_name = 'limiters'

class min_max(Boolean):
    """
    'min_max' child.
    """
    _version = '251'
    fluent_name = 'min-max'
    _python_name = 'min_max'

class value1(Real):
    """
    'value1' child.
    """
    _version = '251'
    fluent_name = 'value1'
    _python_name = 'value1'

class value2(Real):
    """
    'value2' child.
    """
    _version = '251'
    fluent_name = 'value2'
    _python_name = 'value2'

class in_range(Group):
    """
    'in_range' child.
    """
    _version = '251'
    fluent_name = 'in-range'
    _python_name = 'in_range'
    child_names = ['value1', 'value2']
    _child_classes = dict(
        value1=value1,
        value2=value2,
    )

class except_in_range(Group):
    """
    'except_in_range' child.
    """
    _version = '251'
    fluent_name = 'except-in-range'
    _python_name = 'except_in_range'
    child_names = ['value1', 'value2']
    _child_classes = dict(
        value1=value1,
        value2=value2,
    )

class top_value_cells(Real):
    """
    'top_value_cells' child.
    """
    _version = '251'
    fluent_name = 'top-value-cells'
    _python_name = 'top_value_cells'

class low_value_cells(Real):
    """
    'low_value_cells' child.
    """
    _version = '251'
    fluent_name = 'low-value-cells'
    _python_name = 'low_value_cells'

class less_than(Real):
    """
    'less_than' child.
    """
    _version = '251'
    fluent_name = 'less-than'
    _python_name = 'less_than'

class more_than(Real):
    """
    'more_than' child.
    """
    _version = '251'
    fluent_name = 'more-than'
    _python_name = 'more_than'

class lower(Real):
    """
    'lower' child.
    """
    _version = '251'
    fluent_name = 'lower'
    _python_name = 'lower'

class upper(Real):
    """
    'upper' child.
    """
    _version = '251'
    fluent_name = 'upper'
    _python_name = 'upper'

class between_std_dev(Group):
    """
    'between_std_dev' child.
    """
    _version = '251'
    fluent_name = 'between-std-dev'
    _python_name = 'between_std_dev'
    child_names = ['lower', 'upper']
    _child_classes = dict(
        lower=lower,
        upper=upper,
    )

class outside_std_dev(Group):
    """
    'outside_std_dev' child.
    """
    _version = '251'
    fluent_name = 'outside-std-dev'
    _python_name = 'outside_std_dev'
    child_names = ['lower', 'upper']
    _child_classes = dict(
        lower=lower,
        upper=upper,
    )

class less_than_std_dev(Real):
    """
    'less_than_std_dev' child.
    """
    _version = '251'
    fluent_name = 'less-than-std-dev'
    _python_name = 'less_than_std_dev'

class more_than_std_dev(Real):
    """
    'more_than_std_dev' child.
    """
    _version = '251'
    fluent_name = 'more-than-std-dev'
    _python_name = 'more_than_std_dev'

class option_34(Group):
    """
    'option' child.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'
    child_names = ['option', 'min_max', 'in_range', 'except_in_range', 'top_value_cells', 'low_value_cells', 'less_than', 'more_than', 'between_std_dev', 'outside_std_dev', 'less_than_std_dev', 'more_than_std_dev']
    _child_classes = dict(
        option=option_1,
        min_max=min_max,
        in_range=in_range,
        except_in_range=except_in_range,
        top_value_cells=top_value_cells,
        low_value_cells=low_value_cells,
        less_than=less_than,
        more_than=more_than,
        between_std_dev=between_std_dev,
        outside_std_dev=outside_std_dev,
        less_than_std_dev=less_than_std_dev,
        more_than_std_dev=more_than_std_dev,
    )

class none(Boolean):
    """
    'none' child.
    """
    _version = '251'
    fluent_name = 'none'
    _python_name = 'none'

class scale_by_global_average(Boolean):
    """
    'scale_by_global_average' child.
    """
    _version = '251'
    fluent_name = 'scale-by-global-average'
    _python_name = 'scale_by_global_average'

class scale_by_zone_average(Boolean):
    """
    'scale_by_zone_average' child.
    """
    _version = '251'
    fluent_name = 'scale-by-zone-average'
    _python_name = 'scale_by_zone_average'

class scale_by_global_maximum(Boolean):
    """
    'scale_by_global_maximum' child.
    """
    _version = '251'
    fluent_name = 'scale-by-global-maximum'
    _python_name = 'scale_by_global_maximum'

class scale_by_zone_maximum(Boolean):
    """
    'scale_by_zone_maximum' child.
    """
    _version = '251'
    fluent_name = 'scale-by-zone-maximum'
    _python_name = 'scale_by_zone_maximum'

class scaling(Group):
    """
    'scaling' child.
    """
    _version = '251'
    fluent_name = 'scaling'
    _python_name = 'scaling'
    child_names = ['option', 'none', 'scale_by_global_average', 'scale_by_zone_average', 'scale_by_global_maximum', 'scale_by_zone_maximum']
    _child_classes = dict(
        option=option_1,
        none=none,
        scale_by_global_average=scale_by_global_average,
        scale_by_zone_average=scale_by_zone_average,
        scale_by_global_maximum=scale_by_global_maximum,
        scale_by_zone_maximum=scale_by_zone_maximum,
    )

class gradient_1(Boolean):
    """
    'gradient' child.
    """
    _version = '251'
    fluent_name = 'gradient'
    _python_name = 'gradient'

class curvature(Boolean):
    """
    'curvature' child.
    """
    _version = '251'
    fluent_name = 'curvature'
    _python_name = 'curvature'

class hessian(Boolean):
    """
    'hessian' child.
    """
    _version = '251'
    fluent_name = 'hessian'
    _python_name = 'hessian'

class derivative(Group):
    """
    'derivative' child.
    """
    _version = '251'
    fluent_name = 'derivative'
    _python_name = 'derivative'
    child_names = ['option', 'none', 'gradient', 'curvature', 'hessian']
    _child_classes = dict(
        option=option_1,
        none=none,
        gradient=gradient_1,
        curvature=curvature,
        hessian=hessian,
    )

class size_ratio(Real):
    """
    'size_ratio' child.
    """
    _version = '251'
    fluent_name = 'size-ratio'
    _python_name = 'size_ratio'

class field_value(Group):
    """
    'field_value' child.
    """
    _version = '251'
    fluent_name = 'field-value'
    _python_name = 'field_value'
    child_names = ['field', 'option', 'scaling', 'derivative', 'size_ratio']
    _child_classes = dict(
        field=field,
        option=option_34,
        scaling=scaling,
        derivative=derivative,
        size_ratio=size_ratio,
    )

class equation_for_residual(String, AllowedValuesMixin):
    """
    'equation_for_residual' child.
    """
    _version = '251'
    fluent_name = 'equation-for-residual'
    _python_name = 'equation_for_residual'

class threshold_1(Real):
    """
    'threshold' child.
    """
    _version = '251'
    fluent_name = 'threshold'
    _python_name = 'threshold'

class residual_1(Group):
    """
    'residual' child.
    """
    _version = '251'
    fluent_name = 'residual'
    _python_name = 'residual'
    child_names = ['equation_for_residual', 'threshold']
    _child_classes = dict(
        equation_for_residual=equation_for_residual,
        threshold=threshold_1,
    )

class volume_magnitude(Real):
    """
    'volume_magnitude' child.
    """
    _version = '251'
    fluent_name = 'volume-magnitude'
    _python_name = 'volume_magnitude'

class volume_change(Real):
    """
    'volume_change' child.
    """
    _version = '251'
    fluent_name = 'volume-change'
    _python_name = 'volume_change'

class volume_1(Group):
    """
    'volume' child.
    """
    _version = '251'
    fluent_name = 'volume'
    _python_name = 'volume'
    child_names = ['option', 'volume_magnitude', 'volume_change']
    _child_classes = dict(
        option=option_1,
        volume_magnitude=volume_magnitude,
        volume_change=volume_change,
    )

class yplus_1(Boolean):
    """
    'yplus' child.
    """
    _version = '251'
    fluent_name = 'yplus'
    _python_name = 'yplus'

class ystar(Boolean):
    """
    'ystar' child.
    """
    _version = '251'
    fluent_name = 'ystar'
    _python_name = 'ystar'

class option_35(Group):
    """
    'option' child.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'
    child_names = ['option', 'yplus', 'ystar']
    _child_classes = dict(
        option=option_1,
        yplus=yplus_1,
        ystar=ystar,
    )

class min_allowed(Real):
    """
    'min_allowed' child.
    """
    _version = '251'
    fluent_name = 'min-allowed'
    _python_name = 'min_allowed'

class max_allowed(Real):
    """
    'max_allowed' child.
    """
    _version = '251'
    fluent_name = 'max-allowed'
    _python_name = 'max_allowed'

class wall_zones(StringList, AllowedValuesMixin):
    """
    'wall_zones' child.
    """
    _version = '251'
    fluent_name = 'wall-zones'
    _python_name = 'wall_zones'

class phase_53(Integer):
    """
    'phase' child.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'

class yplus_star(Group):
    """
    'yplus_star' child.
    """
    _version = '251'
    fluent_name = 'yplus-star'
    _python_name = 'yplus_star'
    child_names = ['option', 'min_allowed', 'max_allowed', 'wall_zones', 'phase']
    _child_classes = dict(
        option=option_35,
        min_allowed=min_allowed,
        max_allowed=max_allowed,
        wall_zones=wall_zones,
        phase=phase_53,
    )

class yplus_ystar(Group):
    """
    'yplus_ystar' child.
    """
    _version = '251'
    fluent_name = 'yplus-ystar'
    _python_name = 'yplus_ystar'
    child_names = ['option', 'min_allowed', 'max_allowed', 'wall_zones', 'phase']
    _child_classes = dict(
        option=option_35,
        min_allowed=min_allowed,
        max_allowed=max_allowed,
        wall_zones=wall_zones,
        phase=phase_53,
    )

class type_8(Group):
    """
    'type' child.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'
    child_names = ['option', 'hexahedron', 'sphere', 'cylinder', 'boundary', 'limiters', 'field_value', 'residual', 'volume', 'yplus_star', 'yplus_ystar']
    _child_classes = dict(
        option=option_1,
        hexahedron=hexahedron,
        sphere=sphere,
        cylinder=cylinder,
        boundary=boundary_3,
        limiters=limiters,
        field_value=field_value,
        residual=residual_1,
        volume=volume_1,
        yplus_star=yplus_star,
        yplus_ystar=yplus_ystar,
    )

class draw_mesh(Boolean):
    """
    'draw_mesh' child.
    """
    _version = '251'
    fluent_name = 'draw-mesh?'
    _python_name = 'draw_mesh'

class filled(Boolean):
    """
    'filled' child.
    """
    _version = '251'
    fluent_name = 'filled?'
    _python_name = 'filled'

class marker_1(Boolean):
    """
    'marker' child.
    """
    _version = '251'
    fluent_name = 'marker?'
    _python_name = 'marker'

class marker_symbol(String, AllowedValuesMixin):
    """
    'marker_symbol' child.
    """
    _version = '251'
    fluent_name = 'marker-symbol'
    _python_name = 'marker_symbol'

class marker_size(Real):
    """
    Symbol Size.
    """
    _version = '251'
    fluent_name = 'marker-size'
    _python_name = 'marker_size'

class wireframe(Boolean):
    """
    'wireframe' child.
    """
    _version = '251'
    fluent_name = 'wireframe?'
    _python_name = 'wireframe'

class color_3(String, AllowedValuesMixin):
    """
    'color' child.
    """
    _version = '251'
    fluent_name = 'color'
    _python_name = 'color'

class display_options(Group):
    """
    'display_options' child.
    """
    _version = '251'
    fluent_name = 'display-options'
    _python_name = 'display_options'
    child_names = ['draw_mesh', 'filled', 'marker', 'marker_symbol', 'marker_size', 'wireframe', 'color']
    _child_classes = dict(
        draw_mesh=draw_mesh,
        filled=filled,
        marker=marker_1,
        marker_symbol=marker_symbol,
        marker_size=marker_size,
        wireframe=wireframe,
        color=color_3,
    )

class create_volume_surface(Command):
    """
    Create a volume surface.
    """
    _version = '251'
    fluent_name = 'create-volume-surface'
    _python_name = 'create_volume_surface'

class cell_registers_child(Group):
    """
    'child_object_type' of cell_registers.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'cell_registers_child'
    child_names = ['name', 'python_name_1', 'type', 'display_options']
    command_names = ['create_volume_surface']
    _child_classes = dict(
        name=name_14,
        python_name_1=python_name_1,
        type=type_8,
        display_options=display_options,
        create_volume_surface=create_volume_surface,
    )

class cell_registers(NamedObject[cell_registers_child], CreatableNamedObjectMixin[cell_registers_child]):
    """
    'cell_registers' child.
    """
    _version = '251'
    fluent_name = 'cell-registers'
    _python_name = 'cell_registers'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = cell_registers_child

class initialization_type(String, AllowedValuesMixin):
    """
    Initialization type.
    """
    _version = '251'
    fluent_name = 'initialization-type'
    _python_name = 'initialization_type'

class reference_frame_7(String, AllowedValuesMixin):
    """
    Reference frame absolute or relative.
    """
    _version = '251'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'

class defaults_child(Real):
    """
    'child_object_type' of defaults.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'defaults_child'

class defaults(NamedObject[defaults_child], CreatableNamedObjectMixin[defaults_child]):
    """
    Defaults object.
    """
    _version = '251'
    fluent_name = 'defaults'
    _python_name = 'defaults'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = defaults_child

class enabled_56(Boolean):
    """
    Enable/disable localized initialization of turbulent flow variables.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class turbulent_intensity_1(Real):
    """
    Turbulent intensity.
    """
    _version = '251'
    fluent_name = 'turbulent-intensity'
    _python_name = 'turbulent_intensity'

class turbulent_viscosity_ratio_1(Real):
    """
    Turbulent viscosity ratio.
    """
    _version = '251'
    fluent_name = 'turbulent-viscosity-ratio'
    _python_name = 'turbulent_viscosity_ratio'

class localized_turb_init(Group):
    """
    Localized initialization of turbulent flow variables for VOF/Mixture multiphase flow models.
    """
    _version = '251'
    fluent_name = 'localized-turb-init'
    _python_name = 'localized_turb_init'
    child_names = ['enabled', 'turbulent_intensity', 'turbulent_viscosity_ratio']
    _child_classes = dict(
        enabled=enabled_56,
        turbulent_intensity=turbulent_intensity_1,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio_1,
    )

class iter_count_1(Integer):
    """
    The number of iterations.
    """
    _version = '251'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'

class explicit_urf(RealList):
    """
    Explicit URF for scalar equations.
    """
    _version = '251'
    fluent_name = 'explicit-urf'
    _python_name = 'explicit_urf'

class initial_pressure(Boolean):
    """
    Enable/Disable specified initial pressure on inlets.
    """
    _version = '251'
    fluent_name = 'initial-pressure?'
    _python_name = 'initial_pressure'

class external_aero(Boolean):
    """
    Enable/Disable external-aero favorable settings.
    """
    _version = '251'
    fluent_name = 'external-aero?'
    _python_name = 'external_aero'

class const_velocity(Boolean):
    """
    Enable/Disable constant velocity magnitude.
    """
    _version = '251'
    fluent_name = 'const-velocity?'
    _python_name = 'const_velocity'

class initialization_options(Group):
    """
    Initialization options for the hybrid case.
    """
    _version = '251'
    fluent_name = 'initialization-options'
    _python_name = 'initialization_options'
    child_names = ['initial_pressure', 'external_aero', 'const_velocity']
    _child_classes = dict(
        initial_pressure=initial_pressure,
        external_aero=external_aero,
        const_velocity=const_velocity,
    )

class general_settings_1(Group):
    """
    The general settings object.
    """
    _version = '251'
    fluent_name = 'general-settings'
    _python_name = 'general_settings'
    child_names = ['iter_count', 'explicit_urf', 'initialization_options']
    _child_classes = dict(
        iter_count=iter_count_1,
        explicit_urf=explicit_urf,
        initialization_options=initialization_options,
    )
    _child_aliases = dict(
        const_velocity=('initialization_options/const_velocity', 'const-velocity?'),
        external_aero=('initialization_options/external_aero', 'external-aero?'),
        initial_pressure=('initialization_options/initial_pressure', 'initial-pressure?'),
    )

class averaged_turbulent_parameters(Boolean):
    """
    Enable/Disable averaged turbulent parameters.
    """
    _version = '251'
    fluent_name = 'averaged-turbulent-parameters?'
    _python_name = 'averaged_turbulent_parameters'

class viscosity_ratio(Real):
    """
    Viscosity ratio.
    """
    _version = '251'
    fluent_name = 'viscosity-ratio'
    _python_name = 'viscosity_ratio'

class turbulent_setting(Group):
    """
    The turbulent settings object.
    """
    _version = '251'
    fluent_name = 'turbulent-setting'
    _python_name = 'turbulent_setting'
    child_names = ['averaged_turbulent_parameters', 'turbulent_intensity', 'viscosity_ratio']
    _child_classes = dict(
        averaged_turbulent_parameters=averaged_turbulent_parameters,
        turbulent_intensity=turbulent_intensity_1,
        viscosity_ratio=viscosity_ratio,
    )

class user_specified_species(Boolean):
    """
    Enable/Disable species parameters.
    """
    _version = '251'
    fluent_name = 'user-specified-species?'
    _python_name = 'user_specified_species'

class species_12_child_child(Real):
    """
    'child_object_type' of child_object_type.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'species_child_child'

class species_12_child(NamedObject[species_12_child_child], CreatableNamedObjectMixin[species_12_child_child]):
    """
    'child_object_type' of species.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'species_child'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_12_child_child

class species_12(NamedObject[species_12_child], CreatableNamedObjectMixin[species_12_child]):
    """
    Configure species settings.
    """
    _version = '251'
    fluent_name = 'species'
    _python_name = 'species'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = species_12_child

class species_setting(Group):
    """
    The species settings object.
    """
    _version = '251'
    fluent_name = 'species-setting'
    _python_name = 'species_setting'
    child_names = ['user_specified_species', 'species']
    _child_classes = dict(
        user_specified_species=user_specified_species,
        species=species_12,
    )

class hybrid_init_options(Group):
    """
    The settings for hybrid initialization method.
    """
    _version = '251'
    fluent_name = 'hybrid-init-options'
    _python_name = 'hybrid_init_options'
    child_names = ['general_settings', 'turbulent_setting', 'species_setting']
    _child_classes = dict(
        general_settings=general_settings_1,
        turbulent_setting=turbulent_setting,
        species_setting=species_setting,
    )

class patch_reconstructed_interface(Boolean):
    """
    Enable/Disable patch reconstructed interface.
    """
    _version = '251'
    fluent_name = 'patch-reconstructed-interface?'
    _python_name = 'patch_reconstructed_interface'

class use_volumetric_smoothing(Boolean):
    """
    Enable/Disable volumetric smoothing.
    """
    _version = '251'
    fluent_name = 'use-volumetric-smoothing?'
    _python_name = 'use_volumetric_smoothing'

class smoothing_relaxation_factor(Real):
    """
    Smoothing relaxation factor (min : 0, max : 1).
    """
    _version = '251'
    fluent_name = 'smoothing-relaxation-factor'
    _python_name = 'smoothing_relaxation_factor'

class execute_smoothing(Command):
    """
    Execute volumetric smoothing for volume fraction.
    """
    _version = '251'
    fluent_name = 'execute-smoothing'
    _python_name = 'execute_smoothing'

class vof_smooth_options(Group):
    """
    Patch and smoothing options for volume fraction.
    """
    _version = '251'
    fluent_name = 'vof-smooth-options'
    _python_name = 'vof_smooth_options'
    child_names = ['patch_reconstructed_interface', 'use_volumetric_smoothing', 'smoothing_relaxation_factor']
    command_names = ['execute_smoothing']
    _child_classes = dict(
        patch_reconstructed_interface=patch_reconstructed_interface,
        use_volumetric_smoothing=use_volumetric_smoothing,
        smoothing_relaxation_factor=smoothing_relaxation_factor,
        execute_smoothing=execute_smoothing,
    )

class domain_1(String, AllowedValuesMixin):
    """
    Domain.
    """
    _version = '251'
    fluent_name = 'domain'
    _python_name = 'domain'

class cell_zones_8(StringList, AllowedValuesMixin):
    """
    Cell zone.
    """
    _version = '251'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'

class registers(StringList, AllowedValuesMixin):
    """
    Register.
    """
    _version = '251'
    fluent_name = 'registers'
    _python_name = 'registers'

class variable(String, AllowedValuesMixin):
    """
    Variable.
    """
    _version = '251'
    fluent_name = 'variable'
    _python_name = 'variable'

class reference_frame_8(String, AllowedValuesMixin):
    """
    Velocity Reference Frame.
    """
    _version = '251'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'

class use_custom_field_function(Boolean):
    """
    Enable/disable custom field function for patching.
    """
    _version = '251'
    fluent_name = 'use-custom-field-function?'
    _python_name = 'use_custom_field_function'

class custom_field_function_name(String, AllowedValuesMixin):
    """
    Custom function.
    """
    _version = '251'
    fluent_name = 'custom-field-function-name'
    _python_name = 'custom_field_function_name'

class value_18(Real):
    """
    Patch value.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class calculate_patch(Command):
    """
    Patch a value for a flow variable in the domain.
    
    Parameters
    ----------
        domain : str
            Domain.
        cell_zones : List
            Cell zone.
        registers : List
            Register.
        variable : str
            Variable.
        reference_frame : str
            Velocity Reference Frame.
        use_custom_field_function : bool
            Enable/disable custom field function for patching.
        custom_field_function_name : str
            Custom function.
        value : real
            Patch value.
    """
    _version = '251'
    fluent_name = 'calculate-patch'
    _python_name = 'calculate_patch'
    argument_names = ['domain', 'cell_zones', 'registers', 'variable', 'reference_frame', 'use_custom_field_function', 'custom_field_function_name', 'value']
    _child_classes = dict(
        domain=domain_1,
        cell_zones=cell_zones_8,
        registers=registers,
        variable=variable,
        reference_frame=reference_frame_8,
        use_custom_field_function=use_custom_field_function,
        custom_field_function_name=custom_field_function_name,
        value=value_18,
    )

class patch(Group):
    """
    Patch object.
    """
    _version = '251'
    fluent_name = 'patch'
    _python_name = 'patch'
    child_names = ['vof_smooth_options']
    command_names = ['calculate_patch']
    _child_classes = dict(
        vof_smooth_options=vof_smooth_options,
        calculate_patch=calculate_patch,
    )

class boundary_zone(String, AllowedValuesMixin):
    """
    Boundary thread id.
    """
    _version = '251'
    fluent_name = 'boundary-zone'
    _python_name = 'boundary_zone'

class flat_init(Boolean):
    """
    Enable/disable flat free surface initialization.
    """
    _version = '251'
    fluent_name = 'flat-init?'
    _python_name = 'flat_init'

class wavy_surface_init(Boolean):
    """
    Enable/disable wavy free surface initialization.
    """
    _version = '251'
    fluent_name = 'wavy-surface-init?'
    _python_name = 'wavy_surface_init'

class open_channel_auto_init(Group):
    """
    Open channel automatic initialization.
    """
    _version = '251'
    fluent_name = 'open-channel-auto-init'
    _python_name = 'open_channel_auto_init'
    child_names = ['boundary_zone', 'flat_init', 'wavy_surface_init']
    _child_classes = dict(
        boundary_zone=boundary_zone,
        flat_init=flat_init,
        wavy_surface_init=wavy_surface_init,
    )

class fmg_courant_number(Real):
    """
    FMG Courant number.
    """
    _version = '251'
    fluent_name = 'fmg-courant-number'
    _python_name = 'fmg_courant_number'

class enable_fmg_verbose(Boolean):
    """
    Enable/disable FMG verbose.
    """
    _version = '251'
    fluent_name = 'enable-fmg-verbose?'
    _python_name = 'enable_fmg_verbose'

class viscous_terms(Boolean):
    """
    Enable viscous terms during FMG initialization.
    """
    _version = '251'
    fluent_name = 'viscous-terms?'
    _python_name = 'viscous_terms'

class species_reactions(Boolean):
    """
    Enable species volumetric reactions during FMG initialization.
    """
    _version = '251'
    fluent_name = 'species-reactions?'
    _python_name = 'species_reactions'

class turbulent_viscosity_ratio_2(Real):
    """
    Turbulent viscosity ratio used during FMG initialization.
    """
    _version = '251'
    fluent_name = 'turbulent-viscosity-ratio'
    _python_name = 'turbulent_viscosity_ratio'

class fmg_initialize(Command):
    """
    Initialize using the full-multigrid initialization (FMG).
    """
    _version = '251'
    fluent_name = 'fmg-initialize'
    _python_name = 'fmg_initialize'

class multi_level_grid(Integer):
    """
    Number of multigrid levels.
    """
    _version = '251'
    fluent_name = 'multi-level-grid'
    _python_name = 'multi_level_grid'

class residual_reduction(RealList):
    """
    Number of residual reduction levels.
    """
    _version = '251'
    fluent_name = 'residual-reduction'
    _python_name = 'residual_reduction'

class cycle_count(RealList):
    """
    Number of cycles.
    """
    _version = '251'
    fluent_name = 'cycle-count'
    _python_name = 'cycle_count'

class customize(Command):
    """
    Enter FMG customization object.
    
    Parameters
    ----------
        multi_level_grid : int
            Number of multigrid levels.
        residual_reduction : List
            Number of residual reduction levels.
        cycle_count : List
            Number of cycles.
    """
    _version = '251'
    fluent_name = 'customize'
    _python_name = 'customize'
    argument_names = ['multi_level_grid', 'residual_reduction', 'cycle_count']
    _child_classes = dict(
        multi_level_grid=multi_level_grid,
        residual_reduction=residual_reduction,
        cycle_count=cycle_count,
    )

class reset_to_defaults(Command):
    """
    'reset_to_defaults' command.
    """
    _version = '251'
    fluent_name = 'reset-to-defaults'
    _python_name = 'reset_to_defaults'

class fmg(Group):
    """
    The set full-multigrid for initialization object.
    """
    _version = '251'
    fluent_name = 'fmg'
    _python_name = 'fmg'
    child_names = ['fmg_courant_number', 'enable_fmg_verbose', 'viscous_terms', 'species_reactions', 'turbulent_viscosity_ratio']
    command_names = ['fmg_initialize', 'customize', 'reset_to_defaults']
    _child_classes = dict(
        fmg_courant_number=fmg_courant_number,
        enable_fmg_verbose=enable_fmg_verbose,
        viscous_terms=viscous_terms,
        species_reactions=species_reactions,
        turbulent_viscosity_ratio=turbulent_viscosity_ratio_2,
        fmg_initialize=fmg_initialize,
        customize=customize,
        reset_to_defaults=reset_to_defaults,
    )

class initialize_1(Command):
    """
    Start initialization with current initialization type.
    """
    _version = '251'
    fluent_name = 'initialize'
    _python_name = 'initialize'

class from_zone_type_1(String, AllowedValuesMixin):
    """
    Boundary/zone type.
    """
    _version = '251'
    fluent_name = 'from-zone-type'
    _python_name = 'from_zone_type'

class from_zone_name_1(String, AllowedValuesMixin):
    """
    Selecte zone name.
    """
    _version = '251'
    fluent_name = 'from-zone-name'
    _python_name = 'from_zone_name'

class phase_54(String):
    """
    Phase name.
    """
    _version = '251'
    fluent_name = 'phase'
    _python_name = 'phase'

class compute_defaults(Command):
    """
    Compute default values from selection.
    
    Parameters
    ----------
        from_zone_type : str
            Boundary/zone type.
        from_zone_name : str
            Selecte zone name.
        phase : str
            Phase name.
    """
    _version = '251'
    fluent_name = 'compute-defaults'
    _python_name = 'compute_defaults'
    argument_names = ['from_zone_type', 'from_zone_name', 'phase']
    _child_classes = dict(
        from_zone_type=from_zone_type_1,
        from_zone_name=from_zone_name_1,
        phase=phase_54,
    )

class standard_initialize(Command):
    """
    Initialize the flow field with the current default values.
    """
    _version = '251'
    fluent_name = 'standard-initialize'
    _python_name = 'standard_initialize'

class hybrid_initialize(Command):
    """
    Initialize using the hybrid initialization method.
    """
    _version = '251'
    fluent_name = 'hybrid-initialize'
    _python_name = 'hybrid_initialize'

class list_defaults(Command):
    """
    List default values.
    """
    _version = '251'
    fluent_name = 'list-defaults'
    _python_name = 'list_defaults'

class init_turb_vel_fluctuations(Command):
    """
    Initialize turbulent velocity fluctuations.
    """
    _version = '251'
    fluent_name = 'init-turb-vel-fluctuations'
    _python_name = 'init_turb_vel_fluctuations'

class init_flow_statistics(Command):
    """
    Initialize statistics.
    """
    _version = '251'
    fluent_name = 'init-flow-statistics'
    _python_name = 'init_flow_statistics'

class show_iterations_sampled(Command):
    """
    Display the amount of simulated iterations covered by the data sampled for steady statistics.
    """
    _version = '251'
    fluent_name = 'show-iterations-sampled'
    _python_name = 'show_iterations_sampled'

class show_time_sampled(Command):
    """
    Display the amount of simulated time covered by the data sampled for unsteady statistics.
    """
    _version = '251'
    fluent_name = 'show-time-sampled'
    _python_name = 'show_time_sampled'

class dpm_reset(Command):
    """
    Reset discrete phase source terms to zero.
    """
    _version = '251'
    fluent_name = 'dpm-reset'
    _python_name = 'dpm_reset'

class lwf_reset(Command):
    """
    Delete wall film particles and initialize wall film variables to zero.
    """
    _version = '251'
    fluent_name = 'lwf-reset'
    _python_name = 'lwf_reset'

class init_lwf(Command):
    """
    Initialize Lagrangian wall film on all wall zones for which corresponding settings have been made.
    """
    _version = '251'
    fluent_name = 'init-lwf'
    _python_name = 'init_lwf'

class set_ramping_length(Boolean):
    """
    Enable/Disable ramping length and initialize acoustics.
    """
    _version = '251'
    fluent_name = 'set-ramping-length?'
    _python_name = 'set_ramping_length'

class time_step_count(Integer):
    """
    Number of timesteps for ramping of sources.
    """
    _version = '251'
    fluent_name = 'time-step-count'
    _python_name = 'time_step_count'

class init_acoustics_options(Command):
    """
    Specify number of timesteps for ramping of sources
    and initialize acoustics model variables.
    During ramping the sound sources are multiplied by a factor smoothly growing from 0 to 1.
    
    Parameters
    ----------
        set_ramping_length : bool
            Enable/Disable ramping length and initialize acoustics.
        time_step_count : int
            Number of timesteps for ramping of sources.
    """
    _version = '251'
    fluent_name = 'init-acoustics-options'
    _python_name = 'init_acoustics_options'
    argument_names = ['set_ramping_length', 'time_step_count']
    _child_classes = dict(
        set_ramping_length=set_ramping_length,
        time_step_count=time_step_count,
    )

class levelset_auto_init(Command):
    """
    Levelset function automatic initialization.
    """
    _version = '251'
    fluent_name = 'levelset-auto-init'
    _python_name = 'levelset_auto_init'

class initialization(Group):
    """
    Solution initialization object.
    """
    _version = '251'
    fluent_name = 'initialization'
    _python_name = 'initialization'
    child_names = ['initialization_type', 'reference_frame', 'defaults', 'localized_turb_init', 'hybrid_init_options', 'patch', 'open_channel_auto_init', 'fmg']
    command_names = ['initialize', 'compute_defaults', 'standard_initialize', 'hybrid_initialize', 'list_defaults', 'init_turb_vel_fluctuations', 'init_flow_statistics', 'show_iterations_sampled', 'show_time_sampled', 'dpm_reset', 'lwf_reset', 'init_lwf', 'init_acoustics_options', 'levelset_auto_init']
    _child_classes = dict(
        initialization_type=initialization_type,
        reference_frame=reference_frame_7,
        defaults=defaults,
        localized_turb_init=localized_turb_init,
        hybrid_init_options=hybrid_init_options,
        patch=patch,
        open_channel_auto_init=open_channel_auto_init,
        fmg=fmg,
        initialize=initialize_1,
        compute_defaults=compute_defaults,
        standard_initialize=standard_initialize,
        hybrid_initialize=hybrid_initialize,
        list_defaults=list_defaults,
        init_turb_vel_fluctuations=init_turb_vel_fluctuations,
        init_flow_statistics=init_flow_statistics,
        show_iterations_sampled=show_iterations_sampled,
        show_time_sampled=show_time_sampled,
        dpm_reset=dpm_reset,
        lwf_reset=lwf_reset,
        init_lwf=init_lwf,
        init_acoustics_options=init_acoustics_options,
        levelset_auto_init=levelset_auto_init,
    )

class command_name(String):
    """
    'command_name' child.
    """
    _version = '251'
    fluent_name = 'command-name'
    _python_name = 'command_name'

class enable_24(Command):
    """
    Enable an execute-command.
    """
    _version = '251'
    fluent_name = 'enable'
    _python_name = 'enable'
    argument_names = ['command_name']
    _child_classes = dict(
        command_name=command_name,
    )

class disable_1(Command):
    """
    Disable an execute-command.
    """
    _version = '251'
    fluent_name = 'disable'
    _python_name = 'disable'
    argument_names = ['command_name']
    _child_classes = dict(
        command_name=command_name,
    )

class copy_3(Command):
    """
    Copy an execute-command.
    """
    _version = '251'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['command_name']
    _child_classes = dict(
        command_name=command_name,
    )

class delete_5(CommandWithPositionalArgs):
    """
    Delete an execute-command.
    """
    _version = '251'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['command_name']
    _child_classes = dict(
        command_name=command_name,
    )

class command_name_1(StringList):
    """
    'command_name' child.
    """
    _version = '251'
    fluent_name = 'command-name'
    _python_name = 'command_name'

class tsv_file_name(Filename, _OutputFile):
    """
    'tsv_file_name' child.
    """
    _version = '251'
    fluent_name = 'tsv-file-name'
    _python_name = 'tsv_file_name'

class export_1(Command):
    """
    Export execute-commands to a TSV file.
    """
    _version = '251'
    fluent_name = 'export'
    _python_name = 'export'
    argument_names = ['command_name', 'tsv_file_name']
    _child_classes = dict(
        command_name=command_name_1,
        tsv_file_name=tsv_file_name,
    )

class tsv_file_name_1(Filename, _InputFile):
    """
    'tsv_file_name' child.
    """
    _version = '251'
    fluent_name = 'tsv-file-name'
    _python_name = 'tsv_file_name'

class import__1(Command):
    """
    Import execute-commands from a TSV file.
    """
    _version = '251'
    fluent_name = 'import_'
    _python_name = 'import_'
    argument_names = ['tsv_file_name']
    _child_classes = dict(
        tsv_file_name=tsv_file_name_1,
    )

class execute_commands(Group):
    """
    'execute_commands' child.
    """
    _version = '251'
    fluent_name = 'execute-commands'
    _python_name = 'execute_commands'
    command_names = ['enable', 'disable', 'copy', 'delete', 'export', 'import_']
    _child_classes = dict(
        enable=enable_24,
        disable=disable_1,
        copy=copy_3,
        delete=delete_5,
        export=export_1,
        import_=import__1,
    )

class from__2(String, AllowedValuesMixin):
    """
    Object name to copy.
    """
    _version = '251'
    fluent_name = 'from'
    _python_name = 'from_'

class to_2(String):
    """
    Object name for copied object.
    """
    _version = '251'
    fluent_name = 'to'
    _python_name = 'to'

class make_a_copy_1(Command):
    """
    Copy graphics object.
    
    Parameters
    ----------
        from_ : str
            Object name to copy.
        to : str
            Object name for copied object.
    """
    _version = '251'
    fluent_name = 'make-a-copy'
    _python_name = 'make_a_copy'
    argument_names = ['from_', 'to']
    _child_classes = dict(
        from_=from__2,
        to=to_2,
    )

class object_name_1(String, AllowedValuesMixin):
    """
    'object_name' child.
    """
    _version = '251'
    fluent_name = 'object-name'
    _python_name = 'object_name'

class display_2(Command):
    """
    Display graphics object.
    
    Parameters
    ----------
        object_name : str
            'object_name' child.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name_1,
    )

class add_to_graphics(Command):
    """
    Add graphics object to existing graphics.
    
    Parameters
    ----------
        object_name : str
            'object_name' child.
    """
    _version = '251'
    fluent_name = 'add-to-graphics'
    _python_name = 'add_to_graphics'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name_1,
    )

class clear_history(Command):
    """
    Clear object history.
    
    Parameters
    ----------
        object_name : str
            'object_name' child.
    """
    _version = '251'
    fluent_name = 'clear-history'
    _python_name = 'clear_history'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name_1,
    )

class name_17(String):
    """
    A name for an object.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class animate_on(String, AllowedValuesMixin):
    """
    A graphics object to animate. The images will be captured at the specified frequency.
    """
    _version = '251'
    fluent_name = 'animate-on'
    _python_name = 'animate_on'

class frequency_of_1(String, AllowedValuesMixin):
    """
    Specifies whether images are saved based on time-step, flow-time, or iteration.
    """
    _version = '251'
    fluent_name = 'frequency-of'
    _python_name = 'frequency_of'

class frequency_3(Integer):
    """
    The timestep/iteration number after which image will be captured.
    """
    _version = '251'
    fluent_name = 'frequency'
    _python_name = 'frequency'

class flow_time_frequency(Real):
    """
    How much flow-time must pass before images are captured.
    """
    _version = '251'
    fluent_name = 'flow-time-frequency'
    _python_name = 'flow_time_frequency'

class last_flow_time(Real):
    """
    'last_flow_time' child.
    """
    _version = '251'
    fluent_name = 'last-flow-time'
    _python_name = 'last_flow_time'

class append_filename_with(String, AllowedValuesMixin):
    """
    Specifies whether the time-step, flow-time, or iteration number is appended to the animation image file name.
    """
    _version = '251'
    fluent_name = 'append-filename-with'
    _python_name = 'append_filename_with'

class storage_type(Integer):
    """
    The image format file type.
    """
    _version = '251'
    fluent_name = 'storage-type'
    _python_name = 'storage_type'

class storage_dir(String, AllowedValuesMixin):
    """
    The directory where animation images are stored using either an absolute or relative (./) path to currently opened case directory.
    """
    _version = '251'
    fluent_name = 'storage-dir'
    _python_name = 'storage_dir'

class window_id(Integer):
    """
    Window id to display recording image object at.
    """
    _version = '251'
    fluent_name = 'window-id'
    _python_name = 'window_id'

class view(String, AllowedValuesMixin):
    """
    Specifies whether the view is based on the animation object or from the stored list of views.
    """
    _version = '251'
    fluent_name = 'view'
    _python_name = 'view'

class use_raytracing(Boolean):
    """
    Specifies whether to export animation images using realistic raytracer rendering (computationally expensive).
    """
    _version = '251'
    fluent_name = 'use-raytracing?'
    _python_name = 'use_raytracing'

class append_filename(Boolean):
    """
    Append the time-step, flow-time, or iteration number to the animation image file names.
    """
    _version = '251'
    fluent_name = 'append-filename?'
    _python_name = 'append_filename'

class appended_flowtime_precision(Integer):
    """
    The number of decimal places included in the appended flow-time value.
    """
    _version = '251'
    fluent_name = 'appended-flowtime-precision'
    _python_name = 'appended_flowtime_precision'

class display_3(Command):
    """
    'display' command.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'

class solution_animations_child(Group):
    """
    'child_object_type' of solution_animations.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'solution_animations_child'
    child_names = ['name', 'animate_on', 'frequency_of', 'frequency', 'flow_time_frequency', 'last_flow_time', 'append_filename_with', 'storage_type', 'storage_dir', 'window_id', 'view', 'use_raytracing', 'append_filename', 'appended_flowtime_precision']
    command_names = ['display']
    _child_classes = dict(
        name=name_17,
        animate_on=animate_on,
        frequency_of=frequency_of_1,
        frequency=frequency_3,
        flow_time_frequency=flow_time_frequency,
        last_flow_time=last_flow_time,
        append_filename_with=append_filename_with,
        storage_type=storage_type,
        storage_dir=storage_dir,
        window_id=window_id,
        view=view,
        use_raytracing=use_raytracing,
        append_filename=append_filename,
        appended_flowtime_precision=appended_flowtime_precision,
        display=display_3,
    )

class solution_animations(NamedObject[solution_animations_child], CreatableNamedObjectMixin[solution_animations_child]):
    """
    'solution_animations' child.
    """
    _version = '251'
    fluent_name = 'solution-animations'
    _python_name = 'solution_animations'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'display', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy_1,
        display=display_2,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = solution_animations_child
    _child_aliases = dict(
        copy=('make_a_copy', 'copy'),
    )

class enabled_57(Boolean):
    """
    Enable automatic initialization and modification of case.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class init_from_data_file(String, AllowedValuesMixin):
    """
    Data File.
    """
    _version = '251'
    fluent_name = 'init-from-data-file'
    _python_name = 'init_from_data_file'

class option_36(String, AllowedValuesMixin):
    """
    How to initialize the solution for first run.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class init_from_solution(Group):
    """
    How to initialize if no solution data exists.
    """
    _version = '251'
    fluent_name = 'init-from-solution'
    _python_name = 'init_from_solution'
    child_names = ['option', 'init_from_data_file']
    _child_classes = dict(
        option=option_36,
        init_from_data_file=init_from_data_file,
    )

class initialization_method(Group):
    """
    'initialization_method' child.
    """
    _version = '251'
    fluent_name = 'initialization-method'
    _python_name = 'initialization_method'
    child_names = ['init_from_data_file', 'init_from_solution']
    _child_classes = dict(
        init_from_data_file=init_from_data_file,
        init_from_solution=init_from_solution,
    )

class python_cmd(Boolean):
    """
    'python_cmd' child.
    """
    _version = '251'
    fluent_name = 'python-cmd?'
    _python_name = 'python_cmd'

class command(String, AllowedValuesMixin):
    """
    'command' child.
    """
    _version = '251'
    fluent_name = 'command'
    _python_name = 'command'

class count(Integer):
    """
    'count' child.
    """
    _version = '251'
    fluent_name = 'count'
    _python_name = 'count'

class ftselected(Boolean):
    """
    'ftselected' child.
    """
    _version = '251'
    fluent_name = 'ftselected'
    _python_name = 'ftselected'

class flowtime(Real):
    """
    'flowtime' child.
    """
    _version = '251'
    fluent_name = 'flowtime'
    _python_name = 'flowtime'

class before_init_modification(Group):
    """
    'before_init_modification' child.
    """
    _version = '251'
    fluent_name = 'before-init-modification'
    _python_name = 'before_init_modification'
    child_names = ['active', 'name', 'python_cmd', 'command', 'count', 'ftselected', 'flowtime']
    _child_classes = dict(
        active=active,
        name=name_14,
        python_cmd=python_cmd,
        command=command,
        count=count,
        ftselected=ftselected,
        flowtime=flowtime,
    )

class original_settings(Group):
    """
    'original_settings' child.
    """
    _version = '251'
    fluent_name = 'original-settings'
    _python_name = 'original_settings'
    child_names = ['active', 'name', 'python_cmd', 'command', 'count', 'ftselected', 'flowtime']
    _child_classes = dict(
        active=active,
        name=name_14,
        python_cmd=python_cmd,
        command=command,
        count=count,
        ftselected=ftselected,
        flowtime=flowtime,
    )

class modifications_child(Group):
    """
    'child_object_type' of modifications.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'modifications_child'
    child_names = ['active', 'name', 'python_cmd', 'command', 'count', 'ftselected', 'flowtime']
    _child_classes = dict(
        active=active,
        name=name_14,
        python_cmd=python_cmd,
        command=command,
        count=count,
        ftselected=ftselected,
        flowtime=flowtime,
    )

class modifications(ListObject[modifications_child]):
    """
    'modifications' child.
    """
    _version = '251'
    fluent_name = 'modifications'
    _python_name = 'modifications'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = modifications_child

class case_modification_1(Group):
    """
    'case_modification' child.
    """
    _version = '251'
    fluent_name = 'case-modification'
    _python_name = 'case_modification'
    child_names = ['before_init_modification', 'original_settings', 'modifications']
    _child_classes = dict(
        before_init_modification=before_init_modification,
        original_settings=original_settings,
        modifications=modifications,
    )

class initialization_type_1(String, AllowedValuesMixin):
    """
    'initialization_type' child.
    """
    _version = '251'
    fluent_name = 'initialization-type'
    _python_name = 'initialization_type'

class data_file_name(String):
    """
    'data_file_name' child.
    """
    _version = '251'
    fluent_name = 'data-file-name'
    _python_name = 'data_file_name'

class init_from_solution_1(String, AllowedValuesMixin):
    """
    'init_from_solution' child.
    """
    _version = '251'
    fluent_name = 'init-from-solution'
    _python_name = 'init_from_solution'

class data_file_name2(String):
    """
    'data_file_name2' child.
    """
    _version = '251'
    fluent_name = 'data-file-name2'
    _python_name = 'data_file_name2'

class automatic_initialization(Command):
    """
    Define how the case is to be initialized automatically.
    
    Parameters
    ----------
        initialization_type : str
            'initialization_type' child.
        data_file_name : str
            'data_file_name' child.
        init_from_solution : str
            'init_from_solution' child.
        data_file_name2 : str
            'data_file_name2' child.
    """
    _version = '251'
    fluent_name = 'automatic-initialization'
    _python_name = 'automatic_initialization'
    argument_names = ['initialization_type', 'data_file_name', 'init_from_solution', 'data_file_name2']
    _child_classes = dict(
        initialization_type=initialization_type_1,
        data_file_name=data_file_name,
        init_from_solution=init_from_solution_1,
        data_file_name2=data_file_name2,
    )

class save_mode(String, AllowedValuesMixin):
    """
    'save_mode' child.
    """
    _version = '251'
    fluent_name = 'save-mode'
    _python_name = 'save_mode'

class continue_with_current_mesh(Boolean):
    """
    Reloading of the upstream mesh data is desired. Is it needed to continue with currently loaded mesh?.
    """
    _version = '251'
    fluent_name = 'continue-with-current-mesh?'
    _python_name = 'continue_with_current_mesh'

class discard_all_data(Boolean):
    """
    'discard_all_data' child.
    """
    _version = '251'
    fluent_name = 'discard-all-data?'
    _python_name = 'discard_all_data'

class execute_strategy(Command):
    """
    Execute the automatic initialization and case modification strategy defined at present .
    
    Parameters
    ----------
        save_mode : str
            'save_mode' child.
        continue_with_current_mesh : bool
            Reloading of the upstream mesh data is desired. Is it needed to continue with currently loaded mesh?.
        discard_all_data : bool
            'discard_all_data' child.
    """
    _version = '251'
    fluent_name = 'execute-strategy'
    _python_name = 'execute_strategy'
    argument_names = ['save_mode', 'continue_with_current_mesh', 'discard_all_data']
    _child_classes = dict(
        save_mode=save_mode,
        continue_with_current_mesh=continue_with_current_mesh,
        discard_all_data=discard_all_data,
    )

class enable_strategy(Command):
    """
    Specify whether automatic initialization and case modification should be enabled.
    
    Parameters
    ----------
        enable : bool
            'enable' child.
    """
    _version = '251'
    fluent_name = 'enable-strategy?'
    _python_name = 'enable_strategy'
    argument_names = ['enable']
    _child_classes = dict(
        enable=enable_1,
    )

class mod_name(String):
    """
    Name of Modification.
    """
    _version = '251'
    fluent_name = 'mod-name'
    _python_name = 'mod_name'

class mod_exists(Boolean):
    """
    Modification Exists?.
    """
    _version = '251'
    fluent_name = 'mod-exists?'
    _python_name = 'mod_exists'

class mod_active(Boolean):
    """
    Modification is Active?.
    """
    _version = '251'
    fluent_name = 'mod-active?'
    _python_name = 'mod_active'

class mod_execution_option(String, AllowedValuesMixin):
    """
    Execution Option for Transient.
    """
    _version = '251'
    fluent_name = 'mod-execution-option'
    _python_name = 'mod_execution_option'

class mod_iterations(Integer):
    """
    Modification Iterations.
    """
    _version = '251'
    fluent_name = 'mod-iterations'
    _python_name = 'mod_iterations'

class mod_timesteps(Integer):
    """
    Modification Time Steps.
    """
    _version = '251'
    fluent_name = 'mod-timesteps'
    _python_name = 'mod_timesteps'

class mod_flowtime(Real):
    """
    Modification Flow Time.
    """
    _version = '251'
    fluent_name = 'mod-flowtime'
    _python_name = 'mod_flowtime'

class mod_python(Boolean):
    """
    Modification is Python?.
    """
    _version = '251'
    fluent_name = 'mod-python?'
    _python_name = 'mod_python'

class mod_command(String):
    """
    Modification.
    """
    _version = '251'
    fluent_name = 'mod-command'
    _python_name = 'mod_command'

class add_edit_modification(Command):
    """
    Define a single case modification.
    """
    _version = '251'
    fluent_name = 'add-edit-modification'
    _python_name = 'add_edit_modification'
    argument_names = ['mod_name', 'mod_exists', 'mod_active', 'mod_execution_option', 'mod_iterations', 'mod_timesteps', 'mod_flowtime', 'mod_python', 'mod_command']
    _child_classes = dict(
        mod_name=mod_name,
        mod_exists=mod_exists,
        mod_active=mod_active,
        mod_execution_option=mod_execution_option,
        mod_iterations=mod_iterations,
        mod_timesteps=mod_timesteps,
        mod_flowtime=mod_flowtime,
        mod_python=mod_python,
        mod_command=mod_command,
    )

class mod_name_1(String):
    """
    'mod_name' child.
    """
    _version = '251'
    fluent_name = 'mod-name'
    _python_name = 'mod_name'

class copy_modification(Command):
    """
    Copy a single case modification.
    
    Parameters
    ----------
        mod_name : str
            'mod_name' child.
    """
    _version = '251'
    fluent_name = 'copy-modification'
    _python_name = 'copy_modification'
    argument_names = ['mod_name']
    _child_classes = dict(
        mod_name=mod_name_1,
    )

class delete_modification(Command):
    """
    Delete a single case modification.
    
    Parameters
    ----------
        mod_name : str
            'mod_name' child.
    """
    _version = '251'
    fluent_name = 'delete-modification'
    _python_name = 'delete_modification'
    argument_names = ['mod_name']
    _child_classes = dict(
        mod_name=mod_name_1,
    )

class enable_modification(Command):
    """
    Enable a single defined case modification.
    
    Parameters
    ----------
        mod_name : str
            'mod_name' child.
    """
    _version = '251'
    fluent_name = 'enable-modification'
    _python_name = 'enable_modification'
    argument_names = ['mod_name']
    _child_classes = dict(
        mod_name=mod_name_1,
    )

class disable_modification(Command):
    """
    Disable a single defined case modification.
    
    Parameters
    ----------
        mod_name : str
            'mod_name' child.
    """
    _version = '251'
    fluent_name = 'disable-modification'
    _python_name = 'disable_modification'
    argument_names = ['mod_name']
    _child_classes = dict(
        mod_name=mod_name_1,
    )

class import_modifications(Command):
    """
    Import a list of case modifications from a tsv file.
    
    Parameters
    ----------
        filename : str
            'filename' child.
    """
    _version = '251'
    fluent_name = 'import-modifications'
    _python_name = 'import_modifications'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_3,
    )

class command_list(StringList):
    """
    'command_list' child.
    """
    _version = '251'
    fluent_name = 'command-list'
    _python_name = 'command_list'

class filename_1_4(Filename, _OutputFile):
    """
    'filename' child.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class export_modifications(Command):
    """
    Export all case modifications to a tsv file.
    """
    _version = '251'
    fluent_name = 'export-modifications'
    _python_name = 'export_modifications'
    argument_names = ['command_list', 'filename']
    _child_classes = dict(
        command_list=command_list,
        filename=filename_1_4,
    )

class continue_strategy_execution(Command):
    """
    Continue execution of the automatic initialization and case modification strategy defined at present.
    """
    _version = '251'
    fluent_name = 'continue-strategy-execution'
    _python_name = 'continue_strategy_execution'

class case_modification(Group):
    """
    'case_modification' child.
    """
    _version = '251'
    fluent_name = 'case-modification'
    _python_name = 'case_modification'
    child_names = ['enabled', 'initialization_method', 'case_modification']
    command_names = ['automatic_initialization', 'execute_strategy', 'enable_strategy', 'add_edit_modification', 'copy_modification', 'delete_modification', 'enable_modification', 'disable_modification', 'import_modifications', 'export_modifications', 'continue_strategy_execution']
    _child_classes = dict(
        enabled=enabled_57,
        initialization_method=initialization_method,
        case_modification=case_modification_1,
        automatic_initialization=automatic_initialization,
        execute_strategy=execute_strategy,
        enable_strategy=enable_strategy,
        add_edit_modification=add_edit_modification,
        copy_modification=copy_modification,
        delete_modification=delete_modification,
        enable_modification=enable_modification,
        disable_modification=disable_modification,
        import_modifications=import_modifications,
        export_modifications=export_modifications,
        continue_strategy_execution=continue_strategy_execution,
    )

class list_3(Command):
    """
    List the names of the definitions for poor mesh numerics.
    """
    _version = '251'
    fluent_name = 'list'
    _python_name = 'list'

class register_name_1(String, AllowedValuesMixin):
    """
    'register_name' child.
    """
    _version = '251'
    fluent_name = 'register-name'
    _python_name = 'register_name'

class list_properties_5(Command):
    """
    List the properties of a definition for poor mesh numerics.
    
    Parameters
    ----------
        register_name : str
            'register_name' child.
    """
    _version = '251'
    fluent_name = 'list-properties'
    _python_name = 'list_properties'
    argument_names = ['register_name']
    _child_classes = dict(
        register_name=register_name_1,
    )

class set_1(Command):
    """
    'set' command.
    """
    _version = '251'
    fluent_name = 'set'
    _python_name = 'set'

class name_18(String):
    """
    The name of the dynamic poor mesh register.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class register_2(String, AllowedValuesMixin):
    """
    The register to which poor mesh numerics is applied.
    """
    _version = '251'
    fluent_name = 'register'
    _python_name = 'register'

class option_37(String, AllowedValuesMixin):
    """
    The frequency mode used for marking of cells in a register for poor mesh numerics treatment.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class iterations_1(Integer):
    """
    The frequency (in iterations) at which cells in the register are marked for poor mesh numerics treatment.
    """
    _version = '251'
    fluent_name = 'iterations'
    _python_name = 'iterations'

class time_steps(Integer):
    """
    The frequency (in time steps) at which cells in the register are automatically marked for poor mesh numerics treatment.
    """
    _version = '251'
    fluent_name = 'time-steps'
    _python_name = 'time_steps'

class frequency_4(Group):
    """
    Define the frequency at which cells in the register are marked for poor mesh numerics treatment.
    """
    _version = '251'
    fluent_name = 'frequency'
    _python_name = 'frequency'
    child_names = ['option', 'iterations', 'time_steps']
    _child_classes = dict(
        option=option_37,
        iterations=iterations_1,
        time_steps=time_steps,
    )

class active_1(Boolean):
    """
    Enable the application of this definition for poor mesh numerics.
    """
    _version = '251'
    fluent_name = 'active?'
    _python_name = 'active'

class verbosity_16(Integer):
    """
    The verbosity of the console messages printed about this definition for poor mesh numerics.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class monitor_2(String, AllowedValuesMixin):
    """
    'monitor' child.
    """
    _version = '251'
    fluent_name = 'monitor'
    _python_name = 'monitor'

class register_based_child(Group):
    """
    'child_object_type' of register_based.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'register_based_child'
    child_names = ['name', 'register', 'frequency', 'active', 'verbosity', 'monitor']
    _child_classes = dict(
        name=name_18,
        register=register_2,
        frequency=frequency_4,
        active=active_1,
        verbosity=verbosity_16,
        monitor=monitor_2,
    )

class register_based(NamedObject[register_based_child], CreatableNamedObjectMixin[register_based_child]):
    """
    Up the application of poor mesh numerics to cells in a register.
    """
    _version = '251'
    fluent_name = 'register-based'
    _python_name = 'register_based'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'set']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list_3,
        list_properties=list_properties_5,
        make_a_copy=make_a_copy,
        set=set_1,
    )
    child_object_type = register_based_child

class poor_mesh_numerics(Group):
    """
    'poor_mesh_numerics' child.
    """
    _version = '251'
    fluent_name = 'poor-mesh-numerics'
    _python_name = 'poor_mesh_numerics'
    child_names = ['register_based']
    _child_classes = dict(
        register_based=register_based,
    )

class calculation_activity(Group):
    """
    'calculation_activity' child.
    """
    _version = '251'
    fluent_name = 'calculation-activity'
    _python_name = 'calculation_activity'
    child_names = ['execute_commands', 'solution_animations', 'case_modification', 'poor_mesh_numerics']
    _child_classes = dict(
        execute_commands=execute_commands,
        solution_animations=solution_animations,
        case_modification=case_modification,
        poor_mesh_numerics=poor_mesh_numerics,
    )

class verbosity_17(Integer):
    """
    The verbosity for the pseudo time method.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class time_step_method_1(String, AllowedValuesMixin):
    """
    Enable/disable use of automatic time step size calculation.
    """
    _version = '251'
    fluent_name = 'time-step-method'
    _python_name = 'time_step_method'

class pseudo_time_step_size(Real):
    """
    Pseudo time step size.
    """
    _version = '251'
    fluent_name = 'pseudo-time-step-size'
    _python_name = 'pseudo_time_step_size'

class length_scale_methods(String, AllowedValuesMixin):
    """
    Length Scale Calculation Method.
    """
    _version = '251'
    fluent_name = 'length-scale-methods'
    _python_name = 'length_scale_methods'

class time_step_size_scale_factor_1(Real):
    """
    Auto Time Step Size Scaling Factor.
    """
    _version = '251'
    fluent_name = 'time-step-size-scale-factor'
    _python_name = 'time_step_size_scale_factor'

class length_scale_1(Real):
    """
    Length Scale .
    """
    _version = '251'
    fluent_name = 'length-scale'
    _python_name = 'length_scale'

class auto_time_size_calc_solid_zone(Boolean):
    """
    Enable/disable automatic time step size calculation for solid zone.
    """
    _version = '251'
    fluent_name = 'auto-time-size-calc-solid-zone?'
    _python_name = 'auto_time_size_calc_solid_zone'

class time_solid_scale_factor(Real):
    """
    Auto Time Step Size Scaling Factor for solid zones.
    """
    _version = '251'
    fluent_name = 'time-solid-scale-factor'
    _python_name = 'time_solid_scale_factor'

class time_step_size_for_solid_zone(Real):
    """
    Pseudo Time Step Size for solid zones.
    """
    _version = '251'
    fluent_name = 'time-step-size-for-solid-zone'
    _python_name = 'time_step_size_for_solid_zone'

class time_step_method(Group):
    """
    Adjust the settings for the global time step formulation.
    """
    _version = '251'
    fluent_name = 'time-step-method'
    _python_name = 'time_step_method'
    child_names = ['time_step_method', 'pseudo_time_step_size', 'length_scale_methods', 'time_step_size_scale_factor', 'length_scale', 'auto_time_size_calc_solid_zone', 'time_solid_scale_factor', 'time_step_size_for_solid_zone']
    _child_classes = dict(
        time_step_method=time_step_method_1,
        pseudo_time_step_size=pseudo_time_step_size,
        length_scale_methods=length_scale_methods,
        time_step_size_scale_factor=time_step_size_scale_factor_1,
        length_scale=length_scale_1,
        auto_time_size_calc_solid_zone=auto_time_size_calc_solid_zone,
        time_solid_scale_factor=time_solid_scale_factor,
        time_step_size_for_solid_zone=time_step_size_for_solid_zone,
    )

class pseudo_time_settings(Group):
    """
    The pseudo time method object.
    """
    _version = '251'
    fluent_name = 'pseudo-time-settings'
    _python_name = 'pseudo_time_settings'
    child_names = ['verbosity', 'time_step_method']
    _child_classes = dict(
        verbosity=verbosity_17,
        time_step_method=time_step_method,
    )

class iter_count_2(Integer):
    """
    Number of iterations.
    """
    _version = '251'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'

class enabled_58(Boolean):
    """
    Enable/disable adaptive time stepping.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class user_defined_timestep(String, AllowedValuesMixin):
    """
    User-defined time-step option.
    """
    _version = '251'
    fluent_name = 'user-defined-timestep'
    _python_name = 'user_defined_timestep'

class error_tolerance(Real):
    """
    Truncation Error Tolerance.
    """
    _version = '251'
    fluent_name = 'error-tolerance'
    _python_name = 'error_tolerance'

class time_end(Real):
    """
    Total Simulation Time.
    """
    _version = '251'
    fluent_name = 'time-end'
    _python_name = 'time_end'

class min_time_step(Real):
    """
    Minimum Time Step Size.
    """
    _version = '251'
    fluent_name = 'min-time-step'
    _python_name = 'min_time_step'

class max_time_step(Real):
    """
    Maximum Time Step Size.
    """
    _version = '251'
    fluent_name = 'max-time-step'
    _python_name = 'max_time_step'

class min_step_change_factor(Real):
    """
    Minimum Step Change Factor.
    """
    _version = '251'
    fluent_name = 'min-step-change-factor'
    _python_name = 'min_step_change_factor'

class max_step_change_factor(Real):
    """
    Maximum Step Change Factor.
    """
    _version = '251'
    fluent_name = 'max-step-change-factor'
    _python_name = 'max_step_change_factor'

class fixed_time_step_count(Integer):
    """
    Number of Fixed Time Steps.
    """
    _version = '251'
    fluent_name = 'fixed-time-step-count'
    _python_name = 'fixed_time_step_count'

class adaptive_time_stepping(Group):
    """
    Adaptive time stepping object.
    """
    _version = '251'
    fluent_name = 'adaptive-time-stepping'
    _python_name = 'adaptive_time_stepping'
    child_names = ['enabled', 'user_defined_timestep', 'error_tolerance', 'time_end', 'min_time_step', 'max_time_step', 'min_step_change_factor', 'max_step_change_factor', 'fixed_time_step_count']
    _child_classes = dict(
        enabled=enabled_58,
        user_defined_timestep=user_defined_timestep,
        error_tolerance=error_tolerance,
        time_end=time_end,
        min_time_step=min_time_step,
        max_time_step=max_time_step,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
        fixed_time_step_count=fixed_time_step_count,
    )

class enabled_59(Boolean):
    """
    Enable/disable CFL-based adaptive time stepping.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class desired_cfl(Real):
    """
    Courant Number.
    """
    _version = '251'
    fluent_name = 'desired-cfl'
    _python_name = 'desired_cfl'

class initial_time_step(Real):
    """
    Initial Time Step Size.
    """
    _version = '251'
    fluent_name = 'initial-time-step'
    _python_name = 'initial_time_step'

class max_fixed_time_step(Integer):
    """
    Number of Fixed Time Steps.
    """
    _version = '251'
    fluent_name = 'max-fixed-time-step'
    _python_name = 'max_fixed_time_step'

class update_interval_time_step_size(Integer):
    """
    Time Step Size Update Interval.
    """
    _version = '251'
    fluent_name = 'update-interval-time-step-size'
    _python_name = 'update_interval_time_step_size'

class cfl_based_adaptive_time_stepping(Group):
    """
    CFL-based adaptive time stepping object.
    """
    _version = '251'
    fluent_name = 'cfl-based-adaptive-time-stepping'
    _python_name = 'cfl_based_adaptive_time_stepping'
    child_names = ['enabled', 'user_defined_timestep', 'desired_cfl', 'time_end', 'initial_time_step', 'max_fixed_time_step', 'update_interval_time_step_size', 'min_time_step', 'max_time_step', 'min_step_change_factor', 'max_step_change_factor']
    _child_classes = dict(
        enabled=enabled_59,
        user_defined_timestep=user_defined_timestep,
        desired_cfl=desired_cfl,
        time_end=time_end,
        initial_time_step=initial_time_step,
        max_fixed_time_step=max_fixed_time_step,
        update_interval_time_step_size=update_interval_time_step_size,
        min_time_step=min_time_step,
        max_time_step=max_time_step,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
    )

class reporting_interval(Integer):
    """
    Number of solver iterations before returning to scheme.
    """
    _version = '251'
    fluent_name = 'reporting-interval'
    _python_name = 'reporting_interval'

class profile_update_interval(Integer):
    """
    Number of solver iterations after which profile is updated.
    """
    _version = '251'
    fluent_name = 'profile-update-interval'
    _python_name = 'profile_update_interval'

class time_step_count_1(Real):
    """
    The time step.
    """
    _version = '251'
    fluent_name = 'time-step-count'
    _python_name = 'time_step_count'

class type_9(String, AllowedValuesMixin):
    """
    Time advancement method type.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'

class method_10(String, AllowedValuesMixin):
    """
    Time advancement method.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class duration_specification_method(String, AllowedValuesMixin):
    """
    Duration specification method.
    """
    _version = '251'
    fluent_name = 'duration-specification-method'
    _python_name = 'duration_specification_method'

class specified_time_step(Boolean):
    """
    Use specified time step or courant number.
    """
    _version = '251'
    fluent_name = 'specified-time-step'
    _python_name = 'specified_time_step'

class incremental_time(Real):
    """
    Incremental Time.
    """
    _version = '251'
    fluent_name = 'incremental-time'
    _python_name = 'incremental_time'

class time_step_count_2(Integer):
    """
    Inceremtal number of Time steps.
    """
    _version = '251'
    fluent_name = 'time-step-count'
    _python_name = 'time_step_count'

class total_time(Real):
    """
    Total Simulation Time.
    """
    _version = '251'
    fluent_name = 'total-time'
    _python_name = 'total_time'

class time_step_size(Real):
    """
    The physical time step size.
    """
    _version = '251'
    fluent_name = 'time-step-size'
    _python_name = 'time_step_size'

class max_iter_per_time_step(Integer):
    """
    Max Iterations/Time Step.
    """
    _version = '251'
    fluent_name = 'max-iter-per-time-step'
    _python_name = 'max_iter_per_time_step'

class total_time_step_count(Integer):
    """
    Total number of Time steps.
    """
    _version = '251'
    fluent_name = 'total-time-step-count'
    _python_name = 'total_time_step_count'

class solution_status(Boolean):
    """
    Activate the simulation status panel.
    """
    _version = '251'
    fluent_name = 'solution-status'
    _python_name = 'solution_status'

class extrapolate_variables(Boolean):
    """
    The extrapolation object.
    """
    _version = '251'
    fluent_name = 'extrapolate-variables'
    _python_name = 'extrapolate_variables'

class max_flow_time(Real):
    """
    Maximum flow time.
    """
    _version = '251'
    fluent_name = 'max-flow-time'
    _python_name = 'max_flow_time'

class courant_number_1(Real):
    """
    Courant Number.
    """
    _version = '251'
    fluent_name = 'courant-number'
    _python_name = 'courant_number'

class initial_time_step_size(Real):
    """
    Initial Time Step Size.
    """
    _version = '251'
    fluent_name = 'initial-time-step-size'
    _python_name = 'initial_time_step_size'

class fixed_time_step_size(Integer):
    """
    Number of Fixed Time Steps.
    """
    _version = '251'
    fluent_name = 'fixed-time-step-size'
    _python_name = 'fixed_time_step_size'

class min_time_step_size(Real):
    """
    Minimum Time Step Size.
    """
    _version = '251'
    fluent_name = 'min-time-step-size'
    _python_name = 'min_time_step_size'

class max_time_step_size(Real):
    """
    Maximum Time Step Size.
    """
    _version = '251'
    fluent_name = 'max-time-step-size'
    _python_name = 'max_time_step_size'

class update_interval_1(Integer):
    """
    Time Step Size Update Interval.
    """
    _version = '251'
    fluent_name = 'update-interval'
    _python_name = 'update_interval'

class cfl_based_time_stepping(Group):
    """
    CFL-based time stepping object.
    """
    _version = '251'
    fluent_name = 'cfl-based-time-stepping'
    _python_name = 'cfl_based_time_stepping'
    child_names = ['courant_number', 'initial_time_step_size', 'fixed_time_step_size', 'min_time_step_size', 'max_time_step_size', 'min_step_change_factor', 'max_step_change_factor', 'update_interval']
    _child_classes = dict(
        courant_number=courant_number_1,
        initial_time_step_size=initial_time_step_size,
        fixed_time_step_size=fixed_time_step_size,
        min_time_step_size=min_time_step_size,
        max_time_step_size=max_time_step_size,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
        update_interval=update_interval_1,
    )

class control_time_step_size_variation(Boolean):
    """
    Control time step size variation.
    """
    _version = '251'
    fluent_name = 'control-time-step-size-variation?'
    _python_name = 'control_time_step_size_variation'

class use_average_cfl(Boolean):
    """
    Use averaged CFL condition rather than minimum CFL condition.
    """
    _version = '251'
    fluent_name = 'use-average-cfl?'
    _python_name = 'use_average_cfl'

class cfl_type(String, AllowedValuesMixin):
    """
    CFL type .
    """
    _version = '251'
    fluent_name = 'cfl-type'
    _python_name = 'cfl_type'

class cfl_based_time_stepping_advanced_options(Group):
    """
    Advanced settings for CFL-based time stepping.
    """
    _version = '251'
    fluent_name = 'cfl-based-time-stepping-advanced-options'
    _python_name = 'cfl_based_time_stepping_advanced_options'
    child_names = ['control_time_step_size_variation', 'use_average_cfl', 'cfl_type']
    _child_classes = dict(
        control_time_step_size_variation=control_time_step_size_variation,
        use_average_cfl=use_average_cfl,
        cfl_type=cfl_type,
    )

class error_tolerance_1(Real):
    """
    Error Tolerance.
    """
    _version = '251'
    fluent_name = 'error-tolerance'
    _python_name = 'error_tolerance'

class error_based_time_stepping(Group):
    """
    Error-based time stepping object.
    """
    _version = '251'
    fluent_name = 'error-based-time-stepping'
    _python_name = 'error_based_time_stepping'
    child_names = ['error_tolerance', 'initial_time_step_size', 'fixed_time_step_size', 'min_time_step_size', 'max_time_step_size', 'min_step_change_factor', 'max_step_change_factor', 'update_interval']
    _child_classes = dict(
        error_tolerance=error_tolerance_1,
        initial_time_step_size=initial_time_step_size,
        fixed_time_step_size=fixed_time_step_size,
        min_time_step_size=min_time_step_size,
        max_time_step_size=max_time_step_size,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
        update_interval=update_interval_1,
    )

class undo_timestep(Boolean):
    """
    Undo the previous time step.
    """
    _version = '251'
    fluent_name = 'undo-timestep?'
    _python_name = 'undo_timestep'

class predict_next(Boolean):
    """
    Applies a predictor algorithm for computing initial condition at time step n+1.
    """
    _version = '251'
    fluent_name = 'predict-next?'
    _python_name = 'predict_next'

class rotating_mesh_flow_predictor(Boolean):
    """
    Improve prediction of flow field at time step n+1 for rotating mesh.
    """
    _version = '251'
    fluent_name = 'rotating-mesh-flow-predictor?'
    _python_name = 'rotating_mesh_flow_predictor'

class enabled_60(Boolean):
    """
    Enable/disable multiphase-specific adaptive time stepping.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class global_courant_number(Real):
    """
    Global Courant Number.
    """
    _version = '251'
    fluent_name = 'global-courant-number'
    _python_name = 'global_courant_number'

class mp_specific_time_stepping(Group):
    """
    Multiphase-specific adaptive time stepping parameters.
    """
    _version = '251'
    fluent_name = 'mp-specific-time-stepping'
    _python_name = 'mp_specific_time_stepping'
    child_names = ['enabled', 'global_courant_number', 'initial_time_step_size', 'fixed_time_step_size', 'min_time_step_size', 'max_time_step_size', 'min_step_change_factor', 'max_step_change_factor', 'update_interval']
    _child_classes = dict(
        enabled=enabled_60,
        global_courant_number=global_courant_number,
        initial_time_step_size=initial_time_step_size,
        fixed_time_step_size=fixed_time_step_size,
        min_time_step_size=min_time_step_size,
        max_time_step_size=max_time_step_size,
        min_step_change_factor=min_step_change_factor,
        max_step_change_factor=max_step_change_factor,
        update_interval=update_interval_1,
    )

class udf_hook(String, AllowedValuesMixin):
    """
    User-defined function name.
    """
    _version = '251'
    fluent_name = 'udf-hook'
    _python_name = 'udf_hook'

class enabled_61(Boolean):
    """
    Enable/disable period- or frequency-based fixed time stepping.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class fixed_periodic_type(String, AllowedValuesMixin):
    """
    Fixed periodic type.
    """
    _version = '251'
    fluent_name = 'fixed-periodic-type'
    _python_name = 'fixed_periodic_type'

class period(Real):
    """
    Fixed periodic type value.
    """
    _version = '251'
    fluent_name = 'period'
    _python_name = 'period'

class frequency_5(Real):
    """
    Fixed periodic type value.
    """
    _version = '251'
    fluent_name = 'frequency'
    _python_name = 'frequency'

class time_step_size_1(Real):
    """
    Time step size for fixed periodic.
    """
    _version = '251'
    fluent_name = 'time-step-size'
    _python_name = 'time_step_size'

class time_step_size_count(Integer):
    """
    Number of time steps for fixed periodic.
    """
    _version = '251'
    fluent_name = 'time-step-size-count'
    _python_name = 'time_step_size_count'

class time_steps_per_period(Integer):
    """
    Number of time steps per period.
    """
    _version = '251'
    fluent_name = 'time-steps-per-period'
    _python_name = 'time_steps_per_period'

class total_periods(Integer):
    """
    Total number of periods.
    """
    _version = '251'
    fluent_name = 'total-periods'
    _python_name = 'total_periods'

class fixed_periodic(Group):
    """
    Period- or frequency-based fixed time-stepping parameters.
    """
    _version = '251'
    fluent_name = 'fixed-periodic'
    _python_name = 'fixed_periodic'
    child_names = ['enabled', 'fixed_periodic_type', 'period', 'frequency', 'time_step_size', 'time_step_size_count', 'time_steps_per_period', 'total_periods']
    _child_classes = dict(
        enabled=enabled_61,
        fixed_periodic_type=fixed_periodic_type,
        period=period,
        frequency=frequency_5,
        time_step_size=time_step_size_1,
        time_step_size_count=time_step_size_count,
        time_steps_per_period=time_steps_per_period,
        total_periods=total_periods,
    )
    _child_aliases = dict(
        times_steps_per_period=('time_steps_per_period', 'times-steps-per-period'),
    )

class moving_mesh_constraint(Boolean):
    """
    Enable Moving Mesh Constraint.
    """
    _version = '251'
    fluent_name = 'moving-mesh-constraint?'
    _python_name = 'moving_mesh_constraint'

class mesh_courant_number(Real):
    """
    Moving Mesh Courant Number.
    """
    _version = '251'
    fluent_name = 'mesh-courant-number'
    _python_name = 'mesh_courant_number'

class moving_mesh_cfl_constraint(Group):
    """
    Moving mesh CFL constraint object.
    """
    _version = '251'
    fluent_name = 'moving-mesh-cfl-constraint'
    _python_name = 'moving_mesh_cfl_constraint'
    child_names = ['moving_mesh_constraint', 'mesh_courant_number']
    _child_classes = dict(
        moving_mesh_constraint=moving_mesh_constraint,
        mesh_courant_number=mesh_courant_number,
    )

class physics_based_constraint(Boolean):
    """
    Include physics driven time-step constraints.
    """
    _version = '251'
    fluent_name = 'physics-based-constraint?'
    _python_name = 'physics_based_constraint'

class viscous_scale(Boolean):
    """
    Include viscous time scale.
    """
    _version = '251'
    fluent_name = 'viscous-scale?'
    _python_name = 'viscous_scale'

class gravity_scale(Boolean):
    """
    Include gravity based time scale.
    """
    _version = '251'
    fluent_name = 'gravity-scale?'
    _python_name = 'gravity_scale'

class surface_tension_scale(Boolean):
    """
    Include surface tension based time scale.
    """
    _version = '251'
    fluent_name = 'surface-tension-scale?'
    _python_name = 'surface_tension_scale'

class acoustic_scale(Boolean):
    """
    Include acoustic time scale.
    """
    _version = '251'
    fluent_name = 'acoustic-scale?'
    _python_name = 'acoustic_scale'

class time_scale_options(Group):
    """
    Physics based time scale options.
    """
    _version = '251'
    fluent_name = 'time-scale-options'
    _python_name = 'time_scale_options'
    child_names = ['viscous_scale', 'gravity_scale', 'surface_tension_scale', 'acoustic_scale']
    _child_classes = dict(
        viscous_scale=viscous_scale,
        gravity_scale=gravity_scale,
        surface_tension_scale=surface_tension_scale,
        acoustic_scale=acoustic_scale,
    )

class verbosity_18(Boolean):
    """
    Verbosity to print multiphase specific time scales.
    """
    _version = '251'
    fluent_name = 'verbosity?'
    _python_name = 'verbosity'

class multiphase_specific_time_constraints(Group):
    """
    Multiphase-specific time constraints object.
    """
    _version = '251'
    fluent_name = 'multiphase-specific-time-constraints'
    _python_name = 'multiphase_specific_time_constraints'
    child_names = ['moving_mesh_cfl_constraint', 'physics_based_constraint', 'time_scale_options', 'verbosity']
    _child_classes = dict(
        moving_mesh_cfl_constraint=moving_mesh_cfl_constraint,
        physics_based_constraint=physics_based_constraint,
        time_scale_options=time_scale_options,
        verbosity=verbosity_18,
    )

class enable_solid_time_step(Boolean):
    """
    Enable/Disable different time step size for solid zones?.
    """
    _version = '251'
    fluent_name = 'enable-solid-time-step?'
    _python_name = 'enable_solid_time_step'

class choose_auto_time_stepping(String, AllowedValuesMixin):
    """
    Enable/Disable Automatic time stepping?.
    """
    _version = '251'
    fluent_name = 'choose-auto-time-stepping?'
    _python_name = 'choose_auto_time_stepping'

class time_step_size_2(Real):
    """
    The time step size.
    """
    _version = '251'
    fluent_name = 'time-step-size'
    _python_name = 'time_step_size'

class solid_time_step_size(Group):
    """
    Time step size settings object.
    """
    _version = '251'
    fluent_name = 'solid-time-step-size'
    _python_name = 'solid_time_step_size'
    child_names = ['enable_solid_time_step', 'choose_auto_time_stepping', 'time_step_size']
    _child_classes = dict(
        enable_solid_time_step=enable_solid_time_step,
        choose_auto_time_stepping=choose_auto_time_stepping,
        time_step_size=time_step_size_2,
    )

class time_step_size_for_acoustic_export(Real):
    """
    Number of time step size for acoustic export.
    """
    _version = '251'
    fluent_name = 'time-step-size-for-acoustic-export'
    _python_name = 'time_step_size_for_acoustic_export'

class extrapolate_eqn_vars_child(Boolean):
    """
    'child_object_type' of extrapolate_eqn_vars.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'extrapolate_eqn_vars_child'

class extrapolate_eqn_vars(NamedObject[extrapolate_eqn_vars_child], CreatableNamedObjectMixin[extrapolate_eqn_vars_child]):
    """
    The extrapolation object.
    """
    _version = '251'
    fluent_name = 'extrapolate-eqn-vars'
    _python_name = 'extrapolate_eqn_vars'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = extrapolate_eqn_vars_child

class transient_controls(Group):
    """
    Transient controls object.
    """
    _version = '251'
    fluent_name = 'transient-controls'
    _python_name = 'transient_controls'
    child_names = ['type', 'method', 'duration_specification_method', 'specified_time_step', 'incremental_time', 'time_step_count', 'total_time', 'time_step_size', 'max_iter_per_time_step', 'total_time_step_count', 'solution_status', 'extrapolate_variables', 'max_flow_time', 'cfl_based_time_stepping', 'cfl_based_time_stepping_advanced_options', 'error_based_time_stepping', 'undo_timestep', 'predict_next', 'rotating_mesh_flow_predictor', 'mp_specific_time_stepping', 'udf_hook', 'fixed_periodic', 'multiphase_specific_time_constraints', 'solid_time_step_size', 'time_step_size_for_acoustic_export', 'extrapolate_eqn_vars']
    _child_classes = dict(
        type=type_9,
        method=method_10,
        duration_specification_method=duration_specification_method,
        specified_time_step=specified_time_step,
        incremental_time=incremental_time,
        time_step_count=time_step_count_2,
        total_time=total_time,
        time_step_size=time_step_size,
        max_iter_per_time_step=max_iter_per_time_step,
        total_time_step_count=total_time_step_count,
        solution_status=solution_status,
        extrapolate_variables=extrapolate_variables,
        max_flow_time=max_flow_time,
        cfl_based_time_stepping=cfl_based_time_stepping,
        cfl_based_time_stepping_advanced_options=cfl_based_time_stepping_advanced_options,
        error_based_time_stepping=error_based_time_stepping,
        undo_timestep=undo_timestep,
        predict_next=predict_next,
        rotating_mesh_flow_predictor=rotating_mesh_flow_predictor,
        mp_specific_time_stepping=mp_specific_time_stepping,
        udf_hook=udf_hook,
        fixed_periodic=fixed_periodic,
        multiphase_specific_time_constraints=multiphase_specific_time_constraints,
        solid_time_step_size=solid_time_step_size,
        time_step_size_for_acoustic_export=time_step_size_for_acoustic_export,
        extrapolate_eqn_vars=extrapolate_eqn_vars,
    )

class postprocess(Boolean):
    """
    Enable/Disable Postprocess pollutant solution?.
    """
    _version = '251'
    fluent_name = 'postprocess?'
    _python_name = 'postprocess'

class num_of_post_iter_per_timestep(Integer):
    """
    Number of post-processing iterations per time step.
    """
    _version = '251'
    fluent_name = 'num-of-post-iter-per-timestep'
    _python_name = 'num_of_post_iter_per_timestep'

class pollutants(Group):
    """
    Pollutants object.
    """
    _version = '251'
    fluent_name = 'pollutants'
    _python_name = 'pollutants'
    child_names = ['postprocess', 'num_of_post_iter_per_timestep']
    _child_classes = dict(
        postprocess=postprocess,
        num_of_post_iter_per_timestep=num_of_post_iter_per_timestep,
    )

class enabled_62(Boolean):
    """
    Specifies whether to include data sampling.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class sampling_interval(Integer):
    """
    The sampling interval.
    """
    _version = '251'
    fluent_name = 'sampling-interval'
    _python_name = 'sampling_interval'

class time_sampled(Real):
    """
    Display the amount of simulated time/iterations covered by the data sampled for unsteady/steady statistics.
    """
    _version = '251'
    fluent_name = 'time-sampled'
    _python_name = 'time_sampled'

class flow_shear_stresses(Boolean):
    """
    Specifies whether to include statistics for flow shear stresses.
    """
    _version = '251'
    fluent_name = 'flow-shear-stresses?'
    _python_name = 'flow_shear_stresses'

class flow_heat_fluxes(Boolean):
    """
    Specifies whether to include statistics for flow heat fluxes.
    """
    _version = '251'
    fluent_name = 'flow-heat-fluxes?'
    _python_name = 'flow_heat_fluxes'

class wall_statistics(Boolean):
    """
    Specifies whether to include wall statistics.
    """
    _version = '251'
    fluent_name = 'wall-statistics?'
    _python_name = 'wall_statistics'

class force_statistics(Boolean):
    """
    Specifies whether to include force statistics.
    """
    _version = '251'
    fluent_name = 'force-statistics?'
    _python_name = 'force_statistics'

class dpm_variables(Boolean):
    """
    Specifies whether to include statistics for DPM variables.
    """
    _version = '251'
    fluent_name = 'dpm-variables?'
    _python_name = 'dpm_variables'

class species_list(StringList, AllowedValuesMixin):
    """
    Specifies whether to include statistics for species.
    """
    _version = '251'
    fluent_name = 'species-list'
    _python_name = 'species_list'

class statistics_mixture_fraction(Boolean):
    """
    Specifies whether to include statistics for mixture fraction.
    """
    _version = '251'
    fluent_name = 'statistics-mixture-fraction?'
    _python_name = 'statistics_mixture_fraction'

class statistics_reaction_progress(Boolean):
    """
    Specifies whether to include statistics for reaction progress.
    """
    _version = '251'
    fluent_name = 'statistics-reaction-progress?'
    _python_name = 'statistics_reaction_progress'

class enable_custom_field_functions(Boolean):
    """
    Specifies whether to include statistics for Custom Field Functions.
    """
    _version = '251'
    fluent_name = 'enable-custom-field-functions?'
    _python_name = 'enable_custom_field_functions'

class custom_field_functions(StringList, AllowedValuesMixin):
    """
    Calculate statistics for custom field functions.
    """
    _version = '251'
    fluent_name = 'custom-field-functions'
    _python_name = 'custom_field_functions'

class data_sampling(Group):
    """
    Data sampling object.
    """
    _version = '251'
    fluent_name = 'data-sampling'
    _python_name = 'data_sampling'
    child_names = ['enabled', 'sampling_interval', 'time_sampled', 'flow_shear_stresses', 'flow_heat_fluxes', 'wall_statistics', 'force_statistics', 'dpm_variables', 'species_list', 'statistics_mixture_fraction', 'statistics_reaction_progress', 'enable_custom_field_functions', 'custom_field_functions']
    _child_classes = dict(
        enabled=enabled_62,
        sampling_interval=sampling_interval,
        time_sampled=time_sampled,
        flow_shear_stresses=flow_shear_stresses,
        flow_heat_fluxes=flow_heat_fluxes,
        wall_statistics=wall_statistics,
        force_statistics=force_statistics,
        dpm_variables=dpm_variables,
        species_list=species_list,
        statistics_mixture_fraction=statistics_mixture_fraction,
        statistics_reaction_progress=statistics_reaction_progress,
        enable_custom_field_functions=enable_custom_field_functions,
        custom_field_functions=custom_field_functions,
    )

class zones_3(StringList, AllowedValuesMixin):
    """
    Zone name list.
    """
    _version = '251'
    fluent_name = 'zones'
    _python_name = 'zones'

class min_1(Boolean):
    """
    Enable/disable computing minimum value.
    """
    _version = '251'
    fluent_name = 'min'
    _python_name = 'min'

class max_1(Boolean):
    """
    Enable/disable computing maximum value.
    """
    _version = '251'
    fluent_name = 'max'
    _python_name = 'max'

class mean(Boolean):
    """
    Enable/disable computing mean value.
    """
    _version = '251'
    fluent_name = 'mean'
    _python_name = 'mean'

class rmse(Boolean):
    """
    Enable/disable computing root mean square error.
    """
    _version = '251'
    fluent_name = 'rmse'
    _python_name = 'rmse'

class moving_average(Boolean):
    """
    Enable/disable computing moving average.
    """
    _version = '251'
    fluent_name = 'moving-average'
    _python_name = 'moving_average'

class average_over_1(Integer):
    """
    Number of data-points used in moving average.
    """
    _version = '251'
    fluent_name = 'average-over'
    _python_name = 'average_over'

class data_sets_child(Group):
    """
    'child_object_type' of data_sets.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'data_sets_child'
    child_names = ['zones', 'min', 'max', 'mean', 'rmse', 'moving_average', 'average_over']
    _child_classes = dict(
        zones=zones_3,
        min=min_1,
        max=max_1,
        mean=mean,
        rmse=rmse,
        moving_average=moving_average,
        average_over=average_over_1,
    )

class data_sets(NamedObject[data_sets_child], CreatableNamedObjectMixin[data_sets_child]):
    """
    Data sampling datasets object.
    """
    _version = '251'
    fluent_name = 'data-sets'
    _python_name = 'data_sets'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = data_sets_child

class zone_names_7(StringList, AllowedValuesMixin):
    """
    One or more zone names.
    """
    _version = '251'
    fluent_name = 'zone-names'
    _python_name = 'zone_names'

class domain_2(String, AllowedValuesMixin):
    """
    The domain.
    """
    _version = '251'
    fluent_name = 'domain'
    _python_name = 'domain'

class quantities(StringList, AllowedValuesMixin):
    """
    One or more quantities.
    """
    _version = '251'
    fluent_name = 'quantities'
    _python_name = 'quantities'

class min_2(Boolean):
    """
    Specifies whether to specify the minimum value of the selected quantity(s) will be collected.
    """
    _version = '251'
    fluent_name = 'min'
    _python_name = 'min'

class max_2(Boolean):
    """
    Specifies whether to specify the maximum value of the selected quantity(s) will be collected.
    """
    _version = '251'
    fluent_name = 'max'
    _python_name = 'max'

class mean_1(Boolean):
    """
    Specifies whether to specify the average value of the selected quantity(s) will be computed and collected.
    """
    _version = '251'
    fluent_name = 'mean'
    _python_name = 'mean'

class rmse_1(Boolean):
    """
    Specifies whether to specify that the root mean square error of the selected quantity(s) will be computed and collected.
    """
    _version = '251'
    fluent_name = 'rmse'
    _python_name = 'rmse'

class moving_average_1(Boolean):
    """
    Specifies whether to specify an interval for averaging of the computed statistics.
    """
    _version = '251'
    fluent_name = 'moving-average'
    _python_name = 'moving_average'

class average_over_2(Integer):
    """
    The number of iterations (steady simulations) or time steps (transient simulations) that will be used for computing the moving average.
    """
    _version = '251'
    fluent_name = 'average-over'
    _python_name = 'average_over'

class add_datasets(Command):
    """
    Add datasets.
    
    Parameters
    ----------
        zone_names : List
            One or more zone names.
        domain : str
            The domain.
        quantities : List
            One or more quantities.
        min : bool
            Specifies whether to specify the minimum value of the selected quantity(s) will be collected.
        max : bool
            Specifies whether to specify the maximum value of the selected quantity(s) will be collected.
        mean : bool
            Specifies whether to specify the average value of the selected quantity(s) will be computed and collected.
        rmse : bool
            Specifies whether to specify that the root mean square error of the selected quantity(s) will be computed and collected.
        moving_average : bool
            Specifies whether to specify an interval for averaging of the computed statistics.
        average_over : int
            The number of iterations (steady simulations) or time steps (transient simulations) that will be used for computing the moving average.
    """
    _version = '251'
    fluent_name = 'add-datasets'
    _python_name = 'add_datasets'
    argument_names = ['zone_names', 'domain', 'quantities', 'min', 'max', 'mean', 'rmse', 'moving_average', 'average_over']
    _child_classes = dict(
        zone_names=zone_names_7,
        domain=domain_2,
        quantities=quantities,
        min=min_2,
        max=max_2,
        mean=mean_1,
        rmse=rmse_1,
        moving_average=moving_average_1,
        average_over=average_over_2,
    )

class list_datasets(Command):
    """
    List dataset.
    """
    _version = '251'
    fluent_name = 'list-datasets'
    _python_name = 'list_datasets'

class data_sampling_options(Group):
    """
    Zone-Specific Data sampling options for statistics.
    """
    _version = '251'
    fluent_name = 'data-sampling-options'
    _python_name = 'data_sampling_options'
    child_names = ['data_sets']
    command_names = ['add_datasets', 'list_datasets']
    _child_classes = dict(
        data_sets=data_sets,
        add_datasets=add_datasets,
        list_datasets=list_datasets,
    )

class residual_verbosity(Integer):
    """
    The residual report verbosity.
    """
    _version = '251'
    fluent_name = 'residual-verbosity'
    _python_name = 'residual_verbosity'

class calculate(Command):
    """
    Start run calculation.
    """
    _version = '251'
    fluent_name = 'calculate'
    _python_name = 'calculate'

class interrupt_at(String, AllowedValuesMixin):
    """
    When should the solution be interrupted.
    """
    _version = '251'
    fluent_name = 'interrupt-at'
    _python_name = 'interrupt_at'

class interrupt(Command):
    """
    Interrupt the iterations.
    
    Parameters
    ----------
        interrupt_at : str
            When should the solution be interrupted.
    """
    _version = '251'
    fluent_name = 'interrupt'
    _python_name = 'interrupt'
    argument_names = ['interrupt_at']
    _child_classes = dict(
        interrupt_at=interrupt_at,
    )

class total_period_count(Integer):
    """
    Number of total periods.
    """
    _version = '251'
    fluent_name = 'total-period-count'
    _python_name = 'total_period_count'

class max_iter_per_step(Integer):
    """
    Maximum Number of iterations per time step.
    """
    _version = '251'
    fluent_name = 'max-iter-per-step'
    _python_name = 'max_iter_per_step'

class post_iter_per_time_step_count(Integer):
    """
    Number of post-processing iterations per time step.
    """
    _version = '251'
    fluent_name = 'post-iter-per-time-step-count'
    _python_name = 'post_iter_per_time_step_count'

class dual_time_iterate(Command):
    """
    Perform unsteady iterations.
    
    Parameters
    ----------
        total_period_count : int
            Number of total periods.
        time_step_count : int
            Inceremtal number of Time steps.
        total_time_step_count : int
            Total number of Time steps.
        total_time : real
            Total Simulation Time.
        incremental_time : real
            Incremental Time.
        max_iter_per_step : int
            Maximum Number of iterations per time step.
        postprocess : bool
            Enable/Disable Postprocess pollutant solution?.
        post_iter_per_time_step_count : int
            Number of post-processing iterations per time step.
    """
    _version = '251'
    fluent_name = 'dual-time-iterate'
    _python_name = 'dual_time_iterate'
    argument_names = ['total_period_count', 'time_step_count', 'total_time_step_count', 'total_time', 'incremental_time', 'max_iter_per_step', 'postprocess', 'post_iter_per_time_step_count']
    _child_classes = dict(
        total_period_count=total_period_count,
        time_step_count=time_step_count_2,
        total_time_step_count=total_time_step_count,
        total_time=total_time,
        incremental_time=incremental_time,
        max_iter_per_step=max_iter_per_step,
        postprocess=postprocess,
        post_iter_per_time_step_count=post_iter_per_time_step_count,
    )

class iter_count_3(Integer):
    """
    Incremental number of time steps.
    """
    _version = '251'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'

class iterate(Command):
    """
    Perform a specified number of iterations.
    
    Parameters
    ----------
        iter_count : int
            Incremental number of time steps.
    """
    _version = '251'
    fluent_name = 'iterate'
    _python_name = 'iterate'
    argument_names = ['iter_count']
    _child_classes = dict(
        iter_count=iter_count_3,
    )

class iterating(Query):
    """
    'iterating' query.
    """
    _version = '251'
    fluent_name = 'iterating?'
    _python_name = 'iterating'

class run_calculation(Group):
    """
    Run-calculation object.
    """
    _version = '251'
    fluent_name = 'run-calculation'
    _python_name = 'run_calculation'
    child_names = ['pseudo_time_settings', 'iter_count', 'adaptive_time_stepping', 'cfl_based_adaptive_time_stepping', 'reporting_interval', 'profile_update_interval', 'time_step_count', 'transient_controls', 'pollutants', 'data_sampling', 'data_sampling_options', 'residual_verbosity']
    command_names = ['calculate', 'interrupt', 'dual_time_iterate', 'iterate']
    query_names = ['iterating']
    _child_classes = dict(
        pseudo_time_settings=pseudo_time_settings,
        iter_count=iter_count_2,
        adaptive_time_stepping=adaptive_time_stepping,
        cfl_based_adaptive_time_stepping=cfl_based_adaptive_time_stepping,
        reporting_interval=reporting_interval,
        profile_update_interval=profile_update_interval,
        time_step_count=time_step_count_1,
        transient_controls=transient_controls,
        pollutants=pollutants,
        data_sampling=data_sampling,
        data_sampling_options=data_sampling_options,
        residual_verbosity=residual_verbosity,
        calculate=calculate,
        interrupt=interrupt,
        dual_time_iterate=dual_time_iterate,
        iterate=iterate,
        iterating=iterating,
    )

class solution(Group):
    """
    'solution' child.
    """
    _version = '251'
    fluent_name = 'solution'
    _python_name = 'solution'
    child_names = ['methods', 'controls', 'report_definitions', 'monitor', 'cell_registers', 'initialization', 'calculation_activity', 'run_calculation']
    _child_classes = dict(
        methods=methods_1,
        controls=controls_1,
        report_definitions=report_definitions,
        monitor=monitor,
        cell_registers=cell_registers,
        initialization=initialization,
        calculation_activity=calculation_activity,
        run_calculation=run_calculation,
    )

class name_19(String):
    """
    The name for the custom field function.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class custom_field_function(String):
    """
    The custom field function.
    """
    _version = '251'
    fluent_name = 'custom-field-function'
    _python_name = 'custom_field_function'

class create_7(CommandWithPositionalArgs):
    """
    Create a custom field function.
    
    Parameters
    ----------
        name : str
            The name for the custom field function.
        custom_field_function : str
            The custom field function.
    """
    _version = '251'
    fluent_name = 'create'
    _python_name = 'create'
    argument_names = ['name', 'custom_field_function']
    _child_classes = dict(
        name=name_19,
        custom_field_function=custom_field_function,
    )

class save_1(Command):
    """
    Save saving a custom field function to a file.
    
    Parameters
    ----------
        filename_1 : str
            The name you want the file saved with.
    """
    _version = '251'
    fluent_name = 'save'
    _python_name = 'save'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_1_3,
    )

class filename_8(Filename, _InputFile):
    """
    File name.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class load(Command):
    """
    Read custom field-function definitions from a file.
    
    Parameters
    ----------
        filename : str
            File name.
    """
    _version = '251'
    fluent_name = 'load'
    _python_name = 'load'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_8,
    )

class get_list_of_valid_cell_function_names(Query):
    """
    List the names of cell functions that can be used in a custom field function.
    """
    _version = '251'
    fluent_name = 'get-list-of-valid-cell-function-names'
    _python_name = 'get_list_of_valid_cell_function_names'

class custom_field_function_1(String):
    """
    Custom Field Function:.
    """
    _version = '251'
    fluent_name = 'custom-field-function'
    _python_name = 'custom_field_function'

class custom_field_functions_1_child(Group):
    """
    'child_object_type' of custom_field_functions.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'custom_field_functions_child'
    child_names = ['name', 'custom_field_function']
    _child_classes = dict(
        name=name_19,
        custom_field_function=custom_field_function_1,
    )

class custom_field_functions_1(NamedObject[custom_field_functions_1_child], CreatableNamedObjectMixin[custom_field_functions_1_child]):
    """
    Provides access to creating custom field function.
    """
    _version = '251'
    fluent_name = 'custom-field-functions'
    _python_name = 'custom_field_functions'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'save', 'load']
    query_names = ['get_list_of_valid_cell_function_names']
    _child_classes = dict(
        create=create_7,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        save=save_1,
        load=load,
        get_list_of_valid_cell_function_names=get_list_of_valid_cell_function_names,
    )
    child_object_type = custom_field_functions_1_child

class x_component(String, AllowedValuesMixin):
    """
    X Component of custom vector.
    """
    _version = '251'
    fluent_name = 'x-component'
    _python_name = 'x_component'

class y_component(String, AllowedValuesMixin):
    """
    Y Component of custom vector.
    """
    _version = '251'
    fluent_name = 'y-component'
    _python_name = 'y_component'

class z_component(String, AllowedValuesMixin):
    """
    Z Component of custom vector.
    """
    _version = '251'
    fluent_name = 'z-component'
    _python_name = 'z_component'

class custom_vectors_child(Group):
    """
    'child_object_type' of custom_vectors.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'custom_vectors_child'
    child_names = ['name', 'x_component', 'y_component', 'z_component']
    _child_classes = dict(
        name=name_2,
        x_component=x_component,
        y_component=y_component,
        z_component=z_component,
    )

class custom_vectors(NamedObject[custom_vectors_child], CreatableNamedObjectMixin[custom_vectors_child]):
    """
    'custom_vectors' child.
    """
    _version = '251'
    fluent_name = 'custom-vectors'
    _python_name = 'custom_vectors'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = custom_vectors_child

class reference_frame_9(String, AllowedValuesMixin):
    """
    The reference frame.
    """
    _version = '251'
    fluent_name = 'reference-frame'
    _python_name = 'reference_frame'

class coordinate(String, AllowedValuesMixin):
    """
    The co-ordinate-system.
    """
    _version = '251'
    fluent_name = 'coordinate'
    _python_name = 'coordinate'

class point_1(RealList):
    """
    The XYZ coordinates of the point.
    """
    _version = '251'
    fluent_name = 'point'
    _python_name = 'point'

class r_1(Real):
    """
    Value of r.
    """
    _version = '251'
    fluent_name = 'r'
    _python_name = 'r'

class theta_1(Real):
    """
    Value of theta.
    """
    _version = '251'
    fluent_name = 'theta'
    _python_name = 'theta'

class z_1(Real):
    """
    Value of z.
    """
    _version = '251'
    fluent_name = 'z'
    _python_name = 'z'

class snap_method(String, AllowedValuesMixin):
    """
    The method to snap the point to nearest node or cell center.
    """
    _version = '251'
    fluent_name = 'snap-method'
    _python_name = 'snap_method'

class dynamic(Boolean, AllowedValuesMixin):
    """
    The point type.
    """
    _version = '251'
    fluent_name = 'dynamic?'
    _python_name = 'dynamic'

class display_4(Command):
    """
    Display a surface.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'

class point_surface_child(Group):
    """
    'child_object_type' of point_surface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'point_surface_child'
    child_names = ['name', 'reference_frame', 'coordinate', 'point', 'r', 'theta', 'z', 'snap_method', 'dynamic']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        reference_frame=reference_frame_9,
        coordinate=coordinate,
        point=point_1,
        r=r_1,
        theta=theta_1,
        z=z_1,
        snap_method=snap_method,
        dynamic=dynamic,
        display=display_4,
    )

class point_surface(NamedObject[point_surface_child], CreatableNamedObjectMixin[point_surface_child]):
    """
    Provides access to creating point surfaces (surfaces containing a single data point).
    """
    _version = '251'
    fluent_name = 'point-surface'
    _python_name = 'point_surface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = point_surface_child

class p0(RealList):
    """
    The XYZ coordinates of the start point.
    """
    _version = '251'
    fluent_name = 'p0'
    _python_name = 'p0'

class p1(RealList):
    """
    The XYZ coordinates of the end point.
    """
    _version = '251'
    fluent_name = 'p1'
    _python_name = 'p1'

class line_surface_child(Group):
    """
    'child_object_type' of line_surface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'line_surface_child'
    child_names = ['name', 'p0', 'p1']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        p0=p0,
        p1=p1,
        display=display_4,
    )

class line_surface(NamedObject[line_surface_child], CreatableNamedObjectMixin[line_surface_child]):
    """
    Provides access to creating new and editing existing line surfaces.
    """
    _version = '251'
    fluent_name = 'line-surface'
    _python_name = 'line_surface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = line_surface_child

class number_of_points(Integer):
    """
    The number of points to be equally spaced between the two endpoints.
    """
    _version = '251'
    fluent_name = 'number-of-points'
    _python_name = 'number_of_points'

class rake_surface_child(Group):
    """
    'child_object_type' of rake_surface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'rake_surface_child'
    child_names = ['name', 'p0', 'p1', 'number_of_points']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        p0=p0,
        p1=p1,
        number_of_points=number_of_points,
        display=display_4,
    )

class rake_surface(NamedObject[rake_surface_child], CreatableNamedObjectMixin[rake_surface_child]):
    """
    Provides access to creating new and editing existing rake surfaces.
    """
    _version = '251'
    fluent_name = 'rake-surface'
    _python_name = 'rake_surface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = rake_surface_child

class method_11(String, AllowedValuesMixin):
    """
    The method you want to use to create the plane surface. The required inputs vary by method.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class x_3(Real):
    """
    The location on the X-axis where the YZ plane will be created.
    """
    _version = '251'
    fluent_name = 'x'
    _python_name = 'x'

class y_3(Real):
    """
    The location on the Y-axis where the ZX plane will be created.
    """
    _version = '251'
    fluent_name = 'y'
    _python_name = 'y'

class z_3(Real):
    """
    The location on the Z-axis where the XY plane will be created.
    """
    _version = '251'
    fluent_name = 'z'
    _python_name = 'z'

class normal_computation_method(String, AllowedValuesMixin):
    """
    The normal computation method.
    """
    _version = '251'
    fluent_name = 'normal-computation-method'
    _python_name = 'normal_computation_method'

class surface_aligned_normal(String, AllowedValuesMixin):
    """
    The surface you want to compute the normal components.
    """
    _version = '251'
    fluent_name = 'surface-aligned-normal'
    _python_name = 'surface_aligned_normal'

class normal_1(RealList):
    """
    The XYZ components of the normal.
    """
    _version = '251'
    fluent_name = 'normal'
    _python_name = 'normal'

class p0_1(RealList):
    """
    The XYZ coordinates of Point 1 for the Three Points plane creation method.
    """
    _version = '251'
    fluent_name = 'p0'
    _python_name = 'p0'

class p1_1(RealList):
    """
    The XYZ coordinates of Point 2 for the Three Points plane creation method.
    """
    _version = '251'
    fluent_name = 'p1'
    _python_name = 'p1'

class p2(RealList):
    """
    The XYZ coordinates of Point 3 for the Three Points plane creation method.
    """
    _version = '251'
    fluent_name = 'p2'
    _python_name = 'p2'

class bounded(Boolean):
    """
    Specifies whether the plane is bounded by its defining points.
    """
    _version = '251'
    fluent_name = 'bounded?'
    _python_name = 'bounded'

class sample_points(Boolean):
    """
    Specifies whether you want to specify a uniform distribution of points on the plane.
    """
    _version = '251'
    fluent_name = 'sample-points?'
    _python_name = 'sample_points'

class edges(IntegerList):
    """
    The point density for edges.
    """
    _version = '251'
    fluent_name = 'edges'
    _python_name = 'edges'

class plane_surface_child(Group):
    """
    'child_object_type' of plane_surface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'plane_surface_child'
    child_names = ['name', 'method', 'x', 'y', 'z', 'point', 'normal_computation_method', 'surface_aligned_normal', 'normal', 'p0', 'p1', 'p2', 'bounded', 'sample_points', 'edges']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        method=method_11,
        x=x_3,
        y=y_3,
        z=z_3,
        point=point_1,
        normal_computation_method=normal_computation_method,
        surface_aligned_normal=surface_aligned_normal,
        normal=normal_1,
        p0=p0_1,
        p1=p1_1,
        p2=p2,
        bounded=bounded,
        sample_points=sample_points,
        edges=edges,
        display=display_4,
    )
    _child_aliases = dict(
        point_normal=('normal', 'point-normal'),
        point_vector=('point', 'point-vector'),
    )

class plane_surface(NamedObject[plane_surface_child], CreatableNamedObjectMixin[plane_surface_child]):
    """
    The attributes of plane surface.
    """
    _version = '251'
    fluent_name = 'plane-surface'
    _python_name = 'plane_surface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = plane_surface_child

class field_1(String, AllowedValuesMixin):
    """
    The field variable.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class iso_values(RealList):
    """
    The iso-value.
    """
    _version = '251'
    fluent_name = 'iso-values'
    _python_name = 'iso_values'

class minimum_1(Real):
    """
    Indicates the minimum value of the selected field variable in the selected surfaces and/or cell zones.
    """
    _version = '251'
    fluent_name = 'minimum'
    _python_name = 'minimum'

class maximum_1(Real):
    """
    Indicates the maximum value of the selected field variable in the selected surfaces and/or cell zones.
    """
    _version = '251'
    fluent_name = 'maximum'
    _python_name = 'maximum'

class compute_3(Command):
    """
    Sets the 'minimum' and 'maximum' fields based on the current solution data.
    """
    _version = '251'
    fluent_name = 'compute'
    _python_name = 'compute'

class range_1(Group):
    """
    Indicates minimum and maximum values of the selected field variable in the selected surfaces and/or cell zones.
    """
    _version = '251'
    fluent_name = 'range'
    _python_name = 'range'
    child_names = ['minimum', 'maximum']
    command_names = ['compute']
    _child_classes = dict(
        minimum=minimum_1,
        maximum=maximum_1,
        compute=compute_3,
    )

class surfaces_6(StringList, AllowedValuesMixin):
    """
    The surface(s) that will be used to define the iso-surface.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class zones_4(StringList, AllowedValuesMixin):
    """
    The cell zone(s) that will be used to define the iso-surface.
    """
    _version = '251'
    fluent_name = 'zones'
    _python_name = 'zones'

class iso_surface_child(Group):
    """
    'child_object_type' of iso_surface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'iso_surface_child'
    child_names = ['name', 'field', 'iso_values', 'range', 'surfaces', 'zones']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        field=field_1,
        iso_values=iso_values,
        range=range_1,
        surfaces=surfaces_6,
        zones=zones_4,
        display=display_4,
    )
    _child_aliases = dict(
        max=('range/maximum', 'max'),
        min=('range/minimum', 'min'),
        update_min_max=('range/compute', 'update-min-max'),
    )

class iso_surface(NamedObject[iso_surface_child], CreatableNamedObjectMixin[iso_surface_child]):
    """
    Provides access to creating new and editing existing iso-surfaces. These surfaces can be iso-valued sections of an existing surface or of the entire domain.
    """
    _version = '251'
    fluent_name = 'iso-surface'
    _python_name = 'iso_surface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = iso_surface_child

class surfaces_7(StringList, AllowedValuesMixin):
    """
    The surface(s) that will be used to define the iso-clip.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class minimum_2(Real):
    """
    Indicates the minimum value of the selected field variable in the selected surfaces.
    """
    _version = '251'
    fluent_name = 'minimum'
    _python_name = 'minimum'

class maximum_2(Real):
    """
    Indicates the maximum value of the selected field variable in the selected surfaces.
    """
    _version = '251'
    fluent_name = 'maximum'
    _python_name = 'maximum'

class compute_4(Command):
    """
    Sets 'minimum' and 'maximum' to the current minimum and maximum values for the selected surfaces.
    """
    _version = '251'
    fluent_name = 'compute'
    _python_name = 'compute'

class range_2(Group):
    """
    Indicates the minimum and maximum value of the selected field variable in the selected surfaces.
    """
    _version = '251'
    fluent_name = 'range'
    _python_name = 'range'
    child_names = ['minimum', 'maximum']
    command_names = ['compute']
    _child_classes = dict(
        minimum=minimum_2,
        maximum=maximum_2,
        compute=compute_4,
    )

class iso_clip_child(Group):
    """
    'child_object_type' of iso_clip.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'iso_clip_child'
    child_names = ['name', 'field', 'surfaces', 'range']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        field=field_1,
        surfaces=surfaces_7,
        range=range_2,
        display=display_4,
    )
    _child_aliases = dict(
        max=('range/maximum', 'max'),
        min=('range/minimum', 'min'),
        update_min_max=('range/compute', 'update-min-max'),
    )

class iso_clip(NamedObject[iso_clip_child], CreatableNamedObjectMixin[iso_clip_child]):
    """
    Provides access to creating new and editing existing clip surfaces. The clipped surface consists of those points on the selected surface where the scalar field values are within the specified range.
    """
    _version = '251'
    fluent_name = 'iso-clip'
    _python_name = 'iso_clip'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = iso_clip_child

class zone_name_10(String, AllowedValuesMixin):
    """
    The zone that will be used to define the zone surface.
    """
    _version = '251'
    fluent_name = 'zone-name'
    _python_name = 'zone_name'

class zone_surface_child(Group):
    """
    'child_object_type' of zone_surface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'zone_surface_child'
    child_names = ['name', 'zone_name']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        zone_name=zone_name_10,
        display=display_4,
    )

class zone_surface(NamedObject[zone_surface_child], CreatableNamedObjectMixin[zone_surface_child]):
    """
    Provides access to creating new and editing existing zone surfaces.
    """
    _version = '251'
    fluent_name = 'zone-surface'
    _python_name = 'zone_surface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = zone_surface_child

class partition_1(Integer):
    """
    The ID number of the interior partition.
    """
    _version = '251'
    fluent_name = 'partition-1'
    _python_name = 'partition_1'

class partition_2(Integer):
    """
    The ID number of the bordering (exterior) partition.
    """
    _version = '251'
    fluent_name = 'partition-2'
    _python_name = 'partition_2'

class interior_cell_faces(Boolean):
    """
    Specifies whether to partition interior faces or cells.
    """
    _version = '251'
    fluent_name = 'interior-cell-faces?'
    _python_name = 'interior_cell_faces'

class partition_surface_child(Group):
    """
    'child_object_type' of partition_surface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'partition_surface_child'
    child_names = ['name', 'partition_1', 'partition_2', 'interior_cell_faces']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        partition_1=partition_1,
        partition_2=partition_2,
        interior_cell_faces=interior_cell_faces,
        display=display_4,
    )

class partition_surface(NamedObject[partition_surface_child], CreatableNamedObjectMixin[partition_surface_child]):
    """
    Provides access to creating new and editing existing partition surfaces.
    """
    _version = '251'
    fluent_name = 'partition-surface'
    _python_name = 'partition_surface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = partition_surface_child

class surface_2(StringList, AllowedValuesMixin):
    """
    The surface(s) to be transformed.
    """
    _version = '251'
    fluent_name = 'surface'
    _python_name = 'surface'

class center_of_rotation(RealList):
    """
    The XYZ coordinates of point about which the surface(s) is rotated.
    """
    _version = '251'
    fluent_name = 'center-of-rotation'
    _python_name = 'center_of_rotation'

class angle_of_rotation(RealList):
    """
    The angles about XYZ axes by which the surface(s) is rotated.
    """
    _version = '251'
    fluent_name = 'angle-of-rotation'
    _python_name = 'angle_of_rotation'

class translation_distance(RealList):
    """
    The XYZ translation distances.
    """
    _version = '251'
    fluent_name = 'translation-distance'
    _python_name = 'translation_distance'

class iso_distance(Real):
    """
    The value to create a surface positioned at a constant normal distance around the original surface.
    """
    _version = '251'
    fluent_name = 'iso-distance'
    _python_name = 'iso_distance'

class transform_surface_child(Group):
    """
    'child_object_type' of transform_surface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'transform_surface_child'
    child_names = ['name', 'surface', 'center_of_rotation', 'angle_of_rotation', 'translation_distance', 'iso_distance']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        surface=surface_2,
        center_of_rotation=center_of_rotation,
        angle_of_rotation=angle_of_rotation,
        translation_distance=translation_distance,
        iso_distance=iso_distance,
        display=display_4,
    )

class transform_surface(NamedObject[transform_surface_child], CreatableNamedObjectMixin[transform_surface_child]):
    """
    Provides access to creating new and editing existing transform surfaces. You can create a new transform surface by rotating and/or translating an existing surface and/or by specifying a constant normal distance from it.
    """
    _version = '251'
    fluent_name = 'transform-surface'
    _python_name = 'transform_surface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = transform_surface_child

class surface_3(String, AllowedValuesMixin):
    """
    List of imported surfaces.
    """
    _version = '251'
    fluent_name = 'surface'
    _python_name = 'surface'

class zones_5(StringList, AllowedValuesMixin):
    """
    The zone(s).
    """
    _version = '251'
    fluent_name = 'zones'
    _python_name = 'zones'

class volumes_1(StringList, AllowedValuesMixin):
    """
    UTL Volume name.
    """
    _version = '251'
    fluent_name = 'volumes'
    _python_name = 'volumes'

class imprint_surface_child(Group):
    """
    'child_object_type' of imprint_surface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'imprint_surface_child'
    child_names = ['name', 'surface', 'zones', 'volumes']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        surface=surface_3,
        zones=zones_5,
        volumes=volumes_1,
        display=display_4,
    )

class imprint_surface(NamedObject[imprint_surface_child], CreatableNamedObjectMixin[imprint_surface_child]):
    """
    Provides access to creating new and editing existing imprint surfaces. You can import a custom surface representing the region of interest (.stl, .msh, or .cas format) and imprint this surface into the current mesh.
    """
    _version = '251'
    fluent_name = 'imprint-surface'
    _python_name = 'imprint_surface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = imprint_surface_child

class distance_from_origin(Real):
    """
    The distance from the origin.
    """
    _version = '251'
    fluent_name = 'distance-from-origin'
    _python_name = 'distance_from_origin'

class plane_slice_child(Group):
    """
    'child_object_type' of plane_slice.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'plane_slice_child'
    child_names = ['name', 'normal', 'distance_from_origin']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        normal=normal_1,
        distance_from_origin=distance_from_origin,
        display=display_4,
    )

class plane_slice(NamedObject[plane_slice_child], CreatableNamedObjectMixin[plane_slice_child]):
    """
    Provides access to creating new and editing existing plane slices.
    """
    _version = '251'
    fluent_name = 'plane-slice'
    _python_name = 'plane_slice'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = plane_slice_child

class center_1(RealList):
    """
    The XYZ coordinates of center of the sphere.
    """
    _version = '251'
    fluent_name = 'center'
    _python_name = 'center'

class radius_2(Real):
    """
    The radius of the sphere.
    """
    _version = '251'
    fluent_name = 'radius'
    _python_name = 'radius'

class sphere_slice_child(Group):
    """
    'child_object_type' of sphere_slice.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'sphere_slice_child'
    child_names = ['name', 'center', 'radius']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        center=center_1,
        radius=radius_2,
        display=display_4,
    )

class sphere_slice(NamedObject[sphere_slice_child], CreatableNamedObjectMixin[sphere_slice_child]):
    """
    Provides access to creating new and editing existing sphere slices.
    """
    _version = '251'
    fluent_name = 'sphere-slice'
    _python_name = 'sphere_slice'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = sphere_slice_child

class attribute(RealList):
    """
    The coefficients of the quadric function.
    """
    _version = '251'
    fluent_name = 'attribute'
    _python_name = 'attribute'

class value_19(Real):
    """
    The value of the quadric function.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class quadric_surface_child(Group):
    """
    'child_object_type' of quadric_surface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'quadric_surface_child'
    child_names = ['name', 'attribute', 'value']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        attribute=attribute,
        value=value_19,
        display=display_4,
    )

class quadric_surface(NamedObject[quadric_surface_child], CreatableNamedObjectMixin[quadric_surface_child]):
    """
    Provides access to creating new and editing existing quadric surfaces. You can display data on a general quadric surface where you can specify the surface by entering the coefficients of the quadric function that defines it. This feature provides you with an explicit method for defining surfaces.
    """
    _version = '251'
    fluent_name = 'quadric-surface'
    _python_name = 'quadric_surface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = quadric_surface_child

class surface_4(String, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '251'
    fluent_name = 'surface'
    _python_name = 'surface'

class surface_cells_child(Group):
    """
    'child_object_type' of surface_cells.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'surface_cells_child'
    child_names = ['name', 'surface']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        surface=surface_4,
        display=display_4,
    )

class surface_cells(NamedObject[surface_cells_child], CreatableNamedObjectMixin[surface_cells_child]):
    """
    Extract all cells intersected by a data surface.
    """
    _version = '251'
    fluent_name = 'surface-cells'
    _python_name = 'surface_cells'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = surface_cells_child

class expression_definition(String):
    """
    The expression.
    """
    _version = '251'
    fluent_name = 'expression-definition'
    _python_name = 'expression_definition'

class expression_volume_child(Group):
    """
    'child_object_type' of expression_volume.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'expression_volume_child'
    child_names = ['name', 'expression_definition']
    command_names = ['display']
    _child_classes = dict(
        name=name_2,
        expression_definition=expression_definition,
        display=display_4,
    )

class expression_volume(NamedObject[expression_volume_child], CreatableNamedObjectMixin[expression_volume_child]):
    """
    Provides access to creating new and editing existing expression-surfaces.
    """
    _version = '251'
    fluent_name = 'expression-volume'
    _python_name = 'expression_volume'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = expression_volume_child

class name_20(String):
    """
    The name for the group surface.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class surfaces_8(StringList, AllowedValuesMixin):
    """
    The surfaces.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class create_8(CommandWithPositionalArgs):
    """
    Create a group of surfaces.
    
    Parameters
    ----------
        name : str
            The name for the group surface.
        surfaces : List
            The surfaces.
    """
    _version = '251'
    fluent_name = 'create'
    _python_name = 'create'
    argument_names = ['name', 'surfaces']
    _child_classes = dict(
        name=name_20,
        surfaces=surfaces_8,
    )

class surface_5(String, AllowedValuesMixin):
    """
    The surface to ungroup.
    """
    _version = '251'
    fluent_name = 'surface'
    _python_name = 'surface'

class ungroup(Command):
    """
    Ungroup previously-grouped surfaces.
    
    Parameters
    ----------
        surface : str
            The surface to ungroup.
    """
    _version = '251'
    fluent_name = 'ungroup'
    _python_name = 'ungroup'
    argument_names = ['surface']
    _child_classes = dict(
        surface=surface_5,
    )

class display_5(Command):
    """
    Display the surface.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'

class group_surface_child(Group):
    """
    'child_object_type' of group_surface.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'group_surface_child'
    child_names = ['name', 'surfaces']
    command_names = ['display']
    _child_classes = dict(
        name=name_20,
        surfaces=surfaces_8,
        display=display_5,
    )

class group_surface(NamedObject[group_surface_child], CreatableNamedObjectMixin[group_surface_child]):
    """
    Provides access to creating new group and ungroup existing surfaces.
    """
    _version = '251'
    fluent_name = 'group-surface'
    _python_name = 'group_surface'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'ungroup']
    _child_classes = dict(
        create=create_8,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        ungroup=ungroup,
    )
    child_object_type = group_surface_child

class create_multiple_zone_surfaces(Command):
    """
    Provides access to creating new and editing multiple zone surfaces.
    
    Parameters
    ----------
        zone_names : List
            Zone name list.
    """
    _version = '251'
    fluent_name = 'create-multiple-zone-surfaces'
    _python_name = 'create_multiple_zone_surfaces'
    argument_names = ['zone_names']
    _child_classes = dict(
        zone_names=zone_names_4,
    )

class name_21(String):
    """
    The Iso-surface name.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class zones_6(StringList, AllowedValuesMixin):
    """
    The zone(s) that will be used to define the iso-surface.
    """
    _version = '251'
    fluent_name = 'zones'
    _python_name = 'zones'

class min_3(Real):
    """
    Min.
    """
    _version = '251'
    fluent_name = 'min'
    _python_name = 'min'

class max_3(Real):
    """
    Max.
    """
    _version = '251'
    fluent_name = 'max'
    _python_name = 'max'

class iso_value(Real):
    """
    The iso-value.
    """
    _version = '251'
    fluent_name = 'iso-value'
    _python_name = 'iso_value'

class no_of_surfaces(Integer):
    """
    The number of surfaces to be created.
    """
    _version = '251'
    fluent_name = 'no-of-surfaces'
    _python_name = 'no_of_surfaces'

class spacing(Real):
    """
    The spacing.
    """
    _version = '251'
    fluent_name = 'spacing'
    _python_name = 'spacing'

class create_multiple_iso_surfaces(Command):
    """
    Provides access to creating new and editing multiple iso-surfaces.
    
    Parameters
    ----------
        field : str
            The field variable.
        name : str
            The Iso-surface name.
        surfaces : List
            The surface(s) that will be used to define the iso-surface.
        zones : List
            The zone(s) that will be used to define the iso-surface.
        min : real
            Min.
        max : real
            Max.
        iso_value : real
            The iso-value.
        no_of_surfaces : int
            The number of surfaces to be created.
        spacing : real
            The spacing.
    """
    _version = '251'
    fluent_name = 'create-multiple-iso-surfaces'
    _python_name = 'create_multiple_iso_surfaces'
    argument_names = ['field', 'name', 'surfaces', 'zones', 'min', 'max', 'iso_value', 'no_of_surfaces', 'spacing']
    _child_classes = dict(
        field=field_1,
        name=name_21,
        surfaces=surfaces_6,
        zones=zones_6,
        min=min_3,
        max=max_3,
        iso_value=iso_value,
        no_of_surfaces=no_of_surfaces,
        spacing=spacing,
    )

class name_format(String):
    """
    The Name Format.
    """
    _version = '251'
    fluent_name = 'name-format'
    _python_name = 'name_format'

class surfaces_9(Integer):
    """
    The number of surfaces to be created.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class create_multiple_plane_surfaces(Command):
    """
    Specify the attributes of plane surface.
    
    Parameters
    ----------
        method : str
            The method you want to use to create the plane surface. The required inputs vary by method.
        name_format : str
            The Name Format.
        x : real
            The location on the X-axis where the YZ plane will be created.
        y : real
            The location on the Y-axis where the ZX plane will be created.
        z : real
            The location on the Z-axis where the XY plane will be created.
        point : List
            The XYZ coordinates of the point.
        normal_computation_method : str
            The normal computation method.
        surface_aligned_normal : str
            The surface you want to compute the normal components.
        normal : List
            The XYZ components of the normal.
        p0 : List
            The XYZ coordinates of Point 1 for the Three Points plane creation method.
        p1 : List
            The XYZ coordinates of Point 2 for the Three Points plane creation method.
        p2 : List
            The XYZ coordinates of Point 3 for the Three Points plane creation method.
        bounded : bool
            Specifies whether the plane is bounded by its defining points.
        sample_points : bool
            Specifies whether you want to specify a uniform distribution of points on the plane.
        edges : List
            The point density for edges.
        surfaces : int
            The number of surfaces to be created.
        spacing : real
            The spacing.
    """
    _version = '251'
    fluent_name = 'create-multiple-plane-surfaces'
    _python_name = 'create_multiple_plane_surfaces'
    argument_names = ['method', 'name_format', 'x', 'y', 'z', 'point', 'normal_computation_method', 'surface_aligned_normal', 'normal', 'p0', 'p1', 'p2', 'bounded', 'sample_points', 'edges', 'surfaces', 'spacing']
    _child_classes = dict(
        method=method_11,
        name_format=name_format,
        x=x_3,
        y=y_3,
        z=z_3,
        point=point_1,
        normal_computation_method=normal_computation_method,
        surface_aligned_normal=surface_aligned_normal,
        normal=normal_1,
        p0=p0_1,
        p1=p1_1,
        p2=p2,
        bounded=bounded,
        sample_points=sample_points,
        edges=edges,
        surfaces=surfaces_9,
        spacing=spacing,
    )

class surfaces_10(StringList, AllowedValuesMixin):
    """
    List of surfaces.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class create_group_surfaces(Command):
    """
    Create a group of surfaces.
    
    Parameters
    ----------
        surfaces : List
            List of surfaces.
        name : str
            The name for the group surface.
    """
    _version = '251'
    fluent_name = 'create-group-surfaces'
    _python_name = 'create_group_surfaces'
    argument_names = ['surfaces', 'name']
    _child_classes = dict(
        surfaces=surfaces_10,
        name=name_20,
    )

class ungroup_surfaces(Command):
    """
    Ungroup previously-grouped surfaces.
    
    Parameters
    ----------
        surface : str
            The surface to ungroup.
    """
    _version = '251'
    fluent_name = 'ungroup-surfaces'
    _python_name = 'ungroup_surfaces'
    argument_names = ['surface']
    _child_classes = dict(
        surface=surface_5,
    )

class surface_6(String, AllowedValuesMixin):
    """
    The surface(s) for surface rendering priority.
    """
    _version = '251'
    fluent_name = 'surface'
    _python_name = 'surface'

class priority(String, AllowedValuesMixin):
    """
    The desired rendering priority.
    """
    _version = '251'
    fluent_name = 'priority'
    _python_name = 'priority'

class set_rendering_priority(Command):
    """
    Set the surface rendering priority.
    
    Parameters
    ----------
        surface : str
            The surface(s) for surface rendering priority.
        priority : str
            The desired rendering priority.
    """
    _version = '251'
    fluent_name = 'set-rendering-priority'
    _python_name = 'set_rendering_priority'
    argument_names = ['surface', 'priority']
    _child_classes = dict(
        surface=surface_6,
        priority=priority,
    )

class reset_zone_surfaces(Command):
    """
    Recreates missing surface zones by resetting the case surface list.
    """
    _version = '251'
    fluent_name = 'reset-zone-surfaces'
    _python_name = 'reset_zone_surfaces'

class surfaces_5(Group):
    """
    Provides access to creating multiple zone surfaces and to grouping and ungrouping surfaces.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    child_names = ['point_surface', 'line_surface', 'rake_surface', 'plane_surface', 'iso_surface', 'iso_clip', 'zone_surface', 'partition_surface', 'transform_surface', 'imprint_surface', 'plane_slice', 'sphere_slice', 'quadric_surface', 'surface_cells', 'expression_volume', 'group_surface']
    command_names = ['create_multiple_zone_surfaces', 'create_multiple_iso_surfaces', 'create_multiple_plane_surfaces', 'create_group_surfaces', 'ungroup_surfaces', 'set_rendering_priority', 'reset_zone_surfaces']
    _child_classes = dict(
        point_surface=point_surface,
        line_surface=line_surface,
        rake_surface=rake_surface,
        plane_surface=plane_surface,
        iso_surface=iso_surface,
        iso_clip=iso_clip,
        zone_surface=zone_surface,
        partition_surface=partition_surface,
        transform_surface=transform_surface,
        imprint_surface=imprint_surface,
        plane_slice=plane_slice,
        sphere_slice=sphere_slice,
        quadric_surface=quadric_surface,
        surface_cells=surface_cells,
        expression_volume=expression_volume,
        group_surface=group_surface,
        create_multiple_zone_surfaces=create_multiple_zone_surfaces,
        create_multiple_iso_surfaces=create_multiple_iso_surfaces,
        create_multiple_plane_surfaces=create_multiple_plane_surfaces,
        create_group_surfaces=create_group_surfaces,
        ungroup_surfaces=ungroup_surfaces,
        set_rendering_priority=set_rendering_priority,
        reset_zone_surfaces=reset_zone_surfaces,
    )

class surfaces_list(StringList, AllowedValuesMixin):
    """
    The planar surface(s) where you want the results displayed.
    """
    _version = '251'
    fluent_name = 'surfaces-list'
    _python_name = 'surfaces_list'

class nodes(Boolean):
    """
    Enables the display of nodes on the selected surfaces.
    """
    _version = '251'
    fluent_name = 'nodes?'
    _python_name = 'nodes'

class edges_1(Boolean):
    """
    Enables the display of mesh edges on the selected surfaces.
    """
    _version = '251'
    fluent_name = 'edges?'
    _python_name = 'edges'

class faces_1(Boolean):
    """
    Enables the display of mesh faces (filled meshes) on the selected surfaces.
    """
    _version = '251'
    fluent_name = 'faces?'
    _python_name = 'faces'

class partitions(Boolean):
    """
    Enables the display of partition boundaries.
    """
    _version = '251'
    fluent_name = 'partitions?'
    _python_name = 'partitions'

class overset_3(Boolean):
    """
    Displays only the solve cells for cases with overset interfaces.
    """
    _version = '251'
    fluent_name = 'overset?'
    _python_name = 'overset'

class gap(Boolean):
    """
    'gap' child.
    """
    _version = '251'
    fluent_name = 'gap?'
    _python_name = 'gap'

class options_13(Group):
    """
    The rendering options object.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['nodes', 'edges', 'faces', 'partitions', 'overset', 'gap']
    _child_classes = dict(
        nodes=nodes,
        edges=edges_1,
        faces=faces_1,
        partitions=partitions,
        overset=overset_3,
        gap=gap,
    )

class option_38(String, AllowedValuesMixin):
    """
    Enables the display of the mesh outline.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class all(Boolean):
    """
    Enables the display of all mesh edges.
    """
    _version = '251'
    fluent_name = 'all'
    _python_name = 'all'

class feature_angle(Real):
    """
    'feature_angle' child.
    """
    _version = '251'
    fluent_name = 'feature-angle'
    _python_name = 'feature_angle'

class feature(Group):
    """
    Enables feature lines in an outline display.
    """
    _version = '251'
    fluent_name = 'feature'
    _python_name = 'feature'
    child_names = ['feature_angle']
    _child_classes = dict(
        feature_angle=feature_angle,
    )

class outline(Boolean):
    """
    'outline' child.
    """
    _version = '251'
    fluent_name = 'outline'
    _python_name = 'outline'

class edge_type(Group):
    """
    Enables the display of the mesh outline.
    """
    _version = '251'
    fluent_name = 'edge-type'
    _python_name = 'edge_type'
    child_names = ['option', 'all', 'feature', 'outline']
    _child_classes = dict(
        option=option_38,
        all=all,
        feature=feature,
        outline=outline,
    )

class shrink_factor(Real):
    """
    The amount to shrink faces and cells.
    """
    _version = '251'
    fluent_name = 'shrink-factor'
    _python_name = 'shrink_factor'

class option_39(String, AllowedValuesMixin):
    """
    The coloring options object.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class type_10(Group):
    """
    'type' child.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'

class id(Boolean):
    """
    'id' child.
    """
    _version = '251'
    fluent_name = 'id'
    _python_name = 'id'

class normal_2(Boolean):
    """
    'normal' child.
    """
    _version = '251'
    fluent_name = 'normal'
    _python_name = 'normal'

class partition(Boolean):
    """
    'partition' child.
    """
    _version = '251'
    fluent_name = 'partition'
    _python_name = 'partition'

class automatic(Group):
    """
    'automatic' child.
    """
    _version = '251'
    fluent_name = 'automatic'
    _python_name = 'automatic'
    child_names = ['option', 'type', 'id', 'normal', 'partition']
    _child_classes = dict(
        option=option_1,
        type=type_10,
        id=id,
        normal=normal_2,
        partition=partition,
    )

class faces_2(String, AllowedValuesMixin):
    """
    The color for the faces.
    """
    _version = '251'
    fluent_name = 'faces'
    _python_name = 'faces'

class edges_2(String, AllowedValuesMixin):
    """
    The color for the edges..
    """
    _version = '251'
    fluent_name = 'edges'
    _python_name = 'edges'

class nodes_1(String, AllowedValuesMixin):
    """
    The nodes color.
    """
    _version = '251'
    fluent_name = 'nodes'
    _python_name = 'nodes'

class material_color(String, AllowedValuesMixin):
    """
    The material type for the selected surfaces.
    """
    _version = '251'
    fluent_name = 'material-color'
    _python_name = 'material_color'

class manual(Group):
    """
    'manual' child.
    """
    _version = '251'
    fluent_name = 'manual'
    _python_name = 'manual'
    child_names = ['faces', 'edges', 'nodes', 'material_color']
    _child_classes = dict(
        faces=faces_2,
        edges=edges_2,
        nodes=nodes_1,
        material_color=material_color,
    )

class coloring(Group):
    """
    The coloring options object.
    """
    _version = '251'
    fluent_name = 'coloring'
    _python_name = 'coloring'
    child_names = ['option', 'automatic', 'manual']
    _child_classes = dict(
        option=option_39,
        automatic=automatic,
        manual=manual,
    )

class display_state_name(String, AllowedValuesMixin):
    """
    Display state settings selection by name.
    """
    _version = '251'
    fluent_name = 'display-state-name'
    _python_name = 'display_state_name'

class annotations_list(StringList, AllowedValuesMixin):
    """
    The annotation objects to be added to this graphics object.
    """
    _version = '251'
    fluent_name = 'annotations-list'
    _python_name = 'annotations_list'

class mesh_2_child(Group):
    """
    'child_object_type' of mesh.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'mesh_child'
    child_names = ['name', 'surfaces_list', 'options', 'edge_type', 'shrink_factor', 'coloring', 'display_state_name', 'physics', 'geometry', 'surfaces', 'annotations_list']
    command_names = ['display']
    _child_classes = dict(
        name=name_17,
        surfaces_list=surfaces_list,
        options=options_13,
        edge_type=edge_type,
        shrink_factor=shrink_factor,
        coloring=coloring,
        display_state_name=display_state_name,
        physics=physics_1,
        geometry=geometry_7,
        surfaces=surfaces_4,
        annotations_list=annotations_list,
        display=display_3,
    )

class mesh_2(NamedObject[mesh_2_child], CreatableNamedObjectMixin[mesh_2_child]):
    """
    'mesh' child.
    """
    _version = '251'
    fluent_name = 'mesh'
    _python_name = 'mesh'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'display', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy_1,
        display=display_2,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = mesh_2_child
    _child_aliases = dict(
        copy=('make_a_copy', 'copy'),
    )

class field_2(String, AllowedValuesMixin):
    """
    Contains a list from which you can select the scalar field to be contoured.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class option_40(String, AllowedValuesMixin):
    """
    Specifies whether you want the range to be Global, Local to the selected surface(s), or Custom.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class global_range(Boolean):
    """
    'global_range' child.
    """
    _version = '251'
    fluent_name = 'global-range?'
    _python_name = 'global_range'

class auto_range_on(Group):
    """
    Auto calculate the minimum and maximum values of the scalar field will be the limits of that
    field.
    """
    _version = '251'
    fluent_name = 'auto-range-on'
    _python_name = 'auto_range_on'
    child_names = ['global_range']
    _child_classes = dict(
        global_range=global_range,
    )

class clip_to_range(Boolean):
    """
    'clip_to_range' child.
    """
    _version = '251'
    fluent_name = 'clip-to-range?'
    _python_name = 'clip_to_range'

class minimum_3(Real):
    """
    The minimum field value, which can be computed when you click Compute.
    """
    _version = '251'
    fluent_name = 'minimum'
    _python_name = 'minimum'

class maximum_3(Real):
    """
    The maximum field value, which can be computed when you click Compute.
    """
    _version = '251'
    fluent_name = 'maximum'
    _python_name = 'maximum'

class auto_range_off(Group):
    """
    Custom provide the minimum and maximum values of the scalar field will be the limits of that
    field.
    """
    _version = '251'
    fluent_name = 'auto-range-off'
    _python_name = 'auto_range_off'
    child_names = ['clip_to_range', 'minimum', 'maximum']
    _child_classes = dict(
        clip_to_range=clip_to_range,
        minimum=minimum_3,
        maximum=maximum_3,
    )

class range_option(Group):
    """
    Specifies whether you want the range to be Global, Local to the selected surface(s), or Custom.
    """
    _version = '251'
    fluent_name = 'range-option'
    _python_name = 'range_option'
    child_names = ['option', 'auto_range_on', 'auto_range_off']
    _child_classes = dict(
        option=option_40,
        auto_range_on=auto_range_on,
        auto_range_off=auto_range_off,
    )

class global_range_1(Boolean):
    """
    Auto calculate the minimum and maximum values of the scalar field will be the global values of that field.
    """
    _version = '251'
    fluent_name = 'global-range?'
    _python_name = 'global_range'

class auto_range_1(Boolean):
    """
    Auto calculate the minimum and maximum values of the scalar field will be the limits of that field.
    """
    _version = '251'
    fluent_name = 'auto-range?'
    _python_name = 'auto_range'

class clip_to_range_1(Boolean):
    """
    Custom provide the minimum and maximum values of the scalar field will be the limits of that field.
    """
    _version = '251'
    fluent_name = 'clip-to-range?'
    _python_name = 'clip_to_range'

class compute_5(Command):
    """
    Update min-max for Range object.
    """
    _version = '251'
    fluent_name = 'compute'
    _python_name = 'compute'

class range_options(Group):
    """
    Range using the min max options.
    """
    _version = '251'
    fluent_name = 'range-options'
    _python_name = 'range_options'
    child_names = ['global_range', 'auto_range', 'clip_to_range', 'minimum', 'maximum']
    command_names = ['compute']
    _child_classes = dict(
        global_range=global_range_1,
        auto_range=auto_range_1,
        clip_to_range=clip_to_range_1,
        minimum=minimum_3,
        maximum=maximum_3,
        compute=compute_5,
    )

class filled_1(Boolean):
    """
    Toggles between filled contours and line contours.
    """
    _version = '251'
    fluent_name = 'filled?'
    _python_name = 'filled'

class node_values(Boolean):
    """
    Toggles between using scalar field values at nodes and at cell centers for computing the contours.
    """
    _version = '251'
    fluent_name = 'node-values?'
    _python_name = 'node_values'

class boundary_values(Boolean):
    """
    Enabling overwrites the node values (on boundaries) with a simple average of the boundary face values.
    """
    _version = '251'
    fluent_name = 'boundary-values?'
    _python_name = 'boundary_values'

class contour_lines(Boolean):
    """
    Combines filled contours with line contours.
    """
    _version = '251'
    fluent_name = 'contour-lines?'
    _python_name = 'contour_lines'

class options_14(Group):
    """
    Contains options for the contour object.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['filled', 'node_values', 'boundary_values', 'contour_lines']
    _child_classes = dict(
        filled=filled_1,
        node_values=node_values,
        boundary_values=boundary_values,
        contour_lines=contour_lines,
    )

class option_41(String, AllowedValuesMixin):
    """
    Specifies how the contours appear.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class smooth(Boolean):
    """
    The contours feature a smooth transition between colors.
    """
    _version = '251'
    fluent_name = 'smooth'
    _python_name = 'smooth'

class banded(Group):
    """
    The contour coloring features distinct color bands corresponding to the colormap.
    """
    _version = '251'
    fluent_name = 'banded'
    _python_name = 'banded'

class coloring_1(Group):
    """
    Specifies how the contours appear.
    """
    _version = '251'
    fluent_name = 'coloring'
    _python_name = 'coloring'
    child_names = ['option', 'smooth', 'banded']
    _child_classes = dict(
        option=option_41,
        smooth=smooth,
        banded=banded,
    )

class banded_1(Boolean):
    """
    The contour coloring features distinct color bands corresponding to the colormap.
    """
    _version = '251'
    fluent_name = 'banded'
    _python_name = 'banded'

class colorings(Group):
    """
    Specifies how the contours appear.
    """
    _version = '251'
    fluent_name = 'colorings'
    _python_name = 'colorings'
    child_names = ['banded', 'smooth']
    _child_classes = dict(
        banded=banded_1,
        smooth=smooth,
    )

class visible(Boolean):
    """
    Specifies whether you would like to display the colormap of your graphics object.
    """
    _version = '251'
    fluent_name = 'visible?'
    _python_name = 'visible'

class color_4(String, AllowedValuesMixin):
    """
    A colormap for your graphics object.
    """
    _version = '251'
    fluent_name = 'color'
    _python_name = 'color'

class size_2(Integer):
    """
    The no. of distinct color in your colormap.
    """
    _version = '251'
    fluent_name = 'size'
    _python_name = 'size'

class log_scale_1(Boolean):
    """
    Specifies whether you would like have a log scale for your colormap.
    """
    _version = '251'
    fluent_name = 'log-scale?'
    _python_name = 'log_scale'

class format(String, AllowedValuesMixin):
    """
    A number format and precision for the colormap labels (eg: %0.4e, %0.2f).
    """
    _version = '251'
    fluent_name = 'format'
    _python_name = 'format'

class user_skip(Integer):
    """
    A multiple by which the no. of labels shown would be reduced.
    """
    _version = '251'
    fluent_name = 'user-skip'
    _python_name = 'user_skip'

class show_all(Boolean):
    """
    Specifies whether you would like to show all the labels on the colormap.
    """
    _version = '251'
    fluent_name = 'show-all'
    _python_name = 'show_all'

class position(Integer):
    """
    A position for your colormap.
    """
    _version = '251'
    fluent_name = 'position'
    _python_name = 'position'

class font_name(String, AllowedValuesMixin):
    """
    Which font would you like for your colormap labels and titles.
    """
    _version = '251'
    fluent_name = 'font-name'
    _python_name = 'font_name'

class font_automatic(Boolean):
    """
    Specifies whether you would like the colormap's text to automatically scale based on the colormap dimensions.
    """
    _version = '251'
    fluent_name = 'font-automatic'
    _python_name = 'font_automatic'

class font_size(Real):
    """
    A font size for your colormap.
    """
    _version = '251'
    fluent_name = 'font-size'
    _python_name = 'font_size'

class length_2(Real):
    """
    A length for your colormap.
    """
    _version = '251'
    fluent_name = 'length'
    _python_name = 'length'

class width(Real):
    """
    A ratio for your colormap's width (w.r.t. its length).
    """
    _version = '251'
    fluent_name = 'width'
    _python_name = 'width'

class bground_transparent(Boolean):
    """
    Specifies whether you would like to have a transparent background for your colormap.
    """
    _version = '251'
    fluent_name = 'bground-transparent?'
    _python_name = 'bground_transparent'

class bground_color(String, AllowedValuesMixin):
    """
    A color for your colormap's background.
    """
    _version = '251'
    fluent_name = 'bground-color'
    _python_name = 'bground_color'

class title_elements(String, AllowedValuesMixin):
    """
    What to display in the colormap's title.
    """
    _version = '251'
    fluent_name = 'title-elements'
    _python_name = 'title_elements'

class color_map(Group):
    """
    Coloring using the colormap panel.
    """
    _version = '251'
    fluent_name = 'color-map'
    _python_name = 'color_map'
    child_names = ['visible', 'color', 'size', 'log_scale', 'format', 'user_skip', 'show_all', 'position', 'font_name', 'font_automatic', 'font_size', 'length', 'width', 'bground_transparent', 'bground_color', 'title_elements']
    _child_classes = dict(
        visible=visible,
        color=color_4,
        size=size_2,
        log_scale=log_scale_1,
        format=format,
        user_skip=user_skip,
        show_all=show_all,
        position=position,
        font_name=font_name,
        font_automatic=font_automatic,
        font_size=font_size,
        length=length_2,
        width=width,
        bground_transparent=bground_transparent,
        bground_color=bground_color,
        title_elements=title_elements,
    )

class draw_mesh_1(Boolean):
    """
    Specifies whether you would like to display the mesh alongside your graphics object.
    """
    _version = '251'
    fluent_name = 'draw-mesh?'
    _python_name = 'draw_mesh'

class mesh_object(String, AllowedValuesMixin):
    """
    Properties for your mesh object.
    """
    _version = '251'
    fluent_name = 'mesh-object'
    _python_name = 'mesh_object'

class deformation(Boolean):
    """
    'deformation' child.
    """
    _version = '251'
    fluent_name = 'deformation?'
    _python_name = 'deformation'

class deformation_scale(Real):
    """
    'deformation_scale' child.
    """
    _version = '251'
    fluent_name = 'deformation-scale'
    _python_name = 'deformation_scale'

class contour_child(Group):
    """
    'child_object_type' of contour.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'contour_child'
    child_names = ['name', 'field', 'surfaces_list', 'range_option', 'range_options', 'options', 'filled', 'node_values', 'boundary_values', 'contour_lines', 'coloring', 'colorings', 'color_map', 'annotations_list', 'draw_mesh', 'mesh_object', 'display_state_name', 'physics', 'geometry', 'surfaces', 'deformation', 'deformation_scale']
    command_names = ['display']
    _child_classes = dict(
        name=name_17,
        field=field_2,
        surfaces_list=surfaces_list,
        range_option=range_option,
        range_options=range_options,
        options=options_14,
        filled=filled_1,
        node_values=node_values,
        boundary_values=boundary_values,
        contour_lines=contour_lines,
        coloring=coloring_1,
        colorings=colorings,
        color_map=color_map,
        annotations_list=annotations_list,
        draw_mesh=draw_mesh_1,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        physics=physics_1,
        geometry=geometry_7,
        surfaces=surfaces_4,
        deformation=deformation,
        deformation_scale=deformation_scale,
        display=display_3,
    )
    _child_aliases = dict(
        update_min_max=('range_options/compute', 'update-min-max'),
    )

class contour(NamedObject[contour_child], CreatableNamedObjectMixin[contour_child]):
    """
    'contour' child.
    """
    _version = '251'
    fluent_name = 'contour'
    _python_name = 'contour'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'display', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy_1,
        display=display_2,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = contour_child
    _child_aliases = dict(
        copy=('make_a_copy', 'copy'),
    )

class vector_field(String, AllowedValuesMixin):
    """
    A field for which you want to draw vectors.
    """
    _version = '251'
    fluent_name = 'vector-field'
    _python_name = 'vector_field'

class field_3(String, AllowedValuesMixin):
    """
    One of the coloring options.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class auto_scale(Boolean):
    """
    Specifies whether you would like Fluent to automatically set a scale factor for the vector size.
    """
    _version = '251'
    fluent_name = 'auto-scale?'
    _python_name = 'auto_scale'

class vector_style(String, AllowedValuesMixin):
    """
    The shape for the displayed vectors.
    """
    _version = '251'
    fluent_name = 'vector-style'
    _python_name = 'vector_style'

class scale_4(Real):
    """
    A value for scaling the vector size.
    """
    _version = '251'
    fluent_name = 'scale'
    _python_name = 'scale'

class skip(Integer):
    """
    A multiple by which the no. of vectors drawn would be reduced.
    """
    _version = '251'
    fluent_name = 'skip'
    _python_name = 'skip'

class options_15(Group):
    """
    Options for Vector Style.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['auto_scale', 'vector_style', 'scale', 'skip']
    _child_classes = dict(
        auto_scale=auto_scale,
        vector_style=vector_style,
        scale=scale_4,
        skip=skip,
    )

class scale_f(Real):
    """
    A value for scaling the vector size.
    """
    _version = '251'
    fluent_name = 'scale-f'
    _python_name = 'scale_f'

class scale_3(Group):
    """
    A number by which the vector size would be scaled.
    """
    _version = '251'
    fluent_name = 'scale'
    _python_name = 'scale'
    child_names = ['auto_scale', 'scale_f']
    _child_classes = dict(
        auto_scale=auto_scale,
        scale_f=scale_f,
    )

class style(String, AllowedValuesMixin):
    """
    The shape for the displayed vectors.
    """
    _version = '251'
    fluent_name = 'style'
    _python_name = 'style'

class in_plane(Boolean):
    """
    Specifies whether you want in plane vectors.
    """
    _version = '251'
    fluent_name = 'in-plane?'
    _python_name = 'in_plane'

class fixed_length(Boolean):
    """
    Specifies whether you want fixed length vectors.
    """
    _version = '251'
    fluent_name = 'fixed-length?'
    _python_name = 'fixed_length'

class x_comp(Boolean):
    """
    Specifies whether you want to display X-axis aligned vectors.
    """
    _version = '251'
    fluent_name = 'x-comp?'
    _python_name = 'x_comp'

class y_comp(Boolean):
    """
    Specifies whether you want to display Y-axis aligned vectors.
    """
    _version = '251'
    fluent_name = 'y-comp?'
    _python_name = 'y_comp'

class z_comp(Boolean):
    """
    Specifies whether you want to display Z-axis aligned vectors.
    """
    _version = '251'
    fluent_name = 'z-comp?'
    _python_name = 'z_comp'

class scale_head(Real):
    """
    A value for scaling the size of the vector head.
    """
    _version = '251'
    fluent_name = 'scale-head'
    _python_name = 'scale_head'

class tessellation(Integer):
    """
    A value for tessellation.
    """
    _version = '251'
    fluent_name = 'tessellation'
    _python_name = 'tessellation'

class color_5(String, AllowedValuesMixin):
    """
    A color for the vectors.
    """
    _version = '251'
    fluent_name = 'color'
    _python_name = 'color'

class vector_opt(Group):
    """
    Additional vector properties.
    """
    _version = '251'
    fluent_name = 'vector-opt'
    _python_name = 'vector_opt'
    child_names = ['in_plane', 'fixed_length', 'x_comp', 'y_comp', 'z_comp', 'scale_head', 'tessellation', 'color']
    _child_classes = dict(
        in_plane=in_plane,
        fixed_length=fixed_length,
        x_comp=x_comp,
        y_comp=y_comp,
        z_comp=z_comp,
        scale_head=scale_head,
        tessellation=tessellation,
        color=color_5,
    )

class vector_1_child(Group):
    """
    'child_object_type' of vector.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'vector_child'
    child_names = ['name', 'vector_field', 'field', 'surfaces_list', 'range_option', 'range_options', 'options', 'scale', 'style', 'skip', 'vector_opt', 'color_map', 'annotations_list', 'draw_mesh', 'mesh_object', 'display_state_name', 'physics', 'geometry', 'surfaces']
    command_names = ['display']
    _child_classes = dict(
        name=name_17,
        vector_field=vector_field,
        field=field_3,
        surfaces_list=surfaces_list,
        range_option=range_option,
        range_options=range_options,
        options=options_15,
        scale=scale_3,
        style=style,
        skip=skip,
        vector_opt=vector_opt,
        color_map=color_map,
        annotations_list=annotations_list,
        draw_mesh=draw_mesh_1,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        physics=physics_1,
        geometry=geometry_7,
        surfaces=surfaces_4,
        display=display_3,
    )
    _child_aliases = dict(
        update_min_max=('range_options/compute', 'update-min-max'),
    )

class vector_1(NamedObject[vector_1_child], CreatableNamedObjectMixin[vector_1_child]):
    """
    'vector' child.
    """
    _version = '251'
    fluent_name = 'vector'
    _python_name = 'vector'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'display', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy_1,
        display=display_2,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = vector_1_child
    _child_aliases = dict(
        copy=('make_a_copy', 'copy'),
    )

class velocity_domain(String, AllowedValuesMixin):
    """
    Velocity domain.
    """
    _version = '251'
    fluent_name = 'velocity-domain'
    _python_name = 'velocity_domain'

class field_4(String, AllowedValuesMixin):
    """
    Path line color by.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class release_from_surfaces(StringList, AllowedValuesMixin):
    """
    Surface list from the list.
    """
    _version = '251'
    fluent_name = 'release-from-surfaces'
    _python_name = 'release_from_surfaces'

class option_43(String, AllowedValuesMixin):
    """
    Range using the min max options.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class auto_range_2(Group):
    """
    'auto_range' child.
    """
    _version = '251'
    fluent_name = 'auto-range'
    _python_name = 'auto_range'

class min_value(Real):
    """
    'min_value' child.
    """
    _version = '251'
    fluent_name = 'min-value'
    _python_name = 'min_value'

class max_value(Real):
    """
    'max_value' child.
    """
    _version = '251'
    fluent_name = 'max-value'
    _python_name = 'max_value'

class clip_to_range_2(Group):
    """
    'clip_to_range' child.
    """
    _version = '251'
    fluent_name = 'clip-to-range'
    _python_name = 'clip_to_range'
    child_names = ['min_value', 'max_value']
    _child_classes = dict(
        min_value=min_value,
        max_value=max_value,
    )

class range_3(Group):
    """
    Range using the min max options.
    """
    _version = '251'
    fluent_name = 'range'
    _python_name = 'range'
    child_names = ['option', 'auto_range', 'clip_to_range']
    _child_classes = dict(
        option=option_43,
        auto_range=auto_range_2,
        clip_to_range=clip_to_range_2,
    )

class range_options_1(Group):
    """
    Range using the min max options.
    """
    _version = '251'
    fluent_name = 'range-options'
    _python_name = 'range_options'
    child_names = ['auto_range', 'minimum', 'maximum']
    command_names = ['compute']
    _child_classes = dict(
        auto_range=auto_range_1,
        minimum=minimum_3,
        maximum=maximum_3,
        compute=compute_5,
    )

class style_1(String, AllowedValuesMixin):
    """
    Control the style of the pathlines.
    """
    _version = '251'
    fluent_name = 'style'
    _python_name = 'style'

class line_width(Real):
    """
    Determines the thickness of the pathlines.
    """
    _version = '251'
    fluent_name = 'line-width'
    _python_name = 'line_width'

class arrow_space(Real):
    """
    Space between arrows.
    """
    _version = '251'
    fluent_name = 'arrow-space'
    _python_name = 'arrow_space'

class arrow_scale(Real):
    """
    The arrow scale for the pathline object.
    """
    _version = '251'
    fluent_name = 'arrow-scale'
    _python_name = 'arrow_scale'

class marker_size_1(Real):
    """
    Determines the size of the markers in pathlines.
    """
    _version = '251'
    fluent_name = 'marker-size'
    _python_name = 'marker_size'

class sphere_size(Real):
    """
    Define size of the sphere.
    """
    _version = '251'
    fluent_name = 'sphere-size'
    _python_name = 'sphere_size'

class sphere_lod(Integer):
    """
    When selected sphere for pathline, set the sphere LOD to adjust the sphere's rendering details.
    """
    _version = '251'
    fluent_name = 'sphere-lod'
    _python_name = 'sphere_lod'

class radius_3(Real):
    """
    Radius style attribute.
    """
    _version = '251'
    fluent_name = 'radius'
    _python_name = 'radius'

class scalefactor(Real):
    """
    'scalefactor' child.
    """
    _version = '251'
    fluent_name = 'scalefactor'
    _python_name = 'scalefactor'

class ribbon(Group):
    """
    'ribbon' child.
    """
    _version = '251'
    fluent_name = 'ribbon'
    _python_name = 'ribbon'
    child_names = ['field', 'scalefactor']
    _child_classes = dict(
        field=field,
        scalefactor=scalefactor,
    )

class style_attribute(Group):
    """
    The style attributes.
    """
    _version = '251'
    fluent_name = 'style-attribute'
    _python_name = 'style_attribute'
    child_names = ['style', 'line_width', 'arrow_space', 'arrow_scale', 'marker_size', 'sphere_size', 'sphere_lod', 'radius', 'ribbon']
    _child_classes = dict(
        style=style_1,
        line_width=line_width,
        arrow_space=arrow_space,
        arrow_scale=arrow_scale,
        marker_size=marker_size_1,
        sphere_size=sphere_size,
        sphere_lod=sphere_lod,
        radius=radius_3,
        ribbon=ribbon,
    )

class style_2(String, AllowedValuesMixin):
    """
    Style.
    """
    _version = '251'
    fluent_name = 'style'
    _python_name = 'style'

class line_width_1(Real):
    """
    Line Width.
    """
    _version = '251'
    fluent_name = 'line-width'
    _python_name = 'line_width'

class space_factor(Real):
    """
    Spacing Factor.
    """
    _version = '251'
    fluent_name = 'space-factor'
    _python_name = 'space_factor'

class scale_5(Real):
    """
    Scale.
    """
    _version = '251'
    fluent_name = 'scale'
    _python_name = 'scale'

class width_1(Real):
    """
    Width.
    """
    _version = '251'
    fluent_name = 'width'
    _python_name = 'width'

class marker_size_2(Real):
    """
    Marker Size.
    """
    _version = '251'
    fluent_name = 'marker-size'
    _python_name = 'marker_size'

class sphere_size_1(Real):
    """
    Sphere Diameter.
    """
    _version = '251'
    fluent_name = 'sphere-size'
    _python_name = 'sphere_size'

class sphere_detail_lod(Real):
    """
    Sphere Detail.
    """
    _version = '251'
    fluent_name = 'sphere-detail-lod'
    _python_name = 'sphere_detail_lod'

class constant_1(Boolean):
    """
    If Constant Diameter or Variable Diameter.
    """
    _version = '251'
    fluent_name = 'constant'
    _python_name = 'constant'

class diameter_3(Real):
    """
    Sphere Diameter.
    """
    _version = '251'
    fluent_name = 'diameter'
    _python_name = 'diameter'

class size_by(String, AllowedValuesMixin):
    """
    Size by field for Sphere Style.
    """
    _version = '251'
    fluent_name = 'size-by'
    _python_name = 'size_by'

class sphere_scale(Real):
    """
    Sphere Scale.
    """
    _version = '251'
    fluent_name = 'sphere-scale'
    _python_name = 'sphere_scale'

class sphere_lod_1(Real):
    """
    Sphere Detail.
    """
    _version = '251'
    fluent_name = 'sphere-lod'
    _python_name = 'sphere_lod'

class field_5(String, AllowedValuesMixin):
    """
    Twist By Field variable for Ribbon.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class auto_range_3(Boolean):
    """
    Specifies whether Auto generation of range required.
    """
    _version = '251'
    fluent_name = 'auto-range?'
    _python_name = 'auto_range'

class minimum_4(Real):
    """
    Minimum for Range.
    """
    _version = '251'
    fluent_name = 'minimum'
    _python_name = 'minimum'

class maximum_4(Real):
    """
    Maximum for Range.
    """
    _version = '251'
    fluent_name = 'maximum'
    _python_name = 'maximum'

class compute_6(Command):
    """
    Update min-max for Size-by Range for Sphere Style.
    """
    _version = '251'
    fluent_name = 'compute'
    _python_name = 'compute'

class range_sphere(Group):
    """
    Specifies Range for Sphere Style.
    """
    _version = '251'
    fluent_name = 'range-sphere'
    _python_name = 'range_sphere'
    child_names = ['auto_range', 'minimum', 'maximum']
    command_names = ['compute']
    _child_classes = dict(
        auto_range=auto_range_3,
        minimum=minimum_4,
        maximum=maximum_4,
        compute=compute_6,
    )

class minimum_5(Real):
    """
    Minimum for Twist Range.
    """
    _version = '251'
    fluent_name = 'minimum'
    _python_name = 'minimum'

class maximun(Real):
    """
    Maximum for Twist Range.
    """
    _version = '251'
    fluent_name = 'maximun'
    _python_name = 'maximun'

class compute_7(Command):
    """
    Update min-max for Twist Range for Ribbon Style.
    """
    _version = '251'
    fluent_name = 'compute'
    _python_name = 'compute'

class range_ribbon(Group):
    """
    Specifies Range for Ribbon Style.
    """
    _version = '251'
    fluent_name = 'range-ribbon'
    _python_name = 'range_ribbon'
    child_names = ['minimum', 'maximun']
    command_names = ['compute']
    _child_classes = dict(
        minimum=minimum_5,
        maximun=maximun,
        compute=compute_7,
    )

class style_attributes(Group):
    """
    Specifies Track Style for graphic object.
    """
    _version = '251'
    fluent_name = 'style-attributes'
    _python_name = 'style_attributes'
    child_names = ['style', 'line_width', 'space_factor', 'scale', 'width', 'marker_size', 'sphere_size', 'sphere_detail_lod', 'constant', 'diameter', 'size_by', 'sphere_scale', 'sphere_lod', 'field', 'scale_factor', 'range_sphere', 'range_ribbon']
    _child_classes = dict(
        style=style_2,
        line_width=line_width_1,
        space_factor=space_factor,
        scale=scale_5,
        width=width_1,
        marker_size=marker_size_2,
        sphere_size=sphere_size_1,
        sphere_detail_lod=sphere_detail_lod,
        constant=constant_1,
        diameter=diameter_3,
        size_by=size_by,
        sphere_scale=sphere_scale,
        sphere_lod=sphere_lod_1,
        field=field_5,
        scale_factor=scale_factor_1,
        range_sphere=range_sphere,
        range_ribbon=range_ribbon,
    )

class oil_flow(Boolean):
    """
    Toggles between regular pathlines and oil-flow pathlines. When this option is selected, pathlines are constrained to lie on the zone(s) selected in the On Zone list.
    """
    _version = '251'
    fluent_name = 'oil-flow'
    _python_name = 'oil_flow'

class reverse(Boolean):
    """
    Specifies that each particle's path is traced back in time. This option is turned off by default.
    """
    _version = '251'
    fluent_name = 'reverse'
    _python_name = 'reverse'

class node_values_1(Boolean):
    """
    Specifies that node values should be interpolated to compute the scalar field at a particle location. This option is turned on by default.
    """
    _version = '251'
    fluent_name = 'node-values'
    _python_name = 'node_values'

class relative_1(Boolean):
    """
    Display the pathlines relative to the rotating reference frame.
    """
    _version = '251'
    fluent_name = 'relative'
    _python_name = 'relative'

class options_16(Group):
    """
    Check the control options.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['oil_flow', 'reverse', 'node_values', 'relative']
    _child_classes = dict(
        oil_flow=oil_flow,
        reverse=reverse,
        node_values=node_values_1,
        relative=relative_1,
    )

class option_44(String, AllowedValuesMixin):
    """
    Control the accuracy.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class step_size(Real):
    """
    The Step Size sets the length interval used for computing the next position.
    """
    _version = '251'
    fluent_name = 'step-size'
    _python_name = 'step_size'

class tolerance_3(Real):
    """
    The tolerance value will be taken in to consideration while calculating the pathlines for each time step.
    """
    _version = '251'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'

class accuracy_control_1(Group):
    """
    Control the accuracy.
    """
    _version = '251'
    fluent_name = 'accuracy-control'
    _python_name = 'accuracy_control'
    child_names = ['option', 'step_size', 'tolerance']
    _child_classes = dict(
        option=option_44,
        step_size=step_size,
        tolerance=tolerance_3,
    )

class oil_flow_1(Boolean):
    """
    Enable/Disable Oil Flow for pathlines.
    """
    _version = '251'
    fluent_name = 'oil-flow'
    _python_name = 'oil_flow'

class onzone(StringList, AllowedValuesMixin):
    """
    On zone from the given list.
    """
    _version = '251'
    fluent_name = 'onzone'
    _python_name = 'onzone'

class reverse_1(Boolean):
    """
    Enable/Disable Reverse for pathlines.
    """
    _version = '251'
    fluent_name = 'reverse'
    _python_name = 'reverse'

class node_values_2(Boolean):
    """
    Enable/Disable Node Values for pathlines.
    """
    _version = '251'
    fluent_name = 'node-values'
    _python_name = 'node_values'

class accuracy_controls(Boolean):
    """
    Use tolerance or step-size for accuracy.
    """
    _version = '251'
    fluent_name = 'accuracy-controls'
    _python_name = 'accuracy_controls'

class step_size_1(Real):
    """
    Step size.
    """
    _version = '251'
    fluent_name = 'step-size'
    _python_name = 'step_size'

class tolerance_4(Real):
    """
    Tolerance.
    """
    _version = '251'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'

class relative_2(Boolean):
    """
    Enable/Disable Relative for pathlines.
    """
    _version = '251'
    fluent_name = 'relative'
    _python_name = 'relative'

class step(Integer):
    """
    Number of steps for pathlines.
    """
    _version = '251'
    fluent_name = 'step'
    _python_name = 'step'

class skip_1(Integer):
    """
    A number to skip pathline tracks.
    """
    _version = '251'
    fluent_name = 'skip'
    _python_name = 'skip'

class coarsen_1(Integer):
    """
    Coarsen level for pathlines.
    """
    _version = '251'
    fluent_name = 'coarsen'
    _python_name = 'coarsen'

class option_42(Group):
    """
    Check the control options.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'
    child_names = ['oil_flow', 'onzone', 'reverse', 'node_values', 'accuracy_controls', 'step_size', 'tolerance', 'relative', 'step', 'skip', 'coarsen']
    _child_classes = dict(
        oil_flow=oil_flow_1,
        onzone=onzone,
        reverse=reverse_1,
        node_values=node_values_2,
        accuracy_controls=accuracy_controls,
        step_size=step_size_1,
        tolerance=tolerance_4,
        relative=relative_2,
        step=step,
        skip=skip_1,
        coarsen=coarsen_1,
    )

class x_axis_function(String, AllowedValuesMixin):
    """
    'x_axis_function' child.
    """
    _version = '251'
    fluent_name = 'x-axis-function'
    _python_name = 'x_axis_function'

class enabled_63(Boolean):
    """
    'enabled' child.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class plot_5(Group):
    """
    Enable the plot option.
    """
    _version = '251'
    fluent_name = 'plot'
    _python_name = 'plot'
    child_names = ['x_axis_function', 'enabled']
    _child_classes = dict(
        x_axis_function=x_axis_function,
        enabled=enabled_63,
    )

class onphysics(StringList, AllowedValuesMixin):
    """
    'onphysics' child.
    """
    _version = '251'
    fluent_name = 'onphysics'
    _python_name = 'onphysics'

class x_format(String, AllowedValuesMixin):
    """
    X-axis format.
    """
    _version = '251'
    fluent_name = 'x-format'
    _python_name = 'x_format'

class x_axis_precision(Integer):
    """
    Digits of precision for X-axis.
    """
    _version = '251'
    fluent_name = 'x-axis-precision'
    _python_name = 'x_axis_precision'

class y_format(String, AllowedValuesMixin):
    """
    Y-axis format.
    """
    _version = '251'
    fluent_name = 'y-format'
    _python_name = 'y_format'

class y_axis_precision(Integer):
    """
    Digits of precision for Y-axis.
    """
    _version = '251'
    fluent_name = 'y-axis-precision'
    _python_name = 'y_axis_precision'

class numbers(Group):
    """
    Contains controls for changing the format of the data labels on the active axis.
    """
    _version = '251'
    fluent_name = 'numbers'
    _python_name = 'numbers'
    child_names = ['x_format', 'x_axis_precision', 'y_format', 'y_axis_precision']
    _child_classes = dict(
        x_format=x_format,
        x_axis_precision=x_axis_precision,
        y_format=y_format,
        y_axis_precision=y_axis_precision,
    )

class draw_major_rules(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'draw-major-rules?'
    _python_name = 'draw_major_rules'

class major_rule_weight(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'major-rule-weight'
    _python_name = 'major_rule_weight'

class major_rule_line_color(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'major-rule-line-color'
    _python_name = 'major_rule_line_color'

class draw_minor_rules(Boolean):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'draw-minor-rules?'
    _python_name = 'draw_minor_rules'

class minor_rule_weight(Real):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'minor-rule-weight'
    _python_name = 'minor_rule_weight'

class minor_rule_line_color(String, AllowedValuesMixin):
    """
    Help not available.
    """
    _version = '251'
    fluent_name = 'minor-rule-line-color'
    _python_name = 'minor_rule_line_color'

class x_axis_2(Group):
    """
    'x_axis' child.
    """
    _version = '251'
    fluent_name = 'x-axis'
    _python_name = 'x_axis'
    child_names = ['draw_major_rules', 'major_rule_weight', 'major_rule_line_color', 'draw_minor_rules', 'minor_rule_weight', 'minor_rule_line_color']
    _child_classes = dict(
        draw_major_rules=draw_major_rules,
        major_rule_weight=major_rule_weight,
        major_rule_line_color=major_rule_line_color,
        draw_minor_rules=draw_minor_rules,
        minor_rule_weight=minor_rule_weight,
        minor_rule_line_color=minor_rule_line_color,
    )

class y_axis_2(Group):
    """
    'y_axis' child.
    """
    _version = '251'
    fluent_name = 'y-axis'
    _python_name = 'y_axis'
    child_names = ['draw_major_rules', 'major_rule_weight', 'major_rule_line_color', 'draw_minor_rules', 'minor_rule_weight', 'minor_rule_line_color']
    _child_classes = dict(
        draw_major_rules=draw_major_rules,
        major_rule_weight=major_rule_weight,
        major_rule_line_color=major_rule_line_color,
        draw_minor_rules=draw_minor_rules,
        minor_rule_weight=minor_rule_weight,
        minor_rule_line_color=minor_rule_line_color,
    )

class rules(Group):
    """
    Major and minor rule for the X Y Axis.
    """
    _version = '251'
    fluent_name = 'rules'
    _python_name = 'rules'
    child_names = ['x_axis', 'y_axis']
    _child_classes = dict(
        x_axis=x_axis_2,
        y_axis=y_axis_2,
    )

class x_axis_3(Boolean):
    """
    Use log scale for X-axis?.
    """
    _version = '251'
    fluent_name = 'x-axis?'
    _python_name = 'x_axis'

class y_axis_3(Boolean):
    """
    Use log scale for Y-axis?.
    """
    _version = '251'
    fluent_name = 'y-axis?'
    _python_name = 'y_axis'

class log_scale_2(Group):
    """
    'log_scale' child.
    """
    _version = '251'
    fluent_name = 'log-scale'
    _python_name = 'log_scale'
    child_names = ['x_axis', 'y_axis']
    _child_classes = dict(
        x_axis=x_axis_3,
        y_axis=y_axis_3,
    )

class x_axis_4(Boolean):
    """
    Auto-scale X-axis?.
    """
    _version = '251'
    fluent_name = 'x-axis?'
    _python_name = 'x_axis'

class x_axis_min(Real):
    """
    Minimum X-axis value.
    """
    _version = '251'
    fluent_name = 'x-axis-min'
    _python_name = 'x_axis_min'

class x_axis_max(Real):
    """
    Maximum X-axis value.
    """
    _version = '251'
    fluent_name = 'x-axis-max'
    _python_name = 'x_axis_max'

class y_axis_4(Boolean):
    """
    Auto-scale Y-axis?.
    """
    _version = '251'
    fluent_name = 'y-axis?'
    _python_name = 'y_axis'

class y_axis_min(Real):
    """
    Minimum Y-axis value.
    """
    _version = '251'
    fluent_name = 'y-axis-min'
    _python_name = 'y_axis_min'

class y_axis_max(Real):
    """
    Maximum Y-axis value.
    """
    _version = '251'
    fluent_name = 'y-axis-max'
    _python_name = 'y_axis_max'

class auto_scale_1(Group):
    """
    With the Auto Scale option, you can modify the Scale factor (which is set to 1 by default) to increase or decrease the vector scale from the default auto scale.
    """
    _version = '251'
    fluent_name = 'auto-scale'
    _python_name = 'auto_scale'
    child_names = ['x_axis', 'x_axis_min', 'x_axis_max', 'y_axis', 'y_axis_min', 'y_axis_max']
    _child_classes = dict(
        x_axis=x_axis_4,
        x_axis_min=x_axis_min,
        x_axis_max=x_axis_max,
        y_axis=y_axis_4,
        y_axis_min=y_axis_min,
        y_axis_max=y_axis_max,
    )

class x_axis_5(String, AllowedValuesMixin):
    """
    X-axis label.
    """
    _version = '251'
    fluent_name = 'x-axis'
    _python_name = 'x_axis'

class y_axis_5(String, AllowedValuesMixin):
    """
    Y-axis label.
    """
    _version = '251'
    fluent_name = 'y-axis'
    _python_name = 'y_axis'

class labels(Group):
    """
    X and Y Axis labels.
    """
    _version = '251'
    fluent_name = 'labels'
    _python_name = 'labels'
    child_names = ['x_axis', 'y_axis']
    _child_classes = dict(
        x_axis=x_axis_5,
        y_axis=y_axis_5,
    )

class axes_1(Group):
    """
    Contains check buttons that allow you to set abscissa (-axis) or ordinate (-axis) characteristics.
    """
    _version = '251'
    fluent_name = 'axes'
    _python_name = 'axes'
    child_names = ['numbers', 'rules', 'log_scale', 'auto_scale', 'labels']
    _child_classes = dict(
        numbers=numbers,
        rules=rules,
        log_scale=log_scale_2,
        auto_scale=auto_scale_1,
        labels=labels,
    )

class pattern_1(String, AllowedValuesMixin):
    """
    'pattern' child.
    """
    _version = '251'
    fluent_name = 'pattern'
    _python_name = 'pattern'

class weight_2(Real):
    """
    'weight' child.
    """
    _version = '251'
    fluent_name = 'weight'
    _python_name = 'weight'

class lines_child(Group):
    """
    'child_object_type' of lines.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'lines_child'
    child_names = ['pattern', 'weight', 'color']
    _child_classes = dict(
        pattern=pattern_1,
        weight=weight_2,
        color=color_3,
    )

class lines(ListObject[lines_child]):
    """
    'lines' child.
    """
    _version = '251'
    fluent_name = 'lines'
    _python_name = 'lines'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = lines_child

class symbol_1(String, AllowedValuesMixin):
    """
    'symbol' child.
    """
    _version = '251'
    fluent_name = 'symbol'
    _python_name = 'symbol'

class size_3(Real):
    """
    'size' child.
    """
    _version = '251'
    fluent_name = 'size'
    _python_name = 'size'

class markers_child(Group):
    """
    'child_object_type' of markers.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'markers_child'
    child_names = ['symbol', 'size', 'color']
    _child_classes = dict(
        symbol=symbol_1,
        size=size_3,
        color=color_3,
    )

class markers(ListObject[markers_child]):
    """
    'markers' child.
    """
    _version = '251'
    fluent_name = 'markers'
    _python_name = 'markers'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = markers_child

class curves_1(Group):
    """
    Line, marker style and color for Curves.
    """
    _version = '251'
    fluent_name = 'curves'
    _python_name = 'curves'
    child_names = ['lines', 'markers']
    _child_classes = dict(
        lines=lines,
        markers=markers,
    )

class pathline_child(Group):
    """
    'child_object_type' of pathline.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'pathline_child'
    child_names = ['name', 'velocity_domain', 'field', 'release_from_surfaces', 'range', 'range_options', 'style_attribute', 'style_attributes', 'options', 'accuracy_control', 'option', 'step', 'skip', 'coarsen', 'onzone', 'plot', 'onphysics', 'color_map', 'annotations_list', 'draw_mesh', 'mesh_object', 'display_state_name', 'physics', 'geometry', 'surfaces', 'axes', 'curves']
    command_names = ['display']
    _child_classes = dict(
        name=name_17,
        velocity_domain=velocity_domain,
        field=field_4,
        release_from_surfaces=release_from_surfaces,
        range=range_3,
        range_options=range_options_1,
        style_attribute=style_attribute,
        style_attributes=style_attributes,
        options=options_16,
        accuracy_control=accuracy_control_1,
        option=option_42,
        step=step,
        skip=skip_1,
        coarsen=coarsen_1,
        onzone=onzone,
        plot=plot_5,
        onphysics=onphysics,
        color_map=color_map,
        annotations_list=annotations_list,
        draw_mesh=draw_mesh_1,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        physics=physics_1,
        geometry=geometry_7,
        surfaces=surfaces_4,
        axes=axes_1,
        curves=curves_1,
        display=display_3,
    )
    _child_aliases = dict(
        update_min_max=('range_options/compute', 'update-min-max'),
    )

class pathline(NamedObject[pathline_child], CreatableNamedObjectMixin[pathline_child]):
    """
    'pathline' child.
    """
    _version = '251'
    fluent_name = 'pathline'
    _python_name = 'pathline'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'display', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy_1,
        display=display_2,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = pathline_child
    _child_aliases = dict(
        copy=('make_a_copy', 'copy'),
    )

class field_6(String, AllowedValuesMixin):
    """
    Particle line color by.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class injections_list(StringList, AllowedValuesMixin):
    """
    Release from injections below.
    """
    _version = '251'
    fluent_name = 'injections-list'
    _python_name = 'injections_list'

class style_3(String, AllowedValuesMixin):
    """
    From the particle track style list options.
    """
    _version = '251'
    fluent_name = 'style'
    _python_name = 'style'

class line_width_2(Real):
    """
    Determines the thickness of the particle tracks.
    """
    _version = '251'
    fluent_name = 'line-width'
    _python_name = 'line_width'

class arrow_space_1(Real):
    """
    The spacing between arrows.
    """
    _version = '251'
    fluent_name = 'arrow-space'
    _python_name = 'arrow_space'

class marker_size_3(Real):
    """
    Determines the size of the markers in particle tracks.
    """
    _version = '251'
    fluent_name = 'marker-size'
    _python_name = 'marker_size'

class sphere_lod_2(Integer):
    """
    When selected sphere, set the sphere LOD to adjust the sphere's rendering quality.
    """
    _version = '251'
    fluent_name = 'sphere-lod'
    _python_name = 'sphere_lod'

class field_7(String, AllowedValuesMixin):
    """
    How the ribbon should be twisted.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class scalefactor_1(Real):
    """
    Scale of the ribbon.
    """
    _version = '251'
    fluent_name = 'scalefactor'
    _python_name = 'scalefactor'

class ribbon_settings(Group):
    """
    Change ribbon field and scale factor.
    """
    _version = '251'
    fluent_name = 'ribbon-settings'
    _python_name = 'ribbon_settings'
    child_names = ['field', 'scalefactor']
    _child_classes = dict(
        field=field_7,
        scalefactor=scalefactor_1,
    )

class scale_6(Real):
    """
    Sphere scale.
    """
    _version = '251'
    fluent_name = 'scale'
    _python_name = 'scale'

class option_46(String, AllowedValuesMixin):
    """
    The options Constant or Variable.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class diameter_4(Real):
    """
    The sphere diameter.
    """
    _version = '251'
    fluent_name = 'diameter'
    _python_name = 'diameter'

class constant_2(Group):
    """
    'constant' child.
    """
    _version = '251'
    fluent_name = 'constant'
    _python_name = 'constant'
    child_names = ['diameter']
    _child_classes = dict(
        diameter=diameter_4,
    )

class size_by_1(String, AllowedValuesMixin):
    """
    The size by attribute.
    """
    _version = '251'
    fluent_name = 'size-by'
    _python_name = 'size_by'

class range_options_2(Group):
    """
    Min max of the range.
    """
    _version = '251'
    fluent_name = 'range-options'
    _python_name = 'range_options'
    child_names = ['auto_range', 'minimum', 'maximum']
    command_names = ['compute']
    _child_classes = dict(
        auto_range=auto_range_1,
        minimum=minimum_3,
        maximum=maximum_3,
        compute=compute_5,
    )

class variable_1(Group):
    """
    'variable' child.
    """
    _version = '251'
    fluent_name = 'variable'
    _python_name = 'variable'
    child_names = ['size_by', 'range', 'range_options']
    _child_classes = dict(
        size_by=size_by_1,
        range=range_3,
        range_options=range_options_2,
    )

class options_18(Group):
    """
    The options Constant or Variable.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['option', 'constant', 'variable']
    _child_classes = dict(
        option=option_46,
        constant=constant_2,
        variable=variable_1,
    )

class sphere_settings(Group):
    """
    When selected sphere as a track style, change the settings.
    """
    _version = '251'
    fluent_name = 'sphere-settings'
    _python_name = 'sphere_settings'
    child_names = ['scale', 'sphere_lod', 'options']
    _child_classes = dict(
        scale=scale_6,
        sphere_lod=sphere_lod_2,
        options=options_18,
    )

class style_attribute_1(Group):
    """
    The style attributes.
    """
    _version = '251'
    fluent_name = 'style-attribute'
    _python_name = 'style_attribute'
    child_names = ['style', 'line_width', 'arrow_space', 'arrow_scale', 'marker_size', 'sphere_size', 'sphere_lod', 'radius', 'ribbon_settings', 'sphere_settings']
    _child_classes = dict(
        style=style_3,
        line_width=line_width_2,
        arrow_space=arrow_space_1,
        arrow_scale=arrow_scale,
        marker_size=marker_size_3,
        sphere_size=sphere_size,
        sphere_lod=sphere_lod_2,
        radius=radius_3,
        ribbon_settings=ribbon_settings,
        sphere_settings=sphere_settings,
    )

class style_4(String, AllowedValuesMixin):
    """
    Particle vector style.
    """
    _version = '251'
    fluent_name = 'style'
    _python_name = 'style'

class option_47(String, AllowedValuesMixin):
    """
    Vector length, only applicable if constant lenth is selected.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class constant_length(Real):
    """
    'constant_length' child.
    """
    _version = '251'
    fluent_name = 'constant-length'
    _python_name = 'constant_length'

class variable_length(String, AllowedValuesMixin):
    """
    'variable_length' child.
    """
    _version = '251'
    fluent_name = 'variable-length'
    _python_name = 'variable_length'

class vector_length(Group):
    """
    Vector length, only applicable if constant lenth is selected.
    """
    _version = '251'
    fluent_name = 'vector-length'
    _python_name = 'vector_length'
    child_names = ['option', 'constant_length', 'variable_length']
    _child_classes = dict(
        option=option_47,
        constant_length=constant_length,
        variable_length=variable_length,
    )

class constant_color(Group):
    """
    The constant color value.
    """
    _version = '251'
    fluent_name = 'constant-color'
    _python_name = 'constant_color'
    child_names = ['enabled', 'color']
    _child_classes = dict(
        enabled=enabled_63,
        color=color_3,
    )

class vector_of(String, AllowedValuesMixin):
    """
    Define the vector direction.
    """
    _version = '251'
    fluent_name = 'vector-of'
    _python_name = 'vector_of'

class scale_7(Real):
    """
    The scale factor for the vectors.
    """
    _version = '251'
    fluent_name = 'scale'
    _python_name = 'scale'

class length_to_head_ratio(Real):
    """
    The ratio of vector length to head size.
    """
    _version = '251'
    fluent_name = 'length-to-head-ratio'
    _python_name = 'length_to_head_ratio'

class vector_settings(Group):
    """
    Vector style.
    """
    _version = '251'
    fluent_name = 'vector-settings'
    _python_name = 'vector_settings'
    child_names = ['style', 'vector_length', 'constant_color', 'vector_of', 'scale', 'length_to_head_ratio']
    _child_classes = dict(
        style=style_4,
        vector_length=vector_length,
        constant_color=constant_color,
        vector_of=vector_of,
        scale=scale_7,
        length_to_head_ratio=length_to_head_ratio,
    )

class style_5(String, AllowedValuesMixin):
    """
    'style' child.
    """
    _version = '251'
    fluent_name = 'style'
    _python_name = 'style'

class vector_of_1(String, AllowedValuesMixin):
    """
    The category of Vectors.
    """
    _version = '251'
    fluent_name = 'vector-of'
    _python_name = 'vector_of'

class variable_length_1(String, AllowedValuesMixin):
    """
    The variable length based on Vector.
    """
    _version = '251'
    fluent_name = 'variable-length'
    _python_name = 'variable_length'

class vector_length_1(Boolean):
    """
    Specifies whether Contant-length.
    """
    _version = '251'
    fluent_name = 'vector-length'
    _python_name = 'vector_length'

class constant_length_1(Real):
    """
    Length of the vector.
    """
    _version = '251'
    fluent_name = 'constant-length'
    _python_name = 'constant_length'

class length_to_head_ratio_1(Real):
    """
    Length to head ratio of the vector.
    """
    _version = '251'
    fluent_name = 'length-to-head-ratio'
    _python_name = 'length_to_head_ratio'

class constant_color_1(Boolean):
    """
    Enable Constant Color Setting.
    """
    _version = '251'
    fluent_name = 'constant-color'
    _python_name = 'constant_color'

class color_6(String, AllowedValuesMixin):
    """
    The Color.
    """
    _version = '251'
    fluent_name = 'color'
    _python_name = 'color'

class vector_setting(Group):
    """
    Particle-tracks Vector Style Settings.
    """
    _version = '251'
    fluent_name = 'vector-setting'
    _python_name = 'vector_setting'
    child_names = ['style', 'vector_of', 'variable_length', 'vector_length', 'constant_length', 'scale', 'length_to_head_ratio', 'constant_color', 'color']
    _child_classes = dict(
        style=style_5,
        vector_of=vector_of_1,
        variable_length=variable_length_1,
        vector_length=vector_length_1,
        constant_length=constant_length_1,
        scale=scale_5,
        length_to_head_ratio=length_to_head_ratio_1,
        constant_color=constant_color_1,
        color=color_6,
    )

class free_stream_particles(Boolean):
    """
    Free stream particles.
    """
    _version = '251'
    fluent_name = 'free-stream-particles?'
    _python_name = 'free_stream_particles'

class wall_film_particles(Boolean):
    """
    Wall film particles.
    """
    _version = '251'
    fluent_name = 'wall-film-particles?'
    _python_name = 'wall_film_particles'

class track_pdf_particles(Boolean):
    """
    Track pdf particles for tracks.
    """
    _version = '251'
    fluent_name = 'track-pdf-particles?'
    _python_name = 'track_pdf_particles'

class enabled_64(Boolean):
    """
    Enable track single particle stream.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class stream_id(Integer):
    """
    Stream ID.
    """
    _version = '251'
    fluent_name = 'stream-id'
    _python_name = 'stream_id'

class track_single_particle_stream_1(Group):
    """
    Enable track single particle stream.
    """
    _version = '251'
    fluent_name = 'track-single-particle-stream'
    _python_name = 'track_single_particle_stream'
    child_names = ['enabled', 'stream_id']
    _child_classes = dict(
        enabled=enabled_64,
        stream_id=stream_id,
    )

class skip_2(Integer):
    """
    A number to skip particle tracks.
    """
    _version = '251'
    fluent_name = 'skip'
    _python_name = 'skip'

class coarsen_3(Integer):
    """
    Coarsen level for Particle Tracks.
    """
    _version = '251'
    fluent_name = 'coarsen'
    _python_name = 'coarsen'

class option_45(Group):
    """
    Check the Particle-tracks control options.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'
    child_names = ['free_stream_particles', 'wall_film_particles', 'track_pdf_particles', 'track_single_particle_stream', 'skip', 'coarsen']
    _child_classes = dict(
        free_stream_particles=free_stream_particles,
        wall_film_particles=wall_film_particles,
        track_pdf_particles=track_pdf_particles,
        track_single_particle_stream=track_single_particle_stream_1,
        skip=skip_2,
        coarsen=coarsen_3,
    )

class field_8(String, AllowedValuesMixin):
    """
    How to filter the particles.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class inside_1(Boolean):
    """
    Enable inside filter option.
    """
    _version = '251'
    fluent_name = 'inside'
    _python_name = 'inside'

class outside(Boolean):
    """
    Enable outside filter option.
    """
    _version = '251'
    fluent_name = 'outside'
    _python_name = 'outside'

class options_19(Group):
    """
    'options' child.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['option', 'inside', 'outside']
    _child_classes = dict(
        option=option_1,
        inside=inside_1,
        outside=outside,
    )

class enabled_65(Boolean):
    """
    Enable or disable the particle filter.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class filter_minimum(Real):
    """
    The minimum value for the filter.
    """
    _version = '251'
    fluent_name = 'filter-minimum'
    _python_name = 'filter_minimum'

class filter_maximum(Real):
    """
    The maximum value for the filter.
    """
    _version = '251'
    fluent_name = 'filter-maximum'
    _python_name = 'filter_maximum'

class filter_settings(Group):
    """
    The filter settings.
    """
    _version = '251'
    fluent_name = 'filter-settings'
    _python_name = 'filter_settings'
    child_names = ['field', 'options', 'enabled', 'filter_minimum', 'filter_maximum']
    _child_classes = dict(
        field=field_8,
        options=options_19,
        enabled=enabled_65,
        filter_minimum=filter_minimum,
        filter_maximum=filter_maximum,
    )

class enabled_66(Boolean):
    """
    Enable Filter?.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class field_9(String, AllowedValuesMixin):
    """
    The field variable for filter.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class option_48(Boolean):
    """
    The filter option to be Inside or Outside.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class minimum_6(Real):
    """
    The Minimum for filter.
    """
    _version = '251'
    fluent_name = 'minimum'
    _python_name = 'minimum'

class maximum_5(Real):
    """
    The Maximum for filter.
    """
    _version = '251'
    fluent_name = 'maximum'
    _python_name = 'maximum'

class compute_8(Command):
    """
    Update min-max for Filter Settings.
    """
    _version = '251'
    fluent_name = 'compute'
    _python_name = 'compute'

class range_4(Group):
    """
    Specifies Range for Filter Settings.
    """
    _version = '251'
    fluent_name = 'range'
    _python_name = 'range'
    child_names = ['minimum', 'maximum']
    command_names = ['compute']
    _child_classes = dict(
        minimum=minimum_6,
        maximum=maximum_5,
        compute=compute_8,
    )

class filter_setting(Group):
    """
    Specifies Particle Tracks Filter Settings.
    """
    _version = '251'
    fluent_name = 'filter-setting'
    _python_name = 'filter_setting'
    child_names = ['enabled', 'field', 'option', 'range']
    _child_classes = dict(
        enabled=enabled_66,
        field=field_9,
        option=option_48,
        range=range_4,
    )

class options_17(Group):
    """
    Check the control options.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['node_values']
    _child_classes = dict(
        node_values=node_values_1,
    )

class enabled_67(Boolean):
    """
    Whether to enable or disable track single particle stream.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class stream_id_1(Integer):
    """
    Assign the stream id.
    """
    _version = '251'
    fluent_name = 'stream-id'
    _python_name = 'stream_id'

class track_single_particle_stream(Group):
    """
    Enable track single particle stream.
    """
    _version = '251'
    fluent_name = 'track-single-particle-stream'
    _python_name = 'track_single_particle_stream'
    child_names = ['enabled', 'stream_id']
    _child_classes = dict(
        enabled=enabled_67,
        stream_id=stream_id_1,
    )

class coarsen_2(Integer):
    """
    Coarsen level for particle tracks.
    """
    _version = '251'
    fluent_name = 'coarsen'
    _python_name = 'coarsen'

class particle_track_child(Group):
    """
    'child_object_type' of particle_track.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'particle_track_child'
    child_names = ['name', 'field', 'injections_list', 'range_options', 'range', 'style_attribute', 'style_attributes', 'vector_settings', 'vector_setting', 'option', 'color_map', 'annotations_list', 'filter_settings', 'filter_setting', 'options', 'track_single_particle_stream', 'skip', 'coarsen', 'free_stream_particles', 'wall_film_particles', 'track_pdf_particles', 'draw_mesh', 'mesh_object', 'display_state_name', 'plot', 'axes', 'curves']
    command_names = ['display']
    _child_classes = dict(
        name=name_17,
        field=field_6,
        injections_list=injections_list,
        range_options=range_options_1,
        range=range_3,
        style_attribute=style_attribute_1,
        style_attributes=style_attributes,
        vector_settings=vector_settings,
        vector_setting=vector_setting,
        option=option_45,
        color_map=color_map,
        annotations_list=annotations_list,
        filter_settings=filter_settings,
        filter_setting=filter_setting,
        options=options_17,
        track_single_particle_stream=track_single_particle_stream,
        skip=skip_2,
        coarsen=coarsen_2,
        free_stream_particles=free_stream_particles,
        wall_film_particles=wall_film_particles,
        track_pdf_particles=track_pdf_particles,
        draw_mesh=draw_mesh_1,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        plot=plot_5,
        axes=axes_1,
        curves=curves_1,
        display=display_3,
    )
    _child_aliases = dict(
        update_min_max=('range_options/compute', 'update-min-max'),
    )

class particle_track(NamedObject[particle_track_child], CreatableNamedObjectMixin[particle_track_child]):
    """
    'particle_track' child.
    """
    _version = '251'
    fluent_name = 'particle-track'
    _python_name = 'particle_track'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'display', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy_1,
        display=display_2,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = particle_track_child
    _child_aliases = dict(
        copy=('make_a_copy', 'copy'),
    )

class vector_field_1(String, AllowedValuesMixin):
    """
    Specifies whether the vectors represent velocity or relative velocity.
    """
    _version = '251'
    fluent_name = 'vector-field'
    _python_name = 'vector_field'

class vector_phase(String, AllowedValuesMixin):
    """
    'vector_phase' child.
    """
    _version = '251'
    fluent_name = 'vector-phase'
    _python_name = 'vector_phase'

class lic_color_by_field(Boolean):
    """
    'lic_color_by_field' child.
    """
    _version = '251'
    fluent_name = 'lic-color-by-field?'
    _python_name = 'lic_color_by_field'

class lic_color(String, AllowedValuesMixin):
    """
    'lic_color' child.
    """
    _version = '251'
    fluent_name = 'lic-color'
    _python_name = 'lic_color'

class lic_oriented(Boolean):
    """
    'lic_oriented' child.
    """
    _version = '251'
    fluent_name = 'lic-oriented?'
    _python_name = 'lic_oriented'

class lic_normalize(Boolean):
    """
    Normalizes the vector field magnitude during the integration.
    """
    _version = '251'
    fluent_name = 'lic-normalize?'
    _python_name = 'lic_normalize'

class lic_pixel_interpolation(Boolean):
    """
    'lic_pixel_interpolation' child.
    """
    _version = '251'
    fluent_name = 'lic-pixel-interpolation?'
    _python_name = 'lic_pixel_interpolation'

class lic_max_steps(Integer):
    """
    Provide value for maximum number of steps used [5, 50].
    """
    _version = '251'
    fluent_name = 'lic-max-steps'
    _python_name = 'lic_max_steps'

class texture_spacing(Integer):
    """
    Provide seed spacing value [4, 100].
    """
    _version = '251'
    fluent_name = 'texture-spacing'
    _python_name = 'texture_spacing'

class texture_size(Integer):
    """
    The Texture Size slider to control the size (in 100's of pixels) of the texture image used in.
    """
    _version = '251'
    fluent_name = 'texture-size'
    _python_name = 'texture_size'

class lic_intensity_factor(Integer):
    """
    Scales the intensity levels of the convolution results up or down. You can use this to control
    the brightness or contrast of the resulting image [0, 10].
    """
    _version = '251'
    fluent_name = 'lic-intensity-factor'
    _python_name = 'lic_intensity_factor'

class lic_image_filter(String, AllowedValuesMixin):
    """
    Applies an image filter to the convolutions.
    """
    _version = '251'
    fluent_name = 'lic-image-filter'
    _python_name = 'lic_image_filter'

class lic_intensity_alpha(Boolean):
    """
    Make background either transparent or opaque.
    """
    _version = '251'
    fluent_name = 'lic-intensity-alpha?'
    _python_name = 'lic_intensity_alpha'

class lic_fast(Boolean):
    """
    'lic_fast' child.
    """
    _version = '251'
    fluent_name = 'lic-fast?'
    _python_name = 'lic_fast'

class gray_scale(Boolean):
    """
    'gray_scale' child.
    """
    _version = '251'
    fluent_name = 'gray-scale?'
    _python_name = 'gray_scale'

class image_to_display(String, AllowedValuesMixin):
    """
    'image_to_display' child.
    """
    _version = '251'
    fluent_name = 'image-to-display'
    _python_name = 'image_to_display'

class lic_child(Group):
    """
    'child_object_type' of lic.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'lic_child'
    child_names = ['name', 'field', 'vector_field', 'vector_phase', 'surfaces_list', 'surfaces', 'lic_color_by_field', 'lic_color', 'lic_oriented', 'lic_normalize', 'lic_pixel_interpolation', 'lic_max_steps', 'texture_spacing', 'texture_size', 'lic_intensity_factor', 'lic_image_filter', 'lic_intensity_alpha', 'lic_fast', 'gray_scale', 'image_to_display', 'range_option', 'range_options', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name', 'annotations_list']
    command_names = ['display']
    _child_classes = dict(
        name=name_17,
        field=field_3,
        vector_field=vector_field_1,
        vector_phase=vector_phase,
        surfaces_list=surfaces_list,
        surfaces=surfaces_4,
        lic_color_by_field=lic_color_by_field,
        lic_color=lic_color,
        lic_oriented=lic_oriented,
        lic_normalize=lic_normalize,
        lic_pixel_interpolation=lic_pixel_interpolation,
        lic_max_steps=lic_max_steps,
        texture_spacing=texture_spacing,
        texture_size=texture_size,
        lic_intensity_factor=lic_intensity_factor,
        lic_image_filter=lic_image_filter,
        lic_intensity_alpha=lic_intensity_alpha,
        lic_fast=lic_fast,
        gray_scale=gray_scale,
        image_to_display=image_to_display,
        range_option=range_option,
        range_options=range_options,
        color_map=color_map,
        draw_mesh=draw_mesh_1,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        annotations_list=annotations_list,
        display=display_3,
    )
    _child_aliases = dict(
        update_min_max=('range_options/compute', 'update-min-max'),
    )

class lic(NamedObject[lic_child], CreatableNamedObjectMixin[lic_child]):
    """
    'lic' child.
    """
    _version = '251'
    fluent_name = 'lic'
    _python_name = 'lic'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'display', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy_1,
        display=display_2,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = lic_child
    _child_aliases = dict(
        copy=('make_a_copy', 'copy'),
    )

class olic_child(Group):
    """
    'child_object_type' of olic.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'olic_child'
    child_names = ['name', 'field', 'vector_field', 'vector_phase', 'surfaces_list', 'surfaces', 'lic_color_by_field', 'lic_color', 'lic_oriented', 'lic_normalize', 'lic_pixel_interpolation', 'lic_max_steps', 'texture_spacing', 'texture_size', 'lic_intensity_factor', 'lic_image_filter', 'lic_intensity_alpha', 'lic_fast', 'gray_scale', 'image_to_display', 'range_option', 'range_options', 'color_map', 'draw_mesh', 'mesh_object', 'display_state_name', 'annotations_list']
    command_names = ['display']
    _child_classes = dict(
        name=name_17,
        field=field_3,
        vector_field=vector_field_1,
        vector_phase=vector_phase,
        surfaces_list=surfaces_list,
        surfaces=surfaces_4,
        lic_color_by_field=lic_color_by_field,
        lic_color=lic_color,
        lic_oriented=lic_oriented,
        lic_normalize=lic_normalize,
        lic_pixel_interpolation=lic_pixel_interpolation,
        lic_max_steps=lic_max_steps,
        texture_spacing=texture_spacing,
        texture_size=texture_size,
        lic_intensity_factor=lic_intensity_factor,
        lic_image_filter=lic_image_filter,
        lic_intensity_alpha=lic_intensity_alpha,
        lic_fast=lic_fast,
        gray_scale=gray_scale,
        image_to_display=image_to_display,
        range_option=range_option,
        range_options=range_options,
        color_map=color_map,
        draw_mesh=draw_mesh_1,
        mesh_object=mesh_object,
        display_state_name=display_state_name,
        annotations_list=annotations_list,
        display=display_3,
    )

class olic(NamedObject[olic_child], CreatableNamedObjectMixin[olic_child]):
    """
    'olic' child.
    """
    _version = '251'
    fluent_name = 'olic'
    _python_name = 'olic'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'display', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy_1,
        display=display_2,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = olic_child
    _child_aliases = dict(
        copy=('make_a_copy', 'copy'),
    )

class field_10(String, AllowedValuesMixin):
    """
    Field variable used for volume data and coloring.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class data_source(String, AllowedValuesMixin):
    """
    Provide whether to use node or cell centered data for displaying the volume.
    """
    _version = '251'
    fluent_name = 'data-source'
    _python_name = 'data_source'

class type_11(String, AllowedValuesMixin):
    """
    Specifies whether you want the range to be Global, Local to the selected zone(s), or Custom.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'

class range_options_3(Group):
    """
    Specifies whether you want the range to be Global, Local to the selected zone(s), or Custom.
    """
    _version = '251'
    fluent_name = 'range-options'
    _python_name = 'range_options'
    child_names = ['type', 'minimum', 'maximum']
    _child_classes = dict(
        type=type_11,
        minimum=minimum_3,
        maximum=maximum_3,
    )

class color_density(Real):
    """
    Provide volume to make volume uniformly thinner or thicker.
    """
    _version = '251'
    fluent_name = 'color-density'
    _python_name = 'color_density'

class cell_zones_9(StringList, AllowedValuesMixin):
    """
    The cell zone(s) used for volumetric results display.
    """
    _version = '251'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'

class home_options(Group):
    """
    Most commonly used set of options to manipulate the volume.
    """
    _version = '251'
    fluent_name = 'home-options'
    _python_name = 'home_options'
    child_names = ['field', 'data_source', 'range_options', 'color_density', 'color_map', 'cell_zones']
    _child_classes = dict(
        field=field_10,
        data_source=data_source,
        range_options=range_options_3,
        color_density=color_density,
        color_map=color_map,
        cell_zones=cell_zones_9,
    )

class use_home_tab_range(Boolean):
    """
    Provide whether to automatically use global/local/custom range provided in Home tab for transparency values.
    """
    _version = '251'
    fluent_name = 'use-home-tab-range?'
    _python_name = 'use_home_tab_range'

class active_2(Boolean):
    """
    Provide whether to enable or disable this row of options.
    """
    _version = '251'
    fluent_name = 'active?'
    _python_name = 'active'

class min_value_1(Real):
    """
    The minimum field value to use for transparency range.
    """
    _version = '251'
    fluent_name = 'min-value'
    _python_name = 'min_value'

class max_value_1(Real):
    """
    The maximum field value to use for transparency range.
    """
    _version = '251'
    fluent_name = 'max-value'
    _python_name = 'max_value'

class min_transparency_value(Real):
    """
    Provide min value for transparency range.
    """
    _version = '251'
    fluent_name = 'min-transparency-value'
    _python_name = 'min_transparency_value'

class max_transparency_value(Real):
    """
    Provide max value for transparency range.
    """
    _version = '251'
    fluent_name = 'max-transparency-value'
    _python_name = 'max_transparency_value'

class settings_30_child(Group):
    """
    'child_object_type' of settings.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'settings_child'
    child_names = ['active', 'min_value', 'max_value', 'min_transparency_value', 'max_transparency_value']
    _child_classes = dict(
        active=active_2,
        min_value=min_value_1,
        max_value=max_value_1,
        min_transparency_value=min_transparency_value,
        max_transparency_value=max_transparency_value,
    )

class settings_30(ListObject[settings_30_child]):
    """
    Provide custom transparency ranges and values for filtering.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = settings_30_child

class reset_2(Boolean):
    """
    Specifies whether to resets the values to precalculated default.
    """
    _version = '251'
    fluent_name = 'reset'
    _python_name = 'reset'

class invert(Boolean):
    """
    Wheter to invert the transparency range values in reverse order.
    """
    _version = '251'
    fluent_name = 'invert'
    _python_name = 'invert'

class transparency_options(Group):
    """
    Provide options for transparncy range(s) for focussing on specific portion of range values(s).
    """
    _version = '251'
    fluent_name = 'transparency-options'
    _python_name = 'transparency_options'
    child_names = ['use_home_tab_range', 'settings', 'reset', 'invert']
    _child_classes = dict(
        use_home_tab_range=use_home_tab_range,
        settings=settings_30,
        reset=reset_2,
        invert=invert,
    )

class hide_volume(Boolean):
    """
    Provide whether to hide volume to clearly see iso-values.
    """
    _version = '251'
    fluent_name = 'hide-volume?'
    _python_name = 'hide_volume'

class value_20(Real):
    """
    The domain value.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class transparency(Real):
    """
    Provide transparency value.
    """
    _version = '251'
    fluent_name = 'transparency'
    _python_name = 'transparency'

class color_7(IntegerList):
    """
    Provide red, green, blue values for defining the color.
    """
    _version = '251'
    fluent_name = 'color'
    _python_name = 'color'

class settings_31_child(Group):
    """
    'child_object_type' of settings.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'settings_child'
    child_names = ['active', 'value', 'transparency', 'color']
    _child_classes = dict(
        active=active_2,
        value=value_20,
        transparency=transparency,
        color=color_7,
    )

class settings_31(ListObject[settings_31_child]):
    """
    Provide options for isovalue(s) to highlight inside a volume.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = settings_31_child

class isovalue_options(Group):
    """
    Provide options for isovalue(s) to highlight inside a volume.
    """
    _version = '251'
    fluent_name = 'isovalue-options'
    _python_name = 'isovalue_options'
    child_names = ['hide_volume', 'settings', 'reset']
    _child_classes = dict(
        hide_volume=hide_volume,
        settings=settings_31,
        reset=reset_2,
    )

class selection_type(String, AllowedValuesMixin):
    """
    Provide whether to choose inside or outside of clip geometry.
    """
    _version = '251'
    fluent_name = 'selection-type'
    _python_name = 'selection_type'

class x_min(Real):
    """
    Provide x-coordinate for clip box's diagonal min point.
    """
    _version = '251'
    fluent_name = 'x-min'
    _python_name = 'x_min'

class y_min(Real):
    """
    Provide y-coordinate for clip box's diagonal min point.
    """
    _version = '251'
    fluent_name = 'y-min'
    _python_name = 'y_min'

class z_min(Real):
    """
    Provide z-coordinate for clip box's diagonal min point.
    """
    _version = '251'
    fluent_name = 'z-min'
    _python_name = 'z_min'

class x_max(Real):
    """
    Provide x-coordinate for clip box's diagonal max point.
    """
    _version = '251'
    fluent_name = 'x-max'
    _python_name = 'x_max'

class y_max(Real):
    """
    Provide y-coordinate for clip box's diagonal max point.
    """
    _version = '251'
    fluent_name = 'y-max'
    _python_name = 'y_max'

class z_max(Real):
    """
    Provide z-coordinate for clip box's diagonal max point.
    """
    _version = '251'
    fluent_name = 'z-max'
    _python_name = 'z_max'

class settings_32_child(Group):
    """
    'child_object_type' of settings.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'settings_child'
    child_names = ['active', 'x_min', 'y_min', 'z_min', 'x_max', 'y_max', 'z_max']
    _child_classes = dict(
        active=active_2,
        x_min=x_min,
        y_min=y_min,
        z_min=z_min,
        x_max=x_max,
        y_max=y_max,
        z_max=z_max,
    )

class settings_32(ListObject[settings_32_child]):
    """
    Provide clip box(es) attributes.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = settings_32_child

class clip_box_options(Group):
    """
    Provide clip box(es) options.
    """
    _version = '251'
    fluent_name = 'clip-box-options'
    _python_name = 'clip_box_options'
    child_names = ['selection_type', 'settings', 'reset']
    _child_classes = dict(
        selection_type=selection_type,
        settings=settings_32,
        reset=reset_2,
    )

class x_center(Real):
    """
    Provide x-coordinate for clip sphere's center.
    """
    _version = '251'
    fluent_name = 'x-center'
    _python_name = 'x_center'

class y_center(Real):
    """
    Provide y-coordinate for clip sphere's center.
    """
    _version = '251'
    fluent_name = 'y-center'
    _python_name = 'y_center'

class z_center(Real):
    """
    Provide z coordinate for clip sphere's center.
    """
    _version = '251'
    fluent_name = 'z-center'
    _python_name = 'z_center'

class radius_4(Real):
    """
    Provide radius for clip sphere.
    """
    _version = '251'
    fluent_name = 'radius'
    _python_name = 'radius'

class settings_33_child(Group):
    """
    'child_object_type' of settings.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'settings_child'
    child_names = ['active', 'x_center', 'y_center', 'z_center', 'radius']
    _child_classes = dict(
        active=active_2,
        x_center=x_center,
        y_center=y_center,
        z_center=z_center,
        radius=radius_4,
    )

class settings_33(ListObject[settings_33_child]):
    """
    Provide clip sphere(s) attributes.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = settings_33_child

class clip_sphere_options(Group):
    """
    Provide clip sphere(s) options.
    """
    _version = '251'
    fluent_name = 'clip-sphere-options'
    _python_name = 'clip_sphere_options'
    child_names = ['selection_type', 'settings', 'reset']
    _child_classes = dict(
        selection_type=selection_type,
        settings=settings_33,
        reset=reset_2,
    )

class compute_node_count(Integer):
    """
    'compute_node_count' child.
    """
    _version = '251'
    fluent_name = 'compute-node-count'
    _python_name = 'compute_node_count'

class volumes_2_child(Group):
    """
    'child_object_type' of volumes.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'volumes_child'
    child_names = ['name', 'home_options', 'transparency_options', 'isovalue_options', 'clip_box_options', 'clip_sphere_options', 'compute_node_count']
    command_names = ['display']
    _child_classes = dict(
        name=name_17,
        home_options=home_options,
        transparency_options=transparency_options,
        isovalue_options=isovalue_options,
        clip_box_options=clip_box_options,
        clip_sphere_options=clip_sphere_options,
        compute_node_count=compute_node_count,
        display=display_3,
    )

class volumes_2(NamedObject[volumes_2_child], CreatableNamedObjectMixin[volumes_2_child]):
    """
    'volumes' child.
    """
    _version = '251'
    fluent_name = 'volumes'
    _python_name = 'volumes'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'display', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy_1,
        display=display_2,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = volumes_2_child
    _child_aliases = dict(
        copy=('make_a_copy', 'copy'),
    )

class auto_scale_2(Boolean):
    """
    Enable/disable auto-computation of range for contours.
    """
    _version = '251'
    fluent_name = 'auto-scale?'
    _python_name = 'auto_scale'

class clip_to_range_3(Boolean):
    """
    Enable/disable the clip to range option for filled contours.
    """
    _version = '251'
    fluent_name = 'clip-to-range?'
    _python_name = 'clip_to_range'

class surfaces_11(StringList, AllowedValuesMixin):
    """
    Surfaces to be contoured.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class filled_contours(Boolean):
    """
    Enable/disable the filled contour option.
    """
    _version = '251'
    fluent_name = 'filled-contours?'
    _python_name = 'filled_contours'

class global_range_2(Boolean):
    """
    Enable/disable the global range for contours option.
    """
    _version = '251'
    fluent_name = 'global-range?'
    _python_name = 'global_range'

class line_contours(Boolean):
    """
    Enable/disable the filled contour option.
    """
    _version = '251'
    fluent_name = 'line-contours?'
    _python_name = 'line_contours'

class log_scale_3(Boolean):
    """
    Enable/disable the use of a log scale.
    """
    _version = '251'
    fluent_name = 'log-scale?'
    _python_name = 'log_scale'

class n_contour(Integer):
    """
    The number of contour levels.
    """
    _version = '251'
    fluent_name = 'n-contour'
    _python_name = 'n_contour'

class node_values_3(Boolean):
    """
    Enable/disable the plot of node values.
    """
    _version = '251'
    fluent_name = 'node-values?'
    _python_name = 'node_values'

class render_mesh(Boolean):
    """
    Determine whether or not to render the mesh on top of contours, vectors, etc.
    """
    _version = '251'
    fluent_name = 'render-mesh?'
    _python_name = 'render_mesh'

class banded_coloring(Boolean):
    """
    Specifies whether contours should be colored in bands.
    """
    _version = '251'
    fluent_name = 'banded-coloring'
    _python_name = 'banded_coloring'

class number_of_bands_1(Integer):
    """
    The number of bands to be used for contours.
    """
    _version = '251'
    fluent_name = 'number-of-bands'
    _python_name = 'number_of_bands'

class coloring_2(Group):
    """
    Coloring option.
    """
    _version = '251'
    fluent_name = 'coloring'
    _python_name = 'coloring'
    child_names = ['banded_coloring', 'number_of_bands']
    _child_classes = dict(
        banded_coloring=banded_coloring,
        number_of_bands=number_of_bands_1,
    )

class contours(Group):
    """
    'contours' child.
    """
    _version = '251'
    fluent_name = 'contours'
    _python_name = 'contours'
    child_names = ['auto_scale', 'clip_to_range', 'surfaces', 'filled_contours', 'global_range', 'line_contours', 'log_scale', 'n_contour', 'node_values', 'render_mesh', 'coloring']
    _child_classes = dict(
        auto_scale=auto_scale_2,
        clip_to_range=clip_to_range_3,
        surfaces=surfaces_11,
        filled_contours=filled_contours,
        global_range=global_range_2,
        line_contours=line_contours,
        log_scale=log_scale_3,
        n_contour=n_contour,
        node_values=node_values_3,
        render_mesh=render_mesh,
        coloring=coloring_2,
    )

class display_7(Boolean):
    """
    Determine whether particle tracks will be displayed or only tracked.
    """
    _version = '251'
    fluent_name = 'display?'
    _python_name = 'display'

class history_filename(Filename, _OutputFile):
    """
    The name of the particle history file.
    """
    _version = '251'
    fluent_name = 'history-filename'
    _python_name = 'history_filename'

class report_default_variables(String):
    """
    The report variables to default.
    """
    _version = '251'
    fluent_name = 'report-default-variables'
    _python_name = 'report_default_variables'

class track_single_particle_stream_2(Integer):
    """
    The stream ID to be tracked.
    """
    _version = '251'
    fluent_name = 'track-single-particle-stream?'
    _python_name = 'track_single_particle_stream'

class arrow_scale_1(Real):
    """
    The scale factor for arrows drawn on particle tracks.
    """
    _version = '251'
    fluent_name = 'arrow-scale'
    _python_name = 'arrow_scale'

class arrow_space_2(Real):
    """
    The spacing factor for arrows drawn on particle tracks.
    """
    _version = '251'
    fluent_name = 'arrow-space'
    _python_name = 'arrow_space'

class coarsen_factor(Integer):
    """
    The particle tracks coarsening factor.
    """
    _version = '251'
    fluent_name = 'coarsen-factor'
    _python_name = 'coarsen_factor'

class line_width_3(Real):
    """
    The width for particle track.
    """
    _version = '251'
    fluent_name = 'line-width'
    _python_name = 'line_width'

class particle_tracks(Group):
    """
    'particle_tracks' child.
    """
    _version = '251'
    fluent_name = 'particle-tracks'
    _python_name = 'particle_tracks'
    child_names = ['display', 'history_filename', 'report_default_variables', 'track_single_particle_stream', 'arrow_scale', 'arrow_space', 'coarsen_factor', 'line_width']
    _child_classes = dict(
        display=display_7,
        history_filename=history_filename,
        report_default_variables=report_default_variables,
        track_single_particle_stream=track_single_particle_stream_2,
        arrow_scale=arrow_scale_1,
        arrow_space=arrow_space_2,
        coarsen_factor=coarsen_factor,
        line_width=line_width_3,
    )

class background(String):
    """
    The background (window) color.
    """
    _version = '251'
    fluent_name = 'background'
    _python_name = 'background'

class color_by_type(Boolean):
    """
    Determine whether to color meshes by type or by surface (ID).
    """
    _version = '251'
    fluent_name = 'color-by-type?'
    _python_name = 'color_by_type'

class foreground(String):
    """
    The foreground (text and window frame) color.
    """
    _version = '251'
    fluent_name = 'foreground'
    _python_name = 'foreground'

class only_list_case_boundaries(Boolean):
    """
    Only list the boundary types that are assigned in this case.
    """
    _version = '251'
    fluent_name = 'only-list-case-boundaries?'
    _python_name = 'only_list_case_boundaries'

class use_inherent_material_color(Boolean):
    """
    Use inherent material color for boundary zones.
    """
    _version = '251'
    fluent_name = 'use-inherent-material-color?'
    _python_name = 'use_inherent_material_color'

class type_name_child(Group):
    """
    'child_object_type' of type_name.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'type_name_child'
    child_names = ['color', 'material']
    _child_classes = dict(
        color=color_3,
        material=material_1,
    )

class type_name(NamedObject[type_name_child], CreatableNamedObjectMixin[type_name_child]):
    """
    'type_name' child.
    """
    _version = '251'
    fluent_name = 'type-name'
    _python_name = 'type_name'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = type_name_child

class reset_3(Command):
    """
    Reset colors and/or materials to the defaults.
    """
    _version = '251'
    fluent_name = 'reset?'
    _python_name = 'reset'

class by_type(Group):
    """
    'by_type' child.
    """
    _version = '251'
    fluent_name = 'by-type'
    _python_name = 'by_type'
    child_names = ['only_list_case_boundaries', 'use_inherent_material_color', 'type_name']
    command_names = ['reset']
    _child_classes = dict(
        only_list_case_boundaries=only_list_case_boundaries,
        use_inherent_material_color=use_inherent_material_color,
        type_name=type_name,
        reset=reset_3,
    )

class use_inherent_material_color_1(Boolean):
    """
    Use inherent material color for surfaces.
    """
    _version = '251'
    fluent_name = 'use-inherent-material-color?'
    _python_name = 'use_inherent_material_color'

class list_surfaces_by_color(Command):
    """
    List the surfaces by its color.
    """
    _version = '251'
    fluent_name = 'list-surfaces-by-color'
    _python_name = 'list_surfaces_by_color'

class list_surfaces_by_material(Command):
    """
    List the surfaces by its material.
    """
    _version = '251'
    fluent_name = 'list-surfaces-by-material'
    _python_name = 'list_surfaces_by_material'

class surface_names_1(StringList, AllowedValuesMixin):
    """
    The list of surfaces to set color and material.
    """
    _version = '251'
    fluent_name = 'surface-names'
    _python_name = 'surface_names'

class surfaces_12(Command):
    """
    Select the surface(s) to specify colors and/or materials.
    
    Parameters
    ----------
        surface_names : List
            The list of surfaces to set color and material.
        color : str
            'color' child.
        material : str
            'material' child.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'
    argument_names = ['surface_names', 'color', 'material']
    _child_classes = dict(
        surface_names=surface_names_1,
        color=color_3,
        material=material_1,
    )

class by_surface(Group):
    """
    'by_surface' child.
    """
    _version = '251'
    fluent_name = 'by-surface'
    _python_name = 'by_surface'
    child_names = ['use_inherent_material_color']
    command_names = ['reset', 'list_surfaces_by_color', 'list_surfaces_by_material', 'surfaces']
    _child_classes = dict(
        use_inherent_material_color=use_inherent_material_color_1,
        reset=reset_3,
        list_surfaces_by_color=list_surfaces_by_color,
        list_surfaces_by_material=list_surfaces_by_material,
        surfaces=surfaces_12,
    )

class far_field_faces(String):
    """
    The color of far field faces.
    """
    _version = '251'
    fluent_name = 'far-field-faces'
    _python_name = 'far_field_faces'

class inlet_faces(String):
    """
    The color of inlet faces.
    """
    _version = '251'
    fluent_name = 'inlet-faces'
    _python_name = 'inlet_faces'

class interior_faces(String):
    """
    The color of interior faces.
    """
    _version = '251'
    fluent_name = 'interior-faces'
    _python_name = 'interior_faces'

class internal_faces(String):
    """
    The color of internal interface faces.
    """
    _version = '251'
    fluent_name = 'internal-faces'
    _python_name = 'internal_faces'

class outlet_faces(String):
    """
    The color of outlet faces.
    """
    _version = '251'
    fluent_name = 'outlet-faces'
    _python_name = 'outlet_faces'

class overset_faces(String):
    """
    The color of overset faces.
    """
    _version = '251'
    fluent_name = 'overset-faces'
    _python_name = 'overset_faces'

class periodic_faces(String):
    """
    The color of periodic faces.
    """
    _version = '251'
    fluent_name = 'periodic-faces'
    _python_name = 'periodic_faces'

class rans_les_interface_faces(String):
    """
    The color of RANS/LES interface faces.
    """
    _version = '251'
    fluent_name = 'rans-les-interface-faces'
    _python_name = 'rans_les_interface_faces'

class symmetry_faces(String):
    """
    The color of symmetric faces.
    """
    _version = '251'
    fluent_name = 'symmetry-faces'
    _python_name = 'symmetry_faces'

class axis_faces(String):
    """
    The color of axisymmetric faces.
    """
    _version = '251'
    fluent_name = 'axis-faces'
    _python_name = 'axis_faces'

class free_surface_faces(String):
    """
    The color of free-surface faces.
    """
    _version = '251'
    fluent_name = 'free-surface-faces'
    _python_name = 'free_surface_faces'

class traction_faces(String):
    """
    The color of traction faces.
    """
    _version = '251'
    fluent_name = 'traction-faces'
    _python_name = 'traction_faces'

class wall_faces(String):
    """
    The color of wall faces.
    """
    _version = '251'
    fluent_name = 'wall-faces'
    _python_name = 'wall_faces'

class interface_faces(String):
    """
    The color of mesh interfaces.
    """
    _version = '251'
    fluent_name = 'interface-faces'
    _python_name = 'interface_faces'

class surface_7(String):
    """
    The color of surfaces.
    """
    _version = '251'
    fluent_name = 'surface'
    _python_name = 'surface'

class skip_label(Integer):
    """
    The number of labels to be skipped in the colopmap scale.
    """
    _version = '251'
    fluent_name = 'skip-label'
    _python_name = 'skip_label'

class automatic_skip(Boolean):
    """
    Determine whether to skip labels in the colopmap scale automatically.
    """
    _version = '251'
    fluent_name = 'automatic-skip?'
    _python_name = 'automatic_skip'

class reset_colors(Command):
    """
    Reset individual mesh surface colors to the defaults.
    """
    _version = '251'
    fluent_name = 'reset-colors'
    _python_name = 'reset_colors'

class list_colors(Command):
    """
    List available colors.
    """
    _version = '251'
    fluent_name = 'list-colors'
    _python_name = 'list_colors'

class colors(Group):
    """
    'colors' child.
    """
    _version = '251'
    fluent_name = 'colors'
    _python_name = 'colors'
    child_names = ['background', 'color_by_type', 'foreground', 'by_type', 'by_surface', 'far_field_faces', 'inlet_faces', 'interior_faces', 'internal_faces', 'outlet_faces', 'overset_faces', 'periodic_faces', 'rans_les_interface_faces', 'symmetry_faces', 'axis_faces', 'free_surface_faces', 'traction_faces', 'wall_faces', 'interface_faces', 'surface', 'skip_label', 'automatic_skip']
    command_names = ['reset_colors', 'list_colors']
    _child_classes = dict(
        background=background,
        color_by_type=color_by_type,
        foreground=foreground,
        by_type=by_type,
        by_surface=by_surface,
        far_field_faces=far_field_faces,
        inlet_faces=inlet_faces,
        interior_faces=interior_faces,
        internal_faces=internal_faces,
        outlet_faces=outlet_faces,
        overset_faces=overset_faces,
        periodic_faces=periodic_faces,
        rans_les_interface_faces=rans_les_interface_faces,
        symmetry_faces=symmetry_faces,
        axis_faces=axis_faces,
        free_surface_faces=free_surface_faces,
        traction_faces=traction_faces,
        wall_faces=wall_faces,
        interface_faces=interface_faces,
        surface=surface_7,
        skip_label=skip_label,
        automatic_skip=automatic_skip,
        reset_colors=reset_colors,
        list_colors=list_colors,
    )

class ambient_color(RealList):
    """
    The ambient light color for the scene.
    """
    _version = '251'
    fluent_name = 'ambient-color'
    _python_name = 'ambient_color'

class headlight_setting(String, AllowedValuesMixin):
    """
    'headlight_setting' child.
    """
    _version = '251'
    fluent_name = 'headlight-setting'
    _python_name = 'headlight_setting'

class lights_on(Boolean):
    """
    Turn all active lighting on/off.
    """
    _version = '251'
    fluent_name = 'lights-on?'
    _python_name = 'lights_on'

class lighting_interpolation(String, AllowedValuesMixin):
    """
    Lighting interpolation method.
    """
    _version = '251'
    fluent_name = 'lighting-interpolation'
    _python_name = 'lighting_interpolation'

class on(Boolean):
    """
    Turn the light on/off.
    """
    _version = '251'
    fluent_name = 'on?'
    _python_name = 'on'

class rgb(RealList):
    """
    Color (RGB components) of the light.
    """
    _version = '251'
    fluent_name = 'rgb'
    _python_name = 'rgb'

class direction_4(RealList):
    """
    Direction of the light.
    """
    _version = '251'
    fluent_name = 'direction'
    _python_name = 'direction'

class set_direction_from_view_vector(Command):
    """
    'set_direction_from_view_vector' command.
    """
    _version = '251'
    fluent_name = 'set-direction-from-view-vector'
    _python_name = 'set_direction_from_view_vector'

class lights_child(Group):
    """
    'child_object_type' of lights.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'lights_child'
    child_names = ['on', 'rgb', 'direction']
    command_names = ['set_direction_from_view_vector']
    _child_classes = dict(
        on=on,
        rgb=rgb,
        direction=direction_4,
        set_direction_from_view_vector=set_direction_from_view_vector,
    )

class lights(ListObject[lights_child]):
    """
    'lights' child.
    """
    _version = '251'
    fluent_name = 'lights'
    _python_name = 'lights'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = lights_child

class lighting(Group):
    """
    'lighting' child.
    """
    _version = '251'
    fluent_name = 'lighting'
    _python_name = 'lighting'
    child_names = ['ambient_color', 'headlight_setting', 'lights_on', 'lighting_interpolation', 'lights']
    _child_classes = dict(
        ambient_color=ambient_color,
        headlight_setting=headlight_setting,
        lights_on=lights_on,
        lighting_interpolation=lighting_interpolation,
        lights=lights,
    )

class raytracer_image(Boolean):
    """
    Enable advanced raytracing for hardcopy and preview.
    """
    _version = '251'
    fluent_name = 'raytracer-image?'
    _python_name = 'raytracer_image'

class color_mode(String, AllowedValuesMixin):
    """
    'color_mode' child.
    """
    _version = '251'
    fluent_name = 'color-mode'
    _python_name = 'color_mode'

class hardcopy_format(String, AllowedValuesMixin):
    """
    Hardcopy file format.
    """
    _version = '251'
    fluent_name = 'hardcopy-format'
    _python_name = 'hardcopy_format'

class hardcopy_options(String):
    """
    'hardcopy_options' child.
    """
    _version = '251'
    fluent_name = 'hardcopy-options'
    _python_name = 'hardcopy_options'

class window_dump_cmd(String):
    """
    'window_dump_cmd' child.
    """
    _version = '251'
    fluent_name = 'window-dump-cmd'
    _python_name = 'window_dump_cmd'

class post_format(String, AllowedValuesMixin):
    """
    Produce PostScript output for hardcopies.
    """
    _version = '251'
    fluent_name = 'post-format'
    _python_name = 'post_format'

class current_driver(Command):
    """
    'current_driver' command.
    """
    _version = '251'
    fluent_name = 'current-driver'
    _python_name = 'current_driver'

class driver_options(Group):
    """
    'driver_options' child.
    """
    _version = '251'
    fluent_name = 'driver-options'
    _python_name = 'driver_options'
    child_names = ['hardcopy_format', 'hardcopy_options', 'window_dump_cmd', 'post_format']
    command_names = ['current_driver']
    _child_classes = dict(
        hardcopy_format=hardcopy_format,
        hardcopy_options=hardcopy_options,
        window_dump_cmd=window_dump_cmd,
        post_format=post_format,
        current_driver=current_driver,
    )

class invert_background(Boolean):
    """
    'invert_background' child.
    """
    _version = '251'
    fluent_name = 'invert-background?'
    _python_name = 'invert_background'

class landscape(Boolean):
    """
    'landscape' child.
    """
    _version = '251'
    fluent_name = 'landscape?'
    _python_name = 'landscape'

class x_resolution(Integer):
    """
    'x_resolution' child.
    """
    _version = '251'
    fluent_name = 'x-resolution'
    _python_name = 'x_resolution'

class y_resolution(Integer):
    """
    'y_resolution' child.
    """
    _version = '251'
    fluent_name = 'y-resolution'
    _python_name = 'y_resolution'

class dpi(Integer):
    """
    'dpi' child.
    """
    _version = '251'
    fluent_name = 'dpi'
    _python_name = 'dpi'

class use_window_resolution(Boolean):
    """
    Use the currently active window's resolution for hardcopy (ignores the x-resolution and y-resolution in this case).
    """
    _version = '251'
    fluent_name = 'use-window-resolution?'
    _python_name = 'use_window_resolution'

class standard_resolution(String, AllowedValuesMixin):
    """
    From pre-defined resolution list.
    """
    _version = '251'
    fluent_name = 'standard-resolution'
    _python_name = 'standard_resolution'

class jpeg_hardcopy_quality(Integer):
    """
    0  : Saves lowest quality jpeg image, but with the least file size.
    100: Saves highest quality jpeg image, but with the maximum file size.
    """
    _version = '251'
    fluent_name = 'jpeg-hardcopy-quality'
    _python_name = 'jpeg_hardcopy_quality'

class invert_normals_for_avz(Boolean):
    """
    In some cases, images exported to AVZ appear dark and do not match the true colors seen in the graphics window display. Enable 'invert-normals-for-avz' if you experience this issue.
    """
    _version = '251'
    fluent_name = 'invert-normals-for-avz'
    _python_name = 'invert_normals_for_avz'

class preview(Command):
    """
    Display a preview image of a hardcopy.
    """
    _version = '251'
    fluent_name = 'preview'
    _python_name = 'preview'

class save_picture(Command):
    """
    'save_picture' command.
    """
    _version = '251'
    fluent_name = 'save-picture'
    _python_name = 'save_picture'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_2,
    )

class list_color_mode(Command):
    """
    'list_color_mode' command.
    """
    _version = '251'
    fluent_name = 'list-color-mode'
    _python_name = 'list_color_mode'

class picture(Group):
    """
    The hardcopy/save-picture options object.
    """
    _version = '251'
    fluent_name = 'picture'
    _python_name = 'picture'
    child_names = ['raytracer_image', 'color_mode', 'driver_options', 'invert_background', 'landscape', 'x_resolution', 'y_resolution', 'dpi', 'use_window_resolution', 'standard_resolution', 'jpeg_hardcopy_quality', 'invert_normals_for_avz']
    command_names = ['preview', 'save_picture', 'list_color_mode']
    _child_classes = dict(
        raytracer_image=raytracer_image,
        color_mode=color_mode,
        driver_options=driver_options,
        invert_background=invert_background,
        landscape=landscape,
        x_resolution=x_resolution,
        y_resolution=y_resolution,
        dpi=dpi,
        use_window_resolution=use_window_resolution,
        standard_resolution=standard_resolution,
        jpeg_hardcopy_quality=jpeg_hardcopy_quality,
        invert_normals_for_avz=invert_normals_for_avz,
        preview=preview,
        save_picture=save_picture,
        list_color_mode=list_color_mode,
    )

class right(Real):
    """
    'right' child.
    """
    _version = '251'
    fluent_name = 'right'
    _python_name = 'right'

class up(Real):
    """
    'up' child.
    """
    _version = '251'
    fluent_name = 'up'
    _python_name = 'up'

class in_(Real):
    """
    'in' child.
    """
    _version = '251'
    fluent_name = 'in'
    _python_name = 'in_'

class dolly(Command):
    """
    Adjust the camera position and target.
    
    Parameters
    ----------
        right : real
            'right' child.
        up : real
            'up' child.
        in_ : real
            'in' child.
    """
    _version = '251'
    fluent_name = 'dolly'
    _python_name = 'dolly'
    argument_names = ['right', 'up', 'in_']
    _child_classes = dict(
        right=right,
        up=up,
        in_=in_,
    )

class width_2(Real):
    """
    'width' child.
    """
    _version = '251'
    fluent_name = 'width'
    _python_name = 'width'

class height(Real):
    """
    'height' child.
    """
    _version = '251'
    fluent_name = 'height'
    _python_name = 'height'

class field_11(Command):
    """
    Set the field of view (width and height).
    
    Parameters
    ----------
        width : real
            'width' child.
        height : real
            'height' child.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'
    argument_names = ['width', 'height']
    _child_classes = dict(
        width=width_2,
        height=height,
    )

class orbit(Command):
    """
    Adjust the camera position without modifying the target.
    
    Parameters
    ----------
        right : real
            'right' child.
        up : real
            'up' child.
    """
    _version = '251'
    fluent_name = 'orbit'
    _python_name = 'orbit'
    argument_names = ['right', 'up']
    _child_classes = dict(
        right=right,
        up=up,
    )

class pan(Command):
    """
    Adjust the camera position without modifying the position.
    
    Parameters
    ----------
        right : real
            'right' child.
        up : real
            'up' child.
    """
    _version = '251'
    fluent_name = 'pan'
    _python_name = 'pan'
    argument_names = ['right', 'up']
    _child_classes = dict(
        right=right,
        up=up,
    )

class xyz(RealList):
    """
    'xyz' child.
    """
    _version = '251'
    fluent_name = 'xyz'
    _python_name = 'xyz'

class position_1(Command):
    """
    Set the camera position.
    
    Parameters
    ----------
        xyz : List
            'xyz' child.
    """
    _version = '251'
    fluent_name = 'position'
    _python_name = 'position'
    argument_names = ['xyz']
    _child_classes = dict(
        xyz=xyz,
    )

class projection(Command):
    """
    Set the camera projection.
    
    Parameters
    ----------
        type : str
            'type' child.
    """
    _version = '251'
    fluent_name = 'projection'
    _python_name = 'projection'
    argument_names = ['type']
    _child_classes = dict(
        type=type_2,
    )

class counter_clockwise(Real):
    """
    'counter_clockwise' child.
    """
    _version = '251'
    fluent_name = 'counter-clockwise'
    _python_name = 'counter_clockwise'

class roll(Command):
    """
    Adjust the camera up-vector.
    
    Parameters
    ----------
        counter_clockwise : real
            'counter_clockwise' child.
    """
    _version = '251'
    fluent_name = 'roll'
    _python_name = 'roll'
    argument_names = ['counter_clockwise']
    _child_classes = dict(
        counter_clockwise=counter_clockwise,
    )

class target_1(Command):
    """
    Set the point to be the center of the camera view.
    
    Parameters
    ----------
        xyz : List
            'xyz' child.
    """
    _version = '251'
    fluent_name = 'target'
    _python_name = 'target'
    argument_names = ['xyz']
    _child_classes = dict(
        xyz=xyz,
    )

class up_vector(Command):
    """
    Set the camera up-vector.
    
    Parameters
    ----------
        xyz : List
            'xyz' child.
    """
    _version = '251'
    fluent_name = 'up-vector'
    _python_name = 'up_vector'
    argument_names = ['xyz']
    _child_classes = dict(
        xyz=xyz,
    )

class factor(Real):
    """
    'factor' child.
    """
    _version = '251'
    fluent_name = 'factor'
    _python_name = 'factor'

class zoom(Command):
    """
    Adjust the camera field of view.
    
    Parameters
    ----------
        factor : real
            'factor' child.
    """
    _version = '251'
    fluent_name = 'zoom'
    _python_name = 'zoom'
    argument_names = ['factor']
    _child_classes = dict(
        factor=factor,
    )

class camera(Group):
    """
    'camera' child.
    """
    _version = '251'
    fluent_name = 'camera'
    _python_name = 'camera'
    command_names = ['dolly', 'field', 'orbit', 'pan', 'position', 'projection', 'roll', 'target', 'up_vector', 'zoom']
    _child_classes = dict(
        dolly=dolly,
        field=field_11,
        orbit=orbit,
        pan=pan,
        position=position_1,
        projection=projection,
        roll=roll,
        target=target_1,
        up_vector=up_vector,
        zoom=zoom,
    )

class list_4(Command):
    """
    'list' command.
    """
    _version = '251'
    fluent_name = 'list'
    _python_name = 'list'

class state_name(String, AllowedValuesMixin):
    """
    'state_name' child.
    """
    _version = '251'
    fluent_name = 'state-name'
    _python_name = 'state_name'

class use_active(Command):
    """
    'use_active' command.
    """
    _version = '251'
    fluent_name = 'use-active'
    _python_name = 'use_active'
    argument_names = ['state_name']
    _child_classes = dict(
        state_name=state_name,
    )

class restore_state(Command):
    """
    Apply a display state to the active window.
    
    Parameters
    ----------
        state_name : str
            'state_name' child.
    """
    _version = '251'
    fluent_name = 'restore-state'
    _python_name = 'restore_state'
    argument_names = ['state_name']
    _child_classes = dict(
        state_name=state_name,
    )

class copy_4(Command):
    """
    Create a new display state with settings copied from an existing display state.
    
    Parameters
    ----------
        state_name : str
            'state_name' child.
    """
    _version = '251'
    fluent_name = 'copy'
    _python_name = 'copy'
    argument_names = ['state_name']
    _child_classes = dict(
        state_name=state_name,
    )

class read_3(Command):
    """
    Read display states from a file.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'read'
    _python_name = 'read'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class state_name_1(StringList, AllowedValuesMixin):
    """
    'state_name' child.
    """
    _version = '251'
    fluent_name = 'state-name'
    _python_name = 'state_name'

class write_2(Command):
    """
    Write display states to a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        state_name : List
            'state_name' child.
    """
    _version = '251'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['file_name', 'state_name']
    _child_classes = dict(
        file_name=file_name_2,
        state_name=state_name_1,
    )

class front_faces_transparent(String, AllowedValuesMixin):
    """
    'front_faces_transparent' child.
    """
    _version = '251'
    fluent_name = 'front-faces-transparent'
    _python_name = 'front_faces_transparent'

class projection_1(String, AllowedValuesMixin):
    """
    'projection' child.
    """
    _version = '251'
    fluent_name = 'projection'
    _python_name = 'projection'

class axes_2(String, AllowedValuesMixin):
    """
    'axes' child.
    """
    _version = '251'
    fluent_name = 'axes'
    _python_name = 'axes'

class ruler(String, AllowedValuesMixin):
    """
    'ruler' child.
    """
    _version = '251'
    fluent_name = 'ruler'
    _python_name = 'ruler'

class boundary_marker(String, AllowedValuesMixin):
    """
    'boundary_marker' child.
    """
    _version = '251'
    fluent_name = 'boundary-marker'
    _python_name = 'boundary_marker'

class anti_aliasing(String, AllowedValuesMixin):
    """
    'anti_aliasing' child.
    """
    _version = '251'
    fluent_name = 'anti-aliasing'
    _python_name = 'anti_aliasing'

class reflections(String, AllowedValuesMixin):
    """
    'reflections' child.
    """
    _version = '251'
    fluent_name = 'reflections'
    _python_name = 'reflections'

class static_shadows(String, AllowedValuesMixin):
    """
    'static_shadows' child.
    """
    _version = '251'
    fluent_name = 'static-shadows'
    _python_name = 'static_shadows'

class dynamic_shadows(String, AllowedValuesMixin):
    """
    'dynamic_shadows' child.
    """
    _version = '251'
    fluent_name = 'dynamic-shadows'
    _python_name = 'dynamic_shadows'

class grid_plane(String, AllowedValuesMixin):
    """
    'grid_plane' child.
    """
    _version = '251'
    fluent_name = 'grid-plane'
    _python_name = 'grid_plane'

class headlights(String, AllowedValuesMixin):
    """
    'headlights' child.
    """
    _version = '251'
    fluent_name = 'headlights'
    _python_name = 'headlights'

class lighting_1(String, AllowedValuesMixin):
    """
    'lighting' child.
    """
    _version = '251'
    fluent_name = 'lighting'
    _python_name = 'lighting'

class view_name(String, AllowedValuesMixin):
    """
    'view_name' child.
    """
    _version = '251'
    fluent_name = 'view-name'
    _python_name = 'view_name'

class display_states_child(Group):
    """
    'child_object_type' of display_states.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'display_states_child'
    child_names = ['name', 'front_faces_transparent', 'projection', 'axes', 'ruler', 'title', 'boundary_marker', 'anti_aliasing', 'reflections', 'static_shadows', 'dynamic_shadows', 'grid_plane', 'headlights', 'lighting', 'view_name']
    _child_classes = dict(
        name=name_2,
        front_faces_transparent=front_faces_transparent,
        projection=projection_1,
        axes=axes_2,
        ruler=ruler,
        title=title,
        boundary_marker=boundary_marker,
        anti_aliasing=anti_aliasing,
        reflections=reflections,
        static_shadows=static_shadows,
        dynamic_shadows=dynamic_shadows,
        grid_plane=grid_plane,
        headlights=headlights,
        lighting=lighting_1,
        view_name=view_name,
    )

class display_states(NamedObject[display_states_child], CreatableNamedObjectMixin[display_states_child]):
    """
    'display_states' child.
    """
    _version = '251'
    fluent_name = 'display-states'
    _python_name = 'display_states'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'use_active', 'restore_state', 'copy', 'read', 'write']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list_4,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        use_active=use_active,
        restore_state=restore_state,
        copy=copy_4,
        read=read_3,
        write=write_2,
    )
    child_object_type = display_states_child

class animation_option(String, AllowedValuesMixin):
    """
    Using Wireframe / All option during animation.
    """
    _version = '251'
    fluent_name = 'animation-option'
    _python_name = 'animation_option'

class auto_spin(Boolean):
    """
    Enable/disable mouse view rotations to continue to spin the display after the button is released.
    """
    _version = '251'
    fluent_name = 'auto-spin?'
    _python_name = 'auto_spin'

class color_map_alignment(String, AllowedValuesMixin):
    """
    The color bar alignment.
    """
    _version = '251'
    fluent_name = 'color-map-alignment'
    _python_name = 'color_map_alignment'

class double_buffering(Boolean):
    """
    Enable/disable double-buffering.
    """
    _version = '251'
    fluent_name = 'double-buffering?'
    _python_name = 'double_buffering'

class face_displacement(Real):
    """
    Face displacement value in Z-buffer units along the Camera Z-axis.
    """
    _version = '251'
    fluent_name = 'face-displacement'
    _python_name = 'face_displacement'

class hidden_surface_method(String, AllowedValuesMixin):
    """
    The method to perform hidden line and hidden surface rendering.
    """
    _version = '251'
    fluent_name = 'hidden-surface-method'
    _python_name = 'hidden_surface_method'

class hidden_surfaces(Boolean):
    """
    Enable/disable hidden surface removal.
    """
    _version = '251'
    fluent_name = 'hidden-surfaces?'
    _python_name = 'hidden_surfaces'

class front_faces_transparent_1(Boolean):
    """
    Make the front faces transparent.
    """
    _version = '251'
    fluent_name = 'front-faces-transparent?'
    _python_name = 'front_faces_transparent'

class show_colormap(Boolean):
    """
    Enable/Disable colormap.
    """
    _version = '251'
    fluent_name = 'show-colormap?'
    _python_name = 'show_colormap'

class device_info(Command):
    """
    List information for the graphics device.
    """
    _version = '251'
    fluent_name = 'device-info'
    _python_name = 'device_info'

class driver_name(String, AllowedValuesMixin):
    """
    'driver_name' child.
    """
    _version = '251'
    fluent_name = 'driver-name'
    _python_name = 'driver_name'

class driver(Command):
    """
    Change the current graphics driver.
    
    Parameters
    ----------
        driver_name : str
            'driver_name' child.
    """
    _version = '251'
    fluent_name = 'driver'
    _python_name = 'driver'
    argument_names = ['driver_name']
    _child_classes = dict(
        driver_name=driver_name,
    )

class set_rendering_options(Command):
    """
    Set the rendering options.
    """
    _version = '251'
    fluent_name = 'set-rendering-options'
    _python_name = 'set_rendering_options'

class rendering_options(Group):
    """
    'rendering_options' child.
    """
    _version = '251'
    fluent_name = 'rendering-options'
    _python_name = 'rendering_options'
    child_names = ['animation_option', 'auto_spin', 'color_map_alignment', 'double_buffering', 'face_displacement', 'hidden_surface_method', 'hidden_surfaces', 'front_faces_transparent', 'show_colormap']
    command_names = ['device_info', 'driver', 'set_rendering_options']
    _child_classes = dict(
        animation_option=animation_option,
        auto_spin=auto_spin,
        color_map_alignment=color_map_alignment,
        double_buffering=double_buffering,
        face_displacement=face_displacement,
        hidden_surface_method=hidden_surface_method,
        hidden_surfaces=hidden_surfaces,
        front_faces_transparent=front_faces_transparent_1,
        show_colormap=show_colormap,
        device_info=device_info,
        driver=driver,
        set_rendering_options=set_rendering_options,
    )

class coefficients_2(RealList):
    """
    The cofficients of X, Y and Z.
    """
    _version = '251'
    fluent_name = 'coefficients'
    _python_name = 'coefficients'

class distance(Real):
    """
    The distance of the plane from the origin.
    """
    _version = '251'
    fluent_name = 'distance'
    _python_name = 'distance'

class create_9(CommandWithPositionalArgs):
    """
    Define a mirror plane for a non-symmetric domain.
    
    Parameters
    ----------
        coefficients : List
            The cofficients of X, Y and Z.
        distance : real
            The distance of the plane from the origin.
    """
    _version = '251'
    fluent_name = 'create'
    _python_name = 'create'
    argument_names = ['coefficients', 'distance']
    _child_classes = dict(
        coefficients=coefficients_2,
        distance=distance,
    )

class plane_coefficients(RealList):
    """
    The cofficients of X, Y and Z.
    """
    _version = '251'
    fluent_name = 'plane-coefficients'
    _python_name = 'plane_coefficients'

class visible_1(Boolean):
    """
    Know whether plane is diplayed or not.
    """
    _version = '251'
    fluent_name = 'visible?'
    _python_name = 'visible'

class mirror_planes_child(Group):
    """
    'child_object_type' of mirror_planes.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'mirror_planes_child'
    child_names = ['plane_coefficients', 'distance', 'visible']
    _child_classes = dict(
        plane_coefficients=plane_coefficients,
        distance=distance,
        visible=visible_1,
    )

class mirror_planes(NamedObject[mirror_planes_child], CreatableNamedObjectMixin[mirror_planes_child]):
    """
    The mirror planes options object.
    """
    _version = '251'
    fluent_name = 'mirror-planes'
    _python_name = 'mirror_planes'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_9,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = mirror_planes_child

class mirror_zones(StringList, AllowedValuesMixin):
    """
    Zones to mirror the domain about.
    """
    _version = '251'
    fluent_name = 'mirror-zones'
    _python_name = 'mirror_zones'

class auto_scale_3(Command):
    """
    'auto_scale' command.
    """
    _version = '251'
    fluent_name = 'auto-scale'
    _python_name = 'auto_scale'

class reset_to_default_view(Command):
    """
    Reset view to front and center.
    """
    _version = '251'
    fluent_name = 'reset-to-default-view'
    _python_name = 'reset_to_default_view'

class delete_view(Command):
    """
    Remove a view from the list.
    
    Parameters
    ----------
        view_name : str
            'view_name' child.
    """
    _version = '251'
    fluent_name = 'delete-view'
    _python_name = 'delete_view'
    argument_names = ['view_name']
    _child_classes = dict(
        view_name=view_name,
    )

class last_view(Command):
    """
    Return to the camera position before the last manipulation.
    """
    _version = '251'
    fluent_name = 'last-view'
    _python_name = 'last_view'

class next_view(Command):
    """
    Return to the camera position after the current position in the stack.
    """
    _version = '251'
    fluent_name = 'next-view'
    _python_name = 'next_view'

class list_views(Command):
    """
    List predefined and saved views.
    """
    _version = '251'
    fluent_name = 'list-views'
    _python_name = 'list_views'

class restore_view(Command):
    """
    Use a saved view.
    
    Parameters
    ----------
        view_name : str
            'view_name' child.
    """
    _version = '251'
    fluent_name = 'restore-view'
    _python_name = 'restore_view'
    argument_names = ['view_name']
    _child_classes = dict(
        view_name=view_name,
    )

class read_views(Command):
    """
    Read views from a view file.
    
    Parameters
    ----------
        filename : str
            'filename' child.
    """
    _version = '251'
    fluent_name = 'read-views'
    _python_name = 'read_views'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_3,
    )

class view_name_1(String):
    """
    'view_name' child.
    """
    _version = '251'
    fluent_name = 'view-name'
    _python_name = 'view_name'

class save_view(Command):
    """
    Save the current view to the view list.
    
    Parameters
    ----------
        view_name : str
            'view_name' child.
    """
    _version = '251'
    fluent_name = 'save-view'
    _python_name = 'save_view'
    argument_names = ['view_name']
    _child_classes = dict(
        view_name=view_name_1,
    )

class view_list(StringList, AllowedValuesMixin):
    """
    'view_list' child.
    """
    _version = '251'
    fluent_name = 'view-list'
    _python_name = 'view_list'

class write_views(Command):
    """
    Write selected views to a view file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        view_list : List
            'view_list' child.
    """
    _version = '251'
    fluent_name = 'write-views'
    _python_name = 'write_views'
    argument_names = ['file_name', 'view_list']
    _child_classes = dict(
        file_name=file_name_2,
        view_list=view_list,
    )

class mirror_planes_1(StringList, AllowedValuesMixin):
    """
    Apply selectd mirror planes.
    """
    _version = '251'
    fluent_name = 'mirror-planes'
    _python_name = 'mirror_planes'

class apply_mirror_planes(Command):
    """
    Apply mirror planes for a symmetric or non-symmetric domain.
    
    Parameters
    ----------
        mirror_planes : List
            Apply selectd mirror planes.
    """
    _version = '251'
    fluent_name = 'apply-mirror-planes'
    _python_name = 'apply_mirror_planes'
    argument_names = ['mirror_planes']
    _child_classes = dict(
        mirror_planes=mirror_planes_1,
    )

class get_current_mirror_planes(Query):
    """
    Get the list of applied mirror planes.
    """
    _version = '251'
    fluent_name = 'get-current-mirror-planes'
    _python_name = 'get_current_mirror_planes'

class views(Group):
    """
    'views' child.
    """
    _version = '251'
    fluent_name = 'views'
    _python_name = 'views'
    child_names = ['camera', 'display_states', 'rendering_options', 'mirror_planes', 'mirror_zones']
    command_names = ['auto_scale', 'reset_to_default_view', 'delete_view', 'last_view', 'next_view', 'list_views', 'restore_view', 'read_views', 'save_view', 'write_views', 'apply_mirror_planes']
    query_names = ['get_current_mirror_planes']
    _child_classes = dict(
        camera=camera,
        display_states=display_states,
        rendering_options=rendering_options,
        mirror_planes=mirror_planes,
        mirror_zones=mirror_zones,
        auto_scale=auto_scale_3,
        reset_to_default_view=reset_to_default_view,
        delete_view=delete_view,
        last_view=last_view,
        next_view=next_view,
        list_views=list_views,
        restore_view=restore_view,
        read_views=read_views,
        save_view=save_view,
        write_views=write_views,
        apply_mirror_planes=apply_mirror_planes,
        get_current_mirror_planes=get_current_mirror_planes,
    )

class border(Boolean):
    """
    Enable/disable drawing of a border around the axes window.
    """
    _version = '251'
    fluent_name = 'border?'
    _python_name = 'border'

class bottom(Real):
    """
    The bottom boundary of the axes window.
    """
    _version = '251'
    fluent_name = 'bottom'
    _python_name = 'bottom'

class clear_1(Boolean):
    """
    The transparency of the axes window.
    """
    _version = '251'
    fluent_name = 'clear?'
    _python_name = 'clear'

class left(Real):
    """
    The left boundary of the axes window.
    """
    _version = '251'
    fluent_name = 'left'
    _python_name = 'left'

class right_1(Real):
    """
    The right boundary of the axes window.
    """
    _version = '251'
    fluent_name = 'right'
    _python_name = 'right'

class top(Real):
    """
    The top boundary of the axes window.
    """
    _version = '251'
    fluent_name = 'top'
    _python_name = 'top'

class visible_2(Boolean):
    """
    Enable/disable axes visibility.
    """
    _version = '251'
    fluent_name = 'visible?'
    _python_name = 'visible'

class axes_3(Group):
    """
    The axes window options object.
    """
    _version = '251'
    fluent_name = 'axes'
    _python_name = 'axes'
    child_names = ['border', 'bottom', 'clear', 'left', 'right', 'top', 'visible']
    _child_classes = dict(
        border=border,
        bottom=bottom,
        clear=clear_1,
        left=left,
        right=right_1,
        top=top,
        visible=visible_2,
    )

class border_1(Boolean):
    """
    Enable/disable drawing of borders around the main viewing window.
    """
    _version = '251'
    fluent_name = 'border?'
    _python_name = 'border'

class bottom_1(Real):
    """
    The bottom boundary of the main viewing window.
    """
    _version = '251'
    fluent_name = 'bottom'
    _python_name = 'bottom'

class left_1(Real):
    """
    The left boundary of the main viewing window.
    """
    _version = '251'
    fluent_name = 'left'
    _python_name = 'left'

class right_2(Real):
    """
    The right boundary of the main viewing window.
    """
    _version = '251'
    fluent_name = 'right'
    _python_name = 'right'

class top_1(Real):
    """
    The top boundary of the main viewing window.
    """
    _version = '251'
    fluent_name = 'top'
    _python_name = 'top'

class visible_3(Boolean):
    """
    Enable/disable visibility of the main viewing window.
    """
    _version = '251'
    fluent_name = 'visible?'
    _python_name = 'visible'

class main(Group):
    """
    The main view window options object.
    """
    _version = '251'
    fluent_name = 'main'
    _python_name = 'main'
    child_names = ['border', 'bottom', 'left', 'right', 'top', 'visible']
    _child_classes = dict(
        border=border_1,
        bottom=bottom_1,
        left=left_1,
        right=right_2,
        top=top_1,
        visible=visible_3,
    )

class border_2(Boolean):
    """
    Enable/disable drawing of a border around the color scale window.
    """
    _version = '251'
    fluent_name = 'border?'
    _python_name = 'border'

class bottom_2(Real):
    """
    The bottom boundary of the color scale window.
    """
    _version = '251'
    fluent_name = 'bottom'
    _python_name = 'bottom'

class clear_2(Boolean):
    """
    The transparency of the scale window.
    """
    _version = '251'
    fluent_name = 'clear?'
    _python_name = 'clear'

class format_1(String):
    """
    The number format of the color scale window (e.g. %0.2e).
    """
    _version = '251'
    fluent_name = 'format'
    _python_name = 'format'

class font_size_1(Real):
    """
    The font size of the color scale window.
    """
    _version = '251'
    fluent_name = 'font-size'
    _python_name = 'font_size'

class left_2(Real):
    """
    The left boundary of the color scale window.
    """
    _version = '251'
    fluent_name = 'left'
    _python_name = 'left'

class margin(Real):
    """
    The margin of the color scale window.
    """
    _version = '251'
    fluent_name = 'margin'
    _python_name = 'margin'

class right_3(Real):
    """
    The right boundary of the color scale window.
    """
    _version = '251'
    fluent_name = 'right'
    _python_name = 'right'

class top_2(Real):
    """
    The top boundary of the color scale window.
    """
    _version = '251'
    fluent_name = 'top'
    _python_name = 'top'

class visible_4(Boolean):
    """
    Enable/disable visibility of the color scale window.
    """
    _version = '251'
    fluent_name = 'visible?'
    _python_name = 'visible'

class scale_8(Group):
    """
    The color scale window options object.
    """
    _version = '251'
    fluent_name = 'scale'
    _python_name = 'scale'
    child_names = ['border', 'bottom', 'clear', 'format', 'font_size', 'left', 'margin', 'right', 'top', 'visible']
    _child_classes = dict(
        border=border_2,
        bottom=bottom_2,
        clear=clear_2,
        format=format_1,
        font_size=font_size_1,
        left=left_2,
        margin=margin,
        right=right_3,
        top=top_2,
        visible=visible_4,
    )

class application(Boolean):
    """
    Show/hide the application name in the picture.
    """
    _version = '251'
    fluent_name = 'application?'
    _python_name = 'application'

class border_3(Boolean):
    """
    Enable/disable drawing of borders around text window.
    """
    _version = '251'
    fluent_name = 'border?'
    _python_name = 'border'

class bottom_3(Real):
    """
    The bottom boundary of the text window.
    """
    _version = '251'
    fluent_name = 'bottom'
    _python_name = 'bottom'

class clear_3(Boolean):
    """
    Enable/disable text window transparency.
    """
    _version = '251'
    fluent_name = 'clear?'
    _python_name = 'clear'

class company(Boolean):
    """
    Enable/disable the company name in the picture.
    """
    _version = '251'
    fluent_name = 'company?'
    _python_name = 'company'

class date(Boolean):
    """
    Enable/disable the date in the picture.
    """
    _version = '251'
    fluent_name = 'date?'
    _python_name = 'date'

class left_3(Real):
    """
    The left boundary of the text window.
    """
    _version = '251'
    fluent_name = 'left'
    _python_name = 'left'

class right_4(Real):
    """
    The right boundary of the text window.
    """
    _version = '251'
    fluent_name = 'right'
    _python_name = 'right'

class top_3(Real):
    """
    The top boundary of the text window.
    """
    _version = '251'
    fluent_name = 'top'
    _python_name = 'top'

class visible_5(Boolean):
    """
    Enable/disable text window transparency.
    """
    _version = '251'
    fluent_name = 'visible?'
    _python_name = 'visible'

class alignment(String, AllowedValuesMixin):
    """
    Align colormap with bottom/left/top/right.
    """
    _version = '251'
    fluent_name = 'alignment'
    _python_name = 'alignment'

class text_1(Group):
    """
    The text window options object.
    """
    _version = '251'
    fluent_name = 'text'
    _python_name = 'text'
    child_names = ['application', 'border', 'bottom', 'clear', 'company', 'date', 'left', 'right', 'top', 'visible', 'alignment']
    _child_classes = dict(
        application=application,
        border=border_3,
        bottom=bottom_3,
        clear=clear_3,
        company=company,
        date=date,
        left=left_3,
        right=right_4,
        top=top_3,
        visible=visible_5,
        alignment=alignment,
    )

class background_1(String):
    """
    The background color in the video picture.
    """
    _version = '251'
    fluent_name = 'background'
    _python_name = 'background'

class color_filter(String):
    """
    The color filter options for the picture.
    """
    _version = '251'
    fluent_name = 'color-filter'
    _python_name = 'color_filter'

class foreground_1(String):
    """
    The foreground color in the video picture.
    """
    _version = '251'
    fluent_name = 'foreground'
    _python_name = 'foreground'

class on_1(Boolean):
    """
    Enable/disable video picture settings.
    """
    _version = '251'
    fluent_name = 'on?'
    _python_name = 'on'

class width_3(Integer):
    """
    'width' child.
    """
    _version = '251'
    fluent_name = 'width'
    _python_name = 'width'

class height_1(Integer):
    """
    'height' child.
    """
    _version = '251'
    fluent_name = 'height'
    _python_name = 'height'

class margin_1(Integer):
    """
    'margin' child.
    """
    _version = '251'
    fluent_name = 'margin'
    _python_name = 'margin'

class pixel_size(Group):
    """
    'pixel_size' child.
    """
    _version = '251'
    fluent_name = 'pixel-size'
    _python_name = 'pixel_size'
    child_names = ['width', 'height', 'margin']
    _child_classes = dict(
        width=width_3,
        height=height_1,
        margin=margin_1,
    )

class video(Group):
    """
    The video window options object.
    """
    _version = '251'
    fluent_name = 'video'
    _python_name = 'video'
    child_names = ['background', 'color_filter', 'foreground', 'on', 'pixel_size']
    _child_classes = dict(
        background=background_1,
        color_filter=color_filter,
        foreground=foreground_1,
        on=on_1,
        pixel_size=pixel_size,
    )

class border_4(Boolean):
    """
    Enable/disable drawing of borders around the X-Y plotter window.
    """
    _version = '251'
    fluent_name = 'border?'
    _python_name = 'border'

class bottom_4(Real):
    """
    The bottom boundary of the X-Y plotter window.
    """
    _version = '251'
    fluent_name = 'bottom'
    _python_name = 'bottom'

class left_4(Real):
    """
    The left boundary of the X-Y plotter window.
    """
    _version = '251'
    fluent_name = 'left'
    _python_name = 'left'

class right_5(Real):
    """
    The right boundary of the X-Y plotter window.
    """
    _version = '251'
    fluent_name = 'right'
    _python_name = 'right'

class top_4(Real):
    """
    The top boundary of the X-Y plotter window.
    """
    _version = '251'
    fluent_name = 'top'
    _python_name = 'top'

class visible_6(Boolean):
    """
    Enable/disable X-Y plotter window visibility.
    """
    _version = '251'
    fluent_name = 'visible?'
    _python_name = 'visible'

class xy(Group):
    """
    The X-Y plot window options object.
    """
    _version = '251'
    fluent_name = 'xy'
    _python_name = 'xy'
    child_names = ['border', 'bottom', 'left', 'right', 'top', 'visible']
    _child_classes = dict(
        border=border_4,
        bottom=bottom_4,
        left=left_4,
        right=right_5,
        top=top_4,
        visible=visible_6,
    )

class logo(Boolean):
    """
    Enable/disable visibility of the logo in graphics window.
    """
    _version = '251'
    fluent_name = 'logo?'
    _python_name = 'logo'

class ruler_1(Boolean):
    """
    Enable/disable ruler visibility.
    """
    _version = '251'
    fluent_name = 'ruler?'
    _python_name = 'ruler'

class logo_color(String, AllowedValuesMixin):
    """
    Logo color to white/black.
    """
    _version = '251'
    fluent_name = 'logo-color'
    _python_name = 'logo_color'

class aspect_ratio(Command):
    """
    Set the aspect ratio of the active window.
    
    Parameters
    ----------
        width : real
            'width' child.
        height : real
            'height' child.
    """
    _version = '251'
    fluent_name = 'aspect-ratio'
    _python_name = 'aspect_ratio'
    argument_names = ['width', 'height']
    _child_classes = dict(
        width=width_2,
        height=height,
    )

class window_id_1(Integer):
    """
    'window_id' child.
    """
    _version = '251'
    fluent_name = 'window-id'
    _python_name = 'window_id'

class open_window(Command):
    """
    Open a user graphics window.
    
    Parameters
    ----------
        window_id : int
            'window_id' child.
    """
    _version = '251'
    fluent_name = 'open-window'
    _python_name = 'open_window'
    argument_names = ['window_id']
    _child_classes = dict(
        window_id=window_id_1,
    )

class set_window(Command):
    """
    Set a user graphics window to be the active window.
    
    Parameters
    ----------
        window_id : int
            'window_id' child.
    """
    _version = '251'
    fluent_name = 'set-window'
    _python_name = 'set_window'
    argument_names = ['window_id']
    _child_classes = dict(
        window_id=window_id_1,
    )

class window_name(String, AllowedValuesMixin):
    """
    'window_name' child.
    """
    _version = '251'
    fluent_name = 'window-name'
    _python_name = 'window_name'

class set_window_by_name(Command):
    """
    Set a reserved graphics window to be the active window by its name.
    
    Parameters
    ----------
        window_name : str
            'window_name' child.
    """
    _version = '251'
    fluent_name = 'set-window-by-name'
    _python_name = 'set_window_by_name'
    argument_names = ['window_name']
    _child_classes = dict(
        window_name=window_name,
    )

class close_window(Command):
    """
    Close a user graphics window.
    
    Parameters
    ----------
        window_id : int
            'window_id' child.
    """
    _version = '251'
    fluent_name = 'close-window'
    _python_name = 'close_window'
    argument_names = ['window_id']
    _child_classes = dict(
        window_id=window_id_1,
    )

class close_window_by_name(Command):
    """
    Close a reserved graphics window by its name.
    
    Parameters
    ----------
        window_name : str
            'window_name' child.
    """
    _version = '251'
    fluent_name = 'close-window-by-name'
    _python_name = 'close_window_by_name'
    argument_names = ['window_name']
    _child_classes = dict(
        window_name=window_name,
    )

class windows(Group):
    """
    'windows' child.
    """
    _version = '251'
    fluent_name = 'windows'
    _python_name = 'windows'
    child_names = ['axes', 'main', 'scale', 'text', 'video', 'xy', 'logo', 'ruler', 'logo_color']
    command_names = ['aspect_ratio', 'open_window', 'set_window', 'set_window_by_name', 'close_window', 'close_window_by_name']
    _child_classes = dict(
        axes=axes_3,
        main=main,
        scale=scale_8,
        text=text_1,
        video=video,
        xy=xy,
        logo=logo,
        ruler=ruler_1,
        logo_color=logo_color,
        aspect_ratio=aspect_ratio,
        open_window=open_window,
        set_window=set_window,
        set_window_by_name=set_window_by_name,
        close_window=close_window,
        close_window_by_name=close_window_by_name,
    )

class hide_environment_keep_effects(Boolean):
    """
    Specifies whether to hide the environment background while keeping the visual effects on the displayed object(s).
    """
    _version = '251'
    fluent_name = 'hide-environment-keep-effects?'
    _python_name = 'hide_environment_keep_effects'

class environment_image(String, AllowedValuesMixin):
    """
    A 3D environment for the advanced raytracing display.
    """
    _version = '251'
    fluent_name = 'environment-image'
    _python_name = 'environment_image'

class vertical(Integer):
    """
    Rotate the environment vertically by entering degrees of rotation.
    """
    _version = '251'
    fluent_name = 'vertical'
    _python_name = 'vertical'

class horizontal(Integer):
    """
    Rotate the environment horizontally by entering degrees of rotation.
    """
    _version = '251'
    fluent_name = 'horizontal'
    _python_name = 'horizontal'

class spin(Integer):
    """
    Spin/Rotate the environment along its view direction by entering degrees of rotation.
    """
    _version = '251'
    fluent_name = 'spin'
    _python_name = 'spin'

class env_color(IntegerList):
    """
    The color of the environment lighting.
    """
    _version = '251'
    fluent_name = 'env-color'
    _python_name = 'env_color'

class env_intensity(Integer):
    """
    The intensity of the environment lighting.
    """
    _version = '251'
    fluent_name = 'env-intensity'
    _python_name = 'env_intensity'

class view_zoom(Integer):
    """
    The field of view, which is how much of the environment is visible as a background.
    """
    _version = '251'
    fluent_name = 'view-zoom'
    _python_name = 'view_zoom'

class show_backplate(Boolean):
    """
    Specifies whether a backplate (image or color) is shown on top of the environment.
    """
    _version = '251'
    fluent_name = 'show-backplate?'
    _python_name = 'show_backplate'

class backplate_color(IntegerList):
    """
    The backplate color.
    """
    _version = '251'
    fluent_name = 'backplate-color'
    _python_name = 'backplate_color'

class backplate_image(String, AllowedValuesMixin):
    """
    The backplate image. This will override the backplate color unless the image is set to 'none'.
    """
    _version = '251'
    fluent_name = 'backplate-image'
    _python_name = 'backplate_image'

class env_light_upvec(RealList):
    """
    'env_light_upvec' child.
    """
    _version = '251'
    fluent_name = 'env-light-upvec'
    _python_name = 'env_light_upvec'

class env_light_dirvec(RealList):
    """
    'env_light_dirvec' child.
    """
    _version = '251'
    fluent_name = 'env-light-dirvec'
    _python_name = 'env_light_dirvec'

class activate_env_ground(Boolean):
    """
    Specifies whether the displayed object's location in the environment is fixed, so its location appears consistent as the object is rotated.
    """
    _version = '251'
    fluent_name = 'activate-env-ground?'
    _python_name = 'activate_env_ground'

class activate_env_ground_shadow(Boolean):
    """
    Specifies whether the displayed objects cast a shadow based on the environment lighting.
    """
    _version = '251'
    fluent_name = 'activate-env-ground-shadow?'
    _python_name = 'activate_env_ground_shadow'

class model_scale(Integer):
    """
    The model scale in %.
    """
    _version = '251'
    fluent_name = 'model-scale'
    _python_name = 'model_scale'

class env_light_ground_height(Integer):
    """
    The ground height. This is where the bottom of the environment will be projected and shadows cast.
    """
    _version = '251'
    fluent_name = 'env-light-ground-height'
    _python_name = 'env_light_ground_height'

class is_ground_shadow_at_fix_axis(Boolean):
    """
    Specifies whether to fix the shadow at specific axis and not the dynamically with environment rotation.
    """
    _version = '251'
    fluent_name = 'is-ground-shadow-at-fix-axis?'
    _python_name = 'is_ground_shadow_at_fix_axis'

class ground_shadow_axis(String, AllowedValuesMixin):
    """
    An axis where ground shadow will be displayed.
    """
    _version = '251'
    fluent_name = 'ground-shadow-axis'
    _python_name = 'ground_shadow_axis'

class background_2(Group):
    """
    Ability to adjust various settings and effects for the realistic raytracing environment background.
    """
    _version = '251'
    fluent_name = 'background'
    _python_name = 'background'
    child_names = ['hide_environment_keep_effects', 'environment_image', 'vertical', 'horizontal', 'spin', 'env_color', 'env_intensity', 'view_zoom', 'show_backplate', 'backplate_color', 'backplate_image', 'env_light_upvec', 'env_light_dirvec', 'activate_env_ground', 'activate_env_ground_shadow', 'model_scale', 'env_light_ground_height', 'is_ground_shadow_at_fix_axis', 'ground_shadow_axis']
    _child_classes = dict(
        hide_environment_keep_effects=hide_environment_keep_effects,
        environment_image=environment_image,
        vertical=vertical,
        horizontal=horizontal,
        spin=spin,
        env_color=env_color,
        env_intensity=env_intensity,
        view_zoom=view_zoom,
        show_backplate=show_backplate,
        backplate_color=backplate_color,
        backplate_image=backplate_image,
        env_light_upvec=env_light_upvec,
        env_light_dirvec=env_light_dirvec,
        activate_env_ground=activate_env_ground,
        activate_env_ground_shadow=activate_env_ground_shadow,
        model_scale=model_scale,
        env_light_ground_height=env_light_ground_height,
        is_ground_shadow_at_fix_axis=is_ground_shadow_at_fix_axis,
        ground_shadow_axis=ground_shadow_axis,
    )

class quality_1(String, AllowedValuesMixin):
    """
    The quality for raytracing. Higher quality leads to more refining of the raytraced image, which results in more time and memory consumption.
    """
    _version = '251'
    fluent_name = 'quality'
    _python_name = 'quality'

class denoiser(Boolean):
    """
    Denoiser is smart AI tech, where noise from rendering to get clear image at earler. It may lead to higher memory usage.
    """
    _version = '251'
    fluent_name = 'denoiser?'
    _python_name = 'denoiser'

class thread_count(Integer):
    """
    The number of CPU thread cores that can be used by the raytracer for rendering.
    """
    _version = '251'
    fluent_name = 'thread-count'
    _python_name = 'thread_count'

class max_rendering_timeout(Integer):
    """
    The maximum time [s] the raytracer can spend rendering the image to the specified quality before the image is captured.
    """
    _version = '251'
    fluent_name = 'max-rendering-timeout'
    _python_name = 'max_rendering_timeout'

class rendering(Group):
    """
    Ability to adjust raytracer rendering options.
    """
    _version = '251'
    fluent_name = 'rendering'
    _python_name = 'rendering'
    child_names = ['quality', 'denoiser', 'thread_count', 'max_rendering_timeout']
    _child_classes = dict(
        quality=quality_1,
        denoiser=denoiser,
        thread_count=thread_count,
        max_rendering_timeout=max_rendering_timeout,
    )

class display_live_preview(Command):
    """
    Display the raytracing rendering for the active window.
    """
    _version = '251'
    fluent_name = 'display-live-preview'
    _python_name = 'display_live_preview'

class raytracing_options(Group):
    """
    'raytracing_options' child.
    """
    _version = '251'
    fluent_name = 'raytracing-options'
    _python_name = 'raytracing_options'
    child_names = ['background', 'rendering']
    command_names = ['display_live_preview']
    _child_classes = dict(
        background=background_2,
        rendering=rendering,
        display_live_preview=display_live_preview,
    )

class pulse_mode(String, AllowedValuesMixin):
    """
    Pulse mode.
    """
    _version = '251'
    fluent_name = 'pulse-mode'
    _python_name = 'pulse_mode'

class write_format(String, AllowedValuesMixin):
    """
    'write_format' child.
    """
    _version = '251'
    fluent_name = 'write-format'
    _python_name = 'write_format'

class write_3(Command):
    """
    'write' command.
    """
    _version = '251'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['object_name', 'write_format', 'file_name']
    _child_classes = dict(
        object_name=object_name_1,
        write_format=write_format,
        file_name=file_name_13,
    )

class pulse(Group):
    """
    Save pathline/particle tracks pulse object.
    """
    _version = '251'
    fluent_name = 'pulse'
    _python_name = 'pulse'
    child_names = ['pulse_mode']
    command_names = ['write']
    _child_classes = dict(
        pulse_mode=pulse_mode,
        write=write_3,
    )

class clear_current_instances(Boolean):
    """
    Clear the current periodic instances.
    """
    _version = '251'
    fluent_name = 'clear-current-instances?'
    _python_name = 'clear_current_instances'

class detect_surfaces(Command):
    """
    Detect the surfaces for the periodic instance.
    
    Parameters
    ----------
        clear_current_instances : bool
            Clear the current periodic instances.
    """
    _version = '251'
    fluent_name = 'detect-surfaces'
    _python_name = 'detect_surfaces'
    argument_names = ['clear_current_instances']
    _child_classes = dict(
        clear_current_instances=clear_current_instances,
    )

class clear_repeats(Command):
    """
    Clear the periodic instance repeats.
    """
    _version = '251'
    fluent_name = 'clear-repeats'
    _python_name = 'clear_repeats'

class periodic_type(String, AllowedValuesMixin):
    """
    Either translational or rotational periodic type.
    """
    _version = '251'
    fluent_name = 'periodic-type'
    _python_name = 'periodic_type'

class surfaces_13(StringList, AllowedValuesMixin):
    """
    The list of surfaces for the periodic instance.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class translation(RealList):
    """
    X y z directional translation values.
    """
    _version = '251'
    fluent_name = 'translation'
    _python_name = 'translation'

class axis_origin_4(RealList):
    """
    Rotation axis origin values.
    """
    _version = '251'
    fluent_name = 'axis-origin'
    _python_name = 'axis_origin'

class axis_direction_4(RealList):
    """
    Rotation axis direction values.
    """
    _version = '251'
    fluent_name = 'axis-direction'
    _python_name = 'axis_direction'

class repeats(Integer):
    """
    The number of repeats for the periodic instance.
    """
    _version = '251'
    fluent_name = 'repeats'
    _python_name = 'repeats'

class repeats_in_360_degrees(Integer):
    """
    The number of repeats for the periodic instance.
    """
    _version = '251'
    fluent_name = 'repeats-in-360-degrees'
    _python_name = 'repeats_in_360_degrees'

class periodic_instances_child(Group):
    """
    'child_object_type' of periodic_instances.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'periodic_instances_child'
    child_names = ['name', 'periodic_type', 'surfaces', 'translation', 'axis_origin', 'axis_direction', 'angle', 'repeats', 'repeats_in_360_degrees']
    _child_classes = dict(
        name=name_2,
        periodic_type=periodic_type,
        surfaces=surfaces_13,
        translation=translation,
        axis_origin=axis_origin_4,
        axis_direction=axis_direction_4,
        angle=angle_3,
        repeats=repeats,
        repeats_in_360_degrees=repeats_in_360_degrees,
    )

class periodic_instances(NamedObject[periodic_instances_child], CreatableNamedObjectMixin[periodic_instances_child]):
    """
    Periodic instance objects are used to specify periodic repetition of surfaces.
    """
    _version = '251'
    fluent_name = 'periodic-instances'
    _python_name = 'periodic_instances'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'detect_surfaces', 'clear_repeats']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        detect_surfaces=detect_surfaces,
        clear_repeats=clear_repeats,
    )
    child_object_type = periodic_instances_child

class surface_names_2(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '251'
    fluent_name = 'surface-names'
    _python_name = 'surface_names'

class surface_mesh_1(Command):
    """
    Draw the mesh defined by the specified surfaces.
    
    Parameters
    ----------
        surface_names : List
            Surface.
    """
    _version = '251'
    fluent_name = 'surface-mesh'
    _python_name = 'surface_mesh'
    argument_names = ['surface_names']
    _child_classes = dict(
        surface_names=surface_names_2,
    )

class zone_mesh(Command):
    """
    Draw the mesh defined by specified face zones.
    
    Parameters
    ----------
        zone_names : List
            Zone name list.
    """
    _version = '251'
    fluent_name = 'zone-mesh'
    _python_name = 'zone_mesh'
    argument_names = ['zone_names']
    _child_classes = dict(
        zone_names=zone_names_4,
    )

class display_6(Group):
    """
    'display' child.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'
    command_names = ['surface_mesh', 'zone_mesh']
    _child_classes = dict(
        surface_mesh=surface_mesh_1,
        zone_mesh=zone_mesh,
    )

class graphics(Group, _ChildNamedObjectAccessorMixin):
    """
    'graphics' child.
    """
    _version = '251'
    fluent_name = 'graphics'
    _python_name = 'graphics'
    child_names = ['mesh', 'contour', 'vector', 'pathline', 'particle_track', 'lic', 'olic', 'volumes', 'contours', 'particle_tracks', 'colors', 'lighting', 'picture', 'views', 'windows', 'raytracing_options', 'pulse', 'periodic_instances', 'display']
    _child_classes = dict(
        mesh=mesh_2,
        contour=contour,
        vector=vector_1,
        pathline=pathline,
        particle_track=particle_track,
        lic=lic,
        olic=olic,
        volumes=volumes_2,
        contours=contours,
        particle_tracks=particle_tracks,
        colors=colors,
        lighting=lighting,
        picture=picture,
        views=views,
        windows=windows,
        raytracing_options=raytracing_options,
        pulse=pulse,
        periodic_instances=periodic_instances,
        display=display_6,
    )

class node_values_4(Boolean):
    """
    'node_values' child.
    """
    _version = '251'
    fluent_name = 'node-values?'
    _python_name = 'node_values'

class position_on_x_axis(Boolean):
    """
    'position_on_x_axis' child.
    """
    _version = '251'
    fluent_name = 'position-on-x-axis?'
    _python_name = 'position_on_x_axis'

class position_on_y_axis(Boolean):
    """
    'position_on_y_axis' child.
    """
    _version = '251'
    fluent_name = 'position-on-y-axis?'
    _python_name = 'position_on_y_axis'

class options_20(Group):
    """
    'options' child.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['node_values', 'position_on_x_axis', 'position_on_y_axis']
    _child_classes = dict(
        node_values=node_values_4,
        position_on_x_axis=position_on_x_axis,
        position_on_y_axis=position_on_y_axis,
    )

class y_axis_function(String, AllowedValuesMixin):
    """
    One of the coloring options.
    """
    _version = '251'
    fluent_name = 'y-axis-function'
    _python_name = 'y_axis_function'

class x_axis_function_1(String, AllowedValuesMixin):
    """
    One of the coloring options.
    """
    _version = '251'
    fluent_name = 'x-axis-function'
    _python_name = 'x_axis_function'

class x_component_1(Integer):
    """
    X-Component for Plot Direction.
    """
    _version = '251'
    fluent_name = 'x-component'
    _python_name = 'x_component'

class y_component_1(Integer):
    """
    Y-Component for Plot Direction.
    """
    _version = '251'
    fluent_name = 'y-component'
    _python_name = 'y_component'

class z_component_1(Integer):
    """
    Z-Component for Plot Direction.
    """
    _version = '251'
    fluent_name = 'z-component'
    _python_name = 'z_component'

class curve_length(String, AllowedValuesMixin):
    """
    Curve-length type.
    """
    _version = '251'
    fluent_name = 'curve-length'
    _python_name = 'curve_length'

class x_axis_direction(Group):
    """
    Specifies the Plot Direction.
    """
    _version = '251'
    fluent_name = 'x-axis-direction'
    _python_name = 'x_axis_direction'
    child_names = ['x_component', 'y_component', 'z_component', 'curve_length']
    _child_classes = dict(
        x_component=x_component_1,
        y_component=y_component_1,
        z_component=z_component_1,
        curve_length=curve_length,
    )

class x_axis_function_2(String, AllowedValuesMixin):
    """
    Selection for X Axis Field functions.
    """
    _version = '251'
    fluent_name = 'x-axis-function'
    _python_name = 'x_axis_function'

class x_axis_data(Group):
    """
    Options for X axis function.
    """
    _version = '251'
    fluent_name = 'x-axis-data'
    _python_name = 'x_axis_data'
    child_names = ['option', 'x_axis_direction', 'x_axis_function']
    _child_classes = dict(
        option=option_1,
        x_axis_direction=x_axis_direction,
        x_axis_function=x_axis_function_2,
    )

class y_axis_direction(Group):
    """
    Specifies the Plot Direction.
    """
    _version = '251'
    fluent_name = 'y-axis-direction'
    _python_name = 'y_axis_direction'
    child_names = ['x_component', 'y_component', 'z_component', 'curve_length']
    _child_classes = dict(
        x_component=x_component_1,
        y_component=y_component_1,
        z_component=z_component_1,
        curve_length=curve_length,
    )

class y_axis_function_1(String, AllowedValuesMixin):
    """
    Selection for Y Axis field Function.
    """
    _version = '251'
    fluent_name = 'y-axis-function'
    _python_name = 'y_axis_function'

class y_axis_data(Group):
    """
    Options for Y axis function.
    """
    _version = '251'
    fluent_name = 'y-axis-data'
    _python_name = 'y_axis_data'
    child_names = ['option', 'y_axis_direction', 'y_axis_function']
    _child_classes = dict(
        option=option_1,
        y_axis_direction=y_axis_direction,
        y_axis_function=y_axis_function_1,
    )

class node_values_5(Boolean):
    """
    Enable/Disable Node Values.
    """
    _version = '251'
    fluent_name = 'node-values?'
    _python_name = 'node_values'

class option_49(Group):
    """
    Options for XY-Plot.
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'
    child_names = ['node_values']
    _child_classes = dict(
        node_values=node_values_5,
    )

class x_component_2(Integer):
    """
    'x_component' child.
    """
    _version = '251'
    fluent_name = 'x-component'
    _python_name = 'x_component'

class y_component_2(Integer):
    """
    'y_component' child.
    """
    _version = '251'
    fluent_name = 'y-component'
    _python_name = 'y_component'

class z_component_2(Integer):
    """
    'z_component' child.
    """
    _version = '251'
    fluent_name = 'z-component'
    _python_name = 'z_component'

class direction_vector_1(Group):
    """
    'direction_vector' child.
    """
    _version = '251'
    fluent_name = 'direction-vector'
    _python_name = 'direction_vector'
    child_names = ['x_component', 'y_component', 'z_component']
    _child_classes = dict(
        x_component=x_component_2,
        y_component=y_component_2,
        z_component=z_component_2,
    )

class default(Boolean):
    """
    'default' child.
    """
    _version = '251'
    fluent_name = 'default'
    _python_name = 'default'

class reverse_2(Boolean):
    """
    'reverse' child.
    """
    _version = '251'
    fluent_name = 'reverse'
    _python_name = 'reverse'

class curve_length_1(Group):
    """
    'curve_length' child.
    """
    _version = '251'
    fluent_name = 'curve-length'
    _python_name = 'curve_length'
    child_names = ['option', 'default', 'reverse']
    _child_classes = dict(
        option=option_1,
        default=default,
        reverse=reverse_2,
    )

class plot_direction(Group):
    """
    'plot_direction' child.
    """
    _version = '251'
    fluent_name = 'plot-direction'
    _python_name = 'plot_direction'
    child_names = ['option', 'direction_vector', 'curve_length']
    _child_classes = dict(
        option=option_1,
        direction_vector=direction_vector_1,
        curve_length=curve_length_1,
    )

class display_8(Command):
    """
    Display the plot.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'

class filename_1_5(Filename, _OutputFile):
    """
    Type in the desired file name to save.
    """
    _version = '251'
    fluent_name = 'filename'
    _python_name = 'filename'

class write_to_file(Command):
    """
    Write data to a file.
    
    Parameters
    ----------
        filename_1 : str
            Type in the desired file name to save.
    """
    _version = '251'
    fluent_name = 'write-to-file'
    _python_name = 'write_to_file'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_1_5,
    )

class read_from_file(Command):
    """
    Read data from file.
    
    Parameters
    ----------
        filename : str
            File name.
    """
    _version = '251'
    fluent_name = 'read-from-file'
    _python_name = 'read_from_file'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_8,
    )

class file_data_list(StringList, AllowedValuesMixin):
    """
    File-data to delete.
    """
    _version = '251'
    fluent_name = 'file-data-list'
    _python_name = 'file_data_list'

class free_file_data(Command):
    """
    Free file-data.
    
    Parameters
    ----------
        file_data_list : List
            File-data to delete.
    """
    _version = '251'
    fluent_name = 'free-file-data'
    _python_name = 'free_file_data'
    argument_names = ['file_data_list']
    _child_classes = dict(
        file_data_list=file_data_list,
    )

class xy_plot_child(Group):
    """
    'child_object_type' of xy_plot.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'xy_plot_child'
    child_names = ['name', 'options', 'y_axis_function', 'x_axis_function', 'x_axis_data', 'y_axis_data', 'surfaces_list', 'option', 'plot_direction', 'physics', 'geometry', 'surfaces', 'axes', 'curves']
    command_names = ['display', 'write_to_file', 'read_from_file', 'free_file_data']
    _child_classes = dict(
        name=name_17,
        options=options_20,
        y_axis_function=y_axis_function,
        x_axis_function=x_axis_function_1,
        x_axis_data=x_axis_data,
        y_axis_data=y_axis_data,
        surfaces_list=surfaces_list,
        option=option_49,
        plot_direction=plot_direction,
        physics=physics_1,
        geometry=geometry_7,
        surfaces=surfaces_4,
        axes=axes_1,
        curves=curves_1,
        display=display_8,
        write_to_file=write_to_file,
        read_from_file=read_from_file,
        free_file_data=free_file_data,
    )

class xy_plot(NamedObject[xy_plot_child], CreatableNamedObjectMixin[xy_plot_child]):
    """
    'xy_plot' child.
    """
    _version = '251'
    fluent_name = 'xy-plot'
    _python_name = 'xy_plot'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'display', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy_1,
        display=display_2,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = xy_plot_child
    _child_aliases = dict(
        copy=('make_a_copy', 'copy'),
    )

class cell_function_1(String, AllowedValuesMixin):
    """
    The field to plot histogram.
    """
    _version = '251'
    fluent_name = 'cell-function'
    _python_name = 'cell_function'

class auto_range_4(Boolean):
    """
    Specifies whether to compute the range automatically.
    """
    _version = '251'
    fluent_name = 'auto-range?'
    _python_name = 'auto_range'

class minimum_7(Real):
    """
    The minimum value of the field variable to be plotted.
    """
    _version = '251'
    fluent_name = 'minimum'
    _python_name = 'minimum'

class maximum_6(Real):
    """
    The maximum value of the field variable to be plotted.
    """
    _version = '251'
    fluent_name = 'maximum'
    _python_name = 'maximum'

class num_divisions(Integer):
    """
    The number of divisions of the field variable to be plotted.
    """
    _version = '251'
    fluent_name = 'num-divisions'
    _python_name = 'num_divisions'

class print_4(Command):
    """
    Print a histogram of a scalar quantity.
    """
    _version = '251'
    fluent_name = 'print'
    _python_name = 'print'

class plot_6(Command):
    """
    Plot a histogram of a scalar quantity.
    """
    _version = '251'
    fluent_name = 'plot'
    _python_name = 'plot'

class write_4(Command):
    """
    Write a histogram of a scalar quantity to a file.
    
    Parameters
    ----------
        filename_1 : str
            The name you want the file saved with.
    """
    _version = '251'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_1_3,
    )

class get_values(Query):
    """
    Get a histogram of a scalar quantity.
    """
    _version = '251'
    fluent_name = 'get-values'
    _python_name = 'get_values'

class histogram(Group):
    """
    Provides access to create new and edit existing histogram plots.
    """
    _version = '251'
    fluent_name = 'histogram'
    _python_name = 'histogram'
    child_names = ['cell_function', 'auto_range', 'minimum', 'maximum', 'num_divisions', 'zones', 'axes', 'curves']
    command_names = ['print', 'plot', 'write']
    query_names = ['get_values']
    _child_classes = dict(
        cell_function=cell_function_1,
        auto_range=auto_range_4,
        minimum=minimum_7,
        maximum=maximum_6,
        num_divisions=num_divisions,
        zones=zones_3,
        axes=axes,
        curves=curves,
        print=print_4,
        plot=plot_6,
        write=write_4,
        get_values=get_values,
    )

class object_name_2(String, AllowedValuesMixin):
    """
    Object name.
    """
    _version = '251'
    fluent_name = 'object-name'
    _python_name = 'object_name'

class plot_7(Command):
    """
    Display cumulative-plot object.
    
    Parameters
    ----------
        object_name : str
            Object name.
    """
    _version = '251'
    fluent_name = 'plot'
    _python_name = 'plot'
    argument_names = ['object_name']
    _child_classes = dict(
        object_name=object_name_2,
    )

class object_name_3(String, AllowedValuesMixin):
    """
    Cumulative-plot object.
    """
    _version = '251'
    fluent_name = 'object-name'
    _python_name = 'object_name'

class file_name_14(Filename, _OutputFile):
    """
    The name you want the file saved with.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class write_5(Command):
    """
    Write the Cumulative Forces/Moments.
    
    Parameters
    ----------
        object_name : str
            Cumulative-plot object.
        file_name : str
            The name you want the file saved with.
    """
    _version = '251'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['object_name', 'file_name']
    _child_classes = dict(
        object_name=object_name_3,
        file_name=file_name_14,
    )

class split_direction(RealList):
    """
    'split_direction' child.
    """
    _version = '251'
    fluent_name = 'split-direction'
    _python_name = 'split_direction'

class number_of_divisions(Integer):
    """
    'number_of_divisions' child.
    """
    _version = '251'
    fluent_name = 'number-of-divisions'
    _python_name = 'number_of_divisions'

class force_direction(RealList):
    """
    'force_direction' child.
    """
    _version = '251'
    fluent_name = 'force-direction'
    _python_name = 'force_direction'

class moment_center(RealList):
    """
    'moment_center' child.
    """
    _version = '251'
    fluent_name = 'moment-center'
    _python_name = 'moment_center'

class moment_axis(RealList):
    """
    'moment_axis' child.
    """
    _version = '251'
    fluent_name = 'moment-axis'
    _python_name = 'moment_axis'

class x_axis_quantity(String, AllowedValuesMixin):
    """
    'x_axis_quantity' child.
    """
    _version = '251'
    fluent_name = 'x-axis-quantity'
    _python_name = 'x_axis_quantity'

class compute_from_stats(Boolean):
    """
    'compute_from_stats' child.
    """
    _version = '251'
    fluent_name = 'compute-from-stats'
    _python_name = 'compute_from_stats'

class plot_8(Command):
    """
    Plot the cumulative plot.
    """
    _version = '251'
    fluent_name = 'plot'
    _python_name = 'plot'

class write_to_file_1(Command):
    """
    Write the Cumulative Forces/Moments.
    
    Parameters
    ----------
        filename_1 : str
            The name you want the file saved with.
    """
    _version = '251'
    fluent_name = 'write-to-file'
    _python_name = 'write_to_file'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_1_3,
    )

class cumulative_plot_child(Group):
    """
    'child_object_type' of cumulative_plot.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'cumulative_plot_child'
    child_names = ['name', 'option', 'zones', 'physics', 'split_direction', 'number_of_divisions', 'force_direction', 'moment_center', 'moment_axis', 'x_axis_quantity', 'compute_from_stats', 'axes', 'curves']
    command_names = ['plot', 'write_to_file']
    _child_classes = dict(
        name=name_14,
        option=option_1,
        zones=zones_2,
        physics=physics_1,
        split_direction=split_direction,
        number_of_divisions=number_of_divisions,
        force_direction=force_direction,
        moment_center=moment_center,
        moment_axis=moment_axis,
        x_axis_quantity=x_axis_quantity,
        compute_from_stats=compute_from_stats,
        axes=axes,
        curves=curves,
        plot=plot_8,
        write_to_file=write_to_file_1,
    )

class cumulative_plot(NamedObject[cumulative_plot_child], CreatableNamedObjectMixin[cumulative_plot_child]):
    """
    Cumulative plots.
    """
    _version = '251'
    fluent_name = 'cumulative-plot'
    _python_name = 'cumulative_plot'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'plot', 'write']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        plot=plot_7,
        write=write_5,
    )
    child_object_type = cumulative_plot_child

class field_12(String, AllowedValuesMixin):
    """
    The field.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class node_values_6(Boolean):
    """
    Specifies whether to include node values.
    """
    _version = '251'
    fluent_name = 'node-values?'
    _python_name = 'node_values'

class zones_7(StringList, AllowedValuesMixin):
    """
    The cell zone(s).
    """
    _version = '251'
    fluent_name = 'zones'
    _python_name = 'zones'

class surfaces_14(StringList, AllowedValuesMixin):
    """
    The surface(s).
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class geometry_8(StringList, AllowedValuesMixin):
    """
    UTL Geometry.
    """
    _version = '251'
    fluent_name = 'geometry'
    _python_name = 'geometry'

class plot_9(Command):
    """
    Provides access to creating new and editing existing XY plots.
    """
    _version = '251'
    fluent_name = 'plot'
    _python_name = 'plot'

class write_6(Command):
    """
    Write solution to a file.
    
    Parameters
    ----------
        filename_1 : str
            The name you want the file saved with.
    """
    _version = '251'
    fluent_name = 'write'
    _python_name = 'write'
    argument_names = ['filename']
    _child_classes = dict(
        filename=filename_1_3,
    )

class solution_plot(Group):
    """
    Plot the solution data.
    """
    _version = '251'
    fluent_name = 'solution-plot'
    _python_name = 'solution_plot'
    child_names = ['field', 'node_values', 'zones', 'surfaces', 'geometry', 'axes', 'curves']
    command_names = ['plot', 'write']
    _child_classes = dict(
        field=field_12,
        node_values=node_values_6,
        zones=zones_7,
        surfaces=surfaces_14,
        geometry=geometry_8,
        axes=axes,
        curves=curves,
        plot=plot_9,
        write=write_6,
    )

class profile_5(String, AllowedValuesMixin):
    """
    Profile from profile list.
    """
    _version = '251'
    fluent_name = 'profile'
    _python_name = 'profile'

class y_axis_function_2(String, AllowedValuesMixin):
    """
    Y axis function.
    """
    _version = '251'
    fluent_name = 'y-axis-function'
    _python_name = 'y_axis_function'

class x_axis_function_3(String, AllowedValuesMixin):
    """
    X axis function.
    """
    _version = '251'
    fluent_name = 'x-axis-function'
    _python_name = 'x_axis_function'

class plot_10(Command):
    """
    Plot profile data.
    """
    _version = '251'
    fluent_name = 'plot'
    _python_name = 'plot'

class profile_data(Group):
    """
    Display profile data.
    """
    _version = '251'
    fluent_name = 'profile-data'
    _python_name = 'profile_data'
    child_names = ['profile', 'y_axis_function', 'x_axis_function', 'axes', 'curves']
    command_names = ['plot']
    _child_classes = dict(
        profile=profile_5,
        y_axis_function=y_axis_function_2,
        x_axis_function=x_axis_function_3,
        axes=axes,
        curves=curves,
        plot=plot_10,
    )

class zone_1(String, AllowedValuesMixin):
    """
    The zones.
    """
    _version = '251'
    fluent_name = 'zone'
    _python_name = 'zone'

class plot_11(Command):
    """
    Plot interpolated data.
    """
    _version = '251'
    fluent_name = 'plot'
    _python_name = 'plot'

class interpolated_data(Group):
    """
    Display interpolated data.
    """
    _version = '251'
    fluent_name = 'interpolated-data'
    _python_name = 'interpolated_data'
    child_names = ['zone', 'y_axis_function', 'x_axis_function', 'axes', 'curves']
    command_names = ['plot']
    _child_classes = dict(
        zone=zone_1,
        y_axis_function=y_axis_function_2,
        x_axis_function=x_axis_function_3,
        axes=axes,
        curves=curves,
        plot=plot_11,
    )

class plot_4(Group):
    """
    Provides access to creating new and editing existing plots (XY histograms and so on) of your computational results.
    """
    _version = '251'
    fluent_name = 'plot'
    _python_name = 'plot'
    child_names = ['xy_plot', 'histogram', 'cumulative_plot', 'solution_plot', 'profile_data', 'interpolated_data']
    _child_classes = dict(
        xy_plot=xy_plot,
        histogram=histogram,
        cumulative_plot=cumulative_plot,
        solution_plot=solution_plot,
        profile_data=profile_data,
        interpolated_data=interpolated_data,
    )

class title_1(String, AllowedValuesMixin):
    """
    The title to be displayed on the graphics window tab.
    """
    _version = '251'
    fluent_name = 'title'
    _python_name = 'title'

class temporary(Boolean):
    """
    Specifies whether object to be temporary or not.
    """
    _version = '251'
    fluent_name = 'temporary?'
    _python_name = 'temporary'

class transparency_1(Integer):
    """
    The transparency value.
    """
    _version = '251'
    fluent_name = 'transparency'
    _python_name = 'transparency'

class colormap_position(Integer):
    """
    'colormap_position' child.
    """
    _version = '251'
    fluent_name = 'colormap-position'
    _python_name = 'colormap_position'

class colormap_left(Real):
    """
    'colormap_left' child.
    """
    _version = '251'
    fluent_name = 'colormap-left'
    _python_name = 'colormap_left'

class colormap_bottom(Real):
    """
    'colormap_bottom' child.
    """
    _version = '251'
    fluent_name = 'colormap-bottom'
    _python_name = 'colormap_bottom'

class colormap_width(Real):
    """
    'colormap_width' child.
    """
    _version = '251'
    fluent_name = 'colormap-width'
    _python_name = 'colormap_width'

class colormap_height(Real):
    """
    'colormap_height' child.
    """
    _version = '251'
    fluent_name = 'colormap-height'
    _python_name = 'colormap_height'

class graphics_objects_child(Group):
    """
    'child_object_type' of graphics_objects.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'graphics_objects_child'
    child_names = ['name', 'transparency', 'colormap_position', 'colormap_left', 'colormap_bottom', 'colormap_width', 'colormap_height']
    _child_classes = dict(
        name=name_14,
        transparency=transparency_1,
        colormap_position=colormap_position,
        colormap_left=colormap_left,
        colormap_bottom=colormap_bottom,
        colormap_width=colormap_width,
        colormap_height=colormap_height,
    )

class graphics_objects(NamedObject[graphics_objects_child], CreatableNamedObjectMixin[graphics_objects_child]):
    """
    The graphics objects object.
    """
    _version = '251'
    fluent_name = 'graphics-objects'
    _python_name = 'graphics_objects'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'add']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list_1,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        add=add,
    )
    child_object_type = graphics_objects_child

class scene_child(Group):
    """
    'child_object_type' of scene.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'scene_child'
    child_names = ['name', 'title', 'temporary', 'graphics_objects', 'display_state_name']
    command_names = ['display']
    _child_classes = dict(
        name=name_17,
        title=title_1,
        temporary=temporary,
        graphics_objects=graphics_objects,
        display_state_name=display_state_name,
        display=display_3,
    )

class scene(NamedObject[scene_child], CreatableNamedObjectMixin[scene_child]):
    """
    'scene' child.
    """
    _version = '251'
    fluent_name = 'scene'
    _python_name = 'scene'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'display', 'add_to_graphics', 'clear_history']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy_1,
        display=display_2,
        add_to_graphics=add_to_graphics,
        clear_history=clear_history,
    )
    child_object_type = scene_child
    _child_aliases = dict(
        copy=('make_a_copy', 'copy'),
    )

class start_frame(Integer):
    """
    'start_frame' child.
    """
    _version = '251'
    fluent_name = 'start-frame'
    _python_name = 'start_frame'

class end_frame(Integer):
    """
    'end_frame' child.
    """
    _version = '251'
    fluent_name = 'end-frame'
    _python_name = 'end_frame'

class increment(Integer):
    """
    'increment' child.
    """
    _version = '251'
    fluent_name = 'increment'
    _python_name = 'increment'

class set_custom_frames(Group):
    """
    Custom frames start, end, skip frames for video export.
    """
    _version = '251'
    fluent_name = 'set-custom-frames'
    _python_name = 'set_custom_frames'
    child_names = ['start_frame', 'end_frame', 'increment']
    _child_classes = dict(
        start_frame=start_frame,
        end_frame=end_frame,
        increment=increment,
    )

class fps(Integer):
    """
    The Frame Per Sec(FPS) for exporting video file.
    """
    _version = '251'
    fluent_name = 'fps'
    _python_name = 'fps'

class format_2(String, AllowedValuesMixin):
    """
    Format for exporting video file.
    """
    _version = '251'
    fluent_name = 'format'
    _python_name = 'format'

class quality_2(String, AllowedValuesMixin):
    """
    Quality for exporting video file.
    """
    _version = '251'
    fluent_name = 'quality'
    _python_name = 'quality'

class name_22(String):
    """
    Exporting video file name.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class use_original_resolution(Boolean):
    """
    Enable original resolution.
    """
    _version = '251'
    fluent_name = 'use-original-resolution'
    _python_name = 'use_original_resolution'

class scale_9(String, AllowedValuesMixin):
    """
    Scale by which video resolution will expand.
    """
    _version = '251'
    fluent_name = 'scale'
    _python_name = 'scale'

class set_standard_resolution(String, AllowedValuesMixin):
    """
    From pre-defined resolution list.
    """
    _version = '251'
    fluent_name = 'set-standard-resolution'
    _python_name = 'set_standard_resolution'

class width_4(Integer):
    """
    The width for exporting video file.
    """
    _version = '251'
    fluent_name = 'width'
    _python_name = 'width'

class height_2(Integer):
    """
    The height for exporting video file.
    """
    _version = '251'
    fluent_name = 'height'
    _python_name = 'height'

class bitrate_scale(String, AllowedValuesMixin):
    """
    Mp4 bitrate scale - Best-64000 High-32000 Medium-16000 Low-8000.
    """
    _version = '251'
    fluent_name = 'bitrate-scale'
    _python_name = 'bitrate_scale'

class enable_h264(Boolean):
    """
    H264 encoding flag.
    """
    _version = '251'
    fluent_name = 'enable-h264'
    _python_name = 'enable_h264'

class bitrate(Integer):
    """
    Video bitrate(kbits/sec) for exporting video file.
    """
    _version = '251'
    fluent_name = 'bitrate'
    _python_name = 'bitrate'

class compression_method(String, AllowedValuesMixin):
    """
    Compression methode for Microsoft AVI movie.
    """
    _version = '251'
    fluent_name = 'compression-method'
    _python_name = 'compression_method'

class keyframe(Integer):
    """
    Video keyframe rate for exporting video file.
    """
    _version = '251'
    fluent_name = 'keyframe'
    _python_name = 'keyframe'

class advance_quality(Group):
    """
    Advance Quality setting.
    """
    _version = '251'
    fluent_name = 'advance-quality'
    _python_name = 'advance_quality'
    child_names = ['bitrate_scale', 'enable_h264', 'bitrate', 'compression_method', 'keyframe']
    _child_classes = dict(
        bitrate_scale=bitrate_scale,
        enable_h264=enable_h264,
        bitrate=bitrate,
        compression_method=compression_method,
        keyframe=keyframe,
    )

class video_1(Group):
    """
    'video' child.
    """
    _version = '251'
    fluent_name = 'video'
    _python_name = 'video'
    child_names = ['fps', 'format', 'quality', 'name', 'use_original_resolution', 'scale', 'set_standard_resolution', 'width', 'height', 'advance_quality']
    _child_classes = dict(
        fps=fps,
        format=format_2,
        quality=quality_2,
        name=name_22,
        use_original_resolution=use_original_resolution,
        scale=scale_9,
        set_standard_resolution=set_standard_resolution,
        width=width_4,
        height=height_2,
        advance_quality=advance_quality,
    )

class current_animation(String, AllowedValuesMixin):
    """
    Animation sequence to play.
    """
    _version = '251'
    fluent_name = 'current-animation'
    _python_name = 'current_animation'

class animation_file_name(Filename, _InputFile):
    """
    'animation_file_name' child.
    """
    _version = '251'
    fluent_name = 'animation-file-name'
    _python_name = 'animation_file_name'

class read_animation_file(Command):
    """
    Read new animation from file or already-defined animations.
    
    Parameters
    ----------
        animation_file_name : str
            'animation_file_name' child.
    """
    _version = '251'
    fluent_name = 'read-animation-file'
    _python_name = 'read_animation_file'
    argument_names = ['animation_file_name']
    _child_classes = dict(
        animation_file_name=animation_file_name,
    )

class format_name(String, AllowedValuesMixin):
    """
    'format_name' child.
    """
    _version = '251'
    fluent_name = 'format-name'
    _python_name = 'format_name'

class write_animation(Command):
    """
    Write animation sequence to the file.
    
    Parameters
    ----------
        format_name : str
            'format_name' child.
    """
    _version = '251'
    fluent_name = 'write-animation'
    _python_name = 'write_animation'
    argument_names = ['format_name']
    _child_classes = dict(
        format_name=format_name,
    )

class view_1(Boolean):
    """
    Yes: "Stored View", no: "Different View".
    """
    _version = '251'
    fluent_name = 'view?'
    _python_name = 'view'

class stored_view(Command):
    """
    Play the 3D animation sequence using the view stored in the sequence.
    
    Parameters
    ----------
        view : bool
            Yes: "Stored View", no: "Different View".
    """
    _version = '251'
    fluent_name = 'stored-view?'
    _python_name = 'stored_view'
    argument_names = ['view']
    _child_classes = dict(
        view=view_1,
    )

class delete_all_5(Boolean):
    """
    Yes: "Delete all animations", no: "Delete single animation.".
    """
    _version = '251'
    fluent_name = 'delete-all'
    _python_name = 'delete_all'

class name_23(String, AllowedValuesMixin):
    """
    Animation to delete.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class delete_6(CommandWithPositionalArgs):
    """
    Delete animation sequence.
    
    Parameters
    ----------
        delete_all : bool
            Yes: "Delete all animations", no: "Delete single animation.".
        name : str
            Animation to delete.
    """
    _version = '251'
    fluent_name = 'delete'
    _python_name = 'delete'
    argument_names = ['delete_all', 'name']
    _child_classes = dict(
        delete_all=delete_all_5,
        name=name_23,
    )

class player(String, AllowedValuesMixin):
    """
    The Player Operation.
    """
    _version = '251'
    fluent_name = 'player'
    _python_name = 'player'

class start_frame_1(Integer):
    """
    Start Frame Number.
    """
    _version = '251'
    fluent_name = 'start-frame'
    _python_name = 'start_frame'

class end_frame_1(Integer):
    """
    Start Frame Number.
    """
    _version = '251'
    fluent_name = 'end-frame'
    _python_name = 'end_frame'

class increment_1(Integer):
    """
    Skip frame while playing.
    """
    _version = '251'
    fluent_name = 'increment'
    _python_name = 'increment'

class playback_mode(String, AllowedValuesMixin):
    """
    The playback mode.
    """
    _version = '251'
    fluent_name = 'playback-mode'
    _python_name = 'playback_mode'

class speed_2(Integer):
    """
    Animation play speed.
    """
    _version = '251'
    fluent_name = 'speed'
    _python_name = 'speed'

class play(Command):
    """
    Play the selected animation.
    
    Parameters
    ----------
        player : str
            The Player Operation.
        start_frame : int
            Start Frame Number.
        end_frame : int
            Start Frame Number.
        increment : int
            Skip frame while playing.
        playback_mode : str
            The playback mode.
        speed : int
            Animation play speed.
    """
    _version = '251'
    fluent_name = 'play'
    _python_name = 'play'
    argument_names = ['player', 'start_frame', 'end_frame', 'increment', 'playback_mode', 'speed']
    _child_classes = dict(
        player=player,
        start_frame=start_frame_1,
        end_frame=end_frame_1,
        increment=increment_1,
        playback_mode=playback_mode,
        speed=speed_2,
    )

class playback(Group):
    """
    'playback' child.
    """
    _version = '251'
    fluent_name = 'playback'
    _python_name = 'playback'
    child_names = ['set_custom_frames', 'video', 'current_animation']
    command_names = ['read_animation_file', 'write_animation', 'stored_view', 'delete', 'play']
    _child_classes = dict(
        set_custom_frames=set_custom_frames,
        video=video_1,
        current_animation=current_animation,
        read_animation_file=read_animation_file,
        write_animation=write_animation,
        stored_view=stored_view,
        delete=delete_6,
        play=play,
    )

class start_keyframe(Integer):
    """
    Start keyframe.
    """
    _version = '251'
    fluent_name = 'start-keyframe'
    _python_name = 'start_keyframe'

class end_keyframe(Integer):
    """
    End keyframe.
    """
    _version = '251'
    fluent_name = 'end-keyframe'
    _python_name = 'end_keyframe'

class increment_2(Integer):
    """
    Increment.
    """
    _version = '251'
    fluent_name = 'increment'
    _python_name = 'increment'

class set_custom_frames_1(Group):
    """
    Custom frames start, end, skip frames for video export.
    """
    _version = '251'
    fluent_name = 'set-custom-frames'
    _python_name = 'set_custom_frames'
    child_names = ['start_keyframe', 'end_keyframe', 'increment']
    _child_classes = dict(
        start_keyframe=start_keyframe,
        end_keyframe=end_keyframe,
        increment=increment_2,
    )

class read_animation(Command):
    """
    'read_animation' command.
    """
    _version = '251'
    fluent_name = 'read-animation'
    _python_name = 'read_animation'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class write_animation_1(Command):
    """
    Write keyframe Animation file.
    
    Parameters
    ----------
        format_name : str
            'format_name' child.
        file_name : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'write-animation'
    _python_name = 'write_animation'
    argument_names = ['format_name', 'file_name']
    _child_classes = dict(
        format_name=format_name,
        file_name=file_name_13,
    )

class key(Integer):
    """
    'key' child.
    """
    _version = '251'
    fluent_name = 'key'
    _python_name = 'key'

class add_keyframe(Command):
    """
    Add keyframe.
    
    Parameters
    ----------
        key : int
            'key' child.
    """
    _version = '251'
    fluent_name = 'add-keyframe'
    _python_name = 'add_keyframe'
    argument_names = ['key']
    _child_classes = dict(
        key=key,
    )

class key_1(Integer, AllowedValuesMixin):
    """
    'key' child.
    """
    _version = '251'
    fluent_name = 'key'
    _python_name = 'key'

class delete_keyframe(Command):
    """
    Delete a keyframe.
    
    Parameters
    ----------
        key : int
            'key' child.
    """
    _version = '251'
    fluent_name = 'delete-keyframe'
    _python_name = 'delete_keyframe'
    argument_names = ['key']
    _child_classes = dict(
        key=key_1,
    )

class delete_all_keyframes(Command):
    """
    Delete all keyframes.
    """
    _version = '251'
    fluent_name = 'delete-all-keyframes'
    _python_name = 'delete_all_keyframes'

class play_1(Command):
    """
    Play keyframe animation.
    
    Parameters
    ----------
        start_keyframe : int
            Start keyframe.
        end_keyframe : int
            End keyframe.
        increment : int
            Increment.
    """
    _version = '251'
    fluent_name = 'play'
    _python_name = 'play'
    argument_names = ['start_keyframe', 'end_keyframe', 'increment']
    _child_classes = dict(
        start_keyframe=start_keyframe,
        end_keyframe=end_keyframe,
        increment=increment_2,
    )

class scene_animation(Group):
    """
    Keyframe animation option object.
    """
    _version = '251'
    fluent_name = 'scene-animation'
    _python_name = 'scene_animation'
    child_names = ['set_custom_frames']
    command_names = ['read_animation', 'write_animation', 'add_keyframe', 'delete_keyframe', 'delete_all_keyframes', 'play']
    _child_classes = dict(
        set_custom_frames=set_custom_frames_1,
        read_animation=read_animation,
        write_animation=write_animation_1,
        add_keyframe=add_keyframe,
        delete_keyframe=delete_keyframe,
        delete_all_keyframes=delete_all_keyframes,
        play=play_1,
    )

class animations(Group):
    """
    'animations' child.
    """
    _version = '251'
    fluent_name = 'animations'
    _python_name = 'animations'
    child_names = ['playback', 'scene_animation']
    _child_classes = dict(
        playback=playback,
        scene_animation=scene_animation,
    )

class list_simulation_reports(Command):
    """
    List all report names.
    """
    _version = '251'
    fluent_name = 'list-simulation-reports'
    _python_name = 'list_simulation_reports'

class add_histogram_to_report(Command):
    """
    Add a histogram to the current simulation report.
    """
    _version = '251'
    fluent_name = 'add-histogram-to-report'
    _python_name = 'add_histogram_to_report'

class report_name(String):
    """
    'report_name' child.
    """
    _version = '251'
    fluent_name = 'report-name'
    _python_name = 'report_name'

class generate_simulation_report(Command):
    """
    Generate a new simulation report or regenerate an existing simulation report with the provided name.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '251'
    fluent_name = 'generate-simulation-report'
    _python_name = 'generate_simulation_report'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )

class view_simulation_report(Command):
    """
    View a simulation report that has already been generated. In batch mode this will print the report's URL.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '251'
    fluent_name = 'view-simulation-report'
    _python_name = 'view_simulation_report'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )

class export_simulation_report_as_pdf(Command):
    """
    Export the provided simulation report as a PDF file.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
        file_name : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'export-simulation-report-as-pdf'
    _python_name = 'export_simulation_report_as_pdf'
    argument_names = ['report_name', 'file_name']
    _child_classes = dict(
        report_name=report_name,
        file_name=file_name_2,
    )

class output_dir(Filename, _OutputFile):
    """
    'output_dir' child.
    """
    _version = '251'
    fluent_name = 'output-dir'
    _python_name = 'output_dir'

class export_simulation_report_as_html(Command):
    """
    Export the provided simulation report as HTML.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
        output_dir : str
            'output_dir' child.
    """
    _version = '251'
    fluent_name = 'export-simulation-report-as-html'
    _python_name = 'export_simulation_report_as_html'
    argument_names = ['report_name', 'output_dir']
    _child_classes = dict(
        report_name=report_name,
        output_dir=output_dir,
    )

class export_simulation_report_as_pptx(Command):
    """
    Export the provided simulation report as a PPT file.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
        file_name : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'export-simulation-report-as-pptx'
    _python_name = 'export_simulation_report_as_pptx'
    argument_names = ['report_name', 'file_name']
    _child_classes = dict(
        report_name=report_name,
        file_name=file_name_2,
    )

class write_simulation_report_names_to_file(Command):
    """
    Write the list of currently generated report names to a txt file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'write-simulation-report-names-to-file'
    _python_name = 'write_simulation_report_names_to_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_2,
    )

class new_report_name(String):
    """
    'new_report_name' child.
    """
    _version = '251'
    fluent_name = 'new-report-name'
    _python_name = 'new_report_name'

class rename_simulation_report(Command):
    """
    Rename a report which has already been generated.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
        new_report_name : str
            'new_report_name' child.
    """
    _version = '251'
    fluent_name = 'rename-simulation-report'
    _python_name = 'rename_simulation_report'
    argument_names = ['report_name', 'new_report_name']
    _child_classes = dict(
        report_name=report_name,
        new_report_name=new_report_name,
    )

class duplicate_simulation_report(Command):
    """
    Duplicate a report and all of its settings to a new report.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '251'
    fluent_name = 'duplicate-simulation-report'
    _python_name = 'duplicate_simulation_report'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )

class reset_report_to_defaults(Command):
    """
    Reset all report settings to default for the provided simulation report.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '251'
    fluent_name = 'reset-report-to-defaults'
    _python_name = 'reset_report_to_defaults'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )

class delete_simulation_report(Command):
    """
    Delete the provided simulation report.
    
    Parameters
    ----------
        report_name : str
            'report_name' child.
    """
    _version = '251'
    fluent_name = 'delete-simulation-report'
    _python_name = 'delete_simulation_report'
    argument_names = ['report_name']
    _child_classes = dict(
        report_name=report_name,
    )

class write_simulation_report_template_file(Command):
    """
    Write a JSON template file with this case's Simulation Report settings.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'write-simulation-report-template-file'
    _python_name = 'write_simulation_report_template_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_2,
    )

class read_simulation_report_template_file(Command):
    """
    Read a JSON template file with existing Simulation Report settings.
    
    Parameters
    ----------
        file_name_1 : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'read-simulation-report-template-file'
    _python_name = 'read_simulation_report_template_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_1_3,
    )

class simulation_reports(Group):
    """
    'simulation_reports' child.
    """
    _version = '251'
    fluent_name = 'simulation-reports'
    _python_name = 'simulation_reports'
    command_names = ['list_simulation_reports', 'add_histogram_to_report', 'generate_simulation_report', 'view_simulation_report', 'export_simulation_report_as_pdf', 'export_simulation_report_as_html', 'export_simulation_report_as_pptx', 'write_simulation_report_names_to_file', 'rename_simulation_report', 'duplicate_simulation_report', 'reset_report_to_defaults', 'delete_simulation_report', 'write_simulation_report_template_file', 'read_simulation_report_template_file']
    _child_classes = dict(
        list_simulation_reports=list_simulation_reports,
        add_histogram_to_report=add_histogram_to_report,
        generate_simulation_report=generate_simulation_report,
        view_simulation_report=view_simulation_report,
        export_simulation_report_as_pdf=export_simulation_report_as_pdf,
        export_simulation_report_as_html=export_simulation_report_as_html,
        export_simulation_report_as_pptx=export_simulation_report_as_pptx,
        write_simulation_report_names_to_file=write_simulation_report_names_to_file,
        rename_simulation_report=rename_simulation_report,
        duplicate_simulation_report=duplicate_simulation_report,
        reset_report_to_defaults=reset_report_to_defaults,
        delete_simulation_report=delete_simulation_report,
        write_simulation_report_template_file=write_simulation_report_template_file,
        read_simulation_report_template_file=read_simulation_report_template_file,
    )

class auto_range_5(Boolean):
    """
    Automatically compute range of sampling variable for histogram plots.
    """
    _version = '251'
    fluent_name = 'auto-range?'
    _python_name = 'auto_range'

class correlation(Boolean):
    """
    Compute correlation of sampling variable with other variable.
    """
    _version = '251'
    fluent_name = 'correlation?'
    _python_name = 'correlation'

class cumulation_curve(Boolean):
    """
    Compute a cumulative curve for sampling variable or correlation variable when correlation? was specified.
    """
    _version = '251'
    fluent_name = 'cumulation-curve?'
    _python_name = 'cumulation_curve'

class diameter_statistics(Boolean):
    """
    Compute Rosin Rammler parameters, Sauter and other mean diameters.
    Requires specification of diameter as sampling variable.
    """
    _version = '251'
    fluent_name = 'diameter-statistics?'
    _python_name = 'diameter_statistics'

class histogram_mode(Boolean):
    """
    Use bars for histogram plot or xy-style.
    """
    _version = '251'
    fluent_name = 'histogram-mode?'
    _python_name = 'histogram_mode'

class percentage(Boolean):
    """
    Use percentages of bins to be computed.
    """
    _version = '251'
    fluent_name = 'percentage?'
    _python_name = 'percentage'

class variable_cubed(Boolean):
    """
    Use the cubic of the cumulation variable during computation of the cumulative curve.
    When the particle mass was not sampled, the diameter can be used instead.
    """
    _version = '251'
    fluent_name = 'variable-cubed?'
    _python_name = 'variable_cubed'

class logarithmic(Boolean):
    """
    Use logarithmic scaling on the abscissa (variable axis)? -- Will not work unless all values are positive.
    """
    _version = '251'
    fluent_name = 'logarithmic?'
    _python_name = 'logarithmic'

class weighting_1(Boolean):
    """
    Use weighting with additional variable when sorting data into samples.
    """
    _version = '251'
    fluent_name = 'weighting?'
    _python_name = 'weighting'

class histogram_options(Group):
    """
    The settings object.
    """
    _version = '251'
    fluent_name = 'histogram-options'
    _python_name = 'histogram_options'
    child_names = ['auto_range', 'correlation', 'cumulation_curve', 'diameter_statistics', 'histogram_mode', 'percentage', 'variable_cubed', 'logarithmic', 'weighting']
    _child_classes = dict(
        auto_range=auto_range_5,
        correlation=correlation,
        cumulation_curve=cumulation_curve,
        diameter_statistics=diameter_statistics,
        histogram_mode=histogram_mode,
        percentage=percentage,
        variable_cubed=variable_cubed,
        logarithmic=logarithmic,
        weighting=weighting_1,
    )

class minimum_val(Real):
    """
    Mimimum value of x-axis variable for histogram plots.
    """
    _version = '251'
    fluent_name = 'minimum-val'
    _python_name = 'minimum_val'

class maximum_val(Real):
    """
    Maximum value of x-axis variable for histogram plots.
    """
    _version = '251'
    fluent_name = 'maximum-val'
    _python_name = 'maximum_val'

class number_of_bins(Integer):
    """
    The number of bins.
    """
    _version = '251'
    fluent_name = 'number-of-bins'
    _python_name = 'number_of_bins'

class histogram_parameters(Group):
    """
    The parameter object.
    """
    _version = '251'
    fluent_name = 'histogram-parameters'
    _python_name = 'histogram_parameters'
    child_names = ['minimum_val', 'maximum_val', 'number_of_bins']
    _child_classes = dict(
        minimum_val=minimum_val,
        maximum_val=maximum_val,
        number_of_bins=number_of_bins,
    )

class sample(String, AllowedValuesMixin):
    """
    'sample' child.
    """
    _version = '251'
    fluent_name = 'sample'
    _python_name = 'sample'

class variable_to_sample(String, AllowedValuesMixin):
    """
    'variable_to_sample' child.
    """
    _version = '251'
    fluent_name = 'variable-to-sample'
    _python_name = 'variable_to_sample'

class weighting_variable(String, AllowedValuesMixin):
    """
    'weighting_variable' child.
    """
    _version = '251'
    fluent_name = 'weighting-variable'
    _python_name = 'weighting_variable'

class correlation_variable(String, AllowedValuesMixin):
    """
    'correlation_variable' child.
    """
    _version = '251'
    fluent_name = 'correlation-variable'
    _python_name = 'correlation_variable'

class plot_sample(Command):
    """
    'plot_sample' command.
    """
    _version = '251'
    fluent_name = 'plot-sample'
    _python_name = 'plot_sample'
    argument_names = ['sample', 'variable_to_sample', 'weighting_variable', 'correlation_variable', 'file_name']
    _child_classes = dict(
        sample=sample,
        variable_to_sample=variable_to_sample,
        weighting_variable=weighting_variable,
        correlation_variable=correlation_variable,
        file_name=file_name_2,
    )

class write_sample(Command):
    """
    'write_sample' command.
    """
    _version = '251'
    fluent_name = 'write-sample'
    _python_name = 'write_sample'
    argument_names = ['sample', 'variable_to_sample', 'weighting_variable', 'correlation_variable', 'file_name']
    _child_classes = dict(
        sample=sample,
        variable_to_sample=variable_to_sample,
        weighting_variable=weighting_variable,
        correlation_variable=correlation_variable,
        file_name=file_name_2,
    )

class plot_write_sample(Group):
    """
    'plot_write_sample' child.
    """
    _version = '251'
    fluent_name = 'plot-write-sample'
    _python_name = 'plot_write_sample'
    command_names = ['plot_sample', 'write_sample']
    _child_classes = dict(
        plot_sample=plot_sample,
        write_sample=write_sample,
    )

class use_weighting(Boolean):
    """
    'use_weighting' child.
    """
    _version = '251'
    fluent_name = 'use-weighting?'
    _python_name = 'use_weighting'

class make_steady_from_unsteady_file(Boolean):
    """
    Specifies whether the unsteady sample is to be reduced into a steady-state injection file.
    """
    _version = '251'
    fluent_name = 'make-steady-from-unsteady-file?'
    _python_name = 'make_steady_from_unsteady_file'

class change_curr_sample(Boolean):
    """
    'change_curr_sample' child.
    """
    _version = '251'
    fluent_name = 'change-curr-sample?'
    _python_name = 'change_curr_sample'

class weighting_variable_1(Command):
    """
    Choose the weighting variable for the averaging in each bin in the data reduction.
    
    Parameters
    ----------
        change_curr_sample : bool
            'change_curr_sample' child.
        sample : str
            'sample' child.
    """
    _version = '251'
    fluent_name = 'weighting-variable'
    _python_name = 'weighting_variable'
    argument_names = ['change_curr_sample', 'sample']
    _child_classes = dict(
        change_curr_sample=change_curr_sample,
        sample=sample,
    )

class sample_var(String, AllowedValuesMixin):
    """
    'sample_var' child.
    """
    _version = '251'
    fluent_name = 'sample-var'
    _python_name = 'sample_var'

class reset_range(Boolean):
    """
    'reset_range' child.
    """
    _version = '251'
    fluent_name = 'reset-range?'
    _python_name = 'reset_range'

class reset_min_and_max(Command):
    """
    Reset the min and max values of the range to be considered for a specific variable in the data reduction.
    
    Parameters
    ----------
        sample_var : str
            'sample_var' child.
        reset_range : bool
            'reset_range' child.
    """
    _version = '251'
    fluent_name = 'reset-min-and-max'
    _python_name = 'reset_min_and_max'
    argument_names = ['sample_var', 'reset_range']
    _child_classes = dict(
        sample_var=sample_var,
        reset_range=reset_range,
    )

class min_val(Real):
    """
    'min_val' child.
    """
    _version = '251'
    fluent_name = 'min-val'
    _python_name = 'min_val'

class set_minimum(Command):
    """
    Set the minimum value of the range to be considered for a specific variable in the data reduction.
    
    Parameters
    ----------
        sample_var : str
            'sample_var' child.
        min_val : real
            'min_val' child.
    """
    _version = '251'
    fluent_name = 'set-minimum'
    _python_name = 'set_minimum'
    argument_names = ['sample_var', 'min_val']
    _child_classes = dict(
        sample_var=sample_var,
        min_val=min_val,
    )

class max_val(Real):
    """
    'max_val' child.
    """
    _version = '251'
    fluent_name = 'max-val'
    _python_name = 'max_val'

class set_maximum(Command):
    """
    'set_maximum' command.
    """
    _version = '251'
    fluent_name = 'set-maximum'
    _python_name = 'set_maximum'
    argument_names = ['sample_var', 'max_val']
    _child_classes = dict(
        sample_var=sample_var,
        max_val=max_val,
    )

class enable_log(Boolean):
    """
    'enable_log' child.
    """
    _version = '251'
    fluent_name = 'enable-log?'
    _python_name = 'enable_log'

class use_logarithmic(Command):
    """
    Switch on or off logarithmic scaling to be used for a specific variable in the data reduction.
    
    Parameters
    ----------
        sample_var : str
            'sample_var' child.
        enable_log : bool
            'enable_log' child.
    """
    _version = '251'
    fluent_name = 'use-logarithmic?'
    _python_name = 'use_logarithmic'
    argument_names = ['sample_var', 'enable_log']
    _child_classes = dict(
        sample_var=sample_var,
        enable_log=enable_log,
    )

class num_bins(Integer):
    """
    'num_bins' child.
    """
    _version = '251'
    fluent_name = 'num-bins'
    _python_name = 'num_bins'

class number_of_bins_1(Command):
    """
    Set the number of bins to be used for a specific variable in the data reduction.
    
    Parameters
    ----------
        sample_var : str
            'sample_var' child.
        num_bins : int
            'num_bins' child.
    """
    _version = '251'
    fluent_name = 'number-of-bins'
    _python_name = 'number_of_bins'
    argument_names = ['sample_var', 'num_bins']
    _child_classes = dict(
        sample_var=sample_var,
        num_bins=num_bins,
    )

class all_var_num_of_bins(Integer):
    """
    'all_var_num_of_bins' child.
    """
    _version = '251'
    fluent_name = 'all-var-num-of-bins'
    _python_name = 'all_var_num_of_bins'

class all_variables_number_of_bins(Command):
    """
    Set the number of bins to be used for ALL variables in the data reduction.
    
    Parameters
    ----------
        all_var_num_of_bins : int
            'all_var_num_of_bins' child.
    """
    _version = '251'
    fluent_name = 'all-variables-number-of-bins'
    _python_name = 'all_variables_number_of_bins'
    argument_names = ['all_var_num_of_bins']
    _child_classes = dict(
        all_var_num_of_bins=all_var_num_of_bins,
    )

class list_settings(Command):
    """
    List all user inputs for the sample picked for data reduction.
    """
    _version = '251'
    fluent_name = 'list-settings?'
    _python_name = 'list_settings'

class setup_reduction(Group):
    """
    Up the sample data reduction by specifying all relevant options and setting parameters as desired.
    """
    _version = '251'
    fluent_name = 'setup-reduction'
    _python_name = 'setup_reduction'
    child_names = ['use_weighting', 'make_steady_from_unsteady_file']
    command_names = ['weighting_variable', 'reset_min_and_max', 'set_minimum', 'set_maximum', 'use_logarithmic', 'number_of_bins', 'all_variables_number_of_bins', 'list_settings']
    _child_classes = dict(
        use_weighting=use_weighting,
        make_steady_from_unsteady_file=make_steady_from_unsteady_file,
        weighting_variable=weighting_variable_1,
        reset_min_and_max=reset_min_and_max,
        set_minimum=set_minimum,
        set_maximum=set_maximum,
        use_logarithmic=use_logarithmic,
        number_of_bins=number_of_bins_1,
        all_variables_number_of_bins=all_variables_number_of_bins,
        list_settings=list_settings,
    )

class pick_sample_to_reduce(Command):
    """
    Pick a sample for which to first set-up and then perform the data reduction.
    
    Parameters
    ----------
        change_curr_sample : bool
            'change_curr_sample' child.
        sample : str
            'sample' child.
    """
    _version = '251'
    fluent_name = 'pick-sample-to-reduce'
    _python_name = 'pick_sample_to_reduce'
    argument_names = ['change_curr_sample', 'sample']
    _child_classes = dict(
        change_curr_sample=change_curr_sample,
        sample=sample,
    )

class check_reduction_wt(Boolean):
    """
    'check_reduction_wt' child.
    """
    _version = '251'
    fluent_name = 'check-reduction-wt?'
    _python_name = 'check_reduction_wt'

class reduce_picked_sample(Command):
    """
    Reduce a sample after first picking it and setting up all data-reduction options and parameters.
    
    Parameters
    ----------
        check_reduction_wt : bool
            'check_reduction_wt' child.
        file_name : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'reduce-picked-sample'
    _python_name = 'reduce_picked_sample'
    argument_names = ['check_reduction_wt', 'file_name']
    _child_classes = dict(
        check_reduction_wt=check_reduction_wt,
        file_name=file_name_2,
    )

class reduction(Group):
    """
    'reduction' child.
    """
    _version = '251'
    fluent_name = 'reduction'
    _python_name = 'reduction'
    child_names = ['setup_reduction']
    command_names = ['pick_sample_to_reduce', 'reduce_picked_sample']
    _child_classes = dict(
        setup_reduction=setup_reduction,
        pick_sample_to_reduce=pick_sample_to_reduce,
        reduce_picked_sample=reduce_picked_sample,
    )

class variable_2(String, AllowedValuesMixin):
    """
    'variable' child.
    """
    _version = '251'
    fluent_name = 'variable'
    _python_name = 'variable'

class compute_sample(Command):
    """
    Compute minimum/maximum of a sample variable.
    
    Parameters
    ----------
        sample : str
            'sample' child.
        variable : str
            'variable' child.
    """
    _version = '251'
    fluent_name = 'compute-sample'
    _python_name = 'compute_sample'
    argument_names = ['sample', 'variable']
    _child_classes = dict(
        sample=sample,
        variable=variable_2,
    )

class delete_sample(Command):
    """
    'delete_sample' command.
    """
    _version = '251'
    fluent_name = 'delete-sample'
    _python_name = 'delete_sample'
    argument_names = ['sample']
    _child_classes = dict(
        sample=sample,
    )

class list_samples(Command):
    """
    Show all samples in loaded sample list.
    """
    _version = '251'
    fluent_name = 'list-samples'
    _python_name = 'list_samples'

class sample_file(Filename, _InputFile):
    """
    The name of a sample file to be loaded.
    """
    _version = '251'
    fluent_name = 'sample-file'
    _python_name = 'sample_file'

class read_sample_file(Command):
    """
    Read a sample file and add it to the sample list.
    
    Parameters
    ----------
        sample_file : str
            The name of a sample file to be loaded.
    """
    _version = '251'
    fluent_name = 'read-sample-file'
    _python_name = 'read_sample_file'
    argument_names = ['sample_file']
    _child_classes = dict(
        sample_file=sample_file,
    )

class sample_name(String, AllowedValuesMixin):
    """
    'sample_name' child.
    """
    _version = '251'
    fluent_name = 'sample-name'
    _python_name = 'sample_name'

class interval_size(Real):
    """
    'interval_size' child.
    """
    _version = '251'
    fluent_name = 'interval-size'
    _python_name = 'interval_size'

class dpm_sample_contour_plots(Command):
    """
    Prepare named expressions from data in a DPM sample file (collected at a cut plane surface) for contour plotting.
    
    Parameters
    ----------
        sample_name : str
            'sample_name' child.
        interval_size : real
            'interval_size' child.
    """
    _version = '251'
    fluent_name = 'dpm-sample-contour-plots'
    _python_name = 'dpm_sample_contour_plots'
    argument_names = ['sample_name', 'interval_size']
    _child_classes = dict(
        sample_name=sample_name,
        interval_size=interval_size,
    )

class histogram_1(Group):
    """
    'histogram' child.
    """
    _version = '251'
    fluent_name = 'histogram'
    _python_name = 'histogram'
    child_names = ['histogram_options', 'histogram_parameters', 'plot_write_sample', 'reduction']
    command_names = ['compute_sample', 'delete_sample', 'list_samples', 'read_sample_file', 'dpm_sample_contour_plots']
    _child_classes = dict(
        histogram_options=histogram_options,
        histogram_parameters=histogram_parameters,
        plot_write_sample=plot_write_sample,
        reduction=reduction,
        compute_sample=compute_sample,
        delete_sample=delete_sample,
        list_samples=list_samples,
        read_sample_file=read_sample_file,
        dpm_sample_contour_plots=dpm_sample_contour_plots,
    )

class output_udf(String, AllowedValuesMixin):
    """
    The DPM sampling output UDF.
    """
    _version = '251'
    fluent_name = 'output-udf'
    _python_name = 'output_udf'

class sort_sample_files(Boolean):
    """
    Enable writing of sorted DPM sample files.
    """
    _version = '251'
    fluent_name = 'sort-sample-files'
    _python_name = 'sort_sample_files'

class injections_1(StringList, AllowedValuesMixin):
    """
    'injections' child.
    """
    _version = '251'
    fluent_name = 'injections'
    _python_name = 'injections'

class lines_1(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '251'
    fluent_name = 'lines'
    _python_name = 'lines'

class planes(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '251'
    fluent_name = 'planes'
    _python_name = 'planes'

class op_udf(String):
    """
    'op_udf' child.
    """
    _version = '251'
    fluent_name = 'op-udf'
    _python_name = 'op_udf'

class append_sample(Boolean):
    """
    'append_sample' child.
    """
    _version = '251'
    fluent_name = 'append-sample?'
    _python_name = 'append_sample'

class accumulate_rates(Boolean):
    """
    'accumulate_rates' child.
    """
    _version = '251'
    fluent_name = 'accumulate-rates?'
    _python_name = 'accumulate_rates'

class compute_9(Command):
    """
    'compute' command.
    """
    _version = '251'
    fluent_name = 'compute'
    _python_name = 'compute'
    argument_names = ['injections', 'boundaries', 'lines', 'planes', 'op_udf', 'append_sample', 'accumulate_rates']
    _child_classes = dict(
        injections=injections_1,
        boundaries=boundaries_1,
        lines=lines_1,
        planes=planes,
        op_udf=op_udf,
        append_sample=append_sample,
        accumulate_rates=accumulate_rates,
    )

class start_file_write(Command):
    """
    'start_file_write' command.
    """
    _version = '251'
    fluent_name = 'start-file-write'
    _python_name = 'start_file_write'
    argument_names = ['injections', 'boundaries', 'lines', 'planes', 'op_udf', 'append_sample', 'accumulate_rates']
    _child_classes = dict(
        injections=injections_1,
        boundaries=boundaries_1,
        lines=lines_1,
        planes=planes,
        op_udf=op_udf,
        append_sample=append_sample,
        accumulate_rates=accumulate_rates,
    )

class stop_file_write(Command):
    """
    'stop_file_write' command.
    """
    _version = '251'
    fluent_name = 'stop-file-write'
    _python_name = 'stop_file_write'

class sample_trajectories(Group):
    """
    'sample_trajectories' child.
    """
    _version = '251'
    fluent_name = 'sample-trajectories'
    _python_name = 'sample_trajectories'
    child_names = ['output_udf', 'sort_sample_files']
    command_names = ['compute', 'start_file_write', 'stop_file_write']
    _child_classes = dict(
        output_udf=output_udf,
        sort_sample_files=sort_sample_files,
        compute=compute_9,
        start_file_write=start_file_write,
        stop_file_write=stop_file_write,
    )
    _child_aliases = dict(
        user_defined_functions=('output_udf', 'user-defined-functions'),
    )

class zone_types_to_calc_exchange_data_on(String, AllowedValuesMixin):
    """
    Whether, and for which zone types (Lagr. wall film or cell zones [for free-stream particles]).
    """
    _version = '251'
    fluent_name = 'zone-types-to-calc-exchange-data-on'
    _python_name = 'zone_types_to_calc_exchange_data_on'

class exch_details_in_dpm_summ_rep_enabled(Boolean):
    """
    Specifies whether to print per-zone exchange details in DPM extended summary reports.
    """
    _version = '251'
    fluent_name = 'exch-details-in-dpm-summ-rep-enabled?'
    _python_name = 'exch_details_in_dpm_summ_rep_enabled'

class summary_1(Command):
    """
    Print discrete phase summary report of particle fates.
    """
    _version = '251'
    fluent_name = 'summary'
    _python_name = 'summary'

class write_to_file_2(Boolean):
    """
    'write_to_file' child.
    """
    _version = '251'
    fluent_name = 'write-to-file?'
    _python_name = 'write_to_file'

class include_in_domain_particles(Boolean):
    """
    Specifies whether to include particle parcels that are currently in the domain in the report.
    """
    _version = '251'
    fluent_name = 'include-in-domain-particles?'
    _python_name = 'include_in_domain_particles'

class pick_injection(Boolean):
    """
    'pick_injection' child.
    """
    _version = '251'
    fluent_name = 'pick-injection?'
    _python_name = 'pick_injection'

class injection_3(String, AllowedValuesMixin):
    """
    'injection' child.
    """
    _version = '251'
    fluent_name = 'injection'
    _python_name = 'injection'

class extended_summary(Command):
    """
    Print extended discrete phase summary report of particle fates, with options.
    
    Parameters
    ----------
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        include_in_domain_particles : bool
            Specifies whether to include particle parcels that are currently in the domain in the report.
        pick_injection : bool
            'pick_injection' child.
        injection : str
            'injection' child.
    """
    _version = '251'
    fluent_name = 'extended-summary'
    _python_name = 'extended_summary'
    argument_names = ['write_to_file', 'file_name', 'include_in_domain_particles', 'pick_injection', 'injection']
    _child_classes = dict(
        write_to_file=write_to_file_2,
        file_name=file_name_2,
        include_in_domain_particles=include_in_domain_particles,
        pick_injection=pick_injection,
        injection=injection_3,
    )
    _child_aliases = dict(
        include_in_domains_particles=('include_in_domain_particles', 'include-in-domains-particles?'),
    )

class injection_names(StringList, AllowedValuesMixin):
    """
    The injection[s] whose in-domain particle parcels are to be included in the report.
    """
    _version = '251'
    fluent_name = 'injection-names'
    _python_name = 'injection_names'

class particle_summary(Command):
    """
    Print summary report for all current particles.
    
    Parameters
    ----------
        injection_names : List
            The injection[s] whose in-domain particle parcels are to be included in the report.
    """
    _version = '251'
    fluent_name = 'particle-summary'
    _python_name = 'particle_summary'
    argument_names = ['injection_names']
    _child_classes = dict(
        injection_names=injection_names,
    )

class enable_25(Boolean):
    """
    Specifies whether to enable or disable the per-injection per-zone DPM summary reports.
    """
    _version = '251'
    fluent_name = 'enable?'
    _python_name = 'enable'

class reset_dpm_summaries(Boolean):
    """
    Disabling the per-injection per-zone DPM summary reports requires that
    both the current DPM summary report data are reset and all particle
    parcels currently in the domain are cleared out(!).
    Set this command argument / check this checkbox to
    confirm that you want to proceed as described.
    """
    _version = '251'
    fluent_name = 'reset-dpm-summaries'
    _python_name = 'reset_dpm_summaries'

class set_per_injection_zone_summaries(Command):
    """
    Enable per-injection per-zone DPM summary reports.
    """
    _version = '251'
    fluent_name = 'set-per-injection-zone-summaries'
    _python_name = 'set_per_injection_zone_summaries'
    argument_names = ['enable', 'reset_dpm_summaries']
    _child_classes = dict(
        enable=enable_25,
        reset_dpm_summaries=reset_dpm_summaries,
    )
    _child_aliases = dict(
        summary_state=('enable', 'summary-state'),
    )

class discrete_phase_6(Group):
    """
    'discrete_phase' child.
    """
    _version = '251'
    fluent_name = 'discrete-phase'
    _python_name = 'discrete_phase'
    child_names = ['histogram', 'sample_trajectories', 'zone_types_to_calc_exchange_data_on', 'exch_details_in_dpm_summ_rep_enabled']
    command_names = ['summary', 'extended_summary', 'particle_summary', 'set_per_injection_zone_summaries']
    _child_classes = dict(
        histogram=histogram_1,
        sample_trajectories=sample_trajectories,
        zone_types_to_calc_exchange_data_on=zone_types_to_calc_exchange_data_on,
        exch_details_in_dpm_summ_rep_enabled=exch_details_in_dpm_summ_rep_enabled,
        summary=summary_1,
        extended_summary=extended_summary,
        particle_summary=particle_summary,
        set_per_injection_zone_summaries=set_per_injection_zone_summaries,
    )
    _child_aliases = dict(
        zone_summaries_per_injection=('set_per_injection_zone_summaries', 'zone-summaries-per-injection?'),
    )

class zones_8(StringList, AllowedValuesMixin):
    """
    Zone name.
    """
    _version = '251'
    fluent_name = 'zones'
    _python_name = 'zones'

class physics_2(StringList, AllowedValuesMixin):
    """
    The physics location.
    """
    _version = '251'
    fluent_name = 'physics'
    _python_name = 'physics'

class write_to_file_3(Boolean):
    """
    Specifies whether to write to a file.
    """
    _version = '251'
    fluent_name = 'write-to-file?'
    _python_name = 'write_to_file'

class append_data(Boolean):
    """
    Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'append-data?'
    _python_name = 'append_data'

class mass_flow_1(Command):
    """
    Print mass flow rate at inlets and outlets.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'mass-flow'
    _python_name = 'mass_flow'
    argument_names = ['domain', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class heat_transfer(Command):
    """
    Print heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'heat-transfer'
    _python_name = 'heat_transfer'
    argument_names = ['domain', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class heat_transfer_sensible(Command):
    """
    Print sensible heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'heat-transfer-sensible'
    _python_name = 'heat_transfer_sensible'
    argument_names = ['domain', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class radiation_heat_transfer(Command):
    """
    Print radiation heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'radiation-heat-transfer'
    _python_name = 'radiation_heat_transfer'
    argument_names = ['domain', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class film_mass_flow(Command):
    """
    Print film mass flow rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'film-mass-flow'
    _python_name = 'film_mass_flow'
    argument_names = ['domain', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class film_heat_transfer(Command):
    """
    Print film heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'film-heat-transfer'
    _python_name = 'film_heat_transfer'
    argument_names = ['domain', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class electric_current(Command):
    """
    Print electric current rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'electric-current'
    _python_name = 'electric_current'
    argument_names = ['domain', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class pressure_work_1(Command):
    """
    Print pressure work rate at moving boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'pressure-work'
    _python_name = 'pressure_work'
    argument_names = ['domain', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class viscous_work(Command):
    """
    Print viscous work rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'viscous-work'
    _python_name = 'viscous_work'
    argument_names = ['domain', 'zones', 'physics', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class get_mass_flow(Query):
    """
    Print mass flow rate at inlets and outlets.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
    """
    _version = '251'
    fluent_name = 'get-mass-flow'
    _python_name = 'get_mass_flow'
    argument_names = ['domain', 'zones', 'physics']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
    )

class get_heat_transfer(Query):
    """
    Print heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
    """
    _version = '251'
    fluent_name = 'get-heat-transfer'
    _python_name = 'get_heat_transfer'
    argument_names = ['domain', 'zones', 'physics']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
    )

class get_heat_transfer_sensible(Query):
    """
    Print sensible heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
    """
    _version = '251'
    fluent_name = 'get-heat-transfer-sensible'
    _python_name = 'get_heat_transfer_sensible'
    argument_names = ['domain', 'zones', 'physics']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
    )

class get_radiation_heat_transfer(Query):
    """
    Print radiation heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
    """
    _version = '251'
    fluent_name = 'get-radiation-heat-transfer'
    _python_name = 'get_radiation_heat_transfer'
    argument_names = ['domain', 'zones', 'physics']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
    )

class get_film_mass_flow(Query):
    """
    Print film mass flow rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
    """
    _version = '251'
    fluent_name = 'get-film-mass-flow'
    _python_name = 'get_film_mass_flow'
    argument_names = ['domain', 'zones', 'physics']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
    )

class get_film_heat_transfer(Query):
    """
    Print film heat transfer rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
    """
    _version = '251'
    fluent_name = 'get-film-heat-transfer'
    _python_name = 'get_film_heat_transfer'
    argument_names = ['domain', 'zones', 'physics']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
    )

class get_electric_current(Query):
    """
    Print electric current rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
    """
    _version = '251'
    fluent_name = 'get-electric-current'
    _python_name = 'get_electric_current'
    argument_names = ['domain', 'zones', 'physics']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
    )

class get_pressure_work(Query):
    """
    Print pressure work rate at moving boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
    """
    _version = '251'
    fluent_name = 'get-pressure-work'
    _python_name = 'get_pressure_work'
    argument_names = ['domain', 'zones', 'physics']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
    )

class get_viscous_work(Query):
    """
    Print viscous work rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
        zones : List
            Zone name.
        physics : List
            The physics location.
    """
    _version = '251'
    fluent_name = 'get-viscous-work'
    _python_name = 'get_viscous_work'
    argument_names = ['domain', 'zones', 'physics']
    _child_classes = dict(
        domain=domain_2,
        zones=zones_8,
        physics=physics_2,
    )

class fluxes(Group):
    """
    'fluxes' child.
    """
    _version = '251'
    fluent_name = 'fluxes'
    _python_name = 'fluxes'
    command_names = ['mass_flow', 'heat_transfer', 'heat_transfer_sensible', 'radiation_heat_transfer', 'film_mass_flow', 'film_heat_transfer', 'electric_current', 'pressure_work', 'viscous_work']
    query_names = ['get_mass_flow', 'get_heat_transfer', 'get_heat_transfer_sensible', 'get_radiation_heat_transfer', 'get_film_mass_flow', 'get_film_heat_transfer', 'get_electric_current', 'get_pressure_work', 'get_viscous_work']
    _child_classes = dict(
        mass_flow=mass_flow_1,
        heat_transfer=heat_transfer,
        heat_transfer_sensible=heat_transfer_sensible,
        radiation_heat_transfer=radiation_heat_transfer,
        film_mass_flow=film_mass_flow,
        film_heat_transfer=film_heat_transfer,
        electric_current=electric_current,
        pressure_work=pressure_work_1,
        viscous_work=viscous_work,
        get_mass_flow=get_mass_flow,
        get_heat_transfer=get_heat_transfer,
        get_heat_transfer_sensible=get_heat_transfer_sensible,
        get_radiation_heat_transfer=get_radiation_heat_transfer,
        get_film_mass_flow=get_film_mass_flow,
        get_film_heat_transfer=get_film_heat_transfer,
        get_electric_current=get_electric_current,
        get_pressure_work=get_pressure_work,
        get_viscous_work=get_viscous_work,
    )

class species_mass_flow(Command):
    """
    Print species mass flow rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'species-mass-flow'
    _python_name = 'species_mass_flow'
    argument_names = ['domain']
    _child_classes = dict(
        domain=domain_2,
    )

class element_mass_flow(Command):
    """
    Print element mass flow rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'element-mass-flow'
    _python_name = 'element_mass_flow'
    argument_names = ['domain']
    _child_classes = dict(
        domain=domain_2,
    )

class uds_flow(Command):
    """
    Print flow rate at boundaries.
    
    Parameters
    ----------
        domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'uds-flow'
    _python_name = 'uds_flow'
    argument_names = ['domain']
    _child_classes = dict(
        domain=domain_2,
    )

class flow(Group):
    """
    Print flow rate at boundaries for species, element.
    """
    _version = '251'
    fluent_name = 'flow'
    _python_name = 'flow'
    command_names = ['species_mass_flow', 'element_mass_flow', 'uds_flow']
    _child_classes = dict(
        species_mass_flow=species_mass_flow,
        element_mass_flow=element_mass_flow,
        uds_flow=uds_flow,
    )

class setting_type(StringList, AllowedValuesMixin):
    """
    'setting_type' child.
    """
    _version = '251'
    fluent_name = 'setting-type'
    _python_name = 'setting_type'

class modified_setting(Command):
    """
    Specify which settings will be checked for non-default status for generating the Modified Settings Summary table.
    
    Parameters
    ----------
        setting_type : List
            'setting_type' child.
    """
    _version = '251'
    fluent_name = 'modified-setting'
    _python_name = 'modified_setting'
    argument_names = ['setting_type']
    _child_classes = dict(
        setting_type=setting_type,
    )

class write_user_setting(Command):
    """
    Write the contents of the Modified Settings Summary table to a file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'write-user-setting'
    _python_name = 'write_user_setting'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_2,
    )

class modified_setting_options(Group):
    """
    'modified_setting_options' child.
    """
    _version = '251'
    fluent_name = 'modified-setting-options'
    _python_name = 'modified_setting_options'
    command_names = ['modified_setting', 'write_user_setting']
    _child_classes = dict(
        modified_setting=modified_setting,
        write_user_setting=write_user_setting,
    )

class report_type_1(String, AllowedValuesMixin):
    """
    'report_type' child.
    """
    _version = '251'
    fluent_name = 'report-type'
    _python_name = 'report_type'

class surface_list(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '251'
    fluent_name = 'surface-list'
    _python_name = 'surface_list'

class volume_list(StringList, AllowedValuesMixin):
    """
    Cell zone name list.
    """
    _version = '251'
    fluent_name = 'volume-list'
    _python_name = 'volume_list'

class num_dens_func(String, AllowedValuesMixin):
    """
    'num_dens_func' child.
    """
    _version = '251'
    fluent_name = 'num-dens-func'
    _python_name = 'num_dens_func'

class dia_upper_limit(Real):
    """
    'dia_upper_limit' child.
    """
    _version = '251'
    fluent_name = 'dia-upper-limit'
    _python_name = 'dia_upper_limit'

class plot_12(Command):
    """
    Plot number density report.
    """
    _version = '251'
    fluent_name = 'plot'
    _python_name = 'plot'

class print_5(Command):
    """
    Print number density report.
    """
    _version = '251'
    fluent_name = 'print'
    _python_name = 'print'

class histogram_2(Command):
    """
    Number density histogram.
    """
    _version = '251'
    fluent_name = 'histogram'
    _python_name = 'histogram'

class file_name_15(Filename, _OutputFile):
    """
    File name to write number density report.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class write_to_file_4(Command):
    """
    Write number density report to file.
    
    Parameters
    ----------
        file_name : str
            File name to write number density report.
    """
    _version = '251'
    fluent_name = 'write-to-file'
    _python_name = 'write_to_file'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_15,
    )

class number_density(Group):
    """
    Number density report.
    """
    _version = '251'
    fluent_name = 'number-density'
    _python_name = 'number_density'
    child_names = ['report_type', 'surface_list', 'volume_list', 'num_dens_func', 'dia_upper_limit']
    command_names = ['plot', 'print', 'histogram', 'write_to_file']
    _child_classes = dict(
        report_type=report_type_1,
        surface_list=surface_list,
        volume_list=volume_list,
        num_dens_func=num_dens_func,
        dia_upper_limit=dia_upper_limit,
        plot=plot_12,
        print=print_5,
        histogram=histogram_2,
        write_to_file=write_to_file_4,
    )

class num_of_moments(Integer):
    """
    'num_of_moments' child.
    """
    _version = '251'
    fluent_name = 'num-of-moments'
    _python_name = 'num_of_moments'

class moments(Command):
    """
    Set moments for population balance.
    
    Parameters
    ----------
        surface_list : List
            Surface.
        volume_list : List
            Cell zone name list.
        num_of_moments : int
            'num_of_moments' child.
        write_to_file : bool
            'write_to_file' child.
        filename_1 : str
            'filename' child.
    """
    _version = '251'
    fluent_name = 'moments'
    _python_name = 'moments'
    argument_names = ['surface_list', 'volume_list', 'num_of_moments', 'write_to_file', 'filename']
    _child_classes = dict(
        surface_list=surface_list,
        volume_list=volume_list,
        num_of_moments=num_of_moments,
        write_to_file=write_to_file_2,
        filename=filename_1_4,
    )

class population_balance_1(Group):
    """
    'population_balance' child.
    """
    _version = '251'
    fluent_name = 'population-balance'
    _python_name = 'population_balance'
    child_names = ['number_density']
    command_names = ['moments']
    _child_classes = dict(
        number_density=number_density,
        moments=moments,
    )

class heat_exchanger_1(String, AllowedValuesMixin):
    """
    'heat_exchanger' child.
    """
    _version = '251'
    fluent_name = 'heat-exchanger'
    _python_name = 'heat_exchanger'

class fluid_zone(String, AllowedValuesMixin):
    """
    'fluid_zone' child.
    """
    _version = '251'
    fluent_name = 'fluid-zone'
    _python_name = 'fluid_zone'

class boundary_zone_1(String, AllowedValuesMixin):
    """
    Face zone name.
    """
    _version = '251'
    fluent_name = 'boundary-zone'
    _python_name = 'boundary_zone'

class append_file(Boolean):
    """
    'append_file' child.
    """
    _version = '251'
    fluent_name = 'append-file?'
    _python_name = 'append_file'

class computed_heat_rejection(Command):
    """
    Print total heat rejection.
    
    Parameters
    ----------
        heat_exchanger : str
            'heat_exchanger' child.
        fluid_zone : str
            'fluid_zone' child.
        boundary_zone : str
            Face zone name.
        report_type : str
            'report_type' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_file : bool
            'append_file' child.
    """
    _version = '251'
    fluent_name = 'computed-heat-rejection'
    _python_name = 'computed_heat_rejection'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file']
    _child_classes = dict(
        heat_exchanger=heat_exchanger_1,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone_1,
        report_type=report_type_1,
        write_to_file=write_to_file_2,
        file_name=file_name_2,
        append_file=append_file,
    )

class inlet_temperature(Command):
    """
    Print inlet temperature.
    
    Parameters
    ----------
        heat_exchanger : str
            'heat_exchanger' child.
        fluid_zone : str
            'fluid_zone' child.
        boundary_zone : str
            Face zone name.
        report_type : str
            'report_type' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_file : bool
            'append_file' child.
    """
    _version = '251'
    fluent_name = 'inlet-temperature'
    _python_name = 'inlet_temperature'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file']
    _child_classes = dict(
        heat_exchanger=heat_exchanger_1,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone_1,
        report_type=report_type_1,
        write_to_file=write_to_file_2,
        file_name=file_name_2,
        append_file=append_file,
    )

class outlet_temperature(Command):
    """
    Print outlet temperature.
    
    Parameters
    ----------
        heat_exchanger : str
            'heat_exchanger' child.
        fluid_zone : str
            'fluid_zone' child.
        boundary_zone : str
            Face zone name.
        report_type : str
            'report_type' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_file : bool
            'append_file' child.
    """
    _version = '251'
    fluent_name = 'outlet-temperature'
    _python_name = 'outlet_temperature'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file']
    _child_classes = dict(
        heat_exchanger=heat_exchanger_1,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone_1,
        report_type=report_type_1,
        write_to_file=write_to_file_2,
        file_name=file_name_2,
        append_file=append_file,
    )

class mass_flow_rate_3(Command):
    """
    Print mass flow rate.
    
    Parameters
    ----------
        heat_exchanger : str
            'heat_exchanger' child.
        fluid_zone : str
            'fluid_zone' child.
        boundary_zone : str
            Face zone name.
        report_type : str
            'report_type' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_file : bool
            'append_file' child.
    """
    _version = '251'
    fluent_name = 'mass-flow-rate'
    _python_name = 'mass_flow_rate'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file']
    _child_classes = dict(
        heat_exchanger=heat_exchanger_1,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone_1,
        report_type=report_type_1,
        write_to_file=write_to_file_2,
        file_name=file_name_2,
        append_file=append_file,
    )

class specific_heat_5(Command):
    """
    Print fluid's specific heat.
    
    Parameters
    ----------
        heat_exchanger : str
            'heat_exchanger' child.
        fluid_zone : str
            'fluid_zone' child.
        boundary_zone : str
            Face zone name.
        report_type : str
            'report_type' child.
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
        append_file : bool
            'append_file' child.
    """
    _version = '251'
    fluent_name = 'specific-heat'
    _python_name = 'specific_heat'
    argument_names = ['heat_exchanger', 'fluid_zone', 'boundary_zone', 'report_type', 'write_to_file', 'file_name', 'append_file']
    _child_classes = dict(
        heat_exchanger=heat_exchanger_1,
        fluid_zone=fluid_zone,
        boundary_zone=boundary_zone_1,
        report_type=report_type_1,
        write_to_file=write_to_file_2,
        file_name=file_name_2,
        append_file=append_file,
    )

class heat_exchanger(Group):
    """
    The heat exchanger object.
    """
    _version = '251'
    fluent_name = 'heat-exchanger'
    _python_name = 'heat_exchanger'
    command_names = ['computed_heat_rejection', 'inlet_temperature', 'outlet_temperature', 'mass_flow_rate', 'specific_heat']
    _child_classes = dict(
        computed_heat_rejection=computed_heat_rejection,
        inlet_temperature=inlet_temperature,
        outlet_temperature=outlet_temperature,
        mass_flow_rate=mass_flow_rate_3,
        specific_heat=specific_heat_5,
    )

class print_process_statistics(Command):
    """
    Fluent process information.
    """
    _version = '251'
    fluent_name = 'print-process-statistics'
    _python_name = 'print_process_statistics'

class print_system_statistics(Command):
    """
    System information.
    """
    _version = '251'
    fluent_name = 'print-system-statistics'
    _python_name = 'print_system_statistics'

class print_gpgpu_statistics(Command):
    """
    GPGPU information.
    """
    _version = '251'
    fluent_name = 'print-gpgpu-statistics'
    _python_name = 'print_gpgpu_statistics'

class print_time_statistics(Command):
    """
    Time usage information.
    """
    _version = '251'
    fluent_name = 'print-time-statistics'
    _python_name = 'print_time_statistics'

class system(Group):
    """
    System object.
    """
    _version = '251'
    fluent_name = 'system'
    _python_name = 'system'
    command_names = ['print_process_statistics', 'print_system_statistics', 'print_gpgpu_statistics', 'print_time_statistics']
    _child_classes = dict(
        print_process_statistics=print_process_statistics,
        print_system_statistics=print_system_statistics,
        print_gpgpu_statistics=print_gpgpu_statistics,
        print_time_statistics=print_time_statistics,
    )

class surface_names_3(StringList, AllowedValuesMixin):
    """
    The surfaces.
    """
    _version = '251'
    fluent_name = 'surface-names'
    _python_name = 'surface_names'

class geometry_names(StringList, AllowedValuesMixin):
    """
    UTL Geometry.
    """
    _version = '251'
    fluent_name = 'geometry-names'
    _python_name = 'geometry_names'

class cust_vec_func(String, AllowedValuesMixin):
    """
    The custom vectors.
    """
    _version = '251'
    fluent_name = 'cust-vec-func'
    _python_name = 'cust_vec_func'

class report_of(String, AllowedValuesMixin):
    """
    Field.
    """
    _version = '251'
    fluent_name = 'report-of'
    _python_name = 'report_of'

class current_domain(String, AllowedValuesMixin):
    """
    The domain.
    """
    _version = '251'
    fluent_name = 'current-domain'
    _python_name = 'current_domain'

class area_2(Command):
    """
    Print total area of surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'area'
    _python_name = 'area'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class area_weighted_avg(Command):
    """
    Print area-weighted average of scalar on surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'area-weighted-avg'
    _python_name = 'area_weighted_avg'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class vector_based_flux(Command):
    """
    Print custom vector based flux.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'vector-based-flux'
    _python_name = 'vector_based_flux'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class vector_flux(Command):
    """
    Print custom vector flux.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'vector-flux'
    _python_name = 'vector_flux'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class vector_weighted_average(Command):
    """
    Print custom vector weighted average.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'vector-weighted-average'
    _python_name = 'vector_weighted_average'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class facet_avg(Command):
    """
    Print average of scalar at facet centroids of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'facet-avg'
    _python_name = 'facet_avg'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class facet_min(Command):
    """
    Print minimum of scalar at facet centroids of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'facet-min'
    _python_name = 'facet_min'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class facet_max(Command):
    """
    Print maximum of scalar at facet centroids of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'facet-max'
    _python_name = 'facet_max'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class flow_rate_1(Command):
    """
    Print flow rate of scalar through surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'flow-rate'
    _python_name = 'flow_rate'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class integral(Command):
    """
    Print integral of scalar over surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'integral'
    _python_name = 'integral'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class mass_flow_rate_4(Command):
    """
    Print mass flow rate through surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'mass-flow-rate'
    _python_name = 'mass_flow_rate'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class mass_weighted_avg(Command):
    """
    Print mass-average of scalar over surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'mass-weighted-avg'
    _python_name = 'mass_weighted_avg'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class standard_deviation(Command):
    """
    Print standard deviation of scalar.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'standard-deviation'
    _python_name = 'standard_deviation'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class sum(Command):
    """
    Print sum of scalar at facet centroids of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'sum'
    _python_name = 'sum'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class uniformity_index_area_weighted(Command):
    """
    Print uniformity index of scalar over surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'uniformity-index-area-weighted'
    _python_name = 'uniformity_index_area_weighted'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class uniformity_index_mass_weighted(Command):
    """
    Print uniformity index of scalar over surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'uniformity-index-mass-weighted'
    _python_name = 'uniformity_index_mass_weighted'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class vertex_avg(Command):
    """
    Print average of scalar at vertices of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'vertex-avg'
    _python_name = 'vertex_avg'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class vertex_min(Command):
    """
    Print minimum of scalar at vertices of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'vertex-min'
    _python_name = 'vertex_min'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class vertex_max(Command):
    """
    Print maximkum of scalar at vertices of the surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'vertex-max'
    _python_name = 'vertex_max'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class volume_flow_rate(Command):
    """
    Print volume flow rate through surfaces.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'volume-flow-rate'
    _python_name = 'volume_flow_rate'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class get_area(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-area'
    _python_name = 'get_area'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_area_weighted_avg(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-area-weighted-avg'
    _python_name = 'get_area_weighted_avg'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_vector_based_flux(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-vector-based-flux'
    _python_name = 'get_vector_based_flux'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_vector_flux(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-vector-flux'
    _python_name = 'get_vector_flux'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_vector_weighted_average(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-vector-weighted-average'
    _python_name = 'get_vector_weighted_average'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_facet_avg(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-facet-avg'
    _python_name = 'get_facet_avg'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_facet_min(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-facet-min'
    _python_name = 'get_facet_min'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_facet_max(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-facet-max'
    _python_name = 'get_facet_max'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_flow_rate(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-flow-rate'
    _python_name = 'get_flow_rate'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_integral(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-integral'
    _python_name = 'get_integral'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_mass_flow_rate(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-mass-flow-rate'
    _python_name = 'get_mass_flow_rate'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_mass_weighted_avg(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-mass-weighted-avg'
    _python_name = 'get_mass_weighted_avg'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_standard_deviation(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-standard-deviation'
    _python_name = 'get_standard_deviation'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_sum(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-sum'
    _python_name = 'get_sum'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_uniformity_index_area_weighted(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-uniformity-index-area-weighted'
    _python_name = 'get_uniformity_index_area_weighted'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_uniformity_index_mass_weighted(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-uniformity-index-mass-weighted'
    _python_name = 'get_uniformity_index_mass_weighted'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_vertex_avg(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-vertex-avg'
    _python_name = 'get_vertex_avg'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_vertex_min(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-vertex-min'
    _python_name = 'get_vertex_min'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_vertex_max(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-vertex-max'
    _python_name = 'get_vertex_max'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class get_volume_flow_rate(Query):
    """
    Create a surface integral report.
    
    Parameters
    ----------
        surface_names : List
            The surfaces.
        geometry_names : List
            UTL Geometry.
        cust_vec_func : str
            The custom vectors.
        report_of : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-volume-flow-rate'
    _python_name = 'get_volume_flow_rate'
    argument_names = ['surface_names', 'geometry_names', 'cust_vec_func', 'report_of', 'current_domain']
    _child_classes = dict(
        surface_names=surface_names_3,
        geometry_names=geometry_names,
        cust_vec_func=cust_vec_func,
        report_of=report_of,
        current_domain=current_domain,
    )

class surface_integrals(Group):
    """
    Provides access to settings for reporting surface integrals.
    """
    _version = '251'
    fluent_name = 'surface-integrals'
    _python_name = 'surface_integrals'
    command_names = ['area', 'area_weighted_avg', 'vector_based_flux', 'vector_flux', 'vector_weighted_average', 'facet_avg', 'facet_min', 'facet_max', 'flow_rate', 'integral', 'mass_flow_rate', 'mass_weighted_avg', 'standard_deviation', 'sum', 'uniformity_index_area_weighted', 'uniformity_index_mass_weighted', 'vertex_avg', 'vertex_min', 'vertex_max', 'volume_flow_rate']
    query_names = ['get_area', 'get_area_weighted_avg', 'get_vector_based_flux', 'get_vector_flux', 'get_vector_weighted_average', 'get_facet_avg', 'get_facet_min', 'get_facet_max', 'get_flow_rate', 'get_integral', 'get_mass_flow_rate', 'get_mass_weighted_avg', 'get_standard_deviation', 'get_sum', 'get_uniformity_index_area_weighted', 'get_uniformity_index_mass_weighted', 'get_vertex_avg', 'get_vertex_min', 'get_vertex_max', 'get_volume_flow_rate']
    _child_classes = dict(
        area=area_2,
        area_weighted_avg=area_weighted_avg,
        vector_based_flux=vector_based_flux,
        vector_flux=vector_flux,
        vector_weighted_average=vector_weighted_average,
        facet_avg=facet_avg,
        facet_min=facet_min,
        facet_max=facet_max,
        flow_rate=flow_rate_1,
        integral=integral,
        mass_flow_rate=mass_flow_rate_4,
        mass_weighted_avg=mass_weighted_avg,
        standard_deviation=standard_deviation,
        sum=sum,
        uniformity_index_area_weighted=uniformity_index_area_weighted,
        uniformity_index_mass_weighted=uniformity_index_mass_weighted,
        vertex_avg=vertex_avg,
        vertex_min=vertex_min,
        vertex_max=vertex_max,
        volume_flow_rate=volume_flow_rate,
        get_area=get_area,
        get_area_weighted_avg=get_area_weighted_avg,
        get_vector_based_flux=get_vector_based_flux,
        get_vector_flux=get_vector_flux,
        get_vector_weighted_average=get_vector_weighted_average,
        get_facet_avg=get_facet_avg,
        get_facet_min=get_facet_min,
        get_facet_max=get_facet_max,
        get_flow_rate=get_flow_rate,
        get_integral=get_integral,
        get_mass_flow_rate=get_mass_flow_rate,
        get_mass_weighted_avg=get_mass_weighted_avg,
        get_standard_deviation=get_standard_deviation,
        get_sum=get_sum,
        get_uniformity_index_area_weighted=get_uniformity_index_area_weighted,
        get_uniformity_index_mass_weighted=get_uniformity_index_mass_weighted,
        get_vertex_avg=get_vertex_avg,
        get_vertex_min=get_vertex_min,
        get_vertex_max=get_vertex_max,
        get_volume_flow_rate=get_volume_flow_rate,
    )

class cell_zones_10(StringList, AllowedValuesMixin):
    """
    Volume id/name.
    """
    _version = '251'
    fluent_name = 'cell-zones'
    _python_name = 'cell_zones'

class cell_function_2(String, AllowedValuesMixin):
    """
    Field.
    """
    _version = '251'
    fluent_name = 'cell-function'
    _python_name = 'cell_function'

class mass_average(Command):
    """
    Print mass-average of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'mass-average'
    _python_name = 'mass_average'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class mass_integral(Command):
    """
    Print mass-weighted integral of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'mass-integral'
    _python_name = 'mass_integral'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class mass(Command):
    """
    Print total mass of specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'mass'
    _python_name = 'mass'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class sum_1(Command):
    """
    Print sum of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'sum'
    _python_name = 'sum'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class twopisum(Command):
    """
    Print sum of scalar over specified cell zones multiplied by 2\\*Pi.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'twopisum'
    _python_name = 'twopisum'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class minimum_8(Command):
    """
    Print minimum of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'minimum'
    _python_name = 'minimum'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class maximum_7(Command):
    """
    Print maximum of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'maximum'
    _python_name = 'maximum'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class volume_2(Command):
    """
    Print total volume of specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'volume'
    _python_name = 'volume'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class volume_average(Command):
    """
    Print volume-weighted average of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'volume-average'
    _python_name = 'volume_average'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class volume_integral(Command):
    """
    Print volume integral of scalar over specified cell zones.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'volume-integral'
    _python_name = 'volume_integral'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class get_mass_average(Query):
    """
    Create a volume integral report.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-mass-average'
    _python_name = 'get_mass_average'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
    )

class get_mass_integral(Query):
    """
    Create a volume integral report.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-mass-integral'
    _python_name = 'get_mass_integral'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
    )

class get_mass(Query):
    """
    Create a volume integral report.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-mass'
    _python_name = 'get_mass'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
    )

class get_sum_1(Query):
    """
    Create a volume integral report.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-sum'
    _python_name = 'get_sum'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
    )

class get_twopisum(Query):
    """
    Create a volume integral report.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-twopisum'
    _python_name = 'get_twopisum'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
    )

class get_minimum(Query):
    """
    Create a volume integral report.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-minimum'
    _python_name = 'get_minimum'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
    )

class get_maximum(Query):
    """
    Create a volume integral report.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-maximum'
    _python_name = 'get_maximum'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
    )

class get_volume(Query):
    """
    Create a volume integral report.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-volume'
    _python_name = 'get_volume'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
    )

class get_volume_average(Query):
    """
    Create a volume integral report.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'get-volume-average'
    _python_name = 'get_volume_average'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
    )

class compute_volume_integral(Query):
    """
    Create a volume integral report.
    
    Parameters
    ----------
        cell_zones : List
            Volume id/name.
        volumes : List
            UTL Volume name.
        cell_function : str
            Field.
        current_domain : str
            The domain.
    """
    _version = '251'
    fluent_name = 'compute-volume-integral'
    _python_name = 'compute_volume_integral'
    argument_names = ['cell_zones', 'volumes', 'cell_function', 'current_domain']
    _child_classes = dict(
        cell_zones=cell_zones_10,
        volumes=volumes_1,
        cell_function=cell_function_2,
        current_domain=current_domain,
    )

class volume_integrals(Group):
    """
    'volume_integrals' child.
    """
    _version = '251'
    fluent_name = 'volume-integrals'
    _python_name = 'volume_integrals'
    command_names = ['mass_average', 'mass_integral', 'mass', 'sum', 'twopisum', 'minimum', 'maximum', 'volume', 'volume_average', 'volume_integral']
    query_names = ['get_mass_average', 'get_mass_integral', 'get_mass', 'get_sum', 'get_twopisum', 'get_minimum', 'get_maximum', 'get_volume', 'get_volume_average', 'compute_volume_integral']
    _child_classes = dict(
        mass_average=mass_average,
        mass_integral=mass_integral,
        mass=mass,
        sum=sum_1,
        twopisum=twopisum,
        minimum=minimum_8,
        maximum=maximum_7,
        volume=volume_2,
        volume_average=volume_average,
        volume_integral=volume_integral,
        get_mass_average=get_mass_average,
        get_mass_integral=get_mass_integral,
        get_mass=get_mass,
        get_sum=get_sum_1,
        get_twopisum=get_twopisum,
        get_minimum=get_minimum,
        get_maximum=get_maximum,
        get_volume=get_volume,
        get_volume_average=get_volume_average,
        compute_volume_integral=compute_volume_integral,
    )

class phasic_integrals_enabled(Boolean):
    """
    Compute integrals at phase level?.
    """
    _version = '251'
    fluent_name = 'phasic-integrals-enabled?'
    _python_name = 'phasic_integrals_enabled'

class aero_optical_distortions(Command):
    """
    Optics report object.
    """
    _version = '251'
    fluent_name = 'aero-optical-distortions'
    _python_name = 'aero_optical_distortions'

class option_50(String, AllowedValuesMixin):
    """
    The type of report (Forces, Moments, or Center of Pressure).
    """
    _version = '251'
    fluent_name = 'option'
    _python_name = 'option'

class wall_zones_1(StringList, AllowedValuesMixin):
    """
    Wall zone name list.
    """
    _version = '251'
    fluent_name = 'wall-zones'
    _python_name = 'wall_zones'

class direction_vector_2(RealList):
    """
    The XYZ components of the direction vector.
    """
    _version = '251'
    fluent_name = 'direction-vector'
    _python_name = 'direction_vector'

class momentum_center(RealList):
    """
    The XYZ coordinates of the moment center.
    """
    _version = '251'
    fluent_name = 'momentum-center'
    _python_name = 'momentum_center'

class momentum_axis(RealList):
    """
    The XYZ components of the moment axis.
    """
    _version = '251'
    fluent_name = 'momentum-axis'
    _python_name = 'momentum_axis'

class pressure_coordinate(String, AllowedValuesMixin):
    """
    The line on which the center of pressure will be calculated.
    """
    _version = '251'
    fluent_name = 'pressure-coordinate'
    _python_name = 'pressure_coordinate'

class coordinate_value(Real):
    """
    The coordinate value.
    """
    _version = '251'
    fluent_name = 'coordinate-value'
    _python_name = 'coordinate_value'

class forces_1(Command):
    """
    Provides access to settings for force reports.
    
    Parameters
    ----------
        option : str
            The type of report (Forces, Moments, or Center of Pressure).
        domain : str
            The domain.
        wall_zones : List
            Wall zone name list.
        direction_vector : List
            The XYZ components of the direction vector.
        momentum_center : List
            The XYZ coordinates of the moment center.
        momentum_axis : List
            The XYZ components of the moment axis.
        pressure_coordinate : str
            The line on which the center of pressure will be calculated.
        coordinate_value : real
            The coordinate value.
        write_to_file : bool
            Specifies whether to write to a file.
        file_name : str
            The name you want the file saved with.
        append_data : bool
            Specifies whether to append data to existing file.
    """
    _version = '251'
    fluent_name = 'forces'
    _python_name = 'forces'
    argument_names = ['option', 'domain', 'wall_zones', 'direction_vector', 'momentum_center', 'momentum_axis', 'pressure_coordinate', 'coordinate_value', 'write_to_file', 'file_name', 'append_data']
    _child_classes = dict(
        option=option_50,
        domain=domain_2,
        wall_zones=wall_zones_1,
        direction_vector=direction_vector_2,
        momentum_center=momentum_center,
        momentum_axis=momentum_axis,
        pressure_coordinate=pressure_coordinate,
        coordinate_value=coordinate_value,
        write_to_file=write_to_file_3,
        file_name=file_name_14,
        append_data=append_data,
    )

class verbosity_option(String, AllowedValuesMixin):
    """
    'verbosity_option' child.
    """
    _version = '251'
    fluent_name = 'verbosity-option'
    _python_name = 'verbosity_option'

class multiphase_summary(Command):
    """
    Multiphase Summary and Recommendations.
    
    Parameters
    ----------
        verbosity_option : str
            'verbosity_option' child.
    """
    _version = '251'
    fluent_name = 'multiphase-summary'
    _python_name = 'multiphase_summary'
    argument_names = ['verbosity_option']
    _child_classes = dict(
        verbosity_option=verbosity_option,
    )

class pathline_summary(Command):
    """
    Print path-line-summary report.
    """
    _version = '251'
    fluent_name = 'pathline-summary'
    _python_name = 'pathline_summary'

class min_feature_size(Real):
    """
    'min_feature_size' child.
    """
    _version = '251'
    fluent_name = 'min-feature-size'
    _python_name = 'min_feature_size'

class proj_plane_norm_comp(RealList):
    """
    'proj_plane_norm_comp' child.
    """
    _version = '251'
    fluent_name = 'proj-plane-norm-comp'
    _python_name = 'proj_plane_norm_comp'

class projected_surface_area(Command):
    """
    Print total area of the projection of a group of surfaces to a plane.
    
    Parameters
    ----------
        surfaces : List
            Surface.
        min_feature_size : real
            'min_feature_size' child.
        proj_plane_norm_comp : List
            'proj_plane_norm_comp' child.
    """
    _version = '251'
    fluent_name = 'projected-surface-area'
    _python_name = 'projected_surface_area'
    argument_names = ['surfaces', 'min_feature_size', 'proj_plane_norm_comp']
    _child_classes = dict(
        surfaces=surfaces,
        min_feature_size=min_feature_size,
        proj_plane_norm_comp=proj_plane_norm_comp,
    )

class summary(Command):
    """
    Print report summary.
    
    Parameters
    ----------
        write_to_file : bool
            'write_to_file' child.
        file_name : str
            'file_name' child.
    """
    _version = '251'
    fluent_name = 'summary'
    _python_name = 'summary'
    argument_names = ['write_to_file', 'file_name']
    _child_classes = dict(
        write_to_file=write_to_file_2,
        file_name=file_name_2,
    )

class output_quantity(String, AllowedValuesMixin):
    """
    'output_quantity' child.
    """
    _version = '251'
    fluent_name = 'output-quantity'
    _python_name = 'output_quantity'

class rotor_name(String, AllowedValuesMixin):
    """
    'rotor_name' child.
    """
    _version = '251'
    fluent_name = 'rotor-name'
    _python_name = 'rotor_name'

class scale_output(Boolean):
    """
    'scale_output' child.
    """
    _version = '251'
    fluent_name = 'scale-output?'
    _python_name = 'scale_output'

class append_1(Boolean):
    """
    'append' child.
    """
    _version = '251'
    fluent_name = 'append?'
    _python_name = 'append'

class vbm_1(Command):
    """
    'vbm' command.
    """
    _version = '251'
    fluent_name = 'vbm'
    _python_name = 'vbm'
    argument_names = ['output_quantity', 'rotor_name', 'scale_output', 'write_to_file', 'file_name', 'append']
    _child_classes = dict(
        output_quantity=output_quantity,
        rotor_name=rotor_name,
        scale_output=scale_output,
        write_to_file=write_to_file_2,
        file_name=file_name_2,
        append=append_1,
    )

class get_forces(Query):
    """
    Provides access to settings for force reports.
    
    Parameters
    ----------
        option : str
            The type of report (Forces, Moments, or Center of Pressure).
        domain : str
            The domain.
        wall_zones : List
            Wall zone name list.
        direction_vector : List
            The XYZ components of the direction vector.
        momentum_center : List
            The XYZ coordinates of the moment center.
        momentum_axis : List
            The XYZ components of the moment axis.
        pressure_coordinate : str
            The line on which the center of pressure will be calculated.
        coordinate_value : real
            The coordinate value.
    """
    _version = '251'
    fluent_name = 'get-forces'
    _python_name = 'get_forces'
    argument_names = ['option', 'domain', 'wall_zones', 'direction_vector', 'momentum_center', 'momentum_axis', 'pressure_coordinate', 'coordinate_value']
    _child_classes = dict(
        option=option_50,
        domain=domain_2,
        wall_zones=wall_zones_1,
        direction_vector=direction_vector_2,
        momentum_center=momentum_center,
        momentum_axis=momentum_axis,
        pressure_coordinate=pressure_coordinate,
        coordinate_value=coordinate_value,
    )

class report_2(Group):
    """
    Provides access to common settings to set up reports for your CFD simulation. Reports can be compiled for fluxes forces projected areas surface and volume integrals among others.
    """
    _version = '251'
    fluent_name = 'report'
    _python_name = 'report'
    child_names = ['simulation_reports', 'discrete_phase', 'fluxes', 'flow', 'modified_setting_options', 'population_balance', 'heat_exchanger', 'system', 'surface_integrals', 'volume_integrals', 'phasic_integrals_enabled']
    command_names = ['aero_optical_distortions', 'forces', 'multiphase_summary', 'particle_summary', 'pathline_summary', 'projected_surface_area', 'summary', 'vbm']
    query_names = ['get_forces']
    _child_classes = dict(
        simulation_reports=simulation_reports,
        discrete_phase=discrete_phase_6,
        fluxes=fluxes,
        flow=flow,
        modified_setting_options=modified_setting_options,
        population_balance=population_balance_1,
        heat_exchanger=heat_exchanger,
        system=system,
        surface_integrals=surface_integrals,
        volume_integrals=volume_integrals,
        phasic_integrals_enabled=phasic_integrals_enabled,
        aero_optical_distortions=aero_optical_distortions,
        forces=forces_1,
        multiphase_summary=multiphase_summary,
        particle_summary=particle_summary,
        pathline_summary=pathline_summary,
        projected_surface_area=projected_surface_area,
        summary=summary,
        vbm=vbm_1,
        get_forces=get_forces,
    )

class results(Group):
    """
    'results' child.
    """
    _version = '251'
    fluent_name = 'results'
    _python_name = 'results'
    child_names = ['custom_field_functions', 'custom_vectors', 'surfaces', 'graphics', 'plot', 'scene', 'animations', 'report']
    _child_classes = dict(
        custom_field_functions=custom_field_functions_1,
        custom_vectors=custom_vectors,
        surfaces=surfaces_5,
        graphics=graphics,
        plot=plot_4,
        scene=scene,
        animations=animations,
        report=report_2,
    )

class type_12(String, AllowedValuesMixin):
    """
    Observable type.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'

class walls(StringList, AllowedValuesMixin):
    """
    Wall zone name list.
    """
    _version = '251'
    fluent_name = 'walls'
    _python_name = 'walls'

class vector_2(RealList):
    """
    Force vector.
    """
    _version = '251'
    fluent_name = 'vector'
    _python_name = 'vector'

class center_2(RealList):
    """
    Rotation center location.
    """
    _version = '251'
    fluent_name = 'center'
    _python_name = 'center'

class axis_4(RealList):
    """
    Rotation axis location.
    """
    _version = '251'
    fluent_name = 'axis'
    _python_name = 'axis'

class normalized(Boolean, AllowedValuesMixin):
    """
    Normalized swirl.
    """
    _version = '251'
    fluent_name = 'normalized'
    _python_name = 'normalized'

class fluid_zones(StringList, AllowedValuesMixin):
    """
    Fluid zone name list.
    """
    _version = '251'
    fluent_name = 'fluid-zones'
    _python_name = 'fluid_zones'

class inlets(StringList, AllowedValuesMixin):
    """
    The inlet zone list.
    """
    _version = '251'
    fluent_name = 'inlets'
    _python_name = 'inlets'

class outlets(StringList, AllowedValuesMixin):
    """
    The outlet zone list.
    """
    _version = '251'
    fluent_name = 'outlets'
    _python_name = 'outlets'

class fixed_value(Real):
    """
    Fixed value.
    """
    _version = '251'
    fluent_name = 'fixed-value'
    _python_name = 'fixed_value'

class observable_list(StringList, AllowedValuesMixin):
    """
    List of observables.
    """
    _version = '251'
    fluent_name = 'observable-list'
    _python_name = 'observable_list'

class constant_3(Real):
    """
    Linear combination constant.
    """
    _version = '251'
    fluent_name = 'constant'
    _python_name = 'constant'

class combination_type(String, AllowedValuesMixin):
    """
    Linear combination type.
    """
    _version = '251'
    fluent_name = 'combination-type'
    _python_name = 'combination_type'

class coefficient_3(Real):
    """
    Coefficient that multiplies the observable.
    """
    _version = '251'
    fluent_name = 'coefficient'
    _python_name = 'coefficient'

class observable_1(String, AllowedValuesMixin):
    """
    Coefficient that multiplies the observable.
    """
    _version = '251'
    fluent_name = 'observable'
    _python_name = 'observable'

class power(Real):
    """
    Power coefficient that exponentiates the observable.
    """
    _version = '251'
    fluent_name = 'power'
    _python_name = 'power'

class entries_child(Group):
    """
    'child_object_type' of entries.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'entries_child'
    child_names = ['coefficient', 'observable', 'power']
    _child_classes = dict(
        coefficient=coefficient_3,
        observable=observable_1,
        power=power,
    )

class entries(ListObject[entries_child]):
    """
    List of observables and coefficients for linear combination of powers.
    """
    _version = '251'
    fluent_name = 'entries'
    _python_name = 'entries'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = entries_child

class operator(String, AllowedValuesMixin):
    """
    Unary operator.
    """
    _version = '251'
    fluent_name = 'operator'
    _python_name = 'operator'

class observable(String, AllowedValuesMixin):
    """
    Observable name.
    """
    _version = '251'
    fluent_name = 'observable'
    _python_name = 'observable'

class factor_1(String, AllowedValuesMixin):
    """
    Observable name.
    """
    _version = '251'
    fluent_name = 'factor-1'
    _python_name = 'factor_1'

class factor_2(String, AllowedValuesMixin):
    """
    Observable name.
    """
    _version = '251'
    fluent_name = 'factor-2'
    _python_name = 'factor_2'

class penalized_observable(String, AllowedValuesMixin):
    """
    Observable name.
    """
    _version = '251'
    fluent_name = 'penalized-observable'
    _python_name = 'penalized_observable'

class target_value(Real):
    """
    Target value.
    """
    _version = '251'
    fluent_name = 'target-value'
    _python_name = 'target_value'

class normalization_1(Real):
    """
    Normalization.
    """
    _version = '251'
    fluent_name = 'normalization'
    _python_name = 'normalization'

class numerator(String, AllowedValuesMixin):
    """
    Observable name.
    """
    _version = '251'
    fluent_name = 'numerator'
    _python_name = 'numerator'

class denominator(String, AllowedValuesMixin):
    """
    Observable name.
    """
    _version = '251'
    fluent_name = 'denominator'
    _python_name = 'denominator'

class integral_type(String, AllowedValuesMixin):
    """
    Integral type.
    """
    _version = '251'
    fluent_name = 'integral-type'
    _python_name = 'integral_type'

class field_variable_1(String, AllowedValuesMixin):
    """
    Integral field variable.
    """
    _version = '251'
    fluent_name = 'field-variable'
    _python_name = 'field_variable'

class target_field(String, AllowedValuesMixin):
    """
    Target field variable.
    """
    _version = '251'
    fluent_name = 'target-field'
    _python_name = 'target_field'

class surfaces_15(StringList, AllowedValuesMixin):
    """
    Integral surfaces.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class integration_domain(String, AllowedValuesMixin):
    """
    Integral volumes.
    """
    _version = '251'
    fluent_name = 'integration-domain'
    _python_name = 'integration_domain'

class zones_9(StringList, AllowedValuesMixin):
    """
    Integral volumes.
    """
    _version = '251'
    fluent_name = 'zones'
    _python_name = 'zones'

class box_bounds(RealList):
    """
    Integral box bounds.
    """
    _version = '251'
    fluent_name = 'box-bounds'
    _python_name = 'box_bounds'

class cell_register(String, AllowedValuesMixin):
    """
    Integral cell register.
    """
    _version = '251'
    fluent_name = 'cell-register'
    _python_name = 'cell_register'

class field_direction(RealList):
    """
    Integral field direction.
    """
    _version = '251'
    fluent_name = 'field-direction'
    _python_name = 'field_direction'

class definition_1_child(Group):
    """
    'child_object_type' of definition.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'definition_child'
    child_names = ['name', 'type', 'walls', 'vector', 'center', 'axis', 'normalized', 'fluid_zones', 'inlets', 'outlets', 'fixed_value', 'observable_list', 'constant', 'combination_type', 'entries', 'operator', 'observable', 'factor_1', 'factor_2', 'penalized_observable', 'target_value', 'normalization', 'numerator', 'denominator', 'integral_type', 'field_variable', 'target_field', 'surfaces', 'integration_domain', 'zones', 'box_bounds', 'cell_register', 'field_direction']
    _child_classes = dict(
        name=name_2,
        type=type_12,
        walls=walls,
        vector=vector_2,
        center=center_2,
        axis=axis_4,
        normalized=normalized,
        fluid_zones=fluid_zones,
        inlets=inlets,
        outlets=outlets,
        fixed_value=fixed_value,
        observable_list=observable_list,
        constant=constant_3,
        combination_type=combination_type,
        entries=entries,
        operator=operator,
        observable=observable,
        factor_1=factor_1,
        factor_2=factor_2,
        penalized_observable=penalized_observable,
        target_value=target_value,
        normalization=normalization_1,
        numerator=numerator,
        denominator=denominator,
        integral_type=integral_type,
        field_variable=field_variable_1,
        target_field=target_field,
        surfaces=surfaces_15,
        integration_domain=integration_domain,
        zones=zones_9,
        box_bounds=box_bounds,
        cell_register=cell_register,
        field_direction=field_direction,
    )

class definition_1(NamedObject[definition_1_child], CreatableNamedObjectMixin[definition_1_child]):
    """
    Adjoint-observables-named named-object-class.
    """
    _version = '251'
    fluent_name = 'definition'
    _python_name = 'definition'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = definition_1_child

class adjoint_observable(String, AllowedValuesMixin):
    """
    The observable used for adjoint evaluation.
    """
    _version = '251'
    fluent_name = 'adjoint-observable'
    _python_name = 'adjoint_observable'

class evaluate(Command):
    """
    Evaluate selected observable.
    """
    _version = '251'
    fluent_name = 'evaluate'
    _python_name = 'evaluate'

class file_name_16(Filename, _OutputFile):
    """
    File name.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class append_data_1(Boolean):
    """
    Append data to file.
    """
    _version = '251'
    fluent_name = 'append-data?'
    _python_name = 'append_data'

class write_to_file_5(Command):
    """
    Write observable to file.
    
    Parameters
    ----------
        file_name : str
            File name.
        append_data : bool
            Append data to file.
    """
    _version = '251'
    fluent_name = 'write-to-file'
    _python_name = 'write_to_file'
    argument_names = ['file_name', 'append_data']
    _child_classes = dict(
        file_name=file_name_16,
        append_data=append_data_1,
    )

class selection(Group):
    """
    Observable selection object.
    """
    _version = '251'
    fluent_name = 'selection'
    _python_name = 'selection'
    child_names = ['adjoint_observable']
    command_names = ['evaluate', 'write_to_file']
    _child_classes = dict(
        adjoint_observable=adjoint_observable,
        evaluate=evaluate,
        write_to_file=write_to_file_5,
    )

class observables(Group):
    """
    The postprocessing options object.
    """
    _version = '251'
    fluent_name = 'observables'
    _python_name = 'observables'
    child_names = ['named_expressions', 'definition', 'selection']
    _child_classes = dict(
        named_expressions=named_expressions,
        definition=definition_1,
        selection=selection,
    )

class default_1(Command):
    """
    Reset methods to default.
    """
    _version = '251'
    fluent_name = 'default'
    _python_name = 'default'

class balanced(Command):
    """
    Set methods to balance accuracy, stability, and speed.
    """
    _version = '251'
    fluent_name = 'balanced'
    _python_name = 'balanced'

class best_match(Command):
    """
    Set methods to best match flow solver settings for accuracy.
    """
    _version = '251'
    fluent_name = 'best-match'
    _python_name = 'best_match'

class flow_solver(String, AllowedValuesMixin):
    """
    Method used by the flow solver.
    """
    _version = '251'
    fluent_name = 'flow-solver'
    _python_name = 'flow_solver'

class adjoint_solver(String, AllowedValuesMixin):
    """
    Method used by the adjoint solver.
    """
    _version = '251'
    fluent_name = 'adjoint-solver'
    _python_name = 'adjoint_solver'

class adjoint_activation(Boolean):
    """
    Activate adjoint computation for this set of equations.
    """
    _version = '251'
    fluent_name = 'adjoint-activation'
    _python_name = 'adjoint_activation'

class adjoint_activation_1(Boolean):
    """
    Activate adjoint computation for this equation.
    """
    _version = '251'
    fluent_name = 'adjoint-activation'
    _python_name = 'adjoint_activation'

class adjoint_equations_child(Group):
    """
    'child_object_type' of adjoint_equations.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'adjoint_equations_child'
    child_names = ['flow_solver', 'adjoint_solver', 'adjoint_activation']
    _child_classes = dict(
        flow_solver=flow_solver,
        adjoint_solver=adjoint_solver,
        adjoint_activation=adjoint_activation_1,
    )

class adjoint_equations(NamedObject[adjoint_equations_child], CreatableNamedObjectMixin[adjoint_equations_child]):
    """
    Associated adjoint equations.
    """
    _version = '251'
    fluent_name = 'adjoint-equations'
    _python_name = 'adjoint_equations'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = adjoint_equations_child

class methods_3_child(Group):
    """
    'child_object_type' of methods.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'methods_child'
    child_names = ['flow_solver', 'adjoint_solver', 'adjoint_activation', 'adjoint_equations']
    _child_classes = dict(
        flow_solver=flow_solver,
        adjoint_solver=adjoint_solver,
        adjoint_activation=adjoint_activation,
        adjoint_equations=adjoint_equations,
    )

class methods_3(NamedObject[methods_3_child], CreatableNamedObjectMixin[methods_3_child]):
    """
    The adjoint solution methods object.
    """
    _version = '251'
    fluent_name = 'methods'
    _python_name = 'methods'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'default', 'balanced', 'best_match']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        default=default_1,
        balanced=balanced,
        best_match=best_match,
    )
    child_object_type = methods_3_child

class solution_based_initialization(Boolean):
    """
    Enable solution-based controls initialization which changes controls options when the adjoint solution is initialized.
    """
    _version = '251'
    fluent_name = 'solution-based-initialization'
    _python_name = 'solution_based_initialization'

class auto_adjust(Boolean):
    """
    Auto-adjust controls during adjoint calculation.
    """
    _version = '251'
    fluent_name = 'auto-adjust'
    _python_name = 'auto_adjust'

class show_advancement_controls(Boolean):
    """
    Show advancement controls.
    """
    _version = '251'
    fluent_name = 'show-advancement-controls'
    _python_name = 'show_advancement_controls'

class apply_precondition(Boolean):
    """
    Apply preconditioning for adjoint calculation.
    """
    _version = '251'
    fluent_name = 'apply-precondition'
    _python_name = 'apply_precondition'

class advancement_child(Real):
    """
    'child_object_type' of advancement.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'advancement_child'

class advancement(NamedObject[advancement_child], CreatableNamedObjectMixin[advancement_child]):
    """
    Adjoint advancement controls object.
    """
    _version = '251'
    fluent_name = 'advancement'
    _python_name = 'advancement'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = advancement_child

class under_relaxation_3_child(Real):
    """
    'child_object_type' of under_relaxation.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'under_relaxation_child'

class under_relaxation_3(NamedObject[under_relaxation_3_child], CreatableNamedObjectMixin[under_relaxation_3_child]):
    """
    Adjoint under-relaxation controls object.
    """
    _version = '251'
    fluent_name = 'under-relaxation'
    _python_name = 'under_relaxation'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = under_relaxation_3_child

class tolerance_5(Real):
    """
    Algebraic multigrid tolerance.
    """
    _version = '251'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'

class max_iterations(Integer):
    """
    Algebraic multigrid maximum iterations.
    """
    _version = '251'
    fluent_name = 'max-iterations'
    _python_name = 'max_iterations'

class show_iterations(Boolean):
    """
    Show algebraic multigrid iterations.
    """
    _version = '251'
    fluent_name = 'show-iterations'
    _python_name = 'show_iterations'

class amg_1(Group):
    """
    Adjoint algebraic multigrid object.
    """
    _version = '251'
    fluent_name = 'amg'
    _python_name = 'amg'
    child_names = ['tolerance', 'max_iterations', 'show_iterations']
    _child_classes = dict(
        tolerance=tolerance_5,
        max_iterations=max_iterations,
        show_iterations=show_iterations,
    )

class strategy(String, AllowedValuesMixin):
    """
    None: allows you to select a single stabilization method to be used throughout the calculation, or none at all.
    Blended: either no scheme (None) or the Dissipation scheme is applied at the beginning, then a second scheme (the Residual Minimization scheme) is used for the remainder of the calculation.
    """
    _version = '251'
    fluent_name = 'strategy'
    _python_name = 'strategy'

class method_12(String, AllowedValuesMixin):
    """
    None: Solves adjoint equations with no stabilization.
    Dissipation: Introduces nonlinear damping in calculation domain.
    Residual Minimization: Uses Krylov subspace method to build a solution with minimum residual.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class damping_factor_1(Real):
    """
    The overall level of dissipation is proportional to this value although the damping level is determined ultimately through a nonlinear process.
    """
    _version = '251'
    fluent_name = 'damping-factor'
    _python_name = 'damping_factor'

class damping_relaxation(Real):
    """
    The damping relaxation can be used to control the rate at which the dissipation is updated as the adjoint solution progresses. As you decrease the value from 1, the rate at which the dissipation is updated is decreased.
    """
    _version = '251'
    fluent_name = 'damping-relaxation'
    _python_name = 'damping_relaxation'

class damping_order(Integer):
    """
    The spatial order of the dissipation. A higher order leads to more intense and localized damping. This can typically be set to be one order larger than the adjoint calculation spatial order.
    """
    _version = '251'
    fluent_name = 'damping-order'
    _python_name = 'damping_order'

class suppression(Boolean):
    """
    As part of the dissipation scheme, the growth of instabilities is stopped by the effect of the dissipation.Enabling the Suppression option ensures that these undesirable patterns will then also decay as the calculation progresses.
    """
    _version = '251'
    fluent_name = 'suppression'
    _python_name = 'suppression'

class default_4(Command):
    """
    Set residual minimization scheme controls to default.
    """
    _version = '251'
    fluent_name = 'default'
    _python_name = 'default'

class dissipation(Group):
    """
    The dissipation method stabilization controls object.
    """
    _version = '251'
    fluent_name = 'dissipation'
    _python_name = 'dissipation'
    child_names = ['damping_factor', 'damping_relaxation', 'damping_order', 'suppression']
    command_names = ['default']
    _child_classes = dict(
        damping_factor=damping_factor_1,
        damping_relaxation=damping_relaxation,
        damping_order=damping_order,
        suppression=suppression,
        default=default_4,
    )

class number_of_modes(Integer):
    """
    Number of modes in the Krylov subspace used to approximate the solution.
    """
    _version = '251'
    fluent_name = 'number-of-modes'
    _python_name = 'number_of_modes'

class manual_expert_controls(Boolean):
    """
    Manually set expert residual minimization controls. When disabled, settings under expert controls will adaptively change according to other control settings.
    """
    _version = '251'
    fluent_name = 'manual-expert-controls'
    _python_name = 'manual_expert_controls'

class number_of_recycled_modes(Integer):
    """
    Number of modes that are selected, stored, and used for the next iteration to speed up the convergence.
    """
    _version = '251'
    fluent_name = 'number-of-recycled-modes'
    _python_name = 'number_of_recycled_modes'

class amg_iterations(Integer):
    """
    Number of AMG iterations in each sub-iteration. Increasing the number may improve the overall convergence, but it also increases the time for each sub-iteration.
    """
    _version = '251'
    fluent_name = 'amg-iterations'
    _python_name = 'amg_iterations'

class expert_controls(Group):
    """
    Residual minimization expert controls object.
    """
    _version = '251'
    fluent_name = 'expert-controls'
    _python_name = 'expert_controls'
    child_names = ['number_of_recycled_modes', 'amg_iterations']
    _child_classes = dict(
        number_of_recycled_modes=number_of_recycled_modes,
        amg_iterations=amg_iterations,
    )

class residual_minimization(Group):
    """
    The residual minimization controls object.
    """
    _version = '251'
    fluent_name = 'residual-minimization'
    _python_name = 'residual_minimization'
    child_names = ['number_of_modes', 'manual_expert_controls', 'expert_controls']
    command_names = ['default']
    _child_classes = dict(
        number_of_modes=number_of_modes,
        manual_expert_controls=manual_expert_controls,
        expert_controls=expert_controls,
        default=default_4,
    )

class current_scheme(Group):
    """
    Current adjoint stabilization scheme controls object.
    """
    _version = '251'
    fluent_name = 'current-scheme'
    _python_name = 'current_scheme'
    child_names = ['method', 'dissipation', 'residual_minimization']
    _child_classes = dict(
        method=method_12,
        dissipation=dissipation,
        residual_minimization=residual_minimization,
    )

class method_13(String, AllowedValuesMixin):
    """
    None: Solves adjoint equations with no stabilization.
    Dissipation: Introduces nonlinear damping in calculation domain.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class auto_detection(Boolean):
    """
    When enabled the first scheme will be used until divergence or slow convergence in the adjoint residual is detected.
    """
    _version = '251'
    fluent_name = 'auto-detection'
    _python_name = 'auto_detection'

class iterations_2(Integer):
    """
    Iterations to be run before switching to the second scheme.
    """
    _version = '251'
    fluent_name = 'iterations'
    _python_name = 'iterations'

class first_scheme(Group):
    """
    First adjoint stabilization scheme controls object.
    """
    _version = '251'
    fluent_name = 'first-scheme'
    _python_name = 'first_scheme'
    child_names = ['method', 'auto_detection', 'iterations', 'dissipation']
    _child_classes = dict(
        method=method_13,
        auto_detection=auto_detection,
        iterations=iterations_2,
        dissipation=dissipation,
    )

class method_14(String, AllowedValuesMixin):
    """
    Residual Minimization: Uses Krylov subspace method to build a solution with minimum residual.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class second_scheme(Group):
    """
    First adjoint stabilization scheme controls object.
    """
    _version = '251'
    fluent_name = 'second-scheme'
    _python_name = 'second_scheme'
    child_names = ['method', 'iterations', 'residual_minimization']
    _child_classes = dict(
        method=method_14,
        iterations=iterations_2,
        residual_minimization=residual_minimization,
    )

class default_3(Command):
    """
    Set stabilization strategy controls to default for most cases.
    """
    _version = '251'
    fluent_name = 'default'
    _python_name = 'default'

class complex_case(Command):
    """
    Set stabilization strategy controls to default values for complex case.
    """
    _version = '251'
    fluent_name = 'complex-case'
    _python_name = 'complex_case'

class stabilization_1(Group):
    """
    The adjoint stabilization controls object.
    """
    _version = '251'
    fluent_name = 'stabilization'
    _python_name = 'stabilization'
    child_names = ['strategy', 'current_scheme', 'first_scheme', 'second_scheme']
    command_names = ['default', 'complex_case']
    _child_classes = dict(
        strategy=strategy,
        current_scheme=current_scheme,
        first_scheme=first_scheme,
        second_scheme=second_scheme,
        default=default_3,
        complex_case=complex_case,
    )

class default_2(Command):
    """
    Set controls to default.
    """
    _version = '251'
    fluent_name = 'default'
    _python_name = 'default'

class controls_2(Group):
    """
    The adjoint controls object.
    """
    _version = '251'
    fluent_name = 'controls'
    _python_name = 'controls'
    child_names = ['solution_based_initialization', 'auto_adjust', 'show_advancement_controls', 'apply_precondition', 'advancement', 'under_relaxation', 'amg', 'stabilization']
    command_names = ['default']
    _child_classes = dict(
        solution_based_initialization=solution_based_initialization,
        auto_adjust=auto_adjust,
        show_advancement_controls=show_advancement_controls,
        apply_precondition=apply_precondition,
        advancement=advancement,
        under_relaxation=under_relaxation_3,
        amg=amg_1,
        stabilization=stabilization_1,
        default=default_2,
    )

class adjoint_equations_1_child(Group):
    """
    'child_object_type' of adjoint_equations.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'adjoint_equations_child'
    child_names = ['check_convergence', 'absolute_criteria']
    _child_classes = dict(
        check_convergence=check_convergence,
        absolute_criteria=absolute_criteria,
    )

class adjoint_equations_1(NamedObject[adjoint_equations_1_child], CreatableNamedObjectMixin[adjoint_equations_1_child]):
    """
    'adjoint_equations' child.
    """
    _version = '251'
    fluent_name = 'adjoint-equations'
    _python_name = 'adjoint_equations'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = adjoint_equations_1_child

class print_6(Boolean):
    """
    Specifies whether adjoint residuals will be printed during iteration.
    """
    _version = '251'
    fluent_name = 'print?'
    _python_name = 'print'

class plot_13(Boolean):
    """
    Specifies whether adjoint residuals will be plotted during iteration.
    """
    _version = '251'
    fluent_name = 'plot?'
    _python_name = 'plot'

class n_display_1(Integer):
    """
    The number of most recent adjoint residuals to display in plots.
    """
    _version = '251'
    fluent_name = 'n-display'
    _python_name = 'n_display'

class options_21(Group):
    """
    'options' child.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['print', 'plot', 'n_display']
    _child_classes = dict(
        print=print_6,
        plot=plot_13,
        n_display=n_display_1,
    )

class monitors(Group):
    """
    The residual monitors object.
    """
    _version = '251'
    fluent_name = 'monitors'
    _python_name = 'monitors'
    child_names = ['adjoint_equations', 'options']
    command_names = ['plot']
    _child_classes = dict(
        adjoint_equations=adjoint_equations_1,
        options=options_21,
        plot=plot,
    )

class iteration_count(Integer):
    """
    Number of adjoint iterations.
    """
    _version = '251'
    fluent_name = 'iteration-count'
    _python_name = 'iteration_count'

class strategy_1(Command):
    """
    Initialize the blended stabilization strategies: reset to the 1st scheme.
    """
    _version = '251'
    fluent_name = 'strategy'
    _python_name = 'strategy'

class scheme_1(Command):
    """
    Initialize the stabilization scheme.
    """
    _version = '251'
    fluent_name = 'scheme'
    _python_name = 'scheme'

class initialize_stabilization(Group):
    """
    The stabilization initialization object.
    """
    _version = '251'
    fluent_name = 'initialize-stabilization'
    _python_name = 'initialize_stabilization'
    command_names = ['strategy', 'scheme']
    _child_classes = dict(
        strategy=strategy_1,
        scheme=scheme_1,
    )

class file_name_17(String):
    """
    File name prefix for auto-saved files.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class frequency_6(Integer):
    """
    Autosave adjoint iteration frequency.
    """
    _version = '251'
    fluent_name = 'frequency'
    _python_name = 'frequency'

class max_files_1(Integer):
    """
    Maximum number of files retained.
    """
    _version = '251'
    fluent_name = 'max-files'
    _python_name = 'max_files'

class autosave(Group):
    """
    Menu for adjoint autosave.
    """
    _version = '251'
    fluent_name = 'autosave'
    _python_name = 'autosave'
    child_names = ['file_name', 'frequency', 'max_files']
    _child_classes = dict(
        file_name=file_name_17,
        frequency=frequency_6,
        max_files=max_files_1,
    )

class calculation_activities(Group):
    """
    The calculation activities object.
    """
    _version = '251'
    fluent_name = 'calculation-activities'
    _python_name = 'calculation_activities'
    child_names = ['autosave']
    _child_classes = dict(
        autosave=autosave,
    )

class initialize_2(Command):
    """
    Initialize adjoint solution and stabilization scheme.
    """
    _version = '251'
    fluent_name = 'initialize'
    _python_name = 'initialize'

class calculate_1(Command):
    """
    Start evaluating the adjoint solution.
    """
    _version = '251'
    fluent_name = 'calculate'
    _python_name = 'calculate'

class interrupt_1(Command):
    """
    Interrupt the adjoint calculation.
    """
    _version = '251'
    fluent_name = 'interrupt'
    _python_name = 'interrupt'

class calculation(Group):
    """
    The adjoint calculation object.
    """
    _version = '251'
    fluent_name = 'calculation'
    _python_name = 'calculation'
    child_names = ['iteration_count', 'initialize_stabilization', 'calculation_activities']
    command_names = ['initialize', 'calculate', 'interrupt']
    _child_classes = dict(
        iteration_count=iteration_count,
        initialize_stabilization=initialize_stabilization,
        calculation_activities=calculation_activities,
        initialize=initialize_2,
        calculate=calculate_1,
        interrupt=interrupt_1,
    )

class sensitivity_orientation(String, AllowedValuesMixin):
    """
    Changes contour and vector plots to reflect sensitivity orientation.
    """
    _version = '251'
    fluent_name = 'sensitivity-orientation'
    _python_name = 'sensitivity_orientation'

class method_15(String, AllowedValuesMixin):
    """
    Changes smoothing method of contour and vector plots.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class smoothness(Real):
    """
    Changes smoothing factor of contour and vector plots.
    """
    _version = '251'
    fluent_name = 'smoothness'
    _python_name = 'smoothness'

class surface_shape_sensitivity(Group):
    """
    'surface_shape_sensitivity' child.
    """
    _version = '251'
    fluent_name = 'surface-shape-sensitivity'
    _python_name = 'surface_shape_sensitivity'
    child_names = ['method', 'smoothness']
    _child_classes = dict(
        method=method_15,
        smoothness=smoothness,
    )

class reset_default(Command):
    """
    Set postprocess options to default values.
    """
    _version = '251'
    fluent_name = 'reset-default'
    _python_name = 'reset_default'

class postprocess_options(Group):
    """
    The postprocessing options object.
    """
    _version = '251'
    fluent_name = 'postprocess-options'
    _python_name = 'postprocess_options'
    child_names = ['sensitivity_orientation', 'surface_shape_sensitivity']
    command_names = ['reset_default']
    _child_classes = dict(
        sensitivity_orientation=sensitivity_orientation,
        surface_shape_sensitivity=surface_shape_sensitivity,
        reset_default=reset_default,
    )

class boundary_choice(String, AllowedValuesMixin):
    """
    Reporting boundary.
    """
    _version = '251'
    fluent_name = 'boundary-choice'
    _python_name = 'boundary_choice'

class report_3(Command):
    """
    Boundary condition sensitivity report in console.
    """
    _version = '251'
    fluent_name = 'report'
    _python_name = 'report'

class file_name_18(Filename):
    """
    File name.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class write_to_file_6(Command):
    """
    Write report to file.
    
    Parameters
    ----------
        file_name : str
            File name.
        append_data : bool
            Append data to file.
    """
    _version = '251'
    fluent_name = 'write-to-file'
    _python_name = 'write_to_file'
    argument_names = ['file_name', 'append_data']
    _child_classes = dict(
        file_name=file_name_18,
        append_data=append_data_1,
    )

class reporting(Group):
    """
    Adjoint reporting object.
    """
    _version = '251'
    fluent_name = 'reporting'
    _python_name = 'reporting'
    child_names = ['boundary_choice']
    command_names = ['report', 'write_to_file']
    _child_classes = dict(
        boundary_choice=boundary_choice,
        report=report_3,
        write_to_file=write_to_file_6,
    )

class method_16(String, AllowedValuesMixin):
    """
    Mesh morphing method to smooth the surface sensitivity field and to provide smooth distortions not only of the boundary mesh.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class constraint_method(String, AllowedValuesMixin):
    """
    With the enhanced constraint method, the specified morphing method will drive the free-form deformation based on the design objective and the region condition.
    """
    _version = '251'
    fluent_name = 'constraint-method'
    _python_name = 'constraint_method'

class auto_select_smoothness(Boolean):
    """
    Auto-select smoothness of the deformed geometry.
    """
    _version = '251'
    fluent_name = 'auto-select-smoothness'
    _python_name = 'auto_select_smoothness'

class max_iterations_1(Integer):
    """
    Prescribed motion maximum iterations.
    """
    _version = '251'
    fluent_name = 'max-iterations'
    _python_name = 'max_iterations'

class constraint_relaxation(Real):
    """
    Prescribed motion constraint relaxation.
    """
    _version = '251'
    fluent_name = 'constraint-relaxation'
    _python_name = 'constraint_relaxation'

class preconditioning(Real):
    """
    Prescribed motion preconditioning.
    """
    _version = '251'
    fluent_name = 'preconditioning'
    _python_name = 'preconditioning'

class prescribed_motions(Group):
    """
    Prescribed motions object.
    """
    _version = '251'
    fluent_name = 'prescribed-motions'
    _python_name = 'prescribed_motions'
    child_names = ['max_iterations', 'constraint_relaxation', 'preconditioning']
    _child_classes = dict(
        max_iterations=max_iterations_1,
        constraint_relaxation=constraint_relaxation,
        preconditioning=preconditioning,
    )

class mask_shape_sensitivity(Boolean):
    """
    When enabled, this option will mask the shape sensitivity along the fixed surfaces to reduce the freeform deformation. This improves the deformation smoothness by reducing the need for correction during the secondary morphing.
    """
    _version = '251'
    fluent_name = 'mask-shape-sensitivity'
    _python_name = 'mask_shape_sensitivity'

class solving_primary_morpher(Boolean):
    """
    When enabled, this option specifies the standard morphing method (primary morpher) to calculate an initial approximation for the constraint equations. The radial basis function (secondary morpher) then enforces the design constraint by refining the approximation of the constraint equations.
    """
    _version = '251'
    fluent_name = 'solving-primary-morpher'
    _python_name = 'solving_primary_morpher'

class max_iterations_standard(Integer):
    """
    Freeform motion maximum iterations.
    """
    _version = '251'
    fluent_name = 'max-iterations-standard'
    _python_name = 'max_iterations_standard'

class max_iterations_enhanced(Integer):
    """
    Freeform motion maximum iterations.
    """
    _version = '251'
    fluent_name = 'max-iterations-enhanced'
    _python_name = 'max_iterations_enhanced'

class constraint_relaxation_1(Real):
    """
    Freeform motion constraint relaxation.
    """
    _version = '251'
    fluent_name = 'constraint-relaxation'
    _python_name = 'constraint_relaxation'

class parameter_relaxation(Real):
    """
    Freeform motion parameter relaxation.
    """
    _version = '251'
    fluent_name = 'parameter-relaxation'
    _python_name = 'parameter_relaxation'

class preconditioning_standard(Real):
    """
    Freeform motion preconditioning.
    """
    _version = '251'
    fluent_name = 'preconditioning-standard'
    _python_name = 'preconditioning_standard'

class preconditioning_enhanced(Real):
    """
    Freeform motion preconditioning.
    """
    _version = '251'
    fluent_name = 'preconditioning-enhanced'
    _python_name = 'preconditioning_enhanced'

class freeform_motions(Group):
    """
    Freeform motions object.
    """
    _version = '251'
    fluent_name = 'freeform-motions'
    _python_name = 'freeform_motions'
    child_names = ['mask_shape_sensitivity', 'solving_primary_morpher', 'max_iterations_standard', 'max_iterations_enhanced', 'constraint_relaxation', 'parameter_relaxation', 'preconditioning_standard', 'preconditioning_enhanced']
    _child_classes = dict(
        mask_shape_sensitivity=mask_shape_sensitivity,
        solving_primary_morpher=solving_primary_morpher,
        max_iterations_standard=max_iterations_standard,
        max_iterations_enhanced=max_iterations_enhanced,
        constraint_relaxation=constraint_relaxation_1,
        parameter_relaxation=parameter_relaxation,
        preconditioning_standard=preconditioning_standard,
        preconditioning_enhanced=preconditioning_enhanced,
    )

class second_order(Boolean):
    """
    When enabled, the second order radial basis function will be used to provide additional smoothness of the deformation. Note that enabling this option may increase the computation time by a factor of 2 - 4 and increase memory by a factor of 3.
    """
    _version = '251'
    fluent_name = 'second-order'
    _python_name = 'second_order'

class increase_local_smoothness(Boolean):
    """
    When enabled, more local control points will be used to improve the smoothness of the deformation. Enabling this option may increase memory cost and computational time.
    """
    _version = '251'
    fluent_name = 'increase-local-smoothness'
    _python_name = 'increase_local_smoothness'

class increase_global_smoothness(Boolean):
    """
    When enabled, more global control points will be used to improve the smoothness of the deformation. Enabling this option may increase memory cost and computational time.
    """
    _version = '251'
    fluent_name = 'increase-global-smoothness'
    _python_name = 'increase_global_smoothness'

class tolerance_6(Real):
    """
    Tolerance on constraint.
    """
    _version = '251'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'

class constraint_settings(Group):
    """
    Constraint settings.
    """
    _version = '251'
    fluent_name = 'constraint-settings'
    _python_name = 'constraint_settings'
    child_names = ['second_order', 'increase_local_smoothness', 'increase_global_smoothness', 'tolerance']
    _child_classes = dict(
        second_order=second_order,
        increase_local_smoothness=increase_local_smoothness,
        increase_global_smoothness=increase_global_smoothness,
        tolerance=tolerance_6,
    )

class constraints(Real):
    """
    Tolerance on constraint.
    """
    _version = '251'
    fluent_name = 'constraints'
    _python_name = 'constraints'

class parameters_4(Real):
    """
    Tolerance on parameters.
    """
    _version = '251'
    fluent_name = 'parameters'
    _python_name = 'parameters'

class tolerances(Group):
    """
    Motion tolerances object.
    """
    _version = '251'
    fluent_name = 'tolerances'
    _python_name = 'tolerances'
    child_names = ['constraints', 'parameters']
    _child_classes = dict(
        constraints=constraints,
        parameters=parameters_4,
    )

class polynomials(Group):
    """
    Design tool polynomials numerics object.
    """
    _version = '251'
    fluent_name = 'polynomials'
    _python_name = 'polynomials'
    child_names = ['auto_select_smoothness', 'prescribed_motions', 'freeform_motions', 'constraint_settings', 'tolerances']
    _child_classes = dict(
        auto_select_smoothness=auto_select_smoothness,
        prescribed_motions=prescribed_motions,
        freeform_motions=freeform_motions,
        constraint_settings=constraint_settings,
        tolerances=tolerances,
    )

class kernel_type_1(String, AllowedValuesMixin):
    """
    The basis function of the radial basis function, which has a strong effect on the speed of convergence, mesh quality, and smoothness of deformation.
    """
    _version = '251'
    fluent_name = 'kernel-type'
    _python_name = 'kernel_type'

class max_iterations_2(Integer):
    """
    Freeform motion RBF maximum main iterations.
    """
    _version = '251'
    fluent_name = 'max-iterations'
    _python_name = 'max_iterations'

class tolerance_7(Real):
    """
    RBF linear solver tolerance.
    """
    _version = '251'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'

class max_subiteration(Integer):
    """
    Maximum number of iterations used in RBF linear solver.
    """
    _version = '251'
    fluent_name = 'max-subiteration'
    _python_name = 'max_subiteration'

class number_of_modes_1(Integer):
    """
    Number of modes used in RBF linear solver.
    """
    _version = '251'
    fluent_name = 'number-of-modes'
    _python_name = 'number_of_modes'

class linear_solver(Group):
    """
    RBF linear solver settings object.
    """
    _version = '251'
    fluent_name = 'linear-solver'
    _python_name = 'linear_solver'
    child_names = ['tolerance', 'max_subiteration', 'number_of_modes']
    _child_classes = dict(
        tolerance=tolerance_7,
        max_subiteration=max_subiteration,
        number_of_modes=number_of_modes_1,
    )

class freeform_motions_1(Group):
    """
    Freeform motions object.
    """
    _version = '251'
    fluent_name = 'freeform-motions'
    _python_name = 'freeform_motions'
    child_names = ['mask_shape_sensitivity', 'solving_primary_morpher', 'kernel_type', 'max_iterations', 'linear_solver']
    _child_classes = dict(
        mask_shape_sensitivity=mask_shape_sensitivity,
        solving_primary_morpher=solving_primary_morpher,
        kernel_type=kernel_type_1,
        max_iterations=max_iterations_2,
        linear_solver=linear_solver,
    )

class rbf(Group):
    """
    Design tool RBF numerics object.
    """
    _version = '251'
    fluent_name = 'rbf'
    _python_name = 'rbf'
    child_names = ['freeform_motions', 'constraint_settings']
    _child_classes = dict(
        freeform_motions=freeform_motions_1,
        constraint_settings=constraint_settings,
    )

class max_iterations_3(Integer):
    """
    Freeform motion maximum iterations.
    """
    _version = '251'
    fluent_name = 'max-iterations'
    _python_name = 'max_iterations'

class freeform_motions_2(Group):
    """
    Freeform motions object.
    """
    _version = '251'
    fluent_name = 'freeform-motions'
    _python_name = 'freeform_motions'
    child_names = ['max_iterations']
    _child_classes = dict(
        max_iterations=max_iterations_3,
    )

class direct_interpolation(Group):
    """
    Design tool direct interpolation numerics object.
    """
    _version = '251'
    fluent_name = 'direct-interpolation'
    _python_name = 'direct_interpolation'
    child_names = ['freeform_motions']
    _child_classes = dict(
        freeform_motions=freeform_motions_2,
    )

class default_5(Command):
    """
    Reset morphing numerics to default.
    """
    _version = '251'
    fluent_name = 'default'
    _python_name = 'default'

class numerics_1(Group):
    """
    Design tool numerics object.
    """
    _version = '251'
    fluent_name = 'numerics'
    _python_name = 'numerics'
    child_names = ['polynomials', 'rbf', 'direct_interpolation', 'constraint_settings']
    command_names = ['default']
    _child_classes = dict(
        polynomials=polynomials,
        rbf=rbf,
        direct_interpolation=direct_interpolation,
        constraint_settings=constraint_settings,
        default=default_5,
    )

class morpher(Group):
    """
    Design tool morphing object.
    """
    _version = '251'
    fluent_name = 'morpher'
    _python_name = 'morpher'
    child_names = ['method', 'constraint_method', 'numerics']
    _child_classes = dict(
        method=method_16,
        constraint_method=constraint_method,
        numerics=numerics_1,
    )

class modifiable_zones(StringList, AllowedValuesMixin):
    """
    Modifiable design zones.
    """
    _version = '251'
    fluent_name = 'modifiable-zones'
    _python_name = 'modifiable_zones'

class region_type(String, AllowedValuesMixin):
    """
    Design region type.
    """
    _version = '251'
    fluent_name = 'region-type'
    _python_name = 'region_type'

class show_bounding_region(Boolean):
    """
    Show bounding region.
    """
    _version = '251'
    fluent_name = 'show-bounding-region'
    _python_name = 'show_bounding_region'

class auto_display(Boolean):
    """
    Auto-display bounding region.
    """
    _version = '251'
    fluent_name = 'auto-display'
    _python_name = 'auto_display'

class x_4(RealList):
    """
    Design region X extent.
    """
    _version = '251'
    fluent_name = 'x'
    _python_name = 'x'

class y_4(RealList):
    """
    Design region Y extent.
    """
    _version = '251'
    fluent_name = 'y'
    _python_name = 'y'

class z_4(RealList):
    """
    Design region Z extent.
    """
    _version = '251'
    fluent_name = 'z'
    _python_name = 'z'

class extent(Group):
    """
    Cartesian design region extents.
    """
    _version = '251'
    fluent_name = 'extent'
    _python_name = 'extent'
    child_names = ['x', 'y', 'z']
    _child_classes = dict(
        x=x_4,
        y=y_4,
        z=z_4,
    )

class points(Integer):
    """
    Number of points.
    """
    _version = '251'
    fluent_name = 'points'
    _python_name = 'points'

class motion_enabled(Boolean):
    """
    Enable motion of points in this direction.
    """
    _version = '251'
    fluent_name = 'motion-enabled'
    _python_name = 'motion_enabled'

class invariant(Boolean):
    """
    Enable motion of points in this direction.
    """
    _version = '251'
    fluent_name = 'invariant'
    _python_name = 'invariant'

class invariant_expert_controls_child(Boolean):
    """
    'child_object_type' of invariant_expert_controls.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'invariant_expert_controls_child'

class invariant_expert_controls(ListObject[invariant_expert_controls_child]):
    """
    Advanced settings for invariant motion.
    """
    _version = '251'
    fluent_name = 'invariant-expert-controls'
    _python_name = 'invariant_expert_controls'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = invariant_expert_controls_child

class symmetric(Boolean):
    """
    Symmetric region condition.
    """
    _version = '251'
    fluent_name = 'symmetric'
    _python_name = 'symmetric'

class enabled_68(Boolean):
    """
    Enable custom symmetry plane.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class plane(Real):
    """
    Custom symmetry plane.
    """
    _version = '251'
    fluent_name = 'plane'
    _python_name = 'plane'

class custom_plane(Group):
    """
    Custom symmetry plane.
    """
    _version = '251'
    fluent_name = 'custom-plane'
    _python_name = 'custom_plane'
    child_names = ['enabled', 'plane']
    _child_classes = dict(
        enabled=enabled_68,
        plane=plane,
    )

class periodicity_1(Integer):
    """
    Periodicity of region condition.
    """
    _version = '251'
    fluent_name = 'periodicity'
    _python_name = 'periodicity'

class x_5(Group):
    """
    Region conditions in the X direction.
    """
    _version = '251'
    fluent_name = 'x'
    _python_name = 'x'
    child_names = ['points', 'motion_enabled', 'invariant', 'invariant_expert_controls', 'symmetric', 'custom_plane', 'periodicity']
    _child_classes = dict(
        points=points,
        motion_enabled=motion_enabled,
        invariant=invariant,
        invariant_expert_controls=invariant_expert_controls,
        symmetric=symmetric,
        custom_plane=custom_plane,
        periodicity=periodicity_1,
    )

class y_5(Group):
    """
    Region conditions in the Y direction.
    """
    _version = '251'
    fluent_name = 'y'
    _python_name = 'y'
    child_names = ['points', 'motion_enabled', 'invariant', 'invariant_expert_controls', 'symmetric', 'custom_plane', 'periodicity']
    _child_classes = dict(
        points=points,
        motion_enabled=motion_enabled,
        invariant=invariant,
        invariant_expert_controls=invariant_expert_controls,
        symmetric=symmetric,
        custom_plane=custom_plane,
        periodicity=periodicity_1,
    )

class z_5(Group):
    """
    Region conditions in the Z direction.
    """
    _version = '251'
    fluent_name = 'z'
    _python_name = 'z'
    child_names = ['points', 'motion_enabled', 'invariant', 'invariant_expert_controls', 'symmetric', 'custom_plane', 'periodicity']
    _child_classes = dict(
        points=points,
        motion_enabled=motion_enabled,
        invariant=invariant,
        invariant_expert_controls=invariant_expert_controls,
        symmetric=symmetric,
        custom_plane=custom_plane,
        periodicity=periodicity_1,
    )

class theta_2(Group):
    """
    Region conditions in the theta direction.
    """
    _version = '251'
    fluent_name = 'theta'
    _python_name = 'theta'
    child_names = ['points', 'motion_enabled', 'invariant', 'invariant_expert_controls', 'symmetric', 'custom_plane', 'periodicity']
    _child_classes = dict(
        points=points,
        motion_enabled=motion_enabled,
        invariant=invariant,
        invariant_expert_controls=invariant_expert_controls,
        symmetric=symmetric,
        custom_plane=custom_plane,
        periodicity=periodicity_1,
    )

class radial(Group):
    """
    Region conditions in the radial direction.
    """
    _version = '251'
    fluent_name = 'radial'
    _python_name = 'radial'
    child_names = ['points', 'motion_enabled', 'invariant', 'invariant_expert_controls', 'symmetric', 'custom_plane', 'periodicity']
    _child_classes = dict(
        points=points,
        motion_enabled=motion_enabled,
        invariant=invariant,
        invariant_expert_controls=invariant_expert_controls,
        symmetric=symmetric,
        custom_plane=custom_plane,
        periodicity=periodicity_1,
    )

class axial(Group):
    """
    Region conditions in the axial direction.
    """
    _version = '251'
    fluent_name = 'axial'
    _python_name = 'axial'
    child_names = ['points', 'motion_enabled', 'invariant', 'invariant_expert_controls', 'symmetric', 'custom_plane', 'periodicity']
    _child_classes = dict(
        points=points,
        motion_enabled=motion_enabled,
        invariant=invariant,
        invariant_expert_controls=invariant_expert_controls,
        symmetric=symmetric,
        custom_plane=custom_plane,
        periodicity=periodicity_1,
    )

class enabled_69(Boolean):
    """
    Enable region boundary continuity.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class definition_2(String, AllowedValuesMixin):
    """
    Enable region boundary continuity.
    """
    _version = '251'
    fluent_name = 'definition'
    _python_name = 'definition'

class continuity_order(Integer):
    """
    Uniform continuity order.
    """
    _version = '251'
    fluent_name = 'continuity-order'
    _python_name = 'continuity_order'

class in_plane_motion_only(Boolean):
    """
    In-plane motion only.
    """
    _version = '251'
    fluent_name = 'in-plane-motion-only'
    _python_name = 'in_plane_motion_only'

class x_motion(Boolean):
    """
    X-motion enabled.
    """
    _version = '251'
    fluent_name = 'x-motion'
    _python_name = 'x_motion'

class x_continuity(Integer):
    """
    Continuity in the X direction.
    """
    _version = '251'
    fluent_name = 'x-continuity'
    _python_name = 'x_continuity'

class y_motion(Boolean):
    """
    Y-motion enabled.
    """
    _version = '251'
    fluent_name = 'y-motion'
    _python_name = 'y_motion'

class y_continuity(Integer):
    """
    Continuity in the Y direction.
    """
    _version = '251'
    fluent_name = 'y-continuity'
    _python_name = 'y_continuity'

class z_motion(Boolean):
    """
    Z-motion enabled.
    """
    _version = '251'
    fluent_name = 'z-motion'
    _python_name = 'z_motion'

class z_continuity(Integer):
    """
    Continuity in the Z direction.
    """
    _version = '251'
    fluent_name = 'z-continuity'
    _python_name = 'z_continuity'

class theta_motion(Boolean):
    """
    Theta-motion enabled.
    """
    _version = '251'
    fluent_name = 'theta-motion'
    _python_name = 'theta_motion'

class theta_continuity(Integer):
    """
    Continuity in the theta direction.
    """
    _version = '251'
    fluent_name = 'theta-continuity'
    _python_name = 'theta_continuity'

class radial_motion(Boolean):
    """
    Radial-motion enabled.
    """
    _version = '251'
    fluent_name = 'radial-motion'
    _python_name = 'radial_motion'

class radial_continuity(Integer):
    """
    Continuity in the radial direction.
    """
    _version = '251'
    fluent_name = 'radial-continuity'
    _python_name = 'radial_continuity'

class axial_motion(Boolean):
    """
    Axial-motion enabled.
    """
    _version = '251'
    fluent_name = 'axial-motion'
    _python_name = 'axial_motion'

class axial_continuity(Integer):
    """
    Continuity in the axial direction.
    """
    _version = '251'
    fluent_name = 'axial-continuity'
    _python_name = 'axial_continuity'

class specify_boundary_child(Group):
    """
    'child_object_type' of specify_boundary.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'specify_boundary_child'
    child_names = ['in_plane_motion_only', 'x_motion', 'x_continuity', 'y_motion', 'y_continuity', 'z_motion', 'z_continuity', 'theta_motion', 'theta_continuity', 'radial_motion', 'radial_continuity', 'axial_motion', 'axial_continuity']
    _child_classes = dict(
        in_plane_motion_only=in_plane_motion_only,
        x_motion=x_motion,
        x_continuity=x_continuity,
        y_motion=y_motion,
        y_continuity=y_continuity,
        z_motion=z_motion,
        z_continuity=z_continuity,
        theta_motion=theta_motion,
        theta_continuity=theta_continuity,
        radial_motion=radial_motion,
        radial_continuity=radial_continuity,
        axial_motion=axial_motion,
        axial_continuity=axial_continuity,
    )

class specify_boundary(NamedObject[specify_boundary_child], CreatableNamedObjectMixin[specify_boundary_child]):
    """
    Design region boundary continuity settings.
    """
    _version = '251'
    fluent_name = 'specify-boundary'
    _python_name = 'specify_boundary'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = specify_boundary_child

class boundary_continuity(Group):
    """
    Region boundary continuity conditions.
    """
    _version = '251'
    fluent_name = 'boundary-continuity'
    _python_name = 'boundary_continuity'
    child_names = ['enabled', 'definition', 'continuity_order', 'specify_boundary']
    _child_classes = dict(
        enabled=enabled_69,
        definition=definition_2,
        continuity_order=continuity_order,
        specify_boundary=specify_boundary,
    )

class conditions(Group):
    """
    Region conditions.
    """
    _version = '251'
    fluent_name = 'conditions'
    _python_name = 'conditions'
    child_names = ['x', 'y', 'z', 'theta', 'radial', 'axial', 'boundary_continuity']
    _child_classes = dict(
        x=x_5,
        y=y_5,
        z=z_5,
        theta=theta_2,
        radial=radial,
        axial=axial,
        boundary_continuity=boundary_continuity,
    )

class cartesian(Group):
    """
    Design tool cartesian region object.
    """
    _version = '251'
    fluent_name = 'cartesian'
    _python_name = 'cartesian'
    child_names = ['extent', 'conditions']
    _child_classes = dict(
        extent=extent,
        conditions=conditions,
    )

class origin_5(RealList):
    """
    Cylindrical design region origin definition.
    """
    _version = '251'
    fluent_name = 'origin'
    _python_name = 'origin'

class axis_5(RealList):
    """
    Cylindrical design region axis definition.
    """
    _version = '251'
    fluent_name = 'axis'
    _python_name = 'axis'

class radial_1(RealList):
    """
    Cylindrical design region radial definition.
    """
    _version = '251'
    fluent_name = 'radial'
    _python_name = 'radial'

class coordinate_system_1(Group):
    """
    Design tool cylindrical frame of reference object.
    """
    _version = '251'
    fluent_name = 'coordinate-system'
    _python_name = 'coordinate_system'
    child_names = ['origin', 'axis', 'radial']
    _child_classes = dict(
        origin=origin_5,
        axis=axis_5,
        radial=radial_1,
    )

class theta_3(RealList):
    """
    Design region theta extent.
    """
    _version = '251'
    fluent_name = 'theta'
    _python_name = 'theta'

class radial_2(RealList):
    """
    Design region radial extent.
    """
    _version = '251'
    fluent_name = 'radial'
    _python_name = 'radial'

class axial_1(RealList):
    """
    Design region axial extent.
    """
    _version = '251'
    fluent_name = 'axial'
    _python_name = 'axial'

class extent_1(Group):
    """
    Cylindrical design region extents.
    """
    _version = '251'
    fluent_name = 'extent'
    _python_name = 'extent'
    child_names = ['theta', 'radial', 'axial']
    _child_classes = dict(
        theta=theta_3,
        radial=radial_2,
        axial=axial_1,
    )

class cylindrical(Group):
    """
    Design tool cartesian region object.
    """
    _version = '251'
    fluent_name = 'cylindrical'
    _python_name = 'cylindrical'
    child_names = ['coordinate_system', 'extent', 'conditions']
    _child_classes = dict(
        coordinate_system=coordinate_system_1,
        extent=extent_1,
        conditions=conditions,
    )

class bounded_zones(StringList, AllowedValuesMixin):
    """
    Zones used to determine region bounds.
    """
    _version = '251'
    fluent_name = 'bounded-zones'
    _python_name = 'bounded_zones'

class comfortable_region(Boolean):
    """
    Use comfortable region than the selected zones.
    """
    _version = '251'
    fluent_name = 'comfortable-region'
    _python_name = 'comfortable_region'

class automatic_coordinate(Boolean):
    """
    Update the cylindrical coordinate system automatically.
    """
    _version = '251'
    fluent_name = 'automatic-coordinate'
    _python_name = 'automatic_coordinate'

class get_bounds(Command):
    """
    Get bounds based on selects zones.
    
    Parameters
    ----------
        bounded_zones : List
            Zones used to determine region bounds.
        comfortable_region : bool
            Use comfortable region than the selected zones.
        automatic_coordinate : bool
            Update the cylindrical coordinate system automatically.
    """
    _version = '251'
    fluent_name = 'get-bounds'
    _python_name = 'get_bounds'
    argument_names = ['bounded_zones', 'comfortable_region', 'automatic_coordinate']
    _child_classes = dict(
        bounded_zones=bounded_zones,
        comfortable_region=comfortable_region,
        automatic_coordinate=automatic_coordinate,
    )

class larger_region(Command):
    """
    Enlarge current region extent.
    """
    _version = '251'
    fluent_name = 'larger-region'
    _python_name = 'larger_region'

class smaller_region(Command):
    """
    Shrink current region extent.
    """
    _version = '251'
    fluent_name = 'smaller-region'
    _python_name = 'smaller_region'

class region(Group):
    """
    Design tool region object.
    """
    _version = '251'
    fluent_name = 'region'
    _python_name = 'region'
    child_names = ['modifiable_zones', 'region_type', 'show_bounding_region', 'auto_display', 'cartesian', 'cylindrical']
    command_names = ['get_bounds', 'larger_region', 'smaller_region']
    _child_classes = dict(
        modifiable_zones=modifiable_zones,
        region_type=region_type,
        show_bounding_region=show_bounding_region,
        auto_display=auto_display,
        cartesian=cartesian,
        cylindrical=cylindrical,
        get_bounds=get_bounds,
        larger_region=larger_region,
        smaller_region=smaller_region,
    )

class surfaces_16(StringList, AllowedValuesMixin):
    """
    Fixed walls condition.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class imported_surfaces(StringList, AllowedValuesMixin):
    """
    Imported surfaces selection.
    """
    _version = '251'
    fluent_name = 'imported-surfaces'
    _python_name = 'imported_surfaces'

class fit_imported_surfaces(Boolean):
    """
    Prescribe that the Bounded Surfaces deforms so as to conform to the Imported Surfaces.
    """
    _version = '251'
    fluent_name = 'fit-imported-surfaces'
    _python_name = 'fit_imported_surfaces'

class bounding_offset(Real):
    """
    Bounding Offset that is enforced between the deforming and bounding surfaces to ensure that the two surfaces are never coincident.
    """
    _version = '251'
    fluent_name = 'bounding-offset'
    _python_name = 'bounding_offset'

class deformation_profile(String, AllowedValuesMixin):
    """
    Prescribed deformation profile.
    """
    _version = '251'
    fluent_name = 'deformation-profile'
    _python_name = 'deformation_profile'

class prescribed(Boolean):
    """
    Prescribed or freeform value.
    """
    _version = '251'
    fluent_name = 'prescribed'
    _python_name = 'prescribed'

class value_21(Real):
    """
    Prescribed value.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class x_6(Group):
    """
    Prescribed X displacement.
    """
    _version = '251'
    fluent_name = 'x'
    _python_name = 'x'
    child_names = ['prescribed', 'value']
    _child_classes = dict(
        prescribed=prescribed,
        value=value_21,
    )

class y_6(Group):
    """
    Prescribed Y displacement.
    """
    _version = '251'
    fluent_name = 'y'
    _python_name = 'y'
    child_names = ['prescribed', 'value']
    _child_classes = dict(
        prescribed=prescribed,
        value=value_21,
    )

class z_6(Group):
    """
    Prescribed Z displacement.
    """
    _version = '251'
    fluent_name = 'z'
    _python_name = 'z'
    child_names = ['prescribed', 'value']
    _child_classes = dict(
        prescribed=prescribed,
        value=value_21,
    )

class displacement(Group):
    """
    Displacements for translation condition.
    """
    _version = '251'
    fluent_name = 'displacement'
    _python_name = 'displacement'
    child_names = ['x', 'y', 'z']
    _child_classes = dict(
        x=x_6,
        y=y_6,
        z=z_6,
    )

class scaling_type(String, AllowedValuesMixin):
    """
    Scaling transformation type.
    """
    _version = '251'
    fluent_name = 'scaling-type'
    _python_name = 'scaling_type'

class scale_factor_2(Real):
    """
    Scale the displacement. A value of 0 will retain the shape of the Bounded Surfaces, while a value of 1 will fit the bounded surfaces to the Imported Surfaces.
    """
    _version = '251'
    fluent_name = 'scale-factor'
    _python_name = 'scale_factor'

class angle_4(Group):
    """
    Prescribed rotation angle.
    """
    _version = '251'
    fluent_name = 'angle'
    _python_name = 'angle'
    child_names = ['prescribed', 'value']
    _child_classes = dict(
        prescribed=prescribed,
        value=value_21,
    )

class factor_3(Group):
    """
    Prescribed scaling factor.
    """
    _version = '251'
    fluent_name = 'factor'
    _python_name = 'factor'
    child_names = ['prescribed', 'value']
    _child_classes = dict(
        prescribed=prescribed,
        value=value_21,
    )

class axis_1_2(Group):
    """
    Prescribed scaling factor for axis 1.
    """
    _version = '251'
    fluent_name = 'axis-1'
    _python_name = 'axis_1'
    child_names = ['prescribed', 'value']
    _child_classes = dict(
        prescribed=prescribed,
        value=value_21,
    )

class axis_2_2(Group):
    """
    Prescribed scaling factor for axis 2.
    """
    _version = '251'
    fluent_name = 'axis-2'
    _python_name = 'axis_2'
    child_names = ['prescribed', 'value']
    _child_classes = dict(
        prescribed=prescribed,
        value=value_21,
    )

class axis_3_1(Group):
    """
    Prescribed scaling factor for axis 3.
    """
    _version = '251'
    fluent_name = 'axis-3'
    _python_name = 'axis_3'
    child_names = ['prescribed', 'value']
    _child_classes = dict(
        prescribed=prescribed,
        value=value_21,
    )

class axis_factor(Group):
    """
    Prescribed scaling factor for the various axis object.
    """
    _version = '251'
    fluent_name = 'axis-factor'
    _python_name = 'axis_factor'
    child_names = ['axis_1', 'axis_2', 'axis_3']
    _child_classes = dict(
        axis_1=axis_1_2,
        axis_2=axis_2_2,
        axis_3=axis_3_1,
    )

class origin_6(RealList):
    """
    Rotation origin coordinates.
    """
    _version = '251'
    fluent_name = 'origin'
    _python_name = 'origin'

class normal_3(RealList):
    """
    Scaling in-plane normal direction.
    """
    _version = '251'
    fluent_name = 'normal'
    _python_name = 'normal'

class axis_6(RealList):
    """
    Rotation axis vector.
    """
    _version = '251'
    fluent_name = 'axis'
    _python_name = 'axis'

class axis_1_1(RealList):
    """
    General scaling axis 1.
    """
    _version = '251'
    fluent_name = 'axis-1'
    _python_name = 'axis_1'

class axis_2_1(RealList):
    """
    General scaling axis 2.
    """
    _version = '251'
    fluent_name = 'axis-2'
    _python_name = 'axis_2'

class distance_1(Real):
    """
    Plane distance from origin.
    """
    _version = '251'
    fluent_name = 'distance'
    _python_name = 'distance'

class skip_3(Integer):
    """
    Display fewer orientation arrows, for cases where the arrow density obscures the orientation.
    """
    _version = '251'
    fluent_name = 'skip'
    _python_name = 'skip'

class surfaces_17(StringList, AllowedValuesMixin):
    """
    Surfaces orientations to be reverse.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class reverse_surfaces(Command):
    """
    Reverse selected surfaces.
    
    Parameters
    ----------
        surfaces : List
            Surfaces orientations to be reverse.
    """
    _version = '251'
    fluent_name = 'reverse-surfaces'
    _python_name = 'reverse_surfaces'
    argument_names = ['surfaces']
    _child_classes = dict(
        surfaces=surfaces_17,
    )

class orientation_1(Group):
    """
    Orientation to ensure that surfaces are constrained on the correct side of the Imported Surfaces (that is, the side that has a positive orientation).
    """
    _version = '251'
    fluent_name = 'orientation'
    _python_name = 'orientation'
    child_names = ['skip']
    command_names = ['reverse_surfaces']
    _child_classes = dict(
        skip=skip_3,
        reverse_surfaces=reverse_surfaces,
    )

class method_17(String, AllowedValuesMixin):
    """
    Compounding method.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class conditions_1(StringList, AllowedValuesMixin):
    """
    List of conditions to be compounded.
    """
    _version = '251'
    fluent_name = 'conditions'
    _python_name = 'conditions'

class compound(Group):
    """
    Compound conditions object.
    """
    _version = '251'
    fluent_name = 'compound'
    _python_name = 'compound'
    child_names = ['method', 'conditions']
    _child_classes = dict(
        method=method_17,
        conditions=conditions_1,
    )

class get_center(Command):
    """
    Set the origin fields to the coordinates of the center of the selected surfaces.
    """
    _version = '251'
    fluent_name = 'get-center'
    _python_name = 'get_center'

class file_name_19(Filename):
    """
    Path to surface mesh file.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class import_surfaces(Command):
    """
    Read surface meshes.
    
    Parameters
    ----------
        file_name : str
            Path to surface mesh file.
        unit : str
            Unit in which the mesh was created.
    """
    _version = '251'
    fluent_name = 'import-surfaces'
    _python_name = 'import_surfaces'
    argument_names = ['file_name', 'unit']
    _child_classes = dict(
        file_name=file_name_19,
        unit=unit,
    )

class surfaces_18(StringList, AllowedValuesMixin):
    """
    Surfaces to be deleted.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class delete_surfaces(Command):
    """
    Delete imported surfaces.
    
    Parameters
    ----------
        surfaces : List
            Surfaces to be deleted.
    """
    _version = '251'
    fluent_name = 'delete-surfaces'
    _python_name = 'delete_surfaces'
    argument_names = ['surfaces']
    _child_classes = dict(
        surfaces=surfaces_18,
    )

class original_surfaces(StringList, AllowedValuesMixin):
    """
    Surface.
    """
    _version = '251'
    fluent_name = 'original-surfaces'
    _python_name = 'original_surfaces'

class display_imported_surfaces(Command):
    """
    Display imported surfaces.
    
    Parameters
    ----------
        original_surfaces : List
            Surface.
    """
    _version = '251'
    fluent_name = 'display-imported-surfaces'
    _python_name = 'display_imported_surfaces'
    argument_names = ['original_surfaces']
    _child_classes = dict(
        original_surfaces=original_surfaces,
    )

class display_9(Command):
    """
    Display design condition.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'

class definition_3_child(Group):
    """
    'child_object_type' of definition.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'definition_child'
    child_names = ['name', 'type', 'surfaces', 'imported_surfaces', 'fit_imported_surfaces', 'bounding_offset', 'deformation_profile', 'displacement', 'scaling_type', 'scale_factor', 'angle', 'factor', 'axis_factor', 'origin', 'normal', 'axis', 'axis_1', 'axis_2', 'distance', 'orientation', 'compound']
    command_names = ['get_center', 'import_surfaces', 'delete_surfaces', 'display_imported_surfaces', 'display']
    _child_classes = dict(
        name=name_2,
        type=type_12,
        surfaces=surfaces_16,
        imported_surfaces=imported_surfaces,
        fit_imported_surfaces=fit_imported_surfaces,
        bounding_offset=bounding_offset,
        deformation_profile=deformation_profile,
        displacement=displacement,
        scaling_type=scaling_type,
        scale_factor=scale_factor_2,
        angle=angle_4,
        factor=factor_3,
        axis_factor=axis_factor,
        origin=origin_6,
        normal=normal_3,
        axis=axis_6,
        axis_1=axis_1_1,
        axis_2=axis_2_1,
        distance=distance_1,
        orientation=orientation_1,
        compound=compound,
        get_center=get_center,
        import_surfaces=import_surfaces,
        delete_surfaces=delete_surfaces,
        display_imported_surfaces=display_imported_surfaces,
        display=display_9,
    )

class definition_3(NamedObject[definition_3_child], CreatableNamedObjectMixin[definition_3_child]):
    """
    Condition definitions named-object-class.
    """
    _version = '251'
    fluent_name = 'definition'
    _python_name = 'definition'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = definition_3_child

class applied_conditions(StringList, AllowedValuesMixin):
    """
    Selected design conditions.
    """
    _version = '251'
    fluent_name = 'applied-conditions'
    _python_name = 'applied_conditions'

class method_18(String, AllowedValuesMixin):
    """
    Fix surfaces in the morphing region and away from applied moving conditions.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class layers(Integer):
    """
    This value represents the number of zones that will be used to create a transition region for passive mesh morphing in zones adjacent to the moving surface.
    """
    _version = '251'
    fluent_name = 'layers'
    _python_name = 'layers'

class distance_2(Real):
    """
    This value represents the distance that will be used to create a transition region for passive mesh morphing in zones adjacent to the moving surface.
    """
    _version = '251'
    fluent_name = 'distance'
    _python_name = 'distance'

class applied_moving_conditions(StringList):
    """
    Applied moving conditions.
    """
    _version = '251'
    fluent_name = 'applied-moving-conditions'
    _python_name = 'applied_moving_conditions'

class update_2(Command):
    """
    Update the disconnected surfaces and fix them.
    """
    _version = '251'
    fluent_name = 'update'
    _python_name = 'update'

class display_morphable_surfaces(Command):
    """
    Display the disconnected surfaces.
    """
    _version = '251'
    fluent_name = 'display-morphable-surfaces'
    _python_name = 'display_morphable_surfaces'

class display_fixed_surfaces(Command):
    """
    Display the disconnected surfaces.
    """
    _version = '251'
    fluent_name = 'display-fixed-surfaces'
    _python_name = 'display_fixed_surfaces'

class fix_surfaces(Group):
    """
    Fix surfaces in the morphing region and away from applied moving conditions.
    """
    _version = '251'
    fluent_name = 'fix-surfaces'
    _python_name = 'fix_surfaces'
    child_names = ['method', 'layers', 'distance', 'applied_moving_conditions']
    command_names = ['update', 'display_morphable_surfaces', 'display_fixed_surfaces']
    _child_classes = dict(
        method=method_18,
        layers=layers,
        distance=distance_2,
        applied_moving_conditions=applied_moving_conditions,
        update=update_2,
        display_morphable_surfaces=display_morphable_surfaces,
        display_fixed_surfaces=display_fixed_surfaces,
    )

class display_10(Command):
    """
    Display the applied design conditions.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'

class selection_1(Group):
    """
    Selected design conditions.
    """
    _version = '251'
    fluent_name = 'selection'
    _python_name = 'selection'
    child_names = ['applied_conditions', 'fix_surfaces']
    command_names = ['display']
    _child_classes = dict(
        applied_conditions=applied_conditions,
        fix_surfaces=fix_surfaces,
        display=display_10,
    )

class list_surfaces_inside_region_only(Boolean):
    """
    List the surfaces inside the morphing region only.
    """
    _version = '251'
    fluent_name = 'list-surfaces-inside-region-only'
    _python_name = 'list_surfaces_inside_region_only'

class auto_display_1(Boolean):
    """
    Automatically updates the display as the design conditions are changed.
    """
    _version = '251'
    fluent_name = 'auto-display'
    _python_name = 'auto_display'

class schematic(Boolean):
    """
    Display the settings of the selected design condition.
    """
    _version = '251'
    fluent_name = 'schematic'
    _python_name = 'schematic'

class constrained_nodes(Boolean):
    """
    Display the constrained nodes of the selected design condition.
    """
    _version = '251'
    fluent_name = 'constrained-nodes'
    _python_name = 'constrained_nodes'

class surfaces_inside_region_only(Boolean):
    """
    Display the surfaces inside the morphing region only.
    """
    _version = '251'
    fluent_name = 'surfaces-inside-region-only'
    _python_name = 'surfaces_inside_region_only'

class display_settings(Group):
    """
    Display options object.
    """
    _version = '251'
    fluent_name = 'display-settings'
    _python_name = 'display_settings'
    child_names = ['auto_display', 'schematic', 'constrained_nodes', 'surfaces_inside_region_only']
    _child_classes = dict(
        auto_display=auto_display_1,
        schematic=schematic,
        constrained_nodes=constrained_nodes,
        surfaces_inside_region_only=surfaces_inside_region_only,
    )

class options_22(Group):
    """
    Design conditions options object.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['list_surfaces_inside_region_only', 'display_settings']
    _child_classes = dict(
        list_surfaces_inside_region_only=list_surfaces_inside_region_only,
        display_settings=display_settings,
    )

class design_conditions(Group):
    """
    Design conditions object.
    """
    _version = '251'
    fluent_name = 'design-conditions'
    _python_name = 'design_conditions'
    child_names = ['definition', 'selection', 'options']
    _child_classes = dict(
        definition=definition_3,
        selection=selection_1,
        options=options_22,
    )

class include_current_data(Boolean):
    """
    Include current objective data.
    """
    _version = '251'
    fluent_name = 'include-current-data'
    _python_name = 'include_current_data'

class observable_2(String):
    """
    Observable name.
    """
    _version = '251'
    fluent_name = 'observable'
    _python_name = 'observable'

class value_22(Real):
    """
    Objective value.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class step_direction(String, AllowedValuesMixin):
    """
    Design change direction.
    """
    _version = '251'
    fluent_name = 'step-direction'
    _python_name = 'step_direction'

class target_change(Real):
    """
    Target change amount.
    """
    _version = '251'
    fluent_name = 'target-change'
    _python_name = 'target_change'

class change_as_percentage(Boolean):
    """
    Changes target change amount as percentage.
    """
    _version = '251'
    fluent_name = 'change-as-percentage'
    _python_name = 'change_as_percentage'

class weight_3(Real):
    """
    Weight associated with the objective for multiobjective design.
    """
    _version = '251'
    fluent_name = 'weight'
    _python_name = 'weight'

class objectives_1_child(Group):
    """
    'child_object_type' of objectives.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'objectives_child'
    child_names = ['observable', 'value', 'step_direction', 'target_change', 'change_as_percentage', 'weight']
    _child_classes = dict(
        observable=observable_2,
        value=value_22,
        step_direction=step_direction,
        target_change=target_change,
        change_as_percentage=change_as_percentage,
        weight=weight_3,
    )

class objectives_1(NamedObject[objectives_1_child], CreatableNamedObjectMixin[objectives_1_child]):
    """
    Objectives used in design change tool.
    """
    _version = '251'
    fluent_name = 'objectives'
    _python_name = 'objectives'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = objectives_1_child

class freeform_scaling_scheme(String, AllowedValuesMixin):
    """
    Controls how the overall scaling factor for the design change magnitude is interpreted.
    """
    _version = '251'
    fluent_name = 'freeform-scaling-scheme'
    _python_name = 'freeform_scaling_scheme'

class file_name_20(Filename):
    """
    Sensitivities file output name.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class export_sensitivity(Command):
    """
    Write current data sensitivities to file.
    
    Parameters
    ----------
        file_name : str
            Sensitivities file output name.
    """
    _version = '251'
    fluent_name = 'export-sensitivity'
    _python_name = 'export_sensitivity'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_20,
    )

class file_name_21(Filename):
    """
    Sensitivities file input name.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class import_sensitivity(Command):
    """
    Read sensitivities from data file.
    
    Parameters
    ----------
        file_name : str
            Sensitivities file input name.
    """
    _version = '251'
    fluent_name = 'import-sensitivity'
    _python_name = 'import_sensitivity'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_21,
    )

class file_list(StringList, AllowedValuesMixin):
    """
    Sensitivities list to reload.
    """
    _version = '251'
    fluent_name = 'file-list'
    _python_name = 'file_list'

class reload(Command):
    """
    Reload sensitivities from data file.
    
    Parameters
    ----------
        file_list : List
            Sensitivities list to reload.
    """
    _version = '251'
    fluent_name = 'reload'
    _python_name = 'reload'
    argument_names = ['file_list']
    _child_classes = dict(
        file_list=file_list,
    )

class file_list_1(StringList, AllowedValuesMixin):
    """
    Sensitivities list to remove.
    """
    _version = '251'
    fluent_name = 'file-list'
    _python_name = 'file_list'

class remove(Command):
    """
    Reload sensitivities from data file.
    
    Parameters
    ----------
        file_list : List
            Sensitivities list to remove.
    """
    _version = '251'
    fluent_name = 'remove'
    _python_name = 'remove'
    argument_names = ['file_list']
    _child_classes = dict(
        file_list=file_list_1,
    )

class reload_all(Command):
    """
    Reset morphing numerics to default.
    """
    _version = '251'
    fluent_name = 'reload-all'
    _python_name = 'reload_all'

class remove_all(Command):
    """
    Reset morphing numerics to default.
    """
    _version = '251'
    fluent_name = 'remove-all'
    _python_name = 'remove_all'

class manage_data(Group):
    """
    Manage sensitivitity data.
    """
    _version = '251'
    fluent_name = 'manage-data'
    _python_name = 'manage_data'
    command_names = ['export_sensitivity', 'import_sensitivity', 'reload', 'remove', 'reload_all', 'remove_all']
    _child_classes = dict(
        export_sensitivity=export_sensitivity,
        import_sensitivity=import_sensitivity,
        reload=reload,
        remove=remove,
        reload_all=reload_all,
        remove_all=remove_all,
    )

class objectives(Group):
    """
    Objectives used in the design change tool.
    """
    _version = '251'
    fluent_name = 'objectives'
    _python_name = 'objectives'
    child_names = ['include_current_data', 'objectives', 'freeform_scaling_scheme', 'manage_data']
    _child_classes = dict(
        include_current_data=include_current_data,
        objectives=objectives_1,
        freeform_scaling_scheme=freeform_scaling_scheme,
        manage_data=manage_data,
    )

class value_23(Real):
    """
    Parameter value.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class affected_conditions(StringList, AllowedValuesMixin):
    """
    Affected conditions value.
    """
    _version = '251'
    fluent_name = 'affected-conditions'
    _python_name = 'affected_conditions'

class parameters_5_child(Group):
    """
    'child_object_type' of parameters.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'parameters_child'
    child_names = ['value', 'affected_conditions']
    _child_classes = dict(
        value=value_23,
        affected_conditions=affected_conditions,
    )

class parameters_5(NamedObject[parameters_5_child], CreatableNamedObjectMixin[parameters_5_child]):
    """
    Design change parameter.
    """
    _version = '251'
    fluent_name = 'parameters'
    _python_name = 'parameters'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = parameters_5_child

class file_name_22(String):
    """
    File Name.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class weight_4(Real):
    """
    Objective weight for multiobjective design.
    """
    _version = '251'
    fluent_name = 'weight'
    _python_name = 'weight'

class expected_change(Real):
    """
    Objective value.
    """
    _version = '251'
    fluent_name = 'expected-change'
    _python_name = 'expected_change'

class results_1_child(Group):
    """
    'child_object_type' of results.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'results_child'
    child_names = ['file_name', 'observable', 'value', 'weight', 'expected_change']
    _child_classes = dict(
        file_name=file_name_22,
        observable=observable_2,
        value=value_22,
        weight=weight_4,
        expected_change=expected_change,
    )

class results_1(NamedObject[results_1_child], CreatableNamedObjectMixin[results_1_child]):
    """
    Design results information.
    """
    _version = '251'
    fluent_name = 'results'
    _python_name = 'results'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = results_1_child

class file_name_23(Filename):
    """
    Expected changes report name.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class expected_changes(Command):
    """
    Write expected changes to file.
    
    Parameters
    ----------
        file_name : str
            Expected changes report name.
        append_data : bool
            Append data to file.
    """
    _version = '251'
    fluent_name = 'expected-changes'
    _python_name = 'expected_changes'
    argument_names = ['file_name', 'append_data']
    _child_classes = dict(
        file_name=file_name_23,
        append_data=append_data_1,
    )

class file_name_24(Filename):
    """
    Displacements file name.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class optimal_displacements(Command):
    """
    Export the computed optimal displacements.
    
    Parameters
    ----------
        file_name : str
            Displacements file name.
    """
    _version = '251'
    fluent_name = 'optimal-displacements'
    _python_name = 'optimal_displacements'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_24,
    )

class surfaces_19(StringList, AllowedValuesMixin):
    """
    Surfaces to be exported as .stl file.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class file_name_25(Filename):
    """
    Export specified surfaces from 3D cases as an .stl file.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class stl_surfaces(Command):
    """
    Export specified surfaces from 3D cases as an .stl file.
    
    Parameters
    ----------
        surfaces : List
            Surfaces to be exported as .stl file.
        file_name : str
            Export specified surfaces from 3D cases as an .stl file.
    """
    _version = '251'
    fluent_name = 'stl-surfaces'
    _python_name = 'stl_surfaces'
    argument_names = ['surfaces', 'file_name']
    _child_classes = dict(
        surfaces=surfaces_19,
        file_name=file_name_25,
    )

class export_2(Group):
    """
    Design tool export object.
    """
    _version = '251'
    fluent_name = 'export'
    _python_name = 'export'
    command_names = ['expected_changes', 'optimal_displacements', 'stl_surfaces']
    _child_classes = dict(
        expected_changes=expected_changes,
        optimal_displacements=optimal_displacements,
        stl_surfaces=stl_surfaces,
    )

class surfaces_20(StringList, AllowedValuesMixin):
    """
    Surfaces to display or to export as .stl file.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class scale_10(Real):
    """
    Deformation scaling factor.
    """
    _version = '251'
    fluent_name = 'scale'
    _python_name = 'scale'

class transparency_2(Real):
    """
    Transparency of the previewed meshes.
    """
    _version = '251'
    fluent_name = 'transparency'
    _python_name = 'transparency'

class displayed_meshes(String, AllowedValuesMixin):
    """
    Preview mesh options.
    """
    _version = '251'
    fluent_name = 'displayed-meshes'
    _python_name = 'displayed_meshes'

class outline_1(Command):
    """
    Select boundary surfaces.
    """
    _version = '251'
    fluent_name = 'outline'
    _python_name = 'outline'

class interior_3(Command):
    """
    Select interior surfaces.
    """
    _version = '251'
    fluent_name = 'interior'
    _python_name = 'interior'

class display_11(Command):
    """
    Select interior surfaces.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'

class export_stl(Command):
    """
    Export specified surfaces from as an .stl file.
    
    Parameters
    ----------
        file_name : str
            Export specified surfaces from 3D cases as an .stl file.
    """
    _version = '251'
    fluent_name = 'export-stl'
    _python_name = 'export_stl'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_25,
    )

class preview_1(Group):
    """
    Design tool export object.
    """
    _version = '251'
    fluent_name = 'preview'
    _python_name = 'preview'
    child_names = ['surfaces', 'scale', 'transparency', 'displayed_meshes']
    command_names = ['outline', 'interior', 'display', 'export_stl']
    _child_classes = dict(
        surfaces=surfaces_20,
        scale=scale_10,
        transparency=transparency_2,
        displayed_meshes=displayed_meshes,
        outline=outline_1,
        interior=interior_3,
        display=display_11,
        export_stl=export_stl,
    )

class reset_reference_mesh(Command):
    """
    Save the current mesh as the reference mesh.
    """
    _version = '251'
    fluent_name = 'reset-reference-mesh'
    _python_name = 'reset_reference_mesh'

class overlay_reference(Command):
    """
    Overlay reference mesh.
    """
    _version = '251'
    fluent_name = 'overlay-reference'
    _python_name = 'overlay_reference'

class export_displacements(Command):
    """
    Export the total computed optimal displacements.
    
    Parameters
    ----------
        file_name : str
            Displacements file name.
    """
    _version = '251'
    fluent_name = 'export-displacements'
    _python_name = 'export_displacements'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_24,
    )

class history(Group):
    """
    Design tool history object.
    """
    _version = '251'
    fluent_name = 'history'
    _python_name = 'history'
    child_names = ['surfaces']
    command_names = ['reset_reference_mesh', 'overlay_reference', 'export_displacements']
    _child_classes = dict(
        surfaces=surfaces_20,
        reset_reference_mesh=reset_reference_mesh,
        overlay_reference=overlay_reference,
        export_displacements=export_displacements,
    )

class check_1(Command):
    """
    Design tool check.
    """
    _version = '251'
    fluent_name = 'check'
    _python_name = 'check'

class calculate_design_change(Command):
    """
    Calculates design change.
    """
    _version = '251'
    fluent_name = 'calculate-design-change'
    _python_name = 'calculate_design_change'

class print_expected_changes(Command):
    """
    Print expected changes.
    """
    _version = '251'
    fluent_name = 'print-expected-changes'
    _python_name = 'print_expected_changes'

class modify(Command):
    """
    Apply the computed optimal displacement to the mesh.
    """
    _version = '251'
    fluent_name = 'modify'
    _python_name = 'modify'

class revert(Command):
    """
    Revert to the unmodified mesh.
    """
    _version = '251'
    fluent_name = 'revert'
    _python_name = 'revert'

class remesh(Command):
    """
    Remesh.
    """
    _version = '251'
    fluent_name = 'remesh'
    _python_name = 'remesh'

class design_change(Group):
    """
    Design change object.
    """
    _version = '251'
    fluent_name = 'design-change'
    _python_name = 'design_change'
    child_names = ['parameters', 'results', 'export', 'preview', 'history']
    command_names = ['check', 'calculate_design_change', 'print_expected_changes', 'modify', 'revert', 'remesh']
    _child_classes = dict(
        parameters=parameters_5,
        results=results_1,
        export=export_2,
        preview=preview_1,
        history=history,
        check=check_1,
        calculate_design_change=calculate_design_change,
        print_expected_changes=print_expected_changes,
        modify=modify,
        revert=revert,
        remesh=remesh,
    )

class design_tool(Group):
    """
    Gradient-based design tool object.
    """
    _version = '251'
    fluent_name = 'design-tool'
    _python_name = 'design_tool'
    child_names = ['morpher', 'region', 'design_conditions', 'objectives', 'design_change']
    _child_classes = dict(
        morpher=morpher,
        region=region,
        design_conditions=design_conditions,
        objectives=objectives,
        design_change=design_change,
    )

class optimizer_type(String, AllowedValuesMixin):
    """
    Optimizer type.
    """
    _version = '251'
    fluent_name = 'optimizer-type'
    _python_name = 'optimizer_type'

class selection_2(StringList, AllowedValuesMixin):
    """
    Optimizer observable selection.
    """
    _version = '251'
    fluent_name = 'selection'
    _python_name = 'selection'

class method_19(String, AllowedValuesMixin):
    """
    Observable evaluation method.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class frequency_7(Integer):
    """
    Observable evaluation frequency.
    """
    _version = '251'
    fluent_name = 'frequency'
    _python_name = 'frequency'

class sampling_after(Integer):
    """
    Observable evaluation after.
    """
    _version = '251'
    fluent_name = 'sampling-after'
    _python_name = 'sampling_after'

class evaluation(Group):
    """
    Optimizer observable evaluation settings object.
    """
    _version = '251'
    fluent_name = 'evaluation'
    _python_name = 'evaluation'
    child_names = ['method', 'frequency', 'sampling_after']
    _child_classes = dict(
        method=method_19,
        frequency=frequency_7,
        sampling_after=sampling_after,
    )

class default_7(Command):
    """
    If no observables are selected, include a default
                  observable. Does nothing if there is already a selection.
    """
    _version = '251'
    fluent_name = 'default'
    _python_name = 'default'

class observables_1(Group):
    """
    Optimizer observables.
    """
    _version = '251'
    fluent_name = 'observables'
    _python_name = 'observables'
    child_names = ['selection', 'evaluation']
    command_names = ['default']
    _child_classes = dict(
        selection=selection_2,
        evaluation=evaluation,
        default=default_7,
    )

class count_1(Integer):
    """
    Number of operating conditions.
    """
    _version = '251'
    fluent_name = 'count'
    _python_name = 'count'

class parameters_count(Integer):
    """
    Number of input parameters.
    """
    _version = '251'
    fluent_name = 'parameters-count'
    _python_name = 'parameters_count'

class parameters_6_child(String, AllowedValuesMixin):
    """
    'child_object_type' of parameters.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'parameters_child'

class parameters_6(ListObject[parameters_6_child]):
    """
    Operating condition parameter.
    """
    _version = '251'
    fluent_name = 'parameters'
    _python_name = 'parameters'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = parameters_6_child

class id_1(Integer):
    """
    Operating condition ID.
    """
    _version = '251'
    fluent_name = 'id'
    _python_name = 'id'

class active_3(Boolean):
    """
    Include operating condition.
    """
    _version = '251'
    fluent_name = 'active'
    _python_name = 'active'

class parameters_7_child(Real):
    """
    'child_object_type' of parameters.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'parameters_child'

class parameters_7(NamedObject[parameters_7_child], CreatableNamedObjectMixin[parameters_7_child]):
    """
    Parameter values of the given condition.
    """
    _version = '251'
    fluent_name = 'parameters'
    _python_name = 'parameters'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = parameters_7_child

class conditions_2_child(Group):
    """
    'child_object_type' of conditions.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'conditions_child'
    child_names = ['id', 'active', 'parameters']
    _child_classes = dict(
        id=id_1,
        active=active_3,
        parameters=parameters_7,
    )

class conditions_2(ListObject[conditions_2_child]):
    """
    Operating conditions.
    """
    _version = '251'
    fluent_name = 'conditions'
    _python_name = 'conditions'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = conditions_2_child

class operating_conditions_1(Group):
    """
    Operating conditions for multiobjective optimization.
    """
    _version = '251'
    fluent_name = 'operating-conditions'
    _python_name = 'operating_conditions'
    child_names = ['count', 'parameters_count', 'parameters', 'conditions']
    _child_classes = dict(
        count=count_1,
        parameters_count=parameters_count,
        parameters=parameters_6,
        conditions=conditions_2,
    )

class id_2(Integer):
    """
    Case ID.
    """
    _version = '251'
    fluent_name = 'id'
    _python_name = 'id'

class condition_1(Integer):
    """
    Operation condition ID.
    """
    _version = '251'
    fluent_name = 'condition'
    _python_name = 'condition'

class observable_3(String):
    """
    Observable.
    """
    _version = '251'
    fluent_name = 'observable'
    _python_name = 'observable'

class goal(String, AllowedValuesMixin):
    """
    Goal.
    """
    _version = '251'
    fluent_name = 'goal'
    _python_name = 'goal'

class value_24(Real):
    """
    Value.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class value_as_percentage(Boolean):
    """
    Step size as percentage.
    """
    _version = '251'
    fluent_name = 'value-as-percentage'
    _python_name = 'value_as_percentage'

class lower_bound(Real):
    """
    Lower bound.
    """
    _version = '251'
    fluent_name = 'lower-bound'
    _python_name = 'lower_bound'

class upper_bound(Real):
    """
    Upper bound.
    """
    _version = '251'
    fluent_name = 'upper-bound'
    _python_name = 'upper_bound'

class tolerance_8(Real):
    """
    Constraint tolerance.
    """
    _version = '251'
    fluent_name = 'tolerance'
    _python_name = 'tolerance'

class tolerance_as_percentage(Boolean):
    """
    Tolerance as percentage.
    """
    _version = '251'
    fluent_name = 'tolerance-as-percentage'
    _python_name = 'tolerance_as_percentage'

class objectives_3_child(Group):
    """
    'child_object_type' of objectives.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'objectives_child'
    child_names = ['id', 'condition', 'observable', 'goal', 'value', 'value_as_percentage', 'lower_bound', 'upper_bound', 'tolerance', 'tolerance_as_percentage']
    _child_classes = dict(
        id=id_2,
        condition=condition_1,
        observable=observable_3,
        goal=goal,
        value=value_24,
        value_as_percentage=value_as_percentage,
        lower_bound=lower_bound,
        upper_bound=upper_bound,
        tolerance=tolerance_8,
        tolerance_as_percentage=tolerance_as_percentage,
    )
    _child_aliases = dict(
        as_percentage=('value_as_percentage', 'as-percentage'),
        step_size=('value', 'step-size'),
    )

class objectives_3(ListObject[objectives_3_child]):
    """
    Objectives with various parameters and conditions.
    """
    _version = '251'
    fluent_name = 'objectives'
    _python_name = 'objectives'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = objectives_3_child

class objectives_2(Group):
    """
    Optimizer objectives.
    """
    _version = '251'
    fluent_name = 'objectives'
    _python_name = 'objectives'
    child_names = ['observables', 'operating_conditions', 'objectives']
    _child_classes = dict(
        observables=observables_1,
        operating_conditions=operating_conditions_1,
        objectives=objectives_3,
    )

class method_20(String, AllowedValuesMixin):
    """
    Optimizer search length method.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class current_design_iteration(Integer):
    """
    Current design iteration.
    """
    _version = '251'
    fluent_name = 'current-design-iteration'
    _python_name = 'current_design_iteration'

class design_iterations(Integer):
    """
    Number of design iterations.
    """
    _version = '251'
    fluent_name = 'design-iterations'
    _python_name = 'design_iterations'

class convergence_criteria(Real):
    """
    Convergence criteria for optimization problem.
    """
    _version = '251'
    fluent_name = 'convergence-criteria'
    _python_name = 'convergence_criteria'

class flow_iterations(Integer):
    """
    Number of flow iterations.
    """
    _version = '251'
    fluent_name = 'flow-iterations'
    _python_name = 'flow_iterations'

class adjoint_iterations(Integer):
    """
    Number of flow iterations.
    """
    _version = '251'
    fluent_name = 'adjoint-iterations'
    _python_name = 'adjoint_iterations'

class optimizer_settings(Group):
    """
    Optimizer settings.
    """
    _version = '251'
    fluent_name = 'optimizer-settings'
    _python_name = 'optimizer_settings'
    child_names = ['method', 'current_design_iteration', 'design_iterations', 'convergence_criteria', 'flow_iterations', 'adjoint_iterations']
    _child_classes = dict(
        method=method_20,
        current_design_iteration=current_design_iteration,
        design_iterations=design_iterations,
        convergence_criteria=convergence_criteria,
        flow_iterations=flow_iterations,
        adjoint_iterations=adjoint_iterations,
    )

class design_region(StringList, AllowedValuesMixin):
    """
    Design zones for turbulence model optimization.
    """
    _version = '251'
    fluent_name = 'design-region'
    _python_name = 'design_region'

class selection_3(StringList, AllowedValuesMixin):
    """
    Turbulence design variables selection.
    """
    _version = '251'
    fluent_name = 'selection'
    _python_name = 'selection'

class enable_turbulence_source_term(Boolean):
    """
    Enable turbulence source term?.
    """
    _version = '251'
    fluent_name = 'enable-turbulence-source-term'
    _python_name = 'enable_turbulence_source_term'

class options_23(Group):
    """
    Turbulence model design variables options.
    """
    _version = '251'
    fluent_name = 'options'
    _python_name = 'options'
    child_names = ['enable_turbulence_source_term']
    _child_classes = dict(
        enable_turbulence_source_term=enable_turbulence_source_term,
    )

class limits_1_child(RealList):
    """
    'child_object_type' of limits.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'limits_child'

class limits_1(NamedObject[limits_1_child], CreatableNamedObjectMixin[limits_1_child]):
    """
    Design variable limits.
    """
    _version = '251'
    fluent_name = 'limits'
    _python_name = 'limits'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = limits_1_child

class default_limits(Command):
    """
    Reset design variables limits to default.
    """
    _version = '251'
    fluent_name = 'default-limits'
    _python_name = 'default_limits'

class initialize_4(Command):
    """
    Initialize the design variables with the current values.
    """
    _version = '251'
    fluent_name = 'initialize'
    _python_name = 'initialize'

class design_variables(Group):
    """
    Turbulence model design variables settings.
    """
    _version = '251'
    fluent_name = 'design-variables'
    _python_name = 'design_variables'
    child_names = ['selection', 'options', 'limits']
    command_names = ['default_limits', 'initialize']
    _child_classes = dict(
        selection=selection_3,
        options=options_23,
        limits=limits_1,
        default_limits=default_limits,
        initialize=initialize_4,
    )

class type_13(String, AllowedValuesMixin):
    """
    The model type.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'

class smooth_sensitivities(Boolean):
    """
    Smooth the sensitivities of design variables during optimization.
    """
    _version = '251'
    fluent_name = 'smooth-sensitivities'
    _python_name = 'smooth_sensitivities'

class activation_function(String, AllowedValuesMixin):
    """
    Activation function.
    """
    _version = '251'
    fluent_name = 'activation-function'
    _python_name = 'activation_function'

class neural_network_topology_child(Integer):
    """
    'child_object_type' of neural_network_topology.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'neural_network_topology_child'

class neural_network_topology(ListObject[neural_network_topology_child]):
    """
    The number of neural network nodes at each hidden layer.
    """
    _version = '251'
    fluent_name = 'neural-network-topology'
    _python_name = 'neural_network_topology'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = neural_network_topology_child

class input_features(StringList, AllowedValuesMixin):
    """
    The number of neural network nodes at each layer.
    """
    _version = '251'
    fluent_name = 'input-features'
    _python_name = 'input_features'

class settings_34(Group):
    """
    Turbulence model variables modelization settings.
    """
    _version = '251'
    fluent_name = 'settings'
    _python_name = 'settings'
    child_names = ['smooth_sensitivities', 'activation_function', 'neural_network_topology', 'input_features']
    _child_classes = dict(
        smooth_sensitivities=smooth_sensitivities,
        activation_function=activation_function,
        neural_network_topology=neural_network_topology,
        input_features=input_features,
    )

class max_epochs(Integer):
    """
    Maximum epochs.
    """
    _version = '251'
    fluent_name = 'max-epochs'
    _python_name = 'max_epochs'

class mini_batch_size(Integer):
    """
    Mini batch size.
    """
    _version = '251'
    fluent_name = 'mini-batch-size'
    _python_name = 'mini_batch_size'

class learning_rate(Real):
    """
    Learning rate.
    """
    _version = '251'
    fluent_name = 'learning-rate'
    _python_name = 'learning_rate'

class initialize_neural_network(Boolean):
    """
    Initialize the neural network during the training.
    """
    _version = '251'
    fluent_name = 'initialize-neural-network'
    _python_name = 'initialize_neural_network'

class include_current_data_1(Boolean):
    """
    Include the current data for the training.
    """
    _version = '251'
    fluent_name = 'include-current-data'
    _python_name = 'include_current_data'

class training_data_files(StringList, AllowedValuesMixin):
    """
    List of imported training data files.
    """
    _version = '251'
    fluent_name = 'training-data-files'
    _python_name = 'training_data_files'

class file_name_26(Filename):
    """
    Training data file name.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class export_data(Command):
    """
    Export training data to file.
    
    Parameters
    ----------
        file_name : str
            Training data file name.
    """
    _version = '251'
    fluent_name = 'export-data'
    _python_name = 'export_data'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_26,
    )

class import_data(Command):
    """
    Export training data to file.
    
    Parameters
    ----------
        file_name : str
            Training data file name.
    """
    _version = '251'
    fluent_name = 'import-data'
    _python_name = 'import_data'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_26,
    )

class files_1(StringList, AllowedValuesMixin):
    """
    List of training data files to remove.
    """
    _version = '251'
    fluent_name = 'files'
    _python_name = 'files'

class remove_1(Command):
    """
    Remove a selection of imported training data files.
    
    Parameters
    ----------
        files : List
            List of training data files to remove.
    """
    _version = '251'
    fluent_name = 'remove'
    _python_name = 'remove'
    argument_names = ['files']
    _child_classes = dict(
        files=files_1,
    )

class manage_data_1(Group):
    """
    The training parameters.
    """
    _version = '251'
    fluent_name = 'manage-data'
    _python_name = 'manage_data'
    child_names = ['include_current_data', 'training_data_files']
    command_names = ['export_data', 'import_data', 'remove']
    _child_classes = dict(
        include_current_data=include_current_data_1,
        training_data_files=training_data_files,
        export_data=export_data,
        import_data=import_data,
        remove=remove_1,
    )

class train(Command):
    """
    Train the design variables using neural network.
    """
    _version = '251'
    fluent_name = 'train'
    _python_name = 'train'

class update_design_variables(Boolean):
    """
    Update design variables using the neural network model after applying the trained model.
    """
    _version = '251'
    fluent_name = 'update-design-variables'
    _python_name = 'update_design_variables'

class apply_trained_model(Command):
    """
    Adopt the trained neural network for the turbulence modeling.
    
    Parameters
    ----------
        update_design_variables : bool
            Update design variables using the neural network model after applying the trained model.
    """
    _version = '251'
    fluent_name = 'apply-trained-model'
    _python_name = 'apply_trained_model'
    argument_names = ['update_design_variables']
    _child_classes = dict(
        update_design_variables=update_design_variables,
    )

class default_9(Command):
    """
    Use the default training parameters.
    """
    _version = '251'
    fluent_name = 'default'
    _python_name = 'default'

class offline_training(Group):
    """
    The training parameters.
    """
    _version = '251'
    fluent_name = 'offline-training'
    _python_name = 'offline_training'
    child_names = ['max_epochs', 'mini_batch_size', 'learning_rate', 'initialize_neural_network', 'manage_data']
    command_names = ['train', 'apply_trained_model', 'default']
    _child_classes = dict(
        max_epochs=max_epochs,
        mini_batch_size=mini_batch_size,
        learning_rate=learning_rate,
        initialize_neural_network=initialize_neural_network,
        manage_data=manage_data_1,
        train=train,
        apply_trained_model=apply_trained_model,
        default=default_9,
    )

class clear_model(Command):
    """
    Initialize the model coefficients.
    """
    _version = '251'
    fluent_name = 'clear-model'
    _python_name = 'clear_model'

class file_name_27(Filename):
    """
    Model data file name.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class export_model(Command):
    """
    Write the model setting and coefficient to a file.
    
    Parameters
    ----------
        file_name : str
            Model data file name.
    """
    _version = '251'
    fluent_name = 'export-model'
    _python_name = 'export_model'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_27,
    )

class import_model(Command):
    """
    Read the model setting and coefficients from a file.
    
    Parameters
    ----------
        file_name : str
            Model data file name.
    """
    _version = '251'
    fluent_name = 'import-model'
    _python_name = 'import_model'
    argument_names = ['file_name']
    _child_classes = dict(
        file_name=file_name_27,
    )

class management(Group):
    """
    Read the model setting and coefficients from a file.
    """
    _version = '251'
    fluent_name = 'management'
    _python_name = 'management'
    command_names = ['clear_model', 'export_model', 'import_model']
    _child_classes = dict(
        clear_model=clear_model,
        export_model=export_model,
        import_model=import_model,
    )

class default_8(Command):
    """
    Use the default model and training parameters settings.
    """
    _version = '251'
    fluent_name = 'default'
    _python_name = 'default'

class unhook(Command):
    """
    Unhook the model related to turbulence model optimizer.
    """
    _version = '251'
    fluent_name = 'unhook'
    _python_name = 'unhook'

class model_6(Group):
    """
    Model management object.
    """
    _version = '251'
    fluent_name = 'model'
    _python_name = 'model'
    child_names = ['type', 'settings', 'offline_training', 'management']
    command_names = ['default', 'unhook']
    _child_classes = dict(
        type=type_13,
        settings=settings_34,
        offline_training=offline_training,
        management=management,
        default=default_8,
        unhook=unhook,
    )

class turbulence_model_design_tool(Group):
    """
    Turbulence model design tool settings.
    """
    _version = '251'
    fluent_name = 'turbulence-model-design-tool'
    _python_name = 'turbulence_model_design_tool'
    child_names = ['design_region', 'design_variables', 'model']
    _child_classes = dict(
        design_region=design_region,
        design_variables=design_variables,
        model=model_6,
    )

class min_cell_volume(Real):
    """
    Minimum cell volume mesh quality criterion.
    """
    _version = '251'
    fluent_name = 'min-cell-volume'
    _python_name = 'min_cell_volume'

class min_orthogonal(Real):
    """
    Minimum cell orthogonal quality criterion.
    """
    _version = '251'
    fluent_name = 'min-orthogonal'
    _python_name = 'min_orthogonal'

class print_current_status(Command):
    """
    Print current mesh quality metrics.
    """
    _version = '251'
    fluent_name = 'print-current-status'
    _python_name = 'print_current_status'

class criteria(Group):
    """
    Mesh quality settings.
    """
    _version = '251'
    fluent_name = 'criteria'
    _python_name = 'criteria'
    child_names = ['min_cell_volume', 'min_orthogonal']
    command_names = ['print_current_status']
    _child_classes = dict(
        min_cell_volume=min_cell_volume,
        min_orthogonal=min_orthogonal,
        print_current_status=print_current_status,
    )

class smoothing_2(Boolean):
    """
    Enable/disable smoothing after mesh morphing.
    """
    _version = '251'
    fluent_name = 'smoothing'
    _python_name = 'smoothing'

class remeshing_1(Boolean):
    """
    Enable/disable remeshing after mesh morphing.
    """
    _version = '251'
    fluent_name = 'remeshing'
    _python_name = 'remeshing'

class post_morph(Group):
    """
    Mesh quality settings.
    """
    _version = '251'
    fluent_name = 'post-morph'
    _python_name = 'post_morph'
    child_names = ['smoothing', 'remeshing']
    _child_classes = dict(
        smoothing=smoothing_2,
        remeshing=remeshing_1,
    )

class mesh_quality(Group):
    """
    Mesh quality settings.
    """
    _version = '251'
    fluent_name = 'mesh-quality'
    _python_name = 'mesh_quality'
    child_names = ['criteria', 'post_morph']
    _child_classes = dict(
        criteria=criteria,
        post_morph=post_morph,
    )

class plot_during_optimization(Boolean):
    """
    Plot during optimization.
    """
    _version = '251'
    fluent_name = 'plot-during-optimization'
    _python_name = 'plot_during_optimization'

class observables_values(Boolean):
    """
    Plot observables values history.
    """
    _version = '251'
    fluent_name = 'observables-values'
    _python_name = 'observables_values'

class expected_observables_values(Boolean):
    """
    Plot expected observables values history.
    """
    _version = '251'
    fluent_name = 'expected-observables-values'
    _python_name = 'expected_observables_values'

class normalize_1(Boolean):
    """
    Normalize the optimization history.
    """
    _version = '251'
    fluent_name = 'normalize'
    _python_name = 'normalize'

class plot_all_optimization_ids(Boolean):
    """
    Plot adjoint optimization history of all IDs.
    """
    _version = '251'
    fluent_name = 'plot-all-optimization-ids'
    _python_name = 'plot_all_optimization_ids'

class optimization_id_to_plot(Integer):
    """
    Sets the optimization ID to be plotted.
    """
    _version = '251'
    fluent_name = 'optimization-id-to-plot'
    _python_name = 'optimization_id_to_plot'

class plot_14(Command):
    """
    Initialize gradient-based optimizer.
    """
    _version = '251'
    fluent_name = 'plot'
    _python_name = 'plot'

class monitor_3(Group):
    """
    Calculation activities monitor object.
    """
    _version = '251'
    fluent_name = 'monitor'
    _python_name = 'monitor'
    child_names = ['plot_during_optimization', 'observables_values', 'expected_observables_values', 'normalize', 'plot_all_optimization_ids', 'optimization_id_to_plot']
    command_names = ['plot']
    _child_classes = dict(
        plot_during_optimization=plot_during_optimization,
        observables_values=observables_values,
        expected_observables_values=expected_observables_values,
        normalize=normalize_1,
        plot_all_optimization_ids=plot_all_optimization_ids,
        optimization_id_to_plot=optimization_id_to_plot,
        plot=plot_14,
    )

class frequency_8(Integer):
    """
    Frequency to save files.
    """
    _version = '251'
    fluent_name = 'frequency'
    _python_name = 'frequency'

class maximum_8(Integer):
    """
    Maximum files to be retained.
    """
    _version = '251'
    fluent_name = 'maximum'
    _python_name = 'maximum'

class save_files(Group):
    """
    File saving settings for optimization reporting.
    """
    _version = '251'
    fluent_name = 'save-files'
    _python_name = 'save_files'
    child_names = ['frequency', 'maximum']
    _child_classes = dict(
        frequency=frequency_8,
        maximum=maximum_8,
    )

class save_optimal(Boolean):
    """
    Save the optimal solution.
    """
    _version = '251'
    fluent_name = 'save-optimal'
    _python_name = 'save_optimal'

class frequency_9(Integer):
    """
    Frequency at which stl files are exported.
    """
    _version = '251'
    fluent_name = 'frequency'
    _python_name = 'frequency'

class export_stl_1(Group):
    """
    Settings to export STL.
    """
    _version = '251'
    fluent_name = 'export-stl'
    _python_name = 'export_stl'
    child_names = ['frequency', 'surfaces']
    _child_classes = dict(
        frequency=frequency_9,
        surfaces=surfaces_19,
    )

class autosave_1(Group):
    """
    Optimizer reporting object.
    """
    _version = '251'
    fluent_name = 'autosave'
    _python_name = 'autosave'
    child_names = ['file_name', 'save_files', 'save_optimal', 'export_stl']
    _child_classes = dict(
        file_name=file_name_18,
        save_files=save_files,
        save_optimal=save_optimal,
        export_stl=export_stl_1,
    )

class calculation_activities_1(Group):
    """
    Calculation activities object.
    """
    _version = '251'
    fluent_name = 'calculation-activities'
    _python_name = 'calculation_activities'
    child_names = ['monitor', 'autosave']
    _child_classes = dict(
        monitor=monitor_3,
        autosave=autosave_1,
    )

class turbulence_design_variables(Boolean):
    """
    Initialize the turbulence design variables in the design region?.
    """
    _version = '251'
    fluent_name = 'turbulence-design-variables'
    _python_name = 'turbulence_design_variables'

class initialize_3(Command):
    """
    Initialize gradient-based optimizer.
    
    Parameters
    ----------
        turbulence_design_variables : bool
            Initialize the turbulence design variables in the design region?.
    """
    _version = '251'
    fluent_name = 'initialize'
    _python_name = 'initialize'
    argument_names = ['turbulence_design_variables']
    _child_classes = dict(
        turbulence_design_variables=turbulence_design_variables,
    )

class reset_4(Command):
    """
    Reset gradient-based optimizer.
    """
    _version = '251'
    fluent_name = 'reset'
    _python_name = 'reset'

class current_warnings(StringList, AllowedValuesMixin):
    """
    Warnings based on current settings.
    """
    _version = '251'
    fluent_name = 'current-warnings'
    _python_name = 'current_warnings'

class disable_settings_validation(Boolean):
    """
    Ignore warnings and proceed with optimization.
    """
    _version = '251'
    fluent_name = 'disable-settings-validation'
    _python_name = 'disable_settings_validation'

class optimize(Command):
    """
    Disable warnings detecting possibly wrong settings before running the optimizer.
    
    Parameters
    ----------
        current_warnings : List
            Warnings based on current settings.
        disable_settings_validation : bool
            Ignore warnings and proceed with optimization.
    """
    _version = '251'
    fluent_name = 'optimize'
    _python_name = 'optimize'
    argument_names = ['current_warnings', 'disable_settings_validation']
    _child_classes = dict(
        current_warnings=current_warnings,
        disable_settings_validation=disable_settings_validation,
    )

class interrupt_2(Command):
    """
    Interrupt optimization process.
    
    Parameters
    ----------
        interrupt_at : str
            When should the solution be interrupted.
    """
    _version = '251'
    fluent_name = 'interrupt'
    _python_name = 'interrupt'
    argument_names = ['interrupt_at']
    _child_classes = dict(
        interrupt_at=interrupt_at,
    )

class summarize(Command):
    """
    Summarize results from gradient-based optimizer.
    """
    _version = '251'
    fluent_name = 'summarize'
    _python_name = 'summarize'

class default_6(Command):
    """
    Summarize results from gradient-based optimizer.
    """
    _version = '251'
    fluent_name = 'default'
    _python_name = 'default'

class optimizer(Group):
    """
    Gradient-based optimizer object.
    """
    _version = '251'
    fluent_name = 'optimizer'
    _python_name = 'optimizer'
    child_names = ['optimizer_type', 'objectives', 'optimizer_settings', 'turbulence_model_design_tool', 'mesh_quality', 'calculation_activities']
    command_names = ['initialize', 'reset', 'optimize', 'interrupt', 'summarize', 'default']
    _child_classes = dict(
        optimizer_type=optimizer_type,
        objectives=objectives_2,
        optimizer_settings=optimizer_settings,
        turbulence_model_design_tool=turbulence_model_design_tool,
        mesh_quality=mesh_quality,
        calculation_activities=calculation_activities_1,
        initialize=initialize_3,
        reset=reset_4,
        optimize=optimize,
        interrupt=interrupt_2,
        summarize=summarize,
        default=default_6,
    )

class print_residuals_by_zone(Boolean):
    """
    Print the adjoint equation residuals sorted by zone types.
    """
    _version = '251'
    fluent_name = 'print-residuals-by-zone'
    _python_name = 'print_residuals_by_zone'

class print_residuals_by_distribution(Boolean):
    """
    Print the adjoint equation residuals sorted by distribution.
    """
    _version = '251'
    fluent_name = 'print-residuals-by-distribution'
    _python_name = 'print_residuals_by_distribution'

class retain_cell_residuals(Boolean):
    """
    Retain adjoint equation cell residuals for postprocessing.
    """
    _version = '251'
    fluent_name = 'retain-cell-residuals'
    _python_name = 'retain_cell_residuals'

class diagnosis(Group):
    """
    Diagnosis utilities object.
    """
    _version = '251'
    fluent_name = 'diagnosis'
    _python_name = 'diagnosis'
    child_names = ['print_residuals_by_zone', 'print_residuals_by_distribution', 'retain_cell_residuals']
    _child_classes = dict(
        print_residuals_by_zone=print_residuals_by_zone,
        print_residuals_by_distribution=print_residuals_by_distribution,
        retain_cell_residuals=retain_cell_residuals,
    )

class match_fluent_flux_type(Boolean):
    """
    Match the flux type between flow solver and adjoint solver.
    """
    _version = '251'
    fluent_name = 'match-fluent-flux-type'
    _python_name = 'match_fluent_flux_type'

class expert_10(Group):
    """
    Expert utilities object.
    """
    _version = '251'
    fluent_name = 'expert'
    _python_name = 'expert'
    child_names = ['diagnosis', 'match_fluent_flux_type']
    _child_classes = dict(
        diagnosis=diagnosis,
        match_fluent_flux_type=match_fluent_flux_type,
    )

class field_13(String, AllowedValuesMixin):
    """
    Field to interpolate.
    """
    _version = '251'
    fluent_name = 'field'
    _python_name = 'field'

class file_name_28(Filename):
    """
    Interpolated data file name.
    """
    _version = '251'
    fluent_name = 'file-name'
    _python_name = 'file_name'

class export_data_1(Command):
    """
    Export data for interpolation.
    
    Parameters
    ----------
        field : str
            Field to interpolate.
        file_name : str
            Interpolated data file name.
    """
    _version = '251'
    fluent_name = 'export-data'
    _python_name = 'export_data'
    argument_names = ['field', 'file_name']
    _child_classes = dict(
        field=field_13,
        file_name=file_name_28,
    )

class memory_id(Integer):
    """
    User-defined memory id to stored interpolated data.
    """
    _version = '251'
    fluent_name = 'memory-id'
    _python_name = 'memory_id'

class ok_to_discard_data(Boolean):
    """
    Current data has not been saved, including solution data and any report files, animation files, etc.
    Confirm you want to discard the data and proceed with initialization.
    """
    _version = '251'
    fluent_name = 'ok-to-discard-data'
    _python_name = 'ok_to_discard_data'

class import_data_1(Command):
    """
    Import data for interpolation.
    
    Parameters
    ----------
        memory_id : int
            User-defined memory id to stored interpolated data.
        file_name : str
            Interpolated data file name.
        ok_to_discard_data : bool
            Current data has not been saved, including solution data and any report files, animation files, etc.
    Confirm you want to discard the data and proceed with initialization.
    """
    _version = '251'
    fluent_name = 'import-data'
    _python_name = 'import_data'
    argument_names = ['memory_id', 'file_name', 'ok_to_discard_data']
    _child_classes = dict(
        memory_id=memory_id,
        file_name=file_name_28,
        ok_to_discard_data=ok_to_discard_data,
    )

class interpolate_2(Group):
    """
    Interpolation utilities object.
    """
    _version = '251'
    fluent_name = 'interpolate'
    _python_name = 'interpolate'
    command_names = ['export_data', 'import_data']
    _child_classes = dict(
        export_data=export_data_1,
        import_data=import_data_1,
    )

class surface_name(String):
    """
    Name of the surface to be created.
    """
    _version = '251'
    fluent_name = 'surface-name'
    _python_name = 'surface_name'

class type_14(String, AllowedValuesMixin):
    """
    Type of the surface to be created.
    """
    _version = '251'
    fluent_name = 'type'
    _python_name = 'type'

class inclusion(String, AllowedValuesMixin):
    """
    Domain included inside or outside specified shape.
    """
    _version = '251'
    fluent_name = 'inclusion'
    _python_name = 'inclusion'

class input_coordinates(RealList):
    """
    Design variable minimum and maximum.
    """
    _version = '251'
    fluent_name = 'input-coordinates'
    _python_name = 'input_coordinates'

class surfaces_21(StringList, AllowedValuesMixin):
    """
    Surfaces to clip.
    """
    _version = '251'
    fluent_name = 'surfaces'
    _python_name = 'surfaces'

class create_region_clip_surface(Command):
    """
    Create a surface by clipping other surfaces.
    
    Parameters
    ----------
        surface_name : str
            Name of the surface to be created.
        type : str
            Type of the surface to be created.
        inclusion : str
            Domain included inside or outside specified shape.
        input_coordinates : List
            Design variable minimum and maximum.
        surfaces : List
            Surfaces to clip.
    """
    _version = '251'
    fluent_name = 'create-region-clip-surface'
    _python_name = 'create_region_clip_surface'
    argument_names = ['surface_name', 'type', 'inclusion', 'input_coordinates', 'surfaces']
    _child_classes = dict(
        surface_name=surface_name,
        type=type_14,
        inclusion=inclusion,
        input_coordinates=input_coordinates,
        surfaces=surfaces_21,
    )

class utilities(Group):
    """
    Adjoint utilities object.
    """
    _version = '251'
    fluent_name = 'utilities'
    _python_name = 'utilities'
    child_names = ['expert', 'interpolate']
    command_names = ['create_region_clip_surface']
    _child_classes = dict(
        expert=expert_10,
        interpolate=interpolate_2,
        create_region_clip_surface=create_region_clip_surface,
    )

class enable_26(Command):
    """
    Enables and loads adjoint module.
    """
    _version = '251'
    fluent_name = 'enable'
    _python_name = 'enable'

class gradient_based(Group):
    """
    Gradient-based design object.
    """
    _version = '251'
    fluent_name = 'gradient-based'
    _python_name = 'gradient_based'
    child_names = ['observables', 'methods', 'controls', 'monitors', 'calculation', 'postprocess_options', 'reporting', 'design_tool', 'optimizer', 'utilities']
    command_names = ['enable']
    _child_classes = dict(
        observables=observables,
        methods=methods_3,
        controls=controls_2,
        monitors=monitors,
        calculation=calculation,
        postprocess_options=postprocess_options,
        reporting=reporting,
        design_tool=design_tool,
        optimizer=optimizer,
        utilities=utilities,
        enable=enable_26,
    )

class parameterize_and_explore(Group):
    """
    Parameterize and explore object.
    """
    _version = '251'
    fluent_name = 'parameterize-and-explore'
    _python_name = 'parameterize_and_explore'
    child_names = ['morpher', 'region', 'design_conditions', 'objectives', 'design_change']
    _child_classes = dict(
        morpher=morpher,
        region=region,
        design_conditions=design_conditions,
        objectives=objectives,
        design_change=design_change,
    )

class geometry_9(Group):
    """
    Geometry object.
    """
    _version = '251'
    fluent_name = 'geometry'
    _python_name = 'geometry'
    child_names = ['parameterize_and_explore']
    command_names = ['enable']
    _child_classes = dict(
        parameterize_and_explore=parameterize_and_explore,
        enable=enable_26,
    )

class design(Group):
    """
    'design' child.
    """
    _version = '251'
    fluent_name = 'design'
    _python_name = 'design'
    child_names = ['gradient_based', 'geometry']
    _child_classes = dict(
        gradient_based=gradient_based,
        geometry=geometry_9,
    )

class project_filename_2(String):
    """
    'project_filename' child.
    """
    _version = '251'
    fluent_name = 'project-filename'
    _python_name = 'project_filename'

class initialize_5(Command):
    """
    Start Parametric Study.
    
    Parameters
    ----------
        project_filename : str
            'project_filename' child.
    """
    _version = '251'
    fluent_name = 'initialize'
    _python_name = 'initialize'
    argument_names = ['project_filename']
    _child_classes = dict(
        project_filename=project_filename_2,
    )

class copy_design_points(Boolean):
    """
    'copy_design_points' child.
    """
    _version = '251'
    fluent_name = 'copy-design-points'
    _python_name = 'copy_design_points'

class duplicate(Command):
    """
    Duplicate Parametric Study.
    
    Parameters
    ----------
        copy_design_points : bool
            'copy_design_points' child.
    """
    _version = '251'
    fluent_name = 'duplicate'
    _python_name = 'duplicate'
    argument_names = ['copy_design_points']
    _child_classes = dict(
        copy_design_points=copy_design_points,
    )

class study_name(String):
    """
    'study_name' child.
    """
    _version = '251'
    fluent_name = 'study-name'
    _python_name = 'study_name'

class set_as_current(Command):
    """
    Set As Current Study.
    
    Parameters
    ----------
        study_name : str
            'study_name' child.
    """
    _version = '251'
    fluent_name = 'set-as-current'
    _python_name = 'set_as_current'
    argument_names = ['study_name']
    _child_classes = dict(
        study_name=study_name,
    )

class use_base_data(Command):
    """
    Use Base Data.
    """
    _version = '251'
    fluent_name = 'use-base-data'
    _python_name = 'use_base_data'

class filepath(String):
    """
    'filepath' child.
    """
    _version = '251'
    fluent_name = 'filepath'
    _python_name = 'filepath'

class export_design_table(Command):
    """
    Export Design Point Table.
    
    Parameters
    ----------
        filepath : str
            'filepath' child.
    """
    _version = '251'
    fluent_name = 'export-design-table'
    _python_name = 'export_design_table'
    argument_names = ['filepath']
    _child_classes = dict(
        filepath=filepath,
    )

class delete_existing(Boolean):
    """
    'delete_existing' child.
    """
    _version = '251'
    fluent_name = 'delete-existing'
    _python_name = 'delete_existing'

class import_design_table(Command):
    """
    Import Design Point Table.
    
    Parameters
    ----------
        filepath : str
            'filepath' child.
        delete_existing : bool
            'delete_existing' child.
    """
    _version = '251'
    fluent_name = 'import-design-table'
    _python_name = 'import_design_table'
    argument_names = ['filepath', 'delete_existing']
    _child_classes = dict(
        filepath=filepath,
        delete_existing=delete_existing,
    )

class write_data_2(Boolean):
    """
    'write_data' child.
    """
    _version = '251'
    fluent_name = 'write-data'
    _python_name = 'write_data'

class capture_simulation_report_data(Boolean):
    """
    'capture_simulation_report_data' child.
    """
    _version = '251'
    fluent_name = 'capture-simulation-report-data'
    _python_name = 'capture_simulation_report_data'

class create_10(CommandWithPositionalArgs):
    """
    Add new Design Point.
    
    Parameters
    ----------
        write_data : bool
            'write_data' child.
        capture_simulation_report_data : bool
            'capture_simulation_report_data' child.
    """
    _version = '251'
    fluent_name = 'create'
    _python_name = 'create'
    argument_names = ['write_data', 'capture_simulation_report_data']
    _child_classes = dict(
        write_data=write_data_2,
        capture_simulation_report_data=capture_simulation_report_data,
    )

class design_point(String):
    """
    'design_point' child.
    """
    _version = '251'
    fluent_name = 'design-point'
    _python_name = 'design_point'

class duplicate_1(Command):
    """
    Duplicate Design Point.
    
    Parameters
    ----------
        design_point : str
            'design_point' child.
    """
    _version = '251'
    fluent_name = 'duplicate'
    _python_name = 'duplicate'
    argument_names = ['design_point']
    _child_classes = dict(
        design_point=design_point,
    )

class load_case_data(Command):
    """
    Loads relevant case/data file for current design point.
    """
    _version = '251'
    fluent_name = 'load-case-data'
    _python_name = 'load_case_data'

class set_as_current_1(Command):
    """
    Set current design point.
    
    Parameters
    ----------
        design_point : str
            'design_point' child.
    """
    _version = '251'
    fluent_name = 'set-as-current'
    _python_name = 'set_as_current'
    argument_names = ['design_point']
    _child_classes = dict(
        design_point=design_point,
    )

class design_points_1(StringList):
    """
    'design_points' child.
    """
    _version = '251'
    fluent_name = 'design-points'
    _python_name = 'design_points'

class delete_design_points(Command):
    """
    Delete Design Points.
    
    Parameters
    ----------
        design_points : List
            'design_points' child.
    """
    _version = '251'
    fluent_name = 'delete-design-points'
    _python_name = 'delete_design_points'
    argument_names = ['design_points']
    _child_classes = dict(
        design_points=design_points_1,
    )

class separate_journals(Boolean):
    """
    'separate_journals' child.
    """
    _version = '251'
    fluent_name = 'separate-journals'
    _python_name = 'separate_journals'

class save_journals(Command):
    """
    Save Journals.
    
    Parameters
    ----------
        separate_journals : bool
            'separate_journals' child.
    """
    _version = '251'
    fluent_name = 'save-journals'
    _python_name = 'save_journals'
    argument_names = ['separate_journals']
    _child_classes = dict(
        separate_journals=separate_journals,
    )

class clear_generated_data(Command):
    """
    Clear Generated Data.
    
    Parameters
    ----------
        design_points : List
            'design_points' child.
    """
    _version = '251'
    fluent_name = 'clear-generated-data'
    _python_name = 'clear_generated_data'
    argument_names = ['design_points']
    _child_classes = dict(
        design_points=design_points_1,
    )

class update_current(Command):
    """
    Update Current Design Point.
    """
    _version = '251'
    fluent_name = 'update-current'
    _python_name = 'update_current'

class update_all(Command):
    """
    Update All Design Point.
    """
    _version = '251'
    fluent_name = 'update-all'
    _python_name = 'update_all'

class update_selected(Command):
    """
    Update Selected Design Points.
    
    Parameters
    ----------
        design_points : List
            'design_points' child.
    """
    _version = '251'
    fluent_name = 'update-selected'
    _python_name = 'update_selected'
    argument_names = ['design_points']
    _child_classes = dict(
        design_points=design_points_1,
    )

class input_parameters_child(Real):
    """
    'child_object_type' of input_parameters.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'input_parameters_child'

class input_parameters(NamedObject[input_parameters_child], CreatableNamedObjectMixin[input_parameters_child]):
    """
    Input Parameter Values of Design Point.
    """
    _version = '251'
    fluent_name = 'input-parameters'
    _python_name = 'input_parameters'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = input_parameters_child

class output_parameters_child(Real):
    """
    'child_object_type' of output_parameters.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'output_parameters_child'

class output_parameters(NamedObject[output_parameters_child], CreatableNamedObjectMixin[output_parameters_child]):
    """
    Output Parameter Values of Design Point.
    """
    _version = '251'
    fluent_name = 'output-parameters'
    _python_name = 'output_parameters'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = output_parameters_child

class write_data_3(Boolean):
    """
    WriteData option for Design Point.
    """
    _version = '251'
    fluent_name = 'write-data'
    _python_name = 'write_data'

class capture_simulation_report_data_1(Boolean):
    """
    Capture Simulation Report Data option for Design Point.
    """
    _version = '251'
    fluent_name = 'capture-simulation-report-data'
    _python_name = 'capture_simulation_report_data'

class design_points_child(Group):
    """
    'child_object_type' of design_points.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'design_points_child'
    child_names = ['name', 'input_parameters', 'output_parameters', 'write_data', 'capture_simulation_report_data']
    _child_classes = dict(
        name=name_2,
        input_parameters=input_parameters,
        output_parameters=output_parameters,
        write_data=write_data_3,
        capture_simulation_report_data=capture_simulation_report_data_1,
    )

class design_points(NamedObject[design_points_child], CreatableNamedObjectMixin[design_points_child]):
    """
    'design_points' child.
    """
    _version = '251'
    fluent_name = 'design-points'
    _python_name = 'design_points'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'duplicate', 'load_case_data', 'set_as_current', 'delete_design_points', 'save_journals', 'clear_generated_data', 'update_current', 'update_all', 'update_selected']
    _child_classes = dict(
        create=create_10,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        duplicate=duplicate_1,
        load_case_data=load_case_data,
        set_as_current=set_as_current_1,
        delete_design_points=delete_design_points,
        save_journals=save_journals,
        clear_generated_data=clear_generated_data,
        update_current=update_current,
        update_all=update_all,
        update_selected=update_selected,
    )
    child_object_type = design_points_child

class current_design_point(String):
    """
    Name of Current Design Point.
    """
    _version = '251'
    fluent_name = 'current-design-point'
    _python_name = 'current_design_point'

class parametric_studies_child(Group):
    """
    'child_object_type' of parametric_studies.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'parametric_studies_child'
    child_names = ['name', 'design_points', 'current_design_point']
    _child_classes = dict(
        name=name_2,
        design_points=design_points,
        current_design_point=current_design_point,
    )

class parametric_studies(NamedObject[parametric_studies_child], CreatableNamedObjectMixin[parametric_studies_child]):
    """
    'parametric_studies' child.
    """
    _version = '251'
    fluent_name = 'parametric-studies'
    _python_name = 'parametric_studies'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'initialize', 'duplicate', 'set_as_current', 'use_base_data', 'export_design_table', 'import_design_table']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        initialize=initialize_5,
        duplicate=duplicate,
        set_as_current=set_as_current,
        use_base_data=use_base_data,
        export_design_table=export_design_table,
        import_design_table=import_design_table,
    )
    child_object_type = parametric_studies_child

class current_parametric_study(String):
    """
    Name of Current Parametric Study.
    """
    _version = '251'
    fluent_name = 'current-parametric-study'
    _python_name = 'current_parametric_study'

class enable_in_tui(Boolean):
    """
    Enable/disable parameters in the text user interface.
    """
    _version = '251'
    fluent_name = 'enable-in-tui?'
    _python_name = 'enable_in_tui'

class value_25(Real):
    """
    'value' child.
    """
    _version = '251'
    fluent_name = 'value'
    _python_name = 'value'

class apply_function(String):
    """
    'apply_function' child.
    """
    _version = '251'
    fluent_name = 'apply-function'
    _python_name = 'apply_function'

class scheme_proc_child(Group):
    """
    'child_object_type' of scheme_proc.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'scheme_proc_child'
    child_names = ['name', 'value', 'apply_function']
    _child_classes = dict(
        name=name_2,
        value=value_25,
        apply_function=apply_function,
    )

class scheme_proc(NamedObject[scheme_proc_child], CreatableNamedObjectMixin[scheme_proc_child]):
    """
    Use input parameter in scheme-procedure.
    """
    _version = '251'
    fluent_name = 'scheme-proc'
    _python_name = 'scheme_proc'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = scheme_proc_child

class udf_side_child(Group):
    """
    'child_object_type' of udf_side.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'udf_side_child'
    child_names = ['name', 'value']
    _child_classes = dict(
        name=name_2,
        value=value_25,
    )

class udf_side(NamedObject[udf_side_child], CreatableNamedObjectMixin[udf_side_child]):
    """
    Use input parameter in solver-udf.
    """
    _version = '251'
    fluent_name = 'udf-side'
    _python_name = 'udf_side'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = udf_side_child

class expression_8_child(Group):
    """
    'child_object_type' of expression.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'expression_child'
    child_names = ['name', 'value']
    _child_classes = dict(
        name=name_2,
        value=value_25,
    )

class expression_8(NamedObject[expression_8_child], CreatableNamedObjectMixin[expression_8_child]):
    """
    'expression' child.
    """
    _version = '251'
    fluent_name = 'expression'
    _python_name = 'expression'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
    )
    child_object_type = expression_8_child

class list_5(Command):
    """
    List all input parameters.
    """
    _version = '251'
    fluent_name = 'list'
    _python_name = 'list'
    return_type = 'object'

class input_parameters_1(Group):
    """
    The input-parameters object.
    """
    _version = '251'
    fluent_name = 'input-parameters'
    _python_name = 'input_parameters'
    child_names = ['scheme_proc', 'udf_side', 'expression']
    command_names = ['list']
    _child_classes = dict(
        scheme_proc=scheme_proc,
        udf_side=udf_side,
        expression=expression_8,
        list=list_5,
    )

class name_24(String, AllowedValuesMixin):
    """
    Parameter name.
    """
    _version = '251'
    fluent_name = 'name'
    _python_name = 'name'

class print_to_console(Command):
    """
    Print parameter value to console.
    
    Parameters
    ----------
        name : str
            Parameter name.
    """
    _version = '251'
    fluent_name = 'print-to-console'
    _python_name = 'print_to_console'
    argument_names = ['name']
    _child_classes = dict(
        name=name_24,
    )

class param_name(String, AllowedValuesMixin):
    """
    Parameter name.
    """
    _version = '251'
    fluent_name = 'param-name'
    _python_name = 'param_name'

class append_data_2(Boolean):
    """
    Yes if you want to append data to file .
    """
    _version = '251'
    fluent_name = 'append-data?'
    _python_name = 'append_data'

class write_to_file_7(Command):
    """
    Write parameter value to file.
    
    Parameters
    ----------
        param_name : str
            Parameter name.
        file_name : str
            File name.
        append_data : bool
            Yes if you want to append data to file .
    """
    _version = '251'
    fluent_name = 'write-to-file'
    _python_name = 'write_to_file'
    argument_names = ['param_name', 'file_name', 'append_data']
    _child_classes = dict(
        param_name=param_name,
        file_name=file_name_16,
        append_data=append_data_2,
    )

class report_definition(String, AllowedValuesMixin):
    """
    'report_definition' child.
    """
    _version = '251'
    fluent_name = 'report-definition'
    _python_name = 'report_definition'

class report_definitions_1_child(Group):
    """
    'child_object_type' of report_definitions.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'report_definitions_child'
    child_names = ['name', 'report_definition']
    _child_classes = dict(
        name=name_2,
        report_definition=report_definition,
    )

class report_definitions_1(NamedObject[report_definitions_1_child], CreatableNamedObjectMixin[report_definitions_1_child]):
    """
    'report_definitions' child.
    """
    _version = '251'
    fluent_name = 'report-definitions'
    _python_name = 'report_definitions'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'print_to_console', 'write_to_file']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        print_to_console=print_to_console,
        write_to_file=write_to_file_7,
    )
    child_object_type = report_definitions_1_child

class named_expression(String, AllowedValuesMixin):
    """
    Named expression name.
    """
    _version = '251'
    fluent_name = 'named-expression'
    _python_name = 'named_expression'

class named_expressions_1_child(Group):
    """
    'child_object_type' of named_expressions.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'named_expressions_child'
    child_names = ['name', 'named_expression']
    _child_classes = dict(
        name=name_2,
        named_expression=named_expression,
    )

class named_expressions_1(NamedObject[named_expressions_1_child], CreatableNamedObjectMixin[named_expressions_1_child]):
    """
    Named Expression parameters object.
    """
    _version = '251'
    fluent_name = 'named-expressions'
    _python_name = 'named_expressions'
    command_names = ['create', 'delete', 'rename', 'list', 'list_properties', 'make_a_copy', 'print_to_console', 'write_to_file']
    _child_classes = dict(
        create=create_1,
        delete=delete_1,
        rename=rename,
        list=list,
        list_properties=list_properties,
        make_a_copy=make_a_copy,
        print_to_console=print_to_console,
        write_to_file=write_to_file_7,
    )
    child_object_type = named_expressions_1_child

class list_6(Command):
    """
    List all output parameters.
    """
    _version = '251'
    fluent_name = 'list'
    _python_name = 'list'
    return_type = 'object'

class print_all_to_console(Command):
    """
    Print all parameters value to console.
    """
    _version = '251'
    fluent_name = 'print-all-to-console'
    _python_name = 'print_all_to_console'

class append_data_3(Boolean):
    """
    'append_data' child.
    """
    _version = '251'
    fluent_name = 'append-data?'
    _python_name = 'append_data'

class write_all_to_file(Command):
    """
    Write all parameters value to file.
    
    Parameters
    ----------
        file_name : str
            'file_name' child.
        append_data : bool
            'append_data' child.
    """
    _version = '251'
    fluent_name = 'write-all-to-file'
    _python_name = 'write_all_to_file'
    argument_names = ['file_name', 'append_data']
    _child_classes = dict(
        file_name=file_name_2,
        append_data=append_data_3,
    )

class output_parameters_1(Group):
    """
    The output-parameters object.
    """
    _version = '251'
    fluent_name = 'output-parameters'
    _python_name = 'output_parameters'
    child_names = ['report_definitions', 'named_expressions']
    command_names = ['list', 'print_all_to_console', 'write_all_to_file']
    _child_classes = dict(
        report_definitions=report_definitions_1,
        named_expressions=named_expressions_1,
        list=list_6,
        print_all_to_console=print_all_to_console,
        write_all_to_file=write_all_to_file,
    )

class parameters(Group):
    """
    'parameters' child.
    """
    _version = '251'
    fluent_name = 'parameters'
    _python_name = 'parameters'
    child_names = ['enable_in_tui', 'input_parameters', 'output_parameters']
    _child_classes = dict(
        enable_in_tui=enable_in_tui,
        input_parameters=input_parameters_1,
        output_parameters=output_parameters_1,
    )

class thread_number_method(String, AllowedValuesMixin):
    """
    'thread_number_method' child.
    """
    _version = '251'
    fluent_name = 'thread-number-method'
    _python_name = 'thread_number_method'

class fixed_thread_number(Integer):
    """
    'fixed_thread_number' child.
    """
    _version = '251'
    fluent_name = 'fixed-thread-number'
    _python_name = 'fixed_thread_number'

class thread_number_control(Group):
    """
    Thread number control.
    """
    _version = '251'
    fluent_name = 'thread-number-control'
    _python_name = 'thread_number_control'
    child_names = ['thread_number_method', 'fixed_thread_number']
    _child_classes = dict(
        thread_number_method=thread_number_method,
        fixed_thread_number=fixed_thread_number,
    )

class check_verbosity_1(Integer):
    """
    Verbosity output of parallel check. Higher verbosity corresponds to more detailed information.
    """
    _version = '251'
    fluent_name = 'check-verbosity'
    _python_name = 'check_verbosity'

class case_file(Boolean):
    """
    Enable the use-case-file method for auto partitioning.
    """
    _version = '251'
    fluent_name = 'case-file'
    _python_name = 'case_file'

class across_zones(Boolean):
    """
    Enable auto partitioning by zone or by domain.
    """
    _version = '251'
    fluent_name = 'across-zones'
    _python_name = 'across_zones'

class method_22(String, AllowedValuesMixin):
    """
    'method' child.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class load_vector(RealList):
    """
    Auto the partition load vector.
    """
    _version = '251'
    fluent_name = 'load-vector'
    _python_name = 'load_vector'

class pre_test(Boolean):
    """
    Auto partition pre-testing optimization.
    """
    _version = '251'
    fluent_name = 'pre-test'
    _python_name = 'pre_test'

class auto(Group):
    """
    The object.
    """
    _version = '251'
    fluent_name = 'auto'
    _python_name = 'auto'
    child_names = ['case_file', 'across_zones', 'method', 'load_vector', 'pre_test']
    _child_classes = dict(
        case_file=case_file,
        across_zones=across_zones,
        method=method_22,
        load_vector=load_vector,
        pre_test=pre_test,
    )

class across_zone_boundaries(Boolean):
    """
    'across_zone_boundaries' child.
    """
    _version = '251'
    fluent_name = 'across-zone-boundaries?'
    _python_name = 'across_zone_boundaries'

class cell_function_3(String, AllowedValuesMixin):
    """
    Cell function.
    """
    _version = '251'
    fluent_name = 'cell-function'
    _python_name = 'cell_function'

class load_distribution(RealList):
    """
    Partition load vector.
    """
    _version = '251'
    fluent_name = 'load-distribution'
    _python_name = 'load_distribution'

class merge_small_regions(Boolean):
    """
    'merge_small_regions' child.
    """
    _version = '251'
    fluent_name = 'merge-small-regions?'
    _python_name = 'merge_small_regions'

class max_merge_iterations(Integer):
    """
    'max_merge_iterations' child.
    """
    _version = '251'
    fluent_name = 'max-merge-iterations'
    _python_name = 'max_merge_iterations'

class merge(Group):
    """
    Partition merging optimization.
    """
    _version = '251'
    fluent_name = 'merge'
    _python_name = 'merge'
    child_names = ['merge_small_regions', 'max_merge_iterations']
    _child_classes = dict(
        merge_small_regions=merge_small_regions,
        max_merge_iterations=max_merge_iterations,
    )

class partition_origin_vector_child(Real):
    """
    'child_object_type' of partition_origin_vector.
    """
    _version = '251'
    fluent_name = 'child-object-type'
    _python_name = 'partition_origin_vector_child'

class partition_origin_vector(ListObject[partition_origin_vector_child]):
    """
    'partition_origin_vector' child.
    """
    _version = '251'
    fluent_name = 'partition-origin-vector'
    _python_name = 'partition_origin_vector'
    command_names = ['list_properties', 'resize']
    _child_classes = dict(
        list_properties=list_properties_1,
        resize=resize,
    )
    child_object_type = partition_origin_vector_child

class pre_test_1(Boolean):
    """
    Partition pre-testing optimization.
    """
    _version = '251'
    fluent_name = 'pre-test?'
    _python_name = 'pre_test'

class smooth_partitioning(Boolean):
    """
    'smooth_partitioning' child.
    """
    _version = '251'
    fluent_name = 'smooth-partitioning?'
    _python_name = 'smooth_partitioning'

class max_smoothing_iterations(Integer):
    """
    'max_smoothing_iterations' child.
    """
    _version = '251'
    fluent_name = 'max-smoothing-iterations'
    _python_name = 'max_smoothing_iterations'

class smooth_1(Group):
    """
    Partition smoothing optimization.
    """
    _version = '251'
    fluent_name = 'smooth'
    _python_name = 'smooth'
    child_names = ['smooth_partitioning', 'max_smoothing_iterations']
    _child_classes = dict(
        smooth_partitioning=smooth_partitioning,
        max_smoothing_iterations=max_smoothing_iterations,
    )

class print_verbosity(Integer):
    """
    Partition print verbosity.
    """
    _version = '251'
    fluent_name = 'print-verbosity'
    _python_name = 'print_verbosity'

class origin_7(RealList):
    """
    Partition merging optimization.
    """
    _version = '251'
    fluent_name = 'origin'
    _python_name = 'origin'

class set_4(Real):
    """
    Laplace smoothing for mesh with stretched cells.
    """
    _version = '251'
    fluent_name = 'set'
    _python_name = 'set'

class laplace_smoothing(Group):
    """
    'laplace_smoothing' child.
    """
    _version = '251'
    fluent_name = 'laplace-smoothing'
    _python_name = 'laplace_smoothing'
    child_names = ['enabled', 'set']
    _child_classes = dict(
        enabled=enabled_63,
        set=set_4,
    )

class nfaces_as_weights_1(Boolean):
    """
    'nfaces_as_weights' child.
    """
    _version = '251'
    fluent_name = 'nfaces-as-weights?'
    _python_name = 'nfaces_as_weights'

class user_defined_value(Boolean):
    """
    'user_defined_value' child.
    """
    _version = '251'
    fluent_name = 'user-defined-value?'
    _python_name = 'user_defined_value'

class nfaces_as_weights(Group):
    """
    Use number of faces as weights.
    """
    _version = '251'
    fluent_name = 'nfaces-as-weights'
    _python_name = 'nfaces_as_weights'
    child_names = ['nfaces_as_weights', 'user_defined_value', 'value']
    _child_classes = dict(
        nfaces_as_weights=nfaces_as_weights_1,
        user_defined_value=user_defined_value,
        value=value_25,
    )

class face_area_as_weights(Boolean):
    """
    Use face area as connection weights.
    """
    _version = '251'
    fluent_name = 'face-area-as-weights?'
    _python_name = 'face_area_as_weights'

class use_layering(Boolean):
    """
    'use_layering' child.
    """
    _version = '251'
    fluent_name = 'use-layering'
    _python_name = 'use_layering'

class base_face_zone_for_partitioning(IntegerList):
    """
    'base_face_zone_for_partitioning' child.
    """
    _version = '251'
    fluent_name = 'base-face-zone-for-partitioning'
    _python_name = 'base_face_zone_for_partitioning'

class layering_1(Group):
    """
    Use layering for partitioning.
    """
    _version = '251'
    fluent_name = 'layering'
    _python_name = 'layering'
    child_names = ['use_layering', 'base_face_zone_for_partitioning']
    _child_classes = dict(
        use_layering=use_layering,
        base_face_zone_for_partitioning=base_face_zone_for_partitioning,
    )

class use(Boolean):
    """
    'use' child.
    """
    _version = '251'
    fluent_name = 'use?'
    _python_name = 'use'

class use_user_define_value(Boolean):
    """
    'use_user_define_value' child.
    """
    _version = '251'
    fluent_name = 'use-user-define-value?'
    _python_name = 'use_user_define_value'

class solid_thread_weight(Group):
    """
    Use solid thread weights.
    """
    _version = '251'
    fluent_name = 'solid-thread-weight'
    _python_name = 'solid_thread_weight'
    child_names = ['use', 'use_user_define_value', 'value']
    _child_classes = dict(
        use=use,
        use_user_define_value=use_user_define_value,
        value=value_25,
    )

class use_enhancement(Boolean):
    """
    Enhancement for mesh with stretched cells.
    """
    _version = '251'
    fluent_name = 'use-enhancement?'
    _python_name = 'use_enhancement'

class aspect_ratio_1(Real):
    """
    Enhancement for mesh with stretched cells.
    """
    _version = '251'
    fluent_name = 'aspect-ratio'
    _python_name = 'aspect_ratio'

class stretched_mesh_enhancement(Group):
    """
    Enhancement for mesh with stretched cells.
    """
    _version = '251'
    fluent_name = 'stretched-mesh-enhancement'
    _python_name = 'stretched_mesh_enhancement'
    child_names = ['use_enhancement', 'aspect_ratio']
    _child_classes = dict(
        use_enhancement=use_enhancement,
        aspect_ratio=aspect_ratio_1,
    )

class user_defined_14(Boolean):
    """
    'user_defined' child.
    """
    _version = '251'
    fluent_name = 'user-defined?'
    _python_name = 'user_defined'

class hybrid_optimization(Boolean):
    """
    'hybrid_optimization' child.
    """
    _version = '251'
    fluent_name = 'hybrid-optimization?'
    _python_name = 'hybrid_optimization'

class particle_weight(Group):
    """
    DPM particle weight.
    """
    _version = '251'
    fluent_name = 'particle-weight'
    _python_name = 'particle_weight'
    child_names = ['use', 'user_defined', 'value', 'hybrid_optimization']
    _child_classes = dict(
        use=use,
        user_defined=user_defined_14,
        value=value_25,
        hybrid_optimization=hybrid_optimization,
    )

class vof_free_surface_weight(Group):
    """
    VOF free surface weight.
    """
    _version = '251'
    fluent_name = 'vof-free-surface-weight'
    _python_name = 'vof_free_surface_weight'
    child_names = ['use', 'user_defined', 'value']
    _child_classes = dict(
        use=use,
        user_defined=user_defined_14,
        value=value_25,
    )

class isat_weight(Group):
    """
    ISAT weight.
    """
    _version = '251'
    fluent_name = 'isat-weight'
    _python_name = 'isat_weight'
    child_names = ['use', 'user_defined', 'value']
    _child_classes = dict(
        use=use,
        user_defined=user_defined_14,
        value=value_25,
    )

class fluid_solid_rebalance_after_read_case(Boolean):
    """
    Use optimal repartitioning after reading case file with significant solid and fluid zones.
    """
    _version = '251'
    fluent_name = 'fluid-solid-rebalance-after-read-case?'
    _python_name = 'fluid_solid_rebalance_after_read_case'

class model_weighted_partition(Boolean):
    """
    Model weighted partition.
    """
    _version = '251'
    fluent_name = 'model-weighted-partition'
    _python_name = 'model_weighted_partition'

class load_balancing(Boolean):
    """
    'load_balancing' child.
    """
    _version = '251'
    fluent_name = 'load-balancing?'
    _python_name = 'load_balancing'

class interval(Integer):
    """
    'interval' child.
    """
    _version = '251'
    fluent_name = 'interval'
    _python_name = 'interval'

class dpm_load_balancing(Group):
    """
    Enable automatic load balancing for DPM.
    """
    _version = '251'
    fluent_name = 'dpm-load-balancing'
    _python_name = 'dpm_load_balancing'
    child_names = ['load_balancing', 'threshold', 'interval']
    _child_classes = dict(
        load_balancing=load_balancing,
        threshold=threshold_1,
        interval=interval,
    )

class across_zones_1(Command):
    """
    Enable partitioning by zone or by domain.
    
    Parameters
    ----------
        across_zone_boundaries : bool
            'across_zone_boundaries' child.
    """
    _version = '251'
    fluent_name = 'across-zones'
    _python_name = 'across_zones'
    argument_names = ['across_zone_boundaries']
    _child_classes = dict(
        across_zone_boundaries=across_zone_boundaries,
    )

class all_off(Command):
    """
    Disable all optimization.
    """
    _version = '251'
    fluent_name = 'all-off'
    _python_name = 'all_off'

class all_on(Command):
    """
    Enable all optimization.
    """
    _version = '251'
    fluent_name = 'all-on'
    _python_name = 'all_on'

class set_3(Group):
    """
    The object.
    """
    _version = '251'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['across_zone_boundaries', 'cell_function', 'load_distribution', 'merge', 'partition_origin_vector', 'pre_test', 'smooth', 'print_verbosity', 'origin', 'laplace_smoothing', 'nfaces_as_weights', 'face_area_as_weights', 'layering', 'solid_thread_weight', 'stretched_mesh_enhancement', 'particle_weight', 'vof_free_surface_weight', 'isat_weight', 'fluid_solid_rebalance_after_read_case', 'model_weighted_partition', 'dpm_load_balancing']
    command_names = ['across_zones', 'all_off', 'all_on']
    _child_classes = dict(
        across_zone_boundaries=across_zone_boundaries,
        cell_function=cell_function_3,
        load_distribution=load_distribution,
        merge=merge,
        partition_origin_vector=partition_origin_vector,
        pre_test=pre_test_1,
        smooth=smooth_1,
        print_verbosity=print_verbosity,
        origin=origin_7,
        laplace_smoothing=laplace_smoothing,
        nfaces_as_weights=nfaces_as_weights,
        face_area_as_weights=face_area_as_weights,
        layering=layering_1,
        solid_thread_weight=solid_thread_weight,
        stretched_mesh_enhancement=stretched_mesh_enhancement,
        particle_weight=particle_weight,
        vof_free_surface_weight=vof_free_surface_weight,
        isat_weight=isat_weight,
        fluid_solid_rebalance_after_read_case=fluid_solid_rebalance_after_read_case,
        model_weighted_partition=model_weighted_partition,
        dpm_load_balancing=dpm_load_balancing,
        across_zones=across_zones_1,
        all_off=all_off,
        all_on=all_on,
    )

class number_of_partitions(Integer):
    """
    'number_of_partitions' child.
    """
    _version = '251'
    fluent_name = 'number-of-partitions'
    _python_name = 'number_of_partitions'

class combine_partition(Command):
    """
    Merge every N partitions.
    
    Parameters
    ----------
        number_of_partitions : int
            'number_of_partitions' child.
    """
    _version = '251'
    fluent_name = 'combine-partition'
    _python_name = 'combine_partition'
    argument_names = ['number_of_partitions']
    _child_classes = dict(
        number_of_partitions=number_of_partitions,
    )

class merge_iterations(Integer):
    """
    'merge_iterations' child.
    """
    _version = '251'
    fluent_name = 'merge-iterations'
    _python_name = 'merge_iterations'

class merge_clusters(Command):
    """
    Merge partition clusters.
    
    Parameters
    ----------
        merge_iterations : int
            'merge_iterations' child.
    """
    _version = '251'
    fluent_name = 'merge-clusters'
    _python_name = 'merge_clusters'
    argument_names = ['merge_iterations']
    _child_classes = dict(
        merge_iterations=merge_iterations,
    )

class partition_method(String, AllowedValuesMixin):
    """
    'partition_method' child.
    """
    _version = '251'
    fluent_name = 'partition-method'
    _python_name = 'partition_method'

class method_21(Command):
    """
    Partition the domain.
    
    Parameters
    ----------
        partition_method : str
            'partition_method' child.
        count : int
            'count' child.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'
    argument_names = ['partition_method', 'count']
    _child_classes = dict(
        partition_method=partition_method,
        count=count,
    )

class print_partitions(Command):
    """
    Print partition information.
    """
    _version = '251'
    fluent_name = 'print-partitions'
    _python_name = 'print_partitions'

class print_active_partitions(Command):
    """
    Print active partition information.
    """
    _version = '251'
    fluent_name = 'print-active-partitions'
    _python_name = 'print_active_partitions'

class print_stored_partitions(Command):
    """
    Print stored partition information.
    """
    _version = '251'
    fluent_name = 'print-stored-partitions'
    _python_name = 'print_stored_partitions'

class reorder_partitions(Command):
    """
    Reorder partitions.
    """
    _version = '251'
    fluent_name = 'reorder-partitions'
    _python_name = 'reorder_partitions'

class reorder_partitions_to_architecture(Command):
    """
    Reorder partitions to architecture.
    """
    _version = '251'
    fluent_name = 'reorder-partitions-to-architecture'
    _python_name = 'reorder_partitions_to_architecture'

class smoothing_iteration(Integer):
    """
    Maximum number of smoothing iterations.
    """
    _version = '251'
    fluent_name = 'smoothing-iteration'
    _python_name = 'smoothing_iteration'

class smooth_partition(Command):
    """
    Smooth partition interface.
    
    Parameters
    ----------
        smoothing_iteration : int
            Maximum number of smoothing iterations.
    """
    _version = '251'
    fluent_name = 'smooth-partition'
    _python_name = 'smooth_partition'
    argument_names = ['smoothing_iteration']
    _child_classes = dict(
        smoothing_iteration=smoothing_iteration,
    )

class use_stored_partitions(Command):
    """
    Use stored partitioning.
    """
    _version = '251'
    fluent_name = 'use-stored-partitions'
    _python_name = 'use_stored_partitions'

class partition_3(Group):
    """
    The partition domain object.
    """
    _version = '251'
    fluent_name = 'partition'
    _python_name = 'partition'
    child_names = ['auto', 'set']
    command_names = ['combine_partition', 'merge_clusters', 'method', 'print_partitions', 'print_active_partitions', 'print_stored_partitions', 'reorder_partitions', 'reorder_partitions_to_architecture', 'smooth_partition', 'use_stored_partitions']
    _child_classes = dict(
        auto=auto,
        set=set_3,
        combine_partition=combine_partition,
        merge_clusters=merge_clusters,
        method=method_21,
        print_partitions=print_partitions,
        print_active_partitions=print_active_partitions,
        print_stored_partitions=print_stored_partitions,
        reorder_partitions=reorder_partitions,
        reorder_partitions_to_architecture=reorder_partitions_to_architecture,
        smooth_partition=smooth_partition,
        use_stored_partitions=use_stored_partitions,
    )

class partition_mask(IntegerList):
    """
    Partition mask.
    """
    _version = '251'
    fluent_name = 'partition-mask'
    _python_name = 'partition_mask'

class verbosity_19(Integer):
    """
    The parallel verbosity.
    """
    _version = '251'
    fluent_name = 'verbosity'
    _python_name = 'verbosity'

class time_out(Real):
    """
    Spawn timeout seconds.
    """
    _version = '251'
    fluent_name = 'time-out'
    _python_name = 'time_out'

class fast_io(Boolean):
    """
    Use fast I/O option.
    """
    _version = '251'
    fluent_name = 'fast-io?'
    _python_name = 'fast_io'

class set_2(Group):
    """
    'set' child.
    """
    _version = '251'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['partition_mask', 'verbosity', 'time_out', 'fast_io']
    _child_classes = dict(
        partition_mask=partition_mask,
        verbosity=verbosity_19,
        time_out=time_out,
        fast_io=fast_io,
    )

class use_multi_physics(Boolean):
    """
    'use_multi_physics' child.
    """
    _version = '251'
    fluent_name = 'use-multi-physics?'
    _python_name = 'use_multi_physics'

class physical_models_2(Group):
    """
    Use physical-models load balancing?.
    """
    _version = '251'
    fluent_name = 'physical-models'
    _python_name = 'physical_models'
    child_names = ['use_multi_physics', 'threshold', 'interval']
    _child_classes = dict(
        use_multi_physics=use_multi_physics,
        threshold=threshold_1,
        interval=interval,
    )

class auto_1(Boolean):
    """
    'auto' child.
    """
    _version = '251'
    fluent_name = 'auto?'
    _python_name = 'auto'

class dynamic_mesh_1(Group):
    """
    Use load balancing for dynamic mesh?.
    """
    _version = '251'
    fluent_name = 'dynamic-mesh'
    _python_name = 'dynamic_mesh'
    child_names = ['use', 'auto', 'threshold', 'interval']
    _child_classes = dict(
        use=use,
        auto=auto_1,
        threshold=threshold_1,
        interval=interval,
    )

class mesh_adaption(Group):
    """
    Use load balancing for mesh adaption?.
    """
    _version = '251'
    fluent_name = 'mesh-adaption'
    _python_name = 'mesh_adaption'
    child_names = ['use', 'threshold']
    _child_classes = dict(
        use=use,
        threshold=threshold_1,
    )

class load_balance(Group):
    """
    'load_balance' child.
    """
    _version = '251'
    fluent_name = 'load-balance'
    _python_name = 'load_balance'
    child_names = ['physical_models', 'dynamic_mesh', 'mesh_adaption']
    _child_classes = dict(
        physical_models=physical_models_2,
        dynamic_mesh=dynamic_mesh_1,
        mesh_adaption=mesh_adaption,
    )

class enabled_70(Boolean):
    """
    Enable/disable loosely coupled conjugate heat transfer.
    """
    _version = '251'
    fluent_name = 'enabled?'
    _python_name = 'enabled'

class iter_per_coupling_count(Integer):
    """
    'iter_per_coupling_count' child.
    """
    _version = '251'
    fluent_name = 'iter-per-coupling-count'
    _python_name = 'iter_per_coupling_count'

class method_23(String, AllowedValuesMixin):
    """
    The method for fluid and solid zone coupling.
    """
    _version = '251'
    fluent_name = 'method'
    _python_name = 'method'

class interval_1(Real):
    """
    'interval' child.
    """
    _version = '251'
    fluent_name = 'interval'
    _python_name = 'interval'

class frequency_10(Integer):
    """
    'frequency' child.
    """
    _version = '251'
    fluent_name = 'frequency'
    _python_name = 'frequency'

class iteration(Integer):
    """
    'iteration' child.
    """
    _version = '251'
    fluent_name = 'iteration'
    _python_name = 'iteration'

class single_session_coupling(Group):
    """
    'single_session_coupling' child.
    """
    _version = '251'
    fluent_name = 'single-session-coupling'
    _python_name = 'single_session_coupling'
    child_names = ['method', 'type', 'interval', 'frequency', 'iteration']
    _child_classes = dict(
        method=method_23,
        type=type_2,
        interval=interval_1,
        frequency=frequency_10,
        iteration=iteration,
    )

class two_session_coupling(Group):
    """
    'two_session_coupling' child.
    """
    _version = '251'
    fluent_name = 'two-session-coupling'
    _python_name = 'two_session_coupling'
    child_names = ['method', 'type', 'frequency']
    _child_classes = dict(
        method=method_23,
        type=type_2,
        frequency=frequency_10,
    )

class coupling(Group):
    """
    The coupling method and when coupling takes place.
    """
    _version = '251'
    fluent_name = 'coupling'
    _python_name = 'coupling'
    child_names = ['iter_per_coupling_count', 'single_session_coupling', 'two_session_coupling']
    _child_classes = dict(
        iter_per_coupling_count=iter_per_coupling_count,
        single_session_coupling=single_session_coupling,
        two_session_coupling=two_session_coupling,
    )

class process_count(Integer):
    """
    'process_count' child.
    """
    _version = '251'
    fluent_name = 'process-count'
    _python_name = 'process_count'

class host_name(String):
    """
    'host_name' child.
    """
    _version = '251'
    fluent_name = 'host-name'
    _python_name = 'host_name'

class helper_session_setup(Group):
    """
    Setup helper session for multidomain conjugate heat transfer.
    """
    _version = '251'
    fluent_name = 'helper-session-setup'
    _python_name = 'helper_session_setup'
    child_names = ['process_count', 'host_name']
    _child_classes = dict(
        process_count=process_count,
        host_name=host_name,
    )

class helper_session(Boolean):
    """
    Setup session mode (single/multiple) for multidomain conjugate heat transfer.
    """
    _version = '251'
    fluent_name = 'helper-session?'
    _python_name = 'helper_session'

class set_5(Group):
    """
    The set object.
    """
    _version = '251'
    fluent_name = 'set'
    _python_name = 'set'
    child_names = ['coupling', 'helper_session_setup', 'helper_session']
    _child_classes = dict(
        coupling=coupling,
        helper_session_setup=helper_session_setup,
        helper_session=helper_session,
    )

class conjugate_heat_transfer(Group):
    """
    The conjugate heat transfer object.
    """
    _version = '251'
    fluent_name = 'conjugate-heat-transfer'
    _python_name = 'conjugate_heat_transfer'
    child_names = ['enabled', 'set']
    _child_classes = dict(
        enabled=enabled_70,
        set=set_5,
    )

class iter_count_4(Integer):
    """
    'iter_count' child.
    """
    _version = '251'
    fluent_name = 'iter-count'
    _python_name = 'iter_count'

class time_steps_count(Integer):
    """
    'time_steps_count' child.
    """
    _version = '251'
    fluent_name = 'time-steps-count'
    _python_name = 'time_steps_count'

class iter_per_time_step_count(Integer):
    """
    'iter_per_time_step_count' child.
    """
    _version = '251'
    fluent_name = 'iter-per-time-step-count'
    _python_name = 'iter_per_time_step_count'

class iterate_1(Command):
    """
    Iteration the multidomain conjugate heat transfer.
    
    Parameters
    ----------
        iter_count : int
            'iter_count' child.
        time_steps_count : int
            'time_steps_count' child.
        iter_per_time_step_count : int
            'iter_per_time_step_count' child.
    """
    _version = '251'
    fluent_name = 'iterate'
    _python_name = 'iterate'
    argument_names = ['iter_count', 'time_steps_count', 'iter_per_time_step_count']
    _child_classes = dict(
        iter_count=iter_count_4,
        time_steps_count=time_steps_count,
        iter_per_time_step_count=iter_per_time_step_count,
    )

class dual_time_iterate_1(Command):
    """
    Dual-time iterate the multidomain conjugate heat transfer.
    
    Parameters
    ----------
        iter_count : int
            'iter_count' child.
        time_steps_count : int
            'time_steps_count' child.
        iter_per_time_step_count : int
            'iter_per_time_step_count' child.
    """
    _version = '251'
    fluent_name = 'dual-time-iterate'
    _python_name = 'dual_time_iterate'
    argument_names = ['iter_count', 'time_steps_count', 'iter_per_time_step_count']
    _child_classes = dict(
        iter_count=iter_count_4,
        time_steps_count=time_steps_count,
        iter_per_time_step_count=iter_per_time_step_count,
    )

class solve_1(Group):
    """
    'solve' child.
    """
    _version = '251'
    fluent_name = 'solve'
    _python_name = 'solve'
    command_names = ['iterate', 'dual_time_iterate']
    _child_classes = dict(
        iterate=iterate_1,
        dual_time_iterate=dual_time_iterate_1,
    )

class multidomain(Group):
    """
    The multidomain architecture object.
    """
    _version = '251'
    fluent_name = 'multidomain'
    _python_name = 'multidomain'
    child_names = ['conjugate_heat_transfer', 'solve']
    _child_classes = dict(
        conjugate_heat_transfer=conjugate_heat_transfer,
        solve=solve_1,
    )

class shell_script_path(String):
    """
    The Fluent shell script path.
    """
    _version = '251'
    fluent_name = 'shell-script-path'
    _python_name = 'shell_script_path'

class delete_all_compute_nodes(Boolean):
    """
    'delete_all_compute_nodes' child.
    """
    _version = '251'
    fluent_name = 'delete-all-compute-nodes?'
    _python_name = 'delete_all_compute_nodes'

class kill_all_nodes(Command):
    """
    Delete all compute nodes from virtual machine.
    
    Parameters
    ----------
        delete_all_compute_nodes : bool
            'delete_all_compute_nodes' child.
    """
    _version = '251'
    fluent_name = 'kill-all-nodes'
    _python_name = 'kill_all_nodes'
    argument_names = ['delete_all_compute_nodes']
    _child_classes = dict(
        delete_all_compute_nodes=delete_all_compute_nodes,
    )

class compute_node(Integer):
    """
    'compute_node' child.
    """
    _version = '251'
    fluent_name = 'compute-node'
    _python_name = 'compute_node'

class invalidate_case(Boolean):
    """
    'invalidate_case' child.
    """
    _version = '251'
    fluent_name = 'invalidate-case?'
    _python_name = 'invalidate_case'

class kill_node(Command):
    """
    'kill_node' command.
    """
    _version = '251'
    fluent_name = 'kill-node'
    _python_name = 'kill_node'
    argument_names = ['compute_node', 'invalidate_case']
    _child_classes = dict(
        compute_node=compute_node,
        invalidate_case=invalidate_case,
    )

class hostname(String):
    """
    'hostname' child.
    """
    _version = '251'
    fluent_name = 'hostname'
    _python_name = 'hostname'

class username(String):
    """
    'username' child.
    """
    _version = '251'
    fluent_name = 'username'
    _python_name = 'username'

class spawn_node(Command):
    """
    Spawn a compute node process on a specified machine.
    
    Parameters
    ----------
        hostname : str
            'hostname' child.
        username : str
            'username' child.
    """
    _version = '251'
    fluent_name = 'spawn-node'
    _python_name = 'spawn_node'
    argument_names = ['hostname', 'username']
    _child_classes = dict(
        hostname=hostname,
        username=username,
    )

class host_file(Filename, _InputFile):
    """
    'host_file' child.
    """
    _version = '251'
    fluent_name = 'host-file'
    _python_name = 'host_file'

class load_hosts(Command):
    """
    Read a hosts file.
    
    Parameters
    ----------
        host_file : str
            'host_file' child.
    """
    _version = '251'
    fluent_name = 'load-hosts'
    _python_name = 'load_hosts'
    argument_names = ['host_file']
    _child_classes = dict(
        host_file=host_file,
    )

class host_file_1(Filename, _OutputFile):
    """
    'host_file' child.
    """
    _version = '251'
    fluent_name = 'host-file'
    _python_name = 'host_file'

class save_hosts(Command):
    """
    Write a hosts file.
    
    Parameters
    ----------
        host_file_1 : str
            'host_file' child.
    """
    _version = '251'
    fluent_name = 'save-hosts'
    _python_name = 'save_hosts'
    argument_names = ['host_file']
    _child_classes = dict(
        host_file=host_file_1,
    )

class network_2(Group):
    """
    The network configuration object.
    """
    _version = '251'
    fluent_name = 'network'
    _python_name = 'network'
    child_names = ['shell_script_path']
    command_names = ['kill_all_nodes', 'kill_node', 'spawn_node', 'load_hosts', 'save_hosts']
    _child_classes = dict(
        shell_script_path=shell_script_path,
        kill_all_nodes=kill_all_nodes,
        kill_node=kill_node,
        spawn_node=spawn_node,
        load_hosts=load_hosts,
        save_hosts=save_hosts,
    )

class usage(Command):
    """
    Print solver timer.
    """
    _version = '251'
    fluent_name = 'usage'
    _python_name = 'usage'

class reset_5(Command):
    """
    Reset domain timers.
    """
    _version = '251'
    fluent_name = 'reset'
    _python_name = 'reset'

class timer(Group):
    """
    'timer' child.
    """
    _version = '251'
    fluent_name = 'timer'
    _python_name = 'timer'
    command_names = ['usage', 'reset']
    _child_classes = dict(
        usage=usage,
        reset=reset_5,
    )

class check_2(Command):
    """
    Parallel check.
    """
    _version = '251'
    fluent_name = 'check'
    _python_name = 'check'

class show_connectivity(Command):
    """
    Show machine connectivity.
    
    Parameters
    ----------
        compute_node : int
            'compute_node' child.
    """
    _version = '251'
    fluent_name = 'show-connectivity'
    _python_name = 'show_connectivity'
    argument_names = ['compute_node']
    _child_classes = dict(
        compute_node=compute_node,
    )

class latency(Command):
    """
    Show network latency.
    """
    _version = '251'
    fluent_name = 'latency'
    _python_name = 'latency'

class bandwidth(Command):
    """
    Show network bandwidth.
    """
    _version = '251'
    fluent_name = 'bandwidth'
    _python_name = 'bandwidth'

class parallel(Group):
    """
    'parallel' child.
    """
    _version = '251'
    fluent_name = 'parallel'
    _python_name = 'parallel'
    child_names = ['thread_number_control', 'check_verbosity', 'partition', 'set', 'load_balance', 'multidomain', 'network', 'timer']
    command_names = ['check', 'show_connectivity', 'latency', 'bandwidth']
    _child_classes = dict(
        thread_number_control=thread_number_control,
        check_verbosity=check_verbosity_1,
        partition=partition_3,
        set=set_2,
        load_balance=load_balance,
        multidomain=multidomain,
        network=network_2,
        timer=timer,
        check=check_2,
        show_connectivity=show_connectivity,
        latency=latency,
        bandwidth=bandwidth,
    )

class begin(Integer, AllowedValuesMixin):
    """
    Begin-timestep for timestep-selector.
    """
    _version = '251'
    fluent_name = 'begin'
    _python_name = 'begin'

class end_1(Integer, AllowedValuesMixin):
    """
    End-timestep for timestep-selector.
    """
    _version = '251'
    fluent_name = 'end'
    _python_name = 'end'

class increment_3(Integer):
    """
    Increment for timestep-selector.
    """
    _version = '251'
    fluent_name = 'increment'
    _python_name = 'increment'

class uniform_1(Command):
    """
    Select begin, end and increment for timestep selection.
    
    Parameters
    ----------
        begin : int
            Begin-timestep for timestep-selector.
        end : int
            End-timestep for timestep-selector.
        increment : int
            Increment for timestep-selector.
    """
    _version = '251'
    fluent_name = 'uniform'
    _python_name = 'uniform'
    argument_names = ['begin', 'end', 'increment']
    _child_classes = dict(
        begin=begin,
        end=end_1,
        increment=increment_3,
    )

class timesteps(IntegerList, AllowedValuesMixin):
    """
    A list of timesteps.
    """
    _version = '251'
    fluent_name = 'timesteps'
    _python_name = 'timesteps'

class timestep_list(Command):
    """
    Select a list of timesteps.
    
    Parameters
    ----------
        timesteps : List
            A list of timesteps.
    """
    _version = '251'
    fluent_name = 'timestep-list'
    _python_name = 'timestep_list'
    argument_names = ['timesteps']
    _child_classes = dict(
        timesteps=timesteps,
    )

class custom_1(Group):
    """
    Timesteps uniformly or through timestep list.
    """
    _version = '251'
    fluent_name = 'custom'
    _python_name = 'custom'
    command_names = ['uniform', 'timestep_list']
    _child_classes = dict(
        uniform=uniform_1,
        timestep_list=timestep_list,
    )

class first(Command):
    """
    Select first timestep.
    """
    _version = '251'
    fluent_name = 'first'
    _python_name = 'first'

class last(Command):
    """
    Select last timestep.
    """
    _version = '251'
    fluent_name = 'last'
    _python_name = 'last'

class all_1(Command):
    """
    Select all timesteps.
    """
    _version = '251'
    fluent_name = 'all'
    _python_name = 'all'

class timestep_selector(Group):
    """
    Timesteps for transient postprocessing.
    """
    _version = '251'
    fluent_name = 'timestep-selector'
    _python_name = 'timestep_selector'
    child_names = ['custom']
    command_names = ['first', 'last', 'all']
    _child_classes = dict(
        custom=custom_1,
        first=first,
        last=last,
        all=all_1,
    )

class enabled_71(Boolean):
    """
    Enable/Disable transient postprocessing?.
    """
    _version = '251'
    fluent_name = 'enabled'
    _python_name = 'enabled'

class enable_27(Command):
    """
    Enable/Disable transient postprocessing?.
    
    Parameters
    ----------
        enabled : bool
            Enable/Disable transient postprocessing?.
    """
    _version = '251'
    fluent_name = 'enable'
    _python_name = 'enable'
    argument_names = ['enabled']
    _child_classes = dict(
        enabled=enabled_71,
    )

class display_13(String, AllowedValuesMixin):
    """
    Graphics object name for transient display.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'

class display_12(Command):
    """
    Transient display.
    
    Parameters
    ----------
        display : str
            Graphics object name for transient display.
    """
    _version = '251'
    fluent_name = 'display'
    _python_name = 'display'
    argument_names = ['display']
    _child_classes = dict(
        display=display_13,
    )

class monitor_5(StringList, AllowedValuesMixin):
    """
    Report file name(s) for transient monitor.
    """
    _version = '251'
    fluent_name = 'monitor'
    _python_name = 'monitor'

class monitor_4(Command):
    """
    Transient monitor.
    
    Parameters
    ----------
        monitor : List
            Report file name(s) for transient monitor.
    """
    _version = '251'
    fluent_name = 'monitor'
    _python_name = 'monitor'
    argument_names = ['monitor']
    _child_classes = dict(
        monitor=monitor_5,
    )

class animate(StringList, AllowedValuesMixin):
    """
    Animation object name(s) for transient animation.
    """
    _version = '251'
    fluent_name = 'animate'
    _python_name = 'animate'

class animation(Command):
    """
    Create transient animation(s).
    
    Parameters
    ----------
        animate : List
            Animation object name(s) for transient animation.
    """
    _version = '251'
    fluent_name = 'animation'
    _python_name = 'animation'
    argument_names = ['animate']
    _child_classes = dict(
        animate=animate,
    )

class data_file1(String, AllowedValuesMixin):
    """
    First data file for result comparison.
    """
    _version = '251'
    fluent_name = 'data_file1'
    _python_name = 'data_file1'

class data_file2(String, AllowedValuesMixin):
    """
    Second data file for result comparison.
    """
    _version = '251'
    fluent_name = 'data_file2'
    _python_name = 'data_file2'

class compare(String, AllowedValuesMixin):
    """
    Object for result comparison.
    """
    _version = '251'
    fluent_name = 'compare'
    _python_name = 'compare'

class compare_results(Command):
    """
    Result comparison.
    
    Parameters
    ----------
        data_file1 : str
            First data file for result comparison.
        data_file2 : str
            Second data file for result comparison.
        compare : str
            Object for result comparison.
    """
    _version = '251'
    fluent_name = 'compare-results'
    _python_name = 'compare_results'
    argument_names = ['data_file1', 'data_file2', 'compare']
    _child_classes = dict(
        data_file1=data_file1,
        data_file2=data_file2,
        compare=compare,
    )

class compute_and_clip_range_1(String, AllowedValuesMixin):
    """
    Graphics object name to compute and clip range for transient post processing.
    """
    _version = '251'
    fluent_name = 'compute-and-clip-range'
    _python_name = 'compute_and_clip_range'

class compute_and_clip_range(Command):
    """
    Compute and clip range for transient post processing.
    
    Parameters
    ----------
        compute_and_clip_range : str
            Graphics object name to compute and clip range for transient post processing.
    """
    _version = '251'
    fluent_name = 'compute-and-clip-range'
    _python_name = 'compute_and_clip_range'
    argument_names = ['compute_and_clip_range']
    _child_classes = dict(
        compute_and_clip_range=compute_and_clip_range_1,
    )

class transient_post_processing(Group):
    """
    Transient postprocessing object.
    """
    _version = '251'
    fluent_name = 'transient-post-processing'
    _python_name = 'transient_post_processing'
    child_names = ['timestep_selector']
    command_names = ['enable', 'display', 'monitor', 'animation', 'compare_results', 'compute_and_clip_range']
    _child_classes = dict(
        timestep_selector=timestep_selector,
        enable=enable_27,
        display=display_12,
        monitor=monitor_4,
        animation=animation,
        compare_results=compare_results,
        compute_and_clip_range=compute_and_clip_range,
    )

class switch_to_meshing_mode(Command):
    """
    Switch to meshing mode (Beta feature).
    """
    _version = '251'
    fluent_name = 'switch-to-meshing-mode'
    _python_name = 'switch_to_meshing_mode'

class root(Group):
    """
    'root' object.
    """
    _version = '251'
    fluent_name = ''
    _python_name = 'root'
    child_names = ['file', 'mesh', 'server', 'setup', 'solution', 'results', 'design', 'parametric_studies', 'current_parametric_study', 'parameters', 'parallel', 'transient_post_processing']
    command_names = ['switch_to_meshing_mode']
    _child_classes = dict(
        file=file,
        mesh=mesh,
        server=server,
        setup=setup,
        solution=solution,
        results=results,
        design=design,
        parametric_studies=parametric_studies,
        current_parametric_study=current_parametric_study,
        parameters=parameters,
        parallel=parallel,
        transient_post_processing=transient_post_processing,
        switch_to_meshing_mode=switch_to_meshing_mode,
    )

