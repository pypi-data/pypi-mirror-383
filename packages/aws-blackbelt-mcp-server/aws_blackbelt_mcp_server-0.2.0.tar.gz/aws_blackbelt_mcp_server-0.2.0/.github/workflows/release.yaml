name: Release

env:
  PKG_NAME: "aws-blackbelt-mcp-server"
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.8.18"

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string
      environment:
        description: "Target environment"
        required: true
        default: "testpypi"
        type: choice
        options:
          - testpypi
          - pypi
      skip_docker:
        description: "Skip Docker image build and push"
        required: false
        default: true
        type: boolean

permissions: {}

jobs:
  validate-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: uv sync --frozen --dev

      - name: Check security
        run: uv run bandit --severity-level medium --confidence-level medium -c pyproject.toml -r src

      - name: Run tests
        run: uv run pytest -v

  build-and-publish-to-pypi:
    runs-on: ubuntu-latest
    needs: [validate-release]
    environment:
      name: ${{ github.event.inputs.environment || 'pypi' }}
      url: ${{ github.event.inputs.environment == 'testpypi' && format('https://test.pypi.org/p/', env.PKG_NAME) || format('https://pypi.org/p/', env.PKG_NAME) }}
    permissions:
      id-token: write # For trusted publishing
      contents: read
      attestations: write # For build attestations
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set version
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version}}
        run: |
          VERSION="${{ github.event.inputs.version }}.dev${{ github.sha }}"
          echo "Setting version to: $VERSION"
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          grep "^version = " pyproject.toml

      - name: Build distributable
        run: uv build --sdist --wheel

      - name: Generate build attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: "dist/*"

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ github.event.inputs.environment == 'testpypi' && 'https://test.pypi.org/legacy/' || '' }}
          print-hash: true
          attestations: true

  build-and-push-to-ghcr:
    runs-on: ubuntu-latest
    needs: [build-and-publish-to-pypi]
    if: ${{ github.event_name == 'release' || !inputs.skip_docker }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version and owner
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            VERSION="${VERSION#v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Setting version to: $VERSION"
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          grep "^version = " pyproject.toml

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ steps.version.outputs.owner }}/${{ env.PKG_NAME }}:latest
            ghcr.io/${{ steps.version.outputs.owner }}/${{ env.PKG_NAME }}:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
