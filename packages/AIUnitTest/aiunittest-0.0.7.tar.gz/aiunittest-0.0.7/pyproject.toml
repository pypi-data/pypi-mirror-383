[project]
name = "AIUnitTest"
dynamic = ["version"]
description = "CLI to generate and update Python unit tests automatically using coverage and AI"
authors = [{ name = "Ofido" }]
readme = "README.md"
requires-python = ">=3.10"
keywords = ["testing", "coverage", "openai", "automation"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Testing",
  "Topic :: Utilities",
]
license-files = ["LICENSE"]
dependencies = [
  "openai==2.3.0",
  "coverage==7.10.7",
  "typer==0.19.2",
  "tomli==2.3.0",
  "typing-extensions==4.15.0",
]

[project.urls]
"Homepage" = "https://github.com/ofido/AIUnitTest"
"Bug Tracker" = "https://github.com/ofido/AIUnitTest/issues"

[project.scripts]
ai-unit-test = "ai_unit_test.__main__:run_app"

[project.optional-dependencies]
huggingface = ["sentence-transformers==5.1.1", "huggingface-hub==0.35.3"]
faiss = [
  "faiss-cpu==1.12.0",
  "numpy==2.3.3",
  "scikit-learn==1.7.2",
  "joblib==1.5.2",
]
all = [
  "sentence-transformers==5.1.1",
  "huggingface-hub==0.35.3",
  "faiss-cpu==1.12.0",
  "numpy==2.3.3",
  "scikit-learn==1.7.2",
  "joblib==1.5.2",
  "psutil==7.1.0",
]
dev = [
  "black==25.9.0",
  "isort==7.0.0",
  "flake8==7.3.0",
  "flake8-bugbear==24.12.12",
  "flake8-annotations==3.2.0",
  "flake8-docstrings==1.7.0",
  "flake8-comprehensions==3.17.0",
  "flake8-eradicate==1.5.0",
  "flake8-pytest-style==2.1.0",
  "mypy==1.18.2",
  "pre-commit==4.3.0",
  "pytest==8.4.2",
  "pytest-cov==7.0.0",
  "pytest-asyncio==1.2.0",
  "pytest-dotenv==0.5.2",
  "joblib-stubs==1.5.2.0.20250831",
  "types-psutil==7.0.0.20251001",
  "pytest-mock==3.15.1",
  "psutil==7.1.0",
]

[tool.black]
line-length = 120
target-version = ["py313"]
exclude = '''
/(
    src/ai_unit_test/_version\.py
  | tests/fake_project
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
known_third_party = [
  "openai",
  "typer",
  "isort",
  "black",
  "flake8",
  "mypy",
  "pytest",
]
known_first_party = ["ai_unit_test"]

default_section = "THIRDPARTY"
skip = [
  "build",
  "dist",
  ".venv",
  "env",
  "src/ai_unit_test/_version.py",
  "tests/fake_project",
]


[tool.bandit]
skips = ["B101"]
exclude_dirs = [
  ".git",
  ".hg",
  ".mypy_cache",
  ".tox",
  ".venv",
  "_build",
  "buck-out",
  "build",
  "dist",
  "env",
  "examples",
  "node_modules",
  "tests/fake_project",
]

[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
ignore_missing_imports = false
warn_redundant_casts = true
warn_unused_ignores = false
disallow_any_generics = true
allow_redefinition = false
allow_untyped_globals = false
follow_imports_for_stubs = true
disallow_untyped_defs = true
strict = true
exclude = ["env", "src/ai_unit_test/_version.py"]

[[tool.mypy.overrides]]
module = "faiss"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
asyncio_mode = "auto"
addopts = "-ra -q --strict-markers --tb=short --cov=src --cov-report=term-missing"
testpaths = ["tests/unit"] # Mudança aqui: só testes unitários
python_files = ["test_*.py"]
norecursedirs = ["tests/fake_project", "tests/behaviors"]
markers = [
  "slow: marks slow tests",
  "integration: marks integration tests",
  "benchmark: marks benchmarks",
  "asyncio: marks asyncio tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "src/ai_unit_test/_version.py"]
disable_warnings = ["couldnt-parse"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 80

[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "src/ai_unit_test/_version.py"

[tool.setuptools.packages.find]
where = ["src"]

[tool.ai-unit-test]
test-patterns = ["test_*.py", "*_test.py"]

[tool.ai-unit-test.llm]
provider = "openai"
model = "gpt-5-mini"
# use_api = false
# max_length = 2048
