import polars as pl
from .database import Database as Database
from _typeshed import Incomplete
from datahub.setting import StarRocksSetting as StarRocksSetting
from datahub.utils.logger import logger as logger
from datahub.utils.sftp import SFTPClient as SFTPClient
from datetime import date, datetime
from typing import Literal, Sequence

class StarRocks(Database):
    db_url: Incomplete
    http_url: Incomplete
    username: Incomplete
    password: Incomplete
    setting: Incomplete
    home_path: str
    sftp_setting: Incomplete
    force_query: Incomplete
    def __init__(self, setting: StarRocksSetting) -> None: ...
    def query_with_cache(self, sql: str, return_format: Literal['dataframe', 'records'] = 'dataframe') -> pl.DataFrame | list[dict] | None: ...
    def query_large_data(self, sql: str) -> pl.DataFrame: ...
    def get_indicator_type(self) -> pl.DataFrame: ...
    @property
    def factor_info(self) -> pl.DataFrame: ...
    def get_factor_info(self, factors: Sequence[str] = (), types: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_seq_factor_info(self, resample_type: str, factors: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_future_seq_factor_info(self, resample_type: str, factors: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_seq_y_info(self, resample_type: str, factors: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_factor_type(self) -> pl.DataFrame: ...
    def get_indicator_info(self, indicators: Sequence[str] = (), types: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_future_domain_info(self, instrument_sub_type: str | None = None, start_date: date | None = None, end_date: date | None = None, market: str = 'CCFX', rank_id: int = 1, domain_factor: str = 'volume') -> pl.DataFrame: ...
    def get_future_snapshot(self, instrument_sub_type: str | Sequence[str], start_date: date, end_date: date, market: str = 'CCFX', rank_id: int = 1, domain_factor: str = 'volume') -> pl.DataFrame: ...
    def get_indicator_data(self, start_time: datetime, end_time: datetime, indicators: Sequence[str] = (), instruments: Sequence[str] = (), types: Sequence[str] = (), use_last: bool = False, realtime: bool = False) -> pl.DataFrame: ...
    def get_seq_factor_data(self, start_time: datetime, end_time: datetime, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_future_seq_factor_data(self, start_time: datetime, end_time: datetime, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_seq_factor_stat(self, start_time: datetime, end_time: datetime, stat_type: str, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_future_seq_factor_stat(self, start_time: datetime, end_time: datetime, stat_type: str, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_factor_data(self, start_time: datetime, end_time: datetime, factors: Sequence[str] = (), instruments: Sequence[str] = (), types: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_risk_factor_data(self, version: str, start_time: datetime, end_time: datetime, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_return_data(self, start_time: datetime, end_time: datetime, factors: Sequence[str] = (), instruments: Sequence[str] = (), adj_method: Literal['forward'] = 'forward') -> pl.DataFrame: ...
    def get_seq_y_data(self, start_time: datetime, end_time: datetime, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_seq_y_stat(self, start_time: datetime, end_time: datetime, stat_type: str, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_ex_factor_info(self, instruments: Sequence[str] = (), trade_date: date | None = None) -> pl.DataFrame: ...
    def get_ex_split_info(self, instruments: Sequence[str] = (), trade_date: date | None = None) -> pl.DataFrame: ...
    def get_trading_days(self, start_date: date, end_date: date, market: str = 'XSHG') -> list[date]: ...
    def get_kline(self, freq: str, instruments: Sequence[str] = (), start_time: datetime | None = None, end_time: datetime | None = None, adj_method: str | None = None) -> pl.DataFrame: ...
    def get_fut_kline(self, freq: str, instrument_sub_type: Sequence[str], start_date: date, end_date: date, market: str = 'CCFX', rank_id: int = 1, domain_factor: str = 'volume') -> pl.DataFrame: ...
    def get_md_transaction(self, start_date: date, end_date: date, instruments: Sequence[str] = (), markets: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_instrument_industry(self, trade_date: date, industry_source: str = 'sws', industry_level: Literal[1, 2, 3] = 1, use_last: bool = False) -> pl.DataFrame: ...
    def get_instrument_list(self, trade_date: date, indicators: Sequence[str] = ()) -> Sequence[str]: ...
    def get_universe(self, trade_date: date, universe: str | None = None) -> pl.DataFrame: ...
    def get_instrument_info(self, trade_date: date, fields: Sequence[str] | None = None, market: str | None = None, instrument_type: Literal['option', 'spot', 'future', 'etf'] | None = None) -> pl.DataFrame: ...
    def get_md_snapshot(self, start_date: date, end_date: date, instruments: Sequence[str] = (), markets: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_seq_snapshot(self, start_date: date, end_date: date, instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_resample_lob(self, resample_type: str, start_date: date, end_date: date, instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_last_seq_snapshot(self, end_time: datetime, instruments: Sequence[str] = (), is_filter_limit: bool = False) -> pl.DataFrame: ...
    def get_predictor_basket_series(self, start_date: date, end_date: date, predictors: Sequence[int] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_index_weight(self, start_date: date, end_date: date, index_ids: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_etf_component(self, start_date: date, end_date: date, instrument_ids: Sequence[str] = (), com_instrument_ids: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_etf_cash_component(self, start_date: date, end_date: date, instrument_ids: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_loads(self, label: str) -> pl.DataFrame: ...
    def stream_load(self, database: str, table: str, file_path: str): ...
    def broker_load_parquet(self, database: str, table: str, fields: Sequence[str], file_path: str, timeout: int = 3600, label: str | None = None, is_sync: bool = False) -> str: ...
    def broker_load_csv(self, database: str, table: str, fields: Sequence[str], file_path: str, timeout: int = 3600, label: str | None = None, is_sync: bool = False) -> str: ...
    def get_profile(self, sql: str) -> str: ...
