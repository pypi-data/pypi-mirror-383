import numpy.typing as npt
import polars as pl
from .dbo.pg import Postgres as Postgres
from .dbo.redis_stream import RedisStream as RedisStream
from .dbo.sr import StarRocks as StarRocks
from .protos.client_msg import BarMatrix as BarMatrix, MsgType as MsgType
from .setting import Setting as Setting
from .utils.logger import logger as logger
from dataclasses import dataclass
from datetime import date, datetime, time
from pydantic import BaseModel
from typing import Any, Iterator, Literal, Sequence

class DataHubError(Exception): ...

class CronTask(BaseModel):
    task_id: str
    task_type: str
    task_name: str
    task_status: str
    task_params: dict[str, Any]
    result: str | None
    create_time: str | None
    end_time: str | None

@dataclass
class BarDataMatrix:
    msg_sequence: int
    trade_time: datetime
    last_timestamp: datetime
    instrument_ids: Sequence[str]
    cols: Sequence[str]
    data_matrix: npt.NDArray[Any]
    def to_df(self) -> pl.DataFrame: ...
    @staticmethod
    def get_empty_matrix(instrument_ids: Sequence[str], cols: Sequence[str], trade_time: datetime, timezone: str = 'Asia/Shanghai') -> BarDataMatrix: ...
    @staticmethod
    def from_df(instrument_ids: Sequence[str], cols: Sequence[str], trade_time: datetime, df: pl.DataFrame) -> BarDataMatrix: ...
    @staticmethod
    def from_proto(proto_msg: BarMatrix) -> BarDataMatrix: ...
    def to_proto(self) -> BarMatrix: ...

class RsTopic:
    indicator_5min: str
    factor_5min: str
    predictor: str

class DataHub:
    setting: Setting
    def __init__(self, setting: Setting) -> None: ...
    @property
    def calendar(self) -> Calendar: ...
    @property
    def starrocks(self) -> StarRocks: ...
    @property
    def postgres(self) -> Postgres: ...
    @property
    def redis(self): ...
    def post_task(self, task: CronTask) -> dict[str, Any]: ...
    def get_kline(self, freq: str, instruments: Sequence[str] = (), start_time: datetime | None = None, end_time: datetime | None = None, adj_method: str | None = None) -> pl.DataFrame: ...
    def get_fut_kline(self, freq: str, instrument_sub_type: Sequence[str], start_date: date, end_date: date, market: str = 'CCFX', rank_id: int = 1, domain_factor: str = 'volume') -> pl.DataFrame: ...
    def get_indicator_type(self): ...
    def get_factor_type(self) -> pl.DataFrame: ...
    def get_indicator_info(self, indicators: Sequence[str] = (), types: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_factor_info(self, factors: Sequence[str] = (), types: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_seq_factor_info(self, resample_type: str, factors: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_future_seq_factor_info(self, resample_type: str, factors: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_seq_y_info(self, resample_type: str, factors: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_seq_factor_stat(self, start_time: datetime, end_time: datetime, stat_type: str, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_future_seq_factor_stat(self, start_time: datetime, end_time: datetime, stat_type: str, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_seq_y_stat(self, start_time: datetime, end_time: datetime, stat_type: str, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_indicator_data(self, start_time: datetime, end_time: datetime | None = None, indicators: Sequence[str] = (), instruments: Sequence[str] = (), types: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_instrument_list(self, trade_date: date, indicators: Sequence[str] = ()) -> Sequence[str]: ...
    def get_instrument_info(self, trade_date: date, fields: Sequence[str] | None = None, market: str | None = None, instrument_type: Literal['option', 'spot', 'future', 'etf'] | None = None) -> pl.DataFrame: ...
    def get_future_domain_info(self, instrument_sub_type: str | None = None, start_date: date | None = None, end_date: date | None = None, market: str = 'CCFX', rank_id: int = 1, domain_factor: str = 'volume') -> pl.DataFrame: ...
    def get_future_snapshot(self, instrument_sub_type: str | Sequence[str], start_date: date, end_date: date, market: str = 'CCFX', rank_id: int = 1, domain_factor: str = 'volume') -> pl.DataFrame: ...
    def get_universe(self, trade_date: date, universe: str | None = None) -> pl.DataFrame: ...
    def get_indicator_matrix(self, trade_time: datetime, indicators: Sequence[str], instrument_ids: Sequence[str], expire_days: int = 1, realtime: bool = False) -> BarDataMatrix: ...
    def get_seq_factor_data(self, start_time: datetime, end_time: datetime, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_future_seq_factor_data(self, start_time: datetime, end_time: datetime, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_indicator_matrix_list(self, start_date: date, end_date: date, indicators: Sequence[str], instrument_ids: Sequence[str], expire_days: int = 1) -> list[BarDataMatrix]: ...
    def get_risk_factor_matrix(self, version: str, trade_time: datetime, factors: Sequence[str], instrument_ids: Sequence[str]) -> BarDataMatrix: ...
    def read_indicator_matrix(self, start_time: datetime | None = None, topic: str = ..., block: int = 0) -> Iterator[BarDataMatrix]: ...
    def write_indicator_matrix(self, matrix: BarDataMatrix, topic: str = ...): ...
    def delete_indicator_matrix(self, topic: str = ...): ...
    def read_factor_matrix(self, start_time: datetime | None = None, topic: str = ..., block: int = 0) -> Iterator[BarDataMatrix]: ...
    def write_factor_matrix(self, matrix: BarDataMatrix, topic: str = ...): ...
    def delete_factor_matrix(self, topic: str = ...): ...
    def read_predictor_matrix(self, start_time: datetime | None = None, topic: str = ..., block: int = 0) -> Iterator[BarDataMatrix]: ...
    def write_predictor_matrix(self, matrix: BarDataMatrix, topic: str = ...): ...
    def delete_predictor_matrix(self, topic: str = ...): ...
    def get_factor_data(self, start_time: datetime, end_time: datetime | None = None, factors: Sequence[str] = (), instruments: Sequence[str] = (), types: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_factor_matrix(self, trade_time: datetime, factors: Sequence[str], instrument_ids: Sequence[str]) -> BarDataMatrix: ...
    def get_return_data(self, start_time: datetime, end_time: datetime | None = None, factors: Sequence[str] = (), instruments: Sequence[str] = (), adj_method: Literal['forward'] = 'forward') -> pl.DataFrame: ...
    def get_seq_y_data(self, start_time: datetime, end_time: datetime | None = None, factors: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_return_matrix(self, trade_time: datetime, factors: Sequence[str], instrument_ids: Sequence[str], adj_method: Literal['forward'] = 'forward') -> BarDataMatrix: ...
    def get_ex_factor_info(self, instruments: Sequence[str] = (), trade_date: date | None = None) -> pl.DataFrame: ...
    def get_ex_split_info(self, instruments: Sequence[str] = (), trade_date: date | None = None) -> pl.DataFrame: ...
    def get_instrument_industry(self, trade_date: date, industry_source: str = 'sws', industry_level: Literal[1, 2, 3] = 1, use_last: bool = False) -> pl.DataFrame: ...
    def get_md_transaction(self, start_date: date, end_date: date | None = None, instruments: Sequence[str] = (), markets: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_md_snapshot(self, start_date: date, end_date: date | None = None, instruments: Sequence[str] = (), markets: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_seq_snapshot(self, start_date: date, end_date: date | None = None, instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_resample_lob(self, resample_type: str, start_date: date, end_date: date | None = None, instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_last_seq_snapshot(self, end_time: datetime, instruments: Sequence[str] = (), is_filter_limit: bool = False) -> pl.DataFrame: ...
    def get_predictor_basket_series(self, start_date: date, end_date: date, predictors: Sequence[int] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_trading_days(self, start_date: date, end_date: date, market: str = 'XSHG') -> list[date]: ...
    def get_etf_component(self, start_date: date, end_date: date, instrument_ids: Sequence[str] = (), com_instrument_ids: Sequence[str] = ()) -> pl.DataFrame: ...
    def get_etf_cash_component(self, start_date: date, end_date: date, instrument_ids: Sequence[str] = ()) -> pl.DataFrame: ...
    def upsert_from_file(self, database: str, table: str, file_path: str): ...
    def get_blacklist(self, blacklist_ids: Sequence[str], end_date: date = None) -> pl.DataFrame: ...
    def get_sbl_list(self, brokers: Sequence[str] = (), sbl_ids: Sequence[str] = (), start_date: date | None = None, end_date: date | None = None) -> pl.DataFrame: ...
    def get_index_weight(self, start_date: date, end_date: date, index_ids: Sequence[str] = (), instruments: Sequence[str] = ()) -> pl.DataFrame: ...

class Calendar:
    def __init__(self, datahub: DataHub) -> None: ...
    def after(self, trade_date: date, n: int): ...
    def before(self, trade_date: date, n: int): ...
    def between(self, start_date: date, end_date: date): ...
    @staticmethod
    def str2date(dt: str, fmt: str = '%Y-%m-%d') -> date: ...
    @staticmethod
    def str2datetime(dt: str, fmt: str = '%Y-%m-%d') -> datetime: ...
    @staticmethod
    def date2datetime(dt: date, hour: int = 0, minute: int = 0, second: int = 0) -> datetime: ...
    @staticmethod
    def datetime2date(dt: datetime) -> date: ...
    def get_latest_trade_date(self, dt: date | None = None) -> date: ...
    def get_kst_trading_date_of_month(self, trade_date: date, k: int = 0) -> date: ...
    @staticmethod
    def get_trading_hours(trade_date: date, freq: str, morning_time_range: tuple[time, time] = ..., afternoon_time_range: tuple[time, time] = ...) -> list[datetime]: ...
