#! /usr/bin/env python
"""Configure the WAVES ``setuptools_scm`` tutorial."""

import inspect
import os
import pathlib
import sys

import setuptools_scm
import waves

# Comments used in tutorial code snippets: marker-1

# Accept command line options with fall back default values
AddOption(
    "--build-dir",
    dest="variant_dir_base",
    default="build",
    nargs=1,
    type="string",
    action="store",
    metavar="DIR",
    help="SCons build (variant) root directory. Relative or absolute path. (default: '%default')",
)
AddOption(
    "--unconditional-build",
    dest="unconditional_build",
    default=False,
    action="store_true",
    help="Boolean flag to force building of conditionally ignored targets. (default: '%default')",
)
AddOption(
    "--print-build-failures",
    dest="print_build_failures",
    default=False,
    action="store_true",
    help="Print task *.stdout target file(s) on build failures. (default: '%default')",
)
# Python optparse appends to the default list instead of overriding. Must implement default/override ourselves.
default_abaqus_commands = [
    "/apps/abaqus/Commands/abq2024",
    "/usr/projects/ea/abaqus/Commands/abq2024",
    "abq2024",
    "abaqus",
]
AddOption(
    "--abaqus-command",
    dest="abaqus_command",
    nargs=1,
    type="string",
    action="append",
    metavar="COMMAND",
    help=f"Override for the Abaqus command. Repeat to specify more than one (default: {default_abaqus_commands})",
)

# Comments used in tutorial code snippets: marker-2

# Inherit user's full environment and set project variables
env = waves.scons_extensions.WAVESEnvironment(
    ENV=os.environ.copy(),
    variant_dir_base=pathlib.Path(GetOption("variant_dir_base")),
    unconditional_build=GetOption("unconditional_build"),
    print_build_failures=GetOption("print_build_failures"),
    abaqus_commands=GetOption("abaqus_command"),
    TARFLAGS="-c -j",
    TARSUFFIX=".tar.bz2",
)

# Conditionally print failed task *.stdout files
env.PrintBuildFailures(print_stdout=env["print_build_failures"])

# Comments used in tutorial code snippets: marker-3

# Find required programs for conditional target ignoring and absolute path for use in target actions
env["ABAQUS_PROGRAM"] = env.AddProgram(
    env["abaqus_commands"] if env["abaqus_commands"] is not None else default_abaqus_commands
)

# Comments used in tutorial code snippets: marker-4

# Set project internal variables and variable substitution dictionaries
project_name = "WAVES-TUTORIAL"
version = setuptools_scm.get_version()
archive_prefix = f"{project_name}-{version}"
project_configuration = pathlib.Path(inspect.getfile(lambda: None))
project_dir = project_configuration.parent
project_variables = {
    "project_configuration": project_configuration,
    "project_name": project_name,
    "project_dir": project_dir,
    "version": version,
    "regression_alias": "regression",
    "datacheck_alias": "datacheck",
    "archive_prefix": archive_prefix,
}
for key, value in project_variables.items():
    env[key] = value

# Make the project package importable for: (1) SConscript files and (2) Python and Abaqus Python environments
sys.path.insert(0, str(project_dir))
env.PrependENVPath("PYTHONPATH", project_dir)

# Comments used in tutorial code snippets: marker-5

# Add builders and pseudo-builders
env.Append(
    BUILDERS={
        "AbaqusExtract": waves.scons_extensions.abaqus_extract(program=env["ABAQUS_PROGRAM"]),
    }
)

# Comments used in tutorial code snippets: marker-6

# Add simulation targets
workflow_configurations = [
    "tutorial_01_geometry.scons",
    "tutorial_02_partition_mesh.scons",
    "tutorial_03_solverprep.scons",
    "tutorial_04_simulation.scons",
    "tutorial_05_parameter_substitution.scons",
    "tutorial_06_include_files.scons",
    "tutorial_07_cartesian_product.scons",
    "tutorial_08_data_extraction.scons",
    "tutorial_09_post_processing.scons",
    "tutorial_11_regression_testing.scons",
    "tutorial_12_archival.scons",
]
for workflow in workflow_configurations:
    build_dir = env["variant_dir_base"] / pathlib.Path(workflow).stem
    SConscript(workflow, variant_dir=build_dir, exports={"env": env}, duplicate=False)

# Add unit test target
test_workflow = pathlib.Path("unit_testing.scons")
test_build_dir = env["variant_dir_base"] / test_workflow.stem
SConscript(test_workflow, variant_dir=test_build_dir, exports={"env": env}, duplicate=False)

# Comments used in tutorial code snippets: marker-7

# Add default target list to help message
env.Default()  # Empty defaults list to avoid building all simulation targets by default
# Add aliases to help message so users know what build target options are available
# This must come *after* all expected Alias definitions and SConscript files.
env.ProjectHelp()

# Comments used in tutorial code snippets: marker-8
