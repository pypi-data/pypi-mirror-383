[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "alactic-agi"
version = "1.0.0"
description = "Enterprise AI Dataset Processing Platform - Scalable data acquisition, validation, and structuring with production-ready monitoring"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Yash Parashar", email = "yash@alacticai.com"},
    {name = "Alactic Inc.", email = "support@alacticai.com"}
]
maintainers = [
    {name = "Yash Parashar", email = "yash@alacticai.com"}
]
keywords = [
    "ai", "dataset", "processing", "scraping", "monitoring", 
    "enterprise", "solr", "prometheus", "data-pipeline", 
    "machine-learning", "web-crawling", "data-validation"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Topic :: Database :: Database Engines/Servers",
    "Environment :: Web Environment",
    "Framework :: Flask"
]
requires-python = ">=3.10"
dependencies = [
    "scrapy>=2.10.0",
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "pandas>=2.0.0",
    "flask>=2.3.0",
    "prometheus-client>=0.17.0",
    "psutil>=5.9.0",
    "configparser>=5.0.0",
    "aiohttp>=3.8.0",
    "lxml>=4.9.0",
    "python-dateutil>=2.8.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "loguru>=0.7.0"
]

[project.optional-dependencies]
monitoring = [
    "prometheus-client>=0.17.0",
    "psutil>=5.9.0",
    "grafana-api>=1.0.3"
]
enterprise = [
    "redis>=4.5.0",
    "celery>=5.3.0",
    "gunicorn>=21.0.0"
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0"
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0"
]

[project.urls]
Homepage = "https://www.alacticai.com"
Documentation = "https://docs.alacticai.com"
Repository = "https://github.com/AlacticAI/alactic-agi"
"Bug Tracker" = "https://github.com/AlacticAI/alactic-agi/issues"
Changelog = "https://github.com/AlacticAI/alactic-agi/blob/main/CHANGELOG.md"
"Commercial Support" = "https://www.alacticai.com"

[project.scripts]
alactic-agi = "alactic_agi.cli:main"
alactic-monitor = "alactic_agi.monitoring:start_monitoring"
alactic-demo = "alactic_agi.demo:run_demo"

[project.entry-points."alactic_agi.plugins"]
default_crawler = "alactic_agi.crawler:DefaultCrawler"
solr_indexer = "alactic_agi.indexer:SolrIndexer"
prometheus_monitor = "alactic_agi.monitoring:PrometheusMonitor"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["alactic_agi*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
alactic_agi = [
    "config/*.ini",
    "config/*.yml",
    "config/*.yaml",
    "templates/*.html",
    "static/*",
    "schemas/*.json"
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["src/alactic_agi"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]