#!/usr/bin/env python3

# Standard libraries
import datetime
import re

# Components
from ..package.bundle import Bundle

# MilestoneDescription class, pylint: disable=too-few-public-methods
class MilestoneDescription:

    # Constants
    AUTOGENERATED_HINT: str = f'<!-- DO NOT EDIT, GENERATED BY: {Bundle.NAME} -->'
    AUTOGENERATED_START: str = f'<!-- {Bundle.NAME}-start -->'
    AUTOGENERATED_STOP: str = f'<!-- {Bundle.NAME}-stop -->'
    AUTOGENERATED_UPDATED: str = f'<!-- {Bundle.NAME}-updated -->'
    DUE_DATE_UNDEFINED: str = '9999-12-31'

    # Inject statistics
    @staticmethod
    def inject_statistics(description: str, statistics: str) -> str:

        # Variables
        detailed: bool = False

        # Strip old statistics
        description = re.sub(
            r'(?ms)'
            f'\n{MilestoneDescription.AUTOGENERATED_START}'
            r'.*'
            f'\n{MilestoneDescription.AUTOGENERATED_STOP}',
            '',
            description,
        )

        # Detect detailed description
        if description:
            detailed = True
            if not description.endswith('\n'):
                description += '\n'

        # Inject statistics start
        description += f'\n{MilestoneDescription.AUTOGENERATED_START}'
        description += f'\n{MilestoneDescription.AUTOGENERATED_HINT}'
        description += '\n'

        # Inject statistics separator
        if detailed:
            description += '\n---'
            description += '\n'

        # Inject statistics content
        description += f'\n{statistics}'

        # Inject milestone update
        date_updated = datetime.datetime.now(
            datetime.timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')
        description += '\n'
        description += f'\n_Last update using {Bundle.NAME} : {date_updated}_' \
                       f' {MilestoneDescription.AUTOGENERATED_UPDATED}'

        # Inject statistics stop
        description += '\n'
        description += f'\n{MilestoneDescription.AUTOGENERATED_STOP}'

        # Result
        return description

    # Updated statistics
    @staticmethod
    def updated_statistics(description_current: str, description_new: str) -> bool:

        # Filter updated comment line
        description_current = '\n'.join(
            line for line in description_current.splitlines()
            if MilestoneDescription.AUTOGENERATED_UPDATED not in line)
        description_new = '\n'.join(
            line for line in description_new.splitlines()
            if MilestoneDescription.AUTOGENERATED_UPDATED not in line)

        # Compare descriptions
        return description_current != description_new
