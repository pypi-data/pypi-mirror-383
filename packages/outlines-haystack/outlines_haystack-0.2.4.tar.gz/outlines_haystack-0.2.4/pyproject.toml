[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "outlines-haystack"
dynamic = ["version"]
description = 'Use `outlines` generators with Haystack.'
readme = "README.md"
requires-python = ">=3.10,<3.13"
keywords = [
  "nlp",
  "machine-learning",
  "ai",
  "haystack",
  "llm",
  "outlines",
  "structured-generation",
  "generative-ai",
]
authors = [{ name = "Edoardo Abati" }]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "haystack-ai>=2.5.0",
  "outlines>=0.2.0,<1.0.0",
]
[project.optional-dependencies]
mlxlm = ["outlines[mlxlm]"]
openai = ["outlines[openai]"]
transformers = ["outlines[transformers]"]
# We include llama-cpp-python as a dependency here to ensure that it is installed
# from the custom index defined below on macOS, where building from source might fail.
llama-cpp = ["outlines[llamacpp]", "llama-cpp-python"]

[project.urls]
Documentation = "https://github.com/EdAbati/outlines-haystack#readme"
Issues = "https://github.com/EdAbati/outlines-haystack/issues"
Source = "https://github.com/EdAbati/outlines-haystack"

[tool.hatch.version]
path = "src/outlines_haystack/__about__.py"

# Copied from : https://github.com/deepset-ai/haystack-core-integrations/blob/main/integrations/llama_cpp/pyproject.toml#L31C1-L37C62
# On macOS GitHub runners, we use a custom index to download pre-built wheels.
# Installing from source might fail due to missing dependencies (CMake fails with "OpenMP not found")
[tool.uv.sources]
llama-cpp-python = [
  { index = "llama-cpp-python-macos", marker = "sys_platform == 'darwin'" },
]
[[tool.uv.index]]
name = "llama-cpp-python-macos"
url = "https://abetlen.github.io/llama-cpp-python/whl/metal/"
explicit = true


# Default environment
[tool.hatch.envs.default]
installer = "uv"
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
features = ["llama-cpp", "openai", "transformers"]

[tool.hatch.envs.default.overrides]
platform.macos.features = ["llama-cpp", "mlxlm", "openai", "transformers"]

# Unit tests
[tool.hatch.envs.hatch-test]
installer = "uv"
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
features = ["openai", "transformers"]
post-install-commands = ["uv pip freeze"]

[tool.hatch.envs.hatch-test.overrides]
platform.macos.features = ["llama-cpp", "mlxlm", "openai", "transformers"]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.12", "3.11", "3.10", "3.9"]

[tool.hatch.envs.hatch-test.scripts]
run = "pytest{env:HATCH_TEST_ARGS:} {args}"
run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}"
cov-combine = "coverage combine"
cov-report = "coverage report"

[tool.coverage.run]
source_pkgs = ["outlines_haystack", "tests"]
branch = true
parallel = true
omit = [
  "src/outlines_haystack/__about__.py",
]

[tool.coverage.paths]
outlines_haystack = [
  "src/outlines_haystack",
  "*/outlines-haystack/src/outlines_haystack",
]
tests = ["tests", "*/outlines-haystack/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]


# Documentation
[tool.hatch.envs.docs]
dependencies = [
  "notebook",
  "ipywidgets",
]


# Type checking
[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]

[tool.hatch.envs.types.scripts]
check = "mypy {args:src/outlines_haystack tests}"


# Linting
[tool.hatch.envs.hatch-static-analysis]
dependencies = ["ruff>=0.8.0"]

[tool.hatch.envs.hatch-static-analysis.scripts]
format-check = "ruff format --check --diff {args:.}"
format-fix = "ruff format {args:.}"
lint-check = "ruff check {args:.}"
lint-fix = "ruff check --fix {args:.}"


# Format/Linting Tools
[tool.ruff]
target-version = "py310"
line-length = 120
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # Missing trailing comma (conflict with ruff-format)
  "COM812",
  # No required doctstring for modules, packages
  "D100",
  "D104",
  # No future annotations
  "FA100",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Haystack doesn't support | for Union types
  "UP007",
]

[tool.ruff.lint.isort]
known-first-party = ["outlines_haystack"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004", "S101", "TID252", "D100", "D101", "D103", "SLF001"]
"notebooks/*" = ["ERA001", "D101"]
