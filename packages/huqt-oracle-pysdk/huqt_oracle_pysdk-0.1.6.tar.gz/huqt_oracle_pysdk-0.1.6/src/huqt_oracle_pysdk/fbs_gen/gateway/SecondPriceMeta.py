# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gateway

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SecondPriceMeta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SecondPriceMeta()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSecondPriceMeta(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SecondPriceMeta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SecondPriceMeta
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SecondPriceMeta
    def FlatFee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SecondPriceMeta
    def Quote(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SecondPriceMeta
    def Prize(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gateway.ConversionElement import ConversionElement
            obj = ConversionElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SecondPriceMeta
    def PrizeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SecondPriceMeta
    def PrizeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def SecondPriceMetaStart(builder):
    builder.StartObject(4)

def Start(builder):
    SecondPriceMetaStart(builder)

def SecondPriceMetaAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SecondPriceMetaAddName(builder, name)

def SecondPriceMetaAddFlatFee(builder, flatFee):
    builder.PrependInt64Slot(1, flatFee, 0)

def AddFlatFee(builder, flatFee):
    SecondPriceMetaAddFlatFee(builder, flatFee)

def SecondPriceMetaAddQuote(builder, quote):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(quote), 0)

def AddQuote(builder, quote):
    SecondPriceMetaAddQuote(builder, quote)

def SecondPriceMetaAddPrize(builder, prize):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(prize), 0)

def AddPrize(builder, prize):
    SecondPriceMetaAddPrize(builder, prize)

def SecondPriceMetaStartPrizeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPrizeVector(builder, numElems):
    return SecondPriceMetaStartPrizeVector(builder, numElems)

def SecondPriceMetaEnd(builder):
    return builder.EndObject()

def End(builder):
    return SecondPriceMetaEnd(builder)
