# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gateway

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Level(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Level()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLevel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Level
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Level
    def Px(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Level
    def Sz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Level
    def N(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def LevelStart(builder):
    builder.StartObject(3)

def Start(builder):
    LevelStart(builder)

def LevelAddPx(builder, px):
    builder.PrependInt64Slot(0, px, 0)

def AddPx(builder, px):
    LevelAddPx(builder, px)

def LevelAddSz(builder, sz):
    builder.PrependInt64Slot(1, sz, 0)

def AddSz(builder, sz):
    LevelAddSz(builder, sz)

def LevelAddN(builder, n):
    builder.PrependInt64Slot(2, n, 0)

def AddN(builder, n):
    LevelAddN(builder, n)

def LevelEnd(builder):
    return builder.EndObject()

def End(builder):
    return LevelEnd(builder)
