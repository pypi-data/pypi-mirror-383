# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gateway

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FillsStream(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FillsStream()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFillsStream(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FillsStream
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FillsStream
    def Domain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FillsStream
    def Account(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FillsStream
    def IsSnapshot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FillsStream
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FillsStream
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FillsStream
    def Fills(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gateway.Fill import Fill
            obj = Fill()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FillsStream
    def FillsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FillsStream
    def FillsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def FillsStreamStart(builder):
    builder.StartObject(6)

def Start(builder):
    FillsStreamStart(builder)

def FillsStreamAddDomain(builder, domain):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(domain), 0)

def AddDomain(builder, domain):
    FillsStreamAddDomain(builder, domain)

def FillsStreamAddAccount(builder, account):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(account), 0)

def AddAccount(builder, account):
    FillsStreamAddAccount(builder, account)

def FillsStreamAddIsSnapshot(builder, isSnapshot):
    builder.PrependBoolSlot(2, isSnapshot, 0)

def AddIsSnapshot(builder, isSnapshot):
    FillsStreamAddIsSnapshot(builder, isSnapshot)

def FillsStreamAddTs(builder, ts):
    builder.PrependInt64Slot(3, ts, 0)

def AddTs(builder, ts):
    FillsStreamAddTs(builder, ts)

def FillsStreamAddEndTs(builder, endTs):
    builder.PrependInt64Slot(4, endTs, 0)

def AddEndTs(builder, endTs):
    FillsStreamAddEndTs(builder, endTs)

def FillsStreamAddFills(builder, fills):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(fills), 0)

def AddFills(builder, fills):
    FillsStreamAddFills(builder, fills)

def FillsStreamStartFillsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFillsVector(builder, numElems):
    return FillsStreamStartFillsVector(builder, numElems)

def FillsStreamEnd(builder):
    return builder.EndObject()

def End(builder):
    return FillsStreamEnd(builder)
