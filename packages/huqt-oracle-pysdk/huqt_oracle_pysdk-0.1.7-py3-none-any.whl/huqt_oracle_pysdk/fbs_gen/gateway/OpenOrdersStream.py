# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gateway

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OpenOrdersStream(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OpenOrdersStream()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOpenOrdersStream(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OpenOrdersStream
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OpenOrdersStream
    def Domain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OpenOrdersStream
    def Account(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OpenOrdersStream
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenOrdersStream
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenOrdersStream
    def OrdersType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # OpenOrdersStream
    def Orders(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def OpenOrdersStreamStart(builder):
    builder.StartObject(6)

def Start(builder):
    OpenOrdersStreamStart(builder)

def OpenOrdersStreamAddDomain(builder, domain):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(domain), 0)

def AddDomain(builder, domain):
    OpenOrdersStreamAddDomain(builder, domain)

def OpenOrdersStreamAddAccount(builder, account):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(account), 0)

def AddAccount(builder, account):
    OpenOrdersStreamAddAccount(builder, account)

def OpenOrdersStreamAddTs(builder, ts):
    builder.PrependInt64Slot(2, ts, 0)

def AddTs(builder, ts):
    OpenOrdersStreamAddTs(builder, ts)

def OpenOrdersStreamAddEndTs(builder, endTs):
    builder.PrependInt64Slot(3, endTs, 0)

def AddEndTs(builder, endTs):
    OpenOrdersStreamAddEndTs(builder, endTs)

def OpenOrdersStreamAddOrdersType(builder, ordersType):
    builder.PrependUint8Slot(4, ordersType, 0)

def AddOrdersType(builder, ordersType):
    OpenOrdersStreamAddOrdersType(builder, ordersType)

def OpenOrdersStreamAddOrders(builder, orders):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(orders), 0)

def AddOrders(builder, orders):
    OpenOrdersStreamAddOrders(builder, orders)

def OpenOrdersStreamEnd(builder):
    return builder.EndObject()

def End(builder):
    return OpenOrdersStreamEnd(builder)
