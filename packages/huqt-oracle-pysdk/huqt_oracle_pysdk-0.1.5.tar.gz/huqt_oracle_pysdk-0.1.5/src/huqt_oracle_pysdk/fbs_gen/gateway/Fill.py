# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gateway

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Fill(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Fill()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFill(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Fill
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Fill
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Fill
    def Oid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Fill
    def Account(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Fill
    def Market(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Fill
    def Px(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Fill
    def Sz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Fill
    def Side(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Fill
    def IsTaker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Fill
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def FillStart(builder):
    builder.StartObject(9)

def Start(builder):
    FillStart(builder)

def FillAddTs(builder, ts):
    builder.PrependInt64Slot(0, ts, 0)

def AddTs(builder, ts):
    FillAddTs(builder, ts)

def FillAddOid(builder, oid):
    builder.PrependInt64Slot(1, oid, 0)

def AddOid(builder, oid):
    FillAddOid(builder, oid)

def FillAddAccount(builder, account):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(account), 0)

def AddAccount(builder, account):
    FillAddAccount(builder, account)

def FillAddMarket(builder, market):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(market), 0)

def AddMarket(builder, market):
    FillAddMarket(builder, market)

def FillAddPx(builder, px):
    builder.PrependInt64Slot(4, px, 0)

def AddPx(builder, px):
    FillAddPx(builder, px)

def FillAddSz(builder, sz):
    builder.PrependInt64Slot(5, sz, 0)

def AddSz(builder, sz):
    FillAddSz(builder, sz)

def FillAddSide(builder, side):
    builder.PrependInt8Slot(6, side, 0)

def AddSide(builder, side):
    FillAddSide(builder, side)

def FillAddIsTaker(builder, isTaker):
    builder.PrependBoolSlot(7, isTaker, 0)

def AddIsTaker(builder, isTaker):
    FillAddIsTaker(builder, isTaker)

def FillAddTime(builder, time):
    builder.PrependInt64Slot(8, time, 0)

def AddTime(builder, time):
    FillAddTime(builder, time)

def FillEnd(builder):
    return builder.EndObject()

def End(builder):
    return FillEnd(builder)
