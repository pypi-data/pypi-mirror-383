# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gateway

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MarketMeta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MarketMeta()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMarketMeta(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MarketMeta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MarketMeta
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MarketMeta
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MarketMeta
    def Quote(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MarketMeta
    def FlatFee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MarketMeta
    def TakerFee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MarketMeta
    def MakerFee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MarketMeta
    def FeeDenom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MarketMetaStart(builder):
    builder.StartObject(7)

def Start(builder):
    MarketMetaStart(builder)

def MarketMetaAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    MarketMetaAddName(builder, name)

def MarketMetaAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    MarketMetaAddBase(builder, base)

def MarketMetaAddQuote(builder, quote):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(quote), 0)

def AddQuote(builder, quote):
    MarketMetaAddQuote(builder, quote)

def MarketMetaAddFlatFee(builder, flatFee):
    builder.PrependInt64Slot(3, flatFee, 0)

def AddFlatFee(builder, flatFee):
    MarketMetaAddFlatFee(builder, flatFee)

def MarketMetaAddTakerFee(builder, takerFee):
    builder.PrependInt64Slot(4, takerFee, 0)

def AddTakerFee(builder, takerFee):
    MarketMetaAddTakerFee(builder, takerFee)

def MarketMetaAddMakerFee(builder, makerFee):
    builder.PrependInt64Slot(5, makerFee, 0)

def AddMakerFee(builder, makerFee):
    MarketMetaAddMakerFee(builder, makerFee)

def MarketMetaAddFeeDenom(builder, feeDenom):
    builder.PrependInt64Slot(6, feeDenom, 0)

def AddFeeDenom(builder, feeDenom):
    MarketMetaAddFeeDenom(builder, feeDenom)

def MarketMetaEnd(builder):
    return builder.EndObject()

def End(builder):
    return MarketMetaEnd(builder)
