# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gateway

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OptionsMeta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OptionsMeta()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOptionsMeta(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OptionsMeta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OptionsMeta
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OptionsMeta
    def From(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gateway.ConversionElement import ConversionElement
            obj = ConversionElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OptionsMeta
    def FromLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OptionsMeta
    def FromIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # OptionsMeta
    def FlatFee(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gateway.ConversionElement import ConversionElement
            obj = ConversionElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OptionsMeta
    def FlatFeeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OptionsMeta
    def FlatFeeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # OptionsMeta
    def To(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gateway.ConversionElement import ConversionElement
            obj = ConversionElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OptionsMeta
    def ToLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OptionsMeta
    def ToIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # OptionsMeta
    def Option(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OptionsMetaStart(builder):
    builder.StartObject(5)

def Start(builder):
    OptionsMetaStart(builder)

def OptionsMetaAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    OptionsMetaAddName(builder, name)

def OptionsMetaAddFrom(builder, from_):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(from_), 0)

def AddFrom(builder, from_):
    OptionsMetaAddFrom(builder, from_)

def OptionsMetaStartFromVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFromVector(builder, numElems):
    return OptionsMetaStartFromVector(builder, numElems)

def OptionsMetaAddFlatFee(builder, flatFee):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(flatFee), 0)

def AddFlatFee(builder, flatFee):
    OptionsMetaAddFlatFee(builder, flatFee)

def OptionsMetaStartFlatFeeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFlatFeeVector(builder, numElems):
    return OptionsMetaStartFlatFeeVector(builder, numElems)

def OptionsMetaAddTo(builder, to):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(to), 0)

def AddTo(builder, to):
    OptionsMetaAddTo(builder, to)

def OptionsMetaStartToVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartToVector(builder, numElems):
    return OptionsMetaStartToVector(builder, numElems)

def OptionsMetaAddOption(builder, option):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(option), 0)

def AddOption(builder, option):
    OptionsMetaAddOption(builder, option)

def OptionsMetaEnd(builder):
    return builder.EndObject()

def End(builder):
    return OptionsMetaEnd(builder)
