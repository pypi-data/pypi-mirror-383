# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gateway

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TradesStream(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TradesStream()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTradesStream(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TradesStream
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TradesStream
    def Domain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TradesStream
    def Market(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TradesStream
    def IsSnapshot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TradesStream
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TradesStream
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TradesStream
    def Trades(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gateway.Trade import Trade
            obj = Trade()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TradesStream
    def TradesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TradesStream
    def TradesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def TradesStreamStart(builder):
    builder.StartObject(6)

def Start(builder):
    TradesStreamStart(builder)

def TradesStreamAddDomain(builder, domain):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(domain), 0)

def AddDomain(builder, domain):
    TradesStreamAddDomain(builder, domain)

def TradesStreamAddMarket(builder, market):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(market), 0)

def AddMarket(builder, market):
    TradesStreamAddMarket(builder, market)

def TradesStreamAddIsSnapshot(builder, isSnapshot):
    builder.PrependBoolSlot(2, isSnapshot, 0)

def AddIsSnapshot(builder, isSnapshot):
    TradesStreamAddIsSnapshot(builder, isSnapshot)

def TradesStreamAddTs(builder, ts):
    builder.PrependInt64Slot(3, ts, 0)

def AddTs(builder, ts):
    TradesStreamAddTs(builder, ts)

def TradesStreamAddEndTs(builder, endTs):
    builder.PrependInt64Slot(4, endTs, 0)

def AddEndTs(builder, endTs):
    TradesStreamAddEndTs(builder, endTs)

def TradesStreamAddTrades(builder, trades):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(trades), 0)

def AddTrades(builder, trades):
    TradesStreamAddTrades(builder, trades)

def TradesStreamStartTradesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTradesVector(builder, numElems):
    return TradesStreamStartTradesVector(builder, numElems)

def TradesStreamEnd(builder):
    return builder.EndObject()

def End(builder):
    return TradesStreamEnd(builder)
