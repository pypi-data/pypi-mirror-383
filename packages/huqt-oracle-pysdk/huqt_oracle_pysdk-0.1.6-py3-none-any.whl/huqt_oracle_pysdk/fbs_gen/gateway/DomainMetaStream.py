# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gateway

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DomainMetaStream(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DomainMetaStream()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDomainMetaStream(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DomainMetaStream
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DomainMetaStream
    def Domain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DomainMetaStream
    def Conversions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gateway.ConversionMeta import ConversionMeta
            obj = ConversionMeta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DomainMetaStream
    def ConversionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DomainMetaStream
    def ConversionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # DomainMetaStream
    def Markets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gateway.MarketMeta import MarketMeta
            obj = MarketMeta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DomainMetaStream
    def MarketsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DomainMetaStream
    def MarketsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # DomainMetaStream
    def Options(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gateway.OptionsMeta import OptionsMeta
            obj = OptionsMeta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DomainMetaStream
    def OptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DomainMetaStream
    def OptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # DomainMetaStream
    def Auctions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gateway.AuctionMeta import AuctionMeta
            obj = AuctionMeta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DomainMetaStream
    def AuctionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DomainMetaStream
    def AuctionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # DomainMetaStream
    def Quote(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DomainMetaStreamStart(builder):
    builder.StartObject(6)

def Start(builder):
    DomainMetaStreamStart(builder)

def DomainMetaStreamAddDomain(builder, domain):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(domain), 0)

def AddDomain(builder, domain):
    DomainMetaStreamAddDomain(builder, domain)

def DomainMetaStreamAddConversions(builder, conversions):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(conversions), 0)

def AddConversions(builder, conversions):
    DomainMetaStreamAddConversions(builder, conversions)

def DomainMetaStreamStartConversionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartConversionsVector(builder, numElems):
    return DomainMetaStreamStartConversionsVector(builder, numElems)

def DomainMetaStreamAddMarkets(builder, markets):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(markets), 0)

def AddMarkets(builder, markets):
    DomainMetaStreamAddMarkets(builder, markets)

def DomainMetaStreamStartMarketsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMarketsVector(builder, numElems):
    return DomainMetaStreamStartMarketsVector(builder, numElems)

def DomainMetaStreamAddOptions(builder, options):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(options), 0)

def AddOptions(builder, options):
    DomainMetaStreamAddOptions(builder, options)

def DomainMetaStreamStartOptionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOptionsVector(builder, numElems):
    return DomainMetaStreamStartOptionsVector(builder, numElems)

def DomainMetaStreamAddAuctions(builder, auctions):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(auctions), 0)

def AddAuctions(builder, auctions):
    DomainMetaStreamAddAuctions(builder, auctions)

def DomainMetaStreamStartAuctionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAuctionsVector(builder, numElems):
    return DomainMetaStreamStartAuctionsVector(builder, numElems)

def DomainMetaStreamAddQuote(builder, quote):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(quote), 0)

def AddQuote(builder, quote):
    DomainMetaStreamAddQuote(builder, quote)

def DomainMetaStreamEnd(builder):
    return builder.EndObject()

def End(builder):
    return DomainMetaStreamEnd(builder)
