# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gateway

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class IssuedOptionsStream(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IssuedOptionsStream()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIssuedOptionsStream(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IssuedOptionsStream
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IssuedOptionsStream
    def Domain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IssuedOptionsStream
    def Account(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IssuedOptionsStream
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # IssuedOptionsStream
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # IssuedOptionsStream
    def IssuancesType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # IssuedOptionsStream
    def Issuances(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def IssuedOptionsStreamStart(builder):
    builder.StartObject(6)

def Start(builder):
    IssuedOptionsStreamStart(builder)

def IssuedOptionsStreamAddDomain(builder, domain):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(domain), 0)

def AddDomain(builder, domain):
    IssuedOptionsStreamAddDomain(builder, domain)

def IssuedOptionsStreamAddAccount(builder, account):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(account), 0)

def AddAccount(builder, account):
    IssuedOptionsStreamAddAccount(builder, account)

def IssuedOptionsStreamAddTs(builder, ts):
    builder.PrependInt64Slot(2, ts, 0)

def AddTs(builder, ts):
    IssuedOptionsStreamAddTs(builder, ts)

def IssuedOptionsStreamAddEndTs(builder, endTs):
    builder.PrependInt64Slot(3, endTs, 0)

def AddEndTs(builder, endTs):
    IssuedOptionsStreamAddEndTs(builder, endTs)

def IssuedOptionsStreamAddIssuancesType(builder, issuancesType):
    builder.PrependUint8Slot(4, issuancesType, 0)

def AddIssuancesType(builder, issuancesType):
    IssuedOptionsStreamAddIssuancesType(builder, issuancesType)

def IssuedOptionsStreamAddIssuances(builder, issuances):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(issuances), 0)

def AddIssuances(builder, issuances):
    IssuedOptionsStreamAddIssuances(builder, issuances)

def IssuedOptionsStreamEnd(builder):
    return builder.EndObject()

def End(builder):
    return IssuedOptionsStreamEnd(builder)
