# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gateway

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OpenOrdersSnapshot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OpenOrdersSnapshot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOpenOrdersSnapshot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OpenOrdersSnapshot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OpenOrdersSnapshot
    def ClobOrders(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gateway.Order import Order
            obj = Order()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OpenOrdersSnapshot
    def ClobOrdersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpenOrdersSnapshot
    def ClobOrdersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # OpenOrdersSnapshot
    def AuctionOrders(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gateway.Order import Order
            obj = Order()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OpenOrdersSnapshot
    def AuctionOrdersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpenOrdersSnapshot
    def AuctionOrdersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def OpenOrdersSnapshotStart(builder):
    builder.StartObject(2)

def Start(builder):
    OpenOrdersSnapshotStart(builder)

def OpenOrdersSnapshotAddClobOrders(builder, clobOrders):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(clobOrders), 0)

def AddClobOrders(builder, clobOrders):
    OpenOrdersSnapshotAddClobOrders(builder, clobOrders)

def OpenOrdersSnapshotStartClobOrdersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartClobOrdersVector(builder, numElems):
    return OpenOrdersSnapshotStartClobOrdersVector(builder, numElems)

def OpenOrdersSnapshotAddAuctionOrders(builder, auctionOrders):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(auctionOrders), 0)

def AddAuctionOrders(builder, auctionOrders):
    OpenOrdersSnapshotAddAuctionOrders(builder, auctionOrders)

def OpenOrdersSnapshotStartAuctionOrdersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAuctionOrdersVector(builder, numElems):
    return OpenOrdersSnapshotStartAuctionOrdersVector(builder, numElems)

def OpenOrdersSnapshotEnd(builder):
    return builder.EndObject()

def End(builder):
    return OpenOrdersSnapshotEnd(builder)
