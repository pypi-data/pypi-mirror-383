# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gateway

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Trade(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Trade()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrade(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Trade
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Trade
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Trade
    def Market(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Trade
    def Px(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Trade
    def Sz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Trade
    def TakerSide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Trade
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def TradeStart(builder):
    builder.StartObject(6)

def Start(builder):
    TradeStart(builder)

def TradeAddTs(builder, ts):
    builder.PrependInt64Slot(0, ts, 0)

def AddTs(builder, ts):
    TradeAddTs(builder, ts)

def TradeAddMarket(builder, market):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(market), 0)

def AddMarket(builder, market):
    TradeAddMarket(builder, market)

def TradeAddPx(builder, px):
    builder.PrependInt64Slot(2, px, 0)

def AddPx(builder, px):
    TradeAddPx(builder, px)

def TradeAddSz(builder, sz):
    builder.PrependInt64Slot(3, sz, 0)

def AddSz(builder, sz):
    TradeAddSz(builder, sz)

def TradeAddTakerSide(builder, takerSide):
    builder.PrependInt8Slot(4, takerSide, 0)

def AddTakerSide(builder, takerSide):
    TradeAddTakerSide(builder, takerSide)

def TradeAddTime(builder, time):
    builder.PrependInt64Slot(5, time, 0)

def AddTime(builder, time):
    TradeAddTime(builder, time)

def TradeEnd(builder):
    return builder.EndObject()

def End(builder):
    return TradeEnd(builder)
