from _typeshed import Incomplete
from predict_backend.validation.type_validation import validate_types
from typing import Callable, Iterator
from virtualitics_sdk import Column as Column, Comment as Comment, Row as Row
from virtualitics_sdk.elements.element import Element as Element, InputElement as InputElement

logger: Incomplete

class Card:
    '''
    A container for elements on a Page. A Section is made up of Cards.

    :param title: The title for this Card.
    :param content: The elements contained in this Card.
    :param subtitle: The subtitle for this Card, defaults to "".
    :param description: The description for this Card, defaults to "".
    :param _id: ID of the card. Defaults to autogenerated UUID.
    :param show_title: Whether to show the title on the page when rendered, defaults to True.
    :param show_description: Whether to show the description to the page when rendered, defaults to True.
    :param page_update: Updater function. Allows for handling dynamic page update on a page
                        Takes a StoreInterface and optionally client runners as arguments, defaults to None.
    :param page_udpate_required: Whether to require running the page update. IMPORTANT, developer must set to False once the update has run the their desired state.
    :param update_elems: A list of element titles for required inputs the card updater function needs to run.
                          If only a single element is required, this argument can be a string. Defaults to None.
    :param updater_text: The text to show on the update button. If this value is not set, the frontend will default
                          to showing the text, "Update"
    :param filters: A list of input elements that can be used as input to the card\'s filter function, defaults to None.
    :param filter_update: Another updater function to call in combination with filter inputs
    :param show_comments: Whether to share the comments icon on this card. Defaults to False for non-Dashboard Steps
                          This value always be True with Dashboard Steps.
    :param show_export: Whether to share the export icon on this card. Defaults to False for non-Dashboard Steps
                        This value always be True with Dashboard Steps.
    :param show_share: Whether to share the share icon on this card. Defaults to False for non-Dashboard Steps
                       This value always be True with Dashboard Steps.

    **EXAMPLE:**

       .. code-block:: python

           # Imports
           from virtualitics_sdk import Card
           . . .
           # Example usage
           class ExStep(Step):
             def run(self, flow_metadata):
               store_interface = StoreInterface(**flow_metadata)
               page = store_interface.get_page()
               . . .
               card = Card(title="Example Card", content=[example_element])
               page.add_card_to_section(card, "")

        How to use page_update and updater_text

        .. code-block:: python
            # Imports
            from virtualitics_sdk import Card
            . . .
            . . .

            # Example page update function
            def updater(store_interface: StoreInterface):
                current_page = store_interface.get_page()
                updated_example_element = modify(example_element) # modify element(s) in the card
                current_page.replace_content_in_section(
                    elems=[updated_example_element], section_title="Ex Section", card_title="Example Card"
                )
                store_interface.update_page(current_page)

            # Example usage of page updater
            class ExStep(Step):
                def run(self, flow_metadata):
                    store_interface = StoreInterface(**flow_metadata)
                    page = store_interface.get_page()
                    . . .
                    card = Card(title="Example Card",
                                content=[example_element],
                                page_update=updater,
                                updater_text="Example Text")
                    page.add_card_to_section(card, "Ex Section")
        
        Using a page_update with page_update_required=True in order to run validation.
        You MUST specify card.page_update_required = False at some branch of your updater logic to enable the next button.
        
        .. code-block:: python
            def updater(store_interface: StoreInterface):
                value_one = store_interface.get_element_value(step_name="StepOne", elem_title="Value One")
                value_two = store_interface.get_element_value(step_name="StepOne", elem_title="Value Two")
                current_page = store_interface.get_page()
                card = current_page.get_card_by_title("Card One")
                try:
                    result = RichText(f\'Result is : {float(value_one) + float(value_two)}! You can now continue to the next step with this valid input.\')
                    card.page_update_required = False # Next button will be enabled (barring other elements being required)
                except ValueError as _:
                    result = RichText(f\'Could not add together {value_one} and {value_two}. Try again to continue step.\')
                    card.page_update_required = True # Next button will be disabled still, user will need to re try inputs. 
                . . . # add elements and feedback to user. 
                store_interface.update_page(current_page)

        How to use filters and filter_update

        .. code-block:: python
            # Imports
            from virtualitics_sdk import Card
            . . .
            . . .

            # Example page update function
            def updater(store_interface: StoreInterface):
                page = store_interface.get_page()
                card = page.get_card_by_title("Card Title")

                dropdown = store_interface.get_element_value(
                    store_interface.step_name, "Single Selection Dropdown"
                )
                date_range = store_interface.get_element_value(
                    store_interface.step_name, "Date Range Title"
                )
                ...


            # Example usage of page updater
            class ExStep(Step):
                def run(self, flow_metadata):
                    store_interface = StoreInterface(**flow_metadata)
                    page = store_interface.get_page()
                    . . .

                    min_range = datetime(2020, 6, 27, 12)
                    max_range = datetime(2025, 1, 27, 12)
                    date_range =  DateTimeRange(min_range=min_range,
                                                max_range=max_range,
                                                title="Date Range Title",
                                                description= "date-description")

                    dropdown_options = [\'a\', \'b\', \'c\']
                    dropdown = Dropdown(options=dropdown_options,
                                        multiselect=False,
                                        title="Single Selection Dropdown",
                                        selected=[\'a\'])

                    card = Card(title="Card Title",
                                        content=[example_element],
                                        filters=[dropdown, date_range],
                                        filter_update=updater)
                    page.add_card_to_section(card, "Ex Section")

    '''
    version: str
    id: Incomplete
    title: Incomplete
    content: Incomplete
    subtitle: Incomplete
    description: Incomplete
    show_title: Incomplete
    show_description: Incomplete
    has_updater: Incomplete
    updater_text: Incomplete
    comments: list['Comment']
    show_comments: Incomplete
    show_export: Incomplete
    show_share: Incomplete
    page_update: Incomplete
    update_elems: Incomplete
    updater_name: Incomplete
    page_update_required: Incomplete
    filters: Incomplete
    has_filter_updater: Incomplete
    filter_update: Incomplete
    filter_updater_name: Incomplete
    virtualitics_sdk_version: Incomplete
    @validate_types
    def __init__(self, title: str, content: list[Element | Row], subtitle: str = '', description: str = '', _id: str | None = None, show_title: bool = True, show_description: bool = True, page_update: Callable | None = None, page_update_required: bool = False, update_elems: str | list[str] | None = None, updater_text: str | None = None, filters: list[InputElement] | None = None, filter_update: Callable | None = None, show_comments: bool = False, show_export: bool = False, show_share: bool = False) -> None: ...
    def to_json(self) -> dict: ...
    def add_comment(self, comment: Comment): ...
    def edit_comment(self, comment_id: str, new_comment_message: str, editor: str) -> Comment: ...
    def delete_comment(self, comment_id: str): ...
    def get_comment(self, comment_id: str) -> Comment: ...
    def add_content(self, content: Row | list[Element] | Element, ratio: list[int | float] | None = None, index: int | None = None):
        """
            Add content to a Card.

        :param content: The element(s) to add to the Card.
        :param ratio: The relative widths of the elements inside the :class:`~virtualitics_sdk.elements.dashboard.Row`,
        :param index: The index to add the content to. If None, it will default to appending the content to the end of the card
        defaults to all elements having the same width.
        """
    def update_item(self, element_title: str, new_element: Element):
        """This function updates an element in a dashboard, which can be used in conjunction with
        the card's `updater` or `filter_update` function to provide dynamic page updates.

        :param element_title: The title of the element to be updated.
        :param new_element: The new element that will replace currently existing element.
        """
    def remove_item(self, element_title: str, quiet: bool = False):
        """This function removes an element in a dashboard, which can be used in conjunction with
        the card's `updater` of `filter_update` function to provide dynamic page updates.

        :param element_title: The title of the element to be updated.
        :param quiet: If True, do not return an error if there is no element with that title found on the page. Defaults to False
        """
    def get_elements(self) -> Iterator[Element]: ...
    def get_filters(self) -> Iterator[InputElement]: ...
