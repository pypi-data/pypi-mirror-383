# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatusDisplayName(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_display_name': 'str',
        'metric_value': 'str',
        'id': 'int',
        'datapoint_id': 'int',
        'operator': 'str'
    }

    attribute_map = {
        'status_display_name': 'statusDisplayName',
        'metric_value': 'metricValue',
        'id': 'id',
        'datapoint_id': 'datapointId',
        'operator': 'operator'
    }

    def __init__(self, status_display_name=None, metric_value=None, id=None, datapoint_id=None, operator=None):  # noqa: E501
        """StatusDisplayName - a model defined in Swagger"""  # noqa: E501
        self._status_display_name = None
        self._metric_value = None
        self._id = None
        self._datapoint_id = None
        self._operator = None
        self.discriminator = None
        self.status_display_name = status_display_name
        self.metric_value = metric_value
        if id is not None:
            self.id = id
        if datapoint_id is not None:
            self.datapoint_id = datapoint_id
        self.operator = operator

    @property
    def status_display_name(self):
        """Gets the status_display_name of this StatusDisplayName.  # noqa: E501

        The status display name for the metric value  # noqa: E501

        :return: The status_display_name of this StatusDisplayName.  # noqa: E501
        :rtype: str
        """
        return self._status_display_name

    @status_display_name.setter
    def status_display_name(self, status_display_name):
        """Sets the status_display_name of this StatusDisplayName.

        The status display name for the metric value  # noqa: E501

        :param status_display_name: The status_display_name of this StatusDisplayName.  # noqa: E501
        :type: str
        """
        if status_display_name is None:
            raise ValueError("Invalid value for `status_display_name`, must not be `None`")  # noqa: E501

        self._status_display_name = status_display_name

    @property
    def metric_value(self):
        """Gets the metric_value of this StatusDisplayName.  # noqa: E501

        The metric value that the alert must be greater than, less than, or equal to for this status display to be considered  # noqa: E501

        :return: The metric_value of this StatusDisplayName.  # noqa: E501
        :rtype: str
        """
        return self._metric_value

    @metric_value.setter
    def metric_value(self, metric_value):
        """Sets the metric_value of this StatusDisplayName.

        The metric value that the alert must be greater than, less than, or equal to for this status display to be considered  # noqa: E501

        :param metric_value: The metric_value of this StatusDisplayName.  # noqa: E501
        :type: str
        """
        if metric_value is None:
            raise ValueError("Invalid value for `metric_value`, must not be `None`")  # noqa: E501

        self._metric_value = metric_value

    @property
    def id(self):
        """Gets the id of this StatusDisplayName.  # noqa: E501

        The datapoint id  # noqa: E501

        :return: The id of this StatusDisplayName.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatusDisplayName.

        The datapoint id  # noqa: E501

        :param id: The id of this StatusDisplayName.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def datapoint_id(self):
        """Gets the datapoint_id of this StatusDisplayName.  # noqa: E501

        The datappoint id  # noqa: E501

        :return: The datapoint_id of this StatusDisplayName.  # noqa: E501
        :rtype: int
        """
        return self._datapoint_id

    @datapoint_id.setter
    def datapoint_id(self, datapoint_id):
        """Sets the datapoint_id of this StatusDisplayName.

        The datappoint id  # noqa: E501

        :param datapoint_id: The datapoint_id of this StatusDisplayName.  # noqa: E501
        :type: int
        """

        self._datapoint_id = datapoint_id

    @property
    def operator(self):
        """Gets the operator of this StatusDisplayName.  # noqa: E501

        The operator to use for the status display  # noqa: E501

        :return: The operator of this StatusDisplayName.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this StatusDisplayName.

        The operator to use for the status display  # noqa: E501

        :param operator: The operator of this StatusDisplayName.  # noqa: E501
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusDisplayName, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusDisplayName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
