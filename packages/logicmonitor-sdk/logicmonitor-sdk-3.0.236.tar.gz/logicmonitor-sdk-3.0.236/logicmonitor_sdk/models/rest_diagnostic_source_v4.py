# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestDiagnosticSourceV4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'replacement_lineage_name': 'str',
        'type': 'str',
        'lineage_id': 'str',
        'origin_version': 'str',
        'is_target_last_published_private': 'bool',
        'model': 'str',
        'id': 'str',
        'group': 'str',
        'filter_exchange_access_groups_ids': 'list[int]',
        'applies_to_script': 'str',
        'author_username': 'str',
        'upgradeable_registry_id': 'str',
        'version': 'str',
        'script': 'RestScriptV4',
        'tags': 'list[str]',
        'installed_local_id': 'str',
        'target_lineage_id': 'str',
        'name': 'str',
        'author_company_uuid': 'str',
        'origin_status': 'str',
        'locator': 'str',
        'status': 'str',
        'target_last_published_locator': 'str',
        'commit_message': 'str',
        'origin_published_at_ms': 'int',
        'target_last_published_version': 'str',
        'exchange_access_groups_ids': 'list[ModelAndId]',
        'description': 'str',
        'origin_registry_id_by_installed_local_id_map': 'dict(str, str)',
        'is_private': 'bool',
        'local_modules_ids': 'list[ModelAndId]',
        'target_last_published_status': 'str',
        'is_changed_from_target_last_published': 'bool',
        'exchange_changelogs_ids': 'list[ModelAndId]',
        'is_latest': 'bool',
        'installed_origin_registry_id': 'str',
        'origin_registry_id': 'str',
        'replacement_lineage_id': 'str',
        'checksum': 'str',
        'installation_statuses': 'list[str]',
        'associated_counts': 'LogicModuleAssociationCounts',
        'created_at_ms': 'int',
        'origin_author_namespace': 'str',
        'technical_notes': 'str',
        'origin_locator': 'str',
        'exchange_changelogs': 'list[RestChangelogV4]',
        'origin_lineage_id': 'str',
        'is_latest_available': 'bool',
        'updated_at_ms': 'int',
        'author_portal_name': 'str',
        'target_last_published_at_ms': 'int',
        'is_in_use': 'bool',
        'origin_name': 'str'
    }

    attribute_map = {
        'source': 'source',
        'replacement_lineage_name': 'replacementLineageName',
        'type': 'type',
        'lineage_id': 'lineageId',
        'origin_version': 'originVersion',
        'is_target_last_published_private': 'isTargetLastPublishedPrivate',
        'model': 'model',
        'id': 'id',
        'group': 'group',
        'filter_exchange_access_groups_ids': 'filterExchangeAccessGroupsIds',
        'applies_to_script': 'appliesToScript',
        'author_username': 'authorUsername',
        'upgradeable_registry_id': 'upgradeableRegistryId',
        'version': 'version',
        'script': 'script',
        'tags': 'tags',
        'installed_local_id': 'installedLocalId',
        'target_lineage_id': 'targetLineageId',
        'name': 'name',
        'author_company_uuid': 'authorCompanyUUID',
        'origin_status': 'originStatus',
        'locator': 'locator',
        'status': 'status',
        'target_last_published_locator': 'targetLastPublishedLocator',
        'commit_message': 'commitMessage',
        'origin_published_at_ms': 'originPublishedAtMS',
        'target_last_published_version': 'targetLastPublishedVersion',
        'exchange_access_groups_ids': 'exchangeAccessGroupsIds',
        'description': 'description',
        'origin_registry_id_by_installed_local_id_map': 'originRegistryIdByInstalledLocalIdMap',
        'is_private': 'isPrivate',
        'local_modules_ids': 'localModulesIds',
        'target_last_published_status': 'targetLastPublishedStatus',
        'is_changed_from_target_last_published': 'isChangedFromTargetLastPublished',
        'exchange_changelogs_ids': 'exchangeChangelogsIds',
        'is_latest': 'isLatest',
        'installed_origin_registry_id': 'installedOriginRegistryId',
        'origin_registry_id': 'originRegistryId',
        'replacement_lineage_id': 'replacementLineageId',
        'checksum': 'checksum',
        'installation_statuses': 'installationStatuses',
        'associated_counts': 'associatedCounts',
        'created_at_ms': 'createdAtMS',
        'origin_author_namespace': 'originAuthorNamespace',
        'technical_notes': 'technicalNotes',
        'origin_locator': 'originLocator',
        'exchange_changelogs': 'exchangeChangelogs',
        'origin_lineage_id': 'originLineageId',
        'is_latest_available': 'isLatestAvailable',
        'updated_at_ms': 'updatedAtMS',
        'author_portal_name': 'authorPortalName',
        'target_last_published_at_ms': 'targetLastPublishedAtMS',
        'is_in_use': 'isInUse',
        'origin_name': 'originName'
    }

    def __init__(self, source=None, replacement_lineage_name=None, type=None, lineage_id=None, origin_version=None, is_target_last_published_private=None, model=None, id=None, group=None, filter_exchange_access_groups_ids=None, applies_to_script=None, author_username=None, upgradeable_registry_id=None, version=None, script=None, tags=None, installed_local_id=None, target_lineage_id=None, name=None, author_company_uuid=None, origin_status=None, locator=None, status=None, target_last_published_locator=None, commit_message=None, origin_published_at_ms=None, target_last_published_version=None, exchange_access_groups_ids=None, description=None, origin_registry_id_by_installed_local_id_map=None, is_private=None, local_modules_ids=None, target_last_published_status=None, is_changed_from_target_last_published=None, exchange_changelogs_ids=None, is_latest=None, installed_origin_registry_id=None, origin_registry_id=None, replacement_lineage_id=None, checksum=None, installation_statuses=None, associated_counts=None, created_at_ms=None, origin_author_namespace=None, technical_notes=None, origin_locator=None, exchange_changelogs=None, origin_lineage_id=None, is_latest_available=None, updated_at_ms=None, author_portal_name=None, target_last_published_at_ms=None, is_in_use=None, origin_name=None):  # noqa: E501
        """RestDiagnosticSourceV4 - a model defined in Swagger"""  # noqa: E501
        self._source = None
        self._replacement_lineage_name = None
        self._type = None
        self._lineage_id = None
        self._origin_version = None
        self._is_target_last_published_private = None
        self._model = None
        self._id = None
        self._group = None
        self._filter_exchange_access_groups_ids = None
        self._applies_to_script = None
        self._author_username = None
        self._upgradeable_registry_id = None
        self._version = None
        self._script = None
        self._tags = None
        self._installed_local_id = None
        self._target_lineage_id = None
        self._name = None
        self._author_company_uuid = None
        self._origin_status = None
        self._locator = None
        self._status = None
        self._target_last_published_locator = None
        self._commit_message = None
        self._origin_published_at_ms = None
        self._target_last_published_version = None
        self._exchange_access_groups_ids = None
        self._description = None
        self._origin_registry_id_by_installed_local_id_map = None
        self._is_private = None
        self._local_modules_ids = None
        self._target_last_published_status = None
        self._is_changed_from_target_last_published = None
        self._exchange_changelogs_ids = None
        self._is_latest = None
        self._installed_origin_registry_id = None
        self._origin_registry_id = None
        self._replacement_lineage_id = None
        self._checksum = None
        self._installation_statuses = None
        self._associated_counts = None
        self._created_at_ms = None
        self._origin_author_namespace = None
        self._technical_notes = None
        self._origin_locator = None
        self._exchange_changelogs = None
        self._origin_lineage_id = None
        self._is_latest_available = None
        self._updated_at_ms = None
        self._author_portal_name = None
        self._target_last_published_at_ms = None
        self._is_in_use = None
        self._origin_name = None
        self.discriminator = None
        if source is not None:
            self.source = source
        if replacement_lineage_name is not None:
            self.replacement_lineage_name = replacement_lineage_name
        if type is not None:
            self.type = type
        if lineage_id is not None:
            self.lineage_id = lineage_id
        if origin_version is not None:
            self.origin_version = origin_version
        if is_target_last_published_private is not None:
            self.is_target_last_published_private = is_target_last_published_private
        if model is not None:
            self.model = model
        if id is not None:
            self.id = id
        if group is not None:
            self.group = group
        if filter_exchange_access_groups_ids is not None:
            self.filter_exchange_access_groups_ids = filter_exchange_access_groups_ids
        if applies_to_script is not None:
            self.applies_to_script = applies_to_script
        if author_username is not None:
            self.author_username = author_username
        if upgradeable_registry_id is not None:
            self.upgradeable_registry_id = upgradeable_registry_id
        if version is not None:
            self.version = version
        if script is not None:
            self.script = script
        if tags is not None:
            self.tags = tags
        if installed_local_id is not None:
            self.installed_local_id = installed_local_id
        if target_lineage_id is not None:
            self.target_lineage_id = target_lineage_id
        if name is not None:
            self.name = name
        if author_company_uuid is not None:
            self.author_company_uuid = author_company_uuid
        if origin_status is not None:
            self.origin_status = origin_status
        if locator is not None:
            self.locator = locator
        if status is not None:
            self.status = status
        if target_last_published_locator is not None:
            self.target_last_published_locator = target_last_published_locator
        if commit_message is not None:
            self.commit_message = commit_message
        if origin_published_at_ms is not None:
            self.origin_published_at_ms = origin_published_at_ms
        if target_last_published_version is not None:
            self.target_last_published_version = target_last_published_version
        if exchange_access_groups_ids is not None:
            self.exchange_access_groups_ids = exchange_access_groups_ids
        if description is not None:
            self.description = description
        if origin_registry_id_by_installed_local_id_map is not None:
            self.origin_registry_id_by_installed_local_id_map = origin_registry_id_by_installed_local_id_map
        if is_private is not None:
            self.is_private = is_private
        if local_modules_ids is not None:
            self.local_modules_ids = local_modules_ids
        if target_last_published_status is not None:
            self.target_last_published_status = target_last_published_status
        if is_changed_from_target_last_published is not None:
            self.is_changed_from_target_last_published = is_changed_from_target_last_published
        if exchange_changelogs_ids is not None:
            self.exchange_changelogs_ids = exchange_changelogs_ids
        if is_latest is not None:
            self.is_latest = is_latest
        if installed_origin_registry_id is not None:
            self.installed_origin_registry_id = installed_origin_registry_id
        if origin_registry_id is not None:
            self.origin_registry_id = origin_registry_id
        if replacement_lineage_id is not None:
            self.replacement_lineage_id = replacement_lineage_id
        if checksum is not None:
            self.checksum = checksum
        if installation_statuses is not None:
            self.installation_statuses = installation_statuses
        if associated_counts is not None:
            self.associated_counts = associated_counts
        if created_at_ms is not None:
            self.created_at_ms = created_at_ms
        if origin_author_namespace is not None:
            self.origin_author_namespace = origin_author_namespace
        if technical_notes is not None:
            self.technical_notes = technical_notes
        if origin_locator is not None:
            self.origin_locator = origin_locator
        if exchange_changelogs is not None:
            self.exchange_changelogs = exchange_changelogs
        if origin_lineage_id is not None:
            self.origin_lineage_id = origin_lineage_id
        if is_latest_available is not None:
            self.is_latest_available = is_latest_available
        if updated_at_ms is not None:
            self.updated_at_ms = updated_at_ms
        if author_portal_name is not None:
            self.author_portal_name = author_portal_name
        if target_last_published_at_ms is not None:
            self.target_last_published_at_ms = target_last_published_at_ms
        if is_in_use is not None:
            self.is_in_use = is_in_use
        if origin_name is not None:
            self.origin_name = origin_name

    @property
    def source(self):
        """Gets the source of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The source of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this RestDiagnosticSourceV4.


        :param source: The source of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """
        allowed_values = ["REGISTRY", "LOCAL"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def replacement_lineage_name(self):
        """Gets the replacement_lineage_name of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The replacement_lineage_name of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._replacement_lineage_name

    @replacement_lineage_name.setter
    def replacement_lineage_name(self, replacement_lineage_name):
        """Sets the replacement_lineage_name of this RestDiagnosticSourceV4.


        :param replacement_lineage_name: The replacement_lineage_name of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._replacement_lineage_name = replacement_lineage_name

    @property
    def type(self):
        """Gets the type of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The type of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RestDiagnosticSourceV4.


        :param type: The type of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """
        allowed_values = ["DATASOURCE", "EVENTSOURCE", "JOBMONITOR", "APPLIESTO_FUNCTION", "SNMP_SYSOID_MAP", "PROPERTYSOURCE", "CONFIGSOURCE", "TOPOLOGYSOURCE", "LOGSOURCE", "DIAGNOSTICSOURCE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def lineage_id(self):
        """Gets the lineage_id of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The lineage_id of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._lineage_id

    @lineage_id.setter
    def lineage_id(self, lineage_id):
        """Sets the lineage_id of this RestDiagnosticSourceV4.


        :param lineage_id: The lineage_id of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._lineage_id = lineage_id

    @property
    def origin_version(self):
        """Gets the origin_version of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The origin_version of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._origin_version

    @origin_version.setter
    def origin_version(self, origin_version):
        """Sets the origin_version of this RestDiagnosticSourceV4.


        :param origin_version: The origin_version of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._origin_version = origin_version

    @property
    def is_target_last_published_private(self):
        """Gets the is_target_last_published_private of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The is_target_last_published_private of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: bool
        """
        return self._is_target_last_published_private

    @is_target_last_published_private.setter
    def is_target_last_published_private(self, is_target_last_published_private):
        """Sets the is_target_last_published_private of this RestDiagnosticSourceV4.


        :param is_target_last_published_private: The is_target_last_published_private of this RestDiagnosticSourceV4.  # noqa: E501
        :type: bool
        """

        self._is_target_last_published_private = is_target_last_published_private

    @property
    def model(self):
        """Gets the model of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The model of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this RestDiagnosticSourceV4.


        :param model: The model of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """
        allowed_values = ["accessLogs", "accessGroups", "adminNotifications", "aggregateSavings", "alerts", "visualizationAggregateEntry", "visualizationAggregateValue", "alertDependencyRules", "alertRoutings", "alertRules", "diagnosticRules", "alertTuningConfigAncestry", "alertTuningConfigs", "alertTuningConfigsHistory", "alertTuningConfigSlots", "alertTuningGraphs", "alertsTuningSeries", "asnMappings", "billingConfigurations", "cloudAccounts", "cloudResourceProperty", "clusterAlertRoutings", "clusterAlertTuningConfigs", "collectors", "collectorEvents", "collectorGroups", "collectorStatus", "collectorUpgradeHistory", "collectorUpgradeInfo", "configSources", "collectorLogs", "config", "configAlert", "correlationGraphs", "dashboards", "datapoints", "dataQueries", "dataSources", "dataSourceInstances", "dataSourceInstanceAlertSettings", "dataSourceInstanceGroups", "datasets", "dnsMappings", "escalationChains", "eventSources", "integrations", "integrationAuditLogs", "logSources", "exchangeAccessGroups", "exchangeActiveDiscoveryFilters", "exchangeAppliesToFunctions", "exchangeChangelogs", "exchangeConfigSources", "exchangeConfigSourceConfigChecks", "exchangeDataSources", "exchangeDataSourceDataPoints", "exchangeDataSourceDataPointDisplayStatusNames", "exchangeDataSourceGraphs", "exchangeDataSourceGraphSeries", "exchangeDataSourceGraphVirtualSeries", "exchangeDataSourceOverviewGraphs", "exchangeDataSourceOverviewGraphSeries", "exchangeDataSourceOverviewGraphVirtualSeries", "exchangeDiagnosticSources", "exchangeEventSources", "exchangeEventSourceFilters", "exchangeEventSourceLogFiles", "exchangeJobMonitors", "exchangeLogSources", "exchangeLogSourceFilters", "exchangeSnmpTrapLogSourceFilters", "exchangeLogSourceLogFields", "exchangeLogSourceResourceMappings", "exchangeLogSourceCollectorMappings", "exchangeLogicModules", "exchangeLogicModulePackages", "exchangeLogicModulePermissions", "exchangePackagedLogicModules", "exchangePropertySources", "exchangeSNMPSysOIDMaps", "exchangeTopologySources", "externalResourceIdentifiers", "failedDataSourceInfo", "filterFieldList", "graphs", "graphMeta", "healthMetrics", "hierarchy", "hostclusterAlertDefs", "hostDiagnosticSourceDetails", "diagnosticExecutionContext", "latestDiagnosticExecutionResultContext", "diagnosticExecutionSearchContext", "diagnosticSourceAssociatedDevices", "hostGroups", "internalAlertSettings", "jobMonitors", "jobMonitorExecutions", "lmSupportAccessHasConnection", "lmSupportAccessState", "lmotelCollectors", "lmotelCollectorVersions", "lmCollectorVersions", "logalerts", "logicModuleGroups", "logpipelinesources", "logpipelineprocessors", "matchedEvents", "metaGroupings", "metricsCorrelation", "monitoredResources", "netscanGroups", "netscans", "netflow", "netflowAlertRule", "allLevels", "nocWidgets", "normalizedProperties", "netscanPolicies", "netscanExecutions", "opsNotes", "opsNoteResourceScopes", "opsNoteServiceScopes", "opsNoteResourceGroupScopes", "opsNoteServiceGroupScopes", "opsNoteGroupAllScopes", "opsNoteTags", "orgTreeNodes", "portMappings", "productIds", "properties", "propertySources", "rawData", "recentlyDeletedItems", "recipientGroups", "cloudRecommendations", "cloudRecommendationAdditionalData", "recommendationTypes", "relationships", "reports", "reportHistories", "reportGroups", "resources", "resourceDashboards", "resourceDataSources", "resourceDatapoints", "resourceEventSources", "resourceConfigSources", "ConfigSourcesGoldStandard", "ConfigSourceConfiguration", "resourceDashboardTemplates", "resourceGroups", "resourceGroupDataSourceConfigs", "resourceGroupEventSourceConfigs", "resourceGroupInfoSourceConfigs", "resourceJobMonitors", "resourceLogPipelineResources", "resourceLogSources", "sdts", "services", "serviceCheckpoints", "serviceGroups", "sharedQueries", "siteMonitors", "slaWidgets", "spanCount", "securityRecommendations", "subscriptions", "topology", "topologyMaps", "topologyMapsHistogram", "topologyMapsGraphs", "subEntities", "subEntitiesDetails", "topologySavedMapsGroupType", "topologySavedMapsGroup", "topologyManualMapping", "topologyManualInterfaceList", "traffic", "treeNodes", "unmonitoredResources", "userdata", "users", "userSettings", "websiteCheckpoints", "websiteGroups", "websites", "ServicePreview", "BizServiceDatapoint", "ServiceTemplateView", "ServiceMemberPreview", "RestServiceTemplate", "ServiceTemplateServiceStats", "synthetics", "usage", "tracesDevicesNamesIds", "tracesGraphIds", "tracesServices", "tracesDeviceDatasources", "tracesDeviceDatasourceInstances", "tracesNamespaceGraphDetails", "tracesResourceNamesIds", "tracesTopologyEdgeData", "members", "apiTokens", "roleGroups", "roles", "userGroups", "sharingTokens", "syntheticsDSInstanceRawData", "syntheticsDSInstanceStepData", "syntheticsDSInstanceAlerts", "usageDimensions", "vizResourceInfo", "lmqlResult", "lmqlParsed", "partitions", "logPartitionChangelog", "cloudRecommendationStatus", "recommendationStatusUpdateRequest", "websiteDevice", "mibUpload", "logQueryGroups", "logQueryGroupChangelog", "logQuery", "trackingLogQueries"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"  # noqa: E501
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def id(self):
        """Gets the id of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The id of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RestDiagnosticSourceV4.


        :param id: The id of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def group(self):
        """Gets the group of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The group of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this RestDiagnosticSourceV4.


        :param group: The group of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def filter_exchange_access_groups_ids(self):
        """Gets the filter_exchange_access_groups_ids of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The filter_exchange_access_groups_ids of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: list[int]
        """
        return self._filter_exchange_access_groups_ids

    @filter_exchange_access_groups_ids.setter
    def filter_exchange_access_groups_ids(self, filter_exchange_access_groups_ids):
        """Sets the filter_exchange_access_groups_ids of this RestDiagnosticSourceV4.


        :param filter_exchange_access_groups_ids: The filter_exchange_access_groups_ids of this RestDiagnosticSourceV4.  # noqa: E501
        :type: list[int]
        """

        self._filter_exchange_access_groups_ids = filter_exchange_access_groups_ids

    @property
    def applies_to_script(self):
        """Gets the applies_to_script of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The applies_to_script of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._applies_to_script

    @applies_to_script.setter
    def applies_to_script(self, applies_to_script):
        """Sets the applies_to_script of this RestDiagnosticSourceV4.


        :param applies_to_script: The applies_to_script of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._applies_to_script = applies_to_script

    @property
    def author_username(self):
        """Gets the author_username of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The author_username of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._author_username

    @author_username.setter
    def author_username(self, author_username):
        """Sets the author_username of this RestDiagnosticSourceV4.


        :param author_username: The author_username of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._author_username = author_username

    @property
    def upgradeable_registry_id(self):
        """Gets the upgradeable_registry_id of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The upgradeable_registry_id of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._upgradeable_registry_id

    @upgradeable_registry_id.setter
    def upgradeable_registry_id(self, upgradeable_registry_id):
        """Sets the upgradeable_registry_id of this RestDiagnosticSourceV4.


        :param upgradeable_registry_id: The upgradeable_registry_id of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._upgradeable_registry_id = upgradeable_registry_id

    @property
    def version(self):
        """Gets the version of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The version of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RestDiagnosticSourceV4.


        :param version: The version of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def script(self):
        """Gets the script of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The script of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: RestScriptV4
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this RestDiagnosticSourceV4.


        :param script: The script of this RestDiagnosticSourceV4.  # noqa: E501
        :type: RestScriptV4
        """

        self._script = script

    @property
    def tags(self):
        """Gets the tags of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The tags of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RestDiagnosticSourceV4.


        :param tags: The tags of this RestDiagnosticSourceV4.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def installed_local_id(self):
        """Gets the installed_local_id of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The installed_local_id of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._installed_local_id

    @installed_local_id.setter
    def installed_local_id(self, installed_local_id):
        """Sets the installed_local_id of this RestDiagnosticSourceV4.


        :param installed_local_id: The installed_local_id of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._installed_local_id = installed_local_id

    @property
    def target_lineage_id(self):
        """Gets the target_lineage_id of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The target_lineage_id of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._target_lineage_id

    @target_lineage_id.setter
    def target_lineage_id(self, target_lineage_id):
        """Sets the target_lineage_id of this RestDiagnosticSourceV4.


        :param target_lineage_id: The target_lineage_id of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._target_lineage_id = target_lineage_id

    @property
    def name(self):
        """Gets the name of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The name of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RestDiagnosticSourceV4.


        :param name: The name of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def author_company_uuid(self):
        """Gets the author_company_uuid of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The author_company_uuid of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._author_company_uuid

    @author_company_uuid.setter
    def author_company_uuid(self, author_company_uuid):
        """Sets the author_company_uuid of this RestDiagnosticSourceV4.


        :param author_company_uuid: The author_company_uuid of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._author_company_uuid = author_company_uuid

    @property
    def origin_status(self):
        """Gets the origin_status of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The origin_status of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._origin_status

    @origin_status.setter
    def origin_status(self, origin_status):
        """Sets the origin_status of this RestDiagnosticSourceV4.


        :param origin_status: The origin_status of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """
        allowed_values = ["CORE", "BETA", "DEPRECATED", "SECURITY_REVIEW", "LM_ENDORSED", "COMMUNITY"]  # noqa: E501
        if origin_status not in allowed_values:
            raise ValueError(
                "Invalid value for `origin_status` ({0}), must be one of {1}"  # noqa: E501
                .format(origin_status, allowed_values)
            )

        self._origin_status = origin_status

    @property
    def locator(self):
        """Gets the locator of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The locator of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._locator

    @locator.setter
    def locator(self, locator):
        """Sets the locator of this RestDiagnosticSourceV4.


        :param locator: The locator of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._locator = locator

    @property
    def status(self):
        """Gets the status of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The status of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RestDiagnosticSourceV4.


        :param status: The status of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """
        allowed_values = ["CORE", "BETA", "DEPRECATED", "SECURITY_REVIEW", "LM_ENDORSED", "COMMUNITY"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target_last_published_locator(self):
        """Gets the target_last_published_locator of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The target_last_published_locator of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._target_last_published_locator

    @target_last_published_locator.setter
    def target_last_published_locator(self, target_last_published_locator):
        """Sets the target_last_published_locator of this RestDiagnosticSourceV4.


        :param target_last_published_locator: The target_last_published_locator of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._target_last_published_locator = target_last_published_locator

    @property
    def commit_message(self):
        """Gets the commit_message of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The commit_message of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this RestDiagnosticSourceV4.


        :param commit_message: The commit_message of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._commit_message = commit_message

    @property
    def origin_published_at_ms(self):
        """Gets the origin_published_at_ms of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The origin_published_at_ms of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: int
        """
        return self._origin_published_at_ms

    @origin_published_at_ms.setter
    def origin_published_at_ms(self, origin_published_at_ms):
        """Sets the origin_published_at_ms of this RestDiagnosticSourceV4.


        :param origin_published_at_ms: The origin_published_at_ms of this RestDiagnosticSourceV4.  # noqa: E501
        :type: int
        """

        self._origin_published_at_ms = origin_published_at_ms

    @property
    def target_last_published_version(self):
        """Gets the target_last_published_version of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The target_last_published_version of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._target_last_published_version

    @target_last_published_version.setter
    def target_last_published_version(self, target_last_published_version):
        """Sets the target_last_published_version of this RestDiagnosticSourceV4.


        :param target_last_published_version: The target_last_published_version of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._target_last_published_version = target_last_published_version

    @property
    def exchange_access_groups_ids(self):
        """Gets the exchange_access_groups_ids of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The exchange_access_groups_ids of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: list[ModelAndId]
        """
        return self._exchange_access_groups_ids

    @exchange_access_groups_ids.setter
    def exchange_access_groups_ids(self, exchange_access_groups_ids):
        """Sets the exchange_access_groups_ids of this RestDiagnosticSourceV4.


        :param exchange_access_groups_ids: The exchange_access_groups_ids of this RestDiagnosticSourceV4.  # noqa: E501
        :type: list[ModelAndId]
        """

        self._exchange_access_groups_ids = exchange_access_groups_ids

    @property
    def description(self):
        """Gets the description of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The description of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RestDiagnosticSourceV4.


        :param description: The description of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def origin_registry_id_by_installed_local_id_map(self):
        """Gets the origin_registry_id_by_installed_local_id_map of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The origin_registry_id_by_installed_local_id_map of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._origin_registry_id_by_installed_local_id_map

    @origin_registry_id_by_installed_local_id_map.setter
    def origin_registry_id_by_installed_local_id_map(self, origin_registry_id_by_installed_local_id_map):
        """Sets the origin_registry_id_by_installed_local_id_map of this RestDiagnosticSourceV4.


        :param origin_registry_id_by_installed_local_id_map: The origin_registry_id_by_installed_local_id_map of this RestDiagnosticSourceV4.  # noqa: E501
        :type: dict(str, str)
        """

        self._origin_registry_id_by_installed_local_id_map = origin_registry_id_by_installed_local_id_map

    @property
    def is_private(self):
        """Gets the is_private of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The is_private of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this RestDiagnosticSourceV4.


        :param is_private: The is_private of this RestDiagnosticSourceV4.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def local_modules_ids(self):
        """Gets the local_modules_ids of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The local_modules_ids of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: list[ModelAndId]
        """
        return self._local_modules_ids

    @local_modules_ids.setter
    def local_modules_ids(self, local_modules_ids):
        """Sets the local_modules_ids of this RestDiagnosticSourceV4.


        :param local_modules_ids: The local_modules_ids of this RestDiagnosticSourceV4.  # noqa: E501
        :type: list[ModelAndId]
        """

        self._local_modules_ids = local_modules_ids

    @property
    def target_last_published_status(self):
        """Gets the target_last_published_status of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The target_last_published_status of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._target_last_published_status

    @target_last_published_status.setter
    def target_last_published_status(self, target_last_published_status):
        """Sets the target_last_published_status of this RestDiagnosticSourceV4.


        :param target_last_published_status: The target_last_published_status of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """
        allowed_values = ["CORE", "BETA", "DEPRECATED", "SECURITY_REVIEW", "LM_ENDORSED", "COMMUNITY"]  # noqa: E501
        if target_last_published_status not in allowed_values:
            raise ValueError(
                "Invalid value for `target_last_published_status` ({0}), must be one of {1}"  # noqa: E501
                .format(target_last_published_status, allowed_values)
            )

        self._target_last_published_status = target_last_published_status

    @property
    def is_changed_from_target_last_published(self):
        """Gets the is_changed_from_target_last_published of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The is_changed_from_target_last_published of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: bool
        """
        return self._is_changed_from_target_last_published

    @is_changed_from_target_last_published.setter
    def is_changed_from_target_last_published(self, is_changed_from_target_last_published):
        """Sets the is_changed_from_target_last_published of this RestDiagnosticSourceV4.


        :param is_changed_from_target_last_published: The is_changed_from_target_last_published of this RestDiagnosticSourceV4.  # noqa: E501
        :type: bool
        """

        self._is_changed_from_target_last_published = is_changed_from_target_last_published

    @property
    def exchange_changelogs_ids(self):
        """Gets the exchange_changelogs_ids of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The exchange_changelogs_ids of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: list[ModelAndId]
        """
        return self._exchange_changelogs_ids

    @exchange_changelogs_ids.setter
    def exchange_changelogs_ids(self, exchange_changelogs_ids):
        """Sets the exchange_changelogs_ids of this RestDiagnosticSourceV4.


        :param exchange_changelogs_ids: The exchange_changelogs_ids of this RestDiagnosticSourceV4.  # noqa: E501
        :type: list[ModelAndId]
        """

        self._exchange_changelogs_ids = exchange_changelogs_ids

    @property
    def is_latest(self):
        """Gets the is_latest of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The is_latest of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this RestDiagnosticSourceV4.


        :param is_latest: The is_latest of this RestDiagnosticSourceV4.  # noqa: E501
        :type: bool
        """

        self._is_latest = is_latest

    @property
    def installed_origin_registry_id(self):
        """Gets the installed_origin_registry_id of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The installed_origin_registry_id of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._installed_origin_registry_id

    @installed_origin_registry_id.setter
    def installed_origin_registry_id(self, installed_origin_registry_id):
        """Sets the installed_origin_registry_id of this RestDiagnosticSourceV4.


        :param installed_origin_registry_id: The installed_origin_registry_id of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._installed_origin_registry_id = installed_origin_registry_id

    @property
    def origin_registry_id(self):
        """Gets the origin_registry_id of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The origin_registry_id of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._origin_registry_id

    @origin_registry_id.setter
    def origin_registry_id(self, origin_registry_id):
        """Sets the origin_registry_id of this RestDiagnosticSourceV4.


        :param origin_registry_id: The origin_registry_id of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._origin_registry_id = origin_registry_id

    @property
    def replacement_lineage_id(self):
        """Gets the replacement_lineage_id of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The replacement_lineage_id of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._replacement_lineage_id

    @replacement_lineage_id.setter
    def replacement_lineage_id(self, replacement_lineage_id):
        """Sets the replacement_lineage_id of this RestDiagnosticSourceV4.


        :param replacement_lineage_id: The replacement_lineage_id of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._replacement_lineage_id = replacement_lineage_id

    @property
    def checksum(self):
        """Gets the checksum of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The checksum of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this RestDiagnosticSourceV4.


        :param checksum: The checksum of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def installation_statuses(self):
        """Gets the installation_statuses of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The installation_statuses of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: list[str]
        """
        return self._installation_statuses

    @installation_statuses.setter
    def installation_statuses(self, installation_statuses):
        """Sets the installation_statuses of this RestDiagnosticSourceV4.


        :param installation_statuses: The installation_statuses of this RestDiagnosticSourceV4.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NEW", "UPGRADED", "AUDITED", "OUTDATED", "INSTALLED", "CUSTOMIZED", "CONFLICT", "PARTIALLY_INSTALLED", "IS_INSTALLED", "IS_CUSTOMIZED", "CAN_INSTALL", "CAN_UPGRADE", "CAN_SKIP", "CAN_DOWNGRADE"]  # noqa: E501
        if not set(installation_statuses).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `installation_statuses` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(installation_statuses) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._installation_statuses = installation_statuses

    @property
    def associated_counts(self):
        """Gets the associated_counts of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The associated_counts of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: LogicModuleAssociationCounts
        """
        return self._associated_counts

    @associated_counts.setter
    def associated_counts(self, associated_counts):
        """Sets the associated_counts of this RestDiagnosticSourceV4.


        :param associated_counts: The associated_counts of this RestDiagnosticSourceV4.  # noqa: E501
        :type: LogicModuleAssociationCounts
        """

        self._associated_counts = associated_counts

    @property
    def created_at_ms(self):
        """Gets the created_at_ms of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The created_at_ms of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: int
        """
        return self._created_at_ms

    @created_at_ms.setter
    def created_at_ms(self, created_at_ms):
        """Sets the created_at_ms of this RestDiagnosticSourceV4.


        :param created_at_ms: The created_at_ms of this RestDiagnosticSourceV4.  # noqa: E501
        :type: int
        """

        self._created_at_ms = created_at_ms

    @property
    def origin_author_namespace(self):
        """Gets the origin_author_namespace of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The origin_author_namespace of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._origin_author_namespace

    @origin_author_namespace.setter
    def origin_author_namespace(self, origin_author_namespace):
        """Sets the origin_author_namespace of this RestDiagnosticSourceV4.


        :param origin_author_namespace: The origin_author_namespace of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._origin_author_namespace = origin_author_namespace

    @property
    def technical_notes(self):
        """Gets the technical_notes of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The technical_notes of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._technical_notes

    @technical_notes.setter
    def technical_notes(self, technical_notes):
        """Sets the technical_notes of this RestDiagnosticSourceV4.


        :param technical_notes: The technical_notes of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._technical_notes = technical_notes

    @property
    def origin_locator(self):
        """Gets the origin_locator of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The origin_locator of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._origin_locator

    @origin_locator.setter
    def origin_locator(self, origin_locator):
        """Sets the origin_locator of this RestDiagnosticSourceV4.


        :param origin_locator: The origin_locator of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._origin_locator = origin_locator

    @property
    def exchange_changelogs(self):
        """Gets the exchange_changelogs of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The exchange_changelogs of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: list[RestChangelogV4]
        """
        return self._exchange_changelogs

    @exchange_changelogs.setter
    def exchange_changelogs(self, exchange_changelogs):
        """Sets the exchange_changelogs of this RestDiagnosticSourceV4.


        :param exchange_changelogs: The exchange_changelogs of this RestDiagnosticSourceV4.  # noqa: E501
        :type: list[RestChangelogV4]
        """

        self._exchange_changelogs = exchange_changelogs

    @property
    def origin_lineage_id(self):
        """Gets the origin_lineage_id of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The origin_lineage_id of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._origin_lineage_id

    @origin_lineage_id.setter
    def origin_lineage_id(self, origin_lineage_id):
        """Sets the origin_lineage_id of this RestDiagnosticSourceV4.


        :param origin_lineage_id: The origin_lineage_id of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._origin_lineage_id = origin_lineage_id

    @property
    def is_latest_available(self):
        """Gets the is_latest_available of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The is_latest_available of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest_available

    @is_latest_available.setter
    def is_latest_available(self, is_latest_available):
        """Sets the is_latest_available of this RestDiagnosticSourceV4.


        :param is_latest_available: The is_latest_available of this RestDiagnosticSourceV4.  # noqa: E501
        :type: bool
        """

        self._is_latest_available = is_latest_available

    @property
    def updated_at_ms(self):
        """Gets the updated_at_ms of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The updated_at_ms of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: int
        """
        return self._updated_at_ms

    @updated_at_ms.setter
    def updated_at_ms(self, updated_at_ms):
        """Sets the updated_at_ms of this RestDiagnosticSourceV4.


        :param updated_at_ms: The updated_at_ms of this RestDiagnosticSourceV4.  # noqa: E501
        :type: int
        """

        self._updated_at_ms = updated_at_ms

    @property
    def author_portal_name(self):
        """Gets the author_portal_name of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The author_portal_name of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._author_portal_name

    @author_portal_name.setter
    def author_portal_name(self, author_portal_name):
        """Sets the author_portal_name of this RestDiagnosticSourceV4.


        :param author_portal_name: The author_portal_name of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._author_portal_name = author_portal_name

    @property
    def target_last_published_at_ms(self):
        """Gets the target_last_published_at_ms of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The target_last_published_at_ms of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: int
        """
        return self._target_last_published_at_ms

    @target_last_published_at_ms.setter
    def target_last_published_at_ms(self, target_last_published_at_ms):
        """Sets the target_last_published_at_ms of this RestDiagnosticSourceV4.


        :param target_last_published_at_ms: The target_last_published_at_ms of this RestDiagnosticSourceV4.  # noqa: E501
        :type: int
        """

        self._target_last_published_at_ms = target_last_published_at_ms

    @property
    def is_in_use(self):
        """Gets the is_in_use of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The is_in_use of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_use

    @is_in_use.setter
    def is_in_use(self, is_in_use):
        """Sets the is_in_use of this RestDiagnosticSourceV4.


        :param is_in_use: The is_in_use of this RestDiagnosticSourceV4.  # noqa: E501
        :type: bool
        """

        self._is_in_use = is_in_use

    @property
    def origin_name(self):
        """Gets the origin_name of this RestDiagnosticSourceV4.  # noqa: E501


        :return: The origin_name of this RestDiagnosticSourceV4.  # noqa: E501
        :rtype: str
        """
        return self._origin_name

    @origin_name.setter
    def origin_name(self, origin_name):
        """Sets the origin_name of this RestDiagnosticSourceV4.


        :param origin_name: The origin_name of this RestDiagnosticSourceV4.  # noqa: E501
        :type: str
        """

        self._origin_name = origin_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestDiagnosticSourceV4, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestDiagnosticSourceV4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
