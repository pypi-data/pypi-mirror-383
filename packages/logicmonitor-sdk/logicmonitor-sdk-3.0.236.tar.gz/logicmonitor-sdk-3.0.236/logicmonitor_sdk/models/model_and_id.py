# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelAndId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'name': 'str',
        'namespace': 'str',
        'model': 'str',
        'id': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'name': 'name',
        'namespace': 'namespace',
        'model': 'model',
        'id': 'id'
    }

    def __init__(self, display_name=None, name=None, namespace=None, model=None, id=None):  # noqa: E501
        """ModelAndId - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._name = None
        self._namespace = None
        self._model = None
        self._id = None
        self.discriminator = None
        if display_name is not None:
            self.display_name = display_name
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if model is not None:
            self.model = model
        if id is not None:
            self.id = id

    @property
    def display_name(self):
        """Gets the display_name of this ModelAndId.  # noqa: E501


        :return: The display_name of this ModelAndId.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ModelAndId.


        :param display_name: The display_name of this ModelAndId.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this ModelAndId.  # noqa: E501


        :return: The name of this ModelAndId.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelAndId.


        :param name: The name of this ModelAndId.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this ModelAndId.  # noqa: E501


        :return: The namespace of this ModelAndId.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ModelAndId.


        :param namespace: The namespace of this ModelAndId.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def model(self):
        """Gets the model of this ModelAndId.  # noqa: E501


        :return: The model of this ModelAndId.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ModelAndId.


        :param model: The model of this ModelAndId.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def id(self):
        """Gets the id of this ModelAndId.  # noqa: E501


        :return: The id of this ModelAndId.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelAndId.


        :param id: The id of this ModelAndId.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelAndId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelAndId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
