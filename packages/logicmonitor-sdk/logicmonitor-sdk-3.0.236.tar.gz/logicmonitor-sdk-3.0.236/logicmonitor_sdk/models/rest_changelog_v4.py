# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestChangelogV4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comments': 'str',
        'updated_at_ms': 'int',
        'model': 'str',
        'id': 'str',
        'address_ip': 'str',
        'username': 'str'
    }

    attribute_map = {
        'comments': 'comments',
        'updated_at_ms': 'updatedAtMS',
        'model': 'model',
        'id': 'id',
        'address_ip': 'addressIP',
        'username': 'username'
    }

    def __init__(self, comments=None, updated_at_ms=None, model=None, id=None, address_ip=None, username=None):  # noqa: E501
        """RestChangelogV4 - a model defined in Swagger"""  # noqa: E501
        self._comments = None
        self._updated_at_ms = None
        self._model = None
        self._id = None
        self._address_ip = None
        self._username = None
        self.discriminator = None
        if comments is not None:
            self.comments = comments
        if updated_at_ms is not None:
            self.updated_at_ms = updated_at_ms
        if model is not None:
            self.model = model
        if id is not None:
            self.id = id
        if address_ip is not None:
            self.address_ip = address_ip
        if username is not None:
            self.username = username

    @property
    def comments(self):
        """Gets the comments of this RestChangelogV4.  # noqa: E501


        :return: The comments of this RestChangelogV4.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this RestChangelogV4.


        :param comments: The comments of this RestChangelogV4.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def updated_at_ms(self):
        """Gets the updated_at_ms of this RestChangelogV4.  # noqa: E501


        :return: The updated_at_ms of this RestChangelogV4.  # noqa: E501
        :rtype: int
        """
        return self._updated_at_ms

    @updated_at_ms.setter
    def updated_at_ms(self, updated_at_ms):
        """Sets the updated_at_ms of this RestChangelogV4.


        :param updated_at_ms: The updated_at_ms of this RestChangelogV4.  # noqa: E501
        :type: int
        """

        self._updated_at_ms = updated_at_ms

    @property
    def model(self):
        """Gets the model of this RestChangelogV4.  # noqa: E501


        :return: The model of this RestChangelogV4.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this RestChangelogV4.


        :param model: The model of this RestChangelogV4.  # noqa: E501
        :type: str
        """
        allowed_values = ["accessLogs", "accessGroups", "adminNotifications", "aggregateSavings", "alerts", "visualizationAggregateEntry", "visualizationAggregateValue", "alertDependencyRules", "alertRoutings", "alertRules", "diagnosticRules", "alertTuningConfigAncestry", "alertTuningConfigs", "alertTuningConfigsHistory", "alertTuningConfigSlots", "alertTuningGraphs", "alertsTuningSeries", "asnMappings", "billingConfigurations", "cloudAccounts", "cloudResourceProperty", "clusterAlertRoutings", "clusterAlertTuningConfigs", "collectors", "collectorEvents", "collectorGroups", "collectorStatus", "collectorUpgradeHistory", "collectorUpgradeInfo", "configSources", "collectorLogs", "config", "configAlert", "correlationGraphs", "dashboards", "datapoints", "dataQueries", "dataSources", "dataSourceInstances", "dataSourceInstanceAlertSettings", "dataSourceInstanceGroups", "datasets", "dnsMappings", "escalationChains", "eventSources", "integrations", "integrationAuditLogs", "logSources", "exchangeAccessGroups", "exchangeActiveDiscoveryFilters", "exchangeAppliesToFunctions", "exchangeChangelogs", "exchangeConfigSources", "exchangeConfigSourceConfigChecks", "exchangeDataSources", "exchangeDataSourceDataPoints", "exchangeDataSourceDataPointDisplayStatusNames", "exchangeDataSourceGraphs", "exchangeDataSourceGraphSeries", "exchangeDataSourceGraphVirtualSeries", "exchangeDataSourceOverviewGraphs", "exchangeDataSourceOverviewGraphSeries", "exchangeDataSourceOverviewGraphVirtualSeries", "exchangeDiagnosticSources", "exchangeEventSources", "exchangeEventSourceFilters", "exchangeEventSourceLogFiles", "exchangeJobMonitors", "exchangeLogSources", "exchangeLogSourceFilters", "exchangeSnmpTrapLogSourceFilters", "exchangeLogSourceLogFields", "exchangeLogSourceResourceMappings", "exchangeLogSourceCollectorMappings", "exchangeLogicModules", "exchangeLogicModulePackages", "exchangeLogicModulePermissions", "exchangePackagedLogicModules", "exchangePropertySources", "exchangeSNMPSysOIDMaps", "exchangeTopologySources", "externalResourceIdentifiers", "failedDataSourceInfo", "filterFieldList", "graphs", "graphMeta", "healthMetrics", "hierarchy", "hostclusterAlertDefs", "hostDiagnosticSourceDetails", "diagnosticExecutionContext", "latestDiagnosticExecutionResultContext", "diagnosticExecutionSearchContext", "diagnosticSourceAssociatedDevices", "hostGroups", "internalAlertSettings", "jobMonitors", "jobMonitorExecutions", "lmSupportAccessHasConnection", "lmSupportAccessState", "lmotelCollectors", "lmotelCollectorVersions", "lmCollectorVersions", "logalerts", "logicModuleGroups", "logpipelinesources", "logpipelineprocessors", "matchedEvents", "metaGroupings", "metricsCorrelation", "monitoredResources", "netscanGroups", "netscans", "netflow", "netflowAlertRule", "allLevels", "nocWidgets", "normalizedProperties", "netscanPolicies", "netscanExecutions", "opsNotes", "opsNoteResourceScopes", "opsNoteServiceScopes", "opsNoteResourceGroupScopes", "opsNoteServiceGroupScopes", "opsNoteGroupAllScopes", "opsNoteTags", "orgTreeNodes", "portMappings", "productIds", "properties", "propertySources", "rawData", "recentlyDeletedItems", "recipientGroups", "cloudRecommendations", "cloudRecommendationAdditionalData", "recommendationTypes", "relationships", "reports", "reportHistories", "reportGroups", "resources", "resourceDashboards", "resourceDataSources", "resourceDatapoints", "resourceEventSources", "resourceConfigSources", "ConfigSourcesGoldStandard", "ConfigSourceConfiguration", "resourceDashboardTemplates", "resourceGroups", "resourceGroupDataSourceConfigs", "resourceGroupEventSourceConfigs", "resourceGroupInfoSourceConfigs", "resourceJobMonitors", "resourceLogPipelineResources", "resourceLogSources", "sdts", "services", "serviceCheckpoints", "serviceGroups", "sharedQueries", "siteMonitors", "slaWidgets", "spanCount", "securityRecommendations", "subscriptions", "topology", "topologyMaps", "topologyMapsHistogram", "topologyMapsGraphs", "subEntities", "subEntitiesDetails", "topologySavedMapsGroupType", "topologySavedMapsGroup", "topologyManualMapping", "topologyManualInterfaceList", "traffic", "treeNodes", "unmonitoredResources", "userdata", "users", "userSettings", "websiteCheckpoints", "websiteGroups", "websites", "ServicePreview", "BizServiceDatapoint", "ServiceTemplateView", "ServiceMemberPreview", "RestServiceTemplate", "ServiceTemplateServiceStats", "synthetics", "usage", "tracesDevicesNamesIds", "tracesGraphIds", "tracesServices", "tracesDeviceDatasources", "tracesDeviceDatasourceInstances", "tracesNamespaceGraphDetails", "tracesResourceNamesIds", "tracesTopologyEdgeData", "members", "apiTokens", "roleGroups", "roles", "userGroups", "sharingTokens", "syntheticsDSInstanceRawData", "syntheticsDSInstanceStepData", "syntheticsDSInstanceAlerts", "usageDimensions", "vizResourceInfo", "lmqlResult", "lmqlParsed", "partitions", "logPartitionChangelog", "cloudRecommendationStatus", "recommendationStatusUpdateRequest", "websiteDevice", "mibUpload", "logQueryGroups", "logQueryGroupChangelog", "logQuery", "trackingLogQueries"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"  # noqa: E501
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def id(self):
        """Gets the id of this RestChangelogV4.  # noqa: E501


        :return: The id of this RestChangelogV4.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RestChangelogV4.


        :param id: The id of this RestChangelogV4.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def address_ip(self):
        """Gets the address_ip of this RestChangelogV4.  # noqa: E501


        :return: The address_ip of this RestChangelogV4.  # noqa: E501
        :rtype: str
        """
        return self._address_ip

    @address_ip.setter
    def address_ip(self, address_ip):
        """Sets the address_ip of this RestChangelogV4.


        :param address_ip: The address_ip of this RestChangelogV4.  # noqa: E501
        :type: str
        """

        self._address_ip = address_ip

    @property
    def username(self):
        """Gets the username of this RestChangelogV4.  # noqa: E501


        :return: The username of this RestChangelogV4.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RestChangelogV4.


        :param username: The username of this RestChangelogV4.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestChangelogV4, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestChangelogV4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
