# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestScriptV4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'powershell_script': 'str',
        'linux_script_filename': 'str',
        'windows_upload_script_content': 'str',
        'linux_upload_script_content': 'str',
        'groovy_script': 'str',
        'windows_script_filename': 'str',
        'linux_arguments': 'str',
        'windows_arguments': 'str',
        'windows_upload_script_binary_content_checksum': 'str',
        'type': 'str',
        'linux_upload_script_binary_content_checksum': 'str'
    }

    attribute_map = {
        'powershell_script': 'powershellScript',
        'linux_script_filename': 'linuxScriptFilename',
        'windows_upload_script_content': 'windowsUploadScriptContent',
        'linux_upload_script_content': 'linuxUploadScriptContent',
        'groovy_script': 'groovyScript',
        'windows_script_filename': 'windowsScriptFilename',
        'linux_arguments': 'linuxArguments',
        'windows_arguments': 'windowsArguments',
        'windows_upload_script_binary_content_checksum': 'windowsUploadScriptBinaryContentChecksum',
        'type': 'type',
        'linux_upload_script_binary_content_checksum': 'linuxUploadScriptBinaryContentChecksum'
    }

    def __init__(self, powershell_script=None, linux_script_filename=None, windows_upload_script_content=None, linux_upload_script_content=None, groovy_script=None, windows_script_filename=None, linux_arguments=None, windows_arguments=None, windows_upload_script_binary_content_checksum=None, type=None, linux_upload_script_binary_content_checksum=None):  # noqa: E501
        """RestScriptV4 - a model defined in Swagger"""  # noqa: E501
        self._powershell_script = None
        self._linux_script_filename = None
        self._windows_upload_script_content = None
        self._linux_upload_script_content = None
        self._groovy_script = None
        self._windows_script_filename = None
        self._linux_arguments = None
        self._windows_arguments = None
        self._windows_upload_script_binary_content_checksum = None
        self._type = None
        self._linux_upload_script_binary_content_checksum = None
        self.discriminator = None
        if powershell_script is not None:
            self.powershell_script = powershell_script
        if linux_script_filename is not None:
            self.linux_script_filename = linux_script_filename
        if windows_upload_script_content is not None:
            self.windows_upload_script_content = windows_upload_script_content
        if linux_upload_script_content is not None:
            self.linux_upload_script_content = linux_upload_script_content
        if groovy_script is not None:
            self.groovy_script = groovy_script
        if windows_script_filename is not None:
            self.windows_script_filename = windows_script_filename
        if linux_arguments is not None:
            self.linux_arguments = linux_arguments
        if windows_arguments is not None:
            self.windows_arguments = windows_arguments
        if windows_upload_script_binary_content_checksum is not None:
            self.windows_upload_script_binary_content_checksum = windows_upload_script_binary_content_checksum
        if type is not None:
            self.type = type
        if linux_upload_script_binary_content_checksum is not None:
            self.linux_upload_script_binary_content_checksum = linux_upload_script_binary_content_checksum

    @property
    def powershell_script(self):
        """Gets the powershell_script of this RestScriptV4.  # noqa: E501


        :return: The powershell_script of this RestScriptV4.  # noqa: E501
        :rtype: str
        """
        return self._powershell_script

    @powershell_script.setter
    def powershell_script(self, powershell_script):
        """Sets the powershell_script of this RestScriptV4.


        :param powershell_script: The powershell_script of this RestScriptV4.  # noqa: E501
        :type: str
        """

        self._powershell_script = powershell_script

    @property
    def linux_script_filename(self):
        """Gets the linux_script_filename of this RestScriptV4.  # noqa: E501


        :return: The linux_script_filename of this RestScriptV4.  # noqa: E501
        :rtype: str
        """
        return self._linux_script_filename

    @linux_script_filename.setter
    def linux_script_filename(self, linux_script_filename):
        """Sets the linux_script_filename of this RestScriptV4.


        :param linux_script_filename: The linux_script_filename of this RestScriptV4.  # noqa: E501
        :type: str
        """

        self._linux_script_filename = linux_script_filename

    @property
    def windows_upload_script_content(self):
        """Gets the windows_upload_script_content of this RestScriptV4.  # noqa: E501


        :return: The windows_upload_script_content of this RestScriptV4.  # noqa: E501
        :rtype: str
        """
        return self._windows_upload_script_content

    @windows_upload_script_content.setter
    def windows_upload_script_content(self, windows_upload_script_content):
        """Sets the windows_upload_script_content of this RestScriptV4.


        :param windows_upload_script_content: The windows_upload_script_content of this RestScriptV4.  # noqa: E501
        :type: str
        """

        self._windows_upload_script_content = windows_upload_script_content

    @property
    def linux_upload_script_content(self):
        """Gets the linux_upload_script_content of this RestScriptV4.  # noqa: E501


        :return: The linux_upload_script_content of this RestScriptV4.  # noqa: E501
        :rtype: str
        """
        return self._linux_upload_script_content

    @linux_upload_script_content.setter
    def linux_upload_script_content(self, linux_upload_script_content):
        """Sets the linux_upload_script_content of this RestScriptV4.


        :param linux_upload_script_content: The linux_upload_script_content of this RestScriptV4.  # noqa: E501
        :type: str
        """

        self._linux_upload_script_content = linux_upload_script_content

    @property
    def groovy_script(self):
        """Gets the groovy_script of this RestScriptV4.  # noqa: E501


        :return: The groovy_script of this RestScriptV4.  # noqa: E501
        :rtype: str
        """
        return self._groovy_script

    @groovy_script.setter
    def groovy_script(self, groovy_script):
        """Sets the groovy_script of this RestScriptV4.


        :param groovy_script: The groovy_script of this RestScriptV4.  # noqa: E501
        :type: str
        """

        self._groovy_script = groovy_script

    @property
    def windows_script_filename(self):
        """Gets the windows_script_filename of this RestScriptV4.  # noqa: E501


        :return: The windows_script_filename of this RestScriptV4.  # noqa: E501
        :rtype: str
        """
        return self._windows_script_filename

    @windows_script_filename.setter
    def windows_script_filename(self, windows_script_filename):
        """Sets the windows_script_filename of this RestScriptV4.


        :param windows_script_filename: The windows_script_filename of this RestScriptV4.  # noqa: E501
        :type: str
        """

        self._windows_script_filename = windows_script_filename

    @property
    def linux_arguments(self):
        """Gets the linux_arguments of this RestScriptV4.  # noqa: E501


        :return: The linux_arguments of this RestScriptV4.  # noqa: E501
        :rtype: str
        """
        return self._linux_arguments

    @linux_arguments.setter
    def linux_arguments(self, linux_arguments):
        """Sets the linux_arguments of this RestScriptV4.


        :param linux_arguments: The linux_arguments of this RestScriptV4.  # noqa: E501
        :type: str
        """

        self._linux_arguments = linux_arguments

    @property
    def windows_arguments(self):
        """Gets the windows_arguments of this RestScriptV4.  # noqa: E501


        :return: The windows_arguments of this RestScriptV4.  # noqa: E501
        :rtype: str
        """
        return self._windows_arguments

    @windows_arguments.setter
    def windows_arguments(self, windows_arguments):
        """Sets the windows_arguments of this RestScriptV4.


        :param windows_arguments: The windows_arguments of this RestScriptV4.  # noqa: E501
        :type: str
        """

        self._windows_arguments = windows_arguments

    @property
    def windows_upload_script_binary_content_checksum(self):
        """Gets the windows_upload_script_binary_content_checksum of this RestScriptV4.  # noqa: E501


        :return: The windows_upload_script_binary_content_checksum of this RestScriptV4.  # noqa: E501
        :rtype: str
        """
        return self._windows_upload_script_binary_content_checksum

    @windows_upload_script_binary_content_checksum.setter
    def windows_upload_script_binary_content_checksum(self, windows_upload_script_binary_content_checksum):
        """Sets the windows_upload_script_binary_content_checksum of this RestScriptV4.


        :param windows_upload_script_binary_content_checksum: The windows_upload_script_binary_content_checksum of this RestScriptV4.  # noqa: E501
        :type: str
        """

        self._windows_upload_script_binary_content_checksum = windows_upload_script_binary_content_checksum

    @property
    def type(self):
        """Gets the type of this RestScriptV4.  # noqa: E501


        :return: The type of this RestScriptV4.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RestScriptV4.


        :param type: The type of this RestScriptV4.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "GROOVY", "POWERSHELL", "UPLOADED_FILE", "PROPERTY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def linux_upload_script_binary_content_checksum(self):
        """Gets the linux_upload_script_binary_content_checksum of this RestScriptV4.  # noqa: E501


        :return: The linux_upload_script_binary_content_checksum of this RestScriptV4.  # noqa: E501
        :rtype: str
        """
        return self._linux_upload_script_binary_content_checksum

    @linux_upload_script_binary_content_checksum.setter
    def linux_upload_script_binary_content_checksum(self, linux_upload_script_binary_content_checksum):
        """Sets the linux_upload_script_binary_content_checksum of this RestScriptV4.


        :param linux_upload_script_binary_content_checksum: The linux_upload_script_binary_content_checksum of this RestScriptV4.  # noqa: E501
        :type: str
        """

        self._linux_upload_script_binary_content_checksum = linux_upload_script_binary_content_checksum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestScriptV4, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestScriptV4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
