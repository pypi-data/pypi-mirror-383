# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiagnosticsSourceExecution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'execution_id': 'str',
        'diagnostic_id': 'int',
        'execution_status': 'str',
        'host_id': 'int',
        'alert_id': 'str',
        'trigger_type': 'str',
        'host_diagnostic_source_id': 'int'
    }

    attribute_map = {
        'execution_id': 'executionId',
        'diagnostic_id': 'diagnosticId',
        'execution_status': 'executionStatus',
        'host_id': 'hostId',
        'alert_id': 'alertId',
        'trigger_type': 'triggerType',
        'host_diagnostic_source_id': 'hostDiagnosticSourceId'
    }

    def __init__(self, execution_id=None, diagnostic_id=None, execution_status=None, host_id=None, alert_id=None, trigger_type=None, host_diagnostic_source_id=None):  # noqa: E501
        """DiagnosticsSourceExecution - a model defined in Swagger"""  # noqa: E501
        self._execution_id = None
        self._diagnostic_id = None
        self._execution_status = None
        self._host_id = None
        self._alert_id = None
        self._trigger_type = None
        self._host_diagnostic_source_id = None
        self.discriminator = None
        if execution_id is not None:
            self.execution_id = execution_id
        self.diagnostic_id = diagnostic_id
        self.execution_status = execution_status
        self.host_id = host_id
        self.alert_id = alert_id
        self.trigger_type = trigger_type
        self.host_diagnostic_source_id = host_diagnostic_source_id

    @property
    def execution_id(self):
        """Gets the execution_id of this DiagnosticsSourceExecution.  # noqa: E501

        execution Id   # noqa: E501

        :return: The execution_id of this DiagnosticsSourceExecution.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this DiagnosticsSourceExecution.

        execution Id   # noqa: E501

        :param execution_id: The execution_id of this DiagnosticsSourceExecution.  # noqa: E501
        :type: str
        """

        self._execution_id = execution_id

    @property
    def diagnostic_id(self):
        """Gets the diagnostic_id of this DiagnosticsSourceExecution.  # noqa: E501

        The diagnostic module id  # noqa: E501

        :return: The diagnostic_id of this DiagnosticsSourceExecution.  # noqa: E501
        :rtype: int
        """
        return self._diagnostic_id

    @diagnostic_id.setter
    def diagnostic_id(self, diagnostic_id):
        """Sets the diagnostic_id of this DiagnosticsSourceExecution.

        The diagnostic module id  # noqa: E501

        :param diagnostic_id: The diagnostic_id of this DiagnosticsSourceExecution.  # noqa: E501
        :type: int
        """
        if diagnostic_id is None:
            raise ValueError("Invalid value for `diagnostic_id`, must not be `None`")  # noqa: E501

        self._diagnostic_id = diagnostic_id

    @property
    def execution_status(self):
        """Gets the execution_status of this DiagnosticsSourceExecution.  # noqa: E501

        The diagnostic module id  # noqa: E501

        :return: The execution_status of this DiagnosticsSourceExecution.  # noqa: E501
        :rtype: str
        """
        return self._execution_status

    @execution_status.setter
    def execution_status(self, execution_status):
        """Sets the execution_status of this DiagnosticsSourceExecution.

        The diagnostic module id  # noqa: E501

        :param execution_status: The execution_status of this DiagnosticsSourceExecution.  # noqa: E501
        :type: str
        """
        if execution_status is None:
            raise ValueError("Invalid value for `execution_status`, must not be `None`")  # noqa: E501

        self._execution_status = execution_status

    @property
    def host_id(self):
        """Gets the host_id of this DiagnosticsSourceExecution.  # noqa: E501

        The host id  # noqa: E501

        :return: The host_id of this DiagnosticsSourceExecution.  # noqa: E501
        :rtype: int
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this DiagnosticsSourceExecution.

        The host id  # noqa: E501

        :param host_id: The host_id of this DiagnosticsSourceExecution.  # noqa: E501
        :type: int
        """
        if host_id is None:
            raise ValueError("Invalid value for `host_id`, must not be `None`")  # noqa: E501

        self._host_id = host_id

    @property
    def alert_id(self):
        """Gets the alert_id of this DiagnosticsSourceExecution.  # noqa: E501

        The alert id  # noqa: E501

        :return: The alert_id of this DiagnosticsSourceExecution.  # noqa: E501
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this DiagnosticsSourceExecution.

        The alert id  # noqa: E501

        :param alert_id: The alert_id of this DiagnosticsSourceExecution.  # noqa: E501
        :type: str
        """
        if alert_id is None:
            raise ValueError("Invalid value for `alert_id`, must not be `None`")  # noqa: E501

        self._alert_id = alert_id

    @property
    def trigger_type(self):
        """Gets the trigger_type of this DiagnosticsSourceExecution.  # noqa: E501

        type of trigger  # noqa: E501

        :return: The trigger_type of this DiagnosticsSourceExecution.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this DiagnosticsSourceExecution.

        type of trigger  # noqa: E501

        :param trigger_type: The trigger_type of this DiagnosticsSourceExecution.  # noqa: E501
        :type: str
        """
        if trigger_type is None:
            raise ValueError("Invalid value for `trigger_type`, must not be `None`")  # noqa: E501

        self._trigger_type = trigger_type

    @property
    def host_diagnostic_source_id(self):
        """Gets the host_diagnostic_source_id of this DiagnosticsSourceExecution.  # noqa: E501

        The diagnostic module id  # noqa: E501

        :return: The host_diagnostic_source_id of this DiagnosticsSourceExecution.  # noqa: E501
        :rtype: int
        """
        return self._host_diagnostic_source_id

    @host_diagnostic_source_id.setter
    def host_diagnostic_source_id(self, host_diagnostic_source_id):
        """Sets the host_diagnostic_source_id of this DiagnosticsSourceExecution.

        The diagnostic module id  # noqa: E501

        :param host_diagnostic_source_id: The host_diagnostic_source_id of this DiagnosticsSourceExecution.  # noqa: E501
        :type: int
        """
        if host_diagnostic_source_id is None:
            raise ValueError("Invalid value for `host_diagnostic_source_id`, must not be `None`")  # noqa: E501

        self._host_diagnostic_source_id = host_diagnostic_source_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiagnosticsSourceExecution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiagnosticsSourceExecution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
