# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestSDTV4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notes': 'str',
        'timezone': 'str',
        'default_value': 'datetime',
        'month_day': 'int',
        'type': 'str',
        'duration': 'int',
        'data_source_id': 'int',
        'hour': 'int',
        'week_day': 'str',
        'ended_at_ms': 'int',
        'resource_group_id': 'int',
        'model': 'str',
        'id': 'str',
        'end_minute': 'int',
        'identifier': 'ObjectIdentifier',
        'target_id': 'ModelAndId',
        'device_data_source_id': 'int',
        'week_of_month': 'str',
        'into_rest_response': 'RestResponse',
        'website_group_id': 'int',
        'is_effective': 'bool',
        'minute': 'int',
        'recurrence': 'str',
        'end_hour': 'int',
        'related_into_rest_response': 'RestResponse',
        'created_by': 'str',
        'started_at_ms': 'int'
    }

    attribute_map = {
        'notes': 'notes',
        'timezone': 'timezone',
        'default_value': 'defaultValue',
        'month_day': 'monthDay',
        'type': 'type',
        'duration': 'duration',
        'data_source_id': 'dataSourceId',
        'hour': 'hour',
        'week_day': 'weekDay',
        'ended_at_ms': 'endedAtMS',
        'resource_group_id': 'resourceGroupId',
        'model': 'model',
        'id': 'id',
        'end_minute': 'endMinute',
        'identifier': 'identifier',
        'target_id': 'targetId',
        'device_data_source_id': 'deviceDataSourceId',
        'week_of_month': 'weekOfMonth',
        'into_rest_response': 'intoRestResponse',
        'website_group_id': 'websiteGroupId',
        'is_effective': 'isEffective',
        'minute': 'minute',
        'recurrence': 'recurrence',
        'end_hour': 'endHour',
        'related_into_rest_response': 'relatedIntoRestResponse',
        'created_by': 'createdBy',
        'started_at_ms': 'startedAtMS'
    }

    discriminator_value_class_map = {
              }

    def __init__(self, notes=None, timezone=None, default_value=None, month_day=None, type=None, duration=None, data_source_id=None, hour=None, week_day=None, ended_at_ms=None, resource_group_id=None, model=None, id=None, end_minute=None, identifier=None, target_id=None, device_data_source_id=None, week_of_month=None, into_rest_response=None, website_group_id=None, is_effective=None, minute=None, recurrence=None, end_hour=None, related_into_rest_response=None, created_by=None, started_at_ms=None):  # noqa: E501
        """RestSDTV4 - a model defined in Swagger"""  # noqa: E501
        self._notes = None
        self._timezone = None
        self._default_value = None
        self._month_day = None
        self._type = None
        self._duration = None
        self._data_source_id = None
        self._hour = None
        self._week_day = None
        self._ended_at_ms = None
        self._resource_group_id = None
        self._model = None
        self._id = None
        self._end_minute = None
        self._identifier = None
        self._target_id = None
        self._device_data_source_id = None
        self._week_of_month = None
        self._into_rest_response = None
        self._website_group_id = None
        self._is_effective = None
        self._minute = None
        self._recurrence = None
        self._end_hour = None
        self._related_into_rest_response = None
        self._created_by = None
        self._started_at_ms = None
        self.discriminator = 'type'
        if notes is not None:
            self.notes = notes
        if timezone is not None:
            self.timezone = timezone
        if default_value is not None:
            self.default_value = default_value
        if month_day is not None:
            self.month_day = month_day
        self.type = type
        if duration is not None:
            self.duration = duration
        if data_source_id is not None:
            self.data_source_id = data_source_id
        if hour is not None:
            self.hour = hour
        if week_day is not None:
            self.week_day = week_day
        if ended_at_ms is not None:
            self.ended_at_ms = ended_at_ms
        if resource_group_id is not None:
            self.resource_group_id = resource_group_id
        if model is not None:
            self.model = model
        if id is not None:
            self.id = id
        if end_minute is not None:
            self.end_minute = end_minute
        if identifier is not None:
            self.identifier = identifier
        if target_id is not None:
            self.target_id = target_id
        if device_data_source_id is not None:
            self.device_data_source_id = device_data_source_id
        if week_of_month is not None:
            self.week_of_month = week_of_month
        if into_rest_response is not None:
            self.into_rest_response = into_rest_response
        self.website_group_id = website_group_id
        if is_effective is not None:
            self.is_effective = is_effective
        if minute is not None:
            self.minute = minute
        self.recurrence = recurrence
        if end_hour is not None:
            self.end_hour = end_hour
        if related_into_rest_response is not None:
            self.related_into_rest_response = related_into_rest_response
        if created_by is not None:
            self.created_by = created_by
        if started_at_ms is not None:
            self.started_at_ms = started_at_ms

    @property
    def notes(self):
        """Gets the notes of this RestSDTV4.  # noqa: E501

        Notes regarding the SDT  # noqa: E501

        :return: The notes of this RestSDTV4.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this RestSDTV4.

        Notes regarding the SDT  # noqa: E501

        :param notes: The notes of this RestSDTV4.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def timezone(self):
        """Gets the timezone of this RestSDTV4.  # noqa: E501

        The specific timezone for SDT  # noqa: E501

        :return: The timezone of this RestSDTV4.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this RestSDTV4.

        The specific timezone for SDT  # noqa: E501

        :param timezone: The timezone of this RestSDTV4.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def default_value(self):
        """Gets the default_value of this RestSDTV4.  # noqa: E501


        :return: The default_value of this RestSDTV4.  # noqa: E501
        :rtype: datetime
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this RestSDTV4.


        :param default_value: The default_value of this RestSDTV4.  # noqa: E501
        :type: datetime
        """

        self._default_value = default_value

    @property
    def month_day(self):
        """Gets the month_day of this RestSDTV4.  # noqa: E501

        The values can be 1 | 2....| 31. Specifies the day of the month that the SDT will be active for a monthly SDT  # noqa: E501

        :return: The month_day of this RestSDTV4.  # noqa: E501
        :rtype: int
        """
        return self._month_day

    @month_day.setter
    def month_day(self, month_day):
        """Sets the month_day of this RestSDTV4.

        The values can be 1 | 2....| 31. Specifies the day of the month that the SDT will be active for a monthly SDT  # noqa: E501

        :param month_day: The month_day of this RestSDTV4.  # noqa: E501
        :type: int
        """

        self._month_day = month_day

    @property
    def type(self):
        """Gets the type of this RestSDTV4.  # noqa: E501

        The type of resource that this SDT is for. The values can be CollectorSDT | DeviceDataSourceInstanceSDT | DeviceBatchJobSDT | DeviceClusterAlertDefSDT | DeviceDataSourceInstanceGroupSDT | DeviceDataSourceSDT | DeviceEventSourceSDT | ResourceGroupSDT | ResourceSDT | WebsiteCheckpointSDT | WebsiteGroupSDT | WebsiteSDT | DeviceLogPipeLineResourceSDT  # noqa: E501

        :return: The type of this RestSDTV4.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RestSDTV4.

        The type of resource that this SDT is for. The values can be CollectorSDT | DeviceDataSourceInstanceSDT | DeviceBatchJobSDT | DeviceClusterAlertDefSDT | DeviceDataSourceInstanceGroupSDT | DeviceDataSourceSDT | DeviceEventSourceSDT | ResourceGroupSDT | ResourceSDT | WebsiteCheckpointSDT | WebsiteGroupSDT | WebsiteSDT | DeviceLogPipeLineResourceSDT  # noqa: E501

        :param type: The type of this RestSDTV4.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def duration(self):
        """Gets the duration of this RestSDTV4.  # noqa: E501

        The duration of the SDT in minutes  # noqa: E501

        :return: The duration of this RestSDTV4.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this RestSDTV4.

        The duration of the SDT in minutes  # noqa: E501

        :param duration: The duration of this RestSDTV4.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def data_source_id(self):
        """Gets the data_source_id of this RestSDTV4.  # noqa: E501

        The id of the datasource instance that the SDT will be associated with  # noqa: E501

        :return: The data_source_id of this RestSDTV4.  # noqa: E501
        :rtype: int
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this RestSDTV4.

        The id of the datasource instance that the SDT will be associated with  # noqa: E501

        :param data_source_id: The data_source_id of this RestSDTV4.  # noqa: E501
        :type: int
        """

        self._data_source_id = data_source_id

    @property
    def hour(self):
        """Gets the hour of this RestSDTV4.  # noqa: E501

        The values can be 1 | 2....| 24. Specifies the hour that the SDT will start for a repeating SDT (daily, weekly, or monthly)  # noqa: E501

        :return: The hour of this RestSDTV4.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this RestSDTV4.

        The values can be 1 | 2....| 24. Specifies the hour that the SDT will start for a repeating SDT (daily, weekly, or monthly)  # noqa: E501

        :param hour: The hour of this RestSDTV4.  # noqa: E501
        :type: int
        """

        self._hour = hour

    @property
    def week_day(self):
        """Gets the week_day of this RestSDTV4.  # noqa: E501

        The week day of sdt. The values can be SUNDAY|MONDAY|TUESDAY|WEDNESDAY|THURSDAY|FRIDAY|SATURDAY  # noqa: E501

        :return: The week_day of this RestSDTV4.  # noqa: E501
        :rtype: str
        """
        return self._week_day

    @week_day.setter
    def week_day(self, week_day):
        """Sets the week_day of this RestSDTV4.

        The week day of sdt. The values can be SUNDAY|MONDAY|TUESDAY|WEDNESDAY|THURSDAY|FRIDAY|SATURDAY  # noqa: E501

        :param week_day: The week_day of this RestSDTV4.  # noqa: E501
        :type: str
        """

        self._week_day = week_day

    @property
    def ended_at_ms(self):
        """Gets the ended_at_ms of this RestSDTV4.  # noqa: E501

        The time milliseconds that the SDT will end or has ended.  # noqa: E501

        :return: The ended_at_ms of this RestSDTV4.  # noqa: E501
        :rtype: int
        """
        return self._ended_at_ms

    @ended_at_ms.setter
    def ended_at_ms(self, ended_at_ms):
        """Sets the ended_at_ms of this RestSDTV4.

        The time milliseconds that the SDT will end or has ended.  # noqa: E501

        :param ended_at_ms: The ended_at_ms of this RestSDTV4.  # noqa: E501
        :type: int
        """

        self._ended_at_ms = ended_at_ms

    @property
    def resource_group_id(self):
        """Gets the resource_group_id of this RestSDTV4.  # noqa: E501


        :return: The resource_group_id of this RestSDTV4.  # noqa: E501
        :rtype: int
        """
        return self._resource_group_id

    @resource_group_id.setter
    def resource_group_id(self, resource_group_id):
        """Sets the resource_group_id of this RestSDTV4.


        :param resource_group_id: The resource_group_id of this RestSDTV4.  # noqa: E501
        :type: int
        """

        self._resource_group_id = resource_group_id

    @property
    def model(self):
        """Gets the model of this RestSDTV4.  # noqa: E501


        :return: The model of this RestSDTV4.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this RestSDTV4.


        :param model: The model of this RestSDTV4.  # noqa: E501
        :type: str
        """
        allowed_values = ["accessLogs", "accessGroups", "adminNotifications", "aggregateSavings", "alerts", "visualizationAggregateEntry", "visualizationAggregateValue", "alertDependencyRules", "alertRoutings", "alertRules", "diagnosticRules", "alertTuningConfigAncestry", "alertTuningConfigs", "alertTuningConfigsHistory", "alertTuningConfigSlots", "alertTuningGraphs", "alertsTuningSeries", "asnMappings", "billingConfigurations", "cloudAccounts", "cloudResourceProperty", "clusterAlertRoutings", "clusterAlertTuningConfigs", "collectors", "collectorEvents", "collectorGroups", "collectorStatus", "collectorUpgradeHistory", "collectorUpgradeInfo", "configSources", "collectorLogs", "config", "configAlert", "correlationGraphs", "dashboards", "datapoints", "dataQueries", "dataSources", "dataSourceInstances", "dataSourceInstanceAlertSettings", "dataSourceInstanceGroups", "datasets", "dnsMappings", "escalationChains", "eventSources", "integrations", "integrationAuditLogs", "logSources", "exchangeAccessGroups", "exchangeActiveDiscoveryFilters", "exchangeAppliesToFunctions", "exchangeChangelogs", "exchangeConfigSources", "exchangeConfigSourceConfigChecks", "exchangeDataSources", "exchangeDataSourceDataPoints", "exchangeDataSourceDataPointDisplayStatusNames", "exchangeDataSourceGraphs", "exchangeDataSourceGraphSeries", "exchangeDataSourceGraphVirtualSeries", "exchangeDataSourceOverviewGraphs", "exchangeDataSourceOverviewGraphSeries", "exchangeDataSourceOverviewGraphVirtualSeries", "exchangeDiagnosticSources", "exchangeEventSources", "exchangeEventSourceFilters", "exchangeEventSourceLogFiles", "exchangeJobMonitors", "exchangeLogSources", "exchangeLogSourceFilters", "exchangeSnmpTrapLogSourceFilters", "exchangeLogSourceLogFields", "exchangeLogSourceResourceMappings", "exchangeLogSourceCollectorMappings", "exchangeLogicModules", "exchangeLogicModulePackages", "exchangeLogicModulePermissions", "exchangePackagedLogicModules", "exchangePropertySources", "exchangeSNMPSysOIDMaps", "exchangeTopologySources", "externalResourceIdentifiers", "failedDataSourceInfo", "filterFieldList", "graphs", "graphMeta", "healthMetrics", "hierarchy", "hostclusterAlertDefs", "hostDiagnosticSourceDetails", "diagnosticExecutionContext", "latestDiagnosticExecutionResultContext", "diagnosticExecutionSearchContext", "diagnosticSourceAssociatedDevices", "hostGroups", "internalAlertSettings", "jobMonitors", "jobMonitorExecutions", "lmSupportAccessHasConnection", "lmSupportAccessState", "lmotelCollectors", "lmotelCollectorVersions", "lmCollectorVersions", "logalerts", "logicModuleGroups", "logpipelinesources", "logpipelineprocessors", "matchedEvents", "metaGroupings", "metricsCorrelation", "monitoredResources", "netscanGroups", "netscans", "netflow", "netflowAlertRule", "allLevels", "nocWidgets", "normalizedProperties", "netscanPolicies", "netscanExecutions", "opsNotes", "opsNoteResourceScopes", "opsNoteServiceScopes", "opsNoteResourceGroupScopes", "opsNoteServiceGroupScopes", "opsNoteGroupAllScopes", "opsNoteTags", "orgTreeNodes", "portMappings", "productIds", "properties", "propertySources", "rawData", "recentlyDeletedItems", "recipientGroups", "cloudRecommendations", "cloudRecommendationAdditionalData", "recommendationTypes", "relationships", "reports", "reportHistories", "reportGroups", "resources", "resourceDashboards", "resourceDataSources", "resourceDatapoints", "resourceEventSources", "resourceConfigSources", "ConfigSourcesGoldStandard", "ConfigSourceConfiguration", "resourceDashboardTemplates", "resourceGroups", "resourceGroupDataSourceConfigs", "resourceGroupEventSourceConfigs", "resourceGroupInfoSourceConfigs", "resourceJobMonitors", "resourceLogPipelineResources", "resourceLogSources", "sdts", "services", "serviceCheckpoints", "serviceGroups", "sharedQueries", "siteMonitors", "slaWidgets", "spanCount", "securityRecommendations", "subscriptions", "topology", "topologyMaps", "topologyMapsHistogram", "topologyMapsGraphs", "subEntities", "subEntitiesDetails", "topologySavedMapsGroupType", "topologySavedMapsGroup", "topologyManualMapping", "topologyManualInterfaceList", "traffic", "treeNodes", "unmonitoredResources", "userdata", "users", "userSettings", "websiteCheckpoints", "websiteGroups", "websites", "ServicePreview", "BizServiceDatapoint", "ServiceTemplateView", "ServiceMemberPreview", "RestServiceTemplate", "ServiceTemplateServiceStats", "synthetics", "usage", "tracesDevicesNamesIds", "tracesGraphIds", "tracesServices", "tracesDeviceDatasources", "tracesDeviceDatasourceInstances", "tracesNamespaceGraphDetails", "tracesResourceNamesIds", "tracesTopologyEdgeData", "members", "apiTokens", "roleGroups", "roles", "userGroups", "sharingTokens", "syntheticsDSInstanceRawData", "syntheticsDSInstanceStepData", "syntheticsDSInstanceAlerts", "usageDimensions", "vizResourceInfo", "lmqlResult", "lmqlParsed", "partitions", "logPartitionChangelog", "cloudRecommendationStatus", "recommendationStatusUpdateRequest", "websiteDevice", "mibUpload", "logQueryGroups", "logQueryGroupChangelog", "logQuery", "trackingLogQueries"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"  # noqa: E501
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def id(self):
        """Gets the id of this RestSDTV4.  # noqa: E501

        The Id of the SDT. This value will be in the following format \"XX_##\" where XX will refer to the type of SDT and ## will refer to the number of SDTs of that type  # noqa: E501

        :return: The id of this RestSDTV4.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RestSDTV4.

        The Id of the SDT. This value will be in the following format \"XX_##\" where XX will refer to the type of SDT and ## will refer to the number of SDTs of that type  # noqa: E501

        :param id: The id of this RestSDTV4.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def end_minute(self):
        """Gets the end_minute of this RestSDTV4.  # noqa: E501

        The values can be 1 | 2....| 60. Specifies the minute of the hour that the SDT ends for a repeating SDT  # noqa: E501

        :return: The end_minute of this RestSDTV4.  # noqa: E501
        :rtype: int
        """
        return self._end_minute

    @end_minute.setter
    def end_minute(self, end_minute):
        """Sets the end_minute of this RestSDTV4.

        The values can be 1 | 2....| 60. Specifies the minute of the hour that the SDT ends for a repeating SDT  # noqa: E501

        :param end_minute: The end_minute of this RestSDTV4.  # noqa: E501
        :type: int
        """

        self._end_minute = end_minute

    @property
    def identifier(self):
        """Gets the identifier of this RestSDTV4.  # noqa: E501


        :return: The identifier of this RestSDTV4.  # noqa: E501
        :rtype: ObjectIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this RestSDTV4.


        :param identifier: The identifier of this RestSDTV4.  # noqa: E501
        :type: ObjectIdentifier
        """

        self._identifier = identifier

    @property
    def target_id(self):
        """Gets the target_id of this RestSDTV4.  # noqa: E501


        :return: The target_id of this RestSDTV4.  # noqa: E501
        :rtype: ModelAndId
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this RestSDTV4.


        :param target_id: The target_id of this RestSDTV4.  # noqa: E501
        :type: ModelAndId
        """

        self._target_id = target_id

    @property
    def device_data_source_id(self):
        """Gets the device_data_source_id of this RestSDTV4.  # noqa: E501

        The id of the device datasource instance group that the SDT will be associated with  # noqa: E501

        :return: The device_data_source_id of this RestSDTV4.  # noqa: E501
        :rtype: int
        """
        return self._device_data_source_id

    @device_data_source_id.setter
    def device_data_source_id(self, device_data_source_id):
        """Sets the device_data_source_id of this RestSDTV4.

        The id of the device datasource instance group that the SDT will be associated with  # noqa: E501

        :param device_data_source_id: The device_data_source_id of this RestSDTV4.  # noqa: E501
        :type: int
        """

        self._device_data_source_id = device_data_source_id

    @property
    def week_of_month(self):
        """Gets the week_of_month of this RestSDTV4.  # noqa: E501

        The week of the month that the SDT will be active for a monthly SDT  # noqa: E501

        :return: The week_of_month of this RestSDTV4.  # noqa: E501
        :rtype: str
        """
        return self._week_of_month

    @week_of_month.setter
    def week_of_month(self, week_of_month):
        """Sets the week_of_month of this RestSDTV4.

        The week of the month that the SDT will be active for a monthly SDT  # noqa: E501

        :param week_of_month: The week_of_month of this RestSDTV4.  # noqa: E501
        :type: str
        """

        self._week_of_month = week_of_month

    @property
    def into_rest_response(self):
        """Gets the into_rest_response of this RestSDTV4.  # noqa: E501


        :return: The into_rest_response of this RestSDTV4.  # noqa: E501
        :rtype: RestResponse
        """
        return self._into_rest_response

    @into_rest_response.setter
    def into_rest_response(self, into_rest_response):
        """Sets the into_rest_response of this RestSDTV4.


        :param into_rest_response: The into_rest_response of this RestSDTV4.  # noqa: E501
        :type: RestResponse
        """

        self._into_rest_response = into_rest_response

    @property
    def website_group_id(self):
        """Gets the website_group_id of this RestSDTV4.  # noqa: E501

        The Id of the service group that the SDT applies to  # noqa: E501

        :return: The website_group_id of this RestSDTV4.  # noqa: E501
        :rtype: int
        """
        return self._website_group_id

    @website_group_id.setter
    def website_group_id(self, website_group_id):
        """Sets the website_group_id of this RestSDTV4.

        The Id of the service group that the SDT applies to  # noqa: E501

        :param website_group_id: The website_group_id of this RestSDTV4.  # noqa: E501
        :type: int
        """
        if website_group_id is None:
            raise ValueError("Invalid value for `website_group_id`, must not be `None`")  # noqa: E501

        self._website_group_id = website_group_id

    @property
    def is_effective(self):
        """Gets the is_effective of this RestSDTV4.  # noqa: E501

        The values can be true|false, where true: the SDT is currently active false: the SDT is currently inactive  # noqa: E501

        :return: The is_effective of this RestSDTV4.  # noqa: E501
        :rtype: bool
        """
        return self._is_effective

    @is_effective.setter
    def is_effective(self, is_effective):
        """Sets the is_effective of this RestSDTV4.

        The values can be true|false, where true: the SDT is currently active false: the SDT is currently inactive  # noqa: E501

        :param is_effective: The is_effective of this RestSDTV4.  # noqa: E501
        :type: bool
        """

        self._is_effective = is_effective

    @property
    def minute(self):
        """Gets the minute of this RestSDTV4.  # noqa: E501

        The values can be 1 | 2....| 60. Specifies the minute of the hour that the SDT should begin for a repeating SDT  # noqa: E501

        :return: The minute of this RestSDTV4.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this RestSDTV4.

        The values can be 1 | 2....| 60. Specifies the minute of the hour that the SDT should begin for a repeating SDT  # noqa: E501

        :param minute: The minute of this RestSDTV4.  # noqa: E501
        :type: int
        """

        self._minute = minute

    @property
    def recurrence(self):
        """Gets the recurrence of this RestSDTV4.  # noqa: E501

        Describes how and when the SDT recures  # noqa: E501

        :return: The recurrence of this RestSDTV4.  # noqa: E501
        :rtype: str
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this RestSDTV4.

        Describes how and when the SDT recures  # noqa: E501

        :param recurrence: The recurrence of this RestSDTV4.  # noqa: E501
        :type: str
        """
        if recurrence is None:
            raise ValueError("Invalid value for `recurrence`, must not be `None`")  # noqa: E501

        self._recurrence = recurrence

    @property
    def end_hour(self):
        """Gets the end_hour of this RestSDTV4.  # noqa: E501

        The values can be 1 | 2....| 24. Specifies the hour that the SDT ends for a repeating SDT  # noqa: E501

        :return: The end_hour of this RestSDTV4.  # noqa: E501
        :rtype: int
        """
        return self._end_hour

    @end_hour.setter
    def end_hour(self, end_hour):
        """Sets the end_hour of this RestSDTV4.

        The values can be 1 | 2....| 24. Specifies the hour that the SDT ends for a repeating SDT  # noqa: E501

        :param end_hour: The end_hour of this RestSDTV4.  # noqa: E501
        :type: int
        """

        self._end_hour = end_hour

    @property
    def related_into_rest_response(self):
        """Gets the related_into_rest_response of this RestSDTV4.  # noqa: E501


        :return: The related_into_rest_response of this RestSDTV4.  # noqa: E501
        :rtype: RestResponse
        """
        return self._related_into_rest_response

    @related_into_rest_response.setter
    def related_into_rest_response(self, related_into_rest_response):
        """Sets the related_into_rest_response of this RestSDTV4.


        :param related_into_rest_response: The related_into_rest_response of this RestSDTV4.  # noqa: E501
        :type: RestResponse
        """

        self._related_into_rest_response = related_into_rest_response

    @property
    def created_by(self):
        """Gets the created_by of this RestSDTV4.  # noqa: E501

        SDT creator's username  # noqa: E501

        :return: The created_by of this RestSDTV4.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this RestSDTV4.

        SDT creator's username  # noqa: E501

        :param created_by: The created_by of this RestSDTV4.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def started_at_ms(self):
        """Gets the started_at_ms of this RestSDTV4.  # noqa: E501

        The time in milliseconds that the SDT will start or has started  # noqa: E501

        :return: The started_at_ms of this RestSDTV4.  # noqa: E501
        :rtype: int
        """
        return self._started_at_ms

    @started_at_ms.setter
    def started_at_ms(self, started_at_ms):
        """Sets the started_at_ms of this RestSDTV4.

        The time in milliseconds that the SDT will start or has started  # noqa: E501

        :param started_at_ms: The started_at_ms of this RestSDTV4.  # noqa: E501
        :type: int
        """

        self._started_at_ms = started_at_ms

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestSDTV4, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestSDTV4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
