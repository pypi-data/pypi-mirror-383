# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.advanced_metrics_graph_info import AdvancedMetricsGraphInfo  # noqa: F401,E501

class AdvanceMetricsBigNumberInfo(AdvancedMetricsGraphInfo):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'use_comma_separators': 'bool',
        'rounding': 'int',
        'position': 'int',
        'color_thresholds': 'list[ColorThreshold]',
        'right_label': 'str'
    }
    if hasattr(AdvancedMetricsGraphInfo, "swagger_types"):
        swagger_types.update(AdvancedMetricsGraphInfo.swagger_types)

    attribute_map = {
        'use_comma_separators': 'useCommaSeparators',
        'rounding': 'rounding',
        'position': 'position',
        'color_thresholds': 'colorThresholds',
        'right_label': 'rightLabel'
    }
    if hasattr(AdvancedMetricsGraphInfo, "attribute_map"):
        attribute_map.update(AdvancedMetricsGraphInfo.attribute_map)

    def __init__(self, use_comma_separators=None, rounding=None, position=None, color_thresholds=None, right_label=None, *args, **kwargs):  # noqa: E501
        """AdvanceMetricsBigNumberInfo - a model defined in Swagger"""  # noqa: E501
        self._use_comma_separators = None
        self._rounding = None
        self._position = None
        self._color_thresholds = None
        self._right_label = None
        self.discriminator = None
        self.use_comma_separators = use_comma_separators
        if rounding is not None:
            self.rounding = rounding
        if position is not None:
            self.position = position
        if color_thresholds is not None:
            self.color_thresholds = color_thresholds
        if right_label is not None:
            self.right_label = right_label
        AdvancedMetricsGraphInfo.__init__(self, *args, **kwargs)

    @property
    def use_comma_separators(self):
        """Gets the use_comma_separators of this AdvanceMetricsBigNumberInfo.  # noqa: E501


        :return: The use_comma_separators of this AdvanceMetricsBigNumberInfo.  # noqa: E501
        :rtype: bool
        """
        return self._use_comma_separators

    @use_comma_separators.setter
    def use_comma_separators(self, use_comma_separators):
        """Sets the use_comma_separators of this AdvanceMetricsBigNumberInfo.


        :param use_comma_separators: The use_comma_separators of this AdvanceMetricsBigNumberInfo.  # noqa: E501
        :type: bool
        """
        if use_comma_separators is None:
            raise ValueError("Invalid value for `use_comma_separators`, must not be `None`")  # noqa: E501

        self._use_comma_separators = use_comma_separators

    @property
    def rounding(self):
        """Gets the rounding of this AdvanceMetricsBigNumberInfo.  # noqa: E501


        :return: The rounding of this AdvanceMetricsBigNumberInfo.  # noqa: E501
        :rtype: int
        """
        return self._rounding

    @rounding.setter
    def rounding(self, rounding):
        """Sets the rounding of this AdvanceMetricsBigNumberInfo.


        :param rounding: The rounding of this AdvanceMetricsBigNumberInfo.  # noqa: E501
        :type: int
        """

        self._rounding = rounding

    @property
    def position(self):
        """Gets the position of this AdvanceMetricsBigNumberInfo.  # noqa: E501


        :return: The position of this AdvanceMetricsBigNumberInfo.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this AdvanceMetricsBigNumberInfo.


        :param position: The position of this AdvanceMetricsBigNumberInfo.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def color_thresholds(self):
        """Gets the color_thresholds of this AdvanceMetricsBigNumberInfo.  # noqa: E501


        :return: The color_thresholds of this AdvanceMetricsBigNumberInfo.  # noqa: E501
        :rtype: list[ColorThreshold]
        """
        return self._color_thresholds

    @color_thresholds.setter
    def color_thresholds(self, color_thresholds):
        """Sets the color_thresholds of this AdvanceMetricsBigNumberInfo.


        :param color_thresholds: The color_thresholds of this AdvanceMetricsBigNumberInfo.  # noqa: E501
        :type: list[ColorThreshold]
        """

        self._color_thresholds = color_thresholds

    @property
    def right_label(self):
        """Gets the right_label of this AdvanceMetricsBigNumberInfo.  # noqa: E501


        :return: The right_label of this AdvanceMetricsBigNumberInfo.  # noqa: E501
        :rtype: str
        """
        return self._right_label

    @right_label.setter
    def right_label(self, right_label):
        """Sets the right_label of this AdvanceMetricsBigNumberInfo.


        :param right_label: The right_label of this AdvanceMetricsBigNumberInfo.  # noqa: E501
        :type: str
        """

        self._right_label = right_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvanceMetricsBigNumberInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvanceMetricsBigNumberInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
