# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.advanced_metrics_graph_info import AdvancedMetricsGraphInfo  # noqa: F401,E501

class AdvanceMetricsGaugeInfo(AdvancedMetricsGraphInfo):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_value': 'float',
        'display_type': 'int',
        'max_value': 'float',
        'display_unit': 'str',
        'aggregate_function': 'str',
        'color_thresholds': 'list[ColorThreshold]'
    }
    if hasattr(AdvancedMetricsGraphInfo, "swagger_types"):
        swagger_types.update(AdvancedMetricsGraphInfo.swagger_types)

    attribute_map = {
        'min_value': 'minValue',
        'display_type': 'displayType',
        'max_value': 'maxValue',
        'display_unit': 'displayUnit',
        'aggregate_function': 'aggregateFunction',
        'color_thresholds': 'colorThresholds'
    }
    if hasattr(AdvancedMetricsGraphInfo, "attribute_map"):
        attribute_map.update(AdvancedMetricsGraphInfo.attribute_map)

    def __init__(self, min_value=None, display_type=None, max_value=None, display_unit=None, aggregate_function=None, color_thresholds=None, *args, **kwargs):  # noqa: E501
        """AdvanceMetricsGaugeInfo - a model defined in Swagger"""  # noqa: E501
        self._min_value = None
        self._display_type = None
        self._max_value = None
        self._display_unit = None
        self._aggregate_function = None
        self._color_thresholds = None
        self.discriminator = None
        if min_value is not None:
            self.min_value = min_value
        if display_type is not None:
            self.display_type = display_type
        if max_value is not None:
            self.max_value = max_value
        if display_unit is not None:
            self.display_unit = display_unit
        if aggregate_function is not None:
            self.aggregate_function = aggregate_function
        if color_thresholds is not None:
            self.color_thresholds = color_thresholds
        AdvancedMetricsGraphInfo.__init__(self, *args, **kwargs)

    @property
    def min_value(self):
        """Gets the min_value of this AdvanceMetricsGaugeInfo.  # noqa: E501


        :return: The min_value of this AdvanceMetricsGaugeInfo.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this AdvanceMetricsGaugeInfo.


        :param min_value: The min_value of this AdvanceMetricsGaugeInfo.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def display_type(self):
        """Gets the display_type of this AdvanceMetricsGaugeInfo.  # noqa: E501


        :return: The display_type of this AdvanceMetricsGaugeInfo.  # noqa: E501
        :rtype: int
        """
        return self._display_type

    @display_type.setter
    def display_type(self, display_type):
        """Sets the display_type of this AdvanceMetricsGaugeInfo.


        :param display_type: The display_type of this AdvanceMetricsGaugeInfo.  # noqa: E501
        :type: int
        """

        self._display_type = display_type

    @property
    def max_value(self):
        """Gets the max_value of this AdvanceMetricsGaugeInfo.  # noqa: E501


        :return: The max_value of this AdvanceMetricsGaugeInfo.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this AdvanceMetricsGaugeInfo.


        :param max_value: The max_value of this AdvanceMetricsGaugeInfo.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def display_unit(self):
        """Gets the display_unit of this AdvanceMetricsGaugeInfo.  # noqa: E501


        :return: The display_unit of this AdvanceMetricsGaugeInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_unit

    @display_unit.setter
    def display_unit(self, display_unit):
        """Sets the display_unit of this AdvanceMetricsGaugeInfo.


        :param display_unit: The display_unit of this AdvanceMetricsGaugeInfo.  # noqa: E501
        :type: str
        """

        self._display_unit = display_unit

    @property
    def aggregate_function(self):
        """Gets the aggregate_function of this AdvanceMetricsGaugeInfo.  # noqa: E501


        :return: The aggregate_function of this AdvanceMetricsGaugeInfo.  # noqa: E501
        :rtype: str
        """
        return self._aggregate_function

    @aggregate_function.setter
    def aggregate_function(self, aggregate_function):
        """Sets the aggregate_function of this AdvanceMetricsGaugeInfo.


        :param aggregate_function: The aggregate_function of this AdvanceMetricsGaugeInfo.  # noqa: E501
        :type: str
        """

        self._aggregate_function = aggregate_function

    @property
    def color_thresholds(self):
        """Gets the color_thresholds of this AdvanceMetricsGaugeInfo.  # noqa: E501


        :return: The color_thresholds of this AdvanceMetricsGaugeInfo.  # noqa: E501
        :rtype: list[ColorThreshold]
        """
        return self._color_thresholds

    @color_thresholds.setter
    def color_thresholds(self, color_thresholds):
        """Sets the color_thresholds of this AdvanceMetricsGaugeInfo.


        :param color_thresholds: The color_thresholds of this AdvanceMetricsGaugeInfo.  # noqa: E501
        :type: list[ColorThreshold]
        """

        self._color_thresholds = color_thresholds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvanceMetricsGaugeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvanceMetricsGaugeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
