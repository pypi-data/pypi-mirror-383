# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdvancedMetricsGraphInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query_time_selectors': 'list[dict(str, object)]',
        'legend': 'str',
        'query': 'str',
        'lm_query_type_preset': 'int',
        'visualization_type': 'str',
        'query_filters': 'list[dict(str, object)]',
        'visualization_details': 'JSONObject',
        'query_functions': 'list[dict(str, object)]'
    }

    attribute_map = {
        'query_time_selectors': 'queryTimeSelectors',
        'legend': 'legend',
        'query': 'query',
        'lm_query_type_preset': 'lmQueryTypePreset',
        'visualization_type': 'visualizationType',
        'query_filters': 'queryFilters',
        'visualization_details': 'visualizationDetails',
        'query_functions': 'queryFunctions'
    }

    discriminator_value_class_map = {
          'AdvanceMetricsPieChartInfo': 'AdvanceMetricsPieChartInfo',
'AdvanceMetricsCustomGraphInfo': 'AdvanceMetricsCustomGraphInfo',
'AdvanceMetricsBigNumberInfo': 'AdvanceMetricsBigNumberInfo',
'AdvanceMetricsGaugeInfo': 'AdvanceMetricsGaugeInfo',
'AdvanceMetricsBarGraphInfo': 'AdvanceMetricsBarGraphInfo'    }

    def __init__(self, query_time_selectors=None, legend=None, query=None, lm_query_type_preset=None, visualization_type=None, query_filters=None, visualization_details=None, query_functions=None):  # noqa: E501
        """AdvancedMetricsGraphInfo - a model defined in Swagger"""  # noqa: E501
        self._query_time_selectors = None
        self._legend = None
        self._query = None
        self._lm_query_type_preset = None
        self._visualization_type = None
        self._query_filters = None
        self._visualization_details = None
        self._query_functions = None
        self.discriminator = 'visualization_type'
        if query_time_selectors is not None:
            self.query_time_selectors = query_time_selectors
        if legend is not None:
            self.legend = legend
        if query is not None:
            self.query = query
        if lm_query_type_preset is not None:
            self.lm_query_type_preset = lm_query_type_preset
        if visualization_type is not None:
            self.visualization_type = visualization_type
        if query_filters is not None:
            self.query_filters = query_filters
        if visualization_details is not None:
            self.visualization_details = visualization_details
        if query_functions is not None:
            self.query_functions = query_functions

    @property
    def query_time_selectors(self):
        """Gets the query_time_selectors of this AdvancedMetricsGraphInfo.  # noqa: E501


        :return: The query_time_selectors of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._query_time_selectors

    @query_time_selectors.setter
    def query_time_selectors(self, query_time_selectors):
        """Sets the query_time_selectors of this AdvancedMetricsGraphInfo.


        :param query_time_selectors: The query_time_selectors of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._query_time_selectors = query_time_selectors

    @property
    def legend(self):
        """Gets the legend of this AdvancedMetricsGraphInfo.  # noqa: E501


        :return: The legend of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: str
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this AdvancedMetricsGraphInfo.


        :param legend: The legend of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: str
        """

        self._legend = legend

    @property
    def query(self):
        """Gets the query of this AdvancedMetricsGraphInfo.  # noqa: E501

        The query used for saving logs and related queries.  # noqa: E501

        :return: The query of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this AdvancedMetricsGraphInfo.

        The query used for saving logs and related queries.  # noqa: E501

        :param query: The query of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def lm_query_type_preset(self):
        """Gets the lm_query_type_preset of this AdvancedMetricsGraphInfo.  # noqa: E501


        :return: The lm_query_type_preset of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: int
        """
        return self._lm_query_type_preset

    @lm_query_type_preset.setter
    def lm_query_type_preset(self, lm_query_type_preset):
        """Sets the lm_query_type_preset of this AdvancedMetricsGraphInfo.


        :param lm_query_type_preset: The lm_query_type_preset of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: int
        """

        self._lm_query_type_preset = lm_query_type_preset

    @property
    def visualization_type(self):
        """Gets the visualization_type of this AdvancedMetricsGraphInfo.  # noqa: E501


        :return: The visualization_type of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: str
        """
        return self._visualization_type

    @visualization_type.setter
    def visualization_type(self, visualization_type):
        """Sets the visualization_type of this AdvancedMetricsGraphInfo.


        :param visualization_type: The visualization_type of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["bigNumber", "gauge", "pie", "donut", "line", "area", "stack", "column", "bar"]  # noqa: E501
        if visualization_type not in allowed_values:
            raise ValueError(
                "Invalid value for `visualization_type` ({0}), must be one of {1}"  # noqa: E501
                .format(visualization_type, allowed_values)
            )

        self._visualization_type = visualization_type

    @property
    def query_filters(self):
        """Gets the query_filters of this AdvancedMetricsGraphInfo.  # noqa: E501


        :return: The query_filters of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._query_filters

    @query_filters.setter
    def query_filters(self, query_filters):
        """Sets the query_filters of this AdvancedMetricsGraphInfo.


        :param query_filters: The query_filters of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._query_filters = query_filters

    @property
    def visualization_details(self):
        """Gets the visualization_details of this AdvancedMetricsGraphInfo.  # noqa: E501


        :return: The visualization_details of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: JSONObject
        """
        return self._visualization_details

    @visualization_details.setter
    def visualization_details(self, visualization_details):
        """Sets the visualization_details of this AdvancedMetricsGraphInfo.


        :param visualization_details: The visualization_details of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: JSONObject
        """

        self._visualization_details = visualization_details

    @property
    def query_functions(self):
        """Gets the query_functions of this AdvancedMetricsGraphInfo.  # noqa: E501


        :return: The query_functions of this AdvancedMetricsGraphInfo.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._query_functions

    @query_functions.setter
    def query_functions(self, query_functions):
        """Sets the query_functions of this AdvancedMetricsGraphInfo.


        :param query_functions: The query_functions of this AdvancedMetricsGraphInfo.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._query_functions = query_functions

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvancedMetricsGraphInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedMetricsGraphInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
