# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertsById(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_groups': 'dict(str, AlertsModelAndId)',
        'event_sources': 'dict(str, AlertsModelAndId)',
        'cluster_alert_settings': 'dict(str, AlertsModelAndId)',
        'datapoints': 'dict(str, AlertsModelAndId)',
        'escalation_chains': 'dict(str, AlertsModelAndId)',
        'sdts': 'dict(str, RestSDTV4)',
        'alert_rules': 'dict(str, AlertsModelAndId)',
        'service_groups': 'dict(str, AlertsModelAndId)',
        'resources': 'dict(str, AlertsModelAndId)',
        'logpipelinesources': 'dict(str, AlertsModelAndId)',
        'services': 'dict(str, AlertsModelAndId)',
        'data_source_instances': 'dict(str, AlertsModelAndId)',
        'alerts': 'dict(str, Alert)',
        'logalerts': 'dict(str, AlertsModelAndId)',
        'batch_jobs': 'dict(str, AlertsModelAndId)',
        'data_source_instance_alert_settings': 'dict(str, AlertsModelAndId)',
        'service_checkpoints': 'dict(str, AlertsModelAndId)',
        'log_alerts_map': 'dict(str, AlertsModelAndId)',
        'data_sources': 'dict(str, AlertsModelAndId)'
    }

    attribute_map = {
        'resource_groups': 'resourceGroups',
        'event_sources': 'eventSources',
        'cluster_alert_settings': 'clusterAlertSettings',
        'datapoints': 'datapoints',
        'escalation_chains': 'escalationChains',
        'sdts': 'sdts',
        'alert_rules': 'alertRules',
        'service_groups': 'serviceGroups',
        'resources': 'resources',
        'logpipelinesources': 'logpipelinesources',
        'services': 'services',
        'data_source_instances': 'dataSourceInstances',
        'alerts': 'alerts',
        'logalerts': 'logalerts',
        'batch_jobs': 'batchJobs',
        'data_source_instance_alert_settings': 'dataSourceInstanceAlertSettings',
        'service_checkpoints': 'serviceCheckpoints',
        'log_alerts_map': 'logAlertsMap',
        'data_sources': 'dataSources'
    }

    def __init__(self, resource_groups=None, event_sources=None, cluster_alert_settings=None, datapoints=None, escalation_chains=None, sdts=None, alert_rules=None, service_groups=None, resources=None, logpipelinesources=None, services=None, data_source_instances=None, alerts=None, logalerts=None, batch_jobs=None, data_source_instance_alert_settings=None, service_checkpoints=None, log_alerts_map=None, data_sources=None):  # noqa: E501
        """AlertsById - a model defined in Swagger"""  # noqa: E501
        self._resource_groups = None
        self._event_sources = None
        self._cluster_alert_settings = None
        self._datapoints = None
        self._escalation_chains = None
        self._sdts = None
        self._alert_rules = None
        self._service_groups = None
        self._resources = None
        self._logpipelinesources = None
        self._services = None
        self._data_source_instances = None
        self._alerts = None
        self._logalerts = None
        self._batch_jobs = None
        self._data_source_instance_alert_settings = None
        self._service_checkpoints = None
        self._log_alerts_map = None
        self._data_sources = None
        self.discriminator = None
        if resource_groups is not None:
            self.resource_groups = resource_groups
        if event_sources is not None:
            self.event_sources = event_sources
        if cluster_alert_settings is not None:
            self.cluster_alert_settings = cluster_alert_settings
        if datapoints is not None:
            self.datapoints = datapoints
        if escalation_chains is not None:
            self.escalation_chains = escalation_chains
        if sdts is not None:
            self.sdts = sdts
        if alert_rules is not None:
            self.alert_rules = alert_rules
        if service_groups is not None:
            self.service_groups = service_groups
        if resources is not None:
            self.resources = resources
        if logpipelinesources is not None:
            self.logpipelinesources = logpipelinesources
        if services is not None:
            self.services = services
        if data_source_instances is not None:
            self.data_source_instances = data_source_instances
        if alerts is not None:
            self.alerts = alerts
        if logalerts is not None:
            self.logalerts = logalerts
        if batch_jobs is not None:
            self.batch_jobs = batch_jobs
        if data_source_instance_alert_settings is not None:
            self.data_source_instance_alert_settings = data_source_instance_alert_settings
        if service_checkpoints is not None:
            self.service_checkpoints = service_checkpoints
        if log_alerts_map is not None:
            self.log_alerts_map = log_alerts_map
        if data_sources is not None:
            self.data_sources = data_sources

    @property
    def resource_groups(self):
        """Gets the resource_groups of this AlertsById.  # noqa: E501


        :return: The resource_groups of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._resource_groups

    @resource_groups.setter
    def resource_groups(self, resource_groups):
        """Sets the resource_groups of this AlertsById.


        :param resource_groups: The resource_groups of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._resource_groups = resource_groups

    @property
    def event_sources(self):
        """Gets the event_sources of this AlertsById.  # noqa: E501


        :return: The event_sources of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._event_sources

    @event_sources.setter
    def event_sources(self, event_sources):
        """Sets the event_sources of this AlertsById.


        :param event_sources: The event_sources of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._event_sources = event_sources

    @property
    def cluster_alert_settings(self):
        """Gets the cluster_alert_settings of this AlertsById.  # noqa: E501


        :return: The cluster_alert_settings of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._cluster_alert_settings

    @cluster_alert_settings.setter
    def cluster_alert_settings(self, cluster_alert_settings):
        """Sets the cluster_alert_settings of this AlertsById.


        :param cluster_alert_settings: The cluster_alert_settings of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._cluster_alert_settings = cluster_alert_settings

    @property
    def datapoints(self):
        """Gets the datapoints of this AlertsById.  # noqa: E501


        :return: The datapoints of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._datapoints

    @datapoints.setter
    def datapoints(self, datapoints):
        """Sets the datapoints of this AlertsById.


        :param datapoints: The datapoints of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._datapoints = datapoints

    @property
    def escalation_chains(self):
        """Gets the escalation_chains of this AlertsById.  # noqa: E501


        :return: The escalation_chains of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._escalation_chains

    @escalation_chains.setter
    def escalation_chains(self, escalation_chains):
        """Sets the escalation_chains of this AlertsById.


        :param escalation_chains: The escalation_chains of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._escalation_chains = escalation_chains

    @property
    def sdts(self):
        """Gets the sdts of this AlertsById.  # noqa: E501


        :return: The sdts of this AlertsById.  # noqa: E501
        :rtype: dict(str, RestSDTV4)
        """
        return self._sdts

    @sdts.setter
    def sdts(self, sdts):
        """Sets the sdts of this AlertsById.


        :param sdts: The sdts of this AlertsById.  # noqa: E501
        :type: dict(str, RestSDTV4)
        """

        self._sdts = sdts

    @property
    def alert_rules(self):
        """Gets the alert_rules of this AlertsById.  # noqa: E501


        :return: The alert_rules of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._alert_rules

    @alert_rules.setter
    def alert_rules(self, alert_rules):
        """Sets the alert_rules of this AlertsById.


        :param alert_rules: The alert_rules of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._alert_rules = alert_rules

    @property
    def service_groups(self):
        """Gets the service_groups of this AlertsById.  # noqa: E501


        :return: The service_groups of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._service_groups

    @service_groups.setter
    def service_groups(self, service_groups):
        """Sets the service_groups of this AlertsById.


        :param service_groups: The service_groups of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._service_groups = service_groups

    @property
    def resources(self):
        """Gets the resources of this AlertsById.  # noqa: E501


        :return: The resources of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this AlertsById.


        :param resources: The resources of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._resources = resources

    @property
    def logpipelinesources(self):
        """Gets the logpipelinesources of this AlertsById.  # noqa: E501


        :return: The logpipelinesources of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._logpipelinesources

    @logpipelinesources.setter
    def logpipelinesources(self, logpipelinesources):
        """Sets the logpipelinesources of this AlertsById.


        :param logpipelinesources: The logpipelinesources of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._logpipelinesources = logpipelinesources

    @property
    def services(self):
        """Gets the services of this AlertsById.  # noqa: E501


        :return: The services of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this AlertsById.


        :param services: The services of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._services = services

    @property
    def data_source_instances(self):
        """Gets the data_source_instances of this AlertsById.  # noqa: E501


        :return: The data_source_instances of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._data_source_instances

    @data_source_instances.setter
    def data_source_instances(self, data_source_instances):
        """Sets the data_source_instances of this AlertsById.


        :param data_source_instances: The data_source_instances of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._data_source_instances = data_source_instances

    @property
    def alerts(self):
        """Gets the alerts of this AlertsById.  # noqa: E501


        :return: The alerts of this AlertsById.  # noqa: E501
        :rtype: dict(str, Alert)
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this AlertsById.


        :param alerts: The alerts of this AlertsById.  # noqa: E501
        :type: dict(str, Alert)
        """

        self._alerts = alerts

    @property
    def logalerts(self):
        """Gets the logalerts of this AlertsById.  # noqa: E501


        :return: The logalerts of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._logalerts

    @logalerts.setter
    def logalerts(self, logalerts):
        """Sets the logalerts of this AlertsById.


        :param logalerts: The logalerts of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._logalerts = logalerts

    @property
    def batch_jobs(self):
        """Gets the batch_jobs of this AlertsById.  # noqa: E501


        :return: The batch_jobs of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._batch_jobs

    @batch_jobs.setter
    def batch_jobs(self, batch_jobs):
        """Sets the batch_jobs of this AlertsById.


        :param batch_jobs: The batch_jobs of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._batch_jobs = batch_jobs

    @property
    def data_source_instance_alert_settings(self):
        """Gets the data_source_instance_alert_settings of this AlertsById.  # noqa: E501


        :return: The data_source_instance_alert_settings of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._data_source_instance_alert_settings

    @data_source_instance_alert_settings.setter
    def data_source_instance_alert_settings(self, data_source_instance_alert_settings):
        """Sets the data_source_instance_alert_settings of this AlertsById.


        :param data_source_instance_alert_settings: The data_source_instance_alert_settings of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._data_source_instance_alert_settings = data_source_instance_alert_settings

    @property
    def service_checkpoints(self):
        """Gets the service_checkpoints of this AlertsById.  # noqa: E501


        :return: The service_checkpoints of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._service_checkpoints

    @service_checkpoints.setter
    def service_checkpoints(self, service_checkpoints):
        """Sets the service_checkpoints of this AlertsById.


        :param service_checkpoints: The service_checkpoints of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._service_checkpoints = service_checkpoints

    @property
    def log_alerts_map(self):
        """Gets the log_alerts_map of this AlertsById.  # noqa: E501


        :return: The log_alerts_map of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._log_alerts_map

    @log_alerts_map.setter
    def log_alerts_map(self, log_alerts_map):
        """Sets the log_alerts_map of this AlertsById.


        :param log_alerts_map: The log_alerts_map of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._log_alerts_map = log_alerts_map

    @property
    def data_sources(self):
        """Gets the data_sources of this AlertsById.  # noqa: E501


        :return: The data_sources of this AlertsById.  # noqa: E501
        :rtype: dict(str, AlertsModelAndId)
        """
        return self._data_sources

    @data_sources.setter
    def data_sources(self, data_sources):
        """Sets the data_sources of this AlertsById.


        :param data_sources: The data_sources of this AlertsById.  # noqa: E501
        :type: dict(str, AlertsModelAndId)
        """

        self._data_sources = data_sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertsById, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertsById):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
