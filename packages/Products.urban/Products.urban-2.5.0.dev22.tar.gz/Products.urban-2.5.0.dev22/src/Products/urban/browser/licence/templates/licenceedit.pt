<metal:editLicenceMacro define-macro="editLicenceMacro" i18n:domain="urban"
                        tal:define="useTabbing python: context.getUrbanConfig().getUseTabbingForEdit();
                                    default_name python: 'licenceedit';
                                    view_name view_name|default_name;
                                    view python: context.restrictedTraverse(view_name);">
    <div tal:condition="not: useTabbing">
        <tal:edit_macro define="edit_macro view/getEditFieldsWithoutTabbingMacro">
            <metal:listing use-macro="edit_macro" />
        </tal:edit_macro>
    </div>

    <tal:with_tabbing condition="useTabbing">
        <tal:edit_macro define="edit_macro view/getEditFieldsWithTabbingMacro">
            <metal:listing use-macro="edit_macro" />
        </tal:edit_macro>
    </tal:with_tabbing>
</metal:editLicenceMacro>


<metal:editLicenceFieldsWithTabbingMacro
       define-macro="editLicenceFieldsWithTabbingMacro"
       i18n:domain="urban"
       tal:define="putils context/plone_utils;
                   tabs_config view/getTabs">

    <tal:fieldsets repeat="tab tabs_config">
        <tal:tab define="fieldset python: tab['id'];
                         display_name python: tab['display_name']">
            <fieldset class="urbanEditWithTabbing"
                      tal:define="fieldsetid python:putils.normalizeString(fieldset)"
                      tal:attributes="id string:fieldset-${fieldsetid}">
                <legend id="#"
                        tal:content="display_name"
                        tal:attributes="id string:fieldsetlegend-${fieldsetid}"
                        i18n:translate="" />
                <tal:edit_macro define="edit_macro view/getEditFieldsMacro">
                    <metal:listing use-macro="edit_macro" />
                </tal:edit_macro>
            </fieldset>
        </tal:tab>
    </tal:fieldsets>

</metal:editLicenceFieldsWithTabbingMacro>


<div metal:define-macro="editLicenceFieldsMacro" i18n:domain="urban">
    <tal:fields repeat="field python:schematas[fieldset].editableFields(here, visible_only=False)">
        <tal:block define="fieldName field/getName">

            <tal:comment replace="nothing">Display a fieldset around the 'isInPca' and 'Pca' fields</tal:comment>
            <tal:pca condition="python: fieldName in ['isInPCA', 'pca', 'pcaDetails', 'pcaZone']">
                <tal:comment replace="nothing">We do the entire job manually when the field is 'isInPca' and there is
                                                nothing left to do when it is the 'Pca' field</tal:comment>
                <tal:manage_pca condition="python: fieldName == 'isInPCA'">
                    <fieldset class="urban-fieldset-masterbooleanwidget" style="border-style: solid !important;">
                        <legend i18n:translate="" tal:content="python: context.getField('pca').widget.label">PCA</legend>
                        <metal:fieldMacro use-macro="python:here.widget('isInPCA', mode='edit')" />
                        <metal:fieldMacro use-macro="python:here.widget('pca', mode='edit')" />
                        <metal:fieldMacro use-macro="python:here.widget('pcaDetails', mode='edit')" />
                        <metal:fieldMacro use-macro="python:here.widget('pcaZone', mode='edit')" />
                    </fieldset>
                </tal:manage_pca>
            </tal:pca>

            <tal:comment replace="nothing">Display a fieldset around the 'isInSubdivision' and 'subdivisionDetails' fields</tal:comment>
            <tal:subdivision condition="python: fieldName in ['isInSubdivision', 'parcellings', 'subdivisionDetails',]">
                <tal:comment replace="nothing">We do the entire job manually when the field is 'isInSubdivision' and there
                                        is nothing left to do when it is the 'subdivisionDetails' field</tal:comment>
                <tal:manage_subdivision condition="python: fieldName == 'isInSubdivision'">
                    <fieldset class="urban-fieldset-masterbooleanwidget" style="border-style: solid !important;">
                        <legend i18n:translate="" tal:content="python: context.getField('parcellings').widget.label">Subdivision</legend>
                        <metal:fieldMacro use-macro="python:here.widget('isInSubdivision', mode='edit')" />
                        <metal:fieldMacro use-macro="python:here.widget('parcellings', mode='edit')" />
                        <metal:fieldMacro use-macro="python:here.widget('subdivisionDetails', mode='edit')" />
                    </fieldset>
                </tal:manage_subdivision>
            </tal:subdivision>

            <tal:other condition="not: python: fieldName in [
                                     'isInPCA', 'pca', 'pcaDetails', 'isInSubdivision', 'previousLicences',
                                     'parcellings', 'subdivisionDetails', 'minimumLegalConditions', 'pcaZone'
                                  ]">
                <metal:widget define-slot="widget">
                    <metal:fieldMacro use-macro="python:here.widget(field.getName(), mode='edit')" />
                </metal:widget>
            </tal:other>
        </tal:block>
    </tal:fields>
</div>


<div metal:define-macro="editLicenceFieldsNoTabbingMacro"
     tal:define="putils context/plone_utils;
                 tabs_config view/getTabs">
    <tal:fieldsets repeat="tab_config tabs_config">
        <tal:tab define="fieldset python: tab_config['id'];
                         display_name python: tab_config['display_name']">
            <fieldset tal:define="fieldsetid python:putils.normalizeString(fieldset)">
                <legend tal:content="display_name"
                        tal:attributes="id string:fieldsetlegend-${fieldsetid}"
                        i18n:translate="" />
                <tal:edit_macro define="edit_macro view/getEditFieldsMacro">
                    <metal:listing use-macro="edit_macro" />
                </tal:edit_macro>
            </fieldset>
        </tal:tab>
    </tal:fieldsets>
</div>
