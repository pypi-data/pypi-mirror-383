name: Python Test

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  Python:
    if: ${{ !contains(github.head_ref, 'dependabot/github_actions')}}
    runs-on: ${{ matrix.os }}
    name: Python ${{ matrix.python-version }} Test on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v5
      - name: Install uv and set Python version
        uses: astral-sh/setup-uv@v7
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Eigen3 on linux
        if: ${{ matrix.os == 'ubuntu-latest'}}
        run: |
          sudo apt-get install -y libeigen3-dev
          sudo apt-get install -y libopenblas-dev
      - name: Install Eigen3 on macos
        if: ${{ matrix.os == 'macos-latest'}}
        run: |
          brew install eigen nlohmann-json libomp
      - name: Add msbuild to PATH
        if: ${{ matrix.os == 'windows-latest'}}
        uses: microsoft/setup-msbuild@v2.0.0
      - name: Install Eigen on windows
        if: ${{ matrix.os == 'windows-latest'}}
        shell: powershell
        run: |
          vcpkg --triplet x64-windows-static install eigen3
          vcpkg --triplet x64-windows install eigen3
          vcpkg --triplet x64-windows-static install nlohmann-json
          vcpkg --triplet x64-windows install nlohmann-json
          vcpkg integrate install
      - name: Install Dependencies
        shell: bash
        run: |
          set -eux
          uv sync --locked --group test
      - name: Build & Install
        if: ${{ matrix.os == 'ubuntu-latest'}}
        shell: bash
        run: |
          set -eux
          export CMAKE_BUILD_TYPE=Debug
          uv pip install -vvv .
      - name: Build & Install
        if: ${{ matrix.os == 'macos-latest'}}
        shell: bash
        run: |
          set -eux
          export CIBUILDWHEEL=1
          export CMAKE_BUILD_TYPE=Debug
          uv pip install -vvv .
      - name: Build & Install
        if: ${{ matrix.os == 'windows-latest'}}
        shell: bash
        run: |
          set -eux
          export CMAKE_BUILD_TYPE=Debug
          export CMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake"
          uv pip install -vvv .
      - name: Test
        shell: bash
        run: |
          set -eux
          uv run pytest tests/ -v --cov=openjij
      - name: Generate
        shell: bash
        run: |
          set -eux
          uv run python -m coverage xml
          uv run python -m coverage json
          uv run python -m coverage lcov
      - uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,PYTHON
          name: "Openjij"
          files: coverage.xml, coverage.json, coverage.lcov
          flags: openjij
          fail_ci_if_error: false
          verbose: true
