# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetGroupRoleResult',
    'AwaitableGetGroupRoleResult',
    'get_group_role',
    'get_group_role_output',
]

@pulumi.output_type
class GetGroupRoleResult:
    """
    A collection of values returned by getGroupRole.
    """
    def __init__(__self__, group_id=None, groups_roles=None, id=None, ids=None, role_id=None):
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if groups_roles and not isinstance(groups_roles, list):
            raise TypeError("Expected argument 'groups_roles' to be a list")
        pulumi.set(__self__, "groups_roles", groups_roles)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if role_id and not isinstance(role_id, str):
            raise TypeError("Expected argument 'role_id' to be a str")
        pulumi.set(__self__, "role_id", role_id)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        """
        The assigned Group ID.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupsRoles")
    def groups_roles(self) -> Sequence['outputs.GetGroupRoleGroupsRoleResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "groups_roles")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Unique identifier of the GroupRole.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Sequence[_builtins.str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[_builtins.str]:
        """
        The assigned Role ID.
        """
        return pulumi.get(self, "role_id")


class AwaitableGetGroupRoleResult(GetGroupRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupRoleResult(
            group_id=self.group_id,
            groups_roles=self.groups_roles,
            id=self.id,
            ids=self.ids,
            role_id=self.role_id)


def get_group_role(group_id: Optional[_builtins.str] = None,
                   id: Optional[_builtins.str] = None,
                   role_id: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupRoleResult:
    """
    A GroupRole assigns a Group to a Role.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    security_team_roles = sdm.get_group_role(group_id=sdm_group["security_team"]["id"])
    specific_relationship = sdm.get_group_role(id="grouprole-1234567890abcdef")
    groups_with_role = sdm.get_group_role(role_id=sdm_role["admin_role"]["id"])
    ```


    :param _builtins.str group_id: The assigned Group ID.
    :param _builtins.str id: Unique identifier of the GroupRole.
    :param _builtins.str role_id: The assigned Role ID.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['id'] = id
    __args__['roleId'] = role_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdm:index/getGroupRole:getGroupRole', __args__, opts=opts, typ=GetGroupRoleResult).value

    return AwaitableGetGroupRoleResult(
        group_id=pulumi.get(__ret__, 'group_id'),
        groups_roles=pulumi.get(__ret__, 'groups_roles'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        role_id=pulumi.get(__ret__, 'role_id'))
def get_group_role_output(group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          role_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGroupRoleResult]:
    """
    A GroupRole assigns a Group to a Role.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    security_team_roles = sdm.get_group_role(group_id=sdm_group["security_team"]["id"])
    specific_relationship = sdm.get_group_role(id="grouprole-1234567890abcdef")
    groups_with_role = sdm.get_group_role(role_id=sdm_role["admin_role"]["id"])
    ```


    :param _builtins.str group_id: The assigned Group ID.
    :param _builtins.str id: Unique identifier of the GroupRole.
    :param _builtins.str role_id: The assigned Role ID.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['id'] = id
    __args__['roleId'] = role_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdm:index/getGroupRole:getGroupRole', __args__, opts=opts, typ=GetGroupRoleResult)
    return __ret__.apply(lambda __response__: GetGroupRoleResult(
        group_id=pulumi.get(__response__, 'group_id'),
        groups_roles=pulumi.get(__response__, 'groups_roles'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        role_id=pulumi.get(__response__, 'role_id')))
