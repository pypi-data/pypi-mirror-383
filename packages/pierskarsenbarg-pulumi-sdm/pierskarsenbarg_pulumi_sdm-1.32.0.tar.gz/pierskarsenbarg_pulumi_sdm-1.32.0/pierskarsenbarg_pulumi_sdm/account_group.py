# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AccountGroupArgs', 'AccountGroup']

@pulumi.input_type
class AccountGroupArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[_builtins.str],
                 group_id: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a AccountGroup resource.
        :param pulumi.Input[_builtins.str] account_id: Unique identifier of the Account.
        :param pulumi.Input[_builtins.str] group_id: Unique identifier of the Group.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "group_id", group_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[_builtins.str]:
        """
        Unique identifier of the Account.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Unique identifier of the Group.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "group_id", value)


@pulumi.input_type
class _AccountGroupState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AccountGroup resources.
        :param pulumi.Input[_builtins.str] account_id: Unique identifier of the Account.
        :param pulumi.Input[_builtins.str] group_id: Unique identifier of the Group.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier of the Account.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier of the Group.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)


@pulumi.type_token("sdm:index/accountGroup:AccountGroup")
class AccountGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        An AccountGroup is a link between an Account and a Group.
        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as sdm

        security_lead_to_security_team = sdm.AccountGroup("securityLeadToSecurityTeam",
            account_id=sdm_account["security_lead"]["id"],
            group_id=sdm_group["security_team"]["id"])
        admin_user_to_administrators = sdm.AccountGroup("adminUserToAdministrators",
            account_id="a-1234567890abcdef",
            group_id="group-1234567890abcdef")
        ```
        This resource can be imported using the import command.

        ## Import

        A AccountGroup can be imported using the id, e.g.,

        ```sh
        $ pulumi import sdm:index/accountGroup:AccountGroup example accountgroup-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: Unique identifier of the Account.
        :param pulumi.Input[_builtins.str] group_id: Unique identifier of the Group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An AccountGroup is a link between an Account and a Group.
        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as sdm

        security_lead_to_security_team = sdm.AccountGroup("securityLeadToSecurityTeam",
            account_id=sdm_account["security_lead"]["id"],
            group_id=sdm_group["security_team"]["id"])
        admin_user_to_administrators = sdm.AccountGroup("adminUserToAdministrators",
            account_id="a-1234567890abcdef",
            group_id="group-1234567890abcdef")
        ```
        This resource can be imported using the import command.

        ## Import

        A AccountGroup can be imported using the id, e.g.,

        ```sh
        $ pulumi import sdm:index/accountGroup:AccountGroup example accountgroup-12345678
        ```

        :param str resource_name: The name of the resource.
        :param AccountGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountGroupArgs.__new__(AccountGroupArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
        super(AccountGroup, __self__).__init__(
            'sdm:index/accountGroup:AccountGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            group_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AccountGroup':
        """
        Get an existing AccountGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: Unique identifier of the Account.
        :param pulumi.Input[_builtins.str] group_id: Unique identifier of the Group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountGroupState.__new__(_AccountGroupState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["group_id"] = group_id
        return AccountGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier of the Account.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier of the Group.
        """
        return pulumi.get(self, "group_id")

