# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAccountGroupResult',
    'AwaitableGetAccountGroupResult',
    'get_account_group',
    'get_account_group_output',
]

@pulumi.output_type
class GetAccountGroupResult:
    """
    A collection of values returned by getAccountGroup.
    """
    def __init__(__self__, account_id=None, accounts_groups=None, group_id=None, id=None, ids=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if accounts_groups and not isinstance(accounts_groups, list):
            raise TypeError("Expected argument 'accounts_groups' to be a list")
        pulumi.set(__self__, "accounts_groups", accounts_groups)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        """
        Unique identifier of the Account.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="accountsGroups")
    def accounts_groups(self) -> Sequence['outputs.GetAccountGroupAccountsGroupResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "accounts_groups")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        """
        Unique identifier of the Group.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Unique identifier of the AccountGroup.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Sequence[_builtins.str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")


class AwaitableGetAccountGroupResult(GetAccountGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountGroupResult(
            account_id=self.account_id,
            accounts_groups=self.accounts_groups,
            group_id=self.group_id,
            id=self.id,
            ids=self.ids)


def get_account_group(account_id: Optional[_builtins.str] = None,
                      group_id: Optional[_builtins.str] = None,
                      id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountGroupResult:
    """
    An AccountGroup is a link between an Account and a Group.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    security_lead_groups = sdm.get_account_group(account_id=sdm_account["security_lead"]["id"])
    specific_relationship = sdm.get_account_group(id="accountgroup-1234567890abcdef")
    users_in_group = sdm.get_account_group(group_id=sdm_group["devops_group"]["id"])
    ```


    :param _builtins.str account_id: Unique identifier of the Account.
    :param _builtins.str group_id: Unique identifier of the Group.
    :param _builtins.str id: Unique identifier of the AccountGroup.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['groupId'] = group_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdm:index/getAccountGroup:getAccountGroup', __args__, opts=opts, typ=GetAccountGroupResult).value

    return AwaitableGetAccountGroupResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        accounts_groups=pulumi.get(__ret__, 'accounts_groups'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'))
def get_account_group_output(account_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAccountGroupResult]:
    """
    An AccountGroup is a link between an Account and a Group.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    security_lead_groups = sdm.get_account_group(account_id=sdm_account["security_lead"]["id"])
    specific_relationship = sdm.get_account_group(id="accountgroup-1234567890abcdef")
    users_in_group = sdm.get_account_group(group_id=sdm_group["devops_group"]["id"])
    ```


    :param _builtins.str account_id: Unique identifier of the Account.
    :param _builtins.str group_id: Unique identifier of the Group.
    :param _builtins.str id: Unique identifier of the AccountGroup.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['groupId'] = group_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdm:index/getAccountGroup:getAccountGroup', __args__, opts=opts, typ=GetAccountGroupResult)
    return __ret__.apply(lambda __response__: GetAccountGroupResult(
        account_id=pulumi.get(__response__, 'account_id'),
        accounts_groups=pulumi.get(__response__, 'accounts_groups'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids')))
