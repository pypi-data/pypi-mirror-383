"""Mechanical module."""
from __future__ import annotations
import typing
if typing.TYPE_CHECKING:
    import Ansys
import ansys.mechanical.stubs.v252.Ansys.ACT.Automation.Mechanical.Results as Results
import ansys.mechanical.stubs.v252.Ansys.ACT.Automation.Mechanical.Connections as Connections
import ansys.mechanical.stubs.v252.Ansys.ACT.Automation.Mechanical.AnalysisSettings as AnalysisSettings
import ansys.mechanical.stubs.v252.Ansys.ACT.Automation.Mechanical.ImportedLoads as ImportedLoads
import ansys.mechanical.stubs.v252.Ansys.ACT.Automation.Mechanical.AdditiveManufacturing as AdditiveManufacturing
import ansys.mechanical.stubs.v252.Ansys.ACT.Automation.Mechanical.FE as FE
import ansys.mechanical.stubs.v252.Ansys.ACT.Automation.Mechanical.CondensedParts as CondensedParts
import ansys.mechanical.stubs.v252.Ansys.ACT.Automation.Mechanical.ConstructionLines as ConstructionLines
import ansys.mechanical.stubs.v252.Ansys.ACT.Automation.Mechanical.Substructure as Substructure
import ansys.mechanical.stubs.v252.Ansys.ACT.Automation.Mechanical.MaterialObject as MaterialObject
import ansys.mechanical.stubs.v252.Ansys.ACT.Automation.Mechanical.BoundaryConditions as BoundaryConditions
import ansys.mechanical.stubs.v252.Ansys.ACT.Automation.Mechanical.MeshControls as MeshControls


class AMOverhangConstraint(object):
    """
    Defines a AMOverhangConstraint.
    """

    @property
    def BuildDirection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the axis used for the build direction. Only axis enums will be accepted. 
            InvalidArgumentException: "Origin" enum value.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def OverhangAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the OverhangAngle.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ArchiveSettings(object):
    """
    
            A settings class for the project Archive operation
            
    """

    @property
    def IncludeResultAndSolutionFiles(self) -> typing.Optional[bool]:
        """
        
            A boolean which configures the option to include result/solution files in the archive file
            
        """
        return None

    @property
    def IncludeUserFiles(self) -> typing.Optional[bool]:
        """
        
            A boolean which configures the option to include files inside the UserFiles folder in the archive file
            
        """
        return None


class LoadHelper(object):

    @classmethod
    def SwitchToTabular(cls, BC: Ansys.ACT.Automation.Mechanical.BoundaryConditions.GenericBoundaryCondition) -> None:
        """
        SwitchToTabular method.
        """
        pass

    @classmethod
    def SwitchFilmCoefficientToTabular(cls, BC: Ansys.ACT.Automation.Mechanical.BoundaryConditions.Convection) -> None:
        """
        SwitchFilmCoefficientToTabular method.
        """
        pass

    @classmethod
    def SwitchAmbientTemperatureToTabular(cls, BC: Ansys.ACT.Automation.Mechanical.BoundaryConditions.Convection) -> None:
        """
        SwitchAmbientTemperatureToTabular method.
        """
        pass


class CenterOfGravityConstraint(object):
    """
    Defines a CenterOfGravityConstraint.
    """

    @property
    def Axis(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the Axis used for calculation. Only positive direction enums will be accepted ("PositiveXAxis", "PositiveYAxis", "PositiveXAxis"). 
            InvalidArgumentException: Any unsupported enum value.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def MaximumPosition(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaximumPosition.
        """
        return None

    @property
    def MinimumPosition(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinimumPosition.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ComplexityIndexConstraint(object):
    """
    Defines a ComplexityIndexConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CyclicManufacturingConstraint(object):
    """
    Defines a CyclicManufacturingConstraint.
    """

    @property
    def Axis(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the Symmetry Axis. Only positive direction enums will be accepted ("PositiveXAxis", "PositiveYAxis", "PositiveXAxis"). 
            InvalidArgumentException: Any unsupported enum value.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def NumberofSectors(self) -> typing.Optional[int]:
        """
        Gets or sets the NumberofSectors.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedElementOrientations(object):
    """
    Defines a ImportedElementOrientations.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ExtrusionManufacturingConstraint(object):
    """
    Defines a ExtrusionManufacturingConstraint.
    """

    @property
    def Axis(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the Extrusion Axis. Only positive direction enums will be accepted ("PositiveXAxis", "PositiveYAxis", "PositiveXAxis"). 
            InvalidArgumentException: Any unsupported enum value.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class FileBasedImportedLoads(object):
    """
     Defines a FileBasedImportedLoads
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSFileBasedImportedLoadsAuto]:
        """
        
             Gets the internal object. For advanced usage only.
            
        """
        return None

    @property
    def RemotePoint(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.RemotePoint]:
        """
        
            Get and set the remote point.
            
        """
        return None

    @property
    def RpmSelection(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the RPMSelection.
        """
        return None

    @property
    def BCType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ImportedRemoteLoadType]:
        """
        
            Gets or sets the BCType
            
        """
        return None

    @property
    def XComponent(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets the XComponent.
        """
        return None

    @property
    def YComponent(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets the YComponent.
        """
        return None

    @property
    def ZComponent(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets the ZComponent.
        """
        return None

    @property
    def XComponentImag(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets the XComponentImag.
        """
        return None

    @property
    def YComponentImag(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets the YComponentImag.
        """
        return None

    @property
    def ZComponentImag(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets the ZComponentImag.
        """
        return None

    @property
    def Magnitude(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets the Magnitude.
        """
        return None

    @property
    def MagnitudeImag(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets the MagnitudeImag.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class LocalDesignRestriction(object):
    """
    Defines a LocalDesignRestriction.
    """

    @property
    def AxisForDirection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the Axis of the CoordinateSystemForDirection that must be used as a direction Directional Morphing LocalDesignRestrictionNature. Only positive direction enums will be accepted ("PositiveXAxis", "PositiveYAxis", "PositiveXAxis"). 
            InvalidArgumentException: Any unsupported enum value.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSOptimizationRegionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def LocalDesignRestrictionNature(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.TopoLocalDesignRestrictionNature]:
        """
        Gets or sets the LocalDesignRestrictionNature. This property enables you to specify geometry that the application does not optimize or specific faces from which the application does not move any nodes vertically with respect to the original face. Non-Optimizable option is the default. If AlongDirection is used, the direction is defined by the combination of CoordinateSystemForDirection and AxisOfCoordinateSystemForDirection properties.
        """
        return None

    @property
    def CoordinateSystemForDirection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the Coordinate system that is used to define a direction consummed for Directional Morphing LocalDesignRestrictionNature.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ExclusionRegionLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the ExclusionRegionLocation.
        """
        return None

    @property
    def ExclusionScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ExclusionScopingMethod.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.ACT.Automation.Mechanical.DataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def MaxCumulatedDisplacementControl(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.TopoPropertyControlType]:
        """
        Gets or sets the MaxCumulatedDisplacementControl.
        """
        return None

    @property
    def MorphingTotalMoveLimit(self) -> typing.Optional[float]:
        """
        Gets or sets the MorphingTotalMoveLimit.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MemberSizeManufacturingConstraint(object):
    """
    Defines a MemberSizeManufacturingConstraint.
    """

    @property
    def NormalAxisForInPlaneMeasure(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the normal axis to plane considered for InPlane measurement type. Only positive direction enums will be accepted ("PositiveXAxis", "PositiveYAxis", "PositiveXAxis"). 
            InvalidArgumentException: Any unsupported enum value.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def GapSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the GapSize.
        """
        return None

    @property
    def MaxSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaxSize.
        """
        return None

    @property
    def MinSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinSize.
        """
        return None

    @property
    def GapSizeControlledType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ManuMemberSizeControlledType]:
        """
        Gets or sets the GapSizeControlledType.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def Maximum(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ManuMemberSizeControlledType]:
        """
        Gets or sets the Maximum.
        """
        return None

    @property
    def ThicknessMeasureType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MemberSizeMeasurementType]:
        """
        Gets or sets the thickness measurement type (applicable for the MaxSize and GapSize properties). The default type is Isotropic.
        """
        return None

    @property
    def Minimum(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ManuMemberSizeControlledType]:
        """
        Gets or sets the Minimum.
        """
        return None

    @property
    def CoordinateSystemForThicknessMeasure(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the Coordinate system used as the basis for measurements (only used when `ThicknessMeasureType` is `InPlane`).
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MomentOfInertiaConstraint(object):
    """
    Defines a MomentOfInertiaConstraint.
    """

    @property
    def Axis(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the Axis used for calculation. Only positive direction enums will be accepted ("PositiveXAxis", "PositiveYAxis", "PositiveXAxis"). 
            InvalidArgumentException: Any unsupported enum value.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def PercentageToRetain(self) -> typing.Optional[int]:
        """
        Gets or sets the PercentageToRetain.
        """
        return None

    @property
    def PercentageToRetainMax(self) -> typing.Optional[int]:
        """
        Gets or sets the PercentageToRetainMax.
        """
        return None

    @property
    def PercentageToRetainMin(self) -> typing.Optional[int]:
        """
        Gets or sets the PercentageToRetainMin.
        """
        return None

    @property
    def MaximumValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaximumValue.
        """
        return None

    @property
    def MinimumValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinimumValue.
        """
        return None

    @property
    def DefineBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ResponseConstraintDefineBy]:
        """
        Gets or sets the DefineBy.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class OptimizationMaterial(object):

    @property
    def Material(self) -> typing.Optional[typing.Any]:
        """
        
            Gets or sets the material it is based on (a Material, a string or an objectId can be used to set it) 
            
        """
        return None

    @property
    def DensityMinimum(self) -> typing.Optional[float]:
        """
        
            Gets or sets the minimum density of the lattice for the OptimizationMaterial (between 0 and 1)
            
        """
        return None

    @property
    def DensityMaximum(self) -> typing.Optional[float]:
        """
        
            Gets or sets the maximum density of the lattice for the OptimizationMaterial (between 0 and 1)
            
        """
        return None

    @property
    def VolumeFillingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FillingMethod]:
        """
        
            Gets or sets if the filling method for the OptimizationMaterial
            
        """
        return None

    @property
    def LatticeType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.LatticeType]:
        """
        
            Gets or sets the lattice shape for the OptimizationMaterial
            
        """
        return None


class MorphingRegion(object):
    """
    Defines a MorphingRegion.
    """

    @property
    def SlidingLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        "SlidingLocation" property defines the sliding constraints scoping.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMorphingRegionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def MorphingIntervals(self) -> typing.Optional[int]:
        """
        Gets or sets the MorphingIntervals.
        """
        return None

    @property
    def BaseFrequency(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the BaseFrequency.
        """
        return None

    @property
    def MaximumFrequency(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaximumFrequency.
        """
        return None

    @property
    def MinimumFrequency(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinimumFrequency.
        """
        return None

    @property
    def MorphingFrequency(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MorphingFrequency.
        """
        return None

    @property
    def Thickness(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thickness .
        """
        return None

    @property
    def DisplayMesh(self) -> typing.Optional[bool]:
        """
        Gets or sets the DisplayMesh.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def FixedLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        "FixedLocation" property defines the fixed faces of the morphing region.
        """
        return None

    @property
    def MovingLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        "MovingLocation" property defines the moving boundaries of the morphing region.
        """
        return None

    @property
    def RegionLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        "RegionLocation" property defines the morphing region bodies.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class LineChart2D(object):
    """
    
            An object in the Tree to display data imported from various source objects under “Solution” or from files.
            It utilizes Ansys.Mechanical.DataModel.Utilities.Charts.Chart for displaying the imported data and provides users with the flexibility to modify the data to some extent
            (eg. deleting, hiding/showing, modifying their display and applying operations on them).
            
    """

    @property
    def Source(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        
            Gets or sets source objects.
            When setting, all datasets are copied from the specified sources and added to the chart object owned by LineChart2D.
            We will ignore unsupported objects and import the ones that are supported.
            
        """
        return None

    @property
    def Chart(self) -> typing.Optional[Ansys.ACT.Interfaces.Mechanical.IChart]:
        """
        
            Gets the chart object on Line Chart.
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSBasicResultChartAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CoordinateSystems(object):
    """
    Defines a CoordinateSystems.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCoordinateSystemGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCoordinateSystemAtCenterOfMass(self, geoBodies: typing.List[Ansys.ACT.Interfaces.Geometry.IBaseGeoBody], pointMasses: typing.List[Ansys.ACT.Automation.Mechanical.PointMass], distributedMasses: typing.List[Ansys.ACT.Automation.Mechanical.DistributedMass]) -> Ansys.ACT.Automation.Mechanical.CoordinateSystem:
        """
        AddCoordinateSystemAtCenterOfMass method.
        """
        pass

    def AddCoordinateSystem(self) -> Ansys.ACT.Automation.Mechanical.CoordinateSystem:
        """
        Creates a new CoordinateSystem
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CoSimulationPin(object):
    """
    Defines a CoSimulationPin.
    """

    @property
    def Scope(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Connections.Joint]:
        """
        Gets or sets the Joint through Scope.
        """
        return None

    @property
    def DOF(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.KinematicDOF]:
        """
        Gets or sets the DOF.
        """
        return None

    @property
    def JointType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.JointType]:
        """
        Gets or sets the Joint Type.
        """
        return None

    @property
    def PinBehavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PinBehavior]:
        """
        Gets or sets the Pin Behavior.
        """
        return None

    @property
    def PinNature(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PinNature]:
        """
        Gets or sets the Pin Nature.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSSimplorerPinAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CondensedPartInterface(object):

    @property
    def Type(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartInterfaceType]:
        """
        
            Gets or Sets Condensed part interface type
            
        """
        return None

    @property
    def RemotePointSelection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.RemotePoint]:
        """
        
            Gets or Sets RemotePointSelection
            
        """
        return None

    @property
    def NamedSelection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.NamedSelection]:
        """
        
            Gets or Sets NamedSelection
            
        """
        return None

    @property
    def AllSelection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.ImportedDataModelObject]:
        """
        AllSelection property.
        """
        return None


class CondensedPartInterfaces(object):
    """
    
            A collection of condensed part interface.
            
    """

    @property
    def Item(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CondensedPartInterface]:
        """
        Item property.
        """
        return None

    def Clear(self) -> None:
        """
        
            Clears all the condensed part interfaces
            
        """
        pass

    def Add(self) -> None:
        """
        
            Add new condensed part interface
            
        """
        pass

    def RemoveAt(self, index: int) -> None:
        """
        
            Remove condensed part interface at the given index
            
        """
        pass


class ConstructionGeometry(object):
    """
    Defines a ConstructionGeometry.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSConstructionGeometryGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ShowMesh(self) -> typing.Optional[bool]:
        """
        Gets or sets the ShowMesh.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def UpdateAllSolids(self) -> None:
        """
        Update all solid parts under the Construction Geometry folder.
        """
        pass

    def UpdateSolids(self) -> None:
        """
        Update only the solids that are activated 
        """
        pass

    def AddConstructionLine(self) -> Ansys.ACT.Automation.Mechanical.ConstructionLines.ConstructionLine:
        """
        Creates a new ConstructionLine
        """
        pass

    def AddConstructionPoint(self) -> Ansys.ACT.Automation.Mechanical.ConstructionPoint:
        """
        Creates a new ConstructionPoint
        """
        pass

    def AddPath(self) -> Ansys.ACT.Automation.Mechanical.Path:
        """
        Creates a new Path
        """
        pass

    def AddSolid(self) -> Ansys.ACT.Automation.Mechanical.Solid:
        """
        Creates a new Solid
        """
        pass

    def AddSTL(self) -> Ansys.ACT.Automation.Mechanical.STL:
        """
        Creates a new STL
        """
        pass

    def AddSurface(self) -> Ansys.ACT.Automation.Mechanical.Surface:
        """
        Creates a new Surface
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CrossSections(object):
    """
    Defines a CrossSections.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def NameCrossSectionsUniquely(self) -> None:
        """
        programmatically give each of the Cross Section objects a unique name .
        """
        pass

    def AddChannelCrossSection(self) -> Ansys.ACT.Automation.Mechanical.ChannelCrossSection:
        """
        Creates a new ChannelCrossSection
        """
        pass

    def AddCircularCrossSection(self) -> Ansys.ACT.Automation.Mechanical.CircularCrossSection:
        """
        Creates a new CircularCrossSection
        """
        pass

    def AddCircularTubeCrossSection(self) -> Ansys.ACT.Automation.Mechanical.CircularTubeCrossSection:
        """
        Creates a new CircularTubeCrossSection
        """
        pass

    def AddHatCrossSection(self) -> Ansys.ACT.Automation.Mechanical.HatCrossSection:
        """
        Creates a new HatCrossSection
        """
        pass

    def AddHollowRectangularCrossSection(self) -> Ansys.ACT.Automation.Mechanical.HollowRectangularCrossSection:
        """
        Creates a new HollowRectangularCrossSection
        """
        pass

    def AddICrossSection(self) -> Ansys.ACT.Automation.Mechanical.ICrossSection:
        """
        Creates a new ICrossSection
        """
        pass

    def AddLCrossSection(self) -> Ansys.ACT.Automation.Mechanical.LCrossSection:
        """
        Creates a new LCrossSection
        """
        pass

    def AddRectangularCrossSection(self) -> Ansys.ACT.Automation.Mechanical.RectangularCrossSection:
        """
        Creates a new RectangularCrossSection
        """
        pass

    def AddTCrossSection(self) -> Ansys.ACT.Automation.Mechanical.TCrossSection:
        """
        Creates a new TCrossSection
        """
        pass

    def AddUserDefinedCrossSection(self) -> Ansys.ACT.Automation.Mechanical.UserDefinedCrossSection:
        """
        Creates a new UserDefinedCrossSection
        """
        pass

    def AddZCrossSection(self) -> Ansys.ACT.Automation.Mechanical.ZCrossSection:
        """
        Creates a new ZCrossSection
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class DirectMorph(object):
    """
    Defines a DirectMorph.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSDirectMorphAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DisplacementFile(self) -> typing.Optional[str]:
        """
        Gets or sets the DisplacementFile.
        """
        return None

    @property
    def ScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ScaleFactor.
        """
        return None

    @property
    def WorkflowMorphStep(self) -> typing.Optional[int]:
        """
        Gets or sets the object ID of the Mesh Workflow Morphing step that the Morph Control is based on.
        """
        return None

    @property
    def MorphDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MorphControl.MorphDefinitionType]:
        """
        Defines whether the Morphing is done based on the specified Displacement File or the outcome of a Mesh Workflow Morphing step.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def TrackWorkflowStep(self) -> typing.Optional[bool]:
        """
        Specifies whether to track changes to the Morph field file of the specified Mesh Workflow Morphing step.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class DistributedMass(object):
    """
    Defines a DistributedMass.
    """

    @property
    def ElementAPDLName(self) -> typing.Optional[str]:
        """
        Gets or sets the ElementAPDLName.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPointMassAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def MassPerUnitArea(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MassPerUnitArea.
        """
        return None

    @property
    def TotalMass(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the TotalMass.
        """
        return None

    @property
    def MassType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DistributedMassInputType]:
        """
        Gets or sets the MassType.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def RemotePoint(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.RemotePoint]:
        """
        
            Gets the remote point associated to the point mass.
            
        """
        return None

    @property
    def IsDistributedMass(self) -> typing.Optional[bool]:
        """
        Gets the IsDistributedMass.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Geometry.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshWorkflowGroup(object):
    """
    Defines a MeshWorkflowGroup.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSEngineeringModelAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ActiveWorkflow(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshWorkflow]:
        """
        Gets the currently active workflow object.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GenerateWorkflows(self) -> None:
        """
        Generates all mesh workflows, i.e. executes the “Input”, the “Steps”, and the “Output” as needed.
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Resets all mesh workflows completely, i.e. also the geometry scoping transferred into each mesh workflow will be reset and all inactive geometry parts/bodies will become active again. Steps, controls, and outcomes will be reset to their initial state while any user-defined property settings will remain as-is.
        """
        pass

    def AddMeshWorkflow(self, type: Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.WorkflowType) -> Ansys.ACT.Automation.Mechanical.MeshWorkflow:
        """
        Adds a new workflow to the “MeshWorkflowGroup” object.
        """
        pass

    def GetSolidSurfaceMeshQualityWarningLimit(self, meshMetric: Ansys.Mechanical.DataModel.Enums.MeshMetricType) -> Ansys.Core.Units.Quantity:
        """
        
             Get Mesh Quality Warning Limit
             
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshWorkflowControl(object):
    """
    Object that wraps IDSEngineeringModelControl.
    """

    @property
    def ControlType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ControlType]:
        """
        
            Returns the type of the control.
            
        """
        return None

    @property
    def EnableCheckpoint(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.CheckpointDefinitionType]:
        """
        Flag whether to enable a checkpoint or not. The default value is false.
        """
        return None

    @property
    def InnerScopeOutcome(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshWorkflowOutcome]:
        """
        If the InnerScopeDefinition is set to Outcome, then this property is visible. It defines the previous step outcome. This way we input the results of a previous step to the current step. The input applies to inner region of enclosure.
        """
        return None

    @property
    def ExternalScopeOutcome(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshWorkflowOutcome]:
        """
        If the InnerScopeDefinition is set to Outcome, then this property is visible. It defines the previous step outcome. This way we input the results of a previous step to the current step. The input applies to inner region of enclosure.
        """
        return None

    @property
    def ScopeOutcome(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshWorkflowOutcome]:
        """
        If the InnerScopeDefinition is set to Outcome, then this property is visible. It defines the previous step outcome. This way we input the results of a previous step to the current step. The input applies to inner region of enclosure.
        """
        return None

    @property
    def ScopeDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeDefinedByType]:
        """
        
            It is defined by value or outcome. 
            
        """
        return None

    @property
    def ScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        
            The method can be label/zone/part. 
            
        """
        return None

    @property
    def InnerScopeDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeDefinedByType]:
        """
        
            It is defined by value or outcome depending on if the Inner scope is defined manually by the user or defined based on a previous outcome.
            
        """
        return None

    @property
    def InnerScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        
            The method can be label/zone/part and it is applied to inner region of enclosure. 
            
        """
        return None

    @property
    def ExternalScopeDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeDefinedByType]:
        """
        
            It is defined by value or outcome depending on if the External scope is defined manual by the user or defined based on a previous outcome.
            
        """
        return None

    @property
    def ExternalScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        
            The method can be label/zone/part and it is applied to external region of enclosure.
            
        """
        return None

    @property
    def SurfaceMeshType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.SurfaceMeshType]:
        """
        
            This property gives control over what type of elements need to be generated in the mesh. The supported surface mesh types are Triangles and Quadrilaterals. 
            
        """
        return None

    @property
    def MeshFlowControl(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.MeshFlowControl]:
        """
        
            This property gives control over the flow of mesh during surface mesh generation. The supported modes are None, and Global Cartesian.
            
        """
        return None

    @property
    def TriangleCountReductionMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.TriangleCountReductionMode]:
        """
        
            This property gives control over the mode/degree of triangle count reduction during surface mesh generation. The supported modes are None, Conservative and Aggressive.
            
        """
        return None

    @property
    def VolumeMeshType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.VolumeMeshType]:
        """
        
            Type of Volume elements such as Tetrahedrons and Hex.
            
        """
        return None

    @property
    def CenterPosition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.SphereCenterDefinitionType]:
        """
        
            It is defined by “Centered”, “Minimal”, and “User Defined”.
            
        """
        return None

    @property
    def RegionType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.WrapperRegionType]:
        """
        
            It is defined by Material Point or External.
            
        """
        return None

    @property
    def MaterialPointType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.MaterialPointType]:
        """
        
            It defines the type of material point, it can be “Include” or “Exclude”.
            
        """
        return None

    @property
    def MaterialPointDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.MaterialPointDefineByType]:
        """
        Gets or sets the material point definition type.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the Coordinate System object used to define the material point location.
        """
        return None

    @property
    def XCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        It defines the X Coordinate.
        """
        return None

    @property
    def ZCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        It defines the Z Coordinate.
        """
        return None

    @property
    def YCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        It defines the Y Coordinate.
        """
        return None

    @property
    def DeleteEmptyVolumes(self) -> typing.Optional[bool]:
        """
        This property is used to enable or disable the automatic deletion of empty topo volumes  during mesh to topology conversion. The default value is false.
        """
        return None

    @property
    def Material(self) -> typing.Optional[str]:
        """
        Gets or sets the Material.
        """
        return None

    @property
    def MaterialName(self) -> typing.Optional[str]:
        """
        Gets or sets the Material Name.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSEngineeringModelControlAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Thickness(self) -> typing.Optional[float]:
        """
        Gets or sets the Thickness to be assigned to the scoped zone.
        """
        return None

    @property
    def ExternalScopePattern(self) -> typing.Optional[str]:
        """
        The value can be a name of a region or a predefined patterns to select multiple region names.
        """
        return None

    @property
    def InnerScopePattern(self) -> typing.Optional[str]:
        """
        The value can be a name of a region or a predefined patterns to select multiple region names.
        """
        return None

    @property
    def SmoothingIterations(self) -> typing.Optional[int]:
        """
        Allows user to input number of iterations needed to achieve good mesh results.
        """
        return None

    @property
    def MinimalNumberOfVolumetricLayers(self) -> typing.Optional[int]:
        """
        It determines the minimal number of layers of volume elements to be created around the scoped body.
        """
        return None

    @property
    def ExternalLabelName(self) -> typing.Optional[str]:
        """
        This property is used to rename the default external label name generated during execution of step.
        """
        return None

    @property
    def InternalLabelName(self) -> typing.Optional[str]:
        """
        This property is used to rename the default Internal label name generated during execution of step.
        """
        return None

    @property
    def EdgeLabelName(self) -> typing.Optional[str]:
        """
        This property is used to rename the default edge label name generated during execution of step.
        """
        return None

    @property
    def ExcludeScopePattern(self) -> typing.Optional[str]:
        """
        Gets or sets the part, zone or label name pattern for the Hole Patching exclusion scoping. Applicable only if scope is defined by value.
        """
        return None

    @property
    def NumberOfLayers(self) -> typing.Optional[int]:
        """
        Number of layers of mesh elements. 
        """
        return None

    @property
    def FaceZoneName(self) -> typing.Optional[str]:
        """
        This property is used to define the name of the default face zone name generated during execution of step.
        """
        return None

    @property
    def Filename(self) -> typing.Optional[str]:
        """
        Assign full path to the filename would like to Import/Export.
        """
        return None

    @property
    def Filenames(self) -> typing.Optional[str]:
        """
        Assign paths with ‘|’ seperator to this property to read multiple files, pass without seperator if single file.
        """
        return None

    @property
    def NumberOfAttempts(self) -> typing.Optional[int]:
        """
        Number of attempts for mesh convergence.
        """
        return None

    @property
    def LabelName(self) -> typing.Optional[str]:
        """
        This property is used to rename the default label name generated during execution of step.
        """
        return None

    @property
    def RelativeMergeTolerancePercentage(self) -> typing.Optional[float]:
        """
        Gets or sets the percentage of the connected edge lengths to be used as tolerance for merging nodes.
        """
        return None

    @property
    def OffsetFileName(self) -> typing.Optional[str]:
        """
        Gets or sets the full file path to the .csv file containing the offset coordinates for replication.
        """
        return None

    @property
    def InputMeshScopePattern(self) -> typing.Optional[str]:
        """
        Gets or sets the zone or label name pattern that defines the Input Mesh scoping. Applicable only if InputMeshScopeDefinition is set to Value.
        """
        return None

    @property
    def MeshedVolumeLabelSuffix(self) -> typing.Optional[str]:
        """
        Gets or sets the suffix to be used when defining labels scoped to volumes meshed by the MultiZone mesher. Defaults to "MultiZoneMesh".
        """
        return None

    @property
    def SharedTopologyLabelName(self) -> typing.Optional[str]:
        """
        Gets or sets the name used as label to scope the shared topology faces which are automatically added as input mesh for MultiZone. Defaults to "MultiZoneMesh/SharedTopologyInputMesh".
        """
        return None

    @property
    def SourceTargetScopePattern(self) -> typing.Optional[str]:
        """
        Gets or sets the zone or label name pattern that defines the Source/Target scoping. Applicable only if SourceTargetScopeDefinition is set to Value.
        """
        return None

    @property
    def FieldName(self) -> typing.Optional[str]:
        """
        Gets or sets the label name to be applied.
        """
        return None

    @property
    def NumberOfDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the number of divisions for the scoped edges.
        """
        return None

    @property
    def PartName(self) -> typing.Optional[str]:
        """
        Gets or sets the part name to be used when generating.
        """
        return None

    @property
    def PercentageIncrement(self) -> typing.Optional[float]:
        """
        The number of volumetric Layers determines the number of layers. This property decides whether all the layers are an equal size (default 0.0) or they should gradually increase the size of volume element than previous element.
        """
        return None

    @property
    def MorphRecordingName(self) -> typing.Optional[str]:
        """
        This property is used to define the name for matching the morphing recording to apply to the meshing operation.
        """
        return None

    @property
    def ScaleFactor(self) -> typing.Optional[float]:
        """
        Scale Factor is used to scale shapes in different dimensions.
        """
        return None

    @property
    def ScopePattern(self) -> typing.Optional[str]:
        """
        The value can be a name of a region or a predefined patterns to select multiple region names.
        """
        return None

    @property
    def ElementsPerGap(self) -> typing.Optional[int]:
        """
        Gets or sets the minimum number of element layers to be generated per gap for the Proximity Sizing control. The default values is 3.
        """
        return None

    @property
    def SizeFieldPattern(self) -> typing.Optional[str]:
        """
        This property is used to define the name pattern for matching the size fields to apply to the meshing operation.
        """
        return None

    @property
    def BaseFaceLabel(self) -> typing.Optional[str]:
        """
        Gets or sets the label to be used for the base face.
        """
        return None

    @property
    def DirectionX(self) -> typing.Optional[float]:
        """
        Gets or sets the X component of the direction vector, with respect to the Global Coordinate System.
        """
        return None

    @property
    def DirectionY(self) -> typing.Optional[float]:
        """
        Gets or sets the Y component of the direction vector, with respect to the Global Coordinate System.
        """
        return None

    @property
    def DirectionZ(self) -> typing.Optional[float]:
        """
        Gets or sets the Z component of the direction vector, with respect to the Global Coordinate System.
        """
        return None

    @property
    def SeedFaceScopePattern(self) -> typing.Optional[str]:
        """
        Gets or sets the part, zone or label name pattern that defines the scope. Applicable only if SeedFaceScopeDefinition is set to Value.
        """
        return None

    @property
    def SeedFaceScopeOutcome(self) -> typing.Optional[int]:
        """
        Gets or sets the scope outcome from a previous operation. Applicable only if SeedFaceScopeDefinition is set to Outcome.
        """
        return None

    @property
    def BaseFaceScopePattern(self) -> typing.Optional[str]:
        """
        Gets or sets the part, zone or label name pattern that defines the scope. Applicable only if BaseFaceScopeOutcome is set to Value.
        """
        return None

    @property
    def BaseFaceScopeOutcome(self) -> typing.Optional[int]:
        """
        Gets or sets the scope outcome from a previous operation. Applicable only if BaseFaceScopeOutcome is set to Outcome.
        """
        return None

    @property
    def QuadBoundaryLayerFaceScopePattern(self) -> typing.Optional[str]:
        """
        Gets or sets the part, zone or label name pattern that defines the scope. Applicable only if 'QuadBoundaryLayerFaceScopeDefinition' is set to Value. 
        """
        return None

    @property
    def QuadBoundaryLayerGrowthRate(self) -> typing.Optional[float]:
        """
        Gets or sets the ratio of heights between subsequent quad layers. 
        """
        return None

    @property
    def QuadBoundaryLayerNumberOfDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the number of annular divisions on the washer boundary from where the quad layers are grown. 
        """
        return None

    @property
    def QuadBoundaryLayerNumberOfLayers(self) -> typing.Optional[int]:
        """
        Gets or sets the number of quad layers on the washer boundary. 
        """
        return None

    @property
    def TargetSkewness(self) -> typing.Optional[float]:
        """
        Set Limit to the skewness of an element. Higher the skewness value, expecting a better mesh result.
        """
        return None

    @property
    def GrowthRate(self) -> typing.Optional[float]:
        """
        Gradient of element size as each layer grows. 
        """
        return None

    @property
    def VolumeZoneName(self) -> typing.Optional[str]:
        """
        This property is used to rename the default volume zone name generated during execution of step.
        """
        return None

    @property
    def ElementSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Define element size to achieve desired mesh results. User can achieve coarse, medium, or fine mesh by varying this value.
        """
        return None

    @property
    def CenterPlaneNormalOffset(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        It defines the desired offset of the plane of the hemisphere from the model.
        """
        return None

    @property
    def MinimalRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        It defines the desired minimal radius of the spherical enclosure.
        """
        return None

    @property
    def ConstantHeight(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Height of a single layer of mesh elements.
        """
        return None

    @property
    def DihedralAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        The dihedral angle is the angle between the normal vectors of two element faces.
        """
        return None

    @property
    def MaxHoleSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the maximum size of holes to be considered for Wrapper Leak Prevention and Hole Patching.
        """
        return None

    @property
    def MergeNodesTolerance(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the tolerance within which nodes are to be merged.
        """
        return None

    @property
    def DefeatureTolerance(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the defeature tolerance applied during meshing. Applicable only if DefeatureToleranceDefineBy is "UserDefined".
        """
        return None

    @property
    def SweepingSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the constant size along the sweeping direction.
        """
        return None

    @property
    def MaxSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the maximum size to be used for the volumetric size field sizing computation in the Proximity Sizing and Curvature Sizing controls. This is a length value.
        """
        return None

    @property
    def MinSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the minimum size to be used for the volumetric size field sizing computation in the Proximity Sizing and Curvature Sizing controls. This is a length value.
        """
        return None

    @property
    def NormalAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the maximum allowed normal angle between neighboring elements when computing curvature for the Curvature Sizing control. This value must be between 0 and 180 degrees (0 to π) and defaults to 18 degrees.
        """
        return None

    @property
    def LateralDefeatureSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the defeature size to be used along the lateral direction of stacking.
        """
        return None

    @property
    def OriginX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the X coordinate of origin (location of base face) in the volume flattening step.
        """
        return None

    @property
    def OriginY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Y coordinate of origin (location of base face) in the volume flattening step.
        """
        return None

    @property
    def OriginZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Z coordinate of origin (location of base face) in the volume flattening step.
        """
        return None

    @property
    def DefaultOffsetSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the size of the offset layers to be used during the stack base operation.
        """
        return None

    @property
    def StackingDefeatureSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Defines defeature size to be used along the stacking direction.
        """
        return None

    @property
    def QuadBoundaryLayerFirstLayerHeight(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the height of the first quad layer. 
        """
        return None

    @property
    def ControlDataDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ControlDataDefinedByType]:
        """
        This property is used to define if the control data is defined by value or by settings.
        """
        return None

    @property
    def HemisphereCenterModality(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.HemisphereCenterDefinitionType]:
        """
        This property is used to define the rule for the computation of the center of the hemispherical enclosure.
        """
        return None

    @property
    def HemisphereOrientationModality(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.HemisphereOrientationDefinitionType]:
        """
        This property is used to define the rule for the computation of the orientation of the hemispherical enclosure.
        """
        return None

    @property
    def SphereCenterModality(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.SphereCenterDefinitionType]:
        """
        This property is used to define the rule for the computation of the center of the spherical enclosure.
        """
        return None

    @property
    def ExcludeScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets or sets the scoping method for the Hole Patching exclusion scoping. Default: Label.
        """
        return None

    @property
    def ExcludeScopeDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeDefinedByType]:
        """
        Gets or sets the type of scope definition for the Hole Patching exclusion scoping. Default: Value
        """
        return None

    @property
    def MergeNodesToleranceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.MergeNodesToleranceType]:
        """
        Gets or sets the merge nodes tolerance type to be used when executing Merge Nodes operation. The default value is Absolute.
        """
        return None

    @property
    def DecompositionType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.DecompositionType]:
        """
        Gets or sets the decomposition type used by the MultiZone mesher. Defaults to "Program Controlled". 
        """
        return None

    @property
    def DefeatureToleranceDefineBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.DefeatureToleranceDefineBy]:
        """
        Gets or sets how the Defeature Tolerance is defined for the MultiZone mesher. Defaults to  "Program Controlled". 
        """
        return None

    @property
    def FreeFaceMeshType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.FreeFaceMeshType]:
        """
        Gets or sets the type of elements for the MultiZone mesher free face mesh. Defaults to "All Quads". 
        """
        return None

    @property
    def FreeVolumeMeshType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.FreeVolumeMeshType]:
        """
        Gets or sets how free mesh blocks should be treated by the MultiZone meshing algorithm. Defaults to "NotAllowed".
        """
        return None

    @property
    def InputMeshScopeDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeDefinedByType]:
        """
        Gets or sets the type of scope definition for the Input Mesh scoping. Default: Value.
        """
        return None

    @property
    def InputMeshScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets or sets the scoping method for the Input Mesh scoping. Default: Label.
        """
        return None

    @property
    def SourceTargetScopeDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeDefinedByType]:
        """
        Gets or sets the type of scope definition for the Source/Target scoping. Default: Value.
        """
        return None

    @property
    def SourceTargetScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets or sets the scoping method for the Source/Target scoping. Default: Label.
        """
        return None

    @property
    def SizeFieldDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeDefinedByType]:
        """
        Gets or sets how the control's size field pattern should be defined, either by "Value" or by "Outcome". The default value is "Value".
        """
        return None

    @property
    def SeedFaceScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets or sets the scoping method for the seed face scoping. Default: Label.
        """
        return None

    @property
    def SeedFaceScopeDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeDefinedByType]:
        """
        Gets or sets the type of scope definition for the seed face scoping. Default: Value 
        """
        return None

    @property
    def BaseFaceScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets or sets the scoping method for the base face scoping. Default: Label.
        """
        return None

    @property
    def BaseFaceScopeDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeDefinedByType]:
        """
        Gets or sets the type of scope definition for the base face scoping. Default: Value
        """
        return None

    @property
    def QuadBoundaryLayerFaceScopeDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeDefinedByType]:
        """
        Gets or sets the type of scope definition for the quad boundary layer face scoping. Default: Value
        """
        return None

    @property
    def QuadBoundaryLayerFaceScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets or sets the scoping method for the quad boundary layer face scoping. Default: Label.
        """
        return None

    @property
    def AutomaticExternalScope(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to define programmatically the external scoping method and pattern for the external enclosure. The default value is false.
        """
        return None

    @property
    def SmoothingPreserveVolume(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to enable and disable the volume preserving smoothing. If enabled, the smoothing will preserve the initial volume of the input. The default value is false.
        """
        return None

    @property
    def CreateFaceZone(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to create a new face zone.
        """
        return None

    @property
    def CreateQuadraticElements(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to create quadratic elements. The default value is false.
        """
        return None

    @property
    def ProjectSideFaces(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to project the side faces after the extrusion.
        """
        return None

    @property
    def TopologyConformalConnection(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to preserve the topology connection for the newly created faces. The default value is false.
        """
        return None

    @property
    def RestrictBoundaryNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to restrict the boundary nodes displacement. The default value is true.
        """
        return None

    @property
    def ProtectOnlyBoundaries(self) -> typing.Optional[bool]:
        """
        Gets or sets whether the topology protection flag is applied only to the exterior boundary of the scoped boundaries or not. Defaults to False.
        """
        return None

    @property
    def AppendData(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to append the mesh data being read to the current PrimeMesh model or to clear the model content before the mesh data is being read. The default value is false.
        """
        return None

    @property
    def RecomputeClosedVolumes(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to recompute closed volumes after the operation.
        """
        return None

    @property
    def RepairModel(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to repair the PrimeMesh model after the reading operation is executed. The default value is false.
        """
        return None

    @property
    def IgnoreOrientation(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to ignore the face normal orientation while calculating the proximity for the Proximity Sizing control. The default value is False.
        """
        return None

    @property
    def IgnoreSelfProximity(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to ignore the proximity between two faces from the same face zone while calculating the proximity for the Proximity Sizing control. The default value is True.
        """
        return None

    @property
    def ConformalMeshOnContactSurfaces(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to decide creation of conformal mesh at contact surfaces.
        """
        return None

    @property
    def Remesh(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to allow the remesh of already meshed volumes. The default value is false.
        """
        return None

    @property
    def RetainMeshedVolumes(self) -> typing.Optional[bool]:
        """
        Gets or sets whether existing mesh on the scoped volumes is to be retained or remeshed.
        """
        return None

    @property
    def DeleteInputScope(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to delete of input scope after wrapping. The default value is false.
        """
        return None

    @property
    def ExcludeEnclosure(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to exclude the enclosure from the wrapper scope . The default value is false.
        """
        return None

    @property
    def FaceZoneByPart(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to define an independent face zone for each input part.
        """
        return None

    @property
    def ReverseSurfaceOrientation(self) -> typing.Optional[bool]:
        """
        Reverse Surface Orientation. The default value is false.
        """
        return None

    @property
    def WrapByParts(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to wrap each part separately. The default value is false.
        """
        return None

    @property
    def ExcludeScopeOutcome(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshWorkflowOutcome]:
        """
        Gets or sets the scope outcome from a previous operation for the Hole Patching exclusion scoping. Applicable only if scope is defined by outcome.
        """
        return None

    @property
    def InputMeshScopeOutcome(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshWorkflowOutcome]:
        """
        Gets or sets the scope outcome for Input Mesh scoping from a previous operation. Applicable only if InputMeshScopeDefinition is set to Outcome.
        """
        return None

    @property
    def SourceTargetScopeOutcome(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshWorkflowOutcome]:
        """
        Gets or sets the scope outcome for the Source/Target scoping from a previous operation. Applicable only if SourceTargetScopeDefinition is set to Outcome.
        """
        return None

    @property
    def SizeFieldOutcome(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshWorkflowOutcome]:
        """
        Gets or sets the outcome to be used to define the size field pattern when SizeFieldDefinition is set to "Outcome".
        """
        return None

    @property
    def QuadBoundaryLayerFaceScopeOutcome(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshWorkflowOutcome]:
        """
        Gets or sets the scope outcome from a previous operation. Applicable only if 'QuadBoundaryLayerFaceScopeDefinition' is set to Outcome. 
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshWorkflowInput(object):
    """
    Object that wraps IDSEngineeringModelGeometryDomainAuto.
    """

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSEngineeringModelGeometryDomainAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshWorkflowOutput(object):
    """
    Object that wraps IDSEngineeringModelMeshDomainAuto.
    """

    @property
    def DataTransferType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.DataTransferType]:
        """
        
            Defines how the PrimeMesh model data should be transferred back into Geometry part(s) and associated mesh(es).
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSEngineeringModelMeshDomainAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def LabelsExcludeFilter(self) -> typing.Optional[str]:
        """
        Gets or sets the regular expression to match all labels that are excluded from the transfer. The exclude match removes also labels matching the include pattern. Applies when "TransferLabelsAsNamedSelections" is True.
        """
        return None

    @property
    def LabelsIncludeFilter(self) -> typing.Optional[str]:
        """
        Gets or sets the regular expression to match all labels that are included in the transfer as Named Selections. Applies when "TransferLabelsAsNamedSelections" is True.
        """
        return None

    @property
    def TransferPrescribedPointsLabelsAsNamedSelections(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to configure the transfer of Prescribed Points labels to Mechanical as Named Selections. All labels defined on Prescribed Points will be transferred as criteria based Named Selections scoping the corresponding mesh nodes.
        """
        return None

    @property
    def TransferLabelsAsNamedSelections(self) -> typing.Optional[bool]:
        """
        Gets or sets whether to configure the transfer of labels to Mechanical as Named Selections. If set to True, LabelsIncludeFilter must be set to define the whitelist of labels to be transferred, optionally LabelsExcludeFilter can be set to define a blacklist of labels to not be transferred. Only labels matching the LabelsIncludeFilter whitelist and not matching the LabelsExcludeFilter blacklist are transferred. This property is only visible when the DataTransferType is "ByTopology".
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshWorkflowStep(object):
    """
    Object that wraps IDSEngineeringModelGeometryOperationAuto.
    """

    @property
    def OperationType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.OperationType]:
        """
        
            Returns the type of the operation. .
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSEngineeringModelOperationAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def EnableCheckpoint(self) -> typing.Optional[bool]:
        """
        Gets or sets whether the checkpointing is enabled for the step.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def ClearDataAndDisableCheckpoint(self) -> None:
        """
        Clear checkpoint data and disable checkpointing for the step.
        """
        pass

    def AddControl(self, type: Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ControlType) -> Ansys.ACT.Automation.Mechanical.MeshWorkflowControl:
        """
        Adds a MeshWorkflowControl node as child node of the “Step” tree node. This control node can be created under any step node. This node is created to set properties that are required for executing an operation.
        """
        pass

    def AddOutcome(self, type: Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.OutcomeType) -> Ansys.ACT.Automation.Mechanical.MeshWorkflowOutcome:
        """
        Adds a MeshWorkflowOutcome node as child node of the “Step” tree node. This outcome node can be created under any step node. This node is created to see the results after executing an operation.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshWorkflowOutcome(object):
    """
    Object that wraps IDSEngineeringModelOutcome.
    """

    @property
    def OutcomeType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.OutcomeType]:
        """
        
            Returns the type of the control.
            
        """
        return None

    @property
    def BoundingBoxDimensions(self) -> typing.Optional[Ansys.Mechanical.Graphics.Point]:
        """
        Gets the bounding box extents of the input aligned along the direction of stacking.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSEngineeringModelOutcomeAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def FailureMessage(self) -> typing.Optional[str]:
        """
        Gets the failure message.
        """
        return None

    @property
    def MultiZoneDefeaturedEdges(self) -> typing.Optional[int]:
        """
        Gets the number of edges for which MultiZone Meshing output no mesh elements.
        """
        return None

    @property
    def MultiZoneDefeaturedEdgesScopePattern(self) -> typing.Optional[str]:
        """
        Gets the scope pattern for the MultiZone Defeatured Edges scope outcome.
        """
        return None

    @property
    def MultiZoneDefeaturedFaces(self) -> typing.Optional[int]:
        """
        Gets the number of faces for which MultiZone Meshing output no mesh elements.
        """
        return None

    @property
    def MultiZoneDefeaturedFacesScopePattern(self) -> typing.Optional[str]:
        """
        Gets the scope pattern for the MultiZone Defeatured Faces scope outcome.
        """
        return None

    @property
    def MultiZoneFailedBlocking(self) -> typing.Optional[int]:
        """
        Gets the number of entities (Volumes for 3D, Faces for 2D) for which the MultiZone Blocking failed.
        """
        return None

    @property
    def MultiZoneFailedBlockingScopePattern(self) -> typing.Optional[str]:
        """
        Gets the scope pattern for the MultiZone Failed Blocking scope outcome.
        """
        return None

    @property
    def MultiZoneFailedInflation(self) -> typing.Optional[int]:
        """
        Gets the number of entities (Volumes for 3D, Faces for 2D) for which the MultiZone Inflation failed.
        """
        return None

    @property
    def MultiZoneFailedInflationScopePattern(self) -> typing.Optional[str]:
        """
        Gets the scope pattern for the MultiZone Failed Inflation scope outcome.
        """
        return None

    @property
    def MultiZoneFailedInputMesh(self) -> typing.Optional[int]:
        """
        Gets the number of entities (Volumes for 3D, Faces for 2D) for which the MultiZone Meshing failed to conformally connect to the input mesh.
        """
        return None

    @property
    def MultiZoneFailedInputScopePattern(self) -> typing.Optional[str]:
        """
        Gets the scope pattern for the MultiZone Failed Input Mesh Connection scope outcome.
        """
        return None

    @property
    def MultiZoneFailedMesh(self) -> typing.Optional[int]:
        """
        Gets the number of entities (Volumes for 3D, Faces for 2D) for which the MultiZone Meshing failed to create a mesh.
        """
        return None

    @property
    def MultiZoneFailedMeshCheck(self) -> typing.Optional[int]:
        """
        Gets the number of entities (Volumes for 3D, Faces for 2D) for which the MultiZone Meshing created inverted or invalid elements.
        """
        return None

    @property
    def MultiZoneFailedMeshCheckScopePattern(self) -> typing.Optional[str]:
        """
        Gets the scope pattern for the MultiZone Failed Mesh Check scope outcome.
        """
        return None

    @property
    def MultiZoneFailedMeshScopePattern(self) -> typing.Optional[str]:
        """
        Gets the scope pattern for the MultiZone Failed Mesh scope outcome.
        """
        return None

    @property
    def MultiZoneFreeMesh(self) -> typing.Optional[int]:
        """
        Gets the number of entities (Volumes for 3D, Faces for 2D) for which the MultiZone Blocking failed to create a swept or mapped block.
        """
        return None

    @property
    def MultiZoneFreeMeshScopePattern(self) -> typing.Optional[str]:
        """
        Gets the scope pattern for the MultiZone Free Mesh scope outcome.
        """
        return None

    @property
    def ScopePattern(self) -> typing.Optional[str]:
        """
        Gets or sets the pattern that defines the scope of the control. Applicable only if scope is defined by value.
        """
        return None

    @property
    def SizeFieldName(self) -> typing.Optional[str]:
        return None

    @property
    def WarningMessage(self) -> typing.Optional[str]:
        """
        Gets the warning message.
        """
        return None

    @property
    def SmallestLateralEdgeLength(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the smallest edge length along the lateral direction of stacking.
        """
        return None

    @property
    def SmallestStackingEdgeLength(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the smallest edge length along the stacking direction.
        """
        return None

    @property
    def MultiZoneDefeaturedEdgesScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets the scope method for the MultiZone Defeatured Edges scope outcome.
        """
        return None

    @property
    def MultiZoneDefeaturedFacesScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets the scope method for the MultiZone Defeatured Faces scope outcome.
        """
        return None

    @property
    def MultiZoneFailedBlockingScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets the scope method for the MultiZone Failed Blocking scope outcome.
        """
        return None

    @property
    def MultiZoneFailedInflationScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets the scope method for the MultiZone Failed Inflation scope outcome.
        """
        return None

    @property
    def MultiZoneFailedInputScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets the scope method for the MultiZone Failed Input Mesh Connection scope outcome.
        """
        return None

    @property
    def MultiZoneFailedMeshCheckScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets the scope method for the MultiZone Failed Mesh Check scope outcome.
        """
        return None

    @property
    def MultiZoneFailedMeshScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets the scope method for the MultiZone Failed Mesh scope outcome.
        """
        return None

    @property
    def MultiZoneFreeMeshScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets the scope method for the MultiZone Free Mesh scope outcome.
        """
        return None

    @property
    def ScopeMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeType]:
        """
        Gets or sets the scoping method for the control scoping.
        """
        return None

    @property
    def ScopeDefinition(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.ScopeDefinedByType]:
        """
        Gets or sets the type of scope definition for the control scoping. Default: Value.
        """
        return None

    @property
    def ScopeOutcome(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshWorkflowOutcome]:
        """
        Gets or sets the scope outcome for the scoping scoping from a previous operation. Applicable only if scope is defined by outcome.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshWorkflowStepGroup(object):
    """
    Object that wraps IDSEngineeringModelWorkflow.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSEngineeringModelWorkflowAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def NumberOfAcousticLayers(self) -> typing.Optional[int]:
        """
        Gets or sets the number of layers in the acoustic region. If set to 0, the value defaults to 1 if QuadraticElements is enabled (see P:Ansys.ACT.Automation.Mechanical.MeshWorkflowStepGroup.QuadraticElements) or 2 otherwise.
        """
        return None

    @property
    def NumberOfPMLs(self) -> typing.Optional[int]:
        """
        Gets or sets the number of layers in the perfectly meshed layers region. If set to 0, the value defaults to 2 if QuadraticElements is enabled (see P:Ansys.ACT.Automation.Mechanical.MeshWorkflowStepGroup.QuadraticElements) or 4 otherwise.
        """
        return None

    @property
    def NumberOfCores(self) -> typing.Optional[int]:
        """
        Defines how many CPU cores to be used in an operation (if supported by the operation).
        """
        return None

    @property
    def BoundingBoxFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the bounding box factor applied to compute automatically the StackerMeshSize from the model. If set to 0, the default bouding box factor is used. 
        """
        return None

    @property
    def DirectionX(self) -> typing.Optional[float]:
        """
        Gets or sets the X component of stacking direction used by stacker operations , with respect to Global Coordinate System.
        """
        return None

    @property
    def DirectionY(self) -> typing.Optional[float]:
        """
        Gets or sets the Y component of stacking direction to be used in stacker steps, with respect to Global Coordinate System.
        """
        return None

    @property
    def DirectionZ(self) -> typing.Optional[float]:
        """
        Gets or sets the Z component of stacking direction to be used in stacker steps, with respect to Global Coordinate System.
        """
        return None

    @property
    def GrowthRate(self) -> typing.Optional[float]:
        """
        Gets or sets the growth rate of the mesh to be used in workflow steps. If set to 0, the default growth rate is used. 
        """
        return None

    @property
    def AnalysisFrequency(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Defines the analysis frequency of the acoustic scenario.
        """
        return None

    @property
    def SpeedOfSound(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Defines the speed of sound in the acoustic scenario.
        """
        return None

    @property
    def MeshSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Defines the mesh size of the acoustic scenario based on the wave velocity and the frequency.
        """
        return None

    @property
    def GlobalMeshSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the element size of the mesh to be used in workflow steps. If set to 0, the value is automatically defined based on the model size.
        """
        return None

    @property
    def CurvatureAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the curvature angle of the mesh to be used in workflow steps. If set to 0, the default curvature angle is used. 
        """
        return None

    @property
    def LateralDefeatureSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the defeature size to be used along the lateral direction of stacking in stacker operations.
        """
        return None

    @property
    def MaximumMeshSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the element size of the mesh to be used in workflow steps. If set to 0, the value is automatically defined based on the model size.
        """
        return None

    @property
    def MinimumMeshSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the minimal element size of the mesh to be used in workflow steps. If set to 0, the value is automatically defined based on the model size.
        """
        return None

    @property
    def NonStackableBodyMeshSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the element size to be used in meshing non-stackable bodies in stacker workflow.
        """
        return None

    @property
    def OriginX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the X coordinate location of base face for the volume flattening step.
        """
        return None

    @property
    def OriginY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Y coordinate location of base face for the volume flattening step.
        """
        return None

    @property
    def OriginZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Z coordinate location of base face for the volume flattening step.
        """
        return None

    @property
    def StackingDefeatureSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the defeature size to be used along the stacking direction in stacker operations.
        """
        return None

    @property
    def QuadraticElements(self) -> typing.Optional[bool]:
        """
        Defines if the quadratic elements are used for the mesh generation.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddStep(self, type: Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.OperationType) -> Ansys.ACT.Automation.Mechanical.MeshWorkflowStep:
        """
        Add another operation to the sequence of steps to be executed for the mesh workflow.
        """
        pass

    def DeleteAllStepsAndClearGeneratedData(self) -> None:
        """
        Deletes all steps and reset workflow type to undefined and also resets all inactive geometry parts/bodies to active again, clears the output data, and resets the state of the child objects (“Input”, “Steps”, “Output”) to the initial state. However, any user-defined settings such as the “Input” node scoping are retained.
        """
        pass

    def AddSettings(self, type: Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.SettingsType) -> None:
        """
        Add the settings of the input SettingsType to the Steps node.
        """
        pass

    def PropagateSettings(self, type: Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.SettingsType) -> None:
        """
        Propagate the settings of the input SettingsType to the attributes of the Step nodes. The meshing attributes of the Step nodes will then be automatically defined based on the physical parameters of the settings. Otherwise, the meshing attributes need to be manually specified.
        """
        pass

    def DeleteSettings(self, type: Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.SettingsType) -> None:
        """
        Delete the settings of the input SettingsType from the Steps node. All the Settings specific entries are removed automatically to the Steps details.
        """
        pass

    def ConvertSizingSettings(self, type: Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.SettingsType) -> None:
        """
        Convert the active sizing settings to the input SettingsType for the Steps node.
        """
        pass

    def ExecuteAllSteps(self) -> None:
        """
        Executes all steps defined under the “StepGroup” object (which is the “Steps” node in the UI). 
        """
        pass

    def ExecuteNextStep(self) -> None:
        """
        Executes the next step, i.e. the next operation which is ready to be executed under the parent “StepGroup” object.
        """
        pass

    def ExecuteUpToStep(self, arg: typing.Any) -> None:
        """
        Executes any not yet ready steps up to and including the specified step.
        """
        pass

    def RevertToStep(self, arg: typing.Any) -> None:
        """
        Revert to the specified step; if no checkpoint is available, then an exception will be raised.
        """
        pass

    def RevertToLastCheckpoint(self) -> None:
        """
        Revert to the last available checkpoint; if no checkpoint is available, then an exception will be raised.
        """
        pass

    def ClearDataAndDisableCheckpoints(self) -> None:
        """
        Clear all checkpoints data and disable checkpointing for the workflow.
        """
        pass

    def EnableAllCheckpoints(self) -> None:
        """
        Enables checkpoints for all editable steps in the workflow.
        """
        pass

    def DisableAllCheckpoints(self) -> None:
        """
        Disables checkpoints for all editable steps in the workflow.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshWorkflow(object):
    """
    Object that wraps IDSEngineeringModelWorkflowGroup.
    """

    @property
    def WorkflowType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.MeshWorkflow.WorkflowType]:
        """
        
            Returns the workflow type which is applicable to the Input, Steps, and Output.
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSEngineeringModelWorkflowGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ImportedWorkflowFilename(self) -> typing.Optional[str]:
        """
        The filename of the template.emx file that populated the workflow initially.
        """
        return None

    @property
    def UnitSystem(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.WBUnitSystemType]:
        """
        Defines the “unit system” of a Prime Model, if not defined, the unit system is deduced from the geometry at input data transfer time. 
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Generate(self) -> None:
        """
        Generates the desired data by executing the whole workflow, i.e., transferring the input data, executing all steps, and completing the workflow by transferring the output data back into Geometry and Mesh data.
        """
        pass

    def AddInput(self) -> Ansys.ACT.Automation.Mechanical.MeshWorkflowInput:
        """
        Adds an “Input” node as child object under the “Mesh Workflow” and returns the new MeshWorkflowInput object if not existent, otherwise it returns the already available MeshWorkflowInput object.
        """
        pass

    def AddOutput(self) -> Ansys.ACT.Automation.Mechanical.MeshWorkflowOutput:
        """
        Adds an “Output” node as child object under the “Mesh Workflow” and returns the new MeshWorkflowOutput object if not existent, otherwise it returns the already available MeshWorkflowOutput object.
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Clears all the generated data, i.e.,  It resets all inactive geometry parts/bodies to active again, clears the output data, and resets the state of the child objects (“Input”, “Steps”, “Output”) to the initial state. However, any user-defined settings such as the “Input” node scoping are retained.
        """
        pass

    def ClearOutputData(self) -> None:
        """
        Clears only the "Output" data, i.e., the generated Geometry part(s) and the associated mesh.
        """
        pass

    def FinalizeWorkflow(self) -> None:
        """
        Once all steps in a mesh workflow are completed successfully, the workflow can be completed which will transfer the generated data back into new Mechanical geometry part(s) together with the corresponding part mesh(es).
        """
        pass

    def InitializeWorkflow(self) -> None:
        """
        Initializes the mesh workflow by transferring the scoped geometry parts/bodies from Mechanical into the PrimeMesh model and updates the “Input” node state accordingly.
        """
        pass

    def ImportWorkflow(self, fileName: str) -> None:
        """
        Imports the steps from a template .emx file.
        """
        pass

    def ExportWorkflow(self, fileName: str) -> None:
        """
        Exports the steps as template into a .emx file.
        """
        pass

    def GetSolidSurfaceMeshQualityWarningLimit(self, meshMetric: Ansys.Mechanical.DataModel.Enums.MeshMetricType) -> Ansys.Core.Units.Quantity:
        """
        
             Get Mesh Quality Warning Limit
             
        """
        pass

    def GetAllLabelNames(self) -> typing.List[str]:
        """
        Gets all the PrimeMesh model labels names currently defined for the workflow.
        """
        pass

    def GetAllZoneNames(self) -> typing.List[str]:
        """
        Gets all the PrimeMesh model zones names currently defined for the workflow.
        """
        pass

    def GetAllPartNames(self) -> typing.List[str]:
        """
        Gets all the PrimeMesh model parts names currently defined for the workflow.
        """
        pass

    def GetAllSizeFieldNames(self) -> typing.List[str]:
        """
        Gets all the PrimeMesh model volumetric size field names currently defined for the workflow.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ExclusionRegion(object):

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSOptimizationRegionAuto]:
        """
        InternalObject property.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def LocalDesignRestrictionNature(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.TopoLocalDesignRestrictionNature]:
        """
        Gets or sets the LocalDesignRestrictionNature.
            This property enables you to specify geometry that the application does not optimize or 
            specific faces from which the application does not move any nodes vertically with respect to the original face. 
            Non-Optimizable option is the default.
            
        """
        return None

    @property
    def CoordinateSystemForDirection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the Coordinate system that is used to define a direction consummed for Directional Morphing LocalDesignRestrictionNature.
        """
        return None

    @property
    def AxisForDirection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the Axis of the CoordinateSystemForDirection that must be used as a direction Directional Morphing LocalDesignRestrictionNature.
        """
        return None

    @property
    def Material(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Material]:
        """
        Gets or sets the Material object imposed on the Selection.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ExclusionRegionLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the ExclusionRegionLocation.
        """
        return None

    @property
    def ExclusionScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ExclusionScopingMethod.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.ACT.Automation.Mechanical.DataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def MaxCumulatedDisplacementControl(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.TopoPropertyControlType]:
        """
        Gets or sets the MaxCumulatedDisplacementControl.
        """
        return None

    @property
    def MorphingTotalMoveLimit(self) -> typing.Optional[float]:
        """
        Gets or sets the MorphingTotalMoveLimit.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.ExclusionRegion) -> None:
        """
        
            Copies all visible properties from this object to another.
            Override because of copy order of properties
            
        """
        pass

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class FatigueCombination(object):
    """
    Defines a FatigueCombination.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSFatigueCombinationAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddDamage(self) -> Ansys.ACT.Automation.Mechanical.Results.FatigueToolResults.FatigueDamage:
        """
        Creates a new FatigueDamage
        """
        pass

    def EvaluateAllResults(self) -> None:
        """
        Run the EvaluateAllResults action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class FeatureDetection(object):
    """
    Defines a FeatureDetection.
    """

    @property
    def Definition(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.FeatureDetectionDefinition]:
        """
        Get the FeatureDetectionDefinition object.
            This object contains all the Feature Detection data like Fillets, Holes, Chamfers detection.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSFeatureDetectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def NamedSelection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.NamedSelection]:
        """
        Gets or sets the NamedSelection.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def DetectFeatures(self) -> None:
        """
        DetectFeatures method.
        """
        pass

    def EvaluateAllResults(self) -> None:
        """
        Run the EvaluateAllResults action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class FeatureDetectionDefinition(object):

    @property
    def FeatureDetectionCount(self) -> typing.Optional[int]:
        """
        
            Gets the number of Feature Detections
            
        """
        return None

    def AddFeatureDetection(self, name: str, type: int, criteria: int, fdOperator: int, critValue: float, angleValue: float, minBound: float, maxBound: float, meshTreatment: int) -> None:
        """
        
            Add a FeatureDetection to the FeatureDetection Definition
            
        """
        pass

    def DeleteFeatureDetection(self, index: int) -> None:
        """
        
            Delete a FeatureDetection from the Feature Detection Definition
            
        """
        pass

    def SetFeatureDetectionOptions(self, isSolid: bool, isSheet: bool, isBeta: bool) -> None:
        """
        
            Set Feature Detection Solid / Sheet / Beta settings
            isSolid>
            isSheet>
            isBeta>
            
        """
        pass

    def GetFeatureDetectionType(self, index: int) -> Ansys.Mechanical.DataModel.Enums.FeatureDetectionType:
        """
        
            Gets the Feature Detection Type property at given index
            
        """
        pass

    def SetFeatureDetectionType(self, index: int, value: Ansys.Mechanical.DataModel.Enums.FeatureDetectionType) -> None:
        """
        
            Sets the Feature Detection Type property at given index
            
        """
        pass

    def GetFeatureDetectionName(self, index: int) -> str:
        """
        
            Gets the FeatureDetection Name property at given index
            
        """
        pass

    def SetFeatureDetectionName(self, index: int, name: str) -> None:
        """
        
            Sets the FeatureDetection Name property at given index
            
        """
        pass

    def GetFeatureDetectionCriteria(self, index: int) -> Ansys.Mechanical.DataModel.Enums.FeatureDetectionCriteria:
        """
        
            Gets the Feature Detection Criteria property at given index
            
        """
        pass

    def SetFeatureDetectionCriteria(self, index: int, value: Ansys.Mechanical.DataModel.Enums.FeatureDetectionCriteria) -> None:
        """
        
            Sets the Feature Detection Criteria property at given index
            
        """
        pass

    def GetFeatureDetectionOperator(self, index: int) -> Ansys.Mechanical.DataModel.Enums.FeatureDetectionOperator:
        """
        
            Gets the Feature Detection Operator property at given index
            
        """
        pass

    def SetFeatureDetectionOperator(self, index: int, value: Ansys.Mechanical.DataModel.Enums.FeatureDetectionOperator) -> None:
        """
        
            Sets the Feature Detection Operator property at given index
            
        """
        pass

    def GetFeatureCriteriaValue(self, index: int) -> float:
        """
        
            Gets the Value property at given FeatureDetection index and BaseCase index 
            
        """
        pass

    def SetFeatureCriteriaValue(self, index: int, value: float) -> None:
        """
        
            Sets  the Value property at given FeatureDetection index and BaseCase index 
            
        """
        pass

    def GetFeatureCriteriaAngle(self, index: int) -> float:
        """
        
            Gets the Angle property at given FeatureDetection index and BaseCase index 
            
        """
        pass

    def SetFeatureCriteriaAngle(self, index: int, value: float) -> None:
        """
        
            Sets  the Angle property at given FeatureDetection index and BaseCase index 
            
        """
        pass

    def GetFeatureCriteriaMinBound(self, index: int) -> float:
        """
        
            Gets the Min Bound property at given FeatureDetection index and BaseCase index 
            
        """
        pass

    def SetFeatureCriteriaMinBound(self, index: int, value: float) -> None:
        """
        
            Sets  the Min Bound property at given FeatureDetection index and BaseCase index 
            
        """
        pass

    def GetFeatureCriteriaMaxBound(self, index: int) -> float:
        """
        
            Gets the Max-Bound property at given FeatureDetection index and BaseCase index 
            
        """
        pass

    def SetFeatureCriteriaMaxBound(self, index: int, value: float) -> None:
        """
        
            Sets  the Max Bound property at given FeatureDetection index and BaseCase index 
            
        """
        pass

    def GetFeatureDetectionTreatment(self, index: int) -> Ansys.Mechanical.DataModel.Enums.FeatureDetectionTreatment:
        """
        
            Gets the Feature Detection Criteria property at given index
            
        """
        pass

    def SetFeatureDetectionTreatment(self, index: int, value: Ansys.Mechanical.DataModel.Enums.FeatureDetectionTreatment) -> None:
        """
        
            Sets the Feature Detection Criteria property at given index
            
        """
        pass

    def ExecuteDetectFeatures(self) -> None:
        """
        ExecuteDetectFeatures method.
        """
        pass

    def Import(self, filepath: str) -> None:
        """
        
            Import Feature Detection Definition data from Comma Separated Value (CSV) files
            
        """
        pass

    def Export(self, filepath: str) -> None:
        """
        
            Export Feature Detection Definition data to Comma Separated Value (CSV) files
            
        """
        pass


class GeometryImport(object):
    """
    Defines a GeometryImport.
    """

    @property
    def Parts(self) -> typing.Optional[typing.List[typing.Any]]:
        """
        
            List of parts created by the most recent import operation.
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSGeometryImportAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GetGeometryURI(self) -> str:
        """
        
            Gets the Geometry URI for the most recent import. The Universal Resource Identifier,
            which on disk would be "file://..."
            
        """
        pass

    def GetFormat(self) -> Ansys.Mechanical.DataModel.Enums.GeometryImportPreference.Format:
        """
        
            Gets the format of the geometry file/data for the most recent import.
            
        """
        pass

    def GetPreferences(self) -> Ansys.ACT.Mechanical.Utilities.GeometryImportPreferences:
        """
        
            Gets the preferences for most recent import operations with the geometry file/data.
            
        """
        pass

    def Import(self, geometryURI: str, format: Ansys.Mechanical.DataModel.Enums.GeometryImportPreference.Format, preferences: Ansys.ACT.Mechanical.Utilities.GeometryImportPreferences) -> None:
        """
        
            Import/reload geometry from the CAD file using the provided preferences. *** If no
            preference argument is provided, i.e., null is used (also the default argument), then
            default values from Mechanical preferences will be used (Mechanical: File -> Options:
            Import; this will need to be implemented). Previously used preferences are always purged
            during an import operation. *** The parts will be read into the Geometry.
            
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class GeometryImportGroup(object):
    """
    Defines a GeometryImportGroup.
    """

    @property
    def Count(self) -> typing.Optional[int]:
        """
        
            Get the number of child 
        """
        return None

    @property
    def Item(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.GeometryImport]:
        """
        Item property.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSGeometryImportGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddGeometryImport(self) -> Ansys.ACT.Automation.Mechanical.GeometryImport:
        """
        
            Create the object for working with an imported part.
            
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class GlobalVonMisesStressConstraint(object):
    """
    Defines a GlobalVonMisesStressConstraint.
    """

    @property
    def Maximum(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the Maximum.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def StressType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.TopoConstraintStressType]:
        """
        Gets or sets the StressType.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class HousingConstraint(object):
    """
    Defines a HousingConstraint.
    """

    @property
    def HousingScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the HousingScopingMethod.
        """
        return None

    @property
    def HousingLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the HousingLocation.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImagePlane(object):
    """
    Defines a ImagePlane.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSAdvancedPostOutputAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ImageFilePath(self) -> typing.Optional[str]:
        """
        Gets the file path for the rendered image.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the coordinate system object used for defining the plane’s location and orientation.  This property is restricted to cartesian coordinate systems.
        """
        return None

    @property
    def CoordinateSystemVisible(self) -> typing.Optional[bool]:
        """
        Gets or sets whether the annotation for the image’s coordinate system is rendered.
        """
        return None

    @property
    def PixelWidth(self) -> typing.Optional[int]:
        """
        Gets the pixel width of the plane's image.
        """
        return None

    @property
    def PixelHeight(self) -> typing.Optional[int]:
        """
        Gets the pixel height of the plane's image.
        """
        return None

    @property
    def Width(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the physical width of the image plane.
        """
        return None

    @property
    def Height(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the physical height of the image plane.
        """
        return None

    @property
    def FlipHorizontally(self) -> typing.Optional[bool]:
        """
        Gets or sets whether the rendered image on the plane should be flipped horizontally.
        """
        return None

    @property
    def FlipVertically(self) -> typing.Optional[bool]:
        """
        Gets or sets whether the rendered image on the plane should be flipped vertically.
        """
        return None

    @property
    def Translucency(self) -> typing.Optional[int]:
        """
        Gets or sets the translucency of the plane, as a percentage ranging from 0 to 100.
        """
        return None

    @property
    def ShowAlways(self) -> typing.Optional[bool]:
        """
        Gets or sets whether the image plane will be shown independent of the active object in the tree.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def Import(self, filePath: str) -> None:
        """
        Sets the image which is rendered to this plane, specified by filePath.  Upon success, ImageFilePath will return filePath.  Upon failure, ImageFilePath will remain unchanged.  Supported file formats include PNG, JPEG, BMP, and GIF.  If this is the first time an image has been set to this image plane and if Width and Height were never modified, the image plane will be automatically sized based on the model’s bounding box, respecting the image’s aspect ratio.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MappingValidation(object):
    """
    Defines a MappingValidation.
    """

    @property
    def Type(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MappingValidationType]:
        """
        Type property.
        """
        return None

    @property
    def Display(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MappingValidationDisplayOption]:
        """
        Display property.
        """
        return None

    @property
    def LegendDivisions(self) -> typing.Optional[int]:
        """
        LegendDivisions property.
        """
        return None

    @property
    def IsolineThickness(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MappingIsolineThicknessType]:
        """
        IsolineThickness property.
        """
        return None

    @property
    def IsolineType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MappingIsolineLineType]:
        """
        IsolineType property.
        """
        return None

    @property
    def Scale(self) -> typing.Optional[float]:
        """
        Scale property.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMappingValidationAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ActiveSequence(self) -> typing.Optional[int]:
        """
        Gets or sets the ActiveSequence.
        """
        return None

    @property
    def ActiveSequenceByValue(self) -> typing.Optional[float]:
        """
        Gets or sets the ActiveSequenceByValue.
        """
        return None

    @property
    def BoundingTolerance(self) -> typing.Optional[float]:
        """
        Gets or sets the BoundingTolerance.
        """
        return None

    @property
    def FileIdentifierIndex(self) -> typing.Optional[int]:
        """
        Gets or sets the FileIdentifierIndex.
        """
        return None

    @property
    def Layer(self) -> typing.Optional[int]:
        """
        Gets or sets the Layer.
        """
        return None

    @property
    def DefineActiveSequenceBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ExternalLoadDefineActiveSequenceBy]:
        """
        Control whether the active sequenced is defined by row or by value.
        """
        return None

    @property
    def Component(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ExternalLoadDisplayComponentType]:
        """
        Gets or sets the Component.
        """
        return None

    @property
    def DisplayDataType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ExternalLoadDisplayDataType]:
        """
        Gets or sets the DisplayDataType.
        """
        return None

    @property
    def ShellFace(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ShellFaceType]:
        """
        Controls whether the displayed shell face lies on the bottom, middle, or top of the shell.
        """
        return None

    @property
    def ComplexComponent(self) -> typing.Optional[bool]:
        """
        Gets or sets the ComplexComponent.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Measures(object):
    """
    Defines a Measures.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMeasureGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def EvaluateAllResults(self) -> None:
        """
        Evaluate all measures.
        """
        pass

    def AddCompositeCriterion(self) -> Ansys.ACT.Automation.Mechanical.CompositeCriterion:
        """
        Creates a new CompositeCriterion
        """
        pass

    def AddPrimaryCriterion(self) -> Ansys.ACT.Automation.Mechanical.PrimaryCriterion:
        """
        Creates a new PrimaryCriterion
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshConnection(object):
    """
    Defines a MeshConnection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMeshConnectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def MasterElementSizeFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the MasterElementSizeFactor.
        """
        return None

    @property
    def ThicknessScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ThicknessScaleFactor.
        """
        return None

    @property
    def ToleranceValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ToleranceValue.
        """
        return None

    @property
    def ContactRegion(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Connections.ContactRegion]:
        """
        Gets or sets the ContactRegion.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        ScopingMethod property.
        """
        return None

    @property
    def ToleranceSlider(self) -> typing.Optional[int]:
        """
        Gets or sets the ToleranceSlider.
        """
        return None

    @property
    def MasterBodies(self) -> typing.Optional[str]:
        """
        Gets the MasterBodies.
        """
        return None

    @property
    def SlaveBodies(self) -> typing.Optional[str]:
        """
        Gets the SlaveBodies.
        """
        return None

    @property
    def SnapTolerance(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the SnapTolerance.
        """
        return None

    @property
    def ScopeMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets the ScopeMode.
        """
        return None

    @property
    def SnapType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SnapType]:
        """
        Gets or sets the SnapType.
        """
        return None

    @property
    def ToleranceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactToleranceType]:
        """
        Gets or sets the ToleranceType.
        """
        return None

    @property
    def SnapToBoundary(self) -> typing.Optional[bool]:
        """
        Gets or sets the SnapToBoundary.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def MasterLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the MasterLocation.
        """
        return None

    @property
    def SlaveLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the SlaveLocation.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def FlipMasterSlave(self) -> None:
        """
        FlipMasterSlave method.
        """
        pass

    def CreateNamedSelection(self) -> typing.Iterable[Ansys.ACT.Automation.Mechanical.NamedSelection]:
        """
        CreateNamedSelection method.
        """
        pass

    def Generate(self) -> None:
        """
        Run the Generate action.
        """
        pass

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshExtrude(object):
    """
    Pull method enables you to extrude or revolve element faces, topofaces or scoped bodies (only shell body) from a surface or solid mesh. Pull also allows to create surface coating on solid bodies, element faces and topofaces.
    """

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        
            Defines what type of selection this object is scoped to.
            
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Allows you to scope elements, element faces, topofaces and sheet bodies for Extrude or Revolve. Also, scopes element faces, topofaces and solid bodies for Surface Coating.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMeshExtrudeAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Material(self) -> typing.Optional[str]:
        """
        To select the material of your choice. You can also select a different material from the parent body material.
        """
        return None

    @property
    def NumberOfLayers(self) -> typing.Optional[int]:
        """
        To specify the number of layers to be used for Extrude and Revolve.
        """
        return None

    @property
    def Height(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        To specify the height for the volume of solid elements in the method of Extrude.
        """
        return None

    @property
    def RevolutionAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        To specify angle of revolution for the solid elements in the method of Revolve.
        """
        return None

    @property
    def FeatureAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        To specify feature angle for splitting side faces.
        """
        return None

    @property
    def Thickness(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        To specify the thickness for surface coating. The Thickness option is available only when the Stiffness Behavior is set to Membrane Only or Membrane and Bending.
        """
        return None

    @property
    def AxisOfRevolution(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        To select the coordinate axis along which the selected elements can be revolved. The available options are X Axis, Y Axis, Z Axis.
        """
        return None

    @property
    def ExtrudeBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ExtrudeBy]:
        """
        To specify the method of Extrude. The available options are Use Coordinate System and Face Normal.
        """
        return None

    @property
    def UseCoordinateSystem(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        The Use Coordinate System allows to select any of the XYZ coordinate axis in the method of Extrude.
        """
        return None

    @property
    def Method(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PullMethod]:
        """
        To select the method of Pull: Extrude (default), Revolve, Surface Coating and Line Coating.
        """
        return None

    @property
    def ElementOption(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SweepElementOptionType]:
        """
        Gets or sets the ElementOption.
        """
        return None

    @property
    def StiffnessOption(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ShellElementStiffnessOption]:
        """
        To provide the stiffness option of the shell body created by surface coating. The available options are Stress Evaluation Only, Membrane Only, Membrane and Bending.
        """
        return None

    @property
    def AutoRenameMeshPullBodies(self) -> typing.Optional[bool]:
        """
        Gets or sets whether generated Pull bodies will be renamed to match the source bodies’ names. If False, the typical names “Pull” or “Body” will be used. Default: True.
        """
        return None

    @property
    def UpTo(self) -> typing.Optional[bool]:
        """
        To generate elements up to the specified target. The target can be faces from solids or sheet bodies and multiple faces with sharing topo edge.
        """
        return None

    @property
    def MergeProfileNodes(self) -> typing.Optional[bool]:
        """
        To merge nodes on the profile body and pull generated body.
        """
        return None

    @property
    def NonlinearMaterialEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the NonlinearMaterialEffects.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        To suppress the selected entities. You can select Yes to suppress the selected entities and No to unsuppress the selected entities. The default value is No.
        """
        return None

    @property
    def ThermalStrainCalculation(self) -> typing.Optional[bool]:
        """
        Gets or sets the ThermalStrainCalculation.
        """
        return None

    @property
    def UseFeatureAngle(self) -> typing.Optional[bool]:
        """
        To split side faces by speficied feature angle.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        To generate elements in the specified coordinate system. The Coordinate System allows to select the Global Coordinate System by default.
        """
        return None

    @property
    def UpToTarget(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        The target can be faces from solids or sheet bodies and multiple faces with sharing topoedge in Extrude UpTo.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Generate(self) -> None:
        """
        Generate selected mesh pull.
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Clear generated data.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Model(object):
    """
    Defines a Model.
    """

    @property
    def Environments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Analysis]]:
        """
        Gets the Analyses.
        """
        return None

    @property
    def CellId(self) -> typing.Optional[str]:
        """
        Gets the CellId.
        """
        return None

    @property
    def SystemCaption(self) -> typing.Optional[str]:
        """
        Gets the SystemCaption.
        """
        return None

    @property
    def AEDTImportManager(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.AEDTImportManager]:
        """
        Get the manager for manipulating import settings for AEDT files.
        """
        return None

    @property
    def TableGroup(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.TableGroup]:
        """
        Gets the TableGroup.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSModelAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Ambient(self) -> typing.Optional[float]:
        """
        Gets or sets the Ambient Lighting factor.
        """
        return None

    @property
    def Color(self) -> typing.Optional[int]:
        """
        Gets or sets the Lighting Color. Can also be set using Hex color codes; three byte hexadecimal numbers (consisting of six digits) preceded by '0x', where each byte (or pair of characters in the Hex code) represents the intensity of red, green and blue in the color respectively. For example, 0xFFFFFF.
        """
        return None

    @property
    def Diffuse(self) -> typing.Optional[float]:
        """
        Gets or sets the Diffuse Lighting factor.
        """
        return None

    @property
    def Control(self) -> typing.Optional[str]:
        """
        Gets the Control.
        """
        return None

    @property
    def Specular(self) -> typing.Optional[float]:
        """
        Gets or sets the Specular Lighting factor.
        """
        return None

    @property
    def AMProcess(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.AdditiveManufacturing.AMProcess]:
        """
        Gets the AMProcess.
        """
        return None

    @property
    def NamedSelections(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.NamedSelections]:
        """
        Gets the NamedSelections.
        """
        return None

    @property
    def CondensedGeometry(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CondensedGeometry]:
        """
        Gets the CondensedGeometry.
        """
        return None

    @property
    def ConstructionGeometry(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.ConstructionGeometry]:
        """
        Gets the ConstructionGeometry.
        """
        return None

    @property
    def Connections(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Connections.Connections]:
        """
        Gets the Connections.
        """
        return None

    @property
    def CoordinateSystems(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystems]:
        """
        Gets the CoordinateSystems.
        """
        return None

    @property
    def CrossSections(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CrossSections]:
        """
        Gets the CrossSections.
        """
        return None

    @property
    def FeatureDetection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.FeatureDetection]:
        """
        Gets the FeatureDetection.
        """
        return None

    @property
    def Fracture(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Fracture]:
        """
        Gets the Fracture.
        """
        return None

    @property
    def GeometryImportGroup(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.GeometryImportGroup]:
        """
        Gets the GeometryImportGroup.
        """
        return None

    @property
    def Materials(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Materials]:
        """
        Gets the Materials.
        """
        return None

    @property
    def Measures(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Measures]:
        """
        Gets the Measures.
        """
        return None

    @property
    def MeshEdit(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshEdit]:
        """
        Gets the MeshEdit.
        """
        return None

    @property
    def Mesh(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshControls.Mesh]:
        """
        Gets the Mesh.
        """
        return None

    @property
    def MeshNumbering(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshNumbering]:
        """
        Gets the MeshNumbering.
        """
        return None

    @property
    def PartTransformGroup(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.PartTransformGroup]:
        """
        Gets the PartTransformGroup.
        """
        return None

    @property
    def Geometry(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Geometry]:
        """
        Gets the Geometry.
        """
        return None

    @property
    def RemotePoints(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.RemotePoints]:
        """
        Gets the RemotePoints.
        """
        return None

    @property
    def Symmetry(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Symmetry]:
        """
        Gets the Symmetry.
        """
        return None

    @property
    def VirtualTopology(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.VirtualTopology]:
        """
        Gets the VirtualTopology.
        """
        return None

    @property
    def Analyses(self) -> typing.Optional[typing.List[Ansys.ACT.Automation.Mechanical.Analysis]]:
        """
        Gets the Analyses.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def CreateCylindricalBolt(self, headHeight: typing.Any, headRadius: typing.Any, shankLength: typing.Any, shankRadius: typing.Any) -> Ansys.ACT.Interfaces.Geometry.IGeoPart:
        """
        
            Create bolt with a cylinder head based on the specified dimensions. The bolt will be
            created so that the base of the head is at the origin and aligned with the Y-Z plane.
            Valid input arguments include:
              1) `double`
              2) `Quantity`
              3) A string representation of `double` or `Quantity`, i.e., "1.0" or "1.0 [cm]"
            
        """
        pass

    def CreateCylindricalNut(self, height: typing.Any, innerRadius: typing.Any, outerRadius: typing.Any) -> Ansys.ACT.Interfaces.Geometry.IGeoPart:
        """
        
            Create a cylindrical nut with the specified dimensions. The nut will be created so that
            the base of the nut is at the origin and aligned with the Y-Z plane.
            Valid input arguments include:
              1) `double`
              2) `Quantity`
              3) A string representation of `double` or `Quantity`, i.e., "1.0" or "1.0 [cm]"
            
        """
        pass

    def CreateHexBolt(self, headHeight: typing.Any, wrenchWidth: typing.Any, shankLength: typing.Any, shankRadius: typing.Any) -> Ansys.ACT.Interfaces.Geometry.IGeoPart:
        """
        
            Create a bolt with a hex head based on the specified dimensions. The bolt will be
            created so that the base of the head is at the origin and aligned with the Y-Z plane.
            Valid input arguments include:
              1) `double`
              2) `Quantity`
              3) A string representation of `double` or `Quantity`, i.e., "1.0" or "1.0 [cm]"
            
        """
        pass

    def CreateHexNut(self, height: typing.Any, innerRadius: typing.Any, wrenchWidth: typing.Any) -> Ansys.ACT.Interfaces.Geometry.IGeoPart:
        """
        
            Create a hex nut with the specified dimensions. The nut will be created so that the
            base of the nut is at the origin and aligned with the Y-Z plane.
            Valid input arguments include:
              1) `double`
              2) `Quantity`
              3) A string representation of `double` or `Quantity`, i.e., "1.0" or "1.0 [cm]"
            
        """
        pass

    def CreatePartInstance(self, part: Ansys.ACT.Interfaces.Geometry.IGeoPart) -> Ansys.ACT.Interfaces.Geometry.IGeoPart:
        """
        
            This will create an instance (not an independent copy) of the provided part. The use of
            instanced parts for replication is highly recommended for memory and performance
            reasons.
            
        """
        pass

    def GetTransformationOnPart(self, part: Ansys.ACT.Interfaces.Geometry.IGeoPart) -> Ansys.Mechanical.DataModel.Utilities.RigidBodyTransformationMatrix:
        """
        
            Get the transformation matrix of the provided part.
            
        """
        pass

    def SetTransformationOnPart(self, part: Ansys.ACT.Interfaces.Geometry.IGeoPart, transformationMatrix: Ansys.Mechanical.DataModel.Utilities.RigidBodyTransformationMatrix) -> None:
        """
        
            Transform a part with given transformation. Only rigid body transformation is
            supported, i.e., no scaling will be performed. The validity of “transformationMatrix”
            will be checked against the constraints of rigid body transforms; an error will be
            emitted if the matrix is ill-formed.
            
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def AddRemotePoint(self) -> Ansys.ACT.Automation.Mechanical.RemotePoint:
        """
        Creates a new child RemotePoint.
        """
        pass

    def Solve(self, wait: bool, config: str) -> None:
        """
        Run the Solve action.
        """
        pass

    def Solve(self, wait: bool, config: Ansys.ACT.Mechanical.Application.SolveProcessSettings.SolveConfiguration) -> None:
        """
        Run the Solve action.
        """
        pass

    def GetResults(self) -> None:
        """
        Gets the Results from the server.
        """
        pass

    def AddStaticStructuralAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddStaticStructuralAnalysis action.
        """
        pass

    def AddTransientStructuralAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddTransientStructuralAnalysis action.
        """
        pass

    def AddRigidDynamicsAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddRigidDynamicsAnalysis action.
        """
        pass

    def AddHarmonicResponseAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddHarmonicResponseAnalysis action.
        """
        pass

    def AddModalAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddModalAnalysis action.
        """
        pass

    def AddSubstructureGenerationAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddSubstructureGenerationAnalysis action.
        """
        pass

    def AddExplicitDynamicsAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddExplicitDynamicsAnalysis action.
        """
        pass

    def AddSteadyStateThermalAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddSteadyStateThermalAnalysis action.
        """
        pass

    def AddTransientThermalAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddTransientThermalAnalysis action.
        """
        pass

    def AddMagnetostaticAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddMagnetostaticAnalysis action.
        """
        pass

    def AddElectricAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddElectricAnalysis action.
        """
        pass

    def AddDesignAssessmentAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddDesignAssessmentAnalysis action.
        """
        pass

    def AddThermalElectricAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddThermalElectricAnalysis action.
        """
        pass

    def AddModalAcousticAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddModalAcousticAnalysis action.
        """
        pass

    def AddHarmonicAcousticAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddHarmonicAcousticAnalysis action.
        """
        pass

    def AddStaticAcousticAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddStaticAcousticAnalysis action.
        """
        pass

    def AddTopologyOptimizationAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddTopologyOptimizationAnalysis action.
        """
        pass

    def AddEigenvalueBucklingAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddEigenvalueBucklingAnalysis action.
        """
        pass

    def AddResponseSpectrumAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddResponseSpectrumAnalysis action.
        """
        pass

    def AddRandomVibrationAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddRandomVibrationAnalysis action.
        """
        pass

    def AddCoupledFieldStatic(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddCoupledFieldStatic action.
        """
        pass

    def AddCoupledFieldTransient(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddCoupledFieldTransient action.
        """
        pass

    def AddCoupledFieldHarmonic(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddCoupledFieldHarmonic action.
        """
        pass

    def AddCoupledFieldModal(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddCoupledFieldModal action.
        """
        pass

    def AddLSDynaAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddLSDynaAnalysis action.
        """
        pass

    def AddLSDynaRestartAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddLSDynaRestartAnalysis action.
        """
        pass

    def AddMotionAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddMotionAnalysis action.
        """
        pass

    def AddDesignLifeAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddDesignLifeAnalysis action.
        """
        pass

    def AddForcedResponseAnalysis(self) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Run the AddForcedResponseAnalysis action.
        """
        pass

    def UpdateGeometryFromSource(self) -> None:
        """
        Run the UpdateGeometryFromSource action.
        """
        pass

    def RefreshMaterials(self) -> None:
        """
        Run the RefresMaterials action.
        """
        pass

    def LoadResultFile(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Solution:
        """
        Creates a results-only system and loads the result file.
        """
        pass

    def AutoFilter(self) -> None:
        """
        Enables interface filtering that only displays model-level items applicable to the
            particular analysis type environments in which you are working.
        """
        pass

    def DisableFilter(self) -> None:
        """
        Disables interface filtering so that model-level items are not filtered out based on
            the environment types in your model.
        """
        pass

    def AddNamedSelectionFromSelectedConnections(self) -> typing.List[Ansys.ACT.Automation.Mechanical.NamedSelection]:
        """
        Creates a new Named Selections (Components) for the selected connections.
        """
        pass

    def AddNamedSelection(self) -> Ansys.ACT.Automation.Mechanical.NamedSelection:
        """
        Creates a new child NamedSelection.
        """
        pass

    def AddPartTransform(self) -> Ansys.ACT.Automation.Mechanical.PartTransform:
        """
        Creates a new child PartTransform.
        """
        pass

    def GetFECommandsRepository(self, source: str, fileIdentifier: str) -> Ansys.ACT.Automation.Mechanical.FE.CommandRepository:
        """
        Gets the commands repository for a file from external model.
        """
        pass

    def AddChart(self) -> Ansys.ACT.Automation.Mechanical.Chart:
        """
        Creates a new child Chart.
        """
        pass

    def DeleteParts(self, parts: typing.Any) -> None:
        """
        Deletes the provide parts if they exist. Otherwise, nothing happens. An exception will be issued if the argument is invalid.
        """
        pass

    def FreezeMeshOnSelectedParts(self, parts: typing.Any) -> None:
        """
        Run the FreezeMeshOnSelectedParts action.
        """
        pass

    def UnfreezeMeshOnSelectedParts(self, parts: typing.Any) -> None:
        """
        Run the UnfreezeMeshOnSelectedParts action.
        """
        pass

    def AddCondensedGeometry(self) -> Ansys.ACT.Automation.Mechanical.CondensedGeometry:
        """
        Creates a new CondensedGeometry
        """
        pass

    def AddMeasures(self) -> Ansys.ACT.Automation.Mechanical.Measures:
        """
        Creates a new Measures
        """
        pass

    def AddConnections(self) -> Ansys.ACT.Automation.Mechanical.Connections.Connections:
        """
        Creates a new Connections
        """
        pass

    def AddCrossSections(self) -> Ansys.ACT.Automation.Mechanical.CrossSections:
        """
        Creates new CrossSections group.
        """
        pass

    def AddConstructionGeometry(self) -> Ansys.ACT.Automation.Mechanical.ConstructionGeometry:
        """
        Creates a new ConstructionGeometry
        """
        pass

    def AddAMProcess(self) -> Ansys.ACT.Automation.Mechanical.AdditiveManufacturing.AMProcess:
        """
        Creates a new AMProcess
        """
        pass

    def AddFracture(self) -> Ansys.ACT.Automation.Mechanical.Fracture:
        """
        Creates a new Fracture
        """
        pass

    def AddGeometryImportGroup(self) -> Ansys.ACT.Automation.Mechanical.GeometryImportGroup:
        """
        
            Get the 
        """
        pass

    def AddTableGroup(self, activate: bool) -> Ansys.ACT.Automation.Mechanical.TableGroup:
        """
        
            Get the 
        """
        pass

    def AddMeshEdit(self) -> Ansys.ACT.Automation.Mechanical.MeshEdit:
        """
        Creates a new MeshEdit
        """
        pass

    def AddMeshNumbering(self) -> Ansys.ACT.Automation.Mechanical.MeshNumbering:
        """
        Creates a new MeshNumbering
        """
        pass

    def AddSymmetry(self) -> Ansys.ACT.Automation.Mechanical.Symmetry:
        """
        Creates a new Symmetry
        """
        pass

    def AddVirtualTopology(self) -> Ansys.ACT.Automation.Mechanical.VirtualTopology:
        """
        Creates a new VirtualTopology
        """
        pass

    def AddCoSimulationPin(self) -> Ansys.ACT.Automation.Mechanical.CoSimulationPin:
        """
        Creates a new CoSimulationPin
        """
        pass

    def AddImagePlane(self) -> Ansys.ACT.Automation.Mechanical.ImagePlane:
        """
        Creates an ImagePlane and adds it as a child of this object.
        """
        pass

    def EvaluateScriptDefinedResults(self) -> None:
        """
        EvaluateScriptDefinedResults method.
        """
        pass

    def AddTreeGroupingFolder(self, dataModelObjects: typing.Iterable) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        
            Move the Data Model Objects to a new TreeGroupingFolder.
            
        """
        pass

    def AddTreeGroupingFolder(self, dataModelObject: Ansys.Mechanical.DataModel.Interfaces.IDataModelObject) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        
            Move the Data Model Object to a new TreeGroupingFolder.
            
        """
        pass

    def CenterOfMass(self) -> Ansys.Core.Units.Quantity:
        """
        Calculates the center of mass of all unsupressed bodies and point masses.
        """
        pass

    def AddCompositeFailureCriteria(self) -> Ansys.ACT.Automation.Mechanical.Results.CompositeFailureResults.CompositeFailureCriteria:
        """
        Creates a new Composite Failure Criteria object.
        """
        pass

    def AddFatigueCombination(self) -> Ansys.ACT.Automation.Mechanical.FatigueCombination:
        """
        Creates a new FatigueCombination
        """
        pass

    def AddFeatureDetection(self) -> Ansys.ACT.Automation.Mechanical.FeatureDetection:
        """
        Creates a new FeatureDetection
        """
        pass

    def AddPythonCodeEventBased(self) -> Ansys.ACT.Automation.Mechanical.PythonCodeEventBased:
        """
        Creates a new PythonCodeEventBased
        """
        pass

    def AddPythonResult(self) -> Ansys.ACT.Automation.Mechanical.Results.ScriptableResults.PythonResult:
        """
        Creates a new PythonResult
        """
        pass

    def AddSolutionCombination(self) -> Ansys.ACT.Automation.Mechanical.SolutionCombination:
        """
        Creates a new SolutionCombination
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ModelImport(object):
    """
    Defines a ModelImport.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSModelImportAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ElementComponentKey(self) -> typing.Optional[str]:
        """
        Gets or sets the ElementComponentKey.
        """
        return None

    @property
    def ElementOffset(self) -> typing.Optional[int]:
        """
        Gets or sets the ElementOffset.
        """
        return None

    @property
    def FaceComponentKey(self) -> typing.Optional[str]:
        """
        Gets or sets the FaceComponentKey.
        """
        return None

    @property
    def GeometryComponentKey(self) -> typing.Optional[str]:
        """
        Gets or sets the GeometryComponentKey.
        """
        return None

    @property
    def ModelImportSourceFilePath(self) -> typing.Optional[str]:
        """
        Gets or sets the ModelImportSourceFilePath.
        """
        return None

    @property
    def NodalComponentKey(self) -> typing.Optional[str]:
        """
        Gets or sets the NodalComponentKey.
        """
        return None

    @property
    def NodeOffset(self) -> typing.Optional[int]:
        """
        Gets or sets the NodeOffset.
        """
        return None

    @property
    def SourceIdentifier(self) -> typing.Optional[str]:
        """
        Gets the SourceIdentifier.
        """
        return None

    @property
    def ToleranceAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ToleranceAngle.
        """
        return None

    @property
    def VertexInsertionAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the VertexInsertionAngle.
        """
        return None

    @property
    def AnalysisTypeDimensionSetting(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AnalysisTypeDimensionEnum]:
        """
        Gets or sets the AnalysisTypeDimensionSetting.
        """
        return None

    @property
    def ApplicationSourceSetting(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ApplicationSourceEnum]:
        """
        Gets the ApplicationSourceSetting.
        """
        return None

    @property
    def NodeAndElementRenumberingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.NodeAndElementRenumberingMethodType]:
        """
        Gets or sets the NodeAndElementRenumberingMethod.
        """
        return None

    @property
    def UnitSystemTypeForImport(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ModelImportUnitSystemType]:
        """
        Gets or sets the UnitSystemTypeForImport.
        """
        return None

    @property
    def BodyGroupByAnsysElmTypeNumber(self) -> typing.Optional[bool]:
        """
        Gets or sets the BodyGroupByAnsysElmTypeNumber.
        """
        return None

    @property
    def BodyGroupByMaterialNumber(self) -> typing.Optional[bool]:
        """
        Gets or sets the BodyGroupByMaterialNumber.
        """
        return None

    @property
    def BodyGroupByThickness(self) -> typing.Optional[bool]:
        """
        Gets or sets the BodyGroupByThickness.
        """
        return None

    @property
    def CreateGeometry(self) -> typing.Optional[bool]:
        """
        Gets or sets the CreateGeometry.
        """
        return None

    @property
    def CreateGeometryEdgeComponents(self) -> typing.Optional[bool]:
        """
        Gets or sets the CreateGeometryEdgeComponents.
        """
        return None

    @property
    def CreateGeometryFaceComponents(self) -> typing.Optional[bool]:
        """
        Gets or sets the CreateGeometryFaceComponents.
        """
        return None

    @property
    def CreateGeometryVertexComponent(self) -> typing.Optional[bool]:
        """
        Gets or sets the CreateGeometryVertexComponent.
        """
        return None

    @property
    def ImportMaterials(self) -> typing.Optional[bool]:
        """
        Gets or sets the ImportMaterials.
        """
        return None

    @property
    def MaterialConsolidation(self) -> typing.Optional[bool]:
        """
        Gets or sets the MaterialConsolidation.
        """
        return None

    @property
    def ProcessElementComponents(self) -> typing.Optional[bool]:
        """
        Gets or sets the ProcessElementComponents.
        """
        return None

    @property
    def ProcessFaceComponents(self) -> typing.Optional[bool]:
        """
        Gets or sets the ProcessFaceComponents.
        """
        return None

    @property
    def ProcessLineBodies(self) -> typing.Optional[bool]:
        """
        Gets or sets the ProcessLineBodies.
        """
        return None

    @property
    def ProcessMesh200Elms(self) -> typing.Optional[bool]:
        """
        Gets or sets the ProcessMesh200Elms.
        """
        return None

    @property
    def ProcessModelData(self) -> typing.Optional[bool]:
        """
        Gets or sets the ProcessModelData.
        """
        return None

    @property
    def ProcessNodalComponents(self) -> typing.Optional[bool]:
        """
        Gets or sets the ProcessNodalComponents.
        """
        return None

    @property
    def ProcessValidBlockedCDBFile(self) -> typing.Optional[bool]:
        """
        Gets or sets the ProcessValidBlockedCDBFile.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class NamedSelections(object):
    """
    Defines a NamedSelections.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSComponentGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def GenerateOnRefresh(self) -> typing.Optional[bool]:
        """
        Gets or sets the GenerateOnRefresh.
        """
        return None

    @property
    def GenerateOnRemesh(self) -> typing.Optional[bool]:
        """
        Gets or sets the GenerateOnRemesh.
        """
        return None

    @property
    def RandomColors(self) -> typing.Optional[bool]:
        """
        Gets the RandomColors.
        """
        return None

    @property
    def ShowAnnotations(self) -> typing.Optional[bool]:
        """
        Gets or sets the ShowAnnotations.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def ExportNamedSelectionToCDBFile(self, filepath: str) -> None:
        """
        Export Named Selections to CDB file
        """
        pass

    def GenerateAllNamedSelections(self) -> None:
        """
        Generate all named selections specified with the Worksheet
        """
        pass

    def GoToNamedSelectionsCommonToSelection(self) -> None:
        """
        GoToNamedSelectionsCommonToSelection method.
        """
        pass

    def GoToNamedSelectionsContainingSelection(self) -> None:
        """
        GoToNamedSelectionsContainingSelection method.
        """
        pass

    def AddNamedSelection(self) -> Ansys.ACT.Automation.Mechanical.NamedSelection:
        """
        Creates a new NamedSelection
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ParameterVariable(object):
    """
    Defines a ParameterVariable.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSParameterVariableAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ParameterVariableGroup(object):
    """
    Defines a ParameterVariableGroup.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSParameterVariableGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddParameterVariable(self) -> Ansys.ACT.Automation.Mechanical.ParameterVariable:
        """
        
            Create the object for working with an imported part.
            
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PatternRepetitionConstraint(object):
    """
    Defines a PatternRepetitionConstraint.
    """

    @property
    def Axis(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the Axis used for repetition. Only positive direction enums will be accepted ("PositiveXAxis", "PositiveYAxis", "PositiveXAxis"). 
            InvalidArgumentException: Any unsupported enum value.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Offset(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Offset.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PullOutDirectionManufacturingConstraint(object):
    """
    Defines a PullOutDirectionManufacturingConstraint.
    """

    @property
    def Axis(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the Axis for pullout direction. Only positive direction enums will be accepted ("PositiveXAxis", "PositiveYAxis", "PositiveXAxis"). 
            InvalidArgumentException: Any unsupported enum value.
        """
        return None

    @property
    def PartingSurfacePlane(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the normal axis to the parting surface plane. Only positive direction enums will be accepted ("PositiveXAxis", "PositiveYAxis", "PositiveXAxis"). 
            InvalidArgumentException: Any unsupported enum value.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def PartingSurfaceControl(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PartingSurfaceControl]:
        """
        Gets or sets the control strategy for the parting surface.
        """
        return None

    @property
    def Subtype(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PullOutConstraintSubtype]:
        """
        Gets or sets the Subtype.
        """
        return None

    @property
    def Direction(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PullOutDirectionType]:
        """
        Gets or sets the Direction.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def PartingSurfaceCoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the Coordinate system used to define the parting plane
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PythonCode(object):
    """
    Defines a PythonCode.
    """

    @property
    def Text(self) -> typing.Optional[str]:
        """
        Gets or sets the text in the script tab for the Python Code object.
        """
        return None

    @property
    def PropertyProvider(self) -> typing.Optional[Ansys.ACT.Interfaces.Mechanical.IPropertyProvider]:
        """
        
            Gets or sets the propperty provider instance associated with this python code object.
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPythonCodeAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ScriptExecutionScope(self) -> typing.Optional[str]:
        """
        The scope identifier in which the code execution will take place.
        """
        return None

    @property
    def AllowRecursion(self) -> typing.Optional[bool]:
        """
        Gets or Sets whether the PythonCode allows recursion.
        """
        return None

    @property
    def Connected(self) -> typing.Optional[bool]:
        """
        Gets whether the callbacks are currently connected.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def ReloadProperties(self) -> None:
        """
        
            Reload properties to update properties provided by the provider.
            
        """
        pass

    def Connect(self) -> None:
        """
        
            Register the python code.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        Duplicate method.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class RemotePoints(object):
    """
    Defines a RemotePoints.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSRemotePointGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddRemotePoint(self) -> Ansys.ACT.Automation.Mechanical.RemotePoint:
        """
        Creates a new RemotePoint
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ResponsePSDTool(object):
    """
    Defines a ResponsePSDTool.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSResponsePSDToolAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ClusteringFrequencyPoints(self) -> typing.Optional[int]:
        """
        Gets or sets the ClusteringFrequencyPoints.
        """
        return None

    @property
    def IncludeAllExcitationFrequencies(self) -> typing.Optional[bool]:
        """
        Gets or sets the IncludeAllExcitationFrequencies.
        """
        return None

    @property
    def IncludeUserDefinedFrequencies(self) -> typing.Optional[bool]:
        """
        Gets or sets the IncludeUserDefinedFrequencies.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def EvaluateAllResults(self) -> None:
        """
        Run the EvaluateAllResults action.
        """
        pass

    def AddResponsePSD(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.ResponsePSD:
        """
        Creates a new ResponsePSD
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ResultMesh(object):
    """
    Defines a ResultMesh.
    """

    @property
    def FEBodies(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Part]:
        """
        Gets FE Bodies
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExtraMeshAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ConfigurationId(self) -> typing.Optional[int]:
        """
        Gets the ConfigurationId.
        """
        return None

    @property
    def Elements(self) -> typing.Optional[int]:
        """
        Gets the Elements.
        """
        return None

    @property
    def Nodes(self) -> typing.Optional[int]:
        """
        Gets the Nodes.
        """
        return None

    @property
    def SourceFile(self) -> typing.Optional[str]:
        """
        Gets the SourceFile.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Generate(self) -> None:
        """
        Generate the mesh data
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Clear the generated mesh data
        """
        pass

    def AddNamedSelection(self) -> Ansys.ACT.Automation.Mechanical.NamedSelection:
        """
        Creates a new NamedSelection
        """
        pass

    def ImportComponentsFromResultFile(self) -> None:
        """
        Import solver components from result file
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Stage(object):
    """
    Defines a Stage.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSStageAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def StageName(self) -> typing.Optional[str]:
        """
        Gets the StageName.
        """
        return None

    @property
    def Behavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.StageBehavior]:
        """
        Gets the Behavior.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CyclicRegion(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.SymmetryGeneral]:
        """
        Gets or sets the CyclicRegion.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GetHarmonicIndexNumberForEnvironment(self, envId: int) -> int:
        """
        
            Gets the worksheet number of harmonic indexes for a given environment.
            
        """
        pass

    def SetHarmonicIndexNumberForEnvironment(self, envId: int, newVal: int) -> None:
        """
        
            Sets the worksheet number of harmonic indexes for a given environment.
            
        """
        pass

    def GetHarmonicIndexForEnvironmentByIndex(self, envId: int, index: int) -> int:
        """
        
            Gets the worksheet harmonic index for a given environment at index.
            
        """
        pass

    def SetHarmonicIndexForEnvironmentByIndex(self, envId: int, index: int, newVal: int) -> None:
        """
        
            Sets the worksheet harmonic index for a given environment at index.
            
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class SymmetryManufacturingConstraint(object):
    """
    Defines a SymmetryManufacturingConstraint.
    """

    @property
    def Axis(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the normal axis to the Symmetry plane. Only positive direction enums will be accepted ("PositiveXAxis", "PositiveYAxis", "PositiveXAxis"). 
            InvalidArgumentException: Any unsupported enum value.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Table(object):
    """
    Defines a Table.
    """

    @property
    def IsStrictSizing(self) -> typing.Optional[bool]:
        """
        
            Whether column add/create/import/refresh operations cannot grow the number of rows.
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSTableObjects.IDSTableAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def APDLName(self) -> typing.Optional[str]:
        """
        Gets or sets the name of the Table when explicitly written to the APDL input file.
        """
        return None

    @property
    def PathType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.Common.PathType]:
        """
        Gets or sets the PathType.
        """
        return None

    @property
    def RefreshImportOn(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.Table.TableRefreshImportOn]:
        """
        Gets or sets the RefreshImportOn.
        """
        return None

    @property
    def SendToSolver(self) -> typing.Optional[bool]:
        """
        Get whether the Table will be explicitly written to the APDL input file.
        """
        return None

    @property
    def SpatialCoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the coordinate system applied to the Table’s spatial independent columns.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def CreateAndAddColumn(self, variableType: Ansys.Mechanical.DataModel.MechanicalEnums.Table.VariableType, variableClassification: Ansys.Mechanical.DataModel.MechanicalEnums.Table.VariableClassification, data: typing.Iterable, unit: str, name: str) -> Ansys.Mechanical.Interfaces.IDataSeries:
        """
        
            Creates and adds a new column (data series) to the table.
            
        """
        pass

    def GetDataURI(self, newColumn: Ansys.ACT.Automation.Mechanical.Table.Column) -> str:
        """
        
            Gets the data URI from which the tabular data was imported.
            
        """
        pass

    def GetImportSettings(self, newColumn: Ansys.ACT.Automation.Mechanical.Table.Column) -> Ansys.Mechanical.Table.ImportSettingsBase:
        """
        
            Get the settings used for an import operation.
            
        """
        pass

    def Import(self, dataURI: str, format: Ansys.Mechanical.DataModel.MechanicalEnums.Table.ImportFormat, settings: Ansys.Mechanical.Table.ImportSettingsBase) -> typing.List[Ansys.Mechanical.Interfaces.IDataSeries]:
        """
        
            
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class TableGroup(object):
    """
    Defines a TableGroup.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTableGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddTable(self, activate: bool, expandGroup: bool) -> Ansys.ACT.Automation.Mechanical.Table:
        """
        
            Create the object for working with an imported part.
            
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class TreeGroupingFolder(object):
    """
    Defines a TreeGroupingFolder.
    """

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTreeGroupingFolderAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ChildrenInGroup(self) -> typing.Optional[int]:
        """
        Gets the ChildrenInGroup.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def DeleteTreeGroupAndChildren(self) -> None:
        """
        Run the DeleteTreeGroupAndChildren action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class AnalysisPly(object):
    """
    Defines a AnalysisPly.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSAnalysisPlyAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def IDInSource(self) -> typing.Optional[str]:
        """
        Gets the IDInSource.
        """
        return None

    @property
    def Material(self) -> typing.Optional[str]:
        """
        Gets the Material.
        """
        return None

    @property
    def NameInSource(self) -> typing.Optional[str]:
        """
        Gets the NameInSource.
        """
        return None

    @property
    def NumberOfElements(self) -> typing.Optional[int]:
        """
        Gets the NumberOfElements.
        """
        return None

    @property
    def Angle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Angle.
        """
        return None

    @property
    def Thickness(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Thickness.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class AcousticsFarFieldResultWorksheet(object):

    @property
    def RowCount(self) -> typing.Optional[int]:
        """
        
            Return the number of entries.
            
        """
        return None

    def AddRow(self) -> int:
        """
        
            Adds a Row to the worksheet.
            
        """
        pass

    def DeleteRow(self, index: int) -> None:
        """
        Deletes a row from the worksheet at index.
        """
        pass

    def InsertRow(self, index: int) -> int:
        """
        Insert a row from the worksheet at index.
        """
        pass

    def DuplicateRow(self, fromIndex: int, toIndex: int) -> int:
        """
        Insert a row from the worksheet at index.
        """
        pass

    def SetXCoordinate(self, index: int, newVal: float) -> None:
        """
        
            Sets the worksheet Mic X property at index.
            
        """
        pass

    def GetXCoordinate(self, index: int) -> float:
        """
        
            Gets the worksheet Mic X property at index.
            
        """
        pass

    def SetYCoordinate(self, index: int, newVal: float) -> None:
        """
        
            Sets the worksheet Mic Y property at index.
            
        """
        pass

    def GetYCoordinate(self, index: int) -> float:
        """
        
            Gets the worksheet Mic Y property at index.
            
        """
        pass

    def SetZCoordinate(self, index: int, newVal: float) -> None:
        """
        
            Sets the worksheet Mic Z property at index.
            
        """
        pass

    def GetZCoordinate(self, index: int) -> float:
        """
        
            Gets the worksheet Mic Z property at index.
            
        """
        pass

    def SetCoordinateSystemSelection(self, index: int, newVal: int) -> None:
        """
        
            Sets the worksheet CoordinateSystemSelection property at index.
            
        """
        pass

    def GetCoordinateSystemSelection(self, index: int) -> int:
        """
        
            Gets the worksheet CoordinateSystemSelection property at index.
            
        """
        pass


class ChartXAxis(object):

    @property
    def ObjectSelection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        
            Gets or sets the object being used to control the X Axis. Setting to None returns to common independent variable.
            
        """
        return None

    @property
    def ComponentIndex(self) -> typing.Optional[int]:
        """
        
            Gets or sets the component index for the chart.
            
        """
        return None


class Chart(object):
    """
    Defines a Chart.
    """

    @property
    def OutlineSelection(self) -> typing.Optional[typing.Iterable[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets or sets the OutlineSelection.
        """
        return None

    @property
    def XAxis(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.ChartXAxis]:
        """
        
            Use to control the X Axis property of the chart. 
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSChartAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Caption(self) -> typing.Optional[str]:
        """
        Gets or sets the Caption.
        """
        return None

    @property
    def XAxisLabel(self) -> typing.Optional[str]:
        """
        Gets or sets the XAxisLabel.
        """
        return None

    @property
    def YAxisLabel(self) -> typing.Optional[str]:
        """
        Gets or sets the YAxisLabel.
        """
        return None

    @property
    def Gridlines(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ChartGridlines]:
        """
        Gets or sets the Gridlines.
        """
        return None

    @property
    def ModalDisplayType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ChartModalType]:
        """
        Gets or sets the ModalDisplayType.
        """
        return None

    @property
    def PlotStyle(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ChartPlotStyle]:
        """
        Gets or sets the PlotStyle.
        """
        return None

    @property
    def Content(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ChartReportType]:
        """
        Gets or sets the Content.
        """
        return None

    @property
    def Scale(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ChartScale]:
        """
        Gets or sets the Scale.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CompositeCriterionDefinition(object):

    @property
    def Item(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CompositeCriterionTerm]:
        """
        Item property.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        
            Gives the number of CompositeCriterionTerms in the definition.
            
        """
        return None

    def Add(self, item: Ansys.ACT.Automation.Mechanical.CompositeCriterionTerm) -> None:
        """
        
            Adds a CompositeCriterionTerm at the end in the definition.
            Usage:
                CriterionDefinition.Add(Ansys.ACT.Automation.Mechanical.CompositeCriterionTerm(primCritObj, 1.3))
            
        """
        pass

    def Clear(self) -> None:
        """
        
            Clears all the CompositeCriterionTerms in the definition.
            
        """
        pass

    def IndexOf(self, item: Ansys.ACT.Automation.Mechanical.CompositeCriterionTerm) -> int:
        """
        
            Gives the index where the specified CompositeCriterionTerm exists in the definition.
            Returns -1 if the term is not found in the definition.
            
        """
        pass

    def Insert(self, index: int, item: Ansys.ACT.Automation.Mechanical.CompositeCriterionTerm) -> None:
        """
        
            Inserts a CompositeCriterionTerm at a specified index in the definition.
            Returns IndexOutOfRangeException for invalid index.
            Usage:
                CriterionDefinition.Insert(1, Ansys.ACT.Automation.Mechanical.CompositeCriterionTerm(primCritObj, 1.3))
            
        """
        pass

    def RemoveAt(self, index: int) -> None:
        """
        
            Removes the CompositeCriterionTerm at a specified index in the definition.
            Returns IndexOutOfRangeException for invalid index.
            
        """
        pass


class CompositeCriterionTerm(object):

    @property
    def PrimaryCriterion(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.PrimaryCriterion]:
        """
        
            Returns PrimaryCriterion Object associated with the CompositeCriterionTerm.
            Returns None if no PrimaryCriterion Object is assigned to CompositeCriterionTerm.
            
        """
        return None

    @property
    def Coefficient(self) -> typing.Optional[float]:
        """
        
            Returns coefficient of PrimaryCriterion in the CompositeCriterionTerm.
            
        """
        return None


class CondensedGeometry(object):
    """
    Defines a CondensedGeometry.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCondensedGeometryAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def SolverFilesDirectory(self) -> typing.Optional[str]:
        """
        Gets the SolverFilesDirectory.
        """
        return None

    @property
    def TransparencyEnabled(self) -> typing.Optional[bool]:
        """
        Gets or sets the TransparencyEnabled.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def CreateAutomaticCondensedParts(self) -> None:
        """
        Run the CreateAutomaticCondensedParts action.
        """
        pass

    def AddCondensedPart(self) -> Ansys.ACT.Automation.Mechanical.CondensedPart:
        """
        Creates a new CondensedPart
        """
        pass

    def AddCondensedPartInfoTool(self) -> Ansys.ACT.Automation.Mechanical.CondensedPartInfoTool:
        """
        Creates a new CondensedPartInfoTool
        """
        pass

    def AddImportedCondensedPart(self) -> Ansys.ACT.Automation.Mechanical.ImportedCondensedPart:
        """
        Creates a new ImportedCondensedPart
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def GenerateCondensedParts(self) -> None:
        """
        Run the GenerateCondensedParts action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CondensedPart(object):
    """
    Defines a CondensedPart.
    """

    @property
    def Interfaces(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CondensedPartInterfaces]:
        """
        
            Returns the Interfaces of the condensed part
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCondensedPartAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def NumberOfModes(self) -> typing.Optional[int]:
        """
        Gets or sets the NumberOfModes.
        """
        return None

    @property
    def MaximumFrequency(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaximumFrequency.
        """
        return None

    @property
    def MinimumFrequency(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinimumFrequency.
        """
        return None

    @property
    def AttachmentMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartCMSAttachmentMethod]:
        """
        Gets or sets the AttachmentMethod.
        """
        return None

    @property
    def FutureExpansion(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.YesNoProgrammedControlled]:
        """
        Gets or sets the FutureExpansion.
        """
        return None

    @property
    def FutureIntent(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FutureIntentType]:
        """
        "FutureIntent" property defines the type of solver supported to perform a use pass with the condensed part.
        """
        return None

    @property
    def GenerateDampingMatrix(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.YesNoProgrammedControlled]:
        """
        Gets or sets the GenerateDampingMatrix.
        """
        return None

    @property
    def InterfaceMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartInterfaceMethod]:
        """
        Gets or sets the InterfaceMethod.
        """
        return None

    @property
    def KeepFilesFor(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartKeepFilesFor]:
        """
        Gets or sets the KeepFilesFor.
        """
        return None

    @property
    def LumpedMassFormulation(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartLumpedMassFormulation]:
        """
        Gets or sets the LumpedMassFormulation.
        """
        return None

    @property
    def PointMassTreatment(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartPointMassTreatment]:
        """
        Gets or sets the PointMassTreatment.
        """
        return None

    @property
    def ReductionMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartReductionMethod]:
        """
        Gets or sets the ReductionMethod.
        """
        return None

    @property
    def SolverType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SolverType]:
        """
        Gets or sets the SolverType.
        """
        return None

    @property
    def StoreBasisResults(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.YesNoProgrammedControlled]:
        """
        Gets or sets the StoreBasisResults.
        """
        return None

    @property
    def RangeSearch(self) -> typing.Optional[bool]:
        """
        Gets or sets the RangeSearch.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def NumberInterfaceEntries(self) -> typing.Optional[int]:
        """
        Gets the NumberInterfaceEntries.
        """
        return None

    @property
    def NumberMasterNodes(self) -> typing.Optional[int]:
        """
        Gets the NumberMasterNodes.
        """
        return None

    @property
    def SolutionName(self) -> typing.Optional[str]:
        """
        Gets or sets the SolutionName.
        """
        return None

    @property
    def SolverFilesDirectory(self) -> typing.Optional[str]:
        """
        Gets the SolverFilesDirectory.
        """
        return None

    @property
    def TemperatureUnits(self) -> typing.Optional[str]:
        """
        Gets the TemperatureUnits.
        """
        return None

    @property
    def ReferenceTemperature(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ReferenceTemperature.
        """
        return None

    @property
    def Physics(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartPhysics]:
        """
        Gets the Physics.
        """
        return None

    @property
    def SolverUnitSystem(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.WBUnitSystemType]:
        """
        Gets or sets the SolverUnitSystem.
        """
        return None

    @property
    def SolutionNameMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets or sets the SolutionNameMode.
        """
        return None

    @property
    def SolverUnits(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SolverUnitsControlType]:
        """
        Gets or sets the SolverUnits.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def GeometrySelection(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the GeometrySelection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Export(self, exportFileName: str, exportFormat: Ansys.Mechanical.DataModel.MechanicalEnums.CondensedParts.ExportFormat, exportSettings: Ansys.ACT.Automation.Mechanical.CondensedParts.ExportSettings) -> None:
        """
        Run the Export Condensed Part action.
        """
        pass

    def DetectCondensedPartInterface(self) -> None:
        """
        Run the DetectCondensedPartInterface action.
        """
        pass

    def GenerateCondensedParts(self) -> None:
        """
        Run the GenerateCondensedParts action.
        """
        pass

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedCondensedPart(object):
    """
    Defines a ImportedCondensedPart.
    """

    @property
    def Source(self) -> typing.Optional[str]:
        """
        
            Gets the Source Substructure analysis information of the Imported Condensed Part.
            An exception will be thrown if there is no linked Substructure analysis in the upstream.
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCondensedPartAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ActualNodeOffset(self) -> typing.Optional[int]:
        """
        Gets the ActualNodeOffset.
        """
        return None

    @property
    def CondensedPartFileName(self) -> typing.Optional[str]:
        """
        Gets or sets the CondensedPartFileName.
        """
        return None

    @property
    def NodeOffset(self) -> typing.Optional[int]:
        """
        Gets or sets the NodeOffset.
        """
        return None

    @property
    def CondensedPartUnitSystem(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.WBUnitSystemType]:
        """
        Gets or sets the CondensedPartUnitSystem.
        """
        return None

    @property
    def ExpansionStatus(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ExpansionStatus]:
        """
        "ExpansionStatus" property defines if results can be expanded of the imported condensed part or not.
        """
        return None

    @property
    def FutureIntent(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FutureIntentType]:
        """
        "FutureIntent" property defines the type of solver supported to perform a use pass with the imported condensed part.
        """
        return None

    @property
    def ImportFileFormat(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartFileFormat]:
        """
        Gets or sets the ImportFileFormat.
        """
        return None

    @property
    def ImportStatus(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ImportedCondensedPartStatus]:
        """
        Gets the ImportStatus.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def NumberInterfaceEntries(self) -> typing.Optional[int]:
        """
        Gets the NumberInterfaceEntries.
        """
        return None

    @property
    def NumberMasterNodes(self) -> typing.Optional[int]:
        """
        Gets the NumberMasterNodes.
        """
        return None

    @property
    def SolutionName(self) -> typing.Optional[str]:
        """
        Gets or sets the SolutionName.
        """
        return None

    @property
    def SolverFilesDirectory(self) -> typing.Optional[str]:
        """
        Gets the SolverFilesDirectory.
        """
        return None

    @property
    def TemperatureUnits(self) -> typing.Optional[str]:
        """
        Gets the TemperatureUnits.
        """
        return None

    @property
    def ReferenceTemperature(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ReferenceTemperature.
        """
        return None

    @property
    def Physics(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartPhysics]:
        """
        Gets the Physics.
        """
        return None

    @property
    def SolverUnitSystem(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.WBUnitSystemType]:
        """
        Gets or sets the SolverUnitSystem.
        """
        return None

    @property
    def SolutionNameMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets or sets the SolutionNameMode.
        """
        return None

    @property
    def SolverUnits(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SolverUnitsControlType]:
        """
        Gets or sets the SolverUnits.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def GeometrySelection(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the GeometrySelection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def ImportCondensedPart(self) -> None:
        """
        Run the Import Condensed Part action.
        """
        pass

    def CreateNodalNamedSelections(self, selectedInterfaceIDNumbers: typing.Iterable[int]) -> typing.Iterable[Ansys.ACT.Automation.Mechanical.DataModelObject]:
        """
        CreateNodalNamedSelections method.
        """
        pass

    def CreateNodalNamedSelectionFromNodeIds(self, selectedNodeIds: typing.Iterable[int]) -> Ansys.ACT.Automation.Mechanical.DataModelObject:
        """
        CreateNodalNamedSelectionFromNodeIds method.
        """
        pass

    def CreateRemotePoints(self, selectedInterfaceIDNumbers: typing.Iterable[int]) -> typing.Iterable[Ansys.ACT.Automation.Mechanical.DataModelObject]:
        """
        CreateRemotePoints method.
        """
        pass

    def CreateRemotePointFromNodeIds(self, selectedNodeIds: typing.Iterable[int]) -> Ansys.ACT.Automation.Mechanical.DataModelObject:
        """
        CreateRemotePointFromNodeIds method.
        """
        pass

    def CreateJoints(self, selectedInterfaceIDNumbers: typing.Iterable[int]) -> typing.Iterable[Ansys.ACT.Automation.Mechanical.DataModelObject]:
        """
        CreateJoints method.
        """
        pass

    def CreateJointFromNodeIds(self, selectedNodeIds: typing.Iterable[int]) -> Ansys.ACT.Automation.Mechanical.DataModelObject:
        """
        CreateJointFromNodeIds method.
        """
        pass

    def CreateContacts(self, selectedInterfaceIDNumbers: typing.Iterable[int]) -> typing.Iterable[Ansys.ACT.Automation.Mechanical.DataModelObject]:
        """
        CreateContacts method.
        """
        pass

    def CreateContactFromNodeIds(self, selectedNodeIds: typing.Iterable[int]) -> Ansys.ACT.Automation.Mechanical.DataModelObject:
        """
        CreateContactFromNodeIds method.
        """
        pass

    def ReadInterfaceData(self) -> None:
        """
        
            Run the Read Interface Data action.
            
        """
        pass

    def UpdateNodeLocation(self, iNodeID: int, locX: Ansys.Core.Units.Quantity, locY: Ansys.Core.Units.Quantity, locZ: Ansys.Core.Units.Quantity, rotX: Ansys.Core.Units.Quantity, rotY: Ansys.Core.Units.Quantity, rotZ: Ansys.Core.Units.Quantity) -> None:
        """
        
            Update Node Location of Original Interfaces Data view table.
            
        """
        pass

    def GetOriginalNodeCoordinates(self) -> typing.Iterable[dict[int,typing.Iterable[Ansys.Core.Units.Quantity]]]:
        """
        
            Get all the Node Locations of the Original Interfaces Data table.
            
        """
        pass

    def GetTransformedNodeCoordinates(self) -> typing.Iterable[dict[int,typing.Iterable[Ansys.Core.Units.Quantity]]]:
        """
        
            Get all the Node Locations of the Transformed Interfaces Data table.
            
        """
        pass

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class SubstructureGenerationCondensedPart(object):
    """
    Defines a SubstructureGenerationCondensedPart.
    """

    @property
    def Interfaces(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CondensedPartInterfaces]:
        """
        
            Returns the Interfaces of the condensed part
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCondensedPartAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def AttachmentMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartCMSAttachmentMethod]:
        """
        Gets or sets the AttachmentMethod.
        """
        return None

    @property
    def GenerateDampingMatrix(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.YesNoProgrammedControlled]:
        """
        Gets or sets the GenerateDampingMatrix.
        """
        return None

    @property
    def InterfaceMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartInterfaceMethod]:
        """
        Gets or sets the InterfaceMethod.
        """
        return None

    @property
    def LumpedMassFormulation(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartLumpedMassFormulation]:
        """
        Gets or sets the LumpedMassFormulation.
        """
        return None

    @property
    def PointMassTreatment(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartPointMassTreatment]:
        """
        Gets or sets the PointMassTreatment.
        """
        return None

    @property
    def ReductionMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartReductionMethod]:
        """
        Gets or sets the ReductionMethod.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def NumberInterfaceEntries(self) -> typing.Optional[int]:
        """
        Gets the NumberInterfaceEntries.
        """
        return None

    @property
    def NumberMasterNodes(self) -> typing.Optional[int]:
        """
        Gets the NumberMasterNodes.
        """
        return None

    @property
    def SolutionName(self) -> typing.Optional[str]:
        """
        Gets or sets the SolutionName.
        """
        return None

    @property
    def SolverFilesDirectory(self) -> typing.Optional[str]:
        """
        Gets the SolverFilesDirectory.
        """
        return None

    @property
    def TemperatureUnits(self) -> typing.Optional[str]:
        """
        Gets the TemperatureUnits.
        """
        return None

    @property
    def ReferenceTemperature(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ReferenceTemperature.
        """
        return None

    @property
    def Physics(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartPhysics]:
        """
        Gets the Physics.
        """
        return None

    @property
    def SolverUnitSystem(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.WBUnitSystemType]:
        """
        Gets or sets the SolverUnitSystem.
        """
        return None

    @property
    def SolutionNameMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets or sets the SolutionNameMode.
        """
        return None

    @property
    def SolverUnits(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SolverUnitsControlType]:
        """
        Gets or sets the SolverUnits.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def GeometrySelection(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the GeometrySelection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ConstructionPoint(object):
    """
    Defines a ConstructionPoint.
    """

    def SetLocation(self, newvalue: typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]) -> None:
        """
        Sets the point location.
        """
        return None

    SetLocation = property(None, SetLocation)

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSConstructionPointAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def LocationX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LocationX.
        """
        return None

    @property
    def LocationY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LocationY.
        """
        return None

    @property
    def LocationZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LocationZ.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CompositeCriterion(object):
    """
    Defines a CompositeCriterion.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoCriterionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Value(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Value.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GetDefinition(self) -> Ansys.ACT.Automation.Mechanical.CompositeCriterionDefinition:
        """
        
            Gets the Worksheet Definition.
            This Definition is a list of CompositeCriterionTerms.
            
        """
        pass

    def EvaluateAllResults(self) -> None:
        """
        Run the EvaluateAllResults action.
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ElementOrientation(object):
    """
    Defines a ElementOrientation.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSElementOrientationAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def AxisEdgeOrientation(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ElementOrientationAxisType]:
        """
        Gets or sets the AxisEdgeOrientation.
        """
        return None

    @property
    def AxisSurfaceOrientation(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ElementOrientationAxisType]:
        """
        Gets or sets the AxisSurfaceOrientation.
        """
        return None

    @property
    def OrientationGuideDefinedBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ElementOrientationGuide]:
        """
        Gets or sets the OrientationGuideDefinedBy.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def BodyLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the BodyLocation.
        """
        return None

    @property
    def EdgeLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the EdgeLocation.
        """
        return None

    @property
    def SurfaceLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the SurfaceLocation.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GenerateOrientations(self) -> None:
        """
        Runs the GenerateOrientations action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class EndRelease(object):
    """
    Defines a EndRelease.
    """

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.Mechanical.DataModel.Interfaces.ICoordinateSystemSelection]:
        """
        Gets or sets the Coordinate System.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSBeamEndReleaseAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Behavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.BeamEndReleaseBehavior]:
        """
        Gets or sets the Behavior.
        """
        return None

    @property
    def RotationX(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FixedOrFree]:
        """
        Gets or sets the RotationX.
        """
        return None

    @property
    def RotationY(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FixedOrFree]:
        """
        Gets or sets the RotationY.
        """
        return None

    @property
    def RotationZ(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FixedOrFree]:
        """
        Gets or sets the RotationZ.
        """
        return None

    @property
    def TranslationX(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FixedOrFree]:
        """
        Gets or sets the TranslationX.
        """
        return None

    @property
    def TranslationY(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FixedOrFree]:
        """
        Gets or sets the TranslationY.
        """
        return None

    @property
    def TranslationZ(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FixedOrFree]:
        """
        Gets or sets the TranslationZ.
        """
        return None

    @property
    def IndependentEdges(self) -> typing.Optional[bool]:
        """
        Gets or sets the IndependentEdges.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def EdgeLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the EdgeLocation.
        """
        return None

    @property
    def VertexLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the VertexLocation.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Figure(object):
    """
    Defines a Figure.
    """

    @property
    def Text(self) -> typing.Optional[str]:
        """
        Gets or sets the Text.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSFigureAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ExternalModelDataColl(object):
    """
    Defines a ExternalModelDataColl.
    """

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedObject(object):
    """
    Defines a row object in Imported Objects.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSWorksheetRowDataAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Active(self) -> typing.Optional[bool]:
        """
        This property sets the object to active or inactive status
        """
        return None

    def GetPropertyValueAsString(self, name: str) -> str:
        """
        Data in string format that is present on the columns
        """
        pass

    def GetPropertyValue(self, name: str) -> typing.Any:
        """
        Get the data for a given property name
        """
        pass

    def SetPropertyValue(self, name: str, value: typing.Any) -> None:
        """
        Set the data for a given property name
        """
        pass

    def GetPropertyNames(self) -> typing.Iterable[str]:
        """
        This method gives the complete list of property names that are supported.
        """
        pass


class InitialConditions(object):
    """
    Defines a InitialConditions.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSInitialConditionGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def InsertVelocity(self) -> Ansys.ACT.Automation.Mechanical.InitialCondition:
        """
        Creates a new Velocity
        """
        pass

    def InsertAngularVelocity(self) -> Ansys.ACT.Automation.Mechanical.InitialCondition:
        """
        Creates a new Angular Velocity
        """
        pass

    def InsertDropHeight(self) -> Ansys.ACT.Automation.Mechanical.InitialCondition:
        """
        Creates a new Drop Height
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class InterfaceDelamination(object):
    """
    Defines a InterfaceDelamination.
    """

    @property
    def AutomaticTimeStepping(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets or sets the AutomaticTimeStepping.
        """
        return None

    @property
    def FailureCriteriaOption(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DelaminationFailureCriteriaOption]:
        """
        Gets or sets the FailureCriteriaOption.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSDelaminationAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Material(self) -> typing.Optional[str]:
        """
        Gets or sets the Material.
        """
        return None

    @property
    def DistanceTolerance(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the DistanceTolerance.
        """
        return None

    @property
    def CriticalRate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the CriticalRate.
        """
        return None

    @property
    def InitialTimeStep(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the InitialTimeStep.
        """
        return None

    @property
    def MaximumTimeStep(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaximumTimeStep.
        """
        return None

    @property
    def MinimumTimeStep(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinimumTimeStep.
        """
        return None

    @property
    def Method(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DelaminationMethod]:
        """
        Gets or sets the Method.
        """
        return None

    @property
    def Type(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DelaminationType]:
        """
        Gets the Type.
        """
        return None

    @property
    def GenerationMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DelaminationGenerationMethod]:
        """
        Gets or sets the GenerationMethod.
        """
        return None

    @property
    def ToleranceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ToleranceType]:
        """
        Gets or sets the ToleranceType.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def InitialCrack(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.GenericCrack]:
        """
        Gets or sets the InitialCrack.
        """
        return None

    @property
    def MatchControl(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MeshControls.MatchControl]:
        """
        Gets or sets the MatchControl.
        """
        return None

    @property
    def SourceLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the SourceLocation.
        """
        return None

    @property
    def TargetLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the TargetLocation.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Material(object):
    """
    Defines a Material.
    """

    @property
    def MaterialModels(self) -> typing.Optional[typing.List[typing.Any]]:
        """
        
            Returns a collection of the material models that this material is made up of. 
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMaterialAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def AssignedBodies(self) -> typing.Optional[int]:
        """
        Gets the AssignedBodies.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def CreateMaterialAssignment(self) -> Ansys.ACT.Automation.Mechanical.MaterialAssignment:
        """
        Run the CreateMaterialAssignment action.
        """
        pass

    def AddMaterialAssignment(self) -> Ansys.ACT.Automation.Mechanical.MaterialAssignment:
        """
        Run the AddMaterialAssignment action.
        """
        pass

    def GetAsDictionary(self) -> dict[typing.Any,typing.Any]:
        """
        
            Returns material as a python dictionary
            
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MaterialAssignment(object):
    """
    Defines a MaterialAssignment.
    """

    @property
    def MaterialName(self) -> typing.Optional[str]:
        """
        Gets or sets the MaterialName.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMaterialAssignmentAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Material(self) -> typing.Optional[str]:
        """
        Gets or sets the Material.
        """
        return None

    @property
    def ReferenceTemperatureValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ReferenceTemperatureValue.
        """
        return None

    @property
    def MaterialPolarizationDirection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MaterialPolarizationDirection]:
        """
        Gets or sets the MaterialPolarizationDirection.
        """
        return None

    @property
    def NonlinearEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the NonlinearEffects.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def ThermalStrainEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the ThermalStrainEffects.
        """
        return None

    @property
    def UseReferenceTemperatureByBody(self) -> typing.Optional[bool]:
        """
        Gets or sets the UseReferenceTemperatureByBody.
        """
        return None

    @property
    def FieldCoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the FieldCoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def CreateMaterialPlot(self) -> Ansys.ACT.Automation.Mechanical.MaterialPlot:
        """
        Run the CreateMaterialPlot action.
        """
        pass

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MaterialCombination(object):

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMaterialCombinationAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Suppress or unsuppress the MaterialCombination.
        """
        return None

    @property
    def Materials(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.MaterialFractionDictionary]:
        """
        
            Dictionary of Material to Fraction in Combination.
            
        """
        return None

    @property
    def MaterialModels(self) -> typing.Optional[typing.List[typing.Any]]:
        """
        
            Returns a collection of the material models that this material is made up of. 
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMaterialAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def AssignedBodies(self) -> typing.Optional[int]:
        """
        Gets the AssignedBodies.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Delete the MaterialCombination.
        """
        pass

    def AddMaterial(self, material: Ansys.ACT.Automation.Mechanical.Material) -> None:
        """
        
            Add a material to the combination.
            
        """
        pass

    def AddMaterialByName(self, name: str) -> None:
        """
        
            Add a material to the combination by name.
            
        """
        pass

    def RemoveMaterial(self, material: Ansys.ACT.Automation.Mechanical.Material) -> None:
        """
        
            Remove material from the combination.
            
        """
        pass

    def RemoveMaterialByName(self, name: str) -> None:
        """
        
            Remove material from the combination by name.
            
        """
        pass

    def CreateMaterialAssignment(self) -> Ansys.ACT.Automation.Mechanical.MaterialAssignment:
        """
        Run the CreateMaterialAssignment action.
        """
        pass

    def AddMaterialAssignment(self) -> Ansys.ACT.Automation.Mechanical.MaterialAssignment:
        """
        Run the AddMaterialAssignment action.
        """
        pass

    def GetAsDictionary(self) -> dict[typing.Any,typing.Any]:
        """
        
            Returns material as a python dictionary
            
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MaterialPlot(object):
    """
    Defines a MaterialPlot.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMaterialPlotAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def MaterialPropertyComponent(self) -> typing.Optional[str]:
        """
        Gets or sets the MaterialPropertyComponent.
        """
        return None

    @property
    def MaterialProperty(self) -> typing.Optional[str]:
        """
        Gets or sets the MaterialProperty.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Clear(self) -> None:
        """
        Run the Clear action.
        """
        pass

    def Generate(self) -> None:
        """
        Run the Generate action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Materials(object):
    """
    Defines a Materials.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMaterialGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def MaterialAssignments(self) -> typing.Optional[int]:
        """
        Gets the MaterialAssignments.
        """
        return None

    @property
    def MaterialCount(self) -> typing.Optional[int]:
        """
        Gets the MaterialCount.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddMaterialCombination(self) -> Ansys.ACT.Automation.Mechanical.MaterialCombination:
        """
        Creates a new MaterialCombination
        """
        pass

    def AddImportedTraceExternalData(self) -> Ansys.ACT.Automation.Mechanical.ImportedLoads.ImportedTraceGroup:
        """
        Creates a new Imported Trace (External Data).
        """
        pass

    def Import(self, materialURI: str, format: Ansys.Mechanical.DataModel.MechanicalEnums.Materials.ImportFormat, settings: Ansys.Mechanical.Materials.ImportSettings) -> typing.Iterable[Ansys.ACT.Automation.Mechanical.Material]:
        """
        
            
            
        """
        pass

    def AddMaterialAssignment(self) -> Ansys.ACT.Automation.Mechanical.MaterialAssignment:
        """
        Creates a new MaterialAssignment
        """
        pass

    def AddMaterialPlot(self) -> Ansys.ACT.Automation.Mechanical.MaterialPlot:
        """
        Creates a new MaterialPlot
        """
        pass

    def RefreshMaterials(self) -> None:
        """
        Run the RefreshMaterials action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshConnectionBase(object):
    """
    Defines a MeshConnectionBase.
    """

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        ScopingMethod property.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMeshConnectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ToleranceSlider(self) -> typing.Optional[int]:
        """
        Gets or sets the ToleranceSlider.
        """
        return None

    @property
    def MasterBodies(self) -> typing.Optional[str]:
        """
        Gets the MasterBodies.
        """
        return None

    @property
    def SlaveBodies(self) -> typing.Optional[str]:
        """
        Gets the SlaveBodies.
        """
        return None

    @property
    def SnapTolerance(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the SnapTolerance.
        """
        return None

    @property
    def ScopeMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets the ScopeMode.
        """
        return None

    @property
    def SnapType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SnapType]:
        """
        Gets or sets the SnapType.
        """
        return None

    @property
    def ToleranceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactToleranceType]:
        """
        Gets or sets the ToleranceType.
        """
        return None

    @property
    def SnapToBoundary(self) -> typing.Optional[bool]:
        """
        Gets or sets the SnapToBoundary.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def MasterLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the MasterLocation.
        """
        return None

    @property
    def SlaveLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the SlaveLocation.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Generate(self) -> None:
        """
        Run the Generate action.
        """
        pass

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshConnectionGroup(object):
    """
    Defines a MeshConnectionGroup.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSConnectionGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ConnectionType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutoDetectionType]:
        """
        Gets or sets the ConnectionType.
        """
        return None

    @property
    def ActiveConnections(self) -> typing.Optional[int]:
        """
        Gets the ActiveConnections.
        """
        return None

    @property
    def Connections(self) -> typing.Optional[int]:
        """
        Gets the Connections.
        """
        return None

    @property
    def EdgeOverlapTolerance(self) -> typing.Optional[int]:
        """
        Gets or sets the EdgeOverlapTolerance.
        """
        return None

    @property
    def FaceOverlapTolerance(self) -> typing.Optional[int]:
        """
        Gets or sets the FaceOverlapTolerance.
        """
        return None

    @property
    def MinimumDistancePercentage(self) -> typing.Optional[int]:
        """
        Gets or sets the MinimumDistancePercentage.
        """
        return None

    @property
    def ThicknessScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ThicknessScaleFactor.
        """
        return None

    @property
    def ToleranceSlider(self) -> typing.Optional[int]:
        """
        Gets or sets the ToleranceSlider.
        """
        return None

    @property
    def FaceFaceDetectionAngleTolerence(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FaceFaceDetectionAngleTolerence.
        """
        return None

    @property
    def FaceAngleTolerance(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FaceAngleTolerance.
        """
        return None

    @property
    def MinimumDistanceValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the MinimumDistanceValue.
        """
        return None

    @property
    def ToleranceValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ToleranceValue.
        """
        return None

    @property
    def CylindricalFaces(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CylindricalFacesOption]:
        """
        Gets or sets the CylindricalFaces.
        """
        return None

    @property
    def Priority(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactFaceEdgePriority]:
        """
        Gets or sets the Priority.
        """
        return None

    @property
    def GroupBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactGroupingType]:
        """
        Gets or sets the GroupBy.
        """
        return None

    @property
    def SearchAcross(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactSearchingType]:
        """
        Gets or sets the SearchAcross.
        """
        return None

    @property
    def ToleranceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactToleranceType]:
        """
        Gets or sets the ToleranceType.
        """
        return None

    @property
    def EdgeEdge(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactEdgeEdgeOption]:
        """
        Gets or sets the EdgeEdge.
        """
        return None

    @property
    def FaceEdge(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactFaceEdgeOption]:
        """
        Gets or sets the FaceEdge.
        """
        return None

    @property
    def AutomaticFixedJoints(self) -> typing.Optional[bool]:
        """
        Gets or sets the AutomaticFixedJoints.
        """
        return None

    @property
    def RevoluteJoints(self) -> typing.Optional[bool]:
        """
        Gets or sets the RevoluteJoints.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def FaceFace(self) -> typing.Optional[bool]:
        """
        Gets or sets the FaceFace.
        """
        return None

    @property
    def UseRange(self) -> typing.Optional[bool]:
        """
        Gets or sets the UseRange.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def DetectConnections(self) -> None:
        """
        Detect mesh connections.
        """
        pass

    def Generate(self) -> None:
        """
        Generate mesh connections.
        """
        pass

    def SearchConnectionsForDuplicatePairs(self) -> None:
        """
        SearchConnectionsForDuplicatePairs method.
        """
        pass

    def AddManualMeshConnection(self) -> Ansys.ACT.Automation.Mechanical.MeshConnection:
        """
        Creates a new MeshConnection
        """
        pass

    def AddContactRegion(self) -> Ansys.ACT.Automation.Mechanical.Connections.ContactRegion:
        """
        Creates a new child ContactRegion.
        """
        pass

    def AddJoint(self) -> Ansys.ACT.Automation.Mechanical.Connections.Joint:
        """
        Creates a new child Joint.
        """
        pass

    def AddSpotWeld(self) -> Ansys.ACT.Automation.Mechanical.Connections.ContactRegion:
        """
        Creates a new child SpotWeld.
        """
        pass

    def AddInterStage(self) -> Ansys.ACT.Automation.Mechanical.Connections.ContactRegion:
        """
        Creates a new child InterStage.
        """
        pass

    def CreateAutomaticConnections(self) -> None:
        """
        Run the CreateAutomaticConnections action.
        """
        pass

    def DeleteChildren(self, verificationDialog: bool) -> None:
        """
        Run the DeleteChildren action with optional verification dialog.
        """
        pass

    def RenameBasedOnChildren(self) -> bool:
        """
        Rename the Connection group based on the children.
        """
        pass

    def SetDefaultAPDLNames(self) -> None:
        """
        Loop over all the valid contact regions and set the default APDL names.
        """
        pass

    def RepairOverlappingContactRegions(self) -> None:
        """
        Check for Overlapping Contact Regions. However, please note that this action does not result in any actual repair being performed.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class BatchConnectionsWorksheet(object):

    @property
    def RowCount(self) -> typing.Optional[int]:
        """
        
            Gets the number of entries
            
        """
        return None

    def AddRow(self) -> int:
        """
        
            Add a row to the MeshControlWorksheet
            
        """
        pass

    def DeleteRow(self, index: int) -> None:
        """
        
            Delete a row from the MeshControlWorksheet
            
        """
        pass

    def GetActiveState(self, index: int) -> bool:
        """
        
            Gets the Active State property at row index
            
        """
        pass

    def SetActiveState(self, index: int, value: bool) -> None:
        """
        
            Sets the Active State property at row index
            
        """
        pass

    def GetNamedSelectionId(self, index: int) -> int:
        """
        
            Gets the ID of the NamedSelection at row index
            
        """
        pass

    def GetNamedSelection(self, index: int) -> Ansys.ACT.Automation.Mechanical.NamedSelection:
        """
        
            Gets the NamedSelection at row index
            
        """
        pass

    def GetConnectionTolerances(self, index: int) -> str:
        """
        
            Gets the list of connection tolerances at the row index
            
        """
        pass

    def GetConnectionOption(self, index: int) -> int:
        """
        
            Gets the current set cconnection option at the row index
            
        """
        pass

    def SetNamedSelectionId(self, index: int, value: int) -> None:
        """
        
            Sets the NamedSelection by ID at row index
            
        """
        pass

    def SetNamedSelection(self, index: int, value: Ansys.ACT.Automation.Mechanical.NamedSelection) -> None:
        """
        
            Sets the NamedSelection at row index
            
        """
        pass

    def SetConnectionTolerances(self, index: int, value: str) -> None:
        """
        
            Sets the connection tolerance list at row index
            
        """
        pass

    def SetConnectionOption(self, index: int, value: int) -> None:
        """
        
            Sets the connection option at row index
            
        """
        pass

    def GenerateMesh(self) -> None:
        """
        
            Geneate Mesh
            
        """
        pass

    def ClearGenerateMesh(self) -> None:
        """
        
            Clear Mesh
            
        """
        pass

    def GenerateAtRow(self, index: int) -> None:
        """
        
            Generate Mesh At Row
            
        """
        pass

    def DeleteAllRows(self) -> None:
        """
        
            Delete All Rows
            
        """
        pass


class NamedSelectionCriteria(object):
    """
    
            A collection of named selection criteria.
            
    """

    @property
    def Count(self) -> typing.Optional[int]:
        """
        
            The number of criteria in the collection.
            
        """
        return None

    @property
    def Item(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.NamedSelectionCriterion]:
        """
        Item property.
        """
        return None

    def Add(self, criterion: Ansys.ACT.Automation.Mechanical.NamedSelectionCriterion) -> None:
        """
        
            Adds the given criterion to the collection.
            
        """
        pass

    def Clear(self) -> None:
        """
        
            Clears the collection.
            
        """
        pass

    def Contains(self, criterion: Ansys.ACT.Automation.Mechanical.NamedSelectionCriterion) -> bool:
        """
        
            Returns whether the collection contains the given criterion.
            
        """
        pass

    def IndexOf(self, criterion: Ansys.ACT.Automation.Mechanical.NamedSelectionCriterion) -> int:
        """
        
            Returns the index of the given criterion if it exists in the collection.  Returns -1 if it does not
            
        """
        pass

    def Insert(self, index: int, criterion: Ansys.ACT.Automation.Mechanical.NamedSelectionCriterion) -> None:
        """
        
            Inserts the given criterion into the collection at the given index.
            
        """
        pass

    def Remove(self, criterion: Ansys.ACT.Automation.Mechanical.NamedSelectionCriterion) -> bool:
        """
        
            Removes the given criterion from the collection if it exists in the collection.  Throws an exception if it does not.
            
        """
        pass

    def RemoveAt(self, index: int) -> None:
        """
        
            Removes the criterion at the given index.  Throws an exception if the given index is not valid.
            
        """
        pass


class NamedSelectionCriterion(object):

    @property
    def Active(self) -> typing.Optional[bool]:
        """
        Active property.
        """
        return None

    @property
    def Action(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SelectionActionType]:
        """
        Action property.
        """
        return None

    @property
    def EntityType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SelectionType]:
        """
        EntityType property.
        """
        return None

    @property
    def Criterion(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SelectionCriterionType]:
        """
        Criterion property.
        """
        return None

    @property
    def Operator(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SelectionOperatorType]:
        """
        Operator property.
        """
        return None

    @property
    def Value(self) -> typing.Optional[typing.Any]:
        """
        Value property.
        """
        return None

    @property
    def LowerBound(self) -> typing.Optional[typing.Any]:
        """
        LowerBound property.
        """
        return None

    @property
    def UpperBound(self) -> typing.Optional[typing.Any]:
        """
        UpperBound property.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        CoordinateSystem property.
        """
        return None


class NastranExportOptions(object):
    """
    Defines the NastranExportOptions.
    """

    @property
    def NastranFilename(self) -> typing.Optional[str]:
        """
        Full path of Nastran export file.
        """
        return None

    @property
    def AnalysisType(self) -> typing.Optional[str]:
        """
        Analysis type.
        """
        return None

    @property
    def GridCS(self) -> typing.Optional[int]:
        """
        Grid coordinate system number.
        """
        return None

    @property
    def Offset(self) -> typing.Optional[int]:
        """
        Offset.
        """
        return None

    @property
    def WTMass(self) -> typing.Optional[float]:
        """
        WTMass.
        """
        return None

    @property
    def JointStiffness(self) -> typing.Optional[float]:
        """
        Joint stiffness.
        """
        return None

    @property
    def PyramidElements(self) -> typing.Optional[str]:
        """
        Pyramid elements.
        """
        return None

    @property
    def Modes(self) -> typing.Optional[int]:
        """
        Modes.
        """
        return None

    @property
    def Time(self) -> typing.Optional[float]:
        """
        Time.
        """
        return None

    @property
    def GroundCheck(self) -> typing.Optional[bool]:
        """
        Ground check.
        """
        return None


class NodeMove(object):
    """
    Defines a NodeMove.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSNodeMoveAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def NumberOfMoves(self) -> typing.Optional[int]:
        """
        Gets the NumberOfMoves.
        """
        return None

    @property
    def NumberOfNodes(self) -> typing.Optional[int]:
        """
        Gets the NumberOfNodes.
        """
        return None

    @property
    def Information(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.NodeMoveInformationType]:
        """
        Gets the Information.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def MoveNode(self, nodeId: int, locX: Ansys.Core.Units.Quantity, locY: Ansys.Core.Units.Quantity, locZ: Ansys.Core.Units.Quantity) -> None:
        """
        Moves a node to a new specified location.  The given locX, locY, and locZ values will be converted to the unit system the mesh is stored in, and the given node will be moved to that absolute location.
        """
        pass

    def UndoAllNodeMoves(self) -> None:
        """
        Undos all moves done to a node.
        """
        pass

    def UndoLastNodeMove(self) -> None:
        """
        Undos the last move done to a node.
        """
        pass

    def MorphNodes(self) -> None:
        """
        Morph all the nodes.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class UniformConstraint(object):
    """
    Defines a UniformConstraint.
    """

    @property
    def Axis(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the normal axis to the uniform plane. Only positive direction enums will be accepted ("PositiveXAxis", "PositiveYAxis", "PositiveXAxis"). 
            InvalidArgumentException: Any unsupported enum value.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class OptimizationRegionBaseClass(object):
    """
    Defines a OptimizationRegionBaseClass.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSOptimizationRegionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ExclusionRegionLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the ExclusionRegionLocation.
        """
        return None

    @property
    def ExclusionScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ExclusionScopingMethod.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.ACT.Automation.Mechanical.DataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def MaxCumulatedDisplacementControl(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.TopoPropertyControlType]:
        """
        Gets or sets the MaxCumulatedDisplacementControl.
        """
        return None

    @property
    def MorphingTotalMoveLimit(self) -> typing.Optional[float]:
        """
        Gets or sets the MorphingTotalMoveLimit.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ManufacturingConstraint(object):
    """
    Defines a ManufacturingConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CommandSnippet(object):
    """
    Defines a CommandSnippet.
    """

    @property
    def Input(self) -> typing.Optional[str]:
        """
        Gets or sets the Text.
        """
        return None

    @property
    def OutputParameters(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.CommandOutputParameter]]:
        """
        
            Gets a list of the command snippet's output parameters.
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCommandEditorAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def InputArgument1(self) -> typing.Optional[str]:
        """
        Gets or sets the InputArgument1.
        """
        return None

    @property
    def InputArgument2(self) -> typing.Optional[str]:
        """
        Gets or sets the InputArgument2.
        """
        return None

    @property
    def InputArgument3(self) -> typing.Optional[str]:
        """
        Gets or sets the InputArgument3.
        """
        return None

    @property
    def InputArgument4(self) -> typing.Optional[str]:
        """
        Gets or sets the InputArgument4.
        """
        return None

    @property
    def InputArgument5(self) -> typing.Optional[str]:
        """
        Gets or sets the InputArgument5.
        """
        return None

    @property
    def InputArgument6(self) -> typing.Optional[str]:
        """
        Gets or sets the InputArgument6.
        """
        return None

    @property
    def InputArgument7(self) -> typing.Optional[str]:
        """
        Gets or sets the InputArgument7.
        """
        return None

    @property
    def InputArgument8(self) -> typing.Optional[str]:
        """
        Gets or sets the InputArgument8.
        """
        return None

    @property
    def InputArgument9(self) -> typing.Optional[str]:
        """
        Gets or sets the InputArgument9.
        """
        return None

    @property
    def OutputSearchPrefix(self) -> typing.Optional[str]:
        """
        Gets or sets the OutputSearchPrefix.
        """
        return None

    @property
    def StepNumber(self) -> typing.Optional[int]:
        """
        Gets or sets the StepNumber.
        """
        return None

    @property
    def FileName(self) -> typing.Optional[str]:
        """
        Gets the FileName.
        """
        return None

    @property
    def SnippetFileStatus(self) -> typing.Optional[int]:
        """
        Gets the SnippetFileStatus.
        """
        return None

    @property
    def StepSelectionMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SequenceSelectionType]:
        """
        Gets or sets the StepSelectionMode.
        """
        return None

    @property
    def SolverTarget(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CommandEditorTarget]:
        """
        Gets the SolverTarget.
        """
        return None

    @property
    def IssueSolveCommand(self) -> typing.Optional[bool]:
        """
        Gets or sets the IssueSolveCommand.
        """
        return None

    @property
    def InvalidateSolution(self) -> typing.Optional[bool]:
        """
        Gets or sets the InvalidateSolution.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AppendText(self, NewText: str) -> None:
        """
        Append Text.
        """
        pass

    def ImportTextFile(self, TextFile: str) -> None:
        """
        Import from Textfile.
        """
        pass

    def ExportTextFile(self, TextFile: str) -> None:
        """
        Export to Textfile.
        """
        pass

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Comment(object):
    """
    Defines a Comment.
    """

    @property
    def Text(self) -> typing.Optional[str]:
        """
        Gets the Text.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCommentAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Author(self) -> typing.Optional[str]:
        """
        Gets or sets the Author.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class NodeMerge(object):
    """
    Defines a NodeMerge.
    """

    @property
    def ToleranceValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets/ Sets the ToleranceValue.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        ScopingMethod property.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMeshConnectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def MasterBodies(self) -> typing.Optional[str]:
        """
        Gets the MasterBodies.
        """
        return None

    @property
    def SlaveBodies(self) -> typing.Optional[str]:
        """
        Gets the SlaveBodies.
        """
        return None

    @property
    def ToleranceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactToleranceType]:
        """
        Gets or sets the ToleranceType.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def MasterLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the MasterLocation.
        """
        return None

    @property
    def SlaveLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the SlaveLocation.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Generate(self) -> None:
        """
        Run the Generate action.
        """
        pass

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Objective(object):
    """
    Defines a Objective.
    """

    @property
    def Worksheet(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.ObjectiveWorksheet]:
        """
        Get the ObjectiveWorksheet action.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoObjectiveAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def NormalizedSum(self) -> typing.Optional[bool]:
        """
        Gets or sets the NormalizedSum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ObjectiveWorksheet(object):

    @property
    def RowCount(self) -> typing.Optional[int]:
        """
        
            Deletes a row from the worksheet at index.
            
        """
        return None

    def AddRow(self) -> int:
        """
        
            Adds a Row to the worksheet.
            
        """
        pass

    def DeleteRow(self, index: int) -> None:
        """
        Deletes a row from the worksheet at index.
        """
        pass

    def GetEnabled(self, index: int) -> bool:
        """
        Gets the worksheet Enabled property at row index
        """
        pass

    def SetEnabled(self, index: int, value: bool) -> None:
        """
        Sets the worksheet Enabled property at row index.
        """
        pass

    def GetObjectiveType(self, index: int) -> Ansys.Mechanical.DataModel.Enums.ObjectiveType:
        """
        Gets the Objective Type property at index.
        """
        pass

    def SetObjectiveType(self, index: int, value: Ansys.Mechanical.DataModel.Enums.ObjectiveType) -> None:
        """
        Sets the ObjectiveType property at index.
        """
        pass

    def GetFormulation(self, index: int) -> Ansys.Mechanical.DataModel.Enums.TopoObjectiveFormulation:
        """
        Gets the worksheet Formulation property at index.
        """
        pass

    def SetFormulation(self, index: int, value: Ansys.Mechanical.DataModel.Enums.TopoObjectiveFormulation) -> None:
        """
        Sets the worksheet Formulation property at index.
        """
        pass

    def GetWeight(self, index: int) -> float:
        """
        Gets the worksheet Weight property at index.
        """
        pass

    def SetWeight(self, index: int, newVal: float) -> None:
        """
        Sets the worksheet Weight property at index.
        """
        pass

    def GetMultipleSets(self, index: int) -> bool:
        """
        Gets the worksheet Multiple Sets property at row index
        """
        pass

    def SetMultipleSets(self, index: int, value: bool) -> None:
        """
        Sets the worksheet Multiple Sets property at row index.
        """
        pass

    def GetStartStep(self, index: int) -> int:
        """
        Gets the worksheet Start Step property at index.
        """
        pass

    def SetStartStep(self, index: int, newVal: int) -> None:
        """
        Sets the worksheet Start Step property at index.
        """
        pass

    def GetEndStep(self, index: int) -> int:
        """
        Gets the worksheet End Step property at index.
        """
        pass

    def SetEndStep(self, index: int, newVal: int) -> None:
        """
        Sets the worksheet End Step property at index.
        """
        pass

    def GetStep(self, index: int) -> int:
        """
        Gets the worksheet Step property at index.
        """
        pass

    def SetStep(self, index: int, newVal: int) -> None:
        """
        Sets the worksheet Step property at index.
        """
        pass

    def GetEndMode(self, index: int) -> int:
        """
        Gets the worksheet End Mode property at index.
        """
        pass

    def SetEndMode(self, index: int, newVal: int) -> None:
        """
        Sets the worksheet End Mode property at index.
        """
        pass

    def GetStartMode(self, index: int) -> int:
        """
        Gets the worksheet Start Mode property at index.
        """
        pass

    def SetStartMode(self, index: int, newVal: int) -> None:
        """
        Sets the worksheet Start Mode property at index.
        """
        pass

    def GetMode(self, index: int) -> int:
        """
        Gets the worksheet Mode property at index.
        """
        pass

    def SetMode(self, index: int, newVal: int) -> None:
        """
        Sets the worksheet Mode property at index.
        """
        pass

    def GetEnvironment(self, index: int) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        Gets the worksheet Environment property at index.
        """
        pass

    def SetEnvironment(self, index: int, newVal: Ansys.ACT.Automation.Mechanical.Analysis) -> None:
        """
        Sets the worksheet Environment property at index.
        """
        pass

    def GetCriterion(self, index: int) -> Ansys.ACT.Automation.Mechanical.Criterion:
        """
        Gets the worksheet Environment property at index.
        """
        pass

    def SetCriterion(self, index: int, newVal: Ansys.ACT.Automation.Mechanical.Criterion) -> None:
        """
        Sets the worksheet Environment property at index.
        """
        pass


class OptimizationRegion(object):
    """
    Defines a OptimizationRegion.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSOptimizationRegionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def InitialVolumeFraction(self) -> typing.Optional[float]:
        """
        Gets or sets the InitialVolumeFraction.
        """
        return None

    @property
    def LatticeMaxDensity(self) -> typing.Optional[float]:
        """
        Gets or sets the LatticeMaxDensity.
        """
        return None

    @property
    def LatticeMinDensity(self) -> typing.Optional[float]:
        """
        Gets or sets the LatticeMinDensity.
        """
        return None

    @property
    def MorphingIterationMoveLimit(self) -> typing.Optional[float]:
        """
        Gets or sets the MorphingIterationMoveLimit.
        """
        return None

    @property
    def PenaltyFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the PenaltyFactor.
        """
        return None

    @property
    def MorphingTotalMeshDeformationTolerance(self) -> typing.Optional[float]:
        """
        Gets or sets the MorphingTotalMeshDeformationTolerance.
        """
        return None

    @property
    def ExclusionThickness(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ExclusionThickness.
        """
        return None

    @property
    def InitializationHoleSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the InitializationHoleSize.
        """
        return None

    @property
    def LatticeSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LatticeSize.
        """
        return None

    @property
    def BoundaryCondition(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.BoundaryConditionType]:
        """
        Gets or sets the BoundaryCondition.
        """
        return None

    @property
    def ExclusionExtension(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ExclusionType]:
        """
        Gets or sets the ExclusionExtension.
        """
        return None

    @property
    def HyperbolicProjection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.HyperbolicProjectionType]:
        """
        Gets or sets the HyperbolicProjection.
        """
        return None

    @property
    def InitializationModifierType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.InitializationModifierType]:
        """
        Gets or sets the InitializationModifierType.
        """
        return None

    @property
    def LatticeType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.LatticeType]:
        """
        Gets or sets the LatticeType.
        """
        return None

    @property
    def MeshDeformationToleranceControl(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.TopoPropertyControlType]:
        """
        Gets or sets the MeshDeformationToleranceControl.
        """
        return None

    @property
    def OptimizationType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.OptimizationType]:
        """
        Gets or sets the OptimizationType.
        """
        return None

    @property
    def ShapeMoveLimitControl(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.TopoPropertyControlType]:
        """
        Gets or sets the ShapeMoveLimitControl.
        """
        return None

    @property
    def DesignRegionLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the DesignRegionLocation.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ExclusionRegionLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the ExclusionRegionLocation.
        """
        return None

    @property
    def ExclusionScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ExclusionScopingMethod.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.ACT.Automation.Mechanical.DataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def MaxCumulatedDisplacementControl(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.TopoPropertyControlType]:
        """
        Gets or sets the MaxCumulatedDisplacementControl.
        """
        return None

    @property
    def MorphingTotalMoveLimit(self) -> typing.Optional[float]:
        """
        Gets or sets the MorphingTotalMoveLimit.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddExclusionRegion(self) -> Ansys.ACT.Automation.Mechanical.ExclusionRegion:
        """
        Creates a new ExclusionRegion
        """
        pass

    def GetDefinition(self) -> Ansys.ACT.Automation.Mechanical.MaterialsOptimizationDefinition:
        """
        
            Gets the Worksheet Definition.
            This Definition is a list of OptimizationMaterial.
            
        """
        pass

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PartTransform(object):
    """
    Defines a PartTransform.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPartTransformAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def RotationX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the RotationX.
        """
        return None

    @property
    def RotationY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the RotationY.
        """
        return None

    @property
    def RotationZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the RotationZ.
        """
        return None

    @property
    def TranslationX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the TranslationX.
        """
        return None

    @property
    def TranslationY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the TranslationY.
        """
        return None

    @property
    def TranslationZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the TranslationZ.
        """
        return None

    @property
    def DefineBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PartTransformationDefinitionType]:
        """
        Gets or sets the DefineBy.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def SourceCoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the SourceCoordinateSystem.
        """
        return None

    @property
    def TargetCoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the TargetCoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def TransformGeometry(self) -> None:
        """
        TransformGeometry method.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PartTransformGroup(object):
    """
    Defines a PartTransformGroup.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPartTransformGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def RegenerateContacts(self) -> typing.Optional[bool]:
        """
        Gets or sets the RegenerateContacts.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def TransformMesh(self) -> typing.Optional[bool]:
        """
        Gets or sets the TransformMesh.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def TransformGeometry(self) -> None:
        """
        TransformGeometry method.
        """
        pass

    def AddPartTransform(self) -> Ansys.ACT.Automation.Mechanical.PartTransform:
        """
        Creates a new PartTransform
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PhysicsRegion(object):
    """
    Defines a PhysicsRegion.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPhysicsRegionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ReflectionCoefficientInNegativeXDirection(self) -> typing.Optional[float]:
        """
        Gets or sets the ReflectionCoefficientInNegativeXDirection.
        """
        return None

    @property
    def ReflectionCoefficientInNegativeYDirection(self) -> typing.Optional[float]:
        """
        Gets or sets the ReflectionCoefficientInNegativeYDirection.
        """
        return None

    @property
    def ReflectionCoefficientInNegativeZDirection(self) -> typing.Optional[float]:
        """
        Gets or sets the ReflectionCoefficientInNegativeZDirection.
        """
        return None

    @property
    def ReflectionCoefficientInPositiveXDirection(self) -> typing.Optional[float]:
        """
        Gets or sets the ReflectionCoefficientInPositiveXDirection.
        """
        return None

    @property
    def ReflectionCoefficientInPositiveYDirection(self) -> typing.Optional[float]:
        """
        Gets or sets the ReflectionCoefficientInPositiveYDirection.
        """
        return None

    @property
    def ReflectionCoefficientInPositiveZDirection(self) -> typing.Optional[float]:
        """
        Gets or sets the ReflectionCoefficientInPositiveZDirection.
        """
        return None

    @property
    def ReflectionCoefficient(self) -> typing.Optional[float]:
        """
        Gets or sets the ReflectionCoefficient.
        """
        return None

    @property
    def ReferencePressure(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ReferencePressure.
        """
        return None

    @property
    def ReferenceStaticPressure(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ReferenceStaticPressure.
        """
        return None

    @property
    def ArtificiallyMatchedLayers(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ArtificiallyMatchedLayers]:
        """
        Gets or sets the ArtificiallyMatchedLayers.
        """
        return None

    @property
    def Electric(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ElectricType]:
        """
        Gets or sets the Electric.
        """
        return None

    @property
    def ElectrostaticForce(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ElectrostaticForce]:
        """
        Gets or sets the ElectrostaticForce.
        """
        return None

    @property
    def ElementMorphing(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ElementMorphingType]:
        """
        Gets or sets the ElementMorphing.
        """
        return None

    @property
    def FluidBehavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FluidBehavior]:
        """
        Gets or sets the FluidBehavior.
        """
        return None

    @property
    def ReflectionCoefficientsType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ReflectionCoefficientsType]:
        """
        Gets or sets the ReflectionCoefficientsType.
        """
        return None

    @property
    def PMLOptions(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PMLOptions]:
        """
        Gets or sets the PMLOptions.
        """
        return None

    @property
    def ThermalStrain(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ThermalStrainType]:
        """
        Gets or sets the ThermalStrain.
        """
        return None

    @property
    def ThermoelasticDamping(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ThermoelasticDampingType]:
        """
        Gets or sets the ThermoelasticDamping.
        """
        return None

    @property
    def Acoustics(self) -> typing.Optional[bool]:
        """
        Gets or sets the Acoustics.
        """
        return None

    @property
    def Piezoelectric(self) -> typing.Optional[bool]:
        """
        Gets the Piezoelectric.
        """
        return None

    @property
    def EvanescentWaveAttenuation(self) -> typing.Optional[bool]:
        """
        Gets or sets the EvanescentWaveAttenuation.
        """
        return None

    @property
    def Structural(self) -> typing.Optional[bool]:
        """
        Gets or sets the Structural.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Thermal(self) -> typing.Optional[bool]:
        """
        Gets or sets the Thermal.
        """
        return None

    @property
    def PMLElementCoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the PMLElementCoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def SelectInvalidBodiesOnPhysicsRegion(self) -> None:
        """
        Run the SelectInvalidBodiesOnPhysicsRegion action to select bodies that are not valid.
        """
        pass

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PipeIdealization(object):
    """
    Defines a PipeIdealization.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPipeIdealizationAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Factor(self) -> typing.Optional[float]:
        """
        Gets or sets the Factor.
        """
        return None

    @property
    def Extend(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GrowElbowElementsBy]:
        """
        Gets or sets the Extend.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def GeometrySelection(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the GeometrySelection.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PointMass(object):
    """
    Defines a PointMass.
    """

    @property
    def ElementAPDLName(self) -> typing.Optional[str]:
        """
        Gets or sets the ElementAPDLName.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPointMassAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def BeamCoincidentLengthFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the Coincident Length Factor that scales the stiffness of the connection between the beam elements and the remote point. This property is applicable when Behavior is set to “Beam”. Default: 1.
        """
        return None

    @property
    def Material(self) -> typing.Optional[str]:
        """
        Gets or sets the Material.
        """
        return None

    @property
    def BeamRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the BeamRadius.
        """
        return None

    @property
    def XCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the XCoordinate.
        """
        return None

    @property
    def YCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the YCoordinate.
        """
        return None

    @property
    def ZCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ZCoordinate.
        """
        return None

    @property
    def Mass(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Mass.
        """
        return None

    @property
    def MassMomentOfInertiaX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MassMomentOfInertiaX.
        """
        return None

    @property
    def MassMomentOfInertiaY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MassMomentOfInertiaY.
        """
        return None

    @property
    def MassMomentOfInertiaZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MassMomentOfInertiaZ.
        """
        return None

    @property
    def PinballRegion(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the PinballRegion.
        """
        return None

    @property
    def AppliedBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.RemoteApplicationType]:
        """
        Gets or sets the AppliedBy.
        """
        return None

    @property
    def Behavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.LoadBehavior]:
        """
        Gets or sets the Behavior.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def NodalCoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets the NodalCoordinateSystem.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def RemotePoint(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.RemotePoint]:
        """
        
            Gets the remote point associated to the point mass.
            
        """
        return None

    @property
    def IsDistributedMass(self) -> typing.Optional[bool]:
        """
        Gets the IsDistributedMass.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Geometry.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def PromoteToRemotePoint(self) -> typing.Iterable[Ansys.ACT.Automation.Mechanical.RemotePoint]:
        """
        Run the PromoteToRemotePoint action.
        """
        pass

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ResponseConstraint(object):
    """
    Defines a ResponseConstraint.
    """

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class JointBushingWorksheet(object):
    """
    
            The worksheet of stiffness and damping coefficients for a bushing type joint.
            
    """

    def GetBushingDampingPerUnitX(self, index: int) -> float:
        """
        
            Gets the Coefficient for the damping per UnitX at the indicated row index.
            
        """
        pass

    def GetBushingDampingPerUnitY(self, index: int) -> float:
        """
        
            Gets the Coefficient for the damping per UnitY at the indicated row index.
            
        """
        pass

    def GetBushingDampingPerUnitZ(self, index: int) -> float:
        """
        
            Gets the Coefficient for the damping per UnitZ at the indicated row index.
            
        """
        pass

    def GetBushingDampingPerThetaUnitX(self, index: int) -> float:
        """
        
            Gets the Coefficient for the damping per ThetaUnitX at the indicated row index.
            
        """
        pass

    def GetBushingDampingPerThetaUnitY(self, index: int) -> float:
        """
        
            Gets the Coefficient for the damping per ThetaUnitY at the indicated row index.
            
        """
        pass

    def GetBushingDampingPerThetaUnitZ(self, index: int) -> float:
        """
        
            Gets the Coefficient for the damping per ThetaUnitZ at the indicated row index.
            
        """
        pass

    def SetBushingDampingPerUnitX(self, index: int, newVal: float) -> float:
        """
        
            Sets the Coefficient for the damping per UnitX at the indicated row index.
            
        """
        pass

    def SetBushingDampingPerUnitY(self, index: int, newVal: float) -> float:
        """
        
            Sets the Coefficient for the damping per UnitY at the indicated row index.
            
        """
        pass

    def SetBushingDampingPerUnitZ(self, index: int, newVal: float) -> float:
        """
        
            Sets the Coefficient for the damping per UnitZ at the indicated row index.
            
        """
        pass

    def SetBushingDampingPerThetaUnitX(self, index: int, newVal: float) -> float:
        """
        
            Sets the Coefficient for the damping per ThetaUnitX at the indicated row index.
            
        """
        pass

    def SetBushingDampingPerThetaUnitY(self, index: int, newVal: float) -> float:
        """
        
            Sets the Coefficient for the damping per ThetaUnitY at the indicated row index.
            
        """
        pass

    def SetBushingDampingPerThetaUnitZ(self, index: int, newVal: float) -> float:
        """
        
            Sets the Coefficient for the damping per ThetaUnitZ at the indicated row index.
            
        """
        pass

    def GetBushingStiffnessPerUnitX(self, index: int) -> float:
        """
        
            Gets the Coefficient for the stiffness per UnitX at the indicated row index.
            
        """
        pass

    def GetBushingStiffnessPerUnitY(self, index: int) -> float:
        """
        
            Gets the Coefficient for the stiffness per UnitY at the indicated row index.
            
        """
        pass

    def GetBushingStiffnessPerUnitZ(self, index: int) -> float:
        """
        
            Gets the Coefficient for the stiffness per UnitZ at the indicated row index.
            
        """
        pass

    def GetBushingStiffnessPerThetaUnitX(self, index: int) -> float:
        """
        
            Gets the Coefficient for the stiffness per ThetaUnitX at the indicated row index.
            
        """
        pass

    def GetBushingStiffnessPerThetaUnitY(self, index: int) -> float:
        """
        
            Gets the Coefficient for the stiffness per ThetaUnitY at the indicated row index.
            
        """
        pass

    def GetBushingStiffnessPerThetaUnitZ(self, index: int) -> float:
        """
        
            Gets the Coefficient for the stiffness per ThetaUnitZ at the indicated row index.
            
        """
        pass

    def SetBushingStiffnessPerUnitX(self, index: int, newVal: float) -> float:
        """
        
            Sets the Coefficient for the stiffness per UnitX at the indicated row index.
            
        """
        pass

    def SetBushingStiffnessPerUnitY(self, index: int, newVal: float) -> float:
        """
        
            Sets the Coefficient for the stiffness per UnitY at the indicated row index.
            
        """
        pass

    def SetBushingStiffnessPerUnitZ(self, index: int, newVal: float) -> float:
        """
        
            Sets the Coefficient for the stiffness per UnitZ at the indicated row index.
            
        """
        pass

    def SetBushingStiffnessPerThetaUnitX(self, index: int, newVal: float) -> float:
        """
        
            Sets the Coefficient for the stiffness per ThetaUnitX at the indicated row index.
            
        """
        pass

    def SetBushingStiffnessPerThetaUnitY(self, index: int, newVal: float) -> float:
        """
        
            Sets the Coefficient for the stiffness per ThetaUnitY at the indicated row index.
            
        """
        pass

    def SetBushingStiffnessPerThetaUnitZ(self, index: int, newVal: float) -> float:
        """
        
            Sets the Coefficient for the stiffness per ThetaUnitZ at the indicated row index.
            
        """
        pass


class LayeredSection(object):
    """
    Defines a LayeredSection.
    """

    @property
    def Layers(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.IWorksheet]:
        """
        
            Returns the Layers worksheet associated with LayeredSection
            
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        
            Gets or sets the CoordinateSystem.
            Accepts/Returns None for Body Coordinate System
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSThicknessAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def LayerToDisplay(self) -> typing.Optional[int]:
        """
        Gets or sets the LayerToDisplay.
        """
        return None

    @property
    def LayeredSectionMembraneOffset(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LayeredSectionMembraneOffset.
        """
        return None

    @property
    def TotalMass(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the TotalMass.
        """
        return None

    @property
    def TotalThickness(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the TotalThickness.
        """
        return None

    @property
    def OffsetType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ShellOffsetType]:
        """
        Gets or sets the OffsetType.
        """
        return None

    @property
    def NonlinearEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the NonlinearEffects.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def ThermalStrainEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the ThermalStrainEffects.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class LayeredSectionWorksheet(object):

    @property
    def RowCount(self) -> typing.Optional[int]:
        """
        
            Gets the number of entries (rows) in the worksheet.
            
        """
        return None

    def AddThicknessLayer(self, materialname: str, thickness: float, angle: float) -> int:
        """
        
            Add a row to the LayeredSectionWorksheet
            New layers are added as the top most layer in the Z direction.
            LayeredSectionWorksheet indices are zero based and ordered in the Z direction.
            
        """
        pass

    def InsertThicknessLayerAbove(self, materialname: str, thickness: float, angle: float, index: int) -> int:
        """
        
            Insert a new layer to the LayeredSectionWorksheet
            The new layer will be inserted above the layer indicated by the given index.
            LayeredSectionWorksheet indices are zero based and ordered in the Z direction.
            
        """
        pass

    def InsertThicknessLayerBelow(self, materialname: str, thickness: float, angle: float, index: int) -> int:
        """
        
            Insert a new layer to the LayeredSectionWorksheet
            The new layer will be inserted below the layer indicated by the given index.
            LayeredSectionWorksheet indices are zero based and ordered in the Z direction.
            
        """
        pass

    def DeleteRow(self, index: int) -> None:
        """
        
            Delete a row from the LayeredSectionWorksheet
            LayeredSectionWorksheet indices are zero based and ordered in the Z direction.
            
        """
        pass

    def SetThickness(self, index: int, thickness: float) -> None:
        """
        
            Set the thickness for the LayeredSection at the row index specifiied.
            LayeredSectionWorksheet indices are zero based and ordered in the Z direction.
            
        """
        pass

    def SetAngle(self, index: int, angle: float) -> None:
        """
        
            Set the angle for the LayeredSection at the row index specifiied.
            LayeredSectionWorksheet indices are zero based and ordered in the Z direction.
            
        """
        pass

    def SetMaterial(self, index: int, materialname: str) -> None:
        """
        
            Set the material for the LayeredSection at the row index specifiied.
            LayeredSectionWorksheet indices are zero based and ordered in the Z direction.
            
        """
        pass

    def GetThickness(self, index: int) -> float:
        """
        
            Gets the thickness for the LayeredSection at the row index specifiied.
            LayeredSectionWorksheet indices are zero based and ordered in the Z direction.
            
        """
        pass

    def GetAngle(self, index: int) -> float:
        """
        
            Gets the angle for the LayeredSection at the row index specifiied.
            LayeredSectionWorksheet indices are zero based and ordered in the Z direction.
            
        """
        pass

    def GetMaterial(self, index: int) -> str:
        """
        
            Gets the material for the LayeredSection at the row index specifiied.
            LayeredSectionWorksheet indices are zero based and ordered in the Z direction.
            
        """
        pass


class SMARTCrackGrowth(object):
    """
    Defines a SMARTCrackGrowth.
    """

    @property
    def AutomaticTimeStepping(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets or sets the AutomaticTimeStepping.
        """
        return None

    @property
    def FailureCriteriaOption(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DelaminationFailureCriteriaOption]:
        """
        Gets or sets the FailureCriteriaOption.
        """
        return None

    @property
    def CriticalRate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the CriticalRate.
        """
        return None

    @property
    def StopValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the StopValue.
        """
        return None

    @property
    def MaxIncrementValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaxIncrementValue.
        """
        return None

    @property
    def MinIncrementValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinIncrementValue.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSDelaminationAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def CrackGrowthLaw(self) -> typing.Optional[str]:
        """
        Gets the CrackGrowthLaw.
        """
        return None

    @property
    def FactorAlpha1(self) -> typing.Optional[float]:
        """
        Gets or sets a positive multiplicative factor for K2 term in the equivalent SIF calculation function.
        """
        return None

    @property
    def FactorAlpha2(self) -> typing.Optional[float]:
        """
        Gets or sets a positive multiplicative factor for K3 term in the equivalent SIF calculation function.
        """
        return None

    @property
    def CoefficientA(self) -> typing.Optional[float]:
        """
        Gets or sets the coefficient of first order term in the Richard function for the kink angle. Valid range: -180 to 180 Degrees.
        """
        return None

    @property
    def CoefficientB(self) -> typing.Optional[float]:
        """
        Gets or sets the coefficient of second order term in the Richard function for the kink angle. Valid range: -180 to 180 Degrees.
        """
        return None

    @property
    def Material(self) -> typing.Optional[str]:
        """
        Gets or sets the Material.
        """
        return None

    @property
    def NumberOfCycles(self) -> typing.Optional[int]:
        """
        Gets or sets the NumberOfCycles.
        """
        return None

    @property
    def StressRatio(self) -> typing.Optional[float]:
        """
        Gets or sets the StressRatio.
        """
        return None

    @property
    def InitialTimeStep(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the InitialTimeStep.
        """
        return None

    @property
    def MaximumTimeStep(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaximumTimeStep.
        """
        return None

    @property
    def MinimumTimeStep(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinimumTimeStep.
        """
        return None

    @property
    def CrackGrowthMethodology(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackGrowthMethodology]:
        """
        Gets or sets the CrackGrowthMethodology.
        """
        return None

    @property
    def CrackGrowthOption(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackGrowthOption]:
        """
        Gets or sets the CrackGrowthOption.
        """
        return None

    @property
    def Method(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DelaminationMethod]:
        """
        Gets the Method.
        """
        return None

    @property
    def Analysis(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DelaminationType]:
        """
        Gets the Analysis.
        """
        return None

    @property
    def EquivalentSIFMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.SMARTCrackGrowth.EquivalentSIFMethod]:
        """
        Gets or sets the Equivalent Stress Intensity Factor calculation method. Default: ProgramControlled
        """
        return None

    @property
    def KinkAngleMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.SMARTCrackGrowth.EquivalentSIFMethod]:
        """
        Gets or sets the Kink Angle calculation method. Default: MaximumTangentialStress
        """
        return None

    @property
    def MaxIncrementOfCrackExtension(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackGrowthIncrementType]:
        """
        Gets or sets the MaxIncrementOfCrackExtension.
        """
        return None

    @property
    def MaxIncrementValueTreatment(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.IncrementTreatment]:
        """
        Gets or sets the treatment type for the specified value of MaxIncrementValue. Default: Absolute
        """
        return None

    @property
    def MeshCoarsening(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackGrowthMeshCoarsening]:
        """
        Gets or sets the MeshCoarsening.
        """
        return None

    @property
    def MinIncrementControl(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.IncrementControl]:
        """
        Gets or sets the control type for the smaller crack increment values.
        """
        return None

    @property
    def MinIncrementOfCrackExtension(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackGrowthIncrementType]:
        """
        Gets or sets the MinIncrementOfCrackExtension.
        """
        return None

    @property
    def MinIncrementValueTreatment(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.IncrementTreatment]:
        """
        Gets or sets the treatment type for the specified value of MinIncrementValue. Default: Absolute
        """
        return None

    @property
    def MultiplicativeFactors(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.SMARTCrackGrowth.MultiplicativeFactorsType]:
        """
        Gets or sets the Multiplicative Factors Type for the Equivalent SIF Method. Default: ProgramControlled
        """
        return None

    @property
    def RichardCoefficients(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.SMARTCrackGrowth.RichardCoefficientsType]:
        """
        Gets or sets the Richard Coefficients Type for the Kink Angle Method. Default: ProgramControlled
        """
        return None

    @property
    def StopCriterion(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.StopCriterion]:
        """
        Gets or sets the StopCriterion.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def InitialCrack(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.GenericCrack]:
        """
        Gets or sets the InitialCrack.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Solid(object):
    """
    Defines a Solid.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSSolidAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def PartName(self) -> typing.Optional[str]:
        """
        Gets the PartName.
        """
        return None

    @property
    def X1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the X1.
        """
        return None

    @property
    def X2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the X2.
        """
        return None

    @property
    def Y1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Y1.
        """
        return None

    @property
    def Y2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Y2.
        """
        return None

    @property
    def Z1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Z1.
        """
        return None

    @property
    def Z2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Z2.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddGeometry(self) -> None:
        """
        Add solid to the geometry.
        """
        pass

    def UpdateGeometry(self) -> None:
        """
        Update the solid on the geometry.
        """
        pass

    def RemoveGeometry(self) -> None:
        """
        Remove the solid from the geometry.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Symmetry(object):
    """
    Defines a Symmetry.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSSymmetryGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddLinearPeriodicRegion(self) -> Ansys.ACT.Automation.Mechanical.SymmetryRegion:
        """
        Creates a new SymmetryRegion
        """
        pass

    def AddCyclicRegion(self) -> Ansys.ACT.Automation.Mechanical.CyclicRegion:
        """
        Creates a new CyclicRegion
        """
        pass

    def AddGeneralAxisymmetric(self) -> Ansys.ACT.Automation.Mechanical.GeneralAxisymmetric:
        """
        Creates a new GeneralAxisymmetric
        """
        pass

    def AddPeriodicRegion(self) -> Ansys.ACT.Automation.Mechanical.PeriodicRegion:
        """
        Creates a new PeriodicRegion
        """
        pass

    def AddPreMeshedCyclicRegion(self) -> Ansys.ACT.Automation.Mechanical.PreMeshedCyclicRegion:
        """
        Creates a new PreMeshedCyclicRegion
        """
        pass

    def AddStage(self) -> Ansys.ACT.Automation.Mechanical.Stage:
        """
        Creates a new Stage
        """
        pass

    def AddSymmetryRegion(self) -> Ansys.ACT.Automation.Mechanical.SymmetryRegion:
        """
        Creates a new SymmetryRegion
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class SymmetryGeneral(object):
    """
    Defines a SymmetryGeneral.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSSymmetryGeneralAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ScopeMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets the ScopeMode.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def HighBoundaryLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the HighBoundaryLocation.
        """
        return None

    @property
    def LowBoundaryLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the LowBoundaryLocation.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def FlipHighLow(self) -> None:
        """
        Flips the High and Low Boundaries.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ThermalPointMass(object):
    """
    Defines a ThermalPointMass.
    """

    @property
    def Behavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ThermalPointMassBehavior]:
        """
        Gets or sets the Behavior.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPointMassAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def XCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the XCoordinate.
        """
        return None

    @property
    def YCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the YCoordinate.
        """
        return None

    @property
    def ZCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ZCoordinate.
        """
        return None

    @property
    def PinballRegion(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the PinballRegion.
        """
        return None

    @property
    def ThermalCapacitance(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ThermalCapacitance.
        """
        return None

    @property
    def AppliedBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.RemoteApplicationType]:
        """
        Gets or sets the AppliedBy.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def RemotePoint(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.RemotePoint]:
        """
        
            Gets the remote point associated to the point mass.
            
        """
        return None

    @property
    def IsDistributedMass(self) -> typing.Optional[bool]:
        """
        Gets the IsDistributedMass.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Geometry.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def PromoteToRemotePoint(self) -> typing.Iterable[Ansys.ACT.Automation.Mechanical.RemotePoint]:
        """
        Run the PromoteToRemotePoint action.
        """
        pass

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Thickness(object):
    """
    Defines a Thickness.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSThicknessAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def NumberOfSegments(self) -> typing.Optional[int]:
        """
        Gets or sets the NumberOfSegments.
        """
        return None

    @property
    def ThicknessField(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the ThicknessField.
        """
        return None

    @property
    def RangeMaximum(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the RangeMaximum.
        """
        return None

    @property
    def RangeMinimum(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the RangeMinimum.
        """
        return None

    @property
    def MembraneOffset(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MembraneOffset.
        """
        return None

    @property
    def ScopeMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets the ScopeMode.
        """
        return None

    @property
    def OffsetType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ShellOffsetType]:
        """
        Gets or sets the OffsetType.
        """
        return None

    @property
    def IndependentVariable(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.LoadVariableVariationType]:
        """
        Gets or sets the IndependentVariable.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def XYZFunctionCoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the XYZFunctionCoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshControlWorksheet(object):

    @property
    def RowCount(self) -> typing.Optional[int]:
        """
        
            Gets the number of entries
            
        """
        return None

    def AddRow(self) -> int:
        """
        
            Add a row to the MeshControlWorksheet
            
        """
        pass

    def DeleteRow(self, index: int) -> None:
        """
        
            Delete a row from the MeshControlWorksheet
            
        """
        pass

    def GetActiveState(self, index: int) -> bool:
        """
        
            Gets the Active State property at row index
            
        """
        pass

    def SetActiveState(self, index: int, value: bool) -> None:
        """
        
            Sets the Active State property at row index
            
        """
        pass

    def GetNamedSelectionId(self, index: int) -> int:
        """
        
            Gets the ID of the NamedSelection at row index
            
        """
        pass

    def GetNamedSelection(self, index: int) -> Ansys.ACT.Automation.Mechanical.NamedSelection:
        """
        
            Gets the NamedSelection at row index
            
        """
        pass

    def SetNamedSelectionId(self, index: int, value: int) -> None:
        """
        
            Sets the NamedSelection by ID at row index
            
        """
        pass

    def SetNamedSelection(self, index: int, value: Ansys.ACT.Automation.Mechanical.NamedSelection) -> None:
        """
        
            Sets the NamedSelection at row index
            
        """
        pass

    def GenerateMesh(self) -> None:
        """
        
            Geneate Mesh
            
        """
        pass

    def ClearGenerateMesh(self) -> None:
        """
        
            Clear Mesh
            
        """
        pass

    def GenerateAtRow(self, index: int) -> None:
        """
        
            Generate Mesh At Row
            
        """
        pass

    def DeleteAllRows(self) -> None:
        """
        
            Delete All Rows
            
        """
        pass


class SelectionWorksheet(object):

    @property
    def RowCount(self) -> typing.Optional[int]:
        """
        
            
            
        """
        return None

    def Generate(self) -> None:
        """
        
            Generate the selection from the worksheet.
            
        """
        pass

    def AddRow(self) -> int:
        """
        
            Adds a Row to the worksheet.
            
        """
        pass

    def DeleteRow(self, index: int) -> None:
        """
        
            Deletes a row from the worksheet at index.
            
        """
        pass

    def SetCriterion(self, index: int, value: Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetCriterion) -> None:
        """
        
            Sets the worksheet Criterion property at index.
            
        """
        pass

    def SetAction(self, index: int, newVal: Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetAction) -> None:
        """
        
            Sets the worksheet Action property at index.
            
        """
        pass

    def SetCoordinateSystemSelection(self, index: int, newVal: int) -> None:
        """
        
            Sets the worksheet CoordinateSystemSelection property at index.
            
        """
        pass

    def SetCriterionActive(self, index: int, newVal: bool) -> None:
        """
        
            Sets the worksheet CriterionActive property at index.
            
        """
        pass

    def SetEntityType(self, index: int, newVal: Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetEntityType) -> None:
        """
        
            Sets the worksheet GeometryType property at index.
            
        """
        pass

    def SetLowerBound(self, index: int, newVal: float) -> None:
        """
        
            Sets the worksheet LowerBound property at index.
            
        """
        pass

    def SetOperator(self, index: int, newVal: Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetOperator) -> None:
        """
        
            Sets the worksheet Operator property at index.
            
        """
        pass

    def SetStringValue(self, index: int, newVal: str) -> None:
        """
        
            Sets the worksheet StringValue property at index.
            
        """
        pass

    def SetTag(self, index: int, newVal: str) -> None:
        """
        
            Sets the worksheet Tag property at index.
            
        """
        pass

    def SetUpperBound(self, index: int, newVal: float) -> None:
        """
        
            Sets the worksheet UpperBound property at index.
            
        """
        pass

    def SetValue(self, index: int, newVal: float) -> None:
        """
        
            Sets the worksheet Value property at index.
            
        """
        pass

    def GetEdgeTypeValue(self, index: int) -> Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetEdgeTypeValues:
        """
        
            Gets the worksheet Edge Type Value property at index.
            
        """
        pass

    def SetEdgeTypeValue(self, index: int, newVal: Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetEdgeTypeValues) -> None:
        """
        
            Sets the worksheet Edge Type Value property at index.
            
        """
        pass

    def SetFaceTypeValue(self, index: int, newVal: Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetFaceTypeValues) -> None:
        """
        
            Sets the worksheet Face Type Value property at index.
            
        """
        pass

    def GetFaceTypeValue(self, index: int) -> Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetFaceTypeValues:
        """
        
            Gets the worksheet Face Type Value property at index.
            
        """
        pass

    def SetBodyTypeValue(self, index: int, newVal: Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetBodyTypeValues) -> None:
        """
        
            Sets the worksheet Body Type Value property at index.
            
        """
        pass

    def GetBodyTypeValue(self, index: int) -> Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetBodyTypeValues:
        """
        
            Gets the worksheet Body Type Value property at index.
            
        """
        pass

    def SetMeshElementTypeValue(self, index: int, newVal: Ansys.Mechanical.DataModel.Enums.MeshElementShape) -> None:
        """
        
            Sets the worksheet Mesh Element Type Value property at index.
            
        """
        pass

    def GetMeshElementTypeValue(self, index: int) -> Ansys.Mechanical.DataModel.Enums.MeshElementShape:
        """
        
            Gets the worksheet Mesh Element Type Value property at index.
            
        """
        pass

    def GetCriterion(self, index: int) -> Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetCriterion:
        """
        
            Gets the worksheet Criterion property at index.
            
        """
        pass

    def GetAction(self, index: int) -> Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetAction:
        """
        
            Gets the worksheet Action property at index.
            
        """
        pass

    def GetCoordinateSystemSelection(self, index: int) -> int:
        """
        
            Gets the worksheet CoordinateSystemSelection property at index.
            
        """
        pass

    def GetCriterionActive(self, index: int) -> bool:
        """
        
            Gets the worksheet CriterionActive property at index.
            
        """
        pass

    def GetGeometryType(self, index: int) -> Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetEntityType:
        """
        
            Gets the worksheet GeometryType property at index.
            
        """
        pass

    def GetLowerBound(self, index: int) -> float:
        """
        
            Gets the worksheet LowerBound property at index.
            
        """
        pass

    def GetOperator(self, index: int) -> Ansys.Mechanical.DataModel.Enums.NamedSelectionWorksheetOperator:
        """
        
            Gets the worksheet Operator property at index.
            
        """
        pass

    def GetStringValue(self, index: int) -> str:
        """
        
            Gets the worksheet StringValue property at index.
            
        """
        pass

    def GetTag(self, index: int) -> str:
        """
        
            Gets the worksheet Tag property at index.
            
        """
        pass

    def GetUpperBound(self, index: int) -> float:
        """
        
            Gets the worksheet UpperBound property at index.
            
        """
        pass

    def GetValue(self, index: int) -> float:
        """
        
            Gets the worksheet Value property at index.
            
        """
        pass


class SymmetryRegion(object):
    """
    Defines a SymmetryRegion.
    """

    @property
    def PeriodicityDirection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PeriodicityDirectionType]:
        """
        Gets or sets the PeriodicityDirection.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def LinearShift(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LinearShift.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSSymmetryGeneralAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ApplyTo(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PeriodicApplyTo]:
        """
        Gets or sets the ApplyTo.
        """
        return None

    @property
    def Behavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SymmetryBehavior]:
        """
        Gets or sets the Behavior.
        """
        return None

    @property
    def SymmetryNormal(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SymmetryNormalType]:
        """
        Gets or sets the SymmetryNormal.
        """
        return None

    @property
    def Type(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SymmetryRegionType]:
        """
        Gets or sets the Type.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ScopeMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets the ScopeMode.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def HighBoundaryLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the HighBoundaryLocation.
        """
        return None

    @property
    def LowBoundaryLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the LowBoundaryLocation.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def FlipHighLow(self) -> None:
        """
        Flips the High and Low Boundaries.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CondensedPartExpansionState(object):

    @property
    def Stress(self) -> typing.Optional[bool]:
        """
        
            Gets or sets the Stress Property
            
        """
        return None

    @property
    def Displacement(self) -> typing.Optional[bool]:
        """
        
            Gets or sets the Displacement Property
            
        """
        return None


class ExpansionSettings(object):
    """
    Defines a ExpansionSettings.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExpansionSettingsAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def CondensedPartExpansionType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartExpansionType]:
        """
        Gets or sets the CondensedPartExpansionType.
        """
        return None

    @property
    def NodalForces(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.OutputControlsNodalForcesType]:
        """
        Gets or sets the NodalForces.
        """
        return None

    @property
    def Strain(self) -> typing.Optional[bool]:
        """
        Gets or sets the Strain.
        """
        return None

    @property
    def Stress(self) -> typing.Optional[bool]:
        """
        Gets or sets the Stress.
        """
        return None

    @property
    def CleanupOptionalFiles(self) -> typing.Optional[bool]:
        """
        Gets or sets the CleanupOptionalFiles.
        """
        return None

    @property
    def ExpandAfterUsePassFailure(self) -> typing.Optional[bool]:
        """
        Gets or sets the ExpandAfterUsePassFailure.
        """
        return None

    @property
    def GeneralMiscellaneous(self) -> typing.Optional[bool]:
        """
        Gets or sets the GeneralMiscellaneous.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GetExpansionState(self, condensedPart: Ansys.ACT.Automation.Mechanical.CondensedPart) -> Ansys.ACT.Automation.Mechanical.CondensedPartExpansionState:
        """
        
            Gets the requested expansion state of a given Condensed Part
            
        """
        pass

    def SetExpansionState(self, condensedPart: Ansys.ACT.Automation.Mechanical.CondensedPart, state: Ansys.ACT.Automation.Mechanical.CondensedPartExpansionState) -> None:
        """
        
            Sets the requested expansion state of a given Condensed Part
            
        """
        pass

    def GetCompletedExpansionState(self, condensedPart: Ansys.ACT.Automation.Mechanical.CondensedPart) -> Ansys.ACT.Automation.Mechanical.CondensedPartExpansionState:
        """
        
            Gets the completed expansion state of a given Condensed Part
            
        """
        pass

    def EvaluateAllResults(self) -> None:
        """
        Run the EvaluateAllResults action.
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def PerformExpansionPass(self) -> None:
        """
        Run the PerformExpansionPass action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class GenericDelamination(object):
    """
    Defines a GenericDelamination.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSDelaminationAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class GenericCrack(object):
    """
    Defines a GenericCrack.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrackAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def CrackID(self) -> typing.Optional[int]:
        """
        Gets the CrackID.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Tree(object):

    @property
    def FirstActiveObject(self) -> typing.Optional[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the first object selected in the tree.
        """
        return None

    @property
    def ActiveObjects(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        
            Gets a list of all selected objects.
            
        """
        return None

    @property
    def AllObjects(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        
            Gets a list of all objects available in the tree.
            
        """
        return None

    @property
    def GroupingFoldersVisible(self) -> typing.Optional[bool]:
        """
        Controls whether or not group folders are visible.
        """
        return None

    @property
    def CurrentFilter(self) -> typing.Optional[Ansys.Common.Interop.DSObjectTypes.DSTreeSearchType]:
        """
        
            Gets the current filter applied on the tree.
            
        """
        return None

    @property
    def CurrentSearchString(self) -> typing.Optional[str]:
        """
        
            Gets the current search string (name/tag/propertyName/propertyValue).
            
        """
        return None

    @property
    def CurrentSearchState(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ObjectState]:
        """
        
            Gets the current search state.
            
        """
        return None

    @property
    def CurrentSearchGraphics(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.VisibilityType]:
        """
        
            Gets the current visibility.
            
        """
        return None

    def Refresh(self, recomputeStates: bool) -> None:
        """
        
            Refreshes the tree.
            
        """
        pass

    def Suspend(self) -> "System.IDisposable":
        """
        
            Prevents the tree from being updated.
            
        """
        pass

    def GetPathToFirstActiveObject(self) -> str:
        """
        
            Gets the full path that needs to be typed in order to go to the selected object.
            
        """
        pass

    def Find(self, name: str, func: "System.Func[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject,bool]", tag: str, state: Ansys.Mechanical.DataModel.Enums.ObjectState) -> typing.Iterable[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Find method.
        """
        pass

    def Sort(self, type: Ansys.Mechanical.DataModel.Enums.SortingType, reverse: bool) -> None:
        """
        
            Sorts the tree objects based on given parameters.
            type
            reverse
            
        """
        pass

    def ClearSort(self) -> None:
        """
        
            Clears the current sort.
            
        """
        pass

    def Filter(self, name: str, tag: str, state: Ansys.Mechanical.DataModel.Enums.ObjectState, visibility: Ansys.Mechanical.DataModel.Enums.VisibilityType, type: Ansys.Mechanical.DataModel.Enums.TreeFilterObjectClass, coordinateSystem: Ansys.ACT.Automation.Mechanical.CoordinateSystem, model: str, environment: Ansys.ACT.Automation.Mechanical.Analysis, scoping: Ansys.Mechanical.DataModel.Enums.TreeFilterScopingType, filterState: Ansys.Mechanical.DataModel.Enums.TreeFilterObjectState, propertyName: str, propertyValue: str, invertSearchResults: System.Nullable[bool]) -> None:
        """
        Filter method.
        """
        pass

    def ClearFilter(self) -> None:
        """
        
            Clears the current filter.
            
        """
        pass

    def Group(self, dataModelObjects: typing.Iterable) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        
            Groups a list of objects together.
            
        """
        pass

    def Group(self, dataModelObject: Ansys.Mechanical.DataModel.Interfaces.IDataModelObject) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        
            Moves dataModelObject to new tree grouping folder.
            
        """
        pass

    def Ungroup(self, groupingFolder: Ansys.ACT.Automation.Mechanical.TreeGroupingFolder) -> None:
        """
         Removes groupingFolder from the tree.
            
        """
        pass

    def Activate(self, dataModelObject: Ansys.Mechanical.DataModel.Interfaces.IDataModelObject) -> None:
        """
        selects an object in the tree.
        """
        pass

    def Activate(self, dataModelObjects: typing.Iterable[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> None:
        """
        Activate method.
        """
        pass

    def IsSorted(self) -> bool:
        """
        
            Checks if the tree is currently sorted alphabetically.
            
        """
        pass


class Worksheet(object):

    pass

class Crack(object):
    """
    Defines a Crack.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrackAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def XScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the XScaleFactor.
        """
        return None

    @property
    def YScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the YScaleFactor.
        """
        return None

    @property
    def ZScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ZScaleFactor.
        """
        return None

    @property
    def CircumferentialDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CircumferentialDivisions.
        """
        return None

    @property
    def CrackFrontDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CrackFrontDivisions.
        """
        return None

    @property
    def MeshContours(self) -> typing.Optional[int]:
        """
        Gets or sets the MeshContours.
        """
        return None

    @property
    def SolutionContours(self) -> typing.Optional[int]:
        """
        Gets or sets the SolutionContours.
        """
        return None

    @property
    def Contact1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Contact1Nodes.
        """
        return None

    @property
    def CrackFrontNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the CrackFrontNodes.
        """
        return None

    @property
    def BottomFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the BottomFaceNodes.
        """
        return None

    @property
    def FaceTopNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the FaceTopNodes.
        """
        return None

    @property
    def Target1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Target1Nodes.
        """
        return None

    @property
    def FractureAffectedZoneHeight(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FractureAffectedZoneHeight.
        """
        return None

    @property
    def FractureAffectedZone(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FractureAffectedZone.
        """
        return None

    @property
    def LargestContourRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LargestContourRadius.
        """
        return None

    @property
    def MajorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MajorRadius.
        """
        return None

    @property
    def MinorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinorRadius.
        """
        return None

    @property
    def CrackShape(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackShapeType]:
        """
        Gets the CrackShape.
        """
        return None

    @property
    def CrackSourceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackSourceType]:
        """
        Gets the CrackSourceType.
        """
        return None

    @property
    def AlignWithFaceNormal(self) -> typing.Optional[bool]:
        """
        Gets or sets the AlignWithFaceNormal.
        """
        return None

    @property
    def ProjectToNearestSurface(self) -> typing.Optional[bool]:
        """
        Gets or sets the ProjectToNearestSurface.
        """
        return None

    @property
    def ContactPairsNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the ContactPairsNodes.
        """
        return None

    @property
    def CrackFacesNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the CrackFacesNodes.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets the Location.
        """
        return None

    @property
    def CrackID(self) -> typing.Optional[int]:
        """
        Gets the CrackID.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Surface(object):
    """
    Defines a Surface.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSSurfaceAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class SolutionCombinationDefinition(object):

    @property
    def LoadCombinationCount(self) -> typing.Optional[int]:
        """
        
            Gets the number of load combinations
            
        """
        return None

    @property
    def BaseCaseCount(self) -> typing.Optional[int]:
        """
        
            Gets the number of bases cases
            
        """
        return None

    def AddLoadCombination(self, name: str, type: int) -> None:
        """
        
            Add a LoadCombination to the SolutionCombination Definition
            
        """
        pass

    def DeleteLoadCombination(self, index: int) -> None:
        """
        
            Delete a LoadCombination from the SolutionCombination Definition
            
        """
        pass

    def AddBaseCase(self, name: str, analysis: Ansys.ACT.Automation.Mechanical.Analysis, time: float) -> None:
        """
        
            Add a BaseCase to the SolutionCombinationDefinition
            
        """
        pass

    def DeleteBaseCase(self, index: int) -> None:
        """
        
            Delete a BaseCase from the SolutionCombinationDefinition
            
        """
        pass

    def GetBaseCaseName(self, index: int) -> str:
        """
        
            Gets the BaseCase Name property at given index
            
        """
        pass

    def SetBaseCaseName(self, index: int, name: str) -> None:
        """
        
            Sets the BaseCase Name property at given index
            
        """
        pass

    def GetBaseCaseAnalysis(self, index: int) -> Ansys.ACT.Automation.Mechanical.Analysis:
        """
        
            Gets the BaseCase Analysis property at given index.
            
        """
        pass

    def SetBaseCaseAnalysis(self, index: int, analysis: Ansys.ACT.Automation.Mechanical.Analysis) -> None:
        """
        
            Sets the BaseCase Analysis property to given index.
            
        """
        pass

    def GetBaseCaseTime(self, index: int) -> float:
        """
        
            Gets the Time property from the Base Case at given index
            
        """
        pass

    def SetBaseCaseTime(self, index: int, value: float) -> None:
        """
        
            Sets the Time property to the Base Case at given index
            
        """
        pass

    def GetBaseCaseFrequency(self, index: int) -> float:
        """
        
            Gets the Frequency property from the Base Case at given index
            
        """
        pass

    def SetBaseCaseFrequency(self, index: int, value: float) -> None:
        """
        
            Sets the Frequency property to the Base Case at given index
            
        """
        pass

    def GetBaseCasePhaseAngle(self, index: int) -> float:
        """
        
            Gets the Phase Angle property from the Base Case at given index
            
        """
        pass

    def SetBaseCasePhaseAngle(self, index: int, value: float) -> None:
        """
        
            Sets the Phase Angle property to the Base Case at given index
            
        """
        pass

    def GetLoadCombinationType(self, index: int) -> Ansys.Mechanical.DataModel.Enums.LoadCombinationType:
        """
        
            Gets the Load Combination Type property at given index
            
        """
        pass

    def SetLoadCombinationType(self, index: int, value: Ansys.Mechanical.DataModel.Enums.LoadCombinationType) -> None:
        """
        
            Sets the Load Combination Type property at given index
            
        """
        pass

    def GetLoadCombinationName(self, index: int) -> str:
        """
        
            Gets the LoadCombination Name property at given index
            
        """
        pass

    def SetLoadCombinationName(self, index: int, name: str) -> None:
        """
        
            Sets the LoadCombination Name property at given index
            
        """
        pass

    def GetCoefficient(self, LCindex: int, BCindex: int) -> float:
        """
        
            Gets the Coefficient property at given LoadCombination index and BaseCase index 
            
        """
        pass

    def SetCoefficient(self, LCindex: int, BCindex: int, value: float) -> None:
        """
        
            Sets  the Coefficient property at given LoadCombination index and BaseCase index 
            
        """
        pass

    def Import(self, filepath: str) -> None:
        """
        
            Import Load Combination Definition data from Comma Separated Value (CSV) files
            
        """
        pass

    def Export(self, filepath: str) -> None:
        """
        
            Export Load Combination Definition data to Comma Separated Value (CSV) files
            
        """
        pass


class STL(object):
    """
    Defines a STL.
    """

    @property
    def TranslateX(self) -> typing.Optional[float]:
        """
        Gets or sets the TranslateX.
        """
        return None

    @property
    def Color(self) -> typing.Optional[int]:
        """
        Gets or sets the Color.
        """
        return None

    @property
    def TranslateY(self) -> typing.Optional[float]:
        """
        Gets or sets the TranslateY.
        """
        return None

    @property
    def TranslateZ(self) -> typing.Optional[float]:
        """
        Gets or sets the TranslateZ.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSGeometryFileContainerAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def FileName(self) -> typing.Optional[str]:
        """
        Gets or sets the FileName.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Statistics(self) -> typing.Optional[int]:
        """
        Gets the Statistics.
        """
        return None

    @property
    def LengthUnits(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.WBUnitSystemType]:
        """
        Gets or sets the LengthUnits.
        """
        return None

    @property
    def ShowAlways(self) -> typing.Optional[bool]:
        """
        Gets or sets the ShowAlways.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def ExportStl(self, filename: str, progress: Ansys.Mechanical.Application.Progress) -> None:
        """
        Export STL data.
        """
        pass

    def ImportSTL(self) -> None:
        """
        Run the ImportSTL action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Analysis(object):
    """
    Defines a Analysis.
    """

    @property
    def CellId(self) -> typing.Optional[str]:
        """
        Gets the CellId.
        """
        return None

    @property
    def SystemCaption(self) -> typing.Optional[str]:
        """
        Gets the SystemCaption.
        """
        return None

    @property
    def InitialConditions(self) -> typing.Optional[typing.List[Ansys.ACT.Automation.Mechanical.InitialCondition]]:
        """
        Get InitialConditions.
        """
        return None

    @property
    def ResultFileName(self) -> typing.Optional[str]:
        """
        
            Get the full path and name of the result file.
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSEnvironmentAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def EnvironmentTemperature(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the EnvironmentTemperature.
        """
        return None

    @property
    def AMProcessSimulation(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AMProcessSimulationType]:
        """
        Gets or sets the AMProcessSimulation.
        """
        return None

    @property
    def AnalysisType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AnalysisType]:
        """
        Gets the AnalysisType.
        """
        return None

    @property
    def PhysicsType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PhysicsType]:
        """
        Gets the PhysicsType.
        """
        return None

    @property
    def Acoustics(self) -> typing.Optional[bool]:
        """
        Gets or sets the Acoustics.
        """
        return None

    @property
    def Electric(self) -> typing.Optional[bool]:
        """
        Gets the Electric.
        """
        return None

    @property
    def GenerateInputOnly(self) -> typing.Optional[bool]:
        """
        Gets the GenerateInputOnly.
        """
        return None

    @property
    def Structural(self) -> typing.Optional[bool]:
        """
        Gets or sets the Structural.
        """
        return None

    @property
    def Thermal(self) -> typing.Optional[bool]:
        """
        Gets the Thermal.
        """
        return None

    @property
    def AnalysisSettings(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.AnalysisSettings.AnalysisSettings]:
        """
        Gets the AnalysisSettings.
        """
        return None

    @property
    def Solution(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Solution]:
        """
        Gets the Solution.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddTemperature(self, representation: Ansys.Mechanical.DataModel.MechanicalEnums.BoundaryConditions.DataRepresentation) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Temperature:
        """
        
            Creates a new child Temperature.
            
        """
        pass

    def AddConvection(self, representation: Ansys.Mechanical.DataModel.MechanicalEnums.BoundaryConditions.DataRepresentation) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Convection:
        """
        
            
        """
        pass

    def AddThermalCondition(self, representation: Ansys.Mechanical.DataModel.MechanicalEnums.BoundaryConditions.DataRepresentation) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.ThermalCondition:
        """
        
            
        """
        pass

    def AddPressure(self, representation: Ansys.Mechanical.DataModel.MechanicalEnums.BoundaryConditions.DataRepresentation) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Pressure:
        """
        
            Creates a new child Pressure.
            DataRepresentation.Field will use the Field object for working with tabular data
            DataRepresentation.Flexible allows the use of the following types when the pressure is defined as a normal to a surface:
            Quantity: The unit must be a valid Pressure unit
            string: It is interpreted as s table if it matches a Table name. Else it is interpreted as an expresion
            Table: A table object can be specified.
            
        """
        pass

    def Solve(self, wait: bool) -> None:
        """
        Run the Solve action.
        """
        pass

    def Solve(self, wait: bool, config: str) -> None:
        """
        Run the Solve action.
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def OpenSolverFilesDirectory(self) -> None:
        """
        Run the OpenSolverFilesDirectory action.
        """
        pass

    def FilterBasedOnEnvironment(self) -> None:
        """
        Enables interface filtering that only displays model-level items applicable to 
            the currently selected environment type.
        """
        pass

    def AddInitialVelocity(self) -> Ansys.ACT.Automation.Mechanical.InitialCondition:
        """
        Creates a new child Initial Velocity.
        """
        pass

    def AddSystemCouplingRegion(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.FluidSolidInterface:
        """
        Creates a new SystemCouplingRegion
        """
        pass

    def AddThermalCondition(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.ThermalCondition:
        """
        Creates a new child ThermalCondition.
        """
        pass

    def AddBoltPretension(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.BoltPretension:
        """
        Creates a new BoltPretension
        """
        pass

    def AddOptimizationRegion(self) -> Ansys.ACT.Automation.Mechanical.OptimizationRegion:
        """
        Creates a new OptimizationRegion
        """
        pass

    def AddAcousticTemperature(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticTemperature:
        """
        Creates a new child ThermalCondition.
        """
        pass

    def AddSourceConductor(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.LoadGroup:
        """
        Creates a new child SourceConductor.
        """
        pass

    def WriteSystemCouplingFiles(self, filename: str) -> None:
        """
        Writes the system coupling files. Usage WriteSystemCouplingFiles("C:\\Desktop\\temp\\scp1.scp");
        """
        pass

    def CreateAutomaticFarFieldRadiationSurfaces(self) -> None:
        """
        Run the CreateAutomaticEquivalentSourceSurfaces action.
        """
        pass

    def CreateAutomaticFSI(self) -> None:
        """
        Run the CreateAutomaticFSI action.
        """
        pass

    def CreateAutomaticFSIandFarFieldRadiationSurfaces(self) -> None:
        """
        Run the CreateAutomaticFSIandEquivalentSourceSurfaces action.
        """
        pass

    def SelectBodiesWithoutPhysicsRegion(self) -> None:
        """
        Run the SelectBodiesWithoutPhysicsRegion action to select the bodies that don't belong to a Physics Region. 
        """
        pass

    def SelectBodiesWithMultiplePhysicsRegion(self) -> None:
        """
        Run the SelectBodiesWithMultiplePhysicsRegion action to select the bodies that belong to more than one Physics Region.
        """
        pass

    def AddImportedLoadMAPDLResultsFile(self) -> Ansys.ACT.Automation.Mechanical.ImportedLoads.ImportedLoadGroup:
        """
        Creates a new Import Load for MAPDL Results File.
        """
        pass

    def AddImportedLoadFluidsResultsFile(self) -> Ansys.ACT.Automation.Mechanical.ImportedLoads.ImportedLoadGroup:
        """
        Creates a new Import Load for Fluids Results File.
        """
        pass

    def AddImportedLoadExternalData(self) -> Ansys.ACT.Automation.Mechanical.ImportedLoads.ImportedLoadGroup:
        """
        Creates a new Imported Load (External Data).
        """
        pass

    def AddImportedRemoteLoadsGroup(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.LoadGroup:
        """
        Creates a new Import Remote Load Group.
        """
        pass

    def TransferDataFrom(self, analysis: Ansys.ACT.Automation.Mechanical.Analysis) -> None:
        """
        Transfer Data From action.
        """
        pass

    def UnlinkDataFrom(self, analysis: Ansys.ACT.Automation.Mechanical.Analysis) -> None:
        """
        Unlink Data From action.
        """
        pass

    def ImportLoad(self, analysis: Ansys.ACT.Automation.Mechanical.Analysis) -> None:
        """
        Import Load action.
        """
        pass

    def ExportNastranFile(self, exportOptions: Ansys.ACT.Automation.Mechanical.NastranExportOptions) -> None:
        """
        Export Nastran File.
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        Duplicate method.
        """
        pass

    def AddAcceleration(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Acceleration:
        """
        Creates a new Acceleration
        """
        pass

    def AddAcousticAbsorptionElement(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticAbsorptionElement:
        """
        Creates a new AcousticAbsorptionElement
        """
        pass

    def AddAcousticAbsorptionSurface(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticAbsorptionSurface:
        """
        Creates a new AcousticAbsorptionSurface
        """
        pass

    def AddAcousticDiffuseSoundField(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticDiffuseSoundField:
        """
        Creates a new AcousticDiffuseSoundField
        """
        pass

    def AddAcousticFarFieldRadationSurface(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticFarFieldRadationSurface:
        """
        Creates a new AcousticFarFieldRadationSurface
        """
        pass

    def AddAcousticFreeSurface(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticFreeSurface:
        """
        Creates a new AcousticFreeSurface
        """
        pass

    def AddAcousticImpedanceBoundary(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticImpedanceBoundary:
        """
        Creates a new AcousticImpedanceBoundary
        """
        pass

    def AddAcousticImpedanceSheet(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticImpedanceSheet:
        """
        Creates a new AcousticImpedanceSheet
        """
        pass

    def AddAcousticIncidentWaveSource(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticIncidentWaveSource:
        """
        Creates a new AcousticIncidentWaveSource
        """
        pass

    def AddAcousticLowReducedFrequency(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticLowReducedFrequency:
        """
        Creates a new AcousticLowReducedFrequency
        """
        pass

    def AddAcousticMassSource(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticMassSource:
        """
        Creates a new AcousticMassSource
        """
        pass

    def AddAcousticMassSourceRate(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticMassSourceRate:
        """
        Creates a new AcousticMassSourceRate
        """
        pass

    def AddAcousticPort(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticPort:
        """
        Creates a new AcousticPort
        """
        pass

    def AddAcousticPortInDuct(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticPortInDuct:
        """
        Creates a new AcousticPortInDuct
        """
        pass

    def AddAcousticPressure(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticPressure:
        """
        Creates a new AcousticPressure
        """
        pass

    def AddAcousticRadiationBoundary(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticRadiationBoundary:
        """
        Creates a new AcousticRadiationBoundary
        """
        pass

    def AddAcousticRigidWall(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticRigidWall:
        """
        Creates a new AcousticRigidWall
        """
        pass

    def AddAcousticStaticPressure(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticStaticPressure:
        """
        Creates a new AcousticStaticPressure
        """
        pass

    def AddAcousticSurfaceAcceleration(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticSurfaceAcceleration:
        """
        Creates a new AcousticSurfaceAcceleration
        """
        pass

    def AddAcousticSurfaceVelocity(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticSurfaceVelocity:
        """
        Creates a new AcousticSurfaceVelocity
        """
        pass

    def AddAcousticSymmetryPlane(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticSymmetryPlane:
        """
        Creates a new AcousticSymmetryPlane
        """
        pass

    def AddAcousticThermoViscousBLIBoundary(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticThermoViscousBLIBoundary:
        """
        Creates a new AcousticThermoViscousBLIBoundary
        """
        pass

    def AddAcousticTransferAdmittanceMatrix(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.AcousticTransferAdmittanceMatrix:
        """
        Creates a new AcousticTransferAdmittanceMatrix
        """
        pass

    def AddAMOverhangConstraint(self) -> Ansys.ACT.Automation.Mechanical.AMOverhangConstraint:
        """
        Creates a new AMOverhangConstraint
        """
        pass

    def AddBearingLoad(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.BearingLoad:
        """
        Creates a new BearingLoad
        """
        pass

    def AddBodyControl(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.BodyControl:
        """
        Creates a new BodyControl
        """
        pass

    def AddCenterOfGravityConstraint(self) -> Ansys.ACT.Automation.Mechanical.CenterOfGravityConstraint:
        """
        Creates a new CenterOfGravityConstraint
        """
        pass

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def AddComplexityIndexConstraint(self) -> Ansys.ACT.Automation.Mechanical.ComplexityIndexConstraint:
        """
        Creates a new ComplexityIndexConstraint
        """
        pass

    def AddComplianceConstraint(self) -> Ansys.ACT.Automation.Mechanical.ComplianceConstraint:
        """
        Creates a new ComplianceConstraint
        """
        pass

    def AddCompressionOnlySupport(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.CompressionOnlySupport:
        """
        Creates a new CompressionOnlySupport
        """
        pass

    def AddConstraintEquation(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.ConstraintEquation:
        """
        Creates a new ConstraintEquation
        """
        pass

    def AddContactStepControl(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.ContactStepControl:
        """
        Creates a new ContactStepControl
        """
        pass

    def AddCoupling(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Coupling:
        """
        Creates a new Coupling
        """
        pass

    def AddVoltageCoupling(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Coupling:
        """
        Creates a new Coupling
        """
        pass

    def AddCriterionConstraint(self) -> Ansys.ACT.Automation.Mechanical.CriterionConstraint:
        """
        Creates a new CriterionConstraint
        """
        pass

    def AddCurrent(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Current:
        """
        Creates a new Current
        """
        pass

    def AddCyclicManufacturingConstraint(self) -> Ansys.ACT.Automation.Mechanical.CyclicManufacturingConstraint:
        """
        Creates a new CyclicManufacturingConstraint
        """
        pass

    def AddCylindricalSupport(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.CylindricalSupport:
        """
        Creates a new CylindricalSupport
        """
        pass

    def AddDetonationPoint(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.DetonationPoint:
        """
        Creates a new DetonationPoint
        """
        pass

    def AddDisplacement(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Displacement:
        """
        Creates a new Displacement
        """
        pass

    def AddDisplacementConstraint(self) -> Ansys.ACT.Automation.Mechanical.DisplacementConstraint:
        """
        Creates a new DisplacementConstraint
        """
        pass

    def AddDynamicComplianceConstraint(self) -> Ansys.ACT.Automation.Mechanical.DynamicComplianceConstraint:
        """
        Creates a new DynamicComplianceConstraint
        """
        pass

    def AddEarthGravity(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.EarthGravity:
        """
        Creates a new EarthGravity
        """
        pass

    def AddElasticSupport(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.ElasticSupport:
        """
        Creates a new ElasticSupport
        """
        pass

    def AddElectricCharge(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.ElectricCharge:
        """
        Creates a new ElectricCharge
        """
        pass

    def AddElementBirthAndDeath(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.ElementBirthAndDeath:
        """
        Creates a new ElementBirthAndDeath
        """
        pass

    def AddEMTransducer(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.EMTransducer:
        """
        Creates a new EMTransducer
        """
        pass

    def AddExtrusionManufacturingConstraint(self) -> Ansys.ACT.Automation.Mechanical.ExtrusionManufacturingConstraint:
        """
        Creates a new ExtrusionManufacturingConstraint
        """
        pass

    def AddFixedRotation(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.FixedRotation:
        """
        Creates a new FixedRotation
        """
        pass

    def AddFixedSupport(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.FixedSupport:
        """
        Creates a new FixedSupport
        """
        pass

    def AddFluidPenetrationPressure(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.FluidPenetrationPressure:
        """
        Creates a new Fluid Penetration Pressure object in Mechanical. This load object is used to simulate surrounding fluid or air penetrating into the contact interface.
            Users can apply this load to flexible-to-flexible or rigid-to-flexible contact pairs. This load object is available for static structural analysis.
        """
        pass

    def AddFluidSolidInterface(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.FluidSolidInterface:
        """
        Creates a new FluidSolidInterface
        """
        pass

    def AddForce(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Force:
        """
        Creates a new Force
        """
        pass

    def AddFrictionlessSupport(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.FrictionlessSupport:
        """
        Creates a new FrictionlessSupport
        """
        pass

    def AddGeneralizedPlaneStrain(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.GeneralizedPlaneStrain:
        """
        Creates a new GeneralizedPlaneStrain
        """
        pass

    def AddGeometryBasedAdaptivity(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.GeometryBasedAdaptivity:
        """
        Creates a new GeometryBasedAdaptivity
        """
        pass

    def AddGlobalVonMisesStressConstraint(self) -> Ansys.ACT.Automation.Mechanical.GlobalVonMisesStressConstraint:
        """
        Creates a new GlobalVonMisesStressConstraint
        """
        pass

    def AddHeatFlow(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.HeatFlow:
        """
        Creates a new HeatFlow
        """
        pass

    def AddHeatFlux(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.HeatFlux:
        """
        Creates a new HeatFlux
        """
        pass

    def AddHousingConstraint(self) -> Ansys.ACT.Automation.Mechanical.HousingConstraint:
        """
        Creates a new HousingConstraint
        """
        pass

    def AddHydrostaticPressure(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.HydrostaticPressure:
        """
        Creates a new HydrostaticPressure
        """
        pass

    def AddImpedanceBoundary(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.ImpedanceBoundary:
        """
        Creates a new ImpedanceBoundary
        """
        pass

    def AddImportedCFDPressure(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.ImportedCFDPressure:
        """
        Creates a new ImportedCFDPressure
        """
        pass

    def AddInternalHeatGeneration(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.InternalHeatGeneration:
        """
        Creates a new InternalHeatGeneration
        """
        pass

    def AddJointLoad(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.JointLoad:
        """
        Creates a new JointLoad
        """
        pass

    def AddLimitBoundary(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.LimitBoundary:
        """
        Creates a new LimitBoundary
        """
        pass

    def AddLinePressure(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.LinePressure:
        """
        Creates a new LinePressure
        """
        pass

    def AddLoadApplication(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.LoadApplication:
        pass

    def AddLocalVonMisesStressConstraint(self) -> Ansys.ACT.Automation.Mechanical.LocalVonMisesStressConstraint:
        """
        Creates a new LocalVonMisesStressConstraint
        """
        pass

    def AddMagneticFluxParallel(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.MagneticFluxParallel:
        """
        Creates a new MagneticFluxParallel
        """
        pass

    def AddMassConstraint(self) -> Ansys.ACT.Automation.Mechanical.MassConstraint:
        """
        Creates a new MassConstraint
        """
        pass

    def AddMassFlowRate(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.MassFlowRate:
        """
        Creates a new MassFlowRate
        """
        pass

    def AddMemberSizeManufacturingConstraint(self) -> Ansys.ACT.Automation.Mechanical.MemberSizeManufacturingConstraint:
        """
        Creates a new MemberSizeManufacturingConstraint
        """
        pass

    def AddMoment(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Moment:
        """
        Creates a new Moment
        """
        pass

    def AddMomentOfInertiaConstraint(self) -> Ansys.ACT.Automation.Mechanical.MomentOfInertiaConstraint:
        """
        Creates a new MomentOfInertiaConstraint
        """
        pass

    def AddMorphingRegion(self) -> Ansys.ACT.Automation.Mechanical.MorphingRegion:
        """
        Creates a new MorphingRegion
        """
        pass

    def AddNaturalFrequencyConstraint(self) -> Ansys.ACT.Automation.Mechanical.NaturalFrequencyConstraint:
        """
        Creates a new NaturalFrequencyConstraint
        """
        pass

    def AddNodalDisplacement(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.NodalDisplacement:
        """
        Creates a new NodalDisplacement
        """
        pass

    def AddNodalForce(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.NodalForce:
        """
        Creates a new NodalForce
        """
        pass

    def AddNodalOrientation(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.NodalOrientation:
        """
        Creates a new NodalOrientation
        """
        pass

    def AddNodalPressure(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.NodalPressure:
        """
        Creates a new NodalPressure
        """
        pass

    def AddNodalRotation(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.NodalRotation:
        """
        Creates a new NodalRotation
        """
        pass

    def AddNonlinearAdaptiveRegion(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.NonlinearAdaptiveRegion:
        """
        Creates a new NonlinearAdaptiveRegion
        """
        pass

    def AddObjective(self) -> Ansys.ACT.Automation.Mechanical.Objective:
        """
        Creates a new Objective
        """
        pass

    def AddPatternRepetitionConstraint(self) -> Ansys.ACT.Automation.Mechanical.PatternRepetitionConstraint:
        """
        Creates a new PatternRepetitionConstraint
        """
        pass

    def AddPerfectlyInsulated(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.PerfectlyInsulated:
        """
        Creates a new PerfectlyInsulated
        """
        pass

    def AddPhysicsRegion(self) -> Ansys.ACT.Automation.Mechanical.PhysicsRegion:
        """
        Creates a new PhysicsRegion
        """
        pass

    def AddPipeIdealization(self) -> Ansys.ACT.Automation.Mechanical.PipeIdealization:
        """
        Creates a new child PipeIdealization.
        """
        pass

    def AddPipePressure(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.PipePressure:
        """
        Creates a new PipePressure
        """
        pass

    def AddPipeTemperature(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.PipeTemperature:
        """
        Creates a new PipeTemperature
        """
        pass

    def AddPlasticHeating(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.PlasticHeating:
        """
        Creates a new PlasticHeating
        """
        pass

    def AddPSDAcceleration(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.PSDAcceleration:
        """
        Creates a new PSDAcceleration
        """
        pass

    def AddPSDDisplacement(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.PSDDisplacement:
        """
        Creates a new PSDDisplacement
        """
        pass

    def AddPSDGAcceleration(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.PSDGAcceleration:
        """
        Creates a new PSDGAcceleration
        """
        pass

    def AddPSDPressure(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.PSDPressure:
        pass

    def AddPSDVelocity(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.PSDVelocity:
        """
        Creates a new PSDVelocity
        """
        pass

    def AddPullOutDirectionManufacturingConstraint(self) -> Ansys.ACT.Automation.Mechanical.PullOutDirectionManufacturingConstraint:
        """
        Creates a new PullOutDirectionManufacturingConstraint
        """
        pass

    def AddPythonCodeEventBased(self) -> Ansys.ACT.Automation.Mechanical.PythonCodeEventBased:
        """
        Creates a new PythonCodeEventBased
        """
        pass

    def AddRadiation(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Radiation:
        """
        Creates a new Radiation
        """
        pass

    def AddReactionForceConstraint(self) -> Ansys.ACT.Automation.Mechanical.ReactionForceConstraint:
        """
        Creates a new ReactionForceConstraint
        """
        pass

    def AddRemoteDisplacement(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.RemoteDisplacement:
        """
        Creates a new RemoteDisplacement
        """
        pass

    def AddRemoteForce(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.RemoteForce:
        """
        Creates a new RemoteForce
        """
        pass

    def AddRotatingForce(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.RotatingForce:
        """
        Creates a new RotatingForce
        """
        pass

    def AddRotationalAcceleration(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.RotationalAcceleration:
        """
        Creates a new RotationalAcceleration
        """
        pass

    def AddRotationalVelocity(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.RotationalVelocity:
        """
        Creates a new RotationalVelocity
        """
        pass

    def AddRSAcceleration(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.RSAcceleration:
        """
        Creates a new RSAcceleration
        """
        pass

    def AddRSDisplacement(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.RSDisplacement:
        """
        Creates a new RSDisplacement
        """
        pass

    def AddRSVelocity(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.RSVelocity:
        """
        Creates a new RSVelocity
        """
        pass

    def AddSimplySupported(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.SimplySupported:
        """
        Creates a new SimplySupported
        """
        pass

    def AddSubstructureGenerationCondensedPart(self) -> Ansys.ACT.Automation.Mechanical.SubstructureGenerationCondensedPart:
        """
        Creates a new SubstructureGenerationCondensedPart
        """
        pass

    def AddSurfaceChargeDensity(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.SurfaceChargeDensity:
        """
        Creates a new SurfaceChargeDensity
        """
        pass

    def AddSymmetryManufacturingConstraint(self) -> Ansys.ACT.Automation.Mechanical.SymmetryManufacturingConstraint:
        """
        Creates a new SymmetryManufacturingConstraint
        """
        pass

    def AddTemperatureConstraint(self) -> Ansys.ACT.Automation.Mechanical.TemperatureConstraint:
        """
        Creates a new TemperatureConstraint
        """
        pass

    def AddThermalComplianceConstraint(self) -> Ansys.ACT.Automation.Mechanical.ThermalComplianceConstraint:
        """
        Creates a new ThermalComplianceConstraint
        """
        pass

    def AddUniformConstraint(self) -> Ansys.ACT.Automation.Mechanical.UniformConstraint:
        """
        Creates a new UniformConstraint
        """
        pass

    def AddVelocity(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Velocity:
        """
        Creates a new Velocity
        """
        pass

    def AddViscoelasticHeating(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.ViscoelasticHeating:
        """
        Creates a new ViscoelasticHeating
        """
        pass

    def AddVoltage(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.Voltage:
        """
        Creates a new Voltage
        """
        pass

    def AddVoltageGround(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.VoltageGround:
        """
        Creates a new VoltageGround
        """
        pass

    def AddVolumeChargeDensity(self) -> Ansys.ACT.Automation.Mechanical.BoundaryConditions.VolumeChargeDensity:
        """
        Creates a new VolumeChargeDensity
        """
        pass

    def AddVolumeConstraint(self) -> Ansys.ACT.Automation.Mechanical.VolumeConstraint:
        """
        Creates a new VolumeConstraint
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class VirtualTopology(object):
    """
    Defines a VirtualTopology.
    """

    @property
    def AutomaticBehavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.VirtualCellGroupAutomaticBehaviorType]:
        """
        Gets or sets the Behavior when Method is set to "Automatic".
        """
        return None

    @property
    def RepairBehavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.VirtualCellGroupRepairBehaviorType]:
        """
        Gets or sets the Behavior when Method is set to "Repair".
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSVirtualCellGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def AspectRatio(self) -> typing.Optional[float]:
        """
        Gets or sets the AspectRatio.
        """
        return None

    @property
    def SharedBoundaryRatio(self) -> typing.Optional[float]:
        """
        Gets or sets the SharedBoundaryRatio.
        """
        return None

    @property
    def VirtualEdges(self) -> typing.Optional[int]:
        """
        Gets the VirtualEdges.
        """
        return None

    @property
    def VirtualEntities(self) -> typing.Optional[int]:
        """
        Gets the VirtualEntities.
        """
        return None

    @property
    def VirtualFaces(self) -> typing.Optional[int]:
        """
        Gets the VirtualFaces.
        """
        return None

    @property
    def VirtualHardVertex(self) -> typing.Optional[int]:
        """
        Gets the VirtualHardVertex.
        """
        return None

    @property
    def VirtualSplitEdges(self) -> typing.Optional[int]:
        """
        Gets the VirtualSplitEdges.
        """
        return None

    @property
    def VirtualSplitFaces(self) -> typing.Optional[int]:
        """
        Gets the VirtualSplitFaces.
        """
        return None

    @property
    def ContactAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ContactAngle.
        """
        return None

    @property
    def CustomFeatureAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the CustomFeatureAngle.
        """
        return None

    @property
    def EdgeAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the EdgeAngle.
        """
        return None

    @property
    def GaussAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the GaussAngle.
        """
        return None

    @property
    def MaxEdgeLength(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaxEdgeLength.
        """
        return None

    @property
    def MaxFaceArea(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaxFaceArea.
        """
        return None

    @property
    def MaxSliverWidth(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaxSliverWidth.
        """
        return None

    @property
    def MinEdgeLength(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinEdgeLength.
        """
        return None

    @property
    def MinFaceArea(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinFaceArea.
        """
        return None

    @property
    def MinSliverWidth(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinSliverWidth.
        """
        return None

    @property
    def LockPositionOfDependentEdgeSplits(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.YesNoType]:
        """
        Gets or sets the LockPositionOfDependentEdgeSplits.
        """
        return None

    @property
    def MergeFaceEdges(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.YesNoType]:
        """
        Gets or sets the MergeFaceEdges.
        """
        return None

    @property
    def Method(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.VirtualCellGroupMethodType]:
        """
        Gets or sets the Method.
        """
        return None

    @property
    def GenerateOnUpdate(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.YesNoType]:
        """
        Gets or sets the GenerateOnUpdate.
        """
        return None

    @property
    def SimplifyFaces(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.YesNoType]:
        """
        Gets or sets the SimplifyFaces.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GetVirtualCellFromSelection(self, currentSelection: Ansys.ACT.Interfaces.Common.ISelectionInfo) -> Ansys.ACT.Automation.Mechanical.VirtualCell:
        """
        Gets the Virtual Cell from the selection.
        """
        pass

    def GenerateVirtualCells(self, selectionInfo: Ansys.ACT.Interfaces.Common.ISelectionInfo) -> None:
        """
        Generate the Virtual Cells on the selected/all entities.
        """
        pass

    def VirtualSplitFaceAtVertices(self, iSelInfo: Ansys.ACT.Interfaces.Common.ISelectionInfo) -> None:
        """
        Generate the Virtual Cells on the selected/all entities.
        """
        pass

    def VirtualSplitEdge(self, iSelInfo: Ansys.ACT.Interfaces.Common.ISelectionInfo, splitRatio: float) -> None:
        """
        Generate the Virtual Cells on the selected/all entities.
        """
        pass

    def DeleteAllVirtualCells(self) -> None:
        """
        Delete all Virtual Cells.
        """
        pass

    def DeleteAllVirtualEntities(self) -> None:
        """
        Delete all Virtual Entities.
        """
        pass

    def DeleteAllVirtualSplitEdges(self) -> None:
        """
        Delete all Virtual Split Edges.
        """
        pass

    def DeleteAllVirtualSplitFaces(self) -> None:
        """
        Delete all Virtual Split Faces.
        """
        pass

    def DeleteAllVirtualHardVertices(self) -> None:
        """
        Delete all Virtual Split Hard Vertices.
        """
        pass

    def AddVirtualCell(self, iSelInfo: Ansys.ACT.Interfaces.Common.ISelectionInfo) -> typing.Iterable[Ansys.ACT.Automation.Mechanical.VirtualCell]:
        """
        Add Virtual Cell.
        """
        pass

    def AddVirtualHardVertex(self, iSelInfo: Ansys.ACT.Interfaces.Common.ISelectionInfo, point: Ansys.Mechanical.Graphics.Point) -> None:
        """
        Add Virtual Hard Vertex.
        """
        pass

    def AddVirtualSplitEdgeAt(self, iSelInfo: Ansys.ACT.Interfaces.Common.ISelectionInfo, point: Ansys.Mechanical.Graphics.Point) -> None:
        """
         Add Virtual Split Edge at 
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class SolutionInformation(object):
    """
    Defines a SolutionInformation.
    """

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSSolutionInfoToolAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DisplayPoints(self) -> typing.Optional[float]:
        """
        Gets or sets the DisplayPoints.
        """
        return None

    @property
    def IdentifyElementViolations(self) -> typing.Optional[int]:
        """
        Gets or sets the IdentifyElementViolations.
        """
        return None

    @property
    def NewtonRaphsonResiduals(self) -> typing.Optional[int]:
        """
        Gets or sets the NewtonRaphsonResiduals.
        """
        return None

    @property
    def ModeNumber(self) -> typing.Optional[int]:
        """
        Gets or sets the ModeNumber.
        """
        return None

    @property
    def StepNumber(self) -> typing.Optional[int]:
        """
        Gets or sets the StepNumber.
        """
        return None

    @property
    def UpdateInterval(self) -> typing.Optional[float]:
        """
        Gets or sets the UpdateInterval.
        """
        return None

    @property
    def Component(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.OptimizationResponseConstraintComponentType]:
        """
        Gets or sets the Component.
        """
        return None

    @property
    def LineColor(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FEConnectionLineColor]:
        """
        Gets or sets the LineColor.
        """
        return None

    @property
    def DrawConnectionsAttachedTo(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.NodeSelection]:
        """
        Gets or sets the DrawConnectionsAttachedTo.
        """
        return None

    @property
    def Display(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FEConnectionDisplay]:
        """
        Gets or sets the Display.
        """
        return None

    @property
    def DisplayType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FEConnectionDisplayType]:
        """
        Gets or sets the DisplayType.
        """
        return None

    @property
    def LineThickness(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FEConnectionLineThicknessType]:
        """
        Gets or sets the LineThickness.
        """
        return None

    @property
    def SummaryType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PFactorResultType]:
        """
        Gets or sets the SummaryType.
        """
        return None

    @property
    def SolutionOutput(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SolutionOutputType]:
        """
        Gets or sets the SolutionOutput.
        """
        return None

    @property
    def StepSelectionMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SeqSelectionMode]:
        """
        Gets or sets the StepSelectionMode.
        """
        return None

    @property
    def VisibleOnResults(self) -> typing.Optional[bool]:
        """
        Gets or sets the VisibleOnResults.
        """
        return None

    @property
    def ActivateVisibility(self) -> typing.Optional[bool]:
        """
        Gets or sets the ActivateVisibility.
        """
        return None

    @property
    def ShowChargeResiduals(self) -> typing.Optional[bool]:
        """
        Gets or sets the ShowChargeResiduals.
        """
        return None

    @property
    def ShowHeatResiduals(self) -> typing.Optional[bool]:
        """
        Gets or sets the ShowHeatResiduals.
        """
        return None

    @property
    def ShowMomentResiduals(self) -> typing.Optional[bool]:
        """
        Gets or sets the ShowMomentResiduals.
        """
        return None

    @property
    def DisplayFilterDuringSolve(self) -> typing.Optional[bool]:
        """
        Gets or sets the DisplayFilterDuringSolve.
        """
        return None

    @property
    def ResponseConstraint(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.ResponseConstraint]:
        """
        Gets or sets the ResponseConstraint.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def ImportResultTrackersFromFile(self, fileName: str) -> None:
        """
        Import Result Trackers from File.
        """
        pass

    def AddDeformationPlotTracker(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.TotalDeformation:
        """
        Creates a new TotalDeformation Plot Tracker.
        """
        pass

    def AddStressPlotTracker(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.EquivalentStress:
        """
        Creates a new EquivalentStress Plot Tracker.
        """
        pass

    def AddStrainPlotTracker(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.EquivalentElasticStrainRST:
        """
        Creates a new EquivalentElasticStrainRST Plot Tracker.
        """
        pass

    def AddTemperaturePlotTracker(self) -> Ansys.ACT.Automation.Mechanical.Results.ThermalResults.TemperatureResult:
        """
        Creates a new TemperatureResult Plot Tracker.
        """
        pass

    def EvaluateAllContactTrackers(self) -> None:
        """
        Run the EvaluateAllContactTrackers action.
        """
        pass

    def AddAddedMass(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.AddedMassTracker:
        """
        Creates a new AddedMassTracker
        """
        pass

    def AddArtificialEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ArtificialEnergyTracker:
        """
        Creates a new ArtificialEnergyTracker
        """
        pass

    def AddChattering(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactChatteringTracker:
        """
        Creates a new ContactChatteringTracker
        """
        pass

    def AddClosedPenetration(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactClosedPenetrationTracker:
        """
        Creates a new ContactClosedPenetrationTracker
        """
        pass

    def AddContactDepth(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactDepthTracker:
        """
        Creates a new ContactDepthTracker
        """
        pass

    def AddElasticSlip(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactElasticSlipTracker:
        """
        Creates a new ContactElasticSlipTracker
        """
        pass

    def AddContactEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactEnergyTracker:
        """
        Creates a new ContactEnergyTracker
        """
        pass

    def AddFluidPressure(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactFluidPressureTracker:
        """
        Creates a new ContactFluidPressureTracker
        """
        pass

    def AddContactForce(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactForceTracker:
        """
        Creates a new ContactForceTracker
        """
        pass

    def AddFrictionalDissipationEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactFrictionalDissipationEnergyTracker:
        """
        Creates a new ContactFrictionalDissipationEnergyTracker
        """
        pass

    def AddFrictionalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactFrictionalStressTracker:
        """
        Creates a new ContactFrictionalStressTracker
        """
        pass

    def AddGap(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactGapTracker:
        """
        Creates a new ContactGapTracker
        """
        pass

    def AddContactHeatFlux(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactHeatFluxTracker:
        """
        Creates a new ContactHeatFluxTracker
        """
        pass

    def AddContactingArea(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactingAreaTracker:
        """
        Creates a new ContactingAreaTracker
        """
        pass

    def AddMaximumDampingPressure(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactMaximumDampingPressureTracker:
        """
        Creates a new ContactMaximumDampingPressureTracker
        """
        pass

    def AddMaximumGeometricSlidingDistance(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactMaximumGeometricSlidingDistanceTracker:
        """
        Creates a new ContactMaximumGeometricSlidingDistanceTracker
        """
        pass

    def AddContactMaximumNormalStiffness(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactMaximumNormalStiffnessTracker:
        """
        Creates a new ContactMaximumNormalStiffnessTracker
        """
        pass

    def AddMaximumTangentialStiffness(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactMaximumTangentialStiffnessTracker:
        """
        Creates a new ContactMaximumTangentialStiffnessTracker
        """
        pass

    def AddContactMaxTangentialFluidPressure(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactMaxTangentialFluidPressureTracker:
        """
        Creates a new ContactMaxTangentialFluidPressureTracker
        """
        pass

    def AddMinimumGeometricSlidingDistance(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactMinimumGeometricSlidingDistanceTracker:
        """
        Creates a new ContactMinimumGeometricSlidingDistanceTracker
        """
        pass

    def AddContactMinimumNormalStiffness(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactMinimumNormalStiffnessTracker:
        """
        Creates a new ContactMinimumNormalStiffnessTracker
        """
        pass

    def AddMinimumTangentialStiffness(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactMinimumTangentialStiffnessTracker:
        """
        Creates a new ContactMinimumTangentialStiffnessTracker
        """
        pass

    def AddNumberSticking(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactNumberStickingTracker:
        """
        Creates a new ContactNumberStickingTracker
        """
        pass

    def AddNumberWithLargePenetration(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactNumberWithLargePenetrationTracker:
        """
        Creates a new ContactNumberWithLargePenetrationTracker
        """
        pass

    def AddNumberWithTooMuchSliding(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactNumberWithTooMuchSlidingTracker:
        """
        Creates a new ContactNumberWithTooMuchSlidingTracker
        """
        pass

    def AddContactPairForceConvergenceNorm(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactPairForceConvergenceNormTracker:
        """
        Creates a new ContactPairForceConvergenceNormTracker
        """
        pass

    def AddPenetration(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactPenetrationTracker:
        """
        Creates a new ContactPenetrationTracker
        """
        pass

    def AddPossibleOverconstraint(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactPossibleOverconstraintTracker:
        """
        Creates a new ContactPossibleOverconstraintTracker
        """
        pass

    def AddContactPressure(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactPressureTracker:
        """
        Creates a new ContactPressureTracker
        """
        pass

    def AddResultingPinball(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactResultingPinballTracker:
        """
        Creates a new ContactResultingPinballTracker
        """
        pass

    def AddSlidingDistance(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactSlidingDistanceTracker:
        """
        Creates a new ContactSlidingDistanceTracker
        """
        pass

    def AddSlidingIndication(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactSlidingIndicationTracker:
        """
        Creates a new ContactSlidingIndicationTracker
        """
        pass

    def AddStabilizationEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactStabilizationEnergyTracker:
        """
        Creates a new ContactStabilizationEnergyTracker
        """
        pass

    def AddStrainEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactStrainEnergyTracker:
        """
        Creates a new ContactStrainEnergyTracker
        """
        pass

    def AddTangentialDampingStress(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactTangentialDampingStressTracker:
        """
        Creates a new ContactTangentialDampingStressTracker
        """
        pass

    def AddTotalForceFromContactPressureX(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactTotalForceFromContactPressureXTracker:
        """
        Creates a new ContactTotalForceFromContactPressureXTracker
        """
        pass

    def AddTotalForceFromContactPressureY(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactTotalForceFromContactPressureYTracker:
        """
        Creates a new ContactTotalForceFromContactPressureYTracker
        """
        pass

    def AddTotalForceFromContactPressureZ(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactTotalForceFromContactPressureZTracker:
        """
        Creates a new ContactTotalForceFromContactPressureZTracker
        """
        pass

    def AddTotalForceFromTangentialStressX(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactTotalForceFromTangentialStressXTracker:
        """
        Creates a new ContactTotalForceFromTangentialStressXTracker
        """
        pass

    def AddTotalForceFromTangentialStressY(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactTotalForceFromTangentialStressYTracker:
        """
        Creates a new ContactTotalForceFromTangentialStressYTracker
        """
        pass

    def AddTotalForceFromTangentialStressZ(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactTotalForceFromTangentialStressZTracker:
        """
        Creates a new ContactTotalForceFromTangentialStressZTracker
        """
        pass

    def AddVolumeLossDueToWear(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ContactVolumeLossDueToWearTracker:
        """
        Creates a new ContactVolumeLossDueToWearTracker
        """
        pass

    def AddDampingEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.DampingEnergyTracker:
        """
        Creates a new DampingEnergyTracker
        """
        pass

    def AddDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.DensityTracker:
        """
        Creates a new DensityTracker
        """
        pass

    def AddDirectionalAcceleration(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.DirectionalAccelerationTracker:
        """
        Creates a new DirectionalAccelerationTracker
        """
        pass

    def AddDirectionalDeformation(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.DirectionalDeformationTracker:
        """
        Creates a new DirectionalDeformationTracker
        """
        pass

    def AddDirectionalVelocity(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.DirectionalVelocityTracker:
        """
        Creates a new DirectionalVelocityTracker
        """
        pass

    def AddEffectiveStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.EffectiveStrainTracker:
        """
        Creates a new EffectiveStrainTracker
        """
        pass

    def AddEffectiveStress(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.EffectiveStressTracker:
        """
        Creates a new EffectiveStressTracker
        """
        pass

    def AddErodedInternalEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ErodedInternalEnergyTracker:
        """
        Creates a new ErodedInternalEnergyTracker
        """
        pass

    def AddErodedKineticEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ErodedKineticEnergyTracker:
        """
        Creates a new ErodedKineticEnergyTracker
        """
        pass

    def AddExternalForce(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ExternalForceTracker:
        """
        Creates a new ExternalForceTracker
        """
        pass

    def AddForceReaction(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.ForceReactionTracker:
        """
        Creates a new ForceReactionTracker
        """
        pass

    def AddHourglassEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.HourglassEnergyTracker:
        """
        Creates a new HourglassEnergyTracker
        """
        pass

    def AddInternalEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.InternalEnergyTracker:
        """
        Creates a new InternalEnergyTracker
        """
        pass

    def AddKineticEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.KineticEnergyTracker:
        """
        Creates a new KineticEnergyTracker
        """
        pass

    def AddLatticeDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.LatticeDensity:
        """
        Creates a new LatticeDensity
        """
        pass

    def AddLatticeElementalDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.LatticeElementalDensity:
        """
        Creates a new LatticeElementalDensity
        """
        pass

    def AddLSDYNAGeneralTracker(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.LSDYNAGeneralTracker:
        """
        Creates a new LSDYNAGeneralTracker
        """
        pass

    def AddMomentReaction(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.MomentReactionTracker:
        """
        Creates a new MomentReactionTracker
        """
        pass

    def AddMomentum(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.MomentumTracker:
        """
        Creates a new MomentumTracker
        """
        pass

    def AddNonLinearStabilizationEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.NonLinearStabilizationEnergyTracker:
        """
        Creates a new NonLinearStabilizationEnergyTracker
        """
        pass

    def AddNumberContacting(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.NumberContactingTracker:
        """
        Creates a new NumberContactingTracker
        """
        pass

    def AddPlasticWork(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.PlasticWorkTracker:
        """
        Creates a new PlasticWorkTracker
        """
        pass

    def AddPosition(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.PositionTracker:
        """
        Creates a new PositionTracker
        """
        pass

    def AddPressure(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.PressureTracker:
        """
        Creates a new PressureTracker
        """
        pass

    def AddRigidBodyVelocity(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.RigidBodyVelocityTracker:
        """
        Creates a new RigidBodyVelocityTracker
        """
        pass

    def AddSpringTrackerDampingForce(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.SpringDampingForceTracker:
        """
        Creates a new SpringDampingForceTracker
        """
        pass

    def AddSpringTrackerElasticForce(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.SpringElasticForceTracker:
        """
        Creates a new SpringElasticForceTracker
        """
        pass

    def AddSpringTrackerElongation(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.SpringElongationTracker:
        """
        Creates a new SpringElongationTracker
        """
        pass

    def AddSpringTrackerVelocity(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.SpringVelocityTracker:
        """
        Creates a new SpringVelocityTracker
        """
        pass

    def AddStiffnessEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.StiffnessEnergyTracker:
        """
        Creates a new StiffnessEnergyTracker
        """
        pass

    def AddTemperature(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.TemperatureTracker:
        """
        Creates a new TemperatureTracker
        """
        pass

    def AddTopologyDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.TopologyDensity:
        """
        Creates a new TopologyDensity
        """
        pass

    def AddTopologyElementalDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.TopologyElementalDensity:
        """
        Creates a new TopologyElementalDensity
        """
        pass

    def AddTopologyMultiDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.TopologyMultiDensity:
        """
        Creates a new TopologyMultiDensity
        """
        pass

    def AddTotalEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.TotalEnergyTracker:
        """
        Creates a new TotalEnergyTracker
        """
        pass

    def AddTotalMassAverageVelocity(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.TotalMassAverageVelocityTracker:
        """
        Creates a new TotalMassAverageVelocityTracker
        """
        pass

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class SolutionCombination(object):
    """
    Defines a SolutionCombination.
    """

    @property
    def Definition(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.SolutionCombinationDefinition]:
        """
        Get the SolutionCombinationDefinition object.
            This object contains all the Solution Combination data like Base Cases, Load Combinations and Coefficients.
        """
        return None

    @property
    def Type(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.SolutionCombination.Type]:
        """
        Gets or sets the Solution Combination Type. Default: F:Ansys.Mechanical.DataModel.MechanicalEnums.SolutionCombination.Type.LoadCombinations
        """
        return None

    @property
    def EnvelopeType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.SolutionCombination.EnvelopeType]:
        """
        Gets or sets the Envelope Type. Default: F:Ansys.Mechanical.DataModel.MechanicalEnums.SolutionCombination.EnvelopeType.Maximum
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSSolutionCombinationAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def AddContactTool(self) -> Ansys.ACT.Automation.Mechanical.PostContactTool:
        """
        Creates a new ContactTool
        """
        pass

    def EvaluateAllResults(self) -> None:
        """
        Run the EvaluateAllResults action.
        """
        pass

    def AddFatigueTool(self) -> Ansys.ACT.Automation.Mechanical.FatigueTool:
        """
        Creates a new FatigueTool
        """
        pass

    def AddCompositeFailureTool(self) -> Ansys.ACT.Automation.Mechanical.Results.CompositeFailureResults.CompositeFailureTool:
        """
        Creates a new CompositeFailureTool
        """
        pass

    def AddBeamTool(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamToolResults.BeamTool:
        """
        Creates a new BeamTool
        """
        pass

    def AddDirectionalAcceleration(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.DirectionalAcceleration:
        """
        Creates a new DirectionalAcceleration
        """
        pass

    def AddDirectionalAxialForce(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalAxialForce:
        """
        Creates a new DirectionalAxialForce
        """
        pass

    def AddDirectionalBendingMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalBendingMoment:
        """
        Creates a new DirectionalBendingMoment
        """
        pass

    def AddDirectionalDeformation(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.DirectionalDeformation:
        """
        Creates a new DirectionalDeformation
        """
        pass

    def AddDirectionalShearForce(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearForce:
        """
        Creates a new DirectionalShearForce
        """
        pass

    def AddShearMomentDiagramMY(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearMomentDiagram:
        """
        Creates a new DirectionalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramMZ(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearMomentDiagram:
        """
        Creates a new DirectionalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramUY(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearMomentDiagram:
        """
        Creates a new DirectionalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramUZ(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearMomentDiagram:
        """
        Creates a new DirectionalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramVY(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearMomentDiagram:
        """
        Creates a new DirectionalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramVZ(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearMomentDiagram:
        """
        Creates a new DirectionalShearMomentDiagram
        """
        pass

    def AddDirectionalTorsionalMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalTorsionalMoment:
        """
        Creates a new DirectionalTorsionalMoment
        """
        pass

    def AddDirectionalVelocity(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.DirectionalVelocity:
        """
        Creates a new DirectionalVelocity
        """
        pass

    def AddElasticStrainIntensity(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.ElasticStrainIntensity:
        """
        Creates a new ElasticStrainIntensity
        """
        pass

    def AddEquivalentElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.EquivalentElasticStrain:
        """
        Creates a new EquivalentElasticStrain
        """
        pass

    def AddEquivalentElasticStrainRST(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.EquivalentElasticStrainRST:
        """
        Creates a new EquivalentElasticStrainRST
        """
        pass

    def AddEquivalentStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.EquivalentStress:
        """
        Creates a new EquivalentStress
        """
        pass

    def AddEquivalentTotalStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.EquivalentTotalStrain:
        """
        Creates a new EquivalentTotalStrain
        """
        pass

    def AddLinearizedEquivalentStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedEquivalentStress:
        """
        Creates a new LinearizedEquivalentStress
        """
        pass

    def AddLinearizedMaximumPrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedMaximumPrincipalStress:
        """
        Creates a new LinearizedMaximumPrincipalStress
        """
        pass

    def AddLinearizedMaximumShearStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedMaximumShearStress:
        """
        Creates a new LinearizedMaximumShearStress
        """
        pass

    def AddLinearizedMiddlePrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedMiddlePrincipalStress:
        """
        Creates a new LinearizedMiddlePrincipalStress
        """
        pass

    def AddLinearizedMinimumPrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedMinimumPrincipalStress:
        """
        Creates a new LinearizedMinimumPrincipalStress
        """
        pass

    def AddLinearizedNormalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedNormalStress:
        """
        Creates a new LinearizedNormalStress
        """
        pass

    def AddLinearizedShearStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedShearStress:
        """
        Creates a new LinearizedShearStress
        """
        pass

    def AddLinearizedStressIntensity(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedStressIntensity:
        """
        Creates a new LinearizedStressIntensity
        """
        pass

    def AddMaximumPrincipalElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.MaximumPrincipalElasticStrain:
        """
        Creates a new MaximumPrincipalElasticStrain
        """
        pass

    def AddMaximumPrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.MaximumPrincipalStress:
        """
        Creates a new MaximumPrincipalStress
        """
        pass

    def AddMaximumShearElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.MaximumShearElasticStrain:
        """
        Creates a new MaximumShearElasticStrain
        """
        pass

    def AddMaximumShearStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.MaximumShearStress:
        """
        Creates a new MaximumShearStress
        """
        pass

    def AddMiddlePrincipalElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.MiddlePrincipalElasticStrain:
        """
        Creates a new MiddlePrincipalElasticStrain
        """
        pass

    def AddMiddlePrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.MiddlePrincipalStress:
        """
        Creates a new MiddlePrincipalStress
        """
        pass

    def AddMinimumPrincipalElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.MinimumPrincipalElasticStrain:
        """
        Creates a new MinimumPrincipalElasticStrain
        """
        pass

    def AddMinimumPrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.MinimumPrincipalStress:
        """
        Creates a new MinimumPrincipalStress
        """
        pass

    def AddNormalElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.NormalElasticStrain:
        """
        Creates a new NormalElasticStrain
        """
        pass

    def AddNormalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.NormalStress:
        """
        Creates a new NormalStress
        """
        pass

    def AddShearElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.ShearElasticStrain:
        """
        Creates a new ShearElasticStrain
        """
        pass

    def AddShearStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.ShearStress:
        """
        Creates a new ShearStress
        """
        pass

    def AddStressIntensity(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.StressIntensity:
        """
        Creates a new StressIntensity
        """
        pass

    def AddStressTool(self) -> Ansys.ACT.Automation.Mechanical.Results.StressToolResults.StressTool:
        """
        Creates a new StressTool
        """
        pass

    def AddTotalAcceleration(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.TotalAcceleration:
        """
        Creates a new TotalAcceleration
        """
        pass

    def AddTotalAxialForce(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalAxialForce:
        """
        Creates a new TotalAxialForce
        """
        pass

    def AddTotalBendingMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalBendingMoment:
        """
        Creates a new TotalBendingMoment
        """
        pass

    def AddTotalDeformation(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.TotalDeformation:
        """
        Creates a new TotalDeformation
        """
        pass

    def AddTotalShearForce(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalShearForce:
        """
        Creates a new TotalShearForce
        """
        pass

    def AddShearMomentDiagramMSUM(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalShearMomentDiagram:
        """
        Creates a new TotalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramUSUM(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalShearMomentDiagram:
        """
        Creates a new TotalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramVSUM(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalShearMomentDiagram:
        """
        Creates a new TotalShearMomentDiagram
        """
        pass

    def AddTotalTorsionalMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalTorsionalMoment:
        """
        Creates a new TotalTorsionalMoment
        """
        pass

    def AddTotalVelocity(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.TotalVelocity:
        """
        Creates a new TotalVelocity
        """
        pass

    def AddUserDefinedResult(self) -> Ansys.ACT.Automation.Mechanical.Results.UserDefinedResult:
        """
        Creates a new UserDefinedResult
        """
        pass

    def AddVectorAxialForce(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.VectorAxialForce:
        """
        Creates a new VectorAxialForce
        """
        pass

    def AddVectorBendingMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.VectorBendingMoment:
        """
        Creates a new VectorBendingMoment
        """
        pass

    def AddVectorPrincipalElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.VectorPrincipalElasticStrain:
        """
        Creates a new VectorPrincipalElasticStrain
        """
        pass

    def AddVectorPrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.VectorPrincipalStress:
        """
        Creates a new VectorPrincipalStress
        """
        pass

    def AddVectorShearForce(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.VectorShearForce:
        """
        Creates a new VectorShearForce
        """
        pass

    def AddVectorTorsionalMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.VectorTorsionalMoment:
        """
        Creates a new VectorTorsionalMoment
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Fracture(object):
    """
    Defines a Fracture.
    """

    @property
    def RemeshHexDominantToTetrahedralType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.RemeshHexDominantToTetrahedral]:
        """
        
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSFractureGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCrack(self) -> Ansys.ACT.Automation.Mechanical.Crack:
        """
        Creates a new child Crack.
        """
        pass

    def GenerateAllCrackMesh(self) -> None:
        """
        Run the GenerateAllCrackMesh action.
        """
        pass

    def GenerateAllInterfaceDelamination(self) -> None:
        """
        Generate all interfaces delamination from an external model.
        """
        pass

    def AddArbitraryCrack(self) -> Ansys.ACT.Automation.Mechanical.ArbitraryCrack:
        """
        Creates a new ArbitraryCrack
        """
        pass

    def AddContactDebonding(self) -> Ansys.ACT.Automation.Mechanical.ContactDebonding:
        """
        Creates a new ContactDebonding
        """
        pass

    def AddCornerCrack(self) -> Ansys.ACT.Automation.Mechanical.CornerCrack:
        """
        Creates a new CornerCrack
        """
        pass

    def AddCrackInitiation(self) -> Ansys.ACT.Automation.Mechanical.CrackInitiation:
        """
        Creates a new CrackInitiation
        """
        pass

    def AddCylindricalCrack(self) -> Ansys.ACT.Automation.Mechanical.CylindricalCrack:
        """
        Creates a new CylindricalCrack
        """
        pass

    def AddEdgeCrack(self) -> Ansys.ACT.Automation.Mechanical.EdgeCrack:
        """
        Creates a new EdgeCrack
        """
        pass

    def AddEllipticalCrack(self) -> Ansys.ACT.Automation.Mechanical.EllipticalCrack:
        """
        Creates a new EllipticalCrack
        """
        pass

    def AddInterfaceDelamination(self) -> Ansys.ACT.Automation.Mechanical.InterfaceDelamination:
        """
        Creates a new InterfaceDelamination
        """
        pass

    def AddPreMeshedCrack(self) -> Ansys.ACT.Automation.Mechanical.PreMeshedCrack:
        """
        Creates a new PreMeshedCrack
        """
        pass

    def AddRingCrack(self) -> Ansys.ACT.Automation.Mechanical.RingCrack:
        """
        Creates a new RingCrack
        """
        pass

    def AddSemiEllipticalCrack(self) -> Ansys.ACT.Automation.Mechanical.SemiEllipticalCrack:
        """
        Creates a new SemiEllipticalCrack
        """
        pass

    def AddSMARTCrackGrowth(self) -> Ansys.ACT.Automation.Mechanical.SMARTCrackGrowth:
        """
        Creates a new SMARTCrackGrowth
        """
        pass

    def AddThroughCrack(self) -> Ansys.ACT.Automation.Mechanical.ThroughCrack:
        """
        Creates a new ThroughCrack
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshNumbering(object):
    """
    Defines a MeshNumbering.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMeshRenumberingControlGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ElementOffset(self) -> typing.Optional[int]:
        """
        Gets or sets the ElementOffset.
        """
        return None

    @property
    def NodeOffset(self) -> typing.Optional[int]:
        """
        Gets or sets the NodeOffset.
        """
        return None

    @property
    def CompressNodeNumbers(self) -> typing.Optional[bool]:
        """
        Gets or sets the CompressNodeNumbers.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddNumberingControl(self) -> Ansys.ACT.Automation.Mechanical.NumberingControl:
        """
        Creates a new NumberingControl
        """
        pass

    def RenumberMesh(self) -> None:
        """
        Run the RenumberMesh action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class NumberingControl(object):
    """
    Defines a NumberingControl.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMeshRenumberingControlAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def BeginElementNumber(self) -> typing.Optional[int]:
        """
        Gets or sets the BeginElementNumber.
        """
        return None

    @property
    def BeginNodeNumber(self) -> typing.Optional[int]:
        """
        Gets or sets the BeginNodeNumber.
        """
        return None

    @property
    def EndElementNumber(self) -> typing.Optional[int]:
        """
        Gets or sets the EndElementNumber.
        """
        return None

    @property
    def EndNodeNumber(self) -> typing.Optional[int]:
        """
        Gets or sets the EndNodeNumber.
        """
        return None

    @property
    def NodeNumber(self) -> typing.Optional[int]:
        """
        Gets or sets the NodeNumber.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MeshEdit(object):
    """
    Defines a MeshEdit.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMeshConnectionsParentAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def GenerateAutomaticMeshConnectionsOnRefresh(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets or sets the GenerateAutomaticMeshConnectionsOnRefresh.
        """
        return None

    @property
    def AssociateToPullGeometry(self) -> typing.Optional[bool]:
        """
        To Migrate Boundary Conditions from profile to resulting Pull bodies.
        """
        return None

    @property
    def TransparencyEnabled(self) -> typing.Optional[bool]:
        """
        Gets or sets the TransparencyEnabled.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def ClearGeneratedData(self) -> None:
        """
        Clear the generated data.
        """
        pass

    def AddNodeMerge(self) -> None:
        """
        Add a new NodeMerge.
        """
        pass

    def AddManualMeshConnection(self) -> None:
        """
        
            Add a new ManualMeshConnection
            
        """
        pass

    def Generate(self) -> None:
        """
        Generate all mesh edits.
        """
        pass

    def SearchConnectionsForDuplicatePairs(self) -> None:
        """
        Run the SearchConnectionsForDuplicatePairs action.
        """
        pass

    def AddPullExtrude(self) -> Ansys.ACT.Automation.Mechanical.MeshExtrude:
        """
        Creates a new MeshExtrude
        """
        pass

    def AddPullRevolve(self) -> Ansys.ACT.Automation.Mechanical.MeshExtrude:
        """
        Creates a new MeshExtrude
        """
        pass

    def AddPullSurfaceCoating(self) -> Ansys.ACT.Automation.Mechanical.MeshExtrude:
        """
        Creates a new MeshExtrude
        """
        pass

    def AddContactMatchGroup(self) -> Ansys.ACT.Automation.Mechanical.ContactMatchGroup:
        """
        Creates a new ContactMatchGroup
        """
        pass

    def AddDirectMorph(self) -> Ansys.ACT.Automation.Mechanical.DirectMorph:
        """
        Creates a new DirectMorph
        """
        pass

    def AddMeshConnectionGroup(self) -> Ansys.ACT.Automation.Mechanical.MeshConnectionGroup:
        """
        Creates a new MeshConnectionGroup
        """
        pass

    def AddNodeMergeGroup(self) -> Ansys.ACT.Automation.Mechanical.NodeMergeGroup:
        """
        Creates a new NodeMergeGroup
        """
        pass

    def AddNodeMove(self) -> Ansys.ACT.Automation.Mechanical.NodeMove:
        """
        Creates a new NodeMove
        """
        pass

    def CreateNamedSelectionForSharedNodes(self) -> None:
        """
        Run the CreateNamedSelectionForSharedNodes action.
        """
        pass

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CoordinateSystem(object):
    """
    Defines a CoordinateSystem.
    """

    @property
    def TransformationCount(self) -> typing.Optional[int]:
        """
        Gets the number of transformations.
        """
        return None

    @property
    def IsGlobal(self) -> typing.Optional[bool]:
        """
        Gets the IsGlobal.
        """
        return None

    @property
    def OriginLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the origin location.
        """
        return None

    @property
    def OriginX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the origin X coordinate.
        """
        return None

    @property
    def OriginY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the origin Y coordinate.
        """
        return None

    @property
    def OriginZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the origin Z coordinate.
        """
        return None

    @property
    def OriginDefineBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAlignmentType]:
        """
        Gets or sets the origin define by.
        """
        return None

    @property
    def PrimaryAxisDirection(self) -> typing.Optional[Ansys.ACT.Math.Vector3D]:
        """
        Gets or sets the Principal Axis Direction.
        """
        return None

    @property
    def SecondaryAxisDirection(self) -> typing.Optional[Ansys.ACT.Math.Vector3D]:
        """
        Gets the Secondary Axis Direction.
        """
        return None

    @property
    def PrimaryAxisLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the principal axis geometry selection.
        """
        return None

    @property
    def SecondaryAxisLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the orientation about principal axis geometry selection.
        """
        return None

    @property
    def CoordinateSystemType(self) -> typing.Optional[Ansys.ACT.Interfaces.Analysis.CoordinateSystemTypeEnum]:
        """
        Gets or sets the CoordinateSystemType.
        """
        return None

    @property
    def APDLName(self) -> typing.Optional[str]:
        """
        Gets or sets the APDLName.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCoordinateSystemAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def CoordinateSystemID(self) -> typing.Optional[int]:
        """
        Gets or sets the CoordinateSystemID.
        """
        return None

    @property
    def TransformedConfiguration(self) -> typing.Optional[str]:
        """
        Gets the TransformedConfiguration.
        """
        return None

    @property
    def XAxisData(self) -> typing.Optional[str]:
        """
        Gets the XAxisData.
        """
        return None

    @property
    def YAxisData(self) -> typing.Optional[str]:
        """
        Gets the YAxisData.
        """
        return None

    @property
    def ZAxisData(self) -> typing.Optional[str]:
        """
        Gets the ZAxisData.
        """
        return None

    @property
    def CoordinateSystemIDGeneration(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets or sets the CoordinateSystemIDGeneration.
        """
        return None

    @property
    def PrimaryAxis(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the PrimaryAxis.
        """
        return None

    @property
    def PrimaryAxisDefineBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAlignmentType]:
        """
        Gets or sets the PrimaryAxisDefineBy.
        """
        return None

    @property
    def SecondaryAxis(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the SecondaryAxis.
        """
        return None

    @property
    def SecondaryAxisDefineBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAlignmentType]:
        """
        Gets or sets the SecondaryAxisDefineBy.
        """
        return None

    @property
    def GloballyAvailable(self) -> typing.Optional[bool]:
        """
        Gets or sets the GloballyAvailable.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddTransformation(self, trans: Ansys.Mechanical.DataModel.Enums.TransformationType, axis: Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType) -> None:
        """
        Adds a new transformation.
        """
        pass

    def RemoveTransformation(self, index: int) -> None:
        """
        Removes a tranformation.
        """
        pass

    def SetOriginLocation(self, originX: Ansys.Core.Units.Quantity, originY: Ansys.Core.Units.Quantity, originZ: Ansys.Core.Units.Quantity) -> None:
        """
        Changes the origin location.
        """
        pass

    def SetTransformationValue(self, index: int, value: typing.Any) -> None:
        """
        Sets the value of a transformation.
        """
        pass

    def GetTransformationValue(self, index: int) -> typing.Any:
        """
        Gets the value of a transformation.
        """
        pass

    def MoveTransformationUp(self, index: int) -> None:
        """
        Moves a transformation up.
        """
        pass

    def MoveTransformationDown(self, index: int) -> None:
        """
        Moves a transformation down.
        """
        pass

    def SetPrimaryAxisUsingCenterOfMass(self) -> None:
        """
        Sets the primary axis using a 1 or 2 point selection and the center of mass
        """
        pass

    def FlipX(self) -> None:
        """
        Flips the X Axis of the coordinate system
        """
        pass

    def FlipY(self) -> None:
        """
        Flips the Y Axis of the coordinate system
        """
        pass

    def FlipZ(self) -> None:
        """
        Flips the Z Axis of the coordinate system
        """
        pass

    def OffsetX(self) -> None:
        """
        Creates an offset in the X Axis direction of the coordinate system
        """
        pass

    def OffsetX(self, value: typing.Any) -> None:
        """
        Creates an offset in the X Axis direction of the coordinate system
        """
        pass

    def OffsetY(self) -> None:
        """
        Creates an offset in the Y Axis direction of the coordinate system
        """
        pass

    def OffsetY(self, value: typing.Any) -> None:
        """
        Creates an offset in the Y Axis direction of the coordinate system
        """
        pass

    def OffsetZ(self) -> None:
        """
        Creates an offset in the Z Axis direction of the coordinate system
        """
        pass

    def OffsetZ(self, value: typing.Any) -> None:
        """
        Creates an offset in the Z Axis direction of the coordinate system
        """
        pass

    def RotateX(self) -> None:
        """
        Creates a rotation about the X Axis of the coordinate system
        """
        pass

    def RotateX(self, value: typing.Any) -> None:
        """
        Creates a rotation about the X Axis of the coordinate system
        """
        pass

    def RotateY(self) -> None:
        """
        Creates a rotation about the Y Axis of the coordinate system
        """
        pass

    def RotateY(self, value: typing.Any) -> None:
        """
        Creates a rotation about the Y Axis of the coordinate system
        """
        pass

    def RotateZ(self) -> None:
        """
        Creates a rotation about the Z Axis of the coordinate system
        """
        pass

    def RotateZ(self, value: typing.Any) -> None:
        """
        Creates a rotation about the Z Axis of the coordinate system
        """
        pass

    def SetCoordinateSystemOriginAtCenterOfMass(self, geoBodies: typing.List[Ansys.ACT.Interfaces.Geometry.IBaseGeoBody], pointMasses: typing.List[Ansys.ACT.Automation.Mechanical.PointMass], distributedMasses: typing.List[Ansys.ACT.Automation.Mechanical.DistributedMass]) -> None:
        """
        SetCoordinateSystemOriginAtCenterOfMass method.
        """
        pass

    def CreateConstructionSurface(self) -> None:
        """
        Run the CreateConstructionSurface action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Body(object):
    """
    Defines a Body.
    """

    @property
    def Hidden(self) -> typing.Optional[bool]:
        """
        Hide or show the body.
        """
        return None

    @property
    def ConfigurationId(self) -> typing.Optional[int]:
        """
        Gets the related Result Mesh's ConfigurationId.
        """
        return None

    @property
    def ResultMeshId(self) -> typing.Optional[int]:
        """
        Gets the related Result Mesh's ObjectId.
        """
        return None

    @property
    def ReferenceTemperature(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReferenceTemperature.
        """
        return None

    @property
    def ThicknessMode(self) -> typing.Optional[bool]:
        """
        Gets the ThicknessMode.
        """
        return None

    @property
    def Dimension(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ShellBodyDimension]:
        """
        Gets or sets the Dimension.
        """
        return None

    @property
    def Assignment(self) -> typing.Optional[str]:
        """
        Gets or sets the Assignment.
        """
        return None

    @property
    def CrossSectionName(self) -> typing.Optional[str]:
        """
        Gets CrossSectionName.
        """
        return None

    @property
    def ModelType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PrototypeModelType]:
        """
        
            Gets or sets the ModelType.
            Note: ModelType is applicable to line bodies and surface bodies only.
            
        """
        return None

    @property
    def GeometryType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryType]:
        """
        Gets the GeometryType.
        """
        return None

    @property
    def SuppressedParameterized(self) -> typing.Optional[bool]:
        """
        Gets if the part suppressed property is parameterized.
        """
        return None

    @property
    def Transparency(self) -> typing.Optional[float]:
        """
        Gets or sets the Transparency. Values range from 0.0 (fully invisible) to 1.0 (fully visible).
        """
        return None

    @property
    def Color(self) -> typing.Optional[int]:
        """
        Gets or sets the Color, encoded as a BGR bitfield.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPrototypeAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Elements(self) -> typing.Optional[int]:
        """
        Gets the Elements.
        """
        return None

    @property
    def Material(self) -> typing.Optional[str]:
        """
        Gets or sets the Material.
        """
        return None

    @property
    def Nodes(self) -> typing.Optional[int]:
        """
        Gets the Nodes.
        """
        return None

    @property
    def NumberOfTurns(self) -> typing.Optional[int]:
        """
        Gets or sets the NumberOfTurns.
        """
        return None

    @property
    def MeshVersion(self) -> typing.Optional[int]:
        """
        Gets the MeshVersion.
        """
        return None

    @property
    def LengthX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the LengthX.
        """
        return None

    @property
    def LengthY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the LengthY.
        """
        return None

    @property
    def LengthZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the LengthZ.
        """
        return None

    @property
    def CrossSectionArea(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the CrossSectionArea.
        """
        return None

    @property
    def CrossSectionIYY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the CrossSectionIYY.
        """
        return None

    @property
    def CrossSectionIZZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the CrossSectionIZZ.
        """
        return None

    @property
    def FiberAngle(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FiberAngle.
        """
        return None

    @property
    def FiberCrossSectionArea(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FiberCrossSectionArea.
        """
        return None

    @property
    def FiberSpacing(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FiberSpacing.
        """
        return None

    @property
    def FluidCrossArea(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FluidCrossArea.
        """
        return None

    @property
    def Mass(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Mass.
        """
        return None

    @property
    def CentroidX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the CentroidX.
        """
        return None

    @property
    def CentroidY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the CentroidY.
        """
        return None

    @property
    def CentroidZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the CentroidZ.
        """
        return None

    @property
    def MomentOfInertiaIp1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the MomentOfInertiaIp1.
        """
        return None

    @property
    def MomentOfInertiaIp2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the MomentOfInertiaIp2.
        """
        return None

    @property
    def MomentOfInertiaIp3(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the MomentOfInertiaIp3.
        """
        return None

    @property
    def Average(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Average.
        """
        return None

    @property
    def Maximum(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Maximum.
        """
        return None

    @property
    def Minimum(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Minimum.
        """
        return None

    @property
    def StandardDeviation(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the StandardDeviation.
        """
        return None

    @property
    def OffsetX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the OffsetX.
        """
        return None

    @property
    def OffsetY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the OffsetY.
        """
        return None

    @property
    def PipeExternalDiameter(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the PipeExternalDiameter.
        """
        return None

    @property
    def PipeInternalDiameter(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the PipeInternalDiameter.
        """
        return None

    @property
    def PipeThickness(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the PipeThickness.
        """
        return None

    @property
    def ReferenceTemperatureValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ReferenceTemperatureValue.
        """
        return None

    @property
    def SurfaceArea(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the SurfaceArea.
        """
        return None

    @property
    def Thickness(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thickness.
        """
        return None

    @property
    def Volume(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Volume.
        """
        return None

    @property
    def Length(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Length.
        """
        return None

    @property
    def OffsetMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets or sets the OffsetMode.
        """
        return None

    @property
    def BrickIntegrationScheme(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.BrickIntegrationScheme]:
        """
        Gets or sets the BrickIntegrationScheme.
        """
        return None

    @property
    def FluidDiscretization(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FluidDiscretizationType]:
        """
        Gets or sets the FluidDiscretization.
        """
        return None

    @property
    def LinkTrussBehavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PrototypeLinkBehavior]:
        """
        Gets or sets the LinkTrussBehavior.
        """
        return None

    @property
    def MaterialPolarizationDirection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MaterialPolarizationDirection]:
        """
        Gets or sets the MaterialPolarizationDirection.
        """
        return None

    @property
    def MeshMetric(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MeshMetricType]:
        """
        Gets the MeshMetric.
        """
        return None

    @property
    def Behavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.Model2DBehavior]:
        """
        Gets or sets the Behavior.
        """
        return None

    @property
    def OffsetType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.BeamOffsetType]:
        """
        Gets or sets the OffsetType.
        """
        return None

    @property
    def FluidSolidPhase(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PhaseType]:
        """
        Gets or sets the FluidSolidPhase.
        """
        return None

    @property
    def ReferenceFrame(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ReferenceFrameType]:
        """
        Gets or sets the ReferenceFrame.
        """
        return None

    @property
    def ReinforcingStressState(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ReinforcingStressState]:
        """
        Gets or sets the ReinforcingStressState.
        """
        return None

    @property
    def StiffnessOption(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ShellElementStiffnessOption]:
        """
        Gets or sets the StiffnessOption.
        """
        return None

    @property
    def ShellOffsetType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ShellOffsetType]:
        """
        Gets or sets the ShellOffsetType.
        """
        return None

    @property
    def StiffnessBehavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.StiffnessBehavior]:
        """
        Gets or sets the StiffnessBehavior.
        """
        return None

    @property
    def Treatment(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.BodyTreatment]:
        """
        Gets or sets the Treatment.
        """
        return None

    @property
    def Visible(self) -> typing.Optional[bool]:
        """
        Gets or sets the Visible.
        """
        return None

    @property
    def HomogeneousMembrane(self) -> typing.Optional[bool]:
        """
        Gets or sets the HomogeneousMembrane.
        """
        return None

    @property
    def IsWindingBody(self) -> typing.Optional[bool]:
        """
        Gets the IsWindingBody.
        """
        return None

    @property
    def NonlinearEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the NonlinearEffects.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def ThermalStrainEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the ThermalStrainEffects.
        """
        return None

    @property
    def ManualThicknessMode(self) -> typing.Optional[bool]:
        """
        Gets the ManualThicknessMode.
        """
        return None

    @property
    def UseReferenceTemperatureByBody(self) -> typing.Optional[bool]:
        """
        Gets or sets the UseReferenceTemperatureByBody.
        """
        return None

    @property
    def UserNameChange(self) -> typing.Optional[bool]:
        """
        Gets the UserNameChange.
        """
        return None

    @property
    def BeamSection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.DataModelObject]:
        """
        Gets the BeamSection.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def CrossSectionSelection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CrossSection]:
        """
        Gets or sets the CrossSectionSelection.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GetGeoBody(self) -> Ansys.ACT.Interfaces.Geometry.IGeoBody:
        """
        Gets the Geo Body 
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def AddPythonCodeEventBased(self) -> Ansys.ACT.Automation.Mechanical.PythonCodeEventBased:
        """
        Creates a new PythonCodeEventBased
        """
        pass

    def GenerateMesh(self) -> None:
        """
        Run the GenerateMesh action.
        """
        pass

    def PreviewInflation(self) -> None:
        """
        Run the PreviewInflation action.
        """
        pass

    def PreviewSurfaceMesh(self) -> None:
        """
        Run the PreviewSurfaceMesh action.
        """
        pass

    def ShowBody(self) -> None:
        """
        Run the ShowBody action.
        """
        pass

    def Update(self) -> None:
        """
        Run the Update action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Path(object):
    """
    Defines a Path.
    """

    @property
    def DiscretizationPoints(self) -> typing.Optional[int]:
        """
        Gets or sets the DiscretizationPoints.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPathAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def NumberOfSubpaths(self) -> typing.Optional[int]:
        """
        Gets or sets the NumberOfSubpaths.
        """
        return None

    @property
    def NumberOfSamplingPoints(self) -> typing.Optional[int]:
        """
        Gets or sets the NumberOfSamplingPoints.
        """
        return None

    @property
    def EndXCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the EndXCoordinate.
        """
        return None

    @property
    def EndYCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the EndYCoordinate.
        """
        return None

    @property
    def EndZCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the EndZCoordinate.
        """
        return None

    @property
    def StartXCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the StartXCoordinate.
        """
        return None

    @property
    def StartYCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the StartYCoordinate.
        """
        return None

    @property
    def StartZCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the StartZCoordinate.
        """
        return None

    @property
    def PathType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PathScopingType]:
        """
        Gets or sets the PathType.
        """
        return None

    @property
    def HasValidGeometrySelection(self) -> typing.Optional[bool]:
        """
        Gets the HasValidGeometrySelection.
        """
        return None

    @property
    def ShowMesh(self) -> typing.Optional[bool]:
        """
        Gets or sets the ShowMesh.
        """
        return None

    @property
    def SnapToMeshNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the SnapToMeshNodes.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def PathCoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the PathCoordinateSystem.
        """
        return None

    @property
    def EndCoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the EndCoordinateSystem.
        """
        return None

    @property
    def StartCoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the StartCoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def OffsetEdgeLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the OffsetEdgeLocation.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def SnapPathToMeshNodes(self) -> None:
        """
        
            Snap path to mesh nodes
            
        """
        pass

    def FlipPathOrientatation(self) -> None:
        """
        
            Flip Path Orientatation
            
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class NamedSelection(object):
    """
    Defines a NamedSelection.
    """

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def GenerationCriteria(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.NamedSelectionCriteria]:
        """
        
            Returns the generation criteria that is used to generate the selection.
            
        """
        return None

    @property
    def Protected(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ComponentProtectedType]:
        """
        Gets or sets how the corresponding contact entities (faces, edges or vertices) are protected while meshing. Default:Program Controlled
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSComponentAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def CrackFrontNumber(self) -> typing.Optional[int]:
        """
        Gets the CrackFrontNumber.
        """
        return None

    @property
    def LSDynaUserId(self) -> typing.Optional[int]:
        """
        Gets or sets the LSDynaUserId.
        """
        return None

    @property
    def TotalSelection(self) -> typing.Optional[int]:
        """
        Gets the TotalSelection.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[int]:
        """
        Gets the Suppressed.
        """
        return None

    @property
    def RelativeTolerance(self) -> typing.Optional[float]:
        """
        Gets or sets the RelativeTolerance.
        """
        return None

    @property
    def ZeroTolerance(self) -> typing.Optional[float]:
        """
        Gets or sets the ZeroTolerance.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def SendAs(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SendAs]:
        """
        Gets or sets the SendAs.
        """
        return None

    @property
    def ToleranceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ToleranceType]:
        """
        Gets or sets the ToleranceType.
        """
        return None

    @property
    def Type(self) -> typing.Optional[bool]:
        """
        Gets the Type.
        """
        return None

    @property
    def IncludeProgramControlledInflation(self) -> typing.Optional[bool]:
        """
        Gets or sets the IncludeProgramControlledInflation.
        """
        return None

    @property
    def PreserveDuringSolve(self) -> typing.Optional[bool]:
        """
        Gets or sets the PreserveDuringSolve.
        """
        return None

    @property
    def SendToSolver(self) -> typing.Optional[bool]:
        """
        Gets or sets the SendToSolver.
        """
        return None

    @property
    def Visible(self) -> typing.Optional[bool]:
        """
        Gets or sets the Visible.
        """
        return None

    @property
    def UsedByMeshWorksheet(self) -> typing.Optional[bool]:
        """
        Gets the UsedByMeshWorksheet.
        """
        return None

    @property
    def CreatedForCrack(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.GenericCrack]:
        """
        Gets the CreatedForCrack.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def ExportToTextFile(self, filePath: str) -> None:
        """
        Run the ExportToTextFile action.
        """
        pass

    def ExportNamedSelectionToCDBFile(self, filepath: str) -> None:
        """
        Export Named Selection to CDB file
        """
        pass

    def Generate(self) -> None:
        """
        
            Generates the selection based on the generation criteria.
            
        """
        pass

    def CreateNodalNamedSelection(self) -> Ansys.ACT.Automation.Mechanical.NamedSelection:
        """
        
            Creates a new Named Selection object containing all the nodes from the entities in the current named selection .
            
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Geometry(object):
    """
    Defines a Geometry.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPrototypeGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def TemporaryDirectory(self) -> typing.Optional[str]:
        """
        Gets or sets the TemporaryDirectory.
        """
        return None

    @property
    def AttributeKey(self) -> typing.Optional[str]:
        """
        Gets the AttributeKey.
        """
        return None

    @property
    def Source(self) -> typing.Optional[str]:
        """
        Gets the Source.
        """
        return None

    @property
    def NamedSelectionKey(self) -> typing.Optional[str]:
        """
        Gets the NamedSelectionKey.
        """
        return None

    @property
    def Type(self) -> typing.Optional[str]:
        """
        Gets the Type.
        """
        return None

    @property
    def Elements(self) -> typing.Optional[int]:
        """
        Gets the Elements.
        """
        return None

    @property
    def Average(self) -> typing.Optional[float]:
        """
        Gets the Average.
        """
        return None

    @property
    def Maximum(self) -> typing.Optional[float]:
        """
        Gets the Maximum.
        """
        return None

    @property
    def Minimum(self) -> typing.Optional[float]:
        """
        Gets the Minimum.
        """
        return None

    @property
    def StandardDeviation(self) -> typing.Optional[float]:
        """
        Gets the StandardDeviation.
        """
        return None

    @property
    def Nodes(self) -> typing.Optional[int]:
        """
        Gets the Nodes.
        """
        return None

    @property
    def ActiveBodies(self) -> typing.Optional[int]:
        """
        Gets the ActiveBodies.
        """
        return None

    @property
    def Bodies(self) -> typing.Optional[int]:
        """
        Gets the Bodies.
        """
        return None

    @property
    def ParameterKey(self) -> typing.Optional[str]:
        """
        Gets the ParameterKey.
        """
        return None

    @property
    def ScaleFactorValue(self) -> typing.Optional[float]:
        """
        Gets or sets the ScaleFactorValue.
        """
        return None

    @property
    def Tolerance2D(self) -> typing.Optional[float]:
        """
        Gets or sets the Tolerance2D.
        """
        return None

    @property
    def LengthX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the LengthX.
        """
        return None

    @property
    def LengthY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the LengthY.
        """
        return None

    @property
    def LengthZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the LengthZ.
        """
        return None

    @property
    def FiberLength(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FiberLength.
        """
        return None

    @property
    def Mass(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Mass.
        """
        return None

    @property
    def MeshVolume(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the MeshVolume.
        """
        return None

    @property
    def EndPlaneRotationAboutX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the EndPlaneRotationAboutX.
        """
        return None

    @property
    def EndPlaneRotationAboutY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the EndPlaneRotationAboutY.
        """
        return None

    @property
    def SheetSurfaceArea(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the SheetSurfaceArea.
        """
        return None

    @property
    def SurfaceArea(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the SurfaceArea.
        """
        return None

    @property
    def Volume(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Volume.
        """
        return None

    @property
    def XCentroid(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the XCentroid.
        """
        return None

    @property
    def YCentroid(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the YCentroid.
        """
        return None

    @property
    def ZCentroid(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the ZCentroid.
        """
        return None

    @property
    def AnalysisType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDimensionType]:
        """
        Gets the AnalysisType.
        """
        return None

    @property
    def LengthUnit(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.WBUnitSystemType]:
        """
        Gets or sets the LengthUnit.
        """
        return None

    @property
    def ComparePartsOnUpdate(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ComparePartsOnUpdateType]:
        """
        Gets the ComparePartsOnUpdate.
        """
        return None

    @property
    def ComparePartsTolerance(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ComparePartsToleranceType]:
        """
        Gets the ComparePartsTolerance.
        """
        return None

    @property
    def DisplayStyle(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PrototypeDisplayStyleType]:
        """
        Gets or sets the DisplayStyle.
        """
        return None

    @property
    def ElementControl(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ElementControl]:
        """
        Gets or sets the ElementControl.
        """
        return None

    @property
    def MeshMetric(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MeshMetricType]:
        """
        Gets the MeshMetric.
        """
        return None

    @property
    def Model2DBehavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.Model2DBehavior]:
        """
        Gets or sets the Model2DBehavior.
        """
        return None

    @property
    def MixedImportResolution(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SecondaryImportPrefType]:
        """
        Gets the MixedImportResolution.
        """
        return None

    @property
    def Parameters(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ImportParameterType]:
        """
        Gets the Parameters.
        """
        return None

    @property
    def AssignMaterialOnUpdate(self) -> typing.Optional[bool]:
        """
        Gets or sets the AssignMaterialOnUpdate.
        """
        return None

    @property
    def AttachFileViaTempFile(self) -> typing.Optional[bool]:
        """
        Gets or sets the AttachFileViaTempFile.
        """
        return None

    @property
    def CanChangeCADUnits(self) -> typing.Optional[bool]:
        """
        Gets the CanChangeCADUnits.
        """
        return None

    @property
    def DecomposeDisjointGeometry(self) -> typing.Optional[bool]:
        """
        Gets the DecomposeDisjointGeometry.
        """
        return None

    @property
    def SmartCADUpdate(self) -> typing.Optional[bool]:
        """
        Gets the SmartCADUpdate.
        """
        return None

    @property
    def GeometryPreferencesReadOnly(self) -> typing.Optional[bool]:
        """
        Gets the GeometryPreferencesReadOnly.
        """
        return None

    @property
    def ImportCoordinateSystems(self) -> typing.Optional[bool]:
        """
        Gets the ImportCoordinateSystems.
        """
        return None

    @property
    def EnclosureAndSymmetryProcessing(self) -> typing.Optional[bool]:
        """
        Gets the EnclosureAndSymmetryProcessing.
        """
        return None

    @property
    def SurfaceBodies(self) -> typing.Optional[bool]:
        """
        Gets the SurfaceBodies.
        """
        return None

    @property
    def SolidBodies(self) -> typing.Optional[bool]:
        """
        Gets the SolidBodies.
        """
        return None

    @property
    def LineBodies(self) -> typing.Optional[bool]:
        """
        Gets the LineBodies.
        """
        return None

    @property
    def MaterialProperties(self) -> typing.Optional[bool]:
        """
        Gets the MaterialProperties.
        """
        return None

    @property
    def ReaderModeSavesUpdatedFile(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReaderModeSavesUpdatedFile.
        """
        return None

    @property
    def UseAssociativity(self) -> typing.Optional[bool]:
        """
        Gets the UseAssociativity.
        """
        return None

    @property
    def Attributes(self) -> typing.Optional[bool]:
        """
        Gets the Attributes.
        """
        return None

    @property
    def NamedSelections(self) -> typing.Optional[bool]:
        """
        Gets the NamedSelections.
        """
        return None

    @property
    def UseInstances(self) -> typing.Optional[bool]:
        """
        Gets the UseInstances.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddThickness(self) -> Ansys.ACT.Automation.Mechanical.Thickness:
        """
        Creates a new child Thickness.
        """
        pass

    def AddImportedThicknessExternalData(self) -> Ansys.ACT.Automation.Mechanical.ImportedLoads.ImportedThicknessGroup:
        """
        Creates a new Imported Thickness (External Data).
        """
        pass

    def AddImportedElementOrientationExternalData(self) -> Ansys.ACT.Automation.Mechanical.ImportedLoads.ImportedElementOrientationGroup:
        """
        Creates a new Imported Element Orientation (External Data).
        """
        pass

    def AddLayeredSection(self) -> Ansys.ACT.Automation.Mechanical.LayeredSection:
        """
        Creates a new child LayeredSection.
        """
        pass

    def GetBody(self, geoBody: Ansys.ACT.Interfaces.Geometry.IBaseGeoBody) -> Ansys.ACT.Automation.Mechanical.Body:
        """
        
            Gets the Body associated with the given IGeoBody
            
        """
        pass

    def GetPart(self, geoPart: Ansys.ACT.Interfaces.Geometry.IBaseGeoPart) -> Ansys.ACT.Automation.Mechanical.Part:
        """
        
            Gets the Part associated with the given IGeoPart
            
        """
        pass

    def ExportParts(self, filePath: str, partIds: typing.List[int]) -> None:
        """
        ExportParts method.
        """
        pass

    def FreezeMeshOnAllParts(self) -> None:
        """
        Run the FreezeMeshOnAllParts action.
        """
        pass

    def UnfreezeMeshOnAllParts(self) -> None:
        """
        Run the UnfreezeMeshOnAllParts action.
        """
        pass

    def UnsuppressAllBodies(self) -> None:
        """
         Unsuppress all the bodies that were suppressed. 
        """
        pass

    def InvertSuppressedBodySet(self) -> None:
        """
         Invert all parts Suppressed property. 
        """
        pass

    def CreateParameter(self, paramPath: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def RemoveParameter(self, paramPath: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass

    def CenterOfMass(self, geoBodies: typing.List[Ansys.ACT.Interfaces.Geometry.IBaseGeoBody], pointMasses: typing.List[Ansys.ACT.Automation.Mechanical.PointMass], distributedMasses: typing.List[Ansys.ACT.Automation.Mechanical.DistributedMass]) -> Ansys.Core.Units.Quantity:
        """
        CenterOfMass method.
        """
        pass

    def AddDistributedMass(self) -> Ansys.ACT.Automation.Mechanical.DistributedMass:
        """
        Creates a new DistributedMass
        """
        pass

    def AddElementOrientation(self) -> Ansys.ACT.Automation.Mechanical.ElementOrientation:
        """
        Creates a new ElementOrientation
        """
        pass

    def AddPointMass(self) -> Ansys.ACT.Automation.Mechanical.PointMass:
        """
        Creates a new PointMass
        """
        pass

    def AddSurfaceCoating(self) -> Ansys.ACT.Automation.Mechanical.SurfaceCoating:
        """
        Creates a new SurfaceCoating
        """
        pass

    def AddThermalPointMass(self) -> Ansys.ACT.Automation.Mechanical.ThermalPointMass:
        """
        Creates a new ThermalPointMass
        """
        pass

    def ResetBodyColors(self) -> None:
        """
        Run the ResetBodyColors action.
        """
        pass

    def UpdateGeometryFromSource(self) -> None:
        """
        Run the UpdateGeometryFromSource action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass


class FatigueTool(object):
    """
    Defines a FatigueTool.
    """

    @property
    def OneCycleIsEqualTo(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the OneCycleIsEqualTo.
        """
        return None

    @property
    def CustomUnitsName(self) -> typing.Optional[str]:
        """
        Gets or sets the Custom Units Name.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSFatigueToolAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def FatigueStrengthFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the FatigueStrengthFactor.
        """
        return None

    @property
    def HistoryDataLocation(self) -> typing.Optional[str]:
        """
        Gets or sets the HistoryDataLocation.
        """
        return None

    @property
    def InfiniteLife(self) -> typing.Optional[float]:
        """
        Gets or sets the InfiniteLife.
        """
        return None

    @property
    def LoadingRatio(self) -> typing.Optional[float]:
        """
        Gets or sets the LoadingRatio.
        """
        return None

    @property
    def MaximumDataPointsToPlot(self) -> typing.Optional[float]:
        """
        Gets or sets the MaximumDataPointsToPlot.
        """
        return None

    @property
    def BinSize(self) -> typing.Optional[int]:
        """
        Gets or sets the BinSize.
        """
        return None

    @property
    def ScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ScaleFactor.
        """
        return None

    @property
    def ExposureDuration(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ExposureDuration.
        """
        return None

    @property
    def Frequency(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Frequency.
        """
        return None

    @property
    def DisplayTime(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the DisplayTime.
        """
        return None

    @property
    def MeanStressTheory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MeanStressTheoryType]:
        """
        Gets or sets the MeanStressTheory.
        """
        return None

    @property
    def FrequencySelection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FatigueFrequencySelection]:
        """
        Gets or sets the FrequencySelection.
        """
        return None

    @property
    def LoadingType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FatigueLoadType]:
        """
        Gets or sets the LoadingType.
        """
        return None

    @property
    def MethodSelection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FatigueToolMethod]:
        """
        Gets or sets the MethodSelection.
        """
        return None

    @property
    def ResultsInput(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FatigueToolResultsInputType]:
        """
        Gets or sets the ResultsInput.
        """
        return None

    @property
    def StressComponent(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FatigueStressComponentType]:
        """
        Gets or sets the StressComponent.
        """
        return None

    @property
    def AnalysisType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FatigueToolAnalysisType]:
        """
        Gets or sets the AnalysisType.
        """
        return None

    @property
    def UnitsName(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.LifeUnitsType]:
        """
        Gets or sets the UnitsName.
        """
        return None

    @property
    def UseQuickRainflowCounting(self) -> typing.Optional[bool]:
        """
        Gets or sets the UseQuickRainflowCounting.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def EvaluateAllResults(self) -> None:
        """
        Run the EvaluateAllResults action.
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def DuplicateWithoutResults(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        Run the DuplicateWithoutResults action.
        """
        pass

    def AddBiaxialityIndication(self) -> Ansys.ACT.Automation.Mechanical.Results.FatigueToolResults.FatigueBiaxialityIndication:
        """
        Creates a new FatigueBiaxialityIndication
        """
        pass

    def AddDamage(self) -> Ansys.ACT.Automation.Mechanical.Results.FatigueToolResults.FatigueDamage:
        """
        Creates a new FatigueDamage
        """
        pass

    def AddDamageMatrix(self) -> Ansys.ACT.Automation.Mechanical.Results.FatigueToolResults.FatigueDamageMatrix:
        """
        Creates a new FatigueDamageMatrix
        """
        pass

    def AddEquivalentAlternativeStress(self) -> Ansys.ACT.Automation.Mechanical.Results.FatigueToolResults.FatigueEquivalentAlternativeStress:
        """
        Creates a new FatigueEquivalentAlternativeStress
        """
        pass

    def AddHysteresis(self) -> Ansys.ACT.Automation.Mechanical.Results.FatigueToolResults.FatigueHysteresis:
        """
        Creates a new FatigueHysteresis
        """
        pass

    def AddLife(self) -> Ansys.ACT.Automation.Mechanical.Results.FatigueToolResults.FatigueLife:
        """
        Creates a new FatigueLife
        """
        pass

    def AddRainflowMatrix(self) -> Ansys.ACT.Automation.Mechanical.Results.FatigueToolResults.FatigueRainflowMatrix:
        """
        Creates a new FatigueRainflowMatrix
        """
        pass

    def AddSafetyFactor(self) -> Ansys.ACT.Automation.Mechanical.Results.FatigueToolResults.FatigueSafetyFactor:
        """
        Creates a new FatigueSafetyFactor
        """
        pass

    def AddFatigueSensitivity(self) -> Ansys.ACT.Automation.Mechanical.Results.FatigueToolResults.FatigueSensitivity:
        """
        Creates a new FatigueSensitivity
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class InitialCondition(object):
    """
    Defines a InitialCondition.
    """

    @property
    def Direction(self) -> typing.Optional[Ansys.ACT.Math.Vector3D]:
        """
        Gets or sets the Direction.
        """
        return None

    @property
    def TotalMagnitude(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Magnitude.
        """
        return None

    @property
    def InitialEnvironment(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Analysis]:
        """
        Gets or sets the InitialEnvironment.
        """
        return None

    @property
    def PreStressEnvironmentModalIC(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Analysis]:
        """
        Gets or sets the PreStressEnvironmentModalIC.
        """
        return None

    @property
    def ModalEnvironmentRSIC(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Analysis]:
        """
        Gets or sets the ModalEnvironmentRSIC.
        """
        return None

    @property
    def ModalEnvironmentPSDIC(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Analysis]:
        """
        Gets or sets the ModalEnvironmentPSDIC.
        """
        return None

    @property
    def PreStressEnvironmentHarmonicIC(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Analysis]:
        """
        Gets or sets the PreStressEnvironmentHarmonicIC.
        """
        return None

    @property
    def ModalEnvironmentHarmonicIC(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Analysis]:
        """
        Gets or sets the ModalEnvironmentHarmonicIC.
        """
        return None

    @property
    def PreStressEnvironmentTransientIC(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Analysis]:
        """
        Gets or sets the PreStressEnvironmentTransientIC.
        """
        return None

    @property
    def ModalEnvironmentTransientMSUPIC(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Analysis]:
        """
        Gets or sets the ModalEnvironmentTransientMSUPIC.
        """
        return None

    @property
    def ModalICEnvironment(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Analysis]:
        """
        Gets or sets the ModalICEnvironment.
        """
        return None

    @property
    def PreStressICEnvironment(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Analysis]:
        """
        Gets or sets the PreStressICEnvironment.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSInitialConditionsAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ReportedLoadStep(self) -> typing.Optional[int]:
        """
        Gets the ReportedLoadStep.
        """
        return None

    @property
    def ReportedSubStep(self) -> typing.Optional[int]:
        """
        Gets the ReportedSubStep.
        """
        return None

    @property
    def ReportedTime(self) -> typing.Optional[float]:
        """
        Gets the ReportedTime.
        """
        return None

    @property
    def TimeStepFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the TimeStepFactor.
        """
        return None

    @property
    def PreStressLoadStep(self) -> typing.Optional[float]:
        """
        Gets or sets the PreStressLoadStep.
        """
        return None

    @property
    def DropHeight(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the DropHeight.
        """
        return None

    @property
    def ImpactVelocity(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ImpactVelocity.
        """
        return None

    @property
    def Time(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Time.
        """
        return None

    @property
    def InitialTemperatureValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the InitialTemperatureValue.
        """
        return None

    @property
    def ExplicitPreStressTime(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ExplicitPreStressTime.
        """
        return None

    @property
    def PreStressTime(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the PreStressTime.
        """
        return None

    @property
    def ReferenceTemperature(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ReferenceTemperature.
        """
        return None

    @property
    def XComponent(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the XComponent.
        """
        return None

    @property
    def YComponent(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the YComponent.
        """
        return None

    @property
    def ZComponent(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ZComponent.
        """
        return None

    @property
    def DropTestDefineBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DropTestDefineBy]:
        """
        Gets or sets the DropTestDefineBy.
        """
        return None

    @property
    def DropDirection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DropDirection]:
        """
        Gets or sets the DropDirection.
        """
        return None

    @property
    def InitialTemperature(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.InitialTemperatureType]:
        """
        Gets or sets the InitialTemperature.
        """
        return None

    @property
    def PressureInitialization(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PressureInitializationType]:
        """
        Gets or sets the PressureInitialization.
        """
        return None

    @property
    def ContactStatus(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PreStressContactStatus]:
        """
        Gets or sets the ContactStatus.
        """
        return None

    @property
    def LoadControl(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PreStressLoadControl]:
        """
        Gets or sets the LoadControl.
        """
        return None

    @property
    def Mode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PreStressMode]:
        """
        Gets or sets the Mode.
        """
        return None

    @property
    def NewtonRaphsonOption(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.NewtonRaphsonType]:
        """
        Gets the NewtonRaphsonOption.
        """
        return None

    @property
    def PreStressDefineBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PreStressStateType]:
        """
        Gets or sets the PreStressDefineBy.
        """
        return None

    @property
    def InputType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.InitialConditionsType]:
        """
        Gets or sets the InputType.
        """
        return None

    @property
    def DefineBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.LoadDefineBy]:
        """
        Gets or sets the DefineBy.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def PreStressEnvironmentHarmonicMSUPModal(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Analysis]:
        """
        Gets the PreStressEnvironmentHarmonicMSUPModal.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def PreStressEnvironmentTransientMSUPModal(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Analysis]:
        """
        Gets the PreStressEnvironmentTransientMSUPModal.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new child CommandSnippet.
        """
        pass

    def TransferLoadsFromLinkedModalSystem(self) -> None:
        """
        
            Creates Load Applications automatically to transfer and scale base excitations and load vectors generated for the loads under linked Modal analysis.
            
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Part(object):
    """
    Defines a Part.
    """

    @property
    def MaterialName(self) -> typing.Optional[str]:
        """
        Gets or sets the MaterialName.
        """
        return None

    @property
    def Hidden(self) -> typing.Optional[bool]:
        """
        Hide or show the body.
        """
        return None

    @property
    def ConfigurationId(self) -> typing.Optional[int]:
        """
        Gets the related Result Mesh's ConfigurationId.
        """
        return None

    @property
    def ResultMeshId(self) -> typing.Optional[int]:
        """
        Gets the related Result Mesh's ObjectId.
        """
        return None

    @property
    def Assignment(self) -> typing.Optional[str]:
        """
        Gets or sets the Assignment.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSBodyGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Elements(self) -> typing.Optional[int]:
        """
        Gets the Elements.
        """
        return None

    @property
    def Material(self) -> typing.Optional[str]:
        """
        Gets or sets the Material.
        """
        return None

    @property
    def Average(self) -> typing.Optional[float]:
        """
        Gets the Average.
        """
        return None

    @property
    def Maximum(self) -> typing.Optional[float]:
        """
        Gets the Maximum.
        """
        return None

    @property
    def Minimum(self) -> typing.Optional[float]:
        """
        Gets the Minimum.
        """
        return None

    @property
    def StandardDeviation(self) -> typing.Optional[float]:
        """
        Gets the StandardDeviation.
        """
        return None

    @property
    def Nodes(self) -> typing.Optional[int]:
        """
        Gets the Nodes.
        """
        return None

    @property
    def ApproximateSurfaceArea(self) -> typing.Optional[float]:
        """
        Gets the approximate surface area of the part. This is only applicable to parts made up entirely of surface bodies.
        """
        return None

    @property
    def LengthX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the LengthX.
        """
        return None

    @property
    def LengthY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the LengthY.
        """
        return None

    @property
    def LengthZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the LengthZ.
        """
        return None

    @property
    def Mass(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Mass.
        """
        return None

    @property
    def CentroidX(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the CentroidX.
        """
        return None

    @property
    def CentroidY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the CentroidY.
        """
        return None

    @property
    def CentroidZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the CentroidZ.
        """
        return None

    @property
    def MomentOfInertiaIp1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the MomentOfInertiaIp1.
        """
        return None

    @property
    def MomentOfInertiaIp2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the MomentOfInertiaIp2.
        """
        return None

    @property
    def MomentOfInertiaIp3(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the MomentOfInertiaIp3.
        """
        return None

    @property
    def Volume(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Volume.
        """
        return None

    @property
    def MeshMetric(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MeshMetricType]:
        """
        Gets the MeshMetric.
        """
        return None

    @property
    def Visible(self) -> typing.Optional[bool]:
        """
        Gets or sets the Visible.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def CreateParameter(self, paramPath: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def RemoveParameter(self, paramPath: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass

    def GenerateMesh(self) -> None:
        """
        Run the GenerateMesh action.
        """
        pass

    def PreviewInflation(self) -> None:
        """
        Run the PreviewInflation action.
        """
        pass

    def PreviewSurfaceMesh(self) -> None:
        """
        Run the PreviewSurfaceMesh action.
        """
        pass

    def Update(self) -> None:
        """
        Run the Update action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass


class Solution(object):
    """
    Defines a Solution.
    """

    @property
    def SolutionInformation(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.SolutionInformation]:
        """
        Gets the SolutionInformation.
        """
        return None

    @property
    def CellId(self) -> typing.Optional[str]:
        """
        Gets the CellId.
        """
        return None

    @property
    def WorkingDir(self) -> typing.Optional[str]:
        """
        Gets the WorkingDir.
        """
        return None

    @property
    def Status(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SolutionStatusType]:
        """
        Gets the Status.
        """
        return None

    @property
    def NumGPURequested(self) -> typing.Optional[int]:
        """
        NumGPURequested property.
        """
        return None

    @property
    def MemoryAvailable(self) -> typing.Optional[float]:
        """
        MemoryAvailable property.
        """
        return None

    @property
    def EigenSolverType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.EigenSolverType]:
        """
        EigenSolverType property.
        """
        return None

    @property
    def NumCoresAvailable(self) -> typing.Optional[int]:
        """
        NumCoresAvailable property.
        """
        return None

    @property
    def NumProcRequested(self) -> typing.Optional[int]:
        """
        NumProcRequested property.
        """
        return None

    @property
    def IsDistributedSolution(self) -> typing.Optional[bool]:
        """
        IsDistributedSolution property.
        """
        return None

    @property
    def IsHybridParallelSolution(self) -> typing.Optional[bool]:
        """
        IsHybridParallelSolution property.
        """
        return None

    @property
    def IsAutoHybridParallel(self) -> typing.Optional[bool]:
        """
        Returns if Hybrid Parallel was turned on by APDL or not (i.e. Automatic Hybrid Parallel)
        """
        return None

    @property
    def ThreadsPerProcessRequested(self) -> typing.Optional[int]:
        """
        ThreadsPerProcessRequested property.
        """
        return None

    @property
    def NumberOfProcessesRequested(self) -> typing.Optional[int]:
        """
        NumberOfProcessesRequested property.
        """
        return None

    @property
    def IsGPUAccelerationRequested(self) -> typing.Optional[bool]:
        """
        IsGPUAccelerationRequested property.
        """
        return None

    @property
    def IsDataExtractionComplete(self) -> typing.Optional[bool]:
        """
        IsDataExtractionComplete property.
        """
        return None

    @property
    def IsEigenSolver(self) -> typing.Optional[bool]:
        """
        IsEigenSolver property.
        """
        return None

    @property
    def IsUnsymmetricMatrixSolve(self) -> typing.Optional[bool]:
        """
        IsUnsymmetricMatrixSolve property.
        """
        return None

    @property
    def GPUType(self) -> typing.Optional[Ansys.Common.Interop.DSObjectTypes.DSGPUType]:
        """
        GPUType property.
        """
        return None

    @property
    def MPIType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MPIType]:
        """
        MPIType property.
        """
        return None

    @property
    def EquationSolverType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.EquationSolverType]:
        """
        EquationSolverType property.
        """
        return None

    @property
    def NumMachinesRequested(self) -> typing.Optional[int]:
        """
        NumMachinesRequested property.
        """
        return None

    @property
    def MainThreadCPUTime(self) -> typing.Optional[float]:
        """
        MainThreadCPUTime property.
        """
        return None

    @property
    def AllThreadsCPUTime(self) -> typing.Optional[float]:
        """
        AllThreadsCPUTime property.
        """
        return None

    @property
    def NumVirtualCoresAvailable(self) -> typing.Optional[int]:
        """
        NumVirtualCoresAvailable property.
        """
        return None

    @property
    def ElapsedTime(self) -> typing.Optional[float]:
        """
        ElapsedTime property.
        """
        return None

    @property
    def TotalMemoryUsed(self) -> typing.Optional[float]:
        """
        TotalMemoryUsed property.
        """
        return None

    @property
    def ElementLoadBalRatio(self) -> typing.Optional[float]:
        """
        ElementLoadBalRatio property.
        """
        return None

    @property
    def ProcessorModel(self) -> typing.Optional[str]:
        """
        ProcessorModel property.
        """
        return None

    @property
    def OperatingSystem(self) -> typing.Optional[str]:
        """
        OperatingSystem property.
        """
        return None

    @property
    def SolverType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SolverType]:
        """
        SolverType property.
        """
        return None

    @property
    def License(self) -> typing.Optional[str]:
        """
        License property.
        """
        return None

    @property
    def Nodes(self) -> typing.Optional[int]:
        """
        Nodes property.
        """
        return None

    @property
    def Elements(self) -> typing.Optional[int]:
        """
        Elements property.
        """
        return None

    @property
    def GpuAcceleration(self) -> typing.Optional[str]:
        """
        GpuAcceleration property.
        """
        return None

    @property
    def LicenseCoresAvailable(self) -> typing.Optional[int]:
        """
        LicenseCoresAvailable property.
        """
        return None

    @property
    def SolutionUnitSystem(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.MechanicalUnitSystem]:
        """
        SolutionUnitSystem property.
        """
        return None

    @property
    def IOBound(self) -> typing.Optional[bool]:
        """
        IOBound property.
        """
        return None

    @property
    def IOWrite(self) -> typing.Optional[float]:
        """
        IOWrite property.
        """
        return None

    @property
    def IORead(self) -> typing.Optional[float]:
        """
        IORead property.
        """
        return None

    @property
    def MSUPHarmonicAnalysis(self) -> typing.Optional[bool]:
        """
        MSUPHarmonicAnalysis property.
        """
        return None

    @property
    def TimeToCombineDistributedFiles(self) -> typing.Optional[float]:
        """
        TimeToCombineDistributedFiles property.
        """
        return None

    @property
    def SolverData(self) -> typing.Optional[typing.Any]:
        """
        SolverData property.
        """
        return None

    @property
    def DateOfRun(self) -> typing.Optional[str]:
        """
        DateOfRun property.
        """
        return None

    @property
    def TimeOfRun(self) -> typing.Optional[str]:
        """
        TimeOfRun property.
        """
        return None

    @property
    def SolutionTrackingVectorLength(self) -> typing.Optional[int]:
        """
        SolutionTrackingVectorLength property.
        """
        return None

    @property
    def ResultTrackingVectorLength(self) -> typing.Optional[int]:
        """
        ResultTrackingVectorLength property.
        """
        return None

    @property
    def ResultFilePath(self) -> typing.Optional[str]:
        """
        
            Get the result file full path.
            
        """
        return None

    @property
    def NumberOfDOF(self) -> typing.Optional[int]:
        """
        
            Get the Number of DOF.
            
        """
        return None

    @property
    def SparseMode(self) -> typing.Optional[int]:
        """
        
            Get the Sparse Mode value.
            
        """
        return None

    @property
    def SkipSolveCommand(self) -> typing.Optional[bool]:
        """
        Gets or sets the flag to avoid issuing the solve command in the MAPDL solver.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSAnswerSetAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def CyclicSectorDisplayRangeBegin(self) -> typing.Optional[int]:
        """
        Gets or sets the CyclicSectorDisplayRangeBegin.
        """
        return None

    @property
    def NumberofSectors(self) -> typing.Optional[int]:
        """
        Gets or sets the NumberofSectors.
        """
        return None

    @property
    def ElapsedRunTime(self) -> typing.Optional[float]:
        """
        Gets or sets the ElapsedRunTime.
        """
        return None

    @property
    def MaximumRefinementLoops(self) -> typing.Optional[int]:
        """
        Gets or sets the MaximumRefinementLoops.
        """
        return None

    @property
    def MemoryUsed(self) -> typing.Optional[float]:
        """
        Gets or sets the MemoryUsed.
        """
        return None

    @property
    def RefinementDepth(self) -> typing.Optional[int]:
        """
        Gets or sets the RefinementDepth.
        """
        return None

    @property
    def ResultFileDirectory(self) -> typing.Optional[str]:
        """
        Gets the ResultFileDirectory.
        """
        return None

    @property
    def ResultFileName(self) -> typing.Optional[str]:
        """
        Gets the ResultFileName.
        """
        return None

    @property
    def ResultFileSize(self) -> typing.Optional[float]:
        """
        Gets the ResultFileSize.
        """
        return None

    @property
    def ResultFileTimestamp(self) -> typing.Optional[str]:
        """
        Gets the ResultFileTimestamp.
        """
        return None

    @property
    def ExportTopologyFile(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ExportTopologyFileOption]:
        """
        Gets or sets the ExportTopologyFile.
        """
        return None

    @property
    def MeshSource(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.MeshSourceType]:
        """
        Gets or sets the MeshSource.
        """
        return None

    @property
    def ElementSelection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ConvergenceControlType]:
        """
        Gets or sets the ElementSelection.
        """
        return None

    @property
    def ResultFileUnitSystem(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.WBUnitSystemType]:
        """
        Gets the ResultFileUnitSystem.
        """
        return None

    @property
    def CalculateBeamSectionResults(self) -> typing.Optional[bool]:
        """
        Gets or sets the CalculateBeamSectionResults.
        """
        return None

    @property
    def TopologyResult(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.DataModelObject]:
        """
        Gets or sets the TopologyResult.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Solve(self, wait: bool, config: str) -> None:
        """
        Run the Solve action.
        """
        pass

    def Solve(self, wait: bool, config: Ansys.ACT.Mechanical.Application.SolveProcessSettings.SolveConfiguration) -> None:
        """
        Run the Solve action.
        """
        pass

    def EvaluateAllResults(self) -> None:
        """
        Run the EvaluateAllResults action.
        """
        pass

    def GetResults(self) -> None:
        """
        Gets the Results from the server.
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def IsResultFileSameAsLoaded(self, filepath: str) -> bool:
        """
        Checks if the given result file is same the loaded result file
        """
        pass

    def RelinkResultFile(self, filepath: str) -> None:
        """
        Relink the result file. This action allows repairing the result file referencing without altering the generated result data.
        """
        pass

    def IsResultFileChanged(self) -> bool:
        """
        Checks if the referenced result file has been changed.
        """
        pass

    def ReloadResultFile(self) -> None:
        """
        Reload the result file. For results-only systems, this action reloads the result mesh data and resets all result scopings.
        """
        pass

    def OpenSolverFilesDirectory(self) -> None:
        """
        Run the OpenSolverFilesDirectory action.
        """
        pass

    def ReadGivenAnsysResultFile(self, resultFilePath: str, unitSystemID: Ansys.Mechanical.DataModel.Enums.UnitSystemIDType) -> None:
        """
         Run the given Ansys ReadResults action./// 
        """
        pass

    def ReadGivenAnsysResultFileByReference(self, resultFilePath: str, unitSystemID: Ansys.Mechanical.DataModel.Enums.UnitSystemIDType) -> None:
        """
         Run the given Ansys ReadResults by reference action./// 
        """
        pass

    def ReadAnsysResultFile(self) -> None:
        """
        Run the Ansys ReadResults action.
        """
        pass

    def ExtractSolutionStatistics(self) -> None:
        """
        ExtractSolutionStatistics method.
        """
        pass

    def AddContactTool(self) -> Ansys.ACT.Automation.Mechanical.PostContactTool:
        """
        Creates a new ContactTool
        """
        pass

    def AddBoltTool(self) -> Ansys.ACT.Automation.Mechanical.Results.BoltToolResults.BoltTool:
        """
        Creates a new BoltTool
        """
        pass

    def AddForceSummationProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.ForceSummationProbe:
        """
        Creates a new ForceSummationProbe
        """
        pass

    def AddTorqueProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.TorqueProbe:
        """
        Creates a new TorqueProbe
        """
        pass

    def AddResponsePSDTool(self) -> Ansys.ACT.Automation.Mechanical.ResponsePSDTool:
        """
        Creates a new ResponsePSDTool
        """
        pass

    def AddForceReactionsForContactRegions(self, contactRegionObjIds: typing.Iterable[int]) -> None:
        """
        AddForceReactionsForContactRegions method.
        """
        pass

    def AddMomentReactionsForContactRegions(self, contactRegionObjIds: typing.Iterable[int]) -> None:
        """
        AddMomentReactionsForContactRegions method.
        """
        pass

    def AddReactionsForContactRegions(self, contactRegionObjIds: typing.Iterable[int]) -> None:
        """
        AddReactionsForContactRegions method.
        """
        pass

    def ValueForSolutionTracking(self, index: int, key: str) -> str:
        """
        ValueForSolutionTracking method.
        """
        pass

    def DeleteRow(self, index: int) -> None:
        """
        DeleteRow method.
        """
        pass

    def ValueForResultTracking(self, index: int, key: str) -> str:
        """
        ValueForResultTracking method.
        """
        pass

    def FormatValue(self, value: float, unitType: int) -> str:
        """
        FormatValue method.
        """
        pass

    def AddGroupedScopedCustomResult(self, selectedPlies: typing.Iterable[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> None:
        """
        AddGroupedScopedCustomResult method.
        """
        pass

    def AddGroupedScopedACPResults(self, resultType: Ansys.Mechanical.DataModel.Enums.ResultType, selectedPlies: typing.Iterable[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> None:
        """
        AddGroupedScopedACPResults method.
        """
        pass

    def AddFatigueTool(self) -> Ansys.ACT.Automation.Mechanical.FatigueTool:
        """
        AddFatigueTool method.
        """
        pass

    def CreateResultsAtAllSets(self, resId: int) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        CreateResultsAtAllSets method.
        """
        pass

    def EvaluateAllContactTrackers(self) -> None:
        """
        EvaluateAllContactTrackers method.
        """
        pass

    def EvaluateContactTracker(self) -> None:
        """
        EvaluateContactTracker method.
        """
        pass

    def ExecutePostCommands(self) -> None:
        """
        Run Execute Post Commands for all post command objects.
        """
        pass

    def ExecutePostCommands(self, activeObjs: typing.Iterable[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> None:
        """
        ExecutePostCommands method.
        """
        pass

    def FetchRemoteResults(self) -> None:
        """
        FetchRemoteResults method.
        """
        pass

    def GenerateAdaptedMesh(self) -> None:
        """
        GenerateAdaptedMesh method.
        """
        pass

    def ExportSubstructure(self, exportFileName: str, exportFormat: Ansys.Mechanical.DataModel.MechanicalEnums.Substructure.ExportFormat, exportSettings: Ansys.ACT.Automation.Mechanical.Substructure.ExportSettings) -> None:
        """
        Export Substructure to cpa file.
        """
        pass

    def DisconnectRemoteJob(self) -> None:
        """
        DisconnectRemoteJob method.
        """
        pass

    def ReconnectRemoteJob(self) -> None:
        """
        ReconnectRemoteJob method.
        """
        pass

    def ClearRemoteStorageData(self) -> None:
        """
        ClearRemoteStorageData method.
        """
        pass

    def AddLineChart2D(self) -> Ansys.ACT.Automation.Mechanical.LineChart2D:
        """
        Creates a new LineChart2D
        """
        pass

    def AddAccelerationFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.AccelerationFrequencyResponse:
        """
        Creates a new AccelerationFrequencyResponse
        """
        pass

    def AddAccelerationPhaseResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.PhaseResponseResults.AccelerationPhaseResponse:
        """
        Creates a new AccelerationPhaseResponse
        """
        pass

    def AddAccelerationProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.AccelerationProbe:
        """
        Creates a new AccelerationProbe
        """
        pass

    def AddAccelerationWaterfallDiagram(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.AccelerationWaterfallDiagram:
        """
        Creates a new AccelerationWaterfallDiagram
        """
        pass

    def AddAccumulatedEquivalentPlasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.AccumulatedEquivalentPlasticStrain:
        """
        Creates a new AccumulatedEquivalentPlasticStrain
        """
        pass

    def AddAcousticAbsorptionCoefficient(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticAbsorptionCoefficient:
        """
        Creates a new AcousticAbsorptionCoefficient
        """
        pass

    def AddAcousticAWeightedSoundPressureLevel(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticAWeightedSoundPressureLevel:
        """
        Creates a new AcousticAWeightedSoundPressureLevel
        """
        pass

    def AddAcousticAWeightedSPLFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.AcousticAWeightedSPLFrequencyResponse:
        """
        Creates a new AcousticAWeightedSPLFrequencyResponse
        """
        pass

    def AddAcousticDiffuseSoundTransmissionLoss(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticDiffuseSoundTransmissionLoss:
        """
        Creates a new AcousticDiffuseSoundTransmissionLoss
        """
        pass

    def AddAcousticDirectionalVelocityResult(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticDirectionalVelocityResult:
        """
        Creates a new AcousticDirectionalVelocityResult
        """
        pass

    def AddAcousticFarFieldSPL(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldResult:
        """
        Creates a new AcousticFarFieldResult
        """
        pass

    def AddAcousticFarFieldAWeightedSPL(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldResult:
        """
        Creates a new AcousticFarFieldResult
        """
        pass

    def AddAcousticFarFieldMaximumPressure(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldResult:
        """
        Creates a new AcousticFarFieldResult
        """
        pass

    def AddAcousticFarFieldPhase(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldResult:
        """
        Creates a new AcousticFarFieldResult
        """
        pass

    def AddAcousticFarFieldDirectivity(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldResult:
        """
        Creates a new AcousticFarFieldResult
        """
        pass

    def AddAcousticFarFieldMaximumScatteredPressure(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldResult:
        """
        Creates a new AcousticFarFieldResult
        """
        pass

    def AddAcousticFarFieldTargetStrength(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldResult:
        """
        Creates a new AcousticFarFieldResult
        """
        pass

    def AddAcousticFarFieldSoundPowerLevel(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldResult:
        """
        Creates a new AcousticFarFieldResult
        """
        pass

    def AddAcousticFarFieldSPLMic(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldResult:
        """
        Creates a new AcousticFarFieldResult
        """
        pass

    def AddAcousticFarFieldAWeightedSPLMic(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldResult:
        """
        Creates a new AcousticFarFieldResult
        """
        pass

    def AddAcousticFarFieldMaximumPressureMic(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldResult:
        """
        Creates a new AcousticFarFieldResult
        """
        pass

    def AddAcousticFarFieldPhaseMic(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldResult:
        """
        Creates a new AcousticFarFieldResult
        """
        pass

    def AddAcousticFarFieldSoundPowerLevelWaterfallDiagram(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldSoundPowerLevelWaterfallDiagram:
        """
        Creates a new AcousticFarFieldSoundPowerLevelWaterfallDiagram
        """
        pass

    def AddAcousticFarFieldSPLMicWaterfallDiagram(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFarFieldSPLMicWaterfallDiagram:
        """
        Creates a new AcousticFarFieldSPLMicWaterfallDiagram
        """
        pass

    def AddAcousticFrequencyBandAWeightedSPL(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFrequencyBandAWeightedSPL:
        """
        Creates a new AcousticFrequencyBandAWeightedSPL
        """
        pass

    def AddAcousticFrequencyBandSPL(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticFrequencyBandSPL:
        """
        Creates a new AcousticFrequencyBandSPL
        """
        pass

    def AddAcousticKineticEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticKineticEnergy:
        """
        Creates a new AcousticKineticEnergy
        """
        pass

    def AddAcousticKineticEnergyFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.AcousticKineticEnergyFrequencyResponse:
        """
        Creates a new AcousticKineticEnergyFrequencyResponse
        """
        pass

    def AddAcousticPotentialEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticPotentialEnergy:
        """
        Creates a new AcousticPotentialEnergy
        """
        pass

    def AddAcousticPotentialEnergyFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.AcousticPotentialEnergyFrequencyResponse:
        """
        Creates a new AcousticPotentialEnergyFrequencyResponse
        """
        pass

    def AddAcousticPressureFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.AcousticPressureFrequencyResponse:
        """
        Creates a new AcousticPressureFrequencyResponse
        """
        pass

    def AddAcousticPressureResult(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticPressureResult:
        """
        Creates a new AcousticPressureResult
        """
        pass

    def AddAcousticReturnLoss(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticReturnLoss:
        """
        Creates a new AcousticReturnLoss
        """
        pass

    def AddAcousticSoundPressureLevel(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticSoundPressureLevel:
        """
        Creates a new AcousticSoundPressureLevel
        """
        pass

    def AddAcousticSPLFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.AcousticSPLFrequencyResponse:
        """
        Creates a new AcousticSPLFrequencyResponse
        """
        pass

    def AddAcousticTotalVelocityResult(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticTotalVelocityResult:
        """
        Creates a new AcousticTotalVelocityResult
        """
        pass

    def AddAcousticTransmissionLoss(self) -> Ansys.ACT.Automation.Mechanical.Results.AcousticResults.AcousticTransmissionLoss:
        """
        Creates a new AcousticTransmissionLoss
        """
        pass

    def AddAcousticVelocityFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.AcousticVelocityFrequencyResponse:
        """
        Creates a new AcousticVelocityFrequencyResponse
        """
        pass

    def AddAngularAccelerationProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.AngularAccelerationProbe:
        """
        Creates a new AngularAccelerationProbe
        """
        pass

    def AddAngularVelocityProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.AngularVelocityProbe:
        """
        Creates a new AngularVelocityProbe
        """
        pass

    def AddBeamProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.BeamProbe:
        """
        Creates a new BeamProbe
        """
        pass

    def AddBeamTool(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamToolResults.BeamTool:
        """
        Creates a new BeamTool
        """
        pass

    def AddBearingProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.BearingProbe:
        """
        Creates a new BearingProbe
        """
        pass

    def AddBendingStressEquivalent(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.BendingStressEquivalent:
        """
        Creates a new BendingStressEquivalent
        """
        pass

    def AddBendingStressIntensity(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.BendingStressIntensity:
        """
        Creates a new BendingStressIntensity
        """
        pass

    def AddBoltPretensionProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.BoltPretensionProbe:
        """
        Creates a new BoltPretensionProbe
        """
        pass

    def AddCampbellDiagram(self) -> Ansys.ACT.Automation.Mechanical.Results.ResultTrackers.CampbellDiagram:
        """
        Creates a new CampbellDiagram
        """
        pass

    def AddChargeReactionFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.ChargeReactionFrequencyResponse:
        """
        Creates a new ChargeReactionFrequencyResponse
        """
        pass

    def AddChargeReactionProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.ChargeReactionProbe:
        """
        Creates a new ChargeReactionProbe
        """
        pass

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def AddCompositeCriterion(self) -> Ansys.ACT.Automation.Mechanical.CompositeCriterion:
        """
        Creates a new CompositeCriterion
        """
        pass

    def AddCompositeFailureTool(self) -> Ansys.ACT.Automation.Mechanical.Results.CompositeFailureResults.CompositeFailureTool:
        """
        Creates a new CompositeFailureTool
        """
        pass

    def AddCompositeSamplingPointTool(self) -> Ansys.ACT.Automation.Mechanical.Results.CompositeFailureResults.CompositeSamplingPointTool:
        """
        Creates a new CompositeSamplingPointTool
        """
        pass

    def AddContactDistanceProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.ContactDistanceProbe:
        """
        Creates a new ContactDistanceProbe
        """
        pass

    def AddCurrentDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectromagneticResults.CurrentDensity:
        """
        Creates a new CurrentDensity
        """
        pass

    def AddCurrentDensityProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.CurrentDensityProbe:
        """
        Creates a new CurrentDensityProbe
        """
        pass

    def AddDamageStatus(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.DamageStatus:
        """
        Creates a new DamageStatus
        """
        pass

    def AddDeformationFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.DeformationFrequencyResponse:
        """
        Creates a new DeformationFrequencyResponse
        """
        pass

    def AddDeformationPhaseResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.PhaseResponseResults.DeformationPhaseResponse:
        """
        Creates a new DeformationPhaseResponse
        """
        pass

    def AddDeformationProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.DeformationProbe:
        """
        Creates a new DeformationProbe
        """
        pass

    def AddDirectionalAcceleration(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.DirectionalAcceleration:
        """
        Creates a new DirectionalAcceleration
        """
        pass

    def AddDirectionalAccelerationPSD(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.DirectionalAccelerationPSD:
        """
        Creates a new DirectionalAccelerationPSD
        """
        pass

    def AddDirectionalAccelerationRS(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.DirectionalAccelerationRS:
        """
        Creates a new DirectionalAccelerationRS
        """
        pass

    def AddDirectionalAxialForce(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalAxialForce:
        """
        Creates a new DirectionalAxialForce
        """
        pass

    def AddDirectionalBendingMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalBendingMoment:
        """
        Creates a new DirectionalBendingMoment
        """
        pass

    def AddDirectionalCurrentDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectricResults.DirectionalCurrentDensity:
        """
        Creates a new DirectionalCurrentDensity
        """
        pass

    def AddDirectionalDeformation(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.DirectionalDeformation:
        """
        Creates a new DirectionalDeformation
        """
        pass

    def AddDirectionalElectricFieldIntensity(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectricResults.DirectionalElectricFieldIntensity:
        """
        Creates a new DirectionalElectricFieldIntensity
        """
        pass

    def AddDirectionalElectricFluxDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectricResults.DirectionalElectricFluxDensity:
        """
        Creates a new DirectionalElectricFluxDensity
        """
        pass

    def AddDirectionalElectrostaticForce(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectricResults.DirectionalElectrostaticForce:
        """
        Creates a new DirectionalElectrostaticForce
        """
        pass

    def AddDirectionalHeatFlux(self) -> Ansys.ACT.Automation.Mechanical.Results.ThermalResults.DirectionalHeatFlux:
        """
        Creates a new DirectionalHeatFlux
        """
        pass

    def AddDirectionalMagneticFieldIntensity(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectromagneticResults.DirectionalMagneticFieldIntensity:
        """
        Creates a new DirectionalMagneticFieldIntensity
        """
        pass

    def AddDirectionalMagneticFluxDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectromagneticResults.DirectionalMagneticFluxDensity:
        """
        Creates a new DirectionalMagneticFluxDensity
        """
        pass

    def AddDirectionalShearForce(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearForce:
        """
        Creates a new DirectionalShearForce
        """
        pass

    def AddShearMomentDiagramMY(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearMomentDiagram:
        """
        Creates a new DirectionalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramMZ(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearMomentDiagram:
        """
        Creates a new DirectionalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramUY(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearMomentDiagram:
        """
        Creates a new DirectionalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramUZ(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearMomentDiagram:
        """
        Creates a new DirectionalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramVY(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearMomentDiagram:
        """
        Creates a new DirectionalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramVZ(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalShearMomentDiagram:
        """
        Creates a new DirectionalShearMomentDiagram
        """
        pass

    def AddThermalStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.DirectionalThermalStrain:
        """
        Creates a new DirectionalThermalStrain
        """
        pass

    def AddDirectionalTorsionalMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.DirectionalTorsionalMoment:
        """
        Creates a new DirectionalTorsionalMoment
        """
        pass

    def AddDirectionalVelocity(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.DirectionalVelocity:
        """
        Creates a new DirectionalVelocity
        """
        pass

    def AddDirectionalVelocityPSD(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.DirectionalVelocityPSD:
        """
        Creates a new DirectionalVelocityPSD
        """
        pass

    def AddDirectionalVelocityRS(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.DirectionalVelocityRS:
        """
        Creates a new DirectionalVelocityRS
        """
        pass

    def AddElasticStrainFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.ElasticStrainFrequencyResponse:
        """
        Creates a new ElasticStrainFrequencyResponse
        """
        pass

    def AddElasticStrainIntensity(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.ElasticStrainIntensity:
        """
        Creates a new ElasticStrainIntensity
        """
        pass

    def AddElasticStrainPhaseResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.PhaseResponseResults.ElasticStrainPhaseResponse:
        """
        Creates a new ElasticStrainPhaseResponse
        """
        pass

    def AddElectricFieldProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.ElectricFieldProbe:
        """
        Creates a new ElectricFieldProbe
        """
        pass

    def AddElectricPotential(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectromagneticResults.ElectricPotential:
        """
        Creates a new ElectricPotential
        """
        pass

    def AddElectricVoltage(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectricResults.ElectricVoltage:
        """
        Creates a new ElectricVoltage
        """
        pass

    def AddVoltageProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.ElectricVoltageProbe:
        """
        Creates a new ElectricVoltageProbe
        """
        pass

    def AddElectromechanicalCouplingCoefficient(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.ElectromechanicalCouplingCoefficient:
        """
        Creates a new ElectromechanicalCouplingCoefficient
        """
        pass

    def AddElementalEulerXYAngle(self) -> Ansys.ACT.Automation.Mechanical.Results.CoordinateSystemsResults.ElementalEulerXYAngle:
        """
        Creates a new ElementalEulerXYAngle
        """
        pass

    def AddElementalEulerXZAngle(self) -> Ansys.ACT.Automation.Mechanical.Results.CoordinateSystemsResults.ElementalEulerXZAngle:
        """
        Creates a new ElementalEulerXZAngle
        """
        pass

    def AddElementalEulerYZAngle(self) -> Ansys.ACT.Automation.Mechanical.Results.CoordinateSystemsResults.ElementalEulerYZAngle:
        """
        Creates a new ElementalEulerYZAngle
        """
        pass

    def AddElementalStrainEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.EnergyResults.ElementalStrainEnergy:
        """
        Creates a new ElementalStrainEnergy
        """
        pass

    def AddElementalTriads(self) -> Ansys.ACT.Automation.Mechanical.Results.CoordinateSystemsResults.ElementalTriads:
        """
        Creates a new ElementalTriads
        """
        pass

    def AddEmagReactionProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.EmagReactionProbe:
        """
        Creates a new EmagReactionProbe
        """
        pass

    def AddEnergyDissipatedPerUnitVolume(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.EnergyDissipatedPerUnitVolume:
        """
        Creates a new EnergyDissipatedPerUnitVolume
        """
        pass

    def AddEnergyProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.EnergyProbe:
        """
        Creates a new EnergyProbe
        """
        pass

    def AddEquivalentCreepStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.EquivalentCreepStrain:
        """
        Creates a new EquivalentCreepStrain
        """
        pass

    def AddEquivalentCreepStrainRST(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.EquivalentCreepStrainRST:
        """
        Creates a new EquivalentCreepStrainRST
        """
        pass

    def AddEquivalentElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.EquivalentElasticStrain:
        """
        Creates a new EquivalentElasticStrain
        """
        pass

    def AddEquivalentElasticStrainRST(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.EquivalentElasticStrainRST:
        """
        Creates a new EquivalentElasticStrainRST
        """
        pass

    def AddEquivalentPlasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.EquivalentPlasticStrain:
        """
        Creates a new EquivalentPlasticStrain
        """
        pass

    def AddEquivalentPlasticStrainRST(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.EquivalentPlasticStrainRST:
        """
        Creates a new EquivalentPlasticStrainRST
        """
        pass

    def AddEquivalentRadiatedPower(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.EquivalentRadiatedPower:
        """
        Creates a new EquivalentRadiatedPower
        """
        pass

    def AddEquivalentRadiatedPowerLevel(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.EquivalentRadiatedPowerLevel:
        """
        Creates a new EquivalentRadiatedPowerLevel
        """
        pass

    def AddEquivalentRadiatedPowerLevelWaterfallDiagram(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.EquivalentRadiatedPowerLevelWaterfallDiagram:
        """
        Creates a new EquivalentRadiatedPowerLevelWaterfallDiagram
        """
        pass

    def AddEquivalentRadiatedPowerWaterfallDiagram(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.EquivalentRadiatedPowerWaterfallDiagram:
        """
        Creates a new EquivalentRadiatedPowerWaterfallDiagram
        """
        pass

    def AddEquivalentStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.EquivalentStress:
        """
        Creates a new EquivalentStress
        """
        pass

    def AddEquivalentStressPSD(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.EquivalentStressPSD:
        """
        Creates a new EquivalentStressPSD
        """
        pass

    def AddEquivalentStressRS(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.EquivalentStressRS:
        """
        Creates a new EquivalentStressRS
        """
        pass

    def AddEquivalentTotalStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.EquivalentTotalStrain:
        """
        Creates a new EquivalentTotalStrain
        """
        pass

    def AddExpansionSettings(self) -> Ansys.ACT.Automation.Mechanical.ExpansionSettings:
        """
        Creates a new ExpansionSettings
        """
        pass

    def AddFiberCompressiveDamageVariable(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.FiberCompressiveDamageVariable:
        """
        Creates a new FiberCompressiveDamageVariable
        """
        pass

    def AddFiberCompressiveFailureCriterion(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.FiberCompressiveFailureCriterion:
        """
        Creates a new FiberCompressiveFailureCriterion
        """
        pass

    def AddFiberTensileDamageVariable(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.FiberTensileDamageVariable:
        """
        Creates a new FiberTensileDamageVariable
        """
        pass

    def AddFiberTensileFailureCriterion(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.FiberTensileFailureCriterion:
        """
        Creates a new FiberTensileFailureCriterion
        """
        pass

    def AddFieldIntensityProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.FieldIntensityProbe:
        """
        Creates a new FieldIntensityProbe
        """
        pass

    def AddFlexibleRotationProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.FlexibleRotationProbe:
        """
        Creates a new FlexibleRotationProbe
        """
        pass

    def AddFluidFlowRate(self) -> Ansys.ACT.Automation.Mechanical.Results.ThermalResults.FluidFlowRate:
        """
        Creates a new FluidFlowRate
        """
        pass

    def AddFluidHeatConductionRate(self) -> Ansys.ACT.Automation.Mechanical.Results.ThermalResults.FluidHeatConductionRate:
        """
        Creates a new FluidHeatConductionRate
        """
        pass

    def AddFluidHeatTransportRate(self) -> Ansys.ACT.Automation.Mechanical.Results.ThermalResults.FluidHeatTransportRate:
        """
        Creates a new FluidHeatTransportRate
        """
        pass

    def AddFluxDensityProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.FluxDensityProbe:
        """
        Creates a new FluxDensityProbe
        """
        pass

    def AddFluxLinkage(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectromagneticResults.FluxLinkage:
        """
        Creates a new FluxLinkage
        """
        pass

    def AddForceReaction(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.ForceReaction:
        """
        Creates a new ForceReaction
        """
        pass

    def AddForceReactionFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.ForceReactionFrequencyResponse:
        """
        Creates a new ForceReactionFrequencyResponse
        """
        pass

    def AddFractureTool(self) -> Ansys.ACT.Automation.Mechanical.Results.FractureToolResults.FractureTool:
        """
        Creates a new FractureTool
        """
        pass

    def AddGeneralizedPlaneStrainProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.GeneralizedPlaneStrainProbe:
        """
        Creates a new GeneralizedPlaneStrainProbe
        """
        pass

    def AddHeatFluxProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.HeatFluxProbe:
        """
        Creates a new HeatFluxProbe
        """
        pass

    def AddImpedanceFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.ImpedanceFrequencyResponse:
        """
        Creates a new ImpedanceFrequencyResponse
        """
        pass

    def AddImpedanceProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.ImpedanceProbe:
        """
        Creates a new ImpedanceProbe
        """
        pass

    def AddInductance(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectromagneticResults.Inductance:
        """
        Creates a new Inductance
        """
        pass

    def AddJointProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.JointProbe:
        """
        Creates a new JointProbe
        """
        pass

    def AddJouleHeat(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectricResults.JouleHeat:
        """
        Creates a new JouleHeat
        """
        pass

    def AddJouleHeatProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.JouleHeatProbe:
        """
        Creates a new JouleHeatProbe
        """
        pass

    def AddLatticeDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.LatticeDensity:
        """
        Creates a new LatticeDensity
        """
        pass

    def AddLatticeElementalDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.LatticeElementalDensity:
        """
        Creates a new LatticeElementalDensity
        """
        pass

    def AddLinearizedEquivalentStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedEquivalentStress:
        """
        Creates a new LinearizedEquivalentStress
        """
        pass

    def AddLinearizedMaximumPrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedMaximumPrincipalStress:
        """
        Creates a new LinearizedMaximumPrincipalStress
        """
        pass

    def AddLinearizedMaximumShearStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedMaximumShearStress:
        """
        Creates a new LinearizedMaximumShearStress
        """
        pass

    def AddLinearizedMiddlePrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedMiddlePrincipalStress:
        """
        Creates a new LinearizedMiddlePrincipalStress
        """
        pass

    def AddLinearizedMinimumPrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedMinimumPrincipalStress:
        """
        Creates a new LinearizedMinimumPrincipalStress
        """
        pass

    def AddLinearizedNormalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedNormalStress:
        """
        Creates a new LinearizedNormalStress
        """
        pass

    def AddLinearizedShearStress(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedShearStress:
        """
        Creates a new LinearizedShearStress
        """
        pass

    def AddLinearizedStressIntensity(self) -> Ansys.ACT.Automation.Mechanical.Results.LinearizedStressResults.LinearizedStressIntensity:
        """
        Creates a new LinearizedStressIntensity
        """
        pass

    def AddLinePressureResult(self) -> Ansys.ACT.Automation.Mechanical.Results.LinePressureResult:
        """
        Creates a new LinePressureResult
        """
        pass

    def AddMagneticCoenergy(self) -> Ansys.ACT.Automation.Mechanical.Results.MagneticCoenergy:
        """
        Creates a new MagneticCoenergy
        """
        pass

    def AddMagneticDirectionalForces(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectromagneticResults.MagneticDirectionalForces:
        """
        Creates a new MagneticDirectionalForces
        """
        pass

    def AddMagneticError(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectromagneticResults.MagneticError:
        """
        Creates a new MagneticError
        """
        pass

    def AddMagneticFluxProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.MagneticFluxProbe:
        """
        Creates a new MagneticFluxProbe
        """
        pass

    def AddMagneticPotential(self) -> Ansys.ACT.Automation.Mechanical.Results.MagneticPotential:
        """
        Creates a new MagneticPotential
        """
        pass

    def AddMagneticTotalForces(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectromagneticResults.MagneticTotalForces:
        """
        Creates a new MagneticTotalForces
        """
        pass

    def AddMatrixCompressiveDamageVariable(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.MatrixCompressiveDamageVariable:
        """
        Creates a new MatrixCompressiveDamageVariable
        """
        pass

    def AddMatrixCompressiveFailureCriterion(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.MatrixCompressiveFailureCriterion:
        """
        Creates a new MatrixCompressiveFailureCriterion
        """
        pass

    def AddMatrixTensileDamageVariable(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.MatrixTensileDamageVariable:
        """
        Creates a new MatrixTensileDamageVariable
        """
        pass

    def AddMatrixTensileFailureCriterion(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.MatrixTensileFailureCriterion:
        """
        Creates a new MatrixTensileFailureCriterion
        """
        pass

    def AddMaximumFailureCriteria(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.MaximumFailureCriteria:
        """
        Creates a new MaximumFailureCriteria
        """
        pass

    def AddMaximumPrincipalElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.MaximumPrincipalElasticStrain:
        """
        Creates a new MaximumPrincipalElasticStrain
        """
        pass

    def AddMaximumPrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.MaximumPrincipalStress:
        """
        Creates a new MaximumPrincipalStress
        """
        pass

    def AddMaximumPrincipalThermalStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.MaximumPrincipalThermalStrain:
        """
        Creates a new MaximumPrincipalThermalStrain
        """
        pass

    def AddMaximumShearElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.MaximumShearElasticStrain:
        """
        Creates a new MaximumShearElasticStrain
        """
        pass

    def AddMaximumShearStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.MaximumShearStress:
        """
        Creates a new MaximumShearStress
        """
        pass

    def AddMCFWaterfallDiagram(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.MCFWaterfallDiagram:
        """
        Creates a new MCFWaterfallDiagram
        """
        pass

    def AddMembraneStressEquivalent(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.MembraneStressEquivalent:
        """
        Creates a new MembraneStressEquivalent
        """
        pass

    def AddMembraneStressIntensity(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.MembraneStressIntensity:
        """
        Creates a new MembraneStressIntensity
        """
        pass

    def AddMiddlePrincipalElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.MiddlePrincipalElasticStrain:
        """
        Creates a new MiddlePrincipalElasticStrain
        """
        pass

    def AddMiddlePrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.MiddlePrincipalStress:
        """
        Creates a new MiddlePrincipalStress
        """
        pass

    def AddMiddlePrincipalThermalStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.MiddlePrincipalThermalStrain:
        """
        Creates a new MiddlePrincipalThermalStrain
        """
        pass

    def AddMinimumPrincipalElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.MinimumPrincipalElasticStrain:
        """
        Creates a new MinimumPrincipalElasticStrain
        """
        pass

    def AddMinimumPrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.MinimumPrincipalStress:
        """
        Creates a new MinimumPrincipalStress
        """
        pass

    def AddMomentReaction(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.MomentReaction:
        """
        Creates a new MomentReaction
        """
        pass

    def AddMullinsDamageVariable(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.MullinsDamageVariable:
        """
        Creates a new MullinsDamageVariable
        """
        pass

    def AddMullinsMaximumPreviousStrainEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.MullinsMaximumPreviousStrainEnergy:
        """
        Creates a new MullinsMaximumPreviousStrainEnergy
        """
        pass

    def AddNewtonRaphsonResidualCharge(self) -> Ansys.ACT.Automation.Mechanical.Results.NewtonRaphsonResidualCharge:
        """
        Creates a new NewtonRaphsonResidualCharge
        """
        pass

    def AddNewtonRaphsonResidualForce(self) -> Ansys.ACT.Automation.Mechanical.Results.NewtonRaphsonResidualForce:
        """
        Creates a new NewtonRaphsonResidualForce
        """
        pass

    def AddNewtonRaphsonResidualHeat(self) -> Ansys.ACT.Automation.Mechanical.Results.NewtonRaphsonResidualHeat:
        """
        Creates a new NewtonRaphsonResidualHeat
        """
        pass

    def AddNewtonRaphsonResidualMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.NewtonRaphsonResidualMoment:
        """
        Creates a new NewtonRaphsonResidualMoment
        """
        pass

    def AddNodalEulerXYAngle(self) -> Ansys.ACT.Automation.Mechanical.Results.CoordinateSystemsResults.NodalEulerXYAngle:
        """
        Creates a new NodalEulerXYAngle
        """
        pass

    def AddNodalEulerXZAngle(self) -> Ansys.ACT.Automation.Mechanical.Results.CoordinateSystemsResults.NodalEulerXZAngle:
        """
        Creates a new NodalEulerXZAngle
        """
        pass

    def AddNodalEulerYZAngle(self) -> Ansys.ACT.Automation.Mechanical.Results.CoordinateSystemsResults.NodalEulerYZAngle:
        """
        Creates a new NodalEulerYZAngle
        """
        pass

    def AddNodalTriads(self) -> Ansys.ACT.Automation.Mechanical.Results.CoordinateSystemsResults.NodalTriads:
        """
        Creates a new NodalTriads
        """
        pass

    def AddNormalElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.NormalElasticStrain:
        """
        Creates a new NormalElasticStrain
        """
        pass

    def AddNormalGasketPressure(self) -> Ansys.ACT.Automation.Mechanical.Results.GasketResults.NormalGasketPressure:
        """
        Creates a new NormalGasketPressure
        """
        pass

    def AddNormalGasketTotalClosure(self) -> Ansys.ACT.Automation.Mechanical.Results.GasketResults.NormalGasketTotalClosure:
        """
        Creates a new NormalGasketTotalClosure
        """
        pass

    def AddNormalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.NormalStress:
        """
        Creates a new NormalStress
        """
        pass

    def AddPosition(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.Position:
        """
        Creates a new Position
        """
        pass

    def AddPrimaryCriterion(self) -> Ansys.ACT.Automation.Mechanical.PrimaryCriterion:
        """
        Creates a new PrimaryCriterion
        """
        pass

    def AddPythonCodeEventBased(self) -> Ansys.ACT.Automation.Mechanical.PythonCodeEventBased:
        """
        Creates a new PythonCodeEventBased
        """
        pass

    def AddPythonResult(self) -> Ansys.ACT.Automation.Mechanical.Results.ScriptableResults.PythonResult:
        """
        Creates a new PythonResult
        """
        pass

    def AddQualityFactor(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.QualityFactor:
        """
        Creates a new QualityFactor
        """
        pass

    def AddRadiationProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.RadiationProbe:
        """
        Creates a new RadiationProbe
        """
        pass

    def AddReactionProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.ReactionProbe:
        """
        Creates a new ReactionProbe
        """
        pass

    def AddResponsePSD(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.ResponsePSD:
        """
        Creates a new ResponsePSD
        """
        pass

    def AddResultMesh(self) -> Ansys.ACT.Automation.Mechanical.ResultMesh:
        """
        Creates a new ResultMesh
        """
        pass

    def AddRotationProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.RotationProbe:
        """
        Creates a new RotationProbe
        """
        pass

    def AddShapeFinder(self) -> Ansys.ACT.Automation.Mechanical.Results.ShapeFinder:
        """
        Creates a new ShapeFinder
        """
        pass

    def AddShapeFinderElemental(self) -> Ansys.ACT.Automation.Mechanical.Results.ShapeFinderElemental:
        """
        Creates a new ShapeFinderElemental
        """
        pass

    def AddShearDamageVariable(self) -> Ansys.ACT.Automation.Mechanical.Results.DamageResults.ShearDamageVariable:
        """
        Creates a new ShearDamageVariable
        """
        pass

    def AddShearElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.ShearElasticStrain:
        """
        Creates a new ShearElasticStrain
        """
        pass

    def AddShearGasketPressure(self) -> Ansys.ACT.Automation.Mechanical.Results.GasketResults.ShearGasketPressure:
        """
        Creates a new ShearGasketPressure
        """
        pass

    def AddShearGasketTotalClosure(self) -> Ansys.ACT.Automation.Mechanical.Results.GasketResults.ShearGasketTotalClosure:
        """
        Creates a new ShearGasketTotalClosure
        """
        pass

    def AddShearStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.ShearStress:
        """
        Creates a new ShearStress
        """
        pass

    def AddShellBendingStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.ShellBendingStress:
        """
        Creates a new ShellBendingStress
        """
        pass

    def AddShellBottomPeakStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.ShellBottomPeakStress:
        """
        Creates a new ShellBottomPeakStress
        """
        pass

    def AddShellMembraneStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.ShellMembraneStress:
        """
        Creates a new ShellMembraneStress
        """
        pass

    def AddShellTopPeakStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.ShellTopPeakStress:
        """
        Creates a new ShellTopPeakStress
        """
        pass

    def AddSpringProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.SpringProbe:
        """
        Creates a new SpringProbe
        """
        pass

    def AddStabilizationEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.EnergyResults.StabilizationEnergy:
        """
        Creates a new StabilizationEnergy
        """
        pass

    def AddStrainProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.StrainProbe:
        """
        Creates a new StrainProbe
        """
        pass

    def AddStressFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.StressFrequencyResponse:
        """
        Creates a new StressFrequencyResponse
        """
        pass

    def AddStressIntensity(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.StressIntensity:
        """
        Creates a new StressIntensity
        """
        pass

    def AddStressPhaseResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.PhaseResponseResults.StressPhaseResponse:
        """
        Creates a new StressPhaseResponse
        """
        pass

    def AddStressProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.StressProbe:
        """
        Creates a new StressProbe
        """
        pass

    def AddStressTool(self) -> Ansys.ACT.Automation.Mechanical.Results.StressToolResults.StressTool:
        """
        Creates a new StressTool
        """
        pass

    def AddStructuralError(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.StructuralError:
        """
        Creates a new StructuralError
        """
        pass

    def AddStructuralStrainEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.EnergyResults.StructuralStrainEnergy:
        """
        Creates a new StructuralStrainEnergy
        """
        pass

    def AddTemperatureProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.TemperatureProbe:
        """
        Creates a new TemperatureProbe
        """
        pass

    def AddTemperature(self) -> Ansys.ACT.Automation.Mechanical.Results.ThermalResults.TemperatureResult:
        """
        Creates a new TemperatureResult
        """
        pass

    def AddThermalError(self) -> Ansys.ACT.Automation.Mechanical.Results.ThermalResults.ThermalError:
        """
        Creates a new ThermalError
        """
        pass

    def AddThermalStrainEnergy(self) -> Ansys.ACT.Automation.Mechanical.Results.EnergyResults.ThermalStrainEnergy:
        """
        Creates a new ThermalStrainEnergy
        """
        pass

    def AddTopologyDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.TopologyDensity:
        """
        Creates a new TopologyDensity
        """
        pass

    def AddTopologyElementalDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.TopologyElementalDensity:
        """
        Creates a new TopologyElementalDensity
        """
        pass

    def AddTopologyMultiDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.TopologyMultiDensity:
        """
        Creates a new TopologyMultiDensity
        """
        pass

    def AddTotalAcceleration(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.TotalAcceleration:
        """
        Creates a new TotalAcceleration
        """
        pass

    def AddTotalAxialForce(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalAxialForce:
        """
        Creates a new TotalAxialForce
        """
        pass

    def AddTotalBendingMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalBendingMoment:
        """
        Creates a new TotalBendingMoment
        """
        pass

    def AddTotalCurrentDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectricResults.TotalCurrentDensity:
        """
        Creates a new TotalCurrentDensity
        """
        pass

    def AddTotalDeformation(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.TotalDeformation:
        """
        Creates a new TotalDeformation
        """
        pass

    def AddTotalElectricFieldIntensity(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectricResults.TotalElectricFieldIntensity:
        """
        Creates a new TotalElectricFieldIntensity
        """
        pass

    def AddTotalElectricFluxDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectricResults.TotalElectricFluxDensity:
        """
        Creates a new TotalElectricFluxDensity
        """
        pass

    def AddTotalElectrostaticForce(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectricResults.TotalElectrostaticForce:
        """
        Creates a new TotalElectrostaticForce
        """
        pass

    def AddTotalHeatFlux(self) -> Ansys.ACT.Automation.Mechanical.Results.ThermalResults.TotalHeatFlux:
        """
        Creates a new TotalHeatFlux
        """
        pass

    def AddTotalMagneticFieldIntensity(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectromagneticResults.TotalMagneticFieldIntensity:
        """
        Creates a new TotalMagneticFieldIntensity
        """
        pass

    def AddTotalMagneticFluxDensity(self) -> Ansys.ACT.Automation.Mechanical.Results.ElectromagneticResults.TotalMagneticFluxDensity:
        """
        Creates a new TotalMagneticFluxDensity
        """
        pass

    def AddTotalShearForce(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalShearForce:
        """
        Creates a new TotalShearForce
        """
        pass

    def AddShearMomentDiagramMSUM(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalShearMomentDiagram:
        """
        Creates a new TotalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramUSUM(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalShearMomentDiagram:
        """
        Creates a new TotalShearMomentDiagram
        """
        pass

    def AddShearMomentDiagramVSUM(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalShearMomentDiagram:
        """
        Creates a new TotalShearMomentDiagram
        """
        pass

    def AddTotalTorsionalMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.TotalTorsionalMoment:
        """
        Creates a new TotalTorsionalMoment
        """
        pass

    def AddTotalVelocity(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.TotalVelocity:
        """
        Creates a new TotalVelocity
        """
        pass

    def AddUserDefinedResult(self) -> Ansys.ACT.Automation.Mechanical.Results.UserDefinedResult:
        """
        Creates a new UserDefinedResult
        """
        pass

    def AddVariableGraph(self) -> Ansys.ACT.Automation.Mechanical.Results.VariableGraph:
        """
        Creates a new VariableGraph
        """
        pass

    def AddVectorAxialForce(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.VectorAxialForce:
        """
        Creates a new VectorAxialForce
        """
        pass

    def AddVectorBendingMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.VectorBendingMoment:
        """
        Creates a new VectorBendingMoment
        """
        pass

    def AddVectorDeformation(self) -> Ansys.ACT.Automation.Mechanical.Results.DeformationResults.VectorDeformation:
        """
        Creates a new VectorDeformation
        """
        pass

    def AddVectorHeatFlux(self) -> Ansys.ACT.Automation.Mechanical.Results.ThermalResults.VectorHeatFlux:
        """
        Creates a new VectorHeatFlux
        """
        pass

    def AddVectorPrincipalElasticStrain(self) -> Ansys.ACT.Automation.Mechanical.Results.StrainResults.VectorPrincipalElasticStrain:
        """
        Creates a new VectorPrincipalElasticStrain
        """
        pass

    def AddVectorPrincipalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.StressResults.VectorPrincipalStress:
        """
        Creates a new VectorPrincipalStress
        """
        pass

    def AddVectorShearForce(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.VectorShearForce:
        """
        Creates a new VectorShearForce
        """
        pass

    def AddVectorTorsionalMoment(self) -> Ansys.ACT.Automation.Mechanical.Results.BeamResults.VectorTorsionalMoment:
        """
        Creates a new VectorTorsionalMoment
        """
        pass

    def AddVelocityFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.VelocityFrequencyResponse:
        """
        Creates a new VelocityFrequencyResponse
        """
        pass

    def AddVelocityPhaseResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.PhaseResponseResults.VelocityPhaseResponse:
        """
        Creates a new VelocityPhaseResponse
        """
        pass

    def AddVelocityProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.VelocityProbe:
        """
        Creates a new VelocityProbe
        """
        pass

    def AddVelocityWaterfallDiagram(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.VelocityWaterfallDiagram:
        """
        Creates a new VelocityWaterfallDiagram
        """
        pass

    def AddVoltageFrequencyResponse(self) -> Ansys.ACT.Automation.Mechanical.Results.FrequencyResponseResults.VoltageFrequencyResponse:
        """
        Creates a new VoltageFrequencyResponse
        """
        pass

    def AddVolume(self) -> Ansys.ACT.Automation.Mechanical.Results.Volume:
        """
        Creates a new Volume
        """
        pass

    def AddVolumeProbe(self) -> Ansys.ACT.Automation.Mechanical.Results.ProbeResults.VolumeProbe:
        """
        Creates a new VolumeProbe
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Project(object):
    """
    Defines a Project.
    """

    @property
    def Models(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Model]]:
        """
        Gets the Model.
        """
        return None

    @property
    def Model(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Model]:
        """
        Gets the Model.
        """
        return None

    @property
    def CreationDate(self) -> typing.Optional[str]:
        """
        Gets the CreationDate.
        """
        return None

    @property
    def CreationTime(self) -> typing.Optional[str]:
        """
        Gets the CreationTime.
        """
        return None

    @property
    def UnitSystem(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.UserUnitSystemType]:
        """
        Change the Unit System.
        """
        return None

    @property
    def ProjectDirectory(self) -> typing.Optional[str]:
        """
        Gets the Project Directory
        """
        return None

    @property
    def UserFiles(self) -> typing.Optional[str]:
        """
        Gets the path of the user files folder of current project.
        """
        return None

    @property
    def FilePath(self) -> typing.Optional[str]:
        """
        Gets the Mechanical Project file path of current Mechanical session.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSProjectAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Author(self) -> typing.Optional[str]:
        """
        Gets or sets the Author.
        """
        return None

    @property
    def FirstSaved(self) -> typing.Optional[str]:
        """
        Gets the FirstSaved.
        """
        return None

    @property
    def ImportedSource(self) -> typing.Optional[str]:
        """
        Gets the ImportedSource.
        """
        return None

    @property
    def ImportedVersion(self) -> typing.Optional[str]:
        """
        Gets the ImportedVersion.
        """
        return None

    @property
    def LastSaved(self) -> typing.Optional[str]:
        """
        Gets the LastSaved.
        """
        return None

    @property
    def PreparedFor(self) -> typing.Optional[str]:
        """
        Gets or sets the PreparedFor.
        """
        return None

    @property
    def ProductVersion(self) -> typing.Optional[str]:
        """
        Gets the ProductVersion.
        """
        return None

    @property
    def Subject(self) -> typing.Optional[str]:
        """
        Gets or sets the Subject.
        """
        return None

    @property
    def SaveProjectAfterSolution(self) -> typing.Optional[bool]:
        """
        Gets or sets the SaveProjectAfterSolution.
        """
        return None

    @property
    def SaveProjectBeforeSolution(self) -> typing.Optional[bool]:
        """
        Gets or sets the SaveProjectBeforeSolution.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def SpecifyMetricTemperatureInKelvin(self) -> None:
        """
        Specify the use of Kelvin thermal units for metric unit systems.
        """
        pass

    def SpecifyMetricTemperatureInCelsius(self) -> None:
        """
        Specify the use of Celsius thermal units for metric unit systems.
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def Open(self, filePath: str) -> None:
        """
        For Mechanical opened independently, without Workbench. Open an existing Mechanical project.
        """
        pass

    def Save(self) -> None:
        """
        For Mechanical opened independently, without Workbench. Save current Mechanical project.
        """
        pass

    def SaveAs(self, filePath: str, overwrite: bool) -> None:
        """
        For Mechanical opened independently, without Workbench. Save current Mechanical project to given filePath.
        """
        pass

    def New(self) -> None:
        """
        For Mechanical opened independently, without Workbench. Start a new Mechanical project.
        """
        pass

    def Archive(self, archivePath: str, overwrite: bool, settings: Ansys.ACT.Automation.Mechanical.ArchiveSettings) -> None:
        """
        For Mechanical opened independently, without Workbench. Archive a Mechanical project.
        """
        pass

    def Unarchive(self, archivePath: str, projectPath: str, overwrite: bool) -> str:
        """
        
            For Mechanical opened independently, without Workbench. Unarchive a Mechanical project and open it.
            If projectPath is provided, the project will be unarchived to this given projectPath.
            If projectPath is not provided or is null or empty, the project will be unarchived to a temporary folder.
            Returns a path to the unarchived project database file.
            
        """
        pass

    def CombineTextFiles(self, PrimaryFileName: str, SecondaryFileName: str) -> None:
        """
        
            Combines two text(.txt / .dmig / .inp / .dat) files. The secondary file will be appened to the primary file
            
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class RemotePoint(object):
    """
    Defines a RemotePoint.
    """

    @property
    def PilotNodeAPDLName(self) -> typing.Optional[str]:
        """
        Gets or sets the PilotNodeAPDLName.
        """
        return None

    @property
    def OutlineSelection(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.RemotePoint]]:
        """
        
            Gets or sets the OutlineSelection.
            
        """
        return None

    @property
    def GloballyAvailable(self) -> typing.Optional[bool]:
        """
        Remote point is globally available
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSRemotePointAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def BeamCoincidentLengthFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the Coincident Length Factor that scales the stiffness of the connection between the beam elements and the remote point. This property is applicable when Behavior is set to “Beam”. Default: 1.
        """
        return None

    @property
    def Material(self) -> typing.Optional[str]:
        """
        Gets or sets the Material.
        """
        return None

    @property
    def Radius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Radius.
        """
        return None

    @property
    def XCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the XCoordinate.
        """
        return None

    @property
    def YCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the YCoordinate.
        """
        return None

    @property
    def ZCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ZCoordinate.
        """
        return None

    @property
    def PinballRegion(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the PinballRegion.
        """
        return None

    @property
    def Behavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.LoadBehavior]:
        """
        Gets or sets the Behavior.
        """
        return None

    @property
    def XComponent(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ActiveOrInactive]:
        """
        Gets or sets the XComponent.
        """
        return None

    @property
    def YComponent(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ActiveOrInactive]:
        """
        Gets or sets the YComponent.
        """
        return None

    @property
    def ZComponent(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ActiveOrInactive]:
        """
        Gets or sets the ZComponent.
        """
        return None

    @property
    def DOFSelection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.RemotePointDOFSelectionType]:
        """
        Gets or sets the DOFSelection.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def PilotNodeScopingType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PilotNodeScopingType]:
        """
        Gets or sets the PilotNodeScopingType.
        """
        return None

    @property
    def Formulation(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.RemotePointFormulation]:
        """
        Gets or sets the Formulation.
        """
        return None

    @property
    def RotationX(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ActiveOrInactive]:
        """
        Gets or sets the RotationX.
        """
        return None

    @property
    def RotationY(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ActiveOrInactive]:
        """
        Gets or sets the RotationY.
        """
        return None

    @property
    def RotationZ(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ActiveOrInactive]:
        """
        Gets or sets the RotationZ.
        """
        return None

    @property
    def RelaxationMethod(self) -> typing.Optional[bool]:
        """
        Gets or sets the RelaxationMethod.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Point(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.ConstructionPoint]:
        """
        Gets or sets the Point.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GetMeshRegion(self) -> Ansys.ACT.Interfaces.Mesh.IMeshRegion:
        """
        
            Returns the mesh region associated to the remote point.
            
        """
        pass

    def PromoteToNamedSelection(self) -> typing.Iterable[Ansys.ACT.Automation.Mechanical.NamedSelection]:
        """
        Run the PromoteToNamedSelection action.
        """
        pass

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ContactMatchGroup(object):
    """
    Defines a ContactMatchGroup.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSConnectionGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ConnectionType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutoDetectionType]:
        """
        Gets or sets the ConnectionType.
        """
        return None

    @property
    def ActiveConnections(self) -> typing.Optional[int]:
        """
        Gets the ActiveConnections.
        """
        return None

    @property
    def Connections(self) -> typing.Optional[int]:
        """
        Gets the Connections.
        """
        return None

    @property
    def EdgeOverlapTolerance(self) -> typing.Optional[int]:
        """
        Gets or sets the EdgeOverlapTolerance.
        """
        return None

    @property
    def FaceOverlapTolerance(self) -> typing.Optional[int]:
        """
        Gets or sets the FaceOverlapTolerance.
        """
        return None

    @property
    def MinimumDistancePercentage(self) -> typing.Optional[int]:
        """
        Gets or sets the MinimumDistancePercentage.
        """
        return None

    @property
    def ThicknessScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ThicknessScaleFactor.
        """
        return None

    @property
    def ToleranceSlider(self) -> typing.Optional[int]:
        """
        Gets or sets the ToleranceSlider.
        """
        return None

    @property
    def FaceFaceDetectionAngleTolerence(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FaceFaceDetectionAngleTolerence.
        """
        return None

    @property
    def FaceAngleTolerance(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FaceAngleTolerance.
        """
        return None

    @property
    def MinimumDistanceValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the MinimumDistanceValue.
        """
        return None

    @property
    def ToleranceValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ToleranceValue.
        """
        return None

    @property
    def CylindricalFaces(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CylindricalFacesOption]:
        """
        Gets or sets the CylindricalFaces.
        """
        return None

    @property
    def Priority(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactFaceEdgePriority]:
        """
        Gets or sets the Priority.
        """
        return None

    @property
    def GroupBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactGroupingType]:
        """
        Gets or sets the GroupBy.
        """
        return None

    @property
    def SearchAcross(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactSearchingType]:
        """
        Gets or sets the SearchAcross.
        """
        return None

    @property
    def ToleranceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactToleranceType]:
        """
        Gets or sets the ToleranceType.
        """
        return None

    @property
    def EdgeEdge(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactEdgeEdgeOption]:
        """
        Gets or sets the EdgeEdge.
        """
        return None

    @property
    def FaceEdge(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactFaceEdgeOption]:
        """
        Gets or sets the FaceEdge.
        """
        return None

    @property
    def AutomaticFixedJoints(self) -> typing.Optional[bool]:
        """
        Gets or sets the AutomaticFixedJoints.
        """
        return None

    @property
    def RevoluteJoints(self) -> typing.Optional[bool]:
        """
        Gets or sets the RevoluteJoints.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def FaceFace(self) -> typing.Optional[bool]:
        """
        Gets or sets the FaceFace.
        """
        return None

    @property
    def UseRange(self) -> typing.Optional[bool]:
        """
        Gets or sets the UseRange.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddContactRegion(self) -> Ansys.ACT.Automation.Mechanical.Connections.ContactRegion:
        """
        Creates a new child ContactRegion.
        """
        pass

    def AddJoint(self) -> Ansys.ACT.Automation.Mechanical.Connections.Joint:
        """
        Creates a new child Joint.
        """
        pass

    def SearchConnectionsForDuplicatePairs(self) -> None:
        """
        Run the SearchConnectionsForDuplicatePairs action.
        """
        pass

    def AddSpotWeld(self) -> Ansys.ACT.Automation.Mechanical.Connections.ContactRegion:
        """
        Creates a new child SpotWeld.
        """
        pass

    def AddInterStage(self) -> Ansys.ACT.Automation.Mechanical.Connections.ContactRegion:
        """
        Creates a new child InterStage.
        """
        pass

    def CreateAutomaticConnections(self) -> None:
        """
        Run the CreateAutomaticConnections action.
        """
        pass

    def DeleteChildren(self, verificationDialog: bool) -> None:
        """
        Run the DeleteChildren action with optional verification dialog.
        """
        pass

    def RenameBasedOnChildren(self) -> bool:
        """
        Rename the Connection group based on the children.
        """
        pass

    def SetDefaultAPDLNames(self) -> None:
        """
        Loop over all the valid contact regions and set the default APDL names.
        """
        pass

    def RepairOverlappingContactRegions(self) -> None:
        """
        Check for Overlapping Contact Regions. However, please note that this action does not result in any actual repair being performed.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class GenericPointMass(object):
    """
    Defines a GenericPointMass.
    """

    @property
    def RemotePoint(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.RemotePoint]:
        """
        
            Gets the remote point associated to the point mass.
            
        """
        return None

    @property
    def IsDistributedMass(self) -> typing.Optional[bool]:
        """
        Gets the IsDistributedMass.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Geometry.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPointMassAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PrimaryCriterion(object):
    """
    Defines a PrimaryCriterion.
    """

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.Mechanical.DataModel.Interfaces.ICoordinateSystemSelection]:
        """
        Gets or sets the Coordinate System.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoCriterionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DirectionX(self) -> typing.Optional[float]:
        """
        Gets or sets the DirectionX.
        """
        return None

    @property
    def DirectionY(self) -> typing.Optional[float]:
        """
        Gets or sets the DirectionY.
        """
        return None

    @property
    def DirectionZ(self) -> typing.Optional[float]:
        """
        Gets or sets the DirectionZ.
        """
        return None

    @property
    def DiscretizationError(self) -> typing.Optional[float]:
        """
        Gets or sets the DiscretizationError.
        """
        return None

    @property
    def Step(self) -> typing.Optional[int]:
        """
        Gets or sets the Step.
        """
        return None

    @property
    def ModeNumber(self) -> typing.Optional[int]:
        """
        Gets or sets the ModeNumber.
        """
        return None

    @property
    def MaximumFrequency(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaximumFrequency.
        """
        return None

    @property
    def MinimumFrequency(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinimumFrequency.
        """
        return None

    @property
    def Value(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Value.
        """
        return None

    @property
    def BaseResult(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.BaseResultType]:
        """
        Gets or sets the BaseResult.
        """
        return None

    @property
    def FrequencyRangeType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CriterionFrequencyRangeType]:
        """
        Gets or sets the FrequencyRangeType.
        """
        return None

    @property
    def FrequencyReduction(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FrequencyReductionType]:
        """
        Gets or sets the FrequencyReduction.
        """
        return None

    @property
    def LocationMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the LocationMethod.
        """
        return None

    @property
    def ReferenceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.VectorReductionReferenceType]:
        """
        Gets or sets the ReferenceType.
        """
        return None

    @property
    def RobustFrequenciesReduction(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.RobustFrequenciesReductionType]:
        """
        Gets or sets the RobustFrequenciesReduction.
        """
        return None

    @property
    def SpatialReduction(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SpatialReductionType]:
        """
        Gets or sets the SpatialReduction.
        """
        return None

    @property
    def SpatialReductionMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SpatialReductionMethodType]:
        """
        Gets or sets the SpatialReductionMethod.
        """
        return None

    @property
    def VectorReduction(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.VectorReductionType]:
        """
        Gets or sets the VectorReduction.
        """
        return None

    @property
    def BoundaryCondition(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.DataModelObject]:
        """
        Gets or sets the BoundaryCondition.
        """
        return None

    @property
    def RemotePoint(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.RemotePoint]:
        """
        Gets or sets the RemotePoint.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def EvaluateAllResults(self) -> None:
        """
        Run the EvaluateAllResults action.
        """
        pass

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ArbitraryCrack(object):
    """
    Defines a ArbitraryCrack.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrackAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def XScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the XScaleFactor.
        """
        return None

    @property
    def YScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the YScaleFactor.
        """
        return None

    @property
    def ZScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ZScaleFactor.
        """
        return None

    @property
    def CircumferentialDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CircumferentialDivisions.
        """
        return None

    @property
    def GrowthRate(self) -> typing.Optional[float]:
        """
        Gets or sets the GrowthRate.
        """
        return None

    @property
    def MeshContours(self) -> typing.Optional[int]:
        """
        Gets or sets the MeshContours.
        """
        return None

    @property
    def SolutionContours(self) -> typing.Optional[int]:
        """
        Gets or sets the SolutionContours.
        """
        return None

    @property
    def Contact1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Contact1Nodes named selection name.
        """
        return None

    @property
    def CrackFrontNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the CrackFrontNodes.
        """
        return None

    @property
    def BottomFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the BottomFaceNodes.
        """
        return None

    @property
    def TopFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the TopFaceNodes.
        """
        return None

    @property
    def Target1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Target1Nodes named selection name.
        """
        return None

    @property
    def FrontElementSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FrontElementSize.
        """
        return None

    @property
    def LargestContourRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LargestContourRadius.
        """
        return None

    @property
    def CrackMeshMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackMeshMethod]:
        """
        Gets the CrackMeshMethod.
        """
        return None

    @property
    def CrackShape(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackShapeType]:
        """
        Gets the CrackShape.
        """
        return None

    @property
    def CrackSourceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackSourceType]:
        """
        Gets the CrackSourceType.
        """
        return None

    @property
    def ContactPairsNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the ContactPairsNodes.
        """
        return None

    @property
    def CrackFacesNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the CrackFacesNodes.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def CrackSurfaceLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the CrackSurfaceLocation.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def CrackID(self) -> typing.Optional[int]:
        """
        Gets the CrackID.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ChannelCrossSection(object):
    """
    Defines a ChannelCrossSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Area(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Area.
        """
        return None

    @property
    def IYY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IYY.
        """
        return None

    @property
    def IZZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IZZ.
        """
        return None

    @property
    def Thick1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick1.
        """
        return None

    @property
    def Thick2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick2.
        """
        return None

    @property
    def Thick3(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick3.
        """
        return None

    @property
    def Width1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width1.
        """
        return None

    @property
    def Width2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width2.
        """
        return None

    @property
    def Width3(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width3.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CircularCrossSection(object):
    """
    Defines a CircularCrossSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Area(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Area.
        """
        return None

    @property
    def IYY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IYY.
        """
        return None

    @property
    def IZZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IZZ.
        """
        return None

    @property
    def Radius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Radius.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CircularTubeCrossSection(object):
    """
    Defines a CircularTubeCrossSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Area(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Area.
        """
        return None

    @property
    def IYY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IYY.
        """
        return None

    @property
    def IZZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IZZ.
        """
        return None

    @property
    def InnerRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the InnerRadius.
        """
        return None

    @property
    def OuterRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the OuterRadius.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ComplianceConstraint(object):
    """
    Defines a ComplianceConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ComplianceLimit(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the ComplianceLimit.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CondensedPartBase(object):
    """
    Defines a CondensedPartBase.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCondensedPartAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def NumberInterfaceEntries(self) -> typing.Optional[int]:
        """
        Gets the NumberInterfaceEntries.
        """
        return None

    @property
    def NumberMasterNodes(self) -> typing.Optional[int]:
        """
        Gets the NumberMasterNodes.
        """
        return None

    @property
    def SolutionName(self) -> typing.Optional[str]:
        """
        Gets or sets the SolutionName.
        """
        return None

    @property
    def SolverFilesDirectory(self) -> typing.Optional[str]:
        """
        Gets the SolverFilesDirectory.
        """
        return None

    @property
    def TemperatureUnits(self) -> typing.Optional[str]:
        """
        Gets the TemperatureUnits.
        """
        return None

    @property
    def ReferenceTemperature(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ReferenceTemperature.
        """
        return None

    @property
    def Physics(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CondensedPartPhysics]:
        """
        Gets the Physics.
        """
        return None

    @property
    def SolverUnitSystem(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.WBUnitSystemType]:
        """
        Gets or sets the SolverUnitSystem.
        """
        return None

    @property
    def SolutionNameMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets or sets the SolutionNameMode.
        """
        return None

    @property
    def SolverUnits(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SolverUnitsControlType]:
        """
        Gets or sets the SolverUnits.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def GeometrySelection(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the GeometrySelection.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CondensedPartInfoTool(object):
    """
    Defines a CondensedPartInfoTool.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCondensedPartInfoToolAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Text(self) -> typing.Optional[str]:
        """
        Gets the Text.
        """
        return None

    @property
    def UpdateInterval(self) -> typing.Optional[float]:
        """
        Gets or sets the UpdateInterval.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ContactDebonding(object):
    """
    Defines a ContactDebonding.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSDelaminationAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Material(self) -> typing.Optional[str]:
        """
        Gets or sets the Material.
        """
        return None

    @property
    def CriticalRate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the CriticalRate.
        """
        return None

    @property
    def InitialTimeStep(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the InitialTimeStep.
        """
        return None

    @property
    def MaximumTimeStep(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaximumTimeStep.
        """
        return None

    @property
    def MinimumTimeStep(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinimumTimeStep.
        """
        return None

    @property
    def Method(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DelaminationMethod]:
        """
        Gets or sets the Method.
        """
        return None

    @property
    def Type(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DelaminationType]:
        """
        Gets the Type.
        """
        return None

    @property
    def GenerationMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DelaminationGenerationMethod]:
        """
        Gets or sets the GenerationMethod.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def ContactRegion(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Connections.ContactRegion]:
        """
        Gets or sets the ContactRegion.
        """
        return None

    @property
    def InitialCrack(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.GenericCrack]:
        """
        Gets or sets the InitialCrack.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ContactMatch(object):
    """
    Defines a ContactMatch.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSMeshConnectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ToleranceValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ToleranceValue.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        ScopingMethod property.
        """
        return None

    @property
    def ToleranceSlider(self) -> typing.Optional[int]:
        """
        Gets or sets the ToleranceSlider.
        """
        return None

    @property
    def MasterBodies(self) -> typing.Optional[str]:
        """
        Gets the MasterBodies.
        """
        return None

    @property
    def SlaveBodies(self) -> typing.Optional[str]:
        """
        Gets the SlaveBodies.
        """
        return None

    @property
    def SnapTolerance(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the SnapTolerance.
        """
        return None

    @property
    def ScopeMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets the ScopeMode.
        """
        return None

    @property
    def SnapType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SnapType]:
        """
        Gets or sets the SnapType.
        """
        return None

    @property
    def ToleranceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactToleranceType]:
        """
        Gets or sets the ToleranceType.
        """
        return None

    @property
    def SnapToBoundary(self) -> typing.Optional[bool]:
        """
        Gets or sets the SnapToBoundary.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def MasterLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the MasterLocation.
        """
        return None

    @property
    def SlaveLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the SlaveLocation.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Generate(self) -> None:
        """
        Run the Generate action.
        """
        pass

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ContactSolutionInformation(object):
    """
    Defines a ContactSolutionInformation.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSContactInfoToolAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def UpdateInterval(self) -> typing.Optional[float]:
        """
        Gets or sets the UpdateInterval.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CornerCrack(object):
    """
    Defines a CornerCrack.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrackAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def XScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the XScaleFactor.
        """
        return None

    @property
    def YScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the YScaleFactor.
        """
        return None

    @property
    def ZScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ZScaleFactor.
        """
        return None

    @property
    def CircumferentialDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CircumferentialDivisions.
        """
        return None

    @property
    def CrackFrontDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CrackFrontDivisions.
        """
        return None

    @property
    def GrowthRate(self) -> typing.Optional[float]:
        """
        Gets or sets the GrowthRate.
        """
        return None

    @property
    def MeshContours(self) -> typing.Optional[int]:
        """
        Gets or sets the MeshContours.
        """
        return None

    @property
    def SolutionContours(self) -> typing.Optional[int]:
        """
        Gets or sets the SolutionContours.
        """
        return None

    @property
    def Contact1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Contact1Nodes.
        """
        return None

    @property
    def CrackFrontNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the CrackFrontNodes.
        """
        return None

    @property
    def BottomFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the BottomFaceNodes.
        """
        return None

    @property
    def TopFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the TopFaceNodes.
        """
        return None

    @property
    def Target1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Target1Nodes.
        """
        return None

    @property
    def FractureAffectedZoneHeight(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FractureAffectedZoneHeight.
        """
        return None

    @property
    def FrontElementSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FrontElementSize.
        """
        return None

    @property
    def LargestContourRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LargestContourRadius.
        """
        return None

    @property
    def MajorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MajorRadius.
        """
        return None

    @property
    def MinorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinorRadius.
        """
        return None

    @property
    def FractureAffectedZone(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FractureAffectedZone]:
        """
        Gets or sets the FractureAffectedZone.
        """
        return None

    @property
    def CrackMeshMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackMeshMethod]:
        """
        Gets or sets the CrackMeshMethod.
        """
        return None

    @property
    def CrackShape(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackShapeType]:
        """
        Gets the CrackShape.
        """
        return None

    @property
    def CrackSourceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackSourceType]:
        """
        Gets the CrackSourceType.
        """
        return None

    @property
    def ContactPairsNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the ContactPairsNodes.
        """
        return None

    @property
    def CrackFacesNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the CrackFacesNodes.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def CrackID(self) -> typing.Optional[int]:
        """
        Gets the CrackID.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CrackInitiation(object):
    """
    Defines a CrackInitiation.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrackAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def SolutionContours(self) -> typing.Optional[int]:
        """
        Gets or sets the SolutionContours.
        """
        return None

    @property
    def BottomFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the BottomFaceNodes.
        """
        return None

    @property
    def TopFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the TopFaceNodes.
        """
        return None

    @property
    def CenterXCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the CenterXCoordinate.
        """
        return None

    @property
    def CenterYCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the CenterYCoordinate.
        """
        return None

    @property
    def CenterZCoordinate(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the CenterZCoordinate.
        """
        return None

    @property
    def MajorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MajorRadius.
        """
        return None

    @property
    def MinorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinorRadius.
        """
        return None

    @property
    def CriterionValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the CriterionValue.
        """
        return None

    @property
    def CrackShape(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.CrackInitiation.CrackShape]:
        """
        Gets or sets the CrackShape.
        """
        return None

    @property
    def CrackOrientation(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.CrackInitiation.CrackOrientation]:
        """
        Gets or sets the CrackOrientation.
        """
        return None

    @property
    def CrackSourceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackSourceType]:
        """
        Gets the CrackSourceType.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def CrackCenter(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.CrackInitiation.CrackCenter]:
        """
        Gets or sets the CrackCenter.
        """
        return None

    @property
    def InitiationCriterion(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.CrackInitiation.InitiationCriterion]:
        """
        Gets the InitiationCriterion.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def NamedSelection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.NamedSelection]:
        """
        Gets or sets the NamedSelection.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def CrackID(self) -> typing.Optional[int]:
        """
        Gets the CrackID.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Criterion(object):
    """
    Defines a Criterion.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoCriterionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CriterionConstraint(object):
    """
    Defines a CriterionConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def InitialValue(self) -> typing.Optional[float]:
        """
        Gets the InitialValue.
        """
        return None

    @property
    def LowerBound(self) -> typing.Optional[float]:
        """
        Gets or sets the LowerBound.
        """
        return None

    @property
    def UpperBound(self) -> typing.Optional[float]:
        """
        Gets or sets the UpperBound.
        """
        return None

    @property
    def Criterion(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.Criterion]:
        """
        Gets or sets the Criterion.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CrossSection(object):
    """
    Defines a CrossSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CyclicRegion(object):
    """
    Defines a CyclicRegion.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSSymmetryGeneralAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ScopeMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets the ScopeMode.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def HighBoundaryLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the HighBoundaryLocation.
        """
        return None

    @property
    def LowBoundaryLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the LowBoundaryLocation.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def FlipHighLow(self) -> None:
        """
        Flips the High and Low Boundaries.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class CylindricalCrack(object):
    """
    Defines a CylindricalCrack.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrackAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def XScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the XScaleFactor.
        """
        return None

    @property
    def YScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the YScaleFactor.
        """
        return None

    @property
    def ZScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ZScaleFactor.
        """
        return None

    @property
    def CircumferentialDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CircumferentialDivisions.
        """
        return None

    @property
    def CrackFrontDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CrackFrontDivisions.
        """
        return None

    @property
    def GrowthRate(self) -> typing.Optional[float]:
        """
        Gets or sets the GrowthRate.
        """
        return None

    @property
    def MeshContours(self) -> typing.Optional[int]:
        """
        Gets or sets the MeshContours.
        """
        return None

    @property
    def SolutionContours(self) -> typing.Optional[int]:
        """
        Gets or sets the SolutionContours.
        """
        return None

    @property
    def Contact1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Contact1Nodes.
        """
        return None

    @property
    def CrackFrontNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the CrackFrontNodes.
        """
        return None

    @property
    def BottomFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the BottomFaceNodes.
        """
        return None

    @property
    def TopFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the TopFaceNodes.
        """
        return None

    @property
    def Target1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Target1Nodes.
        """
        return None

    @property
    def FractureAffectedZoneHeight(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FractureAffectedZoneHeight.
        """
        return None

    @property
    def FrontElementSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FrontElementSize.
        """
        return None

    @property
    def LargestContourRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LargestContourRadius.
        """
        return None

    @property
    def MajorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MajorRadius.
        """
        return None

    @property
    def MinorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinorRadius.
        """
        return None

    @property
    def Height(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Height.
        """
        return None

    @property
    def FractureAffectedZone(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FractureAffectedZone]:
        """
        Gets or sets the FractureAffectedZone.
        """
        return None

    @property
    def CrackMeshMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackMeshMethod]:
        """
        Gets or sets the CrackMeshMethod.
        """
        return None

    @property
    def CrackShape(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackShapeType]:
        """
        Gets the CrackShape.
        """
        return None

    @property
    def CrackSourceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackSourceType]:
        """
        Gets the CrackSourceType.
        """
        return None

    @property
    def ContactPairsNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the ContactPairsNodes.
        """
        return None

    @property
    def CrackFacesNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the CrackFacesNodes.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def CrackID(self) -> typing.Optional[int]:
        """
        Gets the CrackID.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class DisplacementConstraint(object):
    """
    Defines a DisplacementConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def XComponentMax(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the XComponentMax.
        """
        return None

    @property
    def YComponentMax(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the YComponentMax.
        """
        return None

    @property
    def ZComponentMax(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the ZComponentMax.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class DynamicComplianceConstraint(object):
    """
    Defines a DynamicComplianceConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ComplianceLimit(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the ComplianceLimit.
        """
        return None

    @property
    def MaximumValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaximumValue.
        """
        return None

    @property
    def MinimumValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinimumValue.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class EdgeCrack(object):
    """
    Defines a EdgeCrack.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrackAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def XScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the XScaleFactor.
        """
        return None

    @property
    def YScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the YScaleFactor.
        """
        return None

    @property
    def ZScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ZScaleFactor.
        """
        return None

    @property
    def CircumferentialDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CircumferentialDivisions.
        """
        return None

    @property
    def CrackFrontDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CrackFrontDivisions.
        """
        return None

    @property
    def GrowthRate(self) -> typing.Optional[float]:
        """
        Gets or sets the GrowthRate.
        """
        return None

    @property
    def MeshContours(self) -> typing.Optional[int]:
        """
        Gets or sets the MeshContours.
        """
        return None

    @property
    def SolutionContours(self) -> typing.Optional[int]:
        """
        Gets or sets the SolutionContours.
        """
        return None

    @property
    def Contact1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Contact1Nodes.
        """
        return None

    @property
    def CrackFrontNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the CrackFrontNodes.
        """
        return None

    @property
    def BottomFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the BottomFaceNodes.
        """
        return None

    @property
    def TopFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the TopFaceNodes.
        """
        return None

    @property
    def Target1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Target1Nodes.
        """
        return None

    @property
    def FractureAffectedZoneHeight(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FractureAffectedZoneHeight.
        """
        return None

    @property
    def FrontElementSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FrontElementSize.
        """
        return None

    @property
    def LargestContourRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LargestContourRadius.
        """
        return None

    @property
    def Depth(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Depth.
        """
        return None

    @property
    def EndWidth(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the EndWidth.
        """
        return None

    @property
    def MidWidth(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MidWidth.
        """
        return None

    @property
    def StartWidth(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the StartWidth.
        """
        return None

    @property
    def FractureAffectedZone(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FractureAffectedZone]:
        """
        Gets or sets the FractureAffectedZone.
        """
        return None

    @property
    def CrackMeshMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackMeshMethod]:
        """
        Gets or sets the CrackMeshMethod.
        """
        return None

    @property
    def CrackShape(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackShapeType]:
        """
        Gets the CrackShape.
        """
        return None

    @property
    def CrackSourceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackSourceType]:
        """
        Gets the CrackSourceType.
        """
        return None

    @property
    def ContactPairsNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the ContactPairsNodes.
        """
        return None

    @property
    def CrackFacesNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the CrackFacesNodes.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def CrackID(self) -> typing.Optional[int]:
        """
        Gets the CrackID.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class EllipticalCrack(object):
    """
    Defines a EllipticalCrack.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrackAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def XScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the XScaleFactor.
        """
        return None

    @property
    def YScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the YScaleFactor.
        """
        return None

    @property
    def ZScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ZScaleFactor.
        """
        return None

    @property
    def CircumferentialDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CircumferentialDivisions.
        """
        return None

    @property
    def CrackFrontDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CrackFrontDivisions.
        """
        return None

    @property
    def GrowthRate(self) -> typing.Optional[float]:
        """
        Gets or sets the GrowthRate.
        """
        return None

    @property
    def MeshContours(self) -> typing.Optional[int]:
        """
        Gets or sets the MeshContours.
        """
        return None

    @property
    def SolutionContours(self) -> typing.Optional[int]:
        """
        Gets or sets the SolutionContours.
        """
        return None

    @property
    def Contact1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Contact1Nodes.
        """
        return None

    @property
    def CrackFrontNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the CrackFrontNodes.
        """
        return None

    @property
    def BottomFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the BottomFaceNodes.
        """
        return None

    @property
    def TopFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the TopFaceNodes.
        """
        return None

    @property
    def Target1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Target1Nodes.
        """
        return None

    @property
    def FractureAffectedZoneHeight(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FractureAffectedZoneHeight.
        """
        return None

    @property
    def FrontElementSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FrontElementSize.
        """
        return None

    @property
    def LargestContourRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LargestContourRadius.
        """
        return None

    @property
    def MajorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MajorRadius.
        """
        return None

    @property
    def MinorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinorRadius.
        """
        return None

    @property
    def FractureAffectedZone(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FractureAffectedZone]:
        """
        Gets or sets the FractureAffectedZone.
        """
        return None

    @property
    def CrackMeshMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackMeshMethod]:
        """
        Gets or sets the CrackMeshMethod.
        """
        return None

    @property
    def CrackShape(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackShapeType]:
        """
        Gets the CrackShape.
        """
        return None

    @property
    def CrackSourceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackSourceType]:
        """
        Gets the CrackSourceType.
        """
        return None

    @property
    def ContactPairsNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the ContactPairsNodes.
        """
        return None

    @property
    def CrackFacesNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the CrackFacesNodes.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def CrackID(self) -> typing.Optional[int]:
        """
        Gets the CrackID.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ExternalEnhancedModel(object):
    """
    Defines a ExternalEnhancedModel.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalEnhancedModelAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def LayerToDisplay(self) -> typing.Optional[int]:
        """
        Gets or sets the LayerToDisplay.
        """
        return None

    @property
    def MaximumNumberOfLayers(self) -> typing.Optional[int]:
        """
        Gets the MaximumNumberOfLayers.
        """
        return None

    @property
    def Type(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ExternalEnhancedModelType]:
        """
        Gets the Type.
        """
        return None

    @property
    def NonlinearEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the NonlinearEffects.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def ThermalStrainEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the ThermalStrainEffects.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RegroupToDefault(self) -> None:
        """
        Run the RegroupToDefault action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class GeneralAxisymmetric(object):
    """
    Defines a GeneralAxisymmetric.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSGeneralAxisymmetricAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def EndPlane(self) -> typing.Optional[int]:
        """
        Gets or sets the EndPlane.
        """
        return None

    @property
    def NodalPlanes(self) -> typing.Optional[int]:
        """
        Gets or sets the NodalPlanes.
        """
        return None

    @property
    def StartPlane(self) -> typing.Optional[int]:
        """
        Gets or sets the StartPlane.
        """
        return None

    @property
    def Axis(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CoordinateSystemAxisType]:
        """
        Gets or sets the Axis.
        """
        return None

    @property
    def NodalPlanesVisible(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.NodalPlanesVisible]:
        """
        Gets or sets the NodalPlanesVisible.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class GeometryFileContainer(object):
    """
    Defines a GeometryFileContainer.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSGeometryFileContainerAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Statistics(self) -> typing.Optional[int]:
        """
        Gets the Statistics.
        """
        return None

    @property
    def LengthUnits(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.WBUnitSystemType]:
        """
        Gets or sets the LengthUnits.
        """
        return None

    @property
    def ShowAlways(self) -> typing.Optional[bool]:
        """
        Gets or sets the ShowAlways.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def ImportSTL(self) -> None:
        """
        Run the ImportSTL action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class HatCrossSection(object):
    """
    Defines a HatCrossSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Area(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Area.
        """
        return None

    @property
    def IYY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IYY.
        """
        return None

    @property
    def IZZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IZZ.
        """
        return None

    @property
    def Thick1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick1.
        """
        return None

    @property
    def Thick2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick2.
        """
        return None

    @property
    def Thick3(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick3.
        """
        return None

    @property
    def Thick4(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick4.
        """
        return None

    @property
    def Thick5(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick5.
        """
        return None

    @property
    def Width1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width1.
        """
        return None

    @property
    def Width2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width2.
        """
        return None

    @property
    def Width3(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width3.
        """
        return None

    @property
    def Width4(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width4.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class HollowRectangularCrossSection(object):
    """
    Defines a HollowRectangularCrossSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Area(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Area.
        """
        return None

    @property
    def IYY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IYY.
        """
        return None

    @property
    def IZZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IZZ.
        """
        return None

    @property
    def Thick1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick1.
        """
        return None

    @property
    def Thick2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick2.
        """
        return None

    @property
    def Thick3(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick3.
        """
        return None

    @property
    def Thick4(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick4.
        """
        return None

    @property
    def Width1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width1.
        """
        return None

    @property
    def Width2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width2.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ICrossSection(object):
    """
    Defines a ICrossSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Area(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Area.
        """
        return None

    @property
    def IYY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IYY.
        """
        return None

    @property
    def IZZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IZZ.
        """
        return None

    @property
    def Thick1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick1.
        """
        return None

    @property
    def Thick2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick2.
        """
        return None

    @property
    def Thick3(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick3.
        """
        return None

    @property
    def Width1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width1.
        """
        return None

    @property
    def Width2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width2.
        """
        return None

    @property
    def Width3(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width3.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Image(object):
    """
    Defines a Image.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSAdvancedPostOutputAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedBoltPretensions(object):
    """
    Defines a ImportedBoltPretensions.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedConstraintEquations(object):
    """
    Defines a ImportedConstraintEquations.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedContacts(object):
    """
    Defines a ImportedContacts.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedCoordinateSystems(object):
    """
    Defines a ImportedCoordinateSystems.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedFlexibleRemoteConnectors(object):
    """
    Defines a ImportedFlexibleRemoteConnectors.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedLayeredSection(object):
    """
    Defines a ImportedLayeredSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalEnhancedModelAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def LayerToDisplay(self) -> typing.Optional[int]:
        """
        Gets or sets the LayerToDisplay.
        """
        return None

    @property
    def MaximumNumberOfLayers(self) -> typing.Optional[int]:
        """
        Gets the MaximumNumberOfLayers.
        """
        return None

    @property
    def Type(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ExternalEnhancedModelType]:
        """
        Gets the Type.
        """
        return None

    @property
    def NonlinearEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the NonlinearEffects.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def ThermalStrainEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the ThermalStrainEffects.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RegroupToDefault(self) -> None:
        """
        Run the RegroupToDefault action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedNodalOrientations(object):
    """
    Defines a ImportedNodalOrientations.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedPlies(object):
    """
    Defines a ImportedPlies.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalEnhancedModelAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def LayerToDisplay(self) -> typing.Optional[int]:
        """
        Gets or sets the LayerToDisplay.
        """
        return None

    @property
    def MaximumNumberOfLayers(self) -> typing.Optional[int]:
        """
        Gets the MaximumNumberOfLayers.
        """
        return None

    @property
    def Type(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ExternalEnhancedModelType]:
        """
        Gets the Type.
        """
        return None

    @property
    def NonlinearEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the NonlinearEffects.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def ThermalStrainEffects(self) -> typing.Optional[bool]:
        """
        Gets or sets the ThermalStrainEffects.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RegroupToDefault(self) -> None:
        """
        Run the RegroupToDefault action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedPliesCollection(object):
    """
    Defines a ImportedPliesCollection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSImportedPliesCollectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedPointMasses(object):
    """
    Defines a ImportedPointMasses.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedPremeshedBoltPretensions(object):
    """
    Defines a ImportedPremeshedBoltPretensions.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedRigidRemoteConnectors(object):
    """
    Defines a ImportedRigidRemoteConnectors.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedShellThicknesses(object):
    """
    Defines a ImportedShellThicknesses.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedSpringConnectors(object):
    """
    Defines a ImportedSpringConnectors.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ImportedStresses(object):
    """
    Defines a ImportedStresses.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSExternalModelDataCollAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Gets the NumberOfRows.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class LCrossSection(object):
    """
    Defines a LCrossSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Area(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Area.
        """
        return None

    @property
    def IYY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IYY.
        """
        return None

    @property
    def IZZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IZZ.
        """
        return None

    @property
    def Thick1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick1.
        """
        return None

    @property
    def Thick2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick2.
        """
        return None

    @property
    def Width1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width1.
        """
        return None

    @property
    def Width2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width2.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class LocalVonMisesStressConstraint(object):
    """
    Defines a LocalVonMisesStressConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Maximum(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the Maximum.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class MassConstraint(object):
    """
    Defines a MassConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def PercentageToRetain(self) -> typing.Optional[int]:
        """
        Gets or sets the PercentageToRetain.
        """
        return None

    @property
    def PercentageToRetainMax(self) -> typing.Optional[int]:
        """
        Gets or sets the PercentageToRetainMax.
        """
        return None

    @property
    def PercentageToRetainMin(self) -> typing.Optional[int]:
        """
        Gets or sets the PercentageToRetainMin.
        """
        return None

    @property
    def MaximumAbsoluteValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaximumAbsoluteValue.
        """
        return None

    @property
    def MinimumAbsoluteValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinimumAbsoluteValue.
        """
        return None

    @property
    def DefineBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ResponseConstraintDefineBy]:
        """
        Gets or sets the DefineBy.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class NaturalFrequencyConstraint(object):
    """
    Defines a NaturalFrequencyConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ModeNumber(self) -> typing.Optional[int]:
        """
        Gets or sets the ModeNumber.
        """
        return None

    @property
    def MaximumFrequency(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaximumFrequency.
        """
        return None

    @property
    def MinimumFrequency(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinimumFrequency.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class NodeMergeGroup(object):
    """
    Defines a NodeMergeGroup.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSConnectionGroupAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ConnectionType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutoDetectionType]:
        """
        Gets or sets the ConnectionType.
        """
        return None

    @property
    def ActiveConnections(self) -> typing.Optional[int]:
        """
        Gets the ActiveConnections.
        """
        return None

    @property
    def Connections(self) -> typing.Optional[int]:
        """
        Gets the Connections.
        """
        return None

    @property
    def EdgeOverlapTolerance(self) -> typing.Optional[int]:
        """
        Gets or sets the EdgeOverlapTolerance.
        """
        return None

    @property
    def FaceOverlapTolerance(self) -> typing.Optional[int]:
        """
        Gets or sets the FaceOverlapTolerance.
        """
        return None

    @property
    def MinimumDistancePercentage(self) -> typing.Optional[int]:
        """
        Gets or sets the MinimumDistancePercentage.
        """
        return None

    @property
    def ThicknessScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ThicknessScaleFactor.
        """
        return None

    @property
    def ToleranceSlider(self) -> typing.Optional[int]:
        """
        Gets or sets the ToleranceSlider.
        """
        return None

    @property
    def FaceFaceDetectionAngleTolerence(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FaceFaceDetectionAngleTolerence.
        """
        return None

    @property
    def FaceAngleTolerance(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FaceAngleTolerance.
        """
        return None

    @property
    def MinimumDistanceValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the MinimumDistanceValue.
        """
        return None

    @property
    def ToleranceValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the ToleranceValue.
        """
        return None

    @property
    def CylindricalFaces(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CylindricalFacesOption]:
        """
        Gets or sets the CylindricalFaces.
        """
        return None

    @property
    def Priority(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactFaceEdgePriority]:
        """
        Gets or sets the Priority.
        """
        return None

    @property
    def GroupBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactGroupingType]:
        """
        Gets or sets the GroupBy.
        """
        return None

    @property
    def SearchAcross(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactSearchingType]:
        """
        Gets or sets the SearchAcross.
        """
        return None

    @property
    def ToleranceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactToleranceType]:
        """
        Gets or sets the ToleranceType.
        """
        return None

    @property
    def EdgeEdge(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactEdgeEdgeOption]:
        """
        Gets or sets the EdgeEdge.
        """
        return None

    @property
    def FaceEdge(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ContactFaceEdgeOption]:
        """
        Gets or sets the FaceEdge.
        """
        return None

    @property
    def AutomaticFixedJoints(self) -> typing.Optional[bool]:
        """
        Gets or sets the AutomaticFixedJoints.
        """
        return None

    @property
    def RevoluteJoints(self) -> typing.Optional[bool]:
        """
        Gets or sets the RevoluteJoints.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def FaceFace(self) -> typing.Optional[bool]:
        """
        Gets or sets the FaceFace.
        """
        return None

    @property
    def UseRange(self) -> typing.Optional[bool]:
        """
        Gets or sets the UseRange.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddNodeMerge(self) -> Ansys.ACT.Automation.Mechanical.NodeMerge:
        """
        Creates a new NodeMerge
        """
        pass

    def GenerateNodeMerge(self) -> None:
        """
        Generate mesh connections for the selected mesh connection objects or groups in the model.
        """
        pass

    def AddContactRegion(self) -> Ansys.ACT.Automation.Mechanical.Connections.ContactRegion:
        """
        Creates a new child ContactRegion.
        """
        pass

    def AddJoint(self) -> Ansys.ACT.Automation.Mechanical.Connections.Joint:
        """
        Creates a new child Joint.
        """
        pass

    def SearchConnectionsForDuplicatePairs(self) -> None:
        """
        Run the SearchConnectionsForDuplicatePairs action.
        """
        pass

    def AddSpotWeld(self) -> Ansys.ACT.Automation.Mechanical.Connections.ContactRegion:
        """
        Creates a new child SpotWeld.
        """
        pass

    def AddInterStage(self) -> Ansys.ACT.Automation.Mechanical.Connections.ContactRegion:
        """
        Creates a new child InterStage.
        """
        pass

    def CreateAutomaticConnections(self) -> None:
        """
        Run the CreateAutomaticConnections action.
        """
        pass

    def DeleteChildren(self, verificationDialog: bool) -> None:
        """
        Run the DeleteChildren action with optional verification dialog.
        """
        pass

    def RenameBasedOnChildren(self) -> bool:
        """
        Rename the Connection group based on the children.
        """
        pass

    def SetDefaultAPDLNames(self) -> None:
        """
        Loop over all the valid contact regions and set the default APDL names.
        """
        pass

    def RepairOverlappingContactRegions(self) -> None:
        """
        Check for Overlapping Contact Regions. However, please note that this action does not result in any actual repair being performed.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PeriodicRegion(object):
    """
    Defines a PeriodicRegion.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSSymmetryGeneralAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Type(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PeriodicRegionType]:
        """
        Gets or sets the Type.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ScopeMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets the ScopeMode.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def HighBoundaryLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the HighBoundaryLocation.
        """
        return None

    @property
    def LowBoundaryLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the LowBoundaryLocation.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def FlipHighLow(self) -> None:
        """
        Flips the High and Low Boundaries.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PostContactTool(object):
    """
    Defines a PostContactTool.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSContactToolAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddFluidPressure(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactToolResults.ContactFluidPressure:
        """
        Creates a new ContactFluidPressure
        """
        pass

    def AddFrictionalStress(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactToolResults.ContactFrictionalStress:
        """
        Creates a new ContactFrictionalStress
        """
        pass

    def AddHeatFlux(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactToolResults.ContactHeatFlux:
        """
        Creates a new ContactHeatFlux
        """
        pass

    def AddPressure(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactToolResults.ContactPressure:
        """
        Creates a new ContactPressure
        """
        pass

    def AddSlidingDistance(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactToolResults.ContactSlidingDistance:
        """
        Creates a new ContactSlidingDistance
        """
        pass

    def AddInitialInformation(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactDataTable:
        """
        Creates a new ContactDataTable
        """
        pass

    def AddGap(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactToolResults.ContactGap:
        """
        Creates a new ContactGap
        """
        pass

    def AddPenetration(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactToolResults.ContactPenetration:
        """
        Creates a new ContactPenetration
        """
        pass

    def AddStatus(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactToolResults.ContactStatus:
        """
        Creates a new ContactStatus
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def EvaluateAllResults(self) -> None:
        """
        Run the EvaluateAllResults action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GenerateInitialContactResults(self) -> None:
        """
        Generate Initial Contact Results and Mesh Parts
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PreContactTool(object):
    """
    Defines a PreContactTool.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSContactToolAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddInitialInformation(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactDataTable:
        """
        Creates a new ContactDataTable
        """
        pass

    def AddGap(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactToolResults.ContactGap:
        """
        Creates a new ContactGap
        """
        pass

    def AddPenetration(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactToolResults.ContactPenetration:
        """
        Creates a new ContactPenetration
        """
        pass

    def AddStatus(self) -> Ansys.ACT.Automation.Mechanical.Results.ContactToolResults.ContactStatus:
        """
        Creates a new ContactStatus
        """
        pass

    def ClearGeneratedData(self) -> None:
        """
        Run the ClearGeneratedData action.
        """
        pass

    def EvaluateAllResults(self) -> None:
        """
        Run the EvaluateAllResults action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GenerateInitialContactResults(self) -> None:
        """
        Generate Initial Contact Results and Mesh Parts
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PreMeshedCrack(object):
    """
    Defines a PreMeshedCrack.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrackAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def SolutionContours(self) -> typing.Optional[int]:
        """
        Gets or sets the SolutionContours.
        """
        return None

    @property
    def CrackSourceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackSourceType]:
        """
        Gets the CrackSourceType.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets the ScopingMethod.
        """
        return None

    @property
    def CrackSymmetry(self) -> typing.Optional[bool]:
        """
        Gets or sets the CrackSymmetry.
        """
        return None

    @property
    def CrackFacesNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the CrackFacesNodes.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CrackFront(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.NamedSelection]:
        """
        Gets or sets the CrackFront.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def BottomFaceNodes(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.NamedSelection]:
        """
        Gets or sets the BottomFaceNodes.
        """
        return None

    @property
    def TopFaceNodes(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.NamedSelection]:
        """
        Gets or sets the TopFaceNodes.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def CrackID(self) -> typing.Optional[int]:
        """
        Gets the CrackID.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PreMeshedCyclicRegion(object):
    """
    Defines a PreMeshedCyclicRegion.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSSymmetryGeneralAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def RelativeDistanceTolerance(self) -> typing.Optional[float]:
        """
        Gets or sets the RelativeDistanceTolerance.
        """
        return None

    @property
    def NumberOfSectors(self) -> typing.Optional[int]:
        """
        Gets or sets the NumberOfSectors.
        """
        return None

    @property
    def BoundaryDOFOrientation(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SymmetryBoundaryDOFOrientation]:
        """
        Gets or sets the BoundaryDOFOrientation.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def ScopeMode(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AutomaticOrManual]:
        """
        Gets the ScopeMode.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def HighBoundaryLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the HighBoundaryLocation.
        """
        return None

    @property
    def LowBoundaryLocation(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the LowBoundaryLocation.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def FlipHighLow(self) -> None:
        """
        Flips the High and Low Boundaries.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class PythonCodeEventBased(object):
    """
    Defines a PythonCodeEventBased.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPythonCodeEventBasedAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def SolverTarget(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CommandEditorTarget]:
        """
        Gets the SolverTarget.
        """
        return None

    @property
    def TargetCallback(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.PythonCodeTargetCallback]:
        """
        Gets or sets the TargetCallback.
        """
        return None

    @property
    def InvalidateSolution(self) -> typing.Optional[bool]:
        """
        Gets or sets the InvalidateSolution.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Text(self) -> typing.Optional[str]:
        """
        Gets or sets the text in the script tab for the Python Code object.
        """
        return None

    @property
    def PropertyProvider(self) -> typing.Optional[Ansys.ACT.Interfaces.Mechanical.IPropertyProvider]:
        """
        
            Gets or sets the propperty provider instance associated with this python code object.
            
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSPythonCodeAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ScriptExecutionScope(self) -> typing.Optional[str]:
        """
        The scope identifier in which the code execution will take place.
        """
        return None

    @property
    def AllowRecursion(self) -> typing.Optional[bool]:
        """
        Gets or Sets whether the PythonCode allows recursion.
        """
        return None

    @property
    def Connected(self) -> typing.Optional[bool]:
        """
        Gets whether the callbacks are currently connected.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def ReloadProperties(self) -> None:
        """
        
            Reload properties to update properties provided by the provider.
            
        """
        pass

    def Connect(self) -> None:
        """
        
            Register the python code.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        Duplicate method.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ReactionForceConstraint(object):
    """
    Defines a ReactionForceConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def XComponentMax(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the XComponentMax.
        """
        return None

    @property
    def YComponentMax(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the YComponentMax.
        """
        return None

    @property
    def ZComponentMax(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the ZComponentMax.
        """
        return None

    @property
    def BoundType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.TopoBoundType]:
        """
        Gets or sets the BoundType.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def AxisSelection(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.AxisSelectionType]:
        """
        Gets or sets the AxisSelection.
        """
        return None

    @property
    def ReactionForceCriteria(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ReactionForceCriteriaType]:
        """
        Gets or sets the ReactionForceCriteria.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class RectangularCrossSection(object):
    """
    Defines a RectangularCrossSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Area(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Area.
        """
        return None

    @property
    def IYY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IYY.
        """
        return None

    @property
    def IZZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IZZ.
        """
        return None

    @property
    def Height(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Height.
        """
        return None

    @property
    def Width(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class RingCrack(object):
    """
    Defines a RingCrack.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrackAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def XScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the XScaleFactor.
        """
        return None

    @property
    def YScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the YScaleFactor.
        """
        return None

    @property
    def ZScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ZScaleFactor.
        """
        return None

    @property
    def CircumferentialDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CircumferentialDivisions.
        """
        return None

    @property
    def OuterCrackFrontDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the OuterCrackFrontDivisions.
        """
        return None

    @property
    def GrowthRate(self) -> typing.Optional[float]:
        """
        Gets or sets the GrowthRate.
        """
        return None

    @property
    def InnerCrackFrontDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the InnerCrackFrontDivisions.
        """
        return None

    @property
    def MeshContours(self) -> typing.Optional[int]:
        """
        Gets or sets the MeshContours.
        """
        return None

    @property
    def SolutionContours(self) -> typing.Optional[int]:
        """
        Gets or sets the SolutionContours.
        """
        return None

    @property
    def Contact1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Contact1Nodes.
        """
        return None

    @property
    def CrackFrontNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the CrackFrontNodes.
        """
        return None

    @property
    def BottomFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the BottomFaceNodes.
        """
        return None

    @property
    def TopFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the TopFaceNodes.
        """
        return None

    @property
    def Target1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Target1Nodes.
        """
        return None

    @property
    def FractureAffectedZoneHeight(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FractureAffectedZoneHeight.
        """
        return None

    @property
    def OuterFrontElementSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the OuterFrontElementSize.
        """
        return None

    @property
    def LargestContourRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LargestContourRadius.
        """
        return None

    @property
    def InnerMajorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the InnerMajorRadius.
        """
        return None

    @property
    def InnerMinorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the InnerMinorRadius.
        """
        return None

    @property
    def OuterMajorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the OuterMajorRadius.
        """
        return None

    @property
    def OuterMinorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the OuterMinorRadius.
        """
        return None

    @property
    def InnerFrontElementSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the InnerFrontElementSize.
        """
        return None

    @property
    def FractureAffectedZone(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FractureAffectedZone]:
        """
        Gets or sets the FractureAffectedZone.
        """
        return None

    @property
    def CrackMeshMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackMeshMethod]:
        """
        Gets or sets the CrackMeshMethod.
        """
        return None

    @property
    def CrackShape(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackShapeType]:
        """
        Gets the CrackShape.
        """
        return None

    @property
    def CrackSourceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackSourceType]:
        """
        Gets the CrackSourceType.
        """
        return None

    @property
    def ContactPairsNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the ContactPairsNodes.
        """
        return None

    @property
    def CrackFacesNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the CrackFacesNodes.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def CrackID(self) -> typing.Optional[int]:
        """
        Gets the CrackID.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class SemiEllipticalCrack(object):
    """
    Defines a SemiEllipticalCrack.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrackAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def XScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the XScaleFactor.
        """
        return None

    @property
    def YScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the YScaleFactor.
        """
        return None

    @property
    def ZScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ZScaleFactor.
        """
        return None

    @property
    def CircumferentialDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CircumferentialDivisions.
        """
        return None

    @property
    def CrackFrontDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CrackFrontDivisions.
        """
        return None

    @property
    def GrowthRate(self) -> typing.Optional[float]:
        """
        Gets or sets the GrowthRate.
        """
        return None

    @property
    def MeshContours(self) -> typing.Optional[int]:
        """
        Gets or sets the MeshContours.
        """
        return None

    @property
    def SolutionContours(self) -> typing.Optional[int]:
        """
        Gets or sets the SolutionContours.
        """
        return None

    @property
    def Contact1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Contact1Nodes.
        """
        return None

    @property
    def CrackFrontNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the CrackFrontNodes.
        """
        return None

    @property
    def BottomFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the BottomFaceNodes.
        """
        return None

    @property
    def TopFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the TopFaceNodes.
        """
        return None

    @property
    def Target1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Target1Nodes.
        """
        return None

    @property
    def FractureAffectedZoneHeight(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FractureAffectedZoneHeight.
        """
        return None

    @property
    def FrontElementSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FrontElementSize.
        """
        return None

    @property
    def LargestContourRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LargestContourRadius.
        """
        return None

    @property
    def MajorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MajorRadius.
        """
        return None

    @property
    def MinorRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinorRadius.
        """
        return None

    @property
    def FractureAffectedZone(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FractureAffectedZone]:
        """
        Gets or sets the FractureAffectedZone.
        """
        return None

    @property
    def CrackMeshMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackMeshMethod]:
        """
        Gets or sets the CrackMeshMethod.
        """
        return None

    @property
    def CrackShape(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackShapeType]:
        """
        Gets the CrackShape.
        """
        return None

    @property
    def CrackSourceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackSourceType]:
        """
        Gets the CrackSourceType.
        """
        return None

    @property
    def AlignWithFaceNormal(self) -> typing.Optional[bool]:
        """
        Gets or sets the AlignWithFaceNormal.
        """
        return None

    @property
    def ProjectToNearestSurface(self) -> typing.Optional[bool]:
        """
        Gets or sets the ProjectToNearestSurface.
        """
        return None

    @property
    def ContactPairsNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the ContactPairsNodes.
        """
        return None

    @property
    def CrackFacesNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the CrackFacesNodes.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def CrackID(self) -> typing.Optional[int]:
        """
        Gets the CrackID.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class SurfaceCoating(object):
    """
    Defines a SurfaceCoating.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSSurfaceCoatingAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Material(self) -> typing.Optional[str]:
        """
        Gets or sets the Material.
        """
        return None

    @property
    def Thickness(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thickness.
        """
        return None

    @property
    def SurfaceCoatingStiffnessBehavior(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.SurfaceCoatingStiffnessBehavior]:
        """
        Gets or sets the SurfaceCoatingStiffnessBehavior.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class TCrossSection(object):
    """
    Defines a TCrossSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Area(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Area.
        """
        return None

    @property
    def IYY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IYY.
        """
        return None

    @property
    def IZZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IZZ.
        """
        return None

    @property
    def Thick1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick1.
        """
        return None

    @property
    def Thick2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick2.
        """
        return None

    @property
    def Width1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width1.
        """
        return None

    @property
    def Width2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width2.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class TemperatureConstraint(object):
    """
    Defines a TemperatureConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def TemperatureAbsMax(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the TemperatureAbsMax.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ThermalComplianceConstraint(object):
    """
    Defines a ThermalComplianceConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ComplianceLimit(self) -> typing.Optional[Ansys.ACT.Mechanical.Fields.Field]:
        """
        Gets or sets the ComplianceLimit.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ThroughCrack(object):
    """
    Defines a ThroughCrack.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrackAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def XScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the XScaleFactor.
        """
        return None

    @property
    def YScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the YScaleFactor.
        """
        return None

    @property
    def ZScaleFactor(self) -> typing.Optional[float]:
        """
        Gets or sets the ZScaleFactor.
        """
        return None

    @property
    def CircumferentialDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CircumferentialDivisions.
        """
        return None

    @property
    def CrackFrontDivisions(self) -> typing.Optional[int]:
        """
        Gets or sets the CrackFrontDivisions.
        """
        return None

    @property
    def GrowthRate(self) -> typing.Optional[float]:
        """
        Gets or sets the GrowthRate.
        """
        return None

    @property
    def MeshContours(self) -> typing.Optional[int]:
        """
        Gets or sets the MeshContours.
        """
        return None

    @property
    def SolutionContours(self) -> typing.Optional[int]:
        """
        Gets or sets the SolutionContours.
        """
        return None

    @property
    def Contact1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Contact1Nodes.
        """
        return None

    @property
    def CrackFrontNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the CrackFrontNodes.
        """
        return None

    @property
    def BottomFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the BottomFaceNodes.
        """
        return None

    @property
    def TopFaceNodes(self) -> typing.Optional[str]:
        """
        Gets or sets the TopFaceNodes.
        """
        return None

    @property
    def Target1Nodes(self) -> typing.Optional[str]:
        """
        Gets or sets the Target1Nodes.
        """
        return None

    @property
    def FractureAffectedZoneHeight(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FractureAffectedZoneHeight.
        """
        return None

    @property
    def FrontElementSize(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the FrontElementSize.
        """
        return None

    @property
    def LargestContourRadius(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the LargestContourRadius.
        """
        return None

    @property
    def Depth(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Depth.
        """
        return None

    @property
    def EndWidth(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the EndWidth.
        """
        return None

    @property
    def MidWidth(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MidWidth.
        """
        return None

    @property
    def StartWidth(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the StartWidth.
        """
        return None

    @property
    def FractureAffectedZone(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.FractureAffectedZone]:
        """
        Gets or sets the FractureAffectedZone.
        """
        return None

    @property
    def CrackMeshMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackMeshMethod]:
        """
        Gets or sets the CrackMeshMethod.
        """
        return None

    @property
    def CrackShape(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackShapeType]:
        """
        Gets the CrackShape.
        """
        return None

    @property
    def CrackSourceType(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.CrackSourceType]:
        """
        Gets the CrackSourceType.
        """
        return None

    @property
    def ContactPairsNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the ContactPairsNodes.
        """
        return None

    @property
    def CrackFacesNodes(self) -> typing.Optional[bool]:
        """
        Gets or sets the CrackFacesNodes.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def CoordinateSystem(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.CoordinateSystem]:
        """
        Gets or sets the CoordinateSystem.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def CrackID(self) -> typing.Optional[int]:
        """
        Gets the CrackID.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def AddCommandSnippet(self) -> Ansys.ACT.Automation.Mechanical.CommandSnippet:
        """
        Creates a new CommandSnippet
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class UserDefinedCrossSection(object):
    """
    Defines a UserDefinedCrossSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def CGy(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the CGy.
        """
        return None

    @property
    def CGZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the CGZ.
        """
        return None

    @property
    def Area(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Area.
        """
        return None

    @property
    def Iyy(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Iyy.
        """
        return None

    @property
    def Izz(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Izz.
        """
        return None

    @property
    def SHy(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the SHy.
        """
        return None

    @property
    def SHz(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the SHz.
        """
        return None

    @property
    def J(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the J.
        """
        return None

    @property
    def Iw(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Iw.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class VirtualCell(object):
    """
    Defines a VirtualCell.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSVirtualCellAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def ProjectToUnderlyingGeometry(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.YesNoType]:
        """
        Gets or sets the ProjectToUnderlyingGeometry.
        """
        return None

    @property
    def VTClass(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.VirtualCellClassType]:
        """
        Gets the VTClass.
        """
        return None

    @property
    def Geometry(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets the Geometry.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class VolumeConstraint(object):
    """
    Defines a VolumeConstraint.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSTopoConstraintAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def PercentageToRetain(self) -> typing.Optional[int]:
        """
        Gets or sets the PercentageToRetain.
        """
        return None

    @property
    def PercentageToRetainMax(self) -> typing.Optional[int]:
        """
        Gets or sets the PercentageToRetainMax.
        """
        return None

    @property
    def PercentageToRetainMin(self) -> typing.Optional[int]:
        """
        Gets or sets the PercentageToRetainMin.
        """
        return None

    @property
    def MaximumAbsoluteValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MaximumAbsoluteValue.
        """
        return None

    @property
    def MinimumAbsoluteValue(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the MinimumAbsoluteValue.
        """
        return None

    @property
    def DefineBy(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.ResponseConstraintDefineBy]:
        """
        Gets or sets the DefineBy.
        """
        return None

    @property
    def ScopingMethod(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.GeometryDefineByType]:
        """
        Gets or sets the ScopingMethod.
        """
        return None

    @property
    def Selection(self) -> typing.Optional[Ansys.ACT.Automation.Mechanical.OptimizationRegion]:
        """
        Gets or sets the Selection.
        """
        return None

    @property
    def Location(self) -> typing.Optional[Ansys.ACT.Interfaces.Common.ISelectionInfo]:
        """
        Gets or sets the Location.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def EnvironmentSelection(self) -> typing.Optional[typing.Any]:
        """
        Gets or Sets the EnvironmentSelection to an Analysis object or TopoEnvironmentType enum.
        """
        return None

    @property
    def Suppressed(self) -> typing.Optional[bool]:
        """
        Gets or sets the Suppressed.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def RenameBasedOnDefinition(self) -> None:
        """
        Run the RenameBasedOnDefinition action.
        """
        pass

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class ZCrossSection(object):
    """
    Defines a ZCrossSection.
    """

    @property
    def InternalObject(self) -> typing.Optional[Ansys.Common.Interop.DSObjectsAuto.IDSCrossSectionAuto]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Area(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the Area.
        """
        return None

    @property
    def IYY(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IYY.
        """
        return None

    @property
    def IZZ(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets the IZZ.
        """
        return None

    @property
    def Thick1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick1.
        """
        return None

    @property
    def Thick2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick2.
        """
        return None

    @property
    def Thick3(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Thick3.
        """
        return None

    @property
    def Width1(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width1.
        """
        return None

    @property
    def Width2(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width2.
        """
        return None

    @property
    def Width3(self) -> typing.Optional[Ansys.Core.Units.Quantity]:
        """
        Gets or sets the Width3.
        """
        return None

    @property
    def DataModelObjectCategory(self) -> typing.Optional[Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory]:
        """
        Gets the current DataModelObject's category.
        """
        return None

    @property
    def Children(self) -> typing.Optional[typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]]:
        """
        Gets the list of children.
        """
        return None

    @property
    def Comments(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Comment]]:
        """
        Gets the list of associated comments.
        """
        return None

    @property
    def Figures(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Figure]]:
        """
        Gets the list of associated figures.
        """
        return None

    @property
    def Images(self) -> typing.Optional[typing.Iterable[Ansys.ACT.Automation.Mechanical.Image]]:
        """
        Gets the list of associated images.
        """
        return None

    @property
    def ReadOnly(self) -> typing.Optional[bool]:
        """
        Gets or sets the ReadOnly.
        """
        return None

    @property
    def InternalObject(self) -> typing.Optional[typing.Any]:
        """
        Gets the internal object. For advanced usage only.
        """
        return None

    @property
    def Properties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties for this object.
            
        """
        return None

    @property
    def VisibleProperties(self) -> typing.Optional[tuple[Ansys.ACT.Automation.Mechanical.Property]]:
        """
        
            Gets the list of properties that are visible for this object.
            
        """
        return None

    def Delete(self) -> None:
        """
        Run the Delete action.
        """
        pass

    def GetChildren(self, recurses: bool, children: typing.List[ChildrenType]) -> typing.List[ChildrenType]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def GetChildren(self, category: Ansys.Mechanical.DataModel.Enums.DataModelObjectCategory, recurses: bool, children: typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]) -> typing.List[Ansys.Mechanical.DataModel.Interfaces.IDataModelObject]:
        """
        Gets the list of children, filtered by type.
        """
        pass

    def AddComment(self) -> Ansys.ACT.Automation.Mechanical.Comment:
        """
        Creates a new child Comment.
        """
        pass

    def AddFigure(self) -> Ansys.ACT.Automation.Mechanical.Figure:
        """
        Creates a new child Figure.
        """
        pass

    def AddImage(self, filePath: str) -> Ansys.ACT.Automation.Mechanical.Image:
        """
        
            Creates a new child Image.
            If a filePath is provided, the image will be loaded from that file,
            if not, the image will be a screen capture of the Geometry window.
            
        """
        pass

    def Activate(self) -> None:
        """
        Activate the current object.
        """
        pass

    def CopyTo(self, other: Ansys.ACT.Automation.Mechanical.DataModelObject) -> None:
        """
        
            Copies all visible properties from this object to another.
            
        """
        pass

    def Duplicate(self) -> Ansys.Mechanical.DataModel.Interfaces.IDataModelObject:
        """
        
            Creates a copy of the current DataModelObject.
            
        """
        pass

    def GroupAllSimilarChildren(self) -> None:
        """
        Run the GroupAllSimilarChildren action.
        """
        pass

    def GroupSimilarObjects(self) -> Ansys.ACT.Automation.Mechanical.TreeGroupingFolder:
        """
        Run the GroupSimilarObjects action.
        """
        pass

    def PropertyByName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its unique name.
            
        """
        pass

    def PropertyByAPIName(self, name: str) -> Ansys.ACT.Automation.Mechanical.Property:
        """
        
            Get a property by its API name.
            If multiple properties have the same API Name, only the first property with that name will be returned.
            
        """
        pass

    def CreateParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Creates a new parameter for a Property.
            
        """
        pass

    def GetParameter(self, propName: str) -> Ansys.ACT.Interfaces.Mechanical.IParameter:
        """
        
            Gets the parameter corresponding to the given property.
            
        """
        pass

    def RemoveParameter(self, propName: str) -> None:
        """
        
            Removes the parameter from the parameter set corresponding to the given property.
            
        """
        pass


class Column(object):

    @property
    def Item(self) -> typing.Optional[typing.Any]:
        """
        Item property.
        """
        return None

    @property
    def IsReadOnly(self) -> typing.Optional[bool]:
        """
        IsReadOnly property.
        """
        return None

    @property
    def IsFixedSize(self) -> typing.Optional[bool]:
        """
        IsFixedSize property.
        """
        return None

    @property
    def SyncRoot(self) -> typing.Optional[typing.Any]:
        """
        SyncRoot property.
        """
        return None

    @property
    def IsSynchronized(self) -> typing.Optional[bool]:
        """
        IsSynchronized property.
        """
        return None

    @property
    def Count(self) -> typing.Optional[int]:
        """
        Count property.
        """
        return None

    @property
    def DataType(self) -> typing.Optional[type]:
        """
        DataType property.
        """
        return None

    @property
    def IsIndependent(self) -> typing.Optional[bool]:
        """
        IsIndependent property.
        """
        return None

    @property
    def Name(self) -> typing.Optional[str]:
        """
        Name property.
        """
        return None

    @property
    def QuantityName(self) -> typing.Optional[str]:
        """
        QuantityName property.
        """
        return None

    @property
    def Unit(self) -> typing.Optional[str]:
        """
        Unit property.
        """
        return None

    @property
    def Values(self) -> typing.Optional[typing.Collection]:
        """
        Values property.
        """
        return None

    @property
    def VariableClassification(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.Table.VariableClassification]:
        """
        VariableClassification property.
        """
        return None

    @property
    def VariableType(self) -> typing.Optional[Ansys.Mechanical.DataModel.MechanicalEnums.Table.VariableType]:
        """
        VariableType property.
        """
        return None

    def Add(self, value: typing.Any) -> int:
        pass

    def Contains(self, value: typing.Any) -> bool:
        pass

    def Clear(self) -> None:
        pass

    def IndexOf(self, value: typing.Any) -> int:
        pass

    def Insert(self, index: int, value: typing.Any) -> None:
        pass

    def Remove(self, value: typing.Any) -> None:
        pass

    def RemoveAt(self, index: int) -> None:
        pass

    def CopyTo(self, array: typing.List, destinationStartIndex: int) -> None:
        pass

    def GetEnumerator(self) -> typing.Iterator:
        pass

    def ChangeVariableType(self, newVariableType: Ansys.Mechanical.DataModel.MechanicalEnums.Table.VariableType, newVariableClassification: Ansys.Mechanical.DataModel.MechanicalEnums.Table.VariableClassification, newUnit: str) -> bool:
        """
        
            Contains the business logic for changing the variable type.
            
        """
        pass


