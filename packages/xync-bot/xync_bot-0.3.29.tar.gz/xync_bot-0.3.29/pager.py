from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import asyncio
import logging

from xync_bot.loader import TOKEN

# –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –∏–∑ 200 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
OPTIONS = (
    [
        f"Apple {i}"
        for i in range(50)  # 50 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ A
    ]
    + [
        "Banana"  # 1 –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ B
    ]
    + [
        f"Dog {i}"
        for i in range(30)  # 30 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ D
    ]
    + [
        f"Elephant {i}"
        for i in range(20)  # 20 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ E
    ]
    + [
        f"Fish {i}"
        for i in range(40)  # 40 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ F
    ]
    + [
        f"Zebra {i}"
        for i in range(59)  # 59 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ Z
    ]
)


class SmartAlphaPager:
    def __init__(self, options, items_per_page=15):
        self.options = sorted(options)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        self.items_per_page = items_per_page
        self.pages = self._create_balanced_pages()

    def _create_balanced_pages(self):
        """–°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        pages = []
        current_page = []

        for option in self.options:
            current_page.append(option)

            # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            if len(current_page) >= self.items_per_page:
                pages.append(current_page)
                current_page = []

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–∏
        if current_page:
            pages.append(current_page)

        return pages

    def _get_page_title(self, page_items):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±—É–∫–≤"""
        if not page_items:
            return "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"

        first_letter = page_items[0][0].upper()
        last_letter = page_items[-1][0].upper()

        if first_letter == last_letter:
            return f"üìã –ë—É–∫–≤–∞ '{first_letter}'"
        else:
            return f"üìã –ë—É–∫–≤—ã '{first_letter}' - '{last_letter}'"

    def get_overview_menu(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–∑–æ—Ä–Ω–æ–µ –º–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"""
        if not self.pages:
            return InlineKeyboardMarkup(inline_keyboard=[])

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for i, page_items in enumerate(self.pages):
            first_letter = page_items[0][0].upper()
            last_letter = page_items[-1][0].upper()
            count = len(page_items)

            if first_letter == last_letter:
                button_text = f"{first_letter} ({count})"
            else:
                button_text = f"{first_letter}-{last_letter} ({count})"

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if i % 3 == 0:
                keyboard.inline_keyboard.append([])

            keyboard.inline_keyboard[-1].append(InlineKeyboardButton(text=button_text, callback_data=f"page_{i}"))

        return keyboard

    def get_page_keyboard(self, page_num):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if page_num < 0 or page_num >= len(self.pages):
            return None, None

        page_items = self.pages[page_num]
        title = self._get_page_title(page_items)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        for option in page_items:
            keyboard.inline_keyboard.append([InlineKeyboardButton(text=option, callback_data=f"select_{option}")])

        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        nav_row = []

        # –ö–Ω–æ–ø–∫–∞ "–ö –æ–±–∑–æ—Ä—É"
        nav_row.append(InlineKeyboardButton(text="üìñ –û–±–∑–æ—Ä", callback_data="back_to_overview"))

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        if len(self.pages) > 1:
            if page_num > 0:
                nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"nav_page_{page_num - 1}"))

            nav_row.append(
                InlineKeyboardButton(text=f"{page_num + 1}/{len(self.pages)}", callback_data="current_page_info")
            )

            if page_num < len(self.pages) - 1:
                nav_row.append(InlineKeyboardButton(text="–°–ª–µ–¥ ‚û°Ô∏è", callback_data=f"nav_page_{page_num + 1}"))

        keyboard.inline_keyboard.append(nav_row)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        items_count = len(page_items)
        total_items = sum(len(page) for page in self.pages)
        full_title = f"{title}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}/{len(self.pages)} ‚Ä¢ {items_count} –∏–∑ {total_items} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"

        return keyboard, full_title

    def get_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        stats = {}
        for page_num, page_items in enumerate(self.pages):
            first_letter = page_items[0][0].upper()
            last_letter = page_items[-1][0].upper()

            if first_letter == last_letter:
                range_text = f"'{first_letter}'"
            else:
                range_text = f"'{first_letter}'-'{last_letter}'"

            stats[f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}"] = {"range": range_text, "count": len(page_items)}

        return stats


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

pager = SmartAlphaPager(OPTIONS)


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∑–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü"""
    keyboard = pager.get_overview_menu()
    total_options = len(pager.options)
    total_pages = len(pager.pages)

    text = (
        f"üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
        f"üìä –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {total_options}\n"
        f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}"
    )

    await message.answer(text, reply_markup=keyboard)


@dp.message(Command("stats"))
async def stats_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    stats = pager.get_stats()

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:\n\n"
    for page_name, info in stats.items():
        text += f"{page_name}: {info['range']} ‚Äî {info['count']} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"

    await message.answer(text)


@dp.callback_query(lambda c: c.data == "back_to_overview")
async def back_to_overview(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ–±–∑–æ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü"""
    keyboard = pager.get_overview_menu()
    total_options = len(pager.options)
    total_pages = len(pager.pages)

    text = (
        f"üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
        f"üìä –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {total_options}\n"
        f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}"
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("page_"))
async def show_page(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    page_num = int(callback.data.split("_")[1])
    keyboard, text = pager.get_page_keyboard(page_num)

    if keyboard:
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        await callback.answer("–û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("nav_page_"))
async def navigate_pages(callback: types.CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"""
    page_num = int(callback.data.split("_")[2])
    keyboard, text = pager.get_page_keyboard(page_num)

    if keyboard:
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("select_"))
async def option_selected(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
    selected = callback.data.replace("select_", "")

    await callback.message.edit_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    )
    await callback.answer(f"–í—ã–±—Ä–∞–Ω: {selected}")


@dp.callback_query(lambda c: c.data == "current_page_info")
async def current_page_info(callback: types.CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
    await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    stats = pager.get_stats()
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
    for page_name, info in stats.items():
        print(f"{page_name}: {info['range']} ‚Äî {info['count']} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    print()

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
