[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["ai_shell_command_generator*"]
exclude = ["tests*", "docs*"]

[project]
name = "ai-shell-command-generator"
version = "2.5.0"
authors = [
    {name = "Tim Kitchens", email = "your-email@example.com"},
]
description = "AI-powered shell command generator with dual provider support and safety features"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Shells",
    "Topic :: System :: System Shells",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
keywords = ["ai", "shell", "command", "generator", "anthropic", "ollama", "claude", "gpt-oss", "cli"]
dependencies = [
    "anthropic>=0.69.0",
    "openai>=1.0.0",
    "python-dotenv>=1.1.1",
    "click>=8.3.0",
    "pyperclip>=1.11.0",
    "ollama>=0.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
ai-shell = "ai_shell_command_generator.cli.commands:main"
aisc = "ai_shell_command_generator.cli.commands:main"

[project.urls]
Homepage = "https://github.com/codingthefuturewithai/ai-shell-command-generator"
Repository = "https://github.com/codingthefuturewithai/ai-shell-command-generator"
Issues = "https://github.com/codingthefuturewithai/ai-shell-command-generator/issues"
Documentation = "https://github.com/codingthefuturewithai/ai-shell-command-generator#readme"

[tool.black]
line-length = 88
target-version = ['py310']

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short"
]

[tool.coverage.run]
source = ["ai_shell_command_generator"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
