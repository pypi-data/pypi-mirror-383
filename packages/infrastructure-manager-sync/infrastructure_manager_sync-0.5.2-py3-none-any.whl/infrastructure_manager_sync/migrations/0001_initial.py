# Generated by Django 4.1.8 on 2023-05-12 13:20

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import utilities.json


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("virtualization", "0034_standardize_description_comments"),
        ("extras", "0092_delete_jobresult"),
        ("tenancy", "0010_tenant_relax_uniqueness"),
        ("dcim", "0171_cabletermination_change_logging"),
    ]

    operations = [
        migrations.CreateModel(
            name="InfrastructureManagerSyncVMInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=utilities.json.CustomFieldJSONEncoder,
                    ),
                ),
                ("backup_plan", models.CharField(blank=True, max_length=100)),
                ("backup_type", models.CharField(blank=True, max_length=100)),
                ("criticality", models.CharField(blank=True, max_length=30)),
                ("environment", models.CharField(blank=True, max_length=30)),
                ("financial_info", models.CharField(blank=True, max_length=30)),
                ("licensing", models.CharField(blank=True, max_length=30)),
                ("owner", models.CharField(blank=True, max_length=100)),
                ("service_info", models.CharField(blank=True, max_length=30)),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        through="extras.TaggedItem", to="extras.Tag"
                    ),
                ),
                (
                    "vm",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="InfrastructureManagerSyncVMInfo",
                        to="virtualization.virtualmachine",
                    ),
                ),
            ],
            options={
                "ordering": ("pk",),
            },
        ),
        migrations.CreateModel(
            name="InfrastructureManagerSync",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=utilities.json.CustomFieldJSONEncoder,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("fqdn", models.CharField(max_length=100)),
                ("username", models.CharField(max_length=100)),
                ("password", models.CharField(default="ChangeMe", max_length=100)),
                ("entry_type", models.CharField(blank=True, max_length=30)),
                ("enabled", models.BooleanField(default=True)),
                ("comments", models.TextField(blank=True)),
                (
                    "cluster_tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="infrastructuremanagersync",
                        to="tenancy.tenant",
                    ),
                ),
                (
                    "primary_site",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="infrastructuremanagersync_sync",
                        to="dcim.site",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        through="extras.TaggedItem", to="extras.Tag"
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
            },
        ),
    ]
