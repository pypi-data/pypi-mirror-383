[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "joplin-mcp"
version = "0.4.1"
description = "Model Context Protocol (MCP) server for Joplin note-taking application"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Alon Diament"}
]
maintainers = [
    {name = "Alon Diament"}
]
keywords = ["joplin", "mcp", "model-context-protocol", "notes", "ai", "assistant"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    # Project requires Python 3.10+
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing",
    "Topic :: Office/Business",
]
requires-python = ">=3.10"
dependencies = [
    "mcp>=1,<2",
    "joppy>=1.0.0",
    "fastmcp>=2,<3",
    "pydantic>=2,<3",
    "httpx>=0.24,<1",
    "typing-extensions>=4.0.0",
    "PyYAML>=6.0.0",
    "beautifulsoup4>=4.9.0",
    "markdownify>=0.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "coverage>=7.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.0.0",
    "mkdocstrings[python]>=0.20.0",
]

[project.urls]
Homepage = "https://github.com/alondmnt/joplin-mcp"
Documentation = "https://github.com/alondmnt/joplin-mcp/blob/main/README.md"
Repository = "https://github.com/alondmnt/joplin-mcp"
Issues = "https://github.com/alondmnt/joplin-mcp/issues"

[project.scripts]
joplin-mcp = "joplin_mcp.server:main"
joplin-mcp-server = "joplin_mcp.server:main"
joplin-mcp-install = "joplin_mcp.install:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
joplin_mcp = ["py.typed"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = false
warn_unreachable = false
warn_unused_configs = true
warn_unused_ignores = false

# Per-module configuration
[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "joplin_mcp.config"
ignore_errors = true

[[tool.mypy.overrides]]
module = "joplin_mcp.server"
ignore_errors = true

[[tool.mypy.overrides]]
module = "joplin_mcp"
ignore_errors = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/joplin_mcp",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=20",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 
