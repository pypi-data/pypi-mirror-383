# -*- coding: utf-8 -*-
# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: raystack/raccoon/v1beta1/raccoon.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import ConnectASGIApplication, ConnectWSGIApplication, Endpoint, EndpointSync
import raystack.raccoon.v1beta1.raccoon_pb2 as raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2


class EventService(Protocol):
    async def send_event(self, request: raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventRequest, ctx: RequestContext) -> raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class EventServiceASGIApplication(ConnectASGIApplication):
    def __init__(self, service: EventService, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/raystack.raccoon.v1beta1.EventService/SendEvent": Endpoint.unary(
                    method=MethodInfo(
                        name="SendEvent",
                        service_name="raystack.raccoon.v1beta1.EventService",
                        input=raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventRequest,
                        output=raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.send_event,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/raystack.raccoon.v1beta1.EventService"


class EventServiceClient(ConnectClient):
    async def send_event(
        self,
        request: raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="SendEvent",
                service_name="raystack.raccoon.v1beta1.EventService",
                input=raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventRequest,
                output=raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class EventServiceSync(Protocol):
    def send_event(self, request: raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventRequest, ctx: RequestContext) -> raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class EventServiceWSGIApplication(ConnectWSGIApplication):
    def __init__(self, service: EventServiceSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/raystack.raccoon.v1beta1.EventService/SendEvent": EndpointSync.unary(
                    method=MethodInfo(
                        name="SendEvent",
                        service_name="raystack.raccoon.v1beta1.EventService",
                        input=raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventRequest,
                        output=raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.send_event,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/raystack.raccoon.v1beta1.EventService"


class EventServiceClientSync(ConnectClientSync):
    def send_event(
        self,
        request: raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="SendEvent",
                service_name="raystack.raccoon.v1beta1.EventService",
                input=raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventRequest,
                output=raystack_dot_raccoon_dot_v1beta1_dot_raccoon__pb2.SendEventResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
