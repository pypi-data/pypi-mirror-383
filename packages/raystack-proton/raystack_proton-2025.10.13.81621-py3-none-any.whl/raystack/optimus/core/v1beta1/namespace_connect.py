# -*- coding: utf-8 -*-
# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: raystack/optimus/core/v1beta1/namespace.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import ConnectASGIApplication, ConnectWSGIApplication, Endpoint, EndpointSync
import raystack.optimus.core.v1beta1.namespace_pb2 as raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2


class NamespaceService(Protocol):
    async def register_project_namespace(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def list_project_namespaces(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def get_namespace(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class NamespaceServiceASGIApplication(ConnectASGIApplication):
    def __init__(self, service: NamespaceService, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/raystack.optimus.core.v1beta1.NamespaceService/RegisterProjectNamespace": Endpoint.unary(
                    method=MethodInfo(
                        name="RegisterProjectNamespace",
                        service_name="raystack.optimus.core.v1beta1.NamespaceService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.register_project_namespace,
                ),
                "/raystack.optimus.core.v1beta1.NamespaceService/ListProjectNamespaces": Endpoint.unary(
                    method=MethodInfo(
                        name="ListProjectNamespaces",
                        service_name="raystack.optimus.core.v1beta1.NamespaceService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list_project_namespaces,
                ),
                "/raystack.optimus.core.v1beta1.NamespaceService/GetNamespace": Endpoint.unary(
                    method=MethodInfo(
                        name="GetNamespace",
                        service_name="raystack.optimus.core.v1beta1.NamespaceService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get_namespace,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/raystack.optimus.core.v1beta1.NamespaceService"


class NamespaceServiceClient(ConnectClient):
    async def register_project_namespace(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="RegisterProjectNamespace",
                service_name="raystack.optimus.core.v1beta1.NamespaceService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def list_project_namespaces(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="ListProjectNamespaces",
                service_name="raystack.optimus.core.v1beta1.NamespaceService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def get_namespace(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="GetNamespace",
                service_name="raystack.optimus.core.v1beta1.NamespaceService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class NamespaceServiceSync(Protocol):
    def register_project_namespace(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def list_project_namespaces(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def get_namespace(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class NamespaceServiceWSGIApplication(ConnectWSGIApplication):
    def __init__(self, service: NamespaceServiceSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/raystack.optimus.core.v1beta1.NamespaceService/RegisterProjectNamespace": EndpointSync.unary(
                    method=MethodInfo(
                        name="RegisterProjectNamespace",
                        service_name="raystack.optimus.core.v1beta1.NamespaceService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.register_project_namespace,
                ),
                "/raystack.optimus.core.v1beta1.NamespaceService/ListProjectNamespaces": EndpointSync.unary(
                    method=MethodInfo(
                        name="ListProjectNamespaces",
                        service_name="raystack.optimus.core.v1beta1.NamespaceService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list_project_namespaces,
                ),
                "/raystack.optimus.core.v1beta1.NamespaceService/GetNamespace": EndpointSync.unary(
                    method=MethodInfo(
                        name="GetNamespace",
                        service_name="raystack.optimus.core.v1beta1.NamespaceService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get_namespace,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/raystack.optimus.core.v1beta1.NamespaceService"


class NamespaceServiceClientSync(ConnectClientSync):
    def register_project_namespace(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="RegisterProjectNamespace",
                service_name="raystack.optimus.core.v1beta1.NamespaceService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.RegisterProjectNamespaceResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def list_project_namespaces(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="ListProjectNamespaces",
                service_name="raystack.optimus.core.v1beta1.NamespaceService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.ListProjectNamespacesResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def get_namespace(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="GetNamespace",
                service_name="raystack.optimus.core.v1beta1.NamespaceService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_namespace__pb2.GetNamespaceResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
