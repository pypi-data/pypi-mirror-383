# -*- coding: utf-8 -*-
# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: raystack/optimus/core/v1beta1/replay.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import ConnectASGIApplication, ConnectWSGIApplication, Endpoint, EndpointSync
import raystack.optimus.core.v1beta1.replay_pb2 as raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2


class ReplayService(Protocol):
    async def replay(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def replay_dry_run(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def list_replay(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def get_replay(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class ReplayServiceASGIApplication(ConnectASGIApplication):
    def __init__(self, service: ReplayService, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/raystack.optimus.core.v1beta1.ReplayService/Replay": Endpoint.unary(
                    method=MethodInfo(
                        name="Replay",
                        service_name="raystack.optimus.core.v1beta1.ReplayService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.replay,
                ),
                "/raystack.optimus.core.v1beta1.ReplayService/ReplayDryRun": Endpoint.unary(
                    method=MethodInfo(
                        name="ReplayDryRun",
                        service_name="raystack.optimus.core.v1beta1.ReplayService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.replay_dry_run,
                ),
                "/raystack.optimus.core.v1beta1.ReplayService/ListReplay": Endpoint.unary(
                    method=MethodInfo(
                        name="ListReplay",
                        service_name="raystack.optimus.core.v1beta1.ReplayService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list_replay,
                ),
                "/raystack.optimus.core.v1beta1.ReplayService/GetReplay": Endpoint.unary(
                    method=MethodInfo(
                        name="GetReplay",
                        service_name="raystack.optimus.core.v1beta1.ReplayService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get_replay,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/raystack.optimus.core.v1beta1.ReplayService"


class ReplayServiceClient(ConnectClient):
    async def replay(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Replay",
                service_name="raystack.optimus.core.v1beta1.ReplayService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def replay_dry_run(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="ReplayDryRun",
                service_name="raystack.optimus.core.v1beta1.ReplayService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def list_replay(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="ListReplay",
                service_name="raystack.optimus.core.v1beta1.ReplayService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def get_replay(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="GetReplay",
                service_name="raystack.optimus.core.v1beta1.ReplayService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class ReplayServiceSync(Protocol):
    def replay(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def replay_dry_run(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def list_replay(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def get_replay(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class ReplayServiceWSGIApplication(ConnectWSGIApplication):
    def __init__(self, service: ReplayServiceSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/raystack.optimus.core.v1beta1.ReplayService/Replay": EndpointSync.unary(
                    method=MethodInfo(
                        name="Replay",
                        service_name="raystack.optimus.core.v1beta1.ReplayService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.replay,
                ),
                "/raystack.optimus.core.v1beta1.ReplayService/ReplayDryRun": EndpointSync.unary(
                    method=MethodInfo(
                        name="ReplayDryRun",
                        service_name="raystack.optimus.core.v1beta1.ReplayService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.replay_dry_run,
                ),
                "/raystack.optimus.core.v1beta1.ReplayService/ListReplay": EndpointSync.unary(
                    method=MethodInfo(
                        name="ListReplay",
                        service_name="raystack.optimus.core.v1beta1.ReplayService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list_replay,
                ),
                "/raystack.optimus.core.v1beta1.ReplayService/GetReplay": EndpointSync.unary(
                    method=MethodInfo(
                        name="GetReplay",
                        service_name="raystack.optimus.core.v1beta1.ReplayService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get_replay,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/raystack.optimus.core.v1beta1.ReplayService"


class ReplayServiceClientSync(ConnectClientSync):
    def replay(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Replay",
                service_name="raystack.optimus.core.v1beta1.ReplayService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def replay_dry_run(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="ReplayDryRun",
                service_name="raystack.optimus.core.v1beta1.ReplayService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ReplayDryRunResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def list_replay(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="ListReplay",
                service_name="raystack.optimus.core.v1beta1.ReplayService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.ListReplayResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def get_replay(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="GetReplay",
                service_name="raystack.optimus.core.v1beta1.ReplayService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_replay__pb2.GetReplayResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
