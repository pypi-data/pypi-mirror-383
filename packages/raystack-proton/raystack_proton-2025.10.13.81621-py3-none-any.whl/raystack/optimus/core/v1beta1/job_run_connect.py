# -*- coding: utf-8 -*-
# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: raystack/optimus/core/v1beta1/job_run.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import ConnectASGIApplication, ConnectWSGIApplication, Endpoint, EndpointSync
import raystack.optimus.core.v1beta1.job_run_pb2 as raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2


class JobRunService(Protocol):
    async def job_run_input(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def job_run(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def register_job_event(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def upload_to_scheduler(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class JobRunServiceASGIApplication(ConnectASGIApplication):
    def __init__(self, service: JobRunService, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/raystack.optimus.core.v1beta1.JobRunService/JobRunInput": Endpoint.unary(
                    method=MethodInfo(
                        name="JobRunInput",
                        service_name="raystack.optimus.core.v1beta1.JobRunService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.job_run_input,
                ),
                "/raystack.optimus.core.v1beta1.JobRunService/JobRun": Endpoint.unary(
                    method=MethodInfo(
                        name="JobRun",
                        service_name="raystack.optimus.core.v1beta1.JobRunService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.job_run,
                ),
                "/raystack.optimus.core.v1beta1.JobRunService/RegisterJobEvent": Endpoint.unary(
                    method=MethodInfo(
                        name="RegisterJobEvent",
                        service_name="raystack.optimus.core.v1beta1.JobRunService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.register_job_event,
                ),
                "/raystack.optimus.core.v1beta1.JobRunService/UploadToScheduler": Endpoint.unary(
                    method=MethodInfo(
                        name="UploadToScheduler",
                        service_name="raystack.optimus.core.v1beta1.JobRunService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.upload_to_scheduler,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/raystack.optimus.core.v1beta1.JobRunService"


class JobRunServiceClient(ConnectClient):
    async def job_run_input(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="JobRunInput",
                service_name="raystack.optimus.core.v1beta1.JobRunService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def job_run(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="JobRun",
                service_name="raystack.optimus.core.v1beta1.JobRunService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def register_job_event(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="RegisterJobEvent",
                service_name="raystack.optimus.core.v1beta1.JobRunService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def upload_to_scheduler(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="UploadToScheduler",
                service_name="raystack.optimus.core.v1beta1.JobRunService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class JobRunServiceSync(Protocol):
    def job_run_input(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def job_run(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def register_job_event(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def upload_to_scheduler(self, request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerRequest, ctx: RequestContext) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class JobRunServiceWSGIApplication(ConnectWSGIApplication):
    def __init__(self, service: JobRunServiceSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/raystack.optimus.core.v1beta1.JobRunService/JobRunInput": EndpointSync.unary(
                    method=MethodInfo(
                        name="JobRunInput",
                        service_name="raystack.optimus.core.v1beta1.JobRunService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.job_run_input,
                ),
                "/raystack.optimus.core.v1beta1.JobRunService/JobRun": EndpointSync.unary(
                    method=MethodInfo(
                        name="JobRun",
                        service_name="raystack.optimus.core.v1beta1.JobRunService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.job_run,
                ),
                "/raystack.optimus.core.v1beta1.JobRunService/RegisterJobEvent": EndpointSync.unary(
                    method=MethodInfo(
                        name="RegisterJobEvent",
                        service_name="raystack.optimus.core.v1beta1.JobRunService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.register_job_event,
                ),
                "/raystack.optimus.core.v1beta1.JobRunService/UploadToScheduler": EndpointSync.unary(
                    method=MethodInfo(
                        name="UploadToScheduler",
                        service_name="raystack.optimus.core.v1beta1.JobRunService",
                        input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerRequest,
                        output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.upload_to_scheduler,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/raystack.optimus.core.v1beta1.JobRunService"


class JobRunServiceClientSync(ConnectClientSync):
    def job_run_input(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="JobRunInput",
                service_name="raystack.optimus.core.v1beta1.JobRunService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunInputResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def job_run(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="JobRun",
                service_name="raystack.optimus.core.v1beta1.JobRunService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.JobRunResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def register_job_event(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="RegisterJobEvent",
                service_name="raystack.optimus.core.v1beta1.JobRunService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.RegisterJobEventResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def upload_to_scheduler(
        self,
        request: raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="UploadToScheduler",
                service_name="raystack.optimus.core.v1beta1.JobRunService",
                input=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerRequest,
                output=raystack_dot_optimus_dot_core_dot_v1beta1_dot_job__run__pb2.UploadToSchedulerResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
