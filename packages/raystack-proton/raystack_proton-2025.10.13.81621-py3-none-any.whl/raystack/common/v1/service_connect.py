# -*- coding: utf-8 -*-
# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: raystack/common/v1/service.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import ConnectASGIApplication, ConnectWSGIApplication, Endpoint, EndpointSync
import raystack.common.v1.service_pb2 as raystack_dot_common_dot_v1_dot_service__pb2


class CommonService(Protocol):
    async def get_version(self, request: raystack_dot_common_dot_v1_dot_service__pb2.GetVersionRequest, ctx: RequestContext) -> raystack_dot_common_dot_v1_dot_service__pb2.GetVersionResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class CommonServiceASGIApplication(ConnectASGIApplication):
    def __init__(self, service: CommonService, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/raystack.common.v1.CommonService/GetVersion": Endpoint.unary(
                    method=MethodInfo(
                        name="GetVersion",
                        service_name="raystack.common.v1.CommonService",
                        input=raystack_dot_common_dot_v1_dot_service__pb2.GetVersionRequest,
                        output=raystack_dot_common_dot_v1_dot_service__pb2.GetVersionResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get_version,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/raystack.common.v1.CommonService"


class CommonServiceClient(ConnectClient):
    async def get_version(
        self,
        request: raystack_dot_common_dot_v1_dot_service__pb2.GetVersionRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_common_dot_v1_dot_service__pb2.GetVersionResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="GetVersion",
                service_name="raystack.common.v1.CommonService",
                input=raystack_dot_common_dot_v1_dot_service__pb2.GetVersionRequest,
                output=raystack_dot_common_dot_v1_dot_service__pb2.GetVersionResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class CommonServiceSync(Protocol):
    def get_version(self, request: raystack_dot_common_dot_v1_dot_service__pb2.GetVersionRequest, ctx: RequestContext) -> raystack_dot_common_dot_v1_dot_service__pb2.GetVersionResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class CommonServiceWSGIApplication(ConnectWSGIApplication):
    def __init__(self, service: CommonServiceSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/raystack.common.v1.CommonService/GetVersion": EndpointSync.unary(
                    method=MethodInfo(
                        name="GetVersion",
                        service_name="raystack.common.v1.CommonService",
                        input=raystack_dot_common_dot_v1_dot_service__pb2.GetVersionRequest,
                        output=raystack_dot_common_dot_v1_dot_service__pb2.GetVersionResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get_version,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/raystack.common.v1.CommonService"


class CommonServiceClientSync(ConnectClientSync):
    def get_version(
        self,
        request: raystack_dot_common_dot_v1_dot_service__pb2.GetVersionRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_common_dot_v1_dot_service__pb2.GetVersionResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="GetVersion",
                service_name="raystack.common.v1.CommonService",
                input=raystack_dot_common_dot_v1_dot_service__pb2.GetVersionRequest,
                output=raystack_dot_common_dot_v1_dot_service__pb2.GetVersionResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
