# -*- coding: utf-8 -*-
# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: raystack/entropy/v1beta1/module.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import ConnectASGIApplication, ConnectWSGIApplication, Endpoint, EndpointSync
import raystack.entropy.v1beta1.module_pb2 as raystack_dot_entropy_dot_v1beta1_dot_module__pb2


class ModuleService(Protocol):
    async def list_modules(self, request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesRequest, ctx: RequestContext) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def get_module(self, request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleRequest, ctx: RequestContext) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def create_module(self, request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleRequest, ctx: RequestContext) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def update_module(self, request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleRequest, ctx: RequestContext) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def delete_module(self, request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleRequest, ctx: RequestContext) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class ModuleServiceASGIApplication(ConnectASGIApplication):
    def __init__(self, service: ModuleService, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/raystack.entropy.v1beta1.ModuleService/ListModules": Endpoint.unary(
                    method=MethodInfo(
                        name="ListModules",
                        service_name="raystack.entropy.v1beta1.ModuleService",
                        input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesRequest,
                        output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list_modules,
                ),
                "/raystack.entropy.v1beta1.ModuleService/GetModule": Endpoint.unary(
                    method=MethodInfo(
                        name="GetModule",
                        service_name="raystack.entropy.v1beta1.ModuleService",
                        input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleRequest,
                        output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get_module,
                ),
                "/raystack.entropy.v1beta1.ModuleService/CreateModule": Endpoint.unary(
                    method=MethodInfo(
                        name="CreateModule",
                        service_name="raystack.entropy.v1beta1.ModuleService",
                        input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleRequest,
                        output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.create_module,
                ),
                "/raystack.entropy.v1beta1.ModuleService/UpdateModule": Endpoint.unary(
                    method=MethodInfo(
                        name="UpdateModule",
                        service_name="raystack.entropy.v1beta1.ModuleService",
                        input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleRequest,
                        output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.update_module,
                ),
                "/raystack.entropy.v1beta1.ModuleService/DeleteModule": Endpoint.unary(
                    method=MethodInfo(
                        name="DeleteModule",
                        service_name="raystack.entropy.v1beta1.ModuleService",
                        input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleRequest,
                        output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.delete_module,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/raystack.entropy.v1beta1.ModuleService"


class ModuleServiceClient(ConnectClient):
    async def list_modules(
        self,
        request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="ListModules",
                service_name="raystack.entropy.v1beta1.ModuleService",
                input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesRequest,
                output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def get_module(
        self,
        request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="GetModule",
                service_name="raystack.entropy.v1beta1.ModuleService",
                input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleRequest,
                output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def create_module(
        self,
        request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="CreateModule",
                service_name="raystack.entropy.v1beta1.ModuleService",
                input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleRequest,
                output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def update_module(
        self,
        request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="UpdateModule",
                service_name="raystack.entropy.v1beta1.ModuleService",
                input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleRequest,
                output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def delete_module(
        self,
        request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="DeleteModule",
                service_name="raystack.entropy.v1beta1.ModuleService",
                input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleRequest,
                output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class ModuleServiceSync(Protocol):
    def list_modules(self, request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesRequest, ctx: RequestContext) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def get_module(self, request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleRequest, ctx: RequestContext) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def create_module(self, request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleRequest, ctx: RequestContext) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def update_module(self, request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleRequest, ctx: RequestContext) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def delete_module(self, request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleRequest, ctx: RequestContext) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class ModuleServiceWSGIApplication(ConnectWSGIApplication):
    def __init__(self, service: ModuleServiceSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/raystack.entropy.v1beta1.ModuleService/ListModules": EndpointSync.unary(
                    method=MethodInfo(
                        name="ListModules",
                        service_name="raystack.entropy.v1beta1.ModuleService",
                        input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesRequest,
                        output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list_modules,
                ),
                "/raystack.entropy.v1beta1.ModuleService/GetModule": EndpointSync.unary(
                    method=MethodInfo(
                        name="GetModule",
                        service_name="raystack.entropy.v1beta1.ModuleService",
                        input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleRequest,
                        output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get_module,
                ),
                "/raystack.entropy.v1beta1.ModuleService/CreateModule": EndpointSync.unary(
                    method=MethodInfo(
                        name="CreateModule",
                        service_name="raystack.entropy.v1beta1.ModuleService",
                        input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleRequest,
                        output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.create_module,
                ),
                "/raystack.entropy.v1beta1.ModuleService/UpdateModule": EndpointSync.unary(
                    method=MethodInfo(
                        name="UpdateModule",
                        service_name="raystack.entropy.v1beta1.ModuleService",
                        input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleRequest,
                        output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.update_module,
                ),
                "/raystack.entropy.v1beta1.ModuleService/DeleteModule": EndpointSync.unary(
                    method=MethodInfo(
                        name="DeleteModule",
                        service_name="raystack.entropy.v1beta1.ModuleService",
                        input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleRequest,
                        output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.delete_module,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/raystack.entropy.v1beta1.ModuleService"


class ModuleServiceClientSync(ConnectClientSync):
    def list_modules(
        self,
        request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="ListModules",
                service_name="raystack.entropy.v1beta1.ModuleService",
                input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesRequest,
                output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.ListModulesResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def get_module(
        self,
        request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="GetModule",
                service_name="raystack.entropy.v1beta1.ModuleService",
                input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleRequest,
                output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.GetModuleResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def create_module(
        self,
        request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="CreateModule",
                service_name="raystack.entropy.v1beta1.ModuleService",
                input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleRequest,
                output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.CreateModuleResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def update_module(
        self,
        request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="UpdateModule",
                service_name="raystack.entropy.v1beta1.ModuleService",
                input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleRequest,
                output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.UpdateModuleResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def delete_module(
        self,
        request: raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="DeleteModule",
                service_name="raystack.entropy.v1beta1.ModuleService",
                input=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleRequest,
                output=raystack_dot_entropy_dot_v1beta1_dot_module__pb2.DeleteModuleResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
