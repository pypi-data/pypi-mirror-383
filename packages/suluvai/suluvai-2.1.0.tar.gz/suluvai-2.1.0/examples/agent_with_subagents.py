"""
Agent with SubAgents Example - DeepAgents compatible
Run: python examples/agent_with_subagents.py
"""

import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain_core.tools import tool
from suluvai import create_agent, AgentConfig

# Load environment variables
load_dotenv()

# Tools for different subagents
@tool
def search_web(query: str) -> str:
    """Search the web for information"""
    return f"Search results for '{query}': [Mock results about {query}]"

@tool
def analyze_data(data: str) -> str:
    """Analyze data and find insights"""
    return f"Analysis of data: Key insight - {data} shows positive trends"

@tool
def format_report(content: str) -> str:
    """Format content as a professional report"""
    return f"# Professional Report\n\n{content}\n\n---\n*Generated by SuluvAI*"

def main():
    print("=" * 60)
    print("Multi-Agent System Example")
    print("=" * 60)
    print()
    
    llm = ChatOpenAI(model="gpt-4o-mini", temperature=0, verbose=True)
    
    # Define subagents (deepagents style - user controls prompts)
    researcher = {
        "name": "researcher",
        "description": "Searches and gathers information from the web",
        "prompt": """You are a research specialist.

Your job:
- Search the web thoroughly using search_web tool
- Gather comprehensive information
- Save findings to research_notes.md file
- Be thorough and cite sources

Always verify information from multiple angles.""",
        "tools": [search_web]
    }
    
    analyst = {
        "name": "analyst",
        "description": "Analyzes data and finds insights",
        "prompt": """You are a data analysis expert.

Your job:
- Analyze data using analyze_data tool
- Find patterns and insights
- Save analysis to analysis.md file
- Be precise and data-driven

Focus on actionable insights.""",
        "tools": [analyze_data]
    }
    
    writer = {
        "name": "writer",
        "description": "Writes professional reports",
        "prompt": """You are a professional report writer.

Your job:
- Read all research and analysis files
- Write clear, engaging reports using format_report
- Save final report to final_report.md
- Write for executive audience

Make complex topics accessible.""",
        "tools": [format_report]
    }
    
    # Create main coordinator agent
    agent = create_agent(
        tools=[search_web, analyze_data, format_report],
        instructions="""You are a project coordinator managing a research team.

Your team:
- researcher: Gathers information from the web
- analyst: Analyzes data and finds insights
- writer: Creates professional reports

Your workflow:
1. Break down the task using the planning tool
2. Delegate research to researcher subagent
3. Delegate analysis to analyst subagent
4. Delegate report writing to writer subagent
5. Review final output

Coordinate efficiently. Each subagent has its own context,
so give them clear, complete instructions.""",
        subagents=[researcher, analyst, writer],
        config=AgentConfig(
            storage_mode="local",
            local_storage_path="./multi_agent_workspace"
        ),
        model=llm
    )
    
    print("Task: Simple research task\n")
    print("Agent working...")
    print("-" * 60)
    
    result = agent.invoke(
        {
            "messages": [{
                "role": "user",
                "content": "Search for AI information and create a brief summary"
            }]
        },
        {"recursion_limit": 15},
        debug=True
    )
    
    print(result["messages"][-1].content)
    print("-" * 60)
    
    # Show created files
    if "files" in result and result["files"]:
        print(f"\n[Files created: {len(result['files'])}]")
        for filepath in result["files"].keys():
            print(f"  - {filepath}")
    
    print("\n" + "=" * 60)
    print("Multi-agent workflow complete!")
    print("=" * 60)

if __name__ == "__main__":
    main()
