[project]
name = "crosszip"
version = "1.3.0"
description = "Apply a given function to all combinations of elements from multiple iterables"
readme = "README.md"
authors = [
    { name = "Indrajeet Patil", email = "patilindrajeet.science@gmail.com" }
]
requires-python = ">=3.10"
license = { file = "LICENSE.md" }
keywords = ["iterables"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = ["pytest>=8.4.2"]

[project.urls]
Homepage = "https://github.com/IndrajeetPatil/crosszip"
Documentation = "https://indrajeetpatil.github.io/crosszip/"
Repository = "https://github.com/IndrajeetPatil/crosszip"
Issues = "https://github.com/IndrajeetPatil/crosszip/issues"
Changelog = "https://github.com/IndrajeetPatil/crosszip/blob/main/CHANGELOG.md"

[project.entry-points.pytest11]
crosszip_parametrize = "crosszip.plugin"

[dependency-groups]
dev = [
    "coverage>=7.10.7",
    "jupyter>=1.1.1",
    "mkdocs>=1.6.1",
    "mkdocs-llmstxt>=0.4.0",
    "mkdocs-material>=9.6.21",
    "mkdocstrings-python>=1.18.2",
    "mypy>=1.18.2",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-codspeed>=4.1.1",
    "pytest-cov>=7.0.0",
    "pytest-random-order>=1.2.0",
    "pytest-snapshot>=0.9.0",
    "ruff>=0.14.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
fix = true
preview = true
unsafe-fixes = true

[tool.ruff.lint]
select = ["ALL"]
ignore = ["COM812", "CPY", "D"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # docstring requirements
    "D",
    "DOC",
    # tests can have asserts
    "S101",
]

[tool.ruff.format]
preview = true
docstring-code-format = true

[tool.pytest.ini_options]
addopts = [
    # error on problems parsing pytest configuration
    "--strict-config",
    # error on using unregistered marker
    "--strict-markers",
    # show extra test summary info for everything
    "-ra",
    # include more verbose output
    "--verbose",
    # using pytest-random-order plugin option
    "--random-order",
]
testpaths = ["tests"]
filterwarnings = ["error"]
xfail_strict = true
python_files = ["test_*.py", "test-*.py", "tests.py", "test.py"]

[tool.coverage.run]
branch = true
source = ["crosszip"]

[tool.coverage.report]
fail_under = 100
format = "markdown"
sort = "-Cover"
show_missing = true
skip_empty = true

[tool.mypy]
exclude = ['.venv', 'build', 'dist', 'docs']
strict = true
pretty = true
# Additional strictness beyond `strict=true`
disallow_any_unimported = true
disallow_untyped_decorators = true
extra_checks = true
enable_error_code = [
    "truthy-bool", # Flag using non-boolean expressions in boolean contexts
    "redundant-expr", # Flag redundant expressions that don't have effect
    "unused-awaitable", # Flag when async function results aren't awaited or stored
    "comparison-overlap", # Flag comparisons that always evaluate to True or False
    "ignore-without-code", # Flag # type: ignore comments that don't specify an error code
    "possibly-undefined", # Flag variables that might be undefined at runtime

]
warn_unreachable = true
warn_unused_configs = true
