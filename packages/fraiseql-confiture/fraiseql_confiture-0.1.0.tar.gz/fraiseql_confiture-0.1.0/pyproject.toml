[project]
name = "fraiseql-confiture"
version = "0.1.0"
description = "PostgreSQL migrations, sweetly done 🍓"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "evoludigit", email = "lionel@fraiseql.com"}
]
keywords = ["postgresql", "migration", "database", "schema", "ddl"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "typer>=0.12.0",
    "rich>=13.7.0",
    "pydantic>=2.5.0",
    "pyyaml>=6.0.1",
    "psycopg[binary]>=3.1.0",
    "sqlparse>=0.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-watch>=4.2.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "pre-commit>=3.5.0",
    "types-pyyaml>=6.0.0",
    "maturin>=1.7.0",
]

fraiseql = [
    # FraiseQL integration (requires Python 3.13+)
    # Will be enabled in Phase 1 Milestone 1.14
]

[project.urls]
Homepage = "https://github.com/fraiseql/confiture"
Documentation = "https://github.com/fraiseql/confiture"
Repository = "https://github.com/fraiseql/confiture"
Issues = "https://github.com/fraiseql/confiture/issues"
FraiseQL = "https://github.com/fraiseql/fraiseql"

[project.scripts]
confiture = "confiture.cli.main:app"

[build-system]
requires = ["maturin>=1.7,<2.0"]
build-backend = "maturin"

[tool.maturin]
python-source = "python"
module-name = "confiture._core"
features = ["pyo3/extension-module"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
pythonpath = ["python"]
addopts = [
    "--strict-markers",
    "--tb=short",
]
markers = [
    "unit: Unit tests (no database required)",
    "integration: Integration tests (require database)",
    "e2e: End-to-end tests (full workflows)",
    "slow: Slow tests (skip in fast CI)",
    "benchmark: Performance benchmark tests",
]

[tool.coverage.run]
source = ["python/confiture"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.ruff]
line-length = 100
target-version = "py311"
src = ["python"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "S101"]  # Allow assert statements in tests

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = "sqlparse.*"
ignore_missing_imports = true

[dependency-groups]
dev = [
    "maturin>=1.9.6",
]
