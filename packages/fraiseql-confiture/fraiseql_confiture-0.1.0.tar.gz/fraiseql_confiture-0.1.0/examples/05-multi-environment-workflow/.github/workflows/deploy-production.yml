name: Deploy to Production

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      confirmation:
        description: 'Type "deploy-to-production" to confirm'
        required: true
        type: string

jobs:
  validate:
    name: Validate Deployment Request
    runs-on: ubuntu-latest

    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "deploy-to-production" ]; then
            echo "‚ùå Invalid confirmation. You must type 'deploy-to-production' to proceed."
            exit 1
          fi
          echo "‚úÖ Confirmation validated"

      - name: Check branch
        run: |
          if [ "${{ github.ref_name }}" != "main" ]; then
            echo "‚ùå Production deployments must be from 'main' branch"
            echo "Current branch: ${{ github.ref_name }}"
            exit 1
          fi
          echo "‚úÖ Deploying from main branch"

  deploy:
    name: Deploy to Production Environment
    needs: validate
    runs-on: ubuntu-latest
    environment: production  # Requires approval in GitHub settings

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Confiture
        run: |
          pip install confiture psycopg[binary]

      - name: Pre-deployment notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "üöÄ Production deployment starting",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment Starting*\n\n*Commit:* ${{ github.sha }}\n*Actor:* ${{ github.actor }}\n*Status:* Backup in progress"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Backup production database
        run: |
          ./scripts/backup_production.sh
        env:
          PRODUCTION_DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
          PRODUCTION_DB_PORT: ${{ secrets.PRODUCTION_DB_PORT }}
          PRODUCTION_DB_NAME: ${{ secrets.PRODUCTION_DB_NAME }}
          PRODUCTION_DB_USER: ${{ secrets.PRODUCTION_DB_USER }}
          PRODUCTION_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}

      - name: Check migration status
        run: |
          confiture migrate status --env production
        env:
          PRODUCTION_DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
          PRODUCTION_DB_PORT: ${{ secrets.PRODUCTION_DB_PORT }}
          PRODUCTION_DB_NAME: ${{ secrets.PRODUCTION_DB_NAME }}
          PRODUCTION_DB_USER: ${{ secrets.PRODUCTION_DB_USER }}
          PRODUCTION_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}

      - name: Dry-run migration (required)
        run: |
          confiture migrate up --env production --dry-run | tee dry-run.log
          cat dry-run.log
        env:
          PRODUCTION_DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
          PRODUCTION_DB_PORT: ${{ secrets.PRODUCTION_DB_PORT }}
          PRODUCTION_DB_NAME: ${{ secrets.PRODUCTION_DB_NAME }}
          PRODUCTION_DB_USER: ${{ secrets.PRODUCTION_DB_USER }}
          PRODUCTION_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}

      - name: Upload dry-run log
        uses: actions/upload-artifact@v3
        with:
          name: production-dry-run
          path: dry-run.log

      - name: Wait for approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Production Deployment Approval Required"
          issue-body: |
            **Production deployment requires approval**

            **Commit:** ${{ github.sha }}
            **Actor:** ${{ github.actor }}
            **Branch:** ${{ github.ref_name }}

            **Review the dry-run log before approving:**
            - Check the Actions artifacts tab for dry-run.log
            - Verify expected migrations
            - Confirm lock duration is acceptable
            - Ensure off-peak deployment window

            **To approve:** Add a comment with `/approve`
            **To reject:** Add a comment with `/reject`

      - name: Apply migrations
        run: |
          confiture migrate up --env production --verbose 2>&1 | tee migration.log
        env:
          PRODUCTION_DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
          PRODUCTION_DB_PORT: ${{ secrets.PRODUCTION_DB_PORT }}
          PRODUCTION_DB_NAME: ${{ secrets.PRODUCTION_DB_NAME }}
          PRODUCTION_DB_USER: ${{ secrets.PRODUCTION_DB_USER }}
          PRODUCTION_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}

      - name: Upload migration log
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: production-migration-log
          path: migration.log

      - name: Verify deployment
        run: |
          ./scripts/verify_migration.sh production
        env:
          PRODUCTION_DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
          PRODUCTION_DB_PORT: ${{ secrets.PRODUCTION_DB_PORT }}
          PRODUCTION_DB_NAME: ${{ secrets.PRODUCTION_DB_NAME }}
          PRODUCTION_DB_USER: ${{ secrets.PRODUCTION_DB_USER }}
          PRODUCTION_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}

      - name: Success notification
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "‚úÖ Production deployment successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment Successful* ‚úÖ\n\n*Commit:* ${{ github.sha }}\n*Actor:* ${{ github.actor }}\n*Status:* All migrations applied and verified\n\n*Next steps:* Monitor application metrics"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Failure notification
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "‚ùå Production deployment failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment Failed* ‚ùå\n\n*Commit:* ${{ github.sha }}\n*Actor:* ${{ github.actor }}\n*Status:* Migration failed or verification failed\n\n*Action Required:* Review logs and execute rollback procedure if necessary\n\n*Backup:* Available in S3\n*Logs:* Check Actions artifacts"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create incident issue on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Production Deployment Failed - Immediate Action Required',
              body: `## Production Deployment Failure

              **Workflow:** ${{ github.workflow }}
              **Run:** ${{ github.run_id }}
              **Commit:** ${{ github.sha }}
              **Actor:** ${{ github.actor }}

              ## Immediate Actions

              1. Review migration logs in Actions artifacts
              2. Check database status: \`confiture migrate status --env production\`
              3. Determine if rollback is needed
              4. Follow rollback procedure: \`./scripts/rollback.sh production\`

              ## Resources

              - Backup: Check S3 bucket
              - Logs: Actions artifacts
              - Rollback script: \`./scripts/rollback.sh\`

              @${{ secrets.ONCALL_TEAM }}
              `,
              labels: ['production', 'incident', 'urgent']
            })
