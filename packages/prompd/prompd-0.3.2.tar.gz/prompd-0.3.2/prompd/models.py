"""Core data models for prompd."""

import re
from typing import Dict, Any, List, Optional, Union
from enum import Enum
from pathlib import Path
from pydantic import BaseModel, Field, field_validator


class ParameterType(str, Enum):
    """Supported parameter types."""
    STRING = "string"
    INTEGER = "integer"
    FLOAT = "float"
    BOOLEAN = "boolean"
    ARRAY = "array"
    OBJECT = "object"
    FILE = "file"


class ParameterDefinition(BaseModel):
    """Parameter definition in prompd metadata."""
    name: str
    type: ParameterType = ParameterType.STRING
    required: bool = False
    default: Optional[Any] = None
    description: str = ""
    example: Optional[Any] = None
    pattern: Optional[str] = None
    min_value: Optional[Union[int, float]] = Field(None, alias="min")
    max_value: Optional[Union[int, float]] = Field(None, alias="max")
    error_message: Optional[str] = None

    @field_validator('name')
    @classmethod
    def validate_name(cls, v):
        """Validate parameter name follows snake_case convention."""
        if not v.replace('_', '').replace('-', '').isalnum():
            raise ValueError(f"Parameter name must be alphanumeric with underscores/hyphens: {v}")
        return v


class ParameterValue(BaseModel):
    """Parameter value with optional metadata."""
    value: Any
    type: Optional[ParameterType] = None
    description: Optional[str] = None

    @classmethod
    def from_value(cls, value: Any) -> "ParameterValue":
        """Create ParameterValue from simple value."""
        return cls(value=value)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "ParameterValue":
        """Create ParameterValue from dictionary with metadata."""
        if "value" in data:
            return cls(**data)
        else:
            # Treat as simple value
            return cls(value=data)


class ContentReference(BaseModel):
    """Base class for content references."""
    pass


class InlineContent(ContentReference):
    """Inline content."""
    content: str


class FileReference(ContentReference):
    """Reference to external file."""
    path: Path


class MultiFileReference(ContentReference):
    """Reference to multiple files."""
    paths: List[Path]


class SectionReference(ContentReference):
    """Reference to section within same file."""
    section: str


def parse_content_reference(value: Union[str, List[str], Dict[str, Any]]) -> ContentReference:
    """Parse content reference from various formats."""
    if isinstance(value, str):
        if value.startswith('#'):
            return SectionReference(section=value[1:])
        elif value.startswith('./') or value.startswith('/'):
            return FileReference(path=Path(value))
        else:
            return InlineContent(content=value)
    elif isinstance(value, list):
        return MultiFileReference(paths=[Path(p) for p in value])
    else:
        raise ValueError(f"Invalid content reference format: {value}")


class UsingPackage(BaseModel):
    """Package reference with required prefix for shorthand access.

    The prefix creates an alias for the package, allowing you to reference
    it with a shorter name (e.g., 'pkg' instead of '@namespace/package@1.0.0').
    """
    name: str
    prefix: str  # Required - the whole point of 'using' is to create a shorthand alias


class PrompdMetadata(BaseModel):
    """Metadata section of prompd file."""
    id: Optional[str] = None  # Machine-readable identifier (kebab-case) - auto-generated from name if not provided
    name: Optional[str] = None  # Human-readable display name (can have spaces)
    description: Optional[str] = None
    version: Optional[str] = None
    author: Optional[str] = None
    tags: List[str] = Field(default_factory=list)
    parameters: List[ParameterDefinition] = Field(default_factory=list)
    requires: List[str] = Field(default_factory=list)
    inputs: Dict[str, Any] = Field(default_factory=dict)
    
    # Composable architecture fields
    using: List[Union[str, UsingPackage]] = Field(default_factory=list)
    inherits: Optional[str] = None
    override: Dict[str, Optional[str]] = Field(default_factory=dict)

    # Content references
    system: Optional[Union[str, List[str]]] = None
    assistant: Optional[Union[str, List[str]]] = None
    context: Optional[Union[str, List[str]]] = None  # Can be a single file or list of files for extraction
    user: Optional[Union[str, List[str]]] = None
    response: Optional[Union[str, List[str]]] = None

    @field_validator('id')
    @classmethod
    def validate_id(cls, v):
        """Validate id follows kebab-case convention."""
        if v and not re.match(r'^[a-z0-9-]+$', v):
            raise ValueError(f"ID must use kebab-case (lowercase letters, numbers, hyphens): {v}")
        return v

    @field_validator('override')
    @classmethod
    def validate_override(cls, v):
        """
        Validate override field format and section IDs.

        Args:
            v: Dictionary of section_id -> file_path mappings

        Returns:
            Validated override dictionary

        Raises:
            ValueError: If override format is invalid
        """
        if not isinstance(v, dict):
            raise ValueError("Override field must be a dictionary mapping section IDs to file paths")

        for section_id, override_path in v.items():
            # Validate section ID format (kebab-case)
            if not isinstance(section_id, str):
                raise ValueError(f"Override section ID must be a string, got {type(section_id).__name__}: {section_id}")

            if not re.match(r'^[a-z0-9-]+$', section_id):
                raise ValueError(f"Override section ID must use kebab-case (lowercase letters, numbers, hyphens): {section_id}")

            # Validate override path (can be None for removal, or string for file path)
            if override_path is not None:
                if not isinstance(override_path, str):
                    raise ValueError(f"Override path must be a string or null, got {type(override_path).__name__}: {override_path}")

                # Validate path format (basic sanity check)
                if not override_path.strip():
                    raise ValueError(f"Override path cannot be empty for section '{section_id}'")

                # Check for obvious path issues
                invalid_chars = ['<', '>', '"', '|', '\0']
                for char in invalid_chars:
                    if char in override_path:
                        raise ValueError(f"Override path contains invalid character '{char}' for section '{section_id}': {override_path}")

        return v
    
    def model_post_init(self, __context):
        """Auto-generate id from name if not provided."""
        if not self.id and self.name:
            # Convert name to kebab-case
            self.id = re.sub(r'[^a-z0-9]+', '-', self.name.lower()).strip('-')


class MessageRole(str, Enum):
    """LLM message roles."""
    SYSTEM = "system"
    USER = "user"
    ASSISTANT = "assistant"


class LLMMessage(BaseModel):
    """Single message in LLM conversation."""
    role: MessageRole
    content: str


class LLMRequest(BaseModel):
    """Complete LLM API request."""
    messages: List[LLMMessage]
    model: Optional[str] = None
    temperature: Optional[float] = None
    max_tokens: Optional[int] = None
    response_format: Optional[Dict[str, Any]] = None
    extra_params: Dict[str, Any] = Field(default_factory=dict)


class LLMResponse(BaseModel):
    """LLM API response."""
    content: str
    model: Optional[str] = None
    usage: Optional[Dict[str, Any]] = None
    metadata: Dict[str, Any] = Field(default_factory=dict)


class PrompdFile(BaseModel):
    """Complete parsed prompd file."""
    metadata: PrompdMetadata
    content: str  # Raw markdown content after frontmatter
    sections: Dict[str, str] = Field(default_factory=dict)  # Parsed sections
    file_path: Optional[Path] = None

    def get_parameter_definitions(self) -> Dict[str, ParameterDefinition]:
        """Get parameter definitions as a lookup dict."""
        return {param.name: param for param in self.metadata.parameters}

    def has_section(self, name: str) -> bool:
        """Check if file has a specific section."""
        return name in self.sections

    def get_section(self, name: str) -> Optional[str]:
        """Get section content by name."""
        return self.sections.get(name)


class ExecutionContext(BaseModel):
    """Context for executing a prompd file."""
    prompd: PrompdFile
    parameters: Dict[str, Any]
    provider: str
    model: str
    api_key: Optional[str] = None
    extra_config: Dict[str, Any] = Field(default_factory=dict)