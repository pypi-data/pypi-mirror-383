import{G as f,H as p,y as m}from"./C8NgpPpc.js";import{L as d,F as r}from"./DJksR8kQ.js";import{S as v,h as l}from"./CpBh97f4.js";const h="$s";function n(...e){const s=typeof e[e.length-1]=="string"?e.pop():void 0;typeof e[0]!="string"&&e.unshift(s);const[a,t]=e;if(!a||typeof a!="string")throw new TypeError("[nuxt] [useState] key must be a string: "+a);if(t!==void 0&&typeof t!="function")throw new Error("[nuxt] [useState] init must be a function: "+t);const c=h+a,u=f(),o=p(u.payload.state,c);if(o.value===void 0&&t){const i=t();if(m(i))return u.payload.state[c]=i,i;o.value=i}return o}const w=()=>n("classificationOptions",()=>[{value:"unclassified",text:"Unclassified"},{value:"cui",text:"Controlled Unclassified Information (CUI)"},{value:"pii",text:"Personally Identifiable Information (PII)"},{value:"phi",text:"Protected Health Information (PHI)"},{value:"other",text:"Other"}]),C=()=>n("problemTypeOptions",()=>[{value:"alert",text:"Alert"},{value:"benchmarking",text:"Benchmarking"},{value:"classification",text:"Classification"},{value:"clustering",text:"Clustering"},{value:"content_generation",text:"Content Generation"},{value:"detection",text:"Detection"},{value:"forecasting",text:"Forecasting"},{value:"goals",text:"Goals"},{value:"sentiment_analysis",text:"Sentiment Analysis"},{value:"summarization",text:"Summarization"},{value:"translation",text:"Translation"},{value:"trend",text:"Trend"},{value:"other",text:"Other"}]),b=()=>n("tagOptions",()=>[{name:"Audio Analysis",selected:!1},{name:"Classification",selected:!1},{name:"Computer Vision",selected:!1},{name:"Decoder",selected:!1},{name:"Encoder",selected:!1},{name:"General",selected:!1},{name:"Generative Model",selected:!1},{name:"Infrared",selected:!1},{name:"NLP",selected:!1},{name:"Object Detection",selected:!1},{name:"Sentiment Analysis",selected:!1},{name:"Regression",selected:!1},{name:"Segmentation",selected:!1},{name:"Tabular",selected:!1},{name:"Time Series",selected:!1}]),D=async()=>{const e=n("customListOptions",()=>[]),s=async()=>{const a=await d();a&&(e.value=[],a.forEach(t=>{e.value.push(new v(t,t))}))};return e.value.length===0&&await s(),{customListOptions:e}};async function S(){const{fetchQACData:e}=await y();await e();const{fetchQAData:s}=await x();await s()}const y=async()=>{const e=n("QACategoryOptions",()=>[]),s=async()=>{const a=await r("qa_categories");a&&(e.value=[],a.forEach(t=>{e.value.push(new l(t.name,t.name,t.description,t.parent))}),e.value.push(new l("Other","Other","","")))};return e.value.length===0&&await s(),{QACategoryOptions:e,fetchQACData:s}},x=async()=>{const e=n("qualityAttributeOptions",()=>[]),s=async()=>{const a=await r("quality_attributes");a&&(e.value=[],a.forEach(t=>{e.value.push(new l(t.name,t.name,t.description,t.parent))}))};return e.value.length===0&&await s(),{qualityAttributeOptions:e,fetchQAData:s}};export{S as a,D as b,C as c,w as d,y as e,x as f,b as u};
