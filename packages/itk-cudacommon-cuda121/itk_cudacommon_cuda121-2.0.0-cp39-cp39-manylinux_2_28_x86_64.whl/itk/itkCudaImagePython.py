# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _CudaCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCudaImagePython
else:
    import _itkCudaImagePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkCudaImageDataManagerPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.itkCudaDataManagerPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython


# This is a Mapping from system byte order to typestr byte order.
_byteorder_typestr = {
    "big":">",
    "little":"<",
}
import sys
_byteorder = _byteorder_typestr[sys.byteorder]

# This is a Mapping from itk pixel types to typestr.
_itk_typestr = {
    "UC":"|u1",
    "US":_byteorder + "u2",
    "UI":_byteorder + "u4",
    "UL":_byteorder + "u8",
    "ULL":_byteorder + "u8",
    "SC":"|i1",
    "SS":_byteorder + "i2",
    "SI":_byteorder + "i4",
    "SL":_byteorder + "i8",
    "SLL":_byteorder + "i8",
    "F":_byteorder + "f4",
    "D":_byteorder + "f8",
}
import os
if os.name == 'nt':
    _itk_typestr['UL'] = _byteorder + "u4"
    _itk_typestr['SL'] = _byteorder + "i4"

def _get_type_string(itk_Image_type):
    """Returns the type string of the ITK PixelType as defined in the NumPy array interface."""

    try:
        return _itk_typestr[itk_Image_type]
    except KeyError as e:
        raise e

# This is a Mapping from typestr to itk pixel types.
_typestr_itk = {v: k for k, v in _itk_typestr.items()}

def get_itk_type(type_str):
    """Returns the ITK PixelType from the type string as defined by the NumPy array interface."""

    try:
        return _typestr_itk[type_str]
    except KeyError as e:
        raise e


def itkCudaImageCVF22_New():
    return itkCudaImageCVF22.New()

class itkCudaImageCVF22(itk.itkImagePython.itkImageCVF22):
    r"""Proxy of C++ itkCudaImageCVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageCVF22_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF22_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF22_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF22_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF2 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF22_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkCovariantVectorF2 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF22_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF2

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkCovariantVectorF2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF22_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageCVF22_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF2
        GetBufferPointer(self) -> itkCovariantVectorF2
        """
        return _itkCudaImagePython.itkCudaImageCVF22_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF22_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,2 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,2 > > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF22_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > *

        """
        return _itkCudaImagePython.itkCudaImageCVF22_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF22_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCICVF22"""
        return _itkCudaImagePython.itkCudaImageCVF22_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCICVF22
        GetDataManager(self) -> itkCudaImageDataManagerCICVF22
        """
        return _itkCudaImagePython.itkCudaImageCVF22_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF22_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageCVF22 const *

        """
        return _itkCudaImagePython.itkCudaImageCVF22_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageCVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageCVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageCVF22

        Create a new object of the class itkCudaImageCVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageCVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageCVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageCVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageCVF22 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF22_swigregister(itkCudaImageCVF22)
class itkCudaImageCVF22_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageCVF22_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageCVF22_ConstPointer
        __init__(self, p) -> itkCudaImageCVF22_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF22_ConstPointer const &

        __init__(self, p) -> itkCudaImageCVF22_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF22 const *

        """
        _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageCVF22_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF22_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageCVF22"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageCVF22"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageCVF22"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageCVF22"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageCVF22

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageCVF22_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF22_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF2
        GetBufferPointer(self) -> itkCovariantVectorF2
        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,2 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,2 > > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageCVF22_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageCVF22_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF22_ConstPointer_swigregister(itkCudaImageCVF22_ConstPointer)

def itkCudaImageCVF23_New():
    return itkCudaImageCVF23.New()

class itkCudaImageCVF23(itk.itkImagePython.itkImageCVF23):
    r"""Proxy of C++ itkCudaImageCVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageCVF23_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF23_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF23_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF23_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF2 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF23_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkCovariantVectorF2 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF23_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF2

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkCovariantVectorF2

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF23_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageCVF23_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF2
        GetBufferPointer(self) -> itkCovariantVectorF2
        """
        return _itkCudaImagePython.itkCudaImageCVF23_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF23_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,2 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,2 >,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF23_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > *

        """
        return _itkCudaImagePython.itkCudaImageCVF23_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF23_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCICVF23"""
        return _itkCudaImagePython.itkCudaImageCVF23_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCICVF23
        GetDataManager(self) -> itkCudaImageDataManagerCICVF23
        """
        return _itkCudaImagePython.itkCudaImageCVF23_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF23_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageCVF23 const *

        """
        return _itkCudaImagePython.itkCudaImageCVF23_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageCVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageCVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageCVF23

        Create a new object of the class itkCudaImageCVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageCVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageCVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageCVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageCVF23 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF23_swigregister(itkCudaImageCVF23)
class itkCudaImageCVF23_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageCVF23_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageCVF23_ConstPointer
        __init__(self, p) -> itkCudaImageCVF23_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF23_ConstPointer const &

        __init__(self, p) -> itkCudaImageCVF23_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF23 const *

        """
        _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageCVF23_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF23_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageCVF23"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageCVF23"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageCVF23"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageCVF23"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageCVF23

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageCVF23_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF23_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF2
        GetBufferPointer(self) -> itkCovariantVectorF2
        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,2 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,2 >,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageCVF23_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageCVF23_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF23_ConstPointer_swigregister(itkCudaImageCVF23_ConstPointer)

def itkCudaImageCVF24_New():
    return itkCudaImageCVF24.New()

class itkCudaImageCVF24(itk.itkImagePython.itkImageCVF24):
    r"""Proxy of C++ itkCudaImageCVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageCVF24_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF24___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF24_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF24_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF24_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF2 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF24_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkCovariantVectorF2 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF24_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF2

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkCovariantVectorF2

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF24_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageCVF24_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF2
        GetBufferPointer(self) -> itkCovariantVectorF2
        """
        return _itkCudaImagePython.itkCudaImageCVF24_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF24_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,2 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,2 >,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF24_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > *

        """
        return _itkCudaImagePython.itkCudaImageCVF24_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF24_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCICVF24"""
        return _itkCudaImagePython.itkCudaImageCVF24_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCICVF24
        GetDataManager(self) -> itkCudaImageDataManagerCICVF24
        """
        return _itkCudaImagePython.itkCudaImageCVF24_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF24_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageCVF24 const *

        """
        return _itkCudaImagePython.itkCudaImageCVF24_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageCVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageCVF24_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageCVF24

        Create a new object of the class itkCudaImageCVF24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageCVF24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageCVF24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageCVF24.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageCVF24 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF24_swigregister(itkCudaImageCVF24)
class itkCudaImageCVF24_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageCVF24_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageCVF24_ConstPointer
        __init__(self, p) -> itkCudaImageCVF24_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF24_ConstPointer const &

        __init__(self, p) -> itkCudaImageCVF24_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF24 const *

        """
        _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageCVF24_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF24_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageCVF24"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageCVF24"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageCVF24"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageCVF24"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageCVF24

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageCVF24_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF24_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF2
        GetBufferPointer(self) -> itkCovariantVectorF2
        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,2 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,2 >,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageCVF24_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageCVF24_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF24_ConstPointer_swigregister(itkCudaImageCVF24_ConstPointer)

def itkCudaImageCVF32_New():
    return itkCudaImageCVF32.New()

class itkCudaImageCVF32(itk.itkImagePython.itkImageCVF32):
    r"""Proxy of C++ itkCudaImageCVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageCVF32_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF32_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF32_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF32_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF3 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF32_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkCovariantVectorF3 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF32_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF3

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkCovariantVectorF3

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF32_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageCVF32_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF3
        GetBufferPointer(self) -> itkCovariantVectorF3
        """
        return _itkCudaImagePython.itkCudaImageCVF32_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF32_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float > > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF32_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > > *

        """
        return _itkCudaImagePython.itkCudaImageCVF32_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF32_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCICVF32"""
        return _itkCudaImagePython.itkCudaImageCVF32_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCICVF32
        GetDataManager(self) -> itkCudaImageDataManagerCICVF32
        """
        return _itkCudaImagePython.itkCudaImageCVF32_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF32_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageCVF32 const *

        """
        return _itkCudaImagePython.itkCudaImageCVF32_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageCVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageCVF32_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageCVF32

        Create a new object of the class itkCudaImageCVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageCVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageCVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageCVF32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageCVF32 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF32_swigregister(itkCudaImageCVF32)
class itkCudaImageCVF32_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageCVF32_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageCVF32_ConstPointer
        __init__(self, p) -> itkCudaImageCVF32_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF32_ConstPointer const &

        __init__(self, p) -> itkCudaImageCVF32_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF32 const *

        """
        _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageCVF32_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF32_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageCVF32"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageCVF32"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageCVF32"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageCVF32"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageCVF32

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageCVF32_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF32_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF3
        GetBufferPointer(self) -> itkCovariantVectorF3
        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float > > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageCVF32_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageCVF32_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF32_ConstPointer_swigregister(itkCudaImageCVF32_ConstPointer)

def itkCudaImageCVF33_New():
    return itkCudaImageCVF33.New()

class itkCudaImageCVF33(itk.itkImagePython.itkImageCVF33):
    r"""Proxy of C++ itkCudaImageCVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageCVF33_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF33_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF33_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF33_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF3 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF33_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkCovariantVectorF3 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF33_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF3

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkCovariantVectorF3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF33_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageCVF33_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF3
        GetBufferPointer(self) -> itkCovariantVectorF3
        """
        return _itkCudaImagePython.itkCudaImageCVF33_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF33_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float >,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF33_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > > *

        """
        return _itkCudaImagePython.itkCudaImageCVF33_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF33_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCICVF33"""
        return _itkCudaImagePython.itkCudaImageCVF33_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCICVF33
        GetDataManager(self) -> itkCudaImageDataManagerCICVF33
        """
        return _itkCudaImagePython.itkCudaImageCVF33_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF33_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageCVF33 const *

        """
        return _itkCudaImagePython.itkCudaImageCVF33_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageCVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageCVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageCVF33

        Create a new object of the class itkCudaImageCVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageCVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageCVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageCVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageCVF33 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF33_swigregister(itkCudaImageCVF33)
class itkCudaImageCVF33_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageCVF33_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageCVF33_ConstPointer
        __init__(self, p) -> itkCudaImageCVF33_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF33_ConstPointer const &

        __init__(self, p) -> itkCudaImageCVF33_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF33 const *

        """
        _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageCVF33_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF33_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageCVF33"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageCVF33"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageCVF33"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageCVF33"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageCVF33

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageCVF33_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF33_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF3
        GetBufferPointer(self) -> itkCovariantVectorF3
        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float >,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageCVF33_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageCVF33_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF33_ConstPointer_swigregister(itkCudaImageCVF33_ConstPointer)

def itkCudaImageCVF34_New():
    return itkCudaImageCVF34.New()

class itkCudaImageCVF34(itk.itkImagePython.itkImageCVF34):
    r"""Proxy of C++ itkCudaImageCVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageCVF34_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF34___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF34_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF34_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF34_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF3 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF34_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkCovariantVectorF3 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF34_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF3

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkCovariantVectorF3

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF34_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageCVF34_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF3
        GetBufferPointer(self) -> itkCovariantVectorF3
        """
        return _itkCudaImagePython.itkCudaImageCVF34_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF34_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float >,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF34_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > > *

        """
        return _itkCudaImagePython.itkCudaImageCVF34_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF34_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCICVF34"""
        return _itkCudaImagePython.itkCudaImageCVF34_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCICVF34
        GetDataManager(self) -> itkCudaImageDataManagerCICVF34
        """
        return _itkCudaImagePython.itkCudaImageCVF34_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF34_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageCVF34 const *

        """
        return _itkCudaImagePython.itkCudaImageCVF34_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageCVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageCVF34_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageCVF34

        Create a new object of the class itkCudaImageCVF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageCVF34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageCVF34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageCVF34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageCVF34 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF34_swigregister(itkCudaImageCVF34)
class itkCudaImageCVF34_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageCVF34_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageCVF34_ConstPointer
        __init__(self, p) -> itkCudaImageCVF34_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF34_ConstPointer const &

        __init__(self, p) -> itkCudaImageCVF34_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF34 const *

        """
        _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageCVF34_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF34_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageCVF34"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageCVF34"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageCVF34"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageCVF34"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageCVF34

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageCVF34_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF34_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF3
        GetBufferPointer(self) -> itkCovariantVectorF3
        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float >,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageCVF34_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageCVF34_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF34_ConstPointer_swigregister(itkCudaImageCVF34_ConstPointer)

def itkCudaImageCVF42_New():
    return itkCudaImageCVF42.New()

class itkCudaImageCVF42(itk.itkImagePython.itkImageCVF42):
    r"""Proxy of C++ itkCudaImageCVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageCVF42_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF42___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF42_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF42_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF42_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF4 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF42_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkCovariantVectorF4 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF42_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF4

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkCovariantVectorF4

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF42_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageCVF42_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF4
        GetBufferPointer(self) -> itkCovariantVectorF4
        """
        return _itkCudaImagePython.itkCudaImageCVF42_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF42_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,4 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,4 > > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF42_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > *

        """
        return _itkCudaImagePython.itkCudaImageCVF42_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF42_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCICVF42"""
        return _itkCudaImagePython.itkCudaImageCVF42_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCICVF42
        GetDataManager(self) -> itkCudaImageDataManagerCICVF42
        """
        return _itkCudaImagePython.itkCudaImageCVF42_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF42_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageCVF42 const *

        """
        return _itkCudaImagePython.itkCudaImageCVF42_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageCVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageCVF42_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageCVF42

        Create a new object of the class itkCudaImageCVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageCVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageCVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageCVF42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageCVF42 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF42_swigregister(itkCudaImageCVF42)
class itkCudaImageCVF42_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageCVF42_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageCVF42_ConstPointer
        __init__(self, p) -> itkCudaImageCVF42_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF42_ConstPointer const &

        __init__(self, p) -> itkCudaImageCVF42_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF42 const *

        """
        _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageCVF42_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF42_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageCVF42"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageCVF42"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageCVF42"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageCVF42"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageCVF42

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageCVF42_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF42_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF4
        GetBufferPointer(self) -> itkCovariantVectorF4
        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,4 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,4 > > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageCVF42_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageCVF42_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF42_ConstPointer_swigregister(itkCudaImageCVF42_ConstPointer)

def itkCudaImageCVF43_New():
    return itkCudaImageCVF43.New()

class itkCudaImageCVF43(itk.itkImagePython.itkImageCVF43):
    r"""Proxy of C++ itkCudaImageCVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageCVF43_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF43_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF43_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF43_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF4 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF43_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkCovariantVectorF4 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF43_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF4

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkCovariantVectorF4

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF43_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageCVF43_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF4
        GetBufferPointer(self) -> itkCovariantVectorF4
        """
        return _itkCudaImagePython.itkCudaImageCVF43_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF43_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,4 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,4 >,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF43_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > *

        """
        return _itkCudaImagePython.itkCudaImageCVF43_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF43_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCICVF43"""
        return _itkCudaImagePython.itkCudaImageCVF43_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCICVF43
        GetDataManager(self) -> itkCudaImageDataManagerCICVF43
        """
        return _itkCudaImagePython.itkCudaImageCVF43_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF43_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageCVF43 const *

        """
        return _itkCudaImagePython.itkCudaImageCVF43_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageCVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageCVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageCVF43

        Create a new object of the class itkCudaImageCVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageCVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageCVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageCVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageCVF43 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF43_swigregister(itkCudaImageCVF43)
class itkCudaImageCVF43_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageCVF43_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageCVF43_ConstPointer
        __init__(self, p) -> itkCudaImageCVF43_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF43_ConstPointer const &

        __init__(self, p) -> itkCudaImageCVF43_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF43 const *

        """
        _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageCVF43_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF43_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageCVF43"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageCVF43"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageCVF43"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageCVF43"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageCVF43

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageCVF43_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF43_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF4
        GetBufferPointer(self) -> itkCovariantVectorF4
        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,4 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,4 >,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageCVF43_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageCVF43_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF43_ConstPointer_swigregister(itkCudaImageCVF43_ConstPointer)

def itkCudaImageCVF44_New():
    return itkCudaImageCVF44.New()

class itkCudaImageCVF44(itk.itkImagePython.itkImageCVF44):
    r"""Proxy of C++ itkCudaImageCVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageCVF44_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF44_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF44_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF44_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF4 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF44_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkCovariantVectorF4 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF44_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF4

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkCovariantVectorF4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF44_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageCVF44_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF4
        GetBufferPointer(self) -> itkCovariantVectorF4
        """
        return _itkCudaImagePython.itkCudaImageCVF44_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF44_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,4 >,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF44_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > *

        """
        return _itkCudaImagePython.itkCudaImageCVF44_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF44_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCICVF44"""
        return _itkCudaImagePython.itkCudaImageCVF44_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCICVF44
        GetDataManager(self) -> itkCudaImageDataManagerCICVF44
        """
        return _itkCudaImagePython.itkCudaImageCVF44_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF44_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageCVF44 const *

        """
        return _itkCudaImagePython.itkCudaImageCVF44_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageCVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageCVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageCVF44

        Create a new object of the class itkCudaImageCVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageCVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageCVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageCVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageCVF44 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF44_swigregister(itkCudaImageCVF44)
class itkCudaImageCVF44_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageCVF44_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageCVF44_ConstPointer
        __init__(self, p) -> itkCudaImageCVF44_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF44_ConstPointer const &

        __init__(self, p) -> itkCudaImageCVF44_ConstPointer

        Parameters
        ----------
        p: itkCudaImageCVF44 const *

        """
        _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageCVF44_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageCVF44_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageCVF44"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageCVF44"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageCVF44"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageCVF44"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageCVF44

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageCVF44_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageCVF44_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF4
        GetBufferPointer(self) -> itkCovariantVectorF4
        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::CovariantVector< float,4 >,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > const *
        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageCVF44_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageCVF44_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageCVF44_ConstPointer_swigregister(itkCudaImageCVF44_ConstPointer)

def itkCudaImageD2_New():
    return itkCudaImageD2.New()

class itkCudaImageD2(itk.itkImagePython.itkImageD2):
    r"""Proxy of C++ itkCudaImageD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageD2_Pointer"""
        return _itkCudaImagePython.itkCudaImageD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageD2_Pointer"""
        return _itkCudaImagePython.itkCudaImageD2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageD2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkCudaImagePython.itkCudaImageD2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: double const &

        """
        return _itkCudaImagePython.itkCudaImageD2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> double const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> double &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageD2_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageD2_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkCudaImagePython.itkCudaImageD2_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkCudaImagePython.itkCudaImageD2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< double > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< double > > const
        """
        return _itkCudaImagePython.itkCudaImageD2_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,double > *

        """
        return _itkCudaImagePython.itkCudaImageD2_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkCudaImagePython.itkCudaImageD2_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCID2"""
        return _itkCudaImagePython.itkCudaImageD2_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCID2
        GetDataManager(self) -> itkCudaImageDataManagerCID2
        """
        return _itkCudaImagePython.itkCudaImageD2_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageD2_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageD2 const *

        """
        return _itkCudaImagePython.itkCudaImageD2_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "D"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageD2

        Create a new object of the class itkCudaImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageD2 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageD2_swigregister(itkCudaImageD2)
class itkCudaImageD2_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageD2_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageD2_ConstPointer
        __init__(self, p) -> itkCudaImageD2_ConstPointer

        Parameters
        ----------
        p: itkCudaImageD2_ConstPointer const &

        __init__(self, p) -> itkCudaImageD2_ConstPointer

        Parameters
        ----------
        p: itkCudaImageD2 const *

        """
        _itkCudaImagePython.itkCudaImageD2_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageD2_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageD2_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageD2"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageD2"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageD2"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageD2"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageD2

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageD2_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageD2_Pointer"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< double > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< double > > const
        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageD2_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageD2_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageD2_ConstPointer_swigregister(itkCudaImageD2_ConstPointer)

def itkCudaImageD3_New():
    return itkCudaImageD3.New()

class itkCudaImageD3(itk.itkImagePython.itkImageD3):
    r"""Proxy of C++ itkCudaImageD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageD3_Pointer"""
        return _itkCudaImagePython.itkCudaImageD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageD3_Pointer"""
        return _itkCudaImagePython.itkCudaImageD3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageD3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkCudaImagePython.itkCudaImageD3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: double const &

        """
        return _itkCudaImagePython.itkCudaImageD3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> double const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> double &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageD3_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageD3_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkCudaImagePython.itkCudaImageD3_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkCudaImagePython.itkCudaImageD3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< double,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< double,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageD3_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,double > *

        """
        return _itkCudaImagePython.itkCudaImageD3_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkCudaImagePython.itkCudaImageD3_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCID3"""
        return _itkCudaImagePython.itkCudaImageD3_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCID3
        GetDataManager(self) -> itkCudaImageDataManagerCID3
        """
        return _itkCudaImagePython.itkCudaImageD3_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageD3_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageD3 const *

        """
        return _itkCudaImagePython.itkCudaImageD3_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "D"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageD3

        Create a new object of the class itkCudaImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageD3 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageD3_swigregister(itkCudaImageD3)
class itkCudaImageD3_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageD3_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageD3_ConstPointer
        __init__(self, p) -> itkCudaImageD3_ConstPointer

        Parameters
        ----------
        p: itkCudaImageD3_ConstPointer const &

        __init__(self, p) -> itkCudaImageD3_ConstPointer

        Parameters
        ----------
        p: itkCudaImageD3 const *

        """
        _itkCudaImagePython.itkCudaImageD3_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageD3_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageD3_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageD3"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageD3"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageD3"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageD3"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageD3

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageD3_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageD3_Pointer"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< double,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< double,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageD3_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageD3_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageD3_ConstPointer_swigregister(itkCudaImageD3_ConstPointer)

def itkCudaImageD4_New():
    return itkCudaImageD4.New()

class itkCudaImageD4(itk.itkImagePython.itkImageD4):
    r"""Proxy of C++ itkCudaImageD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageD4_Pointer"""
        return _itkCudaImagePython.itkCudaImageD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageD4_Pointer"""
        return _itkCudaImagePython.itkCudaImageD4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageD4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkCudaImagePython.itkCudaImageD4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: double const &

        """
        return _itkCudaImagePython.itkCudaImageD4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> double const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> double &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageD4_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageD4_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkCudaImagePython.itkCudaImageD4_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkCudaImagePython.itkCudaImageD4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< double,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< double,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageD4_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,double > *

        """
        return _itkCudaImagePython.itkCudaImageD4_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkCudaImagePython.itkCudaImageD4_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCID4"""
        return _itkCudaImagePython.itkCudaImageD4_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCID4
        GetDataManager(self) -> itkCudaImageDataManagerCID4
        """
        return _itkCudaImagePython.itkCudaImageD4_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageD4_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageD4 const *

        """
        return _itkCudaImagePython.itkCudaImageD4_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "D"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageD4

        Create a new object of the class itkCudaImageD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageD4 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageD4_swigregister(itkCudaImageD4)
class itkCudaImageD4_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageD4_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageD4_ConstPointer
        __init__(self, p) -> itkCudaImageD4_ConstPointer

        Parameters
        ----------
        p: itkCudaImageD4_ConstPointer const &

        __init__(self, p) -> itkCudaImageD4_ConstPointer

        Parameters
        ----------
        p: itkCudaImageD4 const *

        """
        _itkCudaImagePython.itkCudaImageD4_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageD4_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageD4_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageD4"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageD4"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageD4"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageD4"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageD4

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageD4_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageD4_Pointer"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< double,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< double,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageD4_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageD4_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageD4_ConstPointer_swigregister(itkCudaImageD4_ConstPointer)

def itkCudaImageF2_New():
    return itkCudaImageF2.New()

class itkCudaImageF2(itk.itkImagePython.itkImageF2):
    r"""Proxy of C++ itkCudaImageF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageF2_Pointer"""
        return _itkCudaImagePython.itkCudaImageF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageF2_Pointer"""
        return _itkCudaImagePython.itkCudaImageF2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageF2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkCudaImagePython.itkCudaImageF2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: float const &

        """
        return _itkCudaImagePython.itkCudaImageF2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> float const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> float &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageF2_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageF2_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkCudaImagePython.itkCudaImageF2_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkCudaImagePython.itkCudaImageF2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< float > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< float > > const
        """
        return _itkCudaImagePython.itkCudaImageF2_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,float > *

        """
        return _itkCudaImagePython.itkCudaImageF2_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkCudaImagePython.itkCudaImageF2_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIF2"""
        return _itkCudaImagePython.itkCudaImageF2_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIF2
        GetDataManager(self) -> itkCudaImageDataManagerCIF2
        """
        return _itkCudaImagePython.itkCudaImageF2_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageF2_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageF2 const *

        """
        return _itkCudaImagePython.itkCudaImageF2_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageF2

        Create a new object of the class itkCudaImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageF2 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageF2_swigregister(itkCudaImageF2)
class itkCudaImageF2_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageF2_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageF2_ConstPointer
        __init__(self, p) -> itkCudaImageF2_ConstPointer

        Parameters
        ----------
        p: itkCudaImageF2_ConstPointer const &

        __init__(self, p) -> itkCudaImageF2_ConstPointer

        Parameters
        ----------
        p: itkCudaImageF2 const *

        """
        _itkCudaImagePython.itkCudaImageF2_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageF2_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageF2_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageF2"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageF2"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageF2"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageF2"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageF2

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageF2_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageF2_Pointer"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< float > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< float > > const
        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageF2_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageF2_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageF2_ConstPointer_swigregister(itkCudaImageF2_ConstPointer)

def itkCudaImageF3_New():
    return itkCudaImageF3.New()

class itkCudaImageF3(itk.itkImagePython.itkImageF3):
    r"""Proxy of C++ itkCudaImageF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageF3_Pointer"""
        return _itkCudaImagePython.itkCudaImageF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageF3_Pointer"""
        return _itkCudaImagePython.itkCudaImageF3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageF3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkCudaImagePython.itkCudaImageF3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: float const &

        """
        return _itkCudaImagePython.itkCudaImageF3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> float const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> float &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageF3_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageF3_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkCudaImagePython.itkCudaImageF3_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkCudaImagePython.itkCudaImageF3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< float,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< float,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageF3_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,float > *

        """
        return _itkCudaImagePython.itkCudaImageF3_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkCudaImagePython.itkCudaImageF3_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIF3"""
        return _itkCudaImagePython.itkCudaImageF3_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIF3
        GetDataManager(self) -> itkCudaImageDataManagerCIF3
        """
        return _itkCudaImagePython.itkCudaImageF3_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageF3_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageF3 const *

        """
        return _itkCudaImagePython.itkCudaImageF3_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageF3

        Create a new object of the class itkCudaImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageF3 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageF3_swigregister(itkCudaImageF3)
class itkCudaImageF3_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageF3_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageF3_ConstPointer
        __init__(self, p) -> itkCudaImageF3_ConstPointer

        Parameters
        ----------
        p: itkCudaImageF3_ConstPointer const &

        __init__(self, p) -> itkCudaImageF3_ConstPointer

        Parameters
        ----------
        p: itkCudaImageF3 const *

        """
        _itkCudaImagePython.itkCudaImageF3_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageF3_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageF3_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageF3"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageF3"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageF3"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageF3"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageF3

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageF3_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageF3_Pointer"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< float,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< float,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageF3_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageF3_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageF3_ConstPointer_swigregister(itkCudaImageF3_ConstPointer)

def itkCudaImageF4_New():
    return itkCudaImageF4.New()

class itkCudaImageF4(itk.itkImagePython.itkImageF4):
    r"""Proxy of C++ itkCudaImageF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageF4_Pointer"""
        return _itkCudaImagePython.itkCudaImageF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageF4_Pointer"""
        return _itkCudaImagePython.itkCudaImageF4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageF4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkCudaImagePython.itkCudaImageF4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: float const &

        """
        return _itkCudaImagePython.itkCudaImageF4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> float const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> float &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageF4_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageF4_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkCudaImagePython.itkCudaImageF4_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkCudaImagePython.itkCudaImageF4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< float,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageF4_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,float > *

        """
        return _itkCudaImagePython.itkCudaImageF4_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkCudaImagePython.itkCudaImageF4_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIF4"""
        return _itkCudaImagePython.itkCudaImageF4_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIF4
        GetDataManager(self) -> itkCudaImageDataManagerCIF4
        """
        return _itkCudaImagePython.itkCudaImageF4_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageF4_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageF4 const *

        """
        return _itkCudaImagePython.itkCudaImageF4_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageF4

        Create a new object of the class itkCudaImageF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageF4 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageF4_swigregister(itkCudaImageF4)
class itkCudaImageF4_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageF4_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageF4_ConstPointer
        __init__(self, p) -> itkCudaImageF4_ConstPointer

        Parameters
        ----------
        p: itkCudaImageF4_ConstPointer const &

        __init__(self, p) -> itkCudaImageF4_ConstPointer

        Parameters
        ----------
        p: itkCudaImageF4 const *

        """
        _itkCudaImagePython.itkCudaImageF4_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageF4_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageF4_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageF4"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageF4"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageF4"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageF4"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageF4

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageF4_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageF4_Pointer"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< float,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageF4_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageF4_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageF4_ConstPointer_swigregister(itkCudaImageF4_ConstPointer)

def itkCudaImageSS2_New():
    return itkCudaImageSS2.New()

class itkCudaImageSS2(itk.itkImagePython.itkImageSS2):
    r"""Proxy of C++ itkCudaImageSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageSS2_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageSS2_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageSS2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: short const &

        """
        return _itkCudaImagePython.itkCudaImageSS2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: short const &

        """
        return _itkCudaImagePython.itkCudaImageSS2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> short const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> short &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageSS2_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageSS2_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkCudaImagePython.itkCudaImageSS2_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkCudaImagePython.itkCudaImageSS2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< short > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< short > > const
        """
        return _itkCudaImagePython.itkCudaImageSS2_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,short > *

        """
        return _itkCudaImagePython.itkCudaImageSS2_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short > const *
        """
        return _itkCudaImagePython.itkCudaImageSS2_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCISS2"""
        return _itkCudaImagePython.itkCudaImageSS2_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCISS2
        GetDataManager(self) -> itkCudaImageDataManagerCISS2
        """
        return _itkCudaImagePython.itkCudaImageSS2_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS2_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageSS2 const *

        """
        return _itkCudaImagePython.itkCudaImageSS2_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "SS"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageSS2

        Create a new object of the class itkCudaImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageSS2 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageSS2_swigregister(itkCudaImageSS2)
class itkCudaImageSS2_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageSS2_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageSS2_ConstPointer
        __init__(self, p) -> itkCudaImageSS2_ConstPointer

        Parameters
        ----------
        p: itkCudaImageSS2_ConstPointer const &

        __init__(self, p) -> itkCudaImageSS2_ConstPointer

        Parameters
        ----------
        p: itkCudaImageSS2 const *

        """
        _itkCudaImagePython.itkCudaImageSS2_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageSS2_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageSS2_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageSS2"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageSS2"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageSS2"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageSS2"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageSS2

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageSS2_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageSS2_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< short > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< short > > const
        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short > const *
        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageSS2_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageSS2_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageSS2_ConstPointer_swigregister(itkCudaImageSS2_ConstPointer)

def itkCudaImageSS3_New():
    return itkCudaImageSS3.New()

class itkCudaImageSS3(itk.itkImagePython.itkImageSS3):
    r"""Proxy of C++ itkCudaImageSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageSS3_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageSS3_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageSS3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: short const &

        """
        return _itkCudaImagePython.itkCudaImageSS3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: short const &

        """
        return _itkCudaImagePython.itkCudaImageSS3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> short const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> short &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageSS3_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageSS3_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkCudaImagePython.itkCudaImageSS3_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkCudaImagePython.itkCudaImageSS3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< short,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< short,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageSS3_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,short > *

        """
        return _itkCudaImagePython.itkCudaImageSS3_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short > const *
        """
        return _itkCudaImagePython.itkCudaImageSS3_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCISS3"""
        return _itkCudaImagePython.itkCudaImageSS3_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCISS3
        GetDataManager(self) -> itkCudaImageDataManagerCISS3
        """
        return _itkCudaImagePython.itkCudaImageSS3_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS3_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageSS3 const *

        """
        return _itkCudaImagePython.itkCudaImageSS3_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "SS"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageSS3

        Create a new object of the class itkCudaImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageSS3 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageSS3_swigregister(itkCudaImageSS3)
class itkCudaImageSS3_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageSS3_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageSS3_ConstPointer
        __init__(self, p) -> itkCudaImageSS3_ConstPointer

        Parameters
        ----------
        p: itkCudaImageSS3_ConstPointer const &

        __init__(self, p) -> itkCudaImageSS3_ConstPointer

        Parameters
        ----------
        p: itkCudaImageSS3 const *

        """
        _itkCudaImagePython.itkCudaImageSS3_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageSS3_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageSS3_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageSS3"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageSS3"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageSS3"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageSS3"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageSS3

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageSS3_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageSS3_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< short,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< short,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short > const *
        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageSS3_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageSS3_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageSS3_ConstPointer_swigregister(itkCudaImageSS3_ConstPointer)

def itkCudaImageSS4_New():
    return itkCudaImageSS4.New()

class itkCudaImageSS4(itk.itkImagePython.itkImageSS4):
    r"""Proxy of C++ itkCudaImageSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageSS4_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageSS4_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageSS4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: short const &

        """
        return _itkCudaImagePython.itkCudaImageSS4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: short const &

        """
        return _itkCudaImagePython.itkCudaImageSS4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> short const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> short &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageSS4_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageSS4_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkCudaImagePython.itkCudaImageSS4_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkCudaImagePython.itkCudaImageSS4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< short,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< short,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageSS4_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,short > *

        """
        return _itkCudaImagePython.itkCudaImageSS4_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short > const *
        """
        return _itkCudaImagePython.itkCudaImageSS4_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCISS4"""
        return _itkCudaImagePython.itkCudaImageSS4_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCISS4
        GetDataManager(self) -> itkCudaImageDataManagerCISS4
        """
        return _itkCudaImagePython.itkCudaImageSS4_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS4_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageSS4 const *

        """
        return _itkCudaImagePython.itkCudaImageSS4_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "SS"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageSS4

        Create a new object of the class itkCudaImageSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageSS4 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageSS4_swigregister(itkCudaImageSS4)
class itkCudaImageSS4_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageSS4_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageSS4_ConstPointer
        __init__(self, p) -> itkCudaImageSS4_ConstPointer

        Parameters
        ----------
        p: itkCudaImageSS4_ConstPointer const &

        __init__(self, p) -> itkCudaImageSS4_ConstPointer

        Parameters
        ----------
        p: itkCudaImageSS4 const *

        """
        _itkCudaImagePython.itkCudaImageSS4_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageSS4_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageSS4_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageSS4"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageSS4"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageSS4"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageSS4"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageSS4

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageSS4_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageSS4_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> short
        GetBufferPointer(self) -> short const *
        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< short > const
        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< short,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< short,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,short > const *
        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageSS4_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageSS4_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageSS4_ConstPointer_swigregister(itkCudaImageSS4_ConstPointer)

def itkCudaImageUC2_New():
    return itkCudaImageUC2.New()

class itkCudaImageUC2(itk.itkImagePython.itkImageUC2):
    r"""Proxy of C++ itkCudaImageUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageUC2_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUC2_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageUC2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkCudaImagePython.itkCudaImageUC2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: unsigned char const &

        """
        return _itkCudaImagePython.itkCudaImageUC2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned char const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> unsigned char &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageUC2_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageUC2_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkCudaImagePython.itkCudaImageUC2_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkCudaImagePython.itkCudaImageUC2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned char > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned char > > const
        """
        return _itkCudaImagePython.itkCudaImageUC2_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned char > *

        """
        return _itkCudaImagePython.itkCudaImageUC2_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkCudaImagePython.itkCudaImageUC2_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIUC2"""
        return _itkCudaImagePython.itkCudaImageUC2_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIUC2
        GetDataManager(self) -> itkCudaImageDataManagerCIUC2
        """
        return _itkCudaImagePython.itkCudaImageUC2_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC2_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageUC2 const *

        """
        return _itkCudaImagePython.itkCudaImageUC2_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "UC"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageUC2

        Create a new object of the class itkCudaImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageUC2 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUC2_swigregister(itkCudaImageUC2)
class itkCudaImageUC2_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageUC2_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageUC2_ConstPointer
        __init__(self, p) -> itkCudaImageUC2_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUC2_ConstPointer const &

        __init__(self, p) -> itkCudaImageUC2_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUC2 const *

        """
        _itkCudaImagePython.itkCudaImageUC2_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageUC2_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUC2_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageUC2"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageUC2"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageUC2"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageUC2"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageUC2

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageUC2_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUC2_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned char > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned char > > const
        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageUC2_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageUC2_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUC2_ConstPointer_swigregister(itkCudaImageUC2_ConstPointer)

def itkCudaImageUC3_New():
    return itkCudaImageUC3.New()

class itkCudaImageUC3(itk.itkImagePython.itkImageUC3):
    r"""Proxy of C++ itkCudaImageUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageUC3_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUC3_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageUC3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkCudaImagePython.itkCudaImageUC3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: unsigned char const &

        """
        return _itkCudaImagePython.itkCudaImageUC3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned char const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> unsigned char &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageUC3_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageUC3_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkCudaImagePython.itkCudaImageUC3_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkCudaImagePython.itkCudaImageUC3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned char,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned char,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageUC3_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned char > *

        """
        return _itkCudaImagePython.itkCudaImageUC3_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkCudaImagePython.itkCudaImageUC3_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIUC3"""
        return _itkCudaImagePython.itkCudaImageUC3_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIUC3
        GetDataManager(self) -> itkCudaImageDataManagerCIUC3
        """
        return _itkCudaImagePython.itkCudaImageUC3_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC3_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageUC3 const *

        """
        return _itkCudaImagePython.itkCudaImageUC3_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "UC"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageUC3

        Create a new object of the class itkCudaImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageUC3 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUC3_swigregister(itkCudaImageUC3)
class itkCudaImageUC3_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageUC3_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageUC3_ConstPointer
        __init__(self, p) -> itkCudaImageUC3_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUC3_ConstPointer const &

        __init__(self, p) -> itkCudaImageUC3_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUC3 const *

        """
        _itkCudaImagePython.itkCudaImageUC3_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageUC3_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUC3_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageUC3"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageUC3"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageUC3"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageUC3"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageUC3

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageUC3_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUC3_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned char,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned char,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageUC3_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageUC3_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUC3_ConstPointer_swigregister(itkCudaImageUC3_ConstPointer)

def itkCudaImageUC4_New():
    return itkCudaImageUC4.New()

class itkCudaImageUC4(itk.itkImagePython.itkImageUC4):
    r"""Proxy of C++ itkCudaImageUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageUC4_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUC4_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageUC4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkCudaImagePython.itkCudaImageUC4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: unsigned char const &

        """
        return _itkCudaImagePython.itkCudaImageUC4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned char const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> unsigned char &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageUC4_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageUC4_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkCudaImagePython.itkCudaImageUC4_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkCudaImagePython.itkCudaImageUC4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned char,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned char,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageUC4_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned char > *

        """
        return _itkCudaImagePython.itkCudaImageUC4_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkCudaImagePython.itkCudaImageUC4_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIUC4"""
        return _itkCudaImagePython.itkCudaImageUC4_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIUC4
        GetDataManager(self) -> itkCudaImageDataManagerCIUC4
        """
        return _itkCudaImagePython.itkCudaImageUC4_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC4_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageUC4 const *

        """
        return _itkCudaImagePython.itkCudaImageUC4_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "UC"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageUC4

        Create a new object of the class itkCudaImageUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageUC4 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUC4_swigregister(itkCudaImageUC4)
class itkCudaImageUC4_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageUC4_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageUC4_ConstPointer
        __init__(self, p) -> itkCudaImageUC4_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUC4_ConstPointer const &

        __init__(self, p) -> itkCudaImageUC4_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUC4 const *

        """
        _itkCudaImagePython.itkCudaImageUC4_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageUC4_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUC4_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageUC4"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageUC4"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageUC4"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageUC4"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageUC4

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageUC4_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUC4_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned char,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned char,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageUC4_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageUC4_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUC4_ConstPointer_swigregister(itkCudaImageUC4_ConstPointer)

def itkCudaImageUL2_New():
    return itkCudaImageUL2.New()

class itkCudaImageUL2(itk.itkImagePython.itkImageUL2):
    r"""Proxy of C++ itkCudaImageUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageUL2_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUL2_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageUL2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned long const &

        """
        return _itkCudaImagePython.itkCudaImageUL2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: unsigned long const &

        """
        return _itkCudaImagePython.itkCudaImageUL2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned long const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> unsigned long &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageUL2_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageUL2_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned long
        GetBufferPointer(self) -> unsigned long const *
        """
        return _itkCudaImagePython.itkCudaImageUL2_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkCudaImagePython.itkCudaImageUL2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned long > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned long > > const
        """
        return _itkCudaImagePython.itkCudaImageUL2_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned long > *

        """
        return _itkCudaImagePython.itkCudaImageUL2_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned long >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned long > const *
        """
        return _itkCudaImagePython.itkCudaImageUL2_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIUL2"""
        return _itkCudaImagePython.itkCudaImageUL2_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIUL2
        GetDataManager(self) -> itkCudaImageDataManagerCIUL2
        """
        return _itkCudaImagePython.itkCudaImageUL2_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL2_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageUL2 const *

        """
        return _itkCudaImagePython.itkCudaImageUL2_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "UL"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageUL2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageUL2

        Create a new object of the class itkCudaImageUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageUL2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageUL2 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUL2_swigregister(itkCudaImageUL2)
class itkCudaImageUL2_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageUL2_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageUL2_ConstPointer
        __init__(self, p) -> itkCudaImageUL2_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUL2_ConstPointer const &

        __init__(self, p) -> itkCudaImageUL2_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUL2 const *

        """
        _itkCudaImagePython.itkCudaImageUL2_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageUL2_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUL2_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageUL2"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageUL2"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageUL2"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageUL2"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageUL2

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageUL2_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUL2_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned long
        GetBufferPointer(self) -> unsigned long const *
        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned long > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned long > > const
        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned long >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned long > const *
        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageUL2_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageUL2_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUL2_ConstPointer_swigregister(itkCudaImageUL2_ConstPointer)

def itkCudaImageUL3_New():
    return itkCudaImageUL3.New()

class itkCudaImageUL3(itk.itkImagePython.itkImageUL3):
    r"""Proxy of C++ itkCudaImageUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageUL3_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUL3_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageUL3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned long const &

        """
        return _itkCudaImagePython.itkCudaImageUL3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: unsigned long const &

        """
        return _itkCudaImagePython.itkCudaImageUL3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned long const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> unsigned long &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageUL3_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageUL3_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned long
        GetBufferPointer(self) -> unsigned long const *
        """
        return _itkCudaImagePython.itkCudaImageUL3_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkCudaImagePython.itkCudaImageUL3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned long,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned long,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageUL3_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned long > *

        """
        return _itkCudaImagePython.itkCudaImageUL3_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned long >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned long > const *
        """
        return _itkCudaImagePython.itkCudaImageUL3_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIUL3"""
        return _itkCudaImagePython.itkCudaImageUL3_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIUL3
        GetDataManager(self) -> itkCudaImageDataManagerCIUL3
        """
        return _itkCudaImagePython.itkCudaImageUL3_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL3_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageUL3 const *

        """
        return _itkCudaImagePython.itkCudaImageUL3_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "UL"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageUL3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageUL3

        Create a new object of the class itkCudaImageUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageUL3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageUL3 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUL3_swigregister(itkCudaImageUL3)
class itkCudaImageUL3_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageUL3_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageUL3_ConstPointer
        __init__(self, p) -> itkCudaImageUL3_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUL3_ConstPointer const &

        __init__(self, p) -> itkCudaImageUL3_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUL3 const *

        """
        _itkCudaImagePython.itkCudaImageUL3_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageUL3_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUL3_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageUL3"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageUL3"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageUL3"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageUL3"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageUL3

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageUL3_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUL3_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned long
        GetBufferPointer(self) -> unsigned long const *
        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned long,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned long,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned long >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned long > const *
        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageUL3_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageUL3_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUL3_ConstPointer_swigregister(itkCudaImageUL3_ConstPointer)

def itkCudaImageUL4_New():
    return itkCudaImageUL4.New()

class itkCudaImageUL4(itk.itkImagePython.itkImageUL4):
    r"""Proxy of C++ itkCudaImageUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageUL4_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUL4_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageUL4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned long const &

        """
        return _itkCudaImagePython.itkCudaImageUL4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: unsigned long const &

        """
        return _itkCudaImagePython.itkCudaImageUL4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned long const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> unsigned long &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageUL4_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageUL4_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned long
        GetBufferPointer(self) -> unsigned long const *
        """
        return _itkCudaImagePython.itkCudaImageUL4_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkCudaImagePython.itkCudaImageUL4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned long,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned long,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageUL4_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned long > *

        """
        return _itkCudaImagePython.itkCudaImageUL4_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned long >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned long > const *
        """
        return _itkCudaImagePython.itkCudaImageUL4_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIUL4"""
        return _itkCudaImagePython.itkCudaImageUL4_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIUL4
        GetDataManager(self) -> itkCudaImageDataManagerCIUL4
        """
        return _itkCudaImagePython.itkCudaImageUL4_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL4_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageUL4 const *

        """
        return _itkCudaImagePython.itkCudaImageUL4_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "UL"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageUL4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageUL4

        Create a new object of the class itkCudaImageUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageUL4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageUL4 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUL4_swigregister(itkCudaImageUL4)
class itkCudaImageUL4_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageUL4_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageUL4_ConstPointer
        __init__(self, p) -> itkCudaImageUL4_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUL4_ConstPointer const &

        __init__(self, p) -> itkCudaImageUL4_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUL4 const *

        """
        _itkCudaImagePython.itkCudaImageUL4_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageUL4_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUL4_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageUL4"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageUL4"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageUL4"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageUL4"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageUL4

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageUL4_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUL4_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned long
        GetBufferPointer(self) -> unsigned long const *
        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned long > const
        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned long,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned long,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned long >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned long > const *
        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageUL4_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageUL4_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUL4_ConstPointer_swigregister(itkCudaImageUL4_ConstPointer)

def itkCudaImageUS2_New():
    return itkCudaImageUS2.New()

class itkCudaImageUS2(itk.itkImagePython.itkImageUS2):
    r"""Proxy of C++ itkCudaImageUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageUS2_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUS2_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS2_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageUS2_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkCudaImagePython.itkCudaImageUS2_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: unsigned short const &

        """
        return _itkCudaImagePython.itkCudaImageUS2_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned short const

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> unsigned short &

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageUS2_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageUS2_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkCudaImagePython.itkCudaImageUS2_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkCudaImagePython.itkCudaImageUS2_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned short > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned short > > const
        """
        return _itkCudaImagePython.itkCudaImageUS2_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned short > *

        """
        return _itkCudaImagePython.itkCudaImageUS2_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkCudaImagePython.itkCudaImageUS2_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIUS2"""
        return _itkCudaImagePython.itkCudaImageUS2_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIUS2
        GetDataManager(self) -> itkCudaImageDataManagerCIUS2
        """
        return _itkCudaImagePython.itkCudaImageUS2_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS2_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageUS2 const *

        """
        return _itkCudaImagePython.itkCudaImageUS2_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "US"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageUS2

        Create a new object of the class itkCudaImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageUS2 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUS2_swigregister(itkCudaImageUS2)
class itkCudaImageUS2_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageUS2_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageUS2_ConstPointer
        __init__(self, p) -> itkCudaImageUS2_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUS2_ConstPointer const &

        __init__(self, p) -> itkCudaImageUS2_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUS2 const *

        """
        _itkCudaImagePython.itkCudaImageUS2_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageUS2_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUS2_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageUS2"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageUS2"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageUS2"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageUS2"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageUS2

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageUS2_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUS2_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned short > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned short > > const
        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageUS2_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageUS2_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUS2_ConstPointer_swigregister(itkCudaImageUS2_ConstPointer)

def itkCudaImageUS3_New():
    return itkCudaImageUS3.New()

class itkCudaImageUS3(itk.itkImagePython.itkImageUS3):
    r"""Proxy of C++ itkCudaImageUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageUS3_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUS3_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS3_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageUS3_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkCudaImagePython.itkCudaImageUS3_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: unsigned short const &

        """
        return _itkCudaImagePython.itkCudaImageUS3_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned short const

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> unsigned short &

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageUS3_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageUS3_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkCudaImagePython.itkCudaImageUS3_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkCudaImagePython.itkCudaImageUS3_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned short,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned short,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageUS3_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned short > *

        """
        return _itkCudaImagePython.itkCudaImageUS3_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkCudaImagePython.itkCudaImageUS3_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIUS3"""
        return _itkCudaImagePython.itkCudaImageUS3_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIUS3
        GetDataManager(self) -> itkCudaImageDataManagerCIUS3
        """
        return _itkCudaImagePython.itkCudaImageUS3_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS3_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageUS3 const *

        """
        return _itkCudaImagePython.itkCudaImageUS3_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "US"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageUS3

        Create a new object of the class itkCudaImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageUS3 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUS3_swigregister(itkCudaImageUS3)
class itkCudaImageUS3_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageUS3_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageUS3_ConstPointer
        __init__(self, p) -> itkCudaImageUS3_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUS3_ConstPointer const &

        __init__(self, p) -> itkCudaImageUS3_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUS3 const *

        """
        _itkCudaImagePython.itkCudaImageUS3_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageUS3_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUS3_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageUS3"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageUS3"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageUS3"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageUS3"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageUS3

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageUS3_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUS3_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned short,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned short,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageUS3_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageUS3_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUS3_ConstPointer_swigregister(itkCudaImageUS3_ConstPointer)

def itkCudaImageUS4_New():
    return itkCudaImageUS4.New()

class itkCudaImageUS4(itk.itkImagePython.itkImageUS4):
    r"""Proxy of C++ itkCudaImageUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageUS4_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUS4_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS4_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageUS4_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkCudaImagePython.itkCudaImageUS4_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: unsigned short const &

        """
        return _itkCudaImagePython.itkCudaImageUS4_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned short const

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> unsigned short &

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageUS4_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageUS4_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkCudaImagePython.itkCudaImageUS4_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkCudaImagePython.itkCudaImageUS4_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned short,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned short,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageUS4_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned short > *

        """
        return _itkCudaImagePython.itkCudaImageUS4_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkCudaImagePython.itkCudaImageUS4_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIUS4"""
        return _itkCudaImagePython.itkCudaImageUS4_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIUS4
        GetDataManager(self) -> itkCudaImageDataManagerCIUS4
        """
        return _itkCudaImagePython.itkCudaImageUS4_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS4_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageUS4 const *

        """
        return _itkCudaImagePython.itkCudaImageUS4_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "US"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageUS4

        Create a new object of the class itkCudaImageUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageUS4 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUS4_swigregister(itkCudaImageUS4)
class itkCudaImageUS4_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageUS4_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageUS4_ConstPointer
        __init__(self, p) -> itkCudaImageUS4_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUS4_ConstPointer const &

        __init__(self, p) -> itkCudaImageUS4_ConstPointer

        Parameters
        ----------
        p: itkCudaImageUS4 const *

        """
        _itkCudaImagePython.itkCudaImageUS4_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageUS4_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageUS4_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageUS4"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageUS4"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageUS4"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageUS4"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageUS4

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageUS4_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageUS4_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned short,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< unsigned short,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageUS4_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageUS4_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageUS4_ConstPointer_swigregister(itkCudaImageUS4_ConstPointer)

def itkCudaImageVF22_New():
    return itkCudaImageVF22.New()

class itkCudaImageVF22(itk.itkImagePython.itkImageVF22):
    r"""Proxy of C++ itkCudaImageVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageVF22_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF22_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF22_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageVF22_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF2 const &

        """
        return _itkCudaImagePython.itkCudaImageVF22_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVectorF2 const &

        """
        return _itkCudaImagePython.itkCudaImageVF22_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF2

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVectorF2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageVF22_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageVF22_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF2
        GetBufferPointer(self) -> itkVectorF2
        """
        return _itkCudaImagePython.itkCudaImageVF22_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF22_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,2 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,2 > > > const
        """
        return _itkCudaImagePython.itkCudaImageVF22_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > *

        """
        return _itkCudaImagePython.itkCudaImageVF22_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF22_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIVF22"""
        return _itkCudaImagePython.itkCudaImageVF22_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIVF22
        GetDataManager(self) -> itkCudaImageDataManagerCIVF22
        """
        return _itkCudaImagePython.itkCudaImageVF22_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF22_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageVF22 const *

        """
        return _itkCudaImagePython.itkCudaImageVF22_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageVF22

        Create a new object of the class itkCudaImageVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageVF22 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF22_swigregister(itkCudaImageVF22)
class itkCudaImageVF22_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageVF22_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageVF22_ConstPointer
        __init__(self, p) -> itkCudaImageVF22_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF22_ConstPointer const &

        __init__(self, p) -> itkCudaImageVF22_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF22 const *

        """
        _itkCudaImagePython.itkCudaImageVF22_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageVF22_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF22_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageVF22"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageVF22"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageVF22"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageVF22"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageVF22

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageVF22_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF22_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF2
        GetBufferPointer(self) -> itkVectorF2
        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,2 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,2 > > > const
        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageVF22_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageVF22_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF22_ConstPointer_swigregister(itkCudaImageVF22_ConstPointer)

def itkCudaImageVF23_New():
    return itkCudaImageVF23.New()

class itkCudaImageVF23(itk.itkImagePython.itkImageVF23):
    r"""Proxy of C++ itkCudaImageVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageVF23_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF23_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF23_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageVF23_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF2 const &

        """
        return _itkCudaImagePython.itkCudaImageVF23_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorF2 const &

        """
        return _itkCudaImagePython.itkCudaImageVF23_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF2

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorF2

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageVF23_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageVF23_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF2
        GetBufferPointer(self) -> itkVectorF2
        """
        return _itkCudaImagePython.itkCudaImageVF23_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF23_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,2 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,2 >,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF23_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > *

        """
        return _itkCudaImagePython.itkCudaImageVF23_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF23_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIVF23"""
        return _itkCudaImagePython.itkCudaImageVF23_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIVF23
        GetDataManager(self) -> itkCudaImageDataManagerCIVF23
        """
        return _itkCudaImagePython.itkCudaImageVF23_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF23_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageVF23 const *

        """
        return _itkCudaImagePython.itkCudaImageVF23_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageVF23

        Create a new object of the class itkCudaImageVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageVF23 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF23_swigregister(itkCudaImageVF23)
class itkCudaImageVF23_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageVF23_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageVF23_ConstPointer
        __init__(self, p) -> itkCudaImageVF23_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF23_ConstPointer const &

        __init__(self, p) -> itkCudaImageVF23_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF23 const *

        """
        _itkCudaImagePython.itkCudaImageVF23_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageVF23_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF23_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageVF23"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageVF23"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageVF23"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageVF23"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageVF23

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageVF23_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF23_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF2
        GetBufferPointer(self) -> itkVectorF2
        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,2 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,2 >,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageVF23_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageVF23_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF23_ConstPointer_swigregister(itkCudaImageVF23_ConstPointer)

def itkCudaImageVF24_New():
    return itkCudaImageVF24.New()

class itkCudaImageVF24(itk.itkImagePython.itkImageVF24):
    r"""Proxy of C++ itkCudaImageVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageVF24_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF24___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF24_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF24_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageVF24_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF2 const &

        """
        return _itkCudaImagePython.itkCudaImageVF24_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVectorF2 const &

        """
        return _itkCudaImagePython.itkCudaImageVF24_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF2

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVectorF2

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageVF24_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageVF24_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF2
        GetBufferPointer(self) -> itkVectorF2
        """
        return _itkCudaImagePython.itkCudaImageVF24_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF24_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,2 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,2 >,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF24_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > *

        """
        return _itkCudaImagePython.itkCudaImageVF24_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF24_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIVF24"""
        return _itkCudaImagePython.itkCudaImageVF24_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIVF24
        GetDataManager(self) -> itkCudaImageDataManagerCIVF24
        """
        return _itkCudaImagePython.itkCudaImageVF24_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF24_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageVF24 const *

        """
        return _itkCudaImagePython.itkCudaImageVF24_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageVF24_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageVF24

        Create a new object of the class itkCudaImageVF24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageVF24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageVF24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageVF24.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageVF24 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF24_swigregister(itkCudaImageVF24)
class itkCudaImageVF24_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageVF24_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageVF24_ConstPointer
        __init__(self, p) -> itkCudaImageVF24_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF24_ConstPointer const &

        __init__(self, p) -> itkCudaImageVF24_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF24 const *

        """
        _itkCudaImagePython.itkCudaImageVF24_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageVF24_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF24_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageVF24"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageVF24"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageVF24"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageVF24"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageVF24

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageVF24_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF24_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF2
        GetBufferPointer(self) -> itkVectorF2
        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,2 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,2 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,2 >,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,2 > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageVF24_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageVF24_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF24_ConstPointer_swigregister(itkCudaImageVF24_ConstPointer)

def itkCudaImageVF32_New():
    return itkCudaImageVF32.New()

class itkCudaImageVF32(itk.itkImagePython.itkImageVF32):
    r"""Proxy of C++ itkCudaImageVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageVF32_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF32_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF32_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageVF32_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF3 const &

        """
        return _itkCudaImagePython.itkCudaImageVF32_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVectorF3 const &

        """
        return _itkCudaImagePython.itkCudaImageVF32_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF3

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVectorF3

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageVF32_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageVF32_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF3
        GetBufferPointer(self) -> itkVectorF3
        """
        return _itkCudaImagePython.itkCudaImageVF32_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > > const
        """
        return _itkCudaImagePython.itkCudaImageVF32_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float > > > const
        """
        return _itkCudaImagePython.itkCudaImageVF32_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float > > *

        """
        return _itkCudaImagePython.itkCudaImageVF32_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF32_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIVF32"""
        return _itkCudaImagePython.itkCudaImageVF32_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIVF32
        GetDataManager(self) -> itkCudaImageDataManagerCIVF32
        """
        return _itkCudaImagePython.itkCudaImageVF32_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF32_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageVF32 const *

        """
        return _itkCudaImagePython.itkCudaImageVF32_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageVF32_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageVF32

        Create a new object of the class itkCudaImageVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageVF32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageVF32 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF32_swigregister(itkCudaImageVF32)
class itkCudaImageVF32_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageVF32_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageVF32_ConstPointer
        __init__(self, p) -> itkCudaImageVF32_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF32_ConstPointer const &

        __init__(self, p) -> itkCudaImageVF32_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF32 const *

        """
        _itkCudaImagePython.itkCudaImageVF32_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageVF32_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF32_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageVF32"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageVF32"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageVF32"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageVF32"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageVF32

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageVF32_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF32_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF3
        GetBufferPointer(self) -> itkVectorF3
        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > > const
        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float > > > const
        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageVF32_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageVF32_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF32_ConstPointer_swigregister(itkCudaImageVF32_ConstPointer)

def itkCudaImageVF33_New():
    return itkCudaImageVF33.New()

class itkCudaImageVF33(itk.itkImagePython.itkImageVF33):
    r"""Proxy of C++ itkCudaImageVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageVF33_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF33_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF33_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageVF33_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF3 const &

        """
        return _itkCudaImagePython.itkCudaImageVF33_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorF3 const &

        """
        return _itkCudaImagePython.itkCudaImageVF33_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF3

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorF3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageVF33_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageVF33_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF3
        GetBufferPointer(self) -> itkVectorF3
        """
        return _itkCudaImagePython.itkCudaImageVF33_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > > const
        """
        return _itkCudaImagePython.itkCudaImageVF33_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float >,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF33_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float > > *

        """
        return _itkCudaImagePython.itkCudaImageVF33_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF33_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIVF33"""
        return _itkCudaImagePython.itkCudaImageVF33_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIVF33
        GetDataManager(self) -> itkCudaImageDataManagerCIVF33
        """
        return _itkCudaImagePython.itkCudaImageVF33_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF33_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageVF33 const *

        """
        return _itkCudaImagePython.itkCudaImageVF33_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageVF33

        Create a new object of the class itkCudaImageVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageVF33 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF33_swigregister(itkCudaImageVF33)
class itkCudaImageVF33_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageVF33_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageVF33_ConstPointer
        __init__(self, p) -> itkCudaImageVF33_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF33_ConstPointer const &

        __init__(self, p) -> itkCudaImageVF33_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF33 const *

        """
        _itkCudaImagePython.itkCudaImageVF33_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageVF33_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF33_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageVF33"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageVF33"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageVF33"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageVF33"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageVF33

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageVF33_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF33_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF3
        GetBufferPointer(self) -> itkVectorF3
        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > > const
        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float >,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageVF33_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageVF33_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF33_ConstPointer_swigregister(itkCudaImageVF33_ConstPointer)

def itkCudaImageVF34_New():
    return itkCudaImageVF34.New()

class itkCudaImageVF34(itk.itkImagePython.itkImageVF34):
    r"""Proxy of C++ itkCudaImageVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageVF34_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF34___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF34_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF34_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageVF34_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF3 const &

        """
        return _itkCudaImagePython.itkCudaImageVF34_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVectorF3 const &

        """
        return _itkCudaImagePython.itkCudaImageVF34_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF3

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVectorF3

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageVF34_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageVF34_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF3
        GetBufferPointer(self) -> itkVectorF3
        """
        return _itkCudaImagePython.itkCudaImageVF34_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > > const
        """
        return _itkCudaImagePython.itkCudaImageVF34_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float >,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF34_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float > > *

        """
        return _itkCudaImagePython.itkCudaImageVF34_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF34_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIVF34"""
        return _itkCudaImagePython.itkCudaImageVF34_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIVF34
        GetDataManager(self) -> itkCudaImageDataManagerCIVF34
        """
        return _itkCudaImagePython.itkCudaImageVF34_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF34_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageVF34 const *

        """
        return _itkCudaImagePython.itkCudaImageVF34_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageVF34_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageVF34

        Create a new object of the class itkCudaImageVF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageVF34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageVF34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageVF34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageVF34 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF34_swigregister(itkCudaImageVF34)
class itkCudaImageVF34_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageVF34_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageVF34_ConstPointer
        __init__(self, p) -> itkCudaImageVF34_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF34_ConstPointer const &

        __init__(self, p) -> itkCudaImageVF34_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF34 const *

        """
        _itkCudaImagePython.itkCudaImageVF34_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageVF34_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF34_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageVF34"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageVF34"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageVF34"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageVF34"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageVF34

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageVF34_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF34_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF3
        GetBufferPointer(self) -> itkVectorF3
        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float > > const
        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float >,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageVF34_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageVF34_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF34_ConstPointer_swigregister(itkCudaImageVF34_ConstPointer)

def itkCudaImageVF42_New():
    return itkCudaImageVF42.New()

class itkCudaImageVF42(itk.itkImagePython.itkImageVF42):
    r"""Proxy of C++ itkCudaImageVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageVF42_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF42___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF42_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF42_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageVF42_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF4 const &

        """
        return _itkCudaImagePython.itkCudaImageVF42_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVectorF4 const &

        """
        return _itkCudaImagePython.itkCudaImageVF42_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF4

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVectorF4

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageVF42_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageVF42_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF4
        GetBufferPointer(self) -> itkVectorF4
        """
        return _itkCudaImagePython.itkCudaImageVF42_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF42_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,4 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,4 > > > const
        """
        return _itkCudaImagePython.itkCudaImageVF42_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > *

        """
        return _itkCudaImagePython.itkCudaImageVF42_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF42_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIVF42"""
        return _itkCudaImagePython.itkCudaImageVF42_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIVF42
        GetDataManager(self) -> itkCudaImageDataManagerCIVF42
        """
        return _itkCudaImagePython.itkCudaImageVF42_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF42_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageVF42 const *

        """
        return _itkCudaImagePython.itkCudaImageVF42_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageVF42_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageVF42

        Create a new object of the class itkCudaImageVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageVF42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageVF42 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF42_swigregister(itkCudaImageVF42)
class itkCudaImageVF42_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageVF42_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageVF42_ConstPointer
        __init__(self, p) -> itkCudaImageVF42_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF42_ConstPointer const &

        __init__(self, p) -> itkCudaImageVF42_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF42 const *

        """
        _itkCudaImagePython.itkCudaImageVF42_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageVF42_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF42_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageVF42"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageVF42"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageVF42"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageVF42"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageVF42

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageVF42_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF42_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF4
        GetBufferPointer(self) -> itkVectorF4
        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,4 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,4 > > > const
        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageVF42_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageVF42_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF42_ConstPointer_swigregister(itkCudaImageVF42_ConstPointer)

def itkCudaImageVF43_New():
    return itkCudaImageVF43.New()

class itkCudaImageVF43(itk.itkImagePython.itkImageVF43):
    r"""Proxy of C++ itkCudaImageVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageVF43_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF43_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF43_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageVF43_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF4 const &

        """
        return _itkCudaImagePython.itkCudaImageVF43_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorF4 const &

        """
        return _itkCudaImagePython.itkCudaImageVF43_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF4

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorF4

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageVF43_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageVF43_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF4
        GetBufferPointer(self) -> itkVectorF4
        """
        return _itkCudaImagePython.itkCudaImageVF43_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF43_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,4 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,4 >,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF43_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > *

        """
        return _itkCudaImagePython.itkCudaImageVF43_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF43_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIVF43"""
        return _itkCudaImagePython.itkCudaImageVF43_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIVF43
        GetDataManager(self) -> itkCudaImageDataManagerCIVF43
        """
        return _itkCudaImagePython.itkCudaImageVF43_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF43_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageVF43 const *

        """
        return _itkCudaImagePython.itkCudaImageVF43_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageVF43

        Create a new object of the class itkCudaImageVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageVF43 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF43_swigregister(itkCudaImageVF43)
class itkCudaImageVF43_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageVF43_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageVF43_ConstPointer
        __init__(self, p) -> itkCudaImageVF43_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF43_ConstPointer const &

        __init__(self, p) -> itkCudaImageVF43_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF43 const *

        """
        _itkCudaImagePython.itkCudaImageVF43_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageVF43_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF43_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageVF43"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageVF43"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageVF43"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageVF43"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageVF43

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageVF43_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF43_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF4
        GetBufferPointer(self) -> itkVectorF4
        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,4 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,4 >,3 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageVF43_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageVF43_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF43_ConstPointer_swigregister(itkCudaImageVF43_ConstPointer)

def itkCudaImageVF44_New():
    return itkCudaImageVF44.New()

class itkCudaImageVF44(itk.itkImagePython.itkImageVF44):
    r"""Proxy of C++ itkCudaImageVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCudaImageVF44_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF44_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF44_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCudaImagePython.itkCudaImageVF44_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF4 const &

        """
        return _itkCudaImagePython.itkCudaImageVF44_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVectorF4 const &

        """
        return _itkCudaImagePython.itkCudaImageVF44_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF4

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVectorF4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageVF44_GetPixel(self, *args)

    def UpdateBuffers(self):
        r"""UpdateBuffers(self)"""
        return _itkCudaImagePython.itkCudaImageVF44_UpdateBuffers(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF4
        GetBufferPointer(self) -> itkVectorF4
        """
        return _itkCudaImagePython.itkCudaImageVF44_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF44_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,4 >,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF44_GetNeighborhoodAccessor(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > *

        """
        return _itkCudaImagePython.itkCudaImageVF44_SetPixelContainer(self, container)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF44_GetPixelContainer(self, *args)

    def GetModifiableDataManager(self):
        r"""GetModifiableDataManager(self) -> itkCudaImageDataManagerCIVF44"""
        return _itkCudaImagePython.itkCudaImageVF44_GetModifiableDataManager(self)

    def GetDataManager(self, *args):
        r"""
        GetDataManager(self) -> itkCudaImageDataManagerCIVF44
        GetDataManager(self) -> itkCudaImageDataManagerCIVF44
        """
        return _itkCudaImagePython.itkCudaImageVF44_GetDataManager(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF44_GetCudaDataManager(self)

    def Graft(self, data):
        r"""
        Graft(self, data)

        Parameters
        ----------
        data: itkCudaImageVF44 const *

        """
        return _itkCudaImagePython.itkCudaImageVF44_Graft(self, data)

    @property
    def __cuda_array_interface__(self):
        _pixelType = "F"
        _typestr = _get_type_string(_pixelType)

        _itksize = self.GetBufferedRegion().GetSize()
        _dim     = len(_itksize)
        _shape   = [int(_itksize[idx]) for idx in range(_dim)]

        if self.GetNumberOfComponentsPerPixel() > 1:
            _shape = [self.GetNumberOfComponentsPerPixel(), ] + _shape

    # Reverse array to force C-order indexing. This is the reverse of how
    # indices are specified in ITK, i.e. k,j,i versus i,j,k. However
    # C-order indexing is expected by most algorithms in NumPy / SciPy.
        _shape.reverse()
        _shape = tuple(_shape)

        return {
            'shape': _shape,
            'data': (int(self.GetCudaDataManager().GetGPUBufferPointer()), False),
            'typestr': _typestr,
            'descr': [('', _typestr)],
            'version': 3,
            'stream': None,
            'strides': None
        }

    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCudaImageVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCudaImagePython.itkCudaImageVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCudaImageVF44

        Create a new object of the class itkCudaImageVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageVF44 in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF44_swigregister(itkCudaImageVF44)
class itkCudaImageVF44_ConstPointer(object):
    r"""Proxy of C++ itkCudaImageVF44_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCudaImageVF44_ConstPointer
        __init__(self, p) -> itkCudaImageVF44_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF44_ConstPointer const &

        __init__(self, p) -> itkCudaImageVF44_ConstPointer

        Parameters
        ----------
        p: itkCudaImageVF44 const *

        """
        _itkCudaImagePython.itkCudaImageVF44_ConstPointer_swiginit(self, _itkCudaImagePython.new_itkCudaImageVF44_ConstPointer(*args))
    __swig_destroy__ = _itkCudaImagePython.delete_itkCudaImageVF44_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkCudaImageVF44"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkCudaImageVF44"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkCudaImageVF44"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkCudaImageVF44"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkCudaImageVF44

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkCudaImageVF44_ConstPointer &

        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_Swap(self, other)

    def Clone(self):
        r"""Clone(self) -> itkCudaImageVF44_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF4
        GetBufferPointer(self) -> itkVectorF4
        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::CudaImage< itk::Vector< float,4 >,4 > > const
        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,4 > > const *
        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetPixelContainer(self, *args)

    def GetCudaDataManager(self):
        r"""GetCudaDataManager(self) -> itkCudaDataManager_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetCudaDataManager(self)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkCudaImagePython.itkCudaImageVF44_ConstPointer_GetReferenceCount(self)

# Register itkCudaImageVF44_ConstPointer in _itkCudaImagePython:
_itkCudaImagePython.itkCudaImageVF44_ConstPointer_swigregister(itkCudaImageVF44_ConstPointer)

