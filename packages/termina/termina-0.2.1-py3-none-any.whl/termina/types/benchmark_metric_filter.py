# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .benchmark_metric_condition import BenchmarkMetricCondition


class BenchmarkMetricFilter(UniversalBaseModel):
    """
    Filter for nested benchmark_metrics field.

    Example:
    {
        "field_name": "revenue",
        "conditions": [
            {"operator": "gte", "value": 1000000},
            {"operator": "lte", "value": 5000000}
        ]
    }
    """

    field_name: str
    conditions: typing.Optional[typing.List[BenchmarkMetricCondition]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
