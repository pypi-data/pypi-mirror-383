# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class ContributionResponse(UniversalBaseModel):
    """
    Represents the cohortized contribution for the Unit Economics for the specified user type.

    This approach assumes all acquisition spend was toward the specified user type.

    This is the core input to deriving certain unit-economic aggregate metrics.
    """

    cohort: str = pydantic.Field()
    """
    The date of the cohort.
    """

    period: int = pydantic.Field()
    """
    The period of the cohort. 0 is the first period.
    """

    cohort_size: int = pydantic.Field()
    """
    The number of users in the cohort.
    """

    cac: typing.Optional[float] = pydantic.Field(default=None)
    """
    The customer acquisition cost (CAC) for the cohort.
    """

    ltv: typing.Optional[float] = pydantic.Field(default=None)
    """
    The revenue lifetime value (LTV) for the cohort.
    """

    ltv_cac: typing.Optional[float] = pydantic.Field(default=None)
    """
    The LTV to CAC ratio for the cohort for the period.
    """

    gmltv: typing.Optional[float] = pydantic.Field(default=None)
    """
    The gross-margin lifetime value, which is the cumululative gross profit, for the cohort for the period.
    """

    gmltv_cac: typing.Optional[float] = pydantic.Field(default=None)
    """
    The gmLTV to CAC ratio for the cohort for the period. This related to the contribution margin.
    """

    contribution: typing.Optional[float] = pydantic.Field(default=None)
    """
    The contribution (gmLTV - CAC) for the cohort for the period.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
