# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.deal_extra_metadata_response import DealExtraMetadataResponse
from ..types.deal_metadata_tag import DealMetadataTag
from ..types.deal_search_filter import DealSearchFilter
from ..types.deal_with_files_response import DealWithFilesResponse
from ..types.list_deals_response import ListDealsResponse
from ..types.paginated_response_search_deal_response import PaginatedResponseSearchDealResponse
from ..types.priority import Priority
from .raw_client import AsyncRawDealClient, RawDealClient
from .types.metadata import Metadata

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DealClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawDealClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawDealClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawDealClient
        """
        return self._raw_client

    def create(
        self,
        group_id: int,
        *,
        round_name: str,
        company_id: int,
        notes: typing.Optional[str] = OMIT,
        priority: typing.Optional[Priority] = OMIT,
        round_amount: typing.Optional[int] = OMIT,
        round_target: typing.Optional[int] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        company_summary: typing.Optional[str] = OMIT,
        deal_lead_id: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealWithFilesResponse:
        """
        Create a new deal.

        Parameters
        ----------
        group_id : int

        round_name : str
            The name of the round

        company_id : int

        notes : typing.Optional[str]
            Notes about the deal

        priority : typing.Optional[Priority]
            The priority of the deal

        round_amount : typing.Optional[int]
            The dollar amount to be raised of the round

        round_target : typing.Optional[int]
            The target post-money dollar amount of the round

        tags : typing.Optional[typing.Sequence[str]]
            The tags associated with the deal

        company_summary : typing.Optional[str]
            The summary of the company

        deal_lead_id : typing.Optional[int]
            The id of the user who is the deal lead

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealWithFilesResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.create(
            group_id=1,
            round_name="round_name",
            company_id=1,
        )
        """
        _response = self._raw_client.create(
            group_id,
            round_name=round_name,
            company_id=company_id,
            notes=notes,
            priority=priority,
            round_amount=round_amount,
            round_target=round_target,
            tags=tags,
            company_summary=company_summary,
            deal_lead_id=deal_lead_id,
            request_options=request_options,
        )
        return _response.data

    def list(
        self,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDealsResponse:
        """
        Get all deals for a group.

        Parameters
        ----------
        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDealsResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.list(
            group_id=1,
        )
        """
        _response = self._raw_client.list(
            group_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    def search(
        self,
        group_id: int,
        *,
        round_name: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        tags: typing.Optional[str] = None,
        company_name: typing.Optional[str] = None,
        company_domain: typing.Optional[str] = None,
        categories: typing.Optional[str] = None,
        deal_lead: typing.Optional[str] = None,
        ignore_archived: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDealsResponse:
        """
        Search deals within a group.

        Parameters
        ----------
        group_id : int

        round_name : typing.Optional[str]

        notes : typing.Optional[str]

        tags : typing.Optional[str]

        company_name : typing.Optional[str]

        company_domain : typing.Optional[str]

        categories : typing.Optional[str]

        deal_lead : typing.Optional[str]

        ignore_archived : typing.Optional[bool]

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDealsResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.search(
            group_id=1,
        )
        """
        _response = self._raw_client.search(
            group_id,
            round_name=round_name,
            notes=notes,
            tags=tags,
            company_name=company_name,
            company_domain=company_domain,
            categories=categories,
            deal_lead=deal_lead,
            ignore_archived=ignore_archived,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    def search_advanced(
        self,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        filters: typing.Optional[DealSearchFilter] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedResponseSearchDealResponse:
        """
        Search deals within a group using flexible filters.

        Parameters
        ----------
        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        filters : typing.Optional[DealSearchFilter]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedResponseSearchDealResponse
            Successful Response

        Examples
        --------
        from termina import (
            BenchmarkMetricCondition,
            BenchmarkMetricFilter,
            DealSearchFilter,
            Termina,
        )

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.search_advanced(
            group_id=1,
            filters=DealSearchFilter(
                and_=[
                    DealSearchFilter(
                        round_name="Series A",
                    ),
                    DealSearchFilter(
                        benchmark_metrics=BenchmarkMetricFilter(
                            field_name="revenue",
                            conditions=[
                                BenchmarkMetricCondition(
                                    operator="gte",
                                    value=300000.0,
                                )
                            ],
                        ),
                    ),
                ],
            ),
        )
        """
        _response = self._raw_client.search_advanced(
            group_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            filters=filters,
            request_options=request_options,
        )
        return _response.data

    def get(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DealWithFilesResponse:
        """
        Retrieve a deal by its ID.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealWithFilesResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.get(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.get(group_id, deal_id, request_options=request_options)
        return _response.data

    def update(
        self,
        group_id: int,
        deal_id: int,
        *,
        round_name: typing.Optional[str] = OMIT,
        notes: typing.Optional[str] = OMIT,
        priority: typing.Optional[Priority] = OMIT,
        round_amount: typing.Optional[int] = OMIT,
        round_target: typing.Optional[int] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        company_summary: typing.Optional[str] = OMIT,
        deal_lead_id: typing.Optional[int] = OMIT,
        company_id: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealWithFilesResponse:
        """
        Update a deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        round_name : typing.Optional[str]

        notes : typing.Optional[str]
            Notes about the deal

        priority : typing.Optional[Priority]
            The priority of the deal

        round_amount : typing.Optional[int]
            The dollar amount to be raised of the round

        round_target : typing.Optional[int]
            The target post-money dollar amount of the round

        tags : typing.Optional[typing.Sequence[str]]
            The tags associated with the deal

        company_summary : typing.Optional[str]
            The summary of the company

        deal_lead_id : typing.Optional[int]
            The id of the user who is the deal lead

        company_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealWithFilesResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.update(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.update(
            group_id,
            deal_id,
            round_name=round_name,
            notes=notes,
            priority=priority,
            round_amount=round_amount,
            round_target=round_target,
            tags=tags,
            company_summary=company_summary,
            deal_lead_id=deal_lead_id,
            company_id=company_id,
            request_options=request_options,
        )
        return _response.data

    def delete(
        self,
        group_id: int,
        deal_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.delete(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.delete(group_id, deal_id, archive=archive, request_options=request_options)
        return _response.data

    def extra_metadata(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DealExtraMetadataResponse:
        """
        Retrieve extra metadata for a deal, such as questions and meeting times.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealExtraMetadataResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.extra_metadata(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.extra_metadata(group_id, deal_id, request_options=request_options)
        return _response.data

    def set_metadata(
        self,
        group_id: int,
        deal_id: int,
        metadata_tag: DealMetadataTag,
        *,
        request: Metadata,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealExtraMetadataResponse:
        """
        Create or update questions for a deal. If questions already exist for this deal, they will be updated.
        If no questions exist, they will be created.


        Limitations:
        - The metadata payload cannot exceed 2048 characters.

        Parameters
        ----------
        group_id : int

        deal_id : int

        metadata_tag : DealMetadataTag

        request : Metadata

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealExtraMetadataResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.set_metadata(
            group_id=1,
            deal_id=1,
            metadata_tag="questions",
            request={"key": "value"},
        )
        """
        _response = self._raw_client.set_metadata(
            group_id, deal_id, metadata_tag, request=request, request_options=request_options
        )
        return _response.data

    def delete_metadata(
        self,
        group_id: int,
        deal_id: int,
        metadata_tag: DealMetadataTag,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete questions for a deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        metadata_tag : DealMetadataTag

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.delete_metadata(
            group_id=1,
            deal_id=1,
            metadata_tag="questions",
        )
        """
        _response = self._raw_client.delete_metadata(
            group_id, deal_id, metadata_tag, archive=archive, request_options=request_options
        )
        return _response.data

    def order(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Submit an order for a deal scan to be performed.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.order(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.order(group_id, deal_id, request_options=request_options)
        return _response.data

    def get_comparable_deals(
        self,
        group_id: int,
        deal_id: int,
        *,
        category: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[DealWithFilesResponse]:
        """
        Get deals comparable to the current deal.

        Categories are required for meaningful comparison. Only deals with overlapping categories
        will be returned. If the current deal has no categories, no comparable deals will be returned.

        Returns the top 5 most recent deals with overlapping categories, sorted by updated timestamp.

        Parameters
        ----------
        group_id : int

        deal_id : int

        category : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DealWithFilesResponse]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.get_comparable_deals(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._raw_client.get_comparable_deals(
            group_id, deal_id, category=category, request_options=request_options
        )
        return _response.data


class AsyncDealClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawDealClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawDealClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawDealClient
        """
        return self._raw_client

    async def create(
        self,
        group_id: int,
        *,
        round_name: str,
        company_id: int,
        notes: typing.Optional[str] = OMIT,
        priority: typing.Optional[Priority] = OMIT,
        round_amount: typing.Optional[int] = OMIT,
        round_target: typing.Optional[int] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        company_summary: typing.Optional[str] = OMIT,
        deal_lead_id: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealWithFilesResponse:
        """
        Create a new deal.

        Parameters
        ----------
        group_id : int

        round_name : str
            The name of the round

        company_id : int

        notes : typing.Optional[str]
            Notes about the deal

        priority : typing.Optional[Priority]
            The priority of the deal

        round_amount : typing.Optional[int]
            The dollar amount to be raised of the round

        round_target : typing.Optional[int]
            The target post-money dollar amount of the round

        tags : typing.Optional[typing.Sequence[str]]
            The tags associated with the deal

        company_summary : typing.Optional[str]
            The summary of the company

        deal_lead_id : typing.Optional[int]
            The id of the user who is the deal lead

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealWithFilesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.create(
                group_id=1,
                round_name="round_name",
                company_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            group_id,
            round_name=round_name,
            company_id=company_id,
            notes=notes,
            priority=priority,
            round_amount=round_amount,
            round_target=round_target,
            tags=tags,
            company_summary=company_summary,
            deal_lead_id=deal_lead_id,
            request_options=request_options,
        )
        return _response.data

    async def list(
        self,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDealsResponse:
        """
        Get all deals for a group.

        Parameters
        ----------
        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDealsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.list(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            group_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    async def search(
        self,
        group_id: int,
        *,
        round_name: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        tags: typing.Optional[str] = None,
        company_name: typing.Optional[str] = None,
        company_domain: typing.Optional[str] = None,
        categories: typing.Optional[str] = None,
        deal_lead: typing.Optional[str] = None,
        ignore_archived: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDealsResponse:
        """
        Search deals within a group.

        Parameters
        ----------
        group_id : int

        round_name : typing.Optional[str]

        notes : typing.Optional[str]

        tags : typing.Optional[str]

        company_name : typing.Optional[str]

        company_domain : typing.Optional[str]

        categories : typing.Optional[str]

        deal_lead : typing.Optional[str]

        ignore_archived : typing.Optional[bool]

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDealsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.search(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search(
            group_id,
            round_name=round_name,
            notes=notes,
            tags=tags,
            company_name=company_name,
            company_domain=company_domain,
            categories=categories,
            deal_lead=deal_lead,
            ignore_archived=ignore_archived,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    async def search_advanced(
        self,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        filters: typing.Optional[DealSearchFilter] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedResponseSearchDealResponse:
        """
        Search deals within a group using flexible filters.

        Parameters
        ----------
        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        filters : typing.Optional[DealSearchFilter]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedResponseSearchDealResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import (
            AsyncTermina,
            BenchmarkMetricCondition,
            BenchmarkMetricFilter,
            DealSearchFilter,
        )

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.search_advanced(
                group_id=1,
                filters=DealSearchFilter(
                    and_=[
                        DealSearchFilter(
                            round_name="Series A",
                        ),
                        DealSearchFilter(
                            benchmark_metrics=BenchmarkMetricFilter(
                                field_name="revenue",
                                conditions=[
                                    BenchmarkMetricCondition(
                                        operator="gte",
                                        value=300000.0,
                                    )
                                ],
                            ),
                        ),
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search_advanced(
            group_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            filters=filters,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DealWithFilesResponse:
        """
        Retrieve a deal by its ID.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealWithFilesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.get(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(group_id, deal_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        group_id: int,
        deal_id: int,
        *,
        round_name: typing.Optional[str] = OMIT,
        notes: typing.Optional[str] = OMIT,
        priority: typing.Optional[Priority] = OMIT,
        round_amount: typing.Optional[int] = OMIT,
        round_target: typing.Optional[int] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        company_summary: typing.Optional[str] = OMIT,
        deal_lead_id: typing.Optional[int] = OMIT,
        company_id: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealWithFilesResponse:
        """
        Update a deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        round_name : typing.Optional[str]

        notes : typing.Optional[str]
            Notes about the deal

        priority : typing.Optional[Priority]
            The priority of the deal

        round_amount : typing.Optional[int]
            The dollar amount to be raised of the round

        round_target : typing.Optional[int]
            The target post-money dollar amount of the round

        tags : typing.Optional[typing.Sequence[str]]
            The tags associated with the deal

        company_summary : typing.Optional[str]
            The summary of the company

        deal_lead_id : typing.Optional[int]
            The id of the user who is the deal lead

        company_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealWithFilesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.update(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            group_id,
            deal_id,
            round_name=round_name,
            notes=notes,
            priority=priority,
            round_amount=round_amount,
            round_target=round_target,
            tags=tags,
            company_summary=company_summary,
            deal_lead_id=deal_lead_id,
            company_id=company_id,
            request_options=request_options,
        )
        return _response.data

    async def delete(
        self,
        group_id: int,
        deal_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.delete(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(group_id, deal_id, archive=archive, request_options=request_options)
        return _response.data

    async def extra_metadata(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DealExtraMetadataResponse:
        """
        Retrieve extra metadata for a deal, such as questions and meeting times.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealExtraMetadataResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.extra_metadata(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.extra_metadata(group_id, deal_id, request_options=request_options)
        return _response.data

    async def set_metadata(
        self,
        group_id: int,
        deal_id: int,
        metadata_tag: DealMetadataTag,
        *,
        request: Metadata,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealExtraMetadataResponse:
        """
        Create or update questions for a deal. If questions already exist for this deal, they will be updated.
        If no questions exist, they will be created.


        Limitations:
        - The metadata payload cannot exceed 2048 characters.

        Parameters
        ----------
        group_id : int

        deal_id : int

        metadata_tag : DealMetadataTag

        request : Metadata

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealExtraMetadataResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.set_metadata(
                group_id=1,
                deal_id=1,
                metadata_tag="questions",
                request={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.set_metadata(
            group_id, deal_id, metadata_tag, request=request, request_options=request_options
        )
        return _response.data

    async def delete_metadata(
        self,
        group_id: int,
        deal_id: int,
        metadata_tag: DealMetadataTag,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete questions for a deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        metadata_tag : DealMetadataTag

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.delete_metadata(
                group_id=1,
                deal_id=1,
                metadata_tag="questions",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_metadata(
            group_id, deal_id, metadata_tag, archive=archive, request_options=request_options
        )
        return _response.data

    async def order(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Submit an order for a deal scan to be performed.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.order(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.order(group_id, deal_id, request_options=request_options)
        return _response.data

    async def get_comparable_deals(
        self,
        group_id: int,
        deal_id: int,
        *,
        category: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[DealWithFilesResponse]:
        """
        Get deals comparable to the current deal.

        Categories are required for meaningful comparison. Only deals with overlapping categories
        will be returned. If the current deal has no categories, no comparable deals will be returned.

        Returns the top 5 most recent deals with overlapping categories, sorted by updated timestamp.

        Parameters
        ----------
        group_id : int

        deal_id : int

        category : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DealWithFilesResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.get_comparable_deals(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_comparable_deals(
            group_id, deal_id, category=category, request_options=request_options
        )
        return _response.data
