# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.weather_components import WeatherComponents
from ..types.weather_gauge import WeatherGauge
from ..types.weather_market_context import WeatherMarketContext
from ..types.weather_metadata import WeatherMetadata
from .raw_client import AsyncRawMacroClient, RawMacroClient


class MacroClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMacroClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMacroClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMacroClient
        """
        return self._raw_client

    def get_segmentations(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[str]:
        """
        Returns the available segmentations for the weather module.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.macro.get_segmentations()
        """
        _response = self._raw_client.get_segmentations(request_options=request_options)
        return _response.data

    def get_metadata(
        self, segmentation: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[WeatherMetadata]:
        """
        Returns segmentation metadata for each of the classes of segmentations "geo" and "sector".

        The geography ("geo") segmentation type refers to major geographic segmentations.

        The "sector" segmentation type refers to major business model categories in the USA geography.

        The metadata includes parameters used to generate the respective indicators, and the metadata needed to
        retrieve the series from the API.

        Parameters
        ----------
        segmentation : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[WeatherMetadata]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.macro.get_metadata(
            segmentation="segmentation",
        )
        """
        _response = self._raw_client.get_metadata(segmentation, request_options=request_options)
        return _response.data

    def get_gauge(
        self,
        segmentation: str,
        *,
        slug: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[WeatherGauge]:
        """
        Returns the overall weather indicator, combined across all stages, for the given segmentation slug(s).

        If no slug is provided, the endpoint will return the gauge for all available segmentations.

        Parameters
        ----------
        segmentation : str

        slug : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[WeatherGauge]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.macro.get_gauge(
            segmentation="segmentation",
        )
        """
        _response = self._raw_client.get_gauge(segmentation, slug=slug, request_options=request_options)
        return _response.data

    def get_components(
        self, segmentation: str, slug: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[WeatherComponents]:
        """
        Returns the individual components of the weather indicator and some of the underlying inputs of those component gauges for the given segmentation slug.

        Parameters
        ----------
        segmentation : str

        slug : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[WeatherComponents]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.macro.get_components(
            segmentation="segmentation",
            slug="slug",
        )
        """
        _response = self._raw_client.get_components(segmentation, slug, request_options=request_options)
        return _response.data

    def get_market_context(
        self, segmentation: str, slug: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[WeatherMarketContext]:
        """
        Returns simplified contextual metrics about relevant stages and market activity for the given segmentation slug.

        Parameters
        ----------
        segmentation : str

        slug : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[WeatherMarketContext]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.macro.get_market_context(
            segmentation="segmentation",
            slug="slug",
        )
        """
        _response = self._raw_client.get_market_context(segmentation, slug, request_options=request_options)
        return _response.data


class AsyncMacroClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMacroClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMacroClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMacroClient
        """
        return self._raw_client

    async def get_segmentations(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[str]:
        """
        Returns the available segmentations for the weather module.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.macro.get_segmentations()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_segmentations(request_options=request_options)
        return _response.data

    async def get_metadata(
        self, segmentation: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[WeatherMetadata]:
        """
        Returns segmentation metadata for each of the classes of segmentations "geo" and "sector".

        The geography ("geo") segmentation type refers to major geographic segmentations.

        The "sector" segmentation type refers to major business model categories in the USA geography.

        The metadata includes parameters used to generate the respective indicators, and the metadata needed to
        retrieve the series from the API.

        Parameters
        ----------
        segmentation : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[WeatherMetadata]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.macro.get_metadata(
                segmentation="segmentation",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_metadata(segmentation, request_options=request_options)
        return _response.data

    async def get_gauge(
        self,
        segmentation: str,
        *,
        slug: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[WeatherGauge]:
        """
        Returns the overall weather indicator, combined across all stages, for the given segmentation slug(s).

        If no slug is provided, the endpoint will return the gauge for all available segmentations.

        Parameters
        ----------
        segmentation : str

        slug : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[WeatherGauge]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.macro.get_gauge(
                segmentation="segmentation",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_gauge(segmentation, slug=slug, request_options=request_options)
        return _response.data

    async def get_components(
        self, segmentation: str, slug: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[WeatherComponents]:
        """
        Returns the individual components of the weather indicator and some of the underlying inputs of those component gauges for the given segmentation slug.

        Parameters
        ----------
        segmentation : str

        slug : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[WeatherComponents]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.macro.get_components(
                segmentation="segmentation",
                slug="slug",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_components(segmentation, slug, request_options=request_options)
        return _response.data

    async def get_market_context(
        self, segmentation: str, slug: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[WeatherMarketContext]:
        """
        Returns simplified contextual metrics about relevant stages and market activity for the given segmentation slug.

        Parameters
        ----------
        segmentation : str

        slug : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[WeatherMarketContext]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.macro.get_market_context(
                segmentation="segmentation",
                slug="slug",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_market_context(segmentation, slug, request_options=request_options)
        return _response.data
