# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.json_value import JsonValue
from ..types.paginated_response_thread_response import PaginatedResponseThreadResponse
from ..types.thread_response import ThreadResponse
from ..types.thread_with_files_and_messages_response import ThreadWithFilesAndMessagesResponse
from .raw_client import AsyncRawThreadClient, RawThreadClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ThreadClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawThreadClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawThreadClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawThreadClient
        """
        return self._raw_client

    def create(
        self,
        group_id: int,
        *,
        title: typing.Optional[str] = OMIT,
        extra: typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]] = OMIT,
        initialization_message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadResponse:
        """
        Create a new thread with the following title logic:
        1. If title is provided in the request, use that
        2. If no title but initialization message exists, use that as a prompt to generate title
        3. Otherwise default to "New Thread"

        Parameters
        ----------
        group_id : int

        title : typing.Optional[str]
            The title of the thread

        extra : typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]]
            Extra metadata for the thread

        initialization_message : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.thread.create(
            group_id=1,
        )
        """
        _response = self._raw_client.create(
            group_id,
            title=title,
            extra=extra,
            initialization_message=initialization_message,
            request_options=request_options,
        )
        return _response.data

    def list(
        self,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedResponseThreadResponse:
        """
        Get all threads for a specific group.

        Parameters
        ----------
        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedResponseThreadResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.thread.list(
            group_id=1,
        )
        """
        _response = self._raw_client.list(
            group_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    def search(
        self,
        group_id: int,
        *,
        title: str,
        ignore_archived: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedResponseThreadResponse:
        """
        Search threads within a group.

        Parameters
        ----------
        group_id : int

        title : str

        ignore_archived : typing.Optional[bool]

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedResponseThreadResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.thread.search(
            group_id=1,
            title="title",
        )
        """
        _response = self._raw_client.search(
            group_id,
            title=title,
            ignore_archived=ignore_archived,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    def get(
        self, group_id: int, thread_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ThreadWithFilesAndMessagesResponse:
        """
        Basic implementation to get a thread with its files and messages

        Parameters
        ----------
        group_id : int

        thread_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadWithFilesAndMessagesResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.thread.get(
            group_id=1,
            thread_id=1,
        )
        """
        _response = self._raw_client.get(group_id, thread_id, request_options=request_options)
        return _response.data

    def delete(
        self,
        thread_id: int,
        group_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a thread.

        Parameters
        ----------
        thread_id : int

        group_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.thread.delete(
            thread_id=1,
            group_id=1,
        )
        """
        _response = self._raw_client.delete(thread_id, group_id, archive=archive, request_options=request_options)
        return _response.data

    def update(
        self,
        thread_id: int,
        group_id: int,
        *,
        title: typing.Optional[str] = OMIT,
        extra: typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]] = OMIT,
        initialization_message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadWithFilesAndMessagesResponse:
        """
        Update a thread.

        Parameters
        ----------
        thread_id : int

        group_id : int

        title : typing.Optional[str]
            The title of the thread

        extra : typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]]
            Extra metadata for the thread

        initialization_message : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadWithFilesAndMessagesResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.thread.update(
            thread_id=1,
            group_id=1,
        )
        """
        _response = self._raw_client.update(
            thread_id,
            group_id,
            title=title,
            extra=extra,
            initialization_message=initialization_message,
            request_options=request_options,
        )
        return _response.data


class AsyncThreadClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawThreadClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawThreadClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawThreadClient
        """
        return self._raw_client

    async def create(
        self,
        group_id: int,
        *,
        title: typing.Optional[str] = OMIT,
        extra: typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]] = OMIT,
        initialization_message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadResponse:
        """
        Create a new thread with the following title logic:
        1. If title is provided in the request, use that
        2. If no title but initialization message exists, use that as a prompt to generate title
        3. Otherwise default to "New Thread"

        Parameters
        ----------
        group_id : int

        title : typing.Optional[str]
            The title of the thread

        extra : typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]]
            Extra metadata for the thread

        initialization_message : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.thread.create(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            group_id,
            title=title,
            extra=extra,
            initialization_message=initialization_message,
            request_options=request_options,
        )
        return _response.data

    async def list(
        self,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedResponseThreadResponse:
        """
        Get all threads for a specific group.

        Parameters
        ----------
        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedResponseThreadResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.thread.list(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            group_id,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    async def search(
        self,
        group_id: int,
        *,
        title: str,
        ignore_archived: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedResponseThreadResponse:
        """
        Search threads within a group.

        Parameters
        ----------
        group_id : int

        title : str

        ignore_archived : typing.Optional[bool]

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedResponseThreadResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.thread.search(
                group_id=1,
                title="title",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search(
            group_id,
            title=title,
            ignore_archived=ignore_archived,
            sort_by=sort_by,
            sort_order=sort_order,
            page=page,
            page_size=page_size,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self, group_id: int, thread_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ThreadWithFilesAndMessagesResponse:
        """
        Basic implementation to get a thread with its files and messages

        Parameters
        ----------
        group_id : int

        thread_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadWithFilesAndMessagesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.thread.get(
                group_id=1,
                thread_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(group_id, thread_id, request_options=request_options)
        return _response.data

    async def delete(
        self,
        thread_id: int,
        group_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a thread.

        Parameters
        ----------
        thread_id : int

        group_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.thread.delete(
                thread_id=1,
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(thread_id, group_id, archive=archive, request_options=request_options)
        return _response.data

    async def update(
        self,
        thread_id: int,
        group_id: int,
        *,
        title: typing.Optional[str] = OMIT,
        extra: typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]] = OMIT,
        initialization_message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ThreadWithFilesAndMessagesResponse:
        """
        Update a thread.

        Parameters
        ----------
        thread_id : int

        group_id : int

        title : typing.Optional[str]
            The title of the thread

        extra : typing.Optional[typing.Dict[str, typing.Optional[JsonValue]]]
            Extra metadata for the thread

        initialization_message : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ThreadWithFilesAndMessagesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.thread.update(
                thread_id=1,
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            thread_id,
            group_id,
            title=title,
            extra=extra,
            initialization_message=initialization_message,
            request_options=request_options,
        )
        return _response.data
