# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.authenticate_api_key_response import AuthenticateApiKeyResponse
from .raw_client import AsyncRawAuthClient, RawAuthClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AuthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAuthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAuthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAuthClient
        """
        return self._raw_client

    def get_token(
        self, *, api_key: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AuthenticateApiKeyResponse:
        """
        Authenticate an API key and return an access token

        Returns a client JWT for the provided API key, where the JWT contains claims for permissions and access and can be
        refreshed as part of an OAuth flow.

        Parameters
        ----------
        api_key : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuthenticateApiKeyResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.auth.get_token(
            api_key="api_key",
        )
        """
        _response = self._raw_client.get_token(api_key=api_key, request_options=request_options)
        return _response.data


class AsyncAuthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAuthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAuthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAuthClient
        """
        return self._raw_client

    async def get_token(
        self, *, api_key: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AuthenticateApiKeyResponse:
        """
        Authenticate an API key and return an access token

        Returns a client JWT for the provided API key, where the JWT contains claims for permissions and access and can be
        refreshed as part of an OAuth flow.

        Parameters
        ----------
        api_key : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuthenticateApiKeyResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.auth.get_token(
                api_key="api_key",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_token(api_key=api_key, request_options=request_options)
        return _response.data
